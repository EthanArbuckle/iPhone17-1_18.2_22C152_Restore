uint64_t sub_100288B28(uint64_t a1)
{
  destroy for FocusSelection();
  return a1;
}

uint64_t sub_100288B7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100288BD0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v7 = a3[9];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v10 = sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  v261 = a3;
  uint64_t v262 = a1;
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)(a2 + v12);
  *(_WORD *)(v13 + 4) = *(_WORD *)(a2 + v12 + 4);
  v259 = (int *)type metadata accessor for AppConfiguration();
  uint64_t v15 = v259[5];
  uint64_t v16 = v13 + v15;
  uint64_t v17 = v14 + v15;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)(v14 + v15);
  *(unsigned char *)(v16 + 1) = *(unsigned char *)(v14 + v15 + 1);
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v14 + v15 + 8);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(v14 + v15 + 24);
  *(_WORD *)(v16 + 28) = *(_WORD *)(v14 + v15 + 28);
  v18 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v19 = v18[10];
  v20 = (void *)(v16 + v19);
  v21 = (const void *)(v17 + v19);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  __dst = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  uint64_t v255 = v23;
  if (__dst(v21, 1, v22))
  {
    uint64_t v24 = sub_10000F214(&qword_10051E070);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))__dst;
  *(unsigned char *)(v16 + v18[11]) = *(unsigned char *)(v17 + v18[11]);
  uint64_t v26 = v18[12];
  uint64_t v27 = v16 + v26;
  uint64_t v28 = v17 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  *(void *)(v16 + v18[13]) = *(void *)(v17 + v18[13]);
  *(unsigned char *)(v16 + v18[14]) = *(unsigned char *)(v17 + v18[14]);
  *(unsigned char *)(v16 + v18[15]) = *(unsigned char *)(v17 + v18[15]);
  *(unsigned char *)(v16 + v18[16]) = *(unsigned char *)(v17 + v18[16]);
  *(unsigned char *)(v16 + v18[17]) = *(unsigned char *)(v17 + v18[17]);
  uint64_t v29 = v18[18];
  v30 = (void *)(v16 + v29);
  v31 = (const void *)(v17 + v29);
  if (__dst((const void *)(v17 + v29), 1, v22))
  {
    uint64_t v32 = sub_10000F214(&qword_10051E070);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v255 + 32))(v30, v31, v22);
    v25 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))__dst;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v255 + 56))(v30, 0, 1, v22);
  }
  uint64_t v33 = v262;
  *(unsigned char *)(v16 + v18[19]) = *(unsigned char *)(v17 + v18[19]);
  *(unsigned char *)(v16 + v18[20]) = *(unsigned char *)(v17 + v18[20]);
  *(unsigned char *)(v16 + v18[21]) = *(unsigned char *)(v17 + v18[21]);
  uint64_t v34 = v18[22];
  v35 = (void *)(v16 + v34);
  v36 = (const void *)(v17 + v34);
  if (v25(v17 + v34, 1, v22))
  {
    uint64_t v37 = sub_10000F214(&qword_10051E070);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v255 + 32))(v35, v36, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v255 + 56))(v35, 0, 1, v22);
  }
  v38 = v261;
  *(unsigned char *)(v13 + v259[6]) = *(unsigned char *)(v14 + v259[6]);
  *(_OWORD *)(v13 + v259[7]) = *(_OWORD *)(v14 + v259[7]);
  *(_WORD *)(v13 + v259[8]) = *(_WORD *)(v14 + v259[8]);
  *(_WORD *)(v13 + v259[10]) = *(_WORD *)(v14 + v259[10]);
  uint64_t v39 = v259[12];
  uint64_t v40 = v13 + v39;
  uint64_t v41 = v14 + v39;
  *(unsigned char *)(v40 + 2) = *(unsigned char *)(v41 + 2);
  *(_WORD *)uint64_t v40 = *(_WORD *)v41;
  *(_OWORD *)(v13 + v259[13]) = *(_OWORD *)(v14 + v259[13]);
  uint64_t v42 = sub_10000F214(&qword_100525F50);
  *(void *)(v13 + *(int *)(v42 + 28)) = *(void *)(v14 + *(int *)(v42 + 28));
  uint64_t v43 = v261[12];
  *(_OWORD *)(v262 + v261[11]) = *(_OWORD *)(a2 + v261[11]);
  v44 = (_OWORD *)(v262 + v43);
  v45 = (_OWORD *)(a2 + v43);
  uint64_t v46 = type metadata accessor for ResultLookupState();
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = sub_10000F214(&qword_10051A308);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int __dsta = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(__dsta)
          {
            case 1:
              uint64_t v122 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v122 - 8) + 32))(v44, v45, v122);
              v123 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v44 + v123[5]) = *(_DWORD *)((char *)v45 + v123[5]);
              uint64_t v124 = v123[6];
              v125 = (_OWORD *)((char *)v44 + v124);
              v126 = (_OWORD *)((char *)v45 + v124);
              long long v127 = v126[3];
              v125[2] = v126[2];
              v125[3] = v127;
              long long v128 = v126[1];
              _OWORD *v125 = *v126;
              v125[1] = v128;
              *(void *)((char *)v44 + v123[7]) = *(void *)((char *)v45 + v123[7]);
              *(void *)((char *)v44 + v123[8]) = *(void *)((char *)v45 + v123[8]);
              *(void *)((char *)v44 + v123[9]) = *(void *)((char *)v45 + v123[9]);
              *((unsigned char *)v44 + v123[10]) = *((unsigned char *)v45 + v123[10]);
              *(_OWORD *)((char *)v44 + v123[11]) = *(_OWORD *)((char *)v45 + v123[11]);
              *(_OWORD *)((char *)v44 + v123[12]) = *(_OWORD *)((char *)v45 + v123[12]);
              uint64_t v129 = v123[13];
              v257 = (char *)v44 + v129;
              v130 = (char *)v45 + v129;
              uint64_t v131 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v132 = *(void *)(v131 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
              {
                uint64_t v133 = sub_10000F214(&qword_100524BD0);
                memcpy(v257, v130, *(void *)(*(void *)(v133 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v257, v130, v131);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v257, 0, 1, v131);
              }
              *(_OWORD *)((char *)v44 + v123[14]) = *(_OWORD *)((char *)v45 + v123[14]);
              uint64_t v249 = v123[15];
              v250 = (char *)v44 + v249;
              v251 = (char *)v45 + v249;
              *((void *)v250 + 2) = *((void *)v251 + 2);
              *(_OWORD *)v250 = *(_OWORD *)v251;
              uint64_t v33 = v262;
              goto LABEL_47;
            case 2:
              uint64_t v134 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v134 - 8) + 32))(v44, v45, v134);
              v135 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v44 + v135[5]) = *(_DWORD *)((char *)v45 + v135[5]);
              uint64_t v136 = v135[6];
              v137 = (_OWORD *)((char *)v44 + v136);
              v138 = (_OWORD *)((char *)v45 + v136);
              long long v139 = v138[3];
              v137[2] = v138[2];
              v137[3] = v139;
              long long v140 = v138[1];
              _OWORD *v137 = *v138;
              v137[1] = v140;
              *(_OWORD *)((char *)v44 + v135[7]) = *(_OWORD *)((char *)v45 + v135[7]);
              *(void *)((char *)v44 + v135[8]) = *(void *)((char *)v45 + v135[8]);
              *(void *)((char *)v44 + v135[9]) = *(void *)((char *)v45 + v135[9]);
              *(void *)((char *)v44 + v135[10]) = *(void *)((char *)v45 + v135[10]);
              *(void *)((char *)v44 + v135[11]) = *(void *)((char *)v45 + v135[11]);
              *(void *)((char *)v44 + v135[12]) = *(void *)((char *)v45 + v135[12]);
              *(void *)((char *)v44 + v135[13]) = *(void *)((char *)v45 + v135[13]);
              *((unsigned char *)v44 + v135[14]) = *((unsigned char *)v45 + v135[14]);
              goto LABEL_47;
            case 3:
            case 4:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v50 - 8) + 32))(v44, v45, v50);
              v51 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v44 + v51[5]) = *(_DWORD *)((char *)v45 + v51[5]);
              uint64_t v52 = v51[6];
              v53 = (_OWORD *)((char *)v44 + v52);
              v54 = (_OWORD *)((char *)v45 + v52);
              long long v55 = v54[3];
              v53[2] = v54[2];
              v53[3] = v55;
              long long v56 = v54[1];
              _OWORD *v53 = *v54;
              v53[1] = v56;
              *(_OWORD *)((char *)v44 + v51[7]) = *(_OWORD *)((char *)v45 + v51[7]);
              *(void *)((char *)v44 + v51[8]) = *(void *)((char *)v45 + v51[8]);
              *(void *)((char *)v44 + v51[9]) = *(void *)((char *)v45 + v51[9]);
              uint64_t v57 = v51[10];
              goto LABEL_46;
            case 5:
              uint64_t v141 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v141 - 8) + 32))(v44, v45, v141);
              v121 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_45;
            default:
              uint64_t v120 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v120 - 8) + 32))(v44, v45, v120);
              v121 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_45:
              *(_DWORD *)((char *)v44 + v121[5]) = *(_DWORD *)((char *)v45 + v121[5]);
              uint64_t v142 = v121[6];
              v143 = (_OWORD *)((char *)v44 + v142);
              v144 = (_OWORD *)((char *)v45 + v142);
              long long v145 = v144[3];
              v143[2] = v144[2];
              v143[3] = v145;
              long long v146 = v144[1];
              _OWORD *v143 = *v144;
              v143[1] = v146;
              *(_OWORD *)((char *)v44 + v121[7]) = *(_OWORD *)((char *)v45 + v121[7]);
              *(void *)((char *)v44 + v121[8]) = *(void *)((char *)v45 + v121[8]);
              uint64_t v57 = v121[9];
LABEL_46:
              *(void *)((char *)v44 + v57) = *(void *)((char *)v45 + v57);
LABEL_47:
              swift_storeEnumTagMultiPayload();
              uint64_t v147 = sub_10000F214(&qword_100520120);
              uint64_t v148 = *(int *)(v147 + 48);
              v149 = (_OWORD *)((char *)v44 + v148);
              v150 = (_OWORD *)((char *)v45 + v148);
              _OWORD *v149 = *v150;
              *(_OWORD *)((char *)v149 + 9) = *(_OWORD *)((char *)v150 + 9);
              uint64_t v151 = *(int *)(v147 + 64);
              v152 = (_OWORD *)((char *)v44 + v151);
              v153 = (_OWORD *)((char *)v45 + v151);
              _OWORD *v152 = *v153;
              *(_OWORD *)((char *)v152 + 9) = *(_OWORD *)((char *)v153 + 9);
              break;
          }
        }
        else
        {
          switch(__dsta)
          {
            case 1:
              uint64_t v156 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v156 - 8) + 32))(v44, v45, v156);
              v157 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v44 + v157[5]) = *(_DWORD *)((char *)v45 + v157[5]);
              uint64_t v158 = v157[6];
              v159 = (_OWORD *)((char *)v44 + v158);
              v160 = (_OWORD *)((char *)v45 + v158);
              long long v161 = v160[3];
              v159[2] = v160[2];
              v159[3] = v161;
              long long v162 = v160[1];
              _OWORD *v159 = *v160;
              v159[1] = v162;
              *(void *)((char *)v44 + v157[7]) = *(void *)((char *)v45 + v157[7]);
              *(void *)((char *)v44 + v157[8]) = *(void *)((char *)v45 + v157[8]);
              *(void *)((char *)v44 + v157[9]) = *(void *)((char *)v45 + v157[9]);
              *((unsigned char *)v44 + v157[10]) = *((unsigned char *)v45 + v157[10]);
              *(_OWORD *)((char *)v44 + v157[11]) = *(_OWORD *)((char *)v45 + v157[11]);
              *(_OWORD *)((char *)v44 + v157[12]) = *(_OWORD *)((char *)v45 + v157[12]);
              uint64_t v163 = v157[13];
              v258 = (char *)v44 + v163;
              v164 = (char *)v45 + v163;
              uint64_t v165 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v166 = *(void *)(v165 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
              {
                uint64_t v167 = sub_10000F214(&qword_100524BD0);
                memcpy(v258, v164, *(void *)(*(void *)(v167 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v258, v164, v165);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v166 + 56))(v258, 0, 1, v165);
              }
              *(_OWORD *)((char *)v44 + v157[14]) = *(_OWORD *)((char *)v45 + v157[14]);
              uint64_t v252 = v157[15];
              v253 = (char *)v44 + v252;
              v254 = (char *)v45 + v252;
              *((void *)v253 + 2) = *((void *)v254 + 2);
              *(_OWORD *)v253 = *(_OWORD *)v254;
              uint64_t v33 = v262;
              goto LABEL_55;
            case 2:
              uint64_t v168 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v168 - 8) + 32))(v44, v45, v168);
              v169 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v44 + v169[5]) = *(_DWORD *)((char *)v45 + v169[5]);
              uint64_t v170 = v169[6];
              v171 = (_OWORD *)((char *)v44 + v170);
              v172 = (_OWORD *)((char *)v45 + v170);
              long long v173 = v172[3];
              v171[2] = v172[2];
              v171[3] = v173;
              long long v174 = v172[1];
              _OWORD *v171 = *v172;
              v171[1] = v174;
              *(_OWORD *)((char *)v44 + v169[7]) = *(_OWORD *)((char *)v45 + v169[7]);
              *(void *)((char *)v44 + v169[8]) = *(void *)((char *)v45 + v169[8]);
              *(void *)((char *)v44 + v169[9]) = *(void *)((char *)v45 + v169[9]);
              *(void *)((char *)v44 + v169[10]) = *(void *)((char *)v45 + v169[10]);
              *(void *)((char *)v44 + v169[11]) = *(void *)((char *)v45 + v169[11]);
              *(void *)((char *)v44 + v169[12]) = *(void *)((char *)v45 + v169[12]);
              *(void *)((char *)v44 + v169[13]) = *(void *)((char *)v45 + v169[13]);
              *((unsigned char *)v44 + v169[14]) = *((unsigned char *)v45 + v169[14]);
              goto LABEL_55;
            case 3:
            case 4:
              uint64_t v72 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v72 - 8) + 32))(v44, v45, v72);
              v73 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v44 + v73[5]) = *(_DWORD *)((char *)v45 + v73[5]);
              uint64_t v74 = v73[6];
              v75 = (_OWORD *)((char *)v44 + v74);
              v76 = (_OWORD *)((char *)v45 + v74);
              long long v77 = v76[3];
              v75[2] = v76[2];
              v75[3] = v77;
              long long v78 = v76[1];
              _OWORD *v75 = *v76;
              v75[1] = v78;
              *(_OWORD *)((char *)v44 + v73[7]) = *(_OWORD *)((char *)v45 + v73[7]);
              *(void *)((char *)v44 + v73[8]) = *(void *)((char *)v45 + v73[8]);
              *(void *)((char *)v44 + v73[9]) = *(void *)((char *)v45 + v73[9]);
              uint64_t v79 = v73[10];
              goto LABEL_54;
            case 5:
              uint64_t v175 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v175 - 8) + 32))(v44, v45, v175);
              v155 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_53;
            default:
              uint64_t v154 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v154 - 8) + 32))(v44, v45, v154);
              v155 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_53:
              *(_DWORD *)((char *)v44 + v155[5]) = *(_DWORD *)((char *)v45 + v155[5]);
              uint64_t v176 = v155[6];
              v177 = (_OWORD *)((char *)v44 + v176);
              v178 = (_OWORD *)((char *)v45 + v176);
              long long v179 = v178[3];
              v177[2] = v178[2];
              v177[3] = v179;
              long long v180 = v178[1];
              _OWORD *v177 = *v178;
              v177[1] = v180;
              *(_OWORD *)((char *)v44 + v155[7]) = *(_OWORD *)((char *)v45 + v155[7]);
              *(void *)((char *)v44 + v155[8]) = *(void *)((char *)v45 + v155[8]);
              uint64_t v79 = v155[9];
LABEL_54:
              *(void *)((char *)v44 + v79) = *(void *)((char *)v45 + v79);
LABEL_55:
              swift_storeEnumTagMultiPayload();
              break;
          }
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_57;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v94 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v94 - 8) + 32))(v44, v45, v94);
            v95 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)v44 + v95[5]) = *(_DWORD *)((char *)v45 + v95[5]);
            uint64_t v96 = v95[6];
            v97 = (_OWORD *)((char *)v44 + v96);
            v98 = (_OWORD *)((char *)v45 + v96);
            long long v99 = v98[3];
            v97[2] = v98[2];
            v97[3] = v99;
            long long v100 = v98[1];
            _OWORD *v97 = *v98;
            v97[1] = v100;
            *(void *)((char *)v44 + v95[7]) = *(void *)((char *)v45 + v95[7]);
            *(void *)((char *)v44 + v95[8]) = *(void *)((char *)v45 + v95[8]);
            *(void *)((char *)v44 + v95[9]) = *(void *)((char *)v45 + v95[9]);
            *((unsigned char *)v44 + v95[10]) = *((unsigned char *)v45 + v95[10]);
            *(_OWORD *)((char *)v44 + v95[11]) = *(_OWORD *)((char *)v45 + v95[11]);
            *(_OWORD *)((char *)v44 + v95[12]) = *(_OWORD *)((char *)v45 + v95[12]);
            uint64_t v101 = v95[13];
            __dstb = (char *)v44 + v101;
            v102 = (char *)v45 + v101;
            uint64_t v103 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v104 = *(void *)(v103 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
            {
              uint64_t v105 = sub_10000F214(&qword_100524BD0);
              memcpy(__dstb, v102, *(void *)(*(void *)(v105 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v104 + 32))(__dstb, v102, v103);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(__dstb, 0, 1, v103);
            }
            uint64_t v33 = v262;
            *(_OWORD *)((char *)v44 + v95[14]) = *(_OWORD *)((char *)v45 + v95[14]);
            uint64_t v246 = v95[15];
            v247 = (char *)v44 + v246;
            v248 = (char *)v45 + v246;
            *((void *)v247 + 2) = *((void *)v248 + 2);
            *(_OWORD *)v247 = *(_OWORD *)v248;
            goto LABEL_39;
          case 2u:
            uint64_t v106 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v106 - 8) + 32))(v44, v45, v106);
            v107 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v44 + v107[5]) = *(_DWORD *)((char *)v45 + v107[5]);
            uint64_t v108 = v107[6];
            v109 = (_OWORD *)((char *)v44 + v108);
            v110 = (_OWORD *)((char *)v45 + v108);
            long long v111 = v110[3];
            v109[2] = v110[2];
            v109[3] = v111;
            long long v112 = v110[1];
            _OWORD *v109 = *v110;
            v109[1] = v112;
            *(_OWORD *)((char *)v44 + v107[7]) = *(_OWORD *)((char *)v45 + v107[7]);
            *(void *)((char *)v44 + v107[8]) = *(void *)((char *)v45 + v107[8]);
            *(void *)((char *)v44 + v107[9]) = *(void *)((char *)v45 + v107[9]);
            *(void *)((char *)v44 + v107[10]) = *(void *)((char *)v45 + v107[10]);
            *(void *)((char *)v44 + v107[11]) = *(void *)((char *)v45 + v107[11]);
            *(void *)((char *)v44 + v107[12]) = *(void *)((char *)v45 + v107[12]);
            *(void *)((char *)v44 + v107[13]) = *(void *)((char *)v45 + v107[13]);
            *((unsigned char *)v44 + v107[14]) = *((unsigned char *)v45 + v107[14]);
            goto LABEL_39;
          case 3u:
          case 4u:
            uint64_t v61 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v61 - 8) + 32))(v44, v45, v61);
            v62 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)v44 + v62[5]) = *(_DWORD *)((char *)v45 + v62[5]);
            uint64_t v63 = v62[6];
            v64 = (_OWORD *)((char *)v44 + v63);
            v65 = (_OWORD *)((char *)v45 + v63);
            long long v66 = v65[3];
            v64[2] = v65[2];
            v64[3] = v66;
            long long v67 = v65[1];
            _OWORD *v64 = *v65;
            v64[1] = v67;
            *(_OWORD *)((char *)v44 + v62[7]) = *(_OWORD *)((char *)v45 + v62[7]);
            *(void *)((char *)v44 + v62[8]) = *(void *)((char *)v45 + v62[8]);
            *(void *)((char *)v44 + v62[9]) = *(void *)((char *)v45 + v62[9]);
            uint64_t v68 = v62[10];
            goto LABEL_38;
          case 5u:
            uint64_t v113 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v113 - 8) + 32))(v44, v45, v113);
            v93 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            goto LABEL_37;
          default:
            uint64_t v92 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v92 - 8) + 32))(v44, v45, v92);
            v93 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_37:
            *(_DWORD *)((char *)v44 + v93[5]) = *(_DWORD *)((char *)v45 + v93[5]);
            uint64_t v114 = v93[6];
            v115 = (_OWORD *)((char *)v44 + v114);
            v116 = (_OWORD *)((char *)v45 + v114);
            long long v117 = v116[3];
            v115[2] = v116[2];
            v115[3] = v117;
            long long v118 = v116[1];
            _OWORD *v115 = *v116;
            v115[1] = v118;
            *(_OWORD *)((char *)v44 + v93[7]) = *(_OWORD *)((char *)v45 + v93[7]);
            *(void *)((char *)v44 + v93[8]) = *(void *)((char *)v45 + v93[8]);
            uint64_t v68 = v93[9];
LABEL_38:
            *(void *)((char *)v44 + v68) = *(void *)((char *)v45 + v68);
LABEL_39:
            swift_storeEnumTagMultiPayload();
            uint64_t v119 = sub_10000F214(&qword_10051A328);
            *(void *)((char *)v44 + *(int *)(v119 + 48)) = *(void *)((char *)v45 + *(int *)(v119 + 48));
            *(_OWORD *)((char *)v44 + *(int *)(v119 + 64)) = *(_OWORD *)((char *)v45 + *(int *)(v119 + 64));
            break;
        }
        goto LABEL_57;
      case 5u:
        uint64_t v58 = sub_10000F214(&qword_10051A320);
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v59 + 48))(v45, 1, v58))
        {
          uint64_t v60 = type metadata accessor for DataDetectorState(0);
          memcpy(v44, v45, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          uint64_t v80 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v80 - 8) + 32))(v44, v45, v80);
          v81 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)v44 + v81[5]) = *(_DWORD *)((char *)v45 + v81[5]);
          uint64_t v82 = v81[6];
          v83 = (_OWORD *)((char *)v44 + v82);
          v84 = (_OWORD *)((char *)v45 + v82);
          long long v85 = v84[3];
          v83[2] = v84[2];
          v83[3] = v85;
          long long v86 = v84[1];
          _OWORD *v83 = *v84;
          v83[1] = v86;
          *(_OWORD *)((char *)v44 + v81[7]) = *(_OWORD *)((char *)v45 + v81[7]);
          *(void *)((char *)v44 + v81[8]) = *(void *)((char *)v45 + v81[8]);
          *(void *)((char *)v44 + v81[9]) = *(void *)((char *)v45 + v81[9]);
          *(void *)((char *)v44 + v81[10]) = *(void *)((char *)v45 + v81[10]);
          *(void *)((char *)v44 + v81[11]) = *(void *)((char *)v45 + v81[11]);
          *(void *)((char *)v44 + v81[12]) = *(void *)((char *)v45 + v81[12]);
          *(void *)((char *)v44 + v81[13]) = *(void *)((char *)v45 + v81[13]);
          *((unsigned char *)v44 + v81[14]) = *((unsigned char *)v45 + v81[14]);
          *(void *)((char *)v44 + *(int *)(v58 + 48)) = *(void *)((char *)v45 + *(int *)(v58 + 48));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v59 + 56))(v44, 0, 1, v58);
        }
        goto LABEL_57;
      case 8u:
        uint64_t v69 = sub_10000F214(&qword_10051A428);
        uint64_t v70 = *(void *)(v69 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v70 + 48))(v45, 1, v69))
        {
          uint64_t v71 = type metadata accessor for EventLookupState(0);
          memcpy(v44, v45, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          _OWORD *v44 = *v45;
          v87 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v88 = v87[5];
          v256 = (char *)v45 + v88;
          v260 = (char *)v44 + v88;
          uint64_t v89 = type metadata accessor for Date();
          v90 = *(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 32);
          v90(v260, v256, v89);
          v90((char *)v44 + v87[6], (char *)v45 + v87[6], v89);
          *(_OWORD *)((char *)v44 + v87[7]) = *(_OWORD *)((char *)v45 + v87[7]);
          *(_OWORD *)((char *)v44 + v87[8]) = *(_OWORD *)((char *)v45 + v87[8]);
          uint64_t v91 = v87[9];
          v38 = v261;
          uint64_t v33 = v262;
          *((unsigned char *)v44 + v91) = *((unsigned char *)v45 + v91);
          *(_OWORD *)((char *)v44 + *(int *)(v69 + 48)) = *(_OWORD *)((char *)v45 + *(int *)(v69 + 48));
          *(_OWORD *)((char *)v44 + *(int *)(v69 + 64)) = *(_OWORD *)((char *)v45 + *(int *)(v69 + 64));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v70 + 56))(v44, 0, 1, v69);
        }
LABEL_57:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v44, v45, *(void *)(v47 + 64));
        break;
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  uint64_t v181 = sub_10000F214(&qword_100525F58);
  *(void *)((char *)v44 + *(int *)(v181 + 28)) = *(void *)((char *)v45 + *(int *)(v181 + 28));
  uint64_t v182 = v38[14];
  *(_OWORD *)(v33 + v38[13]) = *(_OWORD *)(a2 + v38[13]);
  *(_OWORD *)(v33 + v182) = *(_OWORD *)(a2 + v182);
  uint64_t v183 = v38[15];
  uint64_t v184 = v33 + v183;
  uint64_t v185 = a2 + v183;
  uint64_t v186 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 32))(v184, v185, v186);
  uint64_t v187 = sub_10000F214(&qword_10051C250);
  *(void *)(v184 + *(int *)(v187 + 28)) = *(void *)(v185 + *(int *)(v187 + 28));
  uint64_t v188 = v38[16];
  uint64_t v189 = v38[17];
  uint64_t v190 = v33 + v188;
  uint64_t v191 = a2 + v188;
  *(void *)(v190 + 16) = *(void *)(v191 + 16);
  *(_OWORD *)uint64_t v190 = *(_OWORD *)v191;
  *(_OWORD *)(v33 + v189) = *(_OWORD *)(a2 + v189);
  uint64_t v192 = v38[18];
  uint64_t v193 = v38[19];
  uint64_t v194 = v33 + v192;
  uint64_t v195 = a2 + v192;
  *(_OWORD *)uint64_t v194 = *(_OWORD *)v195;
  *(unsigned char *)(v194 + 16) = *(unsigned char *)(v195 + 16);
  *(_OWORD *)(v33 + v193) = *(_OWORD *)(a2 + v193);
  uint64_t v196 = v38[21];
  *(_OWORD *)(v33 + v38[20]) = *(_OWORD *)(a2 + v38[20]);
  *(_OWORD *)(v33 + v196) = *(_OWORD *)(a2 + v196);
  uint64_t v197 = v38[23];
  *(_OWORD *)(v33 + v38[22]) = *(_OWORD *)(a2 + v38[22]);
  *(_OWORD *)(v33 + v197) = *(_OWORD *)(a2 + v197);
  uint64_t v198 = v38[25];
  *(_OWORD *)(v33 + v38[24]) = *(_OWORD *)(a2 + v38[24]);
  v199 = (_OWORD *)(v33 + v198);
  v200 = (_OWORD *)(a2 + v198);
  long long v201 = v200[1];
  _OWORD *v199 = *v200;
  v199[1] = v201;
  uint64_t v202 = v38[27];
  *(_OWORD *)(v33 + v38[26]) = *(_OWORD *)(a2 + v38[26]);
  *(_OWORD *)(v33 + v202) = *(_OWORD *)(a2 + v202);
  uint64_t v203 = v38[29];
  *(_OWORD *)(v33 + v38[28]) = *(_OWORD *)(a2 + v38[28]);
  *(_OWORD *)(v33 + v203) = *(_OWORD *)(a2 + v203);
  uint64_t v204 = v38[30];
  uint64_t v205 = v38[31];
  uint64_t v206 = v33 + v204;
  v207 = (long long *)(a2 + v204);
  *(void *)(v206 + 48) = *((void *)v207 + 6);
  long long v208 = v207[2];
  long long v209 = *v207;
  *(_OWORD *)(v206 + 16) = v207[1];
  *(_OWORD *)(v206 + 32) = v208;
  *(_OWORD *)uint64_t v206 = v209;
  v210 = (_OWORD *)(v33 + v205);
  v211 = (_OWORD *)(a2 + v205);
  long long v212 = v211[1];
  _OWORD *v210 = *v211;
  v210[1] = v212;
  uint64_t v213 = v38[33];
  *(_OWORD *)(v33 + v38[32]) = *(_OWORD *)(a2 + v38[32]);
  *(_OWORD *)(v33 + v213) = *(_OWORD *)(a2 + v213);
  uint64_t v214 = v38[35];
  *(_OWORD *)(v33 + v38[34]) = *(_OWORD *)(a2 + v38[34]);
  *(_OWORD *)(v33 + v214) = *(_OWORD *)(a2 + v214);
  uint64_t v215 = v38[36];
  uint64_t v216 = v38[37];
  uint64_t v217 = v33 + v215;
  uint64_t v218 = a2 + v215;
  *(void *)(v217 + 16) = *(void *)(v218 + 16);
  *(_OWORD *)uint64_t v217 = *(_OWORD *)v218;
  *(_OWORD *)(v33 + v216) = *(_OWORD *)(a2 + v216);
  uint64_t v219 = v38[39];
  *(_OWORD *)(v33 + v38[38]) = *(_OWORD *)(a2 + v38[38]);
  *(_OWORD *)(v33 + v219) = *(_OWORD *)(a2 + v219);
  uint64_t v220 = v38[41];
  *(_OWORD *)(v33 + v38[40]) = *(_OWORD *)(a2 + v38[40]);
  *(_OWORD *)(v33 + v220) = *(_OWORD *)(a2 + v220);
  uint64_t v221 = v38[43];
  *(_OWORD *)(v33 + v38[42]) = *(_OWORD *)(a2 + v38[42]);
  *(_OWORD *)(v33 + v221) = *(_OWORD *)(a2 + v221);
  uint64_t v222 = v38[45];
  *(_OWORD *)(v33 + v38[44]) = *(_OWORD *)(a2 + v38[44]);
  *(_OWORD *)(v33 + v222) = *(_OWORD *)(a2 + v222);
  uint64_t v223 = v38[47];
  *(_OWORD *)(v33 + v38[46]) = *(_OWORD *)(a2 + v38[46]);
  *(_OWORD *)(v33 + v223) = *(_OWORD *)(a2 + v223);
  uint64_t v224 = v38[49];
  *(_OWORD *)(v33 + v38[48]) = *(_OWORD *)(a2 + v38[48]);
  *(_OWORD *)(v33 + v224) = *(_OWORD *)(a2 + v224);
  uint64_t v225 = v38[51];
  *(_OWORD *)(v33 + v38[50]) = *(_OWORD *)(a2 + v38[50]);
  *(_OWORD *)(v33 + v225) = *(_OWORD *)(a2 + v225);
  uint64_t v226 = v38[53];
  *(_OWORD *)(v33 + v38[52]) = *(_OWORD *)(a2 + v38[52]);
  *(_OWORD *)(v33 + v226) = *(_OWORD *)(a2 + v226);
  uint64_t v227 = v38[55];
  *(_OWORD *)(v33 + v38[54]) = *(_OWORD *)(a2 + v38[54]);
  *(void *)(v33 + v227) = *(void *)(a2 + v227);
  uint64_t v228 = v38[57];
  *(void *)(v33 + v38[56]) = *(void *)(a2 + v38[56]);
  *(void *)(v33 + v228) = *(void *)(a2 + v228);
  uint64_t v229 = v38[59];
  *(void *)(v33 + v38[58]) = *(void *)(a2 + v38[58]);
  *(void *)(v33 + v229) = *(void *)(a2 + v229);
  uint64_t v230 = v38[61];
  *(void *)(v33 + v38[60]) = *(void *)(a2 + v38[60]);
  *(void *)(v33 + v230) = *(void *)(a2 + v230);
  uint64_t v231 = v38[62];
  uint64_t v232 = v38[63];
  v233 = (_OWORD *)(v33 + v231);
  v234 = (_OWORD *)(a2 + v231);
  long long v235 = v234[1];
  _OWORD *v233 = *v234;
  v233[1] = v235;
  long long v236 = v234[5];
  v233[4] = v234[4];
  v233[5] = v236;
  long long v237 = v234[3];
  v233[2] = v234[2];
  v233[3] = v237;
  *(void *)(v33 + v232) = *(void *)(a2 + v232);
  uint64_t v238 = v38[65];
  v239 = (char *)(v33 + v238);
  v240 = (char *)(a2 + v238);
  *(_OWORD *)(v33 + v38[64]) = *(_OWORD *)(a2 + v38[64]);
  uint64_t v241 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v242 = *(void *)(v241 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v242 + 48))(v240, 1, v241))
  {
    uint64_t v243 = sub_10000F214(&qword_100525F60);
    memcpy(v239, v240, *(void *)(*(void *)(v243 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v242 + 32))(v239, v240, v241);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v242 + 56))(v239, 0, 1, v241);
  }
  v244 = (int *)sub_10000F214(&qword_100519A10);
  v239[v244[9]] = v240[v244[9]];
  *(void *)&v239[v244[10]] = *(void *)&v240[v244[10]];
  v239[v244[11]] = v240[v244[11]];
  return v33;
}

uint64_t *sub_10028A710(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  char v9 = *((unsigned char *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  sub_100161890(v8, v9);
  char v10 = *((unsigned char *)a2 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v10;
  swift_release();
  char v11 = *((unsigned char *)a2 + 40);
  a1[4] = a2[4];
  *((unsigned char *)a1 + 40) = v11;
  swift_release();
  char v12 = *((unsigned char *)a2 + 56);
  a1[6] = a2[6];
  *((unsigned char *)a1 + 56) = v12;
  swift_release();
  char v13 = *((unsigned char *)a2 + 80);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((unsigned char *)a1 + 80) = v13;
  sub_10000FD10();
  if (a1 != a2)
  {
    uint64_t v14 = a3[9];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    sub_10000FBD8((uint64_t)a1 + v14, &qword_100525F10);
    uint64_t v17 = sub_10000F214(&qword_100525F10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for WithCurrentHostingControllerAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
  }
  v535 = a3;
  v536 = a1;
  uint64_t v19 = a3[10];
  v20 = (char *)a1 + v19;
  v537 = a2;
  uint64_t v21 = (uint64_t)a2 + v19;
  unsigned char *v20 = *((unsigned char *)a2 + v19);
  v20[1] = *((unsigned char *)a2 + v19 + 1);
  v20[2] = *((unsigned char *)a2 + v19 + 2);
  v20[3] = *((unsigned char *)a2 + v19 + 3);
  v20[4] = *((unsigned char *)a2 + v19 + 4);
  v20[5] = *((unsigned char *)a2 + v19 + 5);
  v534 = (int *)type metadata accessor for AppConfiguration();
  uint64_t v22 = v534[5];
  uint64_t v23 = &v20[v22];
  uint64_t v24 = v21 + v22;
  *uint64_t v23 = *(unsigned char *)(v21 + v22);
  v23[1] = *(unsigned char *)(v21 + v22 + 1);
  *(_OWORD *)(v23 + 8) = *(_OWORD *)(v21 + v22 + 8);
  *((_DWORD *)v23 + 6) = *(_DWORD *)(v21 + v22 + 24);
  v23[28] = *(unsigned char *)(v21 + v22 + 28);
  v23[29] = *(unsigned char *)(v21 + v22 + 29);
  v25 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v26 = v25[10];
  uint64_t v27 = &v23[v26];
  uint64_t v28 = (unsigned char *)(v24 + v26);
  uint64_t v29 = type metadata accessor for URL();
  v538 = *(void **)(v29 - 8);
  v30 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v538[6];
  v533 = v27;
  LODWORD(v27) = v30(v27, 1, v29);
  __dst = v30;
  int v31 = v30(v28, 1, v29);
  if (v27)
  {
    if (v31)
    {
      size_t v32 = *(void *)(*(void *)(sub_10000F214(&qword_10051E070) - 8) + 64);
      uint64_t v33 = v533;
LABEL_10:
      memcpy(v33, v28, v32);
      goto LABEL_13;
    }
    ((void (*)(void *, unsigned char *, uint64_t))v538[4])(v533, v28, v29);
    ((void (*)(void *, void, uint64_t, uint64_t))v538[7])(v533, 0, 1, v29);
  }
  else
  {
    if (v31)
    {
      ((void (*)(void *, uint64_t))v538[1])(v533, v29);
      size_t v32 = *(void *)(*(void *)(sub_10000F214(&qword_10051E070) - 8) + 64);
      uint64_t v33 = v533;
      goto LABEL_10;
    }
    ((void (*)(void *, unsigned char *, uint64_t))v538[5])(v533, v28, v29);
  }
LABEL_13:
  v23[v25[11]] = *(unsigned char *)(v24 + v25[11]);
  uint64_t v34 = v25[12];
  v35 = &v23[v34];
  uint64_t v36 = v24 + v34;
  *(void *)v35 = *(void *)v36;
  v35[8] = *(unsigned char *)(v36 + 8);
  *(void *)&v23[v25[13]] = *(void *)(v24 + v25[13]);
  v23[v25[14]] = *(unsigned char *)(v24 + v25[14]);
  v23[v25[15]] = *(unsigned char *)(v24 + v25[15]);
  v23[v25[16]] = *(unsigned char *)(v24 + v25[16]);
  v23[v25[17]] = *(unsigned char *)(v24 + v25[17]);
  uint64_t v37 = v25[18];
  v38 = &v23[v37];
  uint64_t v39 = (unsigned char *)(v24 + v37);
  int v40 = __dst(&v23[v37], 1, v29);
  int v41 = __dst(v39, 1, v29);
  if (v40)
  {
    if (!v41)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v538[4])(v38, v39, v29);
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v538[7])(v38, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    ((void (*)(unsigned char *, uint64_t))v538[1])(v38, v29);
LABEL_18:
    uint64_t v42 = sub_10000F214(&qword_10051E070);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v538[5])(v38, v39, v29);
LABEL_19:
  uint64_t v43 = v537;
  v23[v25[19]] = *(unsigned char *)(v24 + v25[19]);
  v23[v25[20]] = *(unsigned char *)(v24 + v25[20]);
  v23[v25[21]] = *(unsigned char *)(v24 + v25[21]);
  uint64_t v44 = v25[22];
  v45 = &v23[v44];
  uint64_t v46 = (unsigned char *)(v24 + v44);
  int v47 = __dst(&v23[v44], 1, v29);
  int v48 = __dst(v46, 1, v29);
  if (v47)
  {
    if (!v48)
    {
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v538[4])(v45, v46, v29);
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v538[7])(v45, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v48)
  {
    ((void (*)(unsigned char *, uint64_t))v538[1])(v45, v29);
LABEL_24:
    uint64_t v49 = sub_10000F214(&qword_10051E070);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_25;
  }
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v538[5])(v45, v46, v29);
LABEL_25:
  uint64_t v50 = v536;
  v20[v534[6]] = *(unsigned char *)(v21 + v534[6]);
  uint64_t v51 = v534[7];
  uint64_t v52 = &v20[v51];
  v53 = (uint64_t *)(v21 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = v534[8];
  uint64_t v57 = &v20[v56];
  uint64_t v58 = (unsigned char *)(v21 + v56);
  *uint64_t v57 = *v58;
  v57[1] = v58[1];
  uint64_t v59 = v534[10];
  uint64_t v60 = &v20[v59];
  uint64_t v61 = (unsigned char *)(v21 + v59);
  *uint64_t v60 = *v61;
  v60[1] = v61[1];
  uint64_t v62 = v534[12];
  uint64_t v63 = &v20[v62];
  v64 = (unsigned char *)(v21 + v62);
  *uint64_t v63 = *v64;
  v63[1] = v64[1];
  v63[2] = v64[2];
  uint64_t v65 = v534[13];
  long long v66 = &v20[v65];
  long long v67 = (uint64_t *)(v21 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  *long long v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = sub_10000F214(&qword_100525F50);
  *(void *)&v20[*(int *)(v70 + 28)] = *(void *)(v21 + *(int *)(v70 + 28));
  swift_release();
  uint64_t v71 = v535;
  uint64_t v72 = v535[11];
  uint64_t v73 = (uint64_t)v536 + v72;
  uint64_t v74 = (uint64_t)v537 + v72;
  *(uint64_t *)((char *)v536 + v72) = *(uint64_t *)((char *)v537 + v72);
  swift_release();
  *(void *)(v73 + 8) = *(void *)(v74 + 8);
  swift_release();
  uint64_t v75 = v535[12];
  v76 = (_OWORD *)((char *)v536 + v75);
  long long v77 = (_OWORD *)((char *)v537 + v75);
  uint64_t v78 = type metadata accessor for ResultLookupState();
  uint64_t v79 = *(void *)(v78 - 8);
  uint64_t v80 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v79 + 48);
  int v81 = v80(v76, 1, v78);
  int v82 = v80(v77, 1, v78);
  if (v81)
  {
    if (!v82)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          type metadata accessor for GeoLocateState(0);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          type metadata accessor for CVDetection();
          int v84 = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 1)
          {
            switch(v84)
            {
              case 1:
                uint64_t v205 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v205 - 8) + 32))(v76, v77, v205);
                uint64_t v206 = (int *)type metadata accessor for ParseDetectorResult(0);
                *(_DWORD *)((char *)v76 + v206[5]) = *(_DWORD *)((char *)v77 + v206[5]);
                uint64_t v207 = v206[6];
                long long v208 = (_OWORD *)((char *)v76 + v207);
                long long v209 = (_OWORD *)((char *)v77 + v207);
                long long v210 = v209[3];
                v208[2] = v209[2];
                v208[3] = v210;
                long long v211 = v209[1];
                *long long v208 = *v209;
                v208[1] = v211;
                *(void *)((char *)v76 + v206[7]) = *(void *)((char *)v77 + v206[7]);
                *(void *)((char *)v76 + v206[8]) = *(void *)((char *)v77 + v206[8]);
                *(void *)((char *)v76 + v206[9]) = *(void *)((char *)v77 + v206[9]);
                *((unsigned char *)v76 + v206[10]) = *((unsigned char *)v77 + v206[10]);
                *(_OWORD *)((char *)v76 + v206[11]) = *(_OWORD *)((char *)v77 + v206[11]);
                *(_OWORD *)((char *)v76 + v206[12]) = *(_OWORD *)((char *)v77 + v206[12]);
                uint64_t v212 = v206[13];
                v540 = (char *)v76 + v212;
                uint64_t v213 = (char *)v77 + v212;
                uint64_t v214 = type metadata accessor for VisualUnderstanding.ImageRegion();
                uint64_t v215 = *(void *)(v214 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
                {
                  uint64_t v216 = sub_10000F214(&qword_100524BD0);
                  memcpy(v540, v213, *(void *)(*(void *)(v216 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v540, v213, v214);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v540, 0, 1, v214);
                }
                *(_OWORD *)((char *)v76 + v206[14]) = *(_OWORD *)((char *)v77 + v206[14]);
                uint64_t v518 = v206[15];
                v519 = (char *)v76 + v518;
                v520 = (char *)v77 + v518;
                *((void *)v519 + 2) = *((void *)v520 + 2);
                *(_OWORD *)v519 = *(_OWORD *)v520;
                uint64_t v50 = v536;
                goto LABEL_81;
              case 2:
                uint64_t v217 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v217 - 8) + 32))(v76, v77, v217);
                uint64_t v218 = (int *)type metadata accessor for TextDetectorResult(0);
                *(_DWORD *)((char *)v76 + v218[5]) = *(_DWORD *)((char *)v77 + v218[5]);
                uint64_t v219 = v218[6];
                uint64_t v220 = (_OWORD *)((char *)v76 + v219);
                uint64_t v221 = (_OWORD *)((char *)v77 + v219);
                long long v222 = v221[3];
                v220[2] = v221[2];
                v220[3] = v222;
                long long v223 = v221[1];
                *uint64_t v220 = *v221;
                v220[1] = v223;
                *(_OWORD *)((char *)v76 + v218[7]) = *(_OWORD *)((char *)v77 + v218[7]);
                *(void *)((char *)v76 + v218[8]) = *(void *)((char *)v77 + v218[8]);
                *(void *)((char *)v76 + v218[9]) = *(void *)((char *)v77 + v218[9]);
                *(void *)((char *)v76 + v218[10]) = *(void *)((char *)v77 + v218[10]);
                *(void *)((char *)v76 + v218[11]) = *(void *)((char *)v77 + v218[11]);
                *(void *)((char *)v76 + v218[12]) = *(void *)((char *)v77 + v218[12]);
                *(void *)((char *)v76 + v218[13]) = *(void *)((char *)v77 + v218[13]);
                *((unsigned char *)v76 + v218[14]) = *((unsigned char *)v77 + v218[14]);
                goto LABEL_81;
              case 3:
              case 4:
                uint64_t v85 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v85 - 8) + 32))(v76, v77, v85);
                long long v86 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
                *(_DWORD *)((char *)v76 + v86[5]) = *(_DWORD *)((char *)v77 + v86[5]);
                uint64_t v87 = v86[6];
                uint64_t v88 = (_OWORD *)((char *)v76 + v87);
                uint64_t v89 = (_OWORD *)((char *)v77 + v87);
                long long v90 = v89[3];
                v88[2] = v89[2];
                v88[3] = v90;
                long long v91 = v89[1];
                *uint64_t v88 = *v89;
                v88[1] = v91;
                *(_OWORD *)((char *)v76 + v86[7]) = *(_OWORD *)((char *)v77 + v86[7]);
                *(void *)((char *)v76 + v86[8]) = *(void *)((char *)v77 + v86[8]);
                *(void *)((char *)v76 + v86[9]) = *(void *)((char *)v77 + v86[9]);
                uint64_t v92 = v86[10];
                goto LABEL_80;
              case 5:
                uint64_t v224 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v224 - 8) + 32))(v76, v77, v224);
                uint64_t v204 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
                goto LABEL_79;
              default:
                uint64_t v203 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v203 - 8) + 32))(v76, v77, v203);
                uint64_t v204 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_79:
                *(_DWORD *)((char *)v76 + v204[5]) = *(_DWORD *)((char *)v77 + v204[5]);
                uint64_t v225 = v204[6];
                uint64_t v226 = (_OWORD *)((char *)v76 + v225);
                uint64_t v227 = (_OWORD *)((char *)v77 + v225);
                long long v228 = v227[3];
                v226[2] = v227[2];
                v226[3] = v228;
                long long v229 = v227[1];
                *uint64_t v226 = *v227;
                v226[1] = v229;
                *(_OWORD *)((char *)v76 + v204[7]) = *(_OWORD *)((char *)v77 + v204[7]);
                *(void *)((char *)v76 + v204[8]) = *(void *)((char *)v77 + v204[8]);
                uint64_t v92 = v204[9];
LABEL_80:
                *(void *)((char *)v76 + v92) = *(void *)((char *)v77 + v92);
LABEL_81:
                swift_storeEnumTagMultiPayload();
                uint64_t v230 = sub_10000F214(&qword_100520120);
                uint64_t v231 = *(int *)(v230 + 48);
                uint64_t v232 = (_OWORD *)((char *)v76 + v231);
                v233 = (_OWORD *)((char *)v77 + v231);
                *uint64_t v232 = *v233;
                *(_OWORD *)((char *)v232 + 9) = *(_OWORD *)((char *)v233 + 9);
                uint64_t v234 = *(int *)(v230 + 64);
                long long v235 = (_OWORD *)((char *)v76 + v234);
                long long v236 = (_OWORD *)((char *)v77 + v234);
                *long long v235 = *v236;
                *(_OWORD *)((char *)v235 + 9) = *(_OWORD *)((char *)v236 + 9);
                break;
            }
          }
          else
          {
            switch(v84)
            {
              case 1:
                uint64_t v239 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v239 - 8) + 32))(v76, v77, v239);
                v240 = (int *)type metadata accessor for ParseDetectorResult(0);
                *(_DWORD *)((char *)v76 + v240[5]) = *(_DWORD *)((char *)v77 + v240[5]);
                uint64_t v241 = v240[6];
                uint64_t v242 = (_OWORD *)((char *)v76 + v241);
                uint64_t v243 = (_OWORD *)((char *)v77 + v241);
                long long v244 = v243[3];
                v242[2] = v243[2];
                v242[3] = v244;
                long long v245 = v243[1];
                *uint64_t v242 = *v243;
                v242[1] = v245;
                *(void *)((char *)v76 + v240[7]) = *(void *)((char *)v77 + v240[7]);
                *(void *)((char *)v76 + v240[8]) = *(void *)((char *)v77 + v240[8]);
                *(void *)((char *)v76 + v240[9]) = *(void *)((char *)v77 + v240[9]);
                *((unsigned char *)v76 + v240[10]) = *((unsigned char *)v77 + v240[10]);
                *(_OWORD *)((char *)v76 + v240[11]) = *(_OWORD *)((char *)v77 + v240[11]);
                *(_OWORD *)((char *)v76 + v240[12]) = *(_OWORD *)((char *)v77 + v240[12]);
                uint64_t v246 = v240[13];
                v541 = (char *)v76 + v246;
                v247 = (char *)v77 + v246;
                uint64_t v248 = type metadata accessor for VisualUnderstanding.ImageRegion();
                uint64_t v249 = *(void *)(v248 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248))
                {
                  uint64_t v250 = sub_10000F214(&qword_100524BD0);
                  memcpy(v541, v247, *(void *)(*(void *)(v250 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v541, v247, v248);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v249 + 56))(v541, 0, 1, v248);
                }
                *(_OWORD *)((char *)v76 + v240[14]) = *(_OWORD *)((char *)v77 + v240[14]);
                uint64_t v521 = v240[15];
                v522 = (char *)v76 + v521;
                v523 = (char *)v77 + v521;
                *((void *)v522 + 2) = *((void *)v523 + 2);
                *(_OWORD *)v522 = *(_OWORD *)v523;
                uint64_t v50 = v536;
                goto LABEL_89;
              case 2:
                uint64_t v251 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v251 - 8) + 32))(v76, v77, v251);
                uint64_t v252 = (int *)type metadata accessor for TextDetectorResult(0);
                *(_DWORD *)((char *)v76 + v252[5]) = *(_DWORD *)((char *)v77 + v252[5]);
                uint64_t v253 = v252[6];
                v254 = (_OWORD *)((char *)v76 + v253);
                uint64_t v255 = (_OWORD *)((char *)v77 + v253);
                long long v256 = v255[3];
                v254[2] = v255[2];
                v254[3] = v256;
                long long v257 = v255[1];
                _OWORD *v254 = *v255;
                v254[1] = v257;
                *(_OWORD *)((char *)v76 + v252[7]) = *(_OWORD *)((char *)v77 + v252[7]);
                *(void *)((char *)v76 + v252[8]) = *(void *)((char *)v77 + v252[8]);
                *(void *)((char *)v76 + v252[9]) = *(void *)((char *)v77 + v252[9]);
                *(void *)((char *)v76 + v252[10]) = *(void *)((char *)v77 + v252[10]);
                *(void *)((char *)v76 + v252[11]) = *(void *)((char *)v77 + v252[11]);
                *(void *)((char *)v76 + v252[12]) = *(void *)((char *)v77 + v252[12]);
                *(void *)((char *)v76 + v252[13]) = *(void *)((char *)v77 + v252[13]);
                *((unsigned char *)v76 + v252[14]) = *((unsigned char *)v77 + v252[14]);
                goto LABEL_89;
              case 3:
              case 4:
                uint64_t v118 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v118 - 8) + 32))(v76, v77, v118);
                uint64_t v119 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
                *(_DWORD *)((char *)v76 + v119[5]) = *(_DWORD *)((char *)v77 + v119[5]);
                uint64_t v120 = v119[6];
                v121 = (_OWORD *)((char *)v76 + v120);
                uint64_t v122 = (_OWORD *)((char *)v77 + v120);
                long long v123 = v122[3];
                v121[2] = v122[2];
                v121[3] = v123;
                long long v124 = v122[1];
                _OWORD *v121 = *v122;
                v121[1] = v124;
                *(_OWORD *)((char *)v76 + v119[7]) = *(_OWORD *)((char *)v77 + v119[7]);
                *(void *)((char *)v76 + v119[8]) = *(void *)((char *)v77 + v119[8]);
                *(void *)((char *)v76 + v119[9]) = *(void *)((char *)v77 + v119[9]);
                uint64_t v125 = v119[10];
                goto LABEL_88;
              case 5:
                uint64_t v258 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v258 - 8) + 32))(v76, v77, v258);
                uint64_t v238 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
                goto LABEL_87;
              default:
                uint64_t v237 = type metadata accessor for UUID();
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v237 - 8) + 32))(v76, v77, v237);
                uint64_t v238 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_87:
                *(_DWORD *)((char *)v76 + v238[5]) = *(_DWORD *)((char *)v77 + v238[5]);
                uint64_t v259 = v238[6];
                v260 = (_OWORD *)((char *)v76 + v259);
                v261 = (_OWORD *)((char *)v77 + v259);
                long long v262 = v261[3];
                v260[2] = v261[2];
                v260[3] = v262;
                long long v263 = v261[1];
                _OWORD *v260 = *v261;
                v260[1] = v263;
                *(_OWORD *)((char *)v76 + v238[7]) = *(_OWORD *)((char *)v77 + v238[7]);
                *(void *)((char *)v76 + v238[8]) = *(void *)((char *)v77 + v238[8]);
                uint64_t v125 = v238[9];
LABEL_88:
                *(void *)((char *)v76 + v125) = *(void *)((char *)v77 + v125);
LABEL_89:
                swift_storeEnumTagMultiPayload();
                break;
            }
          }
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v43 = v537;
          break;
        case 4u:
          type metadata accessor for CVDetection();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v163 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v163 - 8) + 32))(v76, v77, v163);
              v164 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v76 + v164[5]) = *(_DWORD *)((char *)v77 + v164[5]);
              uint64_t v165 = v164[6];
              uint64_t v166 = (_OWORD *)((char *)v76 + v165);
              uint64_t v167 = (_OWORD *)((char *)v77 + v165);
              long long v168 = v167[3];
              v166[2] = v167[2];
              v166[3] = v168;
              long long v169 = v167[1];
              *uint64_t v166 = *v167;
              v166[1] = v169;
              *(void *)((char *)v76 + v164[7]) = *(void *)((char *)v77 + v164[7]);
              *(void *)((char *)v76 + v164[8]) = *(void *)((char *)v77 + v164[8]);
              *(void *)((char *)v76 + v164[9]) = *(void *)((char *)v77 + v164[9]);
              *((unsigned char *)v76 + v164[10]) = *((unsigned char *)v77 + v164[10]);
              *(_OWORD *)((char *)v76 + v164[11]) = *(_OWORD *)((char *)v77 + v164[11]);
              *(_OWORD *)((char *)v76 + v164[12]) = *(_OWORD *)((char *)v77 + v164[12]);
              uint64_t v170 = v164[13];
              int __dsta = (char *)v76 + v170;
              v171 = (char *)v77 + v170;
              uint64_t v172 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v173 = *(void *)(v172 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
              {
                uint64_t v174 = sub_10000F214(&qword_100524BD0);
                memcpy(__dsta, v171, *(void *)(*(void *)(v174 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v173 + 32))(__dsta, v171, v172);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v173 + 56))(__dsta, 0, 1, v172);
              }
              *(_OWORD *)((char *)v76 + v164[14]) = *(_OWORD *)((char *)v77 + v164[14]);
              uint64_t v454 = v164[15];
              v455 = (char *)v76 + v454;
              v456 = (char *)v77 + v454;
              *((void *)v455 + 2) = *((void *)v456 + 2);
              *(_OWORD *)v455 = *(_OWORD *)v456;
              uint64_t v50 = v536;
              uint64_t v43 = v537;
              goto LABEL_70;
            case 2u:
              uint64_t v175 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v175 - 8) + 32))(v76, v77, v175);
              uint64_t v176 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v76 + v176[5]) = *(_DWORD *)((char *)v77 + v176[5]);
              uint64_t v177 = v176[6];
              v178 = (_OWORD *)((char *)v76 + v177);
              long long v179 = (_OWORD *)((char *)v77 + v177);
              long long v180 = v179[3];
              v178[2] = v179[2];
              v178[3] = v180;
              long long v181 = v179[1];
              _OWORD *v178 = *v179;
              v178[1] = v181;
              *(_OWORD *)((char *)v76 + v176[7]) = *(_OWORD *)((char *)v77 + v176[7]);
              *(void *)((char *)v76 + v176[8]) = *(void *)((char *)v77 + v176[8]);
              *(void *)((char *)v76 + v176[9]) = *(void *)((char *)v77 + v176[9]);
              *(void *)((char *)v76 + v176[10]) = *(void *)((char *)v77 + v176[10]);
              *(void *)((char *)v76 + v176[11]) = *(void *)((char *)v77 + v176[11]);
              *(void *)((char *)v76 + v176[12]) = *(void *)((char *)v77 + v176[12]);
              *(void *)((char *)v76 + v176[13]) = *(void *)((char *)v77 + v176[13]);
              *((unsigned char *)v76 + v176[14]) = *((unsigned char *)v77 + v176[14]);
              goto LABEL_70;
            case 3u:
            case 4u:
              uint64_t v104 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v104 - 8) + 32))(v76, v77, v104);
              uint64_t v105 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v76 + v105[5]) = *(_DWORD *)((char *)v77 + v105[5]);
              uint64_t v106 = v105[6];
              v107 = (_OWORD *)((char *)v76 + v106);
              uint64_t v108 = (_OWORD *)((char *)v77 + v106);
              long long v109 = v108[3];
              v107[2] = v108[2];
              v107[3] = v109;
              long long v110 = v108[1];
              _OWORD *v107 = *v108;
              v107[1] = v110;
              *(_OWORD *)((char *)v76 + v105[7]) = *(_OWORD *)((char *)v77 + v105[7]);
              *(void *)((char *)v76 + v105[8]) = *(void *)((char *)v77 + v105[8]);
              *(void *)((char *)v76 + v105[9]) = *(void *)((char *)v77 + v105[9]);
              uint64_t v111 = v105[10];
              goto LABEL_69;
            case 5u:
              uint64_t v182 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v182 - 8) + 32))(v76, v77, v182);
              long long v162 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_68;
            default:
              uint64_t v161 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v161 - 8) + 32))(v76, v77, v161);
              long long v162 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_68:
              *(_DWORD *)((char *)v76 + v162[5]) = *(_DWORD *)((char *)v77 + v162[5]);
              uint64_t v183 = v162[6];
              uint64_t v184 = (_OWORD *)((char *)v76 + v183);
              uint64_t v185 = (_OWORD *)((char *)v77 + v183);
              long long v186 = v185[3];
              v184[2] = v185[2];
              v184[3] = v186;
              long long v187 = v185[1];
              *uint64_t v184 = *v185;
              v184[1] = v187;
              *(_OWORD *)((char *)v76 + v162[7]) = *(_OWORD *)((char *)v77 + v162[7]);
              *(void *)((char *)v76 + v162[8]) = *(void *)((char *)v77 + v162[8]);
              uint64_t v111 = v162[9];
LABEL_69:
              *(void *)((char *)v76 + v111) = *(void *)((char *)v77 + v111);
LABEL_70:
              swift_storeEnumTagMultiPayload();
              uint64_t v188 = sub_10000F214(&qword_10051A328);
              *(void *)((char *)v76 + *(int *)(v188 + 48)) = *(void *)((char *)v77 + *(int *)(v188 + 48));
              *(_OWORD *)((char *)v76 + *(int *)(v188 + 64)) = *(_OWORD *)((char *)v77 + *(int *)(v188 + 64));
              swift_storeEnumTagMultiPayload();
              break;
          }
          break;
        case 5u:
          uint64_t v112 = sub_10000F214(&qword_10051A320);
          uint64_t v113 = *(void *)(v112 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v113 + 48))(v77, 1, v112))
          {
            uint64_t v114 = type metadata accessor for DataDetectorState(0);
            memcpy(v76, v77, *(void *)(*(void *)(v114 - 8) + 64));
          }
          else
          {
            uint64_t v129 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v129 - 8) + 32))(v76, v77, v129);
            v130 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v76 + v130[5]) = *(_DWORD *)((char *)v77 + v130[5]);
            uint64_t v131 = v130[6];
            uint64_t v132 = (_OWORD *)((char *)v76 + v131);
            uint64_t v133 = (_OWORD *)((char *)v77 + v131);
            long long v134 = v133[3];
            v132[2] = v133[2];
            v132[3] = v134;
            long long v135 = v133[1];
            *uint64_t v132 = *v133;
            v132[1] = v135;
            *(_OWORD *)((char *)v76 + v130[7]) = *(_OWORD *)((char *)v77 + v130[7]);
            *(void *)((char *)v76 + v130[8]) = *(void *)((char *)v77 + v130[8]);
            *(void *)((char *)v76 + v130[9]) = *(void *)((char *)v77 + v130[9]);
            *(void *)((char *)v76 + v130[10]) = *(void *)((char *)v77 + v130[10]);
            *(void *)((char *)v76 + v130[11]) = *(void *)((char *)v77 + v130[11]);
            *(void *)((char *)v76 + v130[12]) = *(void *)((char *)v77 + v130[12]);
            *(void *)((char *)v76 + v130[13]) = *(void *)((char *)v77 + v130[13]);
            *((unsigned char *)v76 + v130[14]) = *((unsigned char *)v77 + v130[14]);
            *(void *)((char *)v76 + *(int *)(v112 + 48)) = *(void *)((char *)v77 + *(int *)(v112 + 48));
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v113 + 56))(v76, 0, 1, v112);
          }
          goto LABEL_54;
        case 8u:
          uint64_t v115 = sub_10000F214(&qword_10051A428);
          uint64_t v116 = *(void *)(v115 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v116 + 48))(v77, 1, v115))
          {
            uint64_t v117 = type metadata accessor for EventLookupState(0);
            memcpy(v76, v77, *(void *)(*(void *)(v117 - 8) + 64));
          }
          else
          {
            _OWORD *v76 = *v77;
            uint64_t v147 = (int *)type metadata accessor for EventLookupItem(0);
            uint64_t v148 = v147[5];
            v539 = (char *)v77 + v148;
            __dste = (char *)v76 + v148;
            uint64_t v149 = type metadata accessor for Date();
            v150 = *(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 32);
            v150(__dste, v539, v149);
            uint64_t v151 = v149;
            uint64_t v43 = v537;
            v150((char *)v76 + v147[6], (char *)v77 + v147[6], v151);
            *(_OWORD *)((char *)v76 + v147[7]) = *(_OWORD *)((char *)v77 + v147[7]);
            *(_OWORD *)((char *)v76 + v147[8]) = *(_OWORD *)((char *)v77 + v147[8]);
            uint64_t v152 = v147[9];
            uint64_t v71 = v535;
            uint64_t v50 = v536;
            *((unsigned char *)v76 + v152) = *((unsigned char *)v77 + v152);
            *(_OWORD *)((char *)v76 + *(int *)(v115 + 48)) = *(_OWORD *)((char *)v77 + *(int *)(v115 + 48));
            *(_OWORD *)((char *)v76 + *(int *)(v115 + 64)) = *(_OWORD *)((char *)v77 + *(int *)(v115 + 64));
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v116 + 56))(v76, 0, 1, v115);
          }
LABEL_54:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v76, v77, *(void *)(v79 + 64));
          break;
      }
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      goto LABEL_92;
    }
    goto LABEL_33;
  }
  if (v82)
  {
    sub_1002ADE8C((uint64_t)v76, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_33:
    size_t v93 = *(void *)(*(void *)(sub_10000F214(&qword_10051A308) - 8) + 64);
LABEL_34:
    memcpy(v76, v77, v93);
    goto LABEL_92;
  }
  if (v536 != v537)
  {
    sub_1002ADE8C((uint64_t)v76, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int v94 = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v95 = swift_getEnumCaseMultiPayload();
        if (v94 == 1)
        {
          switch(v95)
          {
            case 1:
              uint64_t v459 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v459 - 8) + 32))(v76, v77, v459);
              v460 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v76 + v460[5]) = *(_DWORD *)((char *)v77 + v460[5]);
              uint64_t v461 = v460[6];
              v462 = (_OWORD *)((char *)v76 + v461);
              v463 = (_OWORD *)((char *)v77 + v461);
              long long v464 = v463[3];
              v462[2] = v463[2];
              v462[3] = v464;
              long long v465 = v463[1];
              _OWORD *v462 = *v463;
              v462[1] = v465;
              *(void *)((char *)v76 + v460[7]) = *(void *)((char *)v77 + v460[7]);
              *(void *)((char *)v76 + v460[8]) = *(void *)((char *)v77 + v460[8]);
              *(void *)((char *)v76 + v460[9]) = *(void *)((char *)v77 + v460[9]);
              *((unsigned char *)v76 + v460[10]) = *((unsigned char *)v77 + v460[10]);
              *(_OWORD *)((char *)v76 + v460[11]) = *(_OWORD *)((char *)v77 + v460[11]);
              *(_OWORD *)((char *)v76 + v460[12]) = *(_OWORD *)((char *)v77 + v460[12]);
              uint64_t v466 = v460[13];
              __dstc = (char *)v76 + v466;
              v467 = (char *)v77 + v466;
              uint64_t v468 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v469 = *(void *)(v468 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v469 + 48))(v467, 1, v468))
              {
                uint64_t v470 = sub_10000F214(&qword_100524BD0);
                memcpy(__dstc, v467, *(void *)(*(void *)(v470 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v469 + 32))(__dstc, v467, v468);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v469 + 56))(__dstc, 0, 1, v468);
              }
              *(_OWORD *)((char *)v76 + v460[14]) = *(_OWORD *)((char *)v77 + v460[14]);
              uint64_t v527 = v460[15];
              v528 = (char *)v76 + v527;
              v529 = (char *)v77 + v527;
              *((void *)v528 + 2) = *((void *)v529 + 2);
              *(_OWORD *)v528 = *(_OWORD *)v529;
              goto LABEL_132;
            case 2:
              uint64_t v471 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v471 - 8) + 32))(v76, v77, v471);
              v472 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v76 + v472[5]) = *(_DWORD *)((char *)v77 + v472[5]);
              uint64_t v473 = v472[6];
              v474 = (_OWORD *)((char *)v76 + v473);
              v475 = (_OWORD *)((char *)v77 + v473);
              long long v476 = v475[3];
              v474[2] = v475[2];
              v474[3] = v476;
              long long v477 = v475[1];
              _OWORD *v474 = *v475;
              v474[1] = v477;
              *(_OWORD *)((char *)v76 + v472[7]) = *(_OWORD *)((char *)v77 + v472[7]);
              *(void *)((char *)v76 + v472[8]) = *(void *)((char *)v77 + v472[8]);
              *(void *)((char *)v76 + v472[9]) = *(void *)((char *)v77 + v472[9]);
              *(void *)((char *)v76 + v472[10]) = *(void *)((char *)v77 + v472[10]);
              *(void *)((char *)v76 + v472[11]) = *(void *)((char *)v77 + v472[11]);
              *(void *)((char *)v76 + v472[12]) = *(void *)((char *)v77 + v472[12]);
              *(void *)((char *)v76 + v472[13]) = *(void *)((char *)v77 + v472[13]);
              *((unsigned char *)v76 + v472[14]) = *((unsigned char *)v77 + v472[14]);
              goto LABEL_132;
            case 3:
            case 4:
              uint64_t v96 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v96 - 8) + 32))(v76, v77, v96);
              v97 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v76 + v97[5]) = *(_DWORD *)((char *)v77 + v97[5]);
              uint64_t v98 = v97[6];
              long long v99 = (_OWORD *)((char *)v76 + v98);
              long long v100 = (_OWORD *)((char *)v77 + v98);
              long long v101 = v100[3];
              v99[2] = v100[2];
              v99[3] = v101;
              long long v102 = v100[1];
              *long long v99 = *v100;
              v99[1] = v102;
              *(_OWORD *)((char *)v76 + v97[7]) = *(_OWORD *)((char *)v77 + v97[7]);
              *(void *)((char *)v76 + v97[8]) = *(void *)((char *)v77 + v97[8]);
              *(void *)((char *)v76 + v97[9]) = *(void *)((char *)v77 + v97[9]);
              uint64_t v103 = v97[10];
              goto LABEL_131;
            case 5:
              uint64_t v478 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v478 - 8) + 32))(v76, v77, v478);
              v458 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_130;
            default:
              uint64_t v457 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v457 - 8) + 32))(v76, v77, v457);
              v458 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_130:
              *(_DWORD *)((char *)v76 + v458[5]) = *(_DWORD *)((char *)v77 + v458[5]);
              uint64_t v479 = v458[6];
              v480 = (_OWORD *)((char *)v76 + v479);
              v481 = (_OWORD *)((char *)v77 + v479);
              long long v482 = v481[3];
              v480[2] = v481[2];
              v480[3] = v482;
              long long v483 = v481[1];
              _OWORD *v480 = *v481;
              v480[1] = v483;
              *(_OWORD *)((char *)v76 + v458[7]) = *(_OWORD *)((char *)v77 + v458[7]);
              *(void *)((char *)v76 + v458[8]) = *(void *)((char *)v77 + v458[8]);
              uint64_t v103 = v458[9];
LABEL_131:
              *(void *)((char *)v76 + v103) = *(void *)((char *)v77 + v103);
LABEL_132:
              swift_storeEnumTagMultiPayload();
              uint64_t v484 = sub_10000F214(&qword_100520120);
              uint64_t v485 = *(int *)(v484 + 48);
              v486 = (_OWORD *)((char *)v76 + v485);
              v487 = (_OWORD *)((char *)v77 + v485);
              _OWORD *v486 = *v487;
              *(_OWORD *)((char *)v486 + 9) = *(_OWORD *)((char *)v487 + 9);
              uint64_t v488 = *(int *)(v484 + 64);
              v489 = (_OWORD *)((char *)v76 + v488);
              v490 = (_OWORD *)((char *)v77 + v488);
              _OWORD *v489 = *v490;
              *(_OWORD *)((char *)v489 + 9) = *(_OWORD *)((char *)v490 + 9);
              break;
          }
        }
        else
        {
          switch(v95)
          {
            case 1:
              uint64_t v493 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v493 - 8) + 32))(v76, v77, v493);
              v494 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)v76 + v494[5]) = *(_DWORD *)((char *)v77 + v494[5]);
              uint64_t v495 = v494[6];
              v496 = (_OWORD *)((char *)v76 + v495);
              v497 = (_OWORD *)((char *)v77 + v495);
              long long v498 = v497[3];
              v496[2] = v497[2];
              v496[3] = v498;
              long long v499 = v497[1];
              _OWORD *v496 = *v497;
              v496[1] = v499;
              *(void *)((char *)v76 + v494[7]) = *(void *)((char *)v77 + v494[7]);
              *(void *)((char *)v76 + v494[8]) = *(void *)((char *)v77 + v494[8]);
              *(void *)((char *)v76 + v494[9]) = *(void *)((char *)v77 + v494[9]);
              *((unsigned char *)v76 + v494[10]) = *((unsigned char *)v77 + v494[10]);
              *(_OWORD *)((char *)v76 + v494[11]) = *(_OWORD *)((char *)v77 + v494[11]);
              *(_OWORD *)((char *)v76 + v494[12]) = *(_OWORD *)((char *)v77 + v494[12]);
              uint64_t v500 = v494[13];
              __dstd = (char *)v76 + v500;
              v501 = (char *)v77 + v500;
              uint64_t v502 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v503 = *(void *)(v502 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v503 + 48))(v501, 1, v502))
              {
                uint64_t v504 = sub_10000F214(&qword_100524BD0);
                memcpy(__dstd, v501, *(void *)(*(void *)(v504 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v503 + 32))(__dstd, v501, v502);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v503 + 56))(__dstd, 0, 1, v502);
              }
              *(_OWORD *)((char *)v76 + v494[14]) = *(_OWORD *)((char *)v77 + v494[14]);
              uint64_t v530 = v494[15];
              v531 = (char *)v76 + v530;
              v532 = (char *)v77 + v530;
              *((void *)v531 + 2) = *((void *)v532 + 2);
              *(_OWORD *)v531 = *(_OWORD *)v532;
              goto LABEL_140;
            case 2:
              uint64_t v505 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v505 - 8) + 32))(v76, v77, v505);
              v506 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)v76 + v506[5]) = *(_DWORD *)((char *)v77 + v506[5]);
              uint64_t v507 = v506[6];
              v508 = (_OWORD *)((char *)v76 + v507);
              v509 = (_OWORD *)((char *)v77 + v507);
              long long v510 = v509[3];
              v508[2] = v509[2];
              v508[3] = v510;
              long long v511 = v509[1];
              _OWORD *v508 = *v509;
              v508[1] = v511;
              *(_OWORD *)((char *)v76 + v506[7]) = *(_OWORD *)((char *)v77 + v506[7]);
              *(void *)((char *)v76 + v506[8]) = *(void *)((char *)v77 + v506[8]);
              *(void *)((char *)v76 + v506[9]) = *(void *)((char *)v77 + v506[9]);
              *(void *)((char *)v76 + v506[10]) = *(void *)((char *)v77 + v506[10]);
              *(void *)((char *)v76 + v506[11]) = *(void *)((char *)v77 + v506[11]);
              *(void *)((char *)v76 + v506[12]) = *(void *)((char *)v77 + v506[12]);
              *(void *)((char *)v76 + v506[13]) = *(void *)((char *)v77 + v506[13]);
              *((unsigned char *)v76 + v506[14]) = *((unsigned char *)v77 + v506[14]);
              goto LABEL_140;
            case 3:
            case 4:
              uint64_t v153 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v153 - 8) + 32))(v76, v77, v153);
              uint64_t v154 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)v76 + v154[5]) = *(_DWORD *)((char *)v77 + v154[5]);
              uint64_t v155 = v154[6];
              uint64_t v156 = (_OWORD *)((char *)v76 + v155);
              v157 = (_OWORD *)((char *)v77 + v155);
              long long v158 = v157[3];
              v156[2] = v157[2];
              v156[3] = v158;
              long long v159 = v157[1];
              *uint64_t v156 = *v157;
              v156[1] = v159;
              *(_OWORD *)((char *)v76 + v154[7]) = *(_OWORD *)((char *)v77 + v154[7]);
              *(void *)((char *)v76 + v154[8]) = *(void *)((char *)v77 + v154[8]);
              *(void *)((char *)v76 + v154[9]) = *(void *)((char *)v77 + v154[9]);
              uint64_t v160 = v154[10];
              goto LABEL_139;
            case 5:
              uint64_t v512 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v512 - 8) + 32))(v76, v77, v512);
              v492 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_138;
            default:
              uint64_t v491 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v491 - 8) + 32))(v76, v77, v491);
              v492 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_138:
              *(_DWORD *)((char *)v76 + v492[5]) = *(_DWORD *)((char *)v77 + v492[5]);
              uint64_t v513 = v492[6];
              v514 = (_OWORD *)((char *)v76 + v513);
              v515 = (_OWORD *)((char *)v77 + v513);
              long long v516 = v515[3];
              v514[2] = v515[2];
              v514[3] = v516;
              long long v517 = v515[1];
              _OWORD *v514 = *v515;
              v514[1] = v517;
              *(_OWORD *)((char *)v76 + v492[7]) = *(_OWORD *)((char *)v77 + v492[7]);
              *(void *)((char *)v76 + v492[8]) = *(void *)((char *)v77 + v492[8]);
              uint64_t v160 = v492[9];
LABEL_139:
              *(void *)((char *)v76 + v160) = *(void *)((char *)v77 + v160);
LABEL_140:
              swift_storeEnumTagMultiPayload();
              break;
          }
        }
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        uint64_t v50 = v536;
        uint64_t v43 = v537;
        break;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v428 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v428 - 8) + 32))(v76, v77, v428);
            v429 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)v76 + v429[5]) = *(_DWORD *)((char *)v77 + v429[5]);
            uint64_t v430 = v429[6];
            v431 = (_OWORD *)((char *)v76 + v430);
            v432 = (_OWORD *)((char *)v77 + v430);
            long long v433 = v432[3];
            v431[2] = v432[2];
            v431[3] = v433;
            long long v434 = v432[1];
            _OWORD *v431 = *v432;
            v431[1] = v434;
            *(void *)((char *)v76 + v429[7]) = *(void *)((char *)v77 + v429[7]);
            *(void *)((char *)v76 + v429[8]) = *(void *)((char *)v77 + v429[8]);
            *(void *)((char *)v76 + v429[9]) = *(void *)((char *)v77 + v429[9]);
            *((unsigned char *)v76 + v429[10]) = *((unsigned char *)v77 + v429[10]);
            *(_OWORD *)((char *)v76 + v429[11]) = *(_OWORD *)((char *)v77 + v429[11]);
            *(_OWORD *)((char *)v76 + v429[12]) = *(_OWORD *)((char *)v77 + v429[12]);
            uint64_t v435 = v429[13];
            __dstb = (char *)v76 + v435;
            v436 = (char *)v77 + v435;
            uint64_t v437 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v438 = *(void *)(v437 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v438 + 48))(v436, 1, v437))
            {
              uint64_t v439 = sub_10000F214(&qword_100524BD0);
              memcpy(__dstb, v436, *(void *)(*(void *)(v439 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v438 + 32))(__dstb, v436, v437);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v438 + 56))(__dstb, 0, 1, v437);
            }
            *(_OWORD *)((char *)v76 + v429[14]) = *(_OWORD *)((char *)v77 + v429[14]);
            uint64_t v524 = v429[15];
            v525 = (char *)v76 + v524;
            v526 = (char *)v77 + v524;
            *((void *)v525 + 2) = *((void *)v526 + 2);
            *(_OWORD *)v525 = *(_OWORD *)v526;
            uint64_t v43 = v537;
            goto LABEL_122;
          case 2u:
            uint64_t v440 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v440 - 8) + 32))(v76, v77, v440);
            v441 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)v76 + v441[5]) = *(_DWORD *)((char *)v77 + v441[5]);
            uint64_t v442 = v441[6];
            v443 = (_OWORD *)((char *)v76 + v442);
            v444 = (_OWORD *)((char *)v77 + v442);
            long long v445 = v444[3];
            v443[2] = v444[2];
            v443[3] = v445;
            long long v446 = v444[1];
            _OWORD *v443 = *v444;
            v443[1] = v446;
            *(_OWORD *)((char *)v76 + v441[7]) = *(_OWORD *)((char *)v77 + v441[7]);
            *(void *)((char *)v76 + v441[8]) = *(void *)((char *)v77 + v441[8]);
            *(void *)((char *)v76 + v441[9]) = *(void *)((char *)v77 + v441[9]);
            *(void *)((char *)v76 + v441[10]) = *(void *)((char *)v77 + v441[10]);
            *(void *)((char *)v76 + v441[11]) = *(void *)((char *)v77 + v441[11]);
            *(void *)((char *)v76 + v441[12]) = *(void *)((char *)v77 + v441[12]);
            *(void *)((char *)v76 + v441[13]) = *(void *)((char *)v77 + v441[13]);
            *((unsigned char *)v76 + v441[14]) = *((unsigned char *)v77 + v441[14]);
            goto LABEL_122;
          case 3u:
          case 4u:
            uint64_t v136 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v136 - 8) + 32))(v76, v77, v136);
            v137 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)v76 + v137[5]) = *(_DWORD *)((char *)v77 + v137[5]);
            uint64_t v138 = v137[6];
            long long v139 = (_OWORD *)((char *)v76 + v138);
            long long v140 = (_OWORD *)((char *)v77 + v138);
            long long v141 = v140[3];
            v139[2] = v140[2];
            v139[3] = v141;
            long long v142 = v140[1];
            *long long v139 = *v140;
            v139[1] = v142;
            *(_OWORD *)((char *)v76 + v137[7]) = *(_OWORD *)((char *)v77 + v137[7]);
            *(void *)((char *)v76 + v137[8]) = *(void *)((char *)v77 + v137[8]);
            *(void *)((char *)v76 + v137[9]) = *(void *)((char *)v77 + v137[9]);
            uint64_t v143 = v137[10];
            goto LABEL_121;
          case 5u:
            uint64_t v447 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v447 - 8) + 32))(v76, v77, v447);
            v427 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            goto LABEL_120;
          default:
            uint64_t v426 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v426 - 8) + 32))(v76, v77, v426);
            v427 = (int *)type metadata accessor for ObjectDetectorResult(0);
LABEL_120:
            *(_DWORD *)((char *)v76 + v427[5]) = *(_DWORD *)((char *)v77 + v427[5]);
            uint64_t v448 = v427[6];
            v449 = (_OWORD *)((char *)v76 + v448);
            v450 = (_OWORD *)((char *)v77 + v448);
            long long v451 = v450[3];
            v449[2] = v450[2];
            v449[3] = v451;
            long long v452 = v450[1];
            _OWORD *v449 = *v450;
            v449[1] = v452;
            *(_OWORD *)((char *)v76 + v427[7]) = *(_OWORD *)((char *)v77 + v427[7]);
            *(void *)((char *)v76 + v427[8]) = *(void *)((char *)v77 + v427[8]);
            uint64_t v143 = v427[9];
LABEL_121:
            *(void *)((char *)v76 + v143) = *(void *)((char *)v77 + v143);
LABEL_122:
            swift_storeEnumTagMultiPayload();
            uint64_t v453 = sub_10000F214(&qword_10051A328);
            *(void *)((char *)v76 + *(int *)(v453 + 48)) = *(void *)((char *)v77 + *(int *)(v453 + 48));
            *(_OWORD *)((char *)v76 + *(int *)(v453 + 64)) = *(_OWORD *)((char *)v77 + *(int *)(v453 + 64));
            swift_storeEnumTagMultiPayload();
            uint64_t v50 = v536;
            break;
        }
        break;
      case 5u:
        uint64_t v126 = sub_10000F214(&qword_10051A320);
        uint64_t v127 = *(void *)(v126 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v127 + 48))(v77, 1, v126))
        {
          uint64_t v128 = type metadata accessor for DataDetectorState(0);
          memcpy(v76, v77, *(void *)(*(void *)(v128 - 8) + 64));
        }
        else
        {
          uint64_t v189 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v189 - 8) + 32))(v76, v77, v189);
          uint64_t v190 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)v76 + v190[5]) = *(_DWORD *)((char *)v77 + v190[5]);
          uint64_t v191 = v190[6];
          uint64_t v192 = (_OWORD *)((char *)v76 + v191);
          uint64_t v193 = (_OWORD *)((char *)v77 + v191);
          long long v194 = v193[3];
          v192[2] = v193[2];
          v192[3] = v194;
          long long v195 = v193[1];
          *uint64_t v192 = *v193;
          v192[1] = v195;
          *(_OWORD *)((char *)v76 + v190[7]) = *(_OWORD *)((char *)v77 + v190[7]);
          *(void *)((char *)v76 + v190[8]) = *(void *)((char *)v77 + v190[8]);
          *(void *)((char *)v76 + v190[9]) = *(void *)((char *)v77 + v190[9]);
          *(void *)((char *)v76 + v190[10]) = *(void *)((char *)v77 + v190[10]);
          *(void *)((char *)v76 + v190[11]) = *(void *)((char *)v77 + v190[11]);
          *(void *)((char *)v76 + v190[12]) = *(void *)((char *)v77 + v190[12]);
          *(void *)((char *)v76 + v190[13]) = *(void *)((char *)v77 + v190[13]);
          *((unsigned char *)v76 + v190[14]) = *((unsigned char *)v77 + v190[14]);
          *(void *)((char *)v76 + *(int *)(v126 + 48)) = *(void *)((char *)v77 + *(int *)(v126 + 48));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v127 + 56))(v76, 0, 1, v126);
        }
        goto LABEL_72;
      case 8u:
        uint64_t v144 = sub_10000F214(&qword_10051A428);
        uint64_t v145 = *(void *)(v144 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v145 + 48))(v77, 1, v144))
        {
          uint64_t v146 = type metadata accessor for EventLookupState(0);
          memcpy(v76, v77, *(void *)(*(void *)(v146 - 8) + 64));
        }
        else
        {
          _OWORD *v76 = *v77;
          uint64_t v196 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v197 = v196[5];
          __dstf = (char *)v76 + v197;
          uint64_t v198 = (char *)v77 + v197;
          uint64_t v199 = type metadata accessor for Date();
          v200 = *(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 32);
          v200(__dstf, v198, v199);
          uint64_t v201 = v199;
          uint64_t v43 = v537;
          v200((char *)v76 + v196[6], (char *)v77 + v196[6], v201);
          *(_OWORD *)((char *)v76 + v196[7]) = *(_OWORD *)((char *)v77 + v196[7]);
          *(_OWORD *)((char *)v76 + v196[8]) = *(_OWORD *)((char *)v77 + v196[8]);
          uint64_t v202 = v196[9];
          uint64_t v71 = v535;
          uint64_t v50 = v536;
          *((unsigned char *)v76 + v202) = *((unsigned char *)v77 + v202);
          *(_OWORD *)((char *)v76 + *(int *)(v144 + 48)) = *(_OWORD *)((char *)v77 + *(int *)(v144 + 48));
          *(_OWORD *)((char *)v76 + *(int *)(v144 + 64)) = *(_OWORD *)((char *)v77 + *(int *)(v144 + 64));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v145 + 56))(v76, 0, 1, v144);
        }
LABEL_72:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        size_t v93 = *(void *)(v79 + 64);
        goto LABEL_34;
    }
  }
LABEL_92:
  uint64_t v264 = sub_10000F214(&qword_100525F58);
  *(void *)((char *)v76 + *(int *)(v264 + 28)) = *(void *)((char *)v77 + *(int *)(v264 + 28));
  swift_release();
  uint64_t v265 = v71[13];
  uint64_t v266 = (uint64_t)v50 + v265;
  uint64_t v267 = (uint64_t)v43 + v265;
  *(unsigned char *)uint64_t v266 = *(unsigned char *)v267;
  *(void *)(v266 + 8) = *(void *)(v267 + 8);
  swift_release();
  uint64_t v268 = v71[14];
  uint64_t v269 = (uint64_t)v50 + v268;
  uint64_t v270 = (uint64_t)v43 + v268;
  *(unsigned char *)uint64_t v269 = *(unsigned char *)v270;
  *(void *)(v269 + 8) = *(void *)(v270 + 8);
  swift_release();
  uint64_t v271 = v71[15];
  uint64_t v272 = (uint64_t)v50 + v271;
  uint64_t v273 = (uint64_t)v43 + v271;
  uint64_t v274 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v274 - 8) + 40))(v272, v273, v274);
  uint64_t v275 = sub_10000F214(&qword_10051C250);
  *(void *)(v272 + *(int *)(v275 + 28)) = *(void *)(v273 + *(int *)(v275 + 28));
  swift_release();
  uint64_t v276 = v71[16];
  v277 = (uint64_t *)((char *)v50 + v276);
  uint64_t v278 = (uint64_t)v43 + v276;
  uint64_t v279 = *(uint64_t *)((char *)v43 + v276 + 8);
  void *v277 = *(uint64_t *)((char *)v43 + v276);
  v277[1] = v279;
  swift_bridgeObjectRelease();
  v277[2] = *(void *)(v278 + 16);
  swift_release();
  uint64_t v280 = v71[17];
  uint64_t v281 = (uint64_t)v50 + v280;
  uint64_t v282 = (uint64_t)v43 + v280;
  *(unsigned char *)uint64_t v281 = *(unsigned char *)v282;
  *(void *)(v281 + 8) = *(void *)(v282 + 8);
  swift_release();
  uint64_t v283 = v71[18];
  uint64_t v284 = (uint64_t)v50 + v283;
  uint64_t v285 = (uint64_t)v43 + v283;
  *(unsigned char *)uint64_t v284 = *((unsigned char *)v43 + v283);
  *(void *)(v284 + 8) = *(uint64_t *)((char *)v43 + v283 + 8);
  swift_release();
  *(unsigned char *)(v284 + 16) = *(unsigned char *)(v285 + 16);
  uint64_t v286 = v71[19];
  uint64_t v287 = (uint64_t)v50 + v286;
  uint64_t v288 = (uint64_t)v43 + v286;
  *(unsigned char *)uint64_t v287 = *(unsigned char *)v288;
  *(void *)(v287 + 8) = *(void *)(v288 + 8);
  swift_release();
  uint64_t v289 = v71[20];
  uint64_t v290 = (uint64_t)v50 + v289;
  uint64_t v291 = (uint64_t)v43 + v289;
  *(unsigned char *)uint64_t v290 = *(unsigned char *)v291;
  *(void *)(v290 + 8) = *(void *)(v291 + 8);
  swift_release();
  uint64_t v292 = v71[21];
  uint64_t v293 = (uint64_t)v50 + v292;
  uint64_t v294 = (uint64_t)v43 + v292;
  *(unsigned char *)uint64_t v293 = *(unsigned char *)v294;
  *(void *)(v293 + 8) = *(void *)(v294 + 8);
  swift_release();
  uint64_t v295 = v71[22];
  uint64_t v296 = (uint64_t)v50 + v295;
  uint64_t v297 = (uint64_t)v43 + v295;
  *(uint64_t *)((char *)v50 + v295) = *(uint64_t *)((char *)v43 + v295);
  swift_release();
  *(void *)(v296 + 8) = *(void *)(v297 + 8);
  swift_release();
  uint64_t v298 = v71[23];
  uint64_t v299 = (uint64_t)v50 + v298;
  uint64_t v300 = (uint64_t)v43 + v298;
  *(unsigned char *)uint64_t v299 = *(unsigned char *)v300;
  *(void *)(v299 + 8) = *(void *)(v300 + 8);
  swift_release();
  uint64_t v301 = v71[24];
  uint64_t v302 = (uint64_t)v50 + v301;
  uint64_t v303 = (uint64_t)v43 + v301;
  *(uint64_t *)((char *)v50 + v301) = *(uint64_t *)((char *)v43 + v301);
  swift_release();
  *(void *)(v302 + 8) = *(void *)(v303 + 8);
  swift_release();
  uint64_t v304 = v71[25];
  uint64_t v305 = (uint64_t)v50 + v304;
  uint64_t v306 = (uint64_t)v43 + v304;
  LOBYTE(v304) = *((unsigned char *)v43 + v304 + 16);
  v307 = *(void **)v305;
  v308 = *(void **)(v305 + 8);
  *(_OWORD *)uint64_t v305 = *(_OWORD *)v306;
  char v309 = *(unsigned char *)(v305 + 16);
  *(unsigned char *)(v305 + 16) = v304;
  sub_1000ACB3C(v307, v308, v309);
  *(void *)(v305 + 24) = *(void *)(v306 + 24);
  swift_release();
  uint64_t v310 = v71[26];
  v311 = (uint64_t *)((char *)v50 + v310);
  v312 = (uint64_t *)((char *)v43 + v310);
  uint64_t v313 = *(uint64_t *)((char *)v43 + v310);
  if ((~*(uint64_t *)((char *)v50 + v310) & 0xF000000000000007) != 0)
  {
    if ((~v313 & 0xF000000000000007) != 0)
    {
      void *v311 = v313;
      swift_release();
    }
    else
    {
      sub_100288B28((uint64_t)v311);
      void *v311 = *v312;
    }
  }
  else
  {
    void *v311 = v313;
  }
  v311[1] = v312[1];
  swift_release();
  uint64_t v314 = v71[27];
  v315 = (uint64_t *)((char *)v50 + v314);
  v316 = (uint64_t *)((char *)v43 + v314);
  v317 = *(void **)((char *)v50 + v314);
  void *v315 = *v316;

  v315[1] = v316[1];
  swift_release();
  uint64_t v318 = v71[28];
  uint64_t v319 = (uint64_t)v50 + v318;
  uint64_t v320 = (uint64_t)v43 + v318;
  *(uint64_t *)((char *)v50 + v318) = *(uint64_t *)((char *)v43 + v318);
  swift_release();
  *(void *)(v319 + 8) = *(void *)(v320 + 8);
  swift_release();
  uint64_t v321 = v71[29];
  uint64_t v322 = (uint64_t)v50 + v321;
  uint64_t v323 = (uint64_t)v43 + v321;
  *(uint64_t *)((char *)v50 + v321) = *(uint64_t *)((char *)v43 + v321);
  swift_release();
  *(void *)(v322 + 8) = *(void *)(v323 + 8);
  swift_release();
  uint64_t v324 = v71[30];
  uint64_t v325 = (uint64_t)v50 + v324;
  uint64_t v326 = (uint64_t)v43 + v324;
  v327 = *(void **)((char *)v50 + v324);
  if (v327)
  {
    if (*(void *)v326)
    {
      *(void *)uint64_t v325 = *(void *)v326;

      _s6Tamale17AnyLocalizedErrorVwxx_0(v325 + 8);
      *(_OWORD *)(v325 + 8) = *(_OWORD *)(v326 + 8);
      *(_OWORD *)(v325 + 24) = *(_OWORD *)(v326 + 24);
      *(void *)(v325 + 40) = *(void *)(v326 + 40);
      goto LABEL_102;
    }
    sub_10000EB6C((id *)v325);
  }
  long long v328 = *(_OWORD *)(v326 + 16);
  *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
  *(_OWORD *)(v325 + 16) = v328;
  *(_OWORD *)(v325 + 32) = *(_OWORD *)(v326 + 32);
LABEL_102:
  *(void *)(v325 + 48) = *(void *)(v326 + 48);
  swift_release();
  uint64_t v329 = v71[31];
  uint64_t v330 = (uint64_t)v50 + v329;
  uint64_t v331 = (uint64_t)v43 + v329;
  *(void *)uint64_t v330 = *(uint64_t *)((char *)v43 + v329);
  *(void *)(v330 + 8) = *(uint64_t *)((char *)v43 + v329 + 8);
  swift_release();
  *(_OWORD *)(v330 + 16) = *(_OWORD *)(v331 + 16);
  swift_release();
  uint64_t v332 = v71[32];
  v333 = (uint64_t *)((char *)v50 + v332);
  v334 = (uint64_t *)((char *)v43 + v332);
  void *v333 = *v334;
  v333[1] = v334[1];
  swift_release();
  uint64_t v335 = v71[33];
  uint64_t v336 = (uint64_t)v50 + v335;
  uint64_t v337 = (uint64_t)v43 + v335;
  *(unsigned char *)uint64_t v336 = *(unsigned char *)v337;
  *(void *)(v336 + 8) = *(void *)(v337 + 8);
  swift_release();
  uint64_t v338 = v71[34];
  uint64_t v339 = (uint64_t)v50 + v338;
  uint64_t v340 = (uint64_t)v43 + v338;
  *(uint64_t *)((char *)v50 + v338) = *(uint64_t *)((char *)v43 + v338);
  swift_bridgeObjectRelease();
  *(void *)(v339 + 8) = *(void *)(v340 + 8);
  swift_release();
  uint64_t v341 = v71[35];
  uint64_t v342 = (uint64_t)v50 + v341;
  uint64_t v343 = (uint64_t)v43 + v341;
  *(unsigned char *)uint64_t v342 = *(unsigned char *)v343;
  *(void *)(v342 + 8) = *(void *)(v343 + 8);
  swift_release();
  uint64_t v344 = v71[36];
  v345 = (uint64_t *)((char *)v50 + v344);
  uint64_t v346 = (uint64_t)v43 + v344;
  uint64_t v347 = *(uint64_t *)((char *)v43 + v344 + 8);
  void *v345 = *(uint64_t *)((char *)v43 + v344);
  v345[1] = v347;
  swift_bridgeObjectRelease();
  v345[2] = *(void *)(v346 + 16);
  swift_release();
  uint64_t v348 = v71[37];
  uint64_t v349 = (uint64_t)v50 + v348;
  uint64_t v350 = (uint64_t)v43 + v348;
  *(unsigned char *)uint64_t v349 = *(unsigned char *)v350;
  *(void *)(v349 + 8) = *(void *)(v350 + 8);
  swift_release();
  uint64_t v351 = v71[38];
  uint64_t v352 = (uint64_t)v50 + v351;
  uint64_t v353 = (uint64_t)v43 + v351;
  *(unsigned char *)uint64_t v352 = *(unsigned char *)v353;
  *(void *)(v352 + 8) = *(void *)(v353 + 8);
  swift_release();
  uint64_t v354 = v71[39];
  uint64_t v355 = (uint64_t)v50 + v354;
  uint64_t v356 = (uint64_t)v43 + v354;
  *(unsigned char *)uint64_t v355 = *(unsigned char *)v356;
  *(void *)(v355 + 8) = *(void *)(v356 + 8);
  swift_release();
  uint64_t v357 = v71[40];
  uint64_t v358 = (uint64_t)v50 + v357;
  uint64_t v359 = (uint64_t)v43 + v357;
  *(unsigned char *)uint64_t v358 = *(unsigned char *)v359;
  *(void *)(v358 + 8) = *(void *)(v359 + 8);
  swift_release();
  uint64_t v360 = v71[41];
  uint64_t v361 = (uint64_t)v50 + v360;
  uint64_t v362 = (uint64_t)v43 + v360;
  *(unsigned char *)uint64_t v361 = *(unsigned char *)v362;
  *(void *)(v361 + 8) = *(void *)(v362 + 8);
  swift_release();
  uint64_t v363 = v71[42];
  uint64_t v364 = (uint64_t)v50 + v363;
  uint64_t v365 = (uint64_t)v43 + v363;
  *(unsigned char *)uint64_t v364 = *(unsigned char *)v365;
  *(void *)(v364 + 8) = *(void *)(v365 + 8);
  swift_release();
  uint64_t v366 = v71[43];
  uint64_t v367 = (uint64_t)v50 + v366;
  uint64_t v368 = (uint64_t)v43 + v366;
  *(unsigned char *)uint64_t v367 = *(unsigned char *)v368;
  *(void *)(v367 + 8) = *(void *)(v368 + 8);
  swift_release();
  uint64_t v369 = v71[44];
  uint64_t v370 = (uint64_t)v50 + v369;
  uint64_t v371 = (uint64_t)v43 + v369;
  *(uint64_t *)((char *)v50 + v369) = *(uint64_t *)((char *)v43 + v369);
  swift_bridgeObjectRelease();
  *(void *)(v370 + 8) = *(void *)(v371 + 8);
  swift_release();
  uint64_t v372 = v71[45];
  uint64_t v373 = (uint64_t)v50 + v372;
  uint64_t v374 = (uint64_t)v43 + v372;
  *(uint64_t *)((char *)v50 + v372) = *(uint64_t *)((char *)v43 + v372);
  swift_bridgeObjectRelease();
  *(void *)(v373 + 8) = *(void *)(v374 + 8);
  swift_release();
  uint64_t v375 = v71[46];
  uint64_t v376 = (uint64_t)v50 + v375;
  uint64_t v377 = (uint64_t)v43 + v375;
  *(uint64_t *)((char *)v50 + v375) = *(uint64_t *)((char *)v43 + v375);
  swift_bridgeObjectRelease();
  *(void *)(v376 + 8) = *(void *)(v377 + 8);
  swift_release();
  uint64_t v378 = v71[47];
  uint64_t v379 = (uint64_t)v50 + v378;
  uint64_t v380 = (uint64_t)v43 + v378;
  *(unsigned char *)uint64_t v379 = *(unsigned char *)v380;
  *(void *)(v379 + 8) = *(void *)(v380 + 8);
  swift_release();
  uint64_t v381 = v71[48];
  uint64_t v382 = (uint64_t)v50 + v381;
  uint64_t v383 = (uint64_t)v43 + v381;
  *(unsigned char *)uint64_t v382 = *(unsigned char *)v383;
  *(void *)(v382 + 8) = *(void *)(v383 + 8);
  swift_release();
  uint64_t v384 = v71[49];
  uint64_t v385 = (uint64_t)v50 + v384;
  uint64_t v386 = (uint64_t)v43 + v384;
  *(unsigned char *)uint64_t v385 = *(unsigned char *)v386;
  *(void *)(v385 + 8) = *(void *)(v386 + 8);
  swift_release();
  uint64_t v387 = v71[50];
  uint64_t v388 = (uint64_t)v50 + v387;
  uint64_t v389 = (uint64_t)v43 + v387;
  *(unsigned char *)uint64_t v388 = *(unsigned char *)v389;
  *(void *)(v388 + 8) = *(void *)(v389 + 8);
  swift_release();
  uint64_t v390 = v71[51];
  uint64_t v391 = (uint64_t)v50 + v390;
  uint64_t v392 = (uint64_t)v43 + v390;
  *(unsigned char *)uint64_t v391 = *(unsigned char *)v392;
  *(void *)(v391 + 8) = *(void *)(v392 + 8);
  swift_release();
  uint64_t v393 = v71[52];
  uint64_t v394 = (uint64_t)v50 + v393;
  uint64_t v395 = (uint64_t)v43 + v393;
  *(unsigned char *)uint64_t v394 = *(unsigned char *)v395;
  *(void *)(v394 + 8) = *(void *)(v395 + 8);
  swift_release();
  uint64_t v396 = v71[53];
  uint64_t v397 = (uint64_t)v50 + v396;
  uint64_t v398 = (uint64_t)v43 + v396;
  *(unsigned char *)uint64_t v397 = *(unsigned char *)v398;
  *(void *)(v397 + 8) = *(void *)(v398 + 8);
  swift_release();
  uint64_t v399 = v71[54];
  uint64_t v400 = (uint64_t)v50 + v399;
  uint64_t v401 = (uint64_t)v43 + v399;
  *(unsigned char *)uint64_t v400 = *(unsigned char *)v401;
  *(void *)(v400 + 8) = *(void *)(v401 + 8);
  swift_release();
  *(uint64_t *)((char *)v50 + v71[55]) = *(uint64_t *)((char *)v43 + v71[55]);
  swift_release();
  uint64_t v402 = v71[56];
  v403 = *(void **)((char *)v50 + v402);
  *(uint64_t *)((char *)v50 + v402) = *(uint64_t *)((char *)v43 + v402);

  *(uint64_t *)((char *)v50 + v71[57]) = *(uint64_t *)((char *)v43 + v71[57]);
  swift_release();
  *(uint64_t *)((char *)v50 + v71[58]) = *(uint64_t *)((char *)v43 + v71[58]);
  swift_release();
  *(uint64_t *)((char *)v50 + v71[59]) = *(uint64_t *)((char *)v43 + v71[59]);
  swift_release();
  *(uint64_t *)((char *)v50 + v71[60]) = *(uint64_t *)((char *)v43 + v71[60]);
  swift_release();
  *(uint64_t *)((char *)v50 + v71[61]) = *(uint64_t *)((char *)v43 + v71[61]);
  swift_release();
  uint64_t v404 = v71[62];
  v405 = (uint64_t *)((char *)v50 + v404);
  uint64_t v406 = (uint64_t)v43 + v404;
  if (*(uint64_t *)((char *)v50 + v404 + 24))
  {
    if (*(void *)(v406 + 24))
    {
      uint64_t v407 = *v405;
      unint64_t v408 = v405[1];
      *(_OWORD *)v405 = *(_OWORD *)v406;
      sub_100038B34(v407, v408);
      uint64_t v409 = *(void *)(v406 + 24);
      v405[2] = *(void *)(v406 + 16);
      v405[3] = v409;
      swift_bridgeObjectRelease();
      v405[4] = *(void *)(v406 + 32);
      swift_release();
      v405[5] = *(void *)(v406 + 40);
      swift_release();
      v405[6] = *(void *)(v406 + 48);
      swift_release();
      v405[7] = *(void *)(v406 + 56);
      swift_release();
      v405[8] = *(void *)(v406 + 64);
      swift_release();
      v405[9] = *(void *)(v406 + 72);
      swift_release();
      v405[10] = *(void *)(v406 + 80);
      swift_release();
      goto LABEL_107;
    }
    sub_100288B7C((uint64_t)v405);
  }
  long long v410 = *(_OWORD *)(v406 + 48);
  *((_OWORD *)v405 + 2) = *(_OWORD *)(v406 + 32);
  *((_OWORD *)v405 + 3) = v410;
  *((_OWORD *)v405 + 4) = *(_OWORD *)(v406 + 64);
  v405[10] = *(void *)(v406 + 80);
  long long v411 = *(_OWORD *)(v406 + 16);
  *(_OWORD *)v405 = *(_OWORD *)v406;
  *((_OWORD *)v405 + 1) = v411;
LABEL_107:
  v405[11] = *(void *)(v406 + 88);
  swift_release();
  *(uint64_t *)((char *)v50 + v71[63]) = *(uint64_t *)((char *)v43 + v71[63]);
  swift_release();
  uint64_t v412 = v71[64];
  uint64_t v413 = (uint64_t)v50 + v412;
  uint64_t v414 = (uint64_t)v43 + v412;
  *(uint64_t *)((char *)v50 + v412) = *(uint64_t *)((char *)v43 + v412);
  swift_release();
  *(void *)(v413 + 8) = *(void *)(v414 + 8);
  swift_release();
  uint64_t v415 = v71[65];
  v416 = (char *)v50 + v415;
  v417 = (char *)v43 + v415;
  uint64_t v418 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v419 = *(void *)(v418 - 8);
  v420 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v419 + 48);
  int v421 = v420(v416, 1, v418);
  int v422 = v420(v417, 1, v418);
  if (!v421)
  {
    if (!v422)
    {
      (*(void (**)(char *, char *, uint64_t))(v419 + 40))(v416, v417, v418);
      goto LABEL_113;
    }
    (*(void (**)(char *, uint64_t))(v419 + 8))(v416, v418);
    goto LABEL_112;
  }
  if (v422)
  {
LABEL_112:
    uint64_t v423 = sub_10000F214(&qword_100525F60);
    memcpy(v416, v417, *(void *)(*(void *)(v423 - 8) + 64));
    goto LABEL_113;
  }
  (*(void (**)(char *, char *, uint64_t))(v419 + 32))(v416, v417, v418);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v419 + 56))(v416, 0, 1, v418);
LABEL_113:
  v424 = (int *)sub_10000F214(&qword_100519A10);
  v416[v424[9]] = v417[v424[9]];
  *(void *)&v416[v424[10]] = *(void *)&v417[v424[10]];
  swift_release();
  v416[v424[11]] = v417[v424[11]];
  return v50;
}

uint64_t sub_10028DD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028DD60);
}

uint64_t sub_10028DD60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100525F68);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[9];
LABEL_13:
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v15(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_10000F214(&qword_100525F50);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[10];
    goto LABEL_13;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[11]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = sub_10000F214(&qword_100525F58);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
    {
      uint64_t v7 = v13;
      uint64_t v8 = *(void *)(v13 - 8);
      uint64_t v9 = a3[12];
      goto LABEL_13;
    }
    uint64_t v14 = sub_10000F214(&qword_10051C250);
    if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
    {
      uint64_t v7 = v14;
      uint64_t v8 = *(void *)(v14 - 8);
      uint64_t v9 = a3[15];
      goto LABEL_13;
    }
    uint64_t v16 = sub_10000F214(&qword_100519A10);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[65];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_10028DF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028DF9C);
}

uint64_t sub_10028DF9C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000F214(&qword_100525F68);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
LABEL_11:
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v15(a1 + v11, a2, a2, v9);
  }
  uint64_t result = sub_10000F214(&qword_100525F50);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[10];
    goto LABEL_11;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[11]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_10000F214(&qword_100525F58);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[12];
    goto LABEL_11;
  }
  uint64_t v14 = sub_10000F214(&qword_10051C250);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a3)
  {
    uint64_t v9 = v14;
    uint64_t v10 = *(void *)(v14 - 8);
    uint64_t v11 = a4[15];
    goto LABEL_11;
  }
  uint64_t v16 = sub_10000F214(&qword_100519A10);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a4[65];

  return v17(v19, a2, a2, v18);
}

void sub_10028E1C4()
{
  sub_10028E510(319, &qword_100525FD8, (uint64_t (*)(uint64_t))&type metadata accessor for WithCurrentHostingControllerAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_10028E510(319, &qword_100525FE0, (uint64_t (*)(uint64_t))type metadata accessor for AppConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v1 <= 0x3F)
    {
      sub_10028E4B4();
      if (v2 <= 0x3F)
      {
        sub_10028E510(319, (unint64_t *)&qword_10051C2C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
        if (v3 <= 0x3F)
        {
          sub_100027AE0();
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_10028E4B4()
{
  if (!qword_100525FE8)
  {
    sub_10000F69C(&qword_10051A308);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100525FE8);
    }
  }
}

void sub_10028E510(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10028E574()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10028E594@<X0>(char *a1@<X8>)
{
  return sub_10022FB0C(a1);
}

uint64_t sub_10028E5FC()
{
  return sub_1002AAE78((uint64_t (*)(uint64_t))sub_100230BC4);
}

uint64_t sub_10028E618@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10023A938(v4, a1);
}

uint64_t sub_10028E68C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10023AC0C(v4, a1);
}

uint64_t sub_10028E700()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_10023BD40);
}

unint64_t sub_10028E718()
{
  unint64_t result = qword_100526158;
  if (!qword_100526158)
  {
    sub_10000F69C(&qword_100526150);
    sub_100013AA8(&qword_100526148, &qword_100526140);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526158);
  }
  return result;
}

uint64_t sub_10028E7B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 120);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F478(v2);
  sub_10000F478(v3);
  return a1;
}

uint64_t sub_10028E878()
{
  return sub_1002ADEF0(sub_100238A8C);
}

uint64_t sub_10028E890(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10028E90C(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[15];
  uint64_t v6 = a1[19];
  uint64_t v5 = a1[17];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F478(v2);
  sub_10000F478(v3);
  sub_10000F478(v5);
  sub_10000F478(v6);
  return a1;
}

uint64_t sub_10028E9F4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContentView();

  return sub_10023C5E4(a1, a2);
}

unint64_t sub_10028EA74()
{
  unint64_t result = qword_100526178;
  if (!qword_100526178)
  {
    sub_10000F69C(&qword_100526170);
    sub_10028E890(&qword_100526168, &qword_100526160, (void (*)(void))sub_10028E718);
    sub_100013AA8(&qword_100526180, &qword_100526188);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526178);
  }
  return result;
}

void *sub_10028EB40(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[15];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[19];
  uint64_t v7 = a1[22];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F478(v2);
  sub_10000F478(v3);
  sub_10000F478(v5);
  sub_10000F478(v6);
  swift_release();
  sub_10000F478(v7);
  return a1;
}

uint64_t sub_10028EC48(long long *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10023C6C8(a1, v4);
}

unint64_t sub_10028ECB8()
{
  unint64_t result = qword_100526198;
  if (!qword_100526198)
  {
    sub_10000F69C(&qword_100526190);
    sub_10028EA74();
    sub_100013AA8(&qword_1005261A0, &qword_1005261A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526198);
  }
  return result;
}

void *sub_10028ED58(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[15];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[19];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[25];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F478(v2);
  sub_10000F478(v3);
  sub_10000F478(v5);
  sub_10000F478(v6);
  swift_release();
  sub_10000F478(v7);
  swift_release();
  sub_10000F478(v8);
  return a1;
}

uint64_t sub_10028EE84(uint64_t a1)
{
  return sub_1002AB3E0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10023C7F0);
}

unint64_t sub_10028EE9C()
{
  unint64_t result = qword_1005261B8;
  if (!qword_1005261B8)
  {
    sub_10000F69C(&qword_1005261B0);
    sub_10028ECB8();
    sub_100013AA8(&qword_1005261C0, &qword_1005261C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005261B8);
  }
  return result;
}

void *sub_10028EF3C(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[15];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[19];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[25];
  uint64_t v9 = a1[28];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F478(v2);
  sub_10000F478(v3);
  sub_10000F478(v5);
  sub_10000F478(v6);
  swift_release();
  sub_10000F478(v7);
  swift_release();
  sub_10000F478(v8);
  swift_release();
  sub_10000F478(v9);
  return a1;
}

uint64_t sub_10028F098(uint64_t a1, uint64_t a2)
{
  return sub_1002AACE8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10023CFE0);
}

unint64_t sub_10028F0B0()
{
  unint64_t result = qword_1005261D8;
  if (!qword_1005261D8)
  {
    sub_10000F69C(&qword_1005261D0);
    sub_10028EE9C();
    sub_1000805F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005261D8);
  }
  return result;
}

unint64_t sub_10028F12C()
{
  unint64_t result = qword_1005261E0;
  if (!qword_1005261E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005261E0);
  }
  return result;
}

void *sub_10028F180(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[15];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[19];
  uint64_t v7 = a1[22];
  uint64_t v8 = a1[25];
  uint64_t v9 = a1[28];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F478(v2);
  sub_10000F478(v3);
  sub_10000F478(v5);
  sub_10000F478(v6);
  swift_release();
  sub_10000F478(v7);
  swift_release();
  sub_10000F478(v8);
  swift_release();
  sub_10000F478(v9);
  swift_release();
  return a1;
}

uint64_t sub_10028F2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10023D390(a1, a2, v6);
}

uint64_t sub_10028F370(uint64_t a1, uint64_t a2)
{
  return sub_1002AACE8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100240888);
}

uint64_t sub_10028F394(uint64_t a1, uint64_t a2)
{
  return sub_1002AACE8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100240924);
}

uint64_t sub_10028F3B0(uint64_t a1, uint64_t a2)
{
  return sub_1002AA518(a1, a2, sub_100241044);
}

uint64_t sub_10028F3D4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(sub_10000F214(&qword_1005261F0) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CameraControllerConfiguration(0) - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v5;
  uint64_t v15 = v1 + v8;
  uint64_t v16 = v1 + (v11 & ~v10);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = sub_10000FC9C;
  return sub_10022A644(a1, v12, v13, v14, v15, v16);
}

uint64_t sub_10028F58C()
{
  return sub_10022DCF4();
}

uint64_t sub_10028F5AC()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10028F5E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_10022DDD4();
}

uint64_t sub_10028F690()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  unint64_t v5 = (int *)type metadata accessor for ContentView();
  uint64_t v74 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v75 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v75(v0 + v3, v1);
  uint64_t v6 = v0 + ((v3 + v4 + v74) & ~v74);
  sub_100161890(*(void *)v6, *(unsigned char *)(v6 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v7 = v6 + v5[9];
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v6 + v5[10];
  uint64_t v10 = v9 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  unint64_t v11 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  unint64_t v12 = v10 + v11[10];
  uint64_t v13 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48);
  if (!v13(v12, 1, v1)) {
    v75(v12, v1);
  }
  unint64_t v14 = v10 + v11[18];
  if (!v13(v14, 1, v1)) {
    v75(v14, v1);
  }
  unint64_t v15 = v10 + v11[22];
  if (!v13(v15, 1, v1)) {
    v75(v15, v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v16 = v6 + v5[12];
  uint64_t v17 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v19 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v19)
          {
            case 0:
              uint64_t v51 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v16, v51);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v52 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v16, v52);
              v53 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v54 = v16 + v53[13];
              uint64_t v55 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v56 = *(void *)(v55 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55)) {
                (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
              }
              uint64_t v57 = (uint64_t *)(v16 + v53[14]);
              unint64_t v58 = v57[1];
              if (v58 >> 60 != 15) {
                sub_100038B34(*v57, v58);
              }
              if (*(void *)(v16 + v53[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v16, v59);
              uint64_t v60 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v20 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v16, v20);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v16, v61);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v62 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v16 + *(int *)(v62 + 48)), *(void **)(v16 + *(int *)(v62 + 48) + 8), *(void *)(v16 + *(int *)(v62 + 48) + 16), *(unsigned char *)(v16 + *(int *)(v62 + 48) + 24));
          sub_10004FFD4(*(void **)(v16 + *(int *)(v62 + 64)), *(void **)(v16 + *(int *)(v62 + 64) + 8), *(void *)(v16 + *(int *)(v62 + 64) + 16), *(unsigned char *)(v16 + *(int *)(v62 + 64) + 24));
        }
        else
        {
          switch(v19)
          {
            case 0:
              uint64_t v63 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v16, v63);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v64 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v16, v64);
              uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v66 = v16 + v65[13];
              uint64_t v67 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v68 = *(void *)(v67 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67)) {
                (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
              }
              uint64_t v69 = (uint64_t *)(v16 + v65[14]);
              unint64_t v70 = v69[1];
              if (v70 >> 60 != 15) {
                sub_100038B34(*v69, v70);
              }
              if (*(void *)(v16 + v65[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v16, v71);
              uint64_t v72 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v25 = *(int *)(v72 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v31 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v16, v31);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v73 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v16, v73);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v16, *(void **)(v16 + 8), *(void *)(v16 + 16), *(void *)(v16 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v16, v32);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v33 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v16, v33);
            uint64_t v34 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v35 = v16 + v34[13];
            uint64_t v36 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v37 = *(void *)(v36 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36)) {
              (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
            }
            v38 = (uint64_t *)(v16 + v34[14]);
            unint64_t v39 = v38[1];
            if (v39 >> 60 != 15) {
              sub_100038B34(*v38, v39);
            }
            if (*(void *)(v16 + v34[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v16, v40);
            uint64_t v41 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v21 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v16, v21);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v42 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v16, v42);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v22 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v16, 1, v22))
        {
          uint64_t v23 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
          uint64_t v24 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v25 = *(int *)(v22 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v16 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v16 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v26 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v16, 1, v26)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v27 = type metadata accessor for EventLookupItem(0);
        uint64_t v28 = v16 + *(int *)(v27 + 20);
        uint64_t v29 = type metadata accessor for Date();
        v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
        v30(v28, v29);
        v30(v16 + *(int *)(v27 + 24), v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = v6 + v5[15];
  uint64_t v44 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v6 + v5[25]), *(void **)(v6 + v5[25] + 8), *(unsigned char *)(v6 + v5[25] + 16));
  swift_release();
  if ((~*(void *)(v6 + v5[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v45 = (id *)(v6 + v5[30]);
  if (*v45)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v45 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v46 = (uint64_t *)(v6 + v5[62]);
  if (v46[3])
  {
    sub_100038B34(*v46, v46[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v47 = v6 + v5[65];
  uint64_t v48 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v49 = *(void *)(v48 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48)) {
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100290B64(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ContentView() - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000FC9C;
  return sub_100277B88(a1, v9, v10, v11, v12);
}

uint64_t sub_100290CB8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100290CF0()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v74 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (v74 + 72) & ~v74;
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 32);
  }
  uint64_t v3 = v0 + v2;
  sub_100161890(*(void *)(v0 + v2), *(unsigned char *)(v0 + v2 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v4 = v0 + v2 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v73 = (int *)v1;
  uint64_t v6 = v3 + *(int *)(v1 + 40);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  unint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v7 + v8[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v13 = v7 + v8[18];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v14 = v7 + v8[22];
  if (!v12(v14, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = v3 + v73[12];
  uint64_t v16 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v18 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v18)
          {
            case 0:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v15, v50);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_65;
            case 1:
              uint64_t v51 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v15, v51);
              uint64_t v52 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v53 = v15 + v52[13];
              uint64_t v54 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v55 = *(void *)(v54 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54)) {
                (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
              }
              uint64_t v56 = (uint64_t *)(v15 + v52[14]);
              unint64_t v57 = v56[1];
              if (v57 >> 60 != 15) {
                sub_100038B34(*v56, v57);
              }
              if (*(void *)(v15 + v52[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v58 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v15, v58);
              uint64_t v59 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v19 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15, v19);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v60 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v15, v60);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_65:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v61 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v15 + *(int *)(v61 + 48)), *(void **)(v15 + *(int *)(v61 + 48) + 8), *(void *)(v15 + *(int *)(v61 + 48) + 16), *(unsigned char *)(v15 + *(int *)(v61 + 48) + 24));
          sub_10004FFD4(*(void **)(v15 + *(int *)(v61 + 64)), *(void **)(v15 + *(int *)(v61 + 64) + 8), *(void *)(v15 + *(int *)(v61 + 64) + 16), *(unsigned char *)(v15 + *(int *)(v61 + 64) + 24));
        }
        else
        {
          switch(v18)
          {
            case 0:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v15, v62);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_44;
            case 1:
              uint64_t v63 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v15, v63);
              uint64_t v64 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = v15 + v64[13];
              uint64_t v66 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v67 = *(void *)(v66 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66)) {
                (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
              }
              uint64_t v68 = (uint64_t *)(v15 + v64[14]);
              unint64_t v69 = v68[1];
              if (v69 >> 60 != 15) {
                sub_100038B34(*v68, v69);
              }
              if (*(void *)(v15 + v64[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v70 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(v15, v70);
              uint64_t v71 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v24 = *(int *)(v71 + 52);
              goto LABEL_22;
            case 3:
            case 4:
              uint64_t v30 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v15, v30);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v72 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v15, v72);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_44;
            default:
              goto LABEL_45;
          }
        }
        goto LABEL_45;
      case 3u:
        sub_10004FF38(*(void **)v15, *(void **)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24));
        goto LABEL_45;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v15, v31);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_42;
          case 1u:
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v15, v32);
            uint64_t v33 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = v15 + v33[13];
            uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v36 = *(void *)(v35 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
            }
            uint64_t v37 = (uint64_t *)(v15 + v33[14]);
            unint64_t v38 = v37[1];
            if (v38 >> 60 != 15) {
              sub_100038B34(*v37, v38);
            }
            if (*(void *)(v15 + v33[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v39 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v15, v39);
            uint64_t v40 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v20 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v15, v20);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v41 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v15, v41);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_42:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v21 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21))
        {
          uint64_t v22 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v15, v22);
          uint64_t v23 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v24 = *(int *)(v21 + 48);
LABEL_22:
        }
        goto LABEL_45;
      case 6u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v25 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v15, 1, v25)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = type metadata accessor for EventLookupItem(0);
        uint64_t v27 = v15 + *(int *)(v26 + 20);
        uint64_t v28 = type metadata accessor for Date();
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
        v29(v27, v28);
        v29(v15 + *(int *)(v26 + 24), v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v15) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_45;
    }
LABEL_44:
    swift_bridgeObjectRelease();
  }
LABEL_45:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = v3 + v73[15];
  uint64_t v43 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v3 + v73[25]), *(void **)(v3 + v73[25] + 8), *(unsigned char *)(v3 + v73[25] + 16));
  swift_release();
  if ((~*(void *)(v3 + v73[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (id *)(v3 + v73[30]);
  if (*v44)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v44 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v45 = (uint64_t *)(v3 + v73[62]);
  if (v45[3])
  {
    sub_100038B34(*v45, v45[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v46 = v3 + v73[65];
  uint64_t v47 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v48 = *(void *)(v47 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47)) {
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002921C0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + 32;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *(void *)v12;
  char v14 = *(unsigned char *)(v12 + 8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = sub_10000FC9C;
  return sub_10027AA50(a1, v7, v8, v9, v11, v10, v13, v14);
}

uint64_t sub_100292310()
{
  return sub_10027B294();
}

uint64_t sub_100292330(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10023B170(a1, v5, v6, v7);
}

uint64_t sub_10029241C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v73 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 32);
  uint64_t v2 = v0 + ((v73 + 72) & ~v73);
  sub_100161890(*(void *)v2, *(unsigned char *)(v2 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002938BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_100278C80(a1, v5, v6, v7, v8);
}

uint64_t sub_1002939BC()
{
  return 24;
}

__n128 sub_1002939C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

unint64_t sub_1002939DC()
{
  unint64_t result = qword_100526278;
  if (!qword_100526278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526278);
  }
  return result;
}

uint64_t sub_100293A30(long long *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10004ECF4(a1, (uint64_t)v9);
  sub_10019D408((uint64_t)v4);
  uint64_t v5 = type metadata accessor for CVDetection();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  char v6 = sub_10004DB4C((uint64_t)v4);
  sub_10000FBD8((uint64_t)v4, &qword_10051CB10);
  return v6 & 1;
}

BOOL sub_100293B34(long long *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10004ECF4(a1, (uint64_t)v9);
  sub_10019D408((uint64_t)v4);
  uint64_t v5 = type metadata accessor for CVDetection();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  char v6 = sub_10004DB4C((uint64_t)v4);
  sub_10000FBD8((uint64_t)v4, &qword_10051CB10);
  return (v6 & 1) == 0;
}

uint64_t sub_100293C3C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100293D00(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_100293C3C(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_100293DB4(uint64_t a1)
{
  v1[9] = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_100293EA0, 0, 0);
}

uint64_t sub_100293EA0()
{
  unint64_t v68 = v0;
  uint64_t v3 = v0[11];
  uint64_t v2 = (uint64_t *)v0[12];
  uint64_t v4 = v0[10];
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  *uint64_t v2 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v2, enum case for DispatchPredicate.notOnQueue(_:), v4);
  char v5 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v2, v4);
  if (v5)
  {
    char v6 = (void **)(v0 + 5);
    uint64_t v7 = (void *)v0[9];
    uint64_t v8 = v7[3];
    uint64_t v9 = v7[4];
    sub_10000F3B0(v7, v8);
    double v10 = sub_10030CA60(v8, v9);
    uint64_t v11 = sub_1001E9464(v10);
    uint64_t v12 = v7[3];
    uint64_t v13 = v7[4];
    sub_10000F3B0(v7, v12);
    double v14 = sub_10030CA60(v12, v13);
    uint64_t v15 = sub_1001C2994(v14);
    uint64_t v16 = v7[3];
    uint64_t v17 = v7[4];
    sub_10000F3B0(v7, v16);
    uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    unsigned __int8 v20 = v19;
    uint64_t v21 = v18;
    id v1 = 0;
    switch(v19)
    {
      case 1u:
        uint64_t v66 = (void **)(v0 + 8);
        id v26 = v18;
        sub_10031C3B8((uint64_t)_swiftEmptyArrayStorage);
        id v27 = objc_allocWithZone((Class)VNImageRequestHandler);
        type metadata accessor for VNImageOption(0);
        sub_1002AB13C(&qword_100518590, type metadata accessor for VNImageOption);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v25 = [v27 initWithCGImage:v26 orientation:v11 options:isa];
        sub_1000ACF28(v21, 1u);

        id v1 = [objc_allocWithZone((Class)VKCImageAnalyzerRequest) initWithCGImage:v26 orientation:v15 requestType:32];
        goto LABEL_5;
      case 2u:
        sub_1000ACF28(v18, 2u);
        id v1 = 0;
        goto LABEL_19;
      case 3u:
        goto LABEL_19;
      default:
        uint64_t v66 = (void **)(v0 + 8);
        sub_10010BCC8(v18, 0);
        id v22 = v21;
        sub_10031C3B8((uint64_t)_swiftEmptyArrayStorage);
        id v23 = objc_allocWithZone((Class)VNImageRequestHandler);
        type metadata accessor for VNImageOption(0);
        sub_1002AB13C(&qword_100518590, type metadata accessor for VNImageOption);
        Class v24 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v25 = [v23 initWithCVPixelBuffer:v22 orientation:v11 options:v24];
        sub_1000ACF28(v21, 0);

        id v1 = [objc_allocWithZone((Class)VKCImageAnalyzerRequest) initWithCVPixelBuffer:v22 orientation:v15 requestType:32];
        sub_1000ACF28(v21, 0);
LABEL_5:
        sub_1000ACF28(v21, v20);
        if (v25)
        {
          id v29 = objc_allocWithZone((Class)VNRecognizeDocumentsRequest);
          id v30 = v25;
          id v31 = [v29 init];
          [v31 setRecognitionLevel:0];
          Class v32 = (Class)[self preferredLanguages];
          if (!v32)
          {
            static Array._unconditionallyBridgeFromObjectiveC(_:)();
            Class v32 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          [v31 setRecognitionLanguages:v32];

          [v31 setUsesLanguageDetection:1];
          *char v6 = 0;
          unsigned int v33 = [v31 setRevision:1 error:v0 + 5];
          uint64_t v34 = *v6;
          if (v33)
          {
            sub_10000F214(&qword_100521040);
            uint64_t v35 = swift_allocObject();
            *(_OWORD *)(v35 + 16) = xmmword_100440690;
            *(void *)(v35 + 32) = v31;
            uint64_t v67 = v35;
            specialized Array._endMutation()();
            sub_10000F734(0, &qword_100526330);
            id v36 = v34;
            unint64_t v37 = v31;
            Class v38 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            *uint64_t v66 = 0;
            unsigned int v39 = [v30 performRequests:v38 error:v66];

            uint64_t v40 = *v66;
            if (v39)
            {
              id v41 = v40;
              id v42 = [v37 results];
              if (v42)
              {
                uint64_t v43 = v42;
                sub_10000F734(0, &qword_1005296C0);
                unint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                if (v44 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v45 = (void *)_CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (v45)
                  {
LABEL_13:
                    if ((v44 & 0xC000000000000001) != 0)
                    {
                      id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else
                    {
                      if (!*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
                      {
                        __break(1u);
LABEL_47:
                        swift_once();
LABEL_27:
                        uint64_t v54 = type metadata accessor for Logger();
                        sub_10000F378(v54, (uint64_t)qword_10055E238);
                        uint64_t v49 = Logger.logObject.getter();
                        os_log_type_t v55 = static os_log_type_t.error.getter();
                        if (!os_log_type_enabled(v49, v55))
                        {

                          goto LABEL_23;
                        }
                        unint64_t v56 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)unint64_t v56 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v49, v55, "performRecognizeDocumentsRequest encountered no vkRequest error", v56, 2u);
                        swift_slowDealloc();

LABEL_40:
                        goto LABEL_41;
                      }
                      id v46 = *(id *)(v44 + 32);
                    }
                    uint64_t v45 = v46;
                    swift_bridgeObjectRelease();
                    if (v1)
                    {
                      id v47 = [self analysisWithDocumentObservation:v45 request:v1];

                      goto LABEL_42;
                    }
                    if (qword_100517E60 == -1) {
                      goto LABEL_27;
                    }
                    goto LABEL_47;
                  }
                }
                else
                {
                  uint64_t v45 = *(void **)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (v45) {
                    goto LABEL_13;
                  }
                }
                swift_bridgeObjectRelease();
              }
              sub_10021027C();
              swift_allocError();
              *(void *)uint64_t v57 = 0;
              *(void *)(v57 + 8) = 0;
              *(unsigned char *)(v57 + 16) = 1;
            }
            else
            {
              id v53 = v40;
              _convertNSErrorToError(_:)();
            }
          }
          else
          {
            id v52 = v34;
            _convertNSErrorToError(_:)();
          }
          swift_willThrow();
          if (qword_100517E60 != -1) {
            swift_once();
          }
          uint64_t v58 = type metadata accessor for Logger();
          sub_10000F378(v58, (uint64_t)qword_10055E238);
          swift_errorRetain();
          swift_errorRetain();
          unint64_t v37 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v37, v59))
          {
            uint64_t v65 = v1;
            uint64_t v60 = (uint8_t *)swift_slowAlloc();
            uint64_t v67 = swift_slowAlloc();
            *(_DWORD *)uint64_t v60 = 136315138;
            swift_getErrorValue();
            uint64_t v61 = Error.localizedDescription.getter();
            v0[7] = sub_1003806B0(v61, v62, &v67);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v37, v59, "performRecognizeDocumentsRequest encountered error: %s", v60, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            goto LABEL_41;
          }

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
          goto LABEL_40;
        }
LABEL_19:
        if (qword_100517E60 != -1) {
          goto LABEL_31;
        }
        break;
    }
  }
  else
  {
    __break(1u);
LABEL_31:
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  sub_10000F378(v48, (uint64_t)qword_10055E238);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "performRecognizeDocumentsRequest failed to create imageRequestHandler", v51, 2u);
    swift_slowDealloc();
  }
  else
  {

LABEL_23:
  }
LABEL_41:
  id v47 = 0;
LABEL_42:
  swift_task_dealloc();
  uint64_t v63 = (uint64_t (*)(id))v0[1];
  return v63(v47);
}

uint64_t sub_100294934()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v73 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  uint64_t v2 = v0 + ((v73 + 30) & ~v73);
  sub_100161890(*(void *)v2, *(unsigned char *)(v2 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              os_log_type_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            Class v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            id v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100295DCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = &_mh_execute_header;
  if (!*(unsigned char *)(v1 + 28)) {
    LODWORD(v5) = 0;
  }
  int v6 = 0x1000000;
  if (!*(unsigned char *)(v1 + 27)) {
    int v6 = 0;
  }
  int v7 = 0x10000;
  if (!*(unsigned char *)(v1 + 26)) {
    int v7 = 0;
  }
  int v8 = v6 | v7;
  int v9 = 256;
  if (!*(unsigned char *)(v1 + 25)) {
    int v9 = 0;
  }
  int v10 = v5 | v8 | v9 | *(unsigned __int8 *)(v1 + 24);
  uint64_t v11 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 30) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10027A168(v4, v10, v11, a1);
}

uint64_t sub_100295EAC()
{
  uint64_t v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

id sub_100295F3C()
{
  type metadata accessor for URL();

  return sub_1003447F4();
}

uint64_t sub_100295FA0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100240C8C(a1, v5, v6, v7);
}

uint64_t sub_10029608C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v75 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v73 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  uint64_t v76 = v0;
  uint64_t v74 = (v75 + 32) & ~v75;
  uint64_t v2 = v0 + v74;
  sub_100161890(*(void *)(v0 + v74), *(unsigned char *)(v0 + v74 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v0 + v74 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              os_log_type_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            Class v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            id v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  sub_1000BC2F4(*(void *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8) + 16));

  return swift_deallocObject();
}

uint64_t sub_100297544(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000FC9C;
  return sub_10023DCA0(a1, v6, v7, v8, v10, v11, v12);
}

uint64_t sub_100297680(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100297690()
{
  return swift_release();
}

uint64_t sub_10029769C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100274D9C(a1, v5, v6, v7);
}

uint64_t sub_100297788()
{
  return sub_10025CF6C();
}

uint64_t sub_1002977A4()
{
  return sub_10025D620(*(void *)(v0 + 16));
}

uint64_t sub_1002977C0()
{
  return sub_10025D5A4();
}

uint64_t sub_1002977E0()
{
  return sub_1002A9E48((uint64_t)&unk_1004F1AE0, (uint64_t)&unk_100526460);
}

unint64_t sub_100297804()
{
  return (unint64_t)sub_100252914() & 1;
}

uint64_t sub_100297868()
{
  return sub_1002ADEF0((uint64_t (*)(void))sub_100248F10);
}

uint64_t sub_100297884()
{
  return sub_1002ADEF0(sub_1002549C0);
}

uint64_t sub_10029789C()
{
  return sub_10025CEFC();
}

uint64_t sub_1002978BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026F030(a1, v5, v6, v7);
}

uint64_t sub_1002979AC()
{
  type metadata accessor for ContentView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_100249ABC();
}

uint64_t sub_100297AA4()
{
  return sub_100297ABC();
}

uint64_t sub_100297ABC()
{
  return sub_1002745F4();
}

uint64_t sub_100297B20()
{
  return sub_10026F588();
}

uint64_t sub_100297B40()
{
  return sub_100297ABC();
}

uint64_t sub_100297B58()
{
  return sub_100270038(*(void *)(v0 + 16), 0xD000000000000052, 0x8000000100429F40);
}

uint64_t sub_100297B8C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v103 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v98 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v105 = (int *)type metadata accessor for Lens_Result(0);
  uint64_t v102 = *((void *)v105 - 1);
  uint64_t v107 = *(unsigned __int8 *)(v102 + 80);
  uint64_t v109 = *(void *)(v102 + 64);
  uint64_t v104 = (int *)type metadata accessor for Lens_Object(0);
  uint64_t v106 = *(unsigned __int8 *)(*((void *)v104 - 1) + 80);
  uint64_t v108 = v0;
  uint64_t v99 = (v103 + 16) & ~v103;
  uint64_t v2 = v0 + v99;
  sub_100161890(*(void *)(v0 + v99), *(unsigned char *)(v0 + v99 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v0 + v99 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  long long v101 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v101[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v73 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v14, v73);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_80;
            case 1:
              uint64_t v74 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v14, v74);
              uint64_t v75 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v76 = v14 + v75[13];
              uint64_t v77 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v78 = *(void *)(v77 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77)) {
                (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
              }
              uint64_t v79 = (uint64_t *)(v14 + v75[14]);
              unint64_t v80 = v79[1];
              if (v80 >> 60 != 15) {
                sub_100038B34(*v79, v80);
              }
              if (*(void *)(v14 + v75[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v81 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8))(v14, v81);
              uint64_t v82 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v83 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(v14, v83);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_80:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v84 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v84 + 48)), *(void **)(v14 + *(int *)(v84 + 48) + 8), *(void *)(v14 + *(int *)(v84 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v84 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v84 + 64)), *(void **)(v14 + *(int *)(v84 + 64) + 8), *(void *)(v14 + *(int *)(v84 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v84 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v85 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 8))(v14, v85);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v86 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v14, v86);
              uint64_t v87 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v88 = v14 + v87[13];
              uint64_t v89 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v90 = *(void *)(v89 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89)) {
                (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v89);
              }
              long long v91 = (uint64_t *)(v14 + v87[14]);
              unint64_t v92 = v91[1];
              if (v92 >> 60 != 15) {
                sub_100038B34(*v91, v92);
              }
              if (*(void *)(v14 + v87[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v93 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v14, v93);
              uint64_t v94 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v94 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v95 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 8))(v14, v95);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            Class v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            id v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v101[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v101[25]), *(void **)(v2 + v101[25] + 8), *(unsigned char *)(v2 + v101[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v101[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v101[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v44 = (uint64_t *)(v2 + v101[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v45 = (v99 + v98 + v107) & ~v107;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v46 = v2 + v101[65];
  uint64_t v47 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v48 = *(void *)(v47 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47)) {
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  }
  uint64_t v49 = v109 + v106;
  sub_10000F214(&qword_100519A10);
  swift_release();
  uint64_t v50 = v108 + v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v51 = v108 + v45 + v105[6];
  uint64_t v52 = type metadata accessor for UnknownStorage();
  uint64_t v53 = (void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8);
  long long v110 = *v53;
  (*v53)(v51, v52);
  uint64_t v54 = v108 + v45 + v105[7];
  uint64_t v55 = type metadata accessor for Lens_ExploreGrid(0);
  long long v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48);
  if (!v100(v54, 1, v55))
  {
    swift_bridgeObjectRelease();
    v110(v54 + *(int *)(v55 + 20), v52);
  }
  uint64_t v56 = v45 + v49;
  uint64_t v57 = v50 + v105[8];
  uint64_t v58 = type metadata accessor for Lens_ExactMatch(0);
  v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48);
  if (!v97(v57, 1, v58))
  {
    swift_bridgeObjectRelease();
    v110(v57 + *(int *)(v58 + 20), v52);
  }
  uint64_t v59 = v56 & ~v106;
  uint64_t v60 = v50 + v105[9];
  uint64_t v61 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48);
  if (!v96(v60, 1, v61))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v110(v60 + *(int *)(v61 + 28), v52);
  }
  uint64_t v62 = v108 + v59;
  swift_bridgeObjectRelease();
  v110(v62 + v104[5], v52);
  uint64_t v63 = v62 + v104[6];
  uint64_t v64 = type metadata accessor for Lens_NormalizedBox(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 1, v64)) {
    v110(v63 + *(int *)(v64 + 32), v52);
  }
  uint64_t v65 = v62 + v104[7];
  uint64_t v66 = v104;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v102 + 48))(v65, 1, v105))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v110(v65 + v105[6], v52);
    uint64_t v67 = v65 + v105[7];
    if (!v100(v67, 1, v55))
    {
      swift_bridgeObjectRelease();
      v110(v67 + *(int *)(v55 + 20), v52);
    }
    uint64_t v68 = v65 + v105[8];
    if (!v97(v68, 1, v58))
    {
      swift_bridgeObjectRelease();
      v110(v68 + *(int *)(v58 + 20), v52);
    }
    uint64_t v69 = v65 + v105[9];
    uint64_t v66 = v104;
    if (!v96(v69, 1, v61))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v110(v69 + *(int *)(v61 + 28), v52);
    }
  }
  uint64_t v70 = v62 + v66[8];
  uint64_t v71 = type metadata accessor for Lens_Status(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48))(v70, 1, v71))
  {
    swift_bridgeObjectRelease();
    v110(v70 + *(int *)(v71 + 24), v52);
  }

  return swift_deallocObject();
}

uint64_t sub_100299530()
{
  type metadata accessor for ContentView();
  type metadata accessor for Lens_Result(0);
  type metadata accessor for Lens_Object(0);

  return sub_10027022C();
}

uint64_t sub_100299658()
{
  return sub_1002702EC(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_100299678()
{
  return sub_100270038(*(void *)(v0 + 16), 0xD000000000000025, 0x8000000100429FA0);
}

uint64_t sub_1002996B4()
{
  return sub_10026F39C();
}

uint64_t sub_1002996D0()
{
  return sub_10026F2F0();
}

uint64_t sub_1002996F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000F878;
  return sub_10022999C(a1, v5, v6, v7);
}

uint64_t sub_1002997DC(uint64_t a1)
{
  return sub_10026E2F4(a1);
}

uint64_t sub_1002997E4()
{
  uint64_t v1 = sub_10000F214(&qword_1005263C0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100299878()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100299904()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10029993C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100299968(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026E048(a1, v5, v6, v7);
}

uint64_t sub_100299A58(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026DCDC(a1, v5, v6, v7);
}

uint64_t sub_100299B48(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026D674(a1, v5, v6, v7);
}

uint64_t sub_100299C38()
{
  type metadata accessor for ContentView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_10026D12C();
}

uint64_t sub_100299D28(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_1002757E4(a1, v5, v6, v7);
}

id sub_100299E14(uint64_t a1, uint64_t a2)
{
  id v2 = [objc_alloc((Class)UIImage) _initWithIOSurface:a1 imageOrientation:a2];

  return v2;
}

uint64_t sub_100299E64()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_10027693C);
}

uint64_t sub_100299E80()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_1002769CC);
}

uint64_t sub_100299EA0()
{
  return sub_10026D004(*(void *)(v0 + 16));
}

uint64_t sub_100299EBC()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100299EFC(uint64_t a1)
{
  return a1;
}

void sub_100299F9C(void *a1)
{
}

uint64_t sub_100299FA8()
{
  return sub_10026DF9C();
}

uint64_t sub_100299FD0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10025D200(a1, v5, v6, v7);
}

uint64_t sub_10029A0C0()
{
  return sub_1002A9E48((uint64_t)&unk_1004F1E90, (uint64_t)&unk_100526610);
}

uint64_t sub_10029A0E4()
{
  return sub_1002A9E48((uint64_t)&unk_1004F1E68, (uint64_t)&unk_100526600);
}

uint64_t sub_10029A104()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v102 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v100 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CVBundle(0) - 8) + 80);
  uint64_t v101 = (v102 + 16) & ~v102;
  uint64_t v104 = v0;
  uint64_t v3 = v0 + v101;
  sub_100161890(*(void *)(v0 + v101), *(unsigned char *)(v0 + v101 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v4 = v0 + v101 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  uint64_t v103 = v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v105 = (int *)v1;
  uint64_t v6 = v3 + *(int *)(v1 + 40);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v7 + v8[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v13 = v7 + v8[18];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v14 = v7 + v8[22];
  if (!v12(v14, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  uint64_t v15 = v105;
  swift_release();
  swift_release();
  uint64_t v16 = v3 + v105[12];
  uint64_t v17 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v19 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v19)
          {
            case 0:
              uint64_t v77 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v77 - 8) + 8))(v16, v77);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_88;
            case 1:
              uint64_t v78 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(v16, v78);
              uint64_t v79 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v80 = v16 + v79[13];
              uint64_t v81 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v82 = *(void *)(v81 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81)) {
                (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v80, v81);
              }
              uint64_t v83 = (uint64_t *)(v16 + v79[14]);
              unint64_t v84 = v83[1];
              if (v84 >> 60 != 15) {
                sub_100038B34(*v83, v84);
              }
              if (*(void *)(v16 + v79[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v85 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 8))(v16, v85);
              uint64_t v86 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v20 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v16, v20);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v87 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v87 - 8) + 8))(v16, v87);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_88:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v88 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v16 + *(int *)(v88 + 48)), *(void **)(v16 + *(int *)(v88 + 48) + 8), *(void *)(v16 + *(int *)(v88 + 48) + 16), *(unsigned char *)(v16 + *(int *)(v88 + 48) + 24));
          sub_10004FFD4(*(void **)(v16 + *(int *)(v88 + 64)), *(void **)(v16 + *(int *)(v88 + 64) + 8), *(void *)(v16 + *(int *)(v88 + 64) + 16), *(unsigned char *)(v16 + *(int *)(v88 + 64) + 24));
        }
        else
        {
          switch(v19)
          {
            case 0:
              uint64_t v89 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8))(v16, v89);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v90 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8))(v16, v90);
              long long v91 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v92 = v16 + v91[13];
              uint64_t v93 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v94 = *(void *)(v93 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93)) {
                (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
              }
              uint64_t v95 = (uint64_t *)(v16 + v91[14]);
              unint64_t v96 = v95[1];
              if (v96 >> 60 != 15) {
                sub_100038B34(*v95, v96);
              }
              if (*(void *)(v16 + v91[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v97 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v16, v97);
              uint64_t v98 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v25 = *(int *)(v98 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v32 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v16, v32);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v99 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v16, v99);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v16, *(void **)(v16 + 8), *(void *)(v16 + 16), *(void *)(v16 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v33 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v16, v33);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v34 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v16, v34);
            uint64_t v35 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = v16 + v35[13];
            uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v38 = *(void *)(v37 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
            }
            uint64_t v39 = (uint64_t *)(v16 + v35[14]);
            unint64_t v40 = v39[1];
            if (v40 >> 60 != 15) {
              sub_100038B34(*v39, v40);
            }
            if (*(void *)(v16 + v35[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v41 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v16, v41);
            uint64_t v42 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v21 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v16, v21);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v43 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v16, v43);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v22 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v16, 1, v22))
        {
          uint64_t v23 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
          uint64_t v24 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v25 = *(int *)(v22 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v16 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v16 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v26 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v16, 1, v26)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v27 = type metadata accessor for EventLookupItem(0);
        uint64_t v28 = v16 + *(int *)(v27 + 20);
        uint64_t v29 = type metadata accessor for Date();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
        v30(v28, v29);
        uint64_t v31 = v29;
        uint64_t v15 = v105;
        v30(v16 + *(int *)(v27 + 24), v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  unint64_t v44 = (v100 + v101 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v3 + v15[15];
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v47 = (void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8);
  uint64_t v106 = *v47;
  (*v47)(v45, v46);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v3 + v15[25]), *(void **)(v3 + v15[25] + 8), *(unsigned char *)(v3 + v15[25] + 16));
  swift_release();
  if ((~*(void *)(v3 + v15[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v48 = (id *)(v3 + v15[30]);
  if (*v48)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v48 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v49 = (uint64_t *)(v3 + v15[62]);
  if (v49[3])
  {
    sub_100038B34(*v49, v49[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v50 = (v44 + v103 + 33) & ~v103;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v51 = v3 + v15[65];
  uint64_t v52 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v53 = *(void *)(v52 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52)) {
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  sub_10004EA10(*(void *)(v104 + v44), *(void *)(v104 + v44 + 8), *(void *)(v104 + v44 + 16), *(void *)(v104 + v44 + 24), *(unsigned char *)(v104 + v44 + 32));
  uint64_t v54 = v104 + v50;
  type metadata accessor for CVBundle.BundleType(0);
  int v55 = swift_getEnumCaseMultiPayload();
  uint64_t v56 = v106;
  v106(v104 + v50, v46);
  if (v55 != 1)
  {
    uint64_t v57 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v58 = v54 + *(int *)(v57 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v106(v58, v46);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_63;
      case 1u:
        v106(v58, v46);
        uint64_t v59 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v60 = v58 + v59[13];
        uint64_t v61 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v62 = *(void *)(v61 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61)) {
          (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
        }
        uint64_t v63 = (uint64_t *)(v58 + v59[14]);
        unint64_t v64 = v63[1];
        if (v64 >> 60 != 15) {
          sub_100038B34(*v63, v64);
        }
        uint64_t v65 = (void *)(v58 + v59[15]);
        uint64_t v56 = v106;
        if (*v65)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v106(v58, v46);
        uint64_t v66 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v67 = *(int *)(v66 + 52);
        uint64_t v56 = v106;

        break;
      case 3u:
      case 4u:
        v106(v58, v46);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        uint64_t v56 = v106;
        swift_release();
        break;
      case 5u:
        v106(v58, v46);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v68 = v54 + *(int *)(v57 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v56(v68, v46);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_75;
      case 1u:
        v56(v68, v46);
        uint64_t v69 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = v68 + v69[13];
        uint64_t v71 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v72 = *(void *)(v71 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71)) {
          (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
        }
        uint64_t v73 = (uint64_t *)(v68 + v69[14]);
        unint64_t v74 = v73[1];
        if (v74 >> 60 != 15) {
          sub_100038B34(*v73, v74);
        }
        if (*(void *)(v68 + v69[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v56(v68, v46);
        uint64_t v75 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v56(v68, v46);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v56(v68, v46);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_75:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10029BB60()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v2 = (*(void *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  return sub_10024D244((long long *)(v0 + v2), v0 + ((v2 + *(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), 7, 0);
}

uint64_t sub_10029BC3C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v99 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v96 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CVBundle(0) - 8) + 80);
  swift_unknownObjectRelease();
  sub_10004EA10(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  uint64_t v102 = v0;
  uint64_t v97 = (v99 + 65) & ~v99;
  uint64_t v3 = v0 + v97;
  sub_100161890(*(void *)(v0 + v97), *(unsigned char *)(v0 + v97 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v4 = v0 + v97 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  uint64_t v101 = v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v100 = (int *)v1;
  uint64_t v6 = v3 + *(int *)(v1 + 40);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v7 + v8[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v13 = v7 + v8[18];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v14 = v7 + v8[22];
  if (!v12(v14, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  uint64_t v15 = v100;
  swift_release();
  swift_release();
  uint64_t v16 = v3 + v100[12];
  uint64_t v17 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v19 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v19)
          {
            case 0:
              uint64_t v73 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v16, v73);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_88;
            case 1:
              uint64_t v74 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v16, v74);
              uint64_t v75 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v76 = v16 + v75[13];
              uint64_t v77 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v78 = *(void *)(v77 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77)) {
                (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
              }
              uint64_t v79 = (uint64_t *)(v16 + v75[14]);
              unint64_t v80 = v79[1];
              if (v80 >> 60 != 15) {
                sub_100038B34(*v79, v80);
              }
              if (*(void *)(v16 + v75[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v81 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8))(v16, v81);
              uint64_t v82 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v20 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v16, v20);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v83 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(v16, v83);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_88:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v84 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v16 + *(int *)(v84 + 48)), *(void **)(v16 + *(int *)(v84 + 48) + 8), *(void *)(v16 + *(int *)(v84 + 48) + 16), *(unsigned char *)(v16 + *(int *)(v84 + 48) + 24));
          sub_10004FFD4(*(void **)(v16 + *(int *)(v84 + 64)), *(void **)(v16 + *(int *)(v84 + 64) + 8), *(void *)(v16 + *(int *)(v84 + 64) + 16), *(unsigned char *)(v16 + *(int *)(v84 + 64) + 24));
        }
        else
        {
          switch(v19)
          {
            case 0:
              uint64_t v85 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 8))(v16, v85);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v86 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v16, v86);
              uint64_t v87 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v88 = v16 + v87[13];
              uint64_t v89 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v90 = *(void *)(v89 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89)) {
                (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v89);
              }
              long long v91 = (uint64_t *)(v16 + v87[14]);
              unint64_t v92 = v91[1];
              if (v92 >> 60 != 15) {
                sub_100038B34(*v91, v92);
              }
              if (*(void *)(v16 + v87[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v93 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8))(v16, v93);
              uint64_t v94 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v25 = *(int *)(v94 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v32 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v16, v32);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v95 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 8))(v16, v95);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v16, *(void **)(v16 + 8), *(void *)(v16 + 16), *(void *)(v16 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v33 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v16, v33);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v34 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v16, v34);
            uint64_t v35 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = v16 + v35[13];
            uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v38 = *(void *)(v37 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
            }
            uint64_t v39 = (uint64_t *)(v16 + v35[14]);
            unint64_t v40 = v39[1];
            if (v40 >> 60 != 15) {
              sub_100038B34(*v39, v40);
            }
            if (*(void *)(v16 + v35[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v41 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v16, v41);
            uint64_t v42 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v21 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v16, v21);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v43 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v16, v43);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v22 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v16, 1, v22))
        {
          uint64_t v23 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
          uint64_t v24 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v25 = *(int *)(v22 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v16 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v16 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v26 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v16, 1, v26)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v27 = type metadata accessor for EventLookupItem(0);
        uint64_t v28 = v16 + *(int *)(v27 + 20);
        uint64_t v29 = type metadata accessor for Date();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
        v30(v28, v29);
        uint64_t v31 = v29;
        uint64_t v15 = v100;
        v30(v16 + *(int *)(v27 + 24), v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = v3 + v15[15];
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8);
  v46(v44, v45);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v3 + v15[25]), *(void **)(v3 + v15[25] + 8), *(unsigned char *)(v3 + v15[25] + 16));
  swift_release();
  if ((~*(void *)(v3 + v15[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v47 = (id *)(v3 + v15[30]);
  if (*v47)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v47 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v48 = (uint64_t *)(v3 + v15[62]);
  if (v48[3])
  {
    sub_100038B34(*v48, v48[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v49 = (v97 + v96 + v101) & ~v101;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v50 = v3 + v15[65];
  uint64_t v51 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v52 = *(void *)(v51 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  uint64_t v53 = v102 + v49;
  type metadata accessor for CVBundle.BundleType(0);
  int v54 = swift_getEnumCaseMultiPayload();
  v46(v102 + v49, v45);
  if (v54 != 1)
  {
    uint64_t v98 = v46;
    uint64_t v55 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v56 = v53 + *(int *)(v55 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v98(v56, v45);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_63;
      case 1u:
        v98(v56, v45);
        uint64_t v57 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v58 = v56 + v57[13];
        uint64_t v59 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v60 = *(void *)(v59 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59)) {
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
        }
        uint64_t v61 = (uint64_t *)(v56 + v57[14]);
        unint64_t v62 = v61[1];
        if (v62 >> 60 != 15) {
          sub_100038B34(*v61, v62);
        }
        if (*(void *)(v56 + v57[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v98(v56, v45);
        uint64_t v63 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v98(v56, v45);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v98(v56, v45);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v64 = v53 + *(int *)(v55 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v98(v64, v45);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_75;
      case 1u:
        v98(v64, v45);
        uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v66 = v64 + v65[13];
        uint64_t v67 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v68 = *(void *)(v67 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67)) {
          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
        }
        uint64_t v69 = (uint64_t *)(v64 + v65[14]);
        unint64_t v70 = v69[1];
        if (v70 >> 60 != 15) {
          sub_100038B34(*v69, v70);
        }
        if (*(void *)(v64 + v65[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v98(v64, v45);
        uint64_t v71 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v98(v64, v45);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v98(v64, v45);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_75:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10029D6A4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + 32;
  uint64_t v13 = v1 + v6;
  uint64_t v14 = v1 + v9;
  char v15 = *(unsigned char *)(v1 + v9 + *(void *)(v8 + 64));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = sub_10000FC9C;
  return sub_1002632B0(a1, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_10029D838(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100271AD4(a1, v5, v6, v7);
}

uint64_t sub_10029D924()
{
  return sub_100271C14(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10029D940(uint64_t a1)
{
  return sub_100274CD0(a1);
}

uint64_t sub_10029D948(void *a1)
{
  return sub_100274D38(a1);
}

uint64_t sub_10029D950()
{
  uint64_t v1 = type metadata accessor for TextDetectorResult.DataDetector(0);
  uint64_t v66 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (v66 + 40) & ~v66;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for ContentView();
  uint64_t v65 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v5 = (v2 + v3 + v65) & ~v65;
  uint64_t v63 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = type metadata accessor for TextDetectorResult(0);
  uint64_t v62 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v2 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v5;
  sub_100161890(*(void *)(v0 + v5), *(unsigned char *)(v0 + v5 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v71 = (int *)v4;
  uint64_t v11 = v0 + v5 + *(int *)(v4 + 36);
  sub_10000F214(&qword_100525F10);
  uint64_t v68 = v0;
  uint64_t v69 = v8;
  uint64_t v67 = v6;
  uint64_t v64 = v5;
  uint64_t v70 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v10 + *(int *)(v4 + 40);
  uint64_t v14 = v13 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  char v15 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v16 = v14 + v15[10];
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (!v19(v16, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  uint64_t v20 = v14 + v15[18];
  if (!v19(v20, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
  }
  uint64_t v21 = v14 + v15[22];
  if (!v19(v21, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v22 = v10 + v71[12];
  uint64_t v23 = type metadata accessor for ResultLookupState();
  uint64_t v24 = v69;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v26 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v26)
          {
            case 0:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_65;
            case 1:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              uint64_t v49 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v50 = v22 + v49[13];
              uint64_t v51 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v52 = *(void *)(v51 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
                (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
              }
              uint64_t v53 = (uint64_t *)(v22 + v49[14]);
              unint64_t v54 = v53[1];
              if (v54 >> 60 != 15) {
                sub_100038B34(*v53, v54);
              }
              uint64_t v24 = v69;
              if (*(void *)(v22 + v49[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_65:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v55 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v22 + *(int *)(v55 + 48)), *(void **)(v22 + *(int *)(v55 + 48) + 8), *(void *)(v22 + *(int *)(v55 + 48) + 16), *(unsigned char *)(v22 + *(int *)(v55 + 48) + 24));
          sub_10004FFD4(*(void **)(v22 + *(int *)(v55 + 64)), *(void **)(v22 + *(int *)(v55 + 64) + 8), *(void *)(v22 + *(int *)(v55 + 64) + 16), *(unsigned char *)(v22 + *(int *)(v55 + 64) + 24));
        }
        else
        {
          switch(v26)
          {
            case 0:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_44;
            case 1:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              uint64_t v56 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v57 = v22 + v56[13];
              uint64_t v58 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v59 = *(void *)(v58 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58)) {
                (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
              }
              uint64_t v60 = (uint64_t *)(v22 + v56[14]);
              unint64_t v61 = v60[1];
              if (v61 >> 60 != 15) {
                sub_100038B34(*v60, v61);
              }
              uint64_t v24 = v69;
              if (*(void *)(v22 + v56[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v28 = *(int *)(v67 + 52);
              goto LABEL_22;
            case 3:
            case 4:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_44;
            default:
              goto LABEL_45;
          }
        }
        goto LABEL_45;
      case 3u:
        sub_10004FF38(*(void **)v22, *(void **)(v22 + 8), *(void *)(v22 + 16), *(void *)(v22 + 24));
        goto LABEL_45;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_42;
          case 1u:
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
            uint64_t v35 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = v22 + v35[13];
            uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v38 = *(void *)(v37 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
              (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
            }
            uint64_t v39 = (uint64_t *)(v22 + v35[14]);
            unint64_t v40 = v39[1];
            if (v40 >> 60 != 15) {
              sub_100038B34(*v39, v40);
            }
            uint64_t v24 = v69;
            if (*(void *)(v22 + v35[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_42:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v27 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v22, 1, v27))
        {
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v22, v69);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v28 = *(int *)(v27 + 48);
LABEL_22:
        }
        goto LABEL_45;
      case 6u:
        if (!*(void *)(v22 + 8)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v22 + 8)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v29 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v22, 1, v29)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        uint64_t v30 = type metadata accessor for EventLookupItem(0);
        uint64_t v31 = v22 + *(int *)(v30 + 20);
        uint64_t v32 = type metadata accessor for Date();
        uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8);
        v33(v31, v32);
        uint64_t v34 = v32;
        uint64_t v24 = v69;
        v33(v22 + *(int *)(v30 + 24), v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v22) {
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_45;
    }
LABEL_44:
    swift_bridgeObjectRelease();
  }
LABEL_45:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v41(v10 + v71[15], v24);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v10 + v71[25]), *(void **)(v10 + v71[25] + 8), *(unsigned char *)(v10 + v71[25] + 16));
  swift_release();
  if ((~*(void *)(v10 + v71[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = (id *)(v10 + v71[30]);
  if (*v42)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v42 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (uint64_t *)(v10 + v71[62]);
  if (v43[3])
  {
    sub_100038B34(*v43, v43[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = v10 + v71[65];
  uint64_t v45 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v46 = *(void *)(v45 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45)) {
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  uint64_t v47 = v68 + ((v64 + v63 + v62) & ~v62);
  v41(v47, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10029EDD4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TextDetectorResult.DataDetector(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TextDetectorResult(0) - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v15 = (uint64_t)v1 + v5;
  uint64_t v16 = (uint64_t)v1 + v8;
  uint64_t v17 = (uint64_t)v1 + (v11 & ~v10);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v18;
  void *v18 = v2;
  v18[1] = sub_10000FC9C;
  return sub_100271DC4(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_10029EF98(id *a1)
{
  return sub_100272030(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10029EFB8()
{
  return sub_100272448(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10029EFD8()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v86 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v82 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CVDetection() - 8) + 80);
  swift_unknownObjectRelease();
  uint64_t v87 = v0;
  uint64_t v83 = (v86 + 32) & ~v86;
  uint64_t v3 = v0 + v83;
  sub_100161890(*(void *)(v0 + v83), *(unsigned char *)(v0 + v83 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v4 = v0 + v83 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  uint64_t v85 = v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v84 = (int *)v1;
  uint64_t v6 = v3 + *(int *)(v1 + 40);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  unint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v7 + v8[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v13 = v7 + v8[18];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v14 = v7 + v8[22];
  if (!v12(v14, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = v3 + v84[12];
  uint64_t v16 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        int v18 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v18)
          {
            case 0:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v15, v59);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_75;
            case 1:
              uint64_t v60 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v15, v60);
              unint64_t v61 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v62 = v15 + v61[13];
              uint64_t v63 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v64 = *(void *)(v63 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63)) {
                (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
              }
              uint64_t v65 = (uint64_t *)(v15 + v61[14]);
              unint64_t v66 = v65[1];
              if (v66 >> 60 != 15) {
                sub_100038B34(*v65, v66);
              }
              if (*(void *)(v15 + v61[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v67 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v15, v67);
              uint64_t v68 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v19 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15, v19);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v15, v69);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_75:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v70 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v15 + *(int *)(v70 + 48)), *(void **)(v15 + *(int *)(v70 + 48) + 8), *(void *)(v15 + *(int *)(v70 + 48) + 16), *(unsigned char *)(v15 + *(int *)(v70 + 48) + 24));
          sub_10004FFD4(*(void **)(v15 + *(int *)(v70 + 64)), *(void **)(v15 + *(int *)(v70 + 64) + 8), *(void *)(v15 + *(int *)(v70 + 64) + 16), *(unsigned char *)(v15 + *(int *)(v70 + 64) + 24));
        }
        else
        {
          switch(v18)
          {
            case 0:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v15, v71);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v72 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v15, v72);
              uint64_t v73 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v74 = v15 + v73[13];
              uint64_t v75 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v76 = *(void *)(v75 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75)) {
                (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
              }
              uint64_t v77 = (uint64_t *)(v15 + v73[14]);
              unint64_t v78 = v77[1];
              if (v78 >> 60 != 15) {
                sub_100038B34(*v77, v78);
              }
              if (*(void *)(v15 + v73[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v79 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v15, v79);
              uint64_t v80 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v24 = *(int *)(v80 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v30 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v15, v30);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v81 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8))(v15, v81);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v15, *(void **)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24));
        goto LABEL_43;
      case 4u:
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v15, v31);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v15, v32);
            uint64_t v33 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = v15 + v33[13];
            uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v36 = *(void *)(v35 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
            }
            uint64_t v37 = (uint64_t *)(v15 + v33[14]);
            unint64_t v38 = v37[1];
            if (v38 >> 60 != 15) {
              sub_100038B34(*v37, v38);
            }
            if (*(void *)(v15 + v33[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v39 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v15, v39);
            uint64_t v40 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v20 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v15, v20);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v41 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v15, v41);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v21 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21))
        {
          uint64_t v22 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v15, v22);
          uint64_t v23 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v24 = *(int *)(v21 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v25 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v15, 1, v25)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = type metadata accessor for EventLookupItem(0);
        uint64_t v27 = v15 + *(int *)(v26 + 20);
        uint64_t v28 = type metadata accessor for Date();
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
        v29(v27, v28);
        v29(v15 + *(int *)(v26 + 24), v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v15) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = v3 + v84[15];
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8);
  v44(v42, v43);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v3 + v84[25]), *(void **)(v3 + v84[25] + 8), *(unsigned char *)(v3 + v84[25] + 16));
  swift_release();
  if ((~*(void *)(v3 + v84[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = (id *)(v3 + v84[30]);
  if (*v45)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v45 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v46 = (uint64_t *)(v3 + v84[62]);
  if (v46[3])
  {
    sub_100038B34(*v46, v46[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v47 = v3 + v84[65];
  uint64_t v48 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v49 = *(void *)(v48 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48)) {
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  uint64_t v50 = v87 + ((v83 + v82 + v85) & ~v85);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v44(v50, v43);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_62;
    case 1u:
      v44(v50, v43);
      uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v52 = v50 + v51[13];
      uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v54 = *(void *)(v53 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
      }
      uint64_t v55 = (uint64_t *)(v50 + v51[14]);
      unint64_t v56 = v55[1];
      if (v56 >> 60 != 15) {
        sub_100038B34(*v55, v56);
      }
      if (*(void *)(v50 + v51[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      v44(v50, v43);
      uint64_t v57 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      v44(v50, v43);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      v44(v50, v43);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_62:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_deallocObject();
}

uint64_t sub_1002A071C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CVDetection() - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000FC9C;
  return sub_1002708EC(a1, v9, v10, v11, v12);
}

uint64_t sub_1002A0874(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100270ABC(a1, v5, v6, v7);
}

uint64_t sub_1002A0970()
{
  return sub_1002AE0DC((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002A0988(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000FC9C;
  return sub_100270C70(a1, v6, v7, v8, v9);
}

uint64_t sub_1002A0AB0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100270E28(a1, v5, v6, v7);
}

uint64_t sub_1002A0B9C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v75 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v73 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  uint64_t v76 = v0;
  uint64_t v74 = (v75 + 32) & ~v75;
  uint64_t v2 = v0 + v74;
  sub_100161890(*(void *)(v0 + v74), *(unsigned char *)(v0 + v74 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v0 + v74 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  sub_10004FFD4(*(void **)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8) + 24));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002A2068(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (v5 + *(void *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void **)(v1 + v6);
  uint64_t v11 = *(void **)(v1 + v6 + 8);
  uint64_t v12 = *(void *)(v1 + v6 + 16);
  unsigned __int8 v13 = *(unsigned char *)(v1 + v6 + 24);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10000FC9C;
  return sub_100270FDC(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1002A21C8()
{
  return sub_1002AE0DC((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1002A21E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000FC9C;
  return sub_100271908(a1, v6, v7, v8, v9);
}

uint64_t sub_1002A2304()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v75 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v73 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  uint64_t v76 = v0;
  uint64_t v74 = (v75 + 32) & ~v75;
  uint64_t v2 = v0 + v74;
  sub_100161890(*(void *)(v0 + v74), *(unsigned char *)(v0 + v74 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v0 + v74 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  sub_10010600C(*(void *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(v76 + ((v73 + v74 + 7) & 0xFFFFFFFFFFFFFFF8) + 24));

  return swift_deallocObject();
}

uint64_t sub_1002A37C0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  char v13 = *(unsigned char *)(v9 + 24);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10000FC9C;
  return sub_100271740(a1, v6, v7, v8, v10, v11, v12, v13);
}

uint64_t sub_1002A3904()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v75 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v73 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v76 = v0;
  uint64_t v74 = (v75 + 40) & ~v75;
  uint64_t v2 = v0 + v74;
  sub_100161890(*(void *)(v0 + v74), *(unsigned char *)(v0 + v74 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v0 + v74 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  sub_10004FFD4(*(void **)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(v76 + ((v74 + v73 + 7) & 0xFFFFFFFFFFFFFFF8) + 24));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002A4DD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v4;
  uint64_t v10 = *(void *)((char *)v1 + v5);
  uint64_t v11 = *(void *)((char *)v1 + v5 + 8);
  uint64_t v12 = *(void *)((char *)v1 + v5 + 16);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000FC9C;
  return sub_1002711F8(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1002A4F40()
{
  return sub_1002714A8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(int64_t **)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1002A4F54()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002A4F88(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_1002727DC(a1, v5, v6, v7);
}

uint64_t sub_1002A5074()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for ContentView();
  uint64_t v79 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  unint64_t v6 = (v3 + v4 + v79) & ~v79;
  swift_unknownObjectRelease();
  uint64_t v7 = v1 + v3;
  type metadata accessor for CVBundle.BundleType(0);
  LODWORD(v4) = swift_getEnumCaseMultiPayload();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v82 = *(void (**)(unint64_t))(*(void *)(v8 - 8) + 8);
  uint64_t v83 = v8;
  v82(v1 + v3);
  uint64_t v80 = (int *)v5;
  unint64_t v81 = v6;
  if (v4 != 1)
  {
    uint64_t v9 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v10 = v7 + *(int *)(v9 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        ((void (*)(uint64_t, uint64_t))v82)(v10, v83);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_13;
      case 1u:
        ((void (*)(uint64_t, uint64_t))v82)(v10, v83);
        uint64_t v11 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = v10 + v11[13];
        uint64_t v13 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v14 = *(void *)(v13 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
        }
        uint64_t v15 = (uint64_t *)(v10 + v11[14]);
        unint64_t v16 = v15[1];
        uint64_t v5 = (uint64_t)v80;
        if (v16 >> 60 != 15) {
          sub_100038B34(*v15, v16);
        }
        int v17 = (void *)(v10 + v11[15]);
        unint64_t v6 = v81;
        if (*v17)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        ((void (*)(uint64_t, uint64_t))v82)(v10, v83);
        uint64_t v18 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        ((void (*)(uint64_t, uint64_t))v82)(v10, v83);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        ((void (*)(uint64_t, uint64_t))v82)(v10, v83);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_13:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v19 = v7 + *(int *)(v9 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        ((void (*)(uint64_t, uint64_t))v82)(v19, v83);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_25;
      case 1u:
        ((void (*)(uint64_t, uint64_t))v82)(v19, v83);
        uint64_t v20 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = v19 + v20[13];
        uint64_t v22 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v23 = *(void *)(v22 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
        }
        uint64_t v24 = (uint64_t *)(v19 + v20[14]);
        unint64_t v25 = v24[1];
        if (v25 >> 60 != 15) {
          sub_100038B34(*v24, v25);
        }
        if (*(void *)(v19 + v20[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        ((void (*)(uint64_t, uint64_t))v82)(v19, v83);
        uint64_t v26 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        ((void (*)(uint64_t, uint64_t))v82)(v19, v83);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        ((void (*)(uint64_t, uint64_t))v82)(v19, v83);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_25:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v1 + v6;
  sub_100161890(*(void *)(v1 + v6), *(unsigned char *)(v1 + v6 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  unint64_t v28 = v1 + v6 + *(int *)(v5 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
  }
  else
  {
    swift_release();
  }
  uint64_t v30 = v27 + *(int *)(v5 + 40);
  uint64_t v31 = v30 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v32 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v33 = v31 + v32[10];
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (!v36(v33, 1, v34)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  }
  uint64_t v37 = v31 + v32[18];
  if (!v36(v37, 1, v34)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v34);
  }
  uint64_t v38 = v31 + v32[22];
  if (!v36(v38, 1, v34)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v34);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v39 = v27 + v80[12];
  uint64_t v40 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v42 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v42)
          {
            case 0:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_88;
            case 1:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              uint64_t v64 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = v39 + v64[13];
              uint64_t v66 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v67 = *(void *)(v66 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66)) {
                (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
              }
              unint64_t v68 = (uint64_t *)(v39 + v64[14]);
              unint64_t v69 = v68[1];
              if (v69 >> 60 != 15) {
                sub_100038B34(*v68, v69);
              }
              if (*(void *)(v39 + v64[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_88:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v71 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v39 + *(int *)(v71 + 48)), *(void **)(v39 + *(int *)(v71 + 48) + 8), *(void *)(v39 + *(int *)(v71 + 48) + 16), *(unsigned char *)(v39 + *(int *)(v71 + 48) + 24));
          sub_10004FFD4(*(void **)(v39 + *(int *)(v71 + 64)), *(void **)(v39 + *(int *)(v71 + 64) + 8), *(void *)(v39 + *(int *)(v71 + 64) + 16), *(unsigned char *)(v39 + *(int *)(v71 + 64) + 24));
        }
        else
        {
          switch(v42)
          {
            case 0:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_67;
            case 1:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              uint64_t v72 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v73 = v39 + v72[13];
              uint64_t v74 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v75 = *(void *)(v74 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74)) {
                (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v73, v74);
              }
              uint64_t v76 = (uint64_t *)(v39 + v72[14]);
              unint64_t v77 = v76[1];
              if (v77 >> 60 != 15) {
                sub_100038B34(*v76, v77);
              }
              if (*(void *)(v39 + v72[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              uint64_t v78 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v45 = *(int *)(v78 + 52);
              goto LABEL_45;
            case 3:
            case 4:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_67;
            default:
              goto LABEL_68;
          }
        }
        goto LABEL_68;
      case 3u:
        sub_10004FF38(*(void **)v39, *(void **)(v39 + 8), *(void *)(v39 + 16), *(void *)(v39 + 24));
        goto LABEL_68;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_65;
          case 1u:
            ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
            uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v52 = v39 + v51[13];
            uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v54 = *(void *)(v53 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
              (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
            }
            uint64_t v55 = (uint64_t *)(v39 + v51[14]);
            unint64_t v56 = v55[1];
            if (v56 >> 60 != 15) {
              sub_100038B34(*v55, v56);
            }
            if (*(void *)(v39 + v51[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
            uint64_t v57 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_65:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v43 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v39, 1, v43))
        {
          ((void (*)(uint64_t, uint64_t))v82)(v39, v83);
          uint64_t v44 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v45 = *(int *)(v43 + 48);
LABEL_45:
        }
        goto LABEL_68;
      case 6u:
        if (!*(void *)(v39 + 8)) {
          goto LABEL_68;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v39 + 8)) {
          goto LABEL_68;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v46 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v39, 1, v46)) {
          goto LABEL_68;
        }
        swift_bridgeObjectRelease();
        uint64_t v47 = type metadata accessor for EventLookupItem(0);
        uint64_t v48 = v39 + *(int *)(v47 + 20);
        uint64_t v49 = type metadata accessor for Date();
        uint64_t v50 = *(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8);
        v50(v48, v49);
        v50(v39 + *(int *)(v47 + 24), v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v39) {
          goto LABEL_68;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_68;
    }
LABEL_67:
    swift_bridgeObjectRelease();
  }
LABEL_68:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  ((void (*)(uint64_t, uint64_t))v82)(v27 + v80[15], v83);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v27 + v80[25]), *(void **)(v27 + v80[25] + 8), *(unsigned char *)(v27 + v80[25] + 16));
  swift_release();
  if ((~*(void *)(v27 + v80[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v58 = (id *)(v27 + v80[30]);
  if (*v58)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v58 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v59 = (uint64_t *)(v27 + v80[62]);
  if (v59[3])
  {
    sub_100038B34(*v59, v59[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v60 = v27 + v80[65];
  uint64_t v61 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v62 = *(void *)(v61 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61)) {
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002A68CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CVBundle(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ContentView() - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10000FC9C;
  return sub_100272874(a1, v9, v10, v11, v12);
}

uint64_t sub_1002A6A20()
{
  return sub_100273298(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1002A6A40()
{
  return sub_100273040(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1002A6A64()
{
  return sub_100297ABC();
}

uint64_t sub_1002A6A7C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002A6AC8()
{
  return sub_1002726B0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002A6AE4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002A6B30()
{
  return sub_1002725AC();
}

uint64_t sub_1002A6B4C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v75 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v73 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  uint64_t v76 = v0;
  uint64_t v74 = (v75 + 32) & ~v75;
  uint64_t v2 = v0 + v74;
  sub_100161890(*(void *)(v0 + v74), *(unsigned char *)(v0 + v74 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v0 + v74 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        unint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002A7FFC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000F878;
  return sub_100273418(a1, v6, v7, v8, v9);
}

uint64_t sub_1002A8120()
{
  return sub_1002741FC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_1002A8144()
{
  return sub_1002739A0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002A8160()
{
  return sub_1002744D8();
}

uint64_t sub_1002A8180()
{
  return sub_100297ABC();
}

uint64_t sub_1002A8198()
{
  return sub_1002748C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002A81B4()
{
  return sub_100274654();
}

uint64_t sub_1002A81D4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10025DD20(a1, v5, v6, v7);
}

uint64_t sub_1002A82C4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10025F4E4(a1, v5, v6, v7);
}

BOOL sub_1002A83B0(long long *a1)
{
  return sub_100293B34(a1);
}

void sub_1002A83E0()
{
  sub_1001BA434(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002A8404()
{
  return sub_1001BA6B0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void sub_1002A8424()
{
  sub_1001BA93C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002A8444(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026C4F0(a1, v5, v6, v7);
}

uint64_t sub_1002A8534(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026C8A8(a1, v5, v6, v7);
}

uint64_t sub_1002A8624(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10026C170(a1, v5, v6, v7);
}

uint64_t sub_1002A8710()
{
  return sub_10026C3E4(*(void *)(v0 + 16));
}

uint64_t sub_1002A872C()
{
  return sub_10026C7E0();
}

uint64_t sub_1002A874C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10022A23C(a1, v5, v6, v7);
}

uint64_t sub_1002A883C()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_10025B454);
}

uint64_t sub_1002A8858()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_10025ABC4);
}

uint64_t sub_1002A8874(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10025AC34(a1, v5, v6, v7);
}

uint64_t sub_1002A8964()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_100262234);
}

uint64_t sub_1002A8980()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1002622A0(v2);
}

uint64_t sub_1002A89E8()
{
  return sub_100276A28();
}

uint64_t sub_1002A8A08(uint64_t a1)
{
  return sub_1002AB3E0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10023AD88);
}

uint64_t sub_1002A8A24()
{
  type metadata accessor for ContentView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_10023B654();
}

uint64_t sub_1002A8B10()
{
  return sub_100257A24();
}

uint64_t sub_1002A8B48(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10023B170(a1, v5, v6, v7);
}

uint64_t sub_1002A8C38()
{
  return sub_1002AAE78((uint64_t (*)(uint64_t))sub_1002482D8);
}

unint64_t sub_1002A8C50()
{
  unint64_t result = qword_1005266C0;
  if (!qword_1005266C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005266C0);
  }
  return result;
}

uint64_t sub_1002A8CA8()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10000FC9C;
  return sub_10023A764(v3);
}

unint64_t sub_1002A8D74()
{
  unint64_t result = qword_1005267A8;
  if (!qword_1005267A8)
  {
    sub_10000F69C(&qword_1005267B0);
    sub_1002A8DF0();
    sub_1002A90BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005267A8);
  }
  return result;
}

unint64_t sub_1002A8DF0()
{
  unint64_t result = qword_1005267B8;
  if (!qword_1005267B8)
  {
    sub_10000F69C(&qword_1005267C0);
    sub_1002A8E6C();
    sub_1002A8FE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005267B8);
  }
  return result;
}

unint64_t sub_1002A8E6C()
{
  unint64_t result = qword_1005267C8;
  if (!qword_1005267C8)
  {
    sub_10000F69C(&qword_1005267D0);
    sub_10028E890(&qword_1005267D8, &qword_1005267E0, (void (*)(void))sub_1002A8F44);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005267C8);
  }
  return result;
}

unint64_t sub_1002A8F44()
{
  unint64_t result = qword_1005267E8;
  if (!qword_1005267E8)
  {
    sub_10000F69C(&qword_1005267F0);
    sub_100062574();
    sub_100013AA8(&qword_100519030, &qword_100519038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005267E8);
  }
  return result;
}

unint64_t sub_1002A8FE4()
{
  unint64_t result = qword_1005267F8;
  if (!qword_1005267F8)
  {
    sub_10000F69C(&qword_100526800);
    sub_10028E890(&qword_100526808, &qword_100526810, (void (*)(void))sub_100062574);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005267F8);
  }
  return result;
}

unint64_t sub_1002A90BC()
{
  unint64_t result = qword_100526818;
  if (!qword_100526818)
  {
    sub_10000F69C(&qword_100526820);
    sub_1002A915C();
    sub_100013AA8(&qword_100526888, &qword_100526890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526818);
  }
  return result;
}

unint64_t sub_1002A915C()
{
  unint64_t result = qword_100526828;
  if (!qword_100526828)
  {
    sub_10000F69C(&qword_100526830);
    sub_10000F69C(&qword_100526838);
    sub_10000F69C(&qword_100526840);
    sub_10028E890(&qword_100526848, &qword_100526838, (void (*)(void))sub_1002A92B8);
    sub_100013AA8(&qword_100526880, &qword_100526840);
    swift_getOpaqueTypeConformance2();
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526828);
  }
  return result;
}

unint64_t sub_1002A92B8()
{
  unint64_t result = qword_100526850;
  if (!qword_100526850)
  {
    sub_10000F69C(&qword_100526858);
    sub_1002A9358();
    sub_100013AA8((unint64_t *)&qword_10051B8C0, &qword_100522F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526850);
  }
  return result;
}

unint64_t sub_1002A9358()
{
  unint64_t result = qword_100526860;
  if (!qword_100526860)
  {
    sub_10000F69C(&qword_100526868);
    sub_100013AA8(&qword_100526870, &qword_100526878);
    sub_100013AA8(&qword_100519030, &qword_100519038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526860);
  }
  return result;
}

uint64_t sub_1002A941C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002A9488()
{
  unint64_t result = qword_1005268A8;
  if (!qword_1005268A8)
  {
    sub_10000F69C(&qword_1005268B0);
    sub_1002A9504();
    sub_1002A96A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005268A8);
  }
  return result;
}

unint64_t sub_1002A9504()
{
  unint64_t result = qword_1005268B8;
  if (!qword_1005268B8)
  {
    sub_10000F69C(&qword_1005268C0);
    sub_1002A95B0();
    sub_1002AB13C(&qword_1005268E0, (void (*)(uint64_t))type metadata accessor for OnboardingOverlay);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005268B8);
  }
  return result;
}

unint64_t sub_1002A95B0()
{
  unint64_t result = qword_1005268C8;
  if (!qword_1005268C8)
  {
    sub_10000F69C(&qword_1005268D0);
    sub_1002A9650();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005268C8);
  }
  return result;
}

unint64_t sub_1002A9650()
{
  unint64_t result = qword_1005268D8;
  if (!qword_1005268D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005268D8);
  }
  return result;
}

unint64_t sub_1002A96A4()
{
  unint64_t result = qword_1005268E8;
  if (!qword_1005268E8)
  {
    sub_10000F69C(&qword_1005268F0);
    sub_1002A9718();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005268E8);
  }
  return result;
}

unint64_t sub_1002A9718()
{
  unint64_t result = qword_1005268F8;
  if (!qword_1005268F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005268F8);
  }
  return result;
}

unint64_t sub_1002A976C()
{
  unint64_t result = qword_100526900;
  if (!qword_100526900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526900);
  }
  return result;
}

uint64_t sub_1002A97C4(char a1)
{
  return sub_1002A9BC8(a1, "Resetting look up states due to ChatGPT swipe dismisal (%s)");
}

unint64_t sub_1002A97D0()
{
  unint64_t result = qword_100526908;
  if (!qword_100526908)
  {
    sub_10000F69C(&qword_100526718);
    sub_10028E890(&qword_100526910, &qword_100526710, (void (*)(void))sub_1002A98A8);
    sub_1002AB13C(&qword_100526930, (void (*)(uint64_t))type metadata accessor for SwipeToDismissModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526908);
  }
  return result;
}

uint64_t sub_1002A98A8()
{
  return sub_10028E890(&qword_100526918, &qword_100526708, (void (*)(void))sub_1002A98D8);
}

unint64_t sub_1002A98D8()
{
  unint64_t result = qword_100526920;
  if (!qword_100526920)
  {
    sub_10000F69C(&qword_100526700);
    sub_100013AA8(&qword_100526928, &qword_1005266F8);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526920);
  }
  return result;
}

uint64_t sub_1002A99A4()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_1002A99C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10027DC10(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_1002A9A08(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002A9A74()
{
  return sub_100238024(*(void *)(v0 + 16));
}

unint64_t sub_1002A9A7C()
{
  unint64_t result = qword_100526950;
  if (!qword_100526950)
  {
    sub_10000F69C(&qword_100526940);
    sub_100013AA8(&qword_100526958, &qword_100526960);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526950);
  }
  return result;
}

uint64_t sub_1002A9B4C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002A9BBC(char a1)
{
  return sub_1002A9BC8(a1, "Resetting look up states due to swipe dismissal (%s");
}

uint64_t sub_1002A9BC8(char a1, const char *a2)
{
  char v4 = a1 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for ContentView() - 8);
  return sub_100238D4C(v4, v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

unint64_t sub_1002A9C3C()
{
  unint64_t result = qword_100526970;
  if (!qword_100526970)
  {
    sub_10000F69C(&qword_100526790);
    sub_1002A9CB8();
    sub_10002D694();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526970);
  }
  return result;
}

unint64_t sub_1002A9CB8()
{
  unint64_t result = qword_100526978;
  if (!qword_100526978)
  {
    sub_10000F69C(&qword_100526788);
    sub_10028E890(&qword_100526980, &qword_100526780, (void (*)(void))sub_1002A9D84);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526978);
  }
  return result;
}

unint64_t sub_1002A9D84()
{
  unint64_t result = qword_100526988;
  if (!qword_100526988)
  {
    sub_10000F69C(&qword_100526778);
    sub_100013AA8(&qword_100526990, &qword_100526770);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526988);
  }
  return result;
}

uint64_t sub_1002A9E28()
{
  return sub_1002A9E48((uint64_t)&unk_1004F21B0, (uint64_t)&unk_1005269D0);
}

uint64_t sub_1002A9E48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ContentView() - 8);
  return sub_10025D030(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

uint64_t sub_1002A9EBC()
{
  return sub_1002385BC(*(void *)(v0 + 16));
}

unint64_t sub_1002A9EC4()
{
  unint64_t result = qword_1005269C0;
  if (!qword_1005269C0)
  {
    sub_10000F69C(&qword_1005269B8);
    sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1005269C0);
  }
  return result;
}

uint64_t sub_1002A9F94@<X0>(uint64_t a1@<X8>)
{
  return sub_100238740(a1);
}

uint64_t sub_1002A9F9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002388B8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1002A9FA8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100238280(a1, v5, v6, v7);
}

void sub_1002AA094()
{
}

unint64_t sub_1002AA0B4()
{
  unint64_t result = qword_1005269E0;
  if (!qword_1005269E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005269E0);
  }
  return result;
}

void sub_1002AA108()
{
}

uint64_t sub_1002AA130()
{
  return 8;
}

uint64_t sub_1002AA13C()
{
  return swift_release();
}

uint64_t sub_1002AA144(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1002AA154()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_1002AA19C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1002AA1AC()
{
  return sub_1002AF84C(sub_100249838);
}

uint64_t sub_1002AA1C8()
{
  return sub_100297ABC();
}

uint64_t sub_1002AA1E4()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_100248E38);
}

uint64_t sub_1002AA200()
{
  return sub_100297ABC();
}

uint64_t sub_1002AA21C()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_100248B68);
}

uint64_t sub_1002AA23C()
{
  return sub_100248DB8();
}

void sub_1002AA258()
{
  sub_100051A90(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1002AA278()
{
  return sub_100249790();
}

uint64_t sub_1002AA298()
{
  type metadata accessor for ContentView();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000FC9C;
  return sub_100249ABC();
}

uint64_t sub_1002AA384()
{
  return sub_10024CFBC();
}

uint64_t sub_1002AA3A4()
{
  return sub_1002AF84C(sub_1002469A8);
}

uint64_t sub_1002AA3C0()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_100246D08);
}

uint64_t sub_1002AA3DC(char a1)
{
  return sub_1002AA3F4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100246DD4);
}

uint64_t sub_1002AA3F4(char a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = a1 & 1;
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(v3, v5);
}

uint64_t sub_1002AA47C(uint64_t a1, long long *a2)
{
  type metadata accessor for ContentView();

  return sub_10024D064(a1, a2);
}

uint64_t sub_1002AA500(uint64_t a1, uint64_t a2)
{
  return sub_1002AA518(a1, a2, sub_10024DAA4);
}

uint64_t sub_1002AA518(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a3(a1, a2, v7);
}

unint64_t sub_1002AA5AC()
{
  unint64_t result = qword_100526AA8;
  if (!qword_100526AA8)
  {
    sub_10000F69C(&qword_10051A308);
    sub_1002AB13C(&qword_100526AB0, (void (*)(uint64_t))type metadata accessor for ResultLookupState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526AA8);
  }
  return result;
}

uint64_t sub_1002AA65C(uint64_t a1)
{
  return sub_1002AE040(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10024E62C);
}

uint64_t sub_1002AA674(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1002AA6A4(uint64_t a1)
{
  return sub_1002AB3E0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10024E698);
}

uint64_t sub_1002AA6BC(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1002AA6EC(char a1)
{
  return sub_1002AA3F4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10024EB70);
}

void sub_1002AA704()
{
  sub_10024DED8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1002AA728(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10024E0DC(a1, v5, v6, v7);
}

uint64_t sub_1002AA814()
{
  return sub_10027B334();
}

uint64_t sub_1002AA830(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1002AA8A4()
{
  unint64_t result = qword_100526B10;
  if (!qword_100526B10)
  {
    sub_10000F69C(&qword_100526AE8);
    sub_100013AA8(&qword_100526B18, &qword_100526AE0);
    sub_1002AA944();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526B10);
  }
  return result;
}

unint64_t sub_1002AA944()
{
  unint64_t result = qword_100526B20;
  if (!qword_100526B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526B20);
  }
  return result;
}

uint64_t sub_1002AA998()
{
  return sub_1002A941C(&qword_100526B30, &qword_100519FD0, (void (*)(void))sub_10004ECA0);
}

unint64_t sub_1002AA9D8()
{
  unint64_t result = qword_100526B38;
  if (!qword_100526B38)
  {
    sub_10000F69C(&qword_100522A60);
    sub_1002AB13C(&qword_100521668, (void (*)(uint64_t))type metadata accessor for ActionBarItem);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526B38);
  }
  return result;
}

uint64_t sub_1002AAA80()
{
  return sub_10023E954();
}

uint64_t sub_1002AAAE0()
{
  return sub_1002ADEF0(sub_10023E954);
}

uint64_t sub_1002AAAF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100244FD8(a1);
}

uint64_t sub_1002AAB00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002AAB2C()
{
  return EnvironmentValues.font.setter();
}

unint64_t sub_1002AAB58()
{
  unint64_t result = qword_100526BA8;
  if (!qword_100526BA8)
  {
    sub_10000F69C(&qword_100526B60);
    sub_100013AA8(&qword_100526BB0, &qword_100526B58);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526BA8);
  }
  return result;
}

unint64_t sub_1002AAC1C()
{
  unint64_t result = qword_100526BB8;
  if (!qword_100526BB8)
  {
    sub_10000F69C(&qword_100526B70);
    sub_10000F69C(&qword_100526B60);
    sub_1002AAB58();
    swift_getOpaqueTypeConformance2();
    sub_100152FCC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526BB8);
  }
  return result;
}

uint64_t sub_1002AACD0(uint64_t a1, uint64_t a2)
{
  return sub_1002AACE8(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100254E34);
}

uint64_t sub_1002AACE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a3(a1, a2, v7);
}

unint64_t sub_1002AAD7C()
{
  unint64_t result = qword_100526C00;
  if (!qword_100526C00)
  {
    sub_10000F69C(&qword_100526BC8);
    sub_100013AA8(&qword_100526C08, &qword_100526BC0);
    sub_100013AA8(&qword_10051BE40, &qword_10051BE48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526C00);
  }
  return result;
}

uint64_t sub_1002AAE44()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_100254EA0);
}

uint64_t sub_1002AAE60()
{
  return sub_1002AAE78((uint64_t (*)(uint64_t))sub_100254F2C);
}

uint64_t sub_1002AAE78(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

unint64_t sub_1002AAEFC()
{
  unint64_t result = qword_100526C18;
  if (!qword_100526C18)
  {
    sub_10000F69C(&qword_100526BE0);
    sub_10000F69C(&qword_100526BD0);
    sub_10028E890(&qword_100526BF8, &qword_100526BD0, (void (*)(void))sub_1002AAD7C);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100526C20, &qword_100526C28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526C18);
  }
  return result;
}

unint64_t sub_1002AB018()
{
  unint64_t result = qword_100526C30;
  if (!qword_100526C30)
  {
    sub_10000F69C(&qword_100526C10);
    sub_1002AB13C(&qword_100526C38, (void (*)(uint64_t))&type metadata accessor for GenerativeAssistantSettingsOnboarding);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526C30);
  }
  return result;
}

id sub_1002AB0C8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100255164(v4, a1);
}

uint64_t sub_1002AB13C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002AB184()
{
  unint64_t result = qword_100526CB0;
  if (!qword_100526CB0)
  {
    sub_10000F69C(&qword_100526CA8);
    sub_1002AB200();
    sub_1000BC24C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526CB0);
  }
  return result;
}

unint64_t sub_1002AB200()
{
  unint64_t result = qword_100526CB8;
  if (!qword_100526CB8)
  {
    sub_10000F69C(&qword_100526CC0);
    sub_1002AB2C0(&qword_100526CC8, &qword_100526CD0, &qword_100526CD8, &qword_100526CE0);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526CB8);
  }
  return result;
}

uint64_t sub_1002AB2C0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_100013AA8(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002AB354(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002AB3C8(uint64_t a1)
{
  return sub_1002AB3E0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100252A3C);
}

uint64_t sub_1002AB3E0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

unint64_t sub_1002AB464()
{
  unint64_t result = qword_100526DE8;
  if (!qword_100526DE8)
  {
    sub_10000F69C(&qword_100526DE0);
    sub_1002AB504();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526DE8);
  }
  return result;
}

unint64_t sub_1002AB504()
{
  unint64_t result = qword_100526DF0;
  if (!qword_100526DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526DF0);
  }
  return result;
}

unint64_t sub_1002AB558()
{
  unint64_t result = qword_100526E10;
  if (!qword_100526E10)
  {
    sub_10000F69C(&qword_100526D40);
    sub_10000F69C(&qword_100526D30);
    sub_1002AB62C();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100521B48, &qword_100521B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E10);
  }
  return result;
}

unint64_t sub_1002AB62C()
{
  unint64_t result = qword_100526E18;
  if (!qword_100526E18)
  {
    sub_10000F69C(&qword_100526D30);
    sub_1002ABB64(&qword_100526E20, &qword_100526D28, &qword_100526D18, (void (*)(void))sub_1002AB704);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E18);
  }
  return result;
}

unint64_t sub_1002AB704()
{
  unint64_t result = qword_100526E28;
  if (!qword_100526E28)
  {
    sub_10000F69C(&qword_100526D18);
    sub_100013AA8(&qword_100526E30, &qword_100526D10);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E28);
  }
  return result;
}

unint64_t sub_1002AB7D4()
{
  unint64_t result = qword_100526E38;
  if (!qword_100526E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E38);
  }
  return result;
}

unint64_t sub_1002AB828()
{
  unint64_t result = qword_100526E40;
  if (!qword_100526E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E40);
  }
  return result;
}

uint64_t sub_1002AB880()
{
  return sub_1002AF84C(sub_100254830);
}

uint64_t sub_1002AB898@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1002AB8C8()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_1002AB8F0()
{
  return swift_deallocObject();
}

unsigned char *sub_1002AB900(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_1002AB918()
{
  unint64_t result = qword_100526E70;
  if (!qword_100526E70)
  {
    sub_10000F69C(&qword_100526DB8);
    sub_1002AB9B8();
    sub_100013AA8(&qword_100521B48, &qword_100521B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E70);
  }
  return result;
}

unint64_t sub_1002AB9B8()
{
  unint64_t result = qword_100526E78;
  if (!qword_100526E78)
  {
    sub_10000F69C(&qword_100526DB0);
    sub_10000F69C(&qword_100526DA0);
    sub_1002ABA8C();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E78);
  }
  return result;
}

unint64_t sub_1002ABA8C()
{
  unint64_t result = qword_100526E80;
  if (!qword_100526E80)
  {
    sub_10000F69C(&qword_100526DA0);
    sub_1002ABB64(&qword_100526E88, &qword_100526D98, &qword_100526D88, (void (*)(void))sub_1002ABC2C);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E80);
  }
  return result;
}

uint64_t sub_1002ABB64(unint64_t *a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_10000F69C(a3);
    a4();
    sub_1002AB7D4();
    swift_getOpaqueTypeConformance2();
    sub_1002AB828();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002ABC2C()
{
  unint64_t result = qword_100526E90;
  if (!qword_100526E90)
  {
    sub_10000F69C(&qword_100526D88);
    sub_10000F69C(&qword_100526D78);
    sub_100013AA8(&qword_100526E98, &qword_100526D78);
    swift_getOpaqueTypeConformance2();
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526E90);
  }
  return result;
}

uint64_t sub_1002ABD3C()
{
  return sub_1002AF84C(sub_100252510);
}

unint64_t sub_1002ABD54()
{
  unint64_t result = qword_100526EB0;
  if (!qword_100526EB0)
  {
    sub_10000F69C(&qword_100526EA8);
    sub_10000F69C(&qword_10051C1A8);
    sub_10008D63C();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526EB0);
  }
  return result;
}

uint64_t sub_1002ABE08()
{
  type metadata accessor for ContentView();

  return sub_1002528A8();
}

uint64_t sub_1002ABE78()
{
  return swift_deallocObject();
}

uint64_t sub_1002ABE88(long long *a1)
{
  return sub_100293A30(a1) & 1;
}

uint64_t sub_1002ABEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ABF14()
{
  return sub_1002AF84C(sub_1002573D4);
}

uint64_t sub_1002ABF2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100257AA4(a1);
}

unint64_t sub_1002ABF34()
{
  unint64_t result = qword_100526F18;
  if (!qword_100526F18)
  {
    sub_10000F69C(&qword_100526F10);
    sub_100150EA0();
    sub_100013AA8(&qword_100526F20, &qword_100526F28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526F18);
  }
  return result;
}

uint64_t sub_1002ABFD4()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_1002ABFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10027DC10(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for ControlSize, (uint64_t (*)(char *))&EnvironmentValues.controlSize.setter);
}

unint64_t sub_1002AC038()
{
  unint64_t result = qword_100526F40;
  if (!qword_100526F40)
  {
    sub_10000F69C(&qword_100526ED0);
    sub_1002AC0D8();
    sub_100013AA8(&qword_100526F50, &qword_100526F38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526F40);
  }
  return result;
}

unint64_t sub_1002AC0D8()
{
  unint64_t result = qword_100526F48;
  if (!qword_100526F48)
  {
    sub_10000F69C(&qword_100526EC8);
    sub_100013AA8(&qword_100526F30, &qword_100526EC0);
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526F48);
  }
  return result;
}

uint64_t sub_1002AC1AC()
{
  return sub_1002AF84C(sub_100256CE4);
}

uint64_t sub_1002AC1C8()
{
  return sub_1002AF84C(sub_10025720C);
}

unint64_t sub_1002AC1E0()
{
  unint64_t result = qword_100526F60;
  if (!qword_100526F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526F60);
  }
  return result;
}

uint64_t sub_1002AC238()
{
  uint64_t v1 = (int *)type metadata accessor for ContentView();
  uint64_t v89 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v85 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = *(void *)(sub_10000F214(&qword_1005261F0) - 8);
  uint64_t v93 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v87 = *(void *)(v2 + 64);
  uint64_t v3 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v88 = *((void *)v3 - 1);
  uint64_t v92 = *(unsigned __int8 *)(v88 + 80);
  swift_unknownObjectRelease();
  uint64_t v86 = (v89 + 32) & ~v89;
  uint64_t v4 = v0 + v86;
  sub_100161890(*(void *)(v0 + v86), *(unsigned char *)(v0 + v86 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v5 = v0 + v86 + v1[9];
  sub_10000F214(&qword_100525F10);
  uint64_t v90 = v0;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v4 + v1[10];
  uint64_t v8 = v7 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v9 = v8 + v3[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (!v11(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v9, v10);
  }
  uint64_t v12 = v8 + v3[18];
  if (!v11(v12, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v12, v10);
  }
  uint64_t v13 = v8 + v3[22];
  if (!v11(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v13, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v4 + v1[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v56 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v14, v56);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_76;
            case 1:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v59 = v14 + v58[13];
              uint64_t v60 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v61 = *(void *)(v60 - 8);
              uint64_t v83 = v60;
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(v61 + 48))(v59, 1)) {
                (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v83);
              }
              uint64_t v62 = (uint64_t *)(v14 + v58[14]);
              unint64_t v63 = v62[1];
              if (v63 >> 60 != 15) {
                sub_100038B34(*v62, v63);
              }
              if (*(void *)(v14 + v58[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v64 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v14, v64);
              uint64_t v65 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v66 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v14, v66);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_76:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v67 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v67 + 48)), *(void **)(v14 + *(int *)(v67 + 48) + 8), *(void *)(v14 + *(int *)(v67 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v67 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v67 + 64)), *(void **)(v14 + *(int *)(v67 + 64) + 8), *(void *)(v14 + *(int *)(v67 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v67 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v68 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v14, v68);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v71 = v14 + v70[13];
              uint64_t v72 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v73 = *(void *)(v72 - 8);
              uint64_t v84 = v72;
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(v73 + 48))(v71, 1)) {
                (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v84);
              }
              uint64_t v74 = (uint64_t *)(v14 + v70[14]);
              unint64_t v75 = v74[1];
              if (v75 >> 60 != 15) {
                sub_100038B34(*v74, v75);
              }
              if (*(void *)(v14 + v70[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v76 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8))(v14, v76);
              uint64_t v77 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v77 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v26 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v14, v26);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v78 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(v14, v78);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v27 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v14, v27);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v28 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v14, v28);
            uint64_t v29 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v30 = v14 + v29[13];
            uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v32 = *(void *)(v31 - 8);
            uint64_t v82 = v31;
            if (!(*(unsigned int (**)(uint64_t, uint64_t))(v32 + 48))(v30, 1)) {
              (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v82);
            }
            uint64_t v33 = (uint64_t *)(v14 + v29[14]);
            unint64_t v34 = v33[1];
            if (v34 >> 60 != 15) {
              sub_100038B34(*v33, v34);
            }
            if (*(void *)(v14 + v29[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v35 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v14, v35);
            uint64_t v36 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v37 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v14, v37);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v80 = type metadata accessor for EventLookupItem(0);
        uint64_t v81 = v14 + *(int *)(v80 + 20);
        uint64_t v79 = type metadata accessor for Date();
        uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8);
        v25(v81, v79);
        v25(v14 + *(int *)(v80 + 24), v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v38 = v4 + v1[15];
  uint64_t v39 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v4 + v1[25]), *(void **)(v4 + v1[25] + 8), *(unsigned char *)(v4 + v1[25] + 16));
  swift_release();
  if ((~*(void *)(v4 + v1[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v40 = (id *)(v4 + v1[30]);
  if (*v40)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v40 + 1));
  }
  uint64_t v41 = (v86 + v85 + v93) & ~v93;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = (uint64_t *)(v4 + v1[62]);
  if (v42[3])
  {
    sub_100038B34(*v42, v42[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = v4 + v1[65];
  uint64_t v44 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v45 = *(void *)(v44 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44)) {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  }
  uint64_t v46 = (v41 + v87 + v92) & ~v92;
  sub_10000F214(&qword_100519A10);
  swift_release();
  uint64_t v47 = v90 + v41;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v88 + 48))(v90 + v41, 1, v3))
  {
    uint64_t v48 = v47 + v3[10];
    if (!v11(v48, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v48, v10);
    }
    uint64_t v49 = v47 + v3[18];
    if (!v11(v49, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v49, v10);
    }
    uint64_t v50 = v47 + v3[22];
    if (!v11(v50, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v50, v10);
    }
  }
  uint64_t v51 = v90 + v46;
  uint64_t v52 = v90 + v46 + v3[10];
  if (!v11(v52, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v52, v10);
  }
  uint64_t v53 = v51 + v3[18];
  if (!v11(v53, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v53, v10);
  }
  uint64_t v54 = v51 + v3[22];
  if (!v11(v54, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v54, v10);
  }

  return swift_deallocObject();
}

uint64_t sub_1002AD95C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002AD988()
{
  return EnvironmentValues.tint.setter();
}

uint64_t sub_1002AD9B4()
{
  return sub_100257A24();
}

uint64_t sub_1002AD9EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10023B170(a1, v5, v6, v7);
}

unint64_t sub_1002ADAD8()
{
  unint64_t result = qword_100526FA0;
  if (!qword_100526FA0)
  {
    sub_10000F69C(&qword_100526F90);
    sub_1002ADB84();
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526FA0);
  }
  return result;
}

unint64_t sub_1002ADB84()
{
  unint64_t result = qword_100526FA8;
  if (!qword_100526FA8)
  {
    sub_10000F69C(&qword_100526F88);
    sub_1002ADC24();
    sub_100013AA8(&qword_10051CDF8, &qword_10051CDA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526FA8);
  }
  return result;
}

unint64_t sub_1002ADC24()
{
  unint64_t result = qword_100526FB0;
  if (!qword_100526FB0)
  {
    sub_10000F69C(&qword_100526F80);
    sub_10028E890(&qword_100526FB8, &qword_100526FC0, (void (*)(void))sub_1002ADCF0);
    sub_100013AA8(&qword_10051FC18, &qword_10051FC20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526FB0);
  }
  return result;
}

uint64_t sub_1002ADCF0()
{
  return sub_10028E890(&qword_100526FC8, &qword_100526FD0, (void (*)(void))sub_1002ADD20);
}

unint64_t sub_1002ADD20()
{
  unint64_t result = qword_100526FD8;
  if (!qword_100526FD8)
  {
    sub_10000F69C(&qword_100526FE0);
    sub_100013734();
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100526FD8);
  }
  return result;
}

uint64_t sub_1002ADDC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1002ADDF4()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1002ADE24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002ADE8C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002ADEF0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1002ADF58()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1002B48CC;
  return sub_100242E44(v3);
}

uint64_t sub_1002AE028(uint64_t a1)
{
  return sub_1002AE040(a1, sub_100243660);
}

uint64_t sub_1002AE040(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_1002AE0C4()
{
  return sub_1002AE0DC((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002AE0DC(void (*a1)(void))
{
  uint64_t v2 = type metadata accessor for ContentView();
  uint64_t v76 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v74 = *(void *)(*(void *)(v2 - 8) + 64);
  swift_unknownObjectRelease();
  uint64_t v78 = v1;
  uint64_t v75 = (v76 + 32) & ~v76;
  uint64_t v3 = v1 + v75;
  sub_100161890(*(void *)v3, *(unsigned char *)(v3 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v4 = v1 + v75 + *(int *)(v2 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v73 = (int *)v2;
  uint64_t v6 = v3 + *(int *)(v2 + 40);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v7 + v8[10];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v13 = v7 + v8[18];
  if (!v12(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v14 = v7 + v8[22];
  if (!v12(v14, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = v3 + v73[12];
  uint64_t v16 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v18 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v18)
          {
            case 0:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v15, v50);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v51 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v15, v51);
              uint64_t v52 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v53 = v15 + v52[13];
              uint64_t v54 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v55 = *(void *)(v54 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54)) {
                (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
              }
              uint64_t v56 = (uint64_t *)(v15 + v52[14]);
              unint64_t v57 = v56[1];
              if (v57 >> 60 != 15) {
                sub_100038B34(*v56, v57);
              }
              if (*(void *)(v15 + v52[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v58 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v15, v58);
              uint64_t v59 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v19 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15, v19);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v60 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v15, v60);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v61 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v15 + *(int *)(v61 + 48)), *(void **)(v15 + *(int *)(v61 + 48) + 8), *(void *)(v15 + *(int *)(v61 + 48) + 16), *(unsigned char *)(v15 + *(int *)(v61 + 48) + 24));
          sub_10004FFD4(*(void **)(v15 + *(int *)(v61 + 64)), *(void **)(v15 + *(int *)(v61 + 64) + 8), *(void *)(v15 + *(int *)(v61 + 64) + 16), *(unsigned char *)(v15 + *(int *)(v61 + 64) + 24));
        }
        else
        {
          switch(v18)
          {
            case 0:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v15, v62);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v63 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v15, v63);
              uint64_t v64 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v65 = v15 + v64[13];
              uint64_t v66 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v67 = *(void *)(v66 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66)) {
                (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
              }
              uint64_t v68 = (uint64_t *)(v15 + v64[14]);
              unint64_t v69 = v68[1];
              if (v69 >> 60 != 15) {
                sub_100038B34(*v68, v69);
              }
              if (*(void *)(v15 + v64[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v70 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(v15, v70);
              uint64_t v71 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v24 = *(int *)(v71 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v30 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v15, v30);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v72 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v15, v72);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v15, *(void **)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v15, v31);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v15, v32);
            uint64_t v33 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = v15 + v33[13];
            uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v36 = *(void *)(v35 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
            }
            uint64_t v37 = (uint64_t *)(v15 + v33[14]);
            unint64_t v38 = v37[1];
            if (v38 >> 60 != 15) {
              sub_100038B34(*v37, v38);
            }
            if (*(void *)(v15 + v33[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v39 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v15, v39);
            uint64_t v40 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v20 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v15, v20);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v41 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v15, v41);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v21 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21))
        {
          uint64_t v22 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v15, v22);
          uint64_t v23 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v24 = *(int *)(v21 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v15 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v25 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v15, 1, v25)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v26 = type metadata accessor for EventLookupItem(0);
        uint64_t v27 = v15 + *(int *)(v26 + 20);
        uint64_t v28 = type metadata accessor for Date();
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
        v29(v27, v28);
        v29(v15 + *(int *)(v26 + 24), v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v15) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v42 = v3 + v73[15];
  uint64_t v43 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v3 + v73[25]), *(void **)(v3 + v73[25] + 8), *(unsigned char *)(v3 + v73[25] + 16));
  swift_release();
  if ((~*(void *)(v3 + v73[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (id *)(v3 + v73[30]);
  if (*v44)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v44 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = (uint64_t *)(v3 + v73[62]);
  if (v45[3])
  {
    sub_100038B34(*v45, v45[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v46 = v3 + v73[65];
  uint64_t v47 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v48 = *(void *)(v47 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47)) {
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  a1(*(void *)(v78 + ((v74 + v75 + 7) & 0xFFFFFFFFFFFFFFF8)));

  return swift_deallocObject();
}

uint64_t sub_1002AF594(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000FC9C;
  return sub_100243858(a1, v6, v7, v8, v9);
}

uint64_t *sub_1002AF6B8(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_1002AF758(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1002AF7FC(uint64_t a1)
{
  return sub_1002AFAD4(a1, sub_100247798);
}

uint64_t sub_1002AF818()
{
  return sub_100297ABC();
}

uint64_t sub_1002AF834()
{
  return sub_1002AF84C((uint64_t (*)(uint64_t))sub_100246EA0);
}

uint64_t sub_1002AF84C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1002AF8C0()
{
  return sub_1002472E0();
}

uint64_t sub_1002AF8DC()
{
  return sub_1002473A4();
}

uint64_t sub_1002AF8FC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000FC9C;
  return sub_100247B94(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1002AFA30(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100259860(a1, a2, a3, v8);
}

uint64_t sub_1002AFABC(uint64_t a1)
{
  return sub_1002AFAD4(a1, sub_100259EE8);
}

uint64_t sub_1002AFAD4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_1002AFB5C()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v73 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  uint64_t v2 = v0 + ((v73 + 32) & ~v73);
  sub_100161890(*(void *)v2, *(unsigned char *)(v2 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  char v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002B0FF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_10025A0BC(a1, v5, v6, v7);
}

uint64_t sub_1002B10E4()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v73 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  uint64_t v2 = v0 + ((v73 + 32) & ~v73);
  sub_100161890(*(void *)v2, *(unsigned char *)(v2 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  char v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002B2588(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000FC9C;
  return sub_100259AB8(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1002B26BC()
{
  uint64_t v2 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1002B2788;
  return sub_100258A44(v3);
}

uint64_t sub_1002B2788(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1002B2888(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000FC9C;
  return sub_100258E08(a1, v5);
}

uint64_t sub_1002B2960()
{
  uint64_t v1 = type metadata accessor for ContentView();
  uint64_t v73 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = v0 + ((v73 + 16) & ~v73);
  sub_100161890(*(void *)v2, *(unsigned char *)(v2 + 8));
  swift_release();
  swift_release();
  swift_release();
  sub_10000FD10();
  uint64_t v3 = v2 + *(int *)(v1 + 36);
  sub_10000F214(&qword_100525F10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for WithCurrentHostingControllerAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v72 = (int *)v1;
  uint64_t v5 = v2 + *(int *)(v1 + 40);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v6 + v7[10];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  char v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = v6 + v7[18];
  if (!v11(v12, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v13 = v6 + v7[22];
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000F214(&qword_100525F50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v2 + v72[12];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v49 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v14, v49);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_63;
            case 1:
              uint64_t v50 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v14, v50);
              uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v52 = v14 + v51[13];
              uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v54 = *(void *)(v53 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
              }
              uint64_t v55 = (uint64_t *)(v14 + v51[14]);
              unint64_t v56 = v55[1];
              if (v56 >> 60 != 15) {
                sub_100038B34(*v55, v56);
              }
              if (*(void *)(v14 + v51[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              uint64_t v58 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_63:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v60 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 48)), *(void **)(v14 + *(int *)(v60 + 48) + 8), *(void *)(v14 + *(int *)(v60 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v60 + 64)), *(void **)(v14 + *(int *)(v60 + 64) + 8), *(void *)(v14 + *(int *)(v60 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v60 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v61 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8))(v14, v61);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_42;
            case 1:
              uint64_t v62 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v14, v62);
              uint64_t v63 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v64 = v14 + v63[13];
              uint64_t v65 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v66 = *(void *)(v65 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
                (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
              }
              uint64_t v67 = (uint64_t *)(v14 + v63[14]);
              unint64_t v68 = v67[1];
              if (v68 >> 60 != 15) {
                sub_100038B34(*v67, v68);
              }
              if (*(void *)(v14 + v63[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              uint64_t v70 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v70 + 52);
              goto LABEL_20;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v71 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8))(v14, v71);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_42;
            default:
              goto LABEL_43;
          }
        }
        goto LABEL_43;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_43;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_40;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            uint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_40:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_20:
        }
        goto LABEL_43;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_43;
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
LABEL_43:
  sub_10000F214(&qword_100525F58);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = v2 + v72[15];
  uint64_t v42 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  sub_10000F214(&qword_10051C250);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000ACB3C(*(void **)(v2 + v72[25]), *(void **)(v2 + v72[25] + 8), *(unsigned char *)(v2 + v72[25] + 16));
  swift_release();
  if ((~*(void *)(v2 + v72[26]) & 0xF000000000000007) != 0) {
    swift_release();
  }
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v43 = (id *)(v2 + v72[30]);
  if (*v43)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v43 + 1));
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v44 = (uint64_t *)(v2 + v72[62]);
  if (v44[3])
  {
    sub_100038B34(*v44, v44[1]);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v45 = v2 + v72[65];
  uint64_t v46 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v47 = *(void *)(v46 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002B3DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContentView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10025855C(v4, a1);
}

double sub_1002B3E6C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 144) = -1;
  return result;
}

uint64_t sub_1002B3E90(uint64_t result)
{
  *(unsigned char *)(result + 144) = 1;
  return result;
}

unint64_t sub_1002B3E9C()
{
  unint64_t result = qword_1005270B8;
  if (!qword_1005270B8)
  {
    sub_10000F69C(&qword_1005270A8);
    sub_10028E890(&qword_1005270C0, &qword_1005270C8, (void (*)(void))sub_1002B3F44);
    sub_1002B3FE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005270B8);
  }
  return result;
}

unint64_t sub_1002B3F44()
{
  unint64_t result = qword_1005270D0;
  if (!qword_1005270D0)
  {
    sub_10000F69C(&qword_1005270D8);
    sub_100013AA8(&qword_1005270E0, &qword_1005270E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005270D0);
  }
  return result;
}

unint64_t sub_1002B3FE4()
{
  unint64_t result = qword_100528ED0;
  if (!qword_100528ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528ED0);
  }
  return result;
}

unint64_t sub_1002B4038()
{
  unint64_t result = qword_1005270F0;
  if (!qword_1005270F0)
  {
    sub_10000F69C(&qword_1005270B0);
    sub_10028E890((unint64_t *)&qword_100528EA0, &qword_1005270F8, (void (*)(void))sub_1002B40E0);
    sub_1002B3FE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005270F0);
  }
  return result;
}

unint64_t sub_1002B40E0()
{
  unint64_t result = qword_100528EB0;
  if (!qword_100528EB0)
  {
    sub_10000F69C(&qword_100527100);
    sub_100013AA8((unint64_t *)&unk_100528EC0, &qword_100527108);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528EB0);
  }
  return result;
}

uint64_t sub_1002B4180(uint64_t result)
{
  *(unsigned char *)(result + 144) = 0;
  return result;
}

unint64_t sub_1002B4188()
{
  unint64_t result = qword_100527120;
  if (!qword_100527120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527120);
  }
  return result;
}

uint64_t sub_1002B41DC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    sub_100038B34(result, a2);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1002B4284()
{
  unint64_t result = qword_100527128;
  if (!qword_100527128)
  {
    sub_10000F69C(&qword_100527118);
    sub_1002B4188();
    sub_1002AB13C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527128);
  }
  return result;
}

uint64_t sub_1002B4330@<X0>(uint64_t a1@<X8>)
{
  return sub_100241428(a1);
}

double sub_1002B4338@<D0>(uint64_t a1@<X8>)
{
  return sub_100241550(a1);
}

uint64_t sub_1002B4340@<X0>(uint64_t a1@<X8>)
{
  return sub_100241650(a1);
}

uint64_t sub_1002B4348@<X0>(uint64_t a1@<X8>)
{
  return sub_100241920(a1);
}

uint64_t sub_1002B4350@<X0>(uint64_t a1@<X8>)
{
  return sub_100241A24(a1);
}

uint64_t sub_1002B4358@<X0>(void *a1@<X8>)
{
  return sub_100241D88(a1);
}

uint64_t sub_1002B437C@<X0>(uint64_t a1@<X8>)
{
  return sub_100241B84(a1);
}

double sub_1002B4384@<D0>(uint64_t a1@<X8>)
{
  return sub_100241C80(a1);
}

uint64_t sub_1002B438C@<X0>(void *a1@<X8>)
{
  return sub_100241D88(a1);
}

uint64_t sub_1002B43B0@<X0>(uint64_t a1@<X8>)
{
  return sub_100241E78(a1);
}

uint64_t sub_1002B43B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002B4600(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002B465C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B4690(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B4708(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B4754(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_1002B4764(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 96);
  char v5 = *(unsigned char *)(a1 + 104);
  char v10 = *(unsigned char *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 144);
  uint64_t v19 = *(void *)(a1 + 136);
  uint64_t v16 = *(void *)(a1 + 160);
  uint64_t v17 = *(void *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 176);
  uint64_t v15 = *(void *)(a1 + 168);
  uint64_t v13 = *(void *)(a1 + 184);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 192);
  uint64_t v7 = *(void *)(a1 + 208);
  char v8 = *(unsigned char *)(a1 + 216);
  swift_unknownObjectRetain();
  sub_10016180C(v2, v3);
  swift_unknownObjectRetain();
  sub_10016180C(v4, v5);
  swift_unknownObjectRetain();
  sub_10016180C(v11, v10);
  sub_100185A74(v19, v18, v17, v16, v15, v14, v13, v12, v6, v7, v8);
  return a1;
}

uint64_t sub_1002B4860()
{
  return sub_1002AA814();
}

uint64_t sub_1002B4878()
{
  return sub_1002AA278();
}

uint64_t sub_1002B4890()
{
  return sub_1002AA384();
}

uint64_t sub_1002B48A8(long long *a1)
{
  return sub_1002ABE88(a1) & 1;
}

uint64_t sub_1002B4944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(void *)a9 = swift_getKeyPath();
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 16) = 0;
  *(void *)(a9 + 24) = swift_getKeyPath();
  *(void *)(a9 + 32) = 0;
  *(unsigned char *)(a9 + 40) = 0;
  uint64_t v18 = (int *)type metadata accessor for EventResultView();
  uint64_t v19 = (uint64_t *)(a9 + v18[6]);
  *uint64_t v19 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (uint64_t *)(a9 + v18[7]);
  uint64_t *v20 = swift_getKeyPath();
  sub_10000F214(&qword_10051BB48);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v18[8];
  *(void *)(a9 + v21) = [objc_allocWithZone((Class)EKEventStore) init];
  uint64_t v22 = (void *)(a9 + v18[9]);
  *uint64_t v22 = a1;
  v22[1] = a2;
  uint64_t v23 = (void *)(a9 + v18[10]);
  *uint64_t v23 = a3;
  v23[1] = a4;
  uint64_t v24 = a9 + v18[11];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32);
  v26(v24, a5, v25);
  v26(a9 + v18[12], a6, v25);
  uint64_t v27 = (void *)(a9 + v18[13]);
  *uint64_t v27 = a7;
  v27[1] = a8;
  uint64_t v28 = a9 + v18[14];
  State.init(wrappedValue:)();
  uint64_t v29 = v40;
  *(unsigned char *)uint64_t v28 = v39;
  *(void *)(v28 + 8) = v29;
  uint64_t v30 = a9 + v18[15];
  State.init(wrappedValue:)();
  uint64_t v31 = v40;
  *(unsigned char *)uint64_t v30 = v39;
  *(void *)(v30 + 8) = v31;
  uint64_t v32 = a9 + v18[16];
  State.init(wrappedValue:)();
  uint64_t v33 = v40;
  *(unsigned char *)uint64_t v32 = v39;
  *(void *)(v32 + 8) = v33;
  sub_10000FB74(a11, (uint64_t)&v39, &qword_1005272E0);
  sub_10000F214(&qword_1005272E0);
  State.init(wrappedValue:)();
  sub_10000FBD8(a11, &qword_1005272E0);
  uint64_t v34 = (void *)(a9 + v18[18]);
  sub_10000F214(&qword_100522A60);
  uint64_t result = State.init(wrappedValue:)();
  uint64_t v36 = v40;
  *uint64_t v34 = v39;
  v34[1] = v36;
  return result;
}

uint64_t type metadata accessor for EventResultView()
{
  uint64_t result = qword_100527340;
  if (!qword_100527340) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1002B4C90(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    sub_1002B5074(*(void *)a2, v8, v9, (uint64_t (*)(void))sub_10000F724);
    *uint64_t v4 = v7;
    v4[1] = v8;
    *((unsigned char *)v4 + 16) = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    char v12 = *(unsigned char *)(a2 + 40);
    sub_1002B5074(v10, v11, v12, (uint64_t (*)(void))sub_10014F7F8);
    v4[3] = v10;
    v4[4] = v11;
    *((unsigned char *)v4 + 40) = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[7];
    uint64_t v19 = (uint64_t *)((char *)v4 + v18);
    uint64_t v20 = (void *)(a2 + v18);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = *(void **)(a2 + v22);
    *(uint64_t *)((char *)v4 + v22) = (uint64_t)v24;
    uint64_t v25 = (uint64_t *)((char *)v4 + v23);
    uint64_t v26 = (void *)(a2 + v23);
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    uint64_t v30 = (uint64_t *)((char *)v4 + v28);
    uint64_t v31 = (void *)(a2 + v28);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (char *)v4 + v29;
    uint64_t v61 = a2 + v29;
    uint64_t v34 = type metadata accessor for Date();
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);
    id v36 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v33, v61, v34);
    v35((char *)v4 + a3[12], a2 + a3[12], v34);
    uint64_t v37 = a3[13];
    uint64_t v38 = a3[14];
    uint64_t v39 = (uint64_t *)((char *)v4 + v37);
    uint64_t v40 = (void *)(a2 + v37);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = (char *)v4 + v38;
    uint64_t v43 = (char *)(a2 + v38);
    *uint64_t v42 = *v43;
    *((void *)v42 + 1) = *((void *)v43 + 1);
    uint64_t v44 = a3[15];
    uint64_t v45 = a3[16];
    uint64_t v46 = (char *)v4 + v44;
    uint64_t v47 = (char *)(a2 + v44);
    *uint64_t v46 = *v47;
    *((void *)v46 + 1) = *((void *)v47 + 1);
    uint64_t v48 = (char *)v4 + v45;
    uint64_t v49 = (char *)(a2 + v45);
    *uint64_t v48 = *v49;
    *((void *)v48 + 1) = *((void *)v49 + 1);
    uint64_t v50 = a3[17];
    uint64_t v51 = (char *)v4 + v50;
    uint64_t v52 = a2 + v50;
    uint64_t v53 = *(void *)(a2 + v50 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v53)
    {
      uint64_t v54 = *(void *)(v52 + 32);
      *((void *)v51 + 3) = v53;
      *((void *)v51 + 4) = v54;
      (**(void (***)(char *, uint64_t, uint64_t))(v53 - 8))(v51, v52, v53);
    }
    else
    {
      long long v55 = *(_OWORD *)(v52 + 16);
      *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v55;
      *((void *)v51 + 4) = *(void *)(v52 + 32);
    }
    *((void *)v51 + 5) = *(void *)(v52 + 40);
    uint64_t v56 = a3[18];
    uint64_t v57 = (uint64_t *)((char *)v4 + v56);
    uint64_t v58 = (void *)(a2 + v56);
    uint64_t v59 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v59;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1002B5074(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1002B5084(uint64_t a1, int *a2)
{
  sub_1002B52E0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v4 = a1 + a2[6];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[7];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + a2[12], v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(a1 + a2[17] + 24)) {
    _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + a2[17]);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1002B52E0(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_1002B52F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_1002B5074(*(void *)a2, v7, v8, (uint64_t (*)(void))sub_10000F724);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_1002B5074(v9, v10, v11, (uint64_t (*)(void))sub_10014F7F8);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  else
  {
    *uint64_t v17 = *v18;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = a3[10];
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)(a1 + v26);
  uint64_t v29 = (void *)(a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a1 + v27;
  uint64_t v59 = a2 + v27;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16);
  id v34 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v31, v59, v32);
  v33(a1 + a3[12], a2 + a3[12], v32);
  uint64_t v35 = a3[13];
  uint64_t v36 = a3[14];
  uint64_t v37 = (void *)(a1 + v35);
  uint64_t v38 = (void *)(a2 + v35);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = a1 + v36;
  uint64_t v41 = a2 + v36;
  *(unsigned char *)uint64_t v40 = *(unsigned char *)v41;
  *(void *)(v40 + 8) = *(void *)(v41 + 8);
  uint64_t v42 = a3[15];
  uint64_t v43 = a3[16];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(unsigned char *)uint64_t v44 = *(unsigned char *)v45;
  *(void *)(v44 + 8) = *(void *)(v45 + 8);
  uint64_t v46 = a1 + v43;
  uint64_t v47 = a2 + v43;
  *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
  *(void *)(v46 + 8) = *(void *)(v47 + 8);
  uint64_t v48 = a3[17];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  uint64_t v51 = *(void *)(a2 + v48 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v51)
  {
    uint64_t v52 = *(void *)(v50 + 32);
    *(void *)(v49 + 24) = v51;
    *(void *)(v49 + 32) = v52;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v51 - 8))(v49, v50, v51);
  }
  else
  {
    long long v53 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v53;
    *(void *)(v49 + 32) = *(void *)(v50 + 32);
  }
  *(void *)(v49 + 40) = *(void *)(v50 + 40);
  uint64_t v54 = a3[18];
  long long v55 = (void *)(a1 + v54);
  uint64_t v56 = (void *)(a2 + v54);
  uint64_t v57 = v56[1];
  *long long v55 = *v56;
  v55[1] = v57;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1002B5688(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_1002B5074(*(void *)a2, v7, v8, (uint64_t (*)(void))sub_10000F724);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_1002B52E0(v9, v10, v11, (uint64_t (*)(void))sub_10000F478);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  char v14 = *(unsigned char *)(a2 + 40);
  sub_1002B5074(v12, v13, v14, (uint64_t (*)(void))sub_10014F7F8);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  char v17 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = v14;
  sub_1002B52E0(v15, v16, v17, (uint64_t (*)(void))sub_1002B48C8);
  if (a1 != a2)
  {
    uint64_t v18 = a3[6];
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (void *)(a2 + v18);
    sub_10000FBD8(a1 + v18, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[7];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (void *)(a2 + v22);
    sub_10000FBD8(a1 + v22, &qword_10051BB48);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      *uint64_t v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = *(void **)(a2 + v26);
  uint64_t v28 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = v27;
  id v29 = v27;

  uint64_t v30 = a3[9];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[10];
  id v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *id v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 24);
  v40(v37, v38, v39);
  v40(a1 + a3[12], a2 + a3[12], v39);
  uint64_t v41 = a3[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[14];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  *(unsigned char *)uint64_t v45 = *(unsigned char *)v46;
  *(void *)(v45 + 8) = *(void *)(v46 + 8);
  swift_retain();
  swift_release();
  uint64_t v47 = a3[15];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  *(unsigned char *)uint64_t v48 = *(unsigned char *)v49;
  *(void *)(v48 + 8) = *(void *)(v49 + 8);
  swift_retain();
  swift_release();
  uint64_t v50 = a3[16];
  uint64_t v51 = a1 + v50;
  uint64_t v52 = a2 + v50;
  *(unsigned char *)uint64_t v51 = *(unsigned char *)v52;
  *(void *)(v51 + 8) = *(void *)(v52 + 8);
  swift_retain();
  swift_release();
  uint64_t v53 = a3[17];
  uint64_t v54 = a1 + v53;
  long long v55 = (uint64_t *)(a2 + v53);
  uint64_t v56 = *(void *)(a2 + v53 + 24);
  if (*(void *)(a1 + v53 + 24))
  {
    if (v56)
    {
      sub_10000E558((uint64_t *)v54, v55);
    }
    else
    {
      sub_1002B5B30(v54);
      uint64_t v57 = v55[4];
      long long v58 = *((_OWORD *)v55 + 1);
      *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 16) = v58;
      *(void *)(v54 + 32) = v57;
    }
  }
  else if (v56)
  {
    *(void *)(v54 + 24) = v56;
    *(void *)(v54 + 32) = v55[4];
    (**(void (***)(uint64_t, long long *))(v56 - 8))(v54, (long long *)v55);
  }
  else
  {
    long long v59 = *(_OWORD *)v55;
    long long v60 = *((_OWORD *)v55 + 1);
    *(void *)(v54 + 32) = v55[4];
    *(_OWORD *)uint64_t v54 = v59;
    *(_OWORD *)(v54 + 16) = v60;
  }
  *(void *)(v54 + 40) = v55[5];
  swift_retain();
  swift_release();
  uint64_t v61 = a3[18];
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  *(void *)(a1 + v61) = *(void *)(a2 + v61);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v62 + 8) = *(void *)(v63 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1002B5B30(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002B5B84(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v16 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v21(a1 + a3[12], a2 + a3[12], v20);
  uint64_t v22 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  uint64_t v23 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  uint64_t v24 = a3[17];
  uint64_t v25 = a3[18];
  uint64_t v26 = (_OWORD *)(a1 + v24);
  uint64_t v27 = (_OWORD *)(a2 + v24);
  long long v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  v26[2] = v27[2];
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  return a1;
}

uint64_t sub_1002B5DF8(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_1002B52E0(v7, v8, v9, (uint64_t (*)(void))sub_10000F478);
  char v10 = *(unsigned char *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v10;
  sub_1002B52E0(v11, v12, v13, (uint64_t (*)(void))sub_1002B48C8);
  if (a1 != a2)
  {
    uint64_t v14 = a3[6];
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (const void *)(a2 + v14);
    sub_10000FBD8(a1 + v14, &qword_100522BF0);
    uint64_t v17 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    uint64_t v19 = a3[7];
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    sub_10000FBD8(a1 + v19, &qword_10051BB48);
    uint64_t v22 = sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
  }
  uint64_t v24 = a3[8];
  uint64_t v25 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);

  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)(a1 + v26);
  long long v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *uint64_t v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 40);
  v40(v37, v38, v39);
  v40(a1 + a3[12], a2 + a3[12], v39);
  uint64_t v41 = a3[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  *(unsigned char *)uint64_t v47 = *(unsigned char *)v48;
  *(void *)(v47 + 8) = *(void *)(v48 + 8);
  swift_release();
  uint64_t v49 = a3[15];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  *(unsigned char *)uint64_t v50 = *(unsigned char *)v51;
  *(void *)(v50 + 8) = *(void *)(v51 + 8);
  swift_release();
  uint64_t v52 = a3[16];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  *(unsigned char *)uint64_t v53 = *(unsigned char *)v54;
  *(void *)(v53 + 8) = *(void *)(v54 + 8);
  swift_release();
  uint64_t v55 = a3[17];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  if (*(void *)(a1 + v55 + 24))
  {
    if (*(void *)(v57 + 24)) {
      _s6Tamale17AnyLocalizedErrorVwxx_0(v56);
    }
    else {
      sub_1002B5B30(v56);
    }
  }
  long long v58 = *(_OWORD *)(v57 + 16);
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *(_OWORD *)(v56 + 16) = v58;
  uint64_t v59 = *(void *)(v57 + 40);
  *(void *)(v56 + 32) = *(void *)(v57 + 32);
  *(void *)(v56 + 40) = v59;
  swift_release();
  uint64_t v60 = a3[18];
  uint64_t v61 = a1 + v60;
  uint64_t v62 = (void *)(a2 + v60);
  *(void *)(a1 + v60) = *v62;
  swift_bridgeObjectRelease();
  *(void *)(v61 + 8) = v62[1];
  swift_release();
  return a1;
}

uint64_t sub_1002B61B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B61CC);
}

uint64_t sub_1002B61CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_10000F214(&qword_10051BB50);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v13 = *(void *)(a1 + a3[8]);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[11];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_1002B6350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B6364);
}

uint64_t sub_1002B6364(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000F214(&qword_100522CF0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_5:
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  uint64_t result = sub_10000F214(&qword_10051BB50);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[8]) = (a2 - 1);
  }
  else
  {
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a4[11];
    return v15(v17, a2, a2, v16);
  }
  return result;
}

void sub_1002B64E8()
{
  sub_1002B666C(319, (unint64_t *)&qword_100522D60, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v0 <= 0x3F)
  {
    sub_1002B666C(319, (unint64_t *)&qword_10051BBC0, (void (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1002B666C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1002B66C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002B66DC@<X0>(char *a1@<X8>)
{
  long long v28 = a1;
  uint64_t v1 = type metadata accessor for LabelStyleConfiguration.Title();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for LabelStyleConfiguration.Icon();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = v27;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - v13;
  LabelStyleConfiguration.icon.getter();
  LabelStyleConfiguration.title.getter();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v11, v14, v8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v16(v4, v7, v1);
  uint64_t v17 = v28;
  v15(v28, v11, v8);
  uint64_t v18 = sub_10000F214(&qword_10051EE28);
  uint64_t v19 = v25;
  v16(&v17[*(int *)(v18 + 48)], v4, v25);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v21 = v7;
  uint64_t v22 = v19;
  v20(v21, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v23(v14, v8);
  v20(v4, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v11, v8);
}

uint64_t sub_1002B6960@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)(a1 + 8) = 0x4014000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v2 = sub_10000F214(&qword_10051EE20);
  return sub_1002B66DC((char *)(a1 + *(int *)(v2 + 44)));
}

uint64_t sub_1002B69B0(char a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (char *)(v2 + *(int *)(type metadata accessor for EventResultView() + 64));
  char v5 = *v4;
  uint64_t v6 = *((void *)v4 + 1);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  LOBYTE(v12) = v5;
  uint64_t v13 = v6;
  uint64_t result = State.wrappedValue.getter();
  if (a1 == 1)
  {
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t v9 = *(void *)(v2 + 32);
    char v10 = *(unsigned char *)(v2 + 40);
    sub_1002B5074(v8, v9, v10, (uint64_t (*)(void))sub_10014F7F8);
    uint64_t v11 = (void (*)(uint64_t *))sub_10027D9D8(v8, v9, v10);
    uint64_t result = sub_1002B52E0(v8, v9, v10, (uint64_t (*)(void))sub_1002B48C8);
    if (v11)
    {
      uint64_t v12 = 4;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 3;
      v11(&v12);
      return sub_10000F478((uint64_t)v11);
    }
  }
  return result;
}

uint64_t sub_1002B6AEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v46 = a1;
  uint64_t v3 = type metadata accessor for EventResultView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = v3 - 8;
  uint64_t v49 = v3 - 8;
  __chkstk_darwin(v3 - 8);
  uint64_t v7 = sub_10000F214(&qword_1005273B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005273B8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000F214(&qword_1005273C0);
  __chkstk_darwin(v48);
  uint64_t v47 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_1005273C8);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v44 = v15;
  uint64_t v45 = v16;
  __chkstk_darwin(v15);
  uint64_t v50 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = static HorizontalAlignment.center.getter();
  *((void *)v9 + 1) = 0x4030000000000000;
  v9[16] = 0;
  uint64_t v18 = sub_10000F214(&qword_1005273D0);
  sub_1002B7134(v1, (uint64_t)&v9[*(int *)(v18 + 44)]);
  uint64_t v19 = (uint64_t *)(v1 + *(int *)(v6 + 80));
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  v56[0] = v21;
  v56[1] = v20;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.getter();
  uint64_t v22 = v52;
  sub_10000FB74((uint64_t)v9, (uint64_t)v13, &qword_1005273B0);
  uint64_t v23 = &v13[*(int *)(v11 + 44)];
  *(void *)uint64_t v23 = v22;
  v23[8] = 0;
  sub_10000FBD8((uint64_t)v9, &qword_1005273B0);
  uint64_t v24 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002BEE74(v2, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v25 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v26 = swift_allocObject();
  sub_1002BDC04((uint64_t)v24, v26 + v25);
  uint64_t v27 = v47;
  sub_10000FB74((uint64_t)v13, v47, &qword_1005273B8);
  long long v28 = (uint64_t (**)())(v27 + *(int *)(v48 + 36));
  *long long v28 = sub_1002BDC68;
  v28[1] = (uint64_t (*)())v26;
  v28[2] = 0;
  v28[3] = 0;
  sub_10000FBD8((uint64_t)v13, &qword_1005273B8);
  uint64_t v29 = v2 + *(int *)(v49 + 64);
  char v30 = *(unsigned char *)v29;
  uint64_t v31 = *(void *)(v29 + 8);
  LOBYTE(v52) = v30;
  uint64_t v53 = v31;
  sub_10000F214(&qword_100522EA0);
  State.projectedValue.getter();
  sub_1002BEE74(v2, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for EventResultView);
  uint64_t v32 = swift_allocObject();
  sub_1002BDC04((uint64_t)v24, v32 + v25);
  uint64_t v43 = sub_10000F214(&qword_1005273D8);
  uint64_t v33 = sub_1002BE0B4(&qword_1005273E0, &qword_1005273C0, (void (*)(void))sub_1002BE014);
  uint64_t v34 = sub_1002BE0B4(&qword_1005273F8, &qword_1005273D8, (void (*)(void))sub_10019C6AC);
  uint64_t v35 = v47;
  uint64_t v36 = v48;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10000FBD8(v35, &qword_1005273C0);
  uint64_t v37 = v2 + *(int *)(v49 + 68);
  char v38 = *(unsigned char *)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  LOBYTE(v52) = v38;
  uint64_t v53 = v39;
  State.projectedValue.getter();
  sub_10000F214(&qword_100527400);
  State.wrappedValue.getter();
  uint64_t v51 = v2;
  sub_10000F214(&qword_10051EB90);
  uint64_t v52 = v36;
  uint64_t v53 = v43;
  uint64_t v54 = v33;
  uint64_t v55 = v34;
  swift_getOpaqueTypeConformance2();
  sub_1002BE138();
  sub_100013AA8(&qword_100521430, &qword_10051EB90);
  uint64_t v40 = v44;
  uint64_t v41 = v50;
  View.alert<A, B, C>(isPresented:error:actions:message:)();
  swift_release();
  swift_release();
  sub_10000FBD8((uint64_t)v56, &qword_1005272E0);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v41, v40);
}

uint64_t sub_1002B7134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = sub_10000F214(&qword_100527420);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_100527428);
  __chkstk_darwin(v47);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100527430);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100527438);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v50 = (uint64_t)&v44 - v15;
  uint64_t v16 = sub_10000F214(&qword_100527440);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v44 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v44 - v23;
  *(void *)uint64_t v21 = static HorizontalAlignment.leading.getter();
  *((void *)v21 + 1) = 0x4030000000000000;
  v21[16] = 0;
  uint64_t v25 = sub_10000F214(&qword_100527448);
  sub_1002B75D0(a1, (uint64_t)&v21[*(int *)(v25 + 44)]);
  sub_10000FC34((uint64_t)v21, (uint64_t)v24, &qword_100527440);
  uint64_t v26 = a1 + *(int *)(type metadata accessor for EventResultView() + 64);
  char v27 = *(unsigned char *)v26;
  uint64_t v28 = *(void *)(v26 + 8);
  LOBYTE(v51) = v27;
  uint64_t v52 = v28;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  uint64_t v29 = 1;
  if (v53 == 1)
  {
    *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
    *((void *)v5 + 1) = 0;
    v5[16] = 1;
    uint64_t v30 = sub_10000F214(&qword_100527458);
    sub_1002BBE38(a1, (uint64_t)&v5[*(int *)(v30 + 44)]);
    char v31 = static Edge.Set.top.getter();
    uint64_t v46 = v18;
    sub_10000FB74((uint64_t)v5, (uint64_t)v7, &qword_100527420);
    uint64_t v32 = &v7[*(int *)(v47 + 36)];
    *uint64_t v32 = v31;
    *(_OWORD *)(v32 + 8) = 0u;
    *(_OWORD *)(v32 + 24) = 0u;
    v32[40] = 1;
    sub_10000FBD8((uint64_t)v5, &qword_100527420);
    uint64_t v45 = static Alignment.center.getter();
    uint64_t v47 = v9;
    uint64_t v34 = v33;
    sub_1002BC36C((uint64_t)&v51);
    uint64_t v35 = v51;
    char v36 = v52;
    char v37 = BYTE1(v52);
    uint64_t v38 = v48;
    sub_10000FB74((uint64_t)v7, v48, &qword_100527428);
    uint64_t v39 = v38 + *(int *)(v8 + 36);
    *(void *)uint64_t v39 = v35;
    *(unsigned char *)(v39 + 8) = v36;
    *(unsigned char *)(v39 + 9) = v37;
    uint64_t v18 = v46;
    *(void *)(v39 + 16) = v45;
    *(void *)(v39 + 24) = v34;
    uint64_t v9 = v47;
    sub_10000FBD8((uint64_t)v7, &qword_100527428);
    sub_10000FC34(v38, v50, &qword_100527430);
    uint64_t v29 = 0;
  }
  uint64_t v40 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v50, v29, 1, v8);
  sub_10000FB74((uint64_t)v24, (uint64_t)v18, &qword_100527440);
  sub_10000FB74(v40, (uint64_t)v13, &qword_100527438);
  uint64_t v41 = v49;
  sub_10000FB74((uint64_t)v18, v49, &qword_100527440);
  uint64_t v42 = sub_10000F214(&qword_100527450);
  sub_10000FB74((uint64_t)v13, v41 + *(int *)(v42 + 48), &qword_100527438);
  sub_10000FBD8(v40, &qword_100527438);
  sub_10000FBD8((uint64_t)v24, &qword_100527440);
  sub_10000FBD8((uint64_t)v13, &qword_100527438);
  return sub_10000FBD8((uint64_t)v18, &qword_100527440);
}

uint64_t sub_1002B75D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v186 = a2;
  uint64_t v189 = type metadata accessor for RoundedCornerStyle();
  uint64_t v184 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  uint64_t v183 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v182);
  uint64_t v185 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for ColorScheme();
  uint64_t v181 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  uint64_t v180 = (uint64_t)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Capsule();
  __chkstk_darwin(v6 - 8);
  v171 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = sub_10000F214(&qword_1005226A8);
  __chkstk_darwin(v167);
  uint64_t v174 = (uint64_t)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = sub_10000F214(&qword_1005274B0);
  __chkstk_darwin(v170);
  uint64_t v173 = (uint64_t)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005274B8);
  __chkstk_darwin(v10 - 8);
  uint64_t v163 = (uint64_t *)((char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v162 = sub_10000F214(&qword_1005274C0);
  __chkstk_darwin(v162);
  uint64_t v166 = (uint64_t)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_10000F214(&qword_1005274C8);
  __chkstk_darwin(v161);
  long long v169 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000F214(&qword_1005274D0);
  __chkstk_darwin(v165);
  uint64_t v172 = (uint64_t)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000F214(&qword_1005274D8);
  __chkstk_darwin(v168);
  uint64_t v175 = (uint64_t)&v148 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = sub_10000F214(&qword_1005274E0);
  __chkstk_darwin(v177);
  uint64_t v176 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_1005274E8);
  __chkstk_darwin(v17 - 8);
  long long v179 = (char *)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v178 = (uint64_t)&v148 - v20;
  uint64_t v151 = sub_10000F214(&qword_1005274F0);
  __chkstk_darwin(v151);
  uint64_t v22 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000F214(&qword_1005274F8);
  uint64_t v153 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v152 = (char *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_10000F214(&qword_100527500);
  __chkstk_darwin(v160);
  v150 = (char *)&v148 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v154 = (uint64_t)&v148 - v26;
  uint64_t v158 = sub_10000F214(&qword_100527508);
  __chkstk_darwin(v158);
  uint64_t v159 = (uint64_t)&v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10000F214(&qword_100527510);
  __chkstk_darwin(v148);
  uint64_t v29 = (char *)&v148 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000F214(&qword_100527518);
  uint64_t v30 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v32 = (char *)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000F214(&qword_100527520);
  __chkstk_darwin(v156);
  uint64_t v34 = (char *)&v148 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  char v37 = (char *)&v148 - v36;
  uint64_t v38 = type metadata accessor for ContentSizeCategory();
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v148 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_100527528);
  __chkstk_darwin(v42 - 8);
  uint64_t v164 = (uint64_t)&v148 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v187 = (uint64_t)&v148 - v45;
  uint64_t v157 = type metadata accessor for EventResultView();
  uint64_t v190 = a1;
  sub_10027CDC8((uint64_t)v41);
  LOBYTE(a1) = ContentSizeCategory.isAccessibilityCategory.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  if (a1)
  {
    *(void *)uint64_t v29 = static HorizontalAlignment.leading.getter();
    *((void *)v29 + 1) = 0;
    v29[16] = 1;
    uint64_t v46 = sub_10000F214(&qword_1005275C0);
    sub_1002B8864(v190, (uint64_t)&v29[*(int *)(v46 + 44)]);
    sub_100013AA8(&qword_100527550, &qword_100527510);
    sub_1002BEC40();
    View.buttonStyle<A>(_:)();
    sub_10000FBD8((uint64_t)v29, &qword_100527510);
    char v47 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v56 = v149;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v34, v32, v149);
    uint64_t v57 = &v34[*(int *)(v156 + 36)];
    *uint64_t v57 = v47;
    *((void *)v57 + 1) = v49;
    *((void *)v57 + 2) = v51;
    *((void *)v57 + 3) = v53;
    *((void *)v57 + 4) = v55;
    v57[40] = 0;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v56);
    long long v58 = &qword_100527520;
    sub_10000FC34((uint64_t)v34, (uint64_t)v37, &qword_100527520);
    sub_10000FB74((uint64_t)v37, v159, &qword_100527520);
    swift_storeEnumTagMultiPayload();
    sub_1002BEC94();
    sub_1002BED84();
    _ConditionalContent<>.init(storage:)();
    uint64_t v59 = (uint64_t)v37;
  }
  else
  {
    *(void *)uint64_t v22 = static VerticalAlignment.firstTextBaseline.getter();
    *((void *)v22 + 1) = 0;
    v22[16] = 1;
    uint64_t v60 = sub_10000F214(&qword_100527530);
    sub_1002B931C(v190, (uint64_t)&v22[*(int *)(v60 + 44)]);
    sub_100013AA8(&qword_100527538, &qword_1005274F0);
    sub_1002BEC40();
    uint64_t v61 = v152;
    View.buttonStyle<A>(_:)();
    sub_10000FBD8((uint64_t)v22, &qword_1005274F0);
    char v62 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    uint64_t v71 = v153;
    uint64_t v72 = v150;
    uint64_t v73 = v155;
    (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v150, v61, v155);
    uint64_t v74 = &v72[*(int *)(v160 + 36)];
    *uint64_t v74 = v62;
    *((void *)v74 + 1) = v64;
    *((void *)v74 + 2) = v66;
    *((void *)v74 + 3) = v68;
    *((void *)v74 + 4) = v70;
    v74[40] = 0;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v61, v73);
    long long v58 = &qword_100527500;
    uint64_t v75 = (uint64_t)v72;
    uint64_t v76 = v154;
    sub_10000FC34(v75, v154, &qword_100527500);
    sub_10000FB74(v76, v159, &qword_100527500);
    swift_storeEnumTagMultiPayload();
    sub_1002BEC94();
    sub_1002BED84();
    _ConditionalContent<>.init(storage:)();
    uint64_t v59 = v76;
  }
  sub_10000FBD8(v59, v58);
  uint64_t v77 = static HorizontalAlignment.leading.getter();
  uint64_t v78 = (uint64_t)v163;
  *uint64_t v163 = v77;
  *(void *)(v78 + 8) = 0;
  *(unsigned char *)(v78 + 16) = 1;
  uint64_t v79 = sub_10000F214(&qword_100527560);
  uint64_t v80 = v190;
  sub_1002BA014(v190, v78 + *(int *)(v79 + 44));
  char v81 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v87 = v86;
  uint64_t v89 = v88;
  uint64_t v90 = v166;
  sub_10000FB74(v78, v166, &qword_1005274B8);
  uint64_t v91 = v90 + *(int *)(v162 + 36);
  *(unsigned char *)uint64_t v91 = v81;
  *(void *)(v91 + 8) = v83;
  *(void *)(v91 + 16) = v85;
  *(void *)(v91 + 24) = v87;
  *(void *)(v91 + 32) = v89;
  *(unsigned char *)(v91 + 40) = 0;
  sub_10000FBD8(v78, &qword_1005274B8);
  uint64_t v160 = static Alignment.leading.getter();
  uint64_t v159 = v92;
  uint64_t v93 = (uint64_t)v169;
  uint64_t v94 = (uint64_t)&v169[*(int *)(v161 + 36)];
  LODWORD(v163) = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v95 = v184;
  uint64_t v162 = *(void *)(v184 + 104);
  uint64_t v96 = (uint64_t)v171;
  ((void (*)(char *))v162)(v171);
  uint64_t v97 = v80;
  id v98 = sub_1002BAEF8();
  uint64_t v161 = v97 + *(int *)(v157 + 24);
  uint64_t v99 = v180;
  sub_10027CA80(v180);
  uint64_t v100 = sub_10039DBB0(v98, v99);

  uint64_t v181 = *(void *)(v181 + 8);
  ((void (*)(uint64_t, uint64_t))v181)(v99, v188);
  uint64_t v101 = v174;
  sub_1002BEE74(v96, v174, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v102 = v167;
  *(void *)(v101 + *(int *)(v167 + 52)) = v100;
  *(_WORD *)(v101 + *(int *)(v102 + 56)) = 256;
  sub_1002BEEDC(v96, (uint64_t (*)(void))&type metadata accessor for Capsule);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v103 = v173;
  sub_10000FB74(v101, v173, &qword_1005226A8);
  uint64_t v104 = (_OWORD *)(v103 + *(int *)(v170 + 36));
  long long v105 = v192;
  *uint64_t v104 = v191;
  v104[1] = v105;
  v104[2] = v193;
  sub_10000FBD8(v101, &qword_1005226A8);
  sub_10000FB74(v103, v94, &qword_1005274B0);
  sub_10000FBD8(v103, &qword_1005274B0);
  uint64_t v106 = (uint64_t *)(v94 + *(int *)(sub_10000F214(&qword_100527568) + 36));
  uint64_t v107 = v159;
  *uint64_t v106 = v160;
  v106[1] = v107;
  sub_10000FC34(v90, v93, &qword_1005274C0);
  LOBYTE(v100) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v109 = v108;
  uint64_t v111 = v110;
  uint64_t v113 = v112;
  uint64_t v115 = v114;
  uint64_t v116 = v172;
  sub_10000FB74(v93, v172, &qword_1005274C8);
  uint64_t v117 = v116 + *(int *)(v165 + 36);
  *(unsigned char *)uint64_t v117 = v100;
  *(void *)(v117 + 8) = v109;
  *(void *)(v117 + 16) = v111;
  *(void *)(v117 + 24) = v113;
  *(void *)(v117 + 32) = v115;
  *(unsigned char *)(v117 + 40) = 0;
  sub_10000FBD8(v93, &qword_1005274C8);
  LOBYTE(v100) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v119 = v118;
  uint64_t v121 = v120;
  uint64_t v123 = v122;
  uint64_t v125 = v124;
  uint64_t v126 = v175;
  sub_10000FB74(v116, v175, &qword_1005274D0);
  uint64_t v127 = v126 + *(int *)(v168 + 36);
  *(unsigned char *)uint64_t v127 = v100;
  *(void *)(v127 + 8) = v119;
  *(void *)(v127 + 16) = v121;
  *(void *)(v127 + 24) = v123;
  *(void *)(v127 + 32) = v125;
  *(unsigned char *)(v127 + 40) = 0;
  sub_10000FBD8(v116, &qword_1005274D0);
  id v128 = sub_1002BAEF8();
  sub_10027CA80(v99);
  uint64_t v129 = sub_10039CFEC(v128, v99);

  ((void (*)(uint64_t, uint64_t))v181)(v99, v188);
  v130 = v183;
  uint64_t v131 = v189;
  ((void (*)(char *, void, uint64_t))v162)(v183, v163, v189);
  uint64_t v132 = v185;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(&v185[*(int *)(v182 + 20)], v130, v131);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v132 = _Q0;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v130, v131);
  uint64_t v138 = (uint64_t)v176;
  long long v139 = (uint64_t *)&v176[*(int *)(v177 + 36)];
  uint64_t v140 = sub_10000F214(&qword_100527570);
  sub_1002BEE74((uint64_t)v132, (uint64_t)v139 + *(int *)(v140 + 52), (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *long long v139 = v129;
  *(_WORD *)((char *)v139 + *(int *)(v140 + 56)) = 256;
  sub_10000FB74(v126, v138, &qword_1005274D8);
  sub_1002BEEDC((uint64_t)v132, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000FBD8(v126, &qword_1005274D8);
  sub_1002BEF3C();
  uint64_t v141 = (uint64_t)v179;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v138, &qword_1005274E0);
  uint64_t v142 = v178;
  sub_10000FC34(v141, v178, &qword_1005274E8);
  uint64_t v143 = v187;
  uint64_t v144 = v164;
  sub_10000FB74(v187, v164, &qword_100527528);
  sub_10000FB74(v142, v141, &qword_1005274E8);
  uint64_t v145 = v186;
  sub_10000FB74(v144, v186, &qword_100527528);
  uint64_t v146 = sub_10000F214(&qword_1005275B8);
  sub_10000FB74(v141, v145 + *(int *)(v146 + 48), &qword_1005274E8);
  sub_10000FBD8(v142, &qword_1005274E8);
  sub_10000FBD8(v143, &qword_100527528);
  sub_10000FBD8(v141, &qword_1005274E8);
  return sub_10000FBD8(v144, &qword_100527528);
}

uint64_t sub_1002B8864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v97 = a1;
  uint64_t v2 = type metadata accessor for EventResultView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v83 = v2 - 8;
  uint64_t v90 = v3;
  uint64_t v89 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v88 = (uint64_t)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051C120);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v94 = v5;
  uint64_t v95 = v6;
  __chkstk_darwin(v5);
  uint64_t v91 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_1005275C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v92 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v93 = (uint64_t)v74 - v11;
  uint64_t v12 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  uint64_t v85 = *(void *)(v12 - 8);
  uint64_t v86 = v12;
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v79 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v76 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  v74[0] = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v17 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Date.FormatStyle();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v74 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v74 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v74 - v29;
  __chkstk_darwin(v31);
  v74[1] = (char *)v74 - v32;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)v74 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000F214((uint64_t *)&unk_100522E10);
  __chkstk_darwin(v37 - 8);
  uint64_t v87 = (uint64_t)v74 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v40 = __chkstk_darwin(v39);
  uint64_t v80 = (char *)v74 - v41;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v34 + 16))(v36, v97 + *(int *)(v83 + 52), v33, v40);
  static FormatStyle<>.dateTime.getter();
  static Date.FormatStyle.Symbol.Weekday.wide.getter();
  Date.FormatStyle.weekday(_:)();
  (*(void (**)(char *, uint64_t))(v74[0] + 8))(v17, v75);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v19 + 8);
  v42(v21, v18);
  uint64_t v43 = v76;
  static Date.FormatStyle.Symbol.Day.defaultDigits.getter();
  Date.FormatStyle.day(_:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v78);
  v42(v24, v18);
  uint64_t v44 = v79;
  static Date.FormatStyle.Symbol.Month.wide.getter();
  Date.FormatStyle.month(_:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v44, v82);
  v42(v27, v18);
  uint64_t v45 = v84;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
  Date.FormatStyle.year(_:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v45, v86);
  v42(v30, v18);
  sub_1002BF25C(&qword_1005275D0, (void (*)(uint64_t))&type metadata accessor for Date.FormatStyle);
  sub_1002BF25C(&qword_10051DAF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v46 = Text.init<A>(_:format:)();
  uint64_t v48 = v47;
  LOBYTE(v19) = v49 & 1;
  static Font.headline.getter();
  uint64_t v50 = Text.font(_:)();
  uint64_t v52 = v51;
  LOBYTE(v18) = v53;
  swift_release();
  LOBYTE(v45) = v18 & 1;
  sub_100012FAC(v46, v48, v19);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v54 = Text.fontWeight(_:)();
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  LOBYTE(v18) = v59 & 1;
  sub_100012FAC(v50, v52, (char)v45);
  swift_bridgeObjectRelease();
  uint64_t v98 = v54;
  uint64_t v99 = v56;
  char v100 = v18;
  uint64_t v101 = v58;
  uint64_t v60 = (uint64_t)v80;
  View.accessibilityIdentifier(_:)();
  sub_100012FAC(v54, v56, v18);
  swift_bridgeObjectRelease();
  uint64_t v61 = v88;
  sub_1002BEE74(v97, v88, (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v62 = (*(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
  uint64_t v63 = swift_allocObject();
  sub_1002BDC04(v61, v63 + v62);
  sub_10000F214((uint64_t *)&unk_10051E360);
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  uint64_t v64 = v91;
  Button.init(action:label:)();
  sub_100013AA8(&qword_10051E300, &qword_10051C120);
  uint64_t v65 = v92;
  uint64_t v66 = v94;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v64, v66);
  uint64_t v67 = (uint64_t)v65;
  uint64_t v68 = (uint64_t)v65;
  uint64_t v69 = v93;
  sub_10000FC34(v68, v93, &qword_1005275C8);
  uint64_t v70 = v87;
  sub_10000FB74(v60, v87, (uint64_t *)&unk_100522E10);
  sub_10000FB74(v69, v67, &qword_1005275C8);
  uint64_t v71 = v96;
  sub_10000FB74(v70, v96, (uint64_t *)&unk_100522E10);
  uint64_t v72 = sub_10000F214(&qword_1005275D8);
  sub_10000FB74(v67, v71 + *(int *)(v72 + 48), &qword_1005275C8);
  sub_10000FBD8(v69, &qword_1005275C8);
  sub_10000FBD8(v60, (uint64_t *)&unk_100522E10);
  sub_10000FBD8(v67, &qword_1005275C8);
  return sub_10000FBD8(v70, (uint64_t *)&unk_100522E10);
}

uint64_t sub_1002B931C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = a2;
  uint64_t v110 = a1;
  uint64_t v2 = type metadata accessor for Material();
  uint64_t v107 = *(void *)(v2 - 8);
  uint64_t v108 = v2;
  __chkstk_darwin(v2);
  uint64_t v106 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EventResultView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v92 = v4 - 8;
  uint64_t v98 = v5;
  uint64_t v97 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v96 = (uint64_t)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051C120);
  uint64_t v104 = *(void *)(v7 - 8);
  uint64_t v105 = v7;
  __chkstk_darwin(v7);
  char v100 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000F214(&qword_1005276B8);
  __chkstk_darwin(v101);
  uint64_t v99 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005276C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v102 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v103 = (uint64_t)&v80 - v13;
  uint64_t v94 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v91 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v87 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v84 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Date.FormatStyle();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v80 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v80 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v80 - v30;
  __chkstk_darwin(v32);
  uint64_t v82 = (char *)&v80 - v33;
  uint64_t v34 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v80 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000F214((uint64_t *)&unk_100522E10);
  __chkstk_darwin(v38 - 8);
  uint64_t v95 = (uint64_t)&v80 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v41 = __chkstk_darwin(v40);
  uint64_t v88 = (char *)&v80 - v42;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v35 + 16))(v37, v110 + *(int *)(v92 + 52), v34, v41);
  static FormatStyle<>.dateTime.getter();
  static Date.FormatStyle.Symbol.Weekday.wide.getter();
  Date.FormatStyle.weekday(_:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v18, v83);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v20 + 8);
  v43(v22, v19);
  uint64_t v44 = v84;
  static Date.FormatStyle.Symbol.Day.defaultDigits.getter();
  Date.FormatStyle.day(_:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v44, v86);
  v43(v25, v19);
  uint64_t v45 = v87;
  static Date.FormatStyle.Symbol.Month.wide.getter();
  Date.FormatStyle.month(_:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v90);
  v43(v28, v19);
  uint64_t v46 = v91;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
  Date.FormatStyle.year(_:)();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v46, v94);
  v43(v31, v19);
  sub_1002BF25C(&qword_1005275D0, (void (*)(uint64_t))&type metadata accessor for Date.FormatStyle);
  sub_1002BF25C(&qword_10051DAF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v47 = Text.init<A>(_:format:)();
  uint64_t v49 = v48;
  LOBYTE(v46) = v50 & 1;
  static Font.headline.getter();
  uint64_t v51 = Text.font(_:)();
  uint64_t v53 = v52;
  LOBYTE(v34) = v54;
  swift_release();
  LOBYTE(v44) = v34 & 1;
  sub_100012FAC(v47, v49, (char)v46);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v55 = Text.fontWeight(_:)();
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  LOBYTE(v34) = v60 & 1;
  sub_100012FAC(v51, v53, (char)v44);
  swift_bridgeObjectRelease();
  uint64_t v111 = v55;
  uint64_t v112 = v57;
  char v113 = v34;
  uint64_t v114 = v59;
  uint64_t v61 = (uint64_t)v88;
  View.accessibilityIdentifier(_:)();
  sub_100012FAC(v55, v57, v34);
  swift_bridgeObjectRelease();
  uint64_t v62 = v96;
  sub_1002BEE74(v110, v96, (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v63 = (*(unsigned __int8 *)(v98 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
  uint64_t v64 = swift_allocObject();
  sub_1002BDC04(v62, v64 + v63);
  sub_10000F214((uint64_t *)&unk_10051E360);
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  uint64_t v65 = v100;
  Button.init(action:label:)();
  uint64_t v66 = v106;
  static Material.thin.getter();
  uint64_t v67 = (uint64_t)v99;
  uint64_t v69 = v107;
  uint64_t v68 = v108;
  (*(void (**)(char *, char *, uint64_t))(v107 + 16))(&v99[*(int *)(v101 + 36)], v66, v108);
  uint64_t v71 = v104;
  uint64_t v70 = v105;
  (*(void (**)(uint64_t, char *, uint64_t))(v104 + 16))(v67, v65, v105);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v68);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v65, v70);
  sub_1002BF578();
  uint64_t v72 = (uint64_t)v102;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v67, &qword_1005276B8);
  uint64_t v73 = v103;
  sub_10000FC34(v72, v103, &qword_1005276C0);
  uint64_t v74 = v95;
  sub_10000FB74(v61, v95, (uint64_t *)&unk_100522E10);
  uint64_t v75 = v72;
  sub_10000FB74(v73, v72, &qword_1005276C0);
  uint64_t v76 = v109;
  sub_10000FB74(v74, v109, (uint64_t *)&unk_100522E10);
  uint64_t v77 = sub_10000F214(&qword_1005276E0);
  uint64_t v78 = v76 + *(int *)(v77 + 48);
  *(void *)uint64_t v78 = 0x4020000000000000;
  *(unsigned char *)(v78 + 8) = 0;
  sub_10000FB74(v75, v76 + *(int *)(v77 + 64), &qword_1005276C0);
  sub_10000FBD8(v73, &qword_1005276C0);
  sub_10000FBD8(v61, (uint64_t *)&unk_100522E10);
  sub_10000FBD8(v75, &qword_1005276C0);
  return sub_10000FBD8(v74, (uint64_t *)&unk_100522E10);
}

uint64_t sub_1002B9F48()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1002B9FBC()
{
  LocalizedStringKey.init(stringLiteral:)();

  return Label<>.init(_:systemImage:)();
}

uint64_t sub_1002BA014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = sub_10000F214(&qword_1005275E8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_1005275F0) - 8;
  __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_1005275F8) - 8;
  __chkstk_darwin(v45);
  uint64_t v43 = (uint64_t)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v44 = (uint64_t)v40 - v9;
  uint64_t v47 = type metadata accessor for ColorScheme();
  uint64_t v10 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100527600);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100527608);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v40 - v21;
  *(void *)uint64_t v15 = static VerticalAlignment.firstTextBaseline.getter();
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  uint64_t v23 = sub_10000F214(&qword_100527610);
  sub_1002BA520(a1, (uint64_t)&v15[*(int *)(v23 + 44)]);
  uint64_t v24 = a1;
  id v25 = sub_1002BAEF8();
  v40[0] = a1 + *(int *)(type metadata accessor for EventResultView() + 24);
  sub_10027CA80((uint64_t)v12);
  uint64_t v26 = sub_10039CCC0(v25, (uint64_t)v12);

  uint64_t v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v40[1] = v10 + 8;
  v27(v12, v47);
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_100527600);
  *(void *)&v19[*(int *)(v17 + 44)] = v26;
  sub_10000FBD8((uint64_t)v15, &qword_100527600);
  sub_10000FC34((uint64_t)v19, (uint64_t)v22, &qword_100527608);
  *(void *)uint64_t v5 = static VerticalAlignment.firstTextBaseline.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v28 = sub_10000F214(&qword_100527618);
  sub_1002BB074(v24, (uint64_t)&v5[*(int *)(v28 + 44)]);
  uint64_t v29 = static Font.subheadline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v31 = v41;
  sub_10000FB74((uint64_t)v5, v41, &qword_1005275E8);
  uint64_t v32 = (uint64_t *)(v31 + *(int *)(v42 + 44));
  *uint64_t v32 = KeyPath;
  v32[1] = v29;
  sub_10000FBD8((uint64_t)v5, &qword_1005275E8);
  id v33 = sub_1002BAEF8();
  sub_10027CA80((uint64_t)v12);
  uint64_t v48 = sub_10039D6C8(v33, (uint64_t)v12);
  sub_100080384();
  uint64_t v34 = Color.init<A>(_:)();

  v27(v12, v47);
  uint64_t v35 = v43;
  sub_10000FB74(v31, v43, &qword_1005275F0);
  *(void *)(v35 + *(int *)(v45 + 44)) = v34;
  sub_10000FBD8(v31, &qword_1005275F0);
  uint64_t v36 = v44;
  sub_10000FC34(v35, v44, &qword_1005275F8);
  sub_10000FB74((uint64_t)v22, (uint64_t)v19, &qword_100527608);
  sub_10000FB74(v36, v35, &qword_1005275F8);
  uint64_t v37 = v46;
  sub_10000FB74((uint64_t)v19, v46, &qword_100527608);
  uint64_t v38 = sub_10000F214(&qword_100527620);
  sub_10000FB74(v35, v37 + *(int *)(v38 + 48), &qword_1005275F8);
  sub_10000FBD8(v36, &qword_1005275F8);
  sub_10000FBD8((uint64_t)v22, &qword_100527608);
  sub_10000FBD8(v35, &qword_1005275F8);
  return sub_10000FBD8((uint64_t)v19, &qword_100527608);
}

uint64_t sub_1002BA520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v104 = a2;
  uint64_t v3 = type metadata accessor for Calendar();
  uint64_t v112 = *(void *)(v3 - 8);
  uint64_t v113 = v3;
  __chkstk_darwin(v3);
  uint64_t v111 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_10000F214(&qword_100527698);
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v99 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_1005276A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v103 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v102 = (uint64_t)&v92 - v9;
  uint64_t v115 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v115);
  uint64_t v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000F214(&qword_100522788);
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v106 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_1005276A8);
  __chkstk_darwin(v13 - 8);
  uint64_t v117 = (uint64_t)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v116 = (uint64_t)&v92 - v16;
  uint64_t v105 = type metadata accessor for EventResultView();
  uint64_t v17 = *(int *)(v105 + 36);
  uint64_t v110 = a1;
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = v18[1];
  uint64_t v118 = *v18;
  uint64_t v119 = v19;
  unint64_t v20 = sub_1000317A0();
  swift_bridgeObjectRetain();
  unint64_t v109 = v20;
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  LOBYTE(v20) = v24 & 1;
  static Font.headline.getter();
  uint64_t v25 = Text.font(_:)();
  uint64_t v27 = v26;
  char v29 = v28;
  swift_release();
  sub_100012FAC(v21, v23, v20);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v30 = Text.fontWeight(_:)();
  uint64_t v32 = v31;
  LOBYTE(v23) = v33;
  uint64_t v35 = v34;
  sub_100012FAC(v25, v27, v29 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v118 = v30;
  uint64_t v119 = v32;
  LOBYTE(v120) = v23 & 1;
  uint64_t v121 = v35;
  uint64_t v122 = KeyPath;
  uint64_t v123 = 1;
  LOBYTE(v124) = 0;
  uint64_t v37 = enum case for DynamicTypeSize.accessibility2(_:);
  uint64_t v38 = type metadata accessor for DynamicTypeSize();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 104);
  uint64_t v41 = v39 + 104;
  v40(v11, v37, v38);
  uint64_t v42 = sub_1002BF25C(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t v114 = v11;
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    uint64_t v44 = sub_10000F214(&qword_100518CF0);
    uint64_t v98 = v38;
    unsigned int v97 = v37;
    uint64_t v45 = v44;
    unint64_t v46 = sub_100013734();
    uint64_t v96 = v40;
    unint64_t v47 = v46;
    uint64_t v48 = sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    uint64_t v49 = v106;
    uint64_t v94 = v41;
    uint64_t v50 = (uint64_t)v114;
    uint64_t v95 = v42;
    uint64_t v51 = v115;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8(v50, &qword_10051EF30);
    sub_100012FAC(v118, v119, v120);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v118 = v45;
    uint64_t v119 = v51;
    uint64_t v120 = v47;
    uint64_t v121 = v48;
    uint64_t v93 = v48;
    swift_getOpaqueTypeConformance2();
    uint64_t v52 = v117;
    uint64_t v53 = v108;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v49, v53);
    sub_10000FC34(v52, v116, &qword_1005276A8);
    char v54 = v111;
    static Calendar.autoupdatingCurrent.getter();
    uint64_t v55 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    Class v57 = Calendar._bridgeToObjectiveC()().super.isa;
    id v58 = [v55 timeAttributedTextWithDate:isa calendar:v57];

    id v59 = [v58 string];
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v61;

    (*(void (**)(char *, uint64_t))(v112 + 8))(v54, v113);
    uint64_t v118 = v60;
    uint64_t v119 = v62;
    uint64_t v63 = Text.init<A>(_:)();
    uint64_t v65 = v64;
    char v67 = v66 & 1;
    static Font.subheadline.getter();
    uint64_t v68 = Text.font(_:)();
    uint64_t v70 = v69;
    LOBYTE(v54) = v71;
    uint64_t v73 = v72;
    swift_release();
    sub_100012FAC(v63, v65, v67);
    swift_bridgeObjectRelease();
    LOBYTE(v63) = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v118 = v68;
    uint64_t v119 = v70;
    LOBYTE(v120) = v54 & 1;
    uint64_t v121 = v73;
    LOBYTE(v122) = v63;
    uint64_t v123 = v74;
    uint64_t v124 = v75;
    uint64_t v125 = v76;
    uint64_t v126 = v77;
    char v127 = 0;
    v96((char *)v50, v97, v98);
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if (result)
    {
      uint64_t v78 = sub_10000F214(&qword_10051B958);
      uint64_t v79 = sub_100080F2C((unint64_t *)&qword_10051B950, &qword_10051B958);
      uint64_t v80 = v99;
      uint64_t v82 = (uint64_t)v114;
      uint64_t v81 = v115;
      uint64_t v83 = v93;
      View.dynamicTypeSize<A>(_:)();
      sub_10000FBD8(v82, &qword_10051EF30);
      sub_100012FAC(v118, v119, v120);
      swift_bridgeObjectRelease();
      uint64_t v118 = v78;
      uint64_t v119 = v81;
      uint64_t v120 = v79;
      uint64_t v121 = v83;
      swift_getOpaqueTypeConformance2();
      uint64_t v84 = (uint64_t)v103;
      uint64_t v85 = v101;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v80, v85);
      uint64_t v86 = v102;
      sub_10000FC34(v84, v102, &qword_1005276A0);
      uint64_t v88 = v116;
      uint64_t v87 = v117;
      sub_10000FB74(v116, v117, &qword_1005276A8);
      sub_10000FB74(v86, v84, &qword_1005276A0);
      uint64_t v89 = v104;
      sub_10000FB74(v87, v104, &qword_1005276A8);
      uint64_t v90 = sub_10000F214(&qword_1005276B0);
      uint64_t v91 = v89 + *(int *)(v90 + 48);
      *(void *)uint64_t v91 = 0;
      *(unsigned char *)(v91 + 8) = 1;
      sub_10000FB74(v84, v89 + *(int *)(v90 + 64), &qword_1005276A0);
      sub_10000FBD8(v86, &qword_1005276A0);
      sub_10000FBD8(v88, &qword_1005276A8);
      sub_10000FBD8(v84, &qword_1005276A0);
      return sub_10000FBD8(v87, &qword_1005276A8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1002BAEF8()
{
  uint64_t v1 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(v0 + *(int *)(type metadata accessor for EventResultView() + 32)) defaultCalendarForNewEvents];
  if (v5)
  {
    uint64_t v6 = v5;
    id result = [v5 CGColor];
    if (result)
    {
      uint64_t v8 = result;
      id v9 = [objc_allocWithZone((Class)UIColor) initWithCGColor:result];

      return v9;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1002BF214();
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
    Color.init(_:red:green:blue:opacity:)();
    return (id)UIColor.init(_:)();
  }
  return result;
}

uint64_t sub_1002BB074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v115 = type metadata accessor for Calendar();
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v112 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_10000F214(&qword_100527628);
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v100 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000F214(&qword_100527630);
  __chkstk_darwin(v99);
  uint64_t v101 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000F214(&qword_100527638);
  __chkstk_darwin(v104);
  uint64_t v102 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100527640);
  __chkstk_darwin(v7 - 8);
  uint64_t v107 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v106 = (uint64_t)&v92 - v10;
  uint64_t v116 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v116);
  uint64_t v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214((uint64_t *)&unk_10051E360);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_100527648);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000F214(&qword_100527650);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000F214(&qword_100527658);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000F214(&qword_100527660);
  uint64_t v24 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v93 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_100527668);
  __chkstk_darwin(v26 - 8);
  uint64_t v98 = (uint64_t)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v114 = (uint64_t)&v92 - v29;
  uint64_t v30 = type metadata accessor for EventResultView();
  uint64_t v109 = v30;
  uint64_t v31 = *(int *)(v30 + 40);
  uint64_t v111 = a1;
  uint64_t v32 = (uint64_t *)(a1 + v31);
  unint64_t v33 = *(void *)(a1 + v31 + 8);
  if (!v33) {
    goto LABEL_7;
  }
  uint64_t v34 = *v32;
  uint64_t v35 = HIBYTE(v33) & 0xF;
  if ((v33 & 0x2000000000000000) == 0) {
    uint64_t v35 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (v35)
  {
    __chkstk_darwin(v30);
    *(&v92 - 2) = v37;
    *(&v92 - 1) = v36;
    Label.init(title:icon:)();
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v16, v13);
    uint64_t v39 = &v19[*(int *)(v17 + 36)];
    *(void *)uint64_t v39 = KeyPath;
    *((void *)v39 + 1) = 1;
    v39[16] = 0;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    unint64_t v40 = sub_1002BF444();
    unint64_t v41 = sub_1002BF508();
    View.labelStyle<A>(_:)();
    sub_10000FBD8((uint64_t)v19, &qword_100527648);
    uint64_t v42 = enum case for DynamicTypeSize.accessibility2(_:);
    uint64_t v43 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v12, v42, v43);
    sub_1002BF25C(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v117 = v17;
    uint64_t v118 = &type metadata for EventLabelStyle;
    unint64_t v119 = v40;
    unint64_t v120 = v41;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v46 = sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    uint64_t v47 = v95;
    uint64_t v48 = v21;
    uint64_t v49 = v23;
    uint64_t v50 = v42;
    uint64_t v51 = (ValueMetadata *)v116;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8((uint64_t)v12, &qword_10051EF30);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v48, v47);
    uint64_t v117 = v47;
    uint64_t v118 = v51;
    uint64_t v52 = v50;
    unint64_t v119 = OpaqueTypeConformance2;
    unint64_t v120 = v46;
    swift_getOpaqueTypeConformance2();
    uint64_t v53 = (uint64_t)v93;
    uint64_t v54 = v97;
    View.accessibilityIdentifier(_:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v49, v54);
    uint64_t v55 = v114;
    sub_10000FC34(v53, v114, &qword_100527660);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v55, 0, 1, v110);
  }
  else
  {
LABEL_7:
    uint64_t v55 = v114;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v114, 1, 1, v110);
    uint64_t v52 = enum case for DynamicTypeSize.accessibility2(_:);
  }
  uint64_t v56 = v112;
  static Calendar.autoupdatingCurrent.getter();
  Class v57 = self;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  Class v59 = Calendar._bridgeToObjectiveC()().super.isa;
  id v60 = [v57 timeAttributedTextWithDate:isa calendar:v59];

  id v61 = [v60 string];
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v63;

  (*(void (**)(char *, uint64_t))(v113 + 8))(v56, v115);
  uint64_t v117 = v62;
  uint64_t v118 = v64;
  sub_1000317A0();
  uint64_t v117 = Text.init<A>(_:)();
  uint64_t v118 = v65;
  LOBYTE(v119) = v66 & 1;
  unint64_t v120 = v67;
  uint64_t v68 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 104))(v12, v52, v68);
  sub_1002BF25C(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    uint64_t v69 = v100;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8((uint64_t)v12, &qword_10051EF30);
    sub_100012FAC(v117, (uint64_t)v118, v119);
    swift_bridgeObjectRelease();
    char v70 = static Edge.Set.trailing.getter();
    EdgeInsets.init(_all:)();
    uint64_t v72 = v71;
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    uint64_t v79 = v103;
    uint64_t v80 = (uint64_t)v101;
    uint64_t v81 = v105;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v101, v69, v105);
    uint64_t v82 = v80 + *(int *)(v99 + 36);
    *(unsigned char *)uint64_t v82 = v70;
    *(void *)(v82 + 8) = v72;
    *(void *)(v82 + 16) = v74;
    *(void *)(v82 + 24) = v76;
    *(void *)(v82 + 32) = v78;
    *(unsigned char *)(v82 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v79 + 8))(v69, v81);
    uint64_t v83 = swift_getKeyPath();
    uint64_t v84 = v102;
    sub_10000FB74(v80, v102, &qword_100527630);
    uint64_t v85 = v84 + *(int *)(v104 + 36);
    *(void *)uint64_t v85 = v83;
    *(void *)(v85 + 8) = 1;
    *(unsigned char *)(v85 + 16) = 0;
    sub_10000FBD8(v80, &qword_100527630);
    sub_1002BF2AC();
    uint64_t v86 = (uint64_t)v107;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8(v84, &qword_100527638);
    uint64_t v87 = v106;
    sub_10000FC34(v86, v106, &qword_100527640);
    uint64_t v88 = v98;
    sub_10000FB74(v55, v98, &qword_100527668);
    sub_10000FB74(v87, v86, &qword_100527640);
    uint64_t v89 = v108;
    sub_10000FB74(v88, v108, &qword_100527668);
    uint64_t v90 = sub_10000F214(&qword_100527680);
    uint64_t v91 = v89 + *(int *)(v90 + 48);
    *(void *)uint64_t v91 = 0;
    *(unsigned char *)(v91 + 8) = 1;
    sub_10000FB74(v86, v89 + *(int *)(v90 + 64), &qword_100527640);
    sub_10000FBD8(v87, &qword_100527640);
    sub_10000FBD8(v55, &qword_100527668);
    sub_10000FBD8(v86, &qword_100527640);
    return sub_10000FBD8(v88, &qword_100527668);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002BBD8C@<X0>(uint64_t a1@<X8>)
{
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1002BBDF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Image.init(_internalSystemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_1002BBE38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for EventResultView();
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v22 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = sub_10000F214(&qword_100527470);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_100527478);
  uint64_t v9 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100527480);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002BEE74(a1, (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v15 = (*(unsigned __int8 *)(v22 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v16 = swift_allocObject();
  sub_1002BDC04((uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  sub_10000F214(&qword_100527488);
  sub_1002BEA30();
  Button.init(action:label:)();
  char v25 = 0;
  sub_100013AA8(&qword_100527498, &qword_100527470);
  sub_1002BEAD0();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = static Color.green.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = v23;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v23);
  uint64_t v20 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  uint64_t *v20 = KeyPath;
  v20[1] = v17;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v19);
  sub_1002BEB2C();
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8((uint64_t)v14, &qword_100527480);
}

uint64_t sub_1002BC1F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_10051E360);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  Label<>.init(_:systemImage:)();
  char v6 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  uint64_t v15 = a1 + *(int *)(sub_10000F214(&qword_100527488) + 36);
  *(unsigned char *)uint64_t v15 = v6;
  *(void *)(v15 + 8) = v8;
  *(void *)(v15 + 16) = v10;
  *(void *)(v15 + 24) = v12;
  *(void *)(v15 + 32) = v14;
  *(unsigned char *)(v15 + 40) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1002BC36C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - v7;
  type metadata accessor for EventResultView();
  sub_10027CA80((uint64_t)v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.light(_:), v2);
  char v9 = static ColorScheme.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v10(v8, v2);
  if (v9)
  {
    uint64_t v11 = static Color.white.getter();
    char v12 = static Edge.Set.all.getter();
    uint64_t v18 = v11;
    char v19 = v12;
    char v20 = 0;
  }
  else
  {
    uint64_t v13 = static Color.black.getter();
    char v14 = static Edge.Set.all.getter();
    uint64_t v18 = v13;
    char v19 = v14;
    char v20 = 1;
  }
  sub_10000F214(&qword_100527460);
  sub_100080F2C(&qword_100527468, &qword_100527460);
  uint64_t result = _ConditionalContent<>.init(storage:)();
  char v16 = v22;
  char v17 = v23;
  *(void *)a1 = v21;
  *(unsigned char *)(a1 + 8) = v16;
  *(unsigned char *)(a1 + 9) = v17;
  return result;
}

uint64_t sub_1002BC568(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EventResultView();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ActionBarItem(0);
  uint64_t v11 = (int *)(v10 - 8);
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v33;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v31 = sub_1002BC920();
  uint64_t v32 = a1;
  char v14 = *(void **)(a1 + *(int *)(v3 + 40));
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
  sub_1002BEE74(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v16 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v17 = (v5 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_1002BDC04((uint64_t)v6, v18 + v16);
  *(void *)(v18 + v17) = v14;
  *(void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8)) = v31;
  *(void *)uint64_t v13 = 0x43206F7420646441;
  *((void *)v13 + 1) = 0xEF7261646E656C61;
  *((void *)v13 + 2) = 0xD000000000000013;
  *((void *)v13 + 3) = 0x800000010042A2B0;
  v13[32] = 9;
  *(_OWORD *)(v13 + 40) = xmmword_100449310;
  *((_WORD *)v13 + 28) = 1;
  uint64_t v19 = v11[18];
  v13[v11[17]] = 0;
  char v20 = (uint64_t (**)())&v13[v11[14]];
  uint64_t *v20 = sub_100048CB8;
  v20[1] = 0;
  uint64_t v21 = (uint64_t (**)())&v13[v11[15]];
  char *v21 = sub_1002BE504;
  v21[1] = (uint64_t (*)())v18;
  char v22 = &v13[v11[16]];
  *(void *)char v22 = 0;
  *((void *)v22 + 1) = 0;
  *(void *)&v13[v19] = 0;
  sub_10000FC34((uint64_t)v9, (uint64_t)&v13[v11[13]], (uint64_t *)&unk_100524ED0);
  sub_10000F214(&qword_100525590);
  unint64_t v23 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10043D4F0;
  sub_1002BEE74((uint64_t)v13, v24 + v23, type metadata accessor for ActionBarItem);
  char v25 = (uint64_t *)(v32 + *(int *)(v3 + 80));
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v36 = v27;
  uint64_t v37 = v26;
  uint64_t v35 = v24;
  id v28 = v14;
  sub_10000F214(&qword_100523BE0);
  State.wrappedValue.setter();
  return sub_1002BEEDC((uint64_t)v13, type metadata accessor for ActionBarItem);
}

id sub_1002BC920()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for EventResultView();
  uint64_t v3 = *(void **)(v0 + v2[8]);
  id v4 = [self eventWithEventStore:v3];
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setTitle:v5];

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v4 setStartDate:isa];

  Class v7 = Date._bridgeToObjectiveC()().super.isa;
  [v4 setEndDate:v7];

  id v8 = v4;
  id v9 = [v3 defaultCalendarForNewEvents];
  [v8 setCalendar:v9];

  uint64_t v10 = (uint64_t *)(v1 + v2[10]);
  unint64_t v11 = v10[1];
  if (v11)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v13)
    {
      id v14 = v8;
      NSString v15 = String._bridgeToObjectiveC()();
      [v14 setLocation:v15];
    }
  }
  unint64_t v16 = (uint64_t *)(v1 + v2[13]);
  unint64_t v17 = v16[1];
  if (v17)
  {
    uint64_t v18 = *v16;
    uint64_t v19 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v19 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      id v20 = v8;
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 setNotes:v21];
    }
  }
  return v8;
}

uint64_t sub_1002BCB14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for EventResultView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = a1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_1002BEE74(a1, (uint64_t)&v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for EventResultView);
  type metadata accessor for MainActor();
  id v13 = a2;
  id v14 = a3;
  uint64_t v15 = static MainActor.shared.getter();
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v15;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v13;
  v17[5] = v14;
  sub_1002BDC04((uint64_t)&v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t)v17 + v16);
  sub_100064D5C((uint64_t)v11, (uint64_t)&unk_100527418, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_1002BCD48()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1002BCDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[39] = a5;
  v6[40] = a6;
  v6[38] = a4;
  type metadata accessor for MainActor();
  v6[41] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[42] = v7;
  v6[43] = v8;
  return _swift_task_switch(sub_1002BCE88, v7, v8);
}

uint64_t sub_1002BCE88()
{
  uint64_t v1 = (void *)v0[38];
  v0[2] = v0;
  v0[7] = (char *)v0 + 361;
  v0[3] = sub_1002BCFB0;
  uint64_t v2 = swift_continuation_init();
  v0[25] = _NSConcreteStackBlock;
  v0[26] = 0x40000000;
  v0[27] = sub_1002BD594;
  v0[28] = &unk_1004F2B48;
  v0[29] = v2;
  [v1 requestFullAccessToEventsWithCompletion:v0 + 25];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1002BCFB0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 352) = v2;
  uint64_t v3 = *(void *)(v1 + 344);
  uint64_t v4 = *(void *)(v1 + 336);
  if (v2) {
    NSString v5 = sub_1002BD420;
  }
  else {
    NSString v5 = sub_1002BD10C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1002BD10C()
{
  swift_release();
  if (*(unsigned char *)(v0 + 361) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 304);
    uint64_t v2 = *(void *)(v0 + 312);
    *(void *)(v0 + 296) = 0;
    unsigned int v3 = [v1 saveEvent:v2 span:0 error:v0 + 296];
    uint64_t v4 = *(void **)(v0 + 296);
    if (v3)
    {
      uint64_t v5 = *(void *)(v0 + 320);
      *(void *)(swift_task_alloc() + 16) = v5;
      id v6 = v4;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_release();
      swift_task_dealloc();
      goto LABEL_7;
    }
    NSString v10 = v4;
    id v12 = (id)_convertNSErrorToError(_:)();
  }
  else
  {
    sub_10000F214((uint64_t *)&unk_10051FB50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001BLL;
    *(void *)(inited + 56) = 0x800000010042AD10;
    sub_10031BC4C(inited);
    id v9 = objc_allocWithZone((Class)NSError);
    NSString v10 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [v9 initWithDomain:v10 code:1 userInfo:isa];
  }
  swift_willThrow();
  uint64_t v13 = *(void *)(v0 + 320);
  swift_errorRetain();
  sub_100031F08((uint64_t)v12, (uint64_t *)(v0 + 240));
  uint64_t v14 = type metadata accessor for EventResultView();
  sub_10000FB74(v0 + 240, v0 + 160, &qword_1005272E0);
  sub_10000F214(&qword_100527400);
  State.wrappedValue.setter();
  sub_10000FBD8(v0 + 240, &qword_1005272E0);
  uint64_t v15 = (char *)(v13 + *(int *)(v14 + 60));
  char v16 = *v15;
  uint64_t v17 = *((void *)v15 + 1);
  *(unsigned char *)(v0 + 280) = v16;
  *(void *)(v0 + 288) = v17;
  *(unsigned char *)(v0 + 360) = 1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  swift_errorRelease();
LABEL_7:
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_1002BD420()
{
  swift_release();
  swift_willThrow();
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 320);
  swift_errorRetain();
  sub_100031F08(v1, (uint64_t *)(v0 + 240));
  uint64_t v3 = type metadata accessor for EventResultView();
  sub_10000FB74(v0 + 240, v0 + 160, &qword_1005272E0);
  sub_10000F214(&qword_100527400);
  State.wrappedValue.setter();
  sub_10000FBD8(v0 + 240, &qword_1005272E0);
  uint64_t v4 = (char *)(v2 + *(int *)(v3 + 60));
  char v5 = *v4;
  uint64_t v6 = *((void *)v4 + 1);
  *(unsigned char *)(v0 + 280) = v5;
  *(void *)(v0 + 288) = v6;
  *(unsigned char *)(v0 + 360) = 1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  swift_errorRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1002BD594(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000F214(&qword_10051F3B0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1002BD648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for EventResultView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  id v7 = sub_1002BC920();
  sub_1002BEE74(a1, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  sub_1002BDC04((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  uint64_t result = static Edge.Set.bottom.getter();
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = sub_1002BE198;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = result;
  return result;
}

uint64_t sub_1002BD768(char a1, uint64_t a2)
{
  type metadata accessor for EventResultView();
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  sub_1002B69B0(a1);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_1002B5074(*(void *)a2, v5, v6, (uint64_t (*)(void))sub_10000F724);
  id v7 = (void (*)(uint64_t))sub_10027D504(v4, v5, v6);
  uint64_t result = sub_1002B52E0(v4, v5, v6, (uint64_t (*)(void))sub_10000F478);
  if (v7)
  {
    v7(result);
    return sub_10000F478((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1002BD870(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for EventResultView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  LocalizedStringKey.init(stringLiteral:)();
  sub_1002BEE74(a2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for EventResultView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  sub_1002BDC04((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  return Button<>.init(_:action:)();
}

uint64_t sub_1002BD9C8(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  sub_1002B5074(*(void *)a1, v2, v3, (uint64_t (*)(void))sub_10000F724);
  uint64_t v4 = (void (*)(uint64_t))sub_10027D504(v1, v2, v3);
  uint64_t result = sub_1002B52E0(v1, v2, v3, (uint64_t (*)(void))sub_10000F478);
  if (v4)
  {
    v4(result);
    return sub_10000F478((uint64_t)v4);
  }
  return result;
}

uint64_t sub_1002BDA94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  sub_10000F3B0(a1, a1[3]);
  dispatch thunk of LocalizedError.recoverySuggestion.getter();
  if (!v6)
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
  }
  sub_1000317A0();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v9 & 1;
  *(void *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1002BDC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventResultView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BDC68()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventResultView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1002BC568(v2);
}

uint64_t sub_1002BDCCC()
{
  uint64_t v1 = (int *)type metadata accessor for EventResultView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  sub_1002B52E0(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v3 = v2 + v1[6];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v2 + v1[7];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v2 + v1[11];
  uint64_t v8 = type metadata accessor for Date();
  char v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v2 + v1[12], v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v2 + v1[17] + 24)) {
    _s6Tamale17AnyLocalizedErrorVwxx_0(v2 + v1[17]);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002BDFA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for EventResultView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1002BD648(v4, a1);
}

unint64_t sub_1002BE014()
{
  unint64_t result = qword_1005273E8;
  if (!qword_1005273E8)
  {
    sub_10000F69C(&qword_1005273B8);
    sub_100013AA8(&qword_1005273F0, &qword_1005273B0);
    sub_100183BE0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005273E8);
  }
  return result;
}

uint64_t sub_1002BE0B4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002BE130(uint64_t a1)
{
  return sub_1002BD870(a1, *(void *)(v1 + 16));
}

unint64_t sub_1002BE138()
{
  unint64_t result = qword_100527408;
  if (!qword_100527408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100527408);
  }
  return result;
}

uint64_t sub_1002BE198(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for EventResultView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1002BD768(a1, v4);
}

uint64_t sub_1002BE208()
{
  uint64_t v1 = (int *)type metadata accessor for EventResultView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v2;
  sub_1002B52E0(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8), *(unsigned char *)(v0 + v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v4 + 24), *(void *)(v4 + 32), *(unsigned char *)(v4 + 40), (uint64_t (*)(void))sub_1002B48C8);
  unint64_t v5 = v0 + v2 + v1[6];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v4 + v1[7];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v4 + v1[11];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v4 + v1[12], v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v4 + v1[17] + 24)) {
    _s6Tamale17AnyLocalizedErrorVwxx_0(v4 + v1[17]);
  }
  unint64_t v12 = (v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002BE504()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventResultView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(v0 + v3);
  unint64_t v5 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002BCB14(v0 + v2, v4, v5);
}

uint64_t sub_1002BE59C()
{
  return sub_1002BCD48();
}

uint64_t sub_1002BE5B8()
{
  uint64_t v1 = (int *)type metadata accessor for EventResultView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_unknownObjectRelease();

  uint64_t v3 = v0 + v2;
  sub_1002B52E0(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8), *(unsigned char *)(v0 + v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v3 + 24), *(void *)(v3 + 32), *(unsigned char *)(v3 + 40), (uint64_t (*)(void))sub_1002B48C8);
  unint64_t v4 = v0 + v2 + v1[6];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v3 + v1[7];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[11];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v3 + v1[12], v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v3 + v1[17] + 24)) {
    _s6Tamale17AnyLocalizedErrorVwxx_0(v3 + v1[17]);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002BE8A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for EventResultView() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000F878;
  return sub_1002BCDB8(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1002BE9A8()
{
  return sub_1002B69B0(1);
}

uint64_t sub_1002BE9DC()
{
  uint64_t v1 = *(void *)(type metadata accessor for EventResultView() - 8);
  return sub_1002BD9C8(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

unint64_t sub_1002BEA30()
{
  unint64_t result = qword_100527490;
  if (!qword_100527490)
  {
    sub_10000F69C(&qword_100527488);
    sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527490);
  }
  return result;
}

unint64_t sub_1002BEAD0()
{
  unint64_t result = qword_1005274A0;
  if (!qword_1005274A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005274A0);
  }
  return result;
}

unint64_t sub_1002BEB2C()
{
  unint64_t result = qword_1005274A8;
  if (!qword_1005274A8)
  {
    sub_10000F69C(&qword_100527480);
    sub_10000F69C(&qword_100527470);
    sub_100013AA8(&qword_100527498, &qword_100527470);
    sub_1002BEAD0();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005274A8);
  }
  return result;
}

unint64_t sub_1002BEC40()
{
  unint64_t result = qword_100527540;
  if (!qword_100527540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527540);
  }
  return result;
}

unint64_t sub_1002BEC94()
{
  unint64_t result = qword_100527548;
  if (!qword_100527548)
  {
    sub_10000F69C(&qword_100527520);
    sub_10000F69C(&qword_100527510);
    sub_100013AA8(&qword_100527550, &qword_100527510);
    sub_1002BEC40();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527548);
  }
  return result;
}

unint64_t sub_1002BED84()
{
  unint64_t result = qword_100527558;
  if (!qword_100527558)
  {
    sub_10000F69C(&qword_100527500);
    sub_10000F69C(&qword_1005274F0);
    sub_100013AA8(&qword_100527538, &qword_1005274F0);
    sub_1002BEC40();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527558);
  }
  return result;
}

uint64_t sub_1002BEE74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002BEEDC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002BEF3C()
{
  unint64_t result = qword_100527578;
  if (!qword_100527578)
  {
    sub_10000F69C(&qword_1005274E0);
    sub_1002BE0B4(&qword_100527580, &qword_1005274D8, (void (*)(void))sub_1002BF008);
    sub_100013AA8(&qword_1005275B0, &qword_100527570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527578);
  }
  return result;
}

uint64_t sub_1002BF008()
{
  return sub_1002BE0B4(&qword_100527588, &qword_1005274D0, (void (*)(void))sub_1002BF038);
}

unint64_t sub_1002BF038()
{
  unint64_t result = qword_100527590;
  if (!qword_100527590)
  {
    sub_10000F69C(&qword_1005274C8);
    sub_1002BF0D8();
    sub_100013AA8(&qword_1005275A8, &qword_100527568);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527590);
  }
  return result;
}

unint64_t sub_1002BF0D8()
{
  unint64_t result = qword_100527598;
  if (!qword_100527598)
  {
    sub_10000F69C(&qword_1005274C0);
    sub_100013AA8(&qword_1005275A0, &qword_1005274B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527598);
  }
  return result;
}

uint64_t sub_1002BF17C()
{
  return sub_1002BF194();
}

uint64_t sub_1002BF194()
{
  return sub_1002745F4();
}

uint64_t sub_1002BF1F8()
{
  return sub_1002B9F48();
}

unint64_t sub_1002BF214()
{
  unint64_t result = qword_1005275E0;
  if (!qword_1005275E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1005275E0);
  }
  return result;
}

uint64_t sub_1002BF25C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002BF2AC()
{
  unint64_t result = qword_100527670;
  if (!qword_100527670)
  {
    sub_10000F69C(&qword_100527638);
    sub_1002BF34C();
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527670);
  }
  return result;
}

unint64_t sub_1002BF34C()
{
  unint64_t result = qword_100527678;
  if (!qword_100527678)
  {
    sub_10000F69C(&qword_100527630);
    sub_10000F69C(&qword_10051EF30);
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527678);
  }
  return result;
}

uint64_t sub_1002BF43C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002BBD8C(a1);
}

unint64_t sub_1002BF444()
{
  unint64_t result = qword_100527688;
  if (!qword_100527688)
  {
    sub_10000F69C(&qword_100527648);
    sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527688);
  }
  return result;
}

unint64_t sub_1002BF508()
{
  unint64_t result = qword_100527690;
  if (!qword_100527690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527690);
  }
  return result;
}

uint64_t sub_1002BF560()
{
  return sub_1002BF194();
}

unint64_t sub_1002BF578()
{
  unint64_t result = qword_1005276C8;
  if (!qword_1005276C8)
  {
    sub_10000F69C(&qword_1005276B8);
    sub_100013AA8(&qword_10051E300, &qword_10051C120);
    sub_100013AA8(&qword_1005276D0, &qword_1005276D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005276C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EventLabelStyle()
{
  return &type metadata for EventLabelStyle;
}

uint64_t sub_1002BF64C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002BF7D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002BF7EC()
{
  return sub_100013AA8(&qword_10051EE30, &qword_10051EE38);
}

uint64_t sub_1002BF828()
{
  return sub_1002BF1F8();
}

ValueMetadata *type metadata accessor for LighterRotatingContentLight()
{
  return &type metadata for LighterRotatingContentLight;
}

uint64_t sub_1002BF850()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002BF86C(long double a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(qword_10051DB18);
  TimelineView.Context.date.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  long double v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  long double v8 = fmod(v7, a1);
  *(long double *)(swift_allocObject() + 16) = v8;
  sub_10000F214(&qword_1005276E8);
  sub_10000F214(&qword_1005276F8);
  sub_1002C0314();
  uint64_t v9 = type metadata accessor for EmptyVisualEffect();
  uint64_t v10 = sub_1002C0370((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  v12[0] = v9;
  v12[1] = v10;
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  return swift_release();
}

uint64_t sub_1002BFA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v11[0] = a2;
  v11[1] = a1;
  uint64_t v2 = type metadata accessor for ShaderFunction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Shader();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ShaderLibrary.subscript.getter();
  sub_10000F214(&qword_100527710);
  type metadata accessor for Shader.Argument();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_100440F30;
  GeometryProxy.size.getter();
  static Shader.Argument._float2(_:_:)();
  static Shader.Argument._float(_:)();
  ShaderFunction.dynamicallyCall(withArguments:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for EmptyVisualEffect();
  sub_1002C0370((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  VisualEffect.colorEffect(_:isEnabled:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1002BFD14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v24[1] = a2;
  uint64_t v4 = sub_10000F214(&qword_1005276E8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for AnimationTimelineSchedule();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *v2;
  AnimationTimelineSchedule.init(minimumInterval:paused:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v16 + v15, (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1002C0114;
  *(void *)(v17 + 24) = v16;
  v24[0] = sub_10000F214(&qword_1005276F0);
  sub_1002C0370(&qword_10051DAF8, (void (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule);
  uint64_t v18 = sub_10000F69C(&qword_1005276F8);
  unint64_t v19 = sub_1002C0314();
  uint64_t v20 = type metadata accessor for EmptyVisualEffect();
  uint64_t v21 = sub_1002C0370((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
  uint64_t v25 = v20;
  uint64_t v26 = v21;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v25 = v4;
  uint64_t v26 = v18;
  unint64_t v27 = v19;
  uint64_t v28 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  TimelineView<>.init(_:content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_1002C0080()
{
  uint64_t v1 = sub_10000F214(&qword_1005276E8);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1002C0114()
{
  sub_10000F214(&qword_1005276E8);
  long double v1 = *(double *)(v0 + 16);

  return sub_1002BF86C(v1);
}

uint64_t sub_1002C019C(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_10000F214(qword_10051DB18);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000F214(&qword_100527708);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = v7 - 8;
  if (*(void *)(v9 + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C02D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002C030C(uint64_t a1)
{
  return sub_1002C019C(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_1002C0314()
{
  unint64_t result = qword_100527700;
  if (!qword_100527700)
  {
    sub_10000F69C(&qword_1005276E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527700);
  }
  return result;
}

uint64_t sub_1002C0370(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002C03B8()
{
  return swift_deallocObject();
}

uint64_t sub_1002C03C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002BFA64(a1, a2);
}

unint64_t sub_1002C03D4()
{
  unint64_t result = qword_100527718;
  if (!qword_100527718)
  {
    sub_10000F69C(&qword_100527720);
    sub_10000F69C(&qword_1005276E8);
    sub_10000F69C(&qword_1005276F8);
    sub_1002C0314();
    type metadata accessor for EmptyVisualEffect();
    sub_1002C0370((unint64_t *)&qword_100520570, (void (*)(uint64_t))&type metadata accessor for EmptyVisualEffect);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527718);
  }
  return result;
}

uint64_t *sub_1002C0508(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (uint64_t *)((char *)v4 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (uint64_t *)((char *)v4 + v10);
    unint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1002C0644(uint64_t a1)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_1002C06F8(void *a1, void *a2, uint64_t a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1002C07E8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1002C0910(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_1002C0A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C0A38);
}

uint64_t sub_1002C0A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002C0AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C0B10);
}

uint64_t sub_1002C0B10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for SafetyInterstitial()
{
  uint64_t result = qword_1005277C0;
  if (!qword_1005277C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002C0C1C()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1002C0CC0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1002C0CDC()
{
  double result = 12.0;
  xmmword_100527728 = xmmword_10043D870;
  *(_OWORD *)&qword_100527738 = xmmword_10043D870;
  return result;
}

double sub_1002C0CF4()
{
  double result = 14.0;
  xmmword_100527748 = xmmword_100446990;
  *(_OWORD *)algn_100527758 = xmmword_100446990;
  return result;
}

uint64_t sub_1002C0D0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v1 = type metadata accessor for SafetyInterstitial();
  uint64_t v17 = *(void *)(v1 - 8);
  uint64_t v2 = *(void *)(v17 + 64);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = type metadata accessor for Spring();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for SmartDialogAnimationSettings();
  uint64_t v16 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v15 - v9;
  sub_10000F214(&qword_100518FE8);
  swift_allocObject();
  uint64_t v11 = PassthroughSubject.init()();
  Spring.init(response:dampingRatio:)();
  SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  uint64_t v20 = v11;
  sub_100013AA8(&qword_100518FF0, &qword_100518FE8);
  Publisher.eraseToAnyPublisher()();
  sub_1002C2F9C(v18, (uint64_t)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SafetyInterstitial);
  unint64_t v12 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1002C27B8((uint64_t)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  *(void *)(v13 + ((v2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = v11;
  sub_10000F214(&qword_1005272D8);
  sub_1002C2C24(&qword_100527800, &qword_1005272D8, (void (*)(void))sub_1002C28B8);
  SmartDialog.init(animationSettings:animationTrigger:header:body:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v16);
}

uint64_t sub_1002C1074@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000F214(&qword_100527818);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_1005272D0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v13 = sub_10000F214(&qword_100527820);
  sub_1002C1224(a1, (uint64_t)&v8[*(int *)(v13 + 44)]);
  sub_10000FB74((uint64_t)v8, (uint64_t)v12, &qword_100527818);
  uint64_t v14 = (uint64_t (**)())&v12[*(int *)(v10 + 44)];
  *uint64_t v14 = sub_1002C2958;
  v14[1] = a2;
  v14[2] = 0;
  v14[3] = 0;
  swift_retain();
  sub_10000FBD8((uint64_t)v8, &qword_100527818);
  uint64_t v15 = static Alignment.center.getter();
  sub_100226D74(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a3, 0.0, 1, 0.0, 1, v15, v16);
  return sub_10000FBD8((uint64_t)v12, &qword_1005272D0);
}

uint64_t sub_1002C1224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v105 = a2;
  uint64_t v100 = sub_10000F214(&qword_100527828);
  uint64_t v98 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v95 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100527830);
  uint64_t v101 = *(void *)(v4 - 8);
  uint64_t v102 = v4;
  __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000F214(&qword_100527838);
  __chkstk_darwin(v99);
  uint64_t v97 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100527840);
  __chkstk_darwin(v7 - 8);
  uint64_t v104 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v103 = (uint64_t)&v81 - v10;
  uint64_t v11 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100527848);
  __chkstk_darwin(v14 - 8);
  uint64_t v92 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_100527850);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100527858);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v91 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000F214(&qword_100527860);
  __chkstk_darwin(v22 - 8);
  uint64_t v94 = (uint64_t)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v81 - v25;
  uint64_t v93 = type metadata accessor for SafetyInterstitial();
  unint64_t v27 = (void *)(a1 + *(int *)(v93 + 20));
  uint64_t v28 = v27[1];
  if (!v28)
  {
    uint64_t v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v26, 1, 1, v19);
    uint64_t v64 = v11;
    goto LABEL_7;
  }
  uint64_t v86 = v16;
  uint64_t v87 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v13;
  uint64_t v82 = v19;
  uint64_t v83 = v26;
  uint64_t v90 = v11;
  uint64_t v84 = a1;
  *(void *)&long long v106 = *v27;
  *((void *)&v106 + 1) = v28;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v29 = Text.init<A>(_:)();
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  static Font.title3.getter();
  uint64_t v34 = Text.font(_:)();
  uint64_t v36 = v35;
  char v38 = v37;
  swift_release();
  char v39 = v38 & 1;
  sub_100012FAC(v29, v31, v33);
  swift_bridgeObjectRelease();
  id v40 = [self labelColor];
  Color.init(uiColor:)();
  uint64_t v41 = Text.foregroundColor(_:)();
  uint64_t v43 = v42;
  LOBYTE(v29) = v44;
  uint64_t v46 = v45;
  swift_release();
  sub_100012FAC(v34, v36, v39);
  swift_bridgeObjectRelease();
  uint64_t v47 = static Alignment.leading.getter();
  sub_10022551C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v106, 0.0, 1, 0.0, 1, v47, v48, v41, v43, v29 & 1, v46);
  sub_100012FAC(v41, v43, v29 & 1);
  swift_bridgeObjectRelease();
  long long v127 = v112;
  long long v128 = v113;
  long long v129 = v114[0];
  long long v123 = v108;
  long long v124 = v109;
  long long v125 = v110;
  long long v126 = v111;
  long long v121 = v106;
  long long v122 = v107;
  uint64_t KeyPath = swift_getKeyPath();
  long long v136 = v127;
  long long v137 = v128;
  v138[0] = v129;
  long long v132 = v123;
  long long v133 = v124;
  long long v134 = v125;
  long long v135 = v126;
  long long v130 = v121;
  long long v131 = v122;
  *(void *)&v138[1] = KeyPath;
  BYTE8(v138[1]) = 0;
  if (qword_100517F88 != -1) {
    swift_once();
  }
  long long v85 = xmmword_100527728;
  uint64_t v50 = qword_100527738;
  uint64_t v51 = unk_100527740;
  char v52 = static Edge.Set.all.getter();
  long long v112 = v136;
  long long v113 = v137;
  v114[0] = v138[0];
  *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)((char *)v138 + 9);
  long long v108 = v132;
  long long v109 = v133;
  long long v110 = v134;
  long long v111 = v135;
  long long v106 = v130;
  long long v107 = v131;
  char v139 = 0;
  char v115 = v52;
  *(_DWORD *)uint64_t v116 = v140[0];
  *(_DWORD *)&v116[3] = *(_DWORD *)((char *)v140 + 3);
  long long v117 = v85;
  uint64_t v118 = v50;
  uint64_t v119 = v51;
  char v120 = 0;
  sub_10000F214(&qword_1005203F0);
  sub_1002C2C24(&qword_1005203F8, &qword_1005203F0, (void (*)(void))sub_100127B9C);
  uint64_t v53 = (uint64_t)v92;
  View.accessibilityIdentifier(_:)();
  sub_100127CB0((uint64_t)&v130);
  uint64_t v54 = (uint64_t)v87;
  sub_10000FB74(v53, (uint64_t)v87, &qword_100527848);
  *(_WORD *)(v54 + *(int *)(v86 + 36)) = 256;
  sub_10000FBD8(v53, &qword_100527848);
  uint64_t v55 = enum case for DynamicTypeSize.accessibility2(_:);
  uint64_t v56 = type metadata accessor for DynamicTypeSize();
  uint64_t v57 = (uint64_t)v89;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 104))(v89, v55, v56);
  sub_1002C2EF0(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v59 = v90;
  uint64_t v60 = v88;
  if (result)
  {
    sub_1002C2C24(&qword_1005278B8, &qword_100527850, (void (*)(void))sub_1002C2E18);
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    id v61 = v91;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8(v57, &qword_10051EF30);
    sub_10000FBD8(v54, &qword_100527850);
    uint64_t v62 = v82;
    uint64_t v26 = v83;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v83, v61, v82);
    uint64_t v63 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v26, 0, 1, v62);
    uint64_t v64 = v59;
LABEL_7:
    __chkstk_darwin(v63);
    swift_retain();
    sub_10000F214(&qword_100527868);
    uint64_t v65 = sub_10000F69C(&qword_100527870);
    unint64_t v66 = sub_1002C29E4();
    uint64_t v67 = sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    *(void *)&long long v106 = v65;
    *((void *)&v106 + 1) = v64;
    *(void *)&long long v107 = v66;
    *((void *)&v107 + 1) = v67;
    swift_getOpaqueTypeConformance2();
    uint64_t v68 = v95;
    Button.init(action:label:)();
    sub_100013AA8(&qword_1005278A0, &qword_100527828);
    uint64_t v69 = v96;
    uint64_t v70 = v100;
    View.smartDialogAnimatable()();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v68, v70);
    uint64_t v71 = swift_getKeyPath();
    uint64_t v73 = v101;
    uint64_t v72 = v102;
    uint64_t v74 = (uint64_t)v97;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v97, v69, v102);
    uint64_t v75 = v74 + *(int *)(v99 + 36);
    *(void *)uint64_t v75 = v71;
    *(unsigned char *)(v75 + 8) = 0;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v72);
    sub_1002C2CA8();
    uint64_t v76 = (uint64_t)v104;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8(v74, &qword_100527838);
    uint64_t v77 = v103;
    sub_1002C2DA8(v76, v103);
    uint64_t v78 = v94;
    sub_10000FB74((uint64_t)v26, v94, &qword_100527860);
    sub_10000FB74(v77, v76, &qword_100527840);
    uint64_t v79 = v105;
    sub_10000FB74(v78, v105, &qword_100527860);
    uint64_t v80 = sub_10000F214(&qword_1005278B0);
    sub_10000FB74(v76, v79 + *(int *)(v80 + 48), &qword_100527840);
    sub_10000FBD8(v77, &qword_100527840);
    sub_10000FBD8((uint64_t)v26, &qword_100527860);
    sub_10000FBD8(v76, &qword_100527840);
    return sub_10000FBD8(v78, &qword_100527860);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C1DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a1;
  uint64_t v61 = a2;
  uint64_t v60 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v60);
  uint64_t v76 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Capsule();
  __chkstk_darwin(v3 - 8);
  uint64_t v75 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ColorScheme();
  uint64_t v67 = *(void *)(v5 - 8);
  uint64_t v68 = v5;
  __chkstk_darwin(v5);
  uint64_t v65 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v63 = (uint64_t)&v56 - v8;
  uint64_t v9 = sub_10000F214(&qword_1005278C8);
  uint64_t v69 = *(void *)(v9 - 8);
  uint64_t v70 = v9;
  __chkstk_darwin(v9);
  unint64_t v66 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_100527888);
  __chkstk_darwin(v64);
  uint64_t v72 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000F214(&qword_100527870);
  __chkstk_darwin(v74);
  uint64_t v73 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100527868);
  uint64_t v58 = *(void *)(v13 - 8);
  uint64_t v59 = v13;
  __chkstk_darwin(v13);
  uint64_t v57 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  id v20 = [self labelColor];
  Color.init(uiColor:)();
  uint64_t v21 = Text.foregroundColor(_:)();
  uint64_t v23 = v22;
  char v25 = v24;
  uint64_t v27 = v26;
  swift_release();
  v25 &= 1u;
  sub_100012FAC(v15, v17, v19);
  swift_bridgeObjectRelease();
  uint64_t v28 = static Alignment.center.getter();
  sub_10022551C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v90, 0.0, 1, 0.0, 1, v28, v29, v21, v23, v25, v27);
  sub_100012FAC(v21, v23, v25);
  swift_bridgeObjectRelease();
  if (qword_100517F90 != -1) {
    swift_once();
  }
  uint64_t v30 = xmmword_100527748;
  long long v62 = *(long long *)((char *)&xmmword_100527748 + 8);
  uint64_t v31 = qword_100527760;
  char v32 = static Edge.Set.all.getter();
  long long v99 = v90[6];
  long long v100 = v90[7];
  long long v101 = v90[8];
  long long v95 = v90[2];
  long long v96 = v90[3];
  long long v97 = v90[4];
  long long v98 = v90[5];
  long long v93 = v90[0];
  long long v94 = v90[1];
  char v91 = 0;
  uint64_t v33 = static Font.headline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v102) = v32;
  *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v92;
  DWORD1(v102) = *(_DWORD *)&v92[3];
  *((void *)&v102 + 1) = v30;
  long long v103 = v62;
  *(void *)&long long v104 = v31;
  BYTE8(v104) = v91;
  *(void *)&long long v105 = KeyPath;
  *((void *)&v105 + 1) = v33;
  long long v87 = v62;
  long long v88 = v104;
  long long v89 = v105;
  long long v83 = v99;
  long long v84 = v100;
  long long v85 = v101;
  long long v86 = v102;
  long long v79 = v95;
  long long v80 = v96;
  long long v81 = v97;
  long long v82 = v98;
  long long v77 = v93;
  long long v78 = v94;
  static Font.Weight.medium.getter();
  sub_10000F214(&qword_100527890);
  sub_1002C2B58();
  uint64_t v35 = v66;
  View.fontWeight(_:)();
  sub_1002C2F40((uint64_t)&v93);
  uint64_t v36 = v63;
  sub_10027CA80(v63);
  uint64_t v38 = v67;
  uint64_t v37 = v68;
  char v39 = v65;
  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v65, enum case for ColorScheme.dark(_:), v68);
  static ColorScheme.== infix(_:_:)();
  id v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v40(v39, v37);
  v40((char *)v36, v37);
  static Color.primary.getter();
  uint64_t v41 = Color.opacity(_:)();
  swift_release();
  LOBYTE(v40) = static Edge.Set.all.getter();
  uint64_t v43 = v69;
  uint64_t v42 = v70;
  uint64_t v44 = (uint64_t)v72;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v72, v35, v70);
  uint64_t v45 = v44 + *(int *)(v64 + 36);
  *(void *)uint64_t v45 = v41;
  *(unsigned char *)(v45 + 8) = (_BYTE)v40;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v42);
  uint64_t v46 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v47 = type metadata accessor for RoundedCornerStyle();
  uint64_t v48 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v75, v46, v47);
  uint64_t v49 = (uint64_t)v73;
  uint64_t v50 = (uint64_t)&v73[*(int *)(v74 + 36)];
  sub_1002C2F9C(v48, v50, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)(v50 + *(int *)(sub_10000F214(&qword_10051CC78) + 36)) = 256;
  sub_10000FB74(v44, v49, &qword_100527888);
  sub_10008D454(v48);
  sub_10000FBD8(v44, &qword_100527888);
  uint64_t v51 = enum case for DynamicTypeSize.accessibility2(_:);
  uint64_t v52 = type metadata accessor for DynamicTypeSize();
  uint64_t v53 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 104))(v76, v51, v52);
  sub_1002C2EF0(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_1002C29E4();
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    uint64_t v55 = v57;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8(v53, &qword_10051EF30);
    sub_10000FBD8(v49, &qword_100527870);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v61, v55, v59);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C2670()
{
  uint64_t v1 = *(void *)(type metadata accessor for SafetyInterstitial() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002C27B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SafetyInterstitial();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C281C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafetyInterstitial() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(uint64_t (**)())(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002C1074(v1 + v4, v5, a1);
}

unint64_t sub_1002C28B8()
{
  unint64_t result = qword_100527808;
  if (!qword_100527808)
  {
    sub_10000F69C(&qword_1005272D0);
    sub_100013AA8(&qword_100527810, &qword_100527818);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527808);
  }
  return result;
}

uint64_t sub_1002C2958()
{
  sub_100013AA8(&qword_100519048, &qword_100518FE8);

  return Subject<>.send()();
}

uint64_t sub_1002C29DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1002C1DC8(*(void *)(v1 + 16), a1);
}

unint64_t sub_1002C29E4()
{
  unint64_t result = qword_100527878;
  if (!qword_100527878)
  {
    sub_10000F69C(&qword_100527870);
    sub_1002C2A84();
    sub_100013AA8(&qword_10051CD20, &qword_10051CC78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527878);
  }
  return result;
}

unint64_t sub_1002C2A84()
{
  unint64_t result = qword_100527880;
  if (!qword_100527880)
  {
    sub_10000F69C(&qword_100527888);
    sub_10000F69C(&qword_100527890);
    sub_1002C2B58();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100519030, &qword_100519038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527880);
  }
  return result;
}

unint64_t sub_1002C2B58()
{
  unint64_t result = qword_100527898;
  if (!qword_100527898)
  {
    sub_10000F69C(&qword_100527890);
    sub_1002C2C24(&qword_100525778, &qword_100525780, (void (*)(void))sub_100127C3C);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527898);
  }
  return result;
}

uint64_t sub_1002C2C24(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002C2CA8()
{
  unint64_t result = qword_1005278A8;
  if (!qword_1005278A8)
  {
    sub_10000F69C(&qword_100527838);
    sub_10000F69C(&qword_100527828);
    sub_100013AA8(&qword_1005278A0, &qword_100527828);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005278A8);
  }
  return result;
}

uint64_t sub_1002C2DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100527840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002C2E18()
{
  unint64_t result = qword_1005278C0;
  if (!qword_1005278C0)
  {
    sub_10000F69C(&qword_100527848);
    sub_1002C2C24(&qword_1005203F8, &qword_1005203F0, (void (*)(void))sub_100127B9C);
    sub_1002C2EF0((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005278C0);
  }
  return result;
}

uint64_t sub_1002C2EF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002C2F40(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C2F9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002C3004()
{
  return sub_100013AA8(&qword_1005278D0, &qword_1005278D8);
}

ValueMetadata *type metadata accessor for VisualLookupClassifier()
{
  return &type metadata for VisualLookupClassifier;
}

uint64_t *sub_1002C3050(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t sub_1002C319C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 3, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1002C326C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_1002C337C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3, v6);
  int v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *sub_1002C34F0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_1002C3600(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3, v6);
  int v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t sub_1002C3774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C3788);
}

uint64_t sub_1002C3788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002C37F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C3808);
}

uint64_t sub_1002C3808(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1002C388C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 3, v2);
}

uint64_t sub_1002C38F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 3, v4);
}

uint64_t type metadata accessor for VisualLookupClassifier.SearchState()
{
  uint64_t result = qword_100527950;
  if (!qword_100527950) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002C39B0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1002C3A28@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1002C73E4(&qword_10051D460, (void (*)(uint64_t))type metadata accessor for DebugToaster);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002C3AD4()
{
  return swift_bridgeObjectRelease();
}

void sub_1002C3BB8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C7178(v0, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 3, v1))
  {
    case 1u:
      Swift::UInt v8 = 0;
      goto LABEL_6;
    case 2u:
      Swift::UInt v8 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v8 = 3;
LABEL_6:
      Hasher._combine(_:)(v8);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(1uLL);
      sub_1002C73E4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
}

uint64_t sub_1002C3DC4(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005279D0);
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  uint64_t v33 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000F214(&qword_1005279D8);
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v28 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_1005279E0);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5);
  uint64_t v31 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v29 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005279E8);
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_1005279F0);
  uint64_t v38 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1002C7240();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002C7178(v39, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 3, v7))
  {
    case 1u:
      char v40 = 0;
      sub_1002C7390();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v27);
      goto LABEL_6;
    case 2u:
      char v42 = 2;
      sub_1002C72E8();
      uint64_t v23 = v28;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v32);
      goto LABEL_6;
    case 3u:
      char v43 = 3;
      sub_1002C7294();
      char v24 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v37);
LABEL_6:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v18, v16);
      break;
    default:
      char v19 = v29;
      (*(void (**)(void))(v8 + 32))();
      char v41 = 1;
      sub_1002C733C();
      id v20 = v31;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1002C73E4(&qword_10051A048, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = v35;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v21);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v19, v7);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v18, v16);
      break;
  }
  return result;
}

Swift::Int sub_1002C43E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_1002C7178(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 3, v2))
  {
    case 1u:
      Swift::UInt v9 = 0;
      goto LABEL_6;
    case 2u:
      Swift::UInt v9 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v9 = 3;
LABEL_6:
      Hasher._combine(_:)(v9);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      Hasher._combine(_:)(1uLL);
      sub_1002C73E4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1002C4614@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v56 = sub_10000F214(&qword_100527980);
  uint64_t v64 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v63 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100527988);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  uint64_t v58 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_100527990);
  uint64_t v62 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100527998);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  uint64_t v53 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_1005279A0);
  uint64_t v60 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  char v19 = (char *)&v49 - v18;
  uint64_t v20 = a1[3];
  uint64_t v65 = a1;
  sub_10000F3B0(a1, v20);
  sub_1002C7240();
  uint64_t v21 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    goto LABEL_14;
  }
  uint64_t v66 = v14;
  uint64_t v49 = v16;
  uint64_t v50 = v19;
  uint64_t v51 = 0;
  uint64_t v22 = v61;
  uint64_t v23 = v62;
  char v24 = v63;
  uint64_t v25 = v64;
  uint64_t v26 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v26 + 16) != 1)
  {
    uint64_t v29 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v31 = v30;
    sub_10000F214(&qword_10051E3E0);
    uint64_t *v31 = v66;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v11);
LABEL_14:
    uint64_t v37 = (uint64_t)v65;
    return _s6Tamale17AnyLocalizedErrorVwxx_0(v37);
  }
  switch(*(unsigned char *)(v26 + 32))
  {
    case 1:
      uint64_t v32 = v60;
      char v68 = 1;
      sub_1002C733C();
      uint64_t v33 = v51;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_13;
      }
      uint64_t v34 = type metadata accessor for UUID();
      sub_1002C73E4(&qword_10051A028, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = v22;
      uint64_t v36 = v57;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
      uint64_t v37 = (uint64_t)v65;
      uint64_t v38 = (uint64_t)v49;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v49, 0, 3, v34);
      uint64_t v39 = v38;
      uint64_t v40 = (uint64_t)v50;
      sub_1002C6E74(v39, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      goto LABEL_20;
    case 2:
      uint64_t v41 = v60;
      char v69 = 2;
      sub_1002C72E8();
      char v42 = v58;
      uint64_t v43 = v51;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v43)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v11);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v55);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v11);
      uint64_t v47 = type metadata accessor for UUID();
      uint64_t v40 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v50, 2, 3, v47);
      goto LABEL_19;
    case 3:
      uint64_t v32 = v60;
      char v70 = 3;
      sub_1002C7294();
      uint64_t v44 = v51;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v44)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
      uint64_t v48 = type metadata accessor for UUID();
      uint64_t v40 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v50, 3, 3, v48);
      goto LABEL_19;
    default:
      uint64_t v27 = v60;
      char v67 = 0;
      sub_1002C7390();
      uint64_t v28 = v51;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v28)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v52);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
      uint64_t v46 = type metadata accessor for UUID();
      uint64_t v40 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v50, 1, 3, v46);
LABEL_19:
      uint64_t v37 = (uint64_t)v65;
LABEL_20:
      sub_1002C6E74(v40, v59, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      break;
  }
  return _s6Tamale17AnyLocalizedErrorVwxx_0(v37);
}

uint64_t sub_1002C4EE4()
{
  uint64_t result = 0x6261686372616573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E69686372616573;
      break;
    case 2:
      uint64_t result = 0x64656873696E6966;
      break;
    case 3:
      uint64_t result = 0x746C757365526F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002C4F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002C7AC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002C4FAC(uint64_t a1)
{
  unint64_t v2 = sub_1002C7240();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C4FE8(uint64_t a1)
{
  unint64_t v2 = sub_1002C7240();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002C5024(uint64_t a1)
{
  unint64_t v2 = sub_1002C72E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C5060(uint64_t a1)
{
  unint64_t v2 = sub_1002C72E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002C509C(uint64_t a1)
{
  unint64_t v2 = sub_1002C7294();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C50D8(uint64_t a1)
{
  unint64_t v2 = sub_1002C7294();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002C5114(uint64_t a1)
{
  unint64_t v2 = sub_1002C7390();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C5150(uint64_t a1)
{
  unint64_t v2 = sub_1002C7390();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002C518C(uint64_t a1)
{
  unint64_t v2 = sub_1002C733C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C51C8(uint64_t a1)
{
  unint64_t v2 = sub_1002C733C();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1002C5210()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_1002C7178(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 3, v2))
  {
    case 1u:
      Swift::UInt v9 = 0;
      goto LABEL_6;
    case 2u:
      Swift::UInt v9 = 2;
      goto LABEL_6;
    case 3u:
      Swift::UInt v9 = 3;
LABEL_6:
      Hasher._combine(_:)(v9);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      Hasher._combine(_:)(1uLL);
      sub_1002C73E4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1002C5448@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C4614(a1, a2);
}

uint64_t sub_1002C5460(void *a1)
{
  return sub_1002C3DC4(a1);
}

uint64_t sub_1002C5478()
{
  return sub_1002C73E4(&qword_100527960, (void (*)(uint64_t))type metadata accessor for VisualLookupClassifier.SearchState);
}

uint64_t sub_1002C54C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = type metadata accessor for CVDetection();
  v3[15] = swift_task_alloc();
  v3[16] = type metadata accessor for ParseDetectorResult(0);
  v3[17] = swift_task_alloc();
  v3[18] = type metadata accessor for BundleClassification.ClassificationType(0);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  type metadata accessor for VisualLookupClassifier.SearchState();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_1002C5688, 0, 0);
}

uint64_t sub_1002C5688()
{
  sub_1002C7178(v0[9], v0[20], type metadata accessor for BundleClassification.ClassificationType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v15 = v0[20];
    uint64_t v16 = type metadata accessor for BundleClassification.ClassificationType;
LABEL_12:
    sub_1002C71E0(v15, v16);
    sub_1002C6E20();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
LABEL_13:
    return v18();
  }
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[15];
  uint64_t v4 = sub_10000F214(&qword_1005297C0);
  v0[25] = v4;
  uint64_t v5 = *(void *)(v2 + *(int *)(v4 + 48));
  v0[26] = v5;
  sub_1002C6E74(v2, v1, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_10019D408(v3);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v17 = v0[15];
    sub_1002C71E0(v0[24], (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    swift_bridgeObjectRelease();
    uint64_t v16 = (uint64_t (*)(void))type metadata accessor for CVDetection;
    uint64_t v15 = v17;
    goto LABEL_12;
  }
  sub_1002C6E74(v0[15], v0[17], type metadata accessor for ParseDetectorResult);
  if (qword_100518128 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[22];
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[11];
  sub_1002C7178(v6, v0[23], (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_1002C7178(v6, v7, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 3, v8);
  if (v10)
  {
    if (v10 == 1)
    {
      UUID.init()();
      uint64_t v11 = (void *)swift_task_alloc();
      v0[27] = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_1002C5C00;
      uint64_t v12 = v0[17];
      uint64_t v13 = v0[13];
      return sub_1003E9FDC(v12, v13);
    }
    sub_1002C71E0(v0[22], (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    uint64_t v22 = v0[23];
    uint64_t v31 = v0[24];
    uint64_t v23 = v0[19];
    uint64_t v24 = v0[17];
    uint64_t v25 = v0[16];
    uint64_t v26 = v0[7];
    uint64_t v27 = *(int *)(v0[25] + 48);
    sub_1002C7178(v22, v23, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    *(void *)(v23 + v27) = v5;
    swift_storeEnumTagMultiPayload();
    double v28 = *(float *)(v24 + *(int *)(v25 + 20));
    sub_1002C71E0(v22, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    sub_1002C71E0(v31, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    uint64_t v29 = *(void *)(v24 + *(int *)(v25 + 36));
    sub_1002C71E0(v24, type metadata accessor for ParseDetectorResult);
    sub_1002C6E74(v23, v26, type metadata accessor for BundleClassification.ClassificationType);
    uint64_t v30 = type metadata accessor for BundleClassification(0);
    *(double *)(v26 + *(int *)(v30 + 20)) = v28;
    *(void *)(v26 + *(int *)(v30 + 24)) = v29;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    goto LABEL_13;
  }
  (*(void (**)(void, void, void))(v0[11] + 32))(v0[12], v0[22], v0[10]);
  char v19 = (void *)swift_task_alloc();
  v0[28] = v19;
  *char v19 = v0;
  v19[1] = sub_1002C5F64;
  uint64_t v20 = v0[17];
  uint64_t v21 = v0[12];
  return sub_1003EB698(v20, v21);
}

uint64_t sub_1002C5C00(char a1)
{
  *(unsigned char *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002C5D00, 0, 0);
}

uint64_t sub_1002C5D00()
{
  if (*(unsigned char *)(v0 + 248) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 184);
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    sub_1002C71E0(v1, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v2, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 3, v3);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
  }
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(int *)(*(void *)(v0 + 200) + 48);
  sub_1002C7178(v7, v8, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  *(void *)(v8 + v12) = v5;
  swift_storeEnumTagMultiPayload();
  double v13 = *(float *)(v9 + *(int *)(v10 + 20));
  sub_1002C71E0(v7, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_1002C71E0(v6, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  uint64_t v14 = *(void *)(v9 + *(int *)(v10 + 36));
  sub_1002C71E0(v9, type metadata accessor for ParseDetectorResult);
  sub_1002C6E74(v8, v11, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v15 = type metadata accessor for BundleClassification(0);
  *(double *)(v11 + *(int *)(v15 + 20)) = v13;
  *(void *)(v11 + *(int *)(v15 + 24)) = v14;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_1002C5F64(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1002C630C;
  }
  else {
    uint64_t v4 = sub_1002C6078;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002C6078()
{
  uint64_t v1 = v0[29];
  if (v1)
  {
    uint64_t v2 = v0[23];
    uint64_t v3 = v0[21];
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    uint64_t v6 = v0[10];
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v1 + 16);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    sub_1002C71E0(v2, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    if (v7) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 3;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v8, 3, v6);
    sub_1002C6E74(v3, v2, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  }
  else
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    uint64_t v1 = v0[26];
  }
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[19];
  uint64_t v12 = v0[17];
  uint64_t v13 = v0[16];
  uint64_t v14 = v0[7];
  uint64_t v15 = *(int *)(v0[25] + 48);
  sub_1002C7178(v10, v11, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  *(void *)(v11 + v15) = v1;
  swift_storeEnumTagMultiPayload();
  double v16 = *(float *)(v12 + *(int *)(v13 + 20));
  sub_1002C71E0(v10, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_1002C71E0(v9, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  uint64_t v17 = *(void *)(v12 + *(int *)(v13 + 36));
  sub_1002C71E0(v12, type metadata accessor for ParseDetectorResult);
  sub_1002C6E74(v11, v14, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v18 = type metadata accessor for BundleClassification(0);
  *(double *)(v14 + *(int *)(v18 + 20)) = v16;
  *(void *)(v14 + *(int *)(v18 + 24)) = v17;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1002C630C()
{
  if (qword_100517F58 != -1) {
    swift_once();
  }
  if (byte_10055E408 == 1)
  {
    if (qword_100517DE0 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[30];
    uint64_t v2 = qword_10055E0F8;
    _StringGuts.grow(_:)(45);
    v0[2] = 0;
    v0[3] = 0xE000000000000000;
    v3._object = (void *)0x800000010042AF10;
    v3._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v3);
    v0[5] = v1;
    sub_10000F214(&qword_10051F3B0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v4 = v0[2];
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      swift_getKeyPath();
      uint64_t v7 = (void *)swift_task_alloc();
      v7[2] = v2;
      v7[3] = v4;
      v7[4] = v5;
      v0[6] = v2;
      sub_1002C73E4(&qword_10051D460, (void (*)(uint64_t))type metadata accessor for DebugToaster);
      swift_bridgeObjectRetain();
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_task_dealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (qword_100517EA0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000F378(v8, (uint64_t)qword_10055E2F8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "VL Search Service error: %@", v11, 0xCu);
    sub_10000F214(&qword_10051A948);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = v0[23];
  uint64_t v15 = v0[11];
  uint64_t v14 = v0[12];
  uint64_t v16 = v0[10];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  sub_1002C71E0(v13, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 3, v16);
  uint64_t v17 = v0[26];
  uint64_t v18 = v0[23];
  uint64_t v29 = v0[24];
  uint64_t v19 = v0[19];
  uint64_t v20 = v0[17];
  uint64_t v21 = v0[16];
  uint64_t v22 = v0[7];
  uint64_t v23 = *(int *)(v0[25] + 48);
  sub_1002C7178(v18, v19, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  *(void *)(v19 + v23) = v17;
  swift_storeEnumTagMultiPayload();
  double v24 = *(float *)(v20 + *(int *)(v21 + 20));
  sub_1002C71E0(v18, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_1002C71E0(v29, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  uint64_t v25 = *(void *)(v20 + *(int *)(v21 + 36));
  sub_1002C71E0(v20, type metadata accessor for ParseDetectorResult);
  sub_1002C6E74(v19, v22, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v26 = type metadata accessor for BundleClassification(0);
  *(double *)(v22 + *(int *)(v26 + 20)) = v24;
  *(void *)(v22 + *(int *)(v26 + 24)) = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t sub_1002C68B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000F878;
  return sub_1002C54C0(a1, a2, a3);
}

uint64_t sub_1002C6960(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_1002C6998(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1002C69C0(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    void *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_1002C6A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v8 - 8);
  os_log_type_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100525598);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  sub_1002C7178(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_1002C7178(a2, v15, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  switch(v16((uint64_t)v13, 3, v4))
  {
    case 1u:
      if (v16(v15, 3, v4) != 1) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 2u:
      if (v16(v15, 3, v4) != 2) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 3u:
      if (v16(v15, 3, v4) != 3) {
        goto LABEL_9;
      }
LABEL_5:
      sub_1002C71E0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      char v17 = 1;
      break;
    default:
      sub_1002C7178((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      if (v16(v15, 3, v4))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_9:
        sub_1002C6DC0((uint64_t)v13);
        char v17 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
        char v17 = static UUID.== infix(_:_:)();
        uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
        v19(v7, v4);
        v19(v10, v4);
        sub_1002C71E0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      }
      break;
  }
  return v17 & 1;
}

uint64_t sub_1002C6DC0(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100525598);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002C6E20()
{
  unint64_t result = qword_100527978;
  if (!qword_100527978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527978);
  }
  return result;
}

uint64_t sub_1002C6E74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002C6EE4()
{
  return sub_1000B0CEC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002C6F04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517FF0 != -1) {
    swift_once();
  }
  if (byte_10055E433 != 1) {
    return 0;
  }
  sub_1002C7178(a1, (uint64_t)v10, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    return 0;
  }
  sub_1002C71E0((uint64_t)v10, type metadata accessor for CVBundle.BundleType);
  sub_10019D408((uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1002C71E0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return 0;
  }
  sub_1002C6E74((uint64_t)v7, (uint64_t)v4, type metadata accessor for ParseDetectorResult);
  uint64_t v12 = v4[*(int *)(v2 + 40)];
  sub_1002C71E0((uint64_t)v4, type metadata accessor for ParseDetectorResult);
  return v12;
}

uint64_t sub_1002C7178(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002C71E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002C7240()
{
  unint64_t result = qword_1005279A8;
  if (!qword_1005279A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005279A8);
  }
  return result;
}

unint64_t sub_1002C7294()
{
  unint64_t result = qword_1005279B0;
  if (!qword_1005279B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005279B0);
  }
  return result;
}

unint64_t sub_1002C72E8()
{
  unint64_t result = qword_1005279B8;
  if (!qword_1005279B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005279B8);
  }
  return result;
}

unint64_t sub_1002C733C()
{
  unint64_t result = qword_1005279C0;
  if (!qword_1005279C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005279C0);
  }
  return result;
}

unint64_t sub_1002C7390()
{
  unint64_t result = qword_1005279C8;
  if (!qword_1005279C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005279C8);
  }
  return result;
}

uint64_t sub_1002C73E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VisualLookupClassifier.SearchState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002C74F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualLookupClassifier.SearchState.CodingKeys()
{
  return &type metadata for VisualLookupClassifier.SearchState.CodingKeys;
}

ValueMetadata *type metadata accessor for VisualLookupClassifier.SearchState.SearchableCodingKeys()
{
  return &type metadata for VisualLookupClassifier.SearchState.SearchableCodingKeys;
}

ValueMetadata *type metadata accessor for VisualLookupClassifier.SearchState.SearchingCodingKeys()
{
  return &type metadata for VisualLookupClassifier.SearchState.SearchingCodingKeys;
}

ValueMetadata *type metadata accessor for VisualLookupClassifier.SearchState.FinishedCodingKeys()
{
  return &type metadata for VisualLookupClassifier.SearchState.FinishedCodingKeys;
}

ValueMetadata *type metadata accessor for VisualLookupClassifier.SearchState.NoResultsCodingKeys()
{
  return &type metadata for VisualLookupClassifier.SearchState.NoResultsCodingKeys;
}

unsigned char *_s6Tamale22VisualLookupClassifierV11SearchStateO19SearchingCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002C7610);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualLookupClassifier.VLError()
{
  return &type metadata for VisualLookupClassifier.VLError;
}

unint64_t sub_1002C764C()
{
  unint64_t result = qword_1005279F8;
  if (!qword_1005279F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005279F8);
  }
  return result;
}

unint64_t sub_1002C76A4()
{
  unint64_t result = qword_100527A00;
  if (!qword_100527A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A00);
  }
  return result;
}

unint64_t sub_1002C76FC()
{
  unint64_t result = qword_100527A08;
  if (!qword_100527A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A08);
  }
  return result;
}

unint64_t sub_1002C7754()
{
  unint64_t result = qword_100527A10;
  if (!qword_100527A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A10);
  }
  return result;
}

unint64_t sub_1002C77AC()
{
  unint64_t result = qword_100527A18;
  if (!qword_100527A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A18);
  }
  return result;
}

unint64_t sub_1002C7804()
{
  unint64_t result = qword_100527A20;
  if (!qword_100527A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A20);
  }
  return result;
}

unint64_t sub_1002C785C()
{
  unint64_t result = qword_100527A28;
  if (!qword_100527A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A28);
  }
  return result;
}

unint64_t sub_1002C78B4()
{
  unint64_t result = qword_100527A30;
  if (!qword_100527A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A30);
  }
  return result;
}

unint64_t sub_1002C790C()
{
  unint64_t result = qword_100527A38;
  if (!qword_100527A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A38);
  }
  return result;
}

unint64_t sub_1002C7964()
{
  unint64_t result = qword_100527A40;
  if (!qword_100527A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A40);
  }
  return result;
}

unint64_t sub_1002C79BC()
{
  unint64_t result = qword_100527A48;
  if (!qword_100527A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A48);
  }
  return result;
}

unint64_t sub_1002C7A14()
{
  unint64_t result = qword_100527A50;
  if (!qword_100527A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527A50);
  }
  return result;
}

unint64_t sub_1002C7A6C()
{
  unint64_t result = qword_100527A58[0];
  if (!qword_100527A58[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100527A58);
  }
  return result;
}

uint64_t sub_1002C7AC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6261686372616573 && a2 == 0xEA0000000000656CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69686372616573 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746C757365526F6ELL && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1002C7C98()
{
  return sub_1002C6EE4();
}

void sub_1002C7CB0()
{
  type metadata accessor for AppConfiguration();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Optional();
    if (v1 <= 0x3F)
    {
      sub_1002DD874(319, &qword_100527AE0, (uint64_t (*)(uint64_t))type metadata accessor for ResultLookupState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v2 <= 0x3F)
      {
        sub_1002DD874(319, (unint64_t *)&qword_100522D60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v3 <= 0x3F)
        {
          sub_1002DD874(319, (unint64_t *)&qword_10051BBC0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t sub_1002C7F20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v559 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v559 - 8);
  int v568 = *(_DWORD *)(v4 + 80);
  uint64_t v569 = v4;
  if (*(_DWORD *)(v4 + 84)) {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  size_t v572 = v5;
  uint64_t v561 = *(void *)(a3 + 16);
  uint64_t v560 = *(void *)(v561 - 8);
  int v566 = *(_DWORD *)(v560 + 80);
  uint64_t v574 = v566;
  size_t v6 = *(void *)(v560 + 64);
  if (!*(_DWORD *)(v560 + 84)) {
    ++v6;
  }
  size_t v570 = v6;
  uint64_t v551 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v551 - 8);
  uint64_t v8 = v7;
  int v564 = *(_DWORD *)(v7 + 80);
  uint64_t v539 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v9 = *(void *)(v539 - 8);
  int v562 = *(_DWORD *)(v9 + 80);
  uint64_t v545 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v545 - 8);
  uint64_t v11 = v7;
  int v12 = *(_DWORD *)(v10 + 80);
  uint64_t v553 = *(void *)(v11 + 64) + 3;
  unint64_t v13 = ((((v553 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = v14 + 8;
  uint64_t v538 = v562 + 16;
  uint64_t v555 = v562;
  unint64_t v16 = (v555 + 16 + ((((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v555;
  uint64_t v558 = v9;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v17 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v9 + 64) + 1;
  }
  size_t v537 = v17;
  uint64_t v18 = v17 + 7;
  unint64_t v19 = ((((v17 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v19 <= v15) {
    unint64_t v19 = v14 + 8;
  }
  unint64_t v20 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = v20 + 8;
  unint64_t v22 = (((v20 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v541 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v541 > v19) {
    unint64_t v19 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  }
  if (v21 > v19) {
    unint64_t v19 = v21;
  }
  if (v15 <= v19) {
    unint64_t v23 = v19;
  }
  else {
    unint64_t v23 = v15;
  }
  unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v549 = v23 + 1;
  unint64_t v554 = v23;
  if ((v23 & 0xFFFFFFFFFFFFFFF8) + 65 <= v23 + 1) {
    unint64_t v25 = v23 + 1;
  }
  else {
    unint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  uint64_t v552 = v8;
  unsigned int v547 = *(_DWORD *)(v8 + 84);
  int v546 = *(_DWORD *)(v10 + 84);
  uint64_t v543 = v12 + 16;
  uint64_t v544 = *(void *)(v545 - 8);
  uint64_t v26 = *(void *)(v544 + 64);
  uint64_t v27 = v26 + v12;
  uint64_t v548 = *(_DWORD *)(v10 + 80);
  uint64_t v28 = v26 + 7;
  unint64_t v540 = (v26 + 7 + ((v27 + (v543 & ~(unint64_t)v12)) & ~(unint64_t)v12)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v550 = v25;
  if (v25 + 1 > v29) {
    unint64_t v29 = v25 + 1;
  }
  unint64_t __n = ((v22 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v29 <= __n) {
    unint64_t v29 = ((v22 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v29 <= ((((v540 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v29 = ((((v540 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v29 <= 0x48) {
    unint64_t v29 = 72;
  }
  unint64_t v571 = v29;
  uint64_t v30 = type metadata accessor for ColorScheme();
  uint64_t v556 = *(void *)(v30 - 8);
  uint64_t v557 = v30;
  int v31 = *(_DWORD *)(v556 + 80);
  uint64_t v32 = v31 & 0xF8;
  if (*(void *)(v556 + 64) <= 8uLL) {
    uint64_t v33 = 8;
  }
  else {
    uint64_t v33 = *(void *)(*(void *)(v30 - 8) + 64);
  }
  uint64_t v34 = type metadata accessor for ContentSizeCategory();
  int v35 = *(_DWORD *)(*(void *)(v34 - 8) + 80);
  uint64_t v36 = v35 & 0xF8 | 7;
  if (*(void *)(*(void *)(v34 - 8) + 64) <= 8uLL) {
    uint64_t v37 = 8;
  }
  else {
    uint64_t v37 = *(void *)(*(void *)(v34 - 8) + 64);
  }
  uint64_t v576 = v564 & 0xF8 | v562 | v12 | 7u;
  unint64_t v38 = v566 | (unint64_t)v568 | v32 | v576 | v36;
  if (v38 != 7
    || ((v566 | v568 | v564 | v562 | v12 | v31 | v35) & 0x100000) != 0
    || (uint64_t v39 = v568 | 7,
        uint64_t v40 = v568 + 32,
        size_t v41 = ((v568
              + 3
              + v572
              + ((v40
                + ((((v568 + 30) & ~(unint64_t)v568) + v572) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v568)) & ~(unint64_t)v568)
            + v572,
        ((v37
        + ((v33
          + v36
          + 1
          + ((v32
            + 24
            + ((((((((((v576
                      + v570
                      + ((((((v41 + ((v39 + 6) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8)
                        + v566
                        + 16) & ~(unint64_t)v566)
                      + 1) & ~v576)
                    + v571
                    + 1
                    + 9) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 71) & 0xFFFFFFFFFFFFFFF8)) & ~v32 & 0xFFFFFFFFFFFFFFF8)) & ~v36)
        + 24) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    uint64_t v53 = *a2;
    *(void *)a1 = *a2;
    uint64_t v54 = v53 + ((v38 + 16) & ~v38);
  }
  else
  {
    uint64_t v530 = v568 + 3;
    size_t v531 = ((v530
           + v572
           + ((v568
             + 32
             + ((((v568 + 30) & ~(unint64_t)v568) + v572) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v568)) & ~(unint64_t)v568)
         + v572;
    unint64_t v532 = ((((v41 + (((v568 | 7) + 6) & ~(v568 | 7))) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8)
         + v566
         + 16;
    uint64_t v526 = v27;
    uint64_t v527 = v28;
    uint64_t v525 = v18;
    uint64_t v563 = v32 + 24;
    unint64_t v565 = ~v32 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v533 = v33 + v36 + 1;
    uint64_t v534 = v36;
    uint64_t v567 = v33;
    uint64_t v535 = *(void *)(v34 - 8);
    uint64_t v536 = v37;
    uint64_t v528 = v34;
    unint64_t v42 = ~(unint64_t)v568;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    uint64_t v43 = (a1 + v39 + 6) & ~v39;
    uint64_t v44 = ((unint64_t)a2 + v39 + 6) & ~v39;
    *(unsigned char *)uint64_t v43 = *(unsigned char *)v44;
    uint64_t v529 = v43;
    *(unsigned char *)(v43 | 1) = *(unsigned char *)(v44 | 1);
    uint64_t v45 = (_OWORD *)((v43 + 9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v46 = (_OWORD *)((v44 + 9) & 0xFFFFFFFFFFFFFFF8);
    _OWORD *v45 = *v46;
    unint64_t v47 = ((unint64_t)v45 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = ((unint64_t)v46 + 19) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v47 = *(_DWORD *)v48;
    *(unsigned char *)(v47 + 4) = *(unsigned char *)(v48 + 4);
    *(unsigned char *)(v47 + 5) = *(unsigned char *)(v48 + 5);
    uint64_t v49 = (void *)((v568 + 6 + v47) & v42);
    uint64_t v50 = (const void *)((v568 + 6 + v48) & v42);
    uint64_t v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v569 + 48);
    if (v51(v50, 1, v559))
    {
      size_t v52 = v572;
      memcpy(v49, v50, v572);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v569 + 16))(v49, v50, v559);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v569 + 56))(v49, 0, 1, v559);
      size_t v52 = v572;
    }
    *((unsigned char *)v49 + v52) = *((unsigned char *)v50 + v52);
    unint64_t v55 = ((unint64_t)v49 + v52) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v56 = ((unint64_t)v50 + v52) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v57 = *(void *)(v56 + 8);
    *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
    *(void *)(v55 + 8) = v57;
    *(void *)(v55 + 20) = *(void *)(v56 + 20);
    *(unsigned char *)(v55 + 28) = *(unsigned char *)(v56 + 28);
    *(unsigned char *)(v55 + 29) = *(unsigned char *)(v56 + 29);
    *(unsigned char *)(v55 + 30) = *(unsigned char *)(v56 + 30);
    *(unsigned char *)(v55 + 31) = *(unsigned char *)(v56 + 31);
    uint64_t v58 = (char *)((v40 + v55) & v42);
    uint64_t v59 = (const void *)((v40 + v56) & v42);
    if (v51(v59, 1, v559))
    {
      memcpy(v58, v59, v52);
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v569 + 16))(v58, v59, v559);
      size_t v52 = v572;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v569 + 56))(v58, 0, 1, v559);
    }
    uint64_t v60 = ~v574;
    uint64_t v61 = &v58[v52];
    *uint64_t v61 = *((unsigned char *)v59 + v52);
    v61[1] = *((unsigned char *)v59 + v52 + 1);
    v61[2] = *((unsigned char *)v59 + v52 + 2);
    uint64_t v62 = (void *)((unint64_t)&v58[v52 + v530] & v42);
    uint64_t v63 = (const void *)(((unint64_t)v59 + v52 + v530) & v42);
    if (v51(v63, 1, v559))
    {
      memcpy(v62, v63, v52);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v569 + 16))(v62, v63, v559);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v569 + 56))(v62, 0, 1, v559);
    }
    uint64_t v64 = ~v576;
    *(unsigned char *)(v531 + v529) = *(unsigned char *)(v531 + v44);
    unint64_t v65 = (v531 + v529) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = (v531 + v44) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v65 + 8) = *(void *)(v66 + 8);
    *(void *)(v65 + 16) = *(void *)(v66 + 16);
    *(_WORD *)(v65 + 24) = *(_WORD *)(v66 + 24);
    *(_WORD *)(v65 + 26) = *(_WORD *)(v66 + 26);
    __int16 v67 = *(_WORD *)(v66 + 28);
    *(unsigned char *)(v65 + 30) = *(unsigned char *)(v66 + 30);
    *(_WORD *)(v65 + 28) = v67;
    char v68 = (void *)((v65 + 38) & 0xFFFFFFFFFFFFFFF8);
    char v69 = (void *)((v66 + 38) & 0xFFFFFFFFFFFFFFF8);
    *char v68 = *v69;
    v68[1] = v69[1];
    char v70 = (void *)((v532 + a1) & v60);
    uint64_t v71 = (const void *)(((unint64_t)a2 + v532) & v60);
    uint64_t v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v560 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v72(v71, 1, v561))
    {
      size_t v73 = v570;
      memcpy(v70, v71, v570);
      size_t v74 = v571 + 1;
      uint64_t v75 = v558;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v560 + 16))(v70, v71, v561);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v560 + 56))(v70, 0, 1, v561);
      size_t v74 = v571 + 1;
      uint64_t v75 = v558;
      size_t v73 = v570;
    }
    *((unsigned char *)v70 + v73) = *((unsigned char *)v71 + v73);
    uint64_t v76 = ((unint64_t)v70 + v73 + v576 + 1) & v64;
    uint64_t v77 = ((unint64_t)v71 + v73 + v576 + 1) & v64;
    unsigned int v78 = *(unsigned __int8 *)(v77 + v571);
    if ((v78 ^ 0xFF) < 0xF5)
    {
LABEL_67:
      memcpy((void *)(((unint64_t)v70 + v73 + v576 + 1) & v64), (const void *)v77, v74);
    }
    else
    {
      unsigned int v79 = v78 - 10;
      if (v78 >= 0xA)
      {
        if (v571 <= 3) {
          uint64_t v80 = v571;
        }
        else {
          uint64_t v80 = 4;
        }
        switch(v80)
        {
          case 1:
            int v81 = *(unsigned __int8 *)v77;
            if (v571 < 4) {
              goto LABEL_60;
            }
            goto LABEL_64;
          case 2:
            int v81 = *(unsigned __int16 *)v77;
            if (v571 < 4) {
              goto LABEL_60;
            }
            goto LABEL_64;
          case 3:
            int v81 = *(unsigned __int16 *)(((unint64_t)v71 + v73 + v576 + 1) & v64) | (*(unsigned __int8 *)((((unint64_t)v71 + v73 + v576 + 1) & v64) + 2) << 16);
            if (v571 < 4) {
              goto LABEL_60;
            }
            goto LABEL_64;
          case 4:
            int v81 = *(_DWORD *)v77;
            if (v571 < 4) {
LABEL_60:
            }
              unsigned int v78 = (v81 | (v79 << (8 * v571))) + 10;
            else {
LABEL_64:
            }
              unsigned int v78 = v81 + 10;
            break;
          default:
            break;
        }
      }
      uint64_t v82 = ~v555;
      switch(v78)
      {
        case 0u:
          *(void *)uint64_t v76 = *(void *)v77;
          *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 8) = *(void *)(v77 + 8);
          *(unsigned char *)(v76 + v571) = 0;
          swift_bridgeObjectRetain();
          break;
        case 1u:
          *(void *)uint64_t v76 = *(void *)v77;
          *(unsigned char *)(v76 + v571) = 1;
          swift_bridgeObjectRetain();
          break;
        case 2u:
          unsigned int v127 = *(unsigned __int8 *)(v77 + v550);
          unsigned int v128 = v127 - 2;
          if (v127 >= 2)
          {
            if (v550 <= 3) {
              uint64_t v129 = v550;
            }
            else {
              uint64_t v129 = 4;
            }
            switch(v129)
            {
              case 1:
                int v130 = *(unsigned __int8 *)v77;
                goto LABEL_150;
              case 2:
                int v130 = *(unsigned __int16 *)v77;
                goto LABEL_150;
              case 3:
                int v130 = *(unsigned __int16 *)v77 | (*(unsigned __int8 *)(v77 + 2) << 16);
                goto LABEL_150;
              case 4:
                int v130 = *(_DWORD *)v77;
LABEL_150:
                if (v550 < 4) {
                  unsigned int v127 = (v130 | (v128 << (8 * v550))) + 2;
                }
                else {
                  unsigned int v127 = v130 + 2;
                }
                break;
              default:
                break;
            }
          }
          unsigned int v197 = *(unsigned __int8 *)(v77 + v554);
          if (v127 == 1)
          {
            unsigned int v198 = v197 - 6;
            if (v197 >= 6)
            {
              if (v554 <= 3) {
                uint64_t v199 = v554;
              }
              else {
                uint64_t v199 = 4;
              }
              switch(v199)
              {
                case 1:
                  int v200 = *(unsigned __int8 *)v77;
                  goto LABEL_195;
                case 2:
                  int v200 = *(unsigned __int16 *)v77;
                  goto LABEL_195;
                case 3:
                  int v200 = *(unsigned __int16 *)v77 | (*(unsigned __int8 *)(v77 + 2) << 16);
                  goto LABEL_195;
                case 4:
                  int v200 = *(_DWORD *)v77;
LABEL_195:
                  if (v554 < 4) {
                    v200 |= v198 << (8 * v554);
                  }
                  unsigned int v197 = v200 + 6;
                  break;
                default:
                  break;
              }
            }
            switch(v197)
            {
              case 1u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v321 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v322 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v321 = *v322;
                uint64_t v323 = (_OWORD *)(((unint64_t)v321 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v324 = (long long *)(((unint64_t)v322 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v325 = *v324;
                long long v326 = v324[1];
                long long v327 = v324[3];
                v323[2] = v324[2];
                v323[3] = v327;
                *uint64_t v323 = v325;
                v323[1] = v326;
                long long v328 = (void *)(((unint64_t)v323 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v329 = (void *)(((unint64_t)v324 + 71) & 0xFFFFFFFFFFFFFFF8);
                *long long v328 = *v329;
                uint64_t v330 = (void *)(((unint64_t)v328 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v331 = (void *)(((unint64_t)v329 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v330 = *v331;
                unint64_t v332 = ((unint64_t)v330 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v333 = ((unint64_t)v331 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v332 = *(void *)v333;
                *(unsigned char *)(v332 + 8) = *(unsigned char *)(v333 + 8);
                v334 = (void *)(((unint64_t)v330 + 31) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v335 = (void *)(((unint64_t)v331 + 31) & 0xFFFFFFFFFFFFFFF8);
                void *v334 = *v335;
                v334[1] = v335[1];
                uint64_t v336 = (void *)(((unint64_t)v334 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v337 = (void *)(((unint64_t)v335 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v336 = *v337;
                v336[1] = v337[1];
                v579 = (void *)(((unint64_t)v336 + v538) & v82);
                uint64_t v338 = (const void *)(((unint64_t)v337 + v538) & v82);
                uint64_t v339 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v75 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v339(v338, 1, v539))
                {
                  memcpy(v579, v338, v537);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v75 + 16))(v579, v338, v539);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v579, 0, 1, v539);
                }
                unint64_t v509 = ((unint64_t)v579 + v525) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v510 = ((unint64_t)v338 + v525) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v511 = *(void *)(v510 + 8);
                if ((v511 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)unint64_t v509 = *(_OWORD *)v510;
                }
                else
                {
                  uint64_t v515 = *(void *)v510;
                  sub_100038528(*(void *)v510, *(void *)(v510 + 8));
                  *(void *)unint64_t v509 = v515;
                  *(void *)(v509 + 8) = v511;
                }
                unint64_t v516 = (v509 + 23) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v517 = (v510 + 23) & 0xFFFFFFFFFFFFFFF8;
                if (*(void *)v517 < 0xFFFFFFFFuLL)
                {
                  long long v519 = *(_OWORD *)v517;
                  *(void *)(v516 + 16) = *(void *)(v517 + 16);
                  *(_OWORD *)unint64_t v516 = v519;
                }
                else
                {
                  *(void *)unint64_t v516 = *(void *)v517;
                  uint64_t v518 = *(void *)(v517 + 16);
                  *(void *)(v516 + 8) = *(void *)(v517 + 8);
                  *(void *)(v516 + 16) = v518;
                  swift_bridgeObjectRetain();
                  swift_retain();
                }
                unint64_t v401 = v549;
                *(unsigned char *)(v76 + v554) = 1;
                goto LABEL_209;
              case 2u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v340 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v341 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v340 = *v341;
                uint64_t v342 = (_OWORD *)(((unint64_t)v340 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v343 = (long long *)(((unint64_t)v341 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v344 = *v343;
                long long v345 = v343[1];
                long long v346 = v343[3];
                v342[2] = v343[2];
                v342[3] = v346;
                *uint64_t v342 = v344;
                v342[1] = v345;
                uint64_t v347 = (void *)(((unint64_t)v342 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v348 = (void *)(((unint64_t)v343 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v347 = *v348;
                v347[1] = v348[1];
                uint64_t v349 = (void *)(((unint64_t)v348 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v350 = (void *)(((unint64_t)v347 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v350 = *v349;
                uint64_t v351 = (void *)(((unint64_t)v349 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v352 = (void *)(((unint64_t)v350 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v352 = *v351;
                uint64_t v353 = (void *)(((unint64_t)v351 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v354 = (void *)(((unint64_t)v352 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v354 = *v353;
                uint64_t v355 = (void *)(((unint64_t)v353 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v356 = (void *)(((unint64_t)v354 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v356 = *v355;
                uint64_t v357 = (void *)(((unint64_t)v355 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v358 = (void *)(((unint64_t)v356 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v358 = *v357;
                unint64_t v359 = ((unint64_t)v358 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v360 = ((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v361 = *(void **)v360;
                *(void *)unint64_t v359 = *(void *)v360;
                *(unsigned char *)(v359 + 8) = *(unsigned char *)(v360 + 8);
                *(unsigned char *)(v76 + v554) = 2;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v362 = v361;
                goto LABEL_208;
              case 3u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v363 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v364 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v363 = *v364;
                uint64_t v365 = (_OWORD *)(((unint64_t)v363 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v366 = (long long *)(((unint64_t)v364 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v367 = *v366;
                long long v368 = v366[1];
                long long v369 = v366[3];
                v365[2] = v366[2];
                v365[3] = v369;
                *uint64_t v365 = v367;
                v365[1] = v368;
                uint64_t v370 = (void *)(((unint64_t)v365 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v371 = (void *)(((unint64_t)v366 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v370 = *v371;
                v370[1] = v371[1];
                uint64_t v372 = (void *)(((unint64_t)v370 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v373 = (void *)(((unint64_t)v371 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v372 = *v373;
                uint64_t v374 = (void *)(((unint64_t)v372 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v375 = (void *)(((unint64_t)v373 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v374 = *v375;
                *(void *)(((unint64_t)v374 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v375
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                char v376 = 3;
                goto LABEL_205;
              case 4u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v377 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v378 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v377 = *v378;
                uint64_t v379 = (_OWORD *)(((unint64_t)v377 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v380 = (long long *)(((unint64_t)v378 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v381 = *v380;
                long long v382 = v380[1];
                long long v383 = v380[3];
                v379[2] = v380[2];
                v379[3] = v383;
                *uint64_t v379 = v381;
                v379[1] = v382;
                uint64_t v384 = (void *)(((unint64_t)v379 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v385 = (void *)(((unint64_t)v380 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v384 = *v385;
                v384[1] = v385[1];
                uint64_t v386 = (void *)(((unint64_t)v384 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v387 = (void *)(((unint64_t)v385 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v386 = *v387;
                uint64_t v388 = (void *)(((unint64_t)v386 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v389 = (void *)(((unint64_t)v387 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v388 = *v389;
                *(void *)(((unint64_t)v388 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v389
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                char v376 = 4;
LABEL_205:
                *(unsigned char *)(v76 + v554) = v376;
                swift_bridgeObjectRetain();
                swift_retain();
                goto LABEL_208;
              case 5u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v390 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v391 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v391 = *v390;
                uint64_t v392 = (_OWORD *)(((unint64_t)v391 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v393 = (long long *)(((unint64_t)v390 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v394 = *v393;
                long long v395 = v393[1];
                long long v396 = v393[3];
                v392[2] = v393[2];
                v392[3] = v396;
                *uint64_t v392 = v394;
                v392[1] = v395;
                uint64_t v397 = (void *)(((unint64_t)v392 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v398 = (void *)(((unint64_t)v393 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v397 = *v398;
                v397[1] = v398[1];
                uint64_t v399 = (void *)(((unint64_t)v397 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v400 = (void *)(((unint64_t)v398 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v399 = *v400;
                *(void *)(((unint64_t)v399 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v400
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *(unsigned char *)(v76 + v554) = 5;
                goto LABEL_207;
              default:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v310 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                v311 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v310 = *v311;
                v312 = (_OWORD *)(((unint64_t)v310 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v313 = (long long *)(((unint64_t)v311 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v314 = *v313;
                long long v315 = v313[1];
                long long v316 = v313[3];
                v312[2] = v313[2];
                v312[3] = v316;
                _OWORD *v312 = v314;
                v312[1] = v315;
                v317 = (void *)(((unint64_t)v312 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v318 = (void *)(((unint64_t)v313 + 71) & 0xFFFFFFFFFFFFFFF8);
                void *v317 = *v318;
                v317[1] = v318[1];
                uint64_t v319 = (void *)(((unint64_t)v317 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v320 = (void *)(((unint64_t)v318 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v319 = *v320;
                *(void *)(((unint64_t)v319 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v320
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *(unsigned char *)(v76 + v554) = 0;
LABEL_207:
                swift_bridgeObjectRetain();
LABEL_208:
                unint64_t v401 = v549;
LABEL_209:
                unint64_t v402 = v401 + v76;
                unint64_t v403 = v401 + v77;
                uint64_t v580 = v76;
                unint64_t v404 = (v401 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v405 = (v401 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
                id v406 = *(id *)v405;
                uint64_t v407 = *(void **)(v405 + 8);
                uint64_t v408 = *(void *)(v405 + 16);
                unsigned __int8 v409 = *(unsigned char *)(v405 + 24);
                sub_1000506C4(*(id *)v405, v407, v408, v409);
                *(void *)unint64_t v404 = v406;
                *(void *)(v404 + 8) = v407;
                *(void *)(v404 + 16) = v408;
                *(unsigned char *)(v404 + 24) = v409;
                uint64_t v76 = v580;
                unint64_t v410 = (v402 + 39) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v411 = (v403 + 39) & 0xFFFFFFFFFFFFFFF8;
                id v412 = *(id *)v411;
                uint64_t v413 = *(void **)(v411 + 8);
                uint64_t v414 = *(void *)(v411 + 16);
                unsigned __int8 v415 = *(unsigned char *)(v411 + 24);
                sub_1000506C4(*(id *)v411, v413, v414, v415);
                *(void *)unint64_t v410 = v412;
                *(void *)(v410 + 8) = v413;
                *(void *)(v410 + 16) = v414;
                char v416 = 1;
                *(unsigned char *)(v410 + 24) = v415;
                break;
            }
          }
          else
          {
            unsigned int v201 = v197 - 6;
            if (v197 >= 6)
            {
              if (v554 <= 3) {
                uint64_t v202 = v554;
              }
              else {
                uint64_t v202 = 4;
              }
              switch(v202)
              {
                case 1:
                  int v203 = *(unsigned __int8 *)v77;
                  goto LABEL_213;
                case 2:
                  int v203 = *(unsigned __int16 *)v77;
                  goto LABEL_213;
                case 3:
                  int v203 = *(unsigned __int16 *)v77 | (*(unsigned __int8 *)(v77 + 2) << 16);
                  goto LABEL_213;
                case 4:
                  int v203 = *(_DWORD *)v77;
LABEL_213:
                  if (v554 < 4) {
                    v203 |= v201 << (8 * v554);
                  }
                  unsigned int v197 = v203 + 6;
                  break;
                default:
                  break;
              }
            }
            switch(v197)
            {
              case 1u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v428 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                v429 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v428 = *v429;
                uint64_t v430 = (_OWORD *)(((unint64_t)v428 + 11) & 0xFFFFFFFFFFFFFFF8);
                v431 = (long long *)(((unint64_t)v429 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v432 = *v431;
                long long v433 = v431[1];
                long long v434 = v431[3];
                v430[2] = v431[2];
                v430[3] = v434;
                *uint64_t v430 = v432;
                v430[1] = v433;
                uint64_t v435 = (void *)(((unint64_t)v430 + 71) & 0xFFFFFFFFFFFFFFF8);
                v436 = (void *)(((unint64_t)v431 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v435 = *v436;
                uint64_t v437 = (void *)(((unint64_t)v435 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v438 = (void *)(((unint64_t)v436 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v437 = *v438;
                unint64_t v439 = ((unint64_t)v437 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v440 = ((unint64_t)v438 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v439 = *(void *)v440;
                *(unsigned char *)(v439 + 8) = *(unsigned char *)(v440 + 8);
                v441 = (void *)(((unint64_t)v437 + 31) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v442 = (void *)(((unint64_t)v438 + 31) & 0xFFFFFFFFFFFFFFF8);
                void *v441 = *v442;
                v441[1] = v442[1];
                v443 = (void *)(((unint64_t)v441 + 23) & 0xFFFFFFFFFFFFFFF8);
                v444 = (void *)(((unint64_t)v442 + 23) & 0xFFFFFFFFFFFFFFF8);
                void *v443 = *v444;
                v443[1] = v444[1];
                v581 = (void *)(((unint64_t)v443 + v538) & v82);
                long long v445 = (const void *)(((unint64_t)v444 + v538) & v82);
                long long v446 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v75 + 48);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v446(v445, 1, v539))
                {
                  memcpy(v581, v445, v537);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v75 + 16))(v581, v445, v539);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v581, 0, 1, v539);
                }
                unint64_t v512 = ((unint64_t)v581 + v525) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v513 = ((unint64_t)v445 + v525) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v514 = *(void *)(v513 + 8);
                if ((v514 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)unint64_t v512 = *(_OWORD *)v513;
                }
                else
                {
                  uint64_t v520 = *(void *)v513;
                  sub_100038528(*(void *)v513, *(void *)(v513 + 8));
                  *(void *)unint64_t v512 = v520;
                  *(void *)(v512 + 8) = v514;
                }
                unint64_t v521 = (v512 + 23) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v522 = (v513 + 23) & 0xFFFFFFFFFFFFFFF8;
                if (*(void *)v522 < 0xFFFFFFFFuLL)
                {
                  long long v524 = *(_OWORD *)v522;
                  *(void *)(v521 + 16) = *(void *)(v522 + 16);
                  *(_OWORD *)unint64_t v521 = v524;
                }
                else
                {
                  *(void *)unint64_t v521 = *(void *)v522;
                  uint64_t v523 = *(void *)(v522 + 16);
                  *(void *)(v521 + 8) = *(void *)(v522 + 8);
                  *(void *)(v521 + 16) = v523;
                  swift_bridgeObjectRetain();
                  swift_retain();
                }
                unint64_t v508 = v550;
                char v416 = 0;
                *(unsigned char *)(v76 + v554) = 1;
                goto LABEL_228;
              case 2u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v447 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v448 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v447 = *v448;
                v449 = (_OWORD *)(((unint64_t)v447 + 11) & 0xFFFFFFFFFFFFFFF8);
                v450 = (long long *)(((unint64_t)v448 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v451 = *v450;
                long long v452 = v450[1];
                long long v453 = v450[3];
                v449[2] = v450[2];
                v449[3] = v453;
                _OWORD *v449 = v451;
                v449[1] = v452;
                uint64_t v454 = (void *)(((unint64_t)v449 + 71) & 0xFFFFFFFFFFFFFFF8);
                v455 = (void *)(((unint64_t)v450 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v454 = *v455;
                v454[1] = v455[1];
                v456 = (void *)(((unint64_t)v455 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v457 = (void *)(((unint64_t)v454 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v457 = *v456;
                v458 = (void *)(((unint64_t)v456 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v459 = (void *)(((unint64_t)v457 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v459 = *v458;
                v460 = (void *)(((unint64_t)v458 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v461 = (void *)(((unint64_t)v459 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v461 = *v460;
                v462 = (void *)(((unint64_t)v460 + 15) & 0xFFFFFFFFFFFFFFF8);
                v463 = (void *)(((unint64_t)v461 + 15) & 0xFFFFFFFFFFFFFFF8);
                void *v463 = *v462;
                long long v464 = (void *)(((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFFFF8);
                long long v465 = (void *)(((unint64_t)v463 + 15) & 0xFFFFFFFFFFFFFFF8);
                *long long v465 = *v464;
                unint64_t v466 = ((unint64_t)v465 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v467 = ((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v468 = *(void **)v467;
                *(void *)unint64_t v466 = *(void *)v467;
                *(unsigned char *)(v466 + 8) = *(unsigned char *)(v467 + 8);
                *(unsigned char *)(v76 + v554) = 2;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v469 = v468;
                goto LABEL_226;
              case 3u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v470 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v471 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v470 = *v471;
                v472 = (_OWORD *)(((unint64_t)v470 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v473 = (long long *)(((unint64_t)v471 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v474 = *v473;
                long long v475 = v473[1];
                long long v476 = v473[3];
                v472[2] = v473[2];
                v472[3] = v476;
                _OWORD *v472 = v474;
                v472[1] = v475;
                long long v477 = (void *)(((unint64_t)v472 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v478 = (void *)(((unint64_t)v473 + 71) & 0xFFFFFFFFFFFFFFF8);
                *long long v477 = *v478;
                v477[1] = v478[1];
                uint64_t v479 = (void *)(((unint64_t)v477 + 23) & 0xFFFFFFFFFFFFFFF8);
                v480 = (void *)(((unint64_t)v478 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v479 = *v480;
                v481 = (void *)(((unint64_t)v479 + 15) & 0xFFFFFFFFFFFFFFF8);
                long long v482 = (void *)(((unint64_t)v480 + 15) & 0xFFFFFFFFFFFFFFF8);
                void *v481 = *v482;
                *(void *)(((unint64_t)v481 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v482
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                char v483 = 3;
                goto LABEL_223;
              case 4u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                uint64_t v484 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v485 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                *uint64_t v484 = *v485;
                v486 = (_OWORD *)(((unint64_t)v484 + 11) & 0xFFFFFFFFFFFFFFF8);
                v487 = (long long *)(((unint64_t)v485 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v488 = *v487;
                long long v489 = v487[1];
                long long v490 = v487[3];
                v486[2] = v487[2];
                v486[3] = v490;
                _OWORD *v486 = v488;
                v486[1] = v489;
                uint64_t v491 = (void *)(((unint64_t)v486 + 71) & 0xFFFFFFFFFFFFFFF8);
                v492 = (void *)(((unint64_t)v487 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v491 = *v492;
                v491[1] = v492[1];
                uint64_t v493 = (void *)(((unint64_t)v491 + 23) & 0xFFFFFFFFFFFFFFF8);
                v494 = (void *)(((unint64_t)v492 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v493 = *v494;
                uint64_t v495 = (void *)(((unint64_t)v493 + 15) & 0xFFFFFFFFFFFFFFF8);
                v496 = (void *)(((unint64_t)v494 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v495 = *v496;
                *(void *)(((unint64_t)v495 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v496
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                char v483 = 4;
LABEL_223:
                *(unsigned char *)(v76 + v554) = v483;
                swift_bridgeObjectRetain();
                swift_retain();
                goto LABEL_226;
              case 5u:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                v497 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                long long v498 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                *long long v498 = *v497;
                long long v499 = (_OWORD *)(((unint64_t)v498 + 11) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v500 = (long long *)(((unint64_t)v497 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v501 = *v500;
                long long v502 = v500[1];
                long long v503 = v500[3];
                v499[2] = v500[2];
                v499[3] = v503;
                *long long v499 = v501;
                v499[1] = v502;
                uint64_t v504 = (void *)(((unint64_t)v499 + 71) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v505 = (void *)(((unint64_t)v500 + 71) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v504 = *v505;
                v504[1] = v505[1];
                v506 = (void *)(((unint64_t)v504 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v507 = (void *)(((unint64_t)v505 + 23) & 0xFFFFFFFFFFFFFFF8);
                void *v506 = *v507;
                *(void *)(((unint64_t)v506 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v507
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *(unsigned char *)(v76 + v554) = 5;
                goto LABEL_225;
              default:
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
                v417 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
                uint64_t v418 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
                _DWORD *v417 = *v418;
                uint64_t v419 = (_OWORD *)(((unint64_t)v417 + 11) & 0xFFFFFFFFFFFFFFF8);
                v420 = (long long *)(((unint64_t)v418 + 11) & 0xFFFFFFFFFFFFFFF8);
                long long v421 = *v420;
                long long v422 = v420[1];
                long long v423 = v420[3];
                v419[2] = v420[2];
                v419[3] = v423;
                *uint64_t v419 = v421;
                v419[1] = v422;
                v424 = (void *)(((unint64_t)v419 + 71) & 0xFFFFFFFFFFFFFFF8);
                v425 = (void *)(((unint64_t)v420 + 71) & 0xFFFFFFFFFFFFFFF8);
                void *v424 = *v425;
                v424[1] = v425[1];
                uint64_t v426 = (void *)(((unint64_t)v424 + 23) & 0xFFFFFFFFFFFFFFF8);
                v427 = (void *)(((unint64_t)v425 + 23) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v426 = *v427;
                *(void *)(((unint64_t)v426 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v427
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *(unsigned char *)(v76 + v554) = 0;
LABEL_225:
                swift_bridgeObjectRetain();
LABEL_226:
                char v416 = 0;
                break;
            }
          }
          unint64_t v508 = v550;
LABEL_228:
          *(unsigned char *)(v76 + v508) = v416;
          *(unsigned char *)(v76 + v571) = 2;
          break;
        case 3u:
          uint64_t v135 = *(void *)v77;
          long long v136 = *(void **)(v77 + 8);
          uint64_t v137 = *(void *)(v77 + 16);
          unint64_t v138 = *(void *)(v77 + 24);
          uint64_t v140 = *(void *)(v77 + 32);
          uint64_t v139 = *(void *)(v77 + 40);
          uint64_t v141 = *(void *)(v77 + 48);
          uint64_t v142 = *(void *)(v77 + 56);
          sub_100050624(*(void **)v77, v136, v137, v138);
          *(void *)uint64_t v76 = v135;
          *(void *)(v76 + 8) = v136;
          *(void *)(v76 + 16) = v137;
          *(void *)(v76 + 24) = v138;
          *(void *)(v76 + 32) = v140;
          *(void *)(v76 + 40) = v139;
          *(void *)(v76 + 48) = v141;
          *(void *)(v76 + 56) = v142;
          size_t v74 = v571 + 1;
          *(unsigned char *)(v76 + v571) = 3;
          break;
        case 4u:
          unsigned int v131 = *(unsigned __int8 *)(v77 + v554);
          unsigned int v132 = v131 - 6;
          if (v131 >= 6)
          {
            if (v554 <= 3) {
              uint64_t v133 = v554;
            }
            else {
              uint64_t v133 = 4;
            }
            switch(v133)
            {
              case 1:
                int v134 = *(unsigned __int8 *)v77;
                goto LABEL_169;
              case 2:
                int v134 = *(unsigned __int16 *)v77;
                goto LABEL_169;
              case 3:
                int v134 = *(unsigned __int16 *)v77 | (*(unsigned __int8 *)(v77 + 2) << 16);
                goto LABEL_169;
              case 4:
                int v134 = *(_DWORD *)v77;
LABEL_169:
                if (v554 < 4) {
                  unsigned int v131 = (v134 | (v132 << (8 * v554))) + 6;
                }
                else {
                  unsigned int v131 = v134 + 6;
                }
                break;
              default:
                break;
            }
          }
          switch(v131)
          {
            case 1u:
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
              uint64_t v215 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v216 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v215 = *v216;
              uint64_t v217 = (_OWORD *)(((unint64_t)v215 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v218 = (long long *)(((unint64_t)v216 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v219 = *v218;
              long long v220 = v218[1];
              long long v221 = v218[3];
              v217[2] = v218[2];
              v217[3] = v221;
              *uint64_t v217 = v219;
              v217[1] = v220;
              long long v222 = (void *)(((unint64_t)v217 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v223 = (void *)(((unint64_t)v218 + 71) & 0xFFFFFFFFFFFFFFF8);
              *long long v222 = *v223;
              uint64_t v224 = (void *)(((unint64_t)v222 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v225 = (void *)(((unint64_t)v223 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v224 = *v225;
              unint64_t v226 = ((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v227 = ((unint64_t)v225 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v226 = *(void *)v227;
              *(unsigned char *)(v226 + 8) = *(unsigned char *)(v227 + 8);
              long long v228 = (void *)(((unint64_t)v224 + 31) & 0xFFFFFFFFFFFFFFF8);
              long long v229 = (void *)(((unint64_t)v225 + 31) & 0xFFFFFFFFFFFFFFF8);
              *long long v228 = *v229;
              v228[1] = v229[1];
              uint64_t v230 = (void *)(((unint64_t)v228 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v231 = (void *)(((unint64_t)v229 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v230 = *v231;
              v230[1] = v231[1];
              v578 = (void *)(((unint64_t)v230 + v538) & v82);
              uint64_t v232 = (const void *)(((unint64_t)v231 + v538) & v82);
              v233 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v75 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v233(v232, 1, v539))
              {
                memcpy(v578, v232, v537);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v75 + 16))(v578, v232, v539);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v578, 0, 1, v539);
              }
              unint64_t v302 = ((unint64_t)v578 + v525) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v303 = ((unint64_t)v232 + v525) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v304 = *(void *)(v303 + 8);
              if ((v304 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)unint64_t v302 = *(_OWORD *)v303;
              }
              else
              {
                uint64_t v305 = *(void *)v303;
                sub_100038528(*(void *)v303, *(void *)(v303 + 8));
                *(void *)unint64_t v302 = v305;
                *(void *)(v302 + 8) = v304;
              }
              unint64_t v306 = (v302 + 23) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v307 = (v303 + 23) & 0xFFFFFFFFFFFFFFF8;
              if (*(void *)v307 < 0xFFFFFFFFuLL)
              {
                long long v309 = *(_OWORD *)v307;
                *(void *)(v306 + 16) = *(void *)(v307 + 16);
                *(_OWORD *)unint64_t v306 = v309;
              }
              else
              {
                *(void *)unint64_t v306 = *(void *)v307;
                uint64_t v308 = *(void *)(v307 + 16);
                *(void *)(v306 + 8) = *(void *)(v307 + 8);
                *(void *)(v306 + 16) = v308;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              unint64_t v295 = v549;
              *(unsigned char *)(v76 + v554) = 1;
              goto LABEL_183;
            case 2u:
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
              uint64_t v234 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
              long long v235 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v234 = *v235;
              long long v236 = (_OWORD *)(((unint64_t)v234 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v237 = (long long *)(((unint64_t)v235 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v238 = *v237;
              long long v239 = v237[1];
              long long v240 = v237[3];
              v236[2] = v237[2];
              v236[3] = v240;
              *long long v236 = v238;
              v236[1] = v239;
              uint64_t v241 = (void *)(((unint64_t)v236 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v242 = (void *)(((unint64_t)v237 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v241 = *v242;
              v241[1] = v242[1];
              uint64_t v243 = (void *)(((unint64_t)v242 + 23) & 0xFFFFFFFFFFFFFFF8);
              long long v244 = (void *)(((unint64_t)v241 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v244 = *v243;
              long long v245 = (void *)(((unint64_t)v243 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v246 = (void *)(((unint64_t)v244 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v246 = *v245;
              v247 = (void *)(((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v248 = (void *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v248 = *v247;
              uint64_t v249 = (void *)(((unint64_t)v247 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v250 = (void *)(((unint64_t)v248 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v250 = *v249;
              uint64_t v251 = (void *)(((unint64_t)v249 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v252 = (void *)(((unint64_t)v250 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v252 = *v251;
              unint64_t v253 = ((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v254 = ((unint64_t)v251 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v255 = *(void **)v254;
              *(void *)unint64_t v253 = *(void *)v254;
              *(unsigned char *)(v253 + 8) = *(unsigned char *)(v254 + 8);
              *(unsigned char *)(v76 + v554) = 2;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v256 = v255;
              goto LABEL_182;
            case 3u:
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
              long long v257 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v258 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v257 = *v258;
              uint64_t v259 = (_OWORD *)(((unint64_t)v257 + 11) & 0xFFFFFFFFFFFFFFF8);
              v260 = (long long *)(((unint64_t)v258 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v261 = *v260;
              long long v262 = v260[1];
              long long v263 = v260[3];
              v259[2] = v260[2];
              v259[3] = v263;
              _OWORD *v259 = v261;
              v259[1] = v262;
              uint64_t v264 = (void *)(((unint64_t)v259 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v265 = (void *)(((unint64_t)v260 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v264 = *v265;
              v264[1] = v265[1];
              uint64_t v266 = (void *)(((unint64_t)v264 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v267 = (void *)(((unint64_t)v265 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v266 = *v267;
              uint64_t v268 = (void *)(((unint64_t)v266 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v269 = (void *)(((unint64_t)v267 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v268 = *v269;
              *(void *)(((unint64_t)v268 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v269
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v270 = 3;
              goto LABEL_179;
            case 4u:
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
              uint64_t v271 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v272 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v271 = *v272;
              uint64_t v273 = (_OWORD *)(((unint64_t)v271 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v274 = (long long *)(((unint64_t)v272 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v275 = *v274;
              long long v276 = v274[1];
              long long v277 = v274[3];
              v273[2] = v274[2];
              v273[3] = v277;
              *uint64_t v273 = v275;
              v273[1] = v276;
              uint64_t v278 = (void *)(((unint64_t)v273 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v279 = (void *)(((unint64_t)v274 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v278 = *v279;
              v278[1] = v279[1];
              uint64_t v280 = (void *)(((unint64_t)v278 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v281 = (void *)(((unint64_t)v279 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v280 = *v281;
              uint64_t v282 = (void *)(((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v283 = (void *)(((unint64_t)v281 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v282 = *v283;
              *(void *)(((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v283
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v270 = 4;
LABEL_179:
              *(unsigned char *)(v76 + v554) = v270;
              swift_bridgeObjectRetain();
              swift_retain();
              goto LABEL_182;
            case 5u:
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
              uint64_t v284 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v285 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v285 = *v284;
              uint64_t v286 = (_OWORD *)(((unint64_t)v285 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v287 = (long long *)(((unint64_t)v284 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v288 = *v287;
              long long v289 = v287[1];
              long long v290 = v287[3];
              v286[2] = v287[2];
              v286[3] = v290;
              *uint64_t v286 = v288;
              v286[1] = v289;
              uint64_t v291 = (void *)(((unint64_t)v286 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v292 = (void *)(((unint64_t)v287 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v291 = *v292;
              v291[1] = v292[1];
              uint64_t v293 = (void *)(((unint64_t)v291 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v294 = (void *)(((unint64_t)v292 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v293 = *v294;
              *(void *)(((unint64_t)v293 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v294
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v76 + v554) = 5;
              goto LABEL_181;
            default:
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v552 + 16))(((unint64_t)v70 + v73 + v576 + 1) & v64, v77, v551);
              uint64_t v204 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v205 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v204 = *v205;
              uint64_t v206 = (_OWORD *)(((unint64_t)v204 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v207 = (long long *)(((unint64_t)v205 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v208 = *v207;
              long long v209 = v207[1];
              long long v210 = v207[3];
              v206[2] = v207[2];
              v206[3] = v210;
              *uint64_t v206 = v208;
              v206[1] = v209;
              long long v211 = (void *)(((unint64_t)v206 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v212 = (void *)(((unint64_t)v207 + 71) & 0xFFFFFFFFFFFFFFF8);
              void *v211 = *v212;
              v211[1] = v212[1];
              uint64_t v213 = (void *)(((unint64_t)v211 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v214 = (void *)(((unint64_t)v212 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v213 = *v214;
              *(void *)(((unint64_t)v213 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v214
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v76 + v554) = 0;
LABEL_181:
              swift_bridgeObjectRetain();
LABEL_182:
              unint64_t v295 = v549;
LABEL_183:
              uint64_t v296 = (void **)(((v77 | 7) + v295) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v297 = *v296;
              uint64_t v298 = (void *)(((v76 | 7) + v295) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v298 = *v296;
              uint64_t v299 = (void *)(((unint64_t)v298 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v300 = (void *)(((unint64_t)v296 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v299 = *v300;
              v299[1] = v300[1];
              *(unsigned char *)(v76 + v571) = 4;
              id v301 = v297;
              swift_bridgeObjectRetain();
              break;
          }
          break;
        case 5u:
          if (v547 < 0x7FFFFFFF)
          {
            unint64_t v152 = *(void *)(((((((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                             + 8);
            if (v152 >= 0xFFFFFFFF) {
              LODWORD(v152) = -1;
            }
            int v143 = v152 + 1;
          }
          else
          {
            int v143 = (*(uint64_t (**)(uint64_t))(v552 + 48))(v77);
          }
          if (v143)
          {
            memcpy((void *)v76, (const void *)v77, __n);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v552 + 16))(v76, v77, v551);
            uint64_t v159 = (_DWORD *)((v553 + v76) & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v160 = (_DWORD *)((v553 + v77) & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v159 = *v160;
            uint64_t v161 = (_OWORD *)(((unint64_t)v159 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v162 = (long long *)(((unint64_t)v160 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v163 = *v162;
            long long v164 = v162[1];
            long long v165 = v162[3];
            v161[2] = v162[2];
            v161[3] = v165;
            *uint64_t v161 = v163;
            v161[1] = v164;
            uint64_t v166 = (void *)(((unint64_t)v161 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v167 = (void *)(((unint64_t)v162 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v166 = *v167;
            v166[1] = v167[1];
            uint64_t v168 = (void *)(((unint64_t)v166 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v169 = (void *)(((unint64_t)v167 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v168 = *v169;
            uint64_t v170 = (void *)(((unint64_t)v168 + 15) & 0xFFFFFFFFFFFFFFF8);
            v171 = (void *)(((unint64_t)v169 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v170 = *v171;
            uint64_t v172 = (void *)(((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v173 = (void *)(((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v172 = *v173;
            uint64_t v174 = (void *)(((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v175 = (void *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v174 = *v175;
            uint64_t v176 = (void *)(((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v177 = (void *)(((unint64_t)v175 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v176 = *v177;
            unint64_t v178 = ((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v179 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v180 = *(void **)v179;
            *(void *)unint64_t v178 = *(void *)v179;
            *(unsigned char *)(v178 + 8) = *(unsigned char *)(v179 + 8);
            uint64_t v181 = *(void **)((v77 | 7) + v541);
            *(void *)((v76 | 7) + v541) = v181;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v182 = v180;
            id v183 = v181;
          }
          *(unsigned char *)(v76 + v571) = 5;
          break;
        case 6u:
          if (*(void *)(v77 + 8) < 0xFFFFFFFFuLL)
          {
            long long v153 = *(_OWORD *)v77;
            long long v154 = *(_OWORD *)(v77 + 16);
            long long v155 = *(_OWORD *)(v77 + 32);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x30) = *(void *)(v77 + 48);
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x10) = v154;
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x20) = v155;
            *(_OWORD *)uint64_t v76 = v153;
          }
          else
          {
            *(void *)uint64_t v76 = *(void *)v77;
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 8) = *(void *)(v77 + 8);
            *(unsigned char *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x10) = *(unsigned char *)(v77 + 16);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x18) = *(void *)(v77 + 24);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x20) = *(void *)(v77 + 32);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x28) = *(void *)(v77 + 40);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x30) = *(void *)(v77 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(unsigned char *)(v76 + v571) = 6;
          break;
        case 7u:
          if (*(void *)(v77 + 8) < 0xFFFFFFFFuLL)
          {
            *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
            long long v156 = *(_OWORD *)(v77 + 16);
            long long v157 = *(_OWORD *)(v77 + 32);
            long long v158 = *(_OWORD *)(v77 + 48);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x40) = *(void *)(v77 + 64);
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x20) = v157;
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x30) = v158;
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x10) = v156;
          }
          else
          {
            *(void *)uint64_t v76 = *(void *)v77;
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 8) = *(void *)(v77 + 8);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x10) = *(void *)(v77 + 16);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x18) = *(void *)(v77 + 24);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x20) = *(void *)(v77 + 32);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x28) = *(void *)(v77 + 40);
            uint64_t v144 = *(void **)(v77 + 48);
            *(void *)(v76 + 48) = v144;
            *(void *)(v76 + 56) = *(void *)(v77 + 56);
            *(void *)(v76 + 64) = *(void *)(v77 + 64);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v145 = v144;
            swift_bridgeObjectRetain();
          }
          *(unsigned char *)(v76 + v571) = 7;
          break;
        case 8u:
          uint64_t v146 = ~v548;
          if (v546 < 0)
          {
            int v148 = (*(uint64_t (**)(uint64_t))(v544 + 48))((v543 + v77) & v146);
          }
          else
          {
            unint64_t v147 = *(void *)(v77 + 8);
            if (v147 >= 0xFFFFFFFF) {
              LODWORD(v147) = -1;
            }
            int v148 = v147 + 1;
          }
          if (v148)
          {
            memcpy((void *)v76, (const void *)v77, ((((v540 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else
          {
            unint64_t v577 = ((v540 + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
            *(void *)uint64_t v76 = *(void *)v77;
            *(void *)(v76 + 8) = *(void *)(v77 + 8);
            uint64_t v184 = (v543 + v76) & v146;
            uint64_t v185 = (v543 + v77) & v146;
            uint64_t v186 = *(void (**)(uint64_t, uint64_t, uint64_t))(v544 + 16);
            swift_bridgeObjectRetain();
            v186(v184, v185, v545);
            uint64_t v187 = (v526 + v184) & v146;
            uint64_t v188 = (v526 + v185) & v146;
            v186(v187, v188, v545);
            uint64_t v189 = (void *)((v527 + v187) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v190 = (void *)((v527 + v188) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v189 = *v190;
            v189[1] = v190[1];
            unint64_t v191 = ((unint64_t)v189 + 23) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v192 = ((unint64_t)v190 + 23) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v191 = *(void *)v192;
            *(void *)(v191 + 8) = *(void *)(v192 + 8);
            *(unsigned char *)(v191 + 16) = *(unsigned char *)(v192 + 16);
            long long v193 = (void *)((v76 | 7) + v577);
            long long v194 = (void *)((v77 | 7) + v577);
            *long long v193 = *v194;
            v193[1] = v194[1];
            long long v195 = (void *)(((unint64_t)v193 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v196 = (void *)(((unint64_t)v194 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v195 = *v196;
            v195[1] = v196[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(unsigned char *)(v76 + v571) = 8;
          break;
        case 9u:
          if (*(void *)v77 < 0xFFFFFFFFuLL)
          {
            long long v149 = *(_OWORD *)v77;
            long long v150 = *(_OWORD *)(v77 + 16);
            long long v151 = *(_OWORD *)(v77 + 48);
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x20) = *(_OWORD *)(v77 + 32);
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x30) = v151;
            *(_OWORD *)uint64_t v76 = v149;
            *(_OWORD *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x10) = v150;
          }
          else
          {
            *(void *)uint64_t v76 = *(void *)v77;
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 8) = *(void *)(v77 + 8);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x10) = *(void *)(v77 + 16);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x18) = *(void *)(v77 + 24);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x20) = *(void *)(v77 + 32);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x28) = *(void *)(v77 + 40);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x30) = *(void *)(v77 + 48);
            *(void *)((((unint64_t)v70 + v73 + v576 + 1) & v64) + 0x38) = *(void *)(v77 + 56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(unsigned char *)(v76 + v571) = 9;
          break;
        default:
          goto LABEL_67;
      }
    }
    long long v83 = (unsigned char *)(v74 + v76);
    unsigned char *v83 = *(unsigned char *)(v74 + v77);
    v83[1] = *(unsigned char *)(v74 + v77 + 1);
    long long v84 = (void *)((v74 + v76 + 9) & 0xFFFFFFFFFFFFFFF8);
    long long v85 = (void *)((v74 + v77 + 9) & 0xFFFFFFFFFFFFFFF8);
    void *v84 = *v85;
    long long v86 = (void *)(((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v87 = (void *)(((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v86 = *v87;
    long long v88 = (void *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v89 = (void *)(((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v90 = v89[1];
    *long long v88 = *v89;
    v88[1] = v90;
    unint64_t v91 = ((unint64_t)v88 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v92 = ((unint64_t)v89 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v91 = *(void *)v92;
    *(void *)(v91 + 8) = *(void *)(v92 + 8);
    *(unsigned char *)(v91 + 16) = *(unsigned char *)(v92 + 16);
    unint64_t v93 = ((unint64_t)v88 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v94 = ((unint64_t)v89 + 47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v95 = *(void *)v94;
    uint64_t v96 = *(void *)(v94 + 8);
    char v97 = *(unsigned char *)(v94 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1002B5074(v95, v96, v97, (uint64_t (*)(void))sub_10000F724);
    *(void *)unint64_t v93 = v95;
    *(void *)(v93 + 8) = v96;
    *(unsigned char *)(v93 + 16) = v97;
    unint64_t v98 = ((unint64_t)v88 + 71) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v99 = ((unint64_t)v89 + 71) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v100 = *(void *)v99;
    uint64_t v101 = *(void *)(v99 + 8);
    char v102 = *(unsigned char *)(v99 + 16);
    sub_1002B5074(*(void *)v99, v101, v102, (uint64_t (*)(void))sub_10014F7F8);
    *(void *)unint64_t v98 = v100;
    *(void *)(v98 + 8) = v101;
    *(unsigned char *)(v98 + 16) = v102;
    long long v103 = (void *)((v563 + v98) & v565);
    long long v104 = (unsigned __int8 *)((v563 + v99) & v565);
    unsigned int v105 = v104[v567];
    unsigned int v106 = v105 - 2;
    if (v105 < 2)
    {
      uint64_t v54 = a1;
      uint64_t v108 = v536;
      uint64_t v109 = v534;
    }
    else
    {
      if (v567 <= 3) {
        uint64_t v107 = v567;
      }
      else {
        uint64_t v107 = 4;
      }
      uint64_t v54 = a1;
      uint64_t v108 = v536;
      uint64_t v109 = v534;
      switch(v107)
      {
        case 1:
          int v110 = *v104;
          if (v567 < 4) {
            goto LABEL_77;
          }
          goto LABEL_81;
        case 2:
          int v110 = *(unsigned __int16 *)v104;
          if (v567 < 4) {
            goto LABEL_77;
          }
          goto LABEL_81;
        case 3:
          int v110 = *(unsigned __int16 *)v104 | (v104[2] << 16);
          if (v567 < 4) {
            goto LABEL_77;
          }
          goto LABEL_81;
        case 4:
          int v110 = *(_DWORD *)v104;
          if (v567 < 4) {
LABEL_77:
          }
            unsigned int v105 = (v110 | (v106 << (8 * v567))) + 2;
          else {
LABEL_81:
          }
            unsigned int v105 = v110 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v111 = ~v109;
    if (v105 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v556 + 16))(v103, v104, v557);
      char v112 = 1;
    }
    else
    {
      *long long v103 = *(void *)v104;
      swift_retain();
      char v112 = 0;
    }
    *((unsigned char *)v103 + v567) = v112;
    long long v113 = (void *)(((unint64_t)v103 + v533) & v111);
    uint64_t v114 = (unsigned __int8 *)((unint64_t)&v104[v533] & v111);
    unsigned int v115 = v114[v108];
    unsigned int v116 = v115 - 2;
    if (v115 >= 2)
    {
      if (v108 <= 3) {
        uint64_t v117 = v108;
      }
      else {
        uint64_t v117 = 4;
      }
      switch(v117)
      {
        case 1:
          int v118 = *v114;
          if (v108 < 4) {
            goto LABEL_93;
          }
          goto LABEL_97;
        case 2:
          int v118 = *(unsigned __int16 *)v114;
          if (v108 < 4) {
            goto LABEL_93;
          }
          goto LABEL_97;
        case 3:
          int v118 = *(unsigned __int16 *)v114 | (v114[2] << 16);
          if (v108 < 4) {
            goto LABEL_93;
          }
          goto LABEL_97;
        case 4:
          int v118 = *(_DWORD *)v114;
          if (v108 < 4) {
LABEL_93:
          }
            unsigned int v115 = (v118 | (v116 << (8 * v108))) + 2;
          else {
LABEL_97:
          }
            unsigned int v115 = v118 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v119 = v108 + 1;
    if (v115 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v535 + 16))(v113, v114, v528);
      char v120 = 1;
    }
    else
    {
      *long long v113 = *(void *)v114;
      swift_retain();
      char v120 = 0;
    }
    *((unsigned char *)v113 + v108) = v120;
    unint64_t v121 = ((unint64_t)v113 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v122 = (unint64_t)&v114[v119 + 7] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v123 = *(void *)v122;
    LOBYTE(v122) = *(unsigned char *)(v122 + 8);
    *(void *)unint64_t v121 = v123;
    *(unsigned char *)(v121 + 8) = v122;
    unint64_t v124 = ((unint64_t)v113 + v119 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v125 = (unint64_t)&v114[v119 + 23] & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v124 = *(unsigned char *)v125;
    *(void *)(v124 + 8) = *(void *)(v125 + 8);
    swift_retain();
  }
  swift_retain();
  return v54;
}

uint64_t sub_1002CA954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v124 = a1;
  uint64_t v120 = (v5 | 7) + 6;
  uint64_t v6 = ~v5;
  unint64_t v7 = (v5 + ((((((v120 + a1) & ~(v5 | 7)) + 9) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 6) & ~v5;
  uint64_t v8 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v8(v7, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v7, v3);
  }
  if (*(_DWORD *)(v4 + 84)) {
    uint64_t v9 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v4 + 64) + 1;
  }
  unint64_t v10 = (v5 + 32 + ((v9 + v7) & 0xFFFFFFFFFFFFFFF8)) & v6;
  if (!v8(v10, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v10, v3);
  }
  uint64_t v11 = v5 + v9 + 3;
  unint64_t v12 = (v11 + v10) & v6;
  if (!v8(v12, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v12, v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 16);
  unint64_t v14 = (((((v11 + ((v5 + 32 + ((v9 + ((v5 + 30) & v6)) & 0xFFFFFFFFFFFFFFF8)) & v6)) & v6) + v9 + (v120 & ~(v5 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 38) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)(v13 - 8);
  unint64_t v16 = (a1 + *(unsigned __int8 *)(v15 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))((v124 + *(unsigned __int8 *)(v15 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), 1, v13))(*(void (**)(unint64_t, uint64_t))(v15 + 8))(v16, v13); {
  int v17 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v125 = *(void *)(v15 + 64);
  uint64_t v123 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v123 - 8);
  int v19 = *(_DWORD *)(v18 + 80);
  uint64_t v121 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v20 = *(void *)(v121 - 8);
  uint64_t v21 = v20;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = v22;
  uint64_t v25 = v18;
  uint64_t v26 = v23;
  uint64_t v27 = *(void *)(v23 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v30 = v16 + v125;
  if (!v17) {
    ++v30;
  }
  uint64_t v29 = v19 & 0xF8 | v22 | v28 | 7;
  uint64_t v31 = (v30 + v29 + 1) & ~v29;
  uint64_t v32 = *(void *)(v18 + 64) + 3;
  unint64_t v33 = ((((v32 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (((v33 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = v34 + 8;
  unint64_t v36 = (v24 + 16 + ((((((v33 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  if (*(_DWORD *)(v20 + 84)) {
    uint64_t v37 = *(void *)(v20 + 64);
  }
  else {
    uint64_t v37 = *(void *)(v20 + 64) + 1;
  }
  uint64_t v38 = v37 + 7;
  unint64_t v39 = ((((v37 + 7 + v36) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v40 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v41 = v40 + 8;
  unint64_t v42 = (((v40 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = v43 + 9;
  if (v35 > v39) {
    unint64_t v39 = v35;
  }
  if (v39 <= v44) {
    unint64_t v39 = v43 + 9;
  }
  if (v39 <= v41) {
    unint64_t v45 = v41;
  }
  else {
    unint64_t v45 = v39;
  }
  unint64_t v46 = v45 + 1;
  if ((v45 & 0xFFFFFFFFFFFFFFF8) + 65 <= v45 + 1) {
    unint64_t v47 = v45 + 1;
  }
  else {
    unint64_t v47 = (v45 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  unint64_t v48 = ((v42 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v49 = v28 + 16;
  uint64_t v50 = *(void *)(*(void *)(v23 - 8) + 64);
  uint64_t v51 = v50 + v28;
  unint64_t v52 = ((((((v50 + 7 + ((v50 + v28 + ((v28 + 16) & ~v28)) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v53 = (((v45 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v47 + 1 > v53) {
    unint64_t v53 = v47 + 1;
  }
  if (v53 <= v48) {
    unint64_t v53 = v48;
  }
  if (v53 > v52) {
    unint64_t v52 = v53;
  }
  if (v52 <= 0x48) {
    uint64_t v54 = 72;
  }
  else {
    uint64_t v54 = v52;
  }
  unsigned int v55 = *(unsigned __int8 *)(v31 + v54);
  if ((v55 ^ 0xFF) >= 0xF5)
  {
    unsigned int v56 = v55 - 10;
    if (v55 >= 0xA)
    {
      if (v54 <= 3) {
        uint64_t v57 = v54;
      }
      else {
        uint64_t v57 = 4;
      }
      switch(v57)
      {
        case 1:
          int v58 = *(unsigned __int8 *)v31;
          if (v54 < 4) {
            goto LABEL_45;
          }
          goto LABEL_49;
        case 2:
          int v58 = *(unsigned __int16 *)v31;
          if (v54 < 4) {
            goto LABEL_45;
          }
          goto LABEL_49;
        case 3:
          int v58 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(v31 + 2) << 16);
          if (v54 < 4) {
            goto LABEL_45;
          }
          goto LABEL_49;
        case 4:
          int v58 = *(_DWORD *)v31;
          if (v54 < 4) {
LABEL_45:
          }
            unsigned int v55 = (v58 | (v56 << (8 * v54))) + 10;
          else {
LABEL_49:
          }
            unsigned int v55 = v58 + 10;
          break;
        default:
          break;
      }
    }
    switch(v55)
    {
      case 0u:
      case 1u:
        goto LABEL_146;
      case 2u:
        unsigned int v59 = *(unsigned __int8 *)(v31 + v47);
        unsigned int v60 = v59 - 2;
        if (v59 >= 2)
        {
          if (v47 <= 3) {
            uint64_t v61 = v47;
          }
          else {
            uint64_t v61 = 4;
          }
          switch(v61)
          {
            case 1:
              int v62 = *(unsigned __int8 *)v31;
              goto LABEL_87;
            case 2:
              int v62 = *(unsigned __int16 *)v31;
              goto LABEL_87;
            case 3:
              int v62 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(v31 + 2) << 16);
              goto LABEL_87;
            case 4:
              int v62 = *(_DWORD *)v31;
LABEL_87:
              if (v47 < 4) {
                unsigned int v59 = (v62 | (v60 << (8 * v47))) + 2;
              }
              else {
                unsigned int v59 = v62 + 2;
              }
              break;
            default:
              break;
          }
        }
        unsigned int v78 = *(unsigned __int8 *)(v31 + v45);
        if (v59 == 1)
        {
          unsigned int v79 = v78 - 6;
          if (v78 >= 6)
          {
            if (v45 <= 3) {
              uint64_t v80 = v45;
            }
            else {
              uint64_t v80 = 4;
            }
            switch(v80)
            {
              case 1:
                int v81 = *(unsigned __int8 *)v31;
                goto LABEL_124;
              case 2:
                int v81 = *(unsigned __int16 *)v31;
                goto LABEL_124;
              case 3:
                int v81 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(v31 + 2) << 16);
                goto LABEL_124;
              case 4:
                int v81 = *(_DWORD *)v31;
LABEL_124:
                if (v45 < 4) {
                  v81 |= v79 << (8 * v45);
                }
                unsigned int v78 = v81 + 6;
                break;
              default:
                break;
            }
          }
          switch(v78)
          {
            case 1u:
              uint64_t v89 = v38;
              (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v90 = (v24
                   + 16
                   + ((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 31) & 0xFFFFFFFFFFFFFFF8)
                     + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(v90, 1, v121)) {
                (*(void (**)(unint64_t, uint64_t))(v21 + 8))(v90, v121);
              }
              unint64_t v91 = (uint64_t *)((v89 + v90) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v92 = v91[1];
              if ((v92 & 0x3000000000000000) == 0) {
                sub_100038B34(*v91, v92);
              }
              if (*(void *)(((unint64_t)v91 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2u:
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              objc_release(*(id *)((((((((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8));
              break;
            case 3u:
            case 4u:
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            default:
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              break;
          }
          sub_10004FFD4(*(void **)((v46 + v31 + 7) & 0xFFFFFFFFFFFFFFF8), *(void **)(((v46 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v46 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((v46 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 24));
          sub_10004FFD4(*(void **)((v46 + v31 + 39) & 0xFFFFFFFFFFFFFFF8), *(void **)(((v46 + v31 + 39) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v46 + v31 + 39) & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((v46 + v31 + 39) & 0xFFFFFFFFFFFFFFF8) + 24));
        }
        else
        {
          unsigned int v82 = v78 - 6;
          if (v78 >= 6)
          {
            if (v45 <= 3) {
              uint64_t v83 = v45;
            }
            else {
              uint64_t v83 = 4;
            }
            switch(v83)
            {
              case 1:
                int v84 = *(unsigned __int8 *)v31;
                goto LABEL_141;
              case 2:
                int v84 = *(unsigned __int16 *)v31;
                goto LABEL_141;
              case 3:
                int v84 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(v31 + 2) << 16);
                goto LABEL_141;
              case 4:
                int v84 = *(_DWORD *)v31;
LABEL_141:
                if (v45 < 4) {
                  v84 |= v82 << (8 * v45);
                }
                unsigned int v78 = v84 + 6;
                break;
              default:
                break;
            }
          }
          switch(v78)
          {
            case 1u:
              uint64_t v116 = v38;
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v117 = (v24
                    + 16
                    + ((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 31) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(v117, 1, v121)) {
                (*(void (**)(unint64_t, uint64_t))(v21 + 8))(v117, v121);
              }
              int v118 = (uint64_t *)((v116 + v117) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v119 = v118[1];
              if ((v119 & 0x3000000000000000) == 0) {
                sub_100038B34(*v118, v119);
              }
              if (*(void *)(((unint64_t)v118 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2u:
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              objc_release(*(id *)((((((((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8));
              break;
            case 3u:
            case 4u:
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            default:
              (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
              goto LABEL_146;
          }
        }
        break;
      case 3u:
        sub_10004FF38(*(void **)v31, *(void **)(v31 + 8), *(void *)(v31 + 16), *(void *)(v31 + 24));
        break;
      case 4u:
        unsigned int v63 = *(unsigned __int8 *)(v31 + v45);
        unsigned int v64 = v63 - 6;
        if (v63 >= 6)
        {
          if (v45 <= 3) {
            uint64_t v65 = v45;
          }
          else {
            uint64_t v65 = 4;
          }
          switch(v65)
          {
            case 1:
              int v66 = *(unsigned __int8 *)v31;
              goto LABEL_107;
            case 2:
              int v66 = *(unsigned __int16 *)v31;
              goto LABEL_107;
            case 3:
              int v66 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(v31 + 2) << 16);
              goto LABEL_107;
            case 4:
              int v66 = *(_DWORD *)v31;
LABEL_107:
              if (v45 < 4) {
                unsigned int v63 = (v66 | (v64 << (8 * v45))) + 6;
              }
              else {
                unsigned int v63 = v66 + 6;
              }
              break;
            default:
              break;
          }
        }
        switch(v63)
        {
          case 1u:
            uint64_t v85 = v38;
            (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v31, v123);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v86 = (v24
                 + 16
                 + ((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 31) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(v86, 1, v121)) {
              (*(void (**)(unint64_t, uint64_t))(v21 + 8))(v86, v121);
            }
            long long v87 = (uint64_t *)((v85 + v86) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v88 = v87[1];
            if ((v88 & 0x3000000000000000) == 0) {
              sub_100038B34(*v87, v88);
            }
            if (*(void *)(((unint64_t)v87 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            objc_release(*(id *)((((((((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                                          + 23) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8));
            break;
          case 3u:
          case 4u:
            (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v31, v123);
            swift_bridgeObjectRelease();
            break;
        }

        goto LABEL_146;
      case 5u:
        if (*(_DWORD *)(v18 + 84) < 0x7FFFFFFFu)
        {
          unint64_t v70 = *(void *)(((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 8);
          if (v70 >= 0xFFFFFFFF) {
            LODWORD(v70) = -1;
          }
          int v67 = v70 + 1;
        }
        else
        {
          int v67 = (*(uint64_t (**)(uint64_t))(v18 + 48))(v31);
          uint64_t v25 = v18;
        }
        if (!v67)
        {
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v31, v123);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          objc_release(*(id *)((((((((((((((((((v32 + v31) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                                        + 23) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8));
        }
        break;
      case 6u:
        if (*(void *)(v31 + 8) < 0xFFFFFFFFuLL) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_146;
      case 7u:
        if (*(void *)(v31 + 8) < 0xFFFFFFFFuLL) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_146;
      case 8u:
        uint64_t v68 = ~v28;
        if ((*(_DWORD *)(v27 + 84) & 0x80000000) != 0)
        {
          uint64_t v71 = v23;
          uint64_t v72 = *(void *)(v23 - 8);
          int v73 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v27 + 48))((v49 + v31) & v68, *(unsigned int *)(v27 + 84), v23);
          uint64_t v27 = v72;
          uint64_t v26 = v71;
          if (v73) {
            break;
          }
        }
        else
        {
          unint64_t v69 = *(void *)(v31 + 8);
          if (v69 >= 0xFFFFFFFF) {
            LODWORD(v69) = -1;
          }
          if (v69 != -1) {
            break;
          }
        }
        uint64_t v74 = v26;
        uint64_t v75 = v27;
        swift_bridgeObjectRelease();
        uint64_t v76 = (v49 + v31) & v68;
        uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
        v77(v76, v74);
        v77((v51 + v76) & v68, v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_146:
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (*(void *)v31 < 0xFFFFFFFFuLL) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_146;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v93 = (((((v31 + v54 + 10) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  sub_1002B52E0(*(void *)((v93 + 47) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v93 + 47) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v93 + 47) & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t (*)(void))sub_10000F478);
  unint64_t v94 = (v93 + 71) & 0xFFFFFFFFFFFFFFF8;
  sub_1002B52E0(*(void *)v94, *(void *)(v94 + 8), *(unsigned char *)(v94 + 16), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v95 = type metadata accessor for ColorScheme();
  uint64_t v96 = *(void *)(v95 - 8);
  uint64_t v97 = *(_DWORD *)(v96 + 80) & 0xF8 | 7;
  unint64_t v98 = (unsigned __int8 *)((v94 + v97 + 17) & ~v97);
  if (*(void *)(v96 + 64) <= 8uLL) {
    uint64_t v99 = 8;
  }
  else {
    uint64_t v99 = *(void *)(v96 + 64);
  }
  unsigned int v100 = v98[v99];
  unsigned int v101 = v100 - 2;
  if (v100 >= 2)
  {
    if (v99 <= 3) {
      uint64_t v102 = v99;
    }
    else {
      uint64_t v102 = 4;
    }
    switch(v102)
    {
      case 1:
        int v103 = *v98;
        goto LABEL_159;
      case 2:
        int v103 = *(unsigned __int16 *)v98;
        goto LABEL_159;
      case 3:
        int v103 = *(unsigned __int16 *)v98 | (v98[2] << 16);
        goto LABEL_159;
      case 4:
        int v103 = *(_DWORD *)v98;
LABEL_159:
        int v104 = (v103 | (v101 << (8 * v99))) + 2;
        unsigned int v100 = v103 + 2;
        if (v99 < 4) {
          unsigned int v100 = v104;
        }
        break;
      default:
        break;
    }
  }
  if (v100 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v96 + 8))(v98, v95);
  }
  else {
    swift_release();
  }
  uint64_t v105 = type metadata accessor for ContentSizeCategory();
  uint64_t v106 = *(void *)(v105 - 8);
  uint64_t v107 = *(_DWORD *)(v106 + 80) & 0xF8 | 7;
  uint64_t v108 = (unsigned __int8 *)((unint64_t)&v98[v99 + 1 + v107] & ~v107);
  if (*(void *)(v106 + 64) <= 8uLL) {
    uint64_t v109 = 8;
  }
  else {
    uint64_t v109 = *(void *)(v106 + 64);
  }
  unsigned int v110 = v108[v109];
  unsigned int v111 = v110 - 2;
  if (v110 >= 2)
  {
    if (v109 <= 3) {
      uint64_t v112 = v109;
    }
    else {
      uint64_t v112 = 4;
    }
    switch(v112)
    {
      case 1:
        int v113 = *v108;
        goto LABEL_176;
      case 2:
        int v113 = *(unsigned __int16 *)v108;
        goto LABEL_176;
      case 3:
        int v113 = *(unsigned __int16 *)v108 | (v108[2] << 16);
        goto LABEL_176;
      case 4:
        int v113 = *(_DWORD *)v108;
LABEL_176:
        int v114 = (v113 | (v111 << (8 * v109))) + 2;
        unsigned int v110 = v113 + 2;
        if (v109 < 4) {
          unsigned int v110 = v114;
        }
        break;
      default:
        break;
    }
  }
  if (v110 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v106 + 8))(v108, v105);
  }
  else {
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t sub_1002CBEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 6;
  uint64_t v646 = a1;
  uint64_t v635 = a2;
  v628 = (unsigned char *)((v8 + a1) & ~(v7 | 7));
  uint64_t v9 = (unsigned char *)((v8 + a2) & ~(v7 | 7));
  unsigned char *v628 = *v9;
  v628[1] = v9[1];
  unint64_t v10 = (_OWORD *)((unint64_t)(v628 + 9) & 0xFFFFFFFFFFFFFFF8);
  v623 = v9;
  uint64_t v11 = (_OWORD *)((unint64_t)(v9 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(unsigned char *)(v12 + 5) = *(unsigned char *)(v13 + 5);
  uint64_t v14 = ~v7;
  uint64_t v15 = (void *)((v7 + 6 + v12) & ~v7);
  unint64_t v16 = (const void *)((v7 + 6 + v13) & ~v7);
  v638 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v638(v16, 1, v5))
  {
    int v17 = *(_DWORD *)(v6 + 84);
    size_t v18 = *(void *)(v6 + 64);
    if (v17) {
      size_t v19 = *(void *)(v6 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
    int v17 = *(_DWORD *)(v6 + 84);
    size_t v18 = *(void *)(v6 + 64);
  }
  if (v17) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v18 + 1;
  }
  *((unsigned char *)v15 + v20) = *((unsigned char *)v16 + v20);
  unint64_t v21 = ((unint64_t)v15 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v16 + v20) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)(v22 + 8);
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(void *)(v21 + 8) = v23;
  *(void *)(v21 + 20) = *(void *)(v22 + 20);
  *(unsigned char *)(v21 + 28) = *(unsigned char *)(v22 + 28);
  *(unsigned char *)(v21 + 29) = *(unsigned char *)(v22 + 29);
  *(unsigned char *)(v21 + 30) = *(unsigned char *)(v22 + 30);
  *(unsigned char *)(v21 + 31) = *(unsigned char *)(v22 + 31);
  uint64_t v24 = (char *)((v7 + 32 + v21) & v14);
  uint64_t v25 = (const void *)((v7 + 32 + v22) & v14);
  if (v638(v25, 1, v5))
  {
    memcpy(v24, v25, v20);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v6 + 16))(v24, v25, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  }
  uint64_t v26 = &v24[v20];
  *uint64_t v26 = *((unsigned char *)v25 + v20);
  v26[1] = *((unsigned char *)v25 + v20 + 1);
  v26[2] = *((unsigned char *)v25 + v20 + 2);
  uint64_t v27 = (void *)((unint64_t)&v24[v20 + 3 + v7] & v14);
  uint64_t v28 = (const void *)(((unint64_t)v25 + v20 + v7 + 3) & v14);
  if (v638(v28, 1, v5))
  {
    memcpy(v27, v28, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v27, v28, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
  }
  size_t v29 = ((v7 + 3 + v20 + ((v7 + 32 + ((v20 + ((v7 + 30) & v14)) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14) + v20;
  v628[v29] = v623[v29];
  unint64_t v30 = (unint64_t)&v628[v29] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (unint64_t)&v623[v29] & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  *(void *)(v30 + 16) = *(void *)(v31 + 16);
  *(_WORD *)(v30 + 24) = *(_WORD *)(v31 + 24);
  *(_WORD *)(v30 + 26) = *(_WORD *)(v31 + 26);
  __int16 v32 = *(_WORD *)(v31 + 28);
  *(unsigned char *)(v30 + 30) = *(unsigned char *)(v31 + 30);
  *(_WORD *)(v30 + 28) = v32;
  unint64_t v33 = (void *)((v30 + 38) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = (void *)((v31 + 38) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v33 = *v34;
  v33[1] = v34[1];
  uint64_t v35 = *(void *)(a3 + 16);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 80);
  unint64_t v38 = ((((v29 + (((v7 | 7) + 6) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8) + v37 + 16;
  unint64_t v39 = (char *)((v38 + v646) & ~v37);
  unint64_t v40 = (char *)((v38 + v635) & ~v37);
  unint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v41(v40, 1, v35))
  {
    int v42 = *(_DWORD *)(v36 + 84);
    size_t v43 = *(void *)(v36 + 64);
    if (v42) {
      size_t v44 = v43;
    }
    else {
      size_t v44 = v43 + 1;
    }
    memcpy(v39, v40, v44);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v39, v40, v35);
    unint64_t v46 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
    uint64_t v45 = v36 + 56;
    v46(v39, 0, 1, v35);
    int v42 = *(_DWORD *)(v45 + 28);
    size_t v43 = *(void *)(v45 + 8);
  }
  if (v42) {
    size_t v47 = v43;
  }
  else {
    size_t v47 = v43 + 1;
  }
  unint64_t v48 = &v39[v47];
  uint64_t v49 = &v40[v47];
  v39[v47] = v40[v47];
  uint64_t v639 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v639 - 8);
  uint64_t v51 = v50;
  int v52 = *(_DWORD *)(v50 + 80) & 0xF8;
  uint64_t v634 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v53 = *(void *)(v634 - 8);
  uint64_t v54 = v53;
  uint64_t v55 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v56 = type metadata accessor for Date();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v59 = v52 | v55 | v58 | 7;
  uint64_t v60 = (unint64_t)&v48[v59 + 1] & ~v59;
  uint64_t v61 = (unsigned __int8 *)((unint64_t)&v49[v59 + 1] & ~v59);
  uint64_t v636 = *(void *)(v50 + 64) + 3;
  unint64_t v62 = ((((v636 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = (((v62 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = v63 + 8;
  unint64_t v65 = (v55 + 16 + ((((((v62 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v55;
  if (*(_DWORD *)(v53 + 84)) {
    uint64_t v66 = *(void *)(v53 + 64);
  }
  else {
    uint64_t v66 = *(void *)(v53 + 64) + 1;
  }
  unint64_t v67 = ((((v66 + 7 + v65) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v68 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = v68 + 8;
  unint64_t v70 = (((v68 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = v71 + 9;
  if (v64 > v67) {
    unint64_t v67 = v64;
  }
  if (v67 <= v72) {
    unint64_t v67 = v71 + 9;
  }
  if (v67 <= v69) {
    unint64_t v73 = v69;
  }
  else {
    unint64_t v73 = v67;
  }
  unint64_t v74 = v73 + 1;
  if ((v73 & 0xFFFFFFFFFFFFFFF8) + 65 <= v73 + 1) {
    unint64_t v75 = v73 + 1;
  }
  else {
    unint64_t v75 = (v73 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  size_t v76 = ((v70 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v77 = *(unsigned int *)(v57 + 84);
  uint64_t v78 = v58 + 16;
  uint64_t v79 = *(void *)(*(void *)(v56 - 8) + 64);
  uint64_t v80 = v79 + v58;
  uint64_t v81 = v79 + 7;
  unint64_t v82 = (v79 + 7 + ((v79 + v58 + ((v58 + 16) & ~v58)) & ~v58)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (((v73 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v75 + 1 > v83) {
    unint64_t v83 = v75 + 1;
  }
  if (v83 <= v76) {
    unint64_t v83 = v76;
  }
  if (v83 <= ((((v82 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v83 = ((((v82 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v83 <= 0x48) {
    uint64_t v84 = 72;
  }
  else {
    uint64_t v84 = v83;
  }
  unsigned int v85 = v61[v84];
  if ((v85 ^ 0xFF) < 0xF5)
  {
LABEL_64:
    unint64_t v91 = v61;
    uint64_t v92 = v84;
    memcpy((void *)v60, v61, v84 + 1);
LABEL_65:
    uint64_t v84 = v92;
    uint64_t v61 = v91;
  }
  else
  {
    uint64_t v629 = v55 + 16;
    uint64_t v630 = v54;
    uint64_t v86 = v81;
    unsigned int v87 = v85 - 10;
    if (v85 >= 0xA)
    {
      if (v84 <= 3) {
        uint64_t v88 = v84;
      }
      else {
        uint64_t v88 = 4;
      }
      switch(v88)
      {
        case 1:
          int v89 = *v61;
          if (v84 < 4) {
            goto LABEL_60;
          }
          goto LABEL_61;
        case 2:
          int v89 = *(unsigned __int16 *)v61;
          if (v84 >= 4) {
            goto LABEL_61;
          }
          goto LABEL_60;
        case 3:
          int v89 = *(unsigned __int16 *)v61 | (v61[2] << 16);
          if (v84 >= 4) {
            goto LABEL_61;
          }
          goto LABEL_60;
        case 4:
          int v89 = *(_DWORD *)v61;
          if (v84 < 4) {
LABEL_60:
          }
            v89 |= v87 << (8 * v84);
LABEL_61:
          unsigned int v85 = v89 + 10;
          break;
        default:
          break;
      }
    }
    uint64_t v90 = ~v55;
    switch(v85)
    {
      case 0u:
        *(void *)uint64_t v60 = *(void *)v61;
        *(void *)(v60 + 8) = *((void *)v61 + 1);
        *(unsigned char *)(v60 + v84) = 0;
        goto LABEL_120;
      case 1u:
        *(void *)uint64_t v60 = *(void *)v61;
        *(unsigned char *)(v60 + v84) = 1;
LABEL_120:
        unint64_t v91 = v61;
        uint64_t v92 = v84;
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 2u:
        unsigned int v148 = v61[v75];
        unsigned int v149 = v148 - 2;
        if (v148 < 2)
        {
          uint64_t v151 = v630;
        }
        else
        {
          if (v75 <= 3) {
            uint64_t v150 = v75;
          }
          else {
            uint64_t v150 = 4;
          }
          uint64_t v151 = v630;
          switch(v150)
          {
            case 1:
              int v152 = *v61;
              goto LABEL_154;
            case 2:
              int v152 = *(unsigned __int16 *)v61;
              goto LABEL_154;
            case 3:
              int v152 = *(unsigned __int16 *)v61 | (v61[2] << 16);
              goto LABEL_154;
            case 4:
              int v152 = *(_DWORD *)v61;
LABEL_154:
              if (v75 < 4) {
                unsigned int v148 = (v152 | (v149 << (8 * v75))) + 2;
              }
              else {
                unsigned int v148 = v152 + 2;
              }
              break;
            default:
              break;
          }
        }
        unsigned int v238 = v61[v73];
        if (v148 == 1)
        {
          unsigned int v239 = v238 - 6;
          if (v238 >= 6)
          {
            if (v73 <= 3) {
              uint64_t v240 = v73;
            }
            else {
              uint64_t v240 = 4;
            }
            switch(v240)
            {
              case 1:
                int v241 = *v61;
                goto LABEL_198;
              case 2:
                int v241 = *(unsigned __int16 *)v61;
                goto LABEL_198;
              case 3:
                int v241 = *(unsigned __int16 *)v61 | (v61[2] << 16);
                goto LABEL_198;
              case 4:
                int v241 = *(_DWORD *)v61;
LABEL_198:
                if (v73 < 4) {
                  v241 |= v239 << (8 * v73);
                }
                unsigned int v238 = v241 + 6;
                break;
              default:
                break;
            }
          }
          unint64_t v621 = v75;
          uint64_t v626 = v84;
          switch(v238)
          {
            case 1u:
              unint64_t v614 = v73 + 1;
              size_t __na = v66;
              uint64_t v631 = v66 + 7;
              unint64_t v619 = v73;
              long long v381 = v61;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16))(v60, v61, v639);
              long long v382 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              v644 = v381;
              long long v383 = (_DWORD *)((unint64_t)&v381[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *long long v382 = *v383;
              uint64_t v384 = (_OWORD *)(((unint64_t)v382 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v385 = (long long *)(((unint64_t)v383 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v386 = *v385;
              long long v387 = v385[1];
              long long v388 = v385[3];
              v384[2] = v385[2];
              v384[3] = v388;
              *uint64_t v384 = v386;
              v384[1] = v387;
              uint64_t v389 = (void *)(((unint64_t)v384 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v390 = (void *)(((unint64_t)v385 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v389 = *v390;
              uint64_t v391 = (void *)(((unint64_t)v389 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v392 = (void *)(((unint64_t)v390 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v391 = *v392;
              unint64_t v393 = ((unint64_t)v391 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v394 = ((unint64_t)v392 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v393 = *(void *)v394;
              *(unsigned char *)(v393 + 8) = *(unsigned char *)(v394 + 8);
              long long v395 = (void *)(((unint64_t)v391 + 31) & 0xFFFFFFFFFFFFFFF8);
              long long v396 = (void *)(((unint64_t)v392 + 31) & 0xFFFFFFFFFFFFFFF8);
              *long long v395 = *v396;
              v395[1] = v396[1];
              uint64_t v397 = (void *)(((unint64_t)v395 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v398 = (void *)(((unint64_t)v396 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v397 = *v398;
              v397[1] = v398[1];
              uint64_t v399 = (void *)(((unint64_t)v397 + v629) & v90);
              uint64_t v400 = (const void *)(((unint64_t)v398 + v629) & v90);
              unint64_t v401 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v151 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v401(v400, 1, v634))
              {
                memcpy(v399, v400, __na);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v151 + 16))(v399, v400, v634);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v151 + 56))(v399, 0, 1, v634);
              }
              unint64_t v597 = ((unint64_t)v399 + v631) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v598 = ((unint64_t)v400 + v631) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v599 = *(void *)(v598 + 8);
              if ((v599 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)unint64_t v597 = *(_OWORD *)v598;
              }
              else
              {
                uint64_t v603 = *(void *)v598;
                sub_100038528(*(void *)v598, *(void *)(v598 + 8));
                *(void *)unint64_t v597 = v603;
                *(void *)(v597 + 8) = v599;
              }
              unint64_t v604 = (v597 + 23) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v605 = (v598 + 23) & 0xFFFFFFFFFFFFFFF8;
              if (*(void *)v605 < 0xFFFFFFFFuLL)
              {
                long long v607 = *(_OWORD *)v605;
                *(void *)(v604 + 16) = *(void *)(v605 + 16);
                *(_OWORD *)unint64_t v604 = v607;
              }
              else
              {
                *(void *)unint64_t v604 = *(void *)v605;
                uint64_t v606 = *(void *)(v605 + 16);
                *(void *)(v604 + 8) = *(void *)(v605 + 8);
                *(void *)(v604 + 16) = v606;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              uint64_t v428 = v644;
              unint64_t v367 = v614;
              *(unsigned char *)(v60 + v619) = 1;
              goto LABEL_212;
            case 2u:
              unint64_t v402 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v403 = v61;
              unint64_t v404 = v73;
              v402(v60, v61, v639);
              unint64_t v405 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              id v406 = (_DWORD *)((unint64_t)&v403[v636] & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v405 = *v406;
              uint64_t v407 = (_OWORD *)(((unint64_t)v405 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v408 = (long long *)(((unint64_t)v406 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v409 = *v408;
              long long v410 = v408[1];
              long long v411 = v408[3];
              v407[2] = v408[2];
              v407[3] = v411;
              *uint64_t v407 = v409;
              v407[1] = v410;
              id v412 = (void *)(((unint64_t)v407 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v413 = (void *)(((unint64_t)v408 + 71) & 0xFFFFFFFFFFFFFFF8);
              *id v412 = *v413;
              v412[1] = v413[1];
              uint64_t v414 = (void *)(((unint64_t)v413 + 23) & 0xFFFFFFFFFFFFFFF8);
              unsigned __int8 v415 = (void *)(((unint64_t)v412 + 23) & 0xFFFFFFFFFFFFFFF8);
              *unsigned __int8 v415 = *v414;
              char v416 = (void *)(((unint64_t)v414 + 15) & 0xFFFFFFFFFFFFFFF8);
              v417 = (void *)(((unint64_t)v415 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v417 = *v416;
              uint64_t v418 = (void *)(((unint64_t)v416 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v419 = (void *)(((unint64_t)v417 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v419 = *v418;
              v420 = (void *)(((unint64_t)v418 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v421 = (void *)(((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8);
              *long long v421 = *v420;
              long long v422 = (void *)(((unint64_t)v420 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v423 = (void *)(((unint64_t)v421 + 15) & 0xFFFFFFFFFFFFFFF8);
              *long long v423 = *v422;
              unint64_t v424 = ((unint64_t)v423 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v425 = ((unint64_t)v422 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v426 = *(void **)v425;
              *(void *)unint64_t v424 = *(void *)v425;
              *(unsigned char *)(v424 + 8) = *(unsigned char *)(v425 + 8);
              *(unsigned char *)(v60 + v404) = 2;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v427 = v426;
              unint64_t v367 = v74;
              uint64_t v428 = v403;
              goto LABEL_212;
            case 3u:
              v429 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v367 = v73 + 1;
              long long v368 = v61;
              unint64_t v430 = v73;
              v429(v60, v61, v639);
              v431 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              long long v432 = (_DWORD *)((unint64_t)&v368[v636] & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v431 = *v432;
              long long v433 = (_OWORD *)(((unint64_t)v431 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v434 = (long long *)(((unint64_t)v432 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v435 = *v434;
              long long v436 = v434[1];
              long long v437 = v434[3];
              v433[2] = v434[2];
              v433[3] = v437;
              *long long v433 = v435;
              v433[1] = v436;
              uint64_t v438 = (void *)(((unint64_t)v433 + 71) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v439 = (void *)(((unint64_t)v434 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v438 = *v439;
              v438[1] = v439[1];
              unint64_t v440 = (void *)(((unint64_t)v438 + 23) & 0xFFFFFFFFFFFFFFF8);
              v441 = (void *)(((unint64_t)v439 + 23) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v440 = *v441;
              uint64_t v442 = (void *)(((unint64_t)v440 + 15) & 0xFFFFFFFFFFFFFFF8);
              v443 = (void *)(((unint64_t)v441 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v442 = *v443;
              *(void *)(((unint64_t)v442 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v443
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v444 = 3;
              goto LABEL_208;
            case 4u:
              long long v445 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v367 = v73 + 1;
              long long v368 = v61;
              unint64_t v430 = v73;
              v445(v60, v61, v639);
              long long v446 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v447 = (_DWORD *)((unint64_t)&v368[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *long long v446 = *v447;
              uint64_t v448 = (_OWORD *)(((unint64_t)v446 + 11) & 0xFFFFFFFFFFFFFFF8);
              v449 = (long long *)(((unint64_t)v447 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v450 = *v449;
              long long v451 = v449[1];
              long long v452 = v449[3];
              v448[2] = v449[2];
              v448[3] = v452;
              *uint64_t v448 = v450;
              v448[1] = v451;
              long long v453 = (void *)(((unint64_t)v448 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v454 = (void *)(((unint64_t)v449 + 71) & 0xFFFFFFFFFFFFFFF8);
              *long long v453 = *v454;
              v453[1] = v454[1];
              v455 = (void *)(((unint64_t)v453 + 23) & 0xFFFFFFFFFFFFFFF8);
              v456 = (void *)(((unint64_t)v454 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v455 = *v456;
              uint64_t v457 = (void *)(((unint64_t)v455 + 15) & 0xFFFFFFFFFFFFFFF8);
              v458 = (void *)(((unint64_t)v456 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v457 = *v458;
              *(void *)(((unint64_t)v457 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v458
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v444 = 4;
LABEL_208:
              *(unsigned char *)(v60 + v430) = v444;
              swift_bridgeObjectRetain();
              swift_retain();
              goto LABEL_211;
            case 5u:
              uint64_t v459 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v367 = v73 + 1;
              long long v368 = v61;
              unint64_t v460 = v73;
              v459(v60, v61, v639);
              uint64_t v461 = (_DWORD *)((unint64_t)&v368[v636] & 0xFFFFFFFFFFFFFFFCLL);
              v462 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v462 = *v461;
              v463 = (_OWORD *)(((unint64_t)v462 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v464 = (long long *)(((unint64_t)v461 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v465 = *v464;
              long long v466 = v464[1];
              long long v467 = v464[3];
              v463[2] = v464[2];
              v463[3] = v467;
              _OWORD *v463 = v465;
              v463[1] = v466;
              uint64_t v468 = (void *)(((unint64_t)v463 + 71) & 0xFFFFFFFFFFFFFFF8);
              id v469 = (void *)(((unint64_t)v464 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v468 = *v469;
              v468[1] = v469[1];
              uint64_t v470 = (void *)(((unint64_t)v468 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v471 = (void *)(((unint64_t)v469 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v470 = *v471;
              *(void *)(((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v471
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v60 + v460) = 5;
              goto LABEL_210;
            default:
              uint64_t v366 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v367 = v73 + 1;
              long long v368 = v61;
              unint64_t v369 = v73;
              v366(v60, v61, v639);
              uint64_t v370 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v371 = (_DWORD *)((unint64_t)&v368[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v370 = *v371;
              uint64_t v372 = (_OWORD *)(((unint64_t)v370 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v373 = (long long *)(((unint64_t)v371 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v374 = *v373;
              long long v375 = v373[1];
              long long v376 = v373[3];
              v372[2] = v373[2];
              v372[3] = v376;
              *uint64_t v372 = v374;
              v372[1] = v375;
              uint64_t v377 = (void *)(((unint64_t)v372 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v378 = (void *)(((unint64_t)v373 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v377 = *v378;
              v377[1] = v378[1];
              uint64_t v379 = (void *)(((unint64_t)v377 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v380 = (void *)(((unint64_t)v378 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v379 = *v380;
              *(void *)(((unint64_t)v379 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v380
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v60 + v369) = 0;
LABEL_210:
              swift_bridgeObjectRetain();
LABEL_211:
              uint64_t v428 = v368;
LABEL_212:
              unint64_t v472 = v367 + v60;
              uint64_t v473 = &v428[v367];
              unint64_t v474 = (v367 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v475 = (unint64_t)(v473 + 7) & 0xFFFFFFFFFFFFFFF8;
              id v476 = *(id *)v475;
              long long v477 = *(void **)(v475 + 8);
              uint64_t v478 = *(void *)(v475 + 16);
              unsigned __int8 v479 = *(unsigned char *)(v475 + 24);
              v480 = v428;
              sub_1000506C4(*(id *)v475, v477, v478, v479);
              *(void *)unint64_t v474 = v476;
              *(void *)(v474 + 8) = v477;
              *(void *)(v474 + 16) = v478;
              *(unsigned char *)(v474 + 24) = v479;
              unint64_t v481 = (v472 + 39) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v482 = (unint64_t)(v473 + 39) & 0xFFFFFFFFFFFFFFF8;
              id v483 = *(id *)v482;
              uint64_t v484 = *(void **)(v482 + 8);
              uint64_t v485 = *(void *)(v482 + 16);
              unsigned __int8 v486 = *(unsigned char *)(v482 + 24);
              sub_1000506C4(*(id *)v482, v484, v485, v486);
              uint64_t v61 = v480;
              *(void *)unint64_t v481 = v483;
              *(void *)(v481 + 8) = v484;
              *(void *)(v481 + 16) = v485;
              char v487 = 1;
              *(unsigned char *)(v481 + 24) = v486;
              unint64_t v488 = v621;
              uint64_t v84 = v626;
              break;
          }
        }
        else
        {
          unsigned int v242 = v238 - 6;
          if (v238 >= 6)
          {
            if (v73 <= 3) {
              uint64_t v243 = v73;
            }
            else {
              uint64_t v243 = 4;
            }
            switch(v243)
            {
              case 1:
                int v244 = *v61;
                goto LABEL_216;
              case 2:
                int v244 = *(unsigned __int16 *)v61;
                goto LABEL_216;
              case 3:
                int v244 = *(unsigned __int16 *)v61 | (v61[2] << 16);
                goto LABEL_216;
              case 4:
                int v244 = *(_DWORD *)v61;
LABEL_216:
                if (v73 < 4) {
                  v244 |= v242 << (8 * v73);
                }
                unsigned int v238 = v244 + 6;
                break;
              default:
                break;
            }
          }
          switch(v238)
          {
            case 1u:
              size_t __nb = v66;
              unint64_t v620 = v73;
              uint64_t v632 = v66 + 7;
              unint64_t v622 = v75;
              uint64_t v627 = v84;
              uint64_t v504 = v61;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16))(v60, v61, v639);
              uint64_t v505 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              v645 = v504;
              v506 = (_DWORD *)((unint64_t)&v504[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v505 = *v506;
              uint64_t v507 = (_OWORD *)(((unint64_t)v505 + 11) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v508 = (long long *)(((unint64_t)v506 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v509 = *v508;
              long long v510 = v508[1];
              long long v511 = v508[3];
              v507[2] = v508[2];
              v507[3] = v511;
              *uint64_t v507 = v509;
              v507[1] = v510;
              unint64_t v512 = (void *)(((unint64_t)v507 + 71) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v513 = (void *)(((unint64_t)v508 + 71) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v512 = *v513;
              uint64_t v514 = (void *)(((unint64_t)v512 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v515 = (void *)(((unint64_t)v513 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v514 = *v515;
              unint64_t v516 = ((unint64_t)v514 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v517 = ((unint64_t)v515 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v516 = *(void *)v517;
              *(unsigned char *)(v516 + 8) = *(unsigned char *)(v517 + 8);
              uint64_t v518 = (void *)(((unint64_t)v514 + 31) & 0xFFFFFFFFFFFFFFF8);
              long long v519 = (void *)(((unint64_t)v515 + 31) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v518 = *v519;
              v518[1] = v519[1];
              uint64_t v520 = (void *)(((unint64_t)v518 + 23) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v521 = (void *)(((unint64_t)v519 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v520 = *v521;
              v520[1] = v521[1];
              unint64_t v522 = (void *)(((unint64_t)v520 + v629) & v90);
              uint64_t v523 = (const void *)(((unint64_t)v521 + v629) & v90);
              long long v524 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v151 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v524(v523, 1, v634))
              {
                memcpy(v522, v523, __nb);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v151 + 16))(v522, v523, v634);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v151 + 56))(v522, 0, 1, v634);
              }
              unint64_t v600 = ((unint64_t)v522 + v632) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v601 = ((unint64_t)v523 + v632) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v602 = *(void *)(v601 + 8);
              if ((v602 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)unint64_t v600 = *(_OWORD *)v601;
              }
              else
              {
                uint64_t v608 = *(void *)v601;
                sub_100038528(*(void *)v601, *(void *)(v601 + 8));
                *(void *)unint64_t v600 = v608;
                *(void *)(v600 + 8) = v602;
              }
              unint64_t v609 = (v600 + 23) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v610 = (v601 + 23) & 0xFFFFFFFFFFFFFFF8;
              if (*(void *)v610 < 0xFFFFFFFFuLL)
              {
                long long v612 = *(_OWORD *)v610;
                *(void *)(v609 + 16) = *(void *)(v610 + 16);
                *(_OWORD *)unint64_t v609 = v612;
              }
              else
              {
                *(void *)unint64_t v609 = *(void *)v610;
                uint64_t v611 = *(void *)(v610 + 16);
                *(void *)(v609 + 8) = *(void *)(v610 + 8);
                *(void *)(v609 + 16) = v611;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              uint64_t v61 = v645;
              unint64_t v488 = v622;
              uint64_t v84 = v627;
              char v487 = 0;
              *(unsigned char *)(v60 + v620) = 1;
              break;
            case 2u:
              uint64_t v525 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v526 = v75;
              uint64_t v527 = v61;
              uint64_t v528 = v84;
              unint64_t v529 = v73;
              v525(v60, v61, v639);
              uint64_t v530 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              size_t v531 = (_DWORD *)((unint64_t)&v527[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v530 = *v531;
              unint64_t v532 = (_OWORD *)(((unint64_t)v530 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v533 = (long long *)(((unint64_t)v531 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v534 = *v533;
              long long v535 = v533[1];
              long long v536 = v533[3];
              v532[2] = v533[2];
              v532[3] = v536;
              _OWORD *v532 = v534;
              v532[1] = v535;
              size_t v537 = (void *)(((unint64_t)v532 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v538 = (void *)(((unint64_t)v533 + 71) & 0xFFFFFFFFFFFFFFF8);
              void *v537 = *v538;
              v537[1] = v538[1];
              uint64_t v539 = (void *)(((unint64_t)v538 + 23) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v540 = (void *)(((unint64_t)v537 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v540 = *v539;
              unint64_t v541 = (void *)(((unint64_t)v539 + 15) & 0xFFFFFFFFFFFFFFF8);
              v542 = (void *)(((unint64_t)v540 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v542 = *v541;
              uint64_t v543 = (void *)(((unint64_t)v541 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v544 = (void *)(((unint64_t)v542 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v544 = *v543;
              uint64_t v545 = (void *)(((unint64_t)v543 + 15) & 0xFFFFFFFFFFFFFFF8);
              int v546 = (void *)(((unint64_t)v544 + 15) & 0xFFFFFFFFFFFFFFF8);
              *int v546 = *v545;
              unsigned int v547 = (void *)(((unint64_t)v545 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v548 = (void *)(((unint64_t)v546 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v548 = *v547;
              unint64_t v549 = ((unint64_t)v548 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v550 = ((unint64_t)v547 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v551 = *(void **)v550;
              *(void *)unint64_t v549 = *(void *)v550;
              *(unsigned char *)(v549 + 8) = *(unsigned char *)(v550 + 8);
              *(unsigned char *)(v60 + v529) = 2;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v552 = v551;
              unint64_t v488 = v526;
              uint64_t v84 = v528;
              uint64_t v61 = v527;
              goto LABEL_230;
            case 3u:
              uint64_t v553 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v554 = v75;
              long long v490 = v61;
              uint64_t v491 = v84;
              unint64_t v555 = v73;
              v553(v60, v61, v639);
              uint64_t v556 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v557 = (_DWORD *)((unint64_t)&v490[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v556 = *v557;
              uint64_t v558 = (_OWORD *)(((unint64_t)v556 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v559 = (long long *)(((unint64_t)v557 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v560 = *v559;
              long long v561 = v559[1];
              long long v562 = v559[3];
              v558[2] = v559[2];
              v558[3] = v562;
              *uint64_t v558 = v560;
              v558[1] = v561;
              uint64_t v563 = (void *)(((unint64_t)v558 + 71) & 0xFFFFFFFFFFFFFFF8);
              int v564 = (void *)(((unint64_t)v559 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v563 = *v564;
              v563[1] = v564[1];
              unint64_t v565 = (void *)(((unint64_t)v563 + 23) & 0xFFFFFFFFFFFFFFF8);
              int v566 = (void *)(((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v565 = *v566;
              uint64_t v567 = (void *)(((unint64_t)v565 + 15) & 0xFFFFFFFFFFFFFFF8);
              int v568 = (void *)(((unint64_t)v566 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v567 = *v568;
              *(void *)(((unint64_t)v567 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v568
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v569 = 3;
              goto LABEL_226;
            case 4u:
              size_t v570 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v554 = v75;
              long long v490 = v61;
              uint64_t v491 = v84;
              unint64_t v555 = v73;
              v570(v60, v61, v639);
              unint64_t v571 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              size_t v572 = (_DWORD *)((unint64_t)&v490[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *unint64_t v571 = *v572;
              v573 = (_OWORD *)(((unint64_t)v571 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v574 = (long long *)(((unint64_t)v572 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v575 = *v574;
              long long v576 = v574[1];
              long long v577 = v574[3];
              v573[2] = v574[2];
              v573[3] = v577;
              _OWORD *v573 = v575;
              v573[1] = v576;
              v578 = (void *)(((unint64_t)v573 + 71) & 0xFFFFFFFFFFFFFFF8);
              v579 = (void *)(((unint64_t)v574 + 71) & 0xFFFFFFFFFFFFFFF8);
              void *v578 = *v579;
              v578[1] = v579[1];
              uint64_t v580 = (void *)(((unint64_t)v578 + 23) & 0xFFFFFFFFFFFFFFF8);
              v581 = (void *)(((unint64_t)v579 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v580 = *v581;
              v582 = (void *)(((unint64_t)v580 + 15) & 0xFFFFFFFFFFFFFFF8);
              v583 = (void *)(((unint64_t)v581 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v582 = *v583;
              *(void *)(((unint64_t)v582 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v583
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v569 = 4;
LABEL_226:
              *(unsigned char *)(v60 + v555) = v569;
              swift_bridgeObjectRetain();
              swift_retain();
              unint64_t v488 = v554;
              goto LABEL_229;
            case 5u:
              v584 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v488 = v75;
              long long v490 = v61;
              uint64_t v491 = v84;
              unint64_t v585 = v73;
              v584(v60, v61, v639);
              v586 = (_DWORD *)((unint64_t)&v490[v636] & 0xFFFFFFFFFFFFFFFCLL);
              v587 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v587 = *v586;
              v588 = (_OWORD *)(((unint64_t)v587 + 11) & 0xFFFFFFFFFFFFFFF8);
              v589 = (long long *)(((unint64_t)v586 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v590 = *v589;
              long long v591 = v589[1];
              long long v592 = v589[3];
              v588[2] = v589[2];
              v588[3] = v592;
              _OWORD *v588 = v590;
              v588[1] = v591;
              v593 = (void *)(((unint64_t)v588 + 71) & 0xFFFFFFFFFFFFFFF8);
              v594 = (void *)(((unint64_t)v589 + 71) & 0xFFFFFFFFFFFFFFF8);
              void *v593 = *v594;
              v593[1] = v594[1];
              v595 = (void *)(((unint64_t)v593 + 23) & 0xFFFFFFFFFFFFFFF8);
              v596 = (void *)(((unint64_t)v594 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v595 = *v596;
              *(void *)(((unint64_t)v595 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v596
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v60 + v585) = 5;
              goto LABEL_228;
            default:
              long long v489 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16);
              unint64_t v488 = v75;
              long long v490 = v61;
              uint64_t v491 = v84;
              unint64_t v492 = v73;
              v489(v60, v61, v639);
              uint64_t v493 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
              v494 = (_DWORD *)((unint64_t)&v490[v636] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v493 = *v494;
              uint64_t v495 = (_OWORD *)(((unint64_t)v493 + 11) & 0xFFFFFFFFFFFFFFF8);
              v496 = (long long *)(((unint64_t)v494 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v497 = *v496;
              long long v498 = v496[1];
              long long v499 = v496[3];
              v495[2] = v496[2];
              v495[3] = v499;
              *uint64_t v495 = v497;
              v495[1] = v498;
              uint64_t v500 = (void *)(((unint64_t)v495 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v501 = (void *)(((unint64_t)v496 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v500 = *v501;
              v500[1] = v501[1];
              long long v502 = (void *)(((unint64_t)v500 + 23) & 0xFFFFFFFFFFFFFFF8);
              long long v503 = (void *)(((unint64_t)v501 + 23) & 0xFFFFFFFFFFFFFFF8);
              *long long v502 = *v503;
              *(void *)(((unint64_t)v502 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v503
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v60 + v492) = 0;
LABEL_228:
              swift_bridgeObjectRetain();
LABEL_229:
              uint64_t v84 = v491;
              uint64_t v61 = v490;
LABEL_230:
              char v487 = 0;
              break;
          }
        }
        *(unsigned char *)(v60 + v488) = v487;
        *(unsigned char *)(v60 + v84) = 2;
        break;
      case 3u:
        uint64_t v160 = *(void *)v61;
        uint64_t v161 = (void *)*((void *)v61 + 1);
        uint64_t v162 = *((void *)v61 + 2);
        unint64_t v163 = *((void *)v61 + 3);
        uint64_t v164 = *((void *)v61 + 4);
        uint64_t v165 = *((void *)v61 + 5);
        uint64_t v167 = *((void *)v61 + 6);
        uint64_t v166 = *((void *)v61 + 7);
        v640 = v61;
        uint64_t v168 = v84;
        sub_100050624(*(void **)v61, v161, v162, v163);
        uint64_t v84 = v168;
        uint64_t v61 = v640;
        *(void *)uint64_t v60 = v160;
        *(void *)(v60 + 8) = v161;
        *(void *)(v60 + 16) = v162;
        *(void *)(v60 + 24) = v163;
        *(void *)(v60 + 32) = v164;
        *(void *)(v60 + 40) = v165;
        *(void *)(v60 + 48) = v167;
        *(void *)(v60 + 56) = v166;
        *(unsigned char *)(v60 + v168) = 3;
        break;
      case 4u:
        unsigned int v153 = v61[v73];
        unsigned int v154 = v153 - 6;
        if (v153 < 6)
        {
          uint64_t v156 = v51;
        }
        else
        {
          if (v73 <= 3) {
            uint64_t v155 = v73;
          }
          else {
            uint64_t v155 = 4;
          }
          uint64_t v156 = v51;
          switch(v155)
          {
            case 1:
              int v157 = *v61;
              goto LABEL_173;
            case 2:
              int v157 = *(unsigned __int16 *)v61;
              goto LABEL_173;
            case 3:
              int v157 = *(unsigned __int16 *)v61 | (v61[2] << 16);
              goto LABEL_173;
            case 4:
              int v157 = *(_DWORD *)v61;
LABEL_173:
              if (v73 < 4) {
                unsigned int v153 = (v157 | (v154 << (8 * v73))) + 6;
              }
              else {
                unsigned int v153 = v157 + 6;
              }
              break;
            default:
              break;
          }
        }
        switch(v153)
        {
          case 1u:
            unint64_t v613 = v73 + 1;
            size_t __n = v66;
            uint64_t v260 = v66 + 7;
            unint64_t v618 = v73;
            uint64_t v625 = v84;
            long long v261 = v61;
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v156 + 16))(v60, v61, v639);
            long long v262 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
            v643 = v261;
            long long v263 = (_DWORD *)((unint64_t)&v261[v636] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v262 = *v263;
            uint64_t v264 = (_OWORD *)(((unint64_t)v262 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v265 = (long long *)(((unint64_t)v263 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v266 = *v265;
            long long v267 = v265[1];
            long long v268 = v265[3];
            v264[2] = v265[2];
            v264[3] = v268;
            *uint64_t v264 = v266;
            v264[1] = v267;
            uint64_t v269 = (void *)(((unint64_t)v264 + 71) & 0xFFFFFFFFFFFFFFF8);
            char v270 = (void *)(((unint64_t)v265 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v269 = *v270;
            uint64_t v271 = (void *)(((unint64_t)v269 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v272 = (void *)(((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v271 = *v272;
            unint64_t v273 = ((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v274 = ((unint64_t)v272 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v273 = *(void *)v274;
            *(unsigned char *)(v273 + 8) = *(unsigned char *)(v274 + 8);
            long long v275 = (void *)(((unint64_t)v271 + 31) & 0xFFFFFFFFFFFFFFF8);
            long long v276 = (void *)(((unint64_t)v272 + 31) & 0xFFFFFFFFFFFFFFF8);
            *long long v275 = *v276;
            v275[1] = v276[1];
            long long v277 = (void *)(((unint64_t)v275 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v278 = (void *)(((unint64_t)v276 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v277 = *v278;
            v277[1] = v278[1];
            uint64_t v279 = (void *)(((unint64_t)v277 + v629) & v90);
            uint64_t v280 = (const void *)(((unint64_t)v278 + v629) & v90);
            uint64_t v281 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v630 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v281(v280, 1, v634))
            {
              memcpy(v279, v280, __n);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v630 + 16))(v279, v280, v634);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v630 + 56))(v279, 0, 1, v634);
            }
            unint64_t v352 = ((unint64_t)v279 + v260) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v353 = ((unint64_t)v280 + v260) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v354 = *(void *)(v353 + 8);
            if ((v354 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v352 = *(_OWORD *)v353;
            }
            else
            {
              uint64_t v355 = *(void *)v353;
              sub_100038528(*(void *)v353, *(void *)(v353 + 8));
              *(void *)unint64_t v352 = v355;
              *(void *)(v352 + 8) = v354;
            }
            unint64_t v356 = (v352 + 23) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v357 = (v353 + 23) & 0xFFFFFFFFFFFFFFF8;
            if (*(void *)v357 < 0xFFFFFFFFuLL)
            {
              long long v359 = *(_OWORD *)v357;
              *(void *)(v356 + 16) = *(void *)(v357 + 16);
              *(_OWORD *)unint64_t v356 = v359;
            }
            else
            {
              *(void *)unint64_t v356 = *(void *)v357;
              uint64_t v358 = *(void *)(v357 + 16);
              *(void *)(v356 + 8) = *(void *)(v357 + 8);
              *(void *)(v356 + 16) = v358;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            uint64_t v308 = v643;
            uint64_t v283 = v625;
            unint64_t v245 = v613;
            *(unsigned char *)(v60 + v618) = 1;
            goto LABEL_194;
          case 2u:
            uint64_t v282 = v61;
            uint64_t v283 = v84;
            unint64_t v284 = v73;
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v156 + 16))(v60, v61, v639);
            uint64_t v285 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v286 = (_DWORD *)((unint64_t)&v282[v636] & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v285 = *v286;
            uint64_t v287 = (_OWORD *)(((unint64_t)v285 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v288 = (long long *)(((unint64_t)v286 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v289 = *v288;
            long long v290 = v288[1];
            long long v291 = v288[3];
            v287[2] = v288[2];
            v287[3] = v291;
            *uint64_t v287 = v289;
            v287[1] = v290;
            uint64_t v292 = (void *)(((unint64_t)v287 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v293 = (void *)(((unint64_t)v288 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v292 = *v293;
            v292[1] = v293[1];
            uint64_t v294 = (void *)(((unint64_t)v293 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v295 = (void *)(((unint64_t)v292 + 23) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v295 = *v294;
            uint64_t v296 = (void *)(((unint64_t)v294 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v297 = (void *)(((unint64_t)v295 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v297 = *v296;
            uint64_t v298 = (void *)(((unint64_t)v296 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v299 = (void *)(((unint64_t)v297 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v299 = *v298;
            uint64_t v300 = (void *)(((unint64_t)v298 + 15) & 0xFFFFFFFFFFFFFFF8);
            id v301 = (void *)(((unint64_t)v299 + 15) & 0xFFFFFFFFFFFFFFF8);
            *id v301 = *v300;
            unint64_t v302 = (void *)(((unint64_t)v300 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v303 = (void *)(((unint64_t)v301 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v303 = *v302;
            unint64_t v304 = ((unint64_t)v303 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v305 = ((unint64_t)v302 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v306 = *(void **)v305;
            *(void *)unint64_t v304 = *(void *)v305;
            *(unsigned char *)(v304 + 8) = *(unsigned char *)(v305 + 8);
            *(unsigned char *)(v60 + v284) = 2;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v307 = v306;
            unint64_t v245 = v74;
            uint64_t v308 = v282;
            goto LABEL_194;
          case 3u:
            unint64_t v309 = v73 + 1;
            uint64_t v310 = v61;
            uint64_t v311 = v84;
            unint64_t v312 = v73;
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v156 + 16))(v60, v61, v639);
            uint64_t v313 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
            long long v314 = (_DWORD *)((unint64_t)&v310[v636] & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v313 = *v314;
            long long v315 = (_OWORD *)(((unint64_t)v313 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v316 = (long long *)(((unint64_t)v314 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v317 = *v316;
            long long v318 = v316[1];
            long long v319 = v316[3];
            v315[2] = v316[2];
            v315[3] = v319;
            _OWORD *v315 = v317;
            v315[1] = v318;
            uint64_t v320 = (void *)(((unint64_t)v315 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v321 = (void *)(((unint64_t)v316 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v320 = *v321;
            v320[1] = v321[1];
            uint64_t v322 = (void *)(((unint64_t)v320 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v323 = (void *)(((unint64_t)v321 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v322 = *v323;
            uint64_t v324 = (void *)(((unint64_t)v322 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v325 = (void *)(((unint64_t)v323 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v324 = *v325;
            *(void *)(((unint64_t)v324 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v325 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v326 = 3;
            goto LABEL_183;
          case 4u:
            unint64_t v309 = v73 + 1;
            uint64_t v310 = v61;
            uint64_t v311 = v84;
            unint64_t v312 = v73;
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v156 + 16))(v60, v61, v639);
            long long v327 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
            long long v328 = (_DWORD *)((unint64_t)&v310[v636] & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v327 = *v328;
            uint64_t v329 = (_OWORD *)(((unint64_t)v327 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v330 = (long long *)(((unint64_t)v328 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v331 = *v330;
            long long v332 = v330[1];
            long long v333 = v330[3];
            v329[2] = v330[2];
            v329[3] = v333;
            *uint64_t v329 = v331;
            v329[1] = v332;
            v334 = (void *)(((unint64_t)v329 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v335 = (void *)(((unint64_t)v330 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v334 = *v335;
            v334[1] = v335[1];
            uint64_t v336 = (void *)(((unint64_t)v334 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v337 = (void *)(((unint64_t)v335 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v336 = *v337;
            uint64_t v338 = (void *)(((unint64_t)v336 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v339 = (void *)(((unint64_t)v337 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v338 = *v339;
            *(void *)(((unint64_t)v338 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v339 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v326 = 4;
LABEL_183:
            *(unsigned char *)(v60 + v312) = v326;
            swift_bridgeObjectRetain();
            swift_retain();
            unint64_t v245 = v309;
            uint64_t v283 = v311;
            uint64_t v308 = v310;
            goto LABEL_194;
          case 5u:
            unint64_t v245 = v73 + 1;
            uint64_t v246 = v61;
            uint64_t v247 = v84;
            unint64_t v340 = v73;
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v156 + 16))(v60, v61, v639);
            uint64_t v341 = (_DWORD *)((unint64_t)&v246[v636] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v342 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v342 = *v341;
            uint64_t v343 = (_OWORD *)(((unint64_t)v342 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v344 = (long long *)(((unint64_t)v341 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v345 = *v344;
            long long v346 = v344[1];
            long long v347 = v344[3];
            v343[2] = v344[2];
            v343[3] = v347;
            *uint64_t v343 = v345;
            v343[1] = v346;
            uint64_t v348 = (void *)(((unint64_t)v343 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v349 = (void *)(((unint64_t)v344 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v348 = *v349;
            v348[1] = v349[1];
            uint64_t v350 = (void *)(((unint64_t)v348 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v351 = (void *)(((unint64_t)v349 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v350 = *v351;
            *(void *)(((unint64_t)v350 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v351 + 15) & 0xFFFFFFFFFFFFFFF8);
            *(unsigned char *)(v60 + v340) = 5;
            goto LABEL_185;
          default:
            unint64_t v245 = v73 + 1;
            uint64_t v246 = v61;
            uint64_t v247 = v84;
            unint64_t v248 = v73;
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v156 + 16))(v60, v61, v639);
            uint64_t v249 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v250 = (_DWORD *)((unint64_t)&v246[v636] & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v249 = *v250;
            uint64_t v251 = (_OWORD *)(((unint64_t)v249 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v252 = (long long *)(((unint64_t)v250 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v253 = *v252;
            long long v254 = v252[1];
            long long v255 = v252[3];
            v251[2] = v252[2];
            v251[3] = v255;
            _OWORD *v251 = v253;
            v251[1] = v254;
            id v256 = (void *)(((unint64_t)v251 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v257 = (void *)(((unint64_t)v252 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v256 = *v257;
            v256[1] = v257[1];
            uint64_t v258 = (void *)(((unint64_t)v256 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v259 = (void *)(((unint64_t)v257 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v258 = *v259;
            *(void *)(((unint64_t)v258 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v259 + 15) & 0xFFFFFFFFFFFFFFF8);
            *(unsigned char *)(v60 + v248) = 0;
LABEL_185:
            swift_bridgeObjectRetain();
            uint64_t v283 = v247;
            uint64_t v308 = v246;
LABEL_194:
            unint64_t v360 = (void **)((((unint64_t)v308 | 7) + v245) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v361 = *v360;
            id v362 = (void *)(((v60 | 7) + v245) & 0xFFFFFFFFFFFFFFF8);
            *id v362 = *v360;
            uint64_t v363 = (void *)(((unint64_t)v362 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v364 = (void *)(((unint64_t)v360 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v363 = *v364;
            v363[1] = v364[1];
            *(unsigned char *)(v60 + v283) = 4;
            id v365 = v361;
            swift_bridgeObjectRetain();
            uint64_t v84 = v283;
            uint64_t v61 = v308;
            break;
        }
        break;
      case 5u:
        uint64_t v169 = v84;
        if (*(_DWORD *)(v51 + 84) < 0x7FFFFFFFu)
        {
          unint64_t v188 = *(void *)(((((((unint64_t)&v61[v636] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 8);
          if (v188 >= 0xFFFFFFFF) {
            LODWORD(v188) = -1;
          }
          int v172 = v188 + 1;
          uint64_t v170 = v639;
        }
        else
        {
          uint64_t v170 = v639;
          v171 = v61;
          int v172 = (*(uint64_t (**)(unsigned __int8 *))(v51 + 48))(v61);
          uint64_t v61 = v171;
        }
        if (v172)
        {
          uint64_t v189 = v61;
          memcpy((void *)v60, v61, v76);
          uint64_t v61 = v189;
        }
        else
        {
          uint64_t v212 = v61;
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v51 + 16))(v60, v61, v170);
          uint64_t v213 = (_DWORD *)((v636 + v60) & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v214 = (_DWORD *)((unint64_t)&v212[v636] & 0xFFFFFFFFFFFFFFFCLL);
          *uint64_t v213 = *v214;
          uint64_t v215 = (_OWORD *)(((unint64_t)v213 + 11) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v216 = (long long *)(((unint64_t)v214 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v217 = *v216;
          long long v218 = v216[1];
          long long v219 = v216[3];
          v215[2] = v216[2];
          v215[3] = v219;
          *uint64_t v215 = v217;
          v215[1] = v218;
          long long v220 = (void *)(((unint64_t)v215 + 71) & 0xFFFFFFFFFFFFFFF8);
          long long v221 = (void *)(((unint64_t)v216 + 71) & 0xFFFFFFFFFFFFFFF8);
          *long long v220 = *v221;
          v220[1] = v221[1];
          long long v222 = (void *)(((unint64_t)v220 + 23) & 0xFFFFFFFFFFFFFFF8);
          long long v223 = (void *)(((unint64_t)v221 + 23) & 0xFFFFFFFFFFFFFFF8);
          *long long v222 = *v223;
          uint64_t v224 = (void *)(((unint64_t)v222 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v225 = (void *)(((unint64_t)v223 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v224 = *v225;
          unint64_t v226 = (void *)(((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v227 = (void *)(((unint64_t)v225 + 15) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v226 = *v227;
          long long v228 = (void *)(((unint64_t)v226 + 15) & 0xFFFFFFFFFFFFFFF8);
          long long v229 = (void *)(((unint64_t)v227 + 15) & 0xFFFFFFFFFFFFFFF8);
          *long long v228 = *v229;
          uint64_t v230 = (void *)(((unint64_t)v228 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v231 = (void *)(((unint64_t)v229 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v230 = *v231;
          unint64_t v232 = ((unint64_t)v230 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v233 = ((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v234 = *(void **)v233;
          *(void *)unint64_t v232 = *(void *)v233;
          *(unsigned char *)(v232 + 8) = *(unsigned char *)(v233 + 8);
          long long v235 = *(void **)(((unint64_t)v212 | 7) + v72);
          *(void *)((v60 | 7) + v72) = v235;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v236 = v234;
          id v237 = v235;
          uint64_t v61 = v212;
        }
        uint64_t v84 = v169;
        *(unsigned char *)(v60 + v169) = 5;
        break;
      case 6u:
        if (*((void *)v61 + 1) < 0xFFFFFFFFuLL)
        {
          long long v190 = *(_OWORD *)v61;
          long long v191 = *((_OWORD *)v61 + 1);
          long long v192 = *((_OWORD *)v61 + 2);
          *(void *)(v60 + 48) = *((void *)v61 + 6);
          *(_OWORD *)(v60 + 16) = v191;
          *(_OWORD *)(v60 + 32) = v192;
          *(_OWORD *)uint64_t v60 = v190;
        }
        else
        {
          *(void *)uint64_t v60 = *(void *)v61;
          *(void *)(v60 + 8) = *((void *)v61 + 1);
          *(unsigned char *)(v60 + 16) = v61[16];
          *(void *)(v60 + 24) = *((void *)v61 + 3);
          *(void *)(v60 + 32) = *((void *)v61 + 4);
          *(void *)(v60 + 40) = *((void *)v61 + 5);
          *(void *)(v60 + 48) = *((void *)v61 + 6);
          uint64_t v173 = v61;
          uint64_t v174 = v84;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v84 = v174;
          uint64_t v61 = v173;
        }
        *(unsigned char *)(v60 + v84) = 6;
        break;
      case 7u:
        if (*((void *)v61 + 1) < 0xFFFFFFFFuLL)
        {
          *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
          long long v193 = *((_OWORD *)v61 + 1);
          long long v194 = *((_OWORD *)v61 + 2);
          long long v195 = *((_OWORD *)v61 + 3);
          *(void *)(v60 + 64) = *((void *)v61 + 8);
          *(_OWORD *)(v60 + 32) = v194;
          *(_OWORD *)(v60 + 48) = v195;
          *(_OWORD *)(v60 + 16) = v193;
        }
        else
        {
          *(void *)uint64_t v60 = *(void *)v61;
          *(void *)(v60 + 8) = *((void *)v61 + 1);
          *(void *)(v60 + 16) = *((void *)v61 + 2);
          *(void *)(v60 + 24) = *((void *)v61 + 3);
          *(void *)(v60 + 32) = *((void *)v61 + 4);
          *(void *)(v60 + 40) = *((void *)v61 + 5);
          uint64_t v175 = (void *)*((void *)v61 + 6);
          *(void *)(v60 + 48) = v175;
          *(void *)(v60 + 56) = *((void *)v61 + 7);
          *(void *)(v60 + 64) = *((void *)v61 + 8);
          uint64_t v176 = v61;
          uint64_t v177 = v84;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v178 = v175;
          swift_bridgeObjectRetain();
          uint64_t v84 = v177;
          uint64_t v61 = v176;
        }
        *(unsigned char *)(v60 + v84) = 7;
        break;
      case 8u:
        uint64_t v179 = ~v58;
        if ((v77 & 0x80000000) != 0)
        {
          uint64_t v196 = *(void *)(v56 - 8);
          uint64_t v181 = v56;
          v641 = v61;
          uint64_t v197 = v84;
          int v198 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v57 + 48))((unint64_t)&v61[v78] & v179, v77, v56);
          uint64_t v84 = v197;
          uint64_t v61 = v641;
          uint64_t v57 = v196;
          if (v198)
          {
LABEL_132:
            size_t v182 = ((((v82 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
            id v183 = v61;
            uint64_t v184 = v84;
            memcpy((void *)v60, v61, v182);
            uint64_t v84 = v184;
            uint64_t v61 = v183;
            goto LABEL_148;
          }
        }
        else
        {
          unint64_t v180 = *((void *)v61 + 1);
          if (v180 >= 0xFFFFFFFF) {
            LODWORD(v180) = -1;
          }
          uint64_t v181 = v56;
          if (v180 != -1) {
            goto LABEL_132;
          }
        }
        unint64_t v637 = ((v82 + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
        v642 = v61;
        uint64_t v199 = v60;
        *(void *)uint64_t v60 = *(void *)v61;
        *(void *)(v60 + 8) = *((void *)v61 + 1);
        uint64_t v200 = (v78 + v60) & v179;
        unint64_t v201 = (unint64_t)&v61[v78] & v179;
        uint64_t v202 = *(void (**)(uint64_t, unint64_t, uint64_t))(v57 + 16);
        uint64_t v624 = v84;
        swift_bridgeObjectRetain();
        v202(v200, v201, v181);
        unint64_t v203 = (v80 + v201) & v179;
        v202((v80 + v200) & v179, v203, v181);
        uint64_t v60 = v199;
        uint64_t v204 = (void *)((v86 + ((v80 + v200) & v179)) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v205 = (void *)((v86 + v203) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v204 = *v205;
        v204[1] = v205[1];
        unint64_t v206 = ((unint64_t)v204 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v207 = ((unint64_t)v205 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v206 = *(void *)v207;
        *(void *)(v206 + 8) = *(void *)(v207 + 8);
        *(unsigned char *)(v206 + 16) = *(unsigned char *)(v207 + 16);
        long long v208 = (void *)((v199 | 7) + v637);
        long long v209 = (void *)(((unint64_t)v642 | 7) + v637);
        *long long v208 = *v209;
        v208[1] = v209[1];
        long long v210 = (void *)(((unint64_t)v208 + 23) & 0xFFFFFFFFFFFFFFF8);
        long long v211 = (void *)(((unint64_t)v209 + 23) & 0xFFFFFFFFFFFFFFF8);
        void *v210 = *v211;
        v210[1] = v211[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v84 = v624;
        uint64_t v61 = v642;
LABEL_148:
        *(unsigned char *)(v60 + v84) = 8;
        break;
      case 9u:
        if (*(void *)v61 < 0xFFFFFFFFuLL)
        {
          long long v185 = *(_OWORD *)v61;
          long long v186 = *((_OWORD *)v61 + 1);
          long long v187 = *((_OWORD *)v61 + 3);
          *(_OWORD *)(v60 + 32) = *((_OWORD *)v61 + 2);
          *(_OWORD *)(v60 + 48) = v187;
          *(_OWORD *)uint64_t v60 = v185;
          *(_OWORD *)(v60 + 16) = v186;
        }
        else
        {
          *(void *)uint64_t v60 = *(void *)v61;
          *(void *)(v60 + 8) = *((void *)v61 + 1);
          *(void *)(v60 + 16) = *((void *)v61 + 2);
          *(void *)(v60 + 24) = *((void *)v61 + 3);
          *(void *)(v60 + 32) = *((void *)v61 + 4);
          *(void *)(v60 + 40) = *((void *)v61 + 5);
          *(void *)(v60 + 48) = *((void *)v61 + 6);
          *(void *)(v60 + 56) = *((void *)v61 + 7);
          long long v158 = v61;
          uint64_t v159 = v84;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v84 = v159;
          uint64_t v61 = v158;
        }
        *(unsigned char *)(v60 + v84) = 9;
        break;
      default:
        goto LABEL_64;
    }
  }
  unint64_t v93 = (unsigned __int8 *)(v84 + 1 + v60);
  unint64_t v94 = &v61[v84 + 1];
  unsigned __int8 *v93 = *v94;
  v93[1] = v94[1];
  uint64_t v95 = (void *)((unint64_t)(v93 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v96 = (void *)((unint64_t)(v94 + 9) & 0xFFFFFFFFFFFFFFF8);
  void *v95 = *v96;
  uint64_t v97 = (void *)(((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v98 = (void *)(((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v97 = *v98;
  uint64_t v99 = (void *)(((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v100 = (void *)(((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v101 = v100[1];
  *uint64_t v99 = *v100;
  v99[1] = v101;
  unint64_t v102 = ((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v103 = ((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v102 = *(void *)v103;
  *(void *)(v102 + 8) = *(void *)(v103 + 8);
  *(unsigned char *)(v102 + 16) = *(unsigned char *)(v103 + 16);
  unint64_t v104 = ((unint64_t)v99 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v105 = ((unint64_t)v100 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v106 = *(void *)v105;
  uint64_t v107 = *(void *)(v105 + 8);
  char v108 = *(unsigned char *)(v105 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1002B5074(v106, v107, v108, (uint64_t (*)(void))sub_10000F724);
  *(void *)unint64_t v104 = v106;
  *(void *)(v104 + 8) = v107;
  *(unsigned char *)(v104 + 16) = v108;
  unint64_t v109 = ((unint64_t)v99 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v110 = ((unint64_t)v100 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v111 = *(void *)v110;
  uint64_t v112 = *(void *)(v110 + 8);
  char v113 = *(unsigned char *)(v110 + 16);
  sub_1002B5074(*(void *)v110, v112, v113, (uint64_t (*)(void))sub_10014F7F8);
  *(void *)unint64_t v109 = v111;
  *(void *)(v109 + 8) = v112;
  *(unsigned char *)(v109 + 16) = v113;
  uint64_t v114 = type metadata accessor for ColorScheme();
  uint64_t v115 = *(void *)(v114 - 8);
  uint64_t v116 = *(_DWORD *)(v115 + 80) & 0xF8;
  uint64_t v117 = v116 + 24;
  unint64_t v118 = v116 + 24 + v109;
  unint64_t v119 = ~v116 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v120 = (void *)(v118 & v119);
  uint64_t v121 = (unsigned __int8 *)((v117 + v110) & v119);
  if (*(void *)(v115 + 64) <= 8uLL) {
    uint64_t v122 = 8;
  }
  else {
    uint64_t v122 = *(void *)(*(void *)(v114 - 8) + 64);
  }
  unsigned int v123 = v121[v122];
  unsigned int v124 = v123 - 2;
  if (v123 >= 2)
  {
    if (v122 <= 3) {
      uint64_t v125 = v122;
    }
    else {
      uint64_t v125 = 4;
    }
    switch(v125)
    {
      case 1:
        int v126 = *v121;
        if (v122 >= 4) {
          goto LABEL_83;
        }
        goto LABEL_77;
      case 2:
        int v126 = *(unsigned __int16 *)v121;
        if (v122 < 4) {
          goto LABEL_77;
        }
        goto LABEL_83;
      case 3:
        int v126 = *(unsigned __int16 *)((v117 + v110) & v119) | (*(unsigned __int8 *)(((v117 + v110) & v119) + 2) << 16);
        if (v122 < 4) {
          goto LABEL_77;
        }
        goto LABEL_83;
      case 4:
        int v126 = *(_DWORD *)v121;
        if (v122 < 4)
        {
LABEL_77:
          unsigned int v123 = (v126 | (v124 << (8 * v122))) + 2;
          break;
        }
LABEL_83:
        if (v126 != -1) {
          goto LABEL_84;
        }
        goto LABEL_79;
      default:
        break;
    }
  }
  if (v123 == 1)
  {
LABEL_79:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v115 + 16))(v120, v121, v114);
    char v127 = 1;
  }
  else
  {
LABEL_84:
    *uint64_t v120 = *(void *)v121;
    swift_retain();
    char v127 = 0;
  }
  *((unsigned char *)v120 + v122) = v127;
  uint64_t v128 = v122 + 1;
  uint64_t v129 = type metadata accessor for ContentSizeCategory();
  uint64_t v130 = *(void *)(v129 - 8);
  uint64_t v131 = *(_DWORD *)(v130 + 80) & 0xF8 | 7;
  unsigned int v132 = (void *)(((unint64_t)v120 + v128 + v131) & ~v131);
  uint64_t v133 = (unsigned __int8 *)((unint64_t)&v121[v128 + v131] & ~v131);
  if (*(void *)(v130 + 64) <= 8uLL) {
    uint64_t v134 = 8;
  }
  else {
    uint64_t v134 = *(void *)(v130 + 64);
  }
  unsigned int v135 = v133[v134];
  unsigned int v136 = v135 - 2;
  if (v135 >= 2)
  {
    if (v134 <= 3) {
      uint64_t v137 = v134;
    }
    else {
      uint64_t v137 = 4;
    }
    switch(v137)
    {
      case 1:
        int v138 = *v133;
        if (v134 >= 4) {
          goto LABEL_102;
        }
        goto LABEL_96;
      case 2:
        int v138 = *(unsigned __int16 *)v133;
        if (v134 < 4) {
          goto LABEL_96;
        }
        goto LABEL_102;
      case 3:
        int v138 = *(unsigned __int16 *)v133 | (v133[2] << 16);
        if (v134 < 4) {
          goto LABEL_96;
        }
        goto LABEL_102;
      case 4:
        int v138 = *(_DWORD *)v133;
        if (v134 < 4)
        {
LABEL_96:
          unsigned int v135 = (v138 | (v136 << (8 * v134))) + 2;
          break;
        }
LABEL_102:
        if (v138 != -1) {
          goto LABEL_103;
        }
        goto LABEL_98;
      default:
        break;
    }
  }
  if (v135 == 1)
  {
LABEL_98:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v130 + 16))(v132, v133, v129);
    char v139 = 1;
  }
  else
  {
LABEL_103:
    *unsigned int v132 = *(void *)v133;
    swift_retain();
    char v139 = 0;
  }
  *((unsigned char *)v132 + v134) = v139;
  uint64_t v140 = (char *)v132 + v134 + 1;
  uint64_t v141 = &v133[v134 + 1];
  unint64_t v142 = (unint64_t)(v140 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v143 = (unint64_t)(v141 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v144 = *(void *)v143;
  LOBYTE(v143) = *(unsigned char *)(v143 + 8);
  *(void *)unint64_t v142 = v144;
  *(unsigned char *)(v142 + 8) = v143;
  unint64_t v145 = (unint64_t)(v140 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v146 = (unint64_t)(v141 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v145 = *(unsigned char *)v146;
  *(void *)(v145 + 8) = *(void *)(v146 + 8);
  swift_retain();
  swift_retain();
  return v646;
}

unsigned char *sub_1002CE860(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  v1158 = a1;
  uint64_t v1152 = (v7 | 7) + 6;
  uint64_t v9 = (unsigned char *)((unint64_t)&a2[v1152] & ~(v7 | 7));
  uint64_t v8 = (unsigned char *)((unint64_t)&a1[v1152] & ~(v7 | 7));
  unsigned char *v8 = *v9;
  v1148 = v9;
  v1150 = v8;
  v8[1] = v9[1];
  unint64_t v10 = (void *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((unint64_t)(v9 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  v10[1] = v11[1];
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(unsigned char *)(v12 + 5) = *(unsigned char *)(v13 + 5);
  uint64_t v14 = ~v7;
  uint64_t v15 = (void *)((v7 + 6 + v12) & ~v7);
  unint64_t v16 = (void *)((v7 + 6 + v13) & ~v7);
  int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v18 = v17(v15, 1, v5);
  int v19 = v17(v16, 1, v5);
  v1156 = a2;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v15, v16, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v6 + 84);
    size_t v21 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v15, v16, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
    int v20 = *(_DWORD *)(v6 + 84);
    size_t v21 = *(void *)(v6 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy(v15, v16, v22);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v23 = *(void *)(v6 + 64);
  }
  else {
    size_t v23 = *(void *)(v6 + 64) + 1;
  }
  *((unsigned char *)v15 + v23) = *((unsigned char *)v16 + v23);
  unint64_t v24 = ((unint64_t)v15 + v23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v16 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(v25 + 8);
  *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
  *(void *)(v24 + 8) = v26;
  *(_DWORD *)(v24 + 20) = *(_DWORD *)(v25 + 20);
  *(_DWORD *)(v24 + 24) = *(_DWORD *)(v25 + 24);
  *(unsigned char *)(v24 + 28) = *(unsigned char *)(v25 + 28);
  *(unsigned char *)(v24 + 29) = *(unsigned char *)(v25 + 29);
  *(unsigned char *)(v24 + 30) = *(unsigned char *)(v25 + 30);
  *(unsigned char *)(v24 + 31) = *(unsigned char *)(v25 + 31);
  uint64_t v27 = (char *)((v7 + 32 + v24) & v14);
  uint64_t v28 = (void *)((v7 + 32 + v25) & v14);
  int v29 = v17(v27, 1, v5);
  int v30 = v17(v28, 1, v5);
  if (v29)
  {
    uint64_t v31 = ~v7;
    if (!v30)
    {
      (*(void (**)(char *, void *, uint64_t))(v6 + 16))(v27, v28, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v31 = ~v7;
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
LABEL_20:
    memcpy(v27, v28, v23);
    goto LABEL_21;
  }
  (*(void (**)(char *, void *, uint64_t))(v6 + 24))(v27, v28, v5);
LABEL_21:
  uint64_t v1145 = ~(v7 | 7);
  __int16 v32 = &v27[v23];
  *__int16 v32 = *((unsigned char *)v28 + v23);
  v32[1] = *((unsigned char *)v28 + v23 + 1);
  v32[2] = *((unsigned char *)v28 + v23 + 2);
  unint64_t v33 = (void *)((unint64_t)&v27[v23 + 3 + v7] & v31);
  uint64_t v1159 = v31;
  unint64_t v34 = (void *)(((unint64_t)v28 + v23 + v7 + 3) & v31);
  int v35 = v17(v33, 1, v5);
  int v36 = v17(v34, 1, v5);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v33, v34, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v33, 0, 1, v5);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v33, v5);
LABEL_26:
    memcpy(v33, v34, v23);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v33, v34, v5);
LABEL_27:
  size_t v37 = ((v7 + 3 + v23 + ((v7 + 32 + ((v23 + ((v7 + 30) & v1159)) & 0xFFFFFFFFFFFFFFF8)) & v1159)) & v1159) + v23;
  v1150[v37] = v1148[v37];
  unint64_t v38 = (unint64_t)&v1150[v37] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (unint64_t)&v1148[v37] & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v38 + 24) = *(unsigned char *)(v39 + 24);
  *(unsigned char *)(v38 + 25) = *(unsigned char *)(v39 + 25);
  *(unsigned char *)(v38 + 26) = *(unsigned char *)(v39 + 26);
  *(unsigned char *)(v38 + 27) = *(unsigned char *)(v39 + 27);
  *(unsigned char *)(v38 + 28) = *(unsigned char *)(v39 + 28);
  *(unsigned char *)(v38 + 29) = *(unsigned char *)(v39 + 29);
  *(unsigned char *)(v38 + 30) = *(unsigned char *)(v39 + 30);
  unint64_t v40 = (void *)((v38 + 38) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v41 = (void *)((v39 + 38) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(a3 + 16);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(unsigned __int8 *)(v43 + 80);
  unint64_t v45 = ((((v37 + (v1152 & v1145)) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8) + v44 + 16;
  unint64_t v46 = (char *)((unint64_t)&v1158[v45] & ~v44);
  size_t v47 = (char *)((unint64_t)&v1156[v45] & ~v44);
  unint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  int v49 = v48(v46, 1, v42);
  int v50 = v48(v47, 1, v42);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v46, v47, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
      goto LABEL_40;
    }
    int v51 = *(_DWORD *)(v43 + 84);
    size_t v52 = *(void *)(v43 + 64);
  }
  else
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v46, v47, v42);
      goto LABEL_40;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v42);
    int v51 = *(_DWORD *)(v43 + 84);
    size_t v52 = *(void *)(v43 + 64);
  }
  if (v51) {
    size_t v53 = v52;
  }
  else {
    size_t v53 = v52 + 1;
  }
  memcpy(v46, v47, v53);
LABEL_40:
  if (*(_DWORD *)(v43 + 84)) {
    uint64_t v54 = *(void *)(v43 + 64);
  }
  else {
    uint64_t v54 = *(void *)(v43 + 64) + 1;
  }
  uint64_t v55 = &v46[v54];
  uint64_t v56 = &v47[v54];
  v46[v54] = v47[v54];
  uint64_t v1155 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v1155 - 8);
  int v58 = *(_DWORD *)(v57 + 80) & 0xF8;
  uint64_t v1149 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v59 = *(void *)(v1149 - 8);
  uint64_t v60 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v61 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = *(unsigned __int8 *)(v62 + 80);
  uint64_t v64 = v58 | v60 | v63 | 7;
  unint64_t v65 = (unsigned __int8 *)((unint64_t)&v55[v64 + 1] & ~v64);
  uint64_t v66 = (unsigned __int8 *)((unint64_t)&v56[v64 + 1] & ~v64);
  uint64_t v67 = *(void *)(v57 + 64) + 3;
  unint64_t v68 = ((((v67 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = (((v68 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = v69 + 8;
  uint64_t v71 = ~v60;
  uint64_t v72 = v60 + 16;
  unint64_t v73 = (v60 + 16 + ((((((v68 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v60;
  uint64_t v1147 = v59;
  unint64_t v74 = (unint64_t)v66;
  if (*(_DWORD *)(v59 + 84)) {
    size_t v75 = *(void *)(v59 + 64);
  }
  else {
    size_t v75 = *(void *)(v59 + 64) + 1;
  }
  unint64_t v76 = ((((v75 + 7 + v73) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v77 = (v69 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = v77 + 8;
  unint64_t v79 = (((v77 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v80 = (v79 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v81 = v80 + 9;
  if (v70 > v76) {
    unint64_t v76 = v70;
  }
  if (v76 <= v81) {
    unint64_t v76 = v80 + 9;
  }
  if (v76 > v78) {
    unint64_t v78 = v76;
  }
  if ((v78 & 0xFFFFFFFFFFFFFFF8) + 65 <= v78 + 1) {
    unint64_t v82 = v78 + 1;
  }
  else {
    unint64_t v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  uint64_t v1153 = v57;
  uint64_t v83 = *(unsigned int *)(v57 + 84);
  size_t v84 = ((v79 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v1151 = *(_DWORD *)(v62 + 84);
  uint64_t v85 = ~v63;
  uint64_t v86 = v63 + 16;
  uint64_t v87 = *(void *)(*(void *)(v61 - 8) + 64);
  uint64_t v88 = v87 + v63;
  uint64_t v89 = v87 + 7;
  unint64_t v90 = (v87 + 7 + ((v87 + v63 + ((v63 + 16) & ~v63)) & ~v63)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v91 = ((v90 + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
  size_t v92 = ((((v90 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v93 = (((v78 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v82 + 1 > v93) {
    unint64_t v93 = v82 + 1;
  }
  if (v93 <= v84) {
    unint64_t v93 = ((v79 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v93 <= v92) {
    unint64_t v93 = v92;
  }
  if (v93 <= 0x48) {
    uint64_t v94 = 72;
  }
  else {
    uint64_t v94 = v93;
  }
  v1160 = v65;
  unsigned int v95 = v65[v94];
  unsigned int v96 = v66[v94];
  uint64_t v1157 = v94;
  if ((v95 ^ 0xFF) >= 0xF5)
  {
    if (v96 <= 0xA)
    {
      if (v65 != v66)
      {
        unsigned int v97 = v95 - 10;
        v1141 = v66;
        if (v95 >= 0xA)
        {
          if (v94 <= 3) {
            uint64_t v98 = v94;
          }
          else {
            uint64_t v98 = 4;
          }
          switch(v98)
          {
            case 1:
              int v99 = *v65;
              goto LABEL_150;
            case 2:
              int v99 = *(unsigned __int16 *)v65;
              goto LABEL_150;
            case 3:
              int v99 = *(unsigned __int16 *)v65 | (v65[2] << 16);
              goto LABEL_150;
            case 4:
              int v99 = *(_DWORD *)v65;
LABEL_150:
              if (v94 < 4) {
                v99 |= v97 << (8 * v94);
              }
              unsigned int v95 = v99 + 10;
              break;
            default:
              break;
          }
        }
        uint64_t v1139 = v61;
        uint64_t v1140 = ~v63;
        uint64_t v1138 = *(void *)(v61 - 8);
        uint64_t v1146 = v67;
        size_t v1116 = v75 + 7;
        unint64_t v1125 = v78 + 1;
        switch(v95)
        {
          case 0u:
            unint64_t v145 = v78;
            unint64_t v1128 = v91;
            uint64_t v146 = v71;
            uint64_t v1101 = v72;
            swift_bridgeObjectRelease();
            uint64_t v72 = v1101;
            uint64_t v71 = v146;
            unint64_t v91 = v1128;
            unint64_t v78 = v145;
            goto LABEL_428;
          case 1u:
            unint64_t v157 = v78;
            unint64_t v1130 = v91;
            uint64_t v158 = v71;
            size_t __nd = v75;
            uint64_t v159 = v72;
            swift_bridgeObjectRelease();
            uint64_t v72 = v159;
            size_t v75 = __nd;
            uint64_t v71 = v158;
            unint64_t v91 = v1130;
            unint64_t v78 = v157;
            goto LABEL_428;
          case 2u:
            unsigned int v147 = v65[v82];
            unsigned int v148 = v147 - 2;
            if (v147 >= 2)
            {
              if (v82 <= 3) {
                uint64_t v149 = v82;
              }
              else {
                uint64_t v149 = 4;
              }
              switch(v149)
              {
                case 1:
                  int v150 = *v65;
                  goto LABEL_285;
                case 2:
                  int v150 = *(unsigned __int16 *)v65;
                  goto LABEL_285;
                case 3:
                  int v150 = *(unsigned __int16 *)v65 | (v65[2] << 16);
                  goto LABEL_285;
                case 4:
                  int v150 = *(_DWORD *)v65;
LABEL_285:
                  if (v82 < 4) {
                    unsigned int v147 = (v150 | (v148 << (8 * v82))) + 2;
                  }
                  else {
                    unsigned int v147 = v150 + 2;
                  }
                  break;
                default:
                  break;
              }
            }
            unsigned int v312 = v65[v78];
            unint64_t v1119 = v78;
            unint64_t v1135 = v82;
            if (v147 == 1)
            {
              unsigned int v313 = v312 - 6;
              if (v312 >= 6)
              {
                if (v78 <= 3) {
                  uint64_t v314 = v78;
                }
                else {
                  uint64_t v314 = 4;
                }
                switch(v314)
                {
                  case 1:
                    int v315 = *v65;
                    goto LABEL_402;
                  case 2:
                    int v315 = *(unsigned __int16 *)v65;
                    goto LABEL_402;
                  case 3:
                    int v315 = *(unsigned __int16 *)v65 | (v65[2] << 16);
                    goto LABEL_402;
                  case 4:
                    int v315 = *(_DWORD *)v65;
LABEL_402:
                    if (v78 < 4) {
                      v315 |= v313 << (8 * v78);
                    }
                    unsigned int v312 = v315 + 6;
                    break;
                  default:
                    break;
                }
              }
              uint64_t v1115 = v71;
              uint64_t v1104 = v72;
              unsigned int v1100 = v83;
              switch(v312)
              {
                case 1u:
                  unint64_t v1134 = v91;
                  size_t __nb = v75;
                  uint64_t v562 = v71;
                  uint64_t v563 = v72;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v564 = (v563
                        + ((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                + 71) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 31) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)) & v562;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1147 + 48))(v564, 1, v1149))(*(void (**)(unint64_t, uint64_t))(v1147 + 8))(v564, v1149); {
                  unint64_t v565 = (uint64_t *)((v1116 + v564) & 0xFFFFFFFFFFFFFFF8);
                  }
                  unint64_t v566 = v565[1];
                  size_t v75 = __nb;
                  unint64_t v91 = v1134;
                  if ((v566 & 0x3000000000000000) == 0) {
                    sub_100038B34(*v565, v566);
                  }
                  if (*(void *)(((unint64_t)v565 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                  }
                  break;
                case 2u:
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                                  + 71) & 0xFFFFFFFFFFFFFFF8)
                                                + 23) & 0xFFFFFFFFFFFFFFF8)
                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8));
                  break;
                case 3u:
                case 4u:
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  swift_release();
                  break;
                default:
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  break;
              }
              sub_10004FFD4(*(void **)((unint64_t)&v1160[v1125 + 7] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v1160[v1125 + 7] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v1160[v1125 + 7] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v1160[v1125 + 7] & 0xFFFFFFFFFFFFFFF8) + 24));
              sub_10004FFD4(*(void **)((unint64_t)&v1160[v1125 + 39] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v1160[v1125 + 39] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v1160[v1125 + 39] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v1160[v1125 + 39] & 0xFFFFFFFFFFFFFFF8) + 24));
LABEL_416:
              uint64_t v94 = v1157;
              unint64_t v78 = v1119;
              unint64_t v82 = v1135;
              uint64_t v71 = v1115;
              uint64_t v72 = v1104;
              uint64_t v83 = v1100;
            }
            else
            {
              unsigned int v316 = v312 - 6;
              if (v312 >= 6)
              {
                if (v78 <= 3) {
                  uint64_t v317 = v78;
                }
                else {
                  uint64_t v317 = 4;
                }
                switch(v317)
                {
                  case 1:
                    int v318 = *v65;
                    goto LABEL_420;
                  case 2:
                    int v318 = *(unsigned __int16 *)v65;
                    goto LABEL_420;
                  case 3:
                    int v318 = *(unsigned __int16 *)v65 | (v65[2] << 16);
                    goto LABEL_420;
                  case 4:
                    int v318 = *(_DWORD *)v65;
LABEL_420:
                    if (v78 < 4) {
                      v318 |= v316 << (8 * v78);
                    }
                    unsigned int v312 = v318 + 6;
                    break;
                  default:
                    break;
                }
              }
              unint64_t v1129 = v91;
              switch(v312)
              {
                case 1u:
                  unsigned int v1099 = v83;
                  size_t __nc = v75;
                  uint64_t v827 = v71;
                  uint64_t v828 = v72;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v1103 = v828;
                  uint64_t v1114 = v827;
                  unint64_t v829 = (v828
                        + ((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                + 71) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 31) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)) & v827;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1147 + 48))(v829, 1, v1149))(*(void (**)(unint64_t, uint64_t))(v1147 + 8))(v829, v1149); {
                  v830 = (uint64_t *)((v1116 + v829) & 0xFFFFFFFFFFFFFFF8);
                  }
                  unint64_t v831 = v830[1];
                  size_t v75 = __nc;
                  unint64_t v91 = v1129;
                  if ((v831 & 0x3000000000000000) == 0) {
                    sub_100038B34(*v830, v831);
                  }
                  uint64_t v94 = v1157;
                  unint64_t v78 = v1119;
                  uint64_t v71 = v1114;
                  uint64_t v72 = v1103;
                  uint64_t v83 = v83;
                  if (*(void *)(((unint64_t)v830 + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL) {
                    goto LABEL_429;
                  }
                  swift_bridgeObjectRelease();
                  swift_release();
                  break;
                case 2u:
                  uint64_t v1113 = v71;
                  uint64_t v1102 = v72;
                  uint64_t v183 = v83;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v184 = *(void **)((((((((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                               + 71) & 0xFFFFFFFFFFFFFFF8)
                                             + 23) & 0xFFFFFFFFFFFFFFF8)
                                           + 15) & 0xFFFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFFFF8);
                  goto LABEL_204;
                case 3u:
                case 4u:
                  uint64_t v1113 = v71;
                  uint64_t v1102 = v72;
                  uint64_t v183 = v83;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_570;
                default:
                  uint64_t v165 = v71;
                  size_t __n = v75;
                  uint64_t v166 = v72;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                  swift_bridgeObjectRelease();
                  goto LABEL_425;
              }
LABEL_208:
              uint64_t v83 = v1099;
              uint64_t v72 = v1103;
              uint64_t v71 = v1114;
LABEL_427:
              unint64_t v82 = v1135;
              unint64_t v78 = v1119;
LABEL_428:
              uint64_t v94 = v1157;
            }
LABEL_429:
            unint64_t v74 = (unint64_t)v1141;
            unsigned int v567 = v1141[v94];
            unsigned int v568 = v567 - 10;
            if (v567 < 0xA)
            {
              uint64_t v570 = v1146;
              uint64_t v572 = v1138;
              uint64_t v571 = v1139;
              uint64_t v573 = v1140;
            }
            else
            {
              if (v94 <= 3) {
                uint64_t v569 = v94;
              }
              else {
                uint64_t v569 = 4;
              }
              uint64_t v570 = v1146;
              uint64_t v572 = v1138;
              uint64_t v571 = v1139;
              uint64_t v573 = v1140;
              switch(v569)
              {
                case 1:
                  int v574 = *v1141;
                  goto LABEL_439;
                case 2:
                  int v574 = *(unsigned __int16 *)v1141;
                  goto LABEL_439;
                case 3:
                  int v574 = *(unsigned __int16 *)v1141 | (v1141[2] << 16);
                  goto LABEL_439;
                case 4:
                  int v574 = *(_DWORD *)v1141;
LABEL_439:
                  if (v94 < 4) {
                    unsigned int v567 = (v574 | (v568 << (8 * v94))) + 10;
                  }
                  else {
                    unsigned int v567 = v574 + 10;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v567)
            {
              case 0u:
                goto LABEL_443;
              case 1u:
                goto LABEL_447;
              case 2u:
                unsigned int v587 = v1141[v82];
                unsigned int v588 = v587 - 2;
                if (v587 >= 2)
                {
                  if (v82 <= 3) {
                    uint64_t v589 = v82;
                  }
                  else {
                    uint64_t v589 = 4;
                  }
                  switch(v589)
                  {
                    case 1:
                      int v590 = *v1141;
                      goto LABEL_574;
                    case 2:
                      int v590 = *(unsigned __int16 *)v1141;
                      goto LABEL_574;
                    case 3:
                      int v590 = *(unsigned __int16 *)v1141 | (v1141[2] << 16);
                      goto LABEL_574;
                    case 4:
                      int v590 = *(_DWORD *)v1141;
LABEL_574:
                      if (v82 < 4) {
                        unsigned int v587 = (v590 | (v588 << (8 * v82))) + 2;
                      }
                      else {
                        unsigned int v587 = v590 + 2;
                      }
                      break;
                    default:
                      break;
                  }
                }
                unsigned int v708 = v1141[v78];
                if (v587 == 1)
                {
                  unsigned int v709 = v708 - 6;
                  if (v708 >= 6)
                  {
                    if (v78 <= 3) {
                      uint64_t v710 = v78;
                    }
                    else {
                      uint64_t v710 = 4;
                    }
                    switch(v710)
                    {
                      case 1:
                        int v711 = *v1141;
                        goto LABEL_634;
                      case 2:
                        int v711 = *(unsigned __int16 *)v1141;
                        goto LABEL_634;
                      case 3:
                        int v711 = *(unsigned __int16 *)v1141 | (v1141[2] << 16);
                        goto LABEL_634;
                      case 4:
                        int v711 = *(_DWORD *)v1141;
LABEL_634:
                        if (v78 < 4) {
                          v711 |= v709 << (8 * v78);
                        }
                        unsigned int v708 = v711 + 6;
                        break;
                      default:
                        break;
                    }
                  }
                  unint64_t v1137 = v82;
                  switch(v708)
                  {
                    case 1u:
                      unint64_t v1123 = v78;
                      uint64_t v859 = v570;
                      uint64_t v860 = v71;
                      uint64_t v861 = v72;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v1160, v1141, v1155);
                      v862 = (_DWORD *)((unint64_t)&v1160[v859] & 0xFFFFFFFFFFFFFFFCLL);
                      v863 = (_DWORD *)((unint64_t)&v1141[v859] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v862 = *v863;
                      v864 = (_OWORD *)(((unint64_t)v862 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v865 = (long long *)(((unint64_t)v863 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v866 = *v865;
                      long long v867 = v865[1];
                      long long v868 = v865[3];
                      v864[2] = v865[2];
                      v864[3] = v868;
                      _OWORD *v864 = v866;
                      v864[1] = v867;
                      v869 = (void *)(((unint64_t)v864 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v870 = (void *)(((unint64_t)v865 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v869 = *v870;
                      v871 = (void *)(((unint64_t)v869 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v872 = (void *)(((unint64_t)v870 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v871 = *v872;
                      unint64_t v873 = ((unint64_t)v871 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v874 = ((unint64_t)v872 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v873 = *(void *)v874;
                      *(unsigned char *)(v873 + 8) = *(unsigned char *)(v874 + 8);
                      v875 = (void *)(((unint64_t)v871 + 31) & 0xFFFFFFFFFFFFFFF8);
                      v876 = (void *)(((unint64_t)v872 + 31) & 0xFFFFFFFFFFFFFFF8);
                      void *v875 = *v876;
                      v875[1] = v876[1];
                      v877 = (void *)(((unint64_t)v875 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v878 = (void *)(((unint64_t)v876 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v877 = *v878;
                      v877[1] = v878[1];
                      v879 = (void *)(((unint64_t)v877 + v861) & v860);
                      v880 = (const void *)(((unint64_t)v878 + v861) & v860);
                      v881 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1147 + 48);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v881(v880, 1, v1149))
                      {
                        memcpy(v879, v880, v75);
                      }
                      else
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v1147 + 16))(v879, v880, v1149);
                        (*(void (**)(void *, void, uint64_t, uint64_t))(v1147 + 56))(v879, 0, 1, v1149);
                      }
                      unint64_t v1083 = ((unint64_t)v879 + v1116) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v1084 = ((unint64_t)v880 + v1116) & 0xFFFFFFFFFFFFFFF8;
                      uint64_t v1085 = *(void *)(v1084 + 8);
                      if ((v1085 & 0x3000000000000000) != 0)
                      {
                        *(_OWORD *)unint64_t v1083 = *(_OWORD *)v1084;
                      }
                      else
                      {
                        uint64_t v1089 = *(void *)v1084;
                        sub_100038528(*(void *)v1084, *(void *)(v1084 + 8));
                        *(void *)unint64_t v1083 = v1089;
                        *(void *)(v1083 + 8) = v1085;
                      }
                      unint64_t v1090 = (v1083 + 23) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v1091 = (v1084 + 23) & 0xFFFFFFFFFFFFFFF8;
                      if (*(void *)v1091 < 0xFFFFFFFFuLL)
                      {
                        long long v1093 = *(_OWORD *)v1091;
                        *(void *)(v1090 + 16) = *(void *)(v1091 + 16);
                        *(_OWORD *)unint64_t v1090 = v1093;
                      }
                      else
                      {
                        *(void *)unint64_t v1090 = *(void *)v1091;
                        uint64_t v1092 = *(void *)(v1091 + 16);
                        *(void *)(v1090 + 8) = *(void *)(v1091 + 8);
                        *(void *)(v1090 + 16) = v1092;
                        swift_bridgeObjectRetain();
                        swift_retain();
                      }
                      unint64_t v952 = v1125;
                      v1160[v1123] = 1;
                      v905 = v1141;
                      goto LABEL_649;
                    case 2u:
                      unint64_t v882 = v78;
                      uint64_t v883 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v884 = (_DWORD *)((unint64_t)&v1160[v883] & 0xFFFFFFFFFFFFFFFCLL);
                      v885 = (_DWORD *)((unint64_t)&v1141[v883] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v884 = *v885;
                      v886 = (_OWORD *)(((unint64_t)v884 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v887 = (long long *)(((unint64_t)v885 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v888 = *v887;
                      long long v889 = v887[1];
                      long long v890 = v887[3];
                      v886[2] = v887[2];
                      v886[3] = v890;
                      _OWORD *v886 = v888;
                      v886[1] = v889;
                      v891 = (void *)(((unint64_t)v886 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v892 = (void *)(((unint64_t)v887 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v891 = *v892;
                      v891[1] = v892[1];
                      v893 = (void *)(((unint64_t)v892 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v894 = (void *)(((unint64_t)v891 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v894 = *v893;
                      v895 = (void *)(((unint64_t)v893 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v896 = (void *)(((unint64_t)v894 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v896 = *v895;
                      v897 = (void *)(((unint64_t)v895 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v898 = (void *)(((unint64_t)v896 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v898 = *v897;
                      v899 = (void *)(((unint64_t)v897 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v900 = (void *)(((unint64_t)v898 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v900 = *v899;
                      v901 = (void *)(((unint64_t)v899 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v902 = (void *)(((unint64_t)v900 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v902 = *v901;
                      unint64_t v903 = ((unint64_t)v902 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v904 = ((unint64_t)v901 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v905 = v1141;
                      v906 = *(void **)v904;
                      *(void *)unint64_t v903 = *(void *)v904;
                      *(unsigned char *)(v903 + 8) = *(unsigned char *)(v904 + 8);
                      v1160[v882] = 2;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      id v907 = v906;
                      goto LABEL_648;
                    case 3u:
                      v908 = v1160;
                      unint64_t v909 = v78;
                      uint64_t v910 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v911 = (_DWORD *)((unint64_t)&v1160[v910] & 0xFFFFFFFFFFFFFFFCLL);
                      v912 = (_DWORD *)((unint64_t)&v1141[v910] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v911 = *v912;
                      v913 = (_OWORD *)(((unint64_t)v911 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v914 = (long long *)(((unint64_t)v912 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v915 = *v914;
                      long long v916 = v914[1];
                      long long v917 = v914[3];
                      v913[2] = v914[2];
                      v913[3] = v917;
                      _OWORD *v913 = v915;
                      v913[1] = v916;
                      v918 = (void *)(((unint64_t)v913 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v919 = (void *)(((unint64_t)v914 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v918 = *v919;
                      v918[1] = v919[1];
                      v920 = (void *)(((unint64_t)v918 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v921 = (void *)(((unint64_t)v919 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v920 = *v921;
                      v922 = (void *)(((unint64_t)v920 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v923 = (void *)(((unint64_t)v921 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v922 = *v923;
                      *(void *)(((unint64_t)v922 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v923 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v924 = 3;
                      goto LABEL_644;
                    case 4u:
                      v908 = v1160;
                      unint64_t v909 = v78;
                      uint64_t v925 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v926 = (_DWORD *)((unint64_t)&v1160[v925] & 0xFFFFFFFFFFFFFFFCLL);
                      v927 = (_DWORD *)((unint64_t)&v1141[v925] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v926 = *v927;
                      v928 = (_OWORD *)(((unint64_t)v926 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v929 = (long long *)(((unint64_t)v927 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v930 = *v929;
                      long long v931 = v929[1];
                      long long v932 = v929[3];
                      v928[2] = v929[2];
                      v928[3] = v932;
                      _OWORD *v928 = v930;
                      v928[1] = v931;
                      v933 = (void *)(((unint64_t)v928 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v934 = (void *)(((unint64_t)v929 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v933 = *v934;
                      v933[1] = v934[1];
                      v935 = (void *)(((unint64_t)v933 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v936 = (void *)(((unint64_t)v934 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v935 = *v936;
                      v937 = (void *)(((unint64_t)v935 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v938 = (void *)(((unint64_t)v936 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v937 = *v938;
                      *(void *)(((unint64_t)v937 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v938 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v924 = 4;
LABEL_644:
                      v908[v909] = v924;
                      swift_bridgeObjectRetain();
                      swift_retain();
                      goto LABEL_647;
                    case 5u:
                      unint64_t v939 = v78;
                      uint64_t v940 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v941 = (_DWORD *)((unint64_t)&v1141[v940] & 0xFFFFFFFFFFFFFFFCLL);
                      v942 = (_DWORD *)((unint64_t)&v1160[v940] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v942 = *v941;
                      v943 = (_OWORD *)(((unint64_t)v942 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v944 = (long long *)(((unint64_t)v941 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v945 = *v944;
                      long long v946 = v944[1];
                      long long v947 = v944[3];
                      v943[2] = v944[2];
                      v943[3] = v947;
                      _OWORD *v943 = v945;
                      v943[1] = v946;
                      v948 = (void *)(((unint64_t)v943 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v949 = (void *)(((unint64_t)v944 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v948 = *v949;
                      v948[1] = v949[1];
                      v950 = (void *)(((unint64_t)v948 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v951 = (void *)(((unint64_t)v949 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v950 = *v951;
                      *(void *)(((unint64_t)v950 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v951 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1160[v939] = 5;
                      goto LABEL_646;
                    default:
                      unint64_t v846 = v78;
                      uint64_t v847 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v848 = (_DWORD *)((unint64_t)&v1160[v847] & 0xFFFFFFFFFFFFFFFCLL);
                      v849 = (_DWORD *)((unint64_t)&v1141[v847] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v848 = *v849;
                      v850 = (_OWORD *)(((unint64_t)v848 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v851 = (long long *)(((unint64_t)v849 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v852 = *v851;
                      long long v853 = v851[1];
                      long long v854 = v851[3];
                      v850[2] = v851[2];
                      v850[3] = v854;
                      _OWORD *v850 = v852;
                      v850[1] = v853;
                      v855 = (void *)(((unint64_t)v850 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v856 = (void *)(((unint64_t)v851 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v855 = *v856;
                      v855[1] = v856[1];
                      v857 = (void *)(((unint64_t)v855 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v858 = (void *)(((unint64_t)v856 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v857 = *v858;
                      *(void *)(((unint64_t)v857 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v858 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1160[v846] = 0;
LABEL_646:
                      swift_bridgeObjectRetain();
LABEL_647:
                      v905 = v1141;
LABEL_648:
                      unint64_t v952 = v1125;
LABEL_649:
                      v953 = &v1160[v952];
                      v954 = (char *)v905 + v952;
                      unint64_t v955 = (unint64_t)&v1160[v952 + 7] & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v956 = ((unint64_t)v905 + v952 + 7) & 0xFFFFFFFFFFFFFFF8;
                      id v957 = *(id *)v956;
                      v958 = *(void **)(v956 + 8);
                      uint64_t v959 = *(void *)(v956 + 16);
                      unsigned __int8 v960 = *(unsigned char *)(v956 + 24);
                      sub_1000506C4(*(id *)v956, v958, v959, v960);
                      *(void *)unint64_t v955 = v957;
                      *(void *)(v955 + 8) = v958;
                      *(void *)(v955 + 16) = v959;
                      *(unsigned char *)(v955 + 24) = v960;
                      unint64_t v961 = (unint64_t)(v953 + 39) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v962 = (unint64_t)(v954 + 39) & 0xFFFFFFFFFFFFFFF8;
                      id v963 = *(id *)v962;
                      v964 = *(void **)(v962 + 8);
                      uint64_t v965 = *(void *)(v962 + 16);
                      unsigned __int8 v966 = *(unsigned char *)(v962 + 24);
                      sub_1000506C4(*(id *)v962, v964, v965, v966);
                      *(void *)unint64_t v961 = v963;
                      *(void *)(v961 + 8) = v964;
                      *(void *)(v961 + 16) = v965;
                      char v967 = 1;
                      *(unsigned char *)(v961 + 24) = v966;
                      unint64_t v74 = (unint64_t)v905;
                      uint64_t v94 = v1157;
                      unint64_t v82 = v1137;
                      break;
                  }
                }
                else
                {
                  unsigned int v712 = v708 - 6;
                  if (v708 >= 6)
                  {
                    if (v78 <= 3) {
                      uint64_t v713 = v78;
                    }
                    else {
                      uint64_t v713 = 4;
                    }
                    switch(v713)
                    {
                      case 1:
                        int v714 = *v1141;
                        goto LABEL_653;
                      case 2:
                        int v714 = *(unsigned __int16 *)v1141;
                        goto LABEL_653;
                      case 3:
                        int v714 = *(unsigned __int16 *)v1141 | (v1141[2] << 16);
                        goto LABEL_653;
                      case 4:
                        int v714 = *(_DWORD *)v1141;
LABEL_653:
                        if (v78 < 4) {
                          v714 |= v712 << (8 * v78);
                        }
                        unsigned int v708 = v714 + 6;
                        break;
                      default:
                        break;
                    }
                  }
                  switch(v708)
                  {
                    case 1u:
                      unint64_t v1124 = v78;
                      uint64_t v981 = v570;
                      uint64_t v982 = v71;
                      uint64_t v983 = v72;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v1160, v1141, v1155);
                      v984 = (_DWORD *)((unint64_t)&v1160[v981] & 0xFFFFFFFFFFFFFFFCLL);
                      v985 = (_DWORD *)((unint64_t)&v1141[v981] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v984 = *v985;
                      v986 = (_OWORD *)(((unint64_t)v984 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v987 = (long long *)(((unint64_t)v985 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v988 = *v987;
                      long long v989 = v987[1];
                      long long v990 = v987[3];
                      v986[2] = v987[2];
                      v986[3] = v990;
                      _OWORD *v986 = v988;
                      v986[1] = v989;
                      v991 = (void *)(((unint64_t)v986 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v992 = (void *)(((unint64_t)v987 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v991 = *v992;
                      v993 = (void *)(((unint64_t)v991 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v994 = (void *)(((unint64_t)v992 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v993 = *v994;
                      unint64_t v995 = ((unint64_t)v993 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v996 = ((unint64_t)v994 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v995 = *(void *)v996;
                      *(unsigned char *)(v995 + 8) = *(unsigned char *)(v996 + 8);
                      v997 = (void *)(((unint64_t)v993 + 31) & 0xFFFFFFFFFFFFFFF8);
                      v998 = (void *)(((unint64_t)v994 + 31) & 0xFFFFFFFFFFFFFFF8);
                      void *v997 = *v998;
                      v997[1] = v998[1];
                      v999 = (void *)(((unint64_t)v997 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v1000 = (void *)(((unint64_t)v998 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v999 = *v1000;
                      v999[1] = v1000[1];
                      v1001 = (void *)(((unint64_t)v999 + v983) & v982);
                      v1002 = (const void *)(((unint64_t)v1000 + v983) & v982);
                      v1003 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1147 + 48);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v1003(v1002, 1, v1149))
                      {
                        memcpy(v1001, v1002, v75);
                      }
                      else
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v1147 + 16))(v1001, v1002, v1149);
                        (*(void (**)(void *, void, uint64_t, uint64_t))(v1147 + 56))(v1001, 0, 1, v1149);
                      }
                      unint64_t v1086 = ((unint64_t)v1001 + v1116) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v1087 = ((unint64_t)v1002 + v1116) & 0xFFFFFFFFFFFFFFF8;
                      uint64_t v1088 = *(void *)(v1087 + 8);
                      if ((v1088 & 0x3000000000000000) != 0)
                      {
                        *(_OWORD *)unint64_t v1086 = *(_OWORD *)v1087;
                      }
                      else
                      {
                        uint64_t v1094 = *(void *)v1087;
                        sub_100038528(*(void *)v1087, *(void *)(v1087 + 8));
                        *(void *)unint64_t v1086 = v1094;
                        *(void *)(v1086 + 8) = v1088;
                      }
                      unint64_t v1095 = (v1086 + 23) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v1096 = (v1087 + 23) & 0xFFFFFFFFFFFFFFF8;
                      if (*(void *)v1096 < 0xFFFFFFFFuLL)
                      {
                        long long v1098 = *(_OWORD *)v1096;
                        *(void *)(v1095 + 16) = *(void *)(v1096 + 16);
                        *(_OWORD *)unint64_t v1095 = v1098;
                      }
                      else
                      {
                        *(void *)unint64_t v1095 = *(void *)v1096;
                        uint64_t v1097 = *(void *)(v1096 + 16);
                        *(void *)(v1095 + 8) = *(void *)(v1096 + 8);
                        *(void *)(v1095 + 16) = v1097;
                        swift_bridgeObjectRetain();
                        swift_retain();
                      }
                      unint64_t v74 = (unint64_t)v1141;
                      uint64_t v94 = v1157;
                      char v967 = 0;
                      v1160[v1124] = 1;
                      break;
                    case 2u:
                      unint64_t v1004 = v78;
                      uint64_t v1005 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v1006 = (_DWORD *)((unint64_t)&v1160[v1005] & 0xFFFFFFFFFFFFFFFCLL);
                      v1007 = (_DWORD *)((unint64_t)&v1141[v1005] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v1006 = *v1007;
                      v1008 = (_OWORD *)(((unint64_t)v1006 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v1009 = (long long *)(((unint64_t)v1007 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v1010 = *v1009;
                      long long v1011 = v1009[1];
                      long long v1012 = v1009[3];
                      v1008[2] = v1009[2];
                      v1008[3] = v1012;
                      _OWORD *v1008 = v1010;
                      v1008[1] = v1011;
                      v1013 = (void *)(((unint64_t)v1008 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1014 = (void *)(((unint64_t)v1009 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v1013 = *v1014;
                      v1013[1] = v1014[1];
                      v1015 = (void *)(((unint64_t)v1014 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v1016 = (void *)(((unint64_t)v1013 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v1016 = *v1015;
                      v1017 = (void *)(((unint64_t)v1015 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1018 = (void *)(((unint64_t)v1016 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1018 = *v1017;
                      v1019 = (void *)(((unint64_t)v1017 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1020 = (void *)(((unint64_t)v1018 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1020 = *v1019;
                      v1021 = (void *)(((unint64_t)v1019 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1022 = (void *)(((unint64_t)v1020 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1022 = *v1021;
                      v1023 = (void *)(((unint64_t)v1021 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1024 = (void *)(((unint64_t)v1022 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1024 = *v1023;
                      unint64_t v1025 = ((unint64_t)v1024 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v1026 = ((unint64_t)v1023 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v1027 = *(void **)v1026;
                      *(void *)unint64_t v1025 = *(void *)v1026;
                      *(unsigned char *)(v1025 + 8) = *(unsigned char *)(v1026 + 8);
                      v1160[v1004] = 2;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      id v1028 = v1027;
                      uint64_t v94 = v1157;
                      unint64_t v74 = (unint64_t)v1141;
                      goto LABEL_667;
                    case 3u:
                      v1029 = v1160;
                      unint64_t v1030 = v78;
                      uint64_t v1031 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v1032 = (_DWORD *)((unint64_t)&v1160[v1031] & 0xFFFFFFFFFFFFFFFCLL);
                      v1033 = (_DWORD *)((unint64_t)&v1141[v1031] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v1032 = *v1033;
                      v1034 = (_OWORD *)(((unint64_t)v1032 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v1035 = (long long *)(((unint64_t)v1033 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v1036 = *v1035;
                      long long v1037 = v1035[1];
                      long long v1038 = v1035[3];
                      v1034[2] = v1035[2];
                      v1034[3] = v1038;
                      _OWORD *v1034 = v1036;
                      v1034[1] = v1037;
                      v1039 = (void *)(((unint64_t)v1034 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1040 = (void *)(((unint64_t)v1035 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v1039 = *v1040;
                      v1039[1] = v1040[1];
                      v1041 = (void *)(((unint64_t)v1039 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v1042 = (void *)(((unint64_t)v1040 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v1041 = *v1042;
                      v1043 = (void *)(((unint64_t)v1041 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1044 = (void *)(((unint64_t)v1042 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1043 = *v1044;
                      *(void *)(((unint64_t)v1043 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1044 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v1045 = 3;
                      goto LABEL_663;
                    case 4u:
                      v1029 = v1160;
                      unint64_t v1030 = v78;
                      uint64_t v1046 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v1047 = (_DWORD *)((unint64_t)&v1160[v1046] & 0xFFFFFFFFFFFFFFFCLL);
                      v1048 = (_DWORD *)((unint64_t)&v1141[v1046] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v1047 = *v1048;
                      v1049 = (_OWORD *)(((unint64_t)v1047 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v1050 = (long long *)(((unint64_t)v1048 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v1051 = *v1050;
                      long long v1052 = v1050[1];
                      long long v1053 = v1050[3];
                      v1049[2] = v1050[2];
                      v1049[3] = v1053;
                      _OWORD *v1049 = v1051;
                      v1049[1] = v1052;
                      v1054 = (void *)(((unint64_t)v1049 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1055 = (void *)(((unint64_t)v1050 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v1054 = *v1055;
                      v1054[1] = v1055[1];
                      v1056 = (void *)(((unint64_t)v1054 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v1057 = (void *)(((unint64_t)v1055 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v1056 = *v1057;
                      v1058 = (void *)(((unint64_t)v1056 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1059 = (void *)(((unint64_t)v1057 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1058 = *v1059;
                      *(void *)(((unint64_t)v1058 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1059 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v1045 = 4;
LABEL_663:
                      v1029[v1030] = v1045;
                      swift_bridgeObjectRetain();
                      swift_retain();
                      goto LABEL_666;
                    case 5u:
                      unint64_t v1060 = v78;
                      uint64_t v1061 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v1062 = (_DWORD *)((unint64_t)&v1141[v1061] & 0xFFFFFFFFFFFFFFFCLL);
                      v1063 = (_DWORD *)((unint64_t)&v1160[v1061] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v1063 = *v1062;
                      v1064 = (_OWORD *)(((unint64_t)v1063 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v1065 = (long long *)(((unint64_t)v1062 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v1066 = *v1065;
                      long long v1067 = v1065[1];
                      long long v1068 = v1065[3];
                      v1064[2] = v1065[2];
                      v1064[3] = v1068;
                      _OWORD *v1064 = v1066;
                      v1064[1] = v1067;
                      v1069 = (void *)(((unint64_t)v1064 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1070 = (void *)(((unint64_t)v1065 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v1069 = *v1070;
                      v1069[1] = v1070[1];
                      v1071 = (void *)(((unint64_t)v1069 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v1072 = (void *)(((unint64_t)v1070 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v1071 = *v1072;
                      *(void *)(((unint64_t)v1071 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1072 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1160[v1060] = 5;
                      goto LABEL_665;
                    default:
                      unint64_t v968 = v78;
                      uint64_t v969 = v570;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                      v970 = (_DWORD *)((unint64_t)&v1160[v969] & 0xFFFFFFFFFFFFFFFCLL);
                      v971 = (_DWORD *)((unint64_t)&v1141[v969] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v970 = *v971;
                      v972 = (_OWORD *)(((unint64_t)v970 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v973 = (long long *)(((unint64_t)v971 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v974 = *v973;
                      long long v975 = v973[1];
                      long long v976 = v973[3];
                      v972[2] = v973[2];
                      v972[3] = v976;
                      _OWORD *v972 = v974;
                      v972[1] = v975;
                      v977 = (void *)(((unint64_t)v972 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v978 = (void *)(((unint64_t)v973 + 71) & 0xFFFFFFFFFFFFFFF8);
                      void *v977 = *v978;
                      v977[1] = v978[1];
                      v979 = (void *)(((unint64_t)v977 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v980 = (void *)(((unint64_t)v978 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v979 = *v980;
                      *(void *)(((unint64_t)v979 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v980 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1160[v968] = 0;
LABEL_665:
                      swift_bridgeObjectRetain();
LABEL_666:
                      uint64_t v94 = v1157;
LABEL_667:
                      char v967 = 0;
                      break;
                  }
                }
                unint64_t v118 = v1160;
                v1160[v82] = v967;
                goto LABEL_669;
              case 3u:
                uint64_t v595 = *(void *)v1141;
                v596 = (void *)*((void *)v1141 + 1);
                uint64_t v597 = *((void *)v1141 + 2);
                unint64_t v598 = *((void *)v1141 + 3);
                uint64_t v599 = *((void *)v1141 + 4);
                uint64_t v600 = *((void *)v1141 + 5);
                uint64_t v601 = *((void *)v1141 + 6);
                uint64_t v602 = *((void *)v1141 + 7);
                sub_100050624(*(void **)v1141, v596, v597, v598);
                uint64_t v94 = v1157;
                *(void *)v1160 = v595;
                *((void *)v1160 + 1) = v596;
                *((void *)v1160 + 2) = v597;
                *((void *)v1160 + 3) = v598;
                unint64_t v118 = v1160;
                unint64_t v74 = (unint64_t)v1141;
                *((void *)v1160 + 4) = v599;
                *((void *)v1160 + 5) = v600;
                char v119 = 3;
                *((void *)v1160 + 6) = v601;
                *((void *)v1160 + 7) = v602;
                goto LABEL_495;
              case 4u:
                unsigned int v591 = v1141[v78];
                unsigned int v592 = v591 - 6;
                if (v591 >= 6)
                {
                  if (v78 <= 3) {
                    uint64_t v593 = v78;
                  }
                  else {
                    uint64_t v593 = 4;
                  }
                  switch(v593)
                  {
                    case 1:
                      int v594 = *v1141;
                      goto LABEL_593;
                    case 2:
                      int v594 = *(unsigned __int16 *)v1141;
                      goto LABEL_593;
                    case 3:
                      int v594 = *(unsigned __int16 *)v1141 | (v1141[2] << 16);
                      goto LABEL_593;
                    case 4:
                      int v594 = *(_DWORD *)v1141;
LABEL_593:
                      if (v78 < 4) {
                        unsigned int v591 = (v594 | (v592 << (8 * v78))) + 6;
                      }
                      else {
                        unsigned int v591 = v594 + 6;
                      }
                      break;
                    default:
                      break;
                  }
                }
                switch(v591)
                {
                  case 1u:
                    unint64_t v1122 = v78;
                    uint64_t v728 = v570;
                    uint64_t v729 = v71;
                    uint64_t v730 = v72;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v1160, v1141, v1155);
                    v731 = (_DWORD *)((unint64_t)&v1160[v728] & 0xFFFFFFFFFFFFFFFCLL);
                    v732 = (_DWORD *)((unint64_t)&v1141[v728] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v731 = *v732;
                    v733 = (_OWORD *)(((unint64_t)v731 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v734 = (long long *)(((unint64_t)v732 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v735 = *v734;
                    long long v736 = v734[1];
                    long long v737 = v734[3];
                    v733[2] = v734[2];
                    v733[3] = v737;
                    _OWORD *v733 = v735;
                    v733[1] = v736;
                    v738 = (void *)(((unint64_t)v733 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v739 = (void *)(((unint64_t)v734 + 71) & 0xFFFFFFFFFFFFFFF8);
                    void *v738 = *v739;
                    v740 = (void *)(((unint64_t)v738 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v741 = (void *)(((unint64_t)v739 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v740 = *v741;
                    unint64_t v742 = ((unint64_t)v740 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v743 = ((unint64_t)v741 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v742 = *(void *)v743;
                    *(unsigned char *)(v742 + 8) = *(unsigned char *)(v743 + 8);
                    v744 = (void *)(((unint64_t)v740 + 31) & 0xFFFFFFFFFFFFFFF8);
                    v745 = (void *)(((unint64_t)v741 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v744 = *v745;
                    v744[1] = v745[1];
                    v746 = (void *)(((unint64_t)v744 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v747 = (void *)(((unint64_t)v745 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v746 = *v747;
                    v746[1] = v747[1];
                    v748 = (void *)(((unint64_t)v746 + v730) & v729);
                    v749 = (const void *)(((unint64_t)v747 + v730) & v729);
                    v750 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1147 + 48);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v750(v749, 1, v1149))
                    {
                      memcpy(v748, v749, v75);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1147 + 16))(v748, v749, v1149);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v1147 + 56))(v748, 0, 1, v1149);
                    }
                    unint64_t v832 = ((unint64_t)v748 + v1116) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v833 = ((unint64_t)v749 + v1116) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v834 = *(void *)(v833 + 8);
                    if ((v834 & 0x3000000000000000) != 0)
                    {
                      *(_OWORD *)unint64_t v832 = *(_OWORD *)v833;
                    }
                    else
                    {
                      uint64_t v835 = *(void *)v833;
                      sub_100038528(*(void *)v833, *(void *)(v833 + 8));
                      *(void *)unint64_t v832 = v835;
                      *(void *)(v832 + 8) = v834;
                    }
                    unint64_t v836 = (v832 + 23) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v837 = (v833 + 23) & 0xFFFFFFFFFFFFFFF8;
                    if (*(void *)v837 < 0xFFFFFFFFuLL)
                    {
                      long long v839 = *(_OWORD *)v837;
                      *(void *)(v836 + 16) = *(void *)(v837 + 16);
                      *(_OWORD *)unint64_t v836 = v839;
                    }
                    else
                    {
                      *(void *)unint64_t v836 = *(void *)v837;
                      uint64_t v838 = *(void *)(v837 + 16);
                      *(void *)(v836 + 8) = *(void *)(v837 + 8);
                      *(void *)(v836 + 16) = v838;
                      swift_bridgeObjectRetain();
                      swift_retain();
                    }
                    unint64_t v74 = (unint64_t)v1141;
                    uint64_t v294 = v1157;
                    unint64_t v820 = v1125;
                    v1160[v1122] = 1;
                    goto LABEL_608;
                  case 2u:
                    unint64_t v751 = v78;
                    uint64_t v752 = v570;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                    v753 = (_DWORD *)((unint64_t)&v1160[v752] & 0xFFFFFFFFFFFFFFFCLL);
                    v754 = (_DWORD *)((unint64_t)&v1141[v752] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v753 = *v754;
                    v755 = (_OWORD *)(((unint64_t)v753 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v756 = (long long *)(((unint64_t)v754 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v757 = *v756;
                    long long v758 = v756[1];
                    long long v759 = v756[3];
                    v755[2] = v756[2];
                    v755[3] = v759;
                    _OWORD *v755 = v757;
                    v755[1] = v758;
                    v760 = (void *)(((unint64_t)v755 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v761 = (void *)(((unint64_t)v756 + 71) & 0xFFFFFFFFFFFFFFF8);
                    void *v760 = *v761;
                    v760[1] = v761[1];
                    v762 = (void *)(((unint64_t)v761 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v763 = (void *)(((unint64_t)v760 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v763 = *v762;
                    v764 = (void *)(((unint64_t)v762 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v765 = (void *)(((unint64_t)v763 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v765 = *v764;
                    v766 = (void *)(((unint64_t)v764 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v767 = (void *)(((unint64_t)v765 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v767 = *v766;
                    v768 = (void *)(((unint64_t)v766 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v769 = (void *)(((unint64_t)v767 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v769 = *v768;
                    v770 = (void *)(((unint64_t)v768 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v771 = (void *)(((unint64_t)v769 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v771 = *v770;
                    unint64_t v772 = ((unint64_t)v771 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v773 = ((unint64_t)v770 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v774 = *(void **)v773;
                    *(void *)unint64_t v772 = *(void *)v773;
                    *(unsigned char *)(v772 + 8) = *(unsigned char *)(v773 + 8);
                    v1160[v751] = 2;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    id v775 = v774;
                    uint64_t v294 = v1157;
                    unint64_t v74 = (unint64_t)v1141;
                    goto LABEL_607;
                  case 3u:
                    v776 = v1160;
                    unint64_t v777 = v78;
                    uint64_t v778 = v570;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                    v779 = (_DWORD *)((unint64_t)&v1160[v778] & 0xFFFFFFFFFFFFFFFCLL);
                    v780 = (_DWORD *)((unint64_t)&v1141[v778] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v779 = *v780;
                    v781 = (_OWORD *)(((unint64_t)v779 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v782 = (long long *)(((unint64_t)v780 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v783 = *v782;
                    long long v784 = v782[1];
                    long long v785 = v782[3];
                    v781[2] = v782[2];
                    v781[3] = v785;
                    _OWORD *v781 = v783;
                    v781[1] = v784;
                    v786 = (void *)(((unint64_t)v781 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v787 = (void *)(((unint64_t)v782 + 71) & 0xFFFFFFFFFFFFFFF8);
                    void *v786 = *v787;
                    v786[1] = v787[1];
                    v788 = (void *)(((unint64_t)v786 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v789 = (void *)(((unint64_t)v787 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v788 = *v789;
                    v790 = (void *)(((unint64_t)v788 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v791 = (void *)(((unint64_t)v789 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v790 = *v791;
                    *(void *)(((unint64_t)v790 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v791 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v792 = 3;
                    goto LABEL_603;
                  case 4u:
                    v776 = v1160;
                    unint64_t v777 = v78;
                    uint64_t v793 = v570;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                    v794 = (_DWORD *)((unint64_t)&v1160[v793] & 0xFFFFFFFFFFFFFFFCLL);
                    v795 = (_DWORD *)((unint64_t)&v1141[v793] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v794 = *v795;
                    v796 = (_OWORD *)(((unint64_t)v794 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v797 = (long long *)(((unint64_t)v795 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v798 = *v797;
                    long long v799 = v797[1];
                    long long v800 = v797[3];
                    v796[2] = v797[2];
                    v796[3] = v800;
                    _OWORD *v796 = v798;
                    v796[1] = v799;
                    v801 = (void *)(((unint64_t)v796 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v802 = (void *)(((unint64_t)v797 + 71) & 0xFFFFFFFFFFFFFFF8);
                    void *v801 = *v802;
                    v801[1] = v802[1];
                    v803 = (void *)(((unint64_t)v801 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v804 = (void *)(((unint64_t)v802 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v803 = *v804;
                    v805 = (void *)(((unint64_t)v803 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v806 = (void *)(((unint64_t)v804 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v805 = *v806;
                    *(void *)(((unint64_t)v805 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v806 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v792 = 4;
LABEL_603:
                    v776[v777] = v792;
                    swift_bridgeObjectRetain();
                    swift_retain();
                    goto LABEL_606;
                  case 5u:
                    unint64_t v807 = v78;
                    uint64_t v808 = v570;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                    v809 = (_DWORD *)((unint64_t)&v1141[v808] & 0xFFFFFFFFFFFFFFFCLL);
                    v810 = (_DWORD *)((unint64_t)&v1160[v808] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v810 = *v809;
                    v811 = (_OWORD *)(((unint64_t)v810 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v812 = (long long *)(((unint64_t)v809 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v813 = *v812;
                    long long v814 = v812[1];
                    long long v815 = v812[3];
                    v811[2] = v812[2];
                    v811[3] = v815;
                    _OWORD *v811 = v813;
                    v811[1] = v814;
                    v816 = (void *)(((unint64_t)v811 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v817 = (void *)(((unint64_t)v812 + 71) & 0xFFFFFFFFFFFFFFF8);
                    void *v816 = *v817;
                    v816[1] = v817[1];
                    v818 = (void *)(((unint64_t)v816 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v819 = (void *)(((unint64_t)v817 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v818 = *v819;
                    *(void *)(((unint64_t)v818 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v819 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1160[v807] = 5;
                    goto LABEL_605;
                  default:
                    unint64_t v715 = v78;
                    uint64_t v716 = v570;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v1160, v1141, v1155, v71);
                    v717 = (_DWORD *)((unint64_t)&v1160[v716] & 0xFFFFFFFFFFFFFFFCLL);
                    v718 = (_DWORD *)((unint64_t)&v1141[v716] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v717 = *v718;
                    v719 = (_OWORD *)(((unint64_t)v717 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v720 = (long long *)(((unint64_t)v718 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v721 = *v720;
                    long long v722 = v720[1];
                    long long v723 = v720[3];
                    v719[2] = v720[2];
                    v719[3] = v723;
                    _OWORD *v719 = v721;
                    v719[1] = v722;
                    v724 = (void *)(((unint64_t)v719 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v725 = (void *)(((unint64_t)v720 + 71) & 0xFFFFFFFFFFFFFFF8);
                    void *v724 = *v725;
                    v724[1] = v725[1];
                    v726 = (void *)(((unint64_t)v724 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v727 = (void *)(((unint64_t)v725 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v726 = *v727;
                    *(void *)(((unint64_t)v726 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v727 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1160[v715] = 0;
LABEL_605:
                    swift_bridgeObjectRetain();
LABEL_606:
                    uint64_t v294 = v1157;
LABEL_607:
                    unint64_t v820 = v1125;
LABEL_608:
                    unint64_t v295 = v1160;
                    unint64_t v296 = ((unint64_t)v1160 | 7) + v820;
                    unint64_t v297 = (v74 | 7) + v820;
                    break;
                }
                goto LABEL_609;
              case 5u:
                if (v83 < 0x7FFFFFFF)
                {
                  unint64_t v606 = *(void *)(((((((unint64_t)&v1141[v570] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                     + 71) & 0xFFFFFFFFFFFFFFF8)
                                   + 8);
                  if (v606 >= 0xFFFFFFFF) {
                    LODWORD(v606) = -1;
                  }
                  int v603 = v606 + 1;
                }
                else
                {
                  int v603 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v1153 + 48))(v1141, v83, v1155, v71);
                  uint64_t v570 = v1146;
                }
                if (v603) {
                  goto LABEL_483;
                }
                uint64_t v170 = v1160;
                uint64_t v171 = v570;
                (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v1160, v1141, v1155);
                goto LABEL_488;
              case 6u:
                goto LABEL_448;
              case 7u:
                goto LABEL_450;
              case 8u:
                if (v1151 < 0)
                {
                  int v605 = (*(uint64_t (**)(unint64_t))(v572 + 48))((unint64_t)&v1141[v86] & v573);
                  uint64_t v571 = v1139;
                }
                else
                {
                  unint64_t v604 = *((void *)v1141 + 1);
                  if (v604 >= 0xFFFFFFFF) {
                    LODWORD(v604) = -1;
                  }
                  int v605 = v604 + 1;
                }
                if (v605) {
                  goto LABEL_486;
                }
                uint64_t v175 = v1160;
                *(void *)v1160 = *(void *)v1141;
                *((void *)v1160 + 1) = *((void *)v1141 + 1);
                uint64_t v126 = v1140;
                unint64_t v176 = (unint64_t)&v1160[v86] & v1140;
                unint64_t v177 = (unint64_t)&v1141[v86] & v1140;
                id v178 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1138 + 16);
                unint64_t v1127 = v91;
                uint64_t v179 = v571;
                goto LABEL_491;
              case 9u:
                goto LABEL_453;
              default:
                goto LABEL_444;
            }
          case 3u:
            unint64_t v1119 = v78;
            unint64_t v1129 = v91;
            unint64_t v1135 = v82;
            uint64_t v1112 = v71;
            size_t v160 = v75;
            uint64_t v161 = v72;
            sub_10004FF38(*(void **)v65, *((void **)v65 + 1), *((void *)v65 + 2), *((void *)v65 + 3));
            uint64_t v72 = v161;
            size_t v75 = v160;
            goto LABEL_178;
          case 4u:
            unsigned int v151 = v65[v78];
            unsigned int v152 = v151 - 6;
            if (v151 >= 6)
            {
              if (v78 <= 3) {
                uint64_t v153 = v78;
              }
              else {
                uint64_t v153 = 4;
              }
              switch(v153)
              {
                case 1:
                  int v154 = *v65;
                  goto LABEL_304;
                case 2:
                  int v154 = *(unsigned __int16 *)v65;
                  goto LABEL_304;
                case 3:
                  int v154 = *(unsigned __int16 *)v65 | (v65[2] << 16);
                  goto LABEL_304;
                case 4:
                  int v154 = *(_DWORD *)v65;
LABEL_304:
                  if (v78 < 4) {
                    unsigned int v151 = (v154 | (v152 << (8 * v78))) + 6;
                  }
                  else {
                    unsigned int v151 = v154 + 6;
                  }
                  break;
                default:
                  break;
              }
            }
            unint64_t v1119 = v78;
            unint64_t v1135 = v82;
            uint64_t v1115 = v71;
            uint64_t v1104 = v72;
            unsigned int v1100 = v83;
            switch(v151)
            {
              case 1u:
                unint64_t v1133 = v91;
                size_t __na = v75;
                uint64_t v319 = v71;
                uint64_t v320 = v72;
                (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v321 = (v320
                      + ((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                              + 71) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 31) & 0xFFFFFFFFFFFFFFF8)
                        + 23) & 0xFFFFFFFFFFFFFFF8)) & v319;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1147 + 48))(v321, 1, v1149))(*(void (**)(unint64_t, uint64_t))(v1147 + 8))(v321, v1149); {
                uint64_t v322 = (uint64_t *)((v1116 + v321) & 0xFFFFFFFFFFFFFFF8);
                }
                unint64_t v323 = v322[1];
                size_t v75 = __na;
                unint64_t v91 = v1133;
                if ((v323 & 0x3000000000000000) == 0) {
                  sub_100038B34(*v322, v323);
                }
                if (*(void *)(((unint64_t)v322 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                }
                break;
              case 2u:
                (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                                + 71) & 0xFFFFFFFFFFFFFFF8)
                                              + 23) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8));
                break;
              case 3u:
              case 4u:
                (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                swift_bridgeObjectRelease();
                swift_release();
                break;
              default:
                (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
                swift_bridgeObjectRelease();
                break;
            }

            swift_bridgeObjectRelease();
            goto LABEL_416;
          case 5u:
            if (v83 < 0x7FFFFFFF)
            {
              unint64_t v182 = *(void *)(((((((unint64_t)&v65[v67] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                 + 71) & 0xFFFFFFFFFFFFFFF8)
                               + 8);
              if (v182 >= 0xFFFFFFFF) {
                LODWORD(v182) = -1;
              }
              int v164 = v182 + 1;
            }
            else
            {
              unint64_t v1120 = v78;
              unint64_t v1131 = v91;
              uint64_t v162 = v71;
              size_t __ne = v75;
              uint64_t v163 = v72;
              int v164 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v1153 + 48))(v65, v83, v1155);
              uint64_t v72 = v163;
              size_t v75 = __ne;
              uint64_t v71 = v162;
              unint64_t v91 = v1131;
              unint64_t v78 = v1120;
              uint64_t v94 = v1157;
            }
            if (v164) {
              goto LABEL_429;
            }
            unint64_t v1119 = v78;
            unint64_t v1135 = v82;
            uint64_t v1113 = v71;
            unint64_t v1129 = v91;
            uint64_t v1102 = v72;
            uint64_t v183 = v83;
            (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v1160, v1155);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v1146] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                            + 71) & 0xFFFFFFFFFFFFFFF8)
                                          + 23) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8));
            uint64_t v184 = *(void **)(((unint64_t)v1160 | 7) + v81);
LABEL_204:

LABEL_570:
            uint64_t v83 = v183;
            uint64_t v72 = v1102;
            unint64_t v91 = v1129;
            uint64_t v71 = v1113;
            goto LABEL_427;
          case 6u:
            if (*((void *)v65 + 1) < 0xFFFFFFFFuLL) {
              goto LABEL_429;
            }
            unint64_t v1119 = v78;
            unint64_t v1129 = v91;
            unint64_t v1135 = v82;
            uint64_t v165 = v71;
            size_t __n = v75;
            uint64_t v166 = v72;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_425:
            uint64_t v72 = v166;
            size_t v75 = __n;
            uint64_t v71 = v165;
            goto LABEL_426;
          case 7u:
            if (*((void *)v65 + 1) < 0xFFFFFFFFuLL) {
              goto LABEL_429;
            }
            unint64_t v1119 = v78;
            unint64_t v1129 = v91;
            unint64_t v1135 = v82;
            uint64_t v1112 = v71;
            uint64_t v155 = v72;
            uint64_t v156 = v83;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_177;
          case 8u:
            if (v1151 < 0)
            {
              unint64_t v1121 = v78;
              unint64_t v1132 = v91;
              uint64_t v185 = v71;
              size_t __nf = v75;
              uint64_t v186 = v72;
              int v168 = (*(uint64_t (**)(unint64_t))(v62 + 48))((unint64_t)&v65[v86] & v85);
              uint64_t v72 = v186;
              size_t v75 = __nf;
              uint64_t v71 = v185;
              unint64_t v91 = v1132;
              unint64_t v78 = v1121;
              uint64_t v94 = v1157;
            }
            else
            {
              unint64_t v167 = *((void *)v65 + 1);
              if (v167 >= 0xFFFFFFFF) {
                LODWORD(v167) = -1;
              }
              int v168 = v167 + 1;
            }
            if (v168) {
              goto LABEL_429;
            }
            unint64_t v1119 = v78;
            unint64_t v1135 = v82;
            uint64_t v1114 = v71;
            uint64_t v1103 = v72;
            unsigned int v1099 = v83;
            swift_bridgeObjectRelease();
            long long v187 = *(void (**)(void))(v1138 + 8);
            v187();
            v187();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_208;
          case 9u:
            if (*(void *)v65 < 0xFFFFFFFFuLL) {
              goto LABEL_429;
            }
            unint64_t v1119 = v78;
            unint64_t v1129 = v91;
            unint64_t v1135 = v82;
            uint64_t v1112 = v71;
            uint64_t v155 = v72;
            uint64_t v156 = v83;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_177:
            swift_bridgeObjectRelease();
            uint64_t v83 = v156;
            uint64_t v72 = v155;
LABEL_178:
            uint64_t v71 = v1112;
LABEL_426:
            unint64_t v91 = v1129;
            goto LABEL_427;
          default:
            goto LABEL_429;
        }
      }
      goto LABEL_496;
    }
    unsigned int v102 = v95 - 10;
    if (v95 < 0xA)
    {
      unint64_t v104 = v66;
LABEL_87:
      if (v95 > 9) {
        goto LABEL_390;
      }
    }
    else
    {
      if (v94 <= 3) {
        uint64_t v103 = v94;
      }
      else {
        uint64_t v103 = 4;
      }
      unint64_t v104 = v66;
      switch(v103)
      {
        case 1:
          int v105 = *v65;
          break;
        case 2:
          int v105 = *(unsigned __int16 *)v65;
          break;
        case 3:
          int v105 = *(unsigned __int16 *)v65 | (v65[2] << 16);
          break;
        case 4:
          int v105 = *(_DWORD *)v65;
          break;
        default:
          goto LABEL_87;
      }
      if (v94 < 4) {
        v105 |= v102 << (8 * v94);
      }
      unsigned int v95 = v105 + 10;
    }
    switch(v95)
    {
      case 0u:
      case 1u:
        goto LABEL_388;
      case 2u:
        unsigned int v130 = v65[v82];
        unsigned int v131 = v130 - 2;
        if (v130 >= 2)
        {
          if (v82 <= 3) {
            uint64_t v132 = v82;
          }
          else {
            uint64_t v132 = 4;
          }
          switch(v132)
          {
            case 1:
              int v133 = *v65;
              goto LABEL_249;
            case 2:
              int v133 = *(unsigned __int16 *)v65;
              goto LABEL_249;
            case 3:
              int v133 = *(unsigned __int16 *)v65 | (v65[2] << 16);
              goto LABEL_249;
            case 4:
              int v133 = *(_DWORD *)v65;
LABEL_249:
              if (v82 < 4) {
                unsigned int v130 = (v133 | (v131 << (8 * v82))) + 2;
              }
              else {
                unsigned int v130 = v133 + 2;
              }
              break;
            default:
              break;
          }
        }
        unsigned int v298 = v65[v78];
        if (v130 == 1)
        {
          unsigned int v299 = v298 - 6;
          if (v298 >= 6)
          {
            if (v78 <= 3) {
              uint64_t v300 = v78;
            }
            else {
              uint64_t v300 = 4;
            }
            switch(v300)
            {
              case 1:
                int v301 = *v65;
                goto LABEL_366;
              case 2:
                int v301 = *(unsigned __int16 *)v65;
                goto LABEL_366;
              case 3:
                int v301 = *(unsigned __int16 *)v65 | (v65[2] << 16);
                goto LABEL_366;
              case 4:
                int v301 = *(_DWORD *)v65;
LABEL_366:
                if (v78 < 4) {
                  v301 |= v299 << (8 * v78);
                }
                unsigned int v298 = v301 + 6;
                break;
              default:
                break;
            }
          }
          uint64_t v546 = v67;
          unint64_t v547 = v78 + 1;
          switch(v298)
          {
            case 1u:
              uint64_t v548 = v71;
              uint64_t v549 = v72;
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v550 = (v549
                    + ((((((((((((unint64_t)&v1160[v546] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                            + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 31) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)) & v548;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1147 + 48))(v550, 1, v1149)) {
                (*(void (**)(unint64_t, uint64_t))(v1147 + 8))(v550, v1149);
              }
              uint64_t v551 = (uint64_t *)((v75 + 7 + v550) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v552 = v551[1];
              if ((v552 & 0x3000000000000000) == 0) {
                sub_100038B34(*v551, v552);
              }
              if (*(void *)(((unint64_t)v551 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v546] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                              + 71) & 0xFFFFFFFFFFFFFFF8)
                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8));
              break;
            case 3u:
            case 4u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            default:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              break;
          }
          sub_10004FFD4(*(void **)((unint64_t)&v1160[v547 + 7] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v1160[v547 + 7] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v1160[v547 + 7] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v1160[v547 + 7] & 0xFFFFFFFFFFFFFFF8) + 24));
          sub_10004FFD4(*(void **)((unint64_t)&v1160[v547 + 39] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v1160[v547 + 39] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v1160[v547 + 39] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v1160[v547 + 39] & 0xFFFFFFFFFFFFFFF8) + 24));
        }
        else
        {
          unsigned int v302 = v298 - 6;
          if (v298 >= 6)
          {
            if (v78 <= 3) {
              uint64_t v303 = v78;
            }
            else {
              uint64_t v303 = 4;
            }
            switch(v303)
            {
              case 1:
                int v304 = *v65;
                goto LABEL_383;
              case 2:
                int v304 = *(unsigned __int16 *)v65;
                goto LABEL_383;
              case 3:
                int v304 = *(unsigned __int16 *)v65 | (v65[2] << 16);
                goto LABEL_383;
              case 4:
                int v304 = *(_DWORD *)v65;
LABEL_383:
                if (v78 < 4) {
                  v304 |= v302 << (8 * v78);
                }
                unsigned int v298 = v304 + 6;
                break;
              default:
                break;
            }
          }
          uint64_t v553 = v67;
          switch(v298)
          {
            case 1u:
              uint64_t v557 = v71;
              uint64_t v558 = v72;
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v559 = (v558
                    + ((((((((((((unint64_t)&v1160[v553] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                            + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 31) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)) & v557;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1147 + 48))(v559, 1, v1149)) {
                (*(void (**)(unint64_t, uint64_t))(v1147 + 8))(v559, v1149);
              }
              long long v560 = (uint64_t *)((v75 + 7 + v559) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v561 = v560[1];
              if ((v561 & 0x3000000000000000) == 0) {
                sub_100038B34(*v560, v561);
              }
              uint64_t v94 = v1157;
              if (*(void *)(((unint64_t)v560 + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL) {
                goto LABEL_390;
              }
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 2u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v553] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                              + 71) & 0xFFFFFFFFFFFFFFF8)
                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8));
              goto LABEL_389;
            case 3u:
            case 4u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_389;
            default:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
              goto LABEL_388;
          }
        }
        goto LABEL_389;
      case 3u:
        sub_10004FF38(*(void **)v65, *((void **)v65 + 1), *((void *)v65 + 2), *((void *)v65 + 3));
        goto LABEL_389;
      case 4u:
        unsigned int v134 = v65[v78];
        unsigned int v135 = v134 - 6;
        if (v134 >= 6)
        {
          if (v78 <= 3) {
            uint64_t v136 = v78;
          }
          else {
            uint64_t v136 = 4;
          }
          switch(v136)
          {
            case 1:
              int v137 = *v65;
              goto LABEL_268;
            case 2:
              int v137 = *(unsigned __int16 *)v65;
              goto LABEL_268;
            case 3:
              int v137 = *(unsigned __int16 *)v65 | (v65[2] << 16);
              goto LABEL_268;
            case 4:
              int v137 = *(_DWORD *)v65;
LABEL_268:
              if (v78 < 4) {
                unsigned int v134 = (v137 | (v135 << (8 * v78))) + 6;
              }
              else {
                unsigned int v134 = v137 + 6;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v305 = v67;
        unint64_t v306 = v78 + 1;
        switch(v134)
        {
          case 1u:
            uint64_t v307 = v71;
            uint64_t v308 = v72;
            (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v309 = (v308
                  + ((((((((((((unint64_t)&v1160[v305] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)) & v307;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1147 + 48))(v309, 1, v1149)) {
              (*(void (**)(unint64_t, uint64_t))(v1147 + 8))(v309, v1149);
            }
            uint64_t v310 = (uint64_t *)((v75 + 7 + v309) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v311 = v310[1];
            if ((v311 & 0x3000000000000000) == 0) {
              sub_100038B34(*v310, v311);
            }
            if (*(void *)(((unint64_t)v310 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v305] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                            + 71) & 0xFFFFFFFFFFFFFFF8)
                                          + 23) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8));
            break;
          case 3u:
          case 4u:
            (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          default:
            (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v65, v1155);
            swift_bridgeObjectRelease();
            break;
        }

        goto LABEL_388;
      case 5u:
        if (v83 < 0x7FFFFFFF)
        {
          unint64_t v172 = *(void *)(((((((unint64_t)&v65[v67] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 8);
          if (v172 >= 0xFFFFFFFF) {
            LODWORD(v172) = -1;
          }
          int v139 = v172 + 1;
        }
        else
        {
          uint64_t v138 = v67;
          int v139 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v1153 + 48))(v65, v83, v1155, v71);
          uint64_t v67 = v138;
          uint64_t v94 = v1157;
        }
        if (v139) {
          break;
        }
        uint64_t v173 = v67;
        (*(void (**)(unsigned __int8 *, uint64_t))(v1153 + 8))(v1160, v1155);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_release(*(id *)((((((((((((((((((unint64_t)&v1160[v173] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                        + 71) & 0xFFFFFFFFFFFFFFF8)
                                      + 23) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8));

        goto LABEL_389;
      case 6u:
        if (*((void *)v65 + 1) < 0xFFFFFFFFuLL) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_388;
      case 7u:
        if (*((void *)v65 + 1) < 0xFFFFFFFFuLL) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_388;
      case 8u:
        uint64_t v140 = ~v63;
        uint64_t v141 = *(void *)(v61 - 8);
        uint64_t v142 = v61;
        if (v1151 < 0)
        {
          int v144 = (*(uint64_t (**)(unint64_t))(v62 + 48))((unint64_t)&v65[v86] & v85);
          uint64_t v94 = v1157;
        }
        else
        {
          unint64_t v143 = *((void *)v65 + 1);
          if (v143 >= 0xFFFFFFFF) {
            LODWORD(v143) = -1;
          }
          int v144 = v143 + 1;
        }
        if (v144) {
          break;
        }
        swift_bridgeObjectRelease();
        unint64_t v180 = (unint64_t)&v1160[v86] & v140;
        uint64_t v181 = *(void (**)(unint64_t, uint64_t))(v141 + 8);
        v181(v180, v142);
        v181((v88 + v180) & v140, v142);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_388;
      case 9u:
        if (*(void *)v65 < 0xFFFFFFFFuLL) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_388:
        swift_bridgeObjectRelease();
LABEL_389:
        uint64_t v94 = v1157;
        break;
      default:
        break;
    }
LABEL_390:
    size_t v554 = v94 + 1;
    unint64_t v555 = v1160;
    unint64_t v74 = (unint64_t)v104;
    uint64_t v556 = v104;
    goto LABEL_445;
  }
  if ((v96 ^ 0xFF) < 0xF5)
  {
LABEL_444:
    size_t v554 = v94 + 1;
    unint64_t v555 = v1160;
    uint64_t v556 = (const void *)v74;
LABEL_445:
    memcpy(v555, v556, v554);
LABEL_446:
    uint64_t v94 = v1157;
    goto LABEL_496;
  }
  if (v96 >= 0xA)
  {
    if (v94 <= 3) {
      uint64_t v100 = v94;
    }
    else {
      uint64_t v100 = 4;
    }
    switch(v100)
    {
      case 1:
        int v101 = *v66;
        goto LABEL_92;
      case 2:
        int v101 = *(unsigned __int16 *)v66;
        goto LABEL_92;
      case 3:
        int v101 = *(unsigned __int16 *)v66 | (v66[2] << 16);
        goto LABEL_92;
      case 4:
        int v101 = *(_DWORD *)v66;
LABEL_92:
        if (v94 < 4) {
          v101 |= (v96 - 10) << (8 * v94);
        }
        unsigned int v96 = v101 + 10;
        break;
      default:
        break;
    }
  }
  switch(v96)
  {
    case 0u:
LABEL_443:
      *(void *)v1160 = *(void *)v74;
      *((void *)v1160 + 1) = *(void *)(v74 + 8);
      v1160[v94] = 0;
      swift_bridgeObjectRetain();
      goto LABEL_446;
    case 1u:
LABEL_447:
      *(void *)v1160 = *(void *)v74;
      v1160[v94] = 1;
      swift_bridgeObjectRetain();
      goto LABEL_446;
    case 2u:
      unsigned int v106 = v66[v82];
      unsigned int v107 = v106 - 2;
      if (v106 >= 2)
      {
        if (v82 <= 3) {
          uint64_t v108 = v82;
        }
        else {
          uint64_t v108 = 4;
        }
        switch(v108)
        {
          case 1:
            int v109 = *v66;
            goto LABEL_212;
          case 2:
            int v109 = *(unsigned __int16 *)v66;
            goto LABEL_212;
          case 3:
            int v109 = *(unsigned __int16 *)v66 | (v66[2] << 16);
            goto LABEL_212;
          case 4:
            int v109 = *(_DWORD *)v66;
LABEL_212:
            if (v82 < 4) {
              unsigned int v106 = (v109 | (v107 << (8 * v82))) + 2;
            }
            else {
              unsigned int v106 = v109 + 2;
            }
            break;
          default:
            break;
        }
      }
      unsigned int v188 = v66[v78];
      if (v106 == 1)
      {
        unsigned int v189 = v188 - 6;
        if (v188 >= 6)
        {
          if (v78 <= 3) {
            uint64_t v190 = v78;
          }
          else {
            uint64_t v190 = 4;
          }
          switch(v190)
          {
            case 1:
              int v191 = *v66;
              goto LABEL_329;
            case 2:
              int v191 = *(unsigned __int16 *)v66;
              goto LABEL_329;
            case 3:
              int v191 = *(unsigned __int16 *)v66 | (v66[2] << 16);
              goto LABEL_329;
            case 4:
              int v191 = *(_DWORD *)v66;
LABEL_329:
              if (v78 < 4) {
                v191 |= v189 << (8 * v78);
              }
              unsigned int v188 = v191 + 6;
              break;
            default:
              break;
          }
        }
        uint64_t v332 = v67;
        unint64_t v1136 = v82;
        unint64_t v1126 = v78 + 1;
        unint64_t v333 = v78;
        switch(v188)
        {
          case 1u:
            size_t v345 = v75 + 7;
            uint64_t v346 = v71;
            uint64_t v347 = v72;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v65, v66, v1155);
            uint64_t v348 = (_DWORD *)((unint64_t)&v1160[v332] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v1143 = v74;
            uint64_t v349 = (_DWORD *)((v332 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v348 = *v349;
            uint64_t v350 = (_OWORD *)(((unint64_t)v348 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v351 = (long long *)(((unint64_t)v349 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v352 = *v351;
            long long v353 = v351[1];
            long long v354 = v351[3];
            v350[2] = v351[2];
            v350[3] = v354;
            *uint64_t v350 = v352;
            v350[1] = v353;
            uint64_t v355 = (void *)(((unint64_t)v350 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v356 = (void *)(((unint64_t)v351 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v355 = *v356;
            unint64_t v357 = (void *)(((unint64_t)v355 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v358 = (void *)(((unint64_t)v356 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v357 = *v358;
            unint64_t v359 = ((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v360 = ((unint64_t)v358 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v359 = *(void *)v360;
            *(unsigned char *)(v359 + 8) = *(unsigned char *)(v360 + 8);
            uint64_t v361 = (void *)(((unint64_t)v357 + 31) & 0xFFFFFFFFFFFFFFF8);
            id v362 = (void *)(((unint64_t)v358 + 31) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v361 = *v362;
            v361[1] = v362[1];
            uint64_t v363 = (void *)(((unint64_t)v361 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v364 = (void *)(((unint64_t)v362 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v363 = *v364;
            v363[1] = v364[1];
            id v365 = (void *)(((unint64_t)v363 + v347) & v346);
            uint64_t v366 = (const void *)(((unint64_t)v364 + v347) & v346);
            unint64_t v367 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1147 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v367(v366, 1, v1149))
            {
              memcpy(v365, v366, v75);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1147 + 16))(v365, v366, v1149);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1147 + 56))(v365, 0, 1, v1149);
            }
            unint64_t v840 = ((unint64_t)v365 + v345) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v841 = ((unint64_t)v366 + v345) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v842 = *(void *)(v841 + 8);
            if ((v842 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v840 = *(_OWORD *)v841;
            }
            else
            {
              uint64_t v1073 = *(void *)v841;
              sub_100038528(*(void *)v841, *(void *)(v841 + 8));
              *(void *)unint64_t v840 = v1073;
              *(void *)(v840 + 8) = v842;
            }
            unint64_t v1074 = (v840 + 23) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1075 = (v841 + 23) & 0xFFFFFFFFFFFFFFF8;
            if (*(void *)v1075 < 0xFFFFFFFFuLL)
            {
              long long v1077 = *(_OWORD *)v1075;
              *(void *)(v1074 + 16) = *(void *)(v1075 + 16);
              *(_OWORD *)unint64_t v1074 = v1077;
            }
            else
            {
              *(void *)unint64_t v1074 = *(void *)v1075;
              uint64_t v1076 = *(void *)(v1075 + 16);
              *(void *)(v1074 + 8) = *(void *)(v1075 + 8);
              *(void *)(v1074 + 16) = v1076;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            unint64_t v431 = v1126;
            v1160[v333] = 1;
            uint64_t v389 = (void *)v1143;
            goto LABEL_344;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            long long v368 = (_DWORD *)((unint64_t)&v1160[v332] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v369 = (_DWORD *)((v332 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            *long long v368 = *v369;
            uint64_t v370 = (_OWORD *)(((unint64_t)v368 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v371 = (long long *)(((unint64_t)v369 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v372 = *v371;
            long long v373 = v371[1];
            long long v374 = v371[3];
            v370[2] = v371[2];
            v370[3] = v374;
            *uint64_t v370 = v372;
            v370[1] = v373;
            long long v375 = (void *)(((unint64_t)v370 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v376 = (void *)(((unint64_t)v371 + 71) & 0xFFFFFFFFFFFFFFF8);
            *long long v375 = *v376;
            v375[1] = v376[1];
            uint64_t v377 = (void *)(((unint64_t)v376 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v378 = (void *)(((unint64_t)v375 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v378 = *v377;
            uint64_t v379 = (void *)(((unint64_t)v377 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v380 = (void *)(((unint64_t)v378 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v380 = *v379;
            long long v381 = (void *)(((unint64_t)v379 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v382 = (void *)(((unint64_t)v380 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v382 = *v381;
            long long v383 = (void *)(((unint64_t)v381 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v384 = (void *)(((unint64_t)v382 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v384 = *v383;
            uint64_t v385 = (void *)(((unint64_t)v383 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v386 = (void *)(((unint64_t)v384 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v386 = *v385;
            unint64_t v387 = ((unint64_t)v386 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v388 = ((unint64_t)v385 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v389 = (void *)v74;
            uint64_t v390 = *(void **)v388;
            *(void *)unint64_t v387 = *(void *)v388;
            *(unsigned char *)(v387 + 8) = *(unsigned char *)(v388 + 8);
            v1160[v333] = 2;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v391 = v390;
            goto LABEL_343;
          case 3u:
            uint64_t v392 = v65;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            unint64_t v393 = (_DWORD *)((unint64_t)&v1160[v332] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v394 = (_DWORD *)((v332 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            *unint64_t v393 = *v394;
            long long v395 = (_OWORD *)(((unint64_t)v393 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v396 = (long long *)(((unint64_t)v394 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v397 = *v396;
            long long v398 = v396[1];
            long long v399 = v396[3];
            v395[2] = v396[2];
            v395[3] = v399;
            *long long v395 = v397;
            v395[1] = v398;
            uint64_t v400 = (void *)(((unint64_t)v395 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v401 = (void *)(((unint64_t)v396 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v400 = *v401;
            v400[1] = v401[1];
            unint64_t v402 = (void *)(((unint64_t)v400 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v403 = (void *)(((unint64_t)v401 + 23) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v402 = *v403;
            unint64_t v404 = (void *)(((unint64_t)v402 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v405 = (void *)(((unint64_t)v403 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v404 = *v405;
            *(void *)(((unint64_t)v404 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v405 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v406 = 3;
            goto LABEL_339;
          case 4u:
            uint64_t v392 = v65;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            uint64_t v407 = (_DWORD *)((unint64_t)&v1160[v332] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v408 = (_DWORD *)((v332 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v407 = *v408;
            long long v409 = (_OWORD *)(((unint64_t)v407 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v410 = (long long *)(((unint64_t)v408 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v411 = *v410;
            long long v412 = v410[1];
            long long v413 = v410[3];
            v409[2] = v410[2];
            v409[3] = v413;
            *long long v409 = v411;
            v409[1] = v412;
            uint64_t v414 = (void *)(((unint64_t)v409 + 71) & 0xFFFFFFFFFFFFFFF8);
            unsigned __int8 v415 = (void *)(((unint64_t)v410 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v414 = *v415;
            v414[1] = v415[1];
            char v416 = (void *)(((unint64_t)v414 + 23) & 0xFFFFFFFFFFFFFFF8);
            v417 = (void *)(((unint64_t)v415 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v416 = *v417;
            uint64_t v418 = (void *)(((unint64_t)v416 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v419 = (void *)(((unint64_t)v417 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v418 = *v419;
            *(void *)(((unint64_t)v418 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v406 = 4;
LABEL_339:
            v392[v333] = v406;
            swift_bridgeObjectRetain();
            swift_retain();
            goto LABEL_342;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            v420 = (_DWORD *)((v332 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            long long v421 = (_DWORD *)((unint64_t)&v1160[v332] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v421 = *v420;
            long long v422 = (_OWORD *)(((unint64_t)v421 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v423 = (long long *)(((unint64_t)v420 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v424 = *v423;
            long long v425 = v423[1];
            long long v426 = v423[3];
            v422[2] = v423[2];
            v422[3] = v426;
            *long long v422 = v424;
            v422[1] = v425;
            id v427 = (void *)(((unint64_t)v422 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v428 = (void *)(((unint64_t)v423 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v427 = *v428;
            v427[1] = v428[1];
            v429 = (void *)(((unint64_t)v427 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v430 = (void *)(((unint64_t)v428 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v429 = *v430;
            *(void *)(((unint64_t)v429 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v430 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1160[v333] = 5;
            goto LABEL_341;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            v334 = (_DWORD *)((unint64_t)&v1160[v332] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v335 = (_DWORD *)((v332 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v334 = *v335;
            uint64_t v336 = (_OWORD *)(((unint64_t)v334 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v337 = (long long *)(((unint64_t)v335 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v338 = *v337;
            long long v339 = v337[1];
            long long v340 = v337[3];
            v336[2] = v337[2];
            v336[3] = v340;
            *uint64_t v336 = v338;
            v336[1] = v339;
            uint64_t v341 = (void *)(((unint64_t)v336 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v342 = (void *)(((unint64_t)v337 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v341 = *v342;
            v341[1] = v342[1];
            uint64_t v343 = (void *)(((unint64_t)v341 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v344 = (void *)(((unint64_t)v342 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v343 = *v344;
            *(void *)(((unint64_t)v343 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1160[v333] = 0;
LABEL_341:
            swift_bridgeObjectRetain();
LABEL_342:
            uint64_t v389 = (void *)v74;
LABEL_343:
            unint64_t v431 = v1126;
LABEL_344:
            long long v432 = &v1160[v431];
            long long v433 = (char *)v389 + v431;
            unint64_t v434 = (unint64_t)&v1160[v431 + 7] & 0xFFFFFFFFFFFFFFF8;
            unint64_t v435 = ((unint64_t)v389 + v431 + 7) & 0xFFFFFFFFFFFFFFF8;
            id v436 = *(id *)v435;
            long long v437 = *(void **)(v435 + 8);
            uint64_t v438 = *(void *)(v435 + 16);
            unsigned __int8 v439 = *(unsigned char *)(v435 + 24);
            sub_1000506C4(*(id *)v435, v437, v438, v439);
            *(void *)unint64_t v434 = v436;
            *(void *)(v434 + 8) = v437;
            *(void *)(v434 + 16) = v438;
            *(unsigned char *)(v434 + 24) = v439;
            unint64_t v440 = (unint64_t)(v432 + 39) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v441 = (unint64_t)(v433 + 39) & 0xFFFFFFFFFFFFFFF8;
            id v442 = *(id *)v441;
            v443 = *(void **)(v441 + 8);
            uint64_t v444 = *(void *)(v441 + 16);
            unsigned __int8 v445 = *(unsigned char *)(v441 + 24);
            sub_1000506C4(*(id *)v441, v443, v444, v445);
            *(void *)unint64_t v440 = v442;
            *(void *)(v440 + 8) = v443;
            *(void *)(v440 + 16) = v444;
            char v446 = 1;
            *(unsigned char *)(v440 + 24) = v445;
            unint64_t v74 = (unint64_t)v389;
            uint64_t v94 = v1157;
            unint64_t v447 = v1136;
            break;
        }
      }
      else
      {
        unsigned int v192 = v188 - 6;
        if (v188 >= 6)
        {
          if (v78 <= 3) {
            uint64_t v193 = v78;
          }
          else {
            uint64_t v193 = 4;
          }
          switch(v193)
          {
            case 1:
              int v194 = *v66;
              goto LABEL_348;
            case 2:
              int v194 = *(unsigned __int16 *)v66;
              goto LABEL_348;
            case 3:
              int v194 = *(unsigned __int16 *)v66 | (v66[2] << 16);
              goto LABEL_348;
            case 4:
              int v194 = *(_DWORD *)v66;
LABEL_348:
              if (v78 < 4) {
                v194 |= v192 << (8 * v78);
              }
              unsigned int v188 = v194 + 6;
              break;
            default:
              break;
          }
        }
        uint64_t v448 = v67;
        unint64_t v447 = v82;
        unint64_t v449 = v78;
        switch(v188)
        {
          case 1u:
            size_t v1118 = v75 + 7;
            uint64_t v461 = v71;
            uint64_t v462 = v72;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v65, v66, v1155);
            v463 = (_DWORD *)((unint64_t)&v1160[v448] & 0xFFFFFFFFFFFFFFFCLL);
            v1144 = (void *)v74;
            long long v464 = (_DWORD *)((v448 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v463 = *v464;
            long long v465 = (_OWORD *)(((unint64_t)v463 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v466 = (long long *)(((unint64_t)v464 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v467 = *v466;
            long long v468 = v466[1];
            long long v469 = v466[3];
            v465[2] = v466[2];
            v465[3] = v469;
            *long long v465 = v467;
            v465[1] = v468;
            uint64_t v470 = (void *)(((unint64_t)v465 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v471 = (void *)(((unint64_t)v466 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v470 = *v471;
            unint64_t v472 = (void *)(((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v473 = (void *)(((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v472 = *v473;
            unint64_t v474 = ((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v475 = ((unint64_t)v473 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v474 = *(void *)v475;
            *(unsigned char *)(v474 + 8) = *(unsigned char *)(v475 + 8);
            id v476 = (void *)(((unint64_t)v472 + 31) & 0xFFFFFFFFFFFFFFF8);
            long long v477 = (void *)(((unint64_t)v473 + 31) & 0xFFFFFFFFFFFFFFF8);
            *id v476 = *v477;
            v476[1] = v477[1];
            uint64_t v478 = (void *)(((unint64_t)v476 + 23) & 0xFFFFFFFFFFFFFFF8);
            unsigned __int8 v479 = (void *)(((unint64_t)v477 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v478 = *v479;
            v478[1] = v479[1];
            v480 = (void *)(((unint64_t)v478 + v462) & v461);
            unint64_t v481 = (const void *)(((unint64_t)v479 + v462) & v461);
            unint64_t v482 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1147 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v482(v481, 1, v1149))
            {
              memcpy(v480, v481, v75);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1147 + 16))(v480, v481, v1149);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1147 + 56))(v480, 0, 1, v1149);
            }
            unint64_t v843 = ((unint64_t)v480 + v1118) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v844 = ((unint64_t)v481 + v1118) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v845 = *(void *)(v844 + 8);
            if ((v845 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v843 = *(_OWORD *)v844;
            }
            else
            {
              uint64_t v1078 = *(void *)v844;
              sub_100038528(*(void *)v844, *(void *)(v844 + 8));
              *(void *)unint64_t v843 = v1078;
              *(void *)(v843 + 8) = v845;
            }
            unint64_t v1079 = (v843 + 23) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1080 = (v844 + 23) & 0xFFFFFFFFFFFFFFF8;
            if (*(void *)v1080 < 0xFFFFFFFFuLL)
            {
              long long v1082 = *(_OWORD *)v1080;
              *(void *)(v1079 + 16) = *(void *)(v1080 + 16);
              *(_OWORD *)unint64_t v1079 = v1082;
            }
            else
            {
              *(void *)unint64_t v1079 = *(void *)v1080;
              uint64_t v1081 = *(void *)(v1080 + 16);
              *(void *)(v1079 + 8) = *(void *)(v1080 + 8);
              *(void *)(v1079 + 16) = v1081;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            unint64_t v74 = (unint64_t)v1144;
            uint64_t v94 = v1157;
            char v446 = 0;
            v1160[v449] = 1;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            id v483 = (_DWORD *)((unint64_t)&v1160[v448] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v484 = (_DWORD *)((v448 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            *id v483 = *v484;
            uint64_t v485 = (_OWORD *)(((unint64_t)v483 + 11) & 0xFFFFFFFFFFFFFFF8);
            unsigned __int8 v486 = (long long *)(((unint64_t)v484 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v487 = *v486;
            long long v488 = v486[1];
            long long v489 = v486[3];
            v485[2] = v486[2];
            v485[3] = v489;
            *uint64_t v485 = v487;
            v485[1] = v488;
            long long v490 = (void *)(((unint64_t)v485 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v491 = (void *)(((unint64_t)v486 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v490 = *v491;
            v490[1] = v491[1];
            unint64_t v492 = (void *)(((unint64_t)v491 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v493 = (void *)(((unint64_t)v490 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v493 = *v492;
            v494 = (void *)(((unint64_t)v492 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v495 = (void *)(((unint64_t)v493 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v495 = *v494;
            v496 = (void *)(((unint64_t)v494 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v497 = (void *)(((unint64_t)v495 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v497 = *v496;
            long long v498 = (void *)(((unint64_t)v496 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v499 = (void *)(((unint64_t)v497 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v499 = *v498;
            uint64_t v500 = (void *)(((unint64_t)v498 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v501 = (void *)(((unint64_t)v499 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v501 = *v500;
            unint64_t v502 = ((unint64_t)v501 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v503 = ((unint64_t)v500 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v504 = (void *)v74;
            uint64_t v505 = *(void **)v503;
            *(void *)unint64_t v502 = *(void *)v503;
            *(unsigned char *)(v502 + 8) = *(unsigned char *)(v503 + 8);
            v1160[v449] = 2;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v506 = v505;
            unint64_t v74 = (unint64_t)v504;
            goto LABEL_361;
          case 3u:
            uint64_t v507 = v65;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            unint64_t v508 = (_DWORD *)((unint64_t)&v1160[v448] & 0xFFFFFFFFFFFFFFFCLL);
            long long v509 = (_DWORD *)((v448 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v508 = *v509;
            long long v510 = (_OWORD *)(((unint64_t)v508 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v511 = (long long *)(((unint64_t)v509 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v512 = *v511;
            long long v513 = v511[1];
            long long v514 = v511[3];
            v510[2] = v511[2];
            v510[3] = v514;
            *long long v510 = v512;
            v510[1] = v513;
            uint64_t v515 = (void *)(((unint64_t)v510 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v516 = (void *)(((unint64_t)v511 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v515 = *v516;
            v515[1] = v516[1];
            unint64_t v517 = (void *)(((unint64_t)v515 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v518 = (void *)(((unint64_t)v516 + 23) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v517 = *v518;
            long long v519 = (void *)(((unint64_t)v517 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v520 = (void *)(((unint64_t)v518 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v519 = *v520;
            *(void *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v520 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v521 = 3;
            goto LABEL_358;
          case 4u:
            uint64_t v507 = v65;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            unint64_t v522 = (_DWORD *)((unint64_t)&v1160[v448] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v523 = (_DWORD *)((v448 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v522 = *v523;
            long long v524 = (_OWORD *)(((unint64_t)v522 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v525 = (long long *)(((unint64_t)v523 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v526 = *v525;
            long long v527 = v525[1];
            long long v528 = v525[3];
            v524[2] = v525[2];
            v524[3] = v528;
            *long long v524 = v526;
            v524[1] = v527;
            unint64_t v529 = (void *)(((unint64_t)v524 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v530 = (void *)(((unint64_t)v525 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v529 = *v530;
            v529[1] = v530[1];
            size_t v531 = (void *)(((unint64_t)v529 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v532 = (void *)(((unint64_t)v530 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v531 = *v532;
            uint64_t v533 = (void *)(((unint64_t)v531 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v534 = (void *)(((unint64_t)v532 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v533 = *v534;
            *(void *)(((unint64_t)v533 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v534 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v521 = 4;
LABEL_358:
            v507[v449] = v521;
            swift_bridgeObjectRetain();
            swift_retain();
            goto LABEL_361;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            long long v535 = (_DWORD *)((v448 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            long long v536 = (_DWORD *)((unint64_t)&v1160[v448] & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v536 = *v535;
            size_t v537 = (_OWORD *)(((unint64_t)v536 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v538 = (long long *)(((unint64_t)v535 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v539 = *v538;
            long long v540 = v538[1];
            long long v541 = v538[3];
            v537[2] = v538[2];
            v537[3] = v541;
            _OWORD *v537 = v539;
            v537[1] = v540;
            v542 = (void *)(((unint64_t)v537 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v543 = (void *)(((unint64_t)v538 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v542 = *v543;
            v542[1] = v543[1];
            uint64_t v544 = (void *)(((unint64_t)v542 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v545 = (void *)(((unint64_t)v543 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v544 = *v545;
            *(void *)(((unint64_t)v544 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v545 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1160[v449] = 5;
            goto LABEL_360;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
            long long v450 = (_DWORD *)((unint64_t)&v1160[v448] & 0xFFFFFFFFFFFFFFFCLL);
            long long v451 = (_DWORD *)((v448 + v74) & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v450 = *v451;
            long long v452 = (_OWORD *)(((unint64_t)v450 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v453 = (long long *)(((unint64_t)v451 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v454 = *v453;
            long long v455 = v453[1];
            long long v456 = v453[3];
            v452[2] = v453[2];
            v452[3] = v456;
            *long long v452 = v454;
            v452[1] = v455;
            uint64_t v457 = (void *)(((unint64_t)v452 + 71) & 0xFFFFFFFFFFFFFFF8);
            v458 = (void *)(((unint64_t)v453 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v457 = *v458;
            v457[1] = v458[1];
            uint64_t v459 = (void *)(((unint64_t)v457 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v460 = (void *)(((unint64_t)v458 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v459 = *v460;
            *(void *)(((unint64_t)v459 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v460 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1160[v449] = 0;
LABEL_360:
            swift_bridgeObjectRetain();
LABEL_361:
            char v446 = 0;
            uint64_t v94 = v1157;
            break;
        }
      }
      unint64_t v118 = v1160;
      v1160[v447] = v446;
LABEL_669:
      char v119 = 2;
      goto LABEL_495;
    case 3u:
      uint64_t v110 = *(void *)v66;
      uint64_t v111 = (void *)*((void *)v66 + 1);
      uint64_t v112 = *((void *)v66 + 2);
      unint64_t v113 = *((void *)v66 + 3);
      uint64_t v114 = *((void *)v66 + 4);
      uint64_t v115 = *((void *)v66 + 5);
      uint64_t v116 = *((void *)v66 + 6);
      uint64_t v117 = *((void *)v66 + 7);
      sub_100050624(*(void **)v66, v111, v112, v113);
      uint64_t v94 = v1157;
      *(void *)v1160 = v110;
      *((void *)v1160 + 1) = v111;
      *((void *)v1160 + 2) = v112;
      *((void *)v1160 + 3) = v113;
      *((void *)v1160 + 4) = v114;
      unint64_t v118 = v1160;
      *((void *)v1160 + 5) = v115;
      *((void *)v1160 + 6) = v116;
      char v119 = 3;
      *((void *)v1160 + 7) = v117;
      goto LABEL_495;
    case 4u:
      unsigned int v120 = v66[v78];
      unsigned int v121 = v120 - 6;
      if (v120 >= 6)
      {
        if (v78 <= 3) {
          uint64_t v122 = v78;
        }
        else {
          uint64_t v122 = 4;
        }
        switch(v122)
        {
          case 1:
            int v123 = *v66;
            goto LABEL_231;
          case 2:
            int v123 = *(unsigned __int16 *)v66;
            goto LABEL_231;
          case 3:
            int v123 = *(unsigned __int16 *)v66 | (v66[2] << 16);
            goto LABEL_231;
          case 4:
            int v123 = *(_DWORD *)v66;
LABEL_231:
            if (v78 < 4) {
              unsigned int v120 = (v123 | (v121 << (8 * v78))) + 6;
            }
            else {
              unsigned int v120 = v123 + 6;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v195 = v67;
      unint64_t v196 = v78 + 1;
      unint64_t v197 = v78;
      switch(v120)
      {
        case 1u:
          size_t v1117 = v75 + 7;
          uint64_t v209 = v71;
          uint64_t v210 = v72;
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1153 + 16))(v65, v66, v1155);
          long long v211 = (_DWORD *)((unint64_t)&v1160[v195] & 0xFFFFFFFFFFFFFFFCLL);
          v1142 = (void *)v74;
          uint64_t v212 = (_DWORD *)((v195 + v74) & 0xFFFFFFFFFFFFFFFCLL);
          _DWORD *v211 = *v212;
          uint64_t v213 = (_OWORD *)(((unint64_t)v211 + 11) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v214 = (long long *)(((unint64_t)v212 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v215 = *v214;
          long long v216 = v214[1];
          long long v217 = v214[3];
          v213[2] = v214[2];
          v213[3] = v217;
          *uint64_t v213 = v215;
          v213[1] = v216;
          long long v218 = (void *)(((unint64_t)v213 + 71) & 0xFFFFFFFFFFFFFFF8);
          long long v219 = (void *)(((unint64_t)v214 + 71) & 0xFFFFFFFFFFFFFFF8);
          *long long v218 = *v219;
          long long v220 = (void *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8);
          long long v221 = (void *)(((unint64_t)v219 + 15) & 0xFFFFFFFFFFFFFFF8);
          *long long v220 = *v221;
          unint64_t v222 = ((unint64_t)v220 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v223 = ((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v222 = *(void *)v223;
          *(unsigned char *)(v222 + 8) = *(unsigned char *)(v223 + 8);
          uint64_t v224 = (void *)(((unint64_t)v220 + 31) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v225 = (void *)(((unint64_t)v221 + 31) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v224 = *v225;
          v224[1] = v225[1];
          unint64_t v226 = (void *)(((unint64_t)v224 + 23) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v227 = (void *)(((unint64_t)v225 + 23) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v226 = *v227;
          v226[1] = v227[1];
          long long v228 = (void *)(((unint64_t)v226 + v210) & v209);
          long long v229 = (const void *)(((unint64_t)v227 + v210) & v209);
          uint64_t v230 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1147 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v230(v229, 1, v1149))
          {
            memcpy(v228, v229, v75);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1147 + 16))(v228, v229, v1149);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1147 + 56))(v228, 0, 1, v1149);
          }
          unint64_t v324 = ((unint64_t)v228 + v1117) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v325 = ((unint64_t)v229 + v1117) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v326 = *(void *)(v325 + 8);
          if ((v326 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v324 = *(_OWORD *)v325;
          }
          else
          {
            uint64_t v327 = *(void *)v325;
            sub_100038528(*(void *)v325, *(void *)(v325 + 8));
            *(void *)unint64_t v324 = v327;
            *(void *)(v324 + 8) = v326;
          }
          unint64_t v328 = (v324 + 23) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v329 = (v325 + 23) & 0xFFFFFFFFFFFFFFF8;
          if (*(void *)v329 < 0xFFFFFFFFuLL)
          {
            long long v331 = *(_OWORD *)v329;
            *(void *)(v328 + 16) = *(void *)(v329 + 16);
            *(_OWORD *)unint64_t v328 = v331;
          }
          else
          {
            *(void *)unint64_t v328 = *(void *)v329;
            uint64_t v330 = *(void *)(v329 + 16);
            *(void *)(v328 + 8) = *(void *)(v329 + 8);
            *(void *)(v328 + 16) = v330;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          unint64_t v74 = (unint64_t)v1142;
          uint64_t v294 = v1157;
          v1160[v197] = 1;
          goto LABEL_245;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
          uint64_t v231 = (_DWORD *)((unint64_t)&v1160[v195] & 0xFFFFFFFFFFFFFFFCLL);
          unint64_t v232 = (_DWORD *)((v195 + v74) & 0xFFFFFFFFFFFFFFFCLL);
          *uint64_t v231 = *v232;
          unint64_t v233 = (_OWORD *)(((unint64_t)v231 + 11) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v234 = (long long *)(((unint64_t)v232 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v235 = *v234;
          long long v236 = v234[1];
          long long v237 = v234[3];
          v233[2] = v234[2];
          v233[3] = v237;
          _OWORD *v233 = v235;
          v233[1] = v236;
          unsigned int v238 = (void *)(((unint64_t)v233 + 71) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v239 = (void *)(((unint64_t)v234 + 71) & 0xFFFFFFFFFFFFFFF8);
          *unsigned int v238 = *v239;
          v238[1] = v239[1];
          uint64_t v240 = (void *)(((unint64_t)v239 + 23) & 0xFFFFFFFFFFFFFFF8);
          int v241 = (void *)(((unint64_t)v238 + 23) & 0xFFFFFFFFFFFFFFF8);
          *int v241 = *v240;
          unsigned int v242 = (void *)(((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v243 = (void *)(((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v243 = *v242;
          int v244 = (void *)(((unint64_t)v242 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v245 = (void *)(((unint64_t)v243 + 15) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v245 = *v244;
          uint64_t v246 = (void *)(((unint64_t)v244 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v247 = (void *)(((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v247 = *v246;
          unint64_t v248 = (void *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v249 = (void *)(((unint64_t)v247 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v249 = *v248;
          unint64_t v250 = ((unint64_t)v249 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v251 = ((unint64_t)v248 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v252 = (void *)v74;
          long long v253 = *(void **)v251;
          *(void *)unint64_t v250 = *(void *)v251;
          *(unsigned char *)(v250 + 8) = *(unsigned char *)(v251 + 8);
          v1160[v197] = 2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v254 = v253;
          unint64_t v74 = (unint64_t)v252;
          goto LABEL_244;
        case 3u:
          long long v255 = v65;
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
          id v256 = (_DWORD *)((unint64_t)&v1160[v195] & 0xFFFFFFFFFFFFFFFCLL);
          long long v257 = (_DWORD *)((v195 + v74) & 0xFFFFFFFFFFFFFFFCLL);
          _DWORD *v256 = *v257;
          uint64_t v258 = (_OWORD *)(((unint64_t)v256 + 11) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v259 = (long long *)(((unint64_t)v257 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v260 = *v259;
          long long v261 = v259[1];
          long long v262 = v259[3];
          v258[2] = v259[2];
          v258[3] = v262;
          _OWORD *v258 = v260;
          v258[1] = v261;
          long long v263 = (void *)(((unint64_t)v258 + 71) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v264 = (void *)(((unint64_t)v259 + 71) & 0xFFFFFFFFFFFFFFF8);
          *long long v263 = *v264;
          v263[1] = v264[1];
          uint64_t v265 = (void *)(((unint64_t)v263 + 23) & 0xFFFFFFFFFFFFFFF8);
          long long v266 = (void *)(((unint64_t)v264 + 23) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v265 = *v266;
          long long v267 = (void *)(((unint64_t)v265 + 15) & 0xFFFFFFFFFFFFFFF8);
          long long v268 = (void *)(((unint64_t)v266 + 15) & 0xFFFFFFFFFFFFFFF8);
          *long long v267 = *v268;
          *(void *)(((unint64_t)v267 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v268 + 15) & 0xFFFFFFFFFFFFFFF8);
          char v269 = 3;
          goto LABEL_241;
        case 4u:
          long long v255 = v65;
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
          char v270 = (_DWORD *)((unint64_t)&v1160[v195] & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v271 = (_DWORD *)((v195 + v74) & 0xFFFFFFFFFFFFFFFCLL);
          *char v270 = *v271;
          uint64_t v272 = (_OWORD *)(((unint64_t)v270 + 11) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v273 = (long long *)(((unint64_t)v271 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v274 = *v273;
          long long v275 = v273[1];
          long long v276 = v273[3];
          v272[2] = v273[2];
          v272[3] = v276;
          *uint64_t v272 = v274;
          v272[1] = v275;
          long long v277 = (void *)(((unint64_t)v272 + 71) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v278 = (void *)(((unint64_t)v273 + 71) & 0xFFFFFFFFFFFFFFF8);
          void *v277 = *v278;
          v277[1] = v278[1];
          uint64_t v279 = (void *)(((unint64_t)v277 + 23) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v280 = (void *)(((unint64_t)v278 + 23) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v279 = *v280;
          uint64_t v281 = (void *)(((unint64_t)v279 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v282 = (void *)(((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v281 = *v282;
          *(void *)(((unint64_t)v281 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8);
          char v269 = 4;
LABEL_241:
          v255[v197] = v269;
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_244;
        case 5u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
          uint64_t v283 = (_DWORD *)((v195 + v74) & 0xFFFFFFFFFFFFFFFCLL);
          unint64_t v284 = (_DWORD *)((unint64_t)&v1160[v195] & 0xFFFFFFFFFFFFFFFCLL);
          *unint64_t v284 = *v283;
          uint64_t v285 = (_OWORD *)(((unint64_t)v284 + 11) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v286 = (long long *)(((unint64_t)v283 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v287 = *v286;
          long long v288 = v286[1];
          long long v289 = v286[3];
          v285[2] = v286[2];
          v285[3] = v289;
          *uint64_t v285 = v287;
          v285[1] = v288;
          long long v290 = (void *)(((unint64_t)v285 + 71) & 0xFFFFFFFFFFFFFFF8);
          long long v291 = (void *)(((unint64_t)v286 + 71) & 0xFFFFFFFFFFFFFFF8);
          *long long v290 = *v291;
          v290[1] = v291[1];
          uint64_t v292 = (void *)(((unint64_t)v290 + 23) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v293 = (void *)(((unint64_t)v291 + 23) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v292 = *v293;
          *(void *)(((unint64_t)v292 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v293 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1160[v197] = 5;
          goto LABEL_243;
        default:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1153 + 16))(v65, v66, v1155, v71);
          int v198 = (_DWORD *)((unint64_t)&v1160[v195] & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v199 = (_DWORD *)((v195 + v74) & 0xFFFFFFFFFFFFFFFCLL);
          *int v198 = *v199;
          uint64_t v200 = (_OWORD *)(((unint64_t)v198 + 11) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v201 = (long long *)(((unint64_t)v199 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v202 = *v201;
          long long v203 = v201[1];
          long long v204 = v201[3];
          v200[2] = v201[2];
          v200[3] = v204;
          _OWORD *v200 = v202;
          v200[1] = v203;
          uint64_t v205 = (void *)(((unint64_t)v200 + 71) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v206 = (void *)(((unint64_t)v201 + 71) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v205 = *v206;
          v205[1] = v206[1];
          unint64_t v207 = (void *)(((unint64_t)v205 + 23) & 0xFFFFFFFFFFFFFFF8);
          long long v208 = (void *)(((unint64_t)v206 + 23) & 0xFFFFFFFFFFFFFFF8);
          void *v207 = *v208;
          *(void *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1160[v197] = 0;
LABEL_243:
          swift_bridgeObjectRetain();
LABEL_244:
          uint64_t v294 = v1157;
LABEL_245:
          unint64_t v295 = v1160;
          unint64_t v296 = ((unint64_t)v1160 | 7) + v196;
          unint64_t v297 = (v74 | 7) + v196;
LABEL_609:
          v821 = (void **)(v297 & 0xFFFFFFFFFFFFFFF8);
          v822 = *v821;
          v823 = (void *)(v296 & 0xFFFFFFFFFFFFFFF8);
          void *v823 = *v821;
          v824 = (void *)(((unint64_t)v823 + 15) & 0xFFFFFFFFFFFFFFF8);
          v825 = (void *)(((unint64_t)v821 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v824 = *v825;
          v824[1] = v825[1];
          v295[v294] = 4;
          id v826 = v822;
          swift_bridgeObjectRetain();
          break;
      }
      goto LABEL_446;
    case 5u:
      if (v83 < 0x7FFFFFFF)
      {
        unint64_t v169 = *(void *)(((((((unint64_t)&v66[v67] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 8);
        if (v169 >= 0xFFFFFFFF) {
          LODWORD(v169) = -1;
        }
        int v125 = v169 + 1;
      }
      else
      {
        uint64_t v124 = v67;
        int v125 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v1153 + 48))(v66, v83, v1155, v71);
        uint64_t v67 = v124;
      }
      if (v125)
      {
LABEL_483:
        memcpy(v1160, (const void *)v74, v84);
      }
      else
      {
        uint64_t v170 = v1160;
        uint64_t v171 = v67;
        (*(void (**)(unsigned __int8 *, unint64_t, uint64_t))(v1153 + 16))(v1160, v74, v1155);
LABEL_488:
        long long v607 = (_DWORD *)((unint64_t)&v170[v171] & 0xFFFFFFFFFFFFFFFCLL);
        uint64_t v608 = (_DWORD *)((v171 + v74) & 0xFFFFFFFFFFFFFFFCLL);
        *long long v607 = *v608;
        unint64_t v609 = (_OWORD *)(((unint64_t)v607 + 11) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v610 = (long long *)(((unint64_t)v608 + 11) & 0xFFFFFFFFFFFFFFF8);
        long long v611 = *v610;
        long long v612 = v610[1];
        long long v613 = v610[3];
        v609[2] = v610[2];
        v609[3] = v613;
        *unint64_t v609 = v611;
        v609[1] = v612;
        unint64_t v614 = (void *)(((unint64_t)v609 + 71) & 0xFFFFFFFFFFFFFFF8);
        v615 = (void *)(((unint64_t)v610 + 71) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v614 = *v615;
        v614[1] = v615[1];
        v616 = (void *)(((unint64_t)v614 + 23) & 0xFFFFFFFFFFFFFFF8);
        v617 = (void *)(((unint64_t)v615 + 23) & 0xFFFFFFFFFFFFFFF8);
        void *v616 = *v617;
        unint64_t v618 = (void *)(((unint64_t)v616 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v619 = (void *)(((unint64_t)v617 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v618 = *v619;
        unint64_t v620 = (void *)(((unint64_t)v618 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v621 = (void *)(((unint64_t)v619 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v620 = *v621;
        unint64_t v622 = (void *)(((unint64_t)v620 + 15) & 0xFFFFFFFFFFFFFFF8);
        v623 = (void *)(((unint64_t)v621 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v622 = *v623;
        uint64_t v624 = (void *)(((unint64_t)v622 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v625 = (void *)(((unint64_t)v623 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v624 = *v625;
        unint64_t v626 = ((unint64_t)v624 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v627 = ((unint64_t)v625 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v628 = v74;
        uint64_t v629 = *(void **)v627;
        *(void *)unint64_t v626 = *(void *)v627;
        *(unsigned char *)(v626 + 8) = *(unsigned char *)(v627 + 8);
        uint64_t v630 = *(void **)((v628 | 7) + v81);
        *(void *)(((unint64_t)v170 | 7) + v81) = v630;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v631 = v629;
        unint64_t v74 = v628;
        id v632 = v630;
      }
      char v119 = 5;
      goto LABEL_493;
    case 6u:
LABEL_448:
      if (*(void *)(v74 + 8) < 0xFFFFFFFFuLL)
      {
        long long v578 = *(_OWORD *)v74;
        long long v579 = *(_OWORD *)(v74 + 16);
        long long v580 = *(_OWORD *)(v74 + 32);
        *((void *)v1160 + 6) = *(void *)(v74 + 48);
        *((_OWORD *)v1160 + 1) = v579;
        *((_OWORD *)v1160 + 2) = v580;
        *(_OWORD *)v1160 = v578;
      }
      else
      {
        *(void *)v1160 = *(void *)v74;
        *((void *)v1160 + 1) = *(void *)(v74 + 8);
        v1160[16] = *(unsigned char *)(v74 + 16);
        *((void *)v1160 + 3) = *(void *)(v74 + 24);
        *((void *)v1160 + 4) = *(void *)(v74 + 32);
        *((void *)v1160 + 5) = *(void *)(v74 + 40);
        *((void *)v1160 + 6) = *(void *)(v74 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v94 = v1157;
      }
      char v119 = 6;
      break;
    case 7u:
LABEL_450:
      if (*(void *)(v74 + 8) < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)v1160 = *(_OWORD *)v74;
        long long v581 = *(_OWORD *)(v74 + 16);
        long long v582 = *(_OWORD *)(v74 + 32);
        long long v583 = *(_OWORD *)(v74 + 48);
        *((void *)v1160 + 8) = *(void *)(v74 + 64);
        *((_OWORD *)v1160 + 2) = v582;
        *((_OWORD *)v1160 + 3) = v583;
        *((_OWORD *)v1160 + 1) = v581;
      }
      else
      {
        *(void *)v1160 = *(void *)v74;
        *((void *)v1160 + 1) = *(void *)(v74 + 8);
        *((void *)v1160 + 2) = *(void *)(v74 + 16);
        *((void *)v1160 + 3) = *(void *)(v74 + 24);
        *((void *)v1160 + 4) = *(void *)(v74 + 32);
        *((void *)v1160 + 5) = *(void *)(v74 + 40);
        long long v575 = (void *)v74;
        long long v576 = *(void **)(v74 + 48);
        *((void *)v1160 + 6) = v576;
        *((void *)v1160 + 7) = v575[7];
        *((void *)v1160 + 8) = v575[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v577 = v576;
        unint64_t v74 = (unint64_t)v575;
        swift_bridgeObjectRetain();
        uint64_t v94 = v1157;
      }
      char v119 = 7;
      break;
    case 8u:
      unint64_t v1127 = v91;
      if (v1151 < 0)
      {
        uint64_t v126 = ~v63;
        uint64_t v127 = *(void *)(v61 - 8);
        uint64_t v174 = v61;
        int v129 = (*(uint64_t (**)(unint64_t))(v62 + 48))((unint64_t)&v66[v86] & v85);
        uint64_t v61 = v174;
      }
      else
      {
        uint64_t v126 = ~v63;
        uint64_t v127 = *(void *)(v61 - 8);
        unint64_t v128 = *((void *)v66 + 1);
        if (v128 >= 0xFFFFFFFF) {
          LODWORD(v128) = -1;
        }
        int v129 = v128 + 1;
      }
      if (v129)
      {
LABEL_486:
        memcpy(v1160, (const void *)v74, v92);
      }
      else
      {
        uint64_t v175 = v1160;
        *(void *)v1160 = *(void *)v74;
        *((void *)v1160 + 1) = *(void *)(v74 + 8);
        unint64_t v176 = (unint64_t)&v1160[v86] & v126;
        unint64_t v177 = (v86 + v74) & v126;
        v1141 = (unsigned __int8 *)v74;
        id v178 = *(void (**)(unint64_t, unint64_t, uint64_t))(v127 + 16);
        uint64_t v179 = v61;
LABEL_491:
        swift_bridgeObjectRetain();
        v178(v176, v177, v179);
        unint64_t v633 = (v88 + v177) & v126;
        v178((v88 + v176) & v126, v633, v179);
        unint64_t v74 = (unint64_t)v1141;
        uint64_t v634 = (void *)((v89 + ((v88 + v176) & v126)) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v635 = (void *)((v89 + v633) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v634 = *v635;
        v634[1] = v635[1];
        unint64_t v636 = ((unint64_t)v634 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v637 = ((unint64_t)v635 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v636 = *(void *)v637;
        *(void *)(v636 + 8) = *(void *)(v637 + 8);
        *(unsigned char *)(v636 + 16) = *(unsigned char *)(v637 + 16);
        v638 = (void *)(((unint64_t)v175 | 7) + v1127);
        uint64_t v639 = (void *)(((unint64_t)v1141 | 7) + v1127);
        void *v638 = *v639;
        v638[1] = v639[1];
        v640 = (void *)(((unint64_t)v638 + 23) & 0xFFFFFFFFFFFFFFF8);
        v641 = (void *)(((unint64_t)v639 + 23) & 0xFFFFFFFFFFFFFFF8);
        void *v640 = *v641;
        v640[1] = v641[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      char v119 = 8;
LABEL_493:
      uint64_t v94 = v1157;
      break;
    case 9u:
LABEL_453:
      if (*(void *)v74 < 0xFFFFFFFFuLL)
      {
        long long v584 = *(_OWORD *)v74;
        long long v585 = *(_OWORD *)(v74 + 16);
        long long v586 = *(_OWORD *)(v74 + 48);
        *((_OWORD *)v1160 + 2) = *(_OWORD *)(v74 + 32);
        *((_OWORD *)v1160 + 3) = v586;
        *(_OWORD *)v1160 = v584;
        *((_OWORD *)v1160 + 1) = v585;
      }
      else
      {
        *(void *)v1160 = *(void *)v74;
        *((void *)v1160 + 1) = *(void *)(v74 + 8);
        *((void *)v1160 + 2) = *(void *)(v74 + 16);
        *((void *)v1160 + 3) = *(void *)(v74 + 24);
        *((void *)v1160 + 4) = *(void *)(v74 + 32);
        *((void *)v1160 + 5) = *(void *)(v74 + 40);
        *((void *)v1160 + 6) = *(void *)(v74 + 48);
        *((void *)v1160 + 7) = *(void *)(v74 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v94 = v1157;
      }
      char v119 = 9;
      break;
    default:
      goto LABEL_444;
  }
  unint64_t v118 = v1160;
LABEL_495:
  v118[v94] = v119;
LABEL_496:
  unint64_t v642 = (unint64_t)&v1160[v94 + 1];
  unint64_t v643 = v94 + 1 + v74;
  *(unsigned char *)unint64_t v642 = *(unsigned char *)v643;
  *(unsigned char *)(v642 + 1) = *(unsigned char *)(v643 + 1);
  v642 += 9;
  v643 += 9;
  unint64_t v644 = (v643 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v642 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v643 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v645 = (v642 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v645 &= 0xFFFFFFFFFFFFFFF8;
  v644 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v645 = *(void *)v644;
  swift_retain();
  swift_release();
  uint64_t v646 = (void *)((v645 + 15) & 0xFFFFFFFFFFFFFFF8);
  v647 = (void *)((v644 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v648 = v647[1];
  *uint64_t v646 = *v647;
  v646[1] = v648;
  swift_retain();
  swift_release();
  unint64_t v649 = ((unint64_t)v646 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v650 = ((unint64_t)v647 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v649 = *(void *)v650;
  swift_retain();
  swift_release();
  *(void *)(v649 + 8) = *(void *)(v650 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v649 + 16) = *(unsigned char *)(v650 + 16);
  unint64_t v651 = ((unint64_t)v646 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v652 = ((unint64_t)v647 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v653 = *(void *)v652;
  uint64_t v654 = *(void *)(v652 + 8);
  LOBYTE(v650) = *(unsigned char *)(v652 + 16);
  sub_1002B5074(*(void *)v652, v654, v650, (uint64_t (*)(void))sub_10000F724);
  uint64_t v655 = *(void *)v651;
  uint64_t v656 = *(void *)(v651 + 8);
  char v657 = *(unsigned char *)(v651 + 16);
  *(void *)unint64_t v651 = v653;
  *(void *)(v651 + 8) = v654;
  *(unsigned char *)(v651 + 16) = v650;
  sub_1002B52E0(v655, v656, v657, (uint64_t (*)(void))sub_10000F478);
  unint64_t v658 = ((unint64_t)v646 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v659 = ((unint64_t)v647 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v660 = *(void *)v659;
  uint64_t v661 = *(void *)(v659 + 8);
  LOBYTE(v650) = *(unsigned char *)(v659 + 16);
  sub_1002B5074(*(void *)v659, v661, v650, (uint64_t (*)(void))sub_10014F7F8);
  uint64_t v662 = *(void *)v658;
  uint64_t v663 = *(void *)(v658 + 8);
  char v664 = *(unsigned char *)(v658 + 16);
  *(void *)unint64_t v658 = v660;
  *(void *)(v658 + 8) = v661;
  *(unsigned char *)(v658 + 16) = v650;
  sub_1002B52E0(v662, v663, v664, (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v665 = type metadata accessor for ColorScheme();
  uint64_t v666 = *(void *)(v665 - 8);
  uint64_t v667 = *(_DWORD *)(v666 + 80) & 0xF8;
  uint64_t v668 = v667 + 24;
  unint64_t v669 = v667 + 24 + v658;
  unint64_t v670 = ~v667 & 0xFFFFFFFFFFFFFFF8;
  v671 = (unsigned __int8 *)(v669 & v670);
  v672 = (unsigned __int8 *)((v668 + v659) & v670);
  if (*(void *)(v666 + 64) <= 8uLL) {
    uint64_t v673 = 8;
  }
  else {
    uint64_t v673 = *(void *)(*(void *)(v665 - 8) + 64);
  }
  if (v671 != v672)
  {
    uint64_t v674 = v665;
    unsigned int v675 = v671[v673];
    unsigned int v676 = v675 - 2;
    if (v675 >= 2)
    {
      if (v673 <= 3) {
        uint64_t v677 = v673;
      }
      else {
        uint64_t v677 = 4;
      }
      switch(v677)
      {
        case 1:
          int v678 = *v671;
          if (v673 >= 4) {
            goto LABEL_514;
          }
          goto LABEL_508;
        case 2:
          int v678 = *(unsigned __int16 *)v671;
          if (v673 < 4) {
            goto LABEL_508;
          }
          goto LABEL_514;
        case 3:
          int v678 = *(unsigned __int16 *)(v669 & v670) | (*(unsigned __int8 *)((v669 & v670) + 2) << 16);
          if (v673 < 4) {
            goto LABEL_508;
          }
          goto LABEL_514;
        case 4:
          int v678 = *(_DWORD *)v671;
          if (v673 < 4)
          {
LABEL_508:
            unsigned int v675 = (v678 | (v676 << (8 * v673))) + 2;
            break;
          }
LABEL_514:
          if (v678 != -1) {
            goto LABEL_515;
          }
          goto LABEL_510;
        default:
          break;
      }
    }
    if (v675 == 1) {
LABEL_510:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v666 + 8))(v671, v665);
    else {
LABEL_515:
    }
      swift_release();
    unsigned int v679 = v672[v673];
    unsigned int v680 = v679 - 2;
    if (v679 >= 2)
    {
      if (v673 <= 3) {
        uint64_t v681 = v673;
      }
      else {
        uint64_t v681 = 4;
      }
      switch(v681)
      {
        case 1:
          int v682 = *v672;
          if (v673 >= 4) {
            goto LABEL_530;
          }
          goto LABEL_524;
        case 2:
          int v682 = *(unsigned __int16 *)v672;
          if (v673 < 4) {
            goto LABEL_524;
          }
          goto LABEL_530;
        case 3:
          int v682 = *(unsigned __int16 *)v672 | (v672[2] << 16);
          if (v673 < 4) {
            goto LABEL_524;
          }
          goto LABEL_530;
        case 4:
          int v682 = *(_DWORD *)v672;
          if (v673 < 4)
          {
LABEL_524:
            unsigned int v679 = (v682 | (v680 << (8 * v673))) + 2;
            break;
          }
LABEL_530:
          if (v682 != -1) {
            goto LABEL_531;
          }
          goto LABEL_526;
        default:
          break;
      }
    }
    if (v679 == 1)
    {
LABEL_526:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v666 + 16))(v671, v672, v674);
      v671[v673] = 1;
    }
    else
    {
LABEL_531:
      *(void *)v671 = *(void *)v672;
      v671[v673] = 0;
      swift_retain();
    }
  }
  uint64_t v683 = type metadata accessor for ContentSizeCategory();
  uint64_t v684 = *(void *)(v683 - 8);
  uint64_t v685 = *(_DWORD *)(v684 + 80) & 0xF8 | 7;
  uint64_t v686 = v673 + v685 + 1;
  v687 = (unsigned __int8 *)((unint64_t)&v671[v686] & ~v685);
  v688 = (unsigned __int8 *)((unint64_t)&v672[v686] & ~v685);
  if (*(void *)(v684 + 64) <= 8uLL) {
    uint64_t v689 = 8;
  }
  else {
    uint64_t v689 = *(void *)(v684 + 64);
  }
  if (v687 != v688)
  {
    uint64_t v690 = v683;
    unsigned int v691 = v687[v689];
    unsigned int v692 = v691 - 2;
    if (v691 >= 2)
    {
      if (v689 <= 3) {
        uint64_t v693 = v689;
      }
      else {
        uint64_t v693 = 4;
      }
      switch(v693)
      {
        case 1:
          int v694 = *v687;
          if (v689 >= 4) {
            goto LABEL_550;
          }
          goto LABEL_544;
        case 2:
          int v694 = *(unsigned __int16 *)v687;
          if (v689 < 4) {
            goto LABEL_544;
          }
          goto LABEL_550;
        case 3:
          int v694 = *(unsigned __int16 *)v687 | (v687[2] << 16);
          if (v689 < 4) {
            goto LABEL_544;
          }
          goto LABEL_550;
        case 4:
          int v694 = *(_DWORD *)v687;
          if (v689 < 4)
          {
LABEL_544:
            unsigned int v691 = (v694 | (v692 << (8 * v689))) + 2;
            break;
          }
LABEL_550:
          if (v694 != -1) {
            goto LABEL_551;
          }
          goto LABEL_546;
        default:
          break;
      }
    }
    if (v691 == 1) {
LABEL_546:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v684 + 8))(v687, v683);
    else {
LABEL_551:
    }
      swift_release();
    unsigned int v695 = v688[v689];
    unsigned int v696 = v695 - 2;
    if (v695 >= 2)
    {
      if (v689 <= 3) {
        uint64_t v697 = v689;
      }
      else {
        uint64_t v697 = 4;
      }
      switch(v697)
      {
        case 1:
          int v698 = *v688;
          if (v689 >= 4) {
            goto LABEL_566;
          }
          goto LABEL_560;
        case 2:
          int v698 = *(unsigned __int16 *)v688;
          if (v689 < 4) {
            goto LABEL_560;
          }
          goto LABEL_566;
        case 3:
          int v698 = *(unsigned __int16 *)v688 | (v688[2] << 16);
          if (v689 < 4) {
            goto LABEL_560;
          }
          goto LABEL_566;
        case 4:
          int v698 = *(_DWORD *)v688;
          if (v689 < 4)
          {
LABEL_560:
            unsigned int v695 = (v698 | (v696 << (8 * v689))) + 2;
            break;
          }
LABEL_566:
          if (v698 != -1) {
            goto LABEL_567;
          }
          goto LABEL_562;
        default:
          break;
      }
    }
    if (v695 == 1)
    {
LABEL_562:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v684 + 16))(v687, v688, v690);
      v687[v689] = 1;
    }
    else
    {
LABEL_567:
      *(void *)v687 = *(void *)v688;
      v687[v689] = 0;
      swift_retain();
    }
  }
  uint64_t v699 = v689 + 1;
  v700 = &v687[v689 + 1];
  v701 = &v688[v699];
  unint64_t v702 = (unint64_t)(v700 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v703 = (unint64_t)(v701 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v704 = *(void *)v703;
  LOBYTE(v703) = *(unsigned char *)(v703 + 8);
  *(void *)unint64_t v702 = v704;
  *(unsigned char *)(v702 + 8) = v703;
  swift_retain();
  swift_release();
  unint64_t v705 = (unint64_t)(v700 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v706 = (unint64_t)(v701 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v705 = *(unsigned char *)v706;
  *(void *)(v705 + 8) = *(void *)(v706 + 8);
  swift_retain();
  swift_release();
  return v1158;
}

uint64_t sub_1002D4C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 6;
  uint64_t v611 = a1;
  uint64_t v606 = a2;
  uint64_t v599 = (unsigned char *)((v8 + a1) & ~(v7 | 7));
  uint64_t v9 = (unsigned char *)((v8 + a2) & ~(v7 | 7));
  *uint64_t v599 = *v9;
  v599[1] = v9[1];
  unint64_t v10 = (_OWORD *)((unint64_t)(v599 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v595 = v9;
  uint64_t v11 = (_OWORD *)((unint64_t)(v9 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(unsigned char *)(v12 + 5) = *(unsigned char *)(v13 + 5);
  uint64_t v14 = ~v7;
  uint64_t v15 = (void *)((v7 + 6 + v12) & ~v7);
  unint64_t v16 = (const void *)((v7 + 6 + v13) & ~v7);
  uint64_t v608 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v608(v16, 1, v5))
  {
    int v17 = *(_DWORD *)(v6 + 84);
    size_t v18 = *(void *)(v6 + 64);
    if (v17) {
      size_t v19 = *(void *)(v6 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy(v15, v16, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
    int v17 = *(_DWORD *)(v6 + 84);
    size_t v18 = *(void *)(v6 + 64);
  }
  if (v17) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v18 + 1;
  }
  *((unsigned char *)v15 + v20) = *((unsigned char *)v16 + v20);
  unint64_t v21 = ((unint64_t)v15 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v16 + v20) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)(v22 + 8);
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(void *)(v21 + 8) = v23;
  *(void *)(v21 + 20) = *(void *)(v22 + 20);
  *(unsigned char *)(v21 + 28) = *(unsigned char *)(v22 + 28);
  *(unsigned char *)(v21 + 29) = *(unsigned char *)(v22 + 29);
  *(unsigned char *)(v21 + 30) = *(unsigned char *)(v22 + 30);
  *(unsigned char *)(v21 + 31) = *(unsigned char *)(v22 + 31);
  unint64_t v24 = (char *)((v7 + 32 + v21) & v14);
  unint64_t v25 = (const void *)((v7 + 32 + v22) & v14);
  if (v608(v25, 1, v5))
  {
    memcpy(v24, v25, v20);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v6 + 32))(v24, v25, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
  }
  uint64_t v26 = &v24[v20];
  *uint64_t v26 = *((unsigned char *)v25 + v20);
  v26[1] = *((unsigned char *)v25 + v20 + 1);
  v26[2] = *((unsigned char *)v25 + v20 + 2);
  uint64_t v27 = (void *)((unint64_t)&v24[v20 + 3 + v7] & v14);
  uint64_t v28 = (const void *)(((unint64_t)v25 + v20 + v7 + 3) & v14);
  if (v608(v28, 1, v5))
  {
    memcpy(v27, v28, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v27, v28, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
  }
  size_t v29 = ((v7 + 3 + v20 + ((v7 + 32 + ((v20 + ((v7 + 30) & v14)) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14) + v20;
  v599[v29] = v595[v29];
  unint64_t v30 = (unint64_t)&v599[v29] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (unint64_t)&v595[v29] & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v30 + 8) = *(_OWORD *)(v31 + 8);
  *(_WORD *)(v30 + 24) = *(_WORD *)(v31 + 24);
  *(_WORD *)(v30 + 26) = *(_WORD *)(v31 + 26);
  __int16 v32 = *(_WORD *)(v31 + 28);
  *(unsigned char *)(v30 + 30) = *(unsigned char *)(v31 + 30);
  *(_WORD *)(v30 + 28) = v32;
  *(_OWORD *)((v30 + 38) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v31 + 38) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v34 + 80);
  unint64_t v36 = ((((v29 + (((v7 | 7) + 6) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8) + v35 + 16;
  size_t v37 = (char *)((v36 + v611) & ~v35);
  unint64_t v38 = (char *)((v36 + v606) & ~v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v38, 1, v33))
  {
    int v39 = *(_DWORD *)(v34 + 84);
    size_t v40 = *(void *)(v34 + 64);
    if (v39) {
      size_t v41 = v40;
    }
    else {
      size_t v41 = v40 + 1;
    }
    memcpy(v37, v38, v41);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v37, v38, v33);
    uint64_t v43 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
    uint64_t v42 = v34 + 56;
    v43(v37, 0, 1, v33);
    int v39 = *(_DWORD *)(v42 + 28);
    size_t v40 = *(void *)(v42 + 8);
  }
  if (v39) {
    size_t v44 = v40;
  }
  else {
    size_t v44 = v40 + 1;
  }
  unint64_t v45 = &v37[v44];
  unint64_t v46 = &v38[v44];
  v37[v44] = v38[v44];
  uint64_t v607 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v607 - 8);
  uint64_t v48 = v47;
  int v49 = *(_DWORD *)(v47 + 80) & 0xF8;
  uint64_t v609 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v50 = *(void *)(v609 - 8);
  uint64_t v51 = *(unsigned __int8 *)(v50 + 80);
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = v50;
  uint64_t v54 = v52;
  uint64_t v55 = *(void *)(v52 - 8);
  uint64_t v56 = v55;
  uint64_t v57 = v47;
  uint64_t v58 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v59 = v49 | v51 | v58 | 7;
  uint64_t v60 = (_OWORD *)((unint64_t)&v45[v59 + 1] & ~v59);
  uint64_t v61 = (unint64_t)&v46[v59 + 1] & ~v59;
  uint64_t v605 = *(void *)(v57 + 64) + 3;
  unint64_t v62 = ((((v605 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = (((v62 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = v63 + 8;
  unint64_t v65 = (v51 + 16 + ((((((v62 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v51;
  if (*(_DWORD *)(v50 + 84)) {
    size_t v66 = *(void *)(v50 + 64);
  }
  else {
    size_t v66 = *(void *)(v50 + 64) + 1;
  }
  unint64_t v67 = ((((v66 + 7 + v65) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v68 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = v68 + 8;
  unint64_t v70 = (((v68 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = v71 + 9;
  if (v64 > v67) {
    unint64_t v67 = v64;
  }
  if (v67 <= v72) {
    unint64_t v67 = v71 + 9;
  }
  if (v67 <= v69) {
    unint64_t v73 = v69;
  }
  else {
    unint64_t v73 = v67;
  }
  if ((v73 & 0xFFFFFFFFFFFFFFF8) + 65 <= v73 + 1) {
    unint64_t v74 = v73 + 1;
  }
  else {
    unint64_t v74 = (v73 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  size_t v75 = ((v70 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v76 = *(unsigned int *)(v55 + 84);
  uint64_t v77 = v58 + 16;
  uint64_t v78 = *(void *)(v55 + 64);
  uint64_t v79 = v78 + v58;
  uint64_t v80 = v61;
  uint64_t v81 = v78 + 7;
  unint64_t v82 = (v78 + 7 + ((v78 + v58 + ((v58 + 16) & ~v58)) & ~v58)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (((v73 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v74 + 1 > v83) {
    unint64_t v83 = v74 + 1;
  }
  if (v83 <= v75) {
    unint64_t v83 = v75;
  }
  if (v83 <= ((((v82 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v83 = ((((v82 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v83 <= 0x48) {
    uint64_t v84 = 72;
  }
  else {
    uint64_t v84 = v83;
  }
  unsigned int v85 = *(unsigned __int8 *)(v80 + v84);
  if ((v85 ^ 0xFF) < 0xF5)
  {
    size_t v90 = v84 + 1;
    uint64_t v91 = v84;
LABEL_56:
    unint64_t v92 = (unint64_t)v60;
    unint64_t v93 = v80;
    memcpy(v60, (const void *)v80, v90);
    uint64_t v84 = v91;
LABEL_57:
    uint64_t v80 = v93;
  }
  else
  {
    uint64_t v600 = v51 + 16;
    unint64_t __dst = (unint64_t)v60;
    uint64_t v86 = v48;
    unsigned int v87 = v85 - 10;
    if (v85 >= 0xA)
    {
      if (v84 <= 3) {
        uint64_t v88 = v84;
      }
      else {
        uint64_t v88 = 4;
      }
      switch(v88)
      {
        case 1:
          int v89 = *(unsigned __int8 *)v80;
          if (v84 < 4) {
            goto LABEL_102;
          }
          goto LABEL_103;
        case 2:
          int v89 = *(unsigned __int16 *)v80;
          if (v84 >= 4) {
            goto LABEL_103;
          }
          goto LABEL_102;
        case 3:
          int v89 = *(unsigned __int16 *)v80 | (*(unsigned __int8 *)(v80 + 2) << 16);
          if (v84 >= 4) {
            goto LABEL_103;
          }
          goto LABEL_102;
        case 4:
          int v89 = *(_DWORD *)v80;
          if (v84 < 4) {
LABEL_102:
          }
            v89 |= v87 << (8 * v84);
LABEL_103:
          unsigned int v85 = v89 + 10;
          break;
        default:
          break;
      }
    }
    uint64_t v143 = ~v51;
    switch(v85)
    {
      case 0u:
        unint64_t v92 = (unint64_t)v60;
        *uint64_t v60 = *(_OWORD *)v80;
        *((unsigned char *)v60 + v84) = 0;
        break;
      case 1u:
        unint64_t v92 = (unint64_t)v60;
        *(void *)uint64_t v60 = *(void *)v80;
        *((unsigned char *)v60 + v84) = 1;
        break;
      case 2u:
        unsigned int v144 = *(unsigned __int8 *)(v80 + v74);
        unsigned int v145 = v144 - 2;
        if (v144 < 2)
        {
          uint64_t v147 = v51 + 16;
        }
        else
        {
          if (v74 <= 3) {
            uint64_t v146 = v74;
          }
          else {
            uint64_t v146 = 4;
          }
          uint64_t v147 = v51 + 16;
          switch(v146)
          {
            case 1:
              int v148 = *(unsigned __int8 *)v80;
              goto LABEL_146;
            case 2:
              int v148 = *(unsigned __int16 *)v80;
              goto LABEL_146;
            case 3:
              int v148 = *(unsigned __int16 *)v80 | (*(unsigned __int8 *)(v80 + 2) << 16);
              goto LABEL_146;
            case 4:
              int v148 = *(_DWORD *)v80;
LABEL_146:
              if (v74 < 4) {
                unsigned int v144 = (v148 | (v145 << (8 * v74))) + 2;
              }
              else {
                unsigned int v144 = v148 + 2;
              }
              break;
            default:
              break;
          }
        }
        unsigned int v215 = *(unsigned __int8 *)(v80 + v73);
        if (v144 == 1)
        {
          unsigned int v216 = v215 - 6;
          if (v215 >= 6)
          {
            if (v73 <= 3) {
              uint64_t v217 = v73;
            }
            else {
              uint64_t v217 = 4;
            }
            switch(v217)
            {
              case 1:
                int v218 = *(unsigned __int8 *)v80;
                goto LABEL_182;
              case 2:
                int v218 = *(unsigned __int16 *)v80;
                goto LABEL_182;
              case 3:
                int v218 = *(unsigned __int16 *)v80 | (*(unsigned __int8 *)(v80 + 2) << 16);
                goto LABEL_182;
              case 4:
                int v218 = *(_DWORD *)v80;
LABEL_182:
                if (v73 < 4) {
                  v218 |= v216 << (8 * v73);
                }
                unsigned int v215 = v218 + 6;
                break;
              default:
                break;
            }
          }
          switch(v215)
          {
            case 1u:
              size_t v360 = v66 + 7;
              unint64_t v591 = v73 + 1;
              unint64_t v593 = v73;
              uint64_t v597 = v84;
              unint64_t v601 = v74;
              uint64_t v361 = (unsigned __int8 *)v80;
              uint64_t v362 = v53;
              uint64_t v363 = ~v51;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v92 = __dst;
              uint64_t v364 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v343 = v361;
              id v365 = (_DWORD *)((unint64_t)&v361[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v364 = *v365;
              uint64_t v366 = (_OWORD *)(((unint64_t)v364 + 11) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v367 = (long long *)(((unint64_t)v365 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v368 = *v367;
              long long v369 = v367[1];
              long long v370 = v367[3];
              v366[2] = v367[2];
              v366[3] = v370;
              *uint64_t v366 = v368;
              v366[1] = v369;
              uint64_t v371 = (void *)(((unint64_t)v366 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v372 = (void *)(((unint64_t)v367 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v371 = *v372;
              long long v373 = (void *)(((unint64_t)v371 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v374 = (void *)(((unint64_t)v372 + 15) & 0xFFFFFFFFFFFFFFF8);
              *long long v373 = *v374;
              unint64_t v375 = ((unint64_t)v373 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v376 = ((unint64_t)v374 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v375 = *(void *)v376;
              *(unsigned char *)(v375 + 8) = *(unsigned char *)(v376 + 8);
              uint64_t v377 = (_OWORD *)(((unint64_t)v373 + 31) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v378 = (_OWORD *)(((unint64_t)v374 + 31) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v377 = *v378;
              uint64_t v379 = (_OWORD *)(((unint64_t)v377 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v380 = (_OWORD *)(((unint64_t)v378 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v379 = *v380;
              long long v381 = (void *)(((unint64_t)v379 + v147) & v363);
              long long v382 = (const void *)(((unint64_t)v380 + v147) & v363);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v362 + 48))(v382, 1, v609))
              {
                memcpy(v381, v382, v66);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v362 + 32))(v381, v382, v609);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v362 + 56))(v381, 0, 1, v609);
              }
              uint64_t v573 = (_OWORD *)(((unint64_t)v381 + v360) & 0xFFFFFFFFFFFFFFF8);
              int v574 = (_OWORD *)(((unint64_t)v382 + v360) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v573 = *v574;
              unint64_t v575 = ((unint64_t)v574 + 23) & 0xFFFFFFFFFFFFFFF8;
              long long v576 = *(_OWORD *)v575;
              unint64_t v577 = ((unint64_t)v573 + 23) & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v577 + 16) = *(void *)(v575 + 16);
              *(_OWORD *)unint64_t v577 = v576;
              char v348 = 1;
              unint64_t v347 = v593;
              uint64_t v84 = v597;
              unint64_t v346 = v601;
              unint64_t v345 = v591;
              break;
            case 2u:
              uint64_t v383 = v84;
              unint64_t v384 = v74;
              unint64_t v385 = v73 + 1;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v343 = (unsigned __int8 *)v80;
              unint64_t v386 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v345 = v385;
              unint64_t v346 = v384;
              unint64_t v347 = v386;
              uint64_t v84 = v383;
              unint64_t v387 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              unint64_t v388 = (_DWORD *)((unint64_t)&v343[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *unint64_t v387 = *v388;
              uint64_t v389 = (_OWORD *)(((unint64_t)v387 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v390 = (long long *)(((unint64_t)v388 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v391 = *v390;
              long long v392 = v390[1];
              long long v393 = v390[3];
              v389[2] = v390[2];
              v389[3] = v393;
              *uint64_t v389 = v391;
              v389[1] = v392;
              unint64_t v394 = (_OWORD *)(((unint64_t)v389 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v395 = (_OWORD *)(((unint64_t)v390 + 71) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v394 = *v395;
              long long v396 = (void *)(((unint64_t)v394 + 23) & 0xFFFFFFFFFFFFFFF8);
              long long v397 = (void *)(((unint64_t)v395 + 23) & 0xFFFFFFFFFFFFFFF8);
              *long long v396 = *v397;
              long long v398 = (void *)(((unint64_t)v396 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v399 = (void *)(((unint64_t)v397 + 15) & 0xFFFFFFFFFFFFFFF8);
              *long long v398 = *v399;
              uint64_t v400 = (void *)(((unint64_t)v398 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v401 = (void *)(((unint64_t)v399 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v400 = *v401;
              unint64_t v402 = (void *)(((unint64_t)v400 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v403 = (void *)(((unint64_t)v401 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v402 = *v403;
              unint64_t v404 = (void *)(((unint64_t)v402 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v405 = (void *)(((unint64_t)v403 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v404 = *v405;
              unint64_t v406 = ((unint64_t)v404 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v407 = ((unint64_t)v405 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v406 = *(void *)v407;
              *(unsigned char *)(v406 + 8) = *(unsigned char *)(v407 + 8);
              char v348 = 2;
              break;
            case 3u:
              uint64_t v408 = v84;
              unint64_t v409 = v74;
              unint64_t v410 = v73 + 1;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v343 = (unsigned __int8 *)v80;
              unint64_t v411 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v345 = v410;
              unint64_t v346 = v409;
              unint64_t v347 = v411;
              uint64_t v84 = v408;
              long long v412 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              long long v413 = (_DWORD *)((unint64_t)&v343[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *long long v412 = *v413;
              uint64_t v414 = (_OWORD *)(((unint64_t)v412 + 11) & 0xFFFFFFFFFFFFFFF8);
              unsigned __int8 v415 = (long long *)(((unint64_t)v413 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v416 = *v415;
              long long v417 = v415[1];
              long long v418 = v415[3];
              v414[2] = v415[2];
              v414[3] = v418;
              *uint64_t v414 = v416;
              v414[1] = v417;
              uint64_t v419 = (_OWORD *)(((unint64_t)v414 + 71) & 0xFFFFFFFFFFFFFFF8);
              v420 = (_OWORD *)(((unint64_t)v415 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v419 = *v420;
              long long v421 = (void *)(((unint64_t)v419 + 23) & 0xFFFFFFFFFFFFFFF8);
              long long v422 = (void *)(((unint64_t)v420 + 23) & 0xFFFFFFFFFFFFFFF8);
              *long long v421 = *v422;
              long long v423 = (void *)(((unint64_t)v421 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v424 = (void *)(((unint64_t)v422 + 15) & 0xFFFFFFFFFFFFFFF8);
              *long long v423 = *v424;
              *(void *)(((unint64_t)v423 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v424
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v348 = 3;
              break;
            case 4u:
              uint64_t v425 = v84;
              unint64_t v426 = v74;
              unint64_t v427 = v73 + 1;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v343 = (unsigned __int8 *)v80;
              unint64_t v428 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v345 = v427;
              unint64_t v346 = v426;
              unint64_t v347 = v428;
              uint64_t v84 = v425;
              v429 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              unint64_t v430 = (_DWORD *)((unint64_t)&v343[v605] & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v429 = *v430;
              unint64_t v431 = (_OWORD *)(((unint64_t)v429 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v432 = (long long *)(((unint64_t)v430 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v433 = *v432;
              long long v434 = v432[1];
              long long v435 = v432[3];
              v431[2] = v432[2];
              v431[3] = v435;
              _OWORD *v431 = v433;
              v431[1] = v434;
              id v436 = (_OWORD *)(((unint64_t)v431 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v437 = (_OWORD *)(((unint64_t)v432 + 71) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v436 = *v437;
              uint64_t v438 = (void *)(((unint64_t)v436 + 23) & 0xFFFFFFFFFFFFFFF8);
              unsigned __int8 v439 = (void *)(((unint64_t)v437 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v438 = *v439;
              unint64_t v440 = (void *)(((unint64_t)v438 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v441 = (void *)(((unint64_t)v439 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v440 = *v441;
              *(void *)(((unint64_t)v440 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v441
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v348 = 4;
              break;
            case 5u:
              uint64_t v442 = v84;
              unint64_t v443 = v74;
              unint64_t v444 = v73 + 1;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v343 = (unsigned __int8 *)v80;
              unint64_t v445 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v345 = v444;
              unint64_t v346 = v443;
              unint64_t v347 = v445;
              uint64_t v84 = v442;
              char v446 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              unint64_t v447 = (_DWORD *)((unint64_t)&v343[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *char v446 = *v447;
              uint64_t v448 = (_OWORD *)(((unint64_t)v446 + 11) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v449 = (long long *)(((unint64_t)v447 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v450 = *v449;
              long long v451 = v449[1];
              long long v452 = v449[3];
              v448[2] = v449[2];
              v448[3] = v452;
              *uint64_t v448 = v450;
              v448[1] = v451;
              long long v453 = (_OWORD *)(((unint64_t)v448 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v454 = (_OWORD *)(((unint64_t)v449 + 71) & 0xFFFFFFFFFFFFFFF8);
              *long long v453 = *v454;
              long long v455 = (void *)(((unint64_t)v453 + 23) & 0xFFFFFFFFFFFFFFF8);
              long long v456 = (void *)(((unint64_t)v454 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v455 = *v456;
              *(void *)(((unint64_t)v455 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v456
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v348 = 5;
              break;
            default:
              uint64_t v340 = v84;
              unint64_t v341 = v74;
              unint64_t v342 = v73 + 1;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v343 = (unsigned __int8 *)v80;
              unint64_t v344 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v345 = v342;
              unint64_t v346 = v341;
              unint64_t v347 = v344;
              uint64_t v84 = v340;
              char v348 = 0;
              uint64_t v349 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v350 = (_DWORD *)((unint64_t)&v343[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v349 = *v350;
              uint64_t v351 = (_OWORD *)(((unint64_t)v349 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v352 = (long long *)(((unint64_t)v350 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v353 = *v352;
              long long v354 = v352[1];
              long long v355 = v352[3];
              v351[2] = v352[2];
              v351[3] = v355;
              *uint64_t v351 = v353;
              v351[1] = v354;
              unint64_t v356 = (_OWORD *)(((unint64_t)v351 + 71) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v357 = (_OWORD *)(((unint64_t)v352 + 71) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v356 = *v357;
              uint64_t v358 = (void *)(((unint64_t)v356 + 23) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v359 = (void *)(((unint64_t)v357 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v358 = *v359;
              *(void *)(((unint64_t)v358 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v359
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              break;
          }
          *(unsigned char *)(v92 + v347) = v348;
          long long v578 = (_OWORD *)((v345 + v92 + 7) & 0xFFFFFFFFFFFFFFF8);
          long long v579 = (long long *)((unint64_t)&v343[v345 + 7] & 0xFFFFFFFFFFFFFFF8);
          long long v580 = *v579;
          *(_OWORD *)((char *)v578 + 9) = *(long long *)((char *)v579 + 9);
          _OWORD *v578 = v580;
          long long v581 = (_OWORD *)((v345 + v92 + 39) & 0xFFFFFFFFFFFFFFF8);
          long long v582 = (long long *)((unint64_t)&v343[v345 + 39] & 0xFFFFFFFFFFFFFFF8);
          long long v583 = *v582;
          *(_OWORD *)((char *)v581 + 9) = *(long long *)((char *)v582 + 9);
          _OWORD *v581 = v583;
          char v584 = 1;
          uint64_t v80 = (uint64_t)v343;
        }
        else
        {
          unsigned int v219 = v215 - 6;
          if (v215 >= 6)
          {
            if (v73 <= 3) {
              uint64_t v220 = v73;
            }
            else {
              uint64_t v220 = 4;
            }
            switch(v220)
            {
              case 1:
                int v221 = *(unsigned __int8 *)v80;
                goto LABEL_196;
              case 2:
                int v221 = *(unsigned __int16 *)v80;
                goto LABEL_196;
              case 3:
                int v221 = *(unsigned __int16 *)v80 | (*(unsigned __int8 *)(v80 + 2) << 16);
                goto LABEL_196;
              case 4:
                int v221 = *(_DWORD *)v80;
LABEL_196:
                if (v73 < 4) {
                  v221 |= v219 << (8 * v73);
                }
                unsigned int v215 = v221 + 6;
                break;
              default:
                break;
            }
          }
          switch(v215)
          {
            case 1u:
              size_t v475 = v66 + 7;
              uint64_t v598 = v84;
              unint64_t v602 = v74;
              unint64_t v594 = v73;
              id v476 = (unsigned __int8 *)v80;
              uint64_t v477 = v147;
              uint64_t v478 = v53;
              uint64_t v479 = ~v51;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v92 = __dst;
              v480 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              unint64_t v481 = (_DWORD *)((unint64_t)&v476[v605] & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v480 = *v481;
              unint64_t v482 = (_OWORD *)(((unint64_t)v480 + 11) & 0xFFFFFFFFFFFFFFF8);
              id v483 = (long long *)(((unint64_t)v481 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v484 = *v483;
              long long v485 = v483[1];
              long long v486 = v483[3];
              v482[2] = v483[2];
              v482[3] = v486;
              *unint64_t v482 = v484;
              v482[1] = v485;
              long long v487 = (void *)(((unint64_t)v482 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v488 = (void *)(((unint64_t)v483 + 71) & 0xFFFFFFFFFFFFFFF8);
              void *v487 = *v488;
              long long v489 = (void *)(((unint64_t)v487 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v490 = (void *)(((unint64_t)v488 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v489 = *v490;
              unint64_t v491 = ((unint64_t)v489 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v492 = ((unint64_t)v490 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v491 = *(void *)v492;
              *(unsigned char *)(v491 + 8) = *(unsigned char *)(v492 + 8);
              uint64_t v493 = (_OWORD *)(((unint64_t)v489 + 31) & 0xFFFFFFFFFFFFFFF8);
              v494 = (_OWORD *)(((unint64_t)v490 + 31) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v493 = *v494;
              uint64_t v495 = (_OWORD *)(((unint64_t)v493 + 23) & 0xFFFFFFFFFFFFFFF8);
              v496 = (_OWORD *)(((unint64_t)v494 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v495 = *v496;
              long long v497 = (void *)(((unint64_t)v495 + v477) & v479);
              long long v498 = (const void *)(((unint64_t)v496 + v477) & v479);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v478 + 48))(v498, 1, v609))
              {
                memcpy(v497, v498, v66);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v478 + 32))(v497, v498, v609);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v478 + 56))(v497, 0, 1, v609);
              }
              long long v585 = (_OWORD *)(((unint64_t)v497 + v475) & 0xFFFFFFFFFFFFFFF8);
              long long v586 = (_OWORD *)(((unint64_t)v498 + v475) & 0xFFFFFFFFFFFFFFF8);
              *long long v585 = *v586;
              unint64_t v587 = ((unint64_t)v586 + 23) & 0xFFFFFFFFFFFFFFF8;
              long long v588 = *(_OWORD *)v587;
              unint64_t v589 = ((unint64_t)v585 + 23) & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v589 + 16) = *(void *)(v587 + 16);
              *(_OWORD *)unint64_t v589 = v588;
              char v462 = 1;
              long long v464 = v476;
              unint64_t v461 = v594;
              uint64_t v84 = v598;
              unint64_t v346 = v602;
              break;
            case 2u:
              uint64_t v499 = v84;
              unint64_t v500 = v74;
              unint64_t v92 = (unint64_t)v60;
              long long v501 = (unsigned __int8 *)v80;
              unint64_t v502 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v346 = v500;
              unint64_t v461 = v502;
              uint64_t v84 = v499;
              unint64_t v503 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              long long v464 = v501;
              uint64_t v504 = (_DWORD *)((unint64_t)&v501[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *unint64_t v503 = *v504;
              uint64_t v505 = (_OWORD *)(((unint64_t)v503 + 11) & 0xFFFFFFFFFFFFFFF8);
              id v506 = (long long *)(((unint64_t)v504 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v507 = *v506;
              long long v508 = v506[1];
              long long v509 = v506[3];
              v505[2] = v506[2];
              v505[3] = v509;
              *uint64_t v505 = v507;
              v505[1] = v508;
              long long v510 = (_OWORD *)(((unint64_t)v505 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v511 = (_OWORD *)(((unint64_t)v506 + 71) & 0xFFFFFFFFFFFFFFF8);
              *long long v510 = *v511;
              long long v512 = (void *)(((unint64_t)v510 + 23) & 0xFFFFFFFFFFFFFFF8);
              long long v513 = (void *)(((unint64_t)v511 + 23) & 0xFFFFFFFFFFFFFFF8);
              *long long v512 = *v513;
              long long v514 = (void *)(((unint64_t)v512 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v515 = (void *)(((unint64_t)v513 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v514 = *v515;
              unint64_t v516 = (void *)(((unint64_t)v514 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v517 = (void *)(((unint64_t)v515 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v516 = *v517;
              uint64_t v518 = (void *)(((unint64_t)v516 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v519 = (void *)(((unint64_t)v517 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v518 = *v519;
              uint64_t v520 = (void *)(((unint64_t)v518 + 15) & 0xFFFFFFFFFFFFFFF8);
              char v521 = (void *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v520 = *v521;
              unint64_t v522 = ((unint64_t)v520 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v523 = ((unint64_t)v521 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v522 = *(void *)v523;
              *(unsigned char *)(v522 + 8) = *(unsigned char *)(v523 + 8);
              char v462 = 2;
              break;
            case 3u:
              uint64_t v524 = v84;
              unint64_t v525 = v74;
              unint64_t v92 = (unint64_t)v60;
              long long v526 = (unsigned __int8 *)v80;
              unint64_t v527 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v346 = v525;
              unint64_t v461 = v527;
              uint64_t v84 = v524;
              long long v528 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              long long v464 = v526;
              unint64_t v529 = (_DWORD *)((unint64_t)&v526[v605] & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v528 = *v529;
              uint64_t v530 = (_OWORD *)(((unint64_t)v528 + 11) & 0xFFFFFFFFFFFFFFF8);
              size_t v531 = (long long *)(((unint64_t)v529 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v532 = *v531;
              long long v533 = v531[1];
              long long v534 = v531[3];
              v530[2] = v531[2];
              v530[3] = v534;
              *uint64_t v530 = v532;
              v530[1] = v533;
              long long v535 = (_OWORD *)(((unint64_t)v530 + 71) & 0xFFFFFFFFFFFFFFF8);
              long long v536 = (_OWORD *)(((unint64_t)v531 + 71) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v535 = *v536;
              size_t v537 = (void *)(((unint64_t)v535 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v538 = (void *)(((unint64_t)v536 + 23) & 0xFFFFFFFFFFFFFFF8);
              void *v537 = *v538;
              long long v539 = (void *)(((unint64_t)v537 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v540 = (void *)(((unint64_t)v538 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v539 = *v540;
              *(void *)(((unint64_t)v539 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v540
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v462 = 3;
              break;
            case 4u:
              uint64_t v541 = v84;
              unint64_t v542 = v74;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v543 = (unsigned __int8 *)v80;
              unint64_t v544 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v346 = v542;
              unint64_t v461 = v544;
              uint64_t v84 = v541;
              uint64_t v545 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              long long v464 = v543;
              uint64_t v546 = (_DWORD *)((unint64_t)&v543[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v545 = *v546;
              unint64_t v547 = (_OWORD *)(((unint64_t)v545 + 11) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v548 = (long long *)(((unint64_t)v546 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v549 = *v548;
              long long v550 = v548[1];
              long long v551 = v548[3];
              v547[2] = v548[2];
              v547[3] = v551;
              *unint64_t v547 = v549;
              v547[1] = v550;
              unint64_t v552 = (_OWORD *)(((unint64_t)v547 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v553 = (_OWORD *)(((unint64_t)v548 + 71) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v552 = *v553;
              size_t v554 = (void *)(((unint64_t)v552 + 23) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v555 = (void *)(((unint64_t)v553 + 23) & 0xFFFFFFFFFFFFFFF8);
              *size_t v554 = *v555;
              uint64_t v556 = (void *)(((unint64_t)v554 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v557 = (void *)(((unint64_t)v555 + 15) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v556 = *v557;
              *(void *)(((unint64_t)v556 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v557
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v462 = 4;
              break;
            case 5u:
              uint64_t v558 = v84;
              unint64_t v559 = v74;
              unint64_t v92 = (unint64_t)v60;
              long long v560 = (unsigned __int8 *)v80;
              unint64_t v561 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v346 = v559;
              unint64_t v461 = v561;
              uint64_t v84 = v558;
              uint64_t v562 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              long long v464 = v560;
              uint64_t v563 = (_DWORD *)((unint64_t)&v560[v605] & 0xFFFFFFFFFFFFFFFCLL);
              *uint64_t v562 = *v563;
              unint64_t v564 = (_OWORD *)(((unint64_t)v562 + 11) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v565 = (long long *)(((unint64_t)v563 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v566 = *v565;
              long long v567 = v565[1];
              long long v568 = v565[3];
              v564[2] = v565[2];
              v564[3] = v568;
              *unint64_t v564 = v566;
              v564[1] = v567;
              uint64_t v569 = (_OWORD *)(((unint64_t)v564 + 71) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v570 = (_OWORD *)(((unint64_t)v565 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v569 = *v570;
              uint64_t v571 = (void *)(((unint64_t)v569 + 23) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v572 = (void *)(((unint64_t)v570 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v571 = *v572;
              *(void *)(((unint64_t)v571 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v572
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              char v462 = 5;
              break;
            default:
              uint64_t v457 = v84;
              unint64_t v458 = v74;
              unint64_t v92 = (unint64_t)v60;
              uint64_t v459 = (unsigned __int8 *)v80;
              unint64_t v460 = v73;
              (*(void (**)(void))(v48 + 32))();
              unint64_t v346 = v458;
              unint64_t v461 = v460;
              uint64_t v84 = v457;
              char v462 = 0;
              v463 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
              long long v464 = v459;
              long long v465 = (_DWORD *)((unint64_t)&v459[v605] & 0xFFFFFFFFFFFFFFFCLL);
              _DWORD *v463 = *v465;
              long long v466 = (_OWORD *)(((unint64_t)v463 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v467 = (long long *)(((unint64_t)v465 + 11) & 0xFFFFFFFFFFFFFFF8);
              long long v468 = *v467;
              long long v469 = v467[1];
              long long v470 = v467[3];
              v466[2] = v467[2];
              v466[3] = v470;
              *long long v466 = v468;
              v466[1] = v469;
              uint64_t v471 = (_OWORD *)(((unint64_t)v466 + 71) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v472 = (_OWORD *)(((unint64_t)v467 + 71) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v471 = *v472;
              uint64_t v473 = (void *)(((unint64_t)v471 + 23) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v474 = (void *)(((unint64_t)v472 + 23) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v473 = *v474;
              *(void *)(((unint64_t)v473 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v474
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              break;
          }
          char v584 = 0;
          *(unsigned char *)(v92 + v461) = v462;
          uint64_t v80 = (uint64_t)v464;
        }
        *(unsigned char *)(v92 + v346) = v584;
        *(unsigned char *)(v92 + v84) = 2;
        break;
      case 3u:
        long long v157 = *(_OWORD *)v80;
        long long v158 = *(_OWORD *)(v80 + 16);
        long long v159 = *(_OWORD *)(v80 + 48);
        unint64_t v92 = (unint64_t)v60;
        v60[2] = *(_OWORD *)(v80 + 32);
        v60[3] = v159;
        *uint64_t v60 = v157;
        v60[1] = v158;
        *((unsigned char *)v60 + v84) = 3;
        break;
      case 4u:
        unsigned int v149 = *(unsigned __int8 *)(v80 + v73);
        unsigned int v150 = v149 - 6;
        if (v149 < 6)
        {
          uint64_t v152 = v48;
        }
        else
        {
          if (v73 <= 3) {
            uint64_t v151 = v73;
          }
          else {
            uint64_t v151 = 4;
          }
          uint64_t v152 = v48;
          switch(v151)
          {
            case 1:
              int v153 = *(unsigned __int8 *)v80;
              goto LABEL_165;
            case 2:
              int v153 = *(unsigned __int16 *)v80;
              goto LABEL_165;
            case 3:
              int v153 = *(unsigned __int16 *)v80 | (*(unsigned __int8 *)(v80 + 2) << 16);
              goto LABEL_165;
            case 4:
              int v153 = *(_DWORD *)v80;
LABEL_165:
              if (v73 < 4) {
                unsigned int v149 = (v153 | (v150 << (8 * v73))) + 6;
              }
              else {
                unsigned int v149 = v153 + 6;
              }
              break;
            default:
              break;
          }
        }
        switch(v149)
        {
          case 1u:
            size_t v239 = v66 + 7;
            unint64_t v590 = v73 + 1;
            unint64_t v592 = v73;
            uint64_t v240 = v84;
            int v241 = (unsigned __int8 *)v80;
            uint64_t v242 = v53;
            uint64_t v243 = v143;
            (*(void (**)(void))(v152 + 32))();
            unint64_t v92 = __dst;
            int v244 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v93 = (unint64_t)v241;
            unint64_t v245 = (_DWORD *)((unint64_t)&v241[v605] & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v244 = *v245;
            uint64_t v246 = (_OWORD *)(((unint64_t)v244 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v247 = (long long *)(((unint64_t)v245 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v248 = *v247;
            long long v249 = v247[1];
            long long v250 = v247[3];
            v246[2] = v247[2];
            v246[3] = v250;
            *uint64_t v246 = v248;
            v246[1] = v249;
            unint64_t v251 = (void *)(((unint64_t)v246 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v252 = (void *)(((unint64_t)v247 + 71) & 0xFFFFFFFFFFFFFFF8);
            void *v251 = *v252;
            long long v253 = (void *)(((unint64_t)v251 + 15) & 0xFFFFFFFFFFFFFFF8);
            id v254 = (void *)(((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v253 = *v254;
            unint64_t v255 = ((unint64_t)v253 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v256 = ((unint64_t)v254 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v255 = *(void *)v256;
            *(unsigned char *)(v255 + 8) = *(unsigned char *)(v256 + 8);
            long long v257 = (_OWORD *)(((unint64_t)v253 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v258 = (_OWORD *)(((unint64_t)v254 + 31) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v257 = *v258;
            uint64_t v259 = (_OWORD *)(((unint64_t)v257 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v260 = (_OWORD *)(((unint64_t)v258 + 23) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v259 = *v260;
            long long v261 = (void *)(((unint64_t)v259 + v600) & v243);
            long long v262 = (const void *)(((unint64_t)v260 + v600) & v243);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v242 + 48))(v262, 1, v609))
            {
              memcpy(v261, v262, v66);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v242 + 32))(v261, v262, v609);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v242 + 56))(v261, 0, 1, v609);
            }
            unint64_t v333 = (_OWORD *)(((unint64_t)v261 + v239) & 0xFFFFFFFFFFFFFFF8);
            v334 = (_OWORD *)(((unint64_t)v262 + v239) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v333 = *v334;
            unint64_t v335 = ((unint64_t)v334 + 23) & 0xFFFFFFFFFFFFFFF8;
            long long v336 = *(_OWORD *)v335;
            unint64_t v337 = ((unint64_t)v333 + 23) & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v337 + 16) = *(void *)(v335 + 16);
            *(_OWORD *)unint64_t v337 = v336;
            char v227 = 1;
            uint64_t v84 = v240;
            unint64_t v225 = v590;
            unint64_t v226 = v592;
            break;
          case 2u:
            uint64_t v263 = v84;
            unint64_t v264 = v73 + 1;
            unint64_t v92 = (unint64_t)v60;
            unint64_t v93 = v80;
            unint64_t v265 = v73;
            (*(void (**)(void))(v152 + 32))();
            unint64_t v225 = v264;
            unint64_t v226 = v265;
            uint64_t v84 = v263;
            long long v266 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
            long long v267 = (_DWORD *)((v605 + v93) & 0xFFFFFFFFFFFFFFFCLL);
            *long long v266 = *v267;
            long long v268 = (_OWORD *)(((unint64_t)v266 + 11) & 0xFFFFFFFFFFFFFFF8);
            char v269 = (long long *)(((unint64_t)v267 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v270 = *v269;
            long long v271 = v269[1];
            long long v272 = v269[3];
            v268[2] = v269[2];
            v268[3] = v272;
            *long long v268 = v270;
            v268[1] = v271;
            unint64_t v273 = (_OWORD *)(((unint64_t)v268 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v274 = (_OWORD *)(((unint64_t)v269 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v273 = *v274;
            long long v275 = (void *)(((unint64_t)v273 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v276 = (void *)(((unint64_t)v274 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v275 = *v276;
            long long v277 = (void *)(((unint64_t)v275 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v278 = (void *)(((unint64_t)v276 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v277 = *v278;
            uint64_t v279 = (void *)(((unint64_t)v277 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v280 = (void *)(((unint64_t)v278 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v279 = *v280;
            uint64_t v281 = (void *)(((unint64_t)v279 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v282 = (void *)(((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v281 = *v282;
            uint64_t v283 = (void *)(((unint64_t)v281 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v284 = (void *)(((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v283 = *v284;
            unint64_t v285 = ((unint64_t)v283 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v286 = ((unint64_t)v284 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v285 = *(void *)v286;
            *(unsigned char *)(v285 + 8) = *(unsigned char *)(v286 + 8);
            char v227 = 2;
            break;
          case 3u:
            uint64_t v287 = v84;
            unint64_t v288 = v73 + 1;
            unint64_t v92 = (unint64_t)v60;
            unint64_t v93 = v80;
            unint64_t v289 = v73;
            (*(void (**)(void))(v152 + 32))();
            unint64_t v225 = v288;
            unint64_t v226 = v289;
            uint64_t v84 = v287;
            long long v290 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
            long long v291 = (_DWORD *)((v605 + v93) & 0xFFFFFFFFFFFFFFFCLL);
            *long long v290 = *v291;
            uint64_t v292 = (_OWORD *)(((unint64_t)v290 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v293 = (long long *)(((unint64_t)v291 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v294 = *v293;
            long long v295 = v293[1];
            long long v296 = v293[3];
            v292[2] = v293[2];
            v292[3] = v296;
            *uint64_t v292 = v294;
            v292[1] = v295;
            unint64_t v297 = (_OWORD *)(((unint64_t)v292 + 71) & 0xFFFFFFFFFFFFFFF8);
            unsigned int v298 = (_OWORD *)(((unint64_t)v293 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v297 = *v298;
            unsigned int v299 = (void *)(((unint64_t)v297 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v300 = (void *)(((unint64_t)v298 + 23) & 0xFFFFFFFFFFFFFFF8);
            *unsigned int v299 = *v300;
            int v301 = (void *)(((unint64_t)v299 + 15) & 0xFFFFFFFFFFFFFFF8);
            unsigned int v302 = (void *)(((unint64_t)v300 + 15) & 0xFFFFFFFFFFFFFFF8);
            *int v301 = *v302;
            *(void *)(((unint64_t)v301 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v302 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v227 = 3;
            break;
          case 4u:
            uint64_t v303 = v84;
            unint64_t v304 = v73 + 1;
            unint64_t v92 = (unint64_t)v60;
            unint64_t v93 = v80;
            unint64_t v305 = v73;
            (*(void (**)(void))(v152 + 32))();
            unint64_t v225 = v304;
            unint64_t v226 = v305;
            uint64_t v84 = v303;
            unint64_t v306 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v307 = (_DWORD *)((v605 + v93) & 0xFFFFFFFFFFFFFFFCLL);
            *unint64_t v306 = *v307;
            uint64_t v308 = (_OWORD *)(((unint64_t)v306 + 11) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v309 = (long long *)(((unint64_t)v307 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v310 = *v309;
            long long v311 = v309[1];
            long long v312 = v309[3];
            v308[2] = v309[2];
            v308[3] = v312;
            _OWORD *v308 = v310;
            v308[1] = v311;
            unsigned int v313 = (_OWORD *)(((unint64_t)v308 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v314 = (_OWORD *)(((unint64_t)v309 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unsigned int v313 = *v314;
            int v315 = (void *)(((unint64_t)v313 + 23) & 0xFFFFFFFFFFFFFFF8);
            unsigned int v316 = (void *)(((unint64_t)v314 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v315 = *v316;
            uint64_t v317 = (void *)(((unint64_t)v315 + 15) & 0xFFFFFFFFFFFFFFF8);
            int v318 = (void *)(((unint64_t)v316 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v317 = *v318;
            *(void *)(((unint64_t)v317 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v318 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v227 = 4;
            break;
          case 5u:
            uint64_t v319 = v84;
            unint64_t v320 = v73 + 1;
            unint64_t v92 = (unint64_t)v60;
            unint64_t v93 = v80;
            unint64_t v321 = v73;
            (*(void (**)(void))(v152 + 32))();
            unint64_t v225 = v320;
            unint64_t v226 = v321;
            uint64_t v84 = v319;
            uint64_t v322 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v323 = (_DWORD *)((v605 + v93) & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v322 = *v323;
            unint64_t v324 = (_OWORD *)(((unint64_t)v322 + 11) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v325 = (long long *)(((unint64_t)v323 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v326 = *v325;
            long long v327 = v325[1];
            long long v328 = v325[3];
            v324[2] = v325[2];
            v324[3] = v328;
            *unint64_t v324 = v326;
            v324[1] = v327;
            unint64_t v329 = (_OWORD *)(((unint64_t)v324 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v330 = (_OWORD *)(((unint64_t)v325 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v329 = *v330;
            long long v331 = (void *)(((unint64_t)v329 + 23) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v332 = (void *)(((unint64_t)v330 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v331 = *v332;
            *(void *)(((unint64_t)v331 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v332 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v227 = 5;
            break;
          default:
            uint64_t v222 = v84;
            unint64_t v223 = v73 + 1;
            unint64_t v92 = (unint64_t)v60;
            unint64_t v93 = v80;
            unint64_t v224 = v73;
            (*(void (**)(void))(v152 + 32))();
            unint64_t v225 = v223;
            unint64_t v226 = v224;
            uint64_t v84 = v222;
            char v227 = 0;
            long long v228 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
            long long v229 = (_DWORD *)((v605 + v93) & 0xFFFFFFFFFFFFFFFCLL);
            *long long v228 = *v229;
            uint64_t v230 = (_OWORD *)(((unint64_t)v228 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v231 = (long long *)(((unint64_t)v229 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v232 = *v231;
            long long v233 = v231[1];
            long long v234 = v231[3];
            v230[2] = v231[2];
            v230[3] = v234;
            *uint64_t v230 = v232;
            v230[1] = v233;
            long long v235 = (_OWORD *)(((unint64_t)v230 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v236 = (_OWORD *)(((unint64_t)v231 + 71) & 0xFFFFFFFFFFFFFFF8);
            *long long v235 = *v236;
            long long v237 = (void *)(((unint64_t)v235 + 23) & 0xFFFFFFFFFFFFFFF8);
            unsigned int v238 = (void *)(((unint64_t)v236 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v237 = *v238;
            *(void *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
            break;
        }
        *(unsigned char *)(v92 + v226) = v227;
        long long v338 = (void *)(((v92 | 7) + v225) & 0xFFFFFFFFFFFFFFF8);
        long long v339 = (void *)(((v93 | 7) + v225) & 0xFFFFFFFFFFFFFFF8);
        *long long v338 = *v339;
        *(_OWORD *)(((unint64_t)v338 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v339 + 15) & 0xFFFFFFFFFFFFFFF8);
        *(unsigned char *)(v92 + v84) = 4;
        goto LABEL_57;
      case 5u:
        uint64_t v160 = v84;
        if (*(_DWORD *)(v48 + 84) < 0x7FFFFFFFu)
        {
          uint64_t v162 = v607;
          unint64_t v177 = *(void *)(((((((v605 + v80) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 8);
          if (v177 >= 0xFFFFFFFF) {
            LODWORD(v177) = -1;
          }
          int v164 = v177 + 1;
          uint64_t v161 = v86;
        }
        else
        {
          uint64_t v161 = v48;
          uint64_t v162 = v607;
          uint64_t v163 = (unsigned __int8 *)v80;
          int v164 = (*(uint64_t (**)(uint64_t))(v86 + 48))(v80);
          uint64_t v80 = (uint64_t)v163;
        }
        unint64_t v92 = __dst;
        unint64_t v178 = v80;
        if (v164)
        {
          memcpy((void *)__dst, (const void *)v80, v75);
          uint64_t v80 = v178;
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v161 + 32))(__dst, v80, v162);
          uint64_t v80 = v178;
          int v194 = (_DWORD *)((v605 + __dst) & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v195 = (_DWORD *)((v605 + v178) & 0xFFFFFFFFFFFFFFFCLL);
          *int v194 = *v195;
          unint64_t v196 = (_OWORD *)(((unint64_t)v194 + 11) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v197 = (long long *)(((unint64_t)v195 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v198 = *v197;
          long long v199 = v197[1];
          long long v200 = v197[3];
          v196[2] = v197[2];
          v196[3] = v200;
          *unint64_t v196 = v198;
          v196[1] = v199;
          unint64_t v201 = (_OWORD *)(((unint64_t)v196 + 71) & 0xFFFFFFFFFFFFFFF8);
          long long v202 = (_OWORD *)(((unint64_t)v197 + 71) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v201 = *v202;
          long long v203 = (void *)(((unint64_t)v201 + 23) & 0xFFFFFFFFFFFFFFF8);
          long long v204 = (void *)(((unint64_t)v202 + 23) & 0xFFFFFFFFFFFFFFF8);
          *long long v203 = *v204;
          uint64_t v205 = (void *)(((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v206 = (void *)(((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v205 = *v206;
          unint64_t v207 = (void *)(((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFFFF8);
          long long v208 = (void *)(((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v207 = *v208;
          uint64_t v209 = (void *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v210 = (void *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v209 = *v210;
          long long v211 = (void *)(((unint64_t)v209 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v212 = (void *)(((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v211 = *v212;
          unint64_t v213 = ((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v214 = ((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v213 = *(void *)v214;
          *(unsigned char *)(v213 + 8) = *(unsigned char *)(v214 + 8);
          *(void *)((__dst | 7) + v72) = *(void *)((v178 | 7) + v72);
        }
        uint64_t v84 = v160;
        *(unsigned char *)(__dst + v160) = 5;
        break;
      case 6u:
        long long v165 = *(_OWORD *)v80;
        long long v166 = *(_OWORD *)(v80 + 16);
        long long v167 = *(_OWORD *)(v80 + 32);
        unint64_t v92 = (unint64_t)v60;
        *((void *)v60 + 6) = *(void *)(v80 + 48);
        v60[1] = v166;
        v60[2] = v167;
        *uint64_t v60 = v165;
        *((unsigned char *)v60 + v84) = 6;
        break;
      case 7u:
        unint64_t v92 = (unint64_t)v60;
        *uint64_t v60 = *(_OWORD *)v80;
        long long v168 = *(_OWORD *)(v80 + 16);
        long long v169 = *(_OWORD *)(v80 + 32);
        long long v170 = *(_OWORD *)(v80 + 48);
        *((void *)v60 + 8) = *(void *)(v80 + 64);
        v60[2] = v169;
        v60[3] = v170;
        v60[1] = v168;
        *((unsigned char *)v60 + v84) = 7;
        break;
      case 8u:
        uint64_t v171 = ~v58;
        uint64_t v596 = v84;
        if ((v76 & 0x80000000) != 0)
        {
          uint64_t v173 = v54;
          uint64_t v179 = (unsigned __int8 *)v80;
          int v180 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))((v77 + v80) & v171, v76, v54);
          uint64_t v80 = (uint64_t)v179;
          uint64_t v174 = (_OWORD *)__dst;
          if (v180)
          {
LABEL_130:
            size_t v175 = ((((v82 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
            unint64_t v92 = (unint64_t)v174;
            unint64_t v176 = (unsigned __int8 *)v80;
            memcpy(v174, (const void *)v80, v175);
            uint64_t v80 = (uint64_t)v176;
            goto LABEL_140;
          }
        }
        else
        {
          unint64_t v172 = *(void *)(v80 + 8);
          if (v172 >= 0xFFFFFFFF) {
            LODWORD(v172) = -1;
          }
          uint64_t v173 = v54;
          uint64_t v174 = v60;
          if (v172 != -1) {
            goto LABEL_130;
          }
        }
        unint64_t v610 = ((v82 + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
        *uint64_t v174 = *(_OWORD *)v80;
        unint64_t v181 = ((unint64_t)v174 + v77) & v171;
        unint64_t v182 = (v77 + v80) & v171;
        uint64_t v183 = *(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 32);
        unint64_t v184 = (unint64_t)v174;
        uint64_t v185 = (unsigned __int8 *)v80;
        v183(v181, v182, v173);
        unint64_t v186 = (v79 + v181) & v171;
        unint64_t v187 = (v79 + v182) & v171;
        v183(v186, v187, v173);
        uint64_t v80 = (uint64_t)v185;
        unint64_t v92 = v184;
        unsigned int v188 = (_OWORD *)((v81 + v186) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v189 = (_OWORD *)((v81 + v187) & 0xFFFFFFFFFFFFFFF8);
        *unsigned int v188 = *v189;
        unint64_t v190 = ((unint64_t)v188 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v191 = ((unint64_t)v189 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v190 = *(_OWORD *)v191;
        *(unsigned char *)(v190 + 16) = *(unsigned char *)(v191 + 16);
        unsigned int v192 = (_OWORD *)((v184 | 7) + v610);
        uint64_t v193 = (_OWORD *)((v80 | 7) + v610);
        *unsigned int v192 = *v193;
        *(_OWORD *)(((unint64_t)v192 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v193 + 23) & 0xFFFFFFFFFFFFFFF8);
LABEL_140:
        uint64_t v84 = v596;
        *(unsigned char *)(v92 + v596) = 8;
        break;
      case 9u:
        long long v154 = *(_OWORD *)v80;
        long long v155 = *(_OWORD *)(v80 + 16);
        long long v156 = *(_OWORD *)(v80 + 48);
        unint64_t v92 = (unint64_t)v60;
        v60[2] = *(_OWORD *)(v80 + 32);
        v60[3] = v156;
        *uint64_t v60 = v154;
        v60[1] = v155;
        *((unsigned char *)v60 + v84) = 9;
        break;
      default:
        size_t v90 = v84 + 1;
        uint64_t v91 = v84;
        goto LABEL_56;
    }
  }
  uint64_t v94 = (unsigned __int8 *)(v84 + 1 + v92);
  unsigned int v95 = (unsigned __int8 *)(v84 + 1 + v80);
  *uint64_t v94 = *v95;
  v94[1] = v95[1];
  unsigned int v96 = (void *)((unint64_t)(v94 + 9) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v97 = (void *)((unint64_t)(v95 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v96 = *v97;
  uint64_t v98 = (void *)(((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v99 = (void *)(((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v98 = *v99;
  uint64_t v100 = (_OWORD *)(((unint64_t)v99 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v101 = (_OWORD *)(((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v101 = *v100;
  unint64_t v102 = ((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v103 = ((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v104 = *(_OWORD *)v103;
  *(unsigned char *)(v102 + 16) = *(unsigned char *)(v103 + 16);
  *(_OWORD *)unint64_t v102 = v104;
  unint64_t v105 = ((unint64_t)v101 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v106 = ((unint64_t)v100 + 47) & 0xFFFFFFFFFFFFFFF8;
  long long v107 = *(_OWORD *)v106;
  *(unsigned char *)(v105 + 16) = *(unsigned char *)(v106 + 16);
  *(_OWORD *)unint64_t v105 = v107;
  unint64_t v108 = ((unint64_t)v101 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v109 = ((unint64_t)v100 + 71) & 0xFFFFFFFFFFFFFFF8;
  long long v110 = *(_OWORD *)v109;
  *(unsigned char *)(v108 + 16) = *(unsigned char *)(v109 + 16);
  *(_OWORD *)unint64_t v108 = v110;
  uint64_t v111 = type metadata accessor for ColorScheme();
  uint64_t v112 = *(void *)(v111 - 8);
  uint64_t v113 = *(_DWORD *)(v112 + 80) & 0xF8;
  uint64_t v114 = v113 + 24;
  unint64_t v115 = v113 + 24 + v108;
  unint64_t v116 = ~v113 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v117 = (void *)(v115 & v116);
  unint64_t v118 = (unsigned __int8 *)((v114 + v109) & v116);
  if (*(void *)(v112 + 64) <= 8uLL) {
    uint64_t v119 = 8;
  }
  else {
    uint64_t v119 = *(void *)(*(void *)(v111 - 8) + 64);
  }
  unsigned int v120 = v118[v119];
  unsigned int v121 = v120 - 2;
  if (v120 >= 2)
  {
    if (v119 <= 3) {
      uint64_t v122 = v119;
    }
    else {
      uint64_t v122 = 4;
    }
    switch(v122)
    {
      case 1:
        int v123 = *v118;
        if (v119 >= 4) {
          goto LABEL_75;
        }
        goto LABEL_71;
      case 2:
        int v123 = *(unsigned __int16 *)v118;
        if (v119 >= 4) {
          goto LABEL_75;
        }
        goto LABEL_71;
      case 3:
        int v123 = *(unsigned __int16 *)v118 | (v118[2] << 16);
        if (v119 < 4) {
          goto LABEL_71;
        }
        goto LABEL_75;
      case 4:
        int v123 = *(_DWORD *)v118;
        if (v119 < 4)
        {
LABEL_71:
          unsigned int v120 = (v123 | (v121 << (8 * v119))) + 2;
          break;
        }
LABEL_75:
        if (v123 != -1) {
          goto LABEL_76;
        }
        goto LABEL_73;
      default:
        break;
    }
  }
  if (v120 == 1)
  {
LABEL_73:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v112 + 32))(v117, v118, v111);
    char v124 = 1;
  }
  else
  {
LABEL_76:
    char v124 = 0;
    *uint64_t v117 = *(void *)v118;
  }
  *((unsigned char *)v117 + v119) = v124;
  uint64_t v125 = v119 + 1;
  uint64_t v126 = type metadata accessor for ContentSizeCategory();
  uint64_t v127 = *(void *)(v126 - 8);
  uint64_t v128 = *(_DWORD *)(v127 + 80) & 0xF8 | 7;
  int v129 = (void *)(((unint64_t)v117 + v125 + v128) & ~v128);
  unsigned int v130 = (unsigned __int8 *)((unint64_t)&v118[v125 + v128] & ~v128);
  if (*(void *)(v127 + 64) <= 8uLL) {
    uint64_t v131 = 8;
  }
  else {
    uint64_t v131 = *(void *)(v127 + 64);
  }
  unsigned int v132 = v130[v131];
  unsigned int v133 = v132 - 2;
  if (v132 >= 2)
  {
    if (v131 <= 3) {
      uint64_t v134 = v131;
    }
    else {
      uint64_t v134 = 4;
    }
    switch(v134)
    {
      case 1:
        int v135 = *v130;
        if (v131 >= 4) {
          goto LABEL_94;
        }
        goto LABEL_90;
      case 2:
        int v135 = *(unsigned __int16 *)v130;
        if (v131 >= 4) {
          goto LABEL_94;
        }
        goto LABEL_90;
      case 3:
        int v135 = *(unsigned __int16 *)v130 | (v130[2] << 16);
        if (v131 < 4) {
          goto LABEL_90;
        }
        goto LABEL_94;
      case 4:
        int v135 = *(_DWORD *)v130;
        if (v131 < 4)
        {
LABEL_90:
          unsigned int v132 = (v135 | (v133 << (8 * v131))) + 2;
          break;
        }
LABEL_94:
        if (v135 != -1) {
          goto LABEL_95;
        }
        goto LABEL_92;
      default:
        break;
    }
  }
  if (v132 == 1)
  {
LABEL_92:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v127 + 32))(v129, v130, v126);
    char v136 = 1;
  }
  else
  {
LABEL_95:
    char v136 = 0;
    *int v129 = *(void *)v130;
  }
  *((unsigned char *)v129 + v131) = v136;
  int v137 = (char *)v129 + v131 + 1;
  uint64_t v138 = &v130[v131 + 1];
  unint64_t v139 = (unint64_t)(v137 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v140 = (unint64_t)(v138 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v141 = *(void *)v140;
  *(unsigned char *)(v139 + 8) = *(unsigned char *)(v140 + 8);
  *(void *)unint64_t v139 = v141;
  *(_OWORD *)((unint64_t)(v137 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)(v138 + 23) & 0xFFFFFFFFFFFFFFF8);
  return v611;
}

unsigned char *sub_1002D70E0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  v1111 = a1;
  uint64_t v1103 = (v7 | 7) + 6;
  uint64_t v9 = (unsigned char *)((unint64_t)&a2[v1103] & ~(v7 | 7));
  uint64_t v8 = (unsigned char *)((unint64_t)&a1[v1103] & ~(v7 | 7));
  unsigned char *v8 = *v9;
  unsigned int v1099 = v9;
  uint64_t v1101 = v8;
  v8[1] = v9[1];
  unint64_t v10 = (void *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((unint64_t)(v9 + 9) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  v10[1] = v11[1];
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v12 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(unsigned char *)(v12 + 5) = *(unsigned char *)(v13 + 5);
  uint64_t v14 = ~v7;
  uint64_t v15 = (void *)((v7 + 6 + v12) & ~v7);
  unint64_t v16 = (void *)((v7 + 6 + v13) & ~v7);
  int v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v18 = v17(v15, 1, v5);
  int v19 = v17(v16, 1, v5);
  v1107 = a2;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v15, v16, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v6 + 84);
    size_t v21 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v15, v16, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
    int v20 = *(_DWORD *)(v6 + 84);
    size_t v21 = *(void *)(v6 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy(v15, v16, v22);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v23 = *(void *)(v6 + 64);
  }
  else {
    size_t v23 = *(void *)(v6 + 64) + 1;
  }
  *((unsigned char *)v15 + v23) = *((unsigned char *)v16 + v23);
  unint64_t v24 = ((unint64_t)v15 + v23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v16 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(v25 + 8);
  *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
  *(void *)(v24 + 8) = v26;
  *(_DWORD *)(v24 + 20) = *(_DWORD *)(v25 + 20);
  *(_DWORD *)(v24 + 24) = *(_DWORD *)(v25 + 24);
  *(unsigned char *)(v24 + 28) = *(unsigned char *)(v25 + 28);
  *(unsigned char *)(v24 + 29) = *(unsigned char *)(v25 + 29);
  *(unsigned char *)(v24 + 30) = *(unsigned char *)(v25 + 30);
  *(unsigned char *)(v24 + 31) = *(unsigned char *)(v25 + 31);
  uint64_t v27 = (char *)((v7 + 32 + v24) & v14);
  uint64_t v28 = (void *)((v7 + 32 + v25) & v14);
  int v29 = v17(v27, 1, v5);
  int v30 = v17(v28, 1, v5);
  if (v29)
  {
    uint64_t v31 = ~v7;
    if (!v30)
    {
      (*(void (**)(char *, void *, uint64_t))(v6 + 32))(v27, v28, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v31 = ~v7;
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
LABEL_20:
    memcpy(v27, v28, v23);
    goto LABEL_21;
  }
  (*(void (**)(char *, void *, uint64_t))(v6 + 40))(v27, v28, v5);
LABEL_21:
  uint64_t v1095 = ~(v7 | 7);
  __int16 v32 = &v27[v23];
  *__int16 v32 = *((unsigned char *)v28 + v23);
  v32[1] = *((unsigned char *)v28 + v23 + 1);
  v32[2] = *((unsigned char *)v28 + v23 + 2);
  uint64_t v33 = (void *)((unint64_t)&v27[v23 + 3 + v7] & v31);
  uint64_t v1109 = v31;
  uint64_t v34 = (void *)(((unint64_t)v28 + v23 + v7 + 3) & v31);
  int v35 = v17(v33, 1, v5);
  int v36 = v17(v34, 1, v5);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v33, v34, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v33, 0, 1, v5);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v33, v5);
LABEL_26:
    memcpy(v33, v34, v23);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v33, v34, v5);
LABEL_27:
  size_t v37 = ((v7 + 3 + v23 + ((v7 + 32 + ((v23 + ((v7 + 30) & v1109)) & 0xFFFFFFFFFFFFFFF8)) & v1109)) & v1109) + v23;
  v1101[v37] = v1099[v37];
  unint64_t v38 = (unint64_t)&v1101[v37] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (unint64_t)&v1099[v37] & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v38 + 24) = *(unsigned char *)(v39 + 24);
  *(unsigned char *)(v38 + 25) = *(unsigned char *)(v39 + 25);
  *(unsigned char *)(v38 + 26) = *(unsigned char *)(v39 + 26);
  *(unsigned char *)(v38 + 27) = *(unsigned char *)(v39 + 27);
  *(unsigned char *)(v38 + 28) = *(unsigned char *)(v39 + 28);
  *(unsigned char *)(v38 + 29) = *(unsigned char *)(v39 + 29);
  *(unsigned char *)(v38 + 30) = *(unsigned char *)(v39 + 30);
  size_t v40 = (void *)((v38 + 38) & 0xFFFFFFFFFFFFFFF8);
  size_t v41 = (void *)((v39 + 38) & 0xFFFFFFFFFFFFFFF8);
  *size_t v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(a3 + 16);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(unsigned __int8 *)(v43 + 80);
  unint64_t v45 = ((((v37 + (v1103 & v1095)) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8) + v44 + 16;
  unint64_t v46 = (char *)((unint64_t)&v1111[v45] & ~v44);
  uint64_t v47 = (char *)((unint64_t)&v1107[v45] & ~v44);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  int v49 = v48(v46, 1, v42);
  int v50 = v48(v47, 1, v42);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v46, v47, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
      goto LABEL_40;
    }
    int v51 = *(_DWORD *)(v43 + 84);
    size_t v52 = *(void *)(v43 + 64);
  }
  else
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v46, v47, v42);
      goto LABEL_40;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v42);
    int v51 = *(_DWORD *)(v43 + 84);
    size_t v52 = *(void *)(v43 + 64);
  }
  if (v51) {
    size_t v53 = v52;
  }
  else {
    size_t v53 = v52 + 1;
  }
  memcpy(v46, v47, v53);
LABEL_40:
  if (*(_DWORD *)(v43 + 84)) {
    uint64_t v54 = *(void *)(v43 + 64);
  }
  else {
    uint64_t v54 = *(void *)(v43 + 64) + 1;
  }
  uint64_t v55 = &v46[v54];
  uint64_t v56 = &v47[v54];
  v46[v54] = v47[v54];
  uint64_t v1108 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v1108 - 8);
  int v58 = *(_DWORD *)(v57 + 80) & 0xF8;
  uint64_t v1100 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v59 = *(void *)(v1100 - 8);
  uint64_t v60 = *(unsigned __int8 *)(v59 + 80);
  uint64_t v61 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = *(unsigned __int8 *)(v62 + 80);
  uint64_t v64 = v58 | v60 | v63 | 7;
  uint64_t v65 = (unint64_t)&v55[v64 + 1] & ~v64;
  uint64_t v66 = (unint64_t)&v56[v64 + 1] & ~v64;
  uint64_t v67 = *(void *)(v57 + 64) + 3;
  unint64_t v68 = ((((v67 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = (((v68 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = v69 + 8;
  uint64_t v71 = ~v60;
  uint64_t v72 = v60 + 16;
  unint64_t v73 = (v60 + 16 + ((((((v68 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v60;
  unint64_t v74 = (unsigned __int8 *)v65;
  uint64_t v1102 = v59;
  size_t v75 = (unsigned __int8 *)v66;
  if (*(_DWORD *)(v59 + 84)) {
    uint64_t v76 = *(void *)(v59 + 64);
  }
  else {
    uint64_t v76 = *(void *)(v59 + 64) + 1;
  }
  uint64_t v1104 = v76 + 7;
  unint64_t v77 = ((((v76 + 7 + v73) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v78 = (v69 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = v78 + 8;
  unint64_t v80 = (((v78 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v81 = (v80 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = v81 + 9;
  if (v70 > v77) {
    unint64_t v77 = v70;
  }
  if (v77 <= v82) {
    unint64_t v77 = v81 + 9;
  }
  if (v77 > v79) {
    unint64_t v79 = v77;
  }
  if ((v79 & 0xFFFFFFFFFFFFFFF8) + 65 <= v79 + 1) {
    unint64_t v83 = v79 + 1;
  }
  else {
    unint64_t v83 = (v79 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  uint64_t v1110 = v57;
  uint64_t v84 = *(unsigned int *)(v57 + 84);
  size_t v85 = ((v80 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v1106 = *(_DWORD *)(v62 + 84);
  uint64_t v86 = ~v63;
  uint64_t v87 = v63 + 16;
  uint64_t v88 = *(void *)(*(void *)(v61 - 8) + 64);
  uint64_t v89 = v88 + v63;
  uint64_t v90 = v88 + 7;
  unint64_t v91 = (v88 + 7 + ((v88 + v63 + ((v63 + 16) & ~v63)) & ~v63)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v92 = ((v91 + 23) & 0xFFFFFFFFFFFFFFF8) + 17;
  size_t v93 = ((((v91 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v94 = (((v79 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v83 + 1 > v94) {
    unint64_t v94 = v83 + 1;
  }
  if (v94 <= v85) {
    unint64_t v94 = ((v80 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v94 <= v93) {
    unint64_t v94 = v93;
  }
  if (v94 <= 0x48) {
    uint64_t v95 = 72;
  }
  else {
    uint64_t v95 = v94;
  }
  unsigned int v96 = v74[v95];
  unsigned int v97 = v75[v95];
  if ((v96 ^ 0xFF) >= 0xF5)
  {
    if (v97 <= 0xA)
    {
      if (v74 != v75)
      {
        unsigned int v98 = v96 - 10;
        __src = v75;
        if (v96 >= 0xA)
        {
          if (v95 <= 3) {
            uint64_t v99 = v95;
          }
          else {
            uint64_t v99 = 4;
          }
          switch(v99)
          {
            case 1:
              int v100 = *v74;
              goto LABEL_150;
            case 2:
              int v100 = *(unsigned __int16 *)v74;
              goto LABEL_150;
            case 3:
              int v100 = *(unsigned __int16 *)v74 | (v74[2] << 16);
              goto LABEL_150;
            case 4:
              int v100 = *(_DWORD *)v74;
LABEL_150:
              if (v95 < 4) {
                v100 |= v98 << (8 * v95);
              }
              unsigned int v96 = v100 + 10;
              break;
            default:
              break;
          }
        }
        uint64_t v1092 = v61;
        uint64_t v1094 = *(void *)(v61 - 8);
        size_t __n = v76;
        uint64_t v1096 = v67;
        unint64_t v1083 = v79 + 1;
        switch(v96)
        {
          case 0u:
            uint64_t v1088 = v95;
            v1048 = v74;
            unint64_t v137 = v79;
            unsigned int v1051 = v84;
            uint64_t v138 = v71;
            uint64_t v1063 = ~v63;
            uint64_t v139 = v72;
            unint64_t v140 = v92;
            swift_bridgeObjectRelease();
            unint64_t v92 = v140;
            goto LABEL_170;
          case 1u:
            uint64_t v1088 = v95;
            v1048 = v74;
            unint64_t v137 = v79;
            unsigned int v1051 = v84;
            uint64_t v138 = v71;
            uint64_t v1063 = ~v63;
            unint64_t v1069 = v92;
            uint64_t v139 = v72;
            swift_bridgeObjectRelease();
            unint64_t v92 = v1069;
LABEL_170:
            uint64_t v72 = v139;
            uint64_t v86 = v1063;
            uint64_t v71 = v138;
            uint64_t v84 = v1051;
            unint64_t v79 = v137;
            unint64_t v74 = v1048;
            goto LABEL_412;
          case 2u:
            unsigned int v141 = v74[v83];
            unsigned int v142 = v141 - 2;
            if (v141 >= 2)
            {
              if (v83 <= 3) {
                uint64_t v143 = v83;
              }
              else {
                uint64_t v143 = 4;
              }
              switch(v143)
              {
                case 1:
                  int v144 = *v74;
                  goto LABEL_281;
                case 2:
                  int v144 = *(unsigned __int16 *)v74;
                  goto LABEL_281;
                case 3:
                  int v144 = *(unsigned __int16 *)v74 | (v74[2] << 16);
                  goto LABEL_281;
                case 4:
                  int v144 = *(_DWORD *)v74;
LABEL_281:
                  if (v83 < 4) {
                    unsigned int v141 = (v144 | (v142 << (8 * v83))) + 2;
                  }
                  else {
                    unsigned int v141 = v144 + 2;
                  }
                  break;
                default:
                  break;
              }
            }
            unsigned int v299 = v74[v79];
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            unint64_t v1079 = v79;
            uint64_t v1059 = v72;
            uint64_t v1061 = v71;
            if (v141 == 1)
            {
              unsigned int v300 = v299 - 6;
              if (v299 >= 6)
              {
                if (v79 <= 3) {
                  uint64_t v301 = v79;
                }
                else {
                  uint64_t v301 = 4;
                }
                switch(v301)
                {
                  case 1:
                    int v302 = *v74;
                    goto LABEL_384;
                  case 2:
                    int v302 = *(unsigned __int16 *)v74;
                    goto LABEL_384;
                  case 3:
                    int v302 = *(unsigned __int16 *)v74 | (v74[2] << 16);
                    goto LABEL_384;
                  case 4:
                    int v302 = *(_DWORD *)v74;
LABEL_384:
                    if (v79 < 4) {
                      v302 |= v300 << (8 * v79);
                    }
                    unsigned int v299 = v302 + 6;
                    break;
                  default:
                    break;
                }
              }
              unint64_t v1073 = v92;
              uint64_t v1058 = v90;
              switch(v299)
              {
                case 1u:
                  unsigned int v1055 = v84;
                  uint64_t v1068 = ~v63;
                  uint64_t v527 = v71;
                  uint64_t v528 = v72;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v529 = (v528
                        + ((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                + 71) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 31) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)) & v527;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1102 + 48))(v529, 1, v1100))(*(void (**)(unint64_t, uint64_t))(v1102 + 8))(v529, v1100); {
                  uint64_t v530 = (uint64_t *)((v1104 + v529) & 0xFFFFFFFFFFFFFFF8);
                  }
                  unint64_t v531 = v530[1];
                  uint64_t v86 = v1068;
                  uint64_t v84 = v1055;
                  if ((v531 & 0x3000000000000000) == 0) {
                    sub_100038B34(*v530, v531);
                  }
                  if (*(void *)(((unint64_t)v530 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                  }
                  break;
                case 2u:
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                                  + 71) & 0xFFFFFFFFFFFFFFF8)
                                                + 23) & 0xFFFFFFFFFFFFFFF8)
                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8));
                  break;
                case 3u:
                case 4u:
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  swift_release();
                  break;
                default:
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  break;
              }
              sub_10004FFD4(*(void **)((unint64_t)&v74[v1083 + 7] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v74[v1083 + 7] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v74[v1083 + 7] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v74[v1083 + 7] & 0xFFFFFFFFFFFFFFF8) + 24));
              sub_10004FFD4(*(void **)((unint64_t)&v74[v1083 + 39] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v74[v1083 + 39] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v74[v1083 + 39] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v74[v1083 + 39] & 0xFFFFFFFFFFFFFFF8) + 24));
LABEL_398:
              unint64_t v83 = v1084;
              uint64_t v95 = v1088;
              unint64_t v79 = v1079;
              uint64_t v72 = v1059;
              uint64_t v71 = v1061;
              unint64_t v92 = v1073;
              uint64_t v90 = v1058;
            }
            else
            {
              unsigned int v303 = v299 - 6;
              if (v299 >= 6)
              {
                if (v79 <= 3) {
                  uint64_t v304 = v79;
                }
                else {
                  uint64_t v304 = 4;
                }
                switch(v304)
                {
                  case 1:
                    int v305 = *v74;
                    goto LABEL_402;
                  case 2:
                    int v305 = *(unsigned __int16 *)v74;
                    goto LABEL_402;
                  case 3:
                    int v305 = *(unsigned __int16 *)v74 | (v74[2] << 16);
                    goto LABEL_402;
                  case 4:
                    int v305 = *(_DWORD *)v74;
LABEL_402:
                    if (v79 < 4) {
                      v305 |= v303 << (8 * v79);
                    }
                    unsigned int v299 = v305 + 6;
                    break;
                  default:
                    break;
                }
              }
              uint64_t v1064 = ~v63;
              switch(v299)
              {
                case 1u:
                  unsigned int v1056 = v84;
                  uint64_t v1057 = v90;
                  unint64_t v1072 = v92;
                  uint64_t v779 = v71;
                  uint64_t v780 = v72;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v781 = (v780
                        + ((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                + 71) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 31) & 0xFFFFFFFFFFFFFFF8)
                          + 23) & 0xFFFFFFFFFFFFFFF8)) & v779;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1102 + 48))(v781, 1, v1100))(*(void (**)(unint64_t, uint64_t))(v1102 + 8))(v781, v1100); {
                  v782 = (uint64_t *)((v1104 + v781) & 0xFFFFFFFFFFFFFFF8);
                  }
                  unint64_t v783 = v782[1];
                  uint64_t v86 = v1064;
                  uint64_t v84 = v1056;
                  if ((v783 & 0x3000000000000000) == 0) {
                    sub_100038B34(*v782, v783);
                  }
                  uint64_t v95 = v1088;
                  unint64_t v79 = v1079;
                  uint64_t v72 = v1059;
                  uint64_t v71 = v1061;
                  unint64_t v92 = v1072;
                  if (*(void *)(((unint64_t)v782 + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL) {
                    goto LABEL_413;
                  }
                  swift_bridgeObjectRelease();
                  swift_release();
                  break;
                case 2u:
                  unint64_t v1071 = v92;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                                  + 71) & 0xFFFFFFFFFFFFFFF8)
                                                + 23) & 0xFFFFFFFFFFFFFFF8)
                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8));
                  goto LABEL_410;
                case 3u:
                case 4u:
                  unint64_t v1071 = v92;
                  uint64_t v176 = v90;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_409;
                default:
                  unint64_t v149 = v92;
                  uint64_t v150 = v84;
                  uint64_t v151 = v90;
                  (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                  goto LABEL_407;
              }
LABEL_207:
              uint64_t v90 = v1057;
              uint64_t v72 = v1059;
              unint64_t v92 = v1072;
LABEL_411:
              uint64_t v71 = v1061;
              unint64_t v83 = v1084;
              unint64_t v79 = v1079;
LABEL_412:
              uint64_t v95 = v1088;
            }
LABEL_413:
            size_t v75 = __src;
            unsigned int v532 = __src[v95];
            unsigned int v533 = v532 - 10;
            if (v532 < 0xA)
            {
              uint64_t v536 = v1094;
              uint64_t v535 = v1096;
            }
            else
            {
              if (v95 <= 3) {
                uint64_t v534 = v95;
              }
              else {
                uint64_t v534 = 4;
              }
              uint64_t v536 = v1094;
              uint64_t v535 = v1096;
              switch(v534)
              {
                case 1:
                  int v537 = *__src;
                  goto LABEL_423;
                case 2:
                  int v537 = *(unsigned __int16 *)__src;
                  goto LABEL_423;
                case 3:
                  int v537 = *(unsigned __int16 *)__src | (__src[2] << 16);
                  goto LABEL_423;
                case 4:
                  int v537 = *(_DWORD *)__src;
LABEL_423:
                  if (v95 < 4) {
                    unsigned int v532 = (v537 | (v533 << (8 * v95))) + 10;
                  }
                  else {
                    unsigned int v532 = v537 + 10;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v532)
            {
              case 0u:
                goto LABEL_427;
              case 1u:
                goto LABEL_505;
              case 2u:
                unsigned int v617 = __src[v83];
                unsigned int v618 = v617 - 2;
                if (v617 >= 2)
                {
                  if (v83 <= 3) {
                    uint64_t v619 = v83;
                  }
                  else {
                    uint64_t v619 = 4;
                  }
                  switch(v619)
                  {
                    case 1:
                      int v620 = *__src;
                      goto LABEL_545;
                    case 2:
                      int v620 = *(unsigned __int16 *)__src;
                      goto LABEL_545;
                    case 3:
                      int v620 = *(unsigned __int16 *)__src | (__src[2] << 16);
                      goto LABEL_545;
                    case 4:
                      int v620 = *(_DWORD *)__src;
LABEL_545:
                      if (v83 < 4) {
                        unsigned int v617 = (v620 | (v618 << (8 * v83))) + 2;
                      }
                      else {
                        unsigned int v617 = v620 + 2;
                      }
                      break;
                    default:
                      break;
                  }
                }
                unsigned int v662 = __src[v79];
                if (v617 == 1)
                {
                  unsigned int v663 = v662 - 6;
                  if (v662 >= 6)
                  {
                    if (v79 <= 3) {
                      uint64_t v664 = v79;
                    }
                    else {
                      uint64_t v664 = 4;
                    }
                    switch(v664)
                    {
                      case 1:
                        int v665 = *__src;
                        goto LABEL_595;
                      case 2:
                        int v665 = *(unsigned __int16 *)__src;
                        goto LABEL_595;
                      case 3:
                        int v665 = *(unsigned __int16 *)__src | (__src[2] << 16);
                        goto LABEL_595;
                      case 4:
                        int v665 = *(_DWORD *)__src;
LABEL_595:
                        if (v79 < 4) {
                          v665 |= v663 << (8 * v79);
                        }
                        unsigned int v662 = v665 + 6;
                        break;
                      default:
                        break;
                    }
                  }
                  switch(v662)
                  {
                    case 1u:
                      unint64_t v1086 = v83;
                      unint64_t v822 = v79;
                      uint64_t v823 = v95;
                      uint64_t v824 = v535;
                      uint64_t v825 = v71;
                      uint64_t v826 = v72;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, __src, v1108);
                      uint64_t v827 = v74;
                      uint64_t v828 = (_DWORD *)((unint64_t)&v74[v824] & 0xFFFFFFFFFFFFFFFCLL);
                      unint64_t v829 = (_DWORD *)((unint64_t)&__src[v824] & 0xFFFFFFFFFFFFFFFCLL);
                      *uint64_t v828 = *v829;
                      v830 = (_OWORD *)(((unint64_t)v828 + 11) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v831 = (long long *)(((unint64_t)v829 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v832 = *v831;
                      long long v833 = v831[1];
                      long long v834 = v831[3];
                      v830[2] = v831[2];
                      v830[3] = v834;
                      _OWORD *v830 = v832;
                      v830[1] = v833;
                      uint64_t v835 = (void *)(((unint64_t)v830 + 71) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v836 = (void *)(((unint64_t)v831 + 71) & 0xFFFFFFFFFFFFFFF8);
                      *uint64_t v835 = *v836;
                      unint64_t v837 = (void *)(((unint64_t)v835 + 15) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v838 = (void *)(((unint64_t)v836 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v837 = *v838;
                      unint64_t v839 = ((unint64_t)v837 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v840 = ((unint64_t)v838 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v839 = *(void *)v840;
                      *(unsigned char *)(v839 + 8) = *(unsigned char *)(v840 + 8);
                      unint64_t v841 = (_OWORD *)(((unint64_t)v837 + 31) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v842 = (_OWORD *)(((unint64_t)v838 + 31) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v841 = *v842;
                      unint64_t v843 = (_OWORD *)(((unint64_t)v841 + 23) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v844 = (_OWORD *)(((unint64_t)v842 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v843 = *v844;
                      uint64_t v845 = (void *)(((unint64_t)v843 + v826) & v825);
                      unint64_t v846 = (const void *)(((unint64_t)v844 + v826) & v825);
                      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1102 + 48))(v846, 1, v1100))
                      {
                        memcpy(v845, v846, __n);
                      }
                      else
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v1102 + 32))(v845, v846, v1100);
                        (*(void (**)(void *, void, uint64_t, uint64_t))(v1102 + 56))(v845, 0, 1, v1100);
                      }
                      long long v1038 = (_OWORD *)(((unint64_t)v845 + v1104) & 0xFFFFFFFFFFFFFFF8);
                      v1039 = (_OWORD *)(((unint64_t)v846 + v1104) & 0xFFFFFFFFFFFFFFF8);
                      *long long v1038 = *v1039;
                      unint64_t v1040 = ((unint64_t)v1039 + 23) & 0xFFFFFFFFFFFFFFF8;
                      long long v1041 = *(_OWORD *)v1040;
                      unint64_t v1042 = ((unint64_t)v1038 + 23) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)(v1042 + 16) = *(void *)(v1040 + 16);
                      *(_OWORD *)unint64_t v1042 = v1041;
                      char v810 = 1;
                      unint64_t v74 = v827;
                      size_t v75 = __src;
                      uint64_t v95 = v823;
                      unint64_t v809 = v822;
                      unint64_t v917 = v1083;
                      unint64_t v83 = v1086;
                      goto LABEL_607;
                    case 2u:
                      unint64_t v847 = v79;
                      uint64_t v848 = v535;
                      uint64_t v849 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v809 = v847;
                      uint64_t v95 = v849;
                      v850 = (_DWORD *)((unint64_t)&v74[v848] & 0xFFFFFFFFFFFFFFFCLL);
                      v851 = (_DWORD *)((unint64_t)&__src[v848] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v850 = *v851;
                      long long v852 = (_OWORD *)(((unint64_t)v850 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v853 = (long long *)(((unint64_t)v851 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v854 = *v853;
                      long long v855 = v853[1];
                      long long v856 = v853[3];
                      v852[2] = v853[2];
                      v852[3] = v856;
                      *long long v852 = v854;
                      v852[1] = v855;
                      v857 = (_OWORD *)(((unint64_t)v852 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v858 = (_OWORD *)(((unint64_t)v853 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v857 = *v858;
                      uint64_t v859 = (void *)(((unint64_t)v857 + 23) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v860 = (void *)(((unint64_t)v858 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *uint64_t v859 = *v860;
                      uint64_t v861 = (void *)(((unint64_t)v859 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v862 = (void *)(((unint64_t)v860 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *uint64_t v861 = *v862;
                      v863 = (void *)(((unint64_t)v861 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v864 = (void *)(((unint64_t)v862 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v863 = *v864;
                      v865 = (void *)(((unint64_t)v863 + 15) & 0xFFFFFFFFFFFFFFF8);
                      long long v866 = (void *)(((unint64_t)v864 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v865 = *v866;
                      long long v867 = (void *)(((unint64_t)v865 + 15) & 0xFFFFFFFFFFFFFFF8);
                      long long v868 = (void *)(((unint64_t)v866 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *long long v867 = *v868;
                      unint64_t v869 = ((unint64_t)v867 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v870 = ((unint64_t)v868 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v869 = *(void *)v870;
                      *(unsigned char *)(v869 + 8) = *(unsigned char *)(v870 + 8);
                      char v810 = 2;
                      goto LABEL_606;
                    case 3u:
                      unint64_t v871 = v79;
                      uint64_t v872 = v535;
                      uint64_t v873 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v809 = v871;
                      uint64_t v95 = v873;
                      unint64_t v874 = (_DWORD *)((unint64_t)&v74[v872] & 0xFFFFFFFFFFFFFFFCLL);
                      v875 = (_DWORD *)((unint64_t)&__src[v872] & 0xFFFFFFFFFFFFFFFCLL);
                      *unint64_t v874 = *v875;
                      v876 = (_OWORD *)(((unint64_t)v874 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v877 = (long long *)(((unint64_t)v875 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v878 = *v877;
                      long long v879 = v877[1];
                      long long v880 = v877[3];
                      v876[2] = v877[2];
                      v876[3] = v880;
                      _OWORD *v876 = v878;
                      v876[1] = v879;
                      v881 = (_OWORD *)(((unint64_t)v876 + 71) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v882 = (_OWORD *)(((unint64_t)v877 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v881 = *v882;
                      uint64_t v883 = (void *)(((unint64_t)v881 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v884 = (void *)(((unint64_t)v882 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *uint64_t v883 = *v884;
                      v885 = (void *)(((unint64_t)v883 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v886 = (void *)(((unint64_t)v884 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v885 = *v886;
                      *(void *)(((unint64_t)v885 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v886 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v810 = 3;
                      goto LABEL_606;
                    case 4u:
                      unint64_t v887 = v79;
                      uint64_t v888 = v535;
                      uint64_t v889 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v809 = v887;
                      uint64_t v95 = v889;
                      long long v890 = (_DWORD *)((unint64_t)&v74[v888] & 0xFFFFFFFFFFFFFFFCLL);
                      v891 = (_DWORD *)((unint64_t)&__src[v888] & 0xFFFFFFFFFFFFFFFCLL);
                      *long long v890 = *v891;
                      v892 = (_OWORD *)(((unint64_t)v890 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v893 = (long long *)(((unint64_t)v891 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v894 = *v893;
                      long long v895 = v893[1];
                      long long v896 = v893[3];
                      v892[2] = v893[2];
                      v892[3] = v896;
                      _OWORD *v892 = v894;
                      v892[1] = v895;
                      v897 = (_OWORD *)(((unint64_t)v892 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v898 = (_OWORD *)(((unint64_t)v893 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v897 = *v898;
                      v899 = (void *)(((unint64_t)v897 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v900 = (void *)(((unint64_t)v898 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v899 = *v900;
                      v901 = (void *)(((unint64_t)v899 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v902 = (void *)(((unint64_t)v900 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v901 = *v902;
                      *(void *)(((unint64_t)v901 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v902 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v810 = 4;
                      goto LABEL_606;
                    case 5u:
                      unint64_t v903 = v79;
                      uint64_t v904 = v535;
                      uint64_t v905 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v809 = v903;
                      uint64_t v95 = v905;
                      v906 = (_DWORD *)((unint64_t)&v74[v904] & 0xFFFFFFFFFFFFFFFCLL);
                      id v907 = (_DWORD *)((unint64_t)&__src[v904] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v906 = *v907;
                      v908 = (_OWORD *)(((unint64_t)v906 + 11) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v909 = (long long *)(((unint64_t)v907 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v910 = *v909;
                      long long v911 = v909[1];
                      long long v912 = v909[3];
                      v908[2] = v909[2];
                      v908[3] = v912;
                      _OWORD *v908 = v910;
                      v908[1] = v911;
                      v913 = (_OWORD *)(((unint64_t)v908 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v914 = (_OWORD *)(((unint64_t)v909 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v913 = *v914;
                      long long v915 = (void *)(((unint64_t)v913 + 23) & 0xFFFFFFFFFFFFFFF8);
                      long long v916 = (void *)(((unint64_t)v914 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *long long v915 = *v916;
                      *(void *)(((unint64_t)v915 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v916 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v810 = 5;
                      goto LABEL_606;
                    default:
                      unint64_t v806 = v79;
                      uint64_t v807 = v535;
                      uint64_t v808 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v809 = v806;
                      uint64_t v95 = v808;
                      char v810 = 0;
                      v811 = (_DWORD *)((unint64_t)&v74[v807] & 0xFFFFFFFFFFFFFFFCLL);
                      v812 = (_DWORD *)((unint64_t)&__src[v807] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v811 = *v812;
                      long long v813 = (_OWORD *)(((unint64_t)v811 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v814 = (long long *)(((unint64_t)v812 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v815 = *v814;
                      long long v816 = v814[1];
                      long long v817 = v814[3];
                      v813[2] = v814[2];
                      v813[3] = v817;
                      *long long v813 = v815;
                      v813[1] = v816;
                      v818 = (_OWORD *)(((unint64_t)v813 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v819 = (_OWORD *)(((unint64_t)v814 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v818 = *v819;
                      unint64_t v820 = (void *)(((unint64_t)v818 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v821 = (void *)(((unint64_t)v819 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v820 = *v821;
                      *(void *)(((unint64_t)v820 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v821 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_606:
                      unint64_t v917 = v1083;
LABEL_607:
                      v74[v809] = v810;
                      v918 = &v74[v917];
                      v919 = &v75[v917];
                      v920 = (_OWORD *)((unint64_t)(v918 + 7) & 0xFFFFFFFFFFFFFFF8);
                      v921 = (long long *)((unint64_t)(v919 + 7) & 0xFFFFFFFFFFFFFFF8);
                      long long v922 = *v921;
                      *(_OWORD *)((char *)v920 + 9) = *(long long *)((char *)v921 + 9);
                      _OWORD *v920 = v922;
                      v923 = (_OWORD *)((unint64_t)(v918 + 39) & 0xFFFFFFFFFFFFFFF8);
                      char v924 = (long long *)((unint64_t)(v919 + 39) & 0xFFFFFFFFFFFFFFF8);
                      long long v925 = *v924;
                      *(_OWORD *)((char *)v923 + 9) = *(long long *)((char *)v924 + 9);
                      _OWORD *v923 = v925;
                      char v926 = 1;
                      break;
                  }
                }
                else
                {
                  unsigned int v666 = v662 - 6;
                  if (v662 >= 6)
                  {
                    if (v79 <= 3) {
                      uint64_t v667 = v79;
                    }
                    else {
                      uint64_t v667 = 4;
                    }
                    switch(v667)
                    {
                      case 1:
                        int v668 = *__src;
                        goto LABEL_611;
                      case 2:
                        int v668 = *(unsigned __int16 *)__src;
                        goto LABEL_611;
                      case 3:
                        int v668 = *(unsigned __int16 *)__src | (__src[2] << 16);
                        goto LABEL_611;
                      case 4:
                        int v668 = *(_DWORD *)__src;
LABEL_611:
                        if (v79 < 4) {
                          v668 |= v666 << (8 * v79);
                        }
                        unsigned int v662 = v668 + 6;
                        break;
                      default:
                        break;
                    }
                  }
                  switch(v662)
                  {
                    case 1u:
                      unint64_t v1087 = v83;
                      unint64_t v943 = v79;
                      uint64_t v944 = v95;
                      uint64_t v945 = v535;
                      uint64_t v946 = v71;
                      uint64_t v947 = v72;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, __src, v1108);
                      v948 = v74;
                      v949 = (_DWORD *)((unint64_t)&v74[v945] & 0xFFFFFFFFFFFFFFFCLL);
                      v950 = (_DWORD *)((unint64_t)&__src[v945] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v949 = *v950;
                      v951 = (_OWORD *)(((unint64_t)v949 + 11) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v952 = (long long *)(((unint64_t)v950 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v953 = *v952;
                      long long v954 = v952[1];
                      long long v955 = v952[3];
                      v951[2] = v952[2];
                      v951[3] = v955;
                      _OWORD *v951 = v953;
                      v951[1] = v954;
                      unint64_t v956 = (void *)(((unint64_t)v951 + 71) & 0xFFFFFFFFFFFFFFF8);
                      id v957 = (void *)(((unint64_t)v952 + 71) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v956 = *v957;
                      v958 = (void *)(((unint64_t)v956 + 15) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v959 = (void *)(((unint64_t)v957 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v958 = *v959;
                      unint64_t v960 = ((unint64_t)v958 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v961 = ((unint64_t)v959 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v960 = *(void *)v961;
                      *(unsigned char *)(v960 + 8) = *(unsigned char *)(v961 + 8);
                      unint64_t v962 = (_OWORD *)(((unint64_t)v958 + 31) & 0xFFFFFFFFFFFFFFF8);
                      id v963 = (_OWORD *)(((unint64_t)v959 + 31) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v962 = *v963;
                      v964 = (_OWORD *)(((unint64_t)v962 + 23) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v965 = (_OWORD *)(((unint64_t)v963 + 23) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v964 = *v965;
                      unsigned __int8 v966 = (void *)(((unint64_t)v964 + v947) & v946);
                      char v967 = (const void *)(((unint64_t)v965 + v947) & v946);
                      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1102 + 48))(v967, 1, v1100))
                      {
                        memcpy(v966, v967, __n);
                      }
                      else
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v1102 + 32))(v966, v967, v1100);
                        (*(void (**)(void *, void, uint64_t, uint64_t))(v1102 + 56))(v966, 0, 1, v1100);
                      }
                      v1043 = (_OWORD *)(((unint64_t)v966 + v1104) & 0xFFFFFFFFFFFFFFF8);
                      v1044 = (_OWORD *)(((unint64_t)v967 + v1104) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v1043 = *v1044;
                      unint64_t v1045 = ((unint64_t)v1044 + 23) & 0xFFFFFFFFFFFFFFF8;
                      long long v1046 = *(_OWORD *)v1045;
                      unint64_t v1047 = ((unint64_t)v1043 + 23) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)(v1047 + 16) = *(void *)(v1045 + 16);
                      *(_OWORD *)unint64_t v1047 = v1046;
                      char v931 = 1;
                      unint64_t v74 = v948;
                      size_t v75 = __src;
                      uint64_t v95 = v944;
                      unint64_t v930 = v943;
                      unint64_t v83 = v1087;
                      break;
                    case 2u:
                      unint64_t v968 = v79;
                      uint64_t v969 = v535;
                      uint64_t v970 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v930 = v968;
                      uint64_t v95 = v970;
                      v971 = (_DWORD *)((unint64_t)&v74[v969] & 0xFFFFFFFFFFFFFFFCLL);
                      v972 = (_DWORD *)((unint64_t)&__src[v969] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v971 = *v972;
                      v973 = (_OWORD *)(((unint64_t)v971 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v974 = (long long *)(((unint64_t)v972 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v975 = *v974;
                      long long v976 = v974[1];
                      long long v977 = v974[3];
                      v973[2] = v974[2];
                      v973[3] = v977;
                      _OWORD *v973 = v975;
                      v973[1] = v976;
                      v978 = (_OWORD *)(((unint64_t)v973 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v979 = (_OWORD *)(((unint64_t)v974 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v978 = *v979;
                      v980 = (void *)(((unint64_t)v978 + 23) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v981 = (void *)(((unint64_t)v979 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v980 = *v981;
                      uint64_t v982 = (void *)(((unint64_t)v980 + 15) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v983 = (void *)(((unint64_t)v981 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *uint64_t v982 = *v983;
                      v984 = (void *)(((unint64_t)v982 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v985 = (void *)(((unint64_t)v983 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v984 = *v985;
                      v986 = (void *)(((unint64_t)v984 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v987 = (void *)(((unint64_t)v985 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v986 = *v987;
                      long long v988 = (void *)(((unint64_t)v986 + 15) & 0xFFFFFFFFFFFFFFF8);
                      long long v989 = (void *)(((unint64_t)v987 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *long long v988 = *v989;
                      unint64_t v990 = ((unint64_t)v988 + 15) & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v991 = ((unint64_t)v989 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(void *)unint64_t v990 = *(void *)v991;
                      *(unsigned char *)(v990 + 8) = *(unsigned char *)(v991 + 8);
                      char v931 = 2;
                      break;
                    case 3u:
                      unint64_t v992 = v79;
                      uint64_t v993 = v535;
                      uint64_t v994 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v930 = v992;
                      uint64_t v95 = v994;
                      unint64_t v995 = (_DWORD *)((unint64_t)&v74[v993] & 0xFFFFFFFFFFFFFFFCLL);
                      unint64_t v996 = (_DWORD *)((unint64_t)&__src[v993] & 0xFFFFFFFFFFFFFFFCLL);
                      *unint64_t v995 = *v996;
                      v997 = (_OWORD *)(((unint64_t)v995 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v998 = (long long *)(((unint64_t)v996 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v999 = *v998;
                      long long v1000 = v998[1];
                      long long v1001 = v998[3];
                      v997[2] = v998[2];
                      v997[3] = v1001;
                      _OWORD *v997 = v999;
                      v997[1] = v1000;
                      v1002 = (_OWORD *)(((unint64_t)v997 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1003 = (_OWORD *)(((unint64_t)v998 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v1002 = *v1003;
                      unint64_t v1004 = (void *)(((unint64_t)v1002 + 23) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v1005 = (void *)(((unint64_t)v1003 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v1004 = *v1005;
                      v1006 = (void *)(((unint64_t)v1004 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1007 = (void *)(((unint64_t)v1005 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1006 = *v1007;
                      *(void *)(((unint64_t)v1006 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1007 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v931 = 3;
                      break;
                    case 4u:
                      unint64_t v1008 = v79;
                      uint64_t v1009 = v535;
                      uint64_t v1010 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v930 = v1008;
                      uint64_t v95 = v1010;
                      long long v1011 = (_DWORD *)((unint64_t)&v74[v1009] & 0xFFFFFFFFFFFFFFFCLL);
                      long long v1012 = (_DWORD *)((unint64_t)&__src[v1009] & 0xFFFFFFFFFFFFFFFCLL);
                      *long long v1011 = *v1012;
                      v1013 = (_OWORD *)(((unint64_t)v1011 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v1014 = (long long *)(((unint64_t)v1012 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v1015 = *v1014;
                      long long v1016 = v1014[1];
                      long long v1017 = v1014[3];
                      v1013[2] = v1014[2];
                      v1013[3] = v1017;
                      _OWORD *v1013 = v1015;
                      v1013[1] = v1016;
                      v1018 = (_OWORD *)(((unint64_t)v1013 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1019 = (_OWORD *)(((unint64_t)v1014 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v1018 = *v1019;
                      v1020 = (void *)(((unint64_t)v1018 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v1021 = (void *)(((unint64_t)v1019 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v1020 = *v1021;
                      v1022 = (void *)(((unint64_t)v1020 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v1023 = (void *)(((unint64_t)v1021 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v1022 = *v1023;
                      *(void *)(((unint64_t)v1022 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1023 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v931 = 4;
                      break;
                    case 5u:
                      unint64_t v1024 = v79;
                      uint64_t v1025 = v535;
                      uint64_t v1026 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v930 = v1024;
                      uint64_t v95 = v1026;
                      v1027 = (_DWORD *)((unint64_t)&v74[v1025] & 0xFFFFFFFFFFFFFFFCLL);
                      id v1028 = (_DWORD *)((unint64_t)&__src[v1025] & 0xFFFFFFFFFFFFFFFCLL);
                      _DWORD *v1027 = *v1028;
                      v1029 = (_OWORD *)(((unint64_t)v1027 + 11) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v1030 = (long long *)(((unint64_t)v1028 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v1031 = *v1030;
                      long long v1032 = v1030[1];
                      long long v1033 = v1030[3];
                      v1029[2] = v1030[2];
                      v1029[3] = v1033;
                      _OWORD *v1029 = v1031;
                      v1029[1] = v1032;
                      v1034 = (_OWORD *)(((unint64_t)v1029 + 71) & 0xFFFFFFFFFFFFFFF8);
                      v1035 = (_OWORD *)(((unint64_t)v1030 + 71) & 0xFFFFFFFFFFFFFFF8);
                      _OWORD *v1034 = *v1035;
                      long long v1036 = (void *)(((unint64_t)v1034 + 23) & 0xFFFFFFFFFFFFFFF8);
                      long long v1037 = (void *)(((unint64_t)v1035 + 23) & 0xFFFFFFFFFFFFFFF8);
                      *long long v1036 = *v1037;
                      *(void *)(((unint64_t)v1036 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1037 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v931 = 5;
                      break;
                    default:
                      unint64_t v927 = v79;
                      uint64_t v928 = v535;
                      uint64_t v929 = v95;
                      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                      unint64_t v930 = v927;
                      uint64_t v95 = v929;
                      char v931 = 0;
                      long long v932 = (_DWORD *)((unint64_t)&v74[v928] & 0xFFFFFFFFFFFFFFFCLL);
                      v933 = (_DWORD *)((unint64_t)&__src[v928] & 0xFFFFFFFFFFFFFFFCLL);
                      *long long v932 = *v933;
                      v934 = (_OWORD *)(((unint64_t)v932 + 11) & 0xFFFFFFFFFFFFFFF8);
                      v935 = (long long *)(((unint64_t)v933 + 11) & 0xFFFFFFFFFFFFFFF8);
                      long long v936 = *v935;
                      long long v937 = v935[1];
                      long long v938 = v935[3];
                      v934[2] = v935[2];
                      v934[3] = v938;
                      _OWORD *v934 = v936;
                      v934[1] = v937;
                      unint64_t v939 = (_OWORD *)(((unint64_t)v934 + 71) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v940 = (_OWORD *)(((unint64_t)v935 + 71) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v939 = *v940;
                      v941 = (void *)(((unint64_t)v939 + 23) & 0xFFFFFFFFFFFFFFF8);
                      v942 = (void *)(((unint64_t)v940 + 23) & 0xFFFFFFFFFFFFFFF8);
                      void *v941 = *v942;
                      *(void *)(((unint64_t)v941 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v942 + 15) & 0xFFFFFFFFFFFFFFF8);
                      break;
                  }
                  char v926 = 0;
                  v74[v930] = v931;
                }
                v74[v83] = v926;
                goto LABEL_628;
              case 3u:
                goto LABEL_506;
              case 4u:
                unsigned int v621 = __src[v79];
                unsigned int v622 = v621 - 6;
                if (v621 >= 6)
                {
                  if (v79 <= 3) {
                    uint64_t v623 = v79;
                  }
                  else {
                    uint64_t v623 = 4;
                  }
                  switch(v623)
                  {
                    case 1:
                      int v624 = *__src;
                      goto LABEL_564;
                    case 2:
                      int v624 = *(unsigned __int16 *)__src;
                      goto LABEL_564;
                    case 3:
                      int v624 = *(unsigned __int16 *)__src | (__src[2] << 16);
                      goto LABEL_564;
                    case 4:
                      int v624 = *(_DWORD *)__src;
LABEL_564:
                      if (v79 < 4) {
                        unsigned int v621 = (v624 | (v622 << (8 * v79))) + 6;
                      }
                      else {
                        unsigned int v621 = v624 + 6;
                      }
                      break;
                    default:
                      break;
                  }
                }
                switch(v621)
                {
                  case 1u:
                    unint64_t v685 = v79;
                    uint64_t v686 = v95;
                    uint64_t v687 = v535;
                    uint64_t v688 = v71;
                    uint64_t v689 = v72;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, __src, v1108);
                    uint64_t v690 = (_DWORD *)((unint64_t)&v74[v687] & 0xFFFFFFFFFFFFFFFCLL);
                    unsigned int v691 = (_DWORD *)((unint64_t)&__src[v687] & 0xFFFFFFFFFFFFFFFCLL);
                    *uint64_t v690 = *v691;
                    unsigned int v692 = (_OWORD *)(((unint64_t)v690 + 11) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v693 = (long long *)(((unint64_t)v691 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v694 = *v693;
                    long long v695 = v693[1];
                    long long v696 = v693[3];
                    v692[2] = v693[2];
                    v692[3] = v696;
                    *unsigned int v692 = v694;
                    v692[1] = v695;
                    uint64_t v697 = (void *)(((unint64_t)v692 + 71) & 0xFFFFFFFFFFFFFFF8);
                    int v698 = (void *)(((unint64_t)v693 + 71) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v697 = *v698;
                    uint64_t v699 = (void *)(((unint64_t)v697 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v700 = (void *)(((unint64_t)v698 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v699 = *v700;
                    unint64_t v701 = ((unint64_t)v699 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v702 = ((unint64_t)v700 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v701 = *(void *)v702;
                    *(unsigned char *)(v701 + 8) = *(unsigned char *)(v702 + 8);
                    unint64_t v703 = (_OWORD *)(((unint64_t)v699 + 31) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v704 = (_OWORD *)(((unint64_t)v700 + 31) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v703 = *v704;
                    unint64_t v705 = (_OWORD *)(((unint64_t)v703 + 23) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v706 = (_OWORD *)(((unint64_t)v704 + 23) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v705 = *v706;
                    v707 = (void *)(((unint64_t)v705 + v689) & v688);
                    unsigned int v708 = (const void *)(((unint64_t)v706 + v689) & v688);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1102 + 48))(v708, 1, v1100))
                    {
                      memcpy(v707, v708, __n);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1102 + 32))(v707, v708, v1100);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v1102 + 56))(v707, 0, 1, v1100);
                    }
                    long long v784 = (_OWORD *)(((unint64_t)v707 + v1104) & 0xFFFFFFFFFFFFFFF8);
                    long long v785 = (_OWORD *)(((unint64_t)v708 + v1104) & 0xFFFFFFFFFFFFFFF8);
                    *long long v784 = *v785;
                    unint64_t v786 = ((unint64_t)v785 + 23) & 0xFFFFFFFFFFFFFFF8;
                    long long v787 = *(_OWORD *)v786;
                    unint64_t v788 = ((unint64_t)v784 + 23) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)(v788 + 16) = *(void *)(v786 + 16);
                    *(_OWORD *)unint64_t v788 = v787;
                    char v673 = 1;
                    uint64_t v95 = v686;
                    unint64_t v672 = v685;
                    break;
                  case 2u:
                    unint64_t v709 = v79;
                    uint64_t v710 = v535;
                    uint64_t v711 = v95;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                    unint64_t v672 = v709;
                    uint64_t v95 = v711;
                    unsigned int v712 = (_DWORD *)((unint64_t)&v74[v710] & 0xFFFFFFFFFFFFFFFCLL);
                    uint64_t v713 = (_DWORD *)((unint64_t)&__src[v710] & 0xFFFFFFFFFFFFFFFCLL);
                    *unsigned int v712 = *v713;
                    int v714 = (_OWORD *)(((unint64_t)v712 + 11) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v715 = (long long *)(((unint64_t)v713 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v716 = *v715;
                    long long v717 = v715[1];
                    long long v718 = v715[3];
                    v714[2] = v715[2];
                    v714[3] = v718;
                    *int v714 = v716;
                    v714[1] = v717;
                    v719 = (_OWORD *)(((unint64_t)v714 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v720 = (_OWORD *)(((unint64_t)v715 + 71) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v719 = *v720;
                    long long v721 = (void *)(((unint64_t)v719 + 23) & 0xFFFFFFFFFFFFFFF8);
                    long long v722 = (void *)(((unint64_t)v720 + 23) & 0xFFFFFFFFFFFFFFF8);
                    *long long v721 = *v722;
                    long long v723 = (void *)(((unint64_t)v721 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v724 = (void *)(((unint64_t)v722 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *long long v723 = *v724;
                    v725 = (void *)(((unint64_t)v723 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v726 = (void *)(((unint64_t)v724 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v725 = *v726;
                    v727 = (void *)(((unint64_t)v725 + 15) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v728 = (void *)(((unint64_t)v726 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v727 = *v728;
                    uint64_t v729 = (void *)(((unint64_t)v727 + 15) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v730 = (void *)(((unint64_t)v728 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v729 = *v730;
                    unint64_t v731 = ((unint64_t)v729 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v732 = ((unint64_t)v730 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v731 = *(void *)v732;
                    *(unsigned char *)(v731 + 8) = *(unsigned char *)(v732 + 8);
                    char v673 = 2;
                    break;
                  case 3u:
                    unint64_t v733 = v79;
                    uint64_t v734 = v535;
                    uint64_t v735 = v95;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                    unint64_t v672 = v733;
                    uint64_t v95 = v735;
                    long long v736 = (_DWORD *)((unint64_t)&v74[v734] & 0xFFFFFFFFFFFFFFFCLL);
                    long long v737 = (_DWORD *)((unint64_t)&__src[v734] & 0xFFFFFFFFFFFFFFFCLL);
                    *long long v736 = *v737;
                    v738 = (_OWORD *)(((unint64_t)v736 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v739 = (long long *)(((unint64_t)v737 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v740 = *v739;
                    long long v741 = v739[1];
                    long long v742 = v739[3];
                    v738[2] = v739[2];
                    v738[3] = v742;
                    _OWORD *v738 = v740;
                    v738[1] = v741;
                    unint64_t v743 = (_OWORD *)(((unint64_t)v738 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v744 = (_OWORD *)(((unint64_t)v739 + 71) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v743 = *v744;
                    v745 = (void *)(((unint64_t)v743 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v746 = (void *)(((unint64_t)v744 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v745 = *v746;
                    v747 = (void *)(((unint64_t)v745 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v748 = (void *)(((unint64_t)v746 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v747 = *v748;
                    *(void *)(((unint64_t)v747 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v748 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v673 = 3;
                    break;
                  case 4u:
                    unint64_t v749 = v79;
                    uint64_t v750 = v535;
                    uint64_t v751 = v95;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                    unint64_t v672 = v749;
                    uint64_t v95 = v751;
                    uint64_t v752 = (_DWORD *)((unint64_t)&v74[v750] & 0xFFFFFFFFFFFFFFFCLL);
                    v753 = (_DWORD *)((unint64_t)&__src[v750] & 0xFFFFFFFFFFFFFFFCLL);
                    *uint64_t v752 = *v753;
                    v754 = (_OWORD *)(((unint64_t)v752 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v755 = (long long *)(((unint64_t)v753 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v756 = *v755;
                    long long v757 = v755[1];
                    long long v758 = v755[3];
                    v754[2] = v755[2];
                    v754[3] = v758;
                    _OWORD *v754 = v756;
                    v754[1] = v757;
                    long long v759 = (_OWORD *)(((unint64_t)v754 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v760 = (_OWORD *)(((unint64_t)v755 + 71) & 0xFFFFFFFFFFFFFFF8);
                    *long long v759 = *v760;
                    v761 = (void *)(((unint64_t)v759 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v762 = (void *)(((unint64_t)v760 + 23) & 0xFFFFFFFFFFFFFFF8);
                    void *v761 = *v762;
                    v763 = (void *)(((unint64_t)v761 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v764 = (void *)(((unint64_t)v762 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v763 = *v764;
                    *(void *)(((unint64_t)v763 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v764 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v673 = 4;
                    break;
                  case 5u:
                    unint64_t v765 = v79;
                    uint64_t v766 = v535;
                    uint64_t v767 = v95;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                    unint64_t v672 = v765;
                    uint64_t v95 = v767;
                    v768 = (_DWORD *)((unint64_t)&v74[v766] & 0xFFFFFFFFFFFFFFFCLL);
                    v769 = (_DWORD *)((unint64_t)&__src[v766] & 0xFFFFFFFFFFFFFFFCLL);
                    _DWORD *v768 = *v769;
                    v770 = (_OWORD *)(((unint64_t)v768 + 11) & 0xFFFFFFFFFFFFFFF8);
                    v771 = (long long *)(((unint64_t)v769 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v772 = *v771;
                    long long v773 = v771[1];
                    long long v774 = v771[3];
                    v770[2] = v771[2];
                    v770[3] = v774;
                    _OWORD *v770 = v772;
                    v770[1] = v773;
                    id v775 = (_OWORD *)(((unint64_t)v770 + 71) & 0xFFFFFFFFFFFFFFF8);
                    v776 = (_OWORD *)(((unint64_t)v771 + 71) & 0xFFFFFFFFFFFFFFF8);
                    *id v775 = *v776;
                    unint64_t v777 = (void *)(((unint64_t)v775 + 23) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v778 = (void *)(((unint64_t)v776 + 23) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v777 = *v778;
                    *(void *)(((unint64_t)v777 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v778 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v673 = 5;
                    break;
                  default:
                    unint64_t v669 = v79;
                    uint64_t v670 = v535;
                    uint64_t v671 = v95;
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, __src, v1108, v71);
                    unint64_t v672 = v669;
                    uint64_t v95 = v671;
                    char v673 = 0;
                    uint64_t v674 = (_DWORD *)((unint64_t)&v74[v670] & 0xFFFFFFFFFFFFFFFCLL);
                    unsigned int v675 = (_DWORD *)((unint64_t)&__src[v670] & 0xFFFFFFFFFFFFFFFCLL);
                    *uint64_t v674 = *v675;
                    unsigned int v676 = (_OWORD *)(((unint64_t)v674 + 11) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v677 = (long long *)(((unint64_t)v675 + 11) & 0xFFFFFFFFFFFFFFF8);
                    long long v678 = *v677;
                    long long v679 = v677[1];
                    long long v680 = v677[3];
                    v676[2] = v677[2];
                    v676[3] = v680;
                    *unsigned int v676 = v678;
                    v676[1] = v679;
                    uint64_t v681 = (_OWORD *)(((unint64_t)v676 + 71) & 0xFFFFFFFFFFFFFFF8);
                    int v682 = (_OWORD *)(((unint64_t)v677 + 71) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v681 = *v682;
                    uint64_t v683 = (void *)(((unint64_t)v681 + 23) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v684 = (void *)(((unint64_t)v682 + 23) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v683 = *v684;
                    *(void *)(((unint64_t)v683 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v684 + 15) & 0xFFFFFFFFFFFFFFF8);
                    break;
                }
                v74[v672] = v673;
                unsigned int v316 = (void *)((((unint64_t)v74 | 7) + v1083) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v317 = ((unint64_t)__src | 7) + v1083;
                goto LABEL_585;
              case 5u:
                uint64_t v115 = v95;
                if (v84 < 0x7FFFFFFF)
                {
                  unint64_t v628 = *(void *)(((((((unint64_t)&__src[v535] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                     + 71) & 0xFFFFFFFFFFFFFFF8)
                                   + 8);
                  if (v628 >= 0xFFFFFFFF) {
                    LODWORD(v628) = -1;
                  }
                  int v625 = v628 + 1;
                }
                else
                {
                  int v625 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v1110 + 48))(__src, v84, v1108, v71);
                  uint64_t v535 = v1096;
                }
                if (v625) {
                  goto LABEL_532;
                }
                uint64_t v161 = v535;
                (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, __src, v1108);
                goto LABEL_537;
              case 6u:
                goto LABEL_507;
              case 7u:
                goto LABEL_508;
              case 8u:
                if (v1106 < 0)
                {
                  uint64_t v118 = v86;
                  unint64_t v629 = (unint64_t)&__src[v87] & v86;
                  uint64_t v630 = v95;
                  unint64_t v631 = v92;
                  int v627 = (*(uint64_t (**)(unint64_t))(v536 + 48))(v629);
                  unint64_t v92 = v631;
                  uint64_t v95 = v630;
                }
                else
                {
                  uint64_t v118 = v86;
                  unint64_t v626 = *((void *)__src + 1);
                  if (v626 >= 0xFFFFFFFF) {
                    LODWORD(v626) = -1;
                  }
                  int v627 = v626 + 1;
                }
                uint64_t v169 = v95;
                if (v627) {
                  goto LABEL_535;
                }
                *(_OWORD *)unint64_t v74 = *(_OWORD *)__src;
                unint64_t v170 = (unint64_t)&v74[v87] & v118;
                unint64_t v171 = (unint64_t)&__src[v87] & v118;
                uint64_t v119 = v1092;
                uint64_t v172 = v1094;
                goto LABEL_540;
              case 9u:
                goto LABEL_509;
              default:
                goto LABEL_428;
            }
          case 3u:
            unint64_t v1080 = v79;
            uint64_t v1060 = v72;
            uint64_t v1062 = v71;
            unint64_t v1070 = v92;
            uint64_t v152 = v95;
            sub_10004FF38(*(void **)v74, *((void **)v74 + 1), *((void *)v74 + 2), *((void *)v74 + 3));
            unint64_t v92 = v1070;
            uint64_t v72 = v1060;
            uint64_t v71 = v1062;
            unint64_t v79 = v1080;
            uint64_t v95 = v152;
            goto LABEL_413;
          case 4u:
            unsigned int v145 = v74[v79];
            unsigned int v146 = v145 - 6;
            if (v145 >= 6)
            {
              if (v79 <= 3) {
                uint64_t v147 = v79;
              }
              else {
                uint64_t v147 = 4;
              }
              switch(v147)
              {
                case 1:
                  int v148 = *v74;
                  goto LABEL_300;
                case 2:
                  int v148 = *(unsigned __int16 *)v74;
                  goto LABEL_300;
                case 3:
                  int v148 = *(unsigned __int16 *)v74 | (v74[2] << 16);
                  goto LABEL_300;
                case 4:
                  int v148 = *(_DWORD *)v74;
LABEL_300:
                  if (v79 < 4) {
                    unsigned int v145 = (v148 | (v146 << (8 * v79))) + 6;
                  }
                  else {
                    unsigned int v145 = v148 + 6;
                  }
                  break;
                default:
                  break;
              }
            }
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            unint64_t v1079 = v79;
            uint64_t v1059 = v72;
            uint64_t v1061 = v71;
            unint64_t v1073 = v92;
            uint64_t v1058 = v90;
            switch(v145)
            {
              case 1u:
                unsigned int v1054 = v84;
                uint64_t v1067 = ~v63;
                uint64_t v306 = v71;
                uint64_t v307 = v72;
                (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v308 = (v307
                      + ((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                              + 71) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 31) & 0xFFFFFFFFFFFFFFF8)
                        + 23) & 0xFFFFFFFFFFFFFFF8)) & v306;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1102 + 48))(v308, 1, v1100))(*(void (**)(unint64_t, uint64_t))(v1102 + 8))(v308, v1100); {
                unint64_t v309 = (uint64_t *)((v1104 + v308) & 0xFFFFFFFFFFFFFFF8);
                }
                unint64_t v310 = v309[1];
                uint64_t v86 = v1067;
                uint64_t v84 = v1054;
                if ((v310 & 0x3000000000000000) == 0) {
                  sub_100038B34(*v309, v310);
                }
                if (*(void *)(((unint64_t)v309 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                }
                break;
              case 2u:
                (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                                + 71) & 0xFFFFFFFFFFFFFFF8)
                                              + 23) & 0xFFFFFFFFFFFFFFF8)
                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8));
                break;
              case 3u:
              case 4u:
                (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                swift_bridgeObjectRelease();
                swift_release();
                break;
              default:
                (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
                swift_bridgeObjectRelease();
                break;
            }

            swift_bridgeObjectRelease();
            goto LABEL_398;
          case 5u:
            if (v84 < 0x7FFFFFFF)
            {
              unint64_t v175 = *(void *)(((((((unint64_t)&v74[v67] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                 + 71) & 0xFFFFFFFFFFFFFFF8)
                               + 8);
              if (v175 >= 0xFFFFFFFF) {
                LODWORD(v175) = -1;
              }
              int v157 = v175 + 1;
            }
            else
            {
              unint64_t v1081 = v79;
              uint64_t v153 = v84;
              uint64_t v1089 = v95;
              unsigned int v1052 = v84;
              uint64_t v154 = v71;
              uint64_t v1065 = ~v63;
              uint64_t v155 = v72;
              unint64_t v156 = v92;
              int v157 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v1110 + 48))(v74, v153, v1108);
              unint64_t v92 = v156;
              uint64_t v72 = v155;
              uint64_t v86 = v1065;
              uint64_t v71 = v154;
              uint64_t v84 = v1052;
              uint64_t v95 = v1089;
              unint64_t v79 = v1081;
            }
            if (v157) {
              goto LABEL_413;
            }
            unint64_t v1079 = v79;
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            uint64_t v1059 = v72;
            uint64_t v1061 = v71;
            uint64_t v1064 = v86;
            unint64_t v1071 = v92;
            uint64_t v176 = v90;
            (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v1096] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                            + 71) & 0xFFFFFFFFFFFFFFF8)
                                          + 23) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8));

LABEL_409:
            uint64_t v90 = v176;
LABEL_410:
            uint64_t v86 = v1064;
            unint64_t v92 = v1071;
            uint64_t v72 = v1059;
            goto LABEL_411;
          case 6u:
            if (*((void *)v74 + 1) < 0xFFFFFFFFuLL) {
              goto LABEL_413;
            }
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            unint64_t v1079 = v79;
            uint64_t v1061 = v71;
            uint64_t v1064 = ~v63;
            uint64_t v1059 = v72;
            unint64_t v149 = v92;
            uint64_t v150 = v84;
            uint64_t v151 = v90;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_407;
          case 7u:
            if (*((void *)v74 + 1) < 0xFFFFFFFFuLL) {
              goto LABEL_413;
            }
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            unint64_t v1079 = v79;
            uint64_t v1061 = v71;
            uint64_t v1064 = ~v63;
            uint64_t v1059 = v72;
            unint64_t v149 = v92;
            uint64_t v150 = v84;
            uint64_t v151 = v90;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_407;
          case 8u:
            if (v1106 < 0)
            {
              unint64_t v177 = (unint64_t)&v74[v87] & v86;
              unint64_t v1082 = v79;
              uint64_t v1091 = v95;
              unsigned int v1053 = v84;
              uint64_t v178 = v71;
              uint64_t v1066 = ~v63;
              uint64_t v179 = v72;
              unint64_t v180 = v92;
              int v159 = (*(uint64_t (**)(unint64_t))(v62 + 48))(v177);
              unint64_t v92 = v180;
              uint64_t v72 = v179;
              uint64_t v86 = v1066;
              uint64_t v71 = v178;
              uint64_t v84 = v1053;
              uint64_t v95 = v1091;
              unint64_t v79 = v1082;
            }
            else
            {
              unint64_t v158 = *((void *)v74 + 1);
              if (v158 >= 0xFFFFFFFF) {
                LODWORD(v158) = -1;
              }
              int v159 = v158 + 1;
            }
            if (v159) {
              goto LABEL_413;
            }
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            unint64_t v1079 = v79;
            uint64_t v1059 = v72;
            uint64_t v1061 = v71;
            unint64_t v1072 = v92;
            uint64_t v1057 = v90;
            swift_bridgeObjectRelease();
            unint64_t v181 = (unint64_t)&v74[v87] & v86;
            v1049 = v74;
            unint64_t v182 = *(void (**)(unint64_t, uint64_t))(v1094 + 8);
            v182(v181, v1092);
            uint64_t v84 = v84;
            v182((v89 + v181) & v86, v1092);
            unint64_t v74 = v1049;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_207;
          case 9u:
            if (*(void *)v74 < 0xFFFFFFFFuLL) {
              goto LABEL_413;
            }
            unint64_t v1084 = v83;
            uint64_t v1088 = v95;
            unint64_t v1079 = v79;
            uint64_t v1061 = v71;
            uint64_t v1064 = ~v63;
            uint64_t v1059 = v72;
            unint64_t v149 = v92;
            uint64_t v150 = v84;
            uint64_t v151 = v90;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_407:
            swift_bridgeObjectRelease();
            uint64_t v90 = v151;
            uint64_t v84 = v150;
            unint64_t v92 = v149;
            uint64_t v72 = v1059;
            uint64_t v86 = v1064;
            goto LABEL_411;
          default:
            goto LABEL_413;
        }
      }
      goto LABEL_430;
    }
    unsigned int v103 = v96 - 10;
    __srca = v75;
    if (v96 >= 0xA)
    {
      if (v95 <= 3) {
        uint64_t v104 = v95;
      }
      else {
        uint64_t v104 = 4;
      }
      switch(v104)
      {
        case 1:
          int v105 = *v74;
          goto LABEL_102;
        case 2:
          int v105 = *(unsigned __int16 *)v74;
          goto LABEL_102;
        case 3:
          int v105 = *(unsigned __int16 *)v74 | (v74[2] << 16);
          goto LABEL_102;
        case 4:
          int v105 = *(_DWORD *)v74;
LABEL_102:
          if (v95 < 4) {
            v105 |= v103 << (8 * v95);
          }
          unsigned int v96 = v105 + 10;
          break;
        default:
          break;
      }
    }
    switch(v96)
    {
      case 0u:
        uint64_t v110 = v95;
        goto LABEL_145;
      case 1u:
        uint64_t v110 = v95;
        goto LABEL_145;
      case 2u:
        unsigned int v122 = v74[v83];
        unsigned int v123 = v122 - 2;
        if (v122 >= 2)
        {
          if (v83 <= 3) {
            uint64_t v124 = v83;
          }
          else {
            uint64_t v124 = 4;
          }
          switch(v124)
          {
            case 1:
              int v125 = *v74;
              goto LABEL_244;
            case 2:
              int v125 = *(unsigned __int16 *)v74;
              goto LABEL_244;
            case 3:
              int v125 = *(unsigned __int16 *)v74 | (v74[2] << 16);
              goto LABEL_244;
            case 4:
              int v125 = *(_DWORD *)v74;
LABEL_244:
              if (v83 < 4) {
                unsigned int v122 = (v125 | (v123 << (8 * v83))) + 2;
              }
              else {
                unsigned int v122 = v125 + 2;
              }
              break;
            default:
              break;
          }
        }
        unsigned int v285 = v74[v79];
        if (v122 == 1)
        {
          unsigned int v286 = v285 - 6;
          if (v285 >= 6)
          {
            if (v79 <= 3) {
              uint64_t v287 = v79;
            }
            else {
              uint64_t v287 = 4;
            }
            switch(v287)
            {
              case 1:
                int v288 = *v74;
                goto LABEL_348;
              case 2:
                int v288 = *(unsigned __int16 *)v74;
                goto LABEL_348;
              case 3:
                int v288 = *(unsigned __int16 *)v74 | (v74[2] << 16);
                goto LABEL_348;
              case 4:
                int v288 = *(_DWORD *)v74;
LABEL_348:
                if (v79 < 4) {
                  v288 |= v286 << (8 * v79);
                }
                unsigned int v285 = v288 + 6;
                break;
              default:
                break;
            }
          }
          uint64_t v512 = v67;
          unint64_t v513 = v79 + 1;
          uint64_t v163 = v95;
          switch(v285)
          {
            case 1u:
              uint64_t v514 = v71;
              uint64_t v515 = v72;
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v516 = (v515
                    + ((((((((((((unint64_t)&v74[v512] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 31) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)) & v514;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1102 + 48))(v516, 1, v1100)) {
                (*(void (**)(unint64_t, uint64_t))(v1102 + 8))(v516, v1100);
              }
              unint64_t v517 = (uint64_t *)((v1104 + v516) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v518 = v517[1];
              if ((v518 & 0x3000000000000000) == 0) {
                sub_100038B34(*v517, v518);
              }
              if (*(void *)(((unint64_t)v517 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v512] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                              + 71) & 0xFFFFFFFFFFFFFFF8)
                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8));
              break;
            case 3u:
            case 4u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            default:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              break;
          }
          sub_10004FFD4(*(void **)((unint64_t)&v74[v513 + 7] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v74[v513 + 7] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v74[v513 + 7] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v74[v513 + 7] & 0xFFFFFFFFFFFFFFF8) + 24));
          sub_10004FFD4(*(void **)((unint64_t)&v74[v513 + 39] & 0xFFFFFFFFFFFFFFF8), *(void **)(((unint64_t)&v74[v513 + 39] & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)&v74[v513 + 39] & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)(((unint64_t)&v74[v513 + 39] & 0xFFFFFFFFFFFFFFF8) + 24));
        }
        else
        {
          unsigned int v289 = v285 - 6;
          if (v285 >= 6)
          {
            if (v79 <= 3) {
              uint64_t v290 = v79;
            }
            else {
              uint64_t v290 = 4;
            }
            switch(v290)
            {
              case 1:
                int v291 = *v74;
                goto LABEL_365;
              case 2:
                int v291 = *(unsigned __int16 *)v74;
                goto LABEL_365;
              case 3:
                int v291 = *(unsigned __int16 *)v74 | (v74[2] << 16);
                goto LABEL_365;
              case 4:
                int v291 = *(_DWORD *)v74;
LABEL_365:
                if (v79 < 4) {
                  v291 |= v289 << (8 * v79);
                }
                unsigned int v285 = v291 + 6;
                break;
              default:
                break;
            }
          }
          uint64_t v519 = v67;
          uint64_t v163 = v95;
          switch(v285)
          {
            case 1u:
              uint64_t v520 = v71;
              uint64_t v521 = v72;
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v522 = (v521
                    + ((((((((((((unint64_t)&v74[v519] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 31) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)) & v520;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1102 + 48))(v522, 1, v1100)) {
                (*(void (**)(unint64_t, uint64_t))(v1102 + 8))(v522, v1100);
              }
              unint64_t v523 = (uint64_t *)((v1104 + v522) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v524 = v523[1];
              if ((v524 & 0x3000000000000000) == 0) {
                sub_100038B34(*v523, v524);
              }
              uint64_t v95 = v163;
              if (*(void *)(((unint64_t)v523 + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL) {
                goto LABEL_379;
              }
              swift_bridgeObjectRelease();
LABEL_377:
              swift_release();
              break;
            case 2u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v165 = *(void **)((((((((((((((((((unint64_t)&v74[v519] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                           + 71) & 0xFFFFFFFFFFFFFFF8)
                                         + 23) & 0xFFFFFFFFFFFFFFF8)
                                       + 15) & 0xFFFFFFFFFFFFFFF8)
                                     + 15) & 0xFFFFFFFFFFFFFFF8)
                                   + 15) & 0xFFFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_192;
            case 3u:
            case 4u:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              swift_bridgeObjectRelease();
              goto LABEL_377;
            default:
              (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
              goto LABEL_277;
          }
        }
        goto LABEL_378;
      case 3u:
        uint64_t v110 = v95;
        sub_10004FF38(*(void **)v74, *((void **)v74 + 1), *((void *)v74 + 2), *((void *)v74 + 3));
        goto LABEL_146;
      case 4u:
        unsigned int v126 = v74[v79];
        unsigned int v127 = v126 - 6;
        if (v126 >= 6)
        {
          if (v79 <= 3) {
            uint64_t v128 = v79;
          }
          else {
            uint64_t v128 = 4;
          }
          switch(v128)
          {
            case 1:
              int v129 = *v74;
              goto LABEL_263;
            case 2:
              int v129 = *(unsigned __int16 *)v74;
              goto LABEL_263;
            case 3:
              int v129 = *(unsigned __int16 *)v74 | (v74[2] << 16);
              goto LABEL_263;
            case 4:
              int v129 = *(_DWORD *)v74;
LABEL_263:
              if (v79 < 4) {
                unsigned int v126 = (v129 | (v127 << (8 * v79))) + 6;
              }
              else {
                unsigned int v126 = v129 + 6;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v292 = v67;
        unint64_t v293 = v79 + 1;
        uint64_t v163 = v95;
        switch(v126)
        {
          case 1u:
            uint64_t v294 = v71;
            uint64_t v295 = v72;
            (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v296 = (v295
                  + ((((((((((((unint64_t)&v74[v292] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 31) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)) & v294;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1102 + 48))(v296, 1, v1100)) {
              (*(void (**)(unint64_t, uint64_t))(v1102 + 8))(v296, v1100);
            }
            unint64_t v297 = (uint64_t *)((v1104 + v296) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v298 = v297[1];
            if ((v298 & 0x3000000000000000) == 0) {
              sub_100038B34(*v297, v298);
            }
            if (*(void *)(((unint64_t)v297 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v292] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                            + 71) & 0xFFFFFFFFFFFFFFF8)
                                          + 23) & 0xFFFFFFFFFFFFFFF8)
                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8));
            break;
          case 3u:
          case 4u:
            (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          default:
            (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
            swift_bridgeObjectRelease();
            break;
        }

LABEL_277:
        swift_bridgeObjectRelease();
        goto LABEL_378;
      case 5u:
        if (v84 < 0x7FFFFFFF)
        {
          unint64_t v162 = *(void *)(((((((unint64_t)&v74[v67] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                           + 8);
          if (v162 >= 0xFFFFFFFF) {
            LODWORD(v162) = -1;
          }
          int v132 = v162 + 1;
        }
        else
        {
          uint64_t v130 = v67;
          uint64_t v131 = v95;
          int v132 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v1110 + 48))(v74, v84, v1108, v71);
          uint64_t v67 = v130;
          uint64_t v95 = v131;
        }
        if (v132) {
          goto LABEL_379;
        }
        uint64_t v163 = v95;
        uint64_t v164 = v67;
        (*(void (**)(unsigned __int8 *, uint64_t))(v1110 + 8))(v74, v1108);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_release(*(id *)((((((((((((((((((unint64_t)&v74[v164] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                        + 71) & 0xFFFFFFFFFFFFFFF8)
                                      + 23) & 0xFFFFFFFFFFFFFFF8)
                                    + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8));
        long long v165 = *(void **)(((unint64_t)v74 | 7) + v82);
LABEL_192:

LABEL_378:
        uint64_t v95 = v163;
        goto LABEL_379;
      case 6u:
        if (*((void *)v74 + 1) < 0xFFFFFFFFuLL) {
          goto LABEL_379;
        }
        uint64_t v110 = v95;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_145;
      case 7u:
        if (*((void *)v74 + 1) < 0xFFFFFFFFuLL) {
          goto LABEL_379;
        }
        uint64_t v110 = v95;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_145;
      case 8u:
        uint64_t v133 = *(void *)(v61 - 8);
        uint64_t v134 = v61;
        if (v1106 < 0)
        {
          uint64_t v173 = v95;
          int v136 = (*(uint64_t (**)(unint64_t))(v62 + 48))((unint64_t)&v74[v87] & v86);
          uint64_t v95 = v173;
        }
        else
        {
          unint64_t v135 = *((void *)v74 + 1);
          if (v135 >= 0xFFFFFFFF) {
            LODWORD(v135) = -1;
          }
          int v136 = v135 + 1;
        }
        if (!v136)
        {
          uint64_t v1090 = v95;
          swift_bridgeObjectRelease();
          uint64_t v174 = *(void (**)(unint64_t, uint64_t))(v133 + 8);
          v174((unint64_t)&v74[v87] & v86, v134);
          v174((v89 + ((unint64_t)&v74[v87] & v86)) & v86, v134);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v95 = v1090;
        }
        goto LABEL_379;
      case 9u:
        if (*(void *)v74 < 0xFFFFFFFFuLL) {
          goto LABEL_379;
        }
        uint64_t v110 = v95;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_145:
        swift_bridgeObjectRelease();
LABEL_146:
        uint64_t v95 = v110;
LABEL_379:
        size_t v525 = v95 + 1;
        long long v526 = v74;
        size_t v75 = __srca;
        break;
      default:
        goto LABEL_379;
    }
LABEL_429:
    uint64_t v538 = v95;
    memcpy(v526, v75, v525);
    uint64_t v95 = v538;
    goto LABEL_430;
  }
  if ((v97 ^ 0xFF) < 0xF5)
  {
LABEL_428:
    size_t v525 = v95 + 1;
    long long v526 = v74;
    goto LABEL_429;
  }
  if (v97 >= 0xA)
  {
    if (v95 <= 3) {
      uint64_t v101 = v95;
    }
    else {
      uint64_t v101 = 4;
    }
    switch(v101)
    {
      case 1:
        int v102 = *v75;
        goto LABEL_89;
      case 2:
        int v102 = *(unsigned __int16 *)v75;
        goto LABEL_89;
      case 3:
        int v102 = *(unsigned __int16 *)v75 | (v75[2] << 16);
        goto LABEL_89;
      case 4:
        int v102 = *(_DWORD *)v75;
LABEL_89:
        if (v95 < 4) {
          v102 |= (v97 - 10) << (8 * v95);
        }
        unsigned int v97 = v102 + 10;
        break;
      default:
        break;
    }
  }
  switch(v97)
  {
    case 0u:
LABEL_427:
      *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
      v74[v95] = 0;
      break;
    case 1u:
LABEL_505:
      *(void *)unint64_t v74 = *(void *)v75;
      v74[v95] = 1;
      break;
    case 2u:
      unsigned int v106 = v75[v83];
      unsigned int v107 = v106 - 2;
      if (v106 >= 2)
      {
        if (v83 <= 3) {
          uint64_t v108 = v83;
        }
        else {
          uint64_t v108 = 4;
        }
        switch(v108)
        {
          case 1:
            int v109 = *v75;
            goto LABEL_211;
          case 2:
            int v109 = *(unsigned __int16 *)v75;
            goto LABEL_211;
          case 3:
            int v109 = *(unsigned __int16 *)v75 | (v75[2] << 16);
            goto LABEL_211;
          case 4:
            int v109 = *(_DWORD *)v75;
LABEL_211:
            if (v83 < 4) {
              unsigned int v106 = (v109 | (v107 << (8 * v83))) + 2;
            }
            else {
              unsigned int v106 = v109 + 2;
            }
            break;
          default:
            break;
        }
      }
      unsigned int v183 = v75[v79];
      if (v106 == 1)
      {
        unsigned int v184 = v183 - 6;
        if (v183 >= 6)
        {
          if (v79 <= 3) {
            uint64_t v185 = v79;
          }
          else {
            uint64_t v185 = 4;
          }
          switch(v185)
          {
            case 1:
              int v186 = *v75;
              goto LABEL_320;
            case 2:
              int v186 = *(unsigned __int16 *)v75;
              goto LABEL_320;
            case 3:
              int v186 = *(unsigned __int16 *)v75 | (v75[2] << 16);
              goto LABEL_320;
            case 4:
              int v186 = *(_DWORD *)v75;
LABEL_320:
              if (v79 < 4) {
                v186 |= v184 << (8 * v79);
              }
              unsigned int v183 = v186 + 6;
              break;
            default:
              break;
          }
        }
        uint64_t v318 = v67;
        unint64_t v1085 = v83;
        unint64_t v319 = v79 + 1;
        unint64_t v320 = v79;
        uint64_t v321 = v95;
        switch(v183)
        {
          case 1u:
            size_t __nb = v76;
            uint64_t v334 = v71;
            uint64_t v335 = v72;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, v75, v1108);
            v1050 = v74;
            long long v336 = (_DWORD *)((unint64_t)&v74[v318] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v337 = (_DWORD *)((unint64_t)&v75[v318] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v336 = *v337;
            long long v338 = (_OWORD *)(((unint64_t)v336 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v339 = (long long *)(((unint64_t)v337 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v340 = *v339;
            long long v341 = v339[1];
            long long v342 = v339[3];
            v338[2] = v339[2];
            v338[3] = v342;
            *long long v338 = v340;
            v338[1] = v341;
            uint64_t v343 = (void *)(((unint64_t)v338 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v344 = (void *)(((unint64_t)v339 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v343 = *v344;
            unint64_t v345 = (void *)(((unint64_t)v343 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v346 = (void *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v345 = *v346;
            unint64_t v347 = ((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v348 = ((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v347 = *(void *)v348;
            *(unsigned char *)(v347 + 8) = *(unsigned char *)(v348 + 8);
            uint64_t v349 = (_OWORD *)(((unint64_t)v345 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v350 = (_OWORD *)(((unint64_t)v346 + 31) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v349 = *v350;
            uint64_t v351 = (_OWORD *)(((unint64_t)v349 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v352 = (_OWORD *)(((unint64_t)v350 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v351 = *v352;
            long long v353 = (void *)(((unint64_t)v351 + v335) & v334);
            long long v354 = (const void *)(((unint64_t)v352 + v335) & v334);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1102 + 48))(v354, 1, v1100))
            {
              memcpy(v353, v354, __nb);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1102 + 32))(v353, v354, v1100);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1102 + 56))(v353, 0, 1, v1100);
            }
            v790 = (_OWORD *)(((unint64_t)v353 + v1104) & 0xFFFFFFFFFFFFFFF8);
            v791 = (_OWORD *)(((unint64_t)v354 + v1104) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v790 = *v791;
            unint64_t v792 = ((unint64_t)v791 + 23) & 0xFFFFFFFFFFFFFFF8;
            long long v793 = *(_OWORD *)v792;
            unint64_t v794 = ((unint64_t)v790 + 23) & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v794 + 16) = *(void *)(v792 + 16);
            *(_OWORD *)unint64_t v794 = v793;
            char v322 = 1;
            unint64_t v74 = v1050;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            long long v355 = (_DWORD *)((unint64_t)&v74[v318] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v356 = (_DWORD *)((unint64_t)&v75[v318] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v355 = *v356;
            unint64_t v357 = (_OWORD *)(((unint64_t)v355 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v358 = (long long *)(((unint64_t)v356 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v359 = *v358;
            long long v360 = v358[1];
            long long v361 = v358[3];
            v357[2] = v358[2];
            v357[3] = v361;
            *unint64_t v357 = v359;
            v357[1] = v360;
            uint64_t v362 = (_OWORD *)(((unint64_t)v357 + 71) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v363 = (_OWORD *)(((unint64_t)v358 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v362 = *v363;
            uint64_t v364 = (void *)(((unint64_t)v362 + 23) & 0xFFFFFFFFFFFFFFF8);
            id v365 = (void *)(((unint64_t)v363 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v364 = *v365;
            uint64_t v366 = (void *)(((unint64_t)v364 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v367 = (void *)(((unint64_t)v365 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v366 = *v367;
            long long v368 = (void *)(((unint64_t)v366 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v369 = (void *)(((unint64_t)v367 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v368 = *v369;
            long long v370 = (void *)(((unint64_t)v368 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v371 = (void *)(((unint64_t)v369 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v370 = *v371;
            long long v372 = (void *)(((unint64_t)v370 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v373 = (void *)(((unint64_t)v371 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v372 = *v373;
            unint64_t v374 = ((unint64_t)v372 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v375 = ((unint64_t)v373 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v374 = *(void *)v375;
            *(unsigned char *)(v374 + 8) = *(unsigned char *)(v375 + 8);
            char v322 = 2;
            break;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            unint64_t v376 = (_DWORD *)((unint64_t)&v74[v318] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v377 = (_DWORD *)((unint64_t)&v75[v318] & 0xFFFFFFFFFFFFFFFCLL);
            *unint64_t v376 = *v377;
            uint64_t v378 = (_OWORD *)(((unint64_t)v376 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v379 = (long long *)(((unint64_t)v377 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v380 = *v379;
            long long v381 = v379[1];
            long long v382 = v379[3];
            v378[2] = v379[2];
            v378[3] = v382;
            *uint64_t v378 = v380;
            v378[1] = v381;
            uint64_t v383 = (_OWORD *)(((unint64_t)v378 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v384 = (_OWORD *)(((unint64_t)v379 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v383 = *v384;
            unint64_t v385 = (void *)(((unint64_t)v383 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v386 = (void *)(((unint64_t)v384 + 23) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v385 = *v386;
            unint64_t v387 = (void *)(((unint64_t)v385 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v388 = (void *)(((unint64_t)v386 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v387 = *v388;
            *(void *)(((unint64_t)v387 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v388 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v322 = 3;
            break;
          case 4u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            uint64_t v389 = (_DWORD *)((unint64_t)&v74[v318] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v390 = (_DWORD *)((unint64_t)&v75[v318] & 0xFFFFFFFFFFFFFFFCLL);
            *uint64_t v389 = *v390;
            long long v391 = (_OWORD *)(((unint64_t)v389 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v392 = (long long *)(((unint64_t)v390 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v393 = *v392;
            long long v394 = v392[1];
            long long v395 = v392[3];
            v391[2] = v392[2];
            v391[3] = v395;
            *long long v391 = v393;
            v391[1] = v394;
            long long v396 = (_OWORD *)(((unint64_t)v391 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v397 = (_OWORD *)(((unint64_t)v392 + 71) & 0xFFFFFFFFFFFFFFF8);
            *long long v396 = *v397;
            long long v398 = (void *)(((unint64_t)v396 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v399 = (void *)(((unint64_t)v397 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v398 = *v399;
            uint64_t v400 = (void *)(((unint64_t)v398 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v401 = (void *)(((unint64_t)v399 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v400 = *v401;
            *(void *)(((unint64_t)v400 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v401 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v322 = 4;
            break;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            unint64_t v402 = (_DWORD *)((unint64_t)&v74[v318] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v403 = (_DWORD *)((unint64_t)&v75[v318] & 0xFFFFFFFFFFFFFFFCLL);
            *unint64_t v402 = *v403;
            unint64_t v404 = (_OWORD *)(((unint64_t)v402 + 11) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v405 = (long long *)(((unint64_t)v403 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v406 = *v405;
            long long v407 = v405[1];
            long long v408 = v405[3];
            v404[2] = v405[2];
            v404[3] = v408;
            *unint64_t v404 = v406;
            v404[1] = v407;
            unint64_t v409 = (_OWORD *)(((unint64_t)v404 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v410 = (_OWORD *)(((unint64_t)v405 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v409 = *v410;
            unint64_t v411 = (void *)(((unint64_t)v409 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v412 = (void *)(((unint64_t)v410 + 23) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v411 = *v412;
            *(void *)(((unint64_t)v411 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v412 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v322 = 5;
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            char v322 = 0;
            unint64_t v323 = (_DWORD *)((unint64_t)&v74[v318] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v324 = (_DWORD *)((unint64_t)&v75[v318] & 0xFFFFFFFFFFFFFFFCLL);
            *unint64_t v323 = *v324;
            unint64_t v325 = (_OWORD *)(((unint64_t)v323 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v326 = (long long *)(((unint64_t)v324 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v327 = *v326;
            long long v328 = v326[1];
            long long v329 = v326[3];
            v325[2] = v326[2];
            v325[3] = v329;
            *unint64_t v325 = v327;
            v325[1] = v328;
            uint64_t v330 = (_OWORD *)(((unint64_t)v325 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v331 = (_OWORD *)(((unint64_t)v326 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v330 = *v331;
            uint64_t v332 = (void *)(((unint64_t)v330 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v333 = (void *)(((unint64_t)v331 + 23) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v332 = *v333;
            *(void *)(((unint64_t)v332 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v333 + 15) & 0xFFFFFFFFFFFFFFF8);
            break;
        }
        uint64_t v95 = v321;
        v74[v320] = v322;
        v795 = (_OWORD *)((unint64_t)&v74[v319 + 7] & 0xFFFFFFFFFFFFFFF8);
        v796 = (long long *)((unint64_t)&v75[v319 + 7] & 0xFFFFFFFFFFFFFFF8);
        long long v797 = *v796;
        *(_OWORD *)((char *)v795 + 9) = *(long long *)((char *)v796 + 9);
        _OWORD *v795 = v797;
        long long v798 = (_OWORD *)((unint64_t)&v74[v319 + 39] & 0xFFFFFFFFFFFFFFF8);
        long long v799 = (long long *)((unint64_t)&v75[v319 + 39] & 0xFFFFFFFFFFFFFFF8);
        long long v800 = *v799;
        *(_OWORD *)((char *)v798 + 9) = *(long long *)((char *)v799 + 9);
        *long long v798 = v800;
        v74[v1085] = 1;
      }
      else
      {
        unsigned int v187 = v183 - 6;
        if (v183 >= 6)
        {
          if (v79 <= 3) {
            uint64_t v188 = v79;
          }
          else {
            uint64_t v188 = 4;
          }
          switch(v188)
          {
            case 1:
              int v189 = *v75;
              goto LABEL_334;
            case 2:
              int v189 = *(unsigned __int16 *)v75;
              goto LABEL_334;
            case 3:
              int v189 = *(unsigned __int16 *)v75 | (v75[2] << 16);
              goto LABEL_334;
            case 4:
              int v189 = *(_DWORD *)v75;
LABEL_334:
              if (v79 < 4) {
                v189 |= v187 << (8 * v79);
              }
              unsigned int v183 = v189 + 6;
              break;
            default:
              break;
          }
        }
        uint64_t v413 = v67;
        unint64_t v414 = v83;
        unint64_t v415 = v79;
        uint64_t v416 = v95;
        switch(v183)
        {
          case 1u:
            size_t __nc = v76;
            uint64_t v429 = v71;
            uint64_t v430 = v72;
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, v75, v1108);
            unint64_t v431 = v75;
            long long v432 = v74;
            uint64_t v433 = v413;
            long long v434 = (_DWORD *)((unint64_t)&v74[v413] & 0xFFFFFFFFFFFFFFFCLL);
            long long v435 = v431;
            id v436 = (_DWORD *)((unint64_t)&v431[v433] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v434 = *v436;
            long long v437 = (_OWORD *)(((unint64_t)v434 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v438 = (long long *)(((unint64_t)v436 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v439 = *v438;
            long long v440 = v438[1];
            long long v441 = v438[3];
            v437[2] = v438[2];
            v437[3] = v441;
            *long long v437 = v439;
            v437[1] = v440;
            uint64_t v442 = (void *)(((unint64_t)v437 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v443 = (void *)(((unint64_t)v438 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v442 = *v443;
            unint64_t v444 = (void *)(((unint64_t)v442 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v445 = (void *)(((unint64_t)v443 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v444 = *v445;
            unint64_t v446 = ((unint64_t)v444 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v447 = ((unint64_t)v445 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v446 = *(void *)v447;
            *(unsigned char *)(v446 + 8) = *(unsigned char *)(v447 + 8);
            uint64_t v448 = (_OWORD *)(((unint64_t)v444 + 31) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v449 = (_OWORD *)(((unint64_t)v445 + 31) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v448 = *v449;
            long long v450 = (_OWORD *)(((unint64_t)v448 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v451 = (_OWORD *)(((unint64_t)v449 + 23) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v450 = *v451;
            long long v452 = (void *)(((unint64_t)v450 + v430) & v429);
            long long v453 = (const void *)(((unint64_t)v451 + v430) & v429);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1102 + 48))(v453, 1, v1100))
            {
              memcpy(v452, v453, __nc);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1102 + 32))(v452, v453, v1100);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1102 + 56))(v452, 0, 1, v1100);
            }
            v801 = (_OWORD *)(((unint64_t)v452 + v1104) & 0xFFFFFFFFFFFFFFF8);
            v802 = (_OWORD *)(((unint64_t)v453 + v1104) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v801 = *v802;
            unint64_t v803 = ((unint64_t)v802 + 23) & 0xFFFFFFFFFFFFFFF8;
            long long v804 = *(_OWORD *)v803;
            unint64_t v805 = ((unint64_t)v801 + 23) & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v805 + 16) = *(void *)(v803 + 16);
            *(_OWORD *)unint64_t v805 = v804;
            char v417 = 1;
            unint64_t v74 = v432;
            size_t v75 = v435;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            long long v454 = (_DWORD *)((unint64_t)&v74[v413] & 0xFFFFFFFFFFFFFFFCLL);
            long long v455 = (_DWORD *)((unint64_t)&v75[v413] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v454 = *v455;
            long long v456 = (_OWORD *)(((unint64_t)v454 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v457 = (long long *)(((unint64_t)v455 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v458 = *v457;
            long long v459 = v457[1];
            long long v460 = v457[3];
            v456[2] = v457[2];
            v456[3] = v460;
            _OWORD *v456 = v458;
            v456[1] = v459;
            unint64_t v461 = (_OWORD *)(((unint64_t)v456 + 71) & 0xFFFFFFFFFFFFFFF8);
            char v462 = (_OWORD *)(((unint64_t)v457 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v461 = *v462;
            v463 = (void *)(((unint64_t)v461 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v464 = (void *)(((unint64_t)v462 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v463 = *v464;
            long long v465 = (void *)(((unint64_t)v463 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v466 = (void *)(((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v465 = *v466;
            long long v467 = (void *)(((unint64_t)v465 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v468 = (void *)(((unint64_t)v466 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v467 = *v468;
            long long v469 = (void *)(((unint64_t)v467 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v470 = (void *)(((unint64_t)v468 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v469 = *v470;
            uint64_t v471 = (void *)(((unint64_t)v469 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v472 = (void *)(((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v471 = *v472;
            unint64_t v473 = ((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v474 = ((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v473 = *(void *)v474;
            *(unsigned char *)(v473 + 8) = *(unsigned char *)(v474 + 8);
            char v417 = 2;
            break;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            size_t v475 = (_DWORD *)((unint64_t)&v74[v413] & 0xFFFFFFFFFFFFFFFCLL);
            id v476 = (_DWORD *)((unint64_t)&v75[v413] & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v475 = *v476;
            uint64_t v477 = (_OWORD *)(((unint64_t)v475 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v478 = (long long *)(((unint64_t)v476 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v479 = *v478;
            long long v480 = v478[1];
            long long v481 = v478[3];
            v477[2] = v478[2];
            v477[3] = v481;
            *uint64_t v477 = v479;
            v477[1] = v480;
            unint64_t v482 = (_OWORD *)(((unint64_t)v477 + 71) & 0xFFFFFFFFFFFFFFF8);
            id v483 = (_OWORD *)(((unint64_t)v478 + 71) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v482 = *v483;
            long long v484 = (void *)(((unint64_t)v482 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v485 = (void *)(((unint64_t)v483 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v484 = *v485;
            long long v486 = (void *)(((unint64_t)v484 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v487 = (void *)(((unint64_t)v485 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v486 = *v487;
            *(void *)(((unint64_t)v486 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v487 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v417 = 3;
            break;
          case 4u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            long long v488 = (_DWORD *)((unint64_t)&v74[v413] & 0xFFFFFFFFFFFFFFFCLL);
            long long v489 = (_DWORD *)((unint64_t)&v75[v413] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v488 = *v489;
            long long v490 = (_OWORD *)(((unint64_t)v488 + 11) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v491 = (long long *)(((unint64_t)v489 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v492 = *v491;
            long long v493 = v491[1];
            long long v494 = v491[3];
            v490[2] = v491[2];
            v490[3] = v494;
            _OWORD *v490 = v492;
            v490[1] = v493;
            uint64_t v495 = (_OWORD *)(((unint64_t)v490 + 71) & 0xFFFFFFFFFFFFFFF8);
            v496 = (_OWORD *)(((unint64_t)v491 + 71) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v495 = *v496;
            long long v497 = (void *)(((unint64_t)v495 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v498 = (void *)(((unint64_t)v496 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v497 = *v498;
            uint64_t v499 = (void *)(((unint64_t)v497 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v500 = (void *)(((unint64_t)v498 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v499 = *v500;
            *(void *)(((unint64_t)v499 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v500 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v417 = 4;
            break;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            long long v501 = (_DWORD *)((unint64_t)&v74[v413] & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v502 = (_DWORD *)((unint64_t)&v75[v413] & 0xFFFFFFFFFFFFFFFCLL);
            _DWORD *v501 = *v502;
            unint64_t v503 = (_OWORD *)(((unint64_t)v501 + 11) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v504 = (long long *)(((unint64_t)v502 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v505 = *v504;
            long long v506 = v504[1];
            long long v507 = v504[3];
            v503[2] = v504[2];
            v503[3] = v507;
            *unint64_t v503 = v505;
            v503[1] = v506;
            long long v508 = (_OWORD *)(((unint64_t)v503 + 71) & 0xFFFFFFFFFFFFFFF8);
            long long v509 = (_OWORD *)(((unint64_t)v504 + 71) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v508 = *v509;
            long long v510 = (void *)(((unint64_t)v508 + 23) & 0xFFFFFFFFFFFFFFF8);
            long long v511 = (void *)(((unint64_t)v509 + 23) & 0xFFFFFFFFFFFFFFF8);
            *long long v510 = *v511;
            *(void *)(((unint64_t)v510 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v511 + 15) & 0xFFFFFFFFFFFFFFF8);
            char v417 = 5;
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
            char v417 = 0;
            long long v418 = (_DWORD *)((unint64_t)&v74[v413] & 0xFFFFFFFFFFFFFFFCLL);
            uint64_t v419 = (_DWORD *)((unint64_t)&v75[v413] & 0xFFFFFFFFFFFFFFFCLL);
            *long long v418 = *v419;
            v420 = (_OWORD *)(((unint64_t)v418 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v421 = (long long *)(((unint64_t)v419 + 11) & 0xFFFFFFFFFFFFFFF8);
            long long v422 = *v421;
            long long v423 = v421[1];
            long long v424 = v421[3];
            v420[2] = v421[2];
            v420[3] = v424;
            _OWORD *v420 = v422;
            v420[1] = v423;
            uint64_t v425 = (_OWORD *)(((unint64_t)v420 + 71) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v426 = (_OWORD *)(((unint64_t)v421 + 71) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v425 = *v426;
            unint64_t v427 = (void *)(((unint64_t)v425 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v428 = (void *)(((unint64_t)v426 + 23) & 0xFFFFFFFFFFFFFFF8);
            void *v427 = *v428;
            *(void *)(((unint64_t)v427 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v428 + 15) & 0xFFFFFFFFFFFFFFF8);
            break;
        }
        uint64_t v95 = v416;
        v74[v415] = v417;
        v74[v414] = 0;
      }
LABEL_628:
      v74[v95] = 2;
      break;
    case 3u:
LABEL_506:
      long long v605 = *(_OWORD *)v75;
      long long v606 = *((_OWORD *)v75 + 1);
      long long v607 = *((_OWORD *)v75 + 3);
      *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
      *((_OWORD *)v74 + 3) = v607;
      *(_OWORD *)unint64_t v74 = v605;
      *((_OWORD *)v74 + 1) = v606;
      v74[v95] = 3;
      break;
    case 4u:
      unsigned int v111 = v75[v79];
      unsigned int v112 = v111 - 6;
      if (v111 >= 6)
      {
        if (v79 <= 3) {
          uint64_t v113 = v79;
        }
        else {
          uint64_t v113 = 4;
        }
        switch(v113)
        {
          case 1:
            int v114 = *v75;
            goto LABEL_230;
          case 2:
            int v114 = *(unsigned __int16 *)v75;
            goto LABEL_230;
          case 3:
            int v114 = *(unsigned __int16 *)v75 | (v75[2] << 16);
            goto LABEL_230;
          case 4:
            int v114 = *(_DWORD *)v75;
LABEL_230:
            if (v79 < 4) {
              unsigned int v111 = (v114 | (v112 << (8 * v79))) + 6;
            }
            else {
              unsigned int v111 = v114 + 6;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v190 = v67;
      unint64_t v191 = v79 + 1;
      unint64_t v192 = v79;
      uint64_t v193 = v95;
      switch(v111)
      {
        case 1u:
          size_t __na = v76;
          uint64_t v206 = v71;
          uint64_t v207 = v72;
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, v75, v1108);
          long long v208 = (_DWORD *)((unint64_t)&v74[v190] & 0xFFFFFFFFFFFFFFFCLL);
          uint64_t v209 = (_DWORD *)((unint64_t)&v75[v190] & 0xFFFFFFFFFFFFFFFCLL);
          *long long v208 = *v209;
          uint64_t v210 = (_OWORD *)(((unint64_t)v208 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v211 = (long long *)(((unint64_t)v209 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v212 = *v211;
          long long v213 = v211[1];
          long long v214 = v211[3];
          v210[2] = v211[2];
          v210[3] = v214;
          _OWORD *v210 = v212;
          v210[1] = v213;
          unsigned int v215 = (void *)(((unint64_t)v210 + 71) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v216 = (void *)(((unint64_t)v211 + 71) & 0xFFFFFFFFFFFFFFF8);
          *unsigned int v215 = *v216;
          uint64_t v217 = (void *)(((unint64_t)v215 + 15) & 0xFFFFFFFFFFFFFFF8);
          int v218 = (void *)(((unint64_t)v216 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v217 = *v218;
          unint64_t v219 = ((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v220 = ((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v219 = *(void *)v220;
          *(unsigned char *)(v219 + 8) = *(unsigned char *)(v220 + 8);
          int v221 = (_OWORD *)(((unint64_t)v217 + 31) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v222 = (_OWORD *)(((unint64_t)v218 + 31) & 0xFFFFFFFFFFFFFFF8);
          *int v221 = *v222;
          unint64_t v223 = (_OWORD *)(((unint64_t)v221 + 23) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v224 = (_OWORD *)(((unint64_t)v222 + 23) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v223 = *v224;
          unint64_t v225 = (void *)(((unint64_t)v223 + v207) & v206);
          unint64_t v226 = (const void *)(((unint64_t)v224 + v207) & v206);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1102 + 48))(v226, 1, v1100))
          {
            memcpy(v225, v226, __na);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1102 + 32))(v225, v226, v1100);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1102 + 56))(v225, 0, 1, v1100);
          }
          long long v311 = (_OWORD *)(((unint64_t)v225 + v1104) & 0xFFFFFFFFFFFFFFF8);
          long long v312 = (_OWORD *)(((unint64_t)v226 + v1104) & 0xFFFFFFFFFFFFFFF8);
          _OWORD *v311 = *v312;
          unint64_t v313 = ((unint64_t)v312 + 23) & 0xFFFFFFFFFFFFFFF8;
          long long v314 = *(_OWORD *)v313;
          unint64_t v315 = ((unint64_t)v311 + 23) & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v315 + 16) = *(void *)(v313 + 16);
          *(_OWORD *)unint64_t v315 = v314;
          char v194 = 1;
          break;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
          char v227 = (_DWORD *)((unint64_t)&v74[v190] & 0xFFFFFFFFFFFFFFFCLL);
          long long v228 = (_DWORD *)((unint64_t)&v75[v190] & 0xFFFFFFFFFFFFFFFCLL);
          *char v227 = *v228;
          long long v229 = (_OWORD *)(((unint64_t)v227 + 11) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v230 = (long long *)(((unint64_t)v228 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v231 = *v230;
          long long v232 = v230[1];
          long long v233 = v230[3];
          v229[2] = v230[2];
          v229[3] = v233;
          *long long v229 = v231;
          v229[1] = v232;
          long long v234 = (_OWORD *)(((unint64_t)v229 + 71) & 0xFFFFFFFFFFFFFFF8);
          long long v235 = (_OWORD *)(((unint64_t)v230 + 71) & 0xFFFFFFFFFFFFFFF8);
          _OWORD *v234 = *v235;
          long long v236 = (void *)(((unint64_t)v234 + 23) & 0xFFFFFFFFFFFFFFF8);
          long long v237 = (void *)(((unint64_t)v235 + 23) & 0xFFFFFFFFFFFFFFF8);
          *long long v236 = *v237;
          unsigned int v238 = (void *)(((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFFFF8);
          size_t v239 = (void *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8);
          *unsigned int v238 = *v239;
          uint64_t v240 = (void *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
          int v241 = (void *)(((unint64_t)v239 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v240 = *v241;
          uint64_t v242 = (void *)(((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v243 = (void *)(((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v242 = *v243;
          int v244 = (void *)(((unint64_t)v242 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v245 = (void *)(((unint64_t)v243 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v244 = *v245;
          unint64_t v246 = ((unint64_t)v244 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v247 = ((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v246 = *(void *)v247;
          *(unsigned char *)(v246 + 8) = *(unsigned char *)(v247 + 8);
          char v194 = 2;
          break;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
          long long v248 = (_DWORD *)((unint64_t)&v74[v190] & 0xFFFFFFFFFFFFFFFCLL);
          long long v249 = (_DWORD *)((unint64_t)&v75[v190] & 0xFFFFFFFFFFFFFFFCLL);
          _DWORD *v248 = *v249;
          long long v250 = (_OWORD *)(((unint64_t)v248 + 11) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v251 = (long long *)(((unint64_t)v249 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v252 = *v251;
          long long v253 = v251[1];
          long long v254 = v251[3];
          v250[2] = v251[2];
          v250[3] = v254;
          _OWORD *v250 = v252;
          v250[1] = v253;
          unint64_t v255 = (_OWORD *)(((unint64_t)v250 + 71) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v256 = (_OWORD *)(((unint64_t)v251 + 71) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v255 = *v256;
          long long v257 = (void *)(((unint64_t)v255 + 23) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v258 = (void *)(((unint64_t)v256 + 23) & 0xFFFFFFFFFFFFFFF8);
          void *v257 = *v258;
          uint64_t v259 = (void *)(((unint64_t)v257 + 15) & 0xFFFFFFFFFFFFFFF8);
          long long v260 = (void *)(((unint64_t)v258 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v259 = *v260;
          *(void *)(((unint64_t)v259 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v260 + 15) & 0xFFFFFFFFFFFFFFF8);
          char v194 = 3;
          break;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
          long long v261 = (_DWORD *)((unint64_t)&v74[v190] & 0xFFFFFFFFFFFFFFFCLL);
          long long v262 = (_DWORD *)((unint64_t)&v75[v190] & 0xFFFFFFFFFFFFFFFCLL);
          _DWORD *v261 = *v262;
          uint64_t v263 = (_OWORD *)(((unint64_t)v261 + 11) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v264 = (long long *)(((unint64_t)v262 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v265 = *v264;
          long long v266 = v264[1];
          long long v267 = v264[3];
          v263[2] = v264[2];
          v263[3] = v267;
          *uint64_t v263 = v265;
          v263[1] = v266;
          long long v268 = (_OWORD *)(((unint64_t)v263 + 71) & 0xFFFFFFFFFFFFFFF8);
          char v269 = (_OWORD *)(((unint64_t)v264 + 71) & 0xFFFFFFFFFFFFFFF8);
          *long long v268 = *v269;
          long long v270 = (void *)(((unint64_t)v268 + 23) & 0xFFFFFFFFFFFFFFF8);
          long long v271 = (void *)(((unint64_t)v269 + 23) & 0xFFFFFFFFFFFFFFF8);
          *long long v270 = *v271;
          long long v272 = (void *)(((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v273 = (void *)(((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8);
          *long long v272 = *v273;
          *(void *)(((unint64_t)v272 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v273 + 15) & 0xFFFFFFFFFFFFFFF8);
          char v194 = 4;
          break;
        case 5u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
          long long v274 = (_DWORD *)((unint64_t)&v74[v190] & 0xFFFFFFFFFFFFFFFCLL);
          long long v275 = (_DWORD *)((unint64_t)&v75[v190] & 0xFFFFFFFFFFFFFFFCLL);
          *long long v274 = *v275;
          long long v276 = (_OWORD *)(((unint64_t)v274 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v277 = (long long *)(((unint64_t)v275 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v278 = *v277;
          long long v279 = v277[1];
          long long v280 = v277[3];
          v276[2] = v277[2];
          v276[3] = v280;
          *long long v276 = v278;
          v276[1] = v279;
          uint64_t v281 = (_OWORD *)(((unint64_t)v276 + 71) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v282 = (_OWORD *)(((unint64_t)v277 + 71) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v281 = *v282;
          uint64_t v283 = (void *)(((unint64_t)v281 + 23) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v284 = (void *)(((unint64_t)v282 + 23) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v283 = *v284;
          *(void *)(((unint64_t)v283 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v284 + 15) & 0xFFFFFFFFFFFFFFF8);
          char v194 = 5;
          break;
        default:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t, uint64_t))(v1110 + 32))(v74, v75, v1108, v71);
          char v194 = 0;
          uint64_t v195 = (_DWORD *)((unint64_t)&v74[v190] & 0xFFFFFFFFFFFFFFFCLL);
          unint64_t v196 = (_DWORD *)((unint64_t)&v75[v190] & 0xFFFFFFFFFFFFFFFCLL);
          *uint64_t v195 = *v196;
          unint64_t v197 = (_OWORD *)(((unint64_t)v195 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v198 = (long long *)(((unint64_t)v196 + 11) & 0xFFFFFFFFFFFFFFF8);
          long long v199 = *v198;
          long long v200 = v198[1];
          long long v201 = v198[3];
          v197[2] = v198[2];
          v197[3] = v201;
          *unint64_t v197 = v199;
          v197[1] = v200;
          long long v202 = (_OWORD *)(((unint64_t)v197 + 71) & 0xFFFFFFFFFFFFFFF8);
          long long v203 = (_OWORD *)(((unint64_t)v198 + 71) & 0xFFFFFFFFFFFFFFF8);
          *long long v202 = *v203;
          long long v204 = (void *)(((unint64_t)v202 + 23) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v205 = (void *)(((unint64_t)v203 + 23) & 0xFFFFFFFFFFFFFFF8);
          *long long v204 = *v205;
          *(void *)(((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFFFF8);
          break;
      }
      uint64_t v95 = v193;
      v74[v192] = v194;
      unsigned int v316 = (void *)((((unint64_t)v74 | 7) + v191) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v317 = ((unint64_t)v75 | 7) + v191;
LABEL_585:
      v789 = (void *)(v317 & 0xFFFFFFFFFFFFFFF8);
      void *v316 = *v789;
      *(_OWORD *)(((unint64_t)v316 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v789 + 15) & 0xFFFFFFFFFFFFFFF8);
      v74[v95] = 4;
      break;
    case 5u:
      uint64_t v115 = v95;
      if (v84 < 0x7FFFFFFF)
      {
        unint64_t v160 = *(void *)(((((((unint64_t)&v75[v67] & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 8);
        if (v160 >= 0xFFFFFFFF) {
          LODWORD(v160) = -1;
        }
        int v117 = v160 + 1;
      }
      else
      {
        uint64_t v116 = v67;
        int v117 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v1110 + 48))(v75, v84, v1108, v71);
        uint64_t v67 = v116;
      }
      if (v117)
      {
LABEL_532:
        memcpy(v74, v75, v85);
      }
      else
      {
        uint64_t v161 = v67;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v1110 + 32))(v74, v75, v1108);
LABEL_537:
        id v632 = (_DWORD *)((unint64_t)&v74[v161] & 0xFFFFFFFFFFFFFFFCLL);
        unint64_t v633 = (_DWORD *)((unint64_t)&v75[v161] & 0xFFFFFFFFFFFFFFFCLL);
        *id v632 = *v633;
        uint64_t v634 = (_OWORD *)(((unint64_t)v632 + 11) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v635 = (long long *)(((unint64_t)v633 + 11) & 0xFFFFFFFFFFFFFFF8);
        long long v636 = *v635;
        long long v637 = v635[1];
        long long v638 = v635[3];
        v634[2] = v635[2];
        v634[3] = v638;
        *uint64_t v634 = v636;
        v634[1] = v637;
        uint64_t v639 = (_OWORD *)(((unint64_t)v634 + 71) & 0xFFFFFFFFFFFFFFF8);
        v640 = (_OWORD *)(((unint64_t)v635 + 71) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v639 = *v640;
        v641 = (void *)(((unint64_t)v639 + 23) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v642 = (void *)(((unint64_t)v640 + 23) & 0xFFFFFFFFFFFFFFF8);
        void *v641 = *v642;
        unint64_t v643 = (void *)(((unint64_t)v641 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v644 = (void *)(((unint64_t)v642 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v643 = *v644;
        unint64_t v645 = (void *)(((unint64_t)v643 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v646 = (void *)(((unint64_t)v644 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v645 = *v646;
        v647 = (void *)(((unint64_t)v645 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v648 = (void *)(((unint64_t)v646 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v647 = *v648;
        unint64_t v649 = (void *)(((unint64_t)v647 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v650 = (void *)(((unint64_t)v648 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v649 = *v650;
        unint64_t v651 = ((unint64_t)v649 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v652 = ((unint64_t)v650 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v651 = *(void *)v652;
        *(unsigned char *)(v651 + 8) = *(unsigned char *)(v652 + 8);
        *(void *)(((unint64_t)v74 | 7) + v82) = *(void *)(((unint64_t)v75 | 7) + v82);
      }
      uint64_t v95 = v115;
      v74[v115] = 5;
      break;
    case 6u:
LABEL_507:
      long long v608 = *(_OWORD *)v75;
      long long v609 = *((_OWORD *)v75 + 1);
      long long v610 = *((_OWORD *)v75 + 2);
      *((void *)v74 + 6) = *((void *)v75 + 6);
      *((_OWORD *)v74 + 1) = v609;
      *((_OWORD *)v74 + 2) = v610;
      *(_OWORD *)unint64_t v74 = v608;
      v74[v95] = 6;
      break;
    case 7u:
LABEL_508:
      *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
      long long v611 = *((_OWORD *)v75 + 1);
      long long v612 = *((_OWORD *)v75 + 2);
      long long v613 = *((_OWORD *)v75 + 3);
      *((void *)v74 + 8) = *((void *)v75 + 8);
      *((_OWORD *)v74 + 2) = v612;
      *((_OWORD *)v74 + 3) = v613;
      *((_OWORD *)v74 + 1) = v611;
      v74[v95] = 7;
      break;
    case 8u:
      uint64_t v1093 = *(void *)(v61 - 8);
      if (v1106 < 0)
      {
        uint64_t v118 = ~v63;
        unint64_t v166 = (unint64_t)&v75[v87] & v86;
        uint64_t v119 = v61;
        uint64_t v167 = v95;
        unint64_t v168 = v92;
        int v121 = (*(uint64_t (**)(unint64_t))(v62 + 48))(v166);
        unint64_t v92 = v168;
        uint64_t v95 = v167;
      }
      else
      {
        uint64_t v118 = ~v63;
        uint64_t v119 = v61;
        unint64_t v120 = *((void *)v75 + 1);
        if (v120 >= 0xFFFFFFFF) {
          LODWORD(v120) = -1;
        }
        int v121 = v120 + 1;
      }
      uint64_t v169 = v95;
      if (v121)
      {
LABEL_535:
        memcpy(v74, v75, v93);
      }
      else
      {
        *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
        unint64_t v170 = (unint64_t)&v74[v87] & v118;
        unint64_t v171 = (unint64_t)&v75[v87] & v118;
        __src = v75;
        uint64_t v172 = v1093;
LABEL_540:
        uint64_t v653 = *(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v172 + 32);
        unint64_t v1074 = v92;
        v653(v170, v171, v119, v71);
        unint64_t v654 = (v89 + v170) & v118;
        unint64_t v655 = (v89 + v171) & v118;
        ((void (*)(unint64_t, unint64_t, uint64_t))v653)(v654, v655, v119);
        size_t v75 = __src;
        uint64_t v656 = (_OWORD *)((v90 + v654) & 0xFFFFFFFFFFFFFFF8);
        char v657 = (_OWORD *)((v90 + v655) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v656 = *v657;
        unint64_t v658 = ((unint64_t)v656 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v659 = ((unint64_t)v657 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v658 = *(_OWORD *)v659;
        *(unsigned char *)(v658 + 16) = *(unsigned char *)(v659 + 16);
        uint64_t v660 = (_OWORD *)(((unint64_t)v74 | 7) + v1074);
        uint64_t v661 = (_OWORD *)(((unint64_t)__src | 7) + v1074);
        *uint64_t v660 = *v661;
        *(_OWORD *)(((unint64_t)v660 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v661 + 23) & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v95 = v169;
      v74[v169] = 8;
      break;
    case 9u:
LABEL_509:
      long long v614 = *(_OWORD *)v75;
      long long v615 = *((_OWORD *)v75 + 1);
      long long v616 = *((_OWORD *)v75 + 3);
      *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
      *((_OWORD *)v74 + 3) = v616;
      *(_OWORD *)unint64_t v74 = v614;
      *((_OWORD *)v74 + 1) = v615;
      v74[v95] = 9;
      break;
    default:
      goto LABEL_428;
  }
LABEL_430:
  unint64_t v539 = (unint64_t)&v74[v95 + 1];
  long long v540 = &v75[v95 + 1];
  *(unsigned char *)unint64_t v539 = *v540;
  *(unsigned char *)(v539 + 1) = v540[1];
  v539 += 9;
  uint64_t v541 = (void *)((unint64_t)(v540 + 9) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v539 & 0xFFFFFFFFFFFFFFF8) = *v541;
  unint64_t v542 = (v539 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v542 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v543 = (void *)(((unint64_t)v541 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v542 = *v543;
  swift_release();
  unint64_t v544 = (_OWORD *)((v542 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v545 = (_OWORD *)(((unint64_t)v543 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v544 = *v545;
  swift_release();
  unint64_t v546 = ((unint64_t)v544 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v547 = ((unint64_t)v545 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v546 = *(void *)v547;
  swift_release();
  *(void *)(v546 + 8) = *(void *)(v547 + 8);
  swift_release();
  *(unsigned char *)(v546 + 16) = *(unsigned char *)(v547 + 16);
  unint64_t v548 = ((unint64_t)v544 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v549 = ((unint64_t)v545 + 47) & 0xFFFFFFFFFFFFFFF8;
  char v550 = *(unsigned char *)(v549 + 16);
  uint64_t v551 = *(void *)v548;
  uint64_t v552 = *(void *)(v548 + 8);
  char v553 = *(unsigned char *)(v548 + 16);
  *(_OWORD *)unint64_t v548 = *(_OWORD *)v549;
  *(unsigned char *)(v548 + 16) = v550;
  sub_1002B52E0(v551, v552, v553, (uint64_t (*)(void))sub_10000F478);
  unint64_t v554 = ((unint64_t)v544 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v555 = ((unint64_t)v545 + 71) & 0xFFFFFFFFFFFFFFF8;
  char v556 = *(unsigned char *)(v555 + 16);
  uint64_t v557 = *(void *)v554;
  uint64_t v558 = *(void *)(v554 + 8);
  char v559 = *(unsigned char *)(v554 + 16);
  *(_OWORD *)unint64_t v554 = *(_OWORD *)v555;
  *(unsigned char *)(v554 + 16) = v556;
  sub_1002B52E0(v557, v558, v559, (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v560 = type metadata accessor for ColorScheme();
  uint64_t v561 = *(void *)(v560 - 8);
  uint64_t v562 = *(_DWORD *)(v561 + 80) & 0xF8;
  uint64_t v563 = v562 + 24;
  unint64_t v564 = v562 + 24 + v554;
  unint64_t v565 = ~v562 & 0xFFFFFFFFFFFFFFF8;
  long long v566 = (unsigned __int8 *)(v564 & v565);
  long long v567 = (unsigned __int8 *)((v563 + v555) & v565);
  if (*(void *)(v561 + 64) <= 8uLL) {
    uint64_t v568 = 8;
  }
  else {
    uint64_t v568 = *(void *)(*(void *)(v560 - 8) + 64);
  }
  if (v566 != v567)
  {
    uint64_t v569 = v560;
    unsigned int v570 = v566[v568];
    unsigned int v571 = v570 - 2;
    if (v570 >= 2)
    {
      if (v568 <= 3) {
        uint64_t v572 = v568;
      }
      else {
        uint64_t v572 = 4;
      }
      switch(v572)
      {
        case 1:
          int v573 = *v566;
          if (v568 >= 4) {
            goto LABEL_448;
          }
          goto LABEL_442;
        case 2:
          int v573 = *(unsigned __int16 *)v566;
          if (v568 < 4) {
            goto LABEL_442;
          }
          goto LABEL_448;
        case 3:
          int v573 = *(unsigned __int16 *)(v564 & v565) | (*(unsigned __int8 *)((v564 & v565) + 2) << 16);
          if (v568 < 4) {
            goto LABEL_442;
          }
          goto LABEL_448;
        case 4:
          int v573 = *(_DWORD *)v566;
          if (v568 < 4)
          {
LABEL_442:
            unsigned int v570 = (v573 | (v571 << (8 * v568))) + 2;
            break;
          }
LABEL_448:
          if (v573 != -1) {
            goto LABEL_449;
          }
          goto LABEL_444;
        default:
          break;
      }
    }
    if (v570 == 1) {
LABEL_444:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v561 + 8))(v566, v560);
    else {
LABEL_449:
    }
      swift_release();
    unsigned int v574 = v567[v568];
    unsigned int v575 = v574 - 2;
    if (v574 >= 2)
    {
      if (v568 <= 3) {
        uint64_t v576 = v568;
      }
      else {
        uint64_t v576 = 4;
      }
      switch(v576)
      {
        case 1:
          int v577 = *v567;
          if (v568 >= 4) {
            goto LABEL_464;
          }
          goto LABEL_458;
        case 2:
          int v577 = *(unsigned __int16 *)v567;
          if (v568 < 4) {
            goto LABEL_458;
          }
          goto LABEL_464;
        case 3:
          int v577 = *(unsigned __int16 *)v567 | (v567[2] << 16);
          if (v568 < 4) {
            goto LABEL_458;
          }
          goto LABEL_464;
        case 4:
          int v577 = *(_DWORD *)v567;
          if (v568 < 4)
          {
LABEL_458:
            unsigned int v574 = (v577 | (v575 << (8 * v568))) + 2;
            break;
          }
LABEL_464:
          if (v577 != -1) {
            goto LABEL_465;
          }
          goto LABEL_460;
        default:
          break;
      }
    }
    if (v574 == 1)
    {
LABEL_460:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v561 + 32))(v566, v567, v569);
      char v578 = 1;
    }
    else
    {
LABEL_465:
      char v578 = 0;
      *(void *)long long v566 = *(void *)v567;
    }
    v566[v568] = v578;
  }
  uint64_t v579 = type metadata accessor for ContentSizeCategory();
  uint64_t v580 = *(void *)(v579 - 8);
  uint64_t v581 = *(_DWORD *)(v580 + 80) & 0xF8 | 7;
  uint64_t v582 = v568 + v581 + 1;
  long long v583 = (unsigned __int8 *)((unint64_t)&v566[v582] & ~v581);
  char v584 = (unsigned __int8 *)((unint64_t)&v567[v582] & ~v581);
  if (*(void *)(v580 + 64) <= 8uLL) {
    uint64_t v585 = 8;
  }
  else {
    uint64_t v585 = *(void *)(v580 + 64);
  }
  if (v583 != v584)
  {
    uint64_t v586 = v579;
    unsigned int v587 = v583[v585];
    unsigned int v588 = v587 - 2;
    if (v587 >= 2)
    {
      if (v585 <= 3) {
        uint64_t v589 = v585;
      }
      else {
        uint64_t v589 = 4;
      }
      switch(v589)
      {
        case 1:
          int v590 = *v583;
          if (v585 >= 4) {
            goto LABEL_485;
          }
          goto LABEL_479;
        case 2:
          int v590 = *(unsigned __int16 *)v583;
          if (v585 < 4) {
            goto LABEL_479;
          }
          goto LABEL_485;
        case 3:
          int v590 = *(unsigned __int16 *)v583 | (v583[2] << 16);
          if (v585 < 4) {
            goto LABEL_479;
          }
          goto LABEL_485;
        case 4:
          int v590 = *(_DWORD *)v583;
          if (v585 < 4)
          {
LABEL_479:
            unsigned int v587 = (v590 | (v588 << (8 * v585))) + 2;
            break;
          }
LABEL_485:
          if (v590 != -1) {
            goto LABEL_486;
          }
          goto LABEL_481;
        default:
          break;
      }
    }
    if (v587 == 1) {
LABEL_481:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v580 + 8))(v583, v579);
    else {
LABEL_486:
    }
      swift_release();
    unsigned int v591 = v584[v585];
    unsigned int v592 = v591 - 2;
    if (v591 >= 2)
    {
      if (v585 <= 3) {
        uint64_t v593 = v585;
      }
      else {
        uint64_t v593 = 4;
      }
      switch(v593)
      {
        case 1:
          int v594 = *v584;
          if (v585 >= 4) {
            goto LABEL_501;
          }
          goto LABEL_495;
        case 2:
          int v594 = *(unsigned __int16 *)v584;
          if (v585 < 4) {
            goto LABEL_495;
          }
          goto LABEL_501;
        case 3:
          int v594 = *(unsigned __int16 *)v584 | (v584[2] << 16);
          if (v585 < 4) {
            goto LABEL_495;
          }
          goto LABEL_501;
        case 4:
          int v594 = *(_DWORD *)v584;
          if (v585 < 4)
          {
LABEL_495:
            unsigned int v591 = (v594 | (v592 << (8 * v585))) + 2;
            break;
          }
LABEL_501:
          if (v594 != -1) {
            goto LABEL_502;
          }
          goto LABEL_497;
        default:
          break;
      }
    }
    if (v591 == 1)
    {
LABEL_497:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v580 + 32))(v583, v584, v586);
      char v595 = 1;
    }
    else
    {
LABEL_502:
      char v595 = 0;
      *(void *)long long v583 = *(void *)v584;
    }
    v583[v585] = v595;
  }
  uint64_t v596 = v585 + 1;
  uint64_t v597 = &v583[v585 + 1];
  uint64_t v598 = &v584[v596];
  unint64_t v599 = (unint64_t)(v597 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v600 = (unint64_t)(v598 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v601 = *(void *)v600;
  LOBYTE(v600) = *(unsigned char *)(v600 + 8);
  *(void *)unint64_t v599 = v601;
  *(unsigned char *)(v599 + 8) = v600;
  swift_release();
  unint64_t v602 = (unint64_t)(v597 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v603 = (unint64_t)(v598 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v602 = *(unsigned char *)v603;
  *(void *)(v602 + 8) = *(void *)(v603 + 8);
  swift_release();
  return v1111;
}

uint64_t sub_1002DC92C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v62 = *(void *)(type metadata accessor for URL() - 8);
  int v60 = *(_DWORD *)(v62 + 84);
  if (v60) {
    unsigned int v4 = v60 - 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 <= 0xFE) {
    int v5 = 254;
  }
  else {
    int v5 = v4;
  }
  unsigned int v53 = v4;
  int v54 = v5;
  if (v4 <= 0x7FFFFFFF) {
    unsigned int v4 = 0x7FFFFFFF;
  }
  uint64_t v52 = *(void *)(a3 + 16);
  uint64_t v61 = *(void *)(v52 - 8);
  uint64_t v6 = *(unsigned int *)(v61 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  unsigned int v56 = v7;
  unsigned int v57 = v4;
  if (v7 <= v4) {
    unsigned int v7 = v4;
  }
  unsigned int v58 = v7;
  uint64_t v55 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v8 = (((((*(void *)(v55 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v9 + 8;
  unint64_t v11 = (((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(type metadata accessor for VisualUnderstanding.ImageRegion() - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  if (*(_DWORD *)(v12 + 84)) {
    uint64_t v14 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v12 + 64) + 1;
  }
  unint64_t v15 = ((((v14 + ((v13 + v11 + 16) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v15 <= v10) {
    unint64_t v15 = v9 + 8;
  }
  unint64_t v16 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = v16 + 8;
  unint64_t v18 = (((v16 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > v15) {
    unint64_t v15 = ((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  }
  if (v17 > v15) {
    unint64_t v15 = v17;
  }
  if (v10 > v15) {
    unint64_t v15 = v9 + 8;
  }
  unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 0xFFFFFFFFFFFFFFF8) + 65 <= v15 + 1) {
    unint64_t v20 = v15 + 1;
  }
  else {
    unint64_t v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  unint64_t v21 = ((v18 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v22 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = ((((((*(void *)(v22 + 64) + ((*(void *)(v22 + 64) + v23 + ((v23 + 16) & ~v23)) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v25 = ((v19 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v20 + 1 > v25) {
    unint64_t v25 = v20 + 1;
  }
  if (v25 <= v21) {
    unint64_t v25 = v21;
  }
  if (v25 > v24) {
    unint64_t v24 = v25;
  }
  if (v24 <= 0x48) {
    uint64_t v26 = 72;
  }
  else {
    uint64_t v26 = v24;
  }
  uint64_t v27 = *(void *)(type metadata accessor for ColorScheme() - 8);
  if (*(void *)(v27 + 64) <= 8uLL) {
    uint64_t v28 = 8;
  }
  else {
    uint64_t v28 = *(void *)(v27 + 64);
  }
  uint64_t v29 = *(void *)(type metadata accessor for ContentSizeCategory() - 8);
  if (*(void *)(v29 + 64) <= 8uLL) {
    uint64_t v30 = 8;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 64);
  }
  uint64_t v31 = *(unsigned __int8 *)(v62 + 80);
  if (v60) {
    uint64_t v32 = *(void *)(v62 + 64);
  }
  else {
    uint64_t v32 = *(void *)(v62 + 64) + 1;
  }
  uint64_t v33 = *(unsigned __int8 *)(v61 + 80);
  if (v6) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = 2;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v35 = ((v32 + v31 + ((v31 + ((((v31 + 30) & ~v31) + v32) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v31) + 3) & ~v31) + v32;
  unint64_t v36 = ((((v35 + (((v31 | 7) + 6) & ~(v31 | 7))) & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8) + v33 + 16;
  if (v58 < a2)
  {
    uint64_t v37 = v23 | v13 | *(_DWORD *)(v55 + 80) & 0xF8 | 7;
    unint64_t v38 = (((((((v26 + ((v34 + *(void *)(v61 + 64) + v37 + (v36 & ~v33)) & ~v37) + 10) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 71) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = *(_DWORD *)(v27 + 80) & 0xF8 | 7;
    uint64_t v40 = *(_DWORD *)(v29 + 80) & 0xF8 | 7;
    unint64_t v41 = ((v30 + ((v28 + v40 + ((v39 + v38 + 17) & ~v39) + 1) & ~v40) + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v42 = v41 & 0xFFFFFFF8;
    if ((v41 & 0xFFFFFFF8) != 0) {
      unsigned int v43 = 2;
    }
    else {
      unsigned int v43 = a2 - v58 + 1;
    }
    if (v43 >= 0x10000) {
      LODWORD(v44) = 4;
    }
    else {
      LODWORD(v44) = 2;
    }
    if (v43 < 0x100) {
      LODWORD(v44) = 1;
    }
    if (v43 >= 2) {
      uint64_t v44 = v44;
    }
    else {
      uint64_t v44 = 0;
    }
    switch(v44)
    {
      case 1:
        int v45 = *((unsigned __int8 *)a1 + v41);
        if (!v45) {
          break;
        }
        goto LABEL_65;
      case 2:
        int v45 = *(unsigned __int16 *)((char *)a1 + v41);
        if (v45) {
          goto LABEL_65;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1002DCFB8);
      case 4:
        int v45 = *(_DWORD *)((char *)a1 + v41);
        if (!v45) {
          break;
        }
LABEL_65:
        int v46 = v45 - 1;
        if (v42)
        {
          int v46 = 0;
          LODWORD(v42) = *a1;
        }
        return v58 + (v42 | v46) + 1;
      default:
        break;
    }
  }
  if (v57 < v56)
  {
    if (v6 < 2) {
      return 0;
    }
    unsigned int v50 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v61 + 48))(((unint64_t)a1 + v36) & ~v33, v6, v52);
    goto LABEL_82;
  }
  uint64_t v48 = (unsigned __int8 *)(((unint64_t)a1 + (v31 | 7) + 6) & ~(v31 | 7));
  if (v54 == v57)
  {
    if (v53 > 0xFE)
    {
      unsigned int v50 = (*(uint64_t (**)(unint64_t))(v62 + 48))((v31
                                                                    + ((((unint64_t)(v48 + 9) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 19) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 6) & ~v31);
LABEL_82:
      if (v50 >= 2) {
        return v50 - 1;
      }
      else {
        return 0;
      }
    }
    unsigned int v49 = *v48;
    if (v49 >= 2) {
      return v49 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v51 = *(void *)(((unint64_t)&v48[v35] & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v51 >= 0xFFFFFFFF) {
      LODWORD(v51) = -1;
    }
    return (v51 + 1);
  }
}

void sub_1002DCFCC(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v67 = *(void *)(type metadata accessor for URL() - 8);
  int v66 = *(_DWORD *)(v67 + 84);
  if (v66) {
    unsigned int v5 = v66 - 1;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v5 <= 0xFE) {
    int v6 = 254;
  }
  else {
    int v6 = v5;
  }
  unsigned int v61 = v5;
  int v62 = v6;
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v5 = 0x7FFFFFFF;
  }
  uint64_t v63 = *(void *)(a4 + 16);
  uint64_t v69 = *(void *)(v63 - 8);
  uint64_t v7 = *(unsigned int *)(v69 + 84);
  unsigned int v8 = v7 - 1;
  if (!v7) {
    unsigned int v8 = 0;
  }
  unsigned int v64 = v8;
  unsigned int v65 = v5;
  if (v8 <= v5) {
    unsigned int v8 = v5;
  }
  unsigned int v70 = v8;
  uint64_t v68 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (((((*(void *)(v68 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v10 + 8;
  unint64_t v12 = (((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(type metadata accessor for VisualUnderstanding.ImageRegion() - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v15 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v13 + 64) + 1;
  }
  unint64_t v16 = ((((v15 + ((v14 + v12 + 16) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v16 <= v11) {
    unint64_t v16 = v10 + 8;
  }
  unint64_t v17 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = v17 + 8;
  unint64_t v19 = (((v17 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > v16) {
    unint64_t v16 = ((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  }
  if (v18 > v16) {
    unint64_t v16 = v18;
  }
  if (v11 > v16) {
    unint64_t v16 = v10 + 8;
  }
  unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFF8;
  if ((v16 & 0xFFFFFFFFFFFFFFF8) + 65 <= v16 + 1) {
    unint64_t v21 = v16 + 1;
  }
  else {
    unint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 65;
  }
  unint64_t v22 = ((v19 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v23 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  unint64_t v25 = ((((((*(void *)(v23 + 64) + ((*(void *)(v23 + 64) + v24 + ((v24 + 16) & ~v24)) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v26 = ((v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v21 + 1 > v26) {
    unint64_t v26 = v21 + 1;
  }
  if (v26 <= v22) {
    unint64_t v26 = v22;
  }
  if (v26 > v25) {
    unint64_t v25 = v26;
  }
  if (v25 <= 0x48) {
    uint64_t v27 = 72;
  }
  else {
    uint64_t v27 = v25;
  }
  uint64_t v28 = *(void *)(type metadata accessor for ColorScheme() - 8);
  if (*(void *)(v28 + 64) <= 8uLL) {
    uint64_t v29 = 8;
  }
  else {
    uint64_t v29 = *(void *)(v28 + 64);
  }
  unsigned int v30 = 0;
  uint64_t v31 = *(void *)(type metadata accessor for ContentSizeCategory() - 8);
  if (*(void *)(v31 + 64) <= 8uLL) {
    uint64_t v32 = 8;
  }
  else {
    uint64_t v32 = *(void *)(v31 + 64);
  }
  if (v66) {
    size_t v33 = *(void *)(v67 + 64);
  }
  else {
    size_t v33 = *(void *)(v67 + 64) + 1;
  }
  uint64_t v34 = *(unsigned __int8 *)(v67 + 80);
  size_t v35 = ((v33 + v34 + ((v34 + ((((v34 + 30) & ~v34) + v33) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v34) + 3) & ~v34) + v33;
  size_t v36 = v35 + (((v34 | 7) + 6) & ~(v34 | 7));
  uint64_t v37 = *(unsigned __int8 *)(v69 + 80);
  unint64_t v38 = (((v36 & 0xFFFFFFFFFFFFFFF8) + 38) & 0xFFFFFFFFFFFFFFF8) + v37 + 16;
  size_t v39 = *(void *)(v69 + 64);
  if (!v7) {
    ++v39;
  }
  uint64_t v40 = v24 | v14 | *(_DWORD *)(v68 + 80) & 0xF8 | 7;
  uint64_t v41 = *(_DWORD *)(v28 + 80) & 0xF8 | 7;
  uint64_t v42 = *(_DWORD *)(v31 + 80) & 0xF8 | 7;
  size_t v43 = ((v32
        + ((v29
          + v42
          + ((v41
            + ((((((((v27 + ((v39 + v40 + (v38 & ~v37) + 1) & ~v40) + 10) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 71) & 0xFFFFFFFFFFFFFFF8)
            + 17) & ~v41)
          + 1) & ~v42)
        + 24) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v70 < a3)
  {
    if (((v32
         + ((v29
           + v42
           + ((v41
             + ((((((((v27
                     + ((v39 + v40 + (v38 & ~v37) + 1) & ~v40)
                     + 10) & 0xFFFFFFF8)
                   + 15) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 71) & 0xFFFFFFF8)
             + 17) & ~v41)
           + 1) & ~v42)
         + 24) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v44 = a3 - v70 + 1;
    else {
      unsigned int v44 = 2;
    }
    if (v44 >= 0x10000) {
      int v45 = 4;
    }
    else {
      int v45 = 2;
    }
    if (v44 < 0x100) {
      int v45 = 1;
    }
    if (v44 >= 2) {
      unsigned int v30 = v45;
    }
    else {
      unsigned int v30 = 0;
    }
  }
  if (a2 > v70)
  {
    if (v43) {
      int v46 = 1;
    }
    else {
      int v46 = a2 - v70;
    }
    if (v43)
    {
      bzero(a1, v43);
      *a1 = ~v70 + a2;
    }
    switch(v30)
    {
      case 1u:
        *((unsigned char *)a1 + v43) = v46;
        return;
      case 2u:
        *(_WORD *)((char *)a1 + v43) = v46;
        return;
      case 3u:
        goto LABEL_115;
      case 4u:
        *(_DWORD *)((char *)a1 + v43) = v46;
        return;
      default:
        return;
    }
  }
  uint64_t v47 = ~v37;
  uint64_t v48 = v30;
  unsigned int v49 = a1;
  switch(v48)
  {
    case 1:
      *((unsigned char *)a1 + v43) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_74;
    case 2:
      *(_WORD *)((char *)a1 + v43) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_74;
    case 3:
LABEL_115:
      __break(1u);
      JUMPOUT(0x1002DD814);
    case 4:
      *(_DWORD *)((char *)a1 + v43) = 0;
      goto LABEL_73;
    default:
LABEL_73:
      if (a2)
      {
LABEL_74:
        if (v65 >= v64)
        {
          if (v65 >= a2)
          {
            uint64_t v55 = (unsigned char *)(((unint64_t)a1 + (v34 | 7) + 6) & ~(v34 | 7));
            if (v62 == v65)
            {
              if (v61 > 0xFE)
              {
                unint64_t v57 = v34 + ((((unint64_t)(v55 + 9) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 6;
                unsigned int v49 = (unsigned char *)(v57 & ~v34);
                if (v61 >= a2)
                {
                  int v60 = *(void (**)(unint64_t, void))(v67 + 56);
                  v60(v57 & ~v34, a2 + 1);
                }
                else
                {
                  if (v33 <= 3) {
                    int v58 = ~(-1 << (8 * v33));
                  }
                  else {
                    int v58 = -1;
                  }
                  if (v33)
                  {
                    int v51 = v58 & (~v61 + a2);
                    if (v33 <= 3) {
                      int v59 = v33;
                    }
                    else {
                      int v59 = 4;
                    }
                    bzero(v49, v33);
                    switch(v59)
                    {
                      case 2:
LABEL_108:
                        *(_WORD *)unsigned int v49 = v51;
                        break;
                      case 3:
LABEL_110:
                        *(_WORD *)unsigned int v49 = v51;
                        v49[2] = BYTE2(v51);
                        break;
                      case 4:
                        goto LABEL_88;
                      default:
LABEL_84:
                        *unsigned int v49 = v51;
                        break;
                    }
                  }
                }
              }
              else
              {
                *uint64_t v55 = a2 + 1;
              }
            }
            else
            {
              unint64_t v56 = (unint64_t)&v55[v35] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)(v56 + 8) = a2 ^ 0x80000000;
                *(void *)(v56 + 16) = 0;
              }
              else
              {
                *(void *)(v56 + 16) = a2 - 1;
              }
            }
          }
          else
          {
            int v53 = ((v36 & 0xFFFFFFF8) + 38) & 0xFFFFFFF8;
            if (v53 != -16)
            {
              int v51 = ~v65 + a2;
              bzero(a1, (v53 + 16));
LABEL_88:
              *(_DWORD *)unsigned int v49 = v51;
            }
          }
        }
        else
        {
          unsigned int v49 = (unsigned char *)(((unint64_t)a1 + v38) & v47);
          if (v64 >= a2)
          {
            int v54 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v69 + 56);
            v54(v49, a2 + 1, v7, v63);
          }
          else
          {
            if (v39 <= 3) {
              int v50 = ~(-1 << (8 * v39));
            }
            else {
              int v50 = -1;
            }
            if (v39)
            {
              int v51 = v50 & (~v64 + a2);
              if (v39 <= 3) {
                int v52 = v39;
              }
              else {
                int v52 = 4;
              }
              bzero(v49, v39);
              switch(v52)
              {
                case 2:
                  goto LABEL_108;
                case 3:
                  goto LABEL_110;
                case 4:
                  goto LABEL_88;
                default:
                  goto LABEL_84;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PinContainer()
{
  return sub_1000684BC();
}

void sub_1002DD874(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1002DD8D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002DD924@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t (*a6)(uint64_t)@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)a7 = 0x10000;
  uint64_t v13 = (int *)sub_10000F214(&qword_100527B78);
  uint64_t v14 = (uint64_t *)(a7 + v13[18]);
  *uint64_t v14 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a7 + v13[19];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v15 = v21;
  *(void *)(v15 + 8) = v22;
  uint64_t v16 = a7 + v13[20];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v16 = v21;
  *(void *)(v16 + 8) = v22;
  uint64_t v17 = AccessibilityFocusState.init<>()();
  *(unsigned char *)(a7 + 3) = a1;
  *(unsigned char *)a7 = a2;
  *(unsigned char *)(a7 + 1) = a3;
  *(unsigned char *)(a7 + 2) = a4;
  uint64_t v18 = a5(v17);
  return a6(v18);
}

uint64_t sub_1002DDA74()
{
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_1002DDACC()
{
  sub_10000F214(&qword_100519660);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t sub_1002DDB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v50 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = sub_10000F214(&qword_100527AE8);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000F214(&qword_100527AF0);
  __chkstk_darwin(v46);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_100527AF8);
  __chkstk_darwin(v47);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000F214(&qword_100527B00);
  __chkstk_darwin(v49);
  uint64_t v48 = (uint64_t)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v51 = *(void *)(a1 + 32);
  sub_1002DDFC4((uint64_t)v12);
  uint64_t v44 = static Animation.default.getter();
  uint64_t v45 = v3;
  uint64_t v19 = v3 + *(int *)(a1 + 44);
  uint64_t v20 = v7;
  char v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v22 = v6;
  v21(v9, v19, v6);
  uint64_t v23 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v22);
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = sub_10004E660(v5, v18, v51);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v5);
  }
  sub_10000FB74((uint64_t)v12, (uint64_t)v14, &qword_100527AE8);
  unint64_t v25 = (uint64_t *)&v14[*(int *)(v46 + 36)];
  uint64_t *v25 = v44;
  v25[1] = v24;
  sub_10000FBD8((uint64_t)v12, &qword_100527AE8);
  uint64_t v26 = static Animation.default.getter();
  uint64_t v27 = v45;
  uint64_t v28 = *(void *)(v45 + *(int *)(a1 + 64));
  sub_10000FB74((uint64_t)v14, (uint64_t)v16, &qword_100527AF0);
  uint64_t v29 = (uint64_t *)&v16[*(int *)(v47 + 36)];
  *uint64_t v29 = v26;
  v29[1] = v28;
  swift_bridgeObjectRetain();
  sub_10000FBD8((uint64_t)v14, &qword_100527AF0);
  char v30 = static Edge.Set.horizontal.getter();
  uint64_t v31 = sub_1002DE398(a1);
  __chkstk_darwin(v31);
  *(&v44 - 4) = v5;
  *(&v44 - 3) = v18;
  *(&v44 - 2) = v51;
  *(&v44 - 1) = v27;
  uint64_t v32 = sub_1002ED514((void (*)(uint64_t *__return_ptr, void *))sub_1002E5BA0, (uint64_t)(&v44 - 6), (uint64_t)v31);
  swift_bridgeObjectRelease();
  sub_10012B060(3, (uint64_t)v32);
  swift_bridgeObjectRelease();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v41 = v48;
  sub_10000FB74((uint64_t)v16, v48, &qword_100527AF8);
  uint64_t v42 = v41 + *(int *)(v49 + 36);
  *(unsigned char *)uint64_t v42 = v30;
  *(void *)(v42 + 8) = v34;
  *(void *)(v42 + 16) = v36;
  *(void *)(v42 + 24) = v38;
  *(void *)(v42 + 32) = v40;
  *(unsigned char *)(v42 + 40) = 0;
  sub_10000FBD8((uint64_t)v16, &qword_100527AF8);
  return sub_10000FC34(v41, v50, &qword_100527B00);
}

uint64_t sub_1002DDFC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OpacityTransition();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = sub_10000F214(&qword_100527B08);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PinContainer();
  sub_1002DE1D4(v12);
  OpacityTransition.init()();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  sub_1002E8980(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v13 = AnyTransition.init<A>(_:)();
  sub_10000FB74((uint64_t)v11, a1, &qword_100527B08);
  *(void *)(a1 + *(int *)(sub_10000F214(&qword_100527B10) + 36)) = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return sub_10000FBD8((uint64_t)v11, &qword_100527B08);
}

uint64_t sub_1002DE1D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(a1);
  v9[1] = sub_1002DE398(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(v7 + 32) = *(void *)(a1 + 32);
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_10000F214(&qword_100519FD0);
  sub_10000F214(&qword_100527B18);
  sub_100013AA8(&qword_100527B20, &qword_100519FD0);
  sub_1002E7014();
  sub_1002E7374();
  return ForEach<>.init(_:content:)();
}

void *sub_1002DE398(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1 - 8;
  uint64_t v58 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  unint64_t v57 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ResultLookupState();
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v61 = v9;
  __chkstk_darwin(v9);
  uint64_t v59 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = *(int *)(v4 + 52);
  uint64_t v62 = v2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v2 + v23, v12, v20);
  uint64_t v24 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v15, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v25 = type metadata accessor for CVDetection();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v22, 1, 1, v25);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 32))(v11);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v11);
    uint64_t v25 = type metadata accessor for CVDetection();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v22, 0, 1, v25);
  }
  uint64_t v26 = (uint64_t)v22;
  uint64_t v27 = (void *)a1;
  sub_10000FB74((uint64_t)v22, (uint64_t)v18, &qword_10051CB10);
  type metadata accessor for CVDetection();
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v18, 1, v25);
  uint64_t v29 = v62;
  if (v28 == 1)
  {
    sub_10000FBD8((uint64_t)v18, &qword_10051CB10);
    char v30 = _swiftEmptyArrayStorage;
  }
  else
  {
    char v30 = sub_10004E390();
    sub_1002EC7A4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  sub_10000FB74(v29 + *(int *)(a1 + 52), (uint64_t)v8, &qword_10051A308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v8, 1, v61) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000FBD8((uint64_t)v8, &qword_10051A308);
    unint64_t v31 = *(void *)(sub_1002DFBF4((void *)a1) + 16);
    swift_bridgeObjectRelease();
    if (v31 >= 2)
    {
      if (qword_100517E98 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10000F378(v32, (uint64_t)qword_10055E2E0);
      uint64_t v34 = v57;
      uint64_t v33 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v29, a1);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = v26;
        *(_DWORD *)uint64_t v37 = 134217984;
        uint64_t v38 = *(void *)(sub_1002DFBF4(v27) + 16);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void *))(v33 + 8))(v34, v27);
        v64[0] = v38 - 1;
        uint64_t v26 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Truncating %ld competing action(s) in the pin container", v37, 0xCu);
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, void *))(v33 + 8))(v34, v27);
      }
    }
    v64[0] = sub_1002DFBF4(v27);
    swift_bridgeObjectRetain();
    sub_1002E5C14(v64);
    swift_bridgeObjectRelease();
    uint64_t v47 = v64[0];
    if (*(void *)(v64[0] + 16)) {
      unint64_t v48 = 3;
    }
    else {
      unint64_t v48 = 1;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v49 = (void *)swift_dynamicCastClass();
    if (!v49)
    {
      swift_release();
      uint64_t v49 = _swiftEmptyArrayStorage;
    }
    uint64_t v50 = v49[2];
    swift_release();
    if (v50 == v48 >> 1)
    {
      uint64_t v51 = (void *)swift_dynamicCastClass();
      if (!v51)
      {
        swift_release();
        uint64_t v51 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      swift_release();
      uint64_t v51 = sub_1001EA1A4(v47, v47 + 32, 0, v48);
    }
    swift_release();
    sub_10000FBD8(v26, &qword_10051CB10);
    return v51;
  }
  uint64_t v39 = v59;
  uint64_t v40 = sub_1002EC5AC((uint64_t)v8, v59, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  __chkstk_darwin(v40);
  *(&v57 - 2) = (char *)v39;
  uint64_t v65 = sub_1001C1D38((uint64_t)sub_1002E5C80, (uint64_t)(&v57 - 4), (uint64_t)v30);
  unint64_t v41 = *(void *)(v65 + 16);
  if (v41)
  {
    if (v41 < 2) {
      goto LABEL_33;
    }
LABEL_17:
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10000F378(v42, (uint64_t)qword_10055E2E0);
    uint64_t v43 = v65;
    swift_bridgeObjectRetain();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 134217984;
      v64[0] = *(void *)(v43 + 16) - 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Truncating %ld competing fallback action(s) in the pin container", v46, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  uint64_t v65 = (uint64_t)sub_10004F488(v39);
  if (*(void *)(v65 + 16) >= 2uLL) {
    goto LABEL_17;
  }
LABEL_33:
  swift_beginAccess();
  uint64_t v63 = v65;
  swift_bridgeObjectRetain_n();
  sub_1002E5C14(&v63);
  swift_bridgeObjectRelease_n();
  uint64_t v52 = v63;
  if (*(void *)(v63 + 16)) {
    unint64_t v53 = 3;
  }
  else {
    unint64_t v53 = 1;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  int v54 = (void *)swift_dynamicCastClass();
  if (!v54)
  {
    swift_release();
    int v54 = _swiftEmptyArrayStorage;
  }
  uint64_t v55 = v54[2];
  swift_release();
  if (v55 == v53 >> 1)
  {
    uint64_t v51 = (void *)swift_dynamicCastClass();
    if (!v51)
    {
      swift_release();
      uint64_t v51 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_release();
    uint64_t v51 = sub_1001EA1A4(v52, v52 + 32, 0, v53);
  }
  swift_release();
  sub_10000FBD8(v26, &qword_10051CB10);
  sub_1002EC7A4(v39, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  return v51;
}

uint64_t sub_1002DED70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2 + *(int *)(a2 + 52);
  if ((sub_100049C54(v7) & 1) == 0) {
    return 0;
  }
  sub_10000FB74(v7, (uint64_t)v6, &qword_10051A308);
  uint64_t v8 = type metadata accessor for ResultLookupState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    sub_10000FBD8((uint64_t)v6, &qword_10051A308);
    return 0;
  }
  char v9 = sub_100318D58();
  sub_1002EC7A4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  if ((v9 & 1) == 0) {
    return 0;
  }
  if (sub_1002DDA74()) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_1002DEEC0@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v32 = a3;
  uint64_t v29 = a2;
  uint64_t v35 = a6;
  uint64_t v7 = type metadata accessor for PinContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  char v30 = (char *)&v28 - v9;
  uint64_t v10 = sub_10000F214(&qword_100527B98);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100527B38);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004ECF4(a1, (uint64_t)v39);
  sub_1002DF24C(v39, 0, 0, 1, v7, (uint64_t)v13);
  static AnyTransition.move(edge:)();
  static AnyTransition.opacity.getter();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  uint64_t v18 = AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v13, v10);
  *(void *)&v17[*(int *)(v15 + 44)] = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v19 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v30, v29, v7);
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v21 = (v31 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = (char *)swift_allocObject();
  uint64_t v23 = v33;
  *((void *)v22 + 2) = v32;
  *((void *)v22 + 3) = v23;
  *((void *)v22 + 4) = v34;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v22[v20], v19, v7);
  sub_10004ECF4(v39, (uint64_t)&v22[v21]);
  char v36 = 0;
  sub_1002E7498((uint64_t)v39);
  swift_retain();
  State.init(wrappedValue:)();
  LOBYTE(v20) = v37;
  uint64_t v24 = v38;
  uint64_t v25 = v35;
  sub_10000FB74((uint64_t)v17, v35, &qword_100527B38);
  swift_release();
  uint64_t v26 = v25 + *(int *)(sub_10000F214(&qword_100527B18) + 36);
  *(void *)uint64_t v26 = sub_1002E73CC;
  *(void *)(v26 + 8) = v22;
  *(unsigned char *)(v26 + 16) = v20;
  *(void *)(v26 + 24) = v24;
  return sub_10000FBD8((uint64_t)v17, &qword_100527B38);
}

uint64_t sub_1002DF24C@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v72 = a4;
  uint64_t v71 = a3;
  uint64_t v85 = a6;
  sub_10004ECF4(a1, (uint64_t)v100);
  uint64_t v62 = v100[0];
  uint64_t v61 = v100[1];
  uint64_t v60 = v100[2];
  uint64_t v59 = v100[3];
  unsigned int v78 = v101;
  uint64_t v84 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  unint64_t v82 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = *(void *)(a5 - 8);
  __chkstk_darwin(v11);
  uint64_t v79 = v12;
  unint64_t v80 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v13 - 8);
  uint64_t v65 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100527B78);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000F214(&qword_100527B68) - 8;
  __chkstk_darwin(v69);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_100527B58) - 8;
  __chkstk_darwin(v70);
  unsigned int v64 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000F214(&qword_100527B40);
  __chkstk_darwin(v75);
  unint64_t v77 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000F214(&qword_100527B98);
  uint64_t v74 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v73 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v23 = sub_1002DED70((uint64_t)a1, a5);
  uint64_t v24 = v6 + *(int *)(a5 + 52);
  char v25 = sub_10004F038(v24);
  char v26 = sub_1002E0F4C(a5);
  char v27 = sub_1002E104C(a5);
  uint64_t v28 = *(void *)(a5 + 24);
  uint64_t v91 = *(void *)(a5 + 16);
  uint64_t v92 = v28;
  uint64_t v93 = *(void *)(a5 + 32);
  char v29 = v25 & 1;
  char v94 = v25 & 1;
  uint64_t v95 = v6;
  unsigned int v96 = a1;
  char v30 = a1;
  uint64_t v31 = a2;
  uint64_t v32 = v71;
  uint64_t v97 = a2;
  uint64_t v98 = v71;
  char v33 = v72;
  char v99 = v72 & 1;
  uint64_t v68 = v91;
  uint64_t v86 = v91;
  uint64_t v67 = v28;
  uint64_t v87 = v28;
  uint64_t v66 = v93;
  uint64_t v88 = v93;
  uint64_t v89 = v6;
  uint64_t v63 = v6;
  uint64_t v90 = v30;
  char v34 = v23;
  sub_1002DD924(v23, v29, v26 & 1, v27 & 1, (uint64_t (*)(uint64_t))sub_1002E74D0, (uint64_t (*)(uint64_t))sub_1002E750C, (uint64_t)v17);
  uint64_t v35 = v65;
  sub_10000FB74(v24, v65, &qword_10051A308);
  uint64_t v36 = type metadata accessor for ResultLookupState();
  int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v35, 1, v36);
  if (v37 == 1)
  {
    uint64_t v38 = v32;
  }
  else
  {
    uint64_t v31 = 2;
    uint64_t v38 = 0;
  }
  char v39 = (v37 != 1) | v33;
  sub_10000FBD8(v35, &qword_10051A308);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v17, (uint64_t)v19, &qword_100527B78);
  unint64_t v41 = &v19[*(int *)(v69 + 44)];
  *(void *)unint64_t v41 = KeyPath;
  *((void *)v41 + 1) = v31;
  uint64_t v42 = (uint64_t)v64;
  *((void *)v41 + 2) = v38;
  v41[24] = v39 & 1;
  sub_10000FBD8((uint64_t)v17, &qword_100527B78);
  uint64_t v43 = static Animation.default.getter();
  sub_10000FB74((uint64_t)v19, v42, &qword_100527B68);
  uint64_t v44 = v42 + *(int *)(v70 + 44);
  *(void *)uint64_t v44 = v43;
  *(unsigned char *)(v44 + 8) = v34;
  sub_10000FBD8((uint64_t)v19, &qword_100527B68);
  char v45 = 0;
  if (v78 >= 3)
  {
    if (v78 != 3 || v60 | v61 | v62 | v59 && (v62 != 4 ? (BOOL v46 = v62 == 1) : (BOOL v46 = 1), !v46 || v60 | v61 | v59)) {
      char v45 = 1;
    }
  }
  char v47 = v34 != 0;
  uint64_t v48 = v81;
  uint64_t v49 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, v63, a5);
  unint64_t v50 = (*(unsigned __int8 *)(v48 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  uint64_t v51 = (char *)swift_allocObject();
  uint64_t v52 = v67;
  *((void *)v51 + 2) = v68;
  *((void *)v51 + 3) = v52;
  *((void *)v51 + 4) = v66;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v51[v50], v49, a5);
  uint64_t v53 = (uint64_t)v77;
  uint64_t v54 = (uint64_t)&v77[*(int *)(v75 + 36)];
  swift_retain();
  sub_10008E040(v47, v45, (uint64_t)sub_1002E867C, (uint64_t)v51, v54);
  sub_10000FB74(v42, v53, &qword_100527B58);
  swift_release();
  sub_10000FBD8(v42, &qword_100527B58);
  uint64_t v55 = v82;
  static AccessibilityChildBehavior.combine.getter();
  sub_1002E7164();
  unint64_t v56 = v73;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v55, v84);
  sub_10000FBD8(v53, &qword_100527B40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v74 + 32))(v85, v56, v76);
}

uint64_t sub_1002DFA50(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8 = a1 & 1;
  uint64_t v9 = type metadata accessor for PinContainer();
  char v10 = *(unsigned char *)(a2 + *(int *)(v9 + 96) + 8);
  uint64_t v11 = swift_retain();
  sub_10027D0D8(v11, v10);
  swift_release();
  Swift::Int v12 = sub_100063898(a2 + *(int *)(v9 + 44), a4, a5);
  sub_1003CA054(v12, v8);

  return swift_release();
}

BOOL sub_1002DFB14(uint64_t a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FB74(v1 + *(int *)(a1 + 52), (uint64_t)v5, &qword_10051A308);
  uint64_t v6 = type metadata accessor for ResultLookupState();
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) != 1;
  sub_10000FBD8((uint64_t)v5, &qword_10051A308);
  return v7;
}

uint64_t sub_1002DFBF4(void *a1)
{
  uint64_t v3 = sub_1002DFCD0((uint64_t)a1);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v6 = a1[4];
  uint64_t v14 = v6;
  uint64_t v15 = v1;
  uint64_t v7 = sub_1001C1D38((uint64_t)sub_1002E6EFC, (uint64_t)v11, v3);
  BOOL v8 = sub_1002DFB14((uint64_t)a1);
  if (!v8)
  {
    __chkstk_darwin(v8);
    v10[2] = v4;
    v10[3] = v5;
    v10[4] = v6;
    v10[5] = v1;
    return sub_1001C1D38((uint64_t)sub_1002E6F20, (uint64_t)v10, v7);
  }
  return v7;
}

uint64_t sub_1002DFCD0(uint64_t a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for ResultLookupState();
  uint64_t v6 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v24 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = v1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v23 - v12, v1 + *(int *)(a1 + 44), v9, v11);
  uint64_t v15 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v8) == 1)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 32) + 8))(v8);
    uint64_t v10 = v15;
    uint64_t v9 = v8;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_10000FB74(v14 + *(int *)(a1 + 52), (uint64_t)v5, &qword_10051A308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v25) == 1)
  {
    uint64_t v17 = sub_10000FBD8((uint64_t)v5, &qword_10051A308);
    __chkstk_darwin(v17);
    *(&v23 - 4) = v8;
    *(_OWORD *)(&v23 - 3) = *(_OWORD *)(a1 + 24);
    *(&v23 - 1) = v14;
    return sub_1001C1D38((uint64_t)sub_1002E6F44, (uint64_t)(&v23 - 6), (uint64_t)v16);
  }
  else
  {
    uint64_t v19 = (uint64_t)v5;
    uint64_t v20 = v24;
    uint64_t v21 = sub_1002EC5AC(v19, v24, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    __chkstk_darwin(v21);
    *(&v23 - 2) = v20;
    uint64_t v18 = sub_1001C1D38((uint64_t)sub_1002EC9E8, (uint64_t)(&v23 - 4), (uint64_t)v16);
    if (!*(void *)(v18 + 16))
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = (uint64_t)sub_10004F488(v20);
    }
    sub_1002EC7A4(v20, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  }
  return v18;
}

uint64_t sub_1002E0080(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  double v11 = &v22[-v10 - 8];
  uint64_t v12 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10004ECF4(a1, (uint64_t)v22);
  uint64_t v15 = type metadata accessor for PinContainer();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + *(int *)(v15 + 44), v8);
  uint64_t v16 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v17 = type metadata accessor for CVDetection();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, a3);
    uint64_t v18 = type metadata accessor for CVDetection();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 0, 1, v18);
  }
  char v19 = sub_10004DB4C((uint64_t)v14);
  sub_10000FBD8((uint64_t)v14, &qword_10051CB10);
  return v19 & 1;
}

uint64_t sub_1002E0324(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PinContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  LODWORD(a1) = *((unsigned __int8 *)a1 + 32);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v16 - v7, a2, v4, v6);
  if (a1 == 3)
  {
    if (v9 == 1 && (v12 | v10 | v11) == 0) {
      uint64_t v14 = v8[*(int *)(v4 + 56)];
    }
    else {
      uint64_t v14 = 1;
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v14;
}

uint64_t sub_1002E0478(long long *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PinContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - v6;
  sub_10004ECF4(a1, (uint64_t)v11);
  LODWORD(a1) = *(unsigned __int8 *)(a2 + *(int *)(v4 + 60));
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if (a1 == 1) {
    char v8 = sub_1003E0344(v11, *(void *)&v7[*(int *)(v4 + 64)]) ^ 1;
  }
  else {
    char v8 = 1;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8 & 1;
}

uint64_t sub_1002E05B0(long long *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10004ECF4(a1, (uint64_t)v10);
  sub_1002EC73C(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  uint64_t v7 = type metadata accessor for ResultLookupState();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  LOBYTE(a2) = sub_100049C54((uint64_t)v6);
  sub_10000FBD8((uint64_t)v6, &qword_10051A308);
  return a2 & 1;
}

uint64_t sub_1002E06CC(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 80);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  char v5 = *(unsigned char *)(v2 + 16);
  sub_1002B5074(*(void *)v2, v4, v5, (uint64_t (*)(void))sub_10000F724);
  uint64_t v6 = (void (*)(uint64_t))sub_10027D504(v3, v4, v5);
  uint64_t result = sub_1002B52E0(v3, v4, v5, (uint64_t (*)(void))sub_10000F478);
  if (v6)
  {
    v6(result);
    return sub_10000F478((uint64_t)v6);
  }
  return result;
}

unint64_t sub_1002E07A0(long long *a1, unint64_t a2, unint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  int v78 = a5;
  int v76 = a4;
  unint64_t v80 = a2;
  unint64_t v81 = a3;
  uint64_t v10 = *(void *)(a6 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v73 = *(void *)(v10 - 8);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  int v72 = (char *)&v71 - v17;
  uint64_t v18 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ResultLookupState();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (long long *)((char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = *(int *)(a6 + 52);
  uint64_t v77 = v7;
  sub_10000FB74(v7 + v25, (uint64_t)v20, &qword_10051A308);
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  uint64_t v79 = a1;
  if (v26 == 1)
  {
    sub_10000FBD8((uint64_t)v20, &qword_10051A308);
    unint64_t v27 = 0;
    uint64_t v28 = (void *)0xE000000000000000;
    char v29 = v76;
    uint64_t v31 = v74;
    uint64_t v30 = v75;
    uint64_t v32 = v77;
    uint64_t v33 = v73;
  }
  else
  {
    sub_1002EC5AC((uint64_t)v20, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    unint64_t v34 = sub_10004D0C4(v24);
    uint64_t v28 = (void *)0xE000000000000000;
    if (v35)
    {
      uint64_t v36 = v34;
      int v37 = v35;
      unint64_t v87 = 0;
      unint64_t v88 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      unint64_t v87 = 0xD000000000000014;
      unint64_t v88 = 0x800000010042B030;
      v38._countAndFlagsBits = v36;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 8233;
      v39._object = (void *)0xE200000000000000;
      String.append(_:)(v39);
      unint64_t v27 = v87;
      uint64_t v28 = (void *)v88;
    }
    else
    {
      unint64_t v27 = 0;
    }
    char v29 = v76;
    uint64_t v31 = v74;
    uint64_t v30 = v75;
    uint64_t v33 = v73;
    sub_1002EC7A4((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    uint64_t v32 = v77;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v13, v32 + *(int *)(a6 + 44), v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v30);
    unint64_t v41 = v79;
    unint64_t v40 = v80;
    uint64_t v42 = v27;
  }
  else
  {
    uint64_t v43 = v72;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v72, v13, v10);
    unint64_t v87 = 0x28203A6B63617274;
    unint64_t v88 = 0xE800000000000000;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v71, v43, v10);
    v44._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    uint64_t v46 = v87;
    char v47 = (void *)v88;
    unint64_t v87 = v27;
    unint64_t v88 = (unint64_t)v28;
    swift_bridgeObjectRetain();
    v48._countAndFlagsBits = v46;
    v48._object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = v87;
    uint64_t v28 = (void *)v88;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v10);
    unint64_t v41 = v79;
    unint64_t v40 = v80;
  }
  char v49 = v78;
  unint64_t v50 = v81;
  unint64_t v87 = 0;
  unint64_t v88 = 0xE000000000000000;
  _StringGuts.grow(_:)(63);
  unint64_t v85 = v87;
  unint64_t v86 = v88;
  v51._countAndFlagsBits = 0xD000000000000010;
  v51._object = (void *)0x800000010042B010;
  String.append(_:)(v51);
  if (v49) {
    uint64_t v52 = 1702195828;
  }
  else {
    uint64_t v52 = 0x65736C6166;
  }
  if (v49) {
    unint64_t v53 = 0xE400000000000000;
  }
  else {
    unint64_t v53 = 0xE500000000000000;
  }
  unint64_t v54 = v53;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 0x79616C7073696420;
  v55._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v55);
  v56._countAndFlagsBits = sub_1000499E0();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 0x496D657473797320;
  v57._object = (void *)0xEE00203A6567616DLL;
  String.append(_:)(v57);
  sub_10004ECF4(v41, (uint64_t)&v87);
  unint64_t v58 = v87;
  unint64_t v59 = 0xD00000000000001ALL;
  unint64_t v60 = 0x800000010042A2D0;
  switch(v91)
  {
    case 1:
    case 2:
      unint64_t v60 = v88;
      swift_bridgeObjectRetain();
      unint64_t v59 = v58;
      goto LABEL_24;
    case 3:
      if (!(v89 | v90 | v87 | v88))
      {
        unint64_t v59 = 0xD000000000000017;
        uint64_t v62 = "sparkle.magnifyingglass";
        goto LABEL_23;
      }
      unint64_t v61 = v89 | v90 | v88;
      if (v87 == 1 && !v61)
      {
        unint64_t v59 = 0xD000000000000023;
        uint64_t v62 = "location.pin.point.of.interest.fill";
LABEL_23:
        unint64_t v60 = (unint64_t)(v62 - 32) | 0x8000000000000000;
        goto LABEL_24;
      }
      if (v87 != 2 || v61)
      {
        if (v87 != 3 || v61)
        {
          BOOL v69 = v61 == 0;
          BOOL v70 = v87 == 4;
          if (v70 && v69) {
            unint64_t v59 = 0xD000000000000013;
          }
          else {
            unint64_t v59 = 0xD000000000000012;
          }
          if (v70 && v69) {
            unint64_t v60 = 0x800000010042A2B0;
          }
          else {
            unint64_t v60 = 0x800000010042A290;
          }
        }
        else
        {
          unint64_t v60 = 0xEE00332E65766177;
          unint64_t v59 = 0x2E72656B61657073;
        }
      }
      else
      {
        unint64_t v60 = 0x800000010042A270;
        unint64_t v59 = 0xD000000000000013;
      }
LABEL_24:
      unint64_t v63 = v60;
      String.append(_:)(*(Swift::String *)&v59);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 0x6F697469736F7020;
      v64._object = (void *)0xEB00000000203A6ELL;
      String.append(_:)(v64);
      unint64_t v82 = v40;
      unint64_t v83 = v50;
      char v84 = v29 & 1;
      v65._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      unint64_t v82 = v85;
      unint64_t v83 = v86;
      swift_bridgeObjectRetain();
      v66._countAndFlagsBits = v42;
      v66._object = v28;
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v67._countAndFlagsBits = 10;
      v67._object = (void *)0xE100000000000000;
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      return v82;
    default:
      goto LABEL_24;
  }
}

uint64_t sub_1002E0F4C(uint64_t a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FB74(v1 + *(int *)(a1 + 52), (uint64_t)v5, &qword_10051A308);
  uint64_t v6 = type metadata accessor for ResultLookupState();
  char v7 = 1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  sub_10000FBD8((uint64_t)v5, &qword_10051A308);
  if (v8 == 1) {
    char v7 = *(unsigned char *)(v1 + *(int *)(a1 + 48)) ^ 1;
  }
  return v7 & 1;
}

uint64_t sub_1002E104C(uint64_t a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ResultLookupState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FB74(v1 + *(int *)(a1 + 52), (uint64_t)v5, &qword_10051A308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000FBD8((uint64_t)v5, &qword_10051A308);
    char v10 = 1;
  }
  else
  {
    sub_1002EC5AC((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    char v11 = sub_1003188D0();
    sub_1002EC7A4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    char v10 = v11 ^ 1;
  }
  return v10 & 1;
}

uint64_t sub_1002E11EC@<X0>(int a1@<W0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  unint64_t v27 = a3;
  uint64_t v33 = a9;
  int v28 = a1;
  int v29 = a6 & 1;
  uint64_t v14 = type metadata accessor for PinContainer();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v32 = sub_10000F214(&qword_100527BD8);
  __chkstk_darwin(v32);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E1428(v28, a2, a3, v30, v31, v29, a7, a8, (uint64_t)v20, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v14);
  unint64_t v21 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v22 = (v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = a7;
  *((void *)v23 + 3) = a8;
  *((void *)v23 + 4) = a10;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v23[v21], v18, v14);
  uint64_t v24 = (uint64_t)&v23[v22];
  uint64_t v25 = v27;
  sub_10004ECF4(v27, v24);
  sub_1002E7498((uint64_t)v25);
  sub_1002EAD34();
  View.onTapGesture(count:perform:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v20, &qword_100527BD8);
}

uint64_t sub_1002E1428@<X0>(int a1@<W0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v301 = a6;
  uint64_t v309 = a5;
  uint64_t v306 = a4;
  uint64_t v313 = a2;
  LODWORD(v305) = a1;
  uint64_t v304 = a9;
  long long v312 = a3;
  sub_10004ECF4(a3, (uint64_t)v318);
  uint64_t v12 = sub_10000F214(&qword_100527CA0);
  __chkstk_darwin(v12 - 8);
  uint64_t v283 = (char *)&v236 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v282 = sub_10000F214(&qword_100527C90);
  __chkstk_darwin(v282);
  uint64_t v284 = (uint64_t)&v236 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v307 = sub_10000F214(&qword_100527C78);
  __chkstk_darwin(v307);
  unint64_t v308 = (char *)&v236 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = sub_10000F214(&qword_100527CA8);
  uint64_t v287 = *(void *)(v288 - 8);
  __chkstk_darwin(v288);
  unsigned int v286 = (char *)&v236 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v303 = sub_10000F214(&qword_100527C70);
  __chkstk_darwin(v303);
  unsigned int v285 = (char *)&v236 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v289 = (uint64_t)&v236 - v19;
  uint64_t v257 = type metadata accessor for ColorScheme();
  uint64_t v255 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  long long v254 = (char *)&v236 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v253 = (uint64_t)&v236 - v22;
  uint64_t v292 = type metadata accessor for ContentSizeCategory();
  uint64_t v291 = *(void *)(v292 - 8);
  __chkstk_darwin(v292);
  uint64_t v290 = (uint64_t)&v236 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v295 = sub_10000F214((uint64_t *)&unk_10051E360);
  unint64_t v294 = *(void *)(v295 - 8);
  __chkstk_darwin(v295);
  uint64_t v281 = (char *)&v236 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  long long v248 = (char *)&v236 - v26;
  uint64_t v293 = sub_10000F214(&qword_100527648);
  __chkstk_darwin(v293);
  long long v280 = (char *)&v236 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  long long v249 = (char *)&v236 - v29;
  uint64_t v247 = sub_10000F214(&qword_100527C60);
  __chkstk_darwin(v247);
  uint64_t v250 = (uint64_t)&v236 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = sub_10000F214(&qword_100527C50);
  __chkstk_darwin(v252);
  uint64_t v251 = (uint64_t)&v236 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v256 = sub_10000F214(&qword_100527C38);
  __chkstk_darwin(v256);
  uint64_t v263 = (char *)&v236 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v261 = sub_10000F214(&qword_100527CB0);
  uint64_t v260 = *(void *)(v261 - 8);
  __chkstk_darwin(v261);
  uint64_t v259 = (char *)&v236 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v279 = sub_10000F214(&qword_100527C30);
  __chkstk_darwin(v279);
  uint64_t v258 = (char *)&v236 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v262 = (uint64_t)&v236 - v36;
  uint64_t v37 = type metadata accessor for Locale();
  __chkstk_darwin(v37 - 8);
  unint64_t v245 = (char *)&v236 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v39 - 8);
  int v244 = (char *)&v236 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v41 - 8);
  uint64_t v243 = (char *)&v236 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v246 = *(void *)(v43 - 8);
  __chkstk_darwin(v43 - 8);
  uint64_t v264 = (uint64_t)&v236 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v271 = type metadata accessor for Optional();
  uint64_t v270 = *(void *)(v271 - 8);
  __chkstk_darwin(v271);
  char v269 = (char *)&v236 - v45;
  uint64_t v46 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v46 - 8);
  long long v268 = (char *)&v236 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v267 = type metadata accessor for CVBundle(0);
  uint64_t v266 = *(void *)(v267 - 8);
  __chkstk_darwin(v267);
  uint64_t v265 = (uint64_t)&v236 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v299 = sub_10000F214(&qword_100527CB8);
  __chkstk_darwin(v299);
  uint64_t v302 = (uint64_t)&v236 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v276 = sub_10000F214(&qword_100527CC0);
  __chkstk_darwin(v276);
  uint64_t v277 = (uint64_t)&v236 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v300 = sub_10000F214(&qword_100527C00);
  __chkstk_darwin(v300);
  long long v278 = (char *)&v236 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v315 = a7;
  uint64_t v310 = a10;
  uint64_t v311 = a8;
  uint64_t v314 = type metadata accessor for PinContainer();
  uint64_t v298 = *(void *)(v314 - 8);
  uint64_t v296 = *(void *)(v298 + 64);
  __chkstk_darwin(v314);
  unint64_t v297 = (char *)&v236 - v52;
  uint64_t v273 = sub_10000F214(&qword_100527BA8);
  __chkstk_darwin(v273);
  uint64_t v272 = (uint64_t)&v236 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000F214(&qword_100527C18);
  __chkstk_darwin(v54);
  Swift::String v56 = (char *)&v236 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_100527CC8);
  uint64_t v274 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  unint64_t v59 = (char *)&v236 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = sub_10000F214(&qword_100527C10);
  __chkstk_darwin(v275);
  unint64_t v61 = (char *)&v236 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  Swift::String v64 = (char *)&v236 - v63;
  uint64_t v65 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v65 - 8);
  Swift::String v67 = (char *)&v236 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for ResultLookupState();
  uint64_t v69 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v71 = (char *)&v236 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v305 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v240 = v54;
  int v241 = v61;
  uint64_t v242 = v59;
  uint64_t v239 = v57;
  uint64_t v305 = (uint64_t)v64;
  int v72 = v312;
  sub_10000FB74(v313 + *(int *)(v314 + 52), (uint64_t)v67, &qword_10051A308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
  {
    sub_10000FBD8((uint64_t)v67, &qword_10051A308);
LABEL_4:
    uint64_t v73 = v312;
    uint64_t v74 = sub_10004ECF4(v312, (uint64_t)v319);
    uint64_t v75 = v315;
    if (v320 < 3u || v319[2] | v319[3] | v319[0] | v319[1]) {
      goto LABEL_15;
    }
    uint64_t v76 = v270;
    uint64_t v77 = v269;
    uint64_t v78 = v271;
    (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v313 + *(int *)(v314 + 44), v271);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48))(v77, 1, v75) == 1)
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
      uint64_t v79 = (uint64_t)v268;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v266 + 56))(v268, 1, 1, v267);
LABEL_14:
      uint64_t v74 = sub_10000FBD8(v79, &qword_10051B768);
      goto LABEL_15;
    }
    uint64_t v79 = (uint64_t)v268;
    uint64_t v117 = v267;
    int v118 = swift_dynamicCast();
    uint64_t v119 = v266;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v266 + 56))(v79, v118 ^ 1u, 1, v117);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v79, 1, v117) == 1) {
      goto LABEL_14;
    }
    uint64_t v170 = v265;
    sub_1002EC5AC(v79, v265, type metadata accessor for CVBundle);
    uint64_t v171 = sub_1002E3DA8();
    if (v171)
    {
      uint64_t v172 = *(void *)(v171 + 16);
      if (!v172)
      {
        sub_1002EC7A4(v170, type metadata accessor for CVBundle);
        uint64_t v74 = swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      uint64_t v173 = v264;
      sub_1002EC73C(v171 + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80)), v264, type metadata accessor for VisualIntelligenceLookupResult);
      uint64_t v175 = *(void *)(v173 + 16);
      uint64_t v174 = *(char **)(v173 + 24);
      swift_bridgeObjectRetain();
      uint64_t v176 = swift_bridgeObjectRelease();
      if (v172 != 1)
      {
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v177._countAndFlagsBits = 0x203A656279614DLL;
        v177._object = (void *)0xE700000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v177);
        v178._countAndFlagsBits = v175;
        v178._object = v174;
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v178);
        swift_bridgeObjectRelease();
        v179._countAndFlagsBits = 0;
        v179._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v179);
        String.LocalizationValue.init(stringInterpolation:)();
        static Locale.current.getter();
        uint64_t v176 = String.init(localized:table:bundle:locale:comment:)();
        uint64_t v175 = v176;
        uint64_t v174 = v180;
      }
      uint64_t v307 = v175;
      unint64_t v308 = v174;
      uint64_t v181 = *(void *)(v264 + 88);
      __chkstk_darwin(v176);
      *(&v236 - 2) = v175;
      *(&v236 - 1) = (uint64_t)v174;
      __chkstk_darwin(v182);
      *(&v236 - 2) = v183;
      *(&v236 - 1) = v181;
      swift_bridgeObjectRetain();
      unsigned int v184 = v248;
      Label.init(title:icon:)();
      swift_bridgeObjectRelease();
      uint64_t v185 = v313;
      uint64_t v186 = v290;
      sub_10027CDC8(v290);
      LOBYTE(v181) = ContentSizeCategory.isAccessibilityCategory.getter();
      (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v186, v292);
      uint64_t KeyPath = swift_getKeyPath();
      unint64_t v188 = v294;
      uint64_t v189 = (uint64_t)v249;
      uint64_t v190 = v295;
      (*(void (**)(char *, char *, uint64_t))(v294 + 16))(v249, v184, v295);
      uint64_t v191 = v189 + *(int *)(v293 + 36);
      *(void *)uint64_t v191 = KeyPath;
      *(void *)(v191 + 8) = (v181 & 1) == 0;
      *(unsigned char *)(v191 + 16) = v181 & 1;
      (*(void (**)(char *, uint64_t))(v188 + 8))(v184, v190);
      static Font.body.getter();
      static Font.Weight.medium.getter();
      uint64_t v192 = Font.weight(_:)();
      swift_release();
      uint64_t v193 = swift_getKeyPath();
      uint64_t v194 = v250;
      sub_10000FB74(v189, v250, &qword_100527648);
      uint64_t v195 = (uint64_t *)(v194 + *(int *)(v247 + 36));
      *uint64_t v195 = v193;
      v195[1] = v192;
      sub_10000FBD8(v189, &qword_100527648);
      uint64_t v196 = v253;
      sub_10027CA80(v253);
      uint64_t v197 = v255;
      long long v198 = v254;
      uint64_t v199 = v257;
      (*(void (**)(char *, void, uint64_t))(v255 + 104))(v254, enum case for ColorScheme.dark(_:), v257);
      LOBYTE(v193) = static ColorScheme.== infix(_:_:)();
      long long v200 = *(void (**)(char *, uint64_t))(v197 + 8);
      v200(v198, v199);
      v200((char *)v196, v199);
      long long v201 = self;
      long long v202 = &selRef_systemLightGrayColor;
      if ((v193 & 1) == 0) {
        long long v202 = &selRef_systemDarkGrayColor;
      }
      id v203 = [v201 *v202];
      uint64_t v204 = Color.init(uiColor:)();
      uint64_t v205 = swift_getKeyPath();
      uint64_t v206 = v251;
      sub_10000FB74(v194, v251, &qword_100527C60);
      uint64_t v207 = (uint64_t *)(v206 + *(int *)(v252 + 36));
      uint64_t *v207 = v205;
      v207[1] = v204;
      sub_10000FBD8(v194, &qword_100527C60);
      sub_1002EB144();
      View.accessibilityIdentifier(_:)();
      sub_10000FBD8(v206, &qword_100527C50);
      uint64_t v316 = v307;
      unint64_t v317 = (void (*)(void, void, void))v308;
      uint64_t v208 = v75;
      uint64_t v209 = v298;
      uint64_t v307 = *(void *)(v298 + 16);
      uint64_t v210 = v297;
      uint64_t v211 = v185;
      uint64_t v212 = v314;
      ((void (*)(char *, uint64_t, uint64_t))v307)(v297, v211, v314);
      uint64_t v213 = *(unsigned __int8 *)(v209 + 80);
      uint64_t v214 = (v213 + 40) & ~v213;
      uint64_t v305 = v213 | 7;
      unint64_t v215 = (v214 + v296 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v295 = v215;
      unint64_t v216 = (v214 + v296 + 47) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v296 = v216 + 17;
      uint64_t v217 = (void *)swift_allocObject();
      uint64_t v218 = v311;
      v217[2] = v208;
      v217[3] = v218;
      v217[4] = v310;
      uint64_t v298 = *(void *)(v209 + 32);
      ((void (*)(char *, char *, uint64_t))v298)((char *)v217 + v214, v210, v212);
      sub_10004ECF4(v73, (uint64_t)v217 + v215);
      unint64_t v219 = v216;
      unint64_t v220 = (char *)v217 + v216;
      uint64_t v221 = v306;
      uint64_t v222 = v309;
      *(void *)unint64_t v220 = v306;
      *((void *)v220 + 1) = v222;
      v301 &= 1u;
      v220[16] = v301;
      sub_1002EB098();
      unint64_t v223 = v259;
      uint64_t v224 = (uint64_t)v263;
      View.onChange<A>(of:initial:_:)();
      swift_release();
      sub_10000FBD8(v224, &qword_100527C38);
      swift_bridgeObjectRelease();
      uint64_t v225 = v314;
      ((void (*)(char *, uint64_t, uint64_t))v307)(v210, v313, v314);
      unint64_t v226 = (void *)swift_allocObject();
      uint64_t v227 = v311;
      v226[2] = v315;
      v226[3] = v227;
      v226[4] = v310;
      ((void (*)(char *, char *, uint64_t))v298)((char *)v226 + v214, v210, v225);
      sub_10004ECF4(v312, (uint64_t)v226 + v295);
      long long v228 = (char *)v226 + v219;
      uint64_t v229 = v309;
      *(void *)long long v228 = v221;
      *((void *)v228 + 1) = v229;
      v228[16] = v301;
      uint64_t v230 = v260;
      uint64_t v231 = (uint64_t)v258;
      uint64_t v232 = v261;
      (*(void (**)(char *, char *, uint64_t))(v260 + 16))(v258, v223, v261);
      long long v233 = (void *)(v231 + *(int *)(v279 + 36));
      void *v233 = 0;
      v233[1] = 0;
      v233[2] = sub_1002EC594;
      v233[3] = v226;
      (*(void (**)(char *, uint64_t))(v230 + 8))(v223, v232);
      uint64_t v234 = v262;
      sub_10000FC34(v231, v262, &qword_100527C30);
      sub_10000FB74(v234, v277, &qword_100527C30);
      swift_storeEnumTagMultiPayload();
      sub_1002EAFD0(&qword_100527C08, &qword_100527C10, &qword_100527C18, (void (*)(void))sub_1002EAF24);
      sub_1002EAFD0(&qword_100527C28, &qword_100527C30, &qword_100527C38, (void (*)(void))sub_1002EB098);
      uint64_t v235 = (uint64_t)v278;
      _ConditionalContent<>.init(storage:)();
      sub_10000FB74(v235, v302, &qword_100527C00);
      swift_storeEnumTagMultiPayload();
      sub_1002EAE50();
      sub_1002EAFD0(&qword_100527C68, &qword_100527C70, &qword_100527C78, (void (*)(void))sub_1002EB284);
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v235, &qword_100527C00);
      sub_10000FBD8(v234, &qword_100527C30);
      sub_1002EC7A4(v264, type metadata accessor for VisualIntelligenceLookupResult);
      unsigned int v112 = type metadata accessor for CVBundle;
      uint64_t v113 = &v297;
      return sub_1002EC7A4((uint64_t)*(v113 - 32), v112);
    }
    uint64_t v115 = type metadata accessor for CVBundle;
    uint64_t v116 = v170;
    goto LABEL_12;
  }
  sub_1002EC5AC((uint64_t)v67, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  uint64_t v73 = v72;
  sub_10004ECF4(v72, (uint64_t)v319);
  if (v320)
  {
    uint64_t v80 = v313;
    uint64_t v81 = sub_1002DDACC();
    unint64_t v82 = v72;
    uint64_t v84 = v272;
    unsigned int v238 = v71;
    sub_10004A56C((uint64_t)v71, v80, v81, v85, v83 & 1, v272);
    swift_release();
    swift_release();
    sub_1002E8778();
    long long v237 = v56;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8(v84, &qword_100527BA8);
    uint64_t v316 = sub_1000499E0();
    unint64_t v317 = v86;
    uint64_t v87 = v298;
    unint64_t v308 = *(char **)(v298 + 16);
    unint64_t v88 = v297;
    uint64_t v89 = v80;
    uint64_t v90 = v314;
    ((void (*)(char *, uint64_t, uint64_t))v308)(v297, v89, v314);
    uint64_t v91 = *(unsigned __int8 *)(v87 + 80);
    uint64_t v92 = (v91 + 40) & ~v91;
    uint64_t v307 = v91 | 7;
    unint64_t v93 = (v92 + v296 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v294 = v93;
    unint64_t v94 = (v92 + v296 + 47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v296 = v94 + 17;
    unint64_t v95 = v94;
    uint64_t v295 = v94;
    unsigned int v96 = (void *)swift_allocObject();
    uint64_t v97 = v311;
    v96[2] = v315;
    v96[3] = v97;
    v96[4] = v310;
    uint64_t v298 = *(void *)(v87 + 32);
    ((void (*)(char *, char *, uint64_t))v298)((char *)v96 + v92, v88, v90);
    sub_10004ECF4(v82, (uint64_t)v96 + v93);
    uint64_t v98 = (char *)v96 + v95;
    uint64_t v99 = v309;
    *(void *)uint64_t v98 = v306;
    *((void *)v98 + 1) = v99;
    v301 &= 1u;
    v98[16] = v301;
    sub_1002E7498((uint64_t)v82);
    sub_1002EAF24();
    int v100 = v242;
    uint64_t v101 = (uint64_t)v237;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10000FBD8(v101, &qword_100527C18);
    ((void (*)(char *, uint64_t, uint64_t))v308)(v88, v313, v90);
    int v102 = (void *)swift_allocObject();
    uint64_t v103 = v311;
    v102[2] = v315;
    v102[3] = v103;
    v102[4] = v310;
    ((void (*)(char *, char *, uint64_t))v298)((char *)v102 + v92, v88, v90);
    uint64_t v104 = v312;
    sub_10004ECF4(v312, (uint64_t)v102 + v294);
    int v105 = (char *)v102 + v295;
    *(void *)int v105 = v306;
    *((void *)v105 + 1) = v99;
    v105[16] = v301;
    uint64_t v106 = v274;
    uint64_t v107 = (uint64_t)v241;
    uint64_t v108 = v239;
    (*(void (**)(char *, char *, uint64_t))(v274 + 16))(v241, v100, v239);
    int v109 = (void *)(v107 + *(int *)(v275 + 36));
    void *v109 = 0;
    v109[1] = 0;
    v109[2] = sub_1002EC594;
    v109[3] = v102;
    sub_1002E7498((uint64_t)v104);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v100, v108);
    uint64_t v110 = v305;
    sub_10000FC34(v107, v305, &qword_100527C10);
    sub_10000FB74(v110, v277, &qword_100527C10);
    swift_storeEnumTagMultiPayload();
    sub_1002EAFD0(&qword_100527C08, &qword_100527C10, &qword_100527C18, (void (*)(void))sub_1002EAF24);
    sub_1002EAFD0(&qword_100527C28, &qword_100527C30, &qword_100527C38, (void (*)(void))sub_1002EB098);
    uint64_t v111 = (uint64_t)v278;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v111, v302, &qword_100527C00);
    swift_storeEnumTagMultiPayload();
    sub_1002EAE50();
    sub_1002EAFD0(&qword_100527C68, &qword_100527C70, &qword_100527C78, (void (*)(void))sub_1002EB284);
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v111, &qword_100527C00);
    sub_10000FBD8(v110, &qword_100527C10);
    unsigned int v112 = (uint64_t (*)(void))type metadata accessor for ResultLookupState;
    uint64_t v113 = (char **)&v270;
    return sub_1002EC7A4((uint64_t)*(v113 - 32), v112);
  }
  uint64_t v115 = (uint64_t (*)(void))type metadata accessor for ResultLookupState;
  uint64_t v116 = (uint64_t)v71;
LABEL_12:
  uint64_t v74 = sub_1002EC7A4(v116, v115);
LABEL_15:
  __chkstk_darwin(v74);
  *(&v236 - 2) = (uint64_t)v73;
  __chkstk_darwin(v120);
  *(&v236 - 2) = (uint64_t)v73;
  int v121 = v281;
  Label.init(title:icon:)();
  uint64_t v123 = v313;
  uint64_t v122 = v314;
  uint64_t v124 = v290;
  sub_10027CDC8(v290);
  char v125 = ContentSizeCategory.isAccessibilityCategory.getter();
  (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v124, v292);
  uint64_t v126 = swift_getKeyPath();
  unint64_t v127 = v294;
  uint64_t v128 = (uint64_t)v280;
  uint64_t v129 = v295;
  (*(void (**)(char *, char *, uint64_t))(v294 + 16))(v280, v121, v295);
  uint64_t v130 = v128 + *(int *)(v293 + 36);
  *(void *)uint64_t v130 = v126;
  *(void *)(v130 + 8) = (v125 & 1) == 0;
  *(unsigned char *)(v130 + 16) = v125 & 1;
  (*(void (**)(char *, uint64_t))(v127 + 8))(v121, v129);
  sub_1002BF444();
  uint64_t v131 = (uint64_t)v283;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v128, &qword_100527648);
  static Font.body.getter();
  static Font.Weight.medium.getter();
  uint64_t v132 = Font.weight(_:)();
  swift_release();
  uint64_t v133 = swift_getKeyPath();
  uint64_t v134 = v284;
  sub_10000FB74(v131, v284, &qword_100527CA0);
  unint64_t v135 = (uint64_t *)(v134 + *(int *)(v282 + 36));
  uint64_t *v135 = v133;
  v135[1] = v132;
  sub_10000FBD8(v131, &qword_100527CA0);
  uint64_t v136 = sub_1002E4528();
  uint64_t v137 = swift_getKeyPath();
  uint64_t v138 = v308;
  sub_10000FB74(v134, (uint64_t)v308, &qword_100527C90);
  uint64_t v139 = (uint64_t *)&v138[*(int *)(v307 + 36)];
  *uint64_t v139 = v137;
  v139[1] = v136;
  sub_10000FBD8(v134, &qword_100527C90);
  unint64_t v140 = v312;
  uint64_t v316 = sub_1000499E0();
  unint64_t v317 = v141;
  uint64_t v142 = v298;
  uint64_t v305 = *(void *)(v298 + 16);
  uint64_t v143 = v297;
  ((void (*)(char *, uint64_t, uint64_t))v305)(v297, v123, v122);
  uint64_t v144 = *(unsigned __int8 *)(v142 + 80);
  uint64_t v145 = ((v144 + 40) & ~v144) + v296;
  uint64_t v146 = (v144 + 40) & ~v144;
  uint64_t v295 = v146;
  uint64_t v296 = v144 | 7;
  unint64_t v147 = (v145 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v292 = v147;
  unint64_t v148 = (v145 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v294 = v148 + 17;
  uint64_t v293 = v148;
  unint64_t v149 = (void *)swift_allocObject();
  uint64_t v150 = v311;
  v149[2] = v315;
  v149[3] = v150;
  v149[4] = v310;
  uint64_t v151 = (char *)v149 + v146;
  uint64_t v152 = (uint64_t)v140;
  uint64_t v153 = *(void (**)(char *, char *, uint64_t))(v142 + 32);
  v153(v151, v143, v122);
  sub_10004ECF4(v140, (uint64_t)v149 + v147);
  uint64_t v154 = (char *)v149 + v148;
  uint64_t v155 = v306;
  uint64_t v156 = v309;
  *(void *)uint64_t v154 = v306;
  *((void *)v154 + 1) = v156;
  LOBYTE(v147) = v301 & 1;
  v154[16] = v301 & 1;
  sub_1002E7498((uint64_t)v140);
  sub_1002EB284();
  int v157 = v286;
  unint64_t v158 = (void (*)(void, void, void))v308;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000FBD8((uint64_t)v158, &qword_100527C78);
  uint64_t v159 = v314;
  ((void (*)(char *, uint64_t, uint64_t))v305)(v143, v313, v314);
  unint64_t v160 = (char *)swift_allocObject();
  uint64_t v161 = v311;
  *((void *)v160 + 2) = v315;
  *((void *)v160 + 3) = v161;
  *((void *)v160 + 4) = v310;
  v153(&v160[v295], v143, v159);
  sub_10004ECF4(v140, (uint64_t)&v160[v292]);
  unint64_t v162 = &v160[v293];
  uint64_t v163 = v309;
  *(void *)unint64_t v162 = v155;
  *((void *)v162 + 1) = v163;
  v162[16] = v147;
  uint64_t v164 = v287;
  long long v165 = v285;
  uint64_t v166 = v288;
  (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v285, v157, v288);
  uint64_t v167 = &v165[*(int *)(v303 + 36)];
  *(void *)uint64_t v167 = 0;
  *((void *)v167 + 1) = 0;
  *((void *)v167 + 2) = sub_1002EC594;
  *((void *)v167 + 3) = v160;
  sub_1002E7498(v152);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v157, v166);
  uint64_t v168 = (uint64_t)v165;
  uint64_t v169 = v289;
  sub_10000FC34(v168, v289, &qword_100527C70);
  sub_10000FB74(v169, v302, &qword_100527C70);
  swift_storeEnumTagMultiPayload();
  sub_1002EAE50();
  sub_1002EAFD0(&qword_100527C68, &qword_100527C70, &qword_100527C78, (void (*)(void))sub_1002EB284);
  _ConditionalContent<>.init(storage:)();
  return sub_10000FBD8(v169, &qword_100527C70);
}

uint64_t sub_1002E3900(long long *a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v3);
  char v5 = (void *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for BundleClassification(0);
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a2;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CVBundle(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (long long *)((char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_10004ECF4(v33, (uint64_t)v34);
  if (!v34[32])
  {
    uint64_t v33 = v19;
    v28[1] = v3;
    uint64_t v21 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v12, v32 + *(int *)(v31 + 44), v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v12, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      return sub_10000FBD8((uint64_t)v15, &qword_10051B768);
    }
    int v22 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, v22 ^ 1u, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
      return sub_10000FBD8((uint64_t)v15, &qword_10051B768);
    }
    uint64_t v23 = v33;
    sub_1002EC5AC((uint64_t)v15, (uint64_t)v33, type metadata accessor for CVBundle);
    uint64_t v24 = *(void *)((char *)v23 + *(int *)(v16 + 24));
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v26 = v24 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      uint64_t v27 = *(void *)(v29 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1002EC73C(v26, (uint64_t)v8, type metadata accessor for BundleClassification);
        sub_1002EC73C((uint64_t)v8, (uint64_t)v5, type metadata accessor for BundleClassification.ClassificationType);
        sub_1002EC7A4((uint64_t)v8, type metadata accessor for BundleClassification);
        if (swift_getEnumCaseMultiPayload())
        {
          sub_1002EC7A4((uint64_t)v5, type metadata accessor for BundleClassification.ClassificationType);
        }
        else
        {
          sub_10041B9C8(*v5);
          swift_bridgeObjectRelease();
        }
        v26 += v27;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
    }
    return sub_1002EC7A4((uint64_t)v23, type metadata accessor for CVBundle);
  }
  return result;
}

uint64_t sub_1002E3DA8()
{
  uint64_t v1 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BundleClassification(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + *(int *)(type metadata accessor for CVBundle(0) + 24));
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v11 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1002EC73C(v10, (uint64_t)v7, type metadata accessor for BundleClassification);
      sub_1002EC73C((uint64_t)v7, (uint64_t)v3, type metadata accessor for BundleClassification.ClassificationType);
      sub_1002EC7A4((uint64_t)v7, type metadata accessor for BundleClassification);
      if (swift_getEnumCaseMultiPayload() == 1) {
        break;
      }
      sub_1002EC7A4((uint64_t)v3, type metadata accessor for BundleClassification.ClassificationType);
      v10 += v11;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)&v3[*(int *)(sub_10000F214(&qword_1005297C0) + 48)];
    sub_1002EC7A4((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    if (!*(void *)(v9 + 16))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v9;
}

uint64_t sub_1002E3FC4(uint64_t a1, long long *a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v21 = a4;
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v13 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74(v12 + *(int *)(v13 + 40), (uint64_t)v11, &qword_10051E070);
  uint64_t v14 = type metadata accessor for URL();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v11, 1, v14) == 1)
  {
    sub_10000FBD8((uint64_t)v11, &qword_10051E070);
    uint64_t v15 = type metadata accessor for PinContainer();
  }
  else
  {
    sub_10000FBD8((uint64_t)v11, &qword_10051E070);
    uint64_t v15 = type metadata accessor for PinContainer();
    unint64_t v16 = sub_1002E07A0(a2, a3, v21, a5 & 1, 1, v15);
    uint64_t v18 = v17;
    type metadata accessor for DetectionLog();
    sub_100093D90(v16, v18);
    swift_bridgeObjectRelease();
  }
  return sub_1002E3900(a2, v15);
}

uint64_t sub_1002E4198(uint64_t a1, long long *a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v21 = a4;
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v13 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74(v12 + *(int *)(v13 + 40), (uint64_t)v11, &qword_10051E070);
  uint64_t v14 = type metadata accessor for URL();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v11, 1, v14) == 1) {
    return sub_10000FBD8((uint64_t)v11, &qword_10051E070);
  }
  sub_10000FBD8((uint64_t)v11, &qword_10051E070);
  uint64_t v16 = type metadata accessor for PinContainer();
  unint64_t v17 = sub_1002E07A0(a2, a3, v21, a5 & 1, 0, v16);
  uint64_t v19 = v18;
  type metadata accessor for DetectionLog();
  sub_100093D90(v17, v19);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E4338@<X0>(uint64_t a1@<X8>)
{
  sub_1000499E0();
  sub_1000317A0();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1002E4394@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10004ECF4(a1, (uint64_t)&v4);
  switch(v5)
  {
    case 1:
    case 2:
      swift_bridgeObjectRetain();
      break;
    default:
      break;
  }
  uint64_t result = Image.init(_internalSystemName:)();
  *a2 = result;
  return result;
}

uint64_t sub_1002E4528()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - v5;
  sub_10027CA80((uint64_t)&v13 - v5);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ColorScheme.dark(_:), v0);
  char v7 = static ColorScheme.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  v8(v6, v0);
  uint64_t v9 = self;
  uint64_t v10 = &selRef_systemLightGrayColor;
  if ((v7 & 1) == 0) {
    uint64_t v10 = &selRef_systemDarkGrayColor;
  }
  id v11 = [v9 *v10];
  return Color.init(uiColor:)();
}

uint64_t sub_1002E46A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PinContainer();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + *(int *)(v14 + 44), v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a3) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, a3);
  (*(void (**)(char *, uint64_t))(a1 + *(int *)(v14 + 72)))(v13, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a3);
}

uint64_t sub_1002E48AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v42[1] = a2;
  uint64_t v52 = a6;
  uint64_t v50 = sub_10000F214(&qword_100527BA8);
  __chkstk_darwin(v50);
  uint64_t v44 = (uint64_t)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000F214(&qword_100527BB0);
  uint64_t v48 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v43 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v47 = (char *)v42 - v13;
  uint64_t v49 = sub_10000F214(&qword_100527BB8);
  __chkstk_darwin(v49);
  uint64_t v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ResultLookupState();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  int v22 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v23 = type metadata accessor for PinContainer();
  sub_10000FB74(a1 + *(int *)(v23 + 52), (uint64_t)v18, &qword_10051A308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10000FBD8((uint64_t)v18, &qword_10051A308);
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = sub_10000F69C(&qword_100526940);
    unint64_t v25 = sub_1002E8778();
    unint64_t v26 = sub_1002A9A7C();
    uint64_t v53 = v50;
    uint64_t v54 = v24;
    unint64_t v55 = v25;
    unint64_t v56 = v26;
    swift_getOpaqueTypeConformance2();
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    sub_1002EC5AC((uint64_t)v18, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    uint64_t v28 = sub_1002DDACC();
    uint64_t v30 = v44;
    sub_10004A56C((uint64_t)v22, a1, v28, v31, v29 & 1, v44);
    swift_release();
    uint64_t v32 = swift_release();
    __chkstk_darwin(v32);
    uint64_t v33 = v46;
    v42[-4] = v45;
    v42[-3] = v33;
    v42[-2] = a5;
    v42[-1] = a1;
    uint64_t v34 = sub_10000F214(&qword_100526940);
    unint64_t v35 = sub_1002E8778();
    unint64_t v36 = sub_1002A9A7C();
    uint64_t v37 = v43;
    uint64_t v38 = v50;
    View.contextMenu<A>(menuItems:)();
    sub_10000FBD8(v30, &qword_100527BA8);
    uint64_t v40 = v47;
    uint64_t v39 = v48;
    uint64_t v41 = v51;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v37, v51);
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v15, v40, v41);
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = v38;
    uint64_t v54 = v34;
    unint64_t v55 = v35;
    unint64_t v56 = v36;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    return sub_1002EC7A4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  }
}

uint64_t sub_1002E4DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v9 = type metadata accessor for PinContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = sub_10000F214(&qword_100526960);
  uint64_t v22 = *(void *)(v13 - 8);
  uint64_t v23 = v13;
  double v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, v9, v14);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a2;
  *((void *)v18 + 3) = a3;
  *((void *)v18 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], v12, v9);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  sub_10000F214(&qword_1005269B8);
  sub_1002A9EC4();
  Button.init(action:label:)();
  sub_100013AA8(&qword_100526958, &qword_100526960);
  uint64_t v19 = v23;
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v16, v19);
}

uint64_t sub_1002E5054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PinContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v12 - 8);
  double v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  type metadata accessor for MainActor();
  uint64_t v16 = static MainActor.shared.getter();
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = v16;
  *((void *)v18 + 3) = &protocol witness table for MainActor;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = a3;
  *((void *)v18 + 6) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v17], v11, v8);
  sub_100064D5C((uint64_t)v14, (uint64_t)&unk_100527BD0, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_1002E5250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for MainActor();
  v7[6] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[7] = v9;
  v7[8] = v8;
  return _swift_task_switch(sub_1002E52EC, v9, v8);
}

uint64_t sub_1002E52EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for PinContainer() + 52);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002E539C;
  return sub_10014CD60(v2);
}

uint64_t sub_1002E539C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return _swift_task_switch(sub_1002E54BC, v3, v2);
}

uint64_t sub_1002E54BC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E551C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_10051E360);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a1;
  Label.init(title:icon:)();
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002E56C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  sub_1000317A0();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  *(void *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_1002E57F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FBKSEvaluation.Action();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for PinContainer() + 68));
  swift_getKeyPath();
  v12[1] = v8;
  sub_1002E8980((unint64_t *)&qword_100521388, (void (*)(uint64_t))type metadata accessor for FeedbackController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = *(void **)(v8 + 16);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for FBKSEvaluation.Action.reportConcern(_:), v4);
  id v10 = v9;
  dispatch thunk of FBKEvaluationController.systemImageName(action:)();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = Image.init(_internalSystemName:)();
  *a2 = result;
  return result;
}

uint64_t sub_1002E59B4(char a1)
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000F378(v2, (uint64_t)qword_10055E2E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v11 = v6;
    if (a1) {
      uint64_t v7 = 1853321060;
    }
    else {
      uint64_t v7 = 28789;
    }
    if (a1) {
      unint64_t v8 = 0xE400000000000000;
    }
    else {
      unint64_t v8 = 0xE200000000000000;
    }
    sub_1003806B0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Resetting look up states due to pill swipe gesture (%s)", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = type metadata accessor for PinContainer();
  return sub_1002E06CC(v9);
}

uint64_t sub_1002E5BA0@<X0>(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_10004ECF4(a1, (uint64_t)v5);
  uint64_t v3 = type metadata accessor for PinContainer();
  uint64_t result = sub_1002DED70((uint64_t)v5, v3);
  *a2 = result;
  return result;
}

Swift::Int sub_1002E5C14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100045FDC(v2);
  }
  Swift::Int v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1002E5CA0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1002E5C80(long long *a1)
{
  return sub_1002E05B0(a1, *(void *)(v1 + 16)) & 1;
}

Swift::Int sub_1002E5CA0(Swift::Int *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_329;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v146 = -1;
      Swift::Int v147 = *v2;
      uint64_t v148 = 1;
      Swift::Int v149 = *v2;
LABEL_243:
      uint64_t v150 = v146;
      Swift::Int result = v149;
      while (2)
      {
        Swift::Int v151 = result + 40;
        uint64_t v152 = *(void *)(result + 40);
        char v153 = *(unsigned char *)(result + 72);
        uint64_t v154 = *(void *)result;
        uint64_t v155 = *(void *)(result + 8);
        uint64_t v157 = *(void *)(result + 16);
        uint64_t v156 = *(void *)(result + 24);
        unint64_t v158 = 700;
        switch(v153)
        {
          case 1:
            unint64_t v158 = 900;
            break;
          case 2:
            unint64_t v158 = 800;
            break;
          case 3:
            uint64_t v159 = *(void *)(result + 48);
            uint64_t v160 = *(void *)(result + 56) | *(void *)(result + 64);
            if (v160 | v152 | v159)
            {
              uint64_t v161 = v160 | v159;
              if (v152 == 1 && v161 == 0)
              {
                unint64_t v158 = 600;
              }
              else if (v152 == 2 && v161 == 0)
              {
                unint64_t v158 = 350;
              }
              else if (v152 != 3 || v161)
              {
                if (v161) {
                  BOOL v164 = 0;
                }
                else {
                  BOOL v164 = v152 == 4;
                }
                if (v164) {
                  unint64_t v158 = 850;
                }
                else {
                  unint64_t v158 = 100;
                }
              }
              else
              {
                unint64_t v158 = 400;
              }
            }
            else
            {
              unint64_t v158 = 1000;
            }
            break;
          default:
            break;
        }
        unint64_t v165 = 700;
        switch(*(unsigned char *)(result + 32))
        {
          case 1:
            unint64_t v165 = 900;
            goto LABEL_280;
          case 2:
            unint64_t v165 = 800;
            goto LABEL_280;
          case 3:
            if (!(v157 | v155 | v154 | v156)) {
              goto LABEL_242;
            }
            uint64_t v166 = v157 | v155 | v156;
            if (v154 == 1 && v166 == 0)
            {
              unint64_t v165 = 600;
            }
            else if (v154 != 2 || v166)
            {
              if (v154 != 3 || v166)
              {
                if (v166) {
                  BOOL v173 = 0;
                }
                else {
                  BOOL v173 = v154 == 4;
                }
                if (v173) {
                  unint64_t v165 = 850;
                }
                else {
                  unint64_t v165 = 100;
                }
              }
              else
              {
                unint64_t v165 = 400;
              }
            }
            else
            {
              unint64_t v165 = 350;
            }
LABEL_280:
            if (v165 >= v158) {
              goto LABEL_242;
            }
            if (!v147) {
              goto LABEL_333;
            }
            uint64_t v168 = *(void *)(result + 64);
            long long v169 = *(_OWORD *)(result + 48);
            long long v170 = *(_OWORD *)(result + 16);
            *(_OWORD *)Swift::Int v151 = *(_OWORD *)result;
            *(_OWORD *)(result + 56) = v170;
            uint64_t v171 = *(void *)(result + 32);
            *(void *)Swift::Int result = v152;
            *(_OWORD *)(result + 8) = v169;
            *(void *)(result + 24) = v168;
            *(unsigned char *)(result + 32) = v153;
            result -= 40;
            *(void *)(v151 + 32) = v171;
            if (!__CFADD__(v150++, 1)) {
              continue;
            }
LABEL_242:
            ++v148;
            v149 += 40;
            --v146;
            if (v148 != v3) {
              goto LABEL_243;
            }
            return result;
          default:
            goto LABEL_280;
        }
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_338;
  }
  Swift::Int v6 = result;
  uint64_t v190 = v1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    unint64_t __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v174 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_295;
    }
    uint64_t v185 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v185 = (void *)v8;
    unint64_t __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  Swift::Int v11 = *v2;
  uint64_t v184 = *v2 + 56;
  uint64_t v182 = v2;
  uint64_t v183 = *v2 - 40;
  uint64_t v189 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v186 = v6;
  Swift::Int v187 = v3;
  do
  {
    Swift::Int v13 = v10++;
    if (v10 < v3)
    {
      uint64_t v14 = (uint64_t *)(v11 + 40 * v10);
      uint64_t v15 = *v14;
      uint64_t v16 = (uint64_t *)(v11 + 40 * v13);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v20 = v16[2];
      uint64_t v19 = v16[3];
      uint64_t v21 = *((unsigned __int8 *)v16 + 32);
      unint64_t v22 = 700;
      switch(*((unsigned char *)v14 + 32))
      {
        case 1:
          unint64_t v22 = 900;
          break;
        case 2:
          unint64_t v22 = 800;
          break;
        case 3:
          uint64_t v24 = v14[2];
          uint64_t v23 = v14[3];
          uint64_t v25 = v14[1];
          uint64_t v26 = v24 | v23;
          uint64_t v27 = v26 | v15 | v25;
          uint64_t v28 = v26 | v25;
          if (v28) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v15 == 4;
          }
          if (v29) {
            uint64_t v30 = 850;
          }
          else {
            uint64_t v30 = 100;
          }
          if (v15 == 3 && v28 == 0) {
            uint64_t v30 = 400;
          }
          if (v15 == 2 && v28 == 0) {
            uint64_t v30 = 350;
          }
          BOOL v33 = v15 == 1 && v28 == 0;
          unint64_t v22 = 600;
          if (!v33) {
            unint64_t v22 = v30;
          }
          if (!v27) {
            unint64_t v22 = 1000;
          }
          break;
        default:
          break;
      }
      unint64_t v34 = 700;
      switch(v21)
      {
        case 1:
          unint64_t v34 = 900;
          break;
        case 2:
          unint64_t v34 = 800;
          break;
        case 3:
          if (v20 | v18 | v17 | v19)
          {
            uint64_t v35 = v20 | v18 | v19;
            if (v17 == 1 && v35 == 0)
            {
              unint64_t v34 = 600;
            }
            else if (v17 == 2 && v35 == 0)
            {
              unint64_t v34 = 350;
            }
            else if (v17 == 3 && v35 == 0)
            {
              unint64_t v34 = 400;
            }
            else
            {
              if (v35) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = v17 == 4;
              }
              if (v39) {
                unint64_t v34 = 850;
              }
              else {
                unint64_t v34 = 100;
              }
            }
          }
          else
          {
            unint64_t v34 = 1000;
          }
          break;
        default:
          break;
      }
      Swift::Int v10 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v40 = v184 + 40 * v13;
        while (2)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)(v40 + 24);
          uint64_t v43 = *(unsigned __int8 *)(v40 + 56);
          uint64_t v44 = *(void *)(v40 - 16);
          uint64_t v45 = *(void *)(v40 - 8);
          uint64_t v47 = *(void *)v40;
          uint64_t v46 = *(void *)(v40 + 8);
          v40 += 40;
          unint64_t v48 = 700;
          switch(v43)
          {
            case 1:
              unint64_t v48 = 900;
              break;
            case 2:
              unint64_t v48 = 800;
              break;
            case 3:
              uint64_t v49 = *(void *)(v41 + 32);
              uint64_t v50 = *(void *)(v41 + 40) | *(void *)(v41 + 48);
              if (v50 | v42 | v49)
              {
                uint64_t v51 = v50 | v49;
                if (v42 == 1 && v51 == 0)
                {
                  unint64_t v48 = 600;
                }
                else if (v42 == 2 && v51 == 0)
                {
                  unint64_t v48 = 350;
                }
                else if (v42 != 3 || v51)
                {
                  if (v51) {
                    BOOL v54 = 0;
                  }
                  else {
                    BOOL v54 = v42 == 4;
                  }
                  if (v54) {
                    unint64_t v48 = 850;
                  }
                  else {
                    unint64_t v48 = 100;
                  }
                }
                else
                {
                  unint64_t v48 = 400;
                }
              }
              else
              {
                unint64_t v48 = 1000;
              }
              break;
            default:
              break;
          }
          unint64_t v55 = 700;
          switch(*(unsigned char *)(v41 + 16))
          {
            case 1:
              unint64_t v55 = 900;
              goto LABEL_109;
            case 2:
              unint64_t v55 = 800;
              goto LABEL_109;
            case 3:
              if (v47 | v45 | v44 | v46)
              {
                uint64_t v56 = v47 | v45 | v46;
                if (v44 == 1 && v56 == 0)
                {
                  unint64_t v55 = 600;
                }
                else if (v44 != 2 || v56)
                {
                  if (v44 != 3 || v56)
                  {
                    if (v56) {
                      BOOL v58 = 0;
                    }
                    else {
                      BOOL v58 = v44 == 4;
                    }
                    if (v58) {
                      unint64_t v55 = 850;
                    }
                    else {
                      unint64_t v55 = 100;
                    }
                  }
                  else
                  {
                    unint64_t v55 = 400;
                  }
                }
                else
                {
                  unint64_t v55 = 350;
                }
LABEL_109:
                if (v34 < v22 == v55 >= v48) {
                  break;
                }
              }
              else if (v34 < v22)
              {
                goto LABEL_122;
              }
              if (v3 != ++v10) {
                continue;
              }
              Swift::Int v10 = v3;
              break;
            default:
              goto LABEL_109;
          }
          break;
        }
      }
      if (v34 < v22)
      {
LABEL_122:
        if (v10 < v13) {
          goto LABEL_330;
        }
        if (v13 < v10)
        {
          uint64_t v59 = 40 * v10;
          uint64_t v60 = 40 * v13;
          Swift::Int v61 = v10;
          Swift::Int v62 = v13;
          do
          {
            if (v62 != --v61)
            {
              if (!v11) {
                goto LABEL_336;
              }
              Swift::Int v63 = v11 + v60;
              char v64 = *(unsigned char *)(v11 + v60 + 32);
              Swift::Int v65 = v11 + v59;
              long long v66 = *(_OWORD *)(v11 + v60);
              long long v67 = *(_OWORD *)(v11 + v60 + 16);
              uint64_t v68 = *(void *)(v11 + v59 - 8);
              long long v69 = *(_OWORD *)(v11 + v59 - 24);
              *(_OWORD *)Swift::Int v63 = *(_OWORD *)(v11 + v59 - 40);
              *(_OWORD *)(v63 + 16) = v69;
              *(void *)(v63 + 32) = v68;
              *(_OWORD *)(v65 - 40) = v66;
              *(_OWORD *)(v65 - 24) = v67;
              *(unsigned char *)(v65 - 8) = v64;
            }
            ++v62;
            v59 -= 40;
            v60 += 40;
          }
          while (v62 < v61);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v13)) {
        goto LABEL_328;
      }
      if (v10 - v13 < v6)
      {
        if (__OFADD__(v13, v6)) {
          goto LABEL_331;
        }
        if (v13 + v6 >= v3) {
          Swift::Int v70 = v3;
        }
        else {
          Swift::Int v70 = v13 + v6;
        }
        if (v70 >= v13)
        {
          if (v10 != v70)
          {
            uint64_t v121 = v183 + 40 * v10;
            uint64_t v71 = v189;
LABEL_188:
            Swift::Int v122 = v13;
            uint64_t v123 = v121;
            while (2)
            {
              uint64_t v124 = v123 + 40;
              uint64_t v125 = *(void *)(v123 + 40);
              char v126 = *(unsigned char *)(v123 + 72);
              uint64_t v128 = *(void *)v123;
              uint64_t v127 = *(void *)(v123 + 8);
              uint64_t v130 = *(void *)(v123 + 16);
              uint64_t v129 = *(void *)(v123 + 24);
              unint64_t v131 = 700;
              switch(v126)
              {
                case 1:
                  unint64_t v131 = 900;
                  break;
                case 2:
                  unint64_t v131 = 800;
                  break;
                case 3:
                  uint64_t v132 = *(void *)(v123 + 48);
                  uint64_t v133 = *(void *)(v123 + 56) | *(void *)(v123 + 64);
                  if (v133 | v125 | v132)
                  {
                    uint64_t v134 = v133 | v132;
                    if (v125 == 1 && v134 == 0)
                    {
                      unint64_t v131 = 600;
                    }
                    else if (v125 == 2 && v134 == 0)
                    {
                      unint64_t v131 = 350;
                    }
                    else if (v125 != 3 || v134)
                    {
                      if (v134) {
                        BOOL v137 = 0;
                      }
                      else {
                        BOOL v137 = v125 == 4;
                      }
                      if (v137) {
                        unint64_t v131 = 850;
                      }
                      else {
                        unint64_t v131 = 100;
                      }
                    }
                    else
                    {
                      unint64_t v131 = 400;
                    }
                  }
                  else
                  {
                    unint64_t v131 = 1000;
                  }
                  break;
                default:
                  break;
              }
              unint64_t v138 = 700;
              switch(*(unsigned char *)(v123 + 32))
              {
                case 1:
                  unint64_t v138 = 900;
                  goto LABEL_225;
                case 2:
                  unint64_t v138 = 800;
                  goto LABEL_225;
                case 3:
                  if (!(v130 | v127 | v128 | v129)) {
                    goto LABEL_187;
                  }
                  uint64_t v139 = v130 | v127 | v129;
                  if (v128 == 1 && v139 == 0)
                  {
                    unint64_t v138 = 600;
                  }
                  else if (v128 != 2 || v139)
                  {
                    if (v128 != 3 || v139)
                    {
                      if (v139) {
                        BOOL v145 = 0;
                      }
                      else {
                        BOOL v145 = v128 == 4;
                      }
                      if (v145) {
                        unint64_t v138 = 850;
                      }
                      else {
                        unint64_t v138 = 100;
                      }
                    }
                    else
                    {
                      unint64_t v138 = 400;
                    }
                  }
                  else
                  {
                    unint64_t v138 = 350;
                  }
LABEL_225:
                  if (v138 >= v131) {
                    goto LABEL_187;
                  }
                  if (!v11) {
                    goto LABEL_334;
                  }
                  uint64_t v141 = *(void *)(v123 + 64);
                  long long v142 = *(_OWORD *)(v123 + 48);
                  long long v143 = *(_OWORD *)(v123 + 16);
                  *(_OWORD *)uint64_t v124 = *(_OWORD *)v123;
                  *(_OWORD *)(v123 + 56) = v143;
                  uint64_t v144 = *(void *)(v123 + 32);
                  *(void *)uint64_t v123 = v125;
                  *(_OWORD *)(v123 + 8) = v142;
                  *(void *)(v123 + 24) = v141;
                  *(unsigned char *)(v123 + 32) = v126;
                  v123 -= 40;
                  ++v122;
                  *(void *)(v124 + 32) = v144;
                  if (v10 != v122) {
                    continue;
                  }
LABEL_187:
                  ++v10;
                  v121 += 40;
                  if (v10 != v70) {
                    goto LABEL_188;
                  }
                  Swift::Int v10 = v70;
                  if (v70 < v13) {
                    goto LABEL_323;
                  }
                  goto LABEL_140;
                default:
                  goto LABEL_225;
              }
            }
          }
          goto LABEL_139;
        }
LABEL_332:
        __break(1u);
LABEL_333:
        __break(1u);
LABEL_334:
        __break(1u);
LABEL_335:
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1002E6908);
      }
    }
LABEL_139:
    uint64_t v71 = v189;
    if (v10 < v13) {
      goto LABEL_323;
    }
LABEL_140:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v71 = sub_1000456E8(0, *((void *)v71 + 2) + 1, 1, v71);
    }
    unint64_t v73 = *((void *)v71 + 2);
    unint64_t v72 = *((void *)v71 + 3);
    unint64_t v12 = v73 + 1;
    if (v73 >= v72 >> 1) {
      uint64_t v71 = sub_1000456E8((char *)(v72 > 1), v73 + 1, 1, v71);
    }
    *((void *)v71 + 2) = v12;
    uint64_t v74 = v71 + 32;
    uint64_t v75 = &v71[16 * v73 + 32];
    *(void *)uint64_t v75 = v13;
    *((void *)v75 + 1) = v10;
    uint64_t v189 = v71;
    if (v73)
    {
      while (1)
      {
        unint64_t v76 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v81 = &v74[16 * v12];
          uint64_t v82 = *((void *)v81 - 8);
          uint64_t v83 = *((void *)v81 - 7);
          BOOL v87 = __OFSUB__(v83, v82);
          uint64_t v84 = v83 - v82;
          if (v87) {
            goto LABEL_312;
          }
          uint64_t v86 = *((void *)v81 - 6);
          uint64_t v85 = *((void *)v81 - 5);
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v79 = v85 - v86;
          char v80 = v87;
          if (v87) {
            goto LABEL_313;
          }
          unint64_t v88 = v12 - 2;
          uint64_t v89 = &v74[16 * v12 - 32];
          uint64_t v91 = *(void *)v89;
          uint64_t v90 = *((void *)v89 + 1);
          BOOL v87 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          if (v87) {
            goto LABEL_315;
          }
          BOOL v87 = __OFADD__(v79, v92);
          uint64_t v93 = v79 + v92;
          if (v87) {
            goto LABEL_318;
          }
          if (v93 >= v84)
          {
            uint64_t v111 = &v74[16 * v76];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v87 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v87) {
              goto LABEL_322;
            }
            BOOL v104 = v79 < v114;
            goto LABEL_176;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v105 = *((void *)v71 + 4);
            uint64_t v106 = *((void *)v71 + 5);
            BOOL v87 = __OFSUB__(v106, v105);
            uint64_t v98 = v106 - v105;
            char v99 = v87;
            goto LABEL_170;
          }
          uint64_t v78 = *((void *)v71 + 4);
          uint64_t v77 = *((void *)v71 + 5);
          BOOL v87 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          char v80 = v87;
        }
        if (v80) {
          goto LABEL_314;
        }
        unint64_t v88 = v12 - 2;
        unint64_t v94 = &v74[16 * v12 - 32];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v97 = __OFSUB__(v95, v96);
        uint64_t v98 = v95 - v96;
        char v99 = v97;
        if (v97) {
          goto LABEL_317;
        }
        int v100 = &v74[16 * v76];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v87 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v87) {
          goto LABEL_320;
        }
        if (__OFADD__(v98, v103)) {
          goto LABEL_321;
        }
        if (v98 + v103 >= v79)
        {
          BOOL v104 = v79 < v103;
LABEL_176:
          if (v104) {
            unint64_t v76 = v88;
          }
          goto LABEL_178;
        }
LABEL_170:
        if (v99) {
          goto LABEL_316;
        }
        uint64_t v107 = &v74[16 * v76];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v87 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v87) {
          goto LABEL_319;
        }
        if (v110 < v98) {
          goto LABEL_15;
        }
LABEL_178:
        unint64_t v115 = v76 - 1;
        if (v76 - 1 >= v12)
        {
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
LABEL_323:
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
          goto LABEL_332;
        }
        if (!v11) {
          goto LABEL_335;
        }
        uint64_t v116 = &v74[16 * v115];
        uint64_t v117 = *(void *)v116;
        int v118 = &v74[16 * v76];
        uint64_t v119 = *((void *)v118 + 1);
        sub_1002E6988((char *)(v11 + 40 * *(void *)v116), (char *)(v11 + 40 * *(void *)v118), v11 + 40 * v119, __dst);
        if (v190) {
          goto LABEL_240;
        }
        if (v119 < v117) {
          goto LABEL_309;
        }
        if (v76 > *((void *)v189 + 2)) {
          goto LABEL_310;
        }
        *(void *)uint64_t v116 = v117;
        *(void *)&v74[16 * v115 + 8] = v119;
        unint64_t v120 = *((void *)v189 + 2);
        if (v76 >= v120) {
          goto LABEL_311;
        }
        uint64_t v71 = v189;
        unint64_t v12 = v120 - 1;
        memmove(&v74[16 * v76], v118 + 16, 16 * (v120 - 1 - v76));
        *((void *)v189 + 2) = v120 - 1;
        if (v120 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v6 = v186;
    Swift::Int v3 = v187;
  }
  while (v10 < v187);
  uint64_t v9 = v185;
  uint64_t v174 = v189;
  uint64_t v2 = v182;
LABEL_295:
  uint64_t v185 = v9;
  if (v12 >= 2)
  {
    Swift::Int v175 = *v2;
    do
    {
      unint64_t v176 = v12 - 2;
      if (v12 < 2) {
        goto LABEL_324;
      }
      if (!v175) {
        goto LABEL_337;
      }
      Swift::String v177 = v174;
      uint64_t v178 = *(void *)&v174[16 * v176 + 32];
      uint64_t v179 = *(void *)&v174[16 * v12 + 24];
      sub_1002E6988((char *)(v175 + 40 * v178), (char *)(v175 + 40 * *(void *)&v174[16 * v12 + 16]), v175 + 40 * v179, __dst);
      if (v190) {
        break;
      }
      if (v179 < v178) {
        goto LABEL_325;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v177 = sub_100045F20((uint64_t)v177);
      }
      if (v176 >= *((void *)v177 + 2)) {
        goto LABEL_326;
      }
      unint64_t v180 = &v177[16 * v176 + 32];
      *(void *)unint64_t v180 = v178;
      *((void *)v180 + 1) = v179;
      unint64_t v181 = *((void *)v177 + 2);
      if (v12 > v181) {
        goto LABEL_327;
      }
      memmove(&v177[16 * v12 + 16], &v177[16 * v12 + 32], 16 * (v181 - v12));
      uint64_t v174 = v177;
      *((void *)v177 + 2) = v181 - 1;
      unint64_t v12 = v181 - 1;
    }
    while (v181 > 2);
  }
LABEL_240:
  swift_bridgeObjectRelease();
  v185[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E6988(char *__src, char *a2, unint64_t a3, char *__dst)
{
  os_log_type_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  Swift::Int v61 = __dst;
  Swift::Int v62 = __src;
  if (v9 < v11)
  {
    if (v8 >= -39)
    {
      size_t v12 = 40 * v9;
      if (__dst != __src || &__src[v12] <= __dst) {
        memmove(__dst, __src, v12);
      }
      Swift::Int v13 = &v4[v12];
      uint64_t v60 = &v4[v12];
      if ((unint64_t)v6 < a3 && v8 >= 40)
      {
        while (2)
        {
          uint64_t v14 = *(void *)v6;
          uint64_t v15 = *(void *)v4;
          uint64_t v16 = *((void *)v4 + 1);
          uint64_t v18 = *((void *)v4 + 2);
          uint64_t v17 = *((void *)v4 + 3);
          unint64_t v19 = 700;
          switch(v6[32])
          {
            case 1:
              unint64_t v19 = 900;
              break;
            case 2:
              unint64_t v19 = 800;
              break;
            case 3:
              uint64_t v20 = *((void *)v6 + 1);
              uint64_t v21 = *((void *)v6 + 2) | *((void *)v6 + 3);
              if (v21 | v14 | v20)
              {
                uint64_t v22 = v21 | v20;
                if (v14 == 1 && v22 == 0)
                {
                  unint64_t v19 = 600;
                }
                else if (v14 == 2 && v22 == 0)
                {
                  unint64_t v19 = 350;
                }
                else if (v14 != 3 || v22)
                {
                  if (v22) {
                    BOOL v25 = 0;
                  }
                  else {
                    BOOL v25 = v14 == 4;
                  }
                  if (v25) {
                    unint64_t v19 = 850;
                  }
                  else {
                    unint64_t v19 = 100;
                  }
                }
                else
                {
                  unint64_t v19 = 400;
                }
              }
              else
              {
                unint64_t v19 = 1000;
              }
              break;
            default:
              break;
          }
          unint64_t v26 = 700;
          switch(v4[32])
          {
            case 1:
              unint64_t v26 = 900;
              goto LABEL_44;
            case 2:
              unint64_t v26 = 800;
              goto LABEL_44;
            case 3:
              if (!(v18 | v16 | v15 | v17)) {
                goto LABEL_49;
              }
              uint64_t v27 = v18 | v16 | v17;
              if (v15 == 1 && v27 == 0)
              {
                unint64_t v26 = 600;
              }
              else if (v15 != 2 || v27)
              {
                if (v15 != 3 || v27)
                {
                  if (v27) {
                    BOOL v34 = 0;
                  }
                  else {
                    BOOL v34 = v15 == 4;
                  }
                  if (v34) {
                    unint64_t v26 = 850;
                  }
                  else {
                    unint64_t v26 = 100;
                  }
                }
                else
                {
                  unint64_t v26 = 400;
                }
              }
              else
              {
                unint64_t v26 = 350;
              }
LABEL_44:
              if (v26 >= v19)
              {
LABEL_49:
                if (v7 != v4)
                {
                  long long v32 = *(_OWORD *)v4;
                  long long v33 = *((_OWORD *)v4 + 1);
                  *((void *)v7 + 4) = *((void *)v4 + 4);
                  *(_OWORD *)uint64_t v7 = v32;
                  *((_OWORD *)v7 + 1) = v33;
                }
                v4 += 40;
                Swift::Int v61 = v4;
                BOOL v29 = v6;
              }
              else
              {
                BOOL v29 = v6 + 40;
                if (v7 < v6 || v7 >= v29 || v7 != v6)
                {
                  long long v30 = *(_OWORD *)v6;
                  long long v31 = *((_OWORD *)v6 + 1);
                  *((void *)v7 + 4) = *((void *)v6 + 4);
                  *(_OWORD *)uint64_t v7 = v30;
                  *((_OWORD *)v7 + 1) = v31;
                }
              }
              v7 += 40;
              if (v4 < v13)
              {
                Swift::Int v6 = v29;
                if ((unint64_t)v29 < a3) {
                  continue;
                }
              }
              Swift::Int v62 = v7;
              break;
            default:
              goto LABEL_44;
          }
          break;
        }
      }
      goto LABEL_128;
    }
LABEL_129:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1002E6EBCLL);
  }
  if (v10 < -39) {
    goto LABEL_129;
  }
  uint64_t v35 = 40 * v11;
  if (__dst != a2 || &a2[v35] <= __dst) {
    memmove(__dst, a2, 40 * v11);
  }
  unint64_t v36 = &v4[v35];
  uint64_t v60 = &v4[v35];
  Swift::Int v62 = v6;
  if (v7 < v6 && v10 >= 40)
  {
    unint64_t v37 = a3 - 40;
    uint64_t v38 = v6;
    while (1)
    {
      BOOL v39 = (char *)(v37 + 40);
      uint64_t v40 = *((void *)v36 - 5);
      uint64_t v42 = *((void *)v38 - 5);
      uint64_t v41 = *((void *)v38 - 4);
      v38 -= 40;
      uint64_t v44 = *((void *)v38 + 2);
      uint64_t v43 = *((void *)v38 + 3);
      unint64_t v45 = 700;
      switch(*(v36 - 8))
      {
        case 1:
          unint64_t v45 = 900;
          break;
        case 2:
          unint64_t v45 = 800;
          break;
        case 3:
          uint64_t v46 = *((void *)v36 - 4);
          uint64_t v47 = *((void *)v36 - 3) | *((void *)v36 - 2);
          if (v47 | v40 | v46)
          {
            uint64_t v48 = v47 | v46;
            if (v40 == 1 && v48 == 0)
            {
              unint64_t v45 = 600;
            }
            else if (v40 != 2 || v48)
            {
              if (v40 != 3 || v48)
              {
                if (v48) {
                  BOOL v57 = 0;
                }
                else {
                  BOOL v57 = v40 == 4;
                }
                if (v57) {
                  unint64_t v45 = 850;
                }
                else {
                  unint64_t v45 = 100;
                }
              }
              else
              {
                unint64_t v45 = 400;
              }
            }
            else
            {
              unint64_t v45 = 350;
            }
          }
          else
          {
            unint64_t v45 = 1000;
          }
          break;
        default:
          break;
      }
      unint64_t v50 = 700;
      switch(v38[32])
      {
        case 1:
          unint64_t v50 = 900;
          goto LABEL_96;
        case 2:
          unint64_t v50 = 800;
          goto LABEL_96;
        case 3:
          if (!(v44 | v41 | v42 | v43)) {
            goto LABEL_102;
          }
          uint64_t v51 = v44 | v41 | v43;
          if (v42 == 1 && v51 == 0)
          {
            unint64_t v50 = 600;
          }
          else if (v42 != 2 || v51)
          {
            if (v42 != 3 || v51)
            {
              if (v51) {
                BOOL v58 = 0;
              }
              else {
                BOOL v58 = v42 == 4;
              }
              if (v58) {
                unint64_t v50 = 850;
              }
              else {
                unint64_t v50 = 100;
              }
            }
            else
            {
              unint64_t v50 = 400;
            }
          }
          else
          {
            unint64_t v50 = 350;
          }
LABEL_96:
          if (v50 >= v45)
          {
LABEL_102:
            uint64_t v60 = v36 - 40;
            if (v39 < v36 || v37 >= (unint64_t)v36 || v39 != v36)
            {
              long long v55 = *(_OWORD *)(v36 - 40);
              long long v56 = *(_OWORD *)(v36 - 24);
              *(void *)(v37 + 32) = *((void *)v36 - 1);
              *(_OWORD *)unint64_t v37 = v55;
              *(_OWORD *)(v37 + 16) = v56;
            }
            uint64_t v38 = v6;
            v36 -= 40;
            if (v6 <= v7) {
              goto LABEL_128;
            }
          }
          else
          {
            if (v39 != v6 || v37 >= (unint64_t)v6)
            {
              long long v53 = *(_OWORD *)v38;
              long long v54 = *((_OWORD *)v38 + 1);
              *(void *)(v37 + 32) = *((void *)v38 + 4);
              *(_OWORD *)unint64_t v37 = v53;
              *(_OWORD *)(v37 + 16) = v54;
            }
            Swift::Int v62 = v38;
            if (v38 <= v7) {
              goto LABEL_128;
            }
          }
          v37 -= 40;
          Swift::Int v6 = v38;
          if (v36 <= v4) {
            goto LABEL_128;
          }
          break;
        default:
          goto LABEL_96;
      }
    }
  }
LABEL_128:
  sub_100045BB8((void **)&v62, (const void **)&v61, &v60);
  return 1;
}

uint64_t sub_1002E6EFC(long long *a1)
{
  return sub_1002E0080(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_1002E6F20(uint64_t *a1)
{
  return sub_1002E0324(a1, *(void *)(v1 + 40)) & 1;
}

uint64_t sub_1002E6F44(long long *a1)
{
  return sub_1002E0478(a1, *(void *)(v1 + 40)) & 1;
}

uint64_t sub_1002E6F6C@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = *(void *)(type metadata accessor for PinContainer() - 8);
  uint64_t v9 = (uint64_t)v2 + ((*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_1002DEEC0(a1, v9, v5, v6, v7, a2);
}

unint64_t sub_1002E7014()
{
  unint64_t result = qword_100527B28;
  if (!qword_100527B28)
  {
    sub_10000F69C(&qword_100527B18);
    sub_1002E7090();
    sub_10015F1E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527B28);
  }
  return result;
}

unint64_t sub_1002E7090()
{
  unint64_t result = qword_100527B30;
  if (!qword_100527B30)
  {
    sub_10000F69C(&qword_100527B38);
    sub_10000F69C(&qword_100527B40);
    sub_1002E7164();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527B30);
  }
  return result;
}

unint64_t sub_1002E7164()
{
  unint64_t result = qword_100527B48;
  if (!qword_100527B48)
  {
    sub_10000F69C(&qword_100527B40);
    sub_1002E7210();
    sub_1002E8980(&qword_100526930, (void (*)(uint64_t))type metadata accessor for SwipeToDismissModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527B48);
  }
  return result;
}

unint64_t sub_1002E7210()
{
  unint64_t result = qword_100527B50;
  if (!qword_100527B50)
  {
    sub_10000F69C(&qword_100527B58);
    sub_1002E72B0();
    sub_100013AA8(&qword_100519988, &qword_100519960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527B50);
  }
  return result;
}

unint64_t sub_1002E72B0()
{
  unint64_t result = qword_100527B60;
  if (!qword_100527B60)
  {
    sub_10000F69C(&qword_100527B68);
    sub_100013AA8(&qword_100527B70, &qword_100527B78);
    sub_100013AA8(&qword_100527B80, &qword_100527B88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527B60);
  }
  return result;
}

unint64_t sub_1002E7374()
{
  unint64_t result = qword_100527B90;
  if (!qword_100527B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527B90);
  }
  return result;
}

uint64_t sub_1002E73CC(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for PinContainer() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v1 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_1002DFA50(v2, v1 + v6, v7, v3, v4);
}

uint64_t sub_1002E7498(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002E74D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E11EC(*(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(long long **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(void *)(v1 + 32));
}

uint64_t sub_1002E750C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E48AC(v1[5], v1[6], v1[2], v1[3], v1[4], a1);
}

double sub_1002E751C@<D0>(uint64_t a1@<X8>)
{
  sub_1002E871C();
  ContainerValues.subscript.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_1002E7574()
{
  return ContainerValues.subscript.setter();
}

uint64_t sub_1002E75CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for PinContainer();
  uint64_t v69 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  Swift::Int v70 = (int *)v2;
  uint64_t v3 = v0 + ((v69 + 40) & ~v69);
  uint64_t v4 = v3 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v5 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v6 = v4 + v5[10];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[18];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = v4 + v5[22];
  if (!v9(v11, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v3 + v70[11];
  uint64_t v13 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v1);
  }
  uint64_t v14 = v3 + v70[13];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v46 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v14, v46);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_60;
            case 1:
              uint64_t v47 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v14, v47);
              uint64_t v48 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v49 = v14 + v48[13];
              uint64_t v50 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v51 = *(void *)(v50 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50)) {
                (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
              }
              uint64_t v52 = (uint64_t *)(v14 + v48[14]);
              unint64_t v53 = v52[1];
              if (v53 >> 60 != 15) {
                sub_100038B34(*v52, v53);
              }
              if (*(void *)(v14 + v48[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v54 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v14, v54);
              uint64_t v55 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v56 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v14, v56);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_60:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v57 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v57 + 48)), *(void **)(v14 + *(int *)(v57 + 48) + 8), *(void *)(v14 + *(int *)(v57 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v57 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v57 + 64)), *(void **)(v14 + *(int *)(v57 + 64) + 8), *(void *)(v14 + *(int *)(v57 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v57 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v58 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v14, v58);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_41;
            case 1:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              uint64_t v60 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v61 = v14 + v60[13];
              uint64_t v62 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v63 = *(void *)(v62 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62)) {
                (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
              }
              char v64 = (uint64_t *)(v14 + v60[14]);
              unint64_t v65 = v64[1];
              if (v65 >> 60 != 15) {
                sub_100038B34(*v64, v65);
              }
              if (*(void *)(v14 + v60[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v66 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v14, v66);
              uint64_t v67 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v67 + 52);
              goto LABEL_19;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v68 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v14, v68);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_41;
            default:
              goto LABEL_42;
          }
        }
        goto LABEL_42;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_42;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_39;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            long long v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            unint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_39:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_19:
        }
        goto LABEL_42;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_42;
    }
LABEL_41:
    swift_bridgeObjectRelease();
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1002B52E0(*(void *)(v3 + v70[20]), *(void *)(v3 + v70[20] + 8), *(unsigned char *)(v3 + v70[20] + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v3 + v70[21]), *(void *)(v3 + v70[21] + 8), *(unsigned char *)(v3 + v70[21] + 16), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v41 = v3 + v70[22];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v42 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  }
  else
  {
    swift_release();
  }
  uint64_t v43 = v3 + v70[23];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002E867C(char a1)
{
  char v1 = a1 & 1;
  type metadata accessor for PinContainer();

  return sub_1002E59B4(v1);
}

unint64_t sub_1002E871C()
{
  unint64_t result = qword_100527BA0;
  if (!qword_100527BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527BA0);
  }
  return result;
}

unint64_t sub_1002E8778()
{
  unint64_t result = qword_100527BC0;
  if (!qword_100527BC0)
  {
    sub_10000F69C(&qword_100527BA8);
    sub_1002E882C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100527BC0);
  }
  return result;
}

uint64_t sub_1002E882C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002E88B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4DDC(v1[5], v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1002E88C4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(type metadata accessor for PinContainer() - 8);
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_1002E5054(v5, v1, v2, v3);
}

uint64_t sub_1002E8954()
{
  return sub_1002E551C(v0[5], v0[2], v0[3], v0[4]);
}

uint64_t sub_1002E8960@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E56C4(a1);
}

uint64_t sub_1002E896C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002E57F4(*(void *)(v1 + 40), a1);
}

uint64_t sub_1002E8980(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002E89C8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v68 = (int *)type metadata accessor for PinContainer();
  uint64_t v69 = *(unsigned __int8 *)(*((void *)v68 - 1) + 80);
  swift_unknownObjectRelease();
  uint64_t v2 = v0 + ((v69 + 56) & ~v69);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v4 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v5 = v3 + v4[10];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = v3 + v4[18];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = v3 + v4[22];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v2 + v68[11];
  uint64_t v12 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v1);
  }
  uint64_t v13 = v2 + v68[13];
  uint64_t v14 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v16 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v16)
          {
            case 0:
              uint64_t v45 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(v13, v45);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_60;
            case 1:
              uint64_t v46 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v13, v46);
              uint64_t v47 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v48 = v13 + v47[13];
              uint64_t v49 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v50 = *(void *)(v49 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49)) {
                (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
              }
              uint64_t v51 = (uint64_t *)(v13 + v47[14]);
              unint64_t v52 = v51[1];
              if (v52 >> 60 != 15) {
                sub_100038B34(*v51, v52);
              }
              if (*(void *)(v13 + v47[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v53 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v13, v53);
              uint64_t v54 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v17 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v13, v17);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v55 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v13, v55);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_60:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v56 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v13 + *(int *)(v56 + 48)), *(void **)(v13 + *(int *)(v56 + 48) + 8), *(void *)(v13 + *(int *)(v56 + 48) + 16), *(unsigned char *)(v13 + *(int *)(v56 + 48) + 24));
          sub_10004FFD4(*(void **)(v13 + *(int *)(v56 + 64)), *(void **)(v13 + *(int *)(v56 + 64) + 8), *(void *)(v13 + *(int *)(v56 + 64) + 16), *(unsigned char *)(v13 + *(int *)(v56 + 64) + 24));
        }
        else
        {
          switch(v16)
          {
            case 0:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v13, v57);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_41;
            case 1:
              uint64_t v58 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v13, v58);
              uint64_t v59 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v60 = v13 + v59[13];
              uint64_t v61 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v62 = *(void *)(v61 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61)) {
                (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
              }
              uint64_t v63 = (uint64_t *)(v13 + v59[14]);
              unint64_t v64 = v63[1];
              if (v64 >> 60 != 15) {
                sub_100038B34(*v63, v64);
              }
              if (*(void *)(v13 + v59[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v65 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v65 - 8) + 8))(v13, v65);
              uint64_t v66 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v22 = *(int *)(v66 + 52);
              goto LABEL_19;
            case 3:
            case 4:
              uint64_t v28 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v13, v28);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v67 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v13, v67);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_41;
            default:
              goto LABEL_42;
          }
        }
        goto LABEL_42;
      case 3u:
        sub_10004FF38(*(void **)v13, *(void **)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24));
        goto LABEL_42;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v29 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v13, v29);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_39;
          case 1u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v13, v30);
            uint64_t v31 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v32 = v13 + v31[13];
            uint64_t v33 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v34 = *(void *)(v33 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33)) {
              (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
            }
            uint64_t v35 = (uint64_t *)(v13 + v31[14]);
            unint64_t v36 = v35[1];
            if (v36 >> 60 != 15) {
              sub_100038B34(*v35, v36);
            }
            if (*(void *)(v13 + v31[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v37 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v13, v37);
            uint64_t v38 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v18 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v13, v18);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v39 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v13, v39);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_39:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v19 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v13, 1, v19))
        {
          uint64_t v20 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v13, v20);
          uint64_t v21 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v22 = *(int *)(v19 + 48);
LABEL_19:
        }
        goto LABEL_42;
      case 6u:
        if (!*(void *)(v13 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v13 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v23 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v13, 1, v23)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        uint64_t v24 = type metadata accessor for EventLookupItem(0);
        uint64_t v25 = v13 + *(int *)(v24 + 20);
        uint64_t v26 = type metadata accessor for Date();
        uint64_t v27 = *(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8);
        v27(v25, v26);
        v27(v13 + *(int *)(v24 + 24), v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v13) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_42;
    }
LABEL_41:
    swift_bridgeObjectRelease();
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1002B52E0(*(void *)(v2 + v68[20]), *(void *)(v2 + v68[20] + 8), *(unsigned char *)(v2 + v68[20] + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v2 + v68[21]), *(void *)(v2 + v68[21] + 8), *(unsigned char *)(v2 + v68[21] + 16), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v40 = v2 + v68[22];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v41 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v40, v41);
  }
  else
  {
    swift_release();
  }
  uint64_t v42 = v2 + v68[23];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v43 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002E9A84(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = *(void *)(type metadata accessor for PinContainer() - 8);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000F878;
  return sub_1002E5250(a1, v8, v9, v10, v4, v5, v6);
}

uint64_t sub_1002E9BA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for PinContainer();
  uint64_t v72 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  unint64_t v73 = (int *)v2;
  uint64_t v70 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v71 = (v72 + 40) & ~v72;
  uint64_t v74 = v0;
  uint64_t v3 = v0 + v71;
  uint64_t v4 = v0 + v71 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v5 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v6 = v4 + v5[10];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[18];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = v4 + v5[22];
  if (!v9(v11, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v3 + v73[11];
  uint64_t v13 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v1);
  }
  uint64_t v14 = v3 + v73[13];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v47 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v14, v47);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_60;
            case 1:
              uint64_t v48 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v14, v48);
              uint64_t v49 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v50 = v14 + v49[13];
              uint64_t v51 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v52 = *(void *)(v51 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
                (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
              }
              uint64_t v53 = (uint64_t *)(v14 + v49[14]);
              unint64_t v54 = v53[1];
              if (v54 >> 60 != 15) {
                sub_100038B34(*v53, v54);
              }
              if (*(void *)(v14 + v49[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v55 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v14, v55);
              uint64_t v56 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_60:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v58 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v58 + 48)), *(void **)(v14 + *(int *)(v58 + 48) + 8), *(void *)(v14 + *(int *)(v58 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v58 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v58 + 64)), *(void **)(v14 + *(int *)(v58 + 64) + 8), *(void *)(v14 + *(int *)(v58 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v58 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_41;
            case 1:
              uint64_t v60 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v14, v60);
              uint64_t v61 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v62 = v14 + v61[13];
              uint64_t v63 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v64 = *(void *)(v63 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63)) {
                (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
              }
              uint64_t v65 = (uint64_t *)(v14 + v61[14]);
              unint64_t v66 = v65[1];
              if (v66 >> 60 != 15) {
                sub_100038B34(*v65, v66);
              }
              if (*(void *)(v14 + v61[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v67 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v14, v67);
              uint64_t v68 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v68 + 52);
              goto LABEL_19;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_41;
            default:
              goto LABEL_42;
          }
        }
        goto LABEL_42;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_42;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_39;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            unint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_39:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_19:
        }
        goto LABEL_42;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_42;
    }
LABEL_41:
    swift_bridgeObjectRelease();
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1002B52E0(*(void *)(v3 + v73[20]), *(void *)(v3 + v73[20] + 8), *(unsigned char *)(v3 + v73[20] + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v3 + v73[21]), *(void *)(v3 + v73[21] + 8), *(unsigned char *)(v3 + v73[21] + 16), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v41 = v3 + v73[22];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v42 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  }
  else
  {
    swift_release();
  }
  uint64_t v43 = v3 + v73[23];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
  }
  else
  {
    swift_release();
  }
  unint64_t v45 = (v70 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  sub_10004EA10(*(void *)(v74 + v45), *(void *)(v74 + v45 + 8), *(void *)(v74 + v45 + 16), *(void *)(v74 + v45 + 24), *(unsigned char *)(v74 + v45 + 32));

  return swift_deallocObject();
}

uint64_t sub_1002EAC78()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for PinContainer() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_1002E46A0(v0 + v3, v4, v1);
}

unint64_t sub_1002EAD34()
{
  unint64_t result = qword_100527BE0;
  if (!qword_100527BE0)
  {
    sub_10000F69C(&qword_100527BD8);
    sub_1002EADA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527BE0);
  }
  return result;
}

unint64_t sub_1002EADA8()
{
  unint64_t result = qword_100527BE8;
  if (!qword_100527BE8)
  {
    sub_10000F69C(&qword_100527BF0);
    sub_1002EAE50();
    sub_1002EAFD0(&qword_100527C68, &qword_100527C70, &qword_100527C78, (void (*)(void))sub_1002EB284);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527BE8);
  }
  return result;
}

unint64_t sub_1002EAE50()
{
  unint64_t result = qword_100527BF8;
  if (!qword_100527BF8)
  {
    sub_10000F69C(&qword_100527C00);
    sub_1002EAFD0(&qword_100527C08, &qword_100527C10, &qword_100527C18, (void (*)(void))sub_1002EAF24);
    sub_1002EAFD0(&qword_100527C28, &qword_100527C30, &qword_100527C38, (void (*)(void))sub_1002EB098);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527BF8);
  }
  return result;
}

unint64_t sub_1002EAF24()
{
  unint64_t result = qword_100527C20;
  if (!qword_100527C20)
  {
    sub_10000F69C(&qword_100527C18);
    sub_1002E8778();
    sub_1002E8980((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C20);
  }
  return result;
}

uint64_t sub_1002EAFD0(unint64_t *a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_10000F69C(a3);
    a4();
    swift_getOpaqueTypeConformance2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002EB098()
{
  unint64_t result = qword_100527C40;
  if (!qword_100527C40)
  {
    sub_10000F69C(&qword_100527C38);
    sub_1002EB144();
    sub_1002E8980((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C40);
  }
  return result;
}

unint64_t sub_1002EB144()
{
  unint64_t result = qword_100527C48;
  if (!qword_100527C48)
  {
    sub_10000F69C(&qword_100527C50);
    sub_1002EB1E4();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C48);
  }
  return result;
}

unint64_t sub_1002EB1E4()
{
  unint64_t result = qword_100527C58;
  if (!qword_100527C58)
  {
    sub_10000F69C(&qword_100527C60);
    sub_1002BF444();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C58);
  }
  return result;
}

unint64_t sub_1002EB284()
{
  unint64_t result = qword_100527C80;
  if (!qword_100527C80)
  {
    sub_10000F69C(&qword_100527C78);
    sub_1002EB324();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C80);
  }
  return result;
}

unint64_t sub_1002EB324()
{
  unint64_t result = qword_100527C88;
  if (!qword_100527C88)
  {
    sub_10000F69C(&qword_100527C90);
    sub_1002EB3C4();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C88);
  }
  return result;
}

unint64_t sub_1002EB3C4()
{
  unint64_t result = qword_100527C98;
  if (!qword_100527C98)
  {
    sub_10000F69C(&qword_100527CA0);
    sub_1002BF444();
    sub_1002E8980((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527C98);
  }
  return result;
}

uint64_t sub_1002EB470@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4338(a1);
}

uint64_t sub_1002EB478@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002E4394(*(long long **)(v1 + 16), a1);
}

uint64_t sub_1002EB49C()
{
  return sub_1002EC668((uint64_t (*)(char *, char *, void, void, void, uint64_t, uint64_t, uint64_t))sub_1002E3FC4);
}

uint64_t sub_1002EB4B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for PinContainer();
  uint64_t v72 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  unint64_t v73 = (int *)v2;
  uint64_t v70 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v71 = (v72 + 40) & ~v72;
  uint64_t v74 = v0;
  uint64_t v3 = v0 + v71;
  uint64_t v4 = v0 + v71 + *(int *)(type metadata accessor for AppConfiguration() + 20);
  uint64_t v5 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v6 = v4 + v5[10];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v5[18];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v11 = v4 + v5[22];
  if (!v9(v11, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v3 + v73[11];
  uint64_t v13 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v1);
  }
  uint64_t v14 = v3 + v73[13];
  uint64_t v15 = type metadata accessor for ResultLookupState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v17 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v17)
          {
            case 0:
              uint64_t v47 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v14, v47);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_60;
            case 1:
              uint64_t v48 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v14, v48);
              uint64_t v49 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v50 = v14 + v49[13];
              uint64_t v51 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v52 = *(void *)(v51 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
                (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
              }
              uint64_t v53 = (uint64_t *)(v14 + v49[14]);
              unint64_t v54 = v53[1];
              if (v54 >> 60 != 15) {
                sub_100038B34(*v53, v54);
              }
              if (*(void *)(v14 + v49[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v55 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v14, v55);
              uint64_t v56 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              break;
            case 3:
            case 4:
              uint64_t v18 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v14, v18);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v57 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v14, v57);
              type metadata accessor for StreamingTextDetectorResult(0);
LABEL_60:
              swift_bridgeObjectRelease();
              break;
            default:
              break;
          }
          uint64_t v58 = sub_10000F214(&qword_100520120);
          sub_10004FFD4(*(void **)(v14 + *(int *)(v58 + 48)), *(void **)(v14 + *(int *)(v58 + 48) + 8), *(void *)(v14 + *(int *)(v58 + 48) + 16), *(unsigned char *)(v14 + *(int *)(v58 + 48) + 24));
          sub_10004FFD4(*(void **)(v14 + *(int *)(v58 + 64)), *(void **)(v14 + *(int *)(v58 + 64) + 8), *(void *)(v14 + *(int *)(v58 + 64) + 16), *(unsigned char *)(v14 + *(int *)(v58 + 64) + 24));
        }
        else
        {
          switch(v17)
          {
            case 0:
              uint64_t v59 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v14, v59);
              type metadata accessor for ObjectDetectorResult(0);
              goto LABEL_41;
            case 1:
              uint64_t v60 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v14, v60);
              uint64_t v61 = (int *)type metadata accessor for ParseDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v62 = v14 + v61[13];
              uint64_t v63 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v64 = *(void *)(v63 - 8);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63)) {
                (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
              }
              uint64_t v65 = (uint64_t *)(v14 + v61[14]);
              unint64_t v66 = v65[1];
              if (v66 >> 60 != 15) {
                sub_100038B34(*v65, v66);
              }
              if (*(void *)(v14 + v61[15]))
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              break;
            case 2:
              uint64_t v67 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v14, v67);
              uint64_t v68 = type metadata accessor for TextDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v23 = *(int *)(v68 + 52);
              goto LABEL_19;
            case 3:
            case 4:
              uint64_t v29 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v14, v29);
              type metadata accessor for StreamingBarcodeDetectorResult(0);
              swift_bridgeObjectRelease();
              swift_release();
              break;
            case 5:
              uint64_t v69 = type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v14, v69);
              type metadata accessor for StreamingTextDetectorResult(0);
              goto LABEL_41;
            default:
              goto LABEL_42;
          }
        }
        goto LABEL_42;
      case 3u:
        sub_10004FF38(*(void **)v14, *(void **)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24));
        goto LABEL_42;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v30 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v14, v30);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_39;
          case 1u:
            uint64_t v31 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v14, v31);
            uint64_t v32 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v33 = v14 + v32[13];
            uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v35 = *(void *)(v34 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
              (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
            }
            unint64_t v36 = (uint64_t *)(v14 + v32[14]);
            unint64_t v37 = v36[1];
            if (v37 >> 60 != 15) {
              sub_100038B34(*v36, v37);
            }
            if (*(void *)(v14 + v32[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2u:
            uint64_t v38 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v14, v38);
            uint64_t v39 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3u:
          case 4u:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v14, v19);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5u:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v14, v40);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_39:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }

        break;
      case 5u:
        uint64_t v20 = sub_10000F214(&qword_10051A320);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v14, 1, v20))
        {
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v14, v21);
          uint64_t v22 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          uint64_t v23 = *(int *)(v20 + 48);
LABEL_19:
        }
        goto LABEL_42;
      case 6u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 7u:
        if (!*(void *)(v14 + 8)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 8u:
        uint64_t v24 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24)) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for EventLookupItem(0);
        uint64_t v26 = v14 + *(int *)(v25 + 20);
        uint64_t v27 = type metadata accessor for Date();
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
        v28(v26, v27);
        v28(v14 + *(int *)(v25 + 24), v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 9u:
        if (!*(void *)v14) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        goto LABEL_42;
    }
LABEL_41:
    swift_bridgeObjectRelease();
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1002B52E0(*(void *)(v3 + v73[20]), *(void *)(v3 + v73[20] + 8), *(unsigned char *)(v3 + v73[20] + 16), (uint64_t (*)(void))sub_10000F478);
  sub_1002B52E0(*(void *)(v3 + v73[21]), *(void *)(v3 + v73[21] + 8), *(unsigned char *)(v3 + v73[21] + 16), (uint64_t (*)(void))sub_1002B48C8);
  uint64_t v41 = v3 + v73[22];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v42 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
  }
  else
  {
    swift_release();
  }
  uint64_t v43 = v3 + v73[23];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
  }
  else
  {
    swift_release();
  }
  unint64_t v45 = (v71 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  sub_10004EA10(*(void *)(v74 + v45), *(void *)(v74 + v45 + 8), *(void *)(v74 + v45 + 16), *(void *)(v74 + v45 + 24), *(unsigned char *)(v74 + v45 + 32));

  return swift_deallocObject();
}

uint64_t sub_1002EC594()
{
  return sub_1002EC668((uint64_t (*)(char *, char *, void, void, void, uint64_t, uint64_t, uint64_t))sub_1002E4198);
}

uint64_t sub_1002EC5AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002EC614@<X0>(uint64_t *a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t result = Image.init(_internalSystemName:)();
  *a1 = result;
  return result;
}

uint64_t sub_1002EC668(uint64_t (*a1)(char *, char *, void, void, void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *((void *)v1 + 2);
  uint64_t v4 = *((void *)v1 + 3);
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v6 = *(void *)(type metadata accessor for PinContainer() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  return a1(&v1[v7], &v1[(v8 + 7) & 0xFFFFFFFFFFFFFFF8], *(void *)&v1[(v8 + 47) & 0xFFFFFFFFFFFFFFF8], *(void *)&v1[((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 8], v1[((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 16], v3, v4, v5);
}

uint64_t sub_1002EC73C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002EC7A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002EC808()
{
  unint64_t result = qword_100527CD0;
  if (!qword_100527CD0)
  {
    sub_10000F69C(&qword_100527B00);
    sub_1002EC884();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527CD0);
  }
  return result;
}

unint64_t sub_1002EC884()
{
  unint64_t result = qword_100527CD8;
  if (!qword_100527CD8)
  {
    sub_10000F69C(&qword_100527AF8);
    sub_1002EC924();
    sub_100013AA8(&qword_100527D00, &qword_100527D08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527CD8);
  }
  return result;
}

unint64_t sub_1002EC924()
{
  unint64_t result = qword_100527CE0;
  if (!qword_100527CE0)
  {
    sub_10000F69C(&qword_100527AF0);
    sub_100013AA8(&qword_100527CE8, &qword_100527AE8);
    sub_100013AA8(&qword_100527CF0, &qword_100527CF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527CE0);
  }
  return result;
}

uint64_t sub_1002EC9E8(long long *a1)
{
  return sub_1002E5C80(a1) & 1;
}

uint64_t sub_1002ECA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002ECA30);
}

uint64_t sub_1002ECA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002ECA48);
}

uint64_t type metadata accessor for InAppWebPresentationView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100527D68);
}

uint64_t sub_1002ECA70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002ECA8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for WebViewWrapper(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, v1, v6);
  char v7 = static Edge.Set.all.getter();
  sub_1002ECB88((uint64_t)v5, a1);
  *(unsigned char *)(a1 + *(int *)(sub_10000F214(&qword_100527DA0) + 36)) = v7;
  return sub_1002ECBEC((uint64_t)v5);
}

uint64_t type metadata accessor for WebViewWrapper(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100527E00);
}

uint64_t sub_1002ECB88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WebViewWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ECBEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WebViewWrapper(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002ECC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002ECC5C);
}

uint64_t sub_1002ECC60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1002ECCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002ECCE0);
}

uint64_t sub_1002ECCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

unint64_t sub_1002ECD58()
{
  unint64_t result = qword_100527E38;
  if (!qword_100527E38)
  {
    sub_10000F69C(&qword_100527DA0);
    sub_1002ED00C(&qword_100527E40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100527E38);
  }
  return result;
}

id sub_1002ECDF0()
{
  id v0 = [objc_allocWithZone((Class)SFSafariViewControllerConfiguration) init];
  [v0 _setEphemeral:1];
  [v0 setBarCollapsingEnabled:0];
  id v1 = objc_allocWithZone((Class)SFSafariViewController);
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  id v5 = [v1 initWithURL:v3 configuration:v0];

  return v5;
}

uint64_t sub_1002ECE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1002ED00C(&qword_100527E48);

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1002ECF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1002ED00C(&qword_100527E48);

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1002ECF94()
{
}

uint64_t sub_1002ECFD8()
{
  return sub_1002ED00C(&qword_100527E40);
}

uint64_t sub_1002ED00C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for WebViewWrapper(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1002ED050(void (*a1)(long long *__return_ptr, long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    int v17 = _swiftEmptyArrayStorage;
    sub_100040848(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (i = (long long *)(a3 + 32); ; ++i)
    {
      long long v15 = *i;
      a1(&v16, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v10 = v16;
      int v17 = v6;
      unint64_t v12 = v6[2];
      unint64_t v11 = v6[3];
      if (v12 >= v11 >> 1)
      {
        long long v14 = v16;
        sub_100040848(v11 > 1, v12 + 1, 1);
        long long v10 = v14;
        uint64_t v6 = v17;
      }
      v6[2] = v12 + 1;
      *(_OWORD *)&v6[2 * v12 + 4] = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_1002ED16C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v15)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v16;
  uint64_t v17;
  void *v18;

  long long v15 = (void *(*)(uint64_t *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  char v7 = _swiftEmptyArrayStorage;
  if (!v5) {
    return v7;
  }
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t result = (void *)sub_100040A78(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    char v7 = v18;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      long long v16 = v11;
      uint64_t result = v15(&v17, &v16);
      if (v6)
      {
        swift_release();
        return v7;
      }
      uint64_t v6 = 0;
      uint64_t v12 = v17;
      uint64_t v18 = v7;
      unint64_t v14 = v7[2];
      unint64_t v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (void *)sub_100040A78(v13 > 1, v14 + 1, 1);
        char v7 = v18;
      }
      v7[2] = v14 + 1;
      v7[v14 + 4] = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v10 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void (*sub_1002ED2C0(void (*result)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *__return_ptr, uint64_t *)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    goto LABEL_19;
  }
  uint64_t v6 = v4;
  char v7 = result;
  uint64_t result = (void (*)(uint64_t *__return_ptr, uint64_t *))_swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t result = (void (*)(uint64_t *__return_ptr, uint64_t *))specialized ContiguousArray.reserveCapacity(_:)();
    if (v5 < 0)
    {
LABEL_20:
      __break(1u);
      return result;
    }
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v12 = v11;
      v7(&v13, &v12);
      if (v6) {
        return (void (*)(uint64_t *__return_ptr, uint64_t *))swift_release();
      }
      uint64_t v6 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void (*)(uint64_t *__return_ptr, uint64_t *))specialized ContiguousArray._endMutation()();
      if (a4 < a3) {
        goto LABEL_17;
      }
      if (v10 == v11) {
        goto LABEL_18;
      }
      if (a4 == ++v11) {
        return (void (*)(uint64_t *__return_ptr, uint64_t *))v14;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

void *sub_1002ED3F8(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    long long v16 = _swiftEmptyArrayStorage;
    sub_100040A78(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v15;
      long long v16 = v6;
      unint64_t v12 = v6[2];
      unint64_t v11 = v6[3];
      if (v12 >= v11 >> 1)
      {
        sub_100040A78(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      v6[2] = v12 + 1;
      v6[v12 + 4] = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_1002ED514(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_100040DFC(0, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = (unsigned __int8 *)(a3 + 64);
    while (1)
    {
      uint64_t v7 = *((void *)v6 - 4);
      uint64_t v8 = *((void *)v6 - 3);
      uint64_t v10 = *((void *)v6 - 2);
      uint64_t v9 = *((void *)v6 - 1);
      unsigned __int8 v11 = *v6;
      v18[0] = v7;
      v18[1] = v8;
      v18[2] = v10;
      v18[3] = v9;
      unsigned __int8 v19 = v11;
      sub_10004E998(v7, v8, v10, v9, v11);
      a1(&v20, v18);
      if (v17) {
        break;
      }
      uint64_t v17 = 0;
      sub_10004EA10(v7, v8, v10, v9, v11);
      char v12 = v20;
      uint64_t v21 = v4;
      unint64_t v14 = v4[2];
      unint64_t v13 = v4[3];
      if (v14 >= v13 >> 1)
      {
        sub_100040DFC(v13 > 1, v14 + 1, 1);
        uint64_t v4 = v21;
      }
      v6 += 40;
      v4[2] = v14 + 1;
      *((unsigned char *)v4 + v14 + 32) = v12;
      if (!--v3) {
        return v4;
      }
    }
    sub_10004EA10(v7, v8, v10, v9, v11);
    swift_release();
  }
  return v4;
}

void *sub_1002ED680(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_100040974(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v9 = (uint64_t *)(a3 + 32);
    while (1)
    {
      uint64_t v10 = *v9++;
      uint64_t v15 = v10;
      a1(&v16, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v16;
      uint64_t v17 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_100040974(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v17;
      }
      v6[2] = v13 + 1;
      v6[v13 + 4] = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1002ED798(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v11 = (char *)&v26 - v10;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  if (!v18) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v19 = v18;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  uint64_t v36 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (void (**)(char *))(v33 + 2);
    uint64_t v35 = v14;
    ++v33;
    while (1)
    {
      uint64_t v21 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v22 = v11;
      uint64_t v23 = v11;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
      uint64_t v11 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

uint64_t sub_1002EDB98(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1002EDBDC()
{
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState);
  sub_1000BBF50(v1, *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 16));
  return v1;
}

uint64_t sub_1002EDCA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 8);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(a2 + 16) = v7;
  return sub_1000BBF50(v5, v6, v7);
}

uint64_t sub_1002EDD68(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_getKeyPath();
  sub_1000BBF50(v1, v2, v3);
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_1000BC2F4(v1, v2, v3);
  return swift_release();
}

uint64_t sub_1002EDE68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = sub_10000F214(&qword_100520FA0);
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v20 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 8);
  *(void *)uint64_t v11 = a2;
  *(void *)(v11 + 8) = a3;
  char v14 = *(unsigned char *)(v11 + 16);
  *(unsigned char *)(v11 + 16) = a4;
  sub_1000BBF50(a2, a3, a4);
  sub_1000BC2F4(v12, v13, v14);
  swift_getKeyPath();
  uint64_t v21 = a1;
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v15 = *(void *)(v11 + 8);
  char v16 = *(unsigned char *)(v11 + 16);
  uint64_t v21 = *(void *)v11;
  uint64_t v22 = v15;
  char v23 = v16;
  sub_1000BBF50(v21, v15, v16);
  sub_10000F214(&qword_10051FB20);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v10, v20);
}

id sub_1002EE03C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v3 = (void *)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame);
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame);
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  uint64_t v11 = v3[7];
  uint64_t v12 = v3[8];
  uint64_t v14 = v3[9];
  id result = sub_10010C224(v4, v5, v6, v7);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v12;
  a1[9] = v14;
  return result;
}

id sub_1002EE158@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame);
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 8);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 16);
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 24);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 32);
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 40);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 48);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 56);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 64);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 72);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v13;
  a2[9] = v12;
  return sub_10010C224(v4, v5, v6, v7);
}

uint64_t sub_1002EE234(uint64_t a1)
{
  sub_1002F7CD0(a1, (uint64_t)v2);
  swift_getKeyPath();
  sub_1002F7D38(v2, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10010C224);
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_1002F7D38(v2, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10010C310);
  return swift_release();
}

void sub_1002EE344(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 8);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 16);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 24);
  uint64_t v6 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame);
  sub_1002F7CD0((uint64_t)a2, a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame);
  sub_1002F7D38(a2, (void (*)(void, void, void, void, void, void, void, void, void, void))sub_10010C224);
  sub_10010C310(v6, v3, v4, v5);
}

uint64_t sub_1002EE3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051FB88);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_10051FB20);
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214((uint64_t *)&unk_10051FB10);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 2;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  uint64_t v14 = v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_runStateStreamInternal;
  uint64_t v18 = v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_runStateStreamContinuation;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14, v13, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18, v9, v19);
  uint64_t v15 = v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState;
  *(unsigned char *)(v15 + 16) = 0;
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  uint64_t v16 = v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame;
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 2;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameSender) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_isRunning) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_framerateHz) = 0x3FF0000000000000;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_timestamp) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_consumers) = _swiftEmptyArrayStorage;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource____lazy_storage___trackManagerSupporting) = 1;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf) = sub_1002F68F0();
  ObservationRegistrar.init()();
  sub_1002F86D4(v20, type metadata accessor for CameraControllerConfiguration);
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue) = v21;
  return v2;
}

uint64_t sub_1002EE774()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource____lazy_storage___trackManagerSupporting;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource____lazy_storage___trackManagerSupporting);
  uint64_t v4 = v3;
  if (v3 == 1)
  {
    type metadata accessor for SimulatorCameraSource.Tracker(0);
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = swift_retain();
    sub_1002F143C(v5);
    uint64_t v6 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = v4;
    swift_retain();
    sub_1002F4598(v6);
  }
  sub_1002F45A8(v3);
  return v4;
}

uint64_t sub_1002EE804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[33] = a4;
  uint64_t v5 = type metadata accessor for CancellationError();
  v4[34] = v5;
  v4[35] = *(void *)(v5 - 8);
  v4[36] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[37] = v6;
  v4[38] = *(void *)(v6 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v4[41] = v7;
  v4[42] = *(void *)(v7 - 8);
  v4[43] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  v4[44] = v8;
  v4[45] = *(void *)(v8 - 8);
  v4[46] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  v4[47] = v9;
  v4[48] = *(void *)(v9 - 8);
  v4[49] = swift_task_alloc();
  return _swift_task_switch(sub_1002EEA44, 0, 0);
}

uint64_t sub_1002EEA44()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_isRunning;
  v0[50] = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource___observationRegistrar;
  v0[51] = v2;
  uint64_t v3 = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue;
  v0[52] = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_timestamp;
  v0[53] = v3;
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v1;
  *(unsigned char *)(v4 + 40) = 1;
  v0[29] = v1;
  v0[54] = sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  if (*(unsigned char *)(v1 + v2) == 1)
  {
    uint64_t v6 = v0[48];
    uint64_t v5 = v0[49];
    uint64_t v7 = v0[46];
    uint64_t v8 = v0[44];
    uint64_t v9 = v0[45];
    uint64_t v10 = v0[33];
    uint64_t v11 = *(void *)(v10 + v0[52]);
    uint64_t v26 = v0[47];
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = v11;
    v0[6] = sub_1002F7C98;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1002EDB98;
    v0[5] = &unk_1004F3498;
    uint64_t v13 = _Block_copy(v0 + 2);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[32] = _swiftEmptyArrayStorage;
    sub_1002F451C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100056E60();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v26);
    swift_release();
  }
  uint64_t v15 = v0[38];
  uint64_t v14 = v0[39];
  uint64_t v16 = v0[37];
  *(double *)(v0[33] + v0[52]) = *(double *)(v0[33] + v0[52]) + 1.0;
  uint64_t v17 = static Duration.seconds(_:)();
  uint64_t v19 = v18;
  ContinuousClock.init()();
  v0[26] = v17;
  v0[27] = v19;
  v0[24] = 0;
  v0[23] = 0;
  *((unsigned char *)v0 + 200) = 1;
  uint64_t v20 = sub_1002F451C(&qword_1005282E0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1002F451C(&qword_1005282E8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[55] = v21;
  v0[56] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v21(v14, v16);
  uint64_t v22 = (void *)swift_task_alloc();
  v0[57] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1002EEE9C;
  uint64_t v24 = v0[40];
  uint64_t v23 = v0[41];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v24, v0 + 23, v23, v20);
}

uint64_t sub_1002EEE9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 440))(*(void *)(v2 + 320), *(void *)(v2 + 296));
    uint64_t v3 = sub_1002EF428;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 336);
    uint64_t v4 = *(void *)(v2 + 344);
    uint64_t v6 = *(void *)(v2 + 328);
    (*(void (**)(void, void))(v2 + 440))(*(void *)(v2 + 320), *(void *)(v2 + 296));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_1002EEFF4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002EEFF4()
{
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[33];
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 40) = 1;
  v0[29] = v2;
  v0[54] = sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  if (*(unsigned char *)(v2 + v1) == 1)
  {
    uint64_t v5 = v0[48];
    uint64_t v4 = v0[49];
    uint64_t v6 = v0[46];
    uint64_t v7 = v0[44];
    uint64_t v8 = v0[45];
    uint64_t v9 = v0[33];
    uint64_t v10 = *(void *)(v9 + v0[52]);
    uint64_t v25 = v0[47];
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v9;
    *(void *)(v11 + 24) = v10;
    v0[6] = sub_1002F7C98;
    v0[7] = v11;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1002EDB98;
    v0[5] = &unk_1004F3498;
    uint64_t v12 = _Block_copy(v0 + 2);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[32] = _swiftEmptyArrayStorage;
    sub_1002F451C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100056E60();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v25);
    swift_release();
  }
  uint64_t v14 = v0[38];
  uint64_t v13 = v0[39];
  uint64_t v15 = v0[37];
  *(double *)(v0[33] + v0[52]) = *(double *)(v0[33] + v0[52]) + 1.0;
  uint64_t v16 = static Duration.seconds(_:)();
  uint64_t v18 = v17;
  ContinuousClock.init()();
  v0[26] = v16;
  v0[27] = v18;
  v0[24] = 0;
  v0[23] = 0;
  *((unsigned char *)v0 + 200) = 1;
  uint64_t v19 = sub_1002F451C(&qword_1005282E0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1002F451C(&qword_1005282E8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[55] = v20;
  v0[56] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v13, v15);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[57] = v21;
  void *v21 = v0;
  v21[1] = sub_1002EEE9C;
  uint64_t v23 = v0[40];
  uint64_t v22 = v0[41];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v23, v0 + 23, v22, v19);
}

uint64_t sub_1002EF428()
{
  uint64_t v20 = v0;
  uint64_t v1 = v0[58];
  (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
  v0[31] = v1;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v18 = v0[53];
    uint64_t v9 = v0[33];
    swift_errorRelease();
    strcpy((char *)v19, "Caught error ");
    HIWORD(v19[1]) = -4864;
    swift_getErrorValue();
    v10._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v11 = v19[0];
    uint64_t v12 = v19[1];
    swift_getKeyPath();
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v9;
    *(void *)(v13 + 24) = v11;
    *(void *)(v13 + 32) = v12;
    *(unsigned char *)(v13 + 40) = 2;
    v0[28] = v9;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v14 = *(NSObject **)(v9 + v18);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_1002F72A0;
    *(void *)(v15 + 24) = v9;
    v0[18] = sub_10014C6EC;
    v0[19] = v15;
    v0[14] = _NSConcreteStackBlock;
    v0[15] = 1107296256;
    v0[16] = sub_100109E30;
    v0[17] = &unk_1004F33F8;
    uint64_t v16 = _Block_copy(v0 + 14);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v14, v16);
    swift_errorRelease();
    _Block_release(v16);
    LODWORD(v14) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (!v14) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[53];
  uint64_t v4 = v0[33];
  swift_errorRelease();
  sub_1002F79DC(*(double *)(v4 + v2));
  uint64_t v5 = *(NSObject **)(v4 + v3);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1002F72A0;
  *(void *)(v6 + 24) = v4;
  v0[12] = sub_10014C6EC;
  v0[13] = v6;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256;
  v0[10] = sub_100109E30;
  v0[11] = &unk_1004F3448;
  uint64_t v7 = _Block_copy(v0 + 8);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v7);
  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
  swift_errorRelease();
  swift_release();
LABEL_5:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1002EF88C(uint64_t a1)
{
  uint64_t result = sub_1002EE774();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask;
    if (*(void *)(result + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask))
    {
      swift_retain();
      Task.cancel()();
      swift_release();
    }
    *(void *)(v3 + v4) = 0;
    swift_release();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_isRunning) = 0;
  return result;
}

uint64_t sub_1002EF924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002F7200(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000FBD8((uint64_t)v8, &qword_10051A8C0);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1002EFB10()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(NSObject **)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue);
  uint64_t v22 = sub_1002F6FA0;
  uint64_t v23 = v0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v16 = &v20;
  uint64_t v20 = sub_1002EDB98;
  uint64_t v21 = &unk_1004F32E0;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_1002F451C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100056E60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = v15;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1002F6FA8;
  *(void *)(v11 + 24) = v0;
  uint64_t v22 = sub_10014C6EC;
  uint64_t v23 = v11;
  aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  uint64_t v20 = sub_100109E30;
  uint64_t v21 = &unk_1004F3330;
  uint64_t v12 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v12);
  _Block_release(v12);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

void sub_1002EFEA0(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameSender;
  if (!*(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameSender))
  {
    static TaskPriority.high.getter();
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 0, 1, v6);
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = a1;
    swift_retain();
    uint64_t v8 = sub_1002EF924((uint64_t)v4, (uint64_t)&unk_100528300, (uint64_t)v7);
    sub_10000FBD8((uint64_t)v4, &qword_10051A8C0);
    *(void *)(a1 + v5) = v8;
    swift_release();
  }
}

uint64_t sub_1002EFFD4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1002EE774();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask;
    if (*(void *)(result + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask))
    {
      swift_retain();
      Task.cancel()();
      swift_release();
    }
    TaskPriority.init(rawValue:)();
    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 0, 1, v8);
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = 0;
    v9[3] = 0;
    v9[4] = v6;
    swift_retain();
    *(void *)(v6 + v7) = sub_100064D5C((uint64_t)v4, (uint64_t)&unk_1005282D8, (uint64_t)v9);
    swift_release();
    uint64_t result = swift_release();
  }
  *(unsigned char *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_isRunning) = 1;
  return result;
}

uint64_t sub_1002F0158()
{
  return sub_1002F073C((uint64_t)sub_1002F4590, (uint64_t)&unk_1004F3240);
}

uint64_t sub_1002F0178(uint64_t a1)
{
  uint64_t v2 = sub_1002EE774();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask;
    if (*(void *)(v2 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask))
    {
      swift_retain();
      Task.cancel()();
      swift_release();
    }
    *(void *)(v3 + v4) = 0;
    swift_release();
    swift_release();
  }
  *(unsigned char *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_isRunning) = 0;
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_1002F02E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void **)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_consumers);
  swift_beginAccess();
  uint64_t v6 = *v5;
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = sub_10032A344(0, v6[2] + 1, 1, v6);
    *uint64_t v5 = v6;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = sub_10032A344((void *)(v8 > 1), v9 + 1, 1, v6);
    *uint64_t v5 = v6;
  }
  v6[2] = v9 + 1;
  uint64_t v10 = &v6[2 * v9];
  v10[4] = a2;
  v10[5] = a3;
  return swift_endAccess();
}

void sub_1002F03C4(char *a1, double a2)
{
  swift_getKeyPath();
  uint64_t v32 = a1;
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)&a1[OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf];
  if (v4)
  {
    uint64_t v32 = *(char **)&a1[OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf];
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 1;
    double v36 = a2;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v37 = 0;
    __asm { FMOV            V0.2D, #1.0 }
    long long v22 = _Q0;
    long long v40 = _Q0;
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v23 = a1;
    id v11 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v12 = (uint64_t *)&a1[OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_consumers];
    swift_beginAccess();
    uint64_t v13 = *v12;
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      id v21 = v11;
      swift_bridgeObjectRetain();
      unint64_t v15 = sub_1002F43C8();
      uint64_t v20 = v13;
      uint64_t v16 = (uint64_t *)(v13 + 40);
      do
      {
        uint64_t v17 = *v16;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v23 = v4;
        char v24 = 0;
        uint64_t v25 = 0;
        char v26 = 1;
        double v27 = a2;
        char v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        long long v31 = v22;
        uint64_t v19 = *(void (**)(void **, void, void, void, ValueMetadata *, unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8);
        swift_unknownObjectRetain();
        v19(&v23, 0, 0, 0, &type metadata for SimulatorCameraFrame, v15, ObjectType, v17, v20);
        swift_unknownObjectRelease();
        v16 += 2;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      id v11 = v21;
    }
  }
}

void *sub_1002F066C()
{
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf);
  id v2 = v1;
  return v1;
}

uint64_t sub_1002F071C()
{
  return sub_1002F073C((uint64_t)sub_1002F44FC, (uint64_t)&unk_1004F3218);
}

uint64_t sub_1002F073C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1002F451C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100056E60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1002F09B0(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameSender;
  if (*(void *)(a1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameSender))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  *(void *)(a1 + v2) = 0;
  return swift_release();
}

id sub_1002F0AFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf);
  *a2 = v4;

  return v4;
}

void sub_1002F0BBC(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_1002F0C98()
{
  sub_10010C310(*(id *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_runStateStreamInternal;
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_10051FB10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_runStateStreamContinuation;
  uint64_t v4 = sub_10000F214(&qword_10051FB20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1000BC2F4(*(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState), *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 16));
  sub_10010C310(*(id *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame), *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 8), *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 16), *(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 24));

  swift_release();
  swift_bridgeObjectRelease();
  sub_1002F4598(*(void *)(v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource____lazy_storage___trackManagerSupporting));

  uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource___observationRegistrar;
  uint64_t v6 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_1002F0E40()
{
  sub_1002F0C98();

  return swift_deallocClassInstance();
}

uint64_t sub_1002F0E98()
{
  return type metadata accessor for SimulatorCameraSource(0);
}

uint64_t type metadata accessor for SimulatorCameraSource(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100527EE0);
}

void sub_1002F0EC0()
{
  sub_10010B63C(319, &qword_10051F978, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_10010B63C(319, &qword_10051F980, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ObservationRegistrar();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1002F1060()
{
  return _swift_task_switch(sub_1002F107C, 0, 0);
}

uint64_t sub_1002F107C()
{
  sub_10010C570();
  swift_allocError();
  *unint64_t v1 = 0xD000000000000032;
  v1[1] = 0x800000010042B1C0;
  swift_willThrow();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002F1120(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t ObjectType = swift_getObjectType();

  return sub_1002F7864(a1, v5, ObjectType, a2);
}

uint64_t sub_1002F1174()
{
  uint64_t v1 = *v0;
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState);
  sub_1000BBF50(v2, *(void *)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 8), *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__runState + 16));
  return v2;
}

uint64_t sub_1002F1240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_runStateStreamInternal;
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_10051FB10);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id sub_1002F12BC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_getKeyPath();
  sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame);
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 8);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 16);
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 24);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 32);
  uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 40);
  uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 48);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 56);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 64);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__latestFrame + 72);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v13;
  a1[9] = v12;
  return sub_10010C224(v4, v5, v6, v7);
}

uint64_t sub_1002F1398()
{
  return sub_1002EFB10();
}

uint64_t sub_1002F13BC()
{
  return sub_1002F073C((uint64_t)sub_1002F4590, (uint64_t)&unk_1004F3240);
}

uint64_t sub_1002F13FC()
{
  return sub_1002F073C((uint64_t)sub_1002F44FC, (uint64_t)&unk_1004F3218);
}

uint64_t sub_1002F143C(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 2;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(void *)(v1 + 96) = &_swiftEmptySetSingleton;
  *(void *)(v1 + 104) = sub_10031B298((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 112) = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_logger;
  if (qword_100517EA8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = sub_10000F378(v4, (uint64_t)qword_10055E310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v1 + v3, v5, v4);
  *(void *)(v1 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker____lazy_storage___trackManager) = 0;
  *(void *)(v1 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask) = 0;
  uint64_t v6 = swift_retain();
  sub_1002F6E04(v6, a1);
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1002F1564(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t *)(v1 + 96);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v1 + 96);
  int64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v25 = (uint64_t *)(v1 + 96);
    char v28 = _swiftEmptyArrayStorage;
    uint64_t v24 = v12;
    swift_bridgeObjectRetain();
    sub_100040CB0(0, v13, 0);
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v15 = *(void *)(v4 + 72);
    uint64_t v26 = v8 + 32;
    uint64_t v27 = v15;
    do
    {
      sub_1002F7078(v14, (uint64_t)v6, type metadata accessor for CVTrackSnapshot);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v6, v7);
      sub_1002F86D4((uint64_t)v6, type metadata accessor for CVTrackSnapshot);
      uint64_t v16 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040CB0(0, v16[2] + 1, 1);
        uint64_t v16 = v28;
      }
      unint64_t v18 = v16[2];
      unint64_t v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        sub_100040CB0(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v28;
      }
      v16[2] = v18 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v18, v10, v7);
      char v28 = v16;
      v14 += v27;
      --v13;
    }
    while (v13);
    uint64_t v19 = v24;
    uint64_t v11 = v25;
  }
  else
  {
    uint64_t v19 = *(void *)(v1 + 96);
    swift_bridgeObjectRetain();
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v20 = sub_1002F61A0((uint64_t)v16, v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = *v11;
  if (*(void *)(v20 + 16) <= *(void *)(*v11 + 16) >> 3)
  {
    char v28 = (void *)*v11;
    swift_bridgeObjectRetain();
    sub_100206FD0(v20);
    swift_release();
    long long v22 = v28;
  }
  else
  {
    swift_bridgeObjectRetain();
    long long v22 = sub_100207F04(v20, v21);
    swift_release();
  }
  *uint64_t v11 = (uint64_t)v22;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F18A0()
{
  uint64_t v0 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v38 = (uint64_t)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v35 - 8);
  uint64_t v36 = *(void *)(v2 + 64);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - v5;
  uint64_t v7 = sub_10000F214(&qword_100521088);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000F214((uint64_t *)&unk_100521050);
  uint64_t v11 = *(void *)(v33 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v33);
  long long v31 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - v14;
  sub_10000F214(&qword_100521090);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v7);
  uint64_t v16 = v15;
  uint64_t v30 = v15;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  unint64_t v17 = v6;
  uint64_t v32 = v6;
  UUID.init()();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v38, 1, 1, v18);
  uint64_t v19 = v2;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v34, v17, v35);
  long long v22 = v31;
  uint64_t v23 = v16;
  uint64_t v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v31, v23, v33);
  unint64_t v25 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v26 = (v36 + *(unsigned __int8 *)(v11 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  *((void *)v27 + 4) = v37;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v27[v25], v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v26], v22, v24);
  swift_retain();
  sub_100064D5C(v38, (uint64_t)&unk_100528318, (uint64_t)v27);
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v32, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v30, v24);
}

uint64_t sub_1002F1CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = sub_10000F214(&qword_100521048);
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  sub_10000F214(&qword_100521098);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v6[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[14] = v9;
  v6[15] = *(void *)(v9 + 64);
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_1002F1E48, 0, 0);
}

uint64_t sub_1002F1E48()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v17 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v18 = v0[10];
  uint64_t v19 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v16 = v0[7];
  uint64_t v14 = v0[13];
  uint64_t v15 = *(void (**)(uint64_t))(v2 + 16);
  v15(v1);
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100521050);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, v4, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  swift_beginAccess();
  sub_1003A4030(v3, v1);
  swift_endAccess();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v5;
  swift_weakInit();
  ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v1, v16, v14);
  unint64_t v10 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v11 + v10, v1, v14);
  AsyncStream.Continuation.onTermination.setter();
  v0[5] = *(void *)(v9 + 104);
  swift_bridgeObjectRetain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1002F20B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
    unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    sub_100064D5C((uint64_t)v9, (uint64_t)&unk_100528328, (uint64_t)v14);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002F22AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  sub_10000F214(&qword_100521098);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_1002F2340, 0, 0);
}

uint64_t sub_1002F2340()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  swift_beginAccess();
  sub_1003F3960(v1, v2);
  sub_10000FBD8(v2, &qword_100521098);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002F23F4()
{
  uint64_t v1 = OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker____lazy_storage___trackManager;
  if (*(void *)(v0 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker____lazy_storage___trackManager))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker____lazy_storage___trackManager);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for TrackManager(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    uint64_t v2 = sub_1003A7DFC(v4, (uint64_t)&off_1004F31F0, 0.15, 0.0001);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1002F2498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[71] = a4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[72] = v5;
  v4[73] = *(void *)(v5 - 8);
  v4[74] = swift_task_alloc();
  uint64_t v6 = sub_10000F214(&qword_100521048);
  v4[75] = v6;
  v4[76] = *(void *)(v6 - 8);
  v4[77] = swift_task_alloc();
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100521050);
  v4[78] = v7;
  v4[79] = *(void *)(v7 - 8);
  v4[80] = swift_task_alloc();
  v4[81] = swift_task_alloc();
  v4[82] = type metadata accessor for CVDetection();
  v4[83] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CancellationError();
  v4[84] = v8;
  v4[85] = *(void *)(v8 - 8);
  v4[86] = swift_task_alloc();
  sub_10000F214((uint64_t *)&unk_1005254A0);
  v4[87] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CVTrackSnapshot(0);
  v4[88] = v9;
  v4[89] = *(void *)(v9 - 8);
  v4[90] = swift_task_alloc();
  v4[91] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  v4[92] = v10;
  v4[93] = *(void *)(v10 - 8);
  v4[94] = swift_task_alloc();
  v4[95] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ContinuousClock();
  v4[96] = v11;
  v4[97] = *(void *)(v11 - 8);
  v4[98] = swift_task_alloc();
  return _swift_task_switch(sub_1002F2818, 0, 0);
}

uint64_t sub_1002F2818()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 744);
  uint64_t v3 = *(void *)(v0 + 736);
  uint64_t v4 = static Duration.seconds(_:)();
  uint64_t v6 = v5;
  ContinuousClock.init()();
  *(void *)(v0 + 496) = v4;
  *(void *)(v0 + 504) = v6;
  *(void *)(v0 + 472) = 0;
  *(void *)(v0 + 480) = 0;
  *(unsigned char *)(v0 + 488) = 1;
  uint64_t v7 = sub_1002F451C(&qword_1005282E0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1002F451C(&qword_1005282E8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 792) = v8;
  *(void *)(v0 + 800) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v3);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v9;
  void *v9 = v0;
  v9[1] = sub_1002F2A08;
  uint64_t v10 = *(void *)(v0 + 768);
  uint64_t v11 = *(void *)(v0 + 760);
  return dispatch thunk of Clock.sleep(until:tolerance:)(v11, v0 + 472, v10, v7);
}

uint64_t sub_1002F2A08()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 816) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 792))(*(void *)(v2 + 760), *(void *)(v2 + 736));
    uint64_t v3 = sub_1002F3224;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 784);
    uint64_t v5 = *(void *)(v2 + 776);
    uint64_t v6 = *(void *)(v2 + 768);
    (*(void (**)(void, void))(v2 + 792))(*(void *)(v2 + 760), *(void *)(v2 + 736));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_1002F2B70;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002F2B70()
{
  uint64_t v1 = sub_1002F23F4();
  *(void *)(v0 + 824) = v1;
  return _swift_task_switch(sub_1002F2BDC, v1, 0);
}

uint64_t sub_1002F2BDC()
{
  *(void *)(v0 + 832) = *(void *)(*(void *)(v0 + 824) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  return _swift_task_switch(sub_1002F2C54, 0, 0);
}

uint64_t sub_1002F2C54()
{
  uint64_t v1 = *(void *)(v0 + 832);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 712) + 80);
    sub_1002F7078(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 696), type metadata accessor for CVTrackSnapshot);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 712);
  uint64_t v5 = *(void *)(v0 + 704);
  uint64_t v6 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    sub_10000FBD8(*(void *)(v0 + 696), (uint64_t *)&unk_1005254A0);
    uint64_t v7 = *(void *)(v0 + 752);
    uint64_t v8 = *(void *)(v0 + 744);
    uint64_t v9 = *(void *)(v0 + 736);
    uint64_t v10 = static Duration.seconds(_:)();
    uint64_t v12 = v11;
    ContinuousClock.init()();
    *(void *)(v0 + 496) = v10;
    *(void *)(v0 + 504) = v12;
    *(void *)(v0 + 472) = 0;
    *(void *)(v0 + 480) = 0;
    *(unsigned char *)(v0 + 488) = 1;
    uint64_t v13 = sub_1002F451C(&qword_1005282E0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_1002F451C(&qword_1005282E8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    *(void *)(v0 + 792) = v14;
    *(void *)(v0 + 800) = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v14(v7, v9);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1002F2A08;
    uint64_t v16 = *(void *)(v0 + 768);
    uint64_t v17 = *(void *)(v0 + 760);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v17, v0 + 472, v16, v13);
  }
  else
  {
    uint64_t v18 = *(void *)(v0 + 728);
    uint64_t v19 = *(void *)(v0 + 704);
    uint64_t v20 = *(void *)(v0 + 664);
    sub_1002F70E0(*(void *)(v0 + 696), v18, type metadata accessor for CVTrackSnapshot);
    sub_1002F7078(v18 + *(int *)(v19 + 24), v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v21 = *(void *)(v0 + 664);
        *(void *)(v0 + 392) = type metadata accessor for ParseDetectorResult(0);
        *(void *)(v0 + 400) = sub_1002F451C(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
        long long v22 = sub_100040120((uint64_t *)(v0 + 368));
        uint64_t v23 = type metadata accessor for ParseDetectorResult;
        break;
      case 2u:
        uint64_t v21 = *(void *)(v0 + 664);
        *(void *)(v0 + 392) = type metadata accessor for TextDetectorResult(0);
        *(void *)(v0 + 400) = sub_1002F451C((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
        long long v22 = sub_100040120((uint64_t *)(v0 + 368));
        uint64_t v23 = type metadata accessor for TextDetectorResult;
        break;
      case 3u:
      case 4u:
        uint64_t v21 = *(void *)(v0 + 664);
        *(void *)(v0 + 392) = type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(void *)(v0 + 400) = sub_1002F451C(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
        long long v22 = sub_100040120((uint64_t *)(v0 + 368));
        uint64_t v23 = type metadata accessor for StreamingBarcodeDetectorResult;
        break;
      case 5u:
        uint64_t v21 = *(void *)(v0 + 664);
        *(void *)(v0 + 392) = type metadata accessor for StreamingTextDetectorResult(0);
        *(void *)(v0 + 400) = sub_1002F451C((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
        long long v22 = sub_100040120((uint64_t *)(v0 + 368));
        uint64_t v23 = type metadata accessor for StreamingTextDetectorResult;
        break;
      default:
        uint64_t v21 = *(void *)(v0 + 664);
        *(void *)(v0 + 392) = type metadata accessor for ObjectDetectorResult(0);
        *(void *)(v0 + 400) = sub_1002F451C(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
        long long v22 = sub_100040120((uint64_t *)(v0 + 368));
        uint64_t v23 = type metadata accessor for ObjectDetectorResult;
        break;
    }
    sub_1002F70E0(v21, (uint64_t)v22, v23);
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v25 = *(void *)(v0 + 400);
    sub_10000F3B0((void *)(v0 + 368), v24);
    *(double *)(v0 + 840) = (*(double (**)(uint64_t, uint64_t))(v25 + 88))(v24, v25);
    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 368);
    uint64_t v26 = sub_1002F23F4();
    *(void *)(v0 + 848) = v26;
    return _swift_task_switch(sub_1002F3408, v26, 0);
  }
}

uint64_t sub_1002F3224()
{
  uint64_t v1 = v0[102];
  (*(void (**)(void, void))(v0[97] + 8))(v0[98], v0[96]);
  v0[64] = v1;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v0[86];
    uint64_t v3 = v0[85];
    uint64_t v4 = v0[84];
    uint64_t v5 = v0[71];
    swift_errorRelease();
    *(void *)(v5 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask) = 0;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v0[71];
    swift_errorRelease();
    swift_errorRelease();
    *(void *)(v6 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_trackerNoiseMakingTask) = 0;
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002F3408()
{
  *(void *)(v0 + 856) = *(void *)(*(void *)(v0 + 848) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  return _swift_task_switch(sub_1002F3480, 0, 0);
}

uint64_t sub_1002F3480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 856);
  uint64_t v78 = *(void *)(v5 + 16);
  if (v78)
  {
    unint64_t v6 = 0;
    unint64_t v76 = (uint64_t *)(v4 + 408);
    uint64_t v77 = (uint64_t *)(v4 + 328);
    uint64_t v92 = (uint64_t *)(v4 + 520);
    uint64_t v7 = (unint64_t *)(v4 + 528);
    uint64_t v8 = (unint64_t *)(v4 + 536);
    uint64_t v9 = (unint64_t *)(v4 + 552);
    uint64_t v10 = (unint64_t *)(v4 + 560);
    uint64_t v11 = *(unsigned __int8 *)(*(void *)(v4 + 712) + 80);
    uint64_t v75 = v5 + ((v11 + 32) & ~v11);
    uint64_t v90 = (_OWORD *)(v4 + 48);
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
    uint64_t v74 = *(void *)(v4 + 856);
    do
    {
      if (v6 >= *(void *)(v5 + 16))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      uint64_t v82 = v12;
      unint64_t v87 = v6;
      sub_1002F7078(v75 + *(void *)(*(void *)(v89 + 712) + 72) * v6, *(void *)(v89 + 720), type metadata accessor for CVTrackSnapshot);
      sub_1003FEC34(v77);
      uint64_t v13 = *(void *)(v89 + 360);
      uint64_t v93 = *(void *)(v89 + 352);
      sub_10000F3B0(v77, v93);
      (*(void (**)(uint64_t, uint64_t))(v13 + 64))(v93, v13);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v77);
      v102.origin.CGFloat x = sub_1003FD844();
      CGFloat x = v102.origin.x;
      CGFloat y = v102.origin.y;
      CGFloat width = v102.size.width;
      CGFloat height = v102.size.height;
      double MidX = CGRectGetMidX(v102);
      v103.origin.CGFloat x = x;
      v103.origin.CGFloat y = y;
      v103.size.CGFloat width = width;
      v103.size.CGFloat height = height;
      double MidY = CGRectGetMidY(v103);
      unint64_t v85 = sub_1000BB750(0x20000000000001uLL);
      unint64_t v83 = sub_1000BB750(0x20000000000001uLL);
      sub_1003FEC34(v76);
      uint64_t v20 = *(void *)(v89 + 440);
      uint64_t v97 = *(void *)(v89 + 432);
      sub_10000F3B0(v76, v97);
      (*(void (**)(uint64_t, uint64_t))(v20 + 64))(v97, v20);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v76);
      *uint64_t v90 = *(_OWORD *)(v4 + 200);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v4 + 216);
      *(_OWORD *)(v4 + 80) = *(_OWORD *)(v4 + 248);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v4 + 232);
      *(void *)(v89 + 520) = _swiftEmptyArrayStorage;
      sub_100040848(0, 4, 0);
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)(v89 + 520);
      do
      {
        float64x2_t v98 = (float64x2_t)v90[v21];
        *uint64_t v7 = 0;
        swift_stdlib_random();
        for (unint64_t i = *v7; 0x20000000000001 * i < 0x1FFFFFFFFFF801; unint64_t i = *v10)
        {
          *uint64_t v10 = 0;
          swift_stdlib_random();
        }
        unint64_t v24 = (i * (unsigned __int128)0x20000000000001uLL) >> 64;
        double v25 = (double)v24 * 1.11022302e-16 * 0.002 + -0.001;
        if (v24 == 0x20000000000000) {
          double v25 = 0.001;
        }
        float64_t v94 = v25;
        unint64_t *v8 = 0;
        uint64_t v5 = swift_stdlib_random();
        for (unint64_t j = *v8; 0x20000000000001 * j < 0x1FFFFFFFFFF801; unint64_t j = *v9)
        {
          unint64_t *v9 = 0;
          uint64_t v5 = swift_stdlib_random();
        }
        unint64_t v27 = (j * (unsigned __int128)0x20000000000001uLL) >> 64;
        double v28 = (double)v27 * 1.11022302e-16 * 0.002 + -0.001;
        if (v27 == 0x20000000000000) {
          double v28 = 0.001;
        }
        *uint64_t v92 = v22;
        unint64_t v30 = *(void *)(v22 + 16);
        unint64_t v29 = *(void *)(v22 + 24);
        if (v30 >= v29 >> 1)
        {
          double v80 = v28;
          uint64_t v5 = sub_100040848(v29 > 1, v30 + 1, 1);
          double v28 = v80;
          uint64_t v22 = *v92;
        }
        v31.f64[0] = v94;
        v31.f64[1] = v28;
        ++v21;
        *(void *)(v22 + 16) = v30 + 1;
        *(float64x2_t *)(v22 + 16 * v30 + 32) = vaddq_f64(v98, v31);
      }
      while (v21 != 4);
      if (v85 == 0x20000000000000) {
        double v32 = 0.001;
      }
      else {
        double v32 = (double)v85 * 1.11022302e-16 * 0.002 + -0.001;
      }
      if (v83 == 0x20000000000000) {
        double v33 = 0.001;
      }
      else {
        double v33 = (double)v83 * 1.11022302e-16 * 0.002 + -0.001;
      }
      if (!v30) {
        goto LABEL_54;
      }
      if (v30 < 3) {
        goto LABEL_55;
      }
      double v84 = MidY + v33;
      double v86 = MidX + v32;
      uint64_t v34 = *(void *)(v22 + 32);
      uint64_t v35 = *(void *)(v22 + 40);
      uint64_t v99 = *(void *)(v89 + 720);
      uint64_t v95 = *(void *)(v89 + 592);
      uint64_t v36 = *(void *)(v89 + 584);
      uint64_t v37 = *(void *)(v89 + 576);
      double v38 = *(double *)(v89 + 840) + 0.0666666667;
      long long v79 = *(_OWORD *)(v22 + 80);
      long long v81 = *(_OWORD *)(v22 + 48);
      uint64_t v39 = *(void *)(v22 + 64);
      uint64_t v40 = *(void *)(v22 + 72);
      swift_release();
      *(double *)(v89 + 112) = v86;
      *(double *)(v89 + 120) = v84;
      *(void *)(v89 + 128) = v34;
      *(void *)(v89 + 136) = v35;
      *(_OWORD *)(v89 + 144) = v81;
      *(_OWORD *)(v89 + 160) = v79;
      *(void *)(v89 + 176) = v39;
      *(void *)(v89 + 184) = v40;
      *(double *)(v89 + 192) = v38;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v95, v99, v37);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1002F51B0(v4 + 112, v95, isUniquelyReferenced_nonNull_native);
      uint64_t v12 = v82;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v95, v37);
      sub_1002F86D4(v99, type metadata accessor for CVTrackSnapshot);
      unint64_t v6 = v87 + 1;
      uint64_t v5 = v74;
    }
    while (v87 + 1 != v78);
    uint64_t v4 = v89;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v42 = *(void *)(v4 + 568);
  *(void *)(v42 + 104) = v12;
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void *)(v42 + 112);
  uint64_t v44 = *(void *)(v43 + 64);
  uint64_t v88 = v43 + 64;
  uint64_t v45 = -1;
  uint64_t v46 = -1 << *(unsigned char *)(v43 + 32);
  if (-v46 < 64) {
    uint64_t v45 = ~(-1 << -(char)v46);
  }
  unint64_t v47 = v45 & v44;
  int64_t v91 = (unint64_t)(63 - v46) >> 6;
  uint64_t v96 = *(void *)(v42 + 112);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = swift_retain();
  for (int64_t k = 0; ; int64_t k = v100)
  {
    if (v47)
    {
      unint64_t v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      int64_t v100 = k;
      unint64_t v50 = v49 | (k << 6);
      goto LABEL_33;
    }
    int64_t v59 = k + 1;
    if (__OFADD__(k, 1)) {
      goto LABEL_56;
    }
    if (v59 >= v91)
    {
LABEL_50:
      swift_release();
      uint64_t v63 = *(void *)(v4 + 728);
      swift_release();
      swift_bridgeObjectRelease();
      sub_1002F86D4(v63, type metadata accessor for CVTrackSnapshot);
      uint64_t v64 = *(void *)(v4 + 752);
      uint64_t v65 = *(void *)(v4 + 744);
      uint64_t v66 = *(void *)(v4 + 736);
      uint64_t v67 = static Duration.seconds(_:)();
      uint64_t v69 = v68;
      ContinuousClock.init()();
      *(void *)(v4 + 496) = v67;
      *(void *)(v4 + 504) = v69;
      *(void *)(v4 + 472) = 0;
      *(void *)(v4 + 480) = 0;
      *(unsigned char *)(v4 + 488) = 1;
      uint64_t v70 = sub_1002F451C(&qword_1005282E0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
      dispatch thunk of Clock.now.getter();
      sub_1002F451C(&qword_1005282E8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
      dispatch thunk of InstantProtocol.advanced(by:)();
      uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      *(void *)(v4 + 792) = v71;
      *(void *)(v4 + 800) = (v65 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v71(v64, v66);
      uint64_t v72 = (void *)swift_task_alloc();
      *(void *)(v4 + 808) = v72;
      *uint64_t v72 = v4;
      v72[1] = sub_1002F2A08;
      a3 = *(void *)(v4 + 768);
      uint64_t v5 = *(void *)(v4 + 760);
      a2 = v4 + 472;
      a4 = v70;
      return dispatch thunk of Clock.sleep(until:tolerance:)(v5, a2, a3, a4);
    }
    unint64_t v60 = *(void *)(v88 + 8 * v59);
    int64_t v61 = k + 1;
    if (!v60)
    {
      int64_t v61 = k + 2;
      if (k + 2 >= v91) {
        goto LABEL_50;
      }
      unint64_t v60 = *(void *)(v88 + 8 * v61);
      if (!v60)
      {
        int64_t v61 = k + 3;
        if (k + 3 >= v91) {
          goto LABEL_50;
        }
        unint64_t v60 = *(void *)(v88 + 8 * v61);
        if (!v60)
        {
          int64_t v61 = k + 4;
          if (k + 4 >= v91) {
            goto LABEL_50;
          }
          unint64_t v60 = *(void *)(v88 + 8 * v61);
          if (!v60)
          {
            uint64_t v62 = k + 5;
            if (k + 5 >= v91) {
              goto LABEL_50;
            }
            unint64_t v60 = *(void *)(v88 + 8 * v62);
            int64_t v61 = k + 5;
            if (!v60) {
              break;
            }
          }
        }
      }
    }
LABEL_49:
    unint64_t v47 = (v60 - 1) & v60;
    int64_t v100 = v61;
    unint64_t v50 = __clz(__rbit64(v60)) + (v61 << 6);
LABEL_33:
    uint64_t v51 = *(void *)(v4 + 648);
    uint64_t v52 = *(void *)(v4 + 640);
    uint64_t v53 = *(void *)(v4 + 632);
    uint64_t v54 = *(void *)(v4 + 624);
    uint64_t v55 = *(void *)(v4 + 616);
    uint64_t v56 = *(void *)(v4 + 608);
    uint64_t v57 = *(void *)(v4 + 600);
    uint64_t v58 = *(void *)(v89 + 568);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v53 + 16))(v51, *(void *)(v96 + 56) + *(void *)(v53 + 72) * v50, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v52, v51, v54);
    uint64_t v4 = v89;
    *(void *)(v89 + 544) = *(void *)(v58 + 104);
    swift_bridgeObjectRetain();
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
  }
  while (1)
  {
    int64_t v61 = v62 + 1;
    if (__OFADD__(v62, 1)) {
      break;
    }
    if (v61 >= v91) {
      goto LABEL_50;
    }
    unint64_t v60 = *(void *)(v88 + 8 * v61);
    ++v62;
    if (v60) {
      goto LABEL_49;
    }
  }
LABEL_57:
  __break(1u);
  return dispatch thunk of Clock.sleep(until:tolerance:)(v5, a2, a3, a4);
}

uint64_t sub_1002F3E3C()
{
  sub_10010C310(*(id *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtCC6Tamale21SimulatorCameraSource7Tracker_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1002F3F38()
{
  return type metadata accessor for SimulatorCameraSource.Tracker(0);
}

uint64_t type metadata accessor for SimulatorCameraSource.Tracker(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100528010);
}

uint64_t sub_1002F3F60()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SimulatorCameraFrame()
{
  return &type metadata for SimulatorCameraFrame;
}

uint64_t sub_1002F4030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v8 = sub_1002F451C((unint64_t *)&qword_100520FA8, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);

  return sub_1002F7E18(a1, v7, a3, v8, a4);
}

void sub_1002F40D0(uint64_t a1)
{
}

CVPixelBufferRef sub_1002F40DC()
{
  CVPixelBufferRef v1 = (CVPixelBufferRef)[objc_allocWithZone((Class)CIContext) init];
  CVPixelBufferRef pixelBufferOut = 0;
  sub_10000F214(&qword_100528338);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100440F30;
  uint64_t v3 = (__CFString *)kCVPixelBufferCGImageCompatibilityKey;
  *(void *)(inited + 32) = kCVPixelBufferCGImageCompatibilityKey;
  *(void *)(inited + 40) = kCFBooleanTrue;
  uint64_t v4 = (__CFString *)kCVPixelBufferCGBitmapContextCompatibilityKey;
  *(void *)(inited + 48) = kCVPixelBufferCGBitmapContextCompatibilityKey;
  *(void *)(inited + 56) = kCFBooleanTrue;
  CFBooleanRef v5 = kCFBooleanTrue;
  unint64_t v6 = v3;
  uint64_t v7 = v4;
  sub_10031B4B0(inited);
  type metadata accessor for CFString(0);
  sub_10000F214(&qword_100528340);
  sub_1002F451C(&qword_100518538, type metadata accessor for CFString);
  v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CVReturn v9 = CVPixelBufferCreate(kCFAllocatorDefault, 0x5A0uLL, 0x780uLL, 0x42475241u, v8.super.isa, &pixelBufferOut);
  CVPixelBufferRef v10 = pixelBufferOut;
  if (v9)
  {
    CVPixelBufferRef v14 = v1;
    CVPixelBufferRef v1 = pixelBufferOut;
    CVPixelBufferRef v10 = 0;
  }
  else if (pixelBufferOut)
  {
    uint64_t v11 = pixelBufferOut;
    [v0 extent];
    CGFloat v12 = 1440.0 / CGRectGetWidth(v19);
    [v0 extent];
    CGFloat Height = CGRectGetHeight(v20);
    CGAffineTransformMakeScale(&v17, v12, 1920.0 / Height);
    CVPixelBufferRef v14 = (CVPixelBufferRef)[v0 imageByApplyingTransform:&v17];
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    -[__CVBuffer render:toCVPixelBuffer:bounds:colorSpace:](v1, "render:toCVPixelBuffer:bounds:colorSpace:", v14, v11, DeviceRGB, 0.0, 0.0, 1440.0, 1920.0);

    v8.super.Class isa = DeviceRGB;
  }
  else
  {
    CVPixelBufferRef v14 = v1;
    CVPixelBufferRef v1 = 0;
  }

  return v10;
}

BOOL sub_1002F4368(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1002F67C8((uint64_t)v8, (double *)v9);
}

unint64_t sub_1002F43C8()
{
  unint64_t result = qword_1005281B8;
  if (!qword_1005281B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005281B8);
  }
  return result;
}

unint64_t sub_1002F441C(uint64_t a1)
{
  unint64_t result = sub_1002F4444();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002F4444()
{
  unint64_t result = qword_100528200;
  if (!qword_100528200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528200);
  }
  return result;
}

_UNKNOWN **sub_1002F4498()
{
  return &off_1004F31F0;
}

uint64_t sub_1002F44A4(uint64_t a1)
{
  uint64_t result = sub_1002F451C(&qword_1005282C8, (void (*)(uint64_t))type metadata accessor for SimulatorCameraSource);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002F44FC()
{
  return sub_1002F09B0(v0);
}

uint64_t sub_1002F4504(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002F4514()
{
  return swift_release();
}

uint64_t sub_1002F451C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002F456C()
{
  return sub_1002EDE68(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_1002F4590()
{
  return sub_1002F0178(v0);
}

uint64_t sub_1002F4598(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1002F45A8(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1002F45B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_1002F46BC, 0, 0);
}

uint64_t sub_1002F46BC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1002F451C(&qword_1005282E0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1002F451C(&qword_1005282E8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002F485C;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1002F485C()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_1002F4A18, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1002F4A18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002F4A84(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10032AC58(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001F4A2C();
    goto LABEL_7;
  }
  sub_1001EAF88(v15, a4 & 1);
  unint64_t v20 = sub_10032AC58(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1001F4118(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

uint64_t sub_1002F4BC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  int v26 = a3;
  uint64_t v11 = type metadata accessor for CVDetection();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v14 = (void *)*v5;
  unint64_t v16 = sub_10032AF9C(a4);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 24 * v16;
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      *(unsigned char *)(v23 + 16) = v26;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F4BE0();
    goto LABEL_7;
  }
  sub_1001EB298(result, a5 & 1);
  uint64_t result = sub_10032AF9C(a4);
  if ((v20 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  uint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1002F7078(a4, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return sub_1001F4160(v16, (uint64_t)v13, a1, a2, v26, v22);
}

uint64_t sub_1002F4D5C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_10032AF9C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1001F51E8();
    goto LABEL_7;
  }
  sub_1001EC09C(v16, a3 & 1);
  unint64_t v22 = sub_10032AF9C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1002F7078(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return sub_1001F4230(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1002F4EDC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10032B09C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F5470();
    goto LABEL_7;
  }
  sub_1001EC844(result, a3 & 1);
  uint64_t result = sub_10032B09C(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_1001F42E4(v10, a2, a1, v16);
}

uint64_t sub_1002F4FF8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002F5DB4(a1, a2, a3, (void (*)(void))sub_1001F5898, (void (*)(void))sub_1001ECF10, (uint64_t *)&unk_100521050, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_1001F432C);
}

id sub_1002F5040(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10032AE98((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1001F5A58();
      goto LABEL_7;
    }
    sub_1001ED1FC(v12, a3 & 1);
    unint64_t v23 = sub_10032AE98((uint64_t)a2);
    if ((v13 & 1) == (v24 & 1))
    {
      unint64_t v9 = v23;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    sub_1002F85BC();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = v15[7];
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 40);
    uint64_t v20 = v17;
    uint64_t v21 = v16 + *(void *)(v18 + 72) * v9;
    return (id)v19(v21, a1, v20);
  }
LABEL_13:
  sub_1001F4338(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_1002F51B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10032ADC4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 88 * v14;
      long long v22 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v21 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v21 + 48) = v22;
      *(_OWORD *)(v21 + 64) = *(_OWORD *)(a1 + 64);
      *(void *)(v21 + 80) = *(void *)(a1 + 80);
      long long v23 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)a1;
      *(_OWORD *)(v21 + 16) = v23;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F5CEC();
    goto LABEL_7;
  }
  sub_1001ED5B0(result, a3 & 1);
  uint64_t result = sub_10032ADC4(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1001F43E4(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1002F5370(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10032B28C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F6170();
    goto LABEL_7;
  }
  sub_1001EDF5C(result, a3 & 1);
  uint64_t result = sub_10032B28C(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_1001F4504(v10, a2, a1 & 1, v16);
}

uint64_t sub_1002F5490(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002F5DB4(a1, a2, a3, (void (*)(void))sub_1001F6300, (void (*)(void))sub_1001EE1FC, &qword_1005242C8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_1001F4548);
}

uint64_t sub_1002F54D8(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_10032ADC4(a1);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v4;
      if (v18)
      {
LABEL_8:
        *(double *)(v20[7] + 8 * v14) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= result && (a2 & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001F6738();
      goto LABEL_7;
    }
    sub_1001EE890(result, a2 & 1);
    uint64_t result = sub_10032ADC4(a1);
    if ((v18 & 1) == (v21 & 1))
    {
      unint64_t v14 = result;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
      return sub_1001F4554(v14, (uint64_t)v11, v20, a3);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002F567C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v30 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)*v5;
  unint64_t v17 = sub_10032ADC4(a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    char v21 = v16;
    uint64_t v22 = v15[3];
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      long long v23 = *v6;
      if (v21)
      {
LABEL_8:
        uint64_t v24 = v23[7] + 24 * v17;
        swift_bridgeObjectRelease();
        uint64_t result = swift_errorRelease();
        uint64_t v26 = v30;
        *(void *)uint64_t v24 = a1;
        *(void *)(v24 + 8) = v26;
        *(double *)(v24 + 16) = a5;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      sub_1001F69D8();
      goto LABEL_7;
    }
    sub_1001EECB8(v20, a4 & 1);
    unint64_t v27 = sub_10032ADC4(a3);
    if ((v21 & 1) == (v28 & 1))
    {
      unint64_t v17 = v27;
      long long v23 = *v6;
      if (v21) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
      return sub_1001F460C(v17, (uint64_t)v14, a1, v30, v23, a5);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1002F5854(_OWORD *a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10032B2C8(a3);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a2 & 1) == 0)
  {
    if (v15 >= v13 && (a2 & 1) == 0)
    {
      sub_1001F6E68();
      goto LABEL_7;
    }
    sub_1001EF3E8(v13, a2 & 1);
    unint64_t v19 = sub_10032B2C8(a3);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 48 * v10;
    return sub_1002F85FC((uint64_t)a1, v17);
  }
LABEL_13:

  return sub_1001F46E0(v10, a1, v16, a3);
}

void sub_1002F5984(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_10032AF9C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 48 * v13;
      char v21 = *(void **)(v20 + 40);
      sub_10020F474(*(void *)v20, *(void *)(v20 + 8), *(void *)(v20 + 16), *(void *)(v20 + 24), *(void **)(v20 + 32));

      long long v22 = a1[1];
      *(_OWORD *)uint64_t v20 = *a1;
      *(_OWORD *)(v20 + 16) = v22;
      *(_OWORD *)(v20 + 32) = a1[2];
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1001F7560();
    goto LABEL_7;
  }
  sub_1001F0644(v16, a3 & 1);
  unint64_t v23 = sub_10032AF9C(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v13 = v23;
  unint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1002F7078(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1001F4738(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1002F5B20(uint64_t a1, char a2, __n128 a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10032B534(a1);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t result = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= result && (a2 & 1) != 0)
  {
LABEL_7:
    BOOL v15 = *v4;
    if (v13)
    {
LABEL_8:
      *(__n128 *)(v15[7] + 16 * v9) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v14 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F7CCC();
    goto LABEL_7;
  }
  sub_1001F188C(result, a2 & 1);
  uint64_t result = sub_10032B534(a1);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = result;
  BOOL v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1001F4800(v9, a1, v15, a3);

  return swift_retain();
}

unint64_t sub_1002F5C44(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_10032B09C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_unknownObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1001F7E74();
    goto LABEL_7;
  }
  sub_1001F1B78(v13, a3 & 1);
  unint64_t v19 = sub_10032B09C(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_1001F42E4(v10, a2, a1, v16);
}

uint64_t sub_1002F5D6C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1002F5DB4(a1, a2, a3, (void (*)(void))sub_1001F8460, (void (*)(void))sub_1001F2558, &qword_1005250D0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_1001F4844);
}

uint64_t sub_1002F5DB4(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v35 = a5;
  char v9 = v7;
  uint64_t v38 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v7;
  unint64_t v18 = sub_10032ADC4(a2);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 < v21 || (a3 & 1) == 0)
  {
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    v35();
    unint64_t v33 = sub_10032ADC4(a2);
    if ((v22 & 1) == (v34 & 1))
    {
      unint64_t v18 = v33;
      uint64_t v24 = *v9;
      if (v22) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
      return v37(v18, v15, v38, v24);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v9;
  if ((v22 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v25 = *(void *)(v24 + 56);
  uint64_t v26 = sub_10000F214(v36);
  uint64_t v27 = *(void *)(v26 - 8);
  char v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  uint64_t v29 = v26;
  uint64_t v30 = v25 + *(void *)(v27 + 72) * v18;
  uint64_t v31 = v38;

  return v28(v30, v31, v29);
}

uint64_t sub_1002F5FD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_10032AF9C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1001F8818();
      goto LABEL_7;
    }
    sub_1001F2A68(v16, a3 & 1);
    unint64_t v23 = sub_10032AF9C(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1002F7078(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return sub_1001F4948(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = v19[7];
  uint64_t v21 = v20 + *(void *)(*(void *)(sub_10000F214(&qword_1005250E0) - 8) + 72) * v13;

  return sub_1002F7F44(a1, v21);
}

uint64_t sub_1002F61A0(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_1002F6328((unint64_t *)((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3, a2);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_1002F6328((unint64_t *)v8, v5, v3, a2);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_1002F6328(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v54 = (char *)&v36 - v13;
  uint64_t v14 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(a3 + 16);
  uint64_t v39 = a3;
  if (v49)
  {
    uint64_t v37 = a2;
    uint64_t v38 = v4;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v48 = a3 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
    uint64_t v52 = *(void *)(v17 + 56);
    uint64_t v53 = v18;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
    uint64_t v51 = a4 + 56;
    uint64_t v19 = (void (**)(char *, uint64_t))(v17 - 8);
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    uint64_t v20 = 0;
    unint64_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
    unint64_t v36 = (v17 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v42 = v16;
    while (1)
    {
      v53(v16, v48 + v52 * v20, v8);
      uint64_t v44 = *v47;
      v44(v16, 0, 1, v8);
      if ((*v46)(v16, 1, v8) == 1)
      {
        a2 = v37;
        uint64_t v35 = v40;
        goto LABEL_21;
      }
      uint64_t v50 = v20;
      (*v45)(v54, v16, v8);
      sub_1002F451C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v23 = v21 & ~v22;
      if (((*(void *)(v51 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        break;
      }
      uint64_t v43 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v24 = v17;
      uint64_t v25 = a4;
      uint64_t v26 = ~v22;
      while (1)
      {
        v53(v11, *(void *)(v25 + 48) + v23 * v52, v8);
        sub_1002F451C(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v28 = *v19;
        (*v19)(v11, v8);
        if (v27) {
          break;
        }
        unint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v51 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        {
          a4 = v25;
          uint64_t v17 = v24;
          uint64_t v16 = v42;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v54, v8);
      uint64_t v30 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v31 = *(unint64_t *)((char *)v41 + v30);
      *(unint64_t *)((char *)v41 + v30) = v31 | (1 << v23);
      if ((v31 & (1 << v23)) != 0)
      {
        a4 = v25;
        uint64_t v17 = v24;
        uint64_t v16 = v42;
LABEL_13:
        uint64_t v32 = v50;
        goto LABEL_14;
      }
      BOOL v33 = __OFADD__(v40++, 1);
      uint64_t v32 = v50;
      if (v33)
      {
        __break(1u);
        return result;
      }
      a4 = v25;
      uint64_t v17 = v24;
      uint64_t v16 = v42;
LABEL_14:
      uint64_t v20 = v32 + 1;
      if (v20 == v49)
      {
        a2 = v37;
        uint64_t v35 = v40;
        v44(v16, 1, 1, v8);
        goto LABEL_21;
      }
    }
    char v28 = *v19;
LABEL_10:
    v28(v54, v8);
    goto LABEL_13;
  }
  char v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  swift_bridgeObjectRetain();
  uint64_t v35 = 0;
  v34(v16, 1, 1, v8);
LABEL_21:
  swift_bridgeObjectRelease();
  swift_retain();
  return sub_100209F20(v41, a2, v35, a4);
}

BOOL sub_1002F67C8(uint64_t a1, double *a2)
{
  sub_10010C6EC((uint64_t *)a1, (uint64_t)v10);
  double v4 = *a2;
  int v5 = *((unsigned __int8 *)a2 + 8);
  sub_10010C6EC(v10, (uint64_t)&v11);
  switch(v12)
  {
    case 1:
      if (v5 == 1 && v11 == *(void *)&v4) {
        return *(double *)(a1 + 16) == a2[2]
      }
            && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
            && *(double *)(a1 + 32) == a2[4]
            && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
            && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
      return 0;
    case 2:
      if (v5 != 2) {
        return 0;
      }
      return *(double *)(a1 + 16) == a2[2]
          && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
          && *(double *)(a1 + 32) == a2[4]
          && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
          && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
    case 3:
      if (v4 != 0.0 || v5 != 3) {
        return 0;
      }
      return *(double *)(a1 + 16) == a2[2]
          && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
          && *(double *)(a1 + 32) == a2[4]
          && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
          && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
    default:
      if (v5) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = v11 == *(void *)&v4;
      }
      if (!v6) {
        return 0;
      }
      return *(double *)(a1 + 16) == a2[2]
          && ((*(unsigned __int8 *)(a1 + 24) ^ *((unsigned __int8 *)a2 + 24)) & 1) == 0
          && *(double *)(a1 + 32) == a2[4]
          && ((*(unsigned __int8 *)(a1 + 40) ^ *((unsigned __int8 *)a2 + 40)) & 1) == 0
          && CGRectEqualToRect(*(CGRect *)(a1 + 48), *(CGRect *)(a2 + 6));
  }
}

uint64_t sub_1002F68F0()
{
  uint64_t v0 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v31 = (char *)&v31 - v8;
  id v9 = [self mainBundle];
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v9 URLForResource:v10 withExtension:v11];

  if (v12)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v13(v2, v6, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
    {
      uint64_t v14 = v31;
      v13(v31, v2, v3);
      sub_10000F214(&qword_100528330);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
      *(void *)(inited + 32) = kCIImageApplyOrientationProperty;
      *(void *)(inited + 64) = &type metadata for Bool;
      *(unsigned char *)(inited + 40) = 1;
      uint64_t v16 = kCIImageApplyOrientationProperty;
      sub_10031AD54(inited);
      id v17 = objc_allocWithZone((Class)CIImage);
      URL._bridgeToObjectiveC()(v18);
      uint64_t v20 = v19;
      type metadata accessor for CIImageOption(0);
      sub_1002F451C(&qword_100518550, type metadata accessor for CIImageOption);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v22 = [v17 initWithContentsOfURL:v20 options:isa];

      if (v22)
      {
        id v23 = v22;
        CVPixelBufferRef v24 = sub_1002F40DC();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
        return (uint64_t)v24;
      }
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  }
  sub_10000FBD8((uint64_t)v2, &qword_10051E070);
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v26 = [self imageNamed:v25];

  if (v26)
  {
    id v27 = [v26 CGImage];
    if (v27)
    {
      char v28 = v27;
      id v29 = [objc_allocWithZone((Class)CIImage) initWithCGImage:v27];
      CVPixelBufferRef v24 = sub_1002F40DC();

      return (uint64_t)v24;
    }
  }
LABEL_10:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002F6E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue);
  uint64_t v5 = (void *)swift_allocObject();
  Swift::Int v5[2] = a2;
  v5[3] = a1;
  v5[4] = &off_1004F31E0;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1002F6F84;
  *(void *)(v6 + 24) = v5;
  v9[4] = sub_100146854;
  _OWORD v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100109E30;
  v9[3] = &unk_1004F32B8;
  uint64_t v7 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002F6F84()
{
  return sub_1002F02E0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002F6F90()
{
  return swift_deallocObject();
}

void sub_1002F6FA0()
{
  sub_1002EFEA0(v0);
}

uint64_t sub_1002F6FA8()
{
  return sub_1002EFFD4(v0);
}

uint64_t sub_1002F6FB0()
{
  return swift_deallocObject();
}

uint64_t sub_1002F6FC4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_1002F2498(a1, v4, v5, v6);
}

uint64_t sub_1002F7078(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002F70E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002F714C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000F878;
  return sub_1002EE804(a1, v4, v5, v6);
}

uint64_t sub_1002F7200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002F7268()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002F72A0()
{
  return sub_1002EF88C(v0);
}

uint64_t sub_1002F72BC()
{
  return swift_deallocObject();
}

uint64_t sub_1002F72CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue);
  uint64_t v5 = (void *)swift_allocObject();
  Swift::Int v5[2] = a2;
  v5[3] = a1;
  v5[4] = &off_1004EFD60;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1002F87CC;
  *(void *)(v6 + 24) = v5;
  v9[4] = sub_10014C6EC;
  _OWORD v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100109E30;
  v9[3] = &unk_1004F3768;
  uint64_t v7 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002F7448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue);
  uint64_t v5 = (void *)swift_allocObject();
  Swift::Int v5[2] = a2;
  v5[3] = a1;
  v5[4] = &off_1004F3C10;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1002F87CC;
  *(void *)(v6 + 24) = v5;
  v9[4] = sub_10014C6EC;
  _OWORD v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100109E30;
  v9[3] = &unk_1004F36F0;
  uint64_t v7 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002F75C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue);
  uint64_t v5 = (void *)swift_allocObject();
  Swift::Int v5[2] = a2;
  v5[3] = a1;
  v5[4] = &off_1004E8A20;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1002F87CC;
  *(void *)(v6 + 24) = v5;
  v9[4] = sub_10014C6EC;
  _OWORD v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100109E30;
  v9[3] = &unk_1004F3678;
  uint64_t v7 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

void sub_1002F7740(uint64_t a1)
{
  double v2 = __chkstk_darwin(a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if (swift_dynamicCast())
  {
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    uint64_t v8 = v20;
    uint64_t v9 = v21;
    long long v10 = v22;
    long long v11 = v23;
    id v12 = *(void **)(v1 + 16);
    uint64_t v13 = *(void *)(v1 + 24);
    uint64_t v14 = *(void *)(v1 + 32);
    uint64_t v15 = *(void *)(v1 + 40);
    *(void *)(v1 + 16) = v16;
    *(void *)(v1 + 24) = v5;
    *(void *)(v1 + 32) = v6;
    *(void *)(v1 + 40) = v7;
    *(void *)(v1 + 48) = v8;
    *(void *)(v1 + 56) = v9;
    *(_OWORD *)(v1 + 64) = v10;
    *(_OWORD *)(v1 + 80) = v11;
    sub_10010C310(v12, v13, v14, v15);
  }
}

uint64_t sub_1002F7864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(NSObject **)(a2 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource_frameQueue);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a1;
  v8[4] = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1002F87CC;
  *(void *)(v9 + 24) = v8;
  v12[4] = sub_10014C6EC;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_100109E30;
  v12[3] = &unk_1004F3560;
  long long v10 = _Block_copy(v12);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002F79DC(double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(double *)(v11 + 24) = a1;
  aBlock[4] = sub_1002F8734;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F34E8;
  id v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  sub_1002F451C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100056E60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1002F7C88()
{
  return swift_deallocObject();
}

void sub_1002F7C98()
{
  sub_1002F03C4(*(char **)(v0 + 16), *(double *)(v0 + 24));
}

void sub_1002F7CB4()
{
  sub_1002EE344(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002F7CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100528308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1002F7D38(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void sub_1002F7D8C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  double v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf);
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale21SimulatorCameraSource__staticPbuf) = v2;
  id v4 = v2;
}

uint64_t sub_1002F7DCC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002F7E08()
{
  return swift_deallocObject();
}

uint64_t sub_1002F7E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[5] = a5;
  v11[6] = a1;
  long long v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_1002ED798((void (*)(char *, char *))sub_1002F7EFC, (uint64_t)v11, v5, v6, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v8);
  swift_beginAccess();
  sub_10020FBA4(v9);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F7EFC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 16))(*(void *)(v0 + 16));
}

uint64_t sub_1002F7F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_1005250E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002F7FAC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_10000F214((uint64_t *)&unk_100521050);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1002F8110(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000F214((uint64_t *)&unk_100521050) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10000FC9C;
  return sub_1002F1CEC(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_1002F8274()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002F82AC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1002F8378(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1002F20B4(a1, v4, v5);
}

uint64_t sub_1002F83EC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1002F84C0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_1002F22AC(a1, v5, v6, v7, v8);
}

unint64_t sub_1002F85BC()
{
  unint64_t result = qword_100521030;
  if (!qword_100521030)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100521030);
  }
  return result;
}

uint64_t sub_1002F85FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002F865C()
{
  return swift_deallocObject();
}

uint64_t sub_1002F8670()
{
  return swift_deallocObject();
}

uint64_t sub_1002F8684()
{
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002F86C4()
{
  return swift_deallocObject();
}

uint64_t sub_1002F86D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002F876C()
{
  return sub_1002F456C();
}

void sub_1002F87B4()
{
}

id sub_1002F87D0(char a1)
{
  switch(a1)
  {
    case 1:
      id v3 = [self sharedShimmeringLight];
      id v4 = objc_allocWithZone((Class)_UIIntelligenceEdgeLightEffect);
      double v5 = 5.0;
      goto LABEL_7;
    case 2:
      id v3 = [self sharedShimmeringLight];
      id v4 = objc_allocWithZone((Class)_UIIntelligenceEdgeLightEffect);
      double v5 = 3.0;
LABEL_7:
      id v6 = v3;
      uint64_t v7 = 0;
      goto LABEL_9;
    case 3:
      id v3 = [self sharedShimmeringLight];
      id v4 = objc_allocWithZone((Class)_UIIntelligenceEdgeLightEffect);
      double v5 = 8.0;
      id v6 = v3;
      uint64_t v7 = 1;
LABEL_9:
      id v8 = [v4 initWithLightSource:v6 radius:v7 region:v5];

      [v8 setActivationTransitionDirection:2];
      goto LABEL_13;
    case 4:
      id v9 = [self sharedShimmeringLight];
      goto LABEL_12;
    case 5:
      id v9 = [self sharedLight];
LABEL_12:
      id v10 = v9;
      id v8 = [objc_allocWithZone((Class)_UIIntelligenceContentLightEffect) initWithLightSource:v10];

      [v8 setActivationTransitionDirection:0];
LABEL_13:
      [v8 setDeactivationTransitionDirection:0];
      id result = v8;
      break;
    case 6:
      id result = sub_1002F9A38();
      break;
    case 7:
      id v11 = [self replaceBuildIn];
      id v12 = [objc_allocWithZone((Class)_UIDirectionalLightConfiguration) initWithPalette:v11];

      [v12 setDuration:4.0];
      [v12 setDirection:2];
      id v13 = [self directionalLightWithConfiguration:v12];
      id v14 = [objc_allocWithZone((Class)_UIIntelligenceContentLightEffect) initWithLightSource:v13];

      id result = v14;
      break;
    case 8:
      id result = sub_1002F9B54();
      break;
    default:
      id v1 = objc_allocWithZone((Class)_UIIntelligenceLatencyEffect);
      id result = [v1 initWithMode:0];
      break;
  }
  return result;
}

uint64_t type metadata accessor for VisualEffectView.Coordinator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for TamaleVisualEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *id result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002F8BECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TamaleVisualEffect()
{
  return &type metadata for TamaleVisualEffect;
}

unint64_t sub_1002F8C28()
{
  unint64_t result = qword_1005283E8;
  if (!qword_1005283E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005283E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualEffectView()
{
  return &type metadata for VisualEffectView;
}

id sub_1002F8C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_1005283F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  if ([self isMainThread])
  {
    return sub_1002F8F40(a1, a2);
  }
  else
  {
    uint64_t v17 = 0;
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    id v8 = static OS_dispatch_queue.main.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = &v17;
    *(void *)(v10 + 24) = a2;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_1002F9D44;
    *(void *)(v11 + 24) = v10;
    aBlock[4] = sub_100146854;
    void aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100109E30;
    aBlock[3] = &unk_1004F3938;
    id v12 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    dispatch_sync(v8, v12);

    _Block_release(v12);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    id result = (id)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = v17;
      if (v17)
      {
        swift_release();
        return (id)v14;
      }
    }
    __break(1u);
  }
  return result;
}

id sub_1002F8F40(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone((Class)UIVisualEffectView) init];
  [v3 _setContinuousCornerRadius:28.0];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v5 + 1;
      sub_1002F87D0(*(unsigned char *)(a2 + v5 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v5 = v6;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
  }
  sub_10000F734(0, &qword_100528400);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setBackgroundEffects:isa];

  sub_10000F214(&qword_1005283F8);
  UIViewRepresentableContext.coordinator.getter();
  void v9[2] = a2;
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1002F90C4(void *a1, uint64_t a2, uint64_t a3)
{
  CVPixelBufferRef v24 = a1;
  uint64_t v25 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_1005283F8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  id v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  uint64_t v23 = static OS_dispatch_queue.main.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v14, v13, v10);
  uint64_t v17 = v24;
  *(void *)(v16 + v15) = v25;
  *(void *)(v16 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = v17;
  aBlock[4] = sub_1002F993C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F3870;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v19 = v17;
  static DispatchQoS.unspecified.getter();
  id v29 = _swiftEmptyArrayStorage;
  sub_100064C3C();
  sub_10000F214(&qword_10051A960);
  sub_100056E60();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = (void *)v23;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  return swift_release();
}

uint64_t sub_1002F943C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10000F214(&qword_1005283F8);
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v5 = *(void *)(v16[0] + 16);
  swift_bridgeObjectRetain();
  swift_release();
  BOOL v6 = sub_1003E3684(v5, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v6)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    unint64_t v9 = _swiftEmptyArrayStorage;
    if (v8)
    {
      v16[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = v10 + 1;
        sub_1002F87D0(*(unsigned char *)(a2 + v10 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v10 = v11;
      }
      while (v8 != v11);
      unint64_t v9 = (void *)v16[0];
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = self;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a3;
    *(void *)(v13 + 24) = v9;
    void v16[4] = sub_1002F9A30;
    v16[5] = v13;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_1002EDB98;
    v16[3] = &unk_1004F38C0;
    unint64_t v14 = _Block_copy(v16);
    id v15 = a3;
    swift_release();
    [v12 animateWithDuration:v14 animations:0.9];
    _Block_release(v14);
    UIViewRepresentableContext.coordinator.getter();
    *(void *)(v16[0] + 16) = a2;
    swift_bridgeObjectRetain();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002F965C(void *a1)
{
  sub_10000F734(0, &qword_100528400);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a1 setBackgroundEffects:isa];
}

id sub_1002F96D8(uint64_t a1)
{
  return sub_1002F8C90(a1, *v1);
}

uint64_t sub_1002F96E0(void *a1, uint64_t a2)
{
  return sub_1002F90C4(a1, a2, *v2);
}

uint64_t sub_1002F96E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for VisualEffectView.Coordinator();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *a1 = v4;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002F9738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1002F9828();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1002F979C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1002F9828();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1002F9800()
{
}

unint64_t sub_1002F9828()
{
  unint64_t result = qword_1005283F0;
  if (!qword_1005283F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005283F0);
  }
  return result;
}

uint64_t sub_1002F987C()
{
  uint64_t v1 = sub_10000F214(&qword_1005283F8);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002F993C()
{
  uint64_t v1 = *(void *)(sub_10000F214(&qword_1005283F8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002F943C(v0 + v2, v4, v5);
}

uint64_t sub_1002F99D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002F99E8()
{
  return swift_release();
}

uint64_t sub_1002F99F0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_1002F9A30()
{
  sub_1002F965C(*(void **)(v0 + 16));
}

id sub_1002F9A38()
{
  id v0 = [self sharedLight];
  id v1 = [self mainBundle];
  id v2 = objc_allocWithZone((Class)_UIIntelligenceContentLightEffect);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 initWithLightSource:v0 lightMaterial:v3 darkMaterial:v4 bundle:v1];

  [v5 setActivationTransitionDirection:0];
  [v5 setDeactivationTransitionDirection:0];
  return v5;
}

id sub_1002F9B54()
{
  id v0 = [self pondering];
  id v1 = [objc_allocWithZone((Class)_UIDirectionalLightConfiguration) initWithPalette:v0];

  [v1 setDirection:1];
  [v1 setReverse:1];
  [v1 setDuration:4.0];
  id v2 = [self directionalLightWithConfiguration:v1];
  id v3 = [objc_allocWithZone((Class)_UIIntelligenceContentLightEffect) initWithLightSource:v2];
  [v3 setActivationTransitionDirection:2];
  [v3 setDeactivationTransitionDirection:0];

  return v3;
}

uint64_t sub_1002F9C74()
{
  uint64_t v1 = sub_10000F214(&qword_1005283F8);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1002F9D44()
{
  uint64_t v1 = *(void *)(sub_10000F214(&qword_1005283F8) - 8);
  uint64_t v2 = *(id **)(v0 + 16);
  *uint64_t v2 = sub_1002F8F40(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), *(void *)(v0 + 24));

  return _objc_release_x1();
}

uint64_t sub_1002F9DC0()
{
  return swift_deallocObject();
}

uint64_t sub_1002F9DE0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  return sub_1002F9DEC(a1, a2, a3, a4, &qword_100523058, a5, a6, a7, a8, a9);
}

uint64_t sub_1002F9DEC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t *a5@<X6>, uint64_t *a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  *a6 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (int *)sub_10000F214(a5);
  unsigned __int8 v21 = (double *)((char *)a6 + v20[13]);
  double *v21 = a7;
  v21[1] = a8;
  v21[2] = a9;
  v21[3] = a10;
  *((unsigned char *)a6 + v20[14]) = a1;
  *((unsigned char *)a6 + v20[15]) = a2;
  uint64_t v22 = a3();
  a4(v22);
  uint64_t v23 = (uint64_t *)((char *)a6 + v20[18]);
  State.init(wrappedValue:)();
  *uint64_t v23 = v27;
  v23[1] = v28;
  CVPixelBufferRef v24 = (uint64_t *)((char *)a6 + v20[19]);
  State.init(wrappedValue:)();
  *CVPixelBufferRef v24 = v27;
  v24[1] = v28;
  uint64_t v25 = (char *)a6 + v20[20];
  uint64_t result = State.init(wrappedValue:)();
  char *v25 = v27;
  *((void *)v25 + 1) = v28;
  return result;
}

uint64_t sub_1002F9F84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v138 = a1;
  uint64_t v2 = type metadata accessor for ImageSearchResultView();
  uint64_t v119 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v120 = v3;
  uint64_t v121 = (uint64_t)v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100519588);
  __chkstk_darwin(v4 - 8);
  uint64_t v130 = (char *)v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for ScrollBounceBehavior();
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v114 = (char *)v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_10000F214(&qword_1005284B8);
  __chkstk_darwin(v117);
  uint64_t v113 = (void *)((char *)v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = sub_10000F214(&qword_1005284C0);
  uint64_t v124 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  Swift::Int v122 = (char *)v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_1005284C8);
  uint64_t v127 = *(void *)(v9 - 8);
  uint64_t v128 = v9;
  __chkstk_darwin(v9);
  uint64_t v125 = (char *)v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000F214(&qword_1005284D0);
  __chkstk_darwin(v136);
  uint64_t v123 = (char *)v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v129 = (uint64_t)v103 - v13;
  uint64_t v134 = sub_10000F214(&qword_1005284D8);
  __chkstk_darwin(v134);
  uint64_t v135 = (uint64_t)v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v108 = (char *)v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Locale();
  __chkstk_darwin(v16 - 8);
  v103[1] = (char *)v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v18 - 8);
  v103[0] = (char *)v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for EmptyResultsView();
  __chkstk_darwin(v131);
  uint64_t v105 = (void *)((char *)v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v132 = sub_10000F214(&qword_1005284E0);
  uint64_t v107 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  BOOL v104 = (char *)v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v106 = (char *)v103 - v23;
  uint64_t v137 = sub_10000F214(&qword_1005284E8);
  __chkstk_darwin(v137);
  uint64_t v133 = (char *)v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000F214(&qword_1005284F0);
  __chkstk_darwin(v139);
  uint64_t v26 = (char *)v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for LatencyTextStyle();
  __chkstk_darwin(v27 - 8);
  id v29 = (void *)((char *)v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)v103 - v31;
  uint64_t v33 = sub_10000F214(&qword_1005256D8);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)v103 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000F214(&qword_1005256E0);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)v103 - v41;
  uint64_t v118 = v2;
  uint64_t v43 = (uint64_t *)(v1 + *(int *)(v2 + 28));
  uint64_t v44 = *v43;
  if (*v43)
  {
    uint64_t v112 = v40;
    uint64_t v111 = v26;
    if (*(void *)(v44 + 16))
    {
      uint64_t v45 = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v46 = swift_bridgeObjectRetain();
      __chkstk_darwin(v46);
      __chkstk_darwin(v47);
      uint64_t v48 = v113;
      sub_1002F9DEC(1, 1, (uint64_t (*)(void))sub_1002FFBFC, (void (*)(uint64_t))sub_1002FFC08, &qword_1005284B8, v113, 4.0, 4.0, 4.0, 4.0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v49 = v114;
      static ScrollBounceBehavior.basedOnSize.getter();
      unsigned __int8 v50 = static Axis.Set.vertical.getter();
      Axis.Set.init(rawValue:)();
      Axis.Set.init(rawValue:)();
      if (Axis.Set.init(rawValue:)() != v50) {
        Axis.Set.init(rawValue:)();
      }
      uint64_t v51 = sub_100013AA8(&qword_1005284F8, &qword_1005284B8);
      uint64_t v52 = v122;
      uint64_t v53 = v49;
      uint64_t v54 = v117;
      View.scrollBounceBehavior(_:axes:)();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v53, v116);
      sub_10000FBD8((uint64_t)v48, &qword_1005284B8);
      sub_10000F214(&qword_100519688);
      uint64_t v55 = v45;
      uint64_t v56 = (uint64_t)v130;
      State.projectedValue.getter();
      uint64_t v57 = v121;
      sub_100300C54(v55, v121, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
      unint64_t v58 = (*(unsigned __int8 *)(v119 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
      uint64_t v59 = swift_allocObject();
      sub_100300180(v57, v59 + v58, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
      type metadata accessor for IdentifiableURL();
      type metadata accessor for InAppWebPresentationView(0);
      uint64_t v140 = v54;
      uint64_t v141 = v51;
      swift_getOpaqueTypeConformance2();
      sub_100300F98(&qword_1005197D0, (void (*)(uint64_t))type metadata accessor for IdentifiableURL);
      sub_100300F98(&qword_1005197D8, (void (*)(uint64_t))type metadata accessor for InAppWebPresentationView);
      unint64_t v60 = v125;
      uint64_t v61 = v126;
      View.sheet<A, B>(item:onDismiss:content:)();
      swift_release();
      sub_10000FBD8(v56, &qword_100519588);
      (*(void (**)(char *, uint64_t))(v124 + 8))(v52, v61);
      LOBYTE(v55) = static Edge.Set.all.getter();
      EdgeInsets.init(_all:)();
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      uint64_t v67 = v66;
      uint64_t v69 = v68;
      uint64_t v71 = v127;
      uint64_t v70 = v128;
      uint64_t v72 = (uint64_t)v123;
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v123, v60, v128);
      uint64_t v73 = v72 + *(int *)(v136 + 36);
      *(unsigned char *)uint64_t v73 = v55;
      *(void *)(v73 + 8) = v63;
      *(void *)(v73 + 16) = v65;
      *(void *)(v73 + 24) = v67;
      *(void *)(v73 + 32) = v69;
      *(unsigned char *)(v73 + 40) = 0;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v60, v70);
      uint64_t v74 = v129;
      sub_10000FC34(v72, v129, &qword_1005284D0);
      sub_10000FB74(v74, v135, &qword_1005284D0);
      swift_storeEnumTagMultiPayload();
      uint64_t v75 = sub_100300F98(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
      uint64_t v140 = v131;
      uint64_t v141 = v75;
      swift_getOpaqueTypeConformance2();
      sub_1002FFC78();
      uint64_t v76 = (uint64_t)v133;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v74, &qword_1005284D0);
    }
    else
    {
      uint64_t v86 = v43[4];
      unint64_t v85 = v43[5];
      uint64_t v88 = v43[6];
      uint64_t v87 = v43[7];
      if ((v85 & 0x2000000000000000) != 0) {
        uint64_t v89 = HIBYTE(v85) & 0xF;
      }
      else {
        uint64_t v89 = v86 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v89)
      {
        swift_bridgeObjectRelease();
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v86 = String.init(localized:table:bundle:locale:comment:)();
        unint64_t v85 = v90;
      }
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v92 = (uint64_t)v105;
      *uint64_t v105 = KeyPath;
      sub_10000F214(&qword_100522BF0);
      swift_storeEnumTagMultiPayload();
      uint64_t v93 = v131;
      float64_t v94 = (uint64_t *)(v92 + *(int *)(v131 + 20));
      *float64_t v94 = v86;
      v94[1] = v85;
      uint64_t v95 = (void *)(v92 + *(int *)(v93 + 24));
      void *v95 = v88;
      v95[1] = v87;
      uint64_t v96 = v108;
      static AccessibilityChildBehavior.combine.getter();
      uint64_t v97 = sub_100300F98(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
      float64x2_t v98 = v104;
      View.accessibilityElement(children:)();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v96, v110);
      sub_100300CBC(v92, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
      uint64_t v99 = v107;
      int64_t v100 = v106;
      uint64_t v101 = v132;
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v98, v132);
      (*(void (**)(uint64_t, char *, uint64_t))(v99 + 16))(v135, v100, v101);
      swift_storeEnumTagMultiPayload();
      uint64_t v140 = v93;
      uint64_t v141 = v97;
      swift_getOpaqueTypeConformance2();
      sub_1002FFC78();
      uint64_t v76 = (uint64_t)v133;
      _ConditionalContent<>.init(storage:)();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v101);
    }
    unint64_t v83 = &qword_1005284E8;
    sub_10000FB74(v76, (uint64_t)v111, &qword_1005284E8);
    swift_storeEnumTagMultiPayload();
    sub_100218390();
    sub_1002FFE20();
    _ConditionalContent<>.init(storage:)();
    uint64_t v84 = v76;
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v77 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v135 = v78;
    uint64_t v136 = v79;
    char v81 = v80;
    *id v29 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    sub_100300180((uint64_t)v29, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    sub_100300C54((uint64_t)v32, (uint64_t)&v35[*(int *)(v33 + 36)], (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    uint64_t v82 = v135;
    *(void *)uint64_t v35 = v77;
    *((void *)v35 + 1) = v82;
    v35[16] = v81 & 1;
    *((void *)v35 + 3) = v136;
    sub_100300CBC((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
    sub_10021843C();
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8((uint64_t)v35, &qword_1005256D8);
    unint64_t v83 = &qword_1005256E0;
    sub_10000FC34((uint64_t)v38, (uint64_t)v42, &qword_1005256E0);
    sub_10000FB74((uint64_t)v42, (uint64_t)v26, &qword_1005256E0);
    swift_storeEnumTagMultiPayload();
    sub_100218390();
    sub_1002FFE20();
    _ConditionalContent<>.init(storage:)();
    uint64_t v84 = (uint64_t)v42;
  }
  return sub_10000FBD8(v84, v83);
}

uint64_t sub_1002FB108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageSearchResultView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  v21[0] = LocalizedStringKey.init(stringLiteral:)();
  sub_100300C54(a3, (uint64_t)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  sub_100300180((uint64_t)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
  *a4 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = (int *)sub_10000F214(&qword_100522F78);
  uint64_t v14 = (uint64_t *)((char *)a4 + v13[9]);
  *uint64_t v14 = 0xD000000000000016;
  v14[1] = 0x8000000100428E80;
  uint64_t v15 = (uint64_t (**)())((char *)a4 + v13[10]);
  *uint64_t v15 = sub_100300F34;
  v15[1] = (uint64_t (*)())v12;
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = (char *)a4 + v13[11];
  *(void *)uint64_t v17 = result;
  *((void *)v17 + 1) = v18;
  v17[16] = v19 & 1;
  *((void *)v17 + 3) = v20;
  return result;
}

uint64_t sub_1002FB338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  URL.init(string:)();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000FBD8((uint64_t)v6, &qword_10051E070);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
  uint64_t v12 = a3 + *(int *)(type metadata accessor for ImageSearchResultView() + 24);
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  char v15 = *(unsigned char *)(v12 + 16);
  sub_10000FCA0();
  uint64_t v16 = (void (*)(unsigned char *, char *))sub_10027C858(v13, v14, v15);
  sub_10000FD10();
  char v18 = 1;
  v16(v10, &v18);
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1002FB540@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v4 = sub_10000F214(&qword_100527270);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ContentSizeCategory();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100527278);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 != 1)
  {
    type metadata accessor for ImageSearchResultView();
    sub_10027CDC8((uint64_t)v10);
    char v15 = ContentSizeCategory.isAccessibilityCategory.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v14 = 1;
    if ((v15 & 1) == 0) {
      uint64_t v14 = 2;
    }
  }
  *(void *)uint64_t v6 = 0x4062C00000000000;
  *((void *)v6 + 1) = v14;
  *((_OWORD *)v6 + 1) = xmmword_10044F510;
  uint64_t v16 = (uint64_t)&v6[*(int *)(v4 + 44)];
  uint64_t v17 = swift_bridgeObjectRetain();
  size_t v18 = sub_1001B4008(v17);
  swift_bridgeObjectRelease();
  sub_1002FB7BC(v18, v22, v16);
  swift_release();
  uint64_t v19 = static Alignment.center.getter();
  sub_100226DD0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v19, v20);
  sub_10000FBD8((uint64_t)v6, &qword_100527270);
  return sub_10000FC34((uint64_t)v13, v23, &qword_100527278);
}

uint64_t sub_1002FB7BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v120 = a1;
  uint64_t v114 = a3;
  uint64_t v115 = sub_10000F214(&qword_100528510);
  __chkstk_darwin(v115);
  uint64_t v111 = (uint64_t)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000F214(&qword_100528518);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v108 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v117 = (char *)&v90 - v7;
  uint64_t v104 = type metadata accessor for ImageSearchRelatedSearchesCardView();
  __chkstk_darwin(v104);
  uint64_t v107 = (uint64_t *)((char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v123 = (uint64_t)&v90 - v10;
  uint64_t v97 = type metadata accessor for Lens_Item(0);
  uint64_t v94 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v95 = v11;
  uint64_t v96 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000F214(&qword_100528520);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v99 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000F214(&qword_100528528);
  __chkstk_darwin(v119);
  int64_t v100 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000F214(&qword_100528530);
  uint64_t v103 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  float64x2_t v98 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_1005243F0);
  uint64_t v116 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  uint64_t v112 = (uint64_t *)((char *)&v90 - v19);
  uint64_t v20 = sub_10000F214(&qword_100528538);
  __chkstk_darwin(v20 - 8);
  uint64_t v105 = (uint64_t)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v122 = (uint64_t)&v90 - v23;
  uint64_t v24 = sub_10000F214(&qword_100528540);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ImageSearchResultView();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void *)(v28 + 64);
  __chkstk_darwin(v27 - 8);
  uint64_t v30 = (char *)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000F214(&qword_100528548);
  uint64_t v32 = *(void *)(v31 - 8);
  double v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v90 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = a2;
  uint64_t v36 = *(void *)(a2 + 16);
  uint64_t v113 = v37;
  if (v36)
  {
    uint64_t v91 = v28;
    uint64_t v38 = v118;
    uint64_t v92 = v24;
    uint64_t v93 = v26;
    uint64_t v90 = *(void *)(v120 + 16);
    if (v90)
    {
      uint64_t v39 = (uint64_t)v112 + *(int *)(v15 + 48);
      uint64_t v40 = v112;
      sub_10000FB74(v120 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80)), (uint64_t)v17, &qword_1005243F0);
      uint64_t v41 = (uint64_t)v17 + *(int *)(v15 + 48);
      uint64_t v42 = *v17;
      *uint64_t v40 = v42;
      sub_100300180(v41, v39, type metadata accessor for Lens_Item);
      uint64_t v43 = v96;
      sub_100300C54(v39, v96, type metadata accessor for Lens_Item);
      sub_100300C54(v38, (uint64_t)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
      unint64_t v44 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
      uint64_t v94 = v29;
      uint64_t v45 = v91;
      unint64_t v46 = (v95 + *(unsigned __int8 *)(v91 + 80) + v44) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      uint64_t v47 = swift_allocObject();
      sub_100300180(v43, v47 + v44, type metadata accessor for Lens_Item);
      uint64_t v48 = sub_100300180((uint64_t)v30, v47 + v46, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
      __chkstk_darwin(v48);
      *(&v90 - 4) = v39;
      *(&v90 - 3) = v42;
      LOBYTE(OpaqueTypeConformance2) = 0;
      sub_10000F214(&qword_100528550);
      sub_1002FFF18();
      uint64_t v49 = v99;
      uint64_t v50 = v45;
      Button.init(action:label:)();
      uint64_t v51 = (uint64_t *)(*(void *)(v39 + *(int *)(v97 + 20))
                      + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
      swift_beginAccess();
      uint64_t v52 = (ValueMetadata *)v51[1];
      uint64_t v128 = *v51;
      uint64_t v129 = v52;
      sub_100013AA8(&qword_100528568, &qword_100528520);
      sub_1000317A0();
      uint64_t v53 = (uint64_t)v100;
      uint64_t v54 = v102;
      View.accessibilityLabel<A>(_:)();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v49, v54);
      sub_1002FFFE8();
      sub_1003000B8();
      uint64_t v55 = v98;
      View.buttonStyle<A>(_:)();
      uint64_t v56 = v118;
      sub_10000FBD8(v53, &qword_100528528);
      sub_10000FBD8((uint64_t)v112, &qword_1005243F0);
      uint64_t v57 = v103;
      uint64_t v58 = v122;
      uint64_t v59 = v55;
      uint64_t v60 = v121;
      (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v122, v59, v121);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v60);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v103 + 56))(v122, 1, 1, v121, v33);
      uint64_t v56 = v38;
      uint64_t v50 = v91;
    }
    sub_100300C54(v56, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    unint64_t v69 = (*(unsigned __int8 *)(v50 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v70 = swift_allocObject();
    sub_100300180((uint64_t)v30, v70 + v69, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v72 = (uint64_t)v107;
    uint64_t *v107 = KeyPath;
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v73 = v104;
    *(void *)(v72 + *(int *)(v104 + 20)) = v106;
    uint64_t v74 = (uint64_t (**)(uint64_t))(v72 + *(int *)(v73 + 24));
    *uint64_t v74 = sub_100300110;
    v74[1] = (uint64_t (*)(uint64_t))v70;
    sub_100300180(v72, v123, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
    uint64_t v75 = *(unsigned __int8 *)(v116 + 80);
    uint64_t v128 = v120;
    uint64_t v129 = (ValueMetadata *)(v120 + ((v75 + 32) & ~v75));
    BOOL v130 = v90 != 0;
    uint64_t v131 = (2 * v90) | 1;
    uint64_t v116 = swift_getKeyPath();
    sub_100300C54(v56, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    uint64_t v76 = swift_allocObject();
    sub_100300180((uint64_t)v30, v76 + v69, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = sub_100300400;
    *(void *)(v77 + 24) = v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000F214(&qword_100528580);
    sub_100013AA8(&qword_100528588, &qword_100528580);
    unint64_t v78 = sub_1002FFFE8();
    unint64_t v79 = sub_1003000B8();
    uint64_t v124 = v119;
    uint64_t v125 = &type metadata for ImageSearchCardButtonStyle;
    unint64_t v126 = v78;
    unint64_t v127 = v79;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    char v80 = v117;
    ForEach<>.init(_:id:content:)();
    uint64_t v81 = v105;
    sub_10000FB74(v122, v105, &qword_100528538);
    sub_100300C54(v123, v72, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
    uint64_t v82 = v109;
    unint64_t v83 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
    uint64_t v84 = v108;
    uint64_t v85 = v110;
    v83(v108, v80, v110);
    uint64_t v86 = v111;
    sub_10000FB74(v81, v111, &qword_100528538);
    uint64_t v87 = sub_10000F214(&qword_100528590);
    sub_100300C54(v72, v86 + *(int *)(v87 + 48), (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
    v83((char *)(v86 + *(int *)(v87 + 64)), v84, v85);
    uint64_t v88 = *(void (**)(char *, uint64_t))(v82 + 8);
    v88(v84, v85);
    sub_100300CBC(v72, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
    sub_10000FBD8(v81, &qword_100528538);
    sub_10000FB74(v86, (uint64_t)v93, &qword_100528510);
    swift_storeEnumTagMultiPayload();
    sub_1003004C4();
    sub_100013AA8(&qword_1005285A0, &qword_100528510);
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v86, &qword_100528510);
    v88(v117, v85);
    sub_100300CBC(v123, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
    return sub_10000FBD8(v122, &qword_100528538);
  }
  else
  {
    uint64_t v61 = v120;
    uint64_t v124 = v120;
    uint64_t v123 = swift_getKeyPath();
    sub_100300C54(v118, (uint64_t)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    unint64_t v62 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v63 = swift_allocObject();
    sub_100300180((uint64_t)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v63 + v62, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    *(void *)(v63 + ((v29 + v62 + 7) & 0xFFFFFFFFFFFFFFF8)) = v61;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = sub_1003007AC;
    *(void *)(v64 + 24) = v63;
    swift_bridgeObjectRetain_n();
    sub_10000F214(&qword_1005285A8);
    sub_100013AA8(&qword_1005285B0, &qword_1005285A8);
    unint64_t v65 = sub_1002FFFE8();
    unint64_t v66 = sub_1003000B8();
    uint64_t v128 = v119;
    uint64_t v129 = &type metadata for ImageSearchCardButtonStyle;
    BOOL v130 = v65;
    uint64_t v131 = v66;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    ForEach<>.init(_:id:content:)();
    uint64_t v67 = v113;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v26, v35, v113);
    swift_storeEnumTagMultiPayload();
    sub_1003004C4();
    sub_100013AA8(&qword_1005285A0, &qword_100528510);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, v67);
  }
}

uint64_t sub_1002FC818()
{
  uint64_t v0 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t v6 = type metadata accessor for IdentifiableURL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for ImageSearchResultView();
  sub_10000FB74((uint64_t)v5, (uint64_t)v2, &qword_100519590);
  sub_10000F214(&qword_100519688);
  State.wrappedValue.setter();
  return sub_10000FBD8((uint64_t)v5, &qword_100519590);
}

uint64_t sub_1002FC934@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*(void *)(a1 + *(int *)(type metadata accessor for Lens_Item(0) + 20))
                + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002FC99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v46 = a2;
  uint64_t v47 = a5;
  uint64_t v42 = a1;
  uint64_t v6 = type metadata accessor for ImageSearchResultView();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v36 + 64);
  __chkstk_darwin(v6);
  uint64_t v41 = type metadata accessor for Lens_Item(0);
  uint64_t v35 = *(void *)(v41 - 8);
  uint64_t v8 = *(void *)(v35 + 64);
  __chkstk_darwin(v41);
  uint64_t v9 = sub_10000F214(&qword_100528520);
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000F214(&qword_100528528);
  __chkstk_darwin(v43);
  uint64_t v37 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ContentSizeCategory();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_100528530);
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v40 = v17;
  __chkstk_darwin(v17);
  uint64_t v38 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v34 + 16) == 1)
  {
    char v19 = 0;
  }
  else
  {
    sub_10027CDC8((uint64_t)v16);
    char v20 = ContentSizeCategory.isAccessibilityCategory.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    char v19 = v20 ^ 1;
  }
  uint64_t v21 = a3;
  uint64_t v22 = v46;
  sub_100300C54(v46, (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Lens_Item);
  sub_100300C54(v21, (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
  unint64_t v23 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v24 = (v8 + *(unsigned __int8 *)(v36 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v25 = swift_allocObject();
  sub_100300180((uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v23, type metadata accessor for Lens_Item);
  uint64_t v26 = sub_100300180((uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
  __chkstk_darwin(v26);
  uint64_t v27 = v42;
  *(&v34 - 4) = v22;
  *(&v34 - 3) = v27;
  *((unsigned char *)&v34 - 16) = v19 & 1;
  sub_10000F214(&qword_100528550);
  sub_1002FFF18();
  Button.init(action:label:)();
  uint64_t v28 = (uint64_t *)(*(void *)(v22 + *(int *)(v41 + 20))
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
  swift_beginAccess();
  uint64_t v29 = v28[1];
  uint64_t v48 = *v28;
  uint64_t v49 = v29;
  sub_100013AA8(&qword_100528568, &qword_100528520);
  sub_1000317A0();
  uint64_t v30 = (uint64_t)v37;
  uint64_t v31 = v45;
  View.accessibilityLabel<A>(_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v31);
  sub_1002FFFE8();
  sub_1003000B8();
  uint64_t v32 = v38;
  View.buttonStyle<A>(_:)();
  sub_10000FBD8(v30, &qword_100528528);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v47, v32, v40);
}

uint64_t sub_1002FCF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v9 = &v19[-v8];
  int v10 = MKBGetDeviceLockState();
  if (v10 && v10 != 3)
  {
    uint64_t v14 = a2 + *(int *)(type metadata accessor for ImageSearchResultView() + 24);
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    char v17 = *(unsigned char *)(v14 + 16);
    sub_10000FCA0();
    uint64_t v18 = (void (*)(uint64_t, char *))sub_10027C858(v15, v16, v17);
    sub_10000FD10();
    char v20 = 1;
    v18(a1, &v20);
    return swift_release();
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, a1, v11);
    uint64_t v12 = type metadata accessor for IdentifiableURL();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 0, 1, v12);
    type metadata accessor for ImageSearchResultView();
    sub_10000FB74((uint64_t)v9, (uint64_t)v6, &qword_100519590);
    sub_10000F214(&qword_100519688);
    State.wrappedValue.setter();
    return sub_10000FBD8((uint64_t)v9, &qword_100519590);
  }
}

void sub_1002FD148(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v5 = type metadata accessor for ImageSearchResultView();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v29 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v31 = type metadata accessor for Lens_Item(0);
  uint64_t v7 = *(void *)(v31 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100528520);
  uint64_t v32 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100528528);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1 + 2;
  if (__OFADD__(a1, 2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = v10;
    uint64_t v28 = v14;
    uint64_t v18 = v33;
    sub_100300C54(v33, (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Lens_Item);
    sub_100300C54(v30, (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v20 = (v8 + *(unsigned __int8 *)(v29 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v21 = swift_allocObject();
    sub_100300180((uint64_t)v9, v21 + v19, type metadata accessor for Lens_Item);
    uint64_t v22 = sub_100300180((uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, (uint64_t (*)(void))type metadata accessor for ImageSearchResultView);
    __chkstk_darwin(v22);
    *(&v26 - 4) = v18;
    *(&v26 - 3) = v17;
    *((unsigned char *)&v26 - 16) = 0;
    sub_10000F214(&qword_100528550);
    sub_1002FFF18();
    Button.init(action:label:)();
    unint64_t v23 = (uint64_t *)(*(void *)(v18 + *(int *)(v31 + 20))
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
    swift_beginAccess();
    uint64_t v24 = v23[1];
    uint64_t v35 = *v23;
    uint64_t v36 = v24;
    sub_100013AA8(&qword_100528568, &qword_100528520);
    sub_1000317A0();
    uint64_t v25 = v27;
    View.accessibilityLabel<A>(_:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v25);
    sub_1002FFFE8();
    sub_1003000B8();
    View.buttonStyle<A>(_:)();
    sub_10000FBD8((uint64_t)v16, &qword_100528528);
  }
}

uint64_t sub_1002FD580(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v24[-v7];
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Lens_Item(0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_10000FBD8((uint64_t)v11, &qword_10051E070);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v15, v11, v12);
  int v17 = MKBGetDeviceLockState();
  if (v17 && v17 != 3)
  {
    uint64_t v19 = a2 + *(int *)(type metadata accessor for ImageSearchResultView() + 24);
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    sub_10000FCA0();
    unint64_t v23 = (void (*)(unsigned char *, char *))sub_10027C858(v20, v21, v22);
    sub_10000FD10();
    char v25 = 1;
    v23(v15, &v25);
    swift_release();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16))(v8, v15, v12);
    uint64_t v18 = type metadata accessor for IdentifiableURL();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 0, 1, v18);
    type metadata accessor for ImageSearchResultView();
    sub_10000FB74((uint64_t)v8, (uint64_t)v5, &qword_100519590);
    sub_10000F214(&qword_100519688);
    State.wrappedValue.setter();
    sub_10000FBD8((uint64_t)v8, &qword_100519590);
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1002FD8F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Lens_Item(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ImageSearchCardView(0);
  uint64_t v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100300C54(a1, (uint64_t)v10, type metadata accessor for Lens_Item);
  *uint64_t v14 = swift_getKeyPath();
  sub_10000F214(&qword_10051BB48);
  swift_storeEnumTagMultiPayload();
  sub_100300180((uint64_t)v10, (uint64_t)v14 + v12[7], type metadata accessor for Lens_Item);
  *(uint64_t *)((char *)v14 + v12[8]) = a2;
  *((unsigned char *)v14 + v12[9]) = a3;
  int v15 = static HierarchicalShapeStyle.primary.getter();
  sub_100300C54((uint64_t)v14, a4, type metadata accessor for ImageSearchCardView);
  *(_DWORD *)(a4 + *(int *)(sub_10000F214(&qword_100528550) + 36)) = v15;
  return sub_100300CBC((uint64_t)v14, type metadata accessor for ImageSearchCardView);
}

void sub_1002FDAA4()
{
  sub_1002FE1D8(v0, &v11);
  uint64_t v1 = v11;
  if ((void)v11)
  {
    uint64_t v2 = *((void *)&v11 + 1);
    Hasher._combine(_:)(1uLL);
    Swift::UInt v3 = *(void *)(v1 + 16);
    Hasher._combine(_:)(v3);
    if (v3)
    {
      uint64_t v4 = *(void *)(type metadata accessor for Lens_Item(0) - 8);
      uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v6 = *(void *)(v4 + 72);
      sub_100300F98(&qword_1005285B8, (void (*)(uint64_t))type metadata accessor for Lens_Item);
      do
      {
        dispatch thunk of Hashable.hash(into:)();
        v5 += v6;
        --v3;
      }
      while (v3);
    }
    Swift::UInt v7 = *(void *)(v2 + 16);
    Hasher._combine(_:)(v7);
    if (v7)
    {
      uint64_t v8 = *(void *)(type metadata accessor for Lens_RelatedSearch(0) - 8);
      uint64_t v9 = v2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v10 = *(void *)(v8 + 72);
      sub_100300F98(&qword_1005285C0, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
      do
      {
        dispatch thunk of Hashable.hash(into:)();
        v9 += v10;
        --v7;
      }
      while (v7);
    }
    String.hash(into:)();
    String.hash(into:)();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1002FDCEC()
{
  Hasher.init(_seed:)();
  sub_1002FE1D8(v0, &v12);
  uint64_t v1 = v12;
  if ((void)v12)
  {
    uint64_t v2 = *((void *)&v12 + 1);
    Hasher._combine(_:)(1uLL);
    Swift::UInt v3 = *(void *)(v1 + 16);
    Hasher._combine(_:)(v3);
    if (v3)
    {
      uint64_t v4 = *(void *)(type metadata accessor for Lens_Item(0) - 8);
      uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v6 = *(void *)(v4 + 72);
      sub_100300F98(&qword_1005285B8, (void (*)(uint64_t))type metadata accessor for Lens_Item);
      do
      {
        dispatch thunk of Hashable.hash(into:)();
        v5 += v6;
        --v3;
      }
      while (v3);
    }
    Swift::UInt v7 = *(void *)(v2 + 16);
    Hasher._combine(_:)(v7);
    if (v7)
    {
      uint64_t v8 = *(void *)(type metadata accessor for Lens_RelatedSearch(0) - 8);
      uint64_t v9 = v2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v10 = *(void *)(v8 + 72);
      sub_100300F98(&qword_1005285C0, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
      do
      {
        dispatch thunk of Hashable.hash(into:)();
        v9 += v10;
        --v7;
      }
      while (v7);
    }
    String.hash(into:)();
    String.hash(into:)();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002FDF44(long long *a1, long long *a2)
{
  sub_1002FE1D8(a1, v4);
  sub_1002FE1D8(a2, v5);
  return sub_1002FE05C(v4, v5) & 1;
}

Swift::Int sub_1002FDF90()
{
  sub_1002FE1D8(v0, v2);
  return sub_1002FDCEC();
}

void sub_1002FDFC8()
{
  sub_1002FE1D8(v0, v1);
  sub_1002FDAA4();
}

Swift::Int sub_1002FE008()
{
  sub_1002FE1D8(v0, v2);
  Hasher.init(_seed:)();
  sub_1002FDAA4();
  return Hasher._finalize()();
}

uint64_t sub_1002FE05C(long long *a1, long long *a2)
{
  sub_1002FE1D8(a1, &v34);
  uint64_t v3 = v34;
  if ((void)v34)
  {
    uint64_t v4 = *((void *)&v34 + 1);
    uint64_t v5 = v35;
    uint64_t v7 = v36;
    uint64_t v6 = v37;
    uint64_t v9 = v38;
    uint64_t v8 = v39;
    uint64_t v10 = v40;
    sub_1002FE1D8(a2, &v27);
    if (!(void)v27) {
      goto LABEL_14;
    }
    uint64_t v24 = v5;
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    uint64_t v22 = v10;
    uint64_t v23 = v8;
    uint64_t v11 = *((void *)&v27 + 1);
    uint64_t v12 = v28;
    uint64_t v14 = v29;
    uint64_t v13 = v30;
    uint64_t v15 = v31;
    uint64_t v16 = v32;
    uint64_t v17 = v33;
    if ((sub_1003E29C4(v3, v27) & 1) == 0) {
      goto LABEL_14;
    }
    if (sub_1003E2C34(v4, v11))
    {
      if (v24 == v12 && v25 == v14 || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v19 = 0, (v18 & 1) != 0))
      {
        if (v26 == v13 && v9 == v15 || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v19 = 0, (v20 & 1) != 0))
        {
          if (v23 == v16 && v22 == v17) {
            char v19 = 1;
          }
          else {
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
    }
    else
    {
LABEL_14:
      char v19 = 0;
    }
  }
  else
  {
    sub_1002FE1D8(a2, &v27);
    char v19 = (void)v27 == 0;
  }
  return v19 & 1;
}

_OWORD *sub_1002FE1D8(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t sub_1002FE1F0(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    sub_100050714(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = (uint64_t *)(a2 + v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    char v20 = *((unsigned char *)v17 + 16);
    sub_10000FCA0();
    *(void *)uint64_t v16 = v18;
    *(void *)(v16 + 8) = v19;
    *(unsigned char *)(v16 + 16) = v20;
    uint64_t v21 = a3[7];
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (void *)(a2 + v21);
    if (*v23)
    {
      uint64_t v25 = v23[1];
      uint64_t v24 = v23[2];
      *uint64_t v22 = *v23;
      v22[1] = v25;
      uint64_t v27 = v23[3];
      uint64_t v26 = v23[4];
      v22[2] = v24;
      v22[3] = v27;
      uint64_t v29 = v23[5];
      uint64_t v28 = v23[6];
      v22[4] = v26;
      v22[5] = v29;
      uint64_t v30 = v23[7];
      v22[6] = v28;
      v22[7] = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v31 = *((_OWORD *)v23 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v31;
      long long v32 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v32;
    }
    uint64_t v33 = a3[8];
    long long v34 = (char *)(a1 + v33);
    uint64_t v35 = (char *)(a2 + v33);
    uint64_t v36 = type metadata accessor for IdentifiableURL();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = sub_10000F214(&qword_100519590);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v39 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v34, v35, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    uint64_t v40 = sub_10000F214(&qword_100519688);
    *(void *)&v34[*(int *)(v40 + 28)] = *(void *)&v35[*(int *)(v40 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t sub_1002FE4EC(uint64_t a1, int *a2)
{
  sub_100050720(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = a1 + a2[5];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_10000FD10();
  if (*(void *)(a1 + a2[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for IdentifiableURL();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
  }
  sub_10000F214(&qword_100519688);

  return swift_release();
}

uint64_t sub_1002FE680(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_100050714(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  char v18 = *((unsigned char *)v15 + 16);
  sub_10000FCA0();
  *(void *)uint64_t v14 = v16;
  *(void *)(v14 + 8) = v17;
  *(unsigned char *)(v14 + 16) = v18;
  uint64_t v19 = a3[7];
  char v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  if (*v21)
  {
    uint64_t v23 = v21[1];
    uint64_t v22 = v21[2];
    void *v20 = *v21;
    v20[1] = v23;
    uint64_t v25 = v21[3];
    uint64_t v24 = v21[4];
    v20[2] = v22;
    v20[3] = v25;
    uint64_t v27 = v21[5];
    uint64_t v26 = v21[6];
    v20[4] = v24;
    v20[5] = v27;
    uint64_t v28 = v21[7];
    v20[6] = v26;
    v20[7] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *((_OWORD *)v21 + 1);
    *(_OWORD *)char v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v29;
    long long v30 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v30;
  }
  uint64_t v31 = a3[8];
  long long v32 = (char *)(a1 + v31);
  uint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = type metadata accessor for IdentifiableURL();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = sub_10000F214(&qword_100519590);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    uint64_t v37 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v32, v33, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v38 = sub_10000F214(&qword_100519688);
  *(void *)&v32[*(int *)(v38 + 28)] = *(void *)&v33[*(int *)(v38 + 28)];
  swift_retain();
  return a1;
}

uint64_t sub_1002FE930(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_100050714(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_100050720(v9, v10, v11);
  if (a1 != a2)
  {
    uint64_t v12 = a3[5];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    sub_10000FBD8(a1 + v12, &qword_10051BB48);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  char v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  char v21 = *((unsigned char *)v18 + 16);
  sub_10000FCA0();
  *(void *)uint64_t v17 = v19;
  *(void *)(v17 + 8) = v20;
  *(unsigned char *)(v17 + 16) = v21;
  sub_10000FD10();
  uint64_t v22 = a3[7];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (long long *)(a2 + v22);
  uint64_t v25 = *(void *)(a2 + v22);
  if (*(void *)(a1 + v22))
  {
    if (v25)
    {
      *uint64_t v23 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23[1] = *((void *)v24 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23[2] = *((void *)v24 + 2);
      v23[3] = *((void *)v24 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23[4] = *((void *)v24 + 4);
      v23[5] = *((void *)v24 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23[6] = *((void *)v24 + 6);
      v23[7] = *((void *)v24 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10000FBD8(a1 + v22, &qword_100528408);
      long long v26 = v24[3];
      long long v28 = *v24;
      long long v27 = v24[1];
      *((_OWORD *)v23 + 2) = v24[2];
      *((_OWORD *)v23 + 3) = v26;
      *(_OWORD *)uint64_t v23 = v28;
      *((_OWORD *)v23 + 1) = v27;
    }
  }
  else if (v25)
  {
    *uint64_t v23 = v25;
    v23[1] = *((void *)v24 + 1);
    v23[2] = *((void *)v24 + 2);
    v23[3] = *((void *)v24 + 3);
    v23[4] = *((void *)v24 + 4);
    v23[5] = *((void *)v24 + 5);
    v23[6] = *((void *)v24 + 6);
    v23[7] = *((void *)v24 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *v24;
    long long v30 = v24[1];
    long long v31 = v24[3];
    *((_OWORD *)v23 + 2) = v24[2];
    *((_OWORD *)v23 + 3) = v31;
    *(_OWORD *)uint64_t v23 = v29;
    *((_OWORD *)v23 + 1) = v30;
  }
  uint64_t v32 = a3[8];
  uint64_t v33 = (char *)(a1 + v32);
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for IdentifiableURL();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      uint64_t v44 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 24))(v33, v34, v44);
      goto LABEL_19;
    }
    sub_100300CBC((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    goto LABEL_18;
  }
  if (v39)
  {
LABEL_18:
    uint64_t v41 = sub_10000F214(&qword_100519590);
    memcpy(v33, v34, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v40 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v33, v34, v40);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_19:
  uint64_t v42 = sub_10000F214(&qword_100519688);
  *(void *)&v33[*(int *)(v42 + 28)] = *(void *)&v34[*(int *)(v42 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1002FED74(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = (long long *)(a2 + v11);
  long long v15 = *v14;
  *(unsigned char *)(v13 + 16) = *((unsigned char *)v14 + 16);
  *(_OWORD *)uint64_t v13 = v15;
  uint64_t v16 = (_OWORD *)(a1 + v12);
  uint64_t v17 = (_OWORD *)(a2 + v12);
  long long v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  long long v19 = v17[3];
  v16[2] = v17[2];
  v16[3] = v19;
  uint64_t v20 = a3[8];
  char v21 = (char *)(a1 + v20);
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for IdentifiableURL();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_10000F214(&qword_100519590);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v21, v22, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v27 = sub_10000F214(&qword_100519688);
  *(void *)&v21[*(int *)(v27 + 28)] = *(void *)&v22[*(int *)(v27 + 28)];
  return a1;
}

uint64_t sub_1002FEFA0(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100050720(v7, v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_10000FBD8(a1 + v10, &qword_10051BB48);
    uint64_t v13 = sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(unsigned char *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = v18;
  sub_10000FD10();
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  char v21 = (void *)(a2 + v19);
  if (*(void *)(a1 + v19))
  {
    if (*v21)
    {
      void *v20 = *v21;
      swift_bridgeObjectRelease();
      v20[1] = v21[1];
      swift_bridgeObjectRelease();
      uint64_t v22 = v21[3];
      v20[2] = v21[2];
      v20[3] = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = v21[5];
      v20[4] = v21[4];
      v20[5] = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = v21[7];
      v20[6] = v21[6];
      v20[7] = v24;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_10000FBD8((uint64_t)v20, &qword_100528408);
  }
  long long v25 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v25;
  long long v26 = *((_OWORD *)v21 + 3);
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  *((_OWORD *)v20 + 3) = v26;
LABEL_10:
  uint64_t v27 = a3[8];
  long long v28 = (char *)(a1 + v27);
  long long v29 = (char *)(a2 + v27);
  uint64_t v30 = type metadata accessor for IdentifiableURL();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      uint64_t v39 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 40))(v28, v29, v39);
      goto LABEL_16;
    }
    sub_100300CBC((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    goto LABEL_15;
  }
  if (v34)
  {
LABEL_15:
    uint64_t v36 = sub_10000F214(&qword_100519590);
    memcpy(v28, v29, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_16;
  }
  uint64_t v35 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v28, v29, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_16:
  uint64_t v37 = sub_10000F214(&qword_100519688);
  *(void *)&v28[*(int *)(v37 + 28)] = *(void *)&v29[*(int *)(v37 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_1002FF314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002FF328);
}

uint64_t sub_1002FF328(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB50);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v12 = *(void *)(a1 + a3[7]);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = sub_10000F214(&qword_100519688);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[8];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_1002FF46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002FF480);
}

uint64_t sub_1002FF480(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_10000F214(&qword_10051BB50);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[7]) = a2;
  }
  else
  {
    uint64_t v13 = sub_10000F214(&qword_100519688);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[8];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t type metadata accessor for ImageSearchResultView()
{
  uint64_t result = qword_100528468;
  if (!qword_100528468) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002FF604()
{
  sub_100082914();
  if (v0 <= 0x3F)
  {
    sub_1002FF6E4();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1002FF6E4()
{
  if (!qword_1005196F8)
  {
    sub_10000F69C(&qword_100519590);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1005196F8);
    }
  }
}

unint64_t destroy for ImageSearchState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ImageSearchState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v6;
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithCopy for ImageSearchState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v6 = *(_OWORD *)a2;
    long long v7 = *((_OWORD *)a2 + 1);
    long long v8 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v8;
    *(_OWORD *)a1 = v6;
    *((_OWORD *)a1 + 1) = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ImageSearchState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageSearchState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ImageSearchState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_1002FFB48(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ImageSearchState()
{
  return &type metadata for ImageSearchState;
}

unint64_t sub_1002FFB8C()
{
  unint64_t result = qword_1005284B0;
  if (!qword_1005284B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005284B0);
  }
  return result;
}

uint64_t sub_1002FFBE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002FFBFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002FB108(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1002FFC08@<X0>(uint64_t a1@<X8>)
{
  return sub_1002FB540(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1002FFC18()
{
  type metadata accessor for ImageSearchResultView();

  return sub_1002FC818();
}

unint64_t sub_1002FFC78()
{
  unint64_t result = qword_100528500;
  if (!qword_100528500)
  {
    sub_10000F69C(&qword_1005284D0);
    sub_10000F69C(&qword_1005284C0);
    type metadata accessor for IdentifiableURL();
    type metadata accessor for InAppWebPresentationView(255);
    sub_10000F69C(&qword_1005284B8);
    sub_100013AA8(&qword_1005284F8, &qword_1005284B8);
    swift_getOpaqueTypeConformance2();
    sub_100300F98(&qword_1005197D0, (void (*)(uint64_t))type metadata accessor for IdentifiableURL);
    sub_100300F98(&qword_1005197D8, (void (*)(uint64_t))type metadata accessor for InAppWebPresentationView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528500);
  }
  return result;
}

unint64_t sub_1002FFE20()
{
  unint64_t result = qword_100528508;
  if (!qword_100528508)
  {
    sub_10000F69C(&qword_1005284E8);
    type metadata accessor for EmptyResultsView();
    sub_100300F98(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    swift_getOpaqueTypeConformance2();
    sub_1002FFC78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528508);
  }
  return result;
}

uint64_t sub_1002FFF0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002FD8F4(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

unint64_t sub_1002FFF18()
{
  unint64_t result = qword_100528558;
  if (!qword_100528558)
  {
    sub_10000F69C(&qword_100528550);
    sub_100300F98(&qword_100528560, (void (*)(uint64_t))type metadata accessor for ImageSearchCardView);
    sub_100013AA8(&qword_100518D20, &qword_100518D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528558);
  }
  return result;
}

unint64_t sub_1002FFFE8()
{
  unint64_t result = qword_100528570;
  if (!qword_100528570)
  {
    sub_10000F69C(&qword_100528528);
    sub_100013AA8(&qword_100528568, &qword_100528520);
    sub_100300F98((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528570);
  }
  return result;
}

unint64_t sub_1003000B8()
{
  unint64_t result = qword_100528578;
  if (!qword_100528578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528578);
  }
  return result;
}

uint64_t sub_100300110(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ImageSearchResultView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1002FCF50(a1, v4);
}

uint64_t sub_100300180(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003001F0()
{
  uint64_t v1 = (int *)type metadata accessor for ImageSearchResultView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  sub_100050720(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  uint64_t v3 = v2 + v1[5];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  sub_10000FD10();
  if (*(void *)(v2 + v1[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = v2 + v1[8];
  uint64_t v6 = type metadata accessor for IdentifiableURL();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  sub_10000F214(&qword_100519688);
  swift_release();

  return swift_deallocObject();
}

void sub_100300400(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(type metadata accessor for ImageSearchResultView() - 8);
  uint64_t v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  sub_1002FD148(a1, a2, v8, a3);
}

uint64_t sub_100300488()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1003004C4()
{
  unint64_t result = qword_100528598;
  if (!qword_100528598)
  {
    sub_10000F69C(&qword_100528548);
    sub_10000F69C(&qword_100528528);
    sub_1002FFFE8();
    sub_1003000B8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528598);
  }
  return result;
}

uint64_t sub_100300588()
{
  uint64_t v1 = (int *)type metadata accessor for ImageSearchResultView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  sub_100050720(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
  uint64_t v3 = v2 + v1[5];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  sub_10000FD10();
  if (*(void *)(v2 + v1[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = v2 + v1[8];
  uint64_t v6 = type metadata accessor for IdentifiableURL();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  sub_10000F214(&qword_100519688);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1003007AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(type metadata accessor for ImageSearchResultView() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1002FC99C(a1, a2, v3 + v8, v9, a3);
}

uint64_t sub_100300860(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = sub_10000F214(&qword_1005243F0);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_1003008C8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Lens_Item(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = (int *)type metadata accessor for ImageSearchResultView();
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(*((void *)v4 - 1) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v2, v6);
  swift_release();
  uint64_t v7 = v0 + v5;
  sub_100050720(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8), *(unsigned char *)(v0 + v5 + 16));
  unint64_t v8 = v0 + v5 + v4[5];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  sub_10000FD10();
  if (*(void *)(v7 + v4[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v7 + v4[8];
  uint64_t v11 = type metadata accessor for IdentifiableURL();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
  }
  sub_10000F214(&qword_100519688);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100300B80()
{
  uint64_t v1 = *(void *)(type metadata accessor for Lens_Item(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for ImageSearchResultView() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_1002FD580(v0 + v2, v5);
}

uint64_t sub_100300C54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100300CBC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100300D1C()
{
  uint64_t v1 = (int *)type metadata accessor for ImageSearchResultView();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v2;
  sub_100050720(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8), *(unsigned char *)(v0 + v2 + 16));
  unint64_t v4 = v0 + v2 + v1[5];
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_10000FD10();
  if (*(void *)(v3 + v1[7]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v3 + v1[8];
  uint64_t v7 = type metadata accessor for IdentifiableURL();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
  }
  sub_10000F214(&qword_100519688);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100300F34()
{
  uint64_t v1 = *(void *)(type metadata accessor for ImageSearchResultView() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1002FB338(v2, v3, v4);
}

uint64_t sub_100300F98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100300FE4()
{
  unint64_t result = qword_1005285C8;
  if (!qword_1005285C8)
  {
    sub_10000F69C((uint64_t *)&unk_1005285D0);
    sub_100218390();
    sub_1002FFE20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005285C8);
  }
  return result;
}

uint64_t sub_100301068(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      type metadata accessor for ActionBarItem(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

int64_t sub_100301100(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0;
    }
    if (v2 >= v3) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

void *sub_100301144(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v25 = result[4] >> 1;
  if (!__OFSUB__(v25, v1))
  {
    uint64_t v24 = result[3];
    uint64_t v2 = *result;
    uint64_t v23 = result[2];
    uint64_t v3 = *(void *)(*result + 16);
    if (v25 - v1 >= v3) {
      uint64_t v4 = *(void *)(v2 + 16);
    }
    else {
      uint64_t v4 = v25 - v1;
    }
    unint64_t result = (void *)sub_100040B08(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      goto LABEL_36;
    }
    if (v4)
    {
      unint64_t v5 = (double *)(v2 + 32);
      uint64_t v6 = v24;
      if (v24 <= v25) {
        uint64_t v7 = v25;
      }
      else {
        uint64_t v7 = v24;
      }
      swift_bridgeObjectRetain();
      unint64_t result = (void *)swift_unknownObjectRetain();
      uint64_t v8 = v4;
      uint64_t v9 = v24;
      uint64_t v10 = v23;
      while (v3)
      {
        if (v25 == v9) {
          goto LABEL_31;
        }
        if (v7 == v9) {
          goto LABEL_32;
        }
        double v11 = *(double *)(v10 + 8 * v9);
        double v12 = *v5;
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        if (v14 >= v13 >> 1)
        {
          unint64_t result = (void *)sub_100040B08(v13 > 1, v14 + 1, 1);
          uint64_t v10 = v23;
          uint64_t v6 = v24;
        }
        _swiftEmptyArrayStorage[2] = v14 + 1;
        uint64_t v15 = (double *)&_swiftEmptyArrayStorage[2 * v14];
        v15[4] = v11;
        v15[5] = v11 - v12;
        ++v5;
        ++v9;
        if (!--v8) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t result = (void *)swift_unknownObjectRetain();
      uint64_t v10 = v23;
      uint64_t v6 = v24;
      uint64_t v9 = v24;
LABEL_19:
      unint64_t v16 = *(void *)(v2 + 16);
      if (v4 == v16)
      {
LABEL_20:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return _swiftEmptyArrayStorage;
      }
      uint64_t v17 = v9;
      while (v4 < v16)
      {
        if (v25 == v17) {
          goto LABEL_20;
        }
        if (v9 < v6 || v17 >= v25) {
          goto LABEL_34;
        }
        double v18 = *(double *)(v2 + 32 + 8 * v4);
        double v19 = *(double *)(v10 + 8 * v17);
        unint64_t v21 = _swiftEmptyArrayStorage[2];
        unint64_t v20 = _swiftEmptyArrayStorage[3];
        if (v21 >= v20 >> 1)
        {
          unint64_t result = (void *)sub_100040B08(v20 > 1, v21 + 1, 1);
          uint64_t v10 = v23;
          uint64_t v6 = v24;
        }
        ++v4;
        _swiftEmptyArrayStorage[2] = v21 + 1;
        uint64_t v22 = (double *)&_swiftEmptyArrayStorage[2 * v21];
        v22[4] = v19;
        v22[5] = v19 - v18;
        unint64_t v16 = *(void *)(v2 + 16);
        ++v17;
        if (v4 == v16) {
          goto LABEL_20;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10030139C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  *unint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v6 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v8 = *(NSObject **)(v1 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerStateMutexQueue);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v1;
    *(unsigned char *)(v9 + 24) = 1;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_1003088D8;
    *(void *)(v10 + 24) = v9;
    aBlock[4] = sub_10014C6EC;
    void aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100109E30;
    aBlock[3] = &unk_1004F3EA0;
    double v11 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v8, v11);
    _Block_release(v11);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((v8 & 1) == 0) {
      return sub_10018B700("PreviewLayer.CALayerUpdated", 27, 2, 1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*sub_100301614())()
{
  return j__swift_endAccess;
}

NSString sub_100301678()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10055E410 = (uint64_t)result;
  return result;
}

NSString sub_1003016B0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10055E418 = (uint64_t)result;
  return result;
}

void sub_1003016E8(uint64_t a1, char a2)
{
  int v3 = a2 & 1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8);
  double v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC6Tamale12PreviewLayer__layerIsSafeInternal;
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerIsSafeInternal) != v3)
  {
    uint64_t v20 = v10;
    uint64_t v21 = v9;
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v19 = v5;
    uint64_t v18 = static OS_dispatch_queue.main.getter();
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = a1;
    aBlock[4] = sub_1003081F8;
    void aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004F3E28;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_100308538((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v16 = (void *)v18;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
    swift_release();
  }
  *(unsigned char *)(a1 + v13) = v3;
}

uint64_t sub_1003019DC(char a1)
{
  if (a1)
  {
    if (qword_100517D58 != -1) {
      swift_once();
    }
    sub_1000645F8();
    Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      int v3 = Strong;
      LODWORD(v2) = 1.0;
      [Strong setOpacity:v2];
    }
    uint64_t v4 = "PreviewLayer.becameSafe";
    uint64_t v5 = 23;
  }
  else
  {
    uint64_t v6 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v6)
    {
      uint64_t v7 = v6;
      [v6 setOpacity:0.0];
    }
    uint64_t v4 = "PreviewLayer.becameUnsafe";
    uint64_t v5 = 25;
  }
  return sub_10018B700(v4, v5, 2, 1);
}

uint64_t sub_100301AD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v46 = a1;
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v41);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v40 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  uint64_t v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for LoggingSignposter(0);
  __chkstk_darwin(v36);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = v1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_logger;
  if (qword_100517E20 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10000F378(v11, (uint64_t)qword_10055E178);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v20(v18, v19, v11);
  uint64_t v21 = v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer_signposter;
  v20((uint64_t)v17, v19, v11);
  v20((uint64_t)v10, (uint64_t)v17, v11);
  v20((uint64_t)v14, (uint64_t)v17, v11);
  uint64_t v22 = v37;
  OSSignposter.init(logger:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v10[*(int *)(v36 + 20)], v22, v39);
  sub_10018C83C((uint64_t)v10, v21);
  swift_unknownObjectWeakInit();
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer_bufferIdentifiers) = &_swiftEmptyDictionarySingleton;
  uint64_t v23 = OBJC_IVAR____TtC6Tamale12PreviewLayer_candidateDisplayIntervals;
  uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v24 + 16) = 5;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(void *)(v24 + 64) = 0;
  *(void *)(v2 + v23) = v24;
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer_recentDisplayTimes) = _swiftEmptyArrayStorage;
  uint64_t v25 = v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer_queueWrapper;
  *(void *)uint64_t v25 = 0;
  *(_DWORD *)(v25 + 8) = 0;
  uint64_t v26 = OBJC_IVAR____TtC6Tamale12PreviewLayer__layerStateMutexQueue;
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_100308538((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000F214(&qword_100521000);
  sub_10010DE10((unint64_t *)&qword_10051FB70, &qword_100521000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  *(void *)(v2 + v26) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerNeedsUpdateInternal) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerIsSafeInternal) = 0;
  uint64_t v27 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v28 = v46;
  double v29 = 0.0333333333;
  if (*(unsigned char *)(v46 + *(int *)(v27 + 68))) {
    double v29 = 0.0166666667;
  }
  *(double *)(v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer_targetFrameInterval) = v29;
  uint64_t v30 = self;
  id v31 = [v30 defaultCenter];
  uint64_t v32 = qword_100517F98;
  swift_retain();
  if (v32 != -1) {
    swift_once();
  }
  [v31 addObserver:v2 selector:"cleanup" name:qword_10055E410 object:0];

  swift_release();
  id v33 = [v30 defaultCenter];
  uint64_t v34 = qword_100517FA0;
  swift_retain();
  if (v34 != -1) {
    swift_once();
  }
  [v33 addObserver:v2 selector:"sendAccessibilityNotifications" name:qword_10055E418 object:0];

  swift_release();
  sub_1003084A8(v28, type metadata accessor for CameraControllerConfiguration);
  return v2;
}

uint64_t sub_1003021CC()
{
  uint64_t v2 = sub_100301614();
  if (!v3 && !v1) {
    return ((uint64_t (*)(void *, void))v2)(aBlock, 0);
  }
  ((void (*)(void *, void))v2)(aBlock, 0);
  CAImageQueueFlush();
  uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_bufferIdentifiers;
  swift_beginAccess();
  uint64_t v6 = *(void *)v5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(*(void *)v5 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & *(void *)(*(void *)v5 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v9)
    {
      v9 &= v9 - 1;
      goto LABEL_8;
    }
    int64_t v12 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v12 >= v10) {
      goto LABEL_26;
    }
    uint64_t v13 = *(void *)(v6 + 8 * v12);
    ++v11;
    if (!v13)
    {
      int64_t v11 = v12 + 1;
      if (v12 + 1 >= v10) {
        goto LABEL_26;
      }
      uint64_t v13 = *(void *)(v6 + 8 * v11);
      if (!v13)
      {
        int64_t v11 = v12 + 2;
        if (v12 + 2 >= v10) {
          goto LABEL_26;
        }
        uint64_t v13 = *(void *)(v6 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v12 + 3;
          if (v12 + 3 >= v10) {
            goto LABEL_26;
          }
          uint64_t v13 = *(void *)(v6 + 8 * v11);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v9 = (v13 - 1) & v13;
LABEL_8:
    uint64_t result = CAImageQueueUnregisterBuffer();
  }
  int64_t v14 = v12 + 4;
  if (v14 < v10)
  {
    uint64_t v13 = *(void *)(v6 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v11 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_29;
        }
        if (v11 >= v10) {
          goto LABEL_26;
        }
        uint64_t v13 = *(void *)(v6 + 8 * v11);
        ++v14;
        if (v13) {
          goto LABEL_25;
        }
      }
    }
    int64_t v11 = v14;
    goto LABEL_25;
  }
LABEL_26:
  swift_release();
  CAImageQueueInvalidate();
  *(void *)uint64_t v5 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)(v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_recentDisplayTimes);
  swift_beginAccess();
  *uint64_t v15 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v16 = v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_queueWrapper;
  swift_beginAccess();
  uint64_t v17 = *(const void **)v16;
  *(void *)uint64_t v16 = 0;
  *(_DWORD *)(v16 + 8) = 0;
  sub_100307684(v17);
  uint64_t v18 = *(NSObject **)(v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerStateMutexQueue);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v0;
  *(unsigned char *)(v19 + 24) = 0;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_100308884;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = sub_10014C6EC;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  aBlock[3] = &unk_1004F3F90;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v21);
  _Block_release(v21);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return result;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100302588()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.Announcement();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  AccessibilityNotification.Announcement.init(_:)();
  _AccessibilityNotifications.post()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_100302674(void *a1)
{
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v3 = Strong;
  if (a1)
  {
    if (Strong)
    {
      sub_10000F734(0, &qword_100528A98);
      id v4 = a1;
      char v5 = static NSObject.== infix(_:_:)();

      if (v5) {
        return;
      }
    }
  }
  else
  {
    if (!Strong) {
      return;
    }
  }
  uint64_t v6 = (void *)swift_unknownObjectWeakLoadStrong();

  if (a1 && v6)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_unknownObjectWeakAssign();
    id v7 = a1;
    sub_10030139C();
  }
}

uint64_t sub_1003027CC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_queueWrapper;
  swift_beginAccess();
  if (*(void *)v1) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(_DWORD *)(v1 + 8) == 0;
  }
  if (v2)
  {
LABEL_30:
    uint64_t v15 = v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_logger;
    uint64_t v16 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
    sub_1003084A8(v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_signposter, type metadata accessor for LoggingSignposter);
    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100307684(*(CFTypeRef *)v1);

    return v0;
  }
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC6Tamale12PreviewLayer_bufferIdentifiers);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v4 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(v4 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_9;
    }
    int64_t v12 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v9) {
      goto LABEL_29;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v11;
    if (!v13)
    {
      int64_t v11 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_29;
      }
      uint64_t v13 = *(void *)(v5 + 8 * v11);
      if (!v13)
      {
        int64_t v11 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_29;
        }
        uint64_t v13 = *(void *)(v5 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_29;
          }
          uint64_t v13 = *(void *)(v5 + 8 * v11);
          if (!v13)
          {
            int64_t v11 = v12 + 4;
            if (v12 + 4 >= v9) {
              goto LABEL_29;
            }
            uint64_t v13 = *(void *)(v5 + 8 * v11);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v8 = (v13 - 1) & v13;
LABEL_9:
    uint64_t result = CAImageQueueUnregisterBuffer();
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v9)
  {
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v11 = v14;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v11 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_29;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v11);
    ++v14;
    if (v13) {
      goto LABEL_28;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100302A6C()
{
  return sub_1003060F4((void (*)(void))sub_1003027CC);
}

uint64_t sub_100302A84()
{
  return type metadata accessor for PreviewLayer(0);
}

uint64_t type metadata accessor for PreviewLayer(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100528668);
}

uint64_t sub_100302AAC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for LoggingSignposter(319);
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

char *sub_100302BC0()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_10000F214(&qword_100528830);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

uint64_t sub_100302BE8(double a1)
{
  uint64_t v4 = sub_100301614();
  if (!v5 && !v3)
  {
    ((void (*)(uint64_t *, void))v4)(v29, 0);
LABEL_11:
    double v17 = 0.0;
    return *(void *)&v17;
  }
  ((void (*)(uint64_t *, void))v4)(v29, 0);
  uint64_t v6 = (void **)(v1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_candidateDisplayIntervals);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v7 = *v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = sub_100306914(v7);
    *uint64_t v6 = v7;
  }
  int64_t Times = CAImageQueueGetTimes();
  *uint64_t v6 = v7;
  swift_endAccess();
  sub_100301100(Times, (uint64_t)v7);
  int64_t v13 = v12 >> 1;
  if (v11 == v12 >> 1) {
    goto LABEL_9;
  }
  if (v13 > v11)
  {
    double v14 = *(double *)(v10 + 8 * v13 - 8);
    uint64_t v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_recentDisplayTimes);
    swift_beginAccess();
    uint64_t v16 = *v15;
    if (*(void *)(v16 + 16) >= 2uLL)
    {
      if (v14 <= a1)
      {
        sub_10000F214((uint64_t *)&unk_10051D350);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_10043D4F0;
        *(void *)(v28 + 56) = &type metadata for String;
        *(void *)(v28 + 32) = 0xD000000000000030;
        *(void *)(v28 + 40) = 0x800000010042B660;
        swift_bridgeObjectRetain();
        print(_:separator:terminator:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v29[0] = v16;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_1001EA618(v29);
        swift_bridgeObjectRelease();
        uint64_t v19 = *(void *)(v29[0] + 16);
        v29[1] = v29[0];
        v29[2] = v29[0] + 32;
        v29[3] = v19 != 0;
        v29[4] = (2 * v19) | 1;
        swift_retain();
        uint64_t v20 = sub_100301144(v29);
        swift_release_n();
        uint64_t v21 = sub_100306A68((uint64_t)v20, (uint64_t (*)(void))sub_100308204);
        swift_bridgeObjectRelease();
        uint64_t v22 = *(void *)(v21 + 16);
        if (v22)
        {
          double v23 = *(double *)(v21 + 16 * v22 + 16);
          swift_bridgeObjectRelease();
          double v24 = *(double *)(v1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_targetFrameInterval);
          swift_unknownObjectRelease();
          double v25 = v23 + v24;
          BOOL v26 = v23 + v24 <= a1 || v25 > v14;
          if (!v26
            || ((v25 = v23 + v24 + v24, v25 > a1) ? (BOOL v27 = v25 > v14) : (BOOL v27 = 1),
                !v27
             || (double v25 = v23 + v24 * 3.0, v25 > a1) && v25 <= v14
             || (double v17 = 0.0, v25 = v23 + v24 * 4.0, v25 > a1) && v25 <= v14))
          {
            double v17 = v25;
          }
          sub_100302F7C(v1);
          return *(void *)&v17;
        }
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
LABEL_9:
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
LABEL_10:
    sub_100302F7C(v1);
    goto LABEL_11;
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100302F7C(uint64_t a1)
{
  uint64_t v2 = a1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_recentDisplayTimes;
  swift_beginAccess();
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  uint64_t v4 = a1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_bufferIdentifiers;
  uint64_t result = swift_beginAccess();
  int64_t v6 = v3 - *(void *)(*(void *)v4 + 16);
  if (v6 >= 1)
  {
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)v2 + 16) < (unint64_t)v6)
    {
      __break(1u);
    }
    else
    {
      sub_100306CA0(0, v6);
      return swift_endAccess();
    }
  }
  return result;
}

id sub_100303044(void *a1, uint64_t a2)
{
  uint64_t v4 = self;
  [v4 begin];
  [v4 setDisableActions:1];
  [a1 setContents:a2];

  return [v4 commit];
}

uint64_t sub_1003030D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100307E94(a3);
}

void sub_1003030D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void *sub_1003030E4()
{
  uint64_t result = MTLCreateSystemDefaultDevice();
  if (result)
  {
    id v1 = [result newCommandQueue];
    uint64_t result = (void *)swift_unknownObjectRelease();
    if (v1)
    {
      qword_1005285E0 = (uint64_t)v1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100303138(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v44 = v4;
  uint64_t v46 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v45 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  double v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v2;
  if (qword_100517E20 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000F378(v11, (uint64_t)qword_10055E178);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  OSSignposter.init(logger:)();
  uint64_t v16 = sub_100308508();
  if (v16)
  {
    double v17 = v16;
    uint64_t v40 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapesMutex;
    dispatch_workloop_set_scheduler_priority();
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v18 = v17;
    static DispatchQoS.unspecified.getter();
    uint64_t v52 = _swiftEmptyArrayStorage;
    sub_100308538((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10000F214(&qword_100521000);
    sub_10010DE10((unint64_t *)&qword_10051FB70, &qword_100521000);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v43);
    uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    dispatch_activate(v18);

    uint64_t v20 = v51;
    *(void *)(v51 + v40) = v19;
    *(void *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksInternal) = _swiftEmptyArrayStorage;
    uint64_t v21 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksLock;
    sub_10000F214(&qword_10051A0A8);
    uint64_t v22 = swift_allocObject();
    *(void *)(v20 + v21) = v22;
    *(void *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_colors) = &_swiftEmptyDictionarySingleton;
    *(unsigned char *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_systemPressureLevel) = 0;
    double v23 = (void *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState);
    *double v23 = 0;
    v23[1] = 0;
    *(void *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer) = 0;
    *(_DWORD *)(v22 + 16) = 0;
    *(void *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_textures) = &_swiftEmptyDictionarySingleton;
    *(_DWORD *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_fontSize) = 75;
    *(void *)(v20 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_padding) = 0x402E000000000000;
    if (qword_100517FA8 != -1) {
      swift_once();
    }
    id v24 = sub_100308580((void *)qword_1005285E0);
    if (v24)
    {
      double v25 = v24;
      uint64_t v26 = v51;
      sub_100308608(v50, v51 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_configuration, type metadata accessor for CameraControllerConfiguration);
      *(void *)(v26 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes) = v25;
      swift_unknownObjectRetain_n();
      NSString v27 = String._bridgeToObjectiveC()();
      [v25 selectFont:v27 fontSize:75];
      swift_unknownObjectRelease();

      uint64_t v28 = type metadata accessor for TaskPriority();
      uint64_t v29 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v45, 1, 1, v28);
      uint64_t v30 = swift_allocObject();
      swift_weakInit();
      id v31 = v46;
      uint64_t v32 = v47;
      uint64_t v34 = v48;
      uint64_t v33 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v49, v48);
      unint64_t v35 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      unint64_t v36 = (v44 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = 0;
      *(void *)(v37 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v37 + v35, v31, v34);
      *(void *)(v37 + v36) = v30;
      sub_100064D5C(v29, (uint64_t)&unk_100528AC8, v37);
      swift_unknownObjectRelease();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
      sub_1003084A8(v50, type metadata accessor for CameraControllerConfiguration);
      return v51;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003038B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100528AD0);
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_100303978, 0, 0);
}

uint64_t sub_100303978()
{
  sub_10000F214((uint64_t *)&unk_100528AB0);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *id v1 = v0;
  v1[1] = sub_100303A6C;
  uint64_t v2 = *(void *)(v0 + 64);
  return AsyncStream.Iterator.next(isolation:)(v0 + 40, 0, 0, v2);
}

uint64_t sub_100303A6C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100303B68, 0, 0);
}

uint64_t sub_100303B68()
{
  uint64_t v1 = v0[5];
  if (v1)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v3 = Strong;
      uint64_t v4 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksLock;
      uint64_t v5 = *(os_unfair_lock_s **)(Strong + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksLock);
      swift_retain();
      os_unfair_lock_lock(v5 + 4);
      swift_release();
      *(void *)(v3 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksInternal) = v1;
      swift_bridgeObjectRelease();
      uint64_t v6 = *(os_unfair_lock_s **)(v3 + v4);
      swift_retain();
      os_unfair_lock_unlock(v6 + 4);
      swift_release();
      swift_release();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[11] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_100303A6C;
      uint64_t v8 = v0[8];
      return AsyncStream.Iterator.next(isolation:)(v0 + 5, 0, 0, v8);
    }
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_100303D20(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v62 = a6;
  int v51 = a4;
  uint64_t v59 = a2;
  unint64_t v60 = a3;
  uint64_t v61 = a1;
  uint64_t v52 = *v6;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v57 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for DispatchQoS();
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v53 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a5;
  uint64_t v49 = *(void *)(a5 - 8);
  __chkstk_darwin(v11);
  uint64_t v48 = v12;
  uint64_t v58 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v50 = v6;
  static OSSignpostID.exclusive.getter();
  uint64_t v20 = OSSignposter.logHandle.getter();
  os_signpost_type_t v21 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v22(v16, v19, v13);
    double v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = v8;
    id v24 = v23;
    *(_WORD *)double v23 = 0;
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v21, v25, "Tamale.DebugPreviewLayer.consumeFrameInternal", "", v24, 2u);
    uint64_t v8 = v47;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {

    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  }
  v22(v16, v19, v13);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v26 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  uint64_t v27 = v61;
  uint64_t v28 = v62;
  uint64_t v29 = v63;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v62 + 48))(v66, v63, v62);
  if (v67) {
    goto LABEL_7;
  }
  uint64_t v30 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 32))(v29, v28);
  uint64_t v32 = v30;
  if (!v31)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v30);
    if (IOSurface)
    {
      uint64_t v34 = IOSurface;
      if (!IOSurfaceLock(v34, 0, 0))
      {
        uint64_t v46 = *(void *)((char *)v50 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapesMutex);
        uint64_t v47 = swift_allocObject();
        swift_weakInit();
        uint64_t v35 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v58, v27, v29);
        unint64_t v36 = (*(unsigned __int8 *)(v35 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        unint64_t v37 = (v48 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v38 = swift_allocObject();
        *(void *)(v38 + 16) = v29;
        *(void *)(v38 + 24) = v28;
        uint64_t v39 = v47;
        *(void *)(v38 + 32) = v34;
        *(void *)(v38 + 40) = v39;
        *(void *)(v38 + 48) = "Tamale.DebugPreviewLayer.consumeFrameInternal";
        *(void *)(v38 + 56) = 45;
        *(unsigned char *)(v38 + 64) = 2;
        uint64_t v40 = v58;
        uint64_t v41 = v59;
        *(void *)(v38 + 72) = v26;
        *(void *)(v38 + 80) = v41;
        *(void *)(v38 + 88) = v60;
        *(unsigned char *)(v38 + 96) = v51;
        *(void *)(v38 + 104) = v32;
        (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v38 + v36, v40, v29);
        *(void *)(v38 + v37) = v52;
        aBlock[4] = sub_1003083E8;
        void aBlock[5] = v38;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1002EDB98;
        aBlock[3] = &unk_1004F3F18;
        uint64_t v42 = _Block_copy(aBlock);
        uint64_t v43 = v34;
        swift_retain();
        swift_retain();
        sub_10009489C(v59, v60);
        sub_10010BCC8(v32, 0);
        uint64_t v44 = v53;
        static DispatchQoS.unspecified.getter();
        uint64_t v64 = _swiftEmptyArrayStorage;
        sub_100308538((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000F214(&qword_10051A960);
        sub_10010DE10((unint64_t *)&qword_10051FB40, &qword_10051A960);
        uint64_t v45 = v55;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v42);

        swift_release();
        sub_1000ACF28(v32, 0);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v8);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v56);
        swift_release();
        goto LABEL_7;
      }
    }
    swift_release();
    sub_1000ACF28(v32, 0);
    return;
  }
  sub_1000ACF28(v30, v31);
LABEL_7:
  swift_release();
}

uint64_t sub_100304494(__IOSurface *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v21 = Strong;
    if (qword_100517FA8 != -1) {
      swift_once();
    }
    id v22 = [(id)qword_1005285E0 commandBuffer];
    if (v22)
    {
      double v23 = v22;
      unint64_t v43 = a3;
      uint64_t v44 = a4;
      char v45 = a5;
      uint64_t v24 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer;
      *(void *)(v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer) = v22;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(unsigned char *)(v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_systemPressureLevel) = a9;
      os_signpost_id_t v25 = (uint64_t *)(v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState);
      uint64_t v26 = *(void *)(v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState);
      unint64_t v27 = *(void *)(v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState + 8);
      uint64_t *v25 = a7;
      v25[1] = a8;
      sub_10009489C(a7, a8);
      sub_10014A76C(v26, v27);
      BaseAddress = IOSurfaceGetBaseAddress(a1);
      uint64_t v29 = v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_textures;
      swift_beginAccess();
      uint64_t v30 = *(void *)v29;
      if (*(void *)(*(void *)v29 + 16) && (unint64_t v31 = sub_10032B09C((uint64_t)BaseAddress), (v32 & 1) != 0))
      {
        id v33 = *(id *)(*(void *)(v30 + 56) + 8 * v31);
        swift_unknownObjectRetain();
      }
      else
      {
        id v33 = [*(id *)(v21 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes) bindPixelBufferAsTexture:a10, v43, a4];
      }
      swift_beginAccess();
      uint64_t v34 = swift_unknownObjectRetain();
      sub_1003A42E8(v34, (uint64_t)BaseAddress);
      swift_endAccess();
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a14 + 48))(v46, a13, a14);
      if (v33)
      {
        CGFloat v36 = *(double *)&v46[6];
        CGFloat v35 = *(double *)&v46[7];
        CGFloat v38 = *(double *)&v46[4];
        CGFloat v37 = *(double *)&v46[5];
        uint64_t v39 = swift_unknownObjectRetain();
        sub_100304AA8(v39, v38, v37, v36, v35);
        double v40 = sub_10030CA60(a13, a14);
        sub_100304C28(v33, v40);
        sub_100305234(v33, v41, v37);
        [v23 commit];
        swift_unknownObjectRelease_n();
        *(void *)(v21 + v24) = 0;
        swift_unknownObjectRelease();
      }
      sub_100304784(v21, v43, v44, v45);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  return IOSurfaceUnlock(a1, 0, 0);
}

uint64_t sub_100304784(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v26 = a2;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v14 = &v23[-v13];
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v24 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
    goto LABEL_5;
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v16 = (char *)v26;
    if (!v26)
    {
      __break(1u);
LABEL_5:

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v14, v8);
    }
    goto LABEL_10;
  }
  uint64_t result = v26;
  if (HIDWORD(v26))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v26 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (WORD1(v26) > 0x10u)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v16 = sub_10018C6C4();
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v18 = v25;
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v25 + 88))(v7, v5) == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v19 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v7, v5);
    uint64_t v19 = "";
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v11, v14, v8);
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v20 = 0;
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, (os_signpost_type_t)v24, v21, v16, v19, v20, 2u);
  swift_slowDealloc();

  id v22 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v22(v14, v8);
  return ((uint64_t (*)(unsigned char *, uint64_t))v22)(v11, v8);
}

uint64_t sub_100304AA8(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat MinX = CGRectGetMinX(*(CGRect *)&a2);
  v21.origin.CGFloat x = a2;
  v21.origin.CGFloat y = a3;
  v21.size.CGFloat width = a4;
  v21.size.CGFloat height = a5;
  CGFloat MinY = CGRectGetMinY(v21);
  v22.origin.CGFloat x = a2;
  v22.origin.CGFloat y = a3;
  v22.size.CGFloat width = a4;
  v22.size.CGFloat height = a5;
  CGFloat MaxX = CGRectGetMaxX(v22);
  v23.origin.CGFloat x = a2;
  v23.origin.CGFloat y = a3;
  v23.size.CGFloat width = a4;
  v23.size.CGFloat height = a5;
  CGFloat v19 = CGRectGetMinY(v23);
  v24.origin.CGFloat x = a2;
  v24.origin.CGFloat y = a3;
  v24.size.CGFloat width = a4;
  v24.size.CGFloat height = a5;
  CGFloat v18 = CGRectGetMinX(v24);
  v25.origin.CGFloat x = a2;
  v25.origin.CGFloat y = a3;
  v25.size.CGFloat width = a4;
  v25.size.CGFloat height = a5;
  CGFloat MaxY = CGRectGetMaxY(v25);
  v26.origin.CGFloat x = a2;
  v26.origin.CGFloat y = a3;
  v26.size.CGFloat width = a4;
  v26.size.CGFloat height = a5;
  CGFloat v13 = CGRectGetMaxX(v26);
  v27.origin.CGFloat x = a2;
  v27.origin.CGFloat y = a3;
  v27.size.CGFloat width = a4;
  v27.size.CGFloat height = a5;
  CGFloat v14 = CGRectGetMaxY(v27);
  uint64_t v15 = static Color.purple.getter();
  sub_100305DD0(v15);
  swift_release();
  sub_10000F214(&qword_100521060);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043F400;
  *(CGFloat *)(inited + 32) = MinX;
  *(CGFloat *)(inited + 40) = MinY;
  *(CGFloat *)(inited + 48) = MaxX;
  *(CGFloat *)(inited + 56) = v19;
  *(CGFloat *)(inited + 64) = v13;
  *(CGFloat *)(inited + 72) = v14;
  *(CGFloat *)(inited + 80) = v18;
  *(CGFloat *)(inited + 88) = MaxY;
  *(CGFloat *)(inited + 96) = MinX;
  *(CGFloat *)(inited + 104) = MinY;
  sub_100304FF8((id)inited, a1);
  return swift_setDeallocating();
}

id sub_100304C28(void *a1, double a2)
{
  double v5 = (double)(uint64_t)[a1 width];
  double v6 = v5 / (double)(uint64_t)[a1 height];
  uint64_t v7 = v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_configuration;
  double v8 = 0.16;
  if (!*(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_configuration)) {
    double v8 = 0.2;
  }
  CGFloat v9 = v6 * v8;
  CGFloat v40 = *(double *)(v7 + 16) + v6 * v8 * -0.5;
  CGFloat v42 = *(double *)(v7 + 8) + -0.1;
  CGAffineTransformMakeTranslation(&t1, -0.5, -0.5);
  long long v34 = *(_OWORD *)&t1.c;
  long long v35 = *(_OWORD *)&t1.a;
  CGFloat v10 = -a2;
  tdouble x = t1.tx;
  tdouble y = t1.ty;
  CGAffineTransformMakeRotation(&t1, v10);
  long long v36 = *(_OWORD *)&t1.c;
  long long v37 = *(_OWORD *)&t1.a;
  CGFloat v13 = t1.tx;
  CGFloat v14 = t1.ty;
  CGAffineTransformMakeTranslation(&t1, 0.5, 0.5);
  long long v38 = *(_OWORD *)&t1.c;
  long long v39 = *(_OWORD *)&t1.a;
  CGFloat v15 = t1.tx;
  CGFloat v16 = t1.ty;
  long long v17 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&t1.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&t1.c = v17;
  *(_OWORD *)&t1.tdouble x = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)&t2.a = v35;
  *(_OWORD *)&t2.c = v34;
  t2.tdouble x = tx;
  t2.tdouble y = ty;
  CGAffineTransformConcat(&v45, &t1, &t2);
  CGAffineTransform t1 = v45;
  *(_OWORD *)&t2.a = v37;
  *(_OWORD *)&t2.c = v36;
  t2.tdouble x = v13;
  t2.tdouble y = v14;
  CGAffineTransformConcat(&v45, &t1, &t2);
  CGAffineTransform t1 = v45;
  *(_OWORD *)&t2.a = v39;
  *(_OWORD *)&t2.c = v38;
  t2.tdouble x = v15;
  t2.tdouble y = v16;
  CGAffineTransformConcat(&v45, &t1, &t2);
  CGAffineTransform t1 = v45;
  v48.origin.double y = v40;
  v48.origin.double x = v42;
  v48.size.double width = 0.2;
  v48.size.double height = v9;
  CGRect v49 = CGRectApplyAffineTransform(v48, &t1);
  double x = v49.origin.x;
  double y = v49.origin.y;
  double width = v49.size.width;
  double height = v49.size.height;
  *(void *)&long long v39 = CGRectGetMinX(v49);
  v50.origin.double x = x;
  v50.origin.double y = y;
  v50.size.double width = width;
  v50.size.double height = height;
  double MinY = CGRectGetMinY(v50);
  v51.origin.double x = x;
  v51.origin.double y = y;
  v51.size.double width = width;
  v51.size.double height = height;
  double MaxX = CGRectGetMaxX(v51);
  v52.origin.double x = x;
  v52.origin.double y = y;
  v52.size.double width = width;
  v52.size.double height = height;
  double v41 = CGRectGetMinY(v52);
  v53.origin.double x = x;
  v53.origin.double y = y;
  v53.size.double width = width;
  v53.size.double height = height;
  *(void *)&long long v38 = CGRectGetMinX(v53);
  v54.origin.double x = x;
  v54.origin.double y = y;
  v54.size.double width = width;
  v54.size.double height = height;
  double MaxY = CGRectGetMaxY(v54);
  v55.origin.double x = x;
  v55.origin.double y = y;
  v55.size.double width = width;
  v55.size.double height = height;
  double v24 = CGRectGetMaxX(v55);
  v56.origin.double x = x;
  v56.origin.double y = y;
  v56.size.double width = width;
  v56.size.double height = height;
  CGFloat v25 = CGRectGetMaxY(v56);
  double v26 = v25;
  CGRect v27 = *(void **)(v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes);
  LODWORD(v25) = 2.0;
  [v27 setStrokeWidth:v25];
  LODWORD(v28) = 0.75;
  [v27 setAlpha:v28];
  uint64_t v29 = static Color.green.getter();
  *(void *)&long long v37 = sub_100305DD0(v29).n128_u64[0];
  swift_release();
  [v27 addLineFrom:MinY to:v24 color:v26];
  uint64_t v30 = static Color.green.getter();
  *(void *)&long long v39 = sub_100305DD0(v30).n128_u64[0];
  swift_release();
  id result = [v27 addLineFrom:MaxX to:v41 color:*(double *)&v38 MaxY:*(double *)&v39];
  uint64_t v32 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer;
  if (*(void *)(v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer))
  {
    [v27 drawLinesOnTexture:a1];
    uint64_t v33 = static Color.green.getter();
    *(void *)&double v44 = sub_100305DD0(v33).n128_u64[0];
    swift_release();
    id result = [v27 addRectangle:x, y, width, height, v44];
    if (*(void *)(v2 + v32)) {
      return [v27 drawRectanglesOnTexture:a1];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100304FF8(id result, uint64_t a2)
{
  uint64_t v3 = *((void *)result + 2);
  if (!v3) {
    return result;
  }
  double v5 = (float64x2_t *)result;
  uint64_t v6 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes;
  double v7 = fmin(*((double *)result + 4), 1.0);
  if (v7 < 0.0) {
    double v8 = 0.0;
  }
  else {
    double v8 = v7;
  }
  double v9 = fmin(*((double *)result + 5), 1.0);
  if (v9 < 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes);
  id result = (id)swift_bridgeObjectRetain();
  if (v8 <= -1.0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v8 >= 4294967300.0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((*(void *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v10 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_29;
  }
  if (v10 <= -1.0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v10 >= 4294967300.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  LODWORD(v13) = v8;
  HIDWORD(v13) = v10;
  [v11 setInitialPosition:v13];
  if (v3 == 1)
  {
    return (id)swift_bridgeObjectRelease();
  }
  uint64_t v14 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v21 = _Q0;
  do
  {
    float64x2_t v19 = vminnmq_f64(v5[v14 + 3], v21);
    int8x16_t v22 = vandq_s8((int8x16_t)v19, (int8x16_t)vcgezq_f64(v19));
    [*(id *)(v2 + v6) addLineFrom:v8 to:v10 color:*(_OWORD *)&v21];
    ++v14;
    double v10 = *(double *)&v22.i64[1];
    double v8 = *(double *)v22.i64;
  }
  while (v3 - 1 != v14);
  id result = (id)swift_bridgeObjectRelease();
  if (!*(void *)(v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer))
  {
LABEL_32:
    __break(1u);
    return result;
  }
  uint64_t v20 = *(void **)(v2 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes);

  return [v20 drawLinesOnTexture:a2];
}

id sub_100305234(id a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for CVDetection();
  __chkstk_darwin(v7 - 8);
  double v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v10 = *(void *)(v104 - 8);
  double v11 = __chkstk_darwin(v104);
  double v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)(v4 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_drawShapes);
  LODWORD(v11) = 4.0;
  [v14 setStrokeWidth:v11];
  LODWORD(v15) = 1.0;
  id v105 = v14;
  [v14 setAlpha:v15];
  uint64_t v16 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksLock;
  long long v17 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksLock);
  swift_retain();
  os_unfair_lock_lock(v17 + 4);
  swift_release();
  uint64_t v18 = *(void *)(v4 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer__tracksInternal);
  float64x2_t v19 = *(os_unfair_lock_s **)(v4 + v16);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v97 = v4;
  id v98 = a1;
  if (v20)
  {
    double v95 = a3;
    unint64_t v21 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v94 = v18;
    uint64_t v22 = v18 + v21;
    uint64_t v99 = *(void *)(v10 + 72);
    uint64_t v102 = (long long *)&v116;
    uint64_t v103 = &v114;
    uint64_t v101 = &v115;
    long long v100 = xmmword_10043F400;
    long long v96 = xmmword_10043D4F0;
    while (1)
    {
      sub_100308608(v22, (uint64_t)v13, type metadata accessor for CVTrackSnapshot);
      sub_100308608((uint64_t)&v13[*(int *)(v104 + 24)], (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v33 = sub_10016122C();
      __n128 v106 = sub_100305DD0(v33);
      swift_release();
      sub_1003FEC34(v109);
      uint64_t v35 = v110;
      uint64_t v34 = v111;
      sub_10000F3B0(v109, v110);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v34 + 64))(v112, v35, v34);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v109);
      double v36 = sub_1003FD844();
      double v38 = v37;
      double v40 = v39;
      double v42 = v41;
      sub_1003FEC34(v109);
      uint64_t v43 = v110;
      uint64_t v44 = v111;
      sub_10000F3B0(v109, v110);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v44 + 64))(&v113, v43, v44);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v109);
      sub_10000F214(&qword_100521060);
      uint64_t inited = (_OWORD *)swift_initStackObject();
      long long v46 = v113;
      inited[1] = v100;
      inited[2] = v46;
      long long v47 = *v102;
      inited[3] = *(_OWORD *)v103;
      inited[4] = v47;
      inited[5] = *(_OWORD *)v101;
      inited[6] = v46;
      sub_100304FF8(inited, (uint64_t)a1);
      swift_setDeallocating();
      double v48 = v38 + v42;
      if (v36 <= 0.9) {
        double v49 = v36;
      }
      else {
        double v49 = 0.9;
      }
      if (v36 > 0.0) {
        double v50 = v49;
      }
      else {
        double v50 = 0.0;
      }
      double v51 = v50 * (double)(uint64_t)[a1 width:v49, v94] + 15.0;
      if (v48 <= 1.0) {
        double v52 = v48;
      }
      else {
        double v52 = 1.0;
      }
      if (v48 > 0.1) {
        double v53 = v52;
      }
      else {
        double v53 = 0.1;
      }
      [a1 height:v52];
      if (v51 <= -1.0)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      if (v51 >= 4294967300.0) {
        goto LABEL_59;
      }
      double v55 = v53 * (double)(uint64_t)v54 + -75.0 + -15.0;
      if ((*(void *)&v51 & 0x7FF0000000000000) == 0x7FF0000000000000
        || (COERCE_UNSIGNED_INT64(v53 * (double)(uint64_t)v54 + -75.0 + -15.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
      {
        goto LABEL_60;
      }
      if (v55 <= -1.0) {
        goto LABEL_61;
      }
      if (v55 >= 4294967300.0) {
        goto LABEL_62;
      }
      unsigned int v57 = v55;
      LODWORD(v58) = v51;
      HIDWORD(v58) = v57;
      [v105 setInitialPosition:v58];
      if (v40 > 0.1 && v42 > 0.1) {
        break;
      }
LABEL_5:
      sub_1003084A8((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003084A8((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
      v22 += v99;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        a3 = v95;
        goto LABEL_35;
      }
    }
    uint64_t v107 = 40;
    unint64_t v108 = 0xE100000000000000;
    sub_10000F214(&qword_10051F350);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = v96;
    uint64_t v60 = v104;
    int v61 = *(_DWORD *)&v13[*(int *)(v104 + 36)];
    *(void *)(v59 + 56) = &type metadata for Float;
    *(void *)(v59 + 64) = &protocol witness table for Float;
    *(_DWORD *)(v59 + 32) = v61;
    v62._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 32;
    v63._object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    if (v13[*(int *)(v60 + 28)])
    {
      if (v13[*(int *)(v60 + 28)] != 1)
      {
        unint64_t v23 = 0xE600000000000000;
        uint64_t v24 = 0x657275736E75;
LABEL_4:
        unint64_t v25 = v23;
        String.append(_:)(*(Swift::String *)&v24);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 32;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        sub_1003FEC34(v109);
        uint64_t v27 = v110;
        uint64_t v28 = v111;
        sub_10000F3B0(v109, v110);
        (*(void (**)(uint64_t, uint64_t))(v28 + 72))(v27, v28);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v109);
        sub_1003069CC(10);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = static String._fromSubstring(_:)();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        LODWORD(v31) = 1.0;
        id v32 = v105;
        [v105 addTextLine:v30 color:v106.n128_f64[0] scale:v31];

        a1 = v98;
        [v32 drawEnqueuedTextOnTexture:v98];
        uint64_t v4 = v97;
        goto LABEL_5;
      }
      unint64_t v23 = 0xE800000000000000;
      unsigned int v64 = 1634166126;
    }
    else
    {
      unint64_t v23 = 0xE800000000000000;
      unsigned int v64 = 1769172848;
    }
    uint64_t v24 = v64 | 0x6576697400000000;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_35:
  if (!*(void *)(v4 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_currentCommandBuffer))
  {
LABEL_70:
    __break(1u);
    JUMPOUT(0x100305DACLL);
  }
  uint64_t v65 = v4;
  id result = [v105 drawRectanglesOnTexture:a1];
  uint64_t v67 = OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_systemPressureLevel;
  if (*(unsigned char *)(v65 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_systemPressureLevel))
  {
    v109[0] = 0;
    v109[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v109[0] = 0xD000000000000028;
    v109[1] = 0x800000010042B750;
    unint64_t v68 = 0xEF296C616E696D6FLL;
    unint64_t v69 = 0x6E2820796D6C6162;
    switch(*(unsigned char *)(v65 + v67))
    {
      case 1:
        unint64_t v68 = 0xED00002972696166;
        unint64_t v69 = 0x2820797473616F74;
        break;
      case 2:
        unint64_t v68 = 0x80000001004295B0;
        unint64_t v69 = 0xD000000000000010;
        break;
      case 3:
        unint64_t v69 = 0xD000000000000013;
        unint64_t v68 = 0x8000000100429590;
        break;
      default:
        break;
    }
    unint64_t v70 = v68;
    String.append(_:)(*(Swift::String *)&v69);
    swift_bridgeObjectRelease();
    double v71 = (double)(uint64_t)[a1 height] * a3;
    if ((~*(void *)&v71 & 0x7FF0000000000000) == 0) {
      goto LABEL_63;
    }
    if (v71 <= -1.0)
    {
LABEL_64:
      __break(1u);
    }
    else if (v71 < 4294967300.0)
    {
      unsigned int v72 = v71;
      LODWORD(v73) = 250;
      HIDWORD(v73) = v72;
      id v74 = v105;
      [v105 setInitialPosition:v73];
      NSString v75 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v76 = static Color.red.getter();
      __n128 v106 = sub_100305DD0(v76);
      swift_release();
      LODWORD(v77) = 0.75;
      [v74 addTextLine:v75 color:v106.n128_f64[0] scale:v77];

      id result = [v74 drawEnqueuedTextOnTexture:a1];
      goto LABEL_45;
    }
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_45:
  unint64_t v78 = (uint64_t *)(v65 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState);
  if ((unint64_t)(*(void *)(v65 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState + 8) - 1) < 2) {
    return result;
  }
  v109[0] = 0;
  v109[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v109, "Motion State: ");
  HIBYTE(v109[1]) = -18;
  unint64_t v79 = (void *)v78[1];
  unint64_t v80 = 0xEC000000676E697ALL;
  uint64_t v81 = 0x696C616974696E69;
  switch((unint64_t)v79)
  {
    case 0uLL:
      break;
    case 1uLL:
      unint64_t v80 = 0xE500000000000000;
      uint64_t v81 = 0x6465786966;
      break;
    case 2uLL:
      unint64_t v80 = 0xE600000000000000;
      uint64_t v81 = 0x796461657473;
      break;
    case 3uLL:
      unint64_t v80 = 0xEA00000000006E6FLL;
      uint64_t v81 = 0x69746F6D20776F6CLL;
      break;
    case 4uLL:
      unint64_t v80 = 0xEB000000006E6F69;
      uint64_t v81 = 0x746F6D2068676968;
      break;
    default:
      uint64_t v82 = *v78;
      uint64_t v107 = 0x206E776F6E6B6E75;
      unint64_t v108 = 0xE900000000000028;
      sub_10009489C(v82, (unint64_t)v79);
      v83._countAndFlagsBits = v82;
      v83._object = v79;
      String.append(_:)(v83);
      v84._countAndFlagsBits = 41;
      v84._object = (void *)0xE100000000000000;
      String.append(_:)(v84);
      sub_10014A76C(v82, (unint64_t)v79);
      uint64_t v81 = v107;
      unint64_t v80 = v108;
      break;
  }
  unint64_t v85 = v80;
  String.append(_:)(*(Swift::String *)&v81);
  swift_bridgeObjectRelease();
  id v86 = v98;
  double v87 = (double)(uint64_t)[v98 height] * a3;
  if ((~*(void *)&v87 & 0x7FF0000000000000) == 0) {
    goto LABEL_66;
  }
  if (v87 <= -1.0)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (v87 >= 4294967300.0)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  unsigned int v88 = v87 + 150;
  if (v87 >= 0xFFFFFF6A)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  LODWORD(v89) = 250;
  HIDWORD(v89) = v88;
  id v90 = v105;
  [v105 setInitialPosition:v89];
  NSString v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v92 = static Color.yellow.getter();
  __n128 v106 = sub_100305DD0(v92);
  swift_release();
  LODWORD(v93) = 0.75;
  [v90 addTextLine:v91 color:v106.n128_f64[0] scale:v93];

  return [v90 drawEnqueuedTextOnTexture:v86];
}

__n128 sub_100305DD0(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_colors);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16)) {
    goto LABEL_5;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10032B534(a1);
  if ((v6 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    v7.n128_f64[0] = sub_100305EF4();
    __n128 v10 = v7;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002F5B20(a1, isUniquelyReferenced_nonNull_native, v10);
    *uint64_t v3 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v10;
  }
  __n128 v10 = *(__n128 *)(*(void *)(v4 + 56) + 16 * v5);
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

double sub_100305EF4()
{
  double v7 = 0.0;
  double v8 = 0.0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_10000F734(0, (unint64_t *)&qword_1005275E0);
  swift_retain();
  uint64_t v0 = (void *)UIColor.init(_:)();
  unsigned int v1 = [v0 getRed:&v8 green:&v7 blue:&v6 alpha:&v5];

  double result = 0.0;
  if (v1)
  {
    *(float *)&unsigned int v3 = v8;
    *(float *)&unsigned int v4 = v7;
    return COERCE_DOUBLE(__PAIR64__(v4, v3));
  }
  return result;
}

uint64_t sub_100305FD0()
{
  sub_1003084A8(v0 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_configuration, type metadata accessor for CameraControllerConfiguration);
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_signposter;
  uint64_t v2 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10014A76C(*(void *)(v0 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState), *(void *)(v0 + OBJC_IVAR____TtC6Tamale17DebugPreviewLayer_cameraMotionState + 8));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1003060DC()
{
  return sub_1003060F4((void (*)(void))sub_100305FD0);
}

uint64_t sub_1003060F4(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t sub_100306150()
{
  return type metadata accessor for DebugPreviewLayer(0);
}

uint64_t type metadata accessor for DebugPreviewLayer(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_1005288B8);
}

uint64_t sub_100306178()
{
  uint64_t result = type metadata accessor for CameraControllerConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OSSignposter();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void sub_1003062B4(CFTypeRef *a1)
{
}

uint64_t sub_1003062BC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t sub_1003062D0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1003062E4(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_100306328(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

void *sub_100306368()
{
  return &unk_1004F3BE8;
}

uint64_t sub_10030637C(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_100328B30(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *int v3 = v5;
  }
  uint64_t v14 = *(void *)(type metadata accessor for CVTrackedDetection.HistoryEntry(0) - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_35;
  }
  if (v19 < 0)
  {
LABEL_37:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    sub_100308608(a3, v17, type metadata accessor for CVTrackedDetection.HistoryEntry);
  }

  return sub_100308258(a3);
}

char *sub_1003065A0(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = (char *)sub_100328B64(result, v13, 1, v5);
    unint64_t v5 = result;
  }
  uint64_t v14 = (uint64_t)&v5[88 * a1 + 32];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v5 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 88);
    uint64_t v18 = &v5[88 * a2 + 32];
    if ((char *)(v14 + 88) != v18 || result >= &v18[88 * v17]) {
      uint64_t result = (char *)memmove(result, v18, 88 * v17);
    }
    uint64_t v19 = *((void *)v5 + 2);
    BOOL v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      *((void *)v5 + 2) = v20;
LABEL_20:
      long long v21 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 48) = v21;
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a3 + 64);
      *(void *)(v14 + 80) = *(void *)(a3 + 80);
      long long v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v22;
      *int v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10030672C(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_100329CCC(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = &v5[a1 + 4];
  type metadata accessor for DeviceType(0);
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 1);
    uint64_t v19 = &v5[a2 + 4];
    if (v14 + 1 != v19 || result >= (char *)&v19[v18]) {
      uint64_t result = (char *)memmove(result, v19, 8 * v18);
    }
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      Swift::Int v5[2] = v21;
LABEL_20:
      *uint64_t v14 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1003068B0(void *a1)
{
  return sub_100328A0C(0, a1[2], 0, a1);
}

void *sub_1003068C4(void *a1)
{
  return sub_100328B1C(0, a1[2], 0, a1);
}

uint64_t sub_1003068D8(unint64_t a1)
{
  return sub_100328B30(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1003068EC(void *a1)
{
  return sub_100328B64(0, a1[2], 0, a1);
}

void *sub_100306900(void *a1)
{
  return sub_1003295D0(0, a1[2], 0, a1);
}

void *sub_100306914(void *a1)
{
  return sub_100329900(0, a1[2], 0, a1);
}

uint64_t sub_100306928(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_1003069A4(void *a1)
{
  return sub_10032A358(0, a1[2], 0, a1);
}

void *sub_1003069B8(void *a1)
{
  return sub_10032AB28(0, a1[2], 0, a1);
}

uint64_t sub_1003069CC(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_100306A68(uint64_t result, uint64_t (*a2)(void))
{
  uint64_t v3 = v2;
  unint64_t v5 = 0;
  unint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = result + 32;
LABEL_2:
  if (v5 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v5;
  }
  while (1)
  {
    if (v6 == v5) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v8 == v5) {
      break;
    }
    long long v9 = *(_OWORD *)(v7 + 16 * v5++);
    long long v14 = v9;
    uint64_t result = a2();
    if (result)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = v3;
      if ((result & 1) == 0) {
        uint64_t result = sub_100040B08(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      long long v10 = v14;
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
      {
        uint64_t result = sub_100040B08(v11 > 1, v12 + 1, 1);
        long long v10 = v14;
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v12 + 4] = v10;
      uint64_t v3 = v13;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100306B8C(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0 && !HIDWORD(a1) && (a2 & 0x8000000000000000) == 0 && !HIDWORD(a2))
  {
    FPSupport_EnsureCAImageQueue();
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100306CA0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unsigned int v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_100329900(result, v11, 1, v4);
    unsigned int v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[8 * a1 + 32];
    uint64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100306DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v49 = (id)Strong;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 48))(v57, a2, a3);
  if ((v58 & 1) == 0)
  {
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    long long v10 = v8;
    if (v9)
    {
      sub_1000ACF28(v8, v9);
      goto LABEL_5;
    }
    uint64_t v11 = v3 + OBJC_IVAR____TtC6Tamale12PreviewLayer_queueWrapper;
    swift_beginAccess();
    if (*(void *)v11)
    {
      id v12 = v10;
    }
    else
    {
      BOOL v13 = v10;
      size_t Width = CVPixelBufferGetWidth(v13);
      size_t Height = CVPixelBufferGetHeight(v13);
      uint64_t v16 = sub_100306B8C(Width, Height);
      uint64_t v17 = *(const void **)v11;
      *(void *)uint64_t v11 = v16;
      *(_DWORD *)(v11 + 8) = v18;
      sub_100307684(v17);
      uint64_t v19 = *(NSObject **)(v4 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerStateMutexQueue);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v4;
      *(unsigned char *)(v20 + 24) = 1;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_1003076C8;
      *(void *)(v21 + 24) = v20;
      double v55 = sub_100146854;
      uint64_t v56 = v21;
      aBlocint64_t k = _NSConcreteStackBlock;
      uint64_t v52 = 1107296256;
      double v53 = sub_100109E30;
      id v54 = &unk_1004F3C70;
      long long v22 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v19, v22);
      _Block_release(v22);
      LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v19)
      {
        __break(1u);
        goto LABEL_32;
      }
    }
    BOOL v24 = sub_100301614();
    uint64_t v26 = v25;
    if (!v25 && !v23)
    {
      ((void (*)(void ***, void))v24)(&aBlock, 0);
      sub_1000ACF28(v10, 0);
      sub_1000ACF28(v10, 0);

      return;
    }
    ((void (*)(void ***, void))v24)(&aBlock, 0);
    uint64_t v27 = *(NSObject **)(v4 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerStateMutexQueue);
    OS_dispatch_queue.sync<A>(execute:)();
    if (aBlock != 1)
    {
      double v36 = 0;
      goto LABEL_19;
    }
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v28 = static OS_dispatch_queue.main.getter();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v49;
    *(void *)(v29 + 24) = v26;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_100307754;
    *(void *)(v30 + 24) = v29;
    double v55 = sub_10014C6EC;
    uint64_t v56 = v30;
    aBlocint64_t k = _NSConcreteStackBlock;
    uint64_t v52 = 1107296256;
    double v53 = sub_100109E30;
    id v54 = &unk_1004F3CE8;
    double v31 = _Block_copy(&aBlock);
    id v32 = v49;
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v28, v31);

    _Block_release(v31);
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v28 & 1) == 0)
    {
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v4;
      *(unsigned char *)(v33 + 24) = 0;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_1003088D8;
      *(void *)(v34 + 24) = v33;
      double v55 = sub_10014C6EC;
      uint64_t v56 = v34;
      aBlocint64_t k = _NSConcreteStackBlock;
      uint64_t v52 = 1107296256;
      double v53 = sub_100109E30;
      id v54 = &unk_1004F3D60;
      uint64_t v35 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v27, v35);
      _Block_release(v35);
      LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v35 & 1) == 0)
      {
        double v36 = sub_100307754;
LABEL_19:
        IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)v10);
        if (!IOSurface)
        {
          sub_1000ACF28(v10, 0);
          sub_1000ACF28(v10, 0);

          uint64_t v47 = (uint64_t)v36;
LABEL_29:
          sub_10000F478(v47);
          return;
        }
        uint64_t v48 = (uint64_t)v36;
        double v38 = IOSurface;
        BaseAddress = IOSurfaceGetBaseAddress(v38);
        double v40 = (uint64_t *)(v4 + OBJC_IVAR____TtC6Tamale12PreviewLayer_bufferIdentifiers);
        swift_beginAccess();
        if (!*(void *)(*v40 + 16) || (sub_10032B09C((uint64_t)BaseAddress), (v41 & 1) == 0))
        {
          sub_10018B270((unint64_t)"Tamale.PreviewLayer.imageQueueRegisterSurface", 45, 2u, 0, (uint64_t *)&aBlock);
          uint64_t v42 = CAImageQueueRegisterIOSurfaceBuffer();
          sub_10000F3B0(&aBlock, (uint64_t)v54);
          sub_10018BBE8();
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&aBlock);
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = *v40;
          *double v40 = 0x8000000000000000;
          sub_1002F4EDC(v42, (uint64_t)BaseAddress, isUniquelyReferenced_nonNull_native);
          *double v40 = v50;
          swift_bridgeObjectRelease();
          swift_endAccess();
        }
        if (*(void *)(*v40 + 16))
        {
          sub_10032B09C((uint64_t)BaseAddress);
          if (v44)
          {
            double v45 = CACurrentMediaTime();
            sub_100302BE8(v45);
            sub_10018B700("Tamale.PreviewLayer.imageQueueEnqueue", 37, 2, 0);
            CAImageQueueInsertImageWithRotation();
            sub_10018B270((unint64_t)"Tamale.PreviewLayer.imageQueueCollect", 37, 2u, 0, (uint64_t *)&aBlock);
            uint64_t v46 = CAImageQueueCollect();
            sub_10000F3B0(&aBlock, (uint64_t)v54);
            sub_10018BBE8();
            if (v46 <= 1)
            {
              sub_10018B700("Tamale.PreviewLayer.consumeUnconsumed", 37, 2, 0);
              swift_beginAccess();
              CAImageQueueConsumeUnconsumedInRange();
            }

            sub_1000ACF28(v10, 0);
            sub_1000ACF28(v10, 0);

            _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&aBlock);
            uint64_t v47 = (uint64_t)v36;
            goto LABEL_29;
          }
        }
LABEL_34:
        sub_10000F478(v48);
        __break(1u);
        return;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_5:
}

void sub_100307684(CFTypeRef cf)
{
  if (cf) {
    sub_10030824C(cf);
  }
}

uint64_t sub_100307690()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1003076C8()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerNeedsUpdateInternal) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_1003076E0()
{
  return swift_deallocObject();
}

uint64_t sub_1003076F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100307700()
{
  return swift_release();
}

void sub_100307708(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerNeedsUpdateInternal);
}

uint64_t sub_10030771C()
{
  return swift_deallocObject();
}

id sub_100307754()
{
  return sub_100303044(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10030775C()
{
  return swift_deallocObject();
}

uint64_t sub_10030776C()
{
  return swift_deallocObject();
}

uint64_t sub_10030777C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  type metadata accessor for CVTrackedDetection(0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_100307E94(uint64_t a1)
{
  uint64_t result = CAImageQueueGetReleasedImageInfo();
  if (result && a1)
  {
    int v3 = *(_DWORD *)result;
    uint64_t v4 = *(void *)(result + 8);
    double v5 = *(double *)(result + 56);
    swift_retain();
    if (v3)
    {
      if (*(double *)(a1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_targetFrameInterval) + 0.001 < v5) {
        sub_10018B700("Tamale.PreviewLayer.longPreviewFrame", 36, 2, 0);
      }
      uint64_t v6 = (void **)(a1 + OBJC_IVAR____TtC6Tamale12PreviewLayer_recentDisplayTimes);
      swift_beginAccess();
      uint64_t v7 = *v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v6 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v7 = sub_100329900(0, v7[2] + 1, 1, v7);
        *uint64_t v6 = v7;
      }
      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1)
      {
        uint64_t v7 = sub_100329900((void *)(v9 > 1), v10 + 1, 1, v7);
        *uint64_t v6 = v7;
      }
      v7[2] = v10 + 1;
      v7[v10 + 4] = v4;
      swift_endAccess();
      uint64_t v11 = sub_100301614();
      uint64_t v13 = v12;
      int v15 = v14;
      ((void (*)(void *, void))v11)(v20, 0);
      if (v13 || v15)
      {
        uint64_t v16 = *(NSObject **)(a1 + OBJC_IVAR____TtC6Tamale12PreviewLayer__layerStateMutexQueue);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = a1;
        *(unsigned char *)(v17 + 24) = 1;
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = sub_1003081A4;
        *(void *)(v18 + 24) = v17;
        v20[4] = sub_10014C6EC;
        v20[5] = v18;
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 1107296256;
        v20[2] = sub_100109E30;
        v20[3] = &unk_1004F3DD8;
        uint64_t v19 = _Block_copy(v20);
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v16, v19);
        _Block_release(v19);
        LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        uint64_t result = swift_release();
        if (v16) {
          __break(1u);
        }
      }
      else
      {
        return swift_release();
      }
    }
    else
    {
      sub_10018B700("Tamale.PreviewLayer.collectUndisplayed", 38, 2, 0);
      return swift_release();
    }
  }
  return result;
}

void sub_1003081A4()
{
  sub_1003016E8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1003081B0()
{
  return swift_deallocObject();
}

uint64_t sub_1003081C0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003081F8()
{
  return sub_1003019DC(*(unsigned char *)(v0 + 16));
}

BOOL sub_100308204(double a1, double a2)
{
  double v3 = *(double *)(v2 + OBJC_IVAR____TtC6Tamale12PreviewLayer_targetFrameInterval);
  return v3 + 0.001 > a2 && v3 + -0.001 < a2;
}

uint64_t sub_10030823C()
{
  return swift_deallocObject();
}

void sub_10030824C(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t sub_100308258(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_100528AA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003082B8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1003082F0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);

  swift_release();
  swift_release();
  if (*(void *)(v0 + 88) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 112) & ~v3), v1);

  return swift_deallocObject();
}

uint64_t sub_1003083E8()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  return sub_100304494(*(__IOSurface **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96), *(void *)(v0 + 104), v0 + v1, *(void *)(v0+ ((*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100308498()
{
  return swift_deallocObject();
}

uint64_t sub_1003084A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

dispatch_workloop_t sub_100308508()
{
  dispatch_workloop_t inactive = dispatch_workloop_create_inactive("DebugDraw");

  return inactive;
}

uint64_t sub_100308538(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100308580(void *a1)
{
  id v1 = a1;
  if (FigCaptureGetExperimentsEnabled())
  {
    id v2 = objc_alloc(NSClassFromString(@"CMIDrawShapeGPU"));
    uint64_t v3 = [v2 performSelector:"initWithOptionalCommandQueue:" withObject:v1];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t sub_100308608(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100308670()
{
  uint64_t v1 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10030875C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000F214((uint64_t *)&unk_100528AB0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = sub_10000F878;
  return sub_1003038B4(a1, v6, v7, v8, v9);
}

uint64_t sub_1003088DC()
{
  return swift_continuation_resume();
}

uint64_t sub_1003088E4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IdentifiableCGRect(0);
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  uint64_t v8 = v5;
  uint64_t v31 = v1;
  double v38 = _swiftEmptyArrayStorage;
  sub_100040CEC(0, v6, 0);
  uint64_t v7 = v38;
  uint64_t result = sub_10030B124(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 64;
  uint64_t v30 = a1 + 88;
  uint64_t v14 = (uint64_t)v8;
  int64_t v32 = v6;
  uint64_t v33 = v10;
  uint64_t v34 = a1 + 64;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v17 = (unint64_t)v11 >> 6;
    if ((*(void *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v10) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(a1 + 56) + 32 * v11;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 24);
    long long v37 = *(_OWORD *)(v18 + 8);
    UUID.init()();
    uint64_t v21 = v14 + *(int *)(v36 + 20);
    *(void *)uint64_t v21 = v19;
    *(_OWORD *)(v21 + 8) = v37;
    *(void *)(v21 + 24) = v20;
    double v38 = v7;
    unint64_t v23 = v7[2];
    unint64_t v22 = v7[3];
    if (v23 >= v22 >> 1)
    {
      sub_100040CEC(v22 > 1, v23 + 1, 1);
      uint64_t v7 = v38;
    }
    v7[2] = v23 + 1;
    uint64_t result = sub_10030C20C(v14, (uint64_t)v7+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v23);
    int64_t v15 = 1 << *(unsigned char *)(a1 + 32);
    if (v11 >= v15) {
      goto LABEL_27;
    }
    uint64_t v13 = v34;
    uint64_t v24 = *(void *)(v34 + 8 * v17);
    if ((v24 & (1 << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v33;
    if (*(_DWORD *)(a1 + 36) != v33) {
      goto LABEL_29;
    }
    unint64_t v25 = v24 & (-2 << (v11 & 0x3F));
    if (v25)
    {
      int64_t v15 = __clz(__rbit64(v25)) | v11 & 0xFFFFFFFFFFFFFFC0;
      int64_t v16 = v32;
    }
    else
    {
      unint64_t v26 = v17 + 1;
      unint64_t v27 = (unint64_t)(v15 + 63) >> 6;
      int64_t v16 = v32;
      if (v17 + 1 < v27)
      {
        unint64_t v28 = *(void *)(v34 + 8 * v26);
        if (!v28)
        {
          unint64_t v26 = v17 + 2;
          if (v17 + 2 >= v27) {
            goto LABEL_4;
          }
          unint64_t v28 = *(void *)(v34 + 8 * v26);
          if (!v28)
          {
            while (v27 - 3 != v17)
            {
              unint64_t v28 = *(void *)(v30 + 8 * v17++);
              if (v28)
              {
                unint64_t v26 = v17 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        int64_t v15 = __clz(__rbit64(v28)) + (v26 << 6);
      }
    }
LABEL_4:
    ++v12;
    uint64_t v11 = v15;
    if (v12 == v16) {
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FrameGeometryUtilities()
{
  return self;
}

id sub_100308D78()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SubjectLiftViewDelegate();
  [super dealloc];
}

uint64_t type metadata accessor for SubjectLiftViewDelegate()
{
  return self;
}

uint64_t sub_100308DFC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100308EA0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10030BF7C(&qword_100528DA0, (void (*)(uint64_t))type metadata accessor for SubjectLiftAnalysisViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 136);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100308F4C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10030902C()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)UIView) init];
  *(void *)(v0 + 24) = [objc_allocWithZone((Class)type metadata accessor for SubjectLiftViewDelegate()) init];
  *(void *)(v0 + 32) = [objc_allocWithZone((Class)VKCImageAnalysisInteraction) init];
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 113) = 0u;
  *(void *)(v0 + 136) = _swiftEmptyArrayStorage;
  ObservationRegistrar.init()();
  uint64_t v1 = *(void **)(v0 + 32);
  [v1 setWantsAutomaticContentsRectCalculation:0];
  [v1 setDelegate:*(void *)(v0 + 24)];
  [*(id *)(v0 + 16) addInteraction:v1];
  return v0;
}

uint64_t sub_10030910C(uint64_t a1, uint64_t a2)
{
  v3[152] = v2;
  v3[151] = a2;
  v3[150] = a1;
  uint64_t v4 = type metadata accessor for IndexSet();
  v3[153] = v4;
  v3[154] = *(void *)(v4 - 8);
  v3[155] = swift_task_alloc();
  v3[156] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[157] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[158] = v6;
  v3[159] = v5;
  return _swift_task_switch(sub_10030921C, v6, v5);
}

uint64_t sub_10030921C()
{
  sub_10000FB74(*(void *)(v0 + 1208), v0 + 272, &qword_100524748);
  if (*(void *)(v0 + 272))
  {
    uint64_t v1 = *(void *)(v0 + 1216);
    long long v2 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 704) = v2;
    *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 729) = *(_OWORD *)(v0 + 345);
    long long v3 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 656) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 672) = v3;
    uint64_t v4 = *(void **)(v1 + 32);
    *(void *)(v0 + 1280) = v4;
    id v5 = [v4 view];
    *(void *)(v0 + 1288) = v5;
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = [v5 window];
      *(void *)(v0 + 1296) = v7;
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(v0 + 1216);
        sub_1001BEF58(v0 + 656, v0 + 464);
        uint64_t v10 = v9 + 40;
        swift_beginAccess();
        uint64_t v11 = (_OWORD *)(v0 + 176);
        sub_10000FB74(v0 + 464, v0 + 80, &qword_100524748);
        sub_10000FB74(v10, v0 + 176, &qword_100524748);
        if (*(void *)(v0 + 80))
        {
          sub_10000FB74(v0 + 80, v0 + 560, &qword_100524748);
          if (*(void *)v11)
          {
            uint64_t v29 = v10;
            long long v12 = *(_OWORD *)(v0 + 224);
            *(_OWORD *)(v0 + 880) = *(_OWORD *)(v0 + 208);
            *(_OWORD *)(v0 + 896) = v12;
            *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 240);
            *(_OWORD *)(v0 + 921) = *(_OWORD *)(v0 + 249);
            long long v13 = *(_OWORD *)(v0 + 192);
            *(_OWORD *)(v0 + 848) = *v11;
            *(_OWORD *)(v0 + 864) = v13;
            char v14 = sub_10030B798(v0 + 560, v0 + 848);
            sub_1001C0258(v0 + 848);
            sub_10000FBD8(v0 + 464, &qword_100524748);
            sub_1001C0258(v0 + 560);
            sub_10000FBD8(v0 + 80, &qword_100524748);
            if ((v14 & 1) == 0) {
              goto LABEL_21;
            }
            goto LABEL_18;
          }
          sub_10000FBD8(v0 + 464, &qword_100524748);
          sub_1001C0258(v0 + 560);
        }
        else
        {
          sub_10000FBD8(v0 + 464, &qword_100524748);
          if (!*(void *)v11)
          {
            sub_10000FBD8(v0 + 80, &qword_100524748);
LABEL_18:
            uint64_t v17 = *(void *)(v0 + 1200);
            sub_1001C0258(v0 + 656);

            swift_release();
            goto LABEL_9;
          }
        }
        uint64_t v29 = v10;
        sub_10000FBD8(v0 + 80, (uint64_t *)&unk_100528D90);
LABEL_21:
        uint64_t v23 = *(void *)(v0 + 1216);
        sub_1001BEF58(v0 + 656, v0 + 752);
        sub_10000FC34(v0 + 752, v0 + 368, &qword_100524748);
        swift_beginAccess();
        sub_10000F5DC(v0 + 368, v29, &qword_100524748);
        swift_endAccess();
        [v4 setAnalysis:*(void *)(v0 + 656)];
        [v4 setActiveInteractionTypes:8];
        uint64_t v24 = *(void *)(v23 + 24);
        sub_10000F578(v0 + 664, v0 + 944);
        uint64_t v25 = v24 + OBJC_IVAR____TtC6Tamale23SubjectLiftViewDelegate_frame;
        swift_beginAccess();
        sub_10000F5DC(v0 + 944, v25, &qword_100518A80);
        swift_endAccess();
        char v26 = *(unsigned char *)(v0 + 744);
        uint64_t v27 = v24 + OBJC_IVAR____TtC6Tamale23SubjectLiftViewDelegate_boundingBoxInImageCoordinates;
        long long v28 = *(_OWORD *)(v0 + 728);
        *(_OWORD *)uint64_t v27 = *(_OWORD *)(v0 + 712);
        *(_OWORD *)(v27 + 16) = v28;
        *(unsigned char *)(v27 + 32) = v26;
        [v4 updateContentsRect];
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_10030979C;
        *(void *)(v0 + 1056) = swift_continuation_init();
        *(void *)(v0 + 1024) = _NSConcreteStackBlock;
        *(void *)(v0 + 1032) = 0x40000000;
        *(void *)(v0 + 1040) = sub_1003088DC;
        *(void *)(v0 + 1048) = &unk_1004F4090;
        [v4 beginImageSubjectAnalysisIfNecessaryWithCompletion:];
        return _swift_continuation_await(v0 + 16);
      }
      sub_1001C0258(v0 + 656);
    }
    else
    {
      sub_1001C0258(v0 + 656);
    }
    swift_release();
    uint64_t v19 = *(void *)(v0 + 1200);
    uint64_t v20 = type metadata accessor for SubjectLiftAnalysisOutput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v0 + 1216);
  uint64_t v16 = *(void *)(v0 + 1208);
  uint64_t v17 = *(void *)(v0 + 1200);
  swift_release();
  sub_10000FBD8(v0 + 272, &qword_100524748);
  [*(id *)(v15 + 32) setActiveInteractionTypes:0];
  swift_beginAccess();
  sub_10030B95C(v16, v15 + 40);
  swift_endAccess();
LABEL_9:
  uint64_t v18 = type metadata accessor for SubjectLiftAnalysisOutput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_10030979C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1272);
  uint64_t v2 = *(void *)(*(void *)v0 + 1264);
  return _swift_task_switch(sub_1003098A4, v2, v1);
}

uint64_t sub_1003098A4()
{
  uint64_t v1 = *(void **)(v0 + 1280);
  swift_release();
  id v2 = [v1 view];
  if (!v2)
  {
    uint64_t v25 = *(void **)(v0 + 1296);
    char v26 = *(void **)(v0 + 1288);
    uint64_t v27 = *(char **)(v0 + 1200);
    sub_1001C0258(v0 + 656);

LABEL_12:
    uint64_t v32 = type metadata accessor for SubjectLiftAnalysisOutput(0);
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
    uint64_t v34 = v27;
    goto LABEL_13;
  }
  long long v3 = v2;
  uint64_t v81 = v0 + 656;
  uint64_t v4 = *(void **)(v0 + 1280);
  uint64_t v5 = *(void *)(v0 + 1248);
  uint64_t v6 = *(void *)(v0 + 1232);
  uint64_t v7 = *(void *)(v0 + 1224);
  uint64_t v8 = *(void *)(v0 + 1216);
  [v2 bounds];
  [v3 convertRect:0 toView:];
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;

  id v17 = [v4 allSubjectIndexes];
  static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v80 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v80(v5, v7);
  uint64_t v18 = sub_10030B9E4(v4);
  uint64_t v19 = sub_1003088E4(v18);
  swift_getKeyPath();
  uint64_t v20 = swift_task_alloc();
  *(void *)(v20 + 16) = v8;
  *(void *)(v20 + 24) = v19;
  *(void *)(v0 + 1184) = v8;
  sub_10030BF7C(&qword_100528DA0, (void (*)(uint64_t))type metadata accessor for SubjectLiftAnalysisViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  if (qword_100517E80 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10000F378(v21, (uint64_t)qword_10055E298);
  swift_bridgeObjectRetain();
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134217984;
    *(void *)(v0 + 1176) = *(void *)(v18 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "#allSubjectBounds: %ld", v24, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  if (!*(void *)(v18 + 16))
  {
    uint64_t v30 = *(void **)(v0 + 1296);
    uint64_t v31 = *(void **)(v0 + 1288);
    uint64_t v27 = *(char **)(v0 + 1200);
    sub_1001C0258(v81);

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  IndexSet.init()();
  uint64_t v28 = *(void *)(v0 + 704);
  if ((~v28 & 0xF000000000000007) != 0)
  {
    if ((v28 & 0x8000000000000000) == 0)
    {
      uint64_t v36 = *(void **)(v0 + 1280);
      swift_retain();
      swift_bridgeObjectRelease();
      double v37 = *(double *)(v28 + 16);
      swift_retain();
      v83.origin.double x = v10;
      v83.origin.double y = v12;
      v83.size.double width = v14;
      v83.size.double height = v16;
      double v38 = v37 - CGRectGetMinX(v83);
      v84.origin.double x = v10;
      v84.origin.double y = v12;
      v84.size.double width = v14;
      v84.size.double height = v16;
      id v39 = [v36 subjectIndexAtPoint:v38 * (double *)(v28 + 24) - CGRectGetMinY(v84)];
      if (v39)
      {
        double v40 = v39;
        [v39 integerValue];
        sub_1001C0240(v28);

LABEL_17:
        char v41 = *(void **)(v0 + 1296);
        uint64_t v42 = *(void **)(v0 + 1288);
        uint64_t v43 = *(void *)(v0 + 1248);
        uint64_t v44 = *(void *)(v0 + 1240);
        uint64_t v45 = *(void *)(v0 + 1232);
        uint64_t v46 = *(void *)(v0 + 1224);
        IndexSet.init(integer:)();

        sub_1001C0240(v28);
        v80(v44, v46);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v44, v43, v46);
        goto LABEL_28;
      }
      uint64_t v65 = *(void **)(v0 + 1296);

      sub_1001C0240(v28);
LABEL_27:
      sub_1001C0240(v28);
      goto LABEL_28;
    }
    CGFloat v48 = *(double *)((v28 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
    CGFloat v47 = *(double *)((v28 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
    CGFloat rect = v47;
    CGFloat v49 = *(double *)((v28 & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
    CGFloat v50 = *(double *)((v28 & 0x7FFFFFFFFFFFFFFFLL) + 0x28);
    swift_retain_n();
    v85.origin.double x = v48;
    v85.origin.double y = v47;
    v85.size.double width = v49;
    v85.size.double height = v50;
    double MinX = CGRectGetMinX(v85);
    v86.origin.double x = v10;
    v86.origin.double y = v12;
    v86.size.double width = v14;
    v86.size.double height = v16;
    CGFloat v52 = MinX - CGRectGetMinX(v86);
    v87.origin.double x = v48;
    v87.origin.double y = rect;
    v87.size.double width = v49;
    v87.size.double height = v50;
    double MinY = CGRectGetMinY(v87);
    v88.origin.double x = v10;
    v88.origin.double y = v12;
    v88.size.double width = v14;
    v88.size.double height = v16;
    CGFloat v54 = CGRectGetMinY(v88);
    uint64_t v55 = sub_10030BFC4(v18, v52, MinY - v54, v49, v50);
    char v57 = v56;
    float v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 134218240;
      if (v57) {
        uint64_t v63 = -1;
      }
      else {
        uint64_t v63 = v55;
      }
      *(void *)(v0 + 1160) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 12) = 2048;
      *(double *)(v0 + 1192) = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "intersection index: %ld, score: %f", (uint8_t *)v62, 0x16u);
      swift_slowDealloc();
    }

    sub_1001C0240(v28);
    if (v59 > 0.15)
    {
      if ((v57 & 1) == 0) {
        goto LABEL_17;
      }
      unsigned int v64 = *(void **)(v0 + 1296);

      goto LABEL_27;
    }
    NSString v75 = *(void **)(v0 + 1296);
    uint64_t v76 = *(void *)(v0 + 1240);
    uint64_t v77 = *(void *)(v0 + 1224);
    unint64_t v78 = *(char **)(v0 + 1200);

    sub_1001C0240(v28);
    v80(v76, v77);
    sub_1001C0258(v81);
    uint64_t v32 = type metadata accessor for SubjectLiftAnalysisOutput(0);
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
    uint64_t v34 = v78;
LABEL_13:
    uint64_t v35 = 1;
    goto LABEL_29;
  }
  uint64_t v29 = *(void **)(v0 + 1296);

  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v66 = *(void *)(v0 + 1240);
  uint64_t v67 = *(void *)(v0 + 1232);
  uint64_t v68 = *(void *)(v0 + 1224);
  unint64_t v69 = *(char **)(v0 + 1200);
  unint64_t v70 = *(void **)(v0 + 656);
  sub_10000F578(v0 + 664, v0 + 984);
  id v71 = v70;
  sub_1001C0258(v81);
  uint64_t v72 = type metadata accessor for SubjectLiftAnalysisOutput(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(&v69[*(int *)(v72 + 24)], v66, v68);
  *(void *)unint64_t v69 = v71;
  sub_1000321A8((long long *)(v0 + 984), (uint64_t)(v69 + 8));
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56);
  uint64_t v34 = v69;
  uint64_t v35 = 0;
  uint64_t v32 = v72;
LABEL_29:
  v33(v34, v35, 1, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  double v73 = *(uint64_t (**)(void))(v0 + 8);
  return v73();
}

uint64_t sub_10030A070()
{
  sub_10000FBD8((uint64_t)(v0 + 5), &qword_100524748);
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC6Tamale28SubjectLiftAnalysisViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10030A140()
{
  return type metadata accessor for SubjectLiftAnalysisViewModel(0);
}

uint64_t type metadata accessor for SubjectLiftAnalysisViewModel(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100528BE0);
}

uint64_t sub_10030A168()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10030A224(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    double v9 = (_OWORD *)((char *)a1 + v8);
    CGFloat v10 = (_OWORD *)((char *)a2 + v8);
    long long v11 = v10[1];
    _OWORD *v9 = *v10;
    v9[1] = v11;
  }
  return a1;
}

uint64_t sub_10030A2F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10030A35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  double v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_10030A3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  double v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  return a1;
}

uint64_t sub_10030A47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  double v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_10030A500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  double v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  _OWORD *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_10030A584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10030A598);
}

uint64_t sub_10030A598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10030A604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10030A618);
}

uint64_t sub_10030A618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for IdentifiableCGRect(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100528D50);
}

uint64_t sub_10030A6A8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for SubjectLiftAnalysisInput(uint64_t a1)
{
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 8);
  if ((~*(void *)(a1 + 48) & 0xF000000000000007) != 0)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SubjectLiftAnalysisInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  double v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  id v10 = v4;
  v9(v5, v6, v8);
  uint64_t v11 = *(void *)(a2 + 48);
  if ((~v11 & 0xF000000000000007) != 0) {
    swift_retain();
  }
  *(void *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for SubjectLiftAnalysisInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = (uint64_t *)(a1 + 8);
  id v7 = v4;

  sub_10000E558(v6, (uint64_t *)(a2 + 8));
  uint64_t v8 = (void *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v10 = v9 & 0xF000000000000007;
  if ((~*(void *)(a1 + 48) & 0xF000000000000007) != 0)
  {
    if (v10 != 0xF000000000000007)
    {
      void *v8 = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_100288B28(a1 + 48);
    uint64_t v9 = *(void *)(a2 + 48);
    goto LABEL_6;
  }
  if (v10 == 0xF000000000000007)
  {
LABEL_6:
    void *v8 = v9;
    goto LABEL_8;
  }
  void *v8 = v9;
  swift_retain();
LABEL_8:
  long long v11 = *(_OWORD *)(a2 + 56);
  long long v12 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 56) = v11;
  return a1;
}

__n128 initializeWithTake for SubjectLiftAnalysisInput(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SubjectLiftAnalysisInput(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = (void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if ((~v5 & 0xF000000000000007) != 0)
  {
    if ((~v7 & 0xF000000000000007) != 0)
    {
      *uint64_t v6 = v7;
      swift_release();
      goto LABEL_6;
    }
    sub_100288B28(a1 + 48);
  }
  *uint64_t v6 = v7;
LABEL_6:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubjectLiftAnalysisInput(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubjectLiftAnalysisInput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubjectLiftAnalysisInput()
{
  return &type metadata for SubjectLiftAnalysisInput;
}

uint64_t sub_10030AABC()
{
  return sub_10030BF7C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
}

id sub_10030AB04()
{
  return *(id *)(*(void *)v0 + 16);
}

uint64_t sub_10030AB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10030C9D4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10030AB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10030C9D4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10030ABD8()
{
}

uint64_t sub_10030AC00@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000F214(&qword_100528E68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v11 = (char *)&v15 - v10;
  if (a2)
  {
    swift_getKeyPath();
    uint64_t v16 = a1;
    sub_10030BF7C(&qword_100528DA0, (void (*)(uint64_t))type metadata accessor for SubjectLiftAnalysisViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v16 = *(void *)(a1 + 136);
    swift_bridgeObjectRetain();
    sub_10000F214((uint64_t *)&unk_100528E80);
    type metadata accessor for UUID();
    sub_10000F214(&qword_1005270B0);
    sub_100013AA8((unint64_t *)&unk_100528E90, (uint64_t *)&unk_100528E80);
    sub_1002B4038();
    sub_10030BF7C(&qword_100528ED8, (void (*)(uint64_t))type metadata accessor for IdentifiableCGRect);
    ForEach<>.init(_:content:)();
    uint64_t v12 = sub_10000F214(&qword_100528E70);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  }
  else
  {
    uint64_t v13 = sub_10000F214(&qword_100528E70);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  }
  sub_10000FB74((uint64_t)v11, (uint64_t)v8, &qword_100528E68);
  sub_10000FB74((uint64_t)v8, a3, &qword_100528E68);
  *(void *)(a3 + *(int *)(sub_10000F214(&qword_100528E78) + 48)) = a1;
  swift_retain_n();
  sub_10000FBD8((uint64_t)v11, &qword_100528E68);
  swift_release();
  return sub_10000FBD8((uint64_t)v8, &qword_100528E68);
}

void sub_10030AEEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = (CGFloat *)(a1 + *(int *)(type metadata accessor for IdentifiableCGRect(0) + 20));
  CGFloat v4 = *v3;
  CGFloat v5 = v3[1];
  CGFloat v6 = v3[2];
  CGFloat v7 = v3[3];
  uint64_t v8 = static Color.green.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v9 = static Alignment.center.getter();
  uint64_t v11 = v10;
  char v12 = static Edge.Set.all.getter();
  v26.origin.double x = v4;
  v26.origin.double y = v5;
  v26.size.double width = v6;
  v26.size.double height = v7;
  CGRectGetWidth(v26);
  v27.origin.double x = v4;
  v27.origin.double y = v5;
  v27.size.double width = v6;
  v27.size.double height = v7;
  CGRectGetHeight(v27);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v28.origin.double x = v4;
  v28.origin.double y = v5;
  v28.size.double width = v6;
  v28.size.double height = v7;
  CGFloat MidX = CGRectGetMidX(v28);
  v29.origin.double x = v4;
  v29.origin.double y = v5;
  v29.size.double width = v6;
  v29.size.double height = v7;
  CGRectGetMidY(v29);
  v30.origin.double x = v4;
  v30.origin.double y = v5;
  v30.size.double width = v6;
  v30.size.double height = v7;
  CGRectGetMidX(v30);
  v31.origin.double x = v4;
  v31.origin.double y = v5;
  v31.size.double width = v6;
  v31.size.double height = v7;
  CGFloat MidY = CGRectGetMidY(v31);
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v8;
  *(_WORD *)(a2 + 48) = 256;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = v12;
  *(void *)(a2 + 80) = v20;
  *(unsigned char *)(a2 + 88) = v21;
  *(void *)(a2 + 96) = v22;
  *(unsigned char *)(a2 + 104) = v23;
  *(void *)(a2 + 112) = v24;
  *(void *)(a2 + 120) = v25;
  *(CGFloat *)(a2 + 128) = MidX;
  *(CGFloat *)(a2 + 136) = MidY;
}

uint64_t sub_10030B0CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  *a1 = static Alignment.center.getter();
  a1[1] = v5;
  uint64_t v6 = sub_10000F214(&qword_100528E60);
  return sub_10030AC00(v3, v4, (uint64_t)a1 + *(int *)(v6 + 44));
}

uint64_t sub_10030B124(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10030B1AC(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_10000F3B0(a1, v2);
  char v4 = (CGImage *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  unsigned int v6 = v4;
  if (v5)
  {
    if (v5 == 1)
    {
      CGImageGetWidth(v4);
      CGImageGetHeight(v6);
      char v4 = v6;
      unsigned __int8 v5 = 1;
    }
  }
  else
  {
    CVPixelBufferGetWidth(v4);
    CVPixelBufferGetHeight(v6);
    char v4 = v6;
    unsigned __int8 v5 = 0;
  }
  sub_1000ACF28(v4, v5);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10000F3B0(a1, v7);
  double v9 = sub_10030CA60(v7, v8);
  return sub_1001C2994(v9);
}

void sub_10030B2C8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v16.origin.double x = a5;
    v16.origin.double y = a6;
    v16.size.double width = a7;
    v16.size.double height = a8;
    if (!CGRectIsInfinite(v16))
    {
      v17.origin.double x = a1;
      v17.origin.double y = a2;
      v17.size.double width = a3;
      v17.size.double height = a4;
      if (!CGRectIsNull(v17))
      {
        v18.origin.double x = a5;
        v18.origin.double y = a6;
        v18.size.double width = a7;
        v18.size.double height = a8;
        if (!CGRectIsNull(v18))
        {
          v19.origin.double x = a1;
          v19.origin.double y = a2;
          v19.size.double width = a3;
          v19.size.double height = a4;
          CGRectGetMaxX(v19);
          v20.origin.double x = a1;
          v20.origin.double y = a2;
          v20.size.double width = a3;
          v20.size.double height = a4;
          CGRectGetMaxY(v20);
        }
      }
    }
  }
}

void sub_10030B414(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10000FB74(a2, (uint64_t)&v64, &qword_100518A80);
  if (v66 == 0.0)
  {
    sub_10000FBD8((uint64_t)&v64, &qword_100518A80);
LABEL_16:
    char v58 = 1;
    uint64_t v51 = 0;
    uint64_t v53 = 0;
    uint64_t v55 = 0;
    uint64_t v57 = 0;
    goto LABEL_17;
  }
  sub_1000321A8((long long *)&v64, (uint64_t)v68);
  id v7 = [a1 view];
  if (!v7)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v68);
    goto LABEL_16;
  }
  uint64_t v8 = v7;
  id v9 = [v7 window];
  if (!v9)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v68);
LABEL_15:

    goto LABEL_16;
  }
  unint64_t v10 = v9;
  sub_10030B1AC(v68);
  double v12 = v11;
  double v14 = v13;
  [v10 bounds];
  CGFloat v19 = v18;
  CGFloat v20 = v15;
  CGFloat v21 = v16;
  CGFloat v22 = v17;
  double v23 = v16 / v12;
  if (v16 / v12 <= v17 / v14) {
    double v23 = v17 / v14;
  }
  CGFloat v24 = v12 * v23;
  CGFloat v25 = v14 * v23;
  CGFloat v26 = v19;
  double MidX = CGRectGetMidX(*(CGRect *)(&v15 - 1));
  v69.origin.double x = v19;
  v69.origin.CGFloat y = v20;
  v69.size.double width = v21;
  v69.size.double height = v22;
  double MidY = CGRectGetMidY(v69);
  v70.origin.double x = 0.0;
  v70.origin.CGFloat y = 0.0;
  v70.size.double width = v24;
  v70.size.double height = v25;
  double v29 = CGRectGetMidX(v70);
  v71.origin.double x = 0.0;
  v71.origin.CGFloat y = 0.0;
  v71.size.double width = v24;
  v71.size.double height = v25;
  CGFloat v30 = MidY - CGRectGetMidY(v71);
  v72.origin.double x = 0.0;
  v72.origin.CGFloat y = 0.0;
  v72.size.double width = v24;
  v72.size.double height = v25;
  CGRect v73 = CGRectOffset(v72, MidX - v29, v30);
  double x = v73.origin.x;
  CGFloat y = v73.origin.y;
  double width = v73.size.width;
  double height = v73.size.height;
  sub_10000FC34(a3, (uint64_t)&v64, (uint64_t *)&unk_100518AE0);
  if (v67)
  {
    double v62 = y;
  }
  else
  {
    CGPoint v35 = v64;
    CGFloat v36 = v66;
    CGFloat v60 = v65;
    v74.origin.double x = x;
    v74.origin.CGFloat y = y;
    v74.size.double width = width;
    v74.size.double height = height;
    CGFloat v37 = CGRectGetWidth(v74);
    v75.size.double height = height;
    CGFloat rect = height;
    CGFloat v38 = v37 / v12;
    v75.origin.double x = x;
    v75.origin.CGFloat y = y;
    v75.size.double width = width;
    double MinX = CGRectGetMinX(v75);
    v76.origin = v35;
    v76.size.double width = v60;
    v76.size.double height = v36;
    double v61 = MinX + v38 * CGRectGetMinX(v76);
    v77.origin.double x = x;
    v77.origin.CGFloat y = y;
    v77.size.double width = width;
    v77.size.double height = rect;
    double MinY = CGRectGetMinY(v77);
    v78.origin = v35;
    v78.size.double width = v60;
    v78.size.double height = v36;
    double v62 = MinY + v38 * CGRectGetMinY(v78);
    v79.origin = v35;
    v79.size.double width = v60;
    v79.size.double height = v36;
    double width = v38 * CGRectGetWidth(v79);
    v80.origin = v35;
    v80.size.double width = v60;
    v80.size.double height = v36;
    double height = v38 * CGRectGetHeight(v80);
    double x = v61;
  }
  id v40 = [a1 view:rect];
  if (!v40)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v68);

    goto LABEL_15;
  }
  char v41 = v40;
  [v40 bounds];
  [v41 convertRect:0 toView:];
  CGFloat v43 = v42;
  CGFloat v45 = v44;
  CGFloat v47 = v46;
  CGFloat v49 = v48;

  sub_10030B2C8(x, v62, width, height, v43, v45, v47, v49);
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;

  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v68);
  char v58 = 0;
LABEL_17:
  *(void *)a4 = v51;
  *(void *)(a4 + 8) = v53;
  *(void *)(a4 + 16) = v55;
  *(void *)(a4 + 24) = v57;
  *(unsigned char *)(a4 + 32) = v58;
}

uint64_t sub_10030B798(uint64_t a1, uint64_t a2)
{
  sub_100046CAC();
  char v4 = static NSObject.== infix(_:_:)();
  sub_1001BEF58(a1, (uint64_t)v19);
  sub_1001BEF58(a2, (uint64_t)v17);
  if ((v4 & 1) == 0)
  {
    sub_1001C0258((uint64_t)v17);
    sub_1001C0258((uint64_t)v19);
LABEL_10:
    sub_1001BEF58(a1, (uint64_t)v14);
    sub_1001BEF58(a2, (uint64_t)v11);
    goto LABEL_11;
  }
  unint64_t v5 = v20;
  uint64_t v6 = v18;
  if ((~v20 & 0xF000000000000007) != 0)
  {
    if ((~v18 & 0xF000000000000007) != 0)
    {
      sub_1001BEF38(v18);
      sub_1001BEF38(v5);
      BOOL v10 = sub_1003972E4(v5, v6);
      sub_1001C0240(v6);
      sub_1001C0258((uint64_t)v17);
      sub_1001C0258((uint64_t)v19);
      sub_1001C0240(v5);
      sub_1001BEF58(a1, (uint64_t)v14);
      sub_1001BEF58(a2, (uint64_t)v11);
      if (v10) {
        goto LABEL_14;
      }
LABEL_11:
      uint64_t v8 = 0;
      goto LABEL_12;
    }
    swift_retain();
    sub_1001C0258((uint64_t)v17);
    sub_1001C0258((uint64_t)v19);
    uint64_t v7 = v5;
    goto LABEL_9;
  }
  sub_1001BEF38(v18);
  sub_1001C0258((uint64_t)v17);
  sub_1001C0258((uint64_t)v19);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    uint64_t v7 = v6;
LABEL_9:
    sub_1001C0240(v7);
    goto LABEL_10;
  }
  sub_1001BEF58(a1, (uint64_t)v14);
  sub_1001BEF58(a2, (uint64_t)v11);
LABEL_14:
  uint64_t v8 = (v16 & v13);
  if ((v16 & 1) == 0 && (v13 & 1) == 0) {
    uint64_t v8 = CGRectEqualToRect(v15, v12);
  }
LABEL_12:
  sub_1001C0258((uint64_t)v11);
  sub_1001C0258((uint64_t)v14);
  return v8;
}

uint64_t sub_10030B95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SubjectLiftAnalysisOutput(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100528E20);
}

uint64_t sub_10030B9E4(void *a1)
{
  uint64_t v67 = type metadata accessor for IndexSet.Index();
  uint64_t v2 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  CGRect v69 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v62 - v5;
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  CGRect v72 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  double v11 = (char *)&v62 - v10;
  uint64_t v12 = sub_10000F214(&qword_100528DA8);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  CGRect v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v74 = sub_10033150C((uint64_t)_swiftEmptyArrayStorage);
  id v64 = a1;
  id v16 = [a1 allSubjectIndexes];
  static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();

  IndexSet.makeIterator()();
  double v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v63 = v11;
  CGRect v71 = v17;
  v17(v11, v6);
  uint64_t v18 = *(int *)(v13 + 44);
  uint64_t v19 = (uint64_t)v15;
  unint64_t v20 = &v15[v18];
  CGFloat v21 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v70 = v2 + 16;
  uint64_t v65 = v2 + 8;
  double v66 = v21;
  uint64_t v73 = v7 + 8;
  double v62 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  CGFloat v22 = (void (**)(char *, uint64_t))(v2 + 8);
  while (1)
  {
    uint64_t v24 = v67;
    CGFloat v25 = v68;
    v66(v68, v20, v67);
    sub_10030BF7C(&qword_100528DB0, (void (*)(uint64_t))&type metadata accessor for IndexSet);
    CGFloat v26 = v69;
    dispatch thunk of Collection.endIndex.getter();
    sub_10030BF7C((unint64_t *)&unk_100528DB8, (void (*)(uint64_t))&type metadata accessor for IndexSet.Index);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    CGRect v28 = *v22;
    (*v22)(v26, v24);
    v28(v25, v24);
    if (v27)
    {
      sub_10000FBD8(v19, &qword_100528DA8);
      return v74;
    }
    double v29 = (void (*)(void **, void))dispatch thunk of Collection.subscript.read();
    CGFloat v30 = v20;
    uint64_t v32 = *v31;
    v29(&v75, 0);
    uint64_t v33 = v63;
    (*v62)(v63, v19, v6);
    uint64_t v34 = v30;
    dispatch thunk of Collection.formIndex(after:)();
    v71(v33, v6);
    IndexSet.init(integer:)();
    IndexSet._bridgeToObjectiveC()(v35);
    CGFloat v37 = v36;
    [v64 imageSubjectBoundsWithIndexes:v36];
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;

    unint64_t v46 = v74;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    CGRect v75 = (void *)v46;
    unint64_t v49 = sub_10032B28C(v32);
    uint64_t v50 = *(void *)(v46 + 16);
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      break;
    }
    char v53 = v48;
    if (*(void *)(v46 + 24) >= v52)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1001F6CCC();
      }
    }
    else
    {
      sub_1001EF124(v52, isUniquelyReferenced_nonNull_native);
      unint64_t v54 = sub_10032B28C(v32);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_17;
      }
      unint64_t v49 = v54;
    }
    uint64_t v56 = v75;
    unint64_t v74 = (unint64_t)v75;
    if (v53)
    {
      double v23 = (void *)(v75[7] + 32 * v49);
      *double v23 = v39;
      v23[1] = v41;
      v23[2] = v43;
      v23[3] = v45;
    }
    else
    {
      v75[(v49 >> 6) + 8] |= 1 << v49;
      *(void *)(v56[6] + 8 * v49) = v32;
      uint64_t v57 = (void *)(v56[7] + 32 * v49);
      *uint64_t v57 = v39;
      v57[1] = v41;
      v57[2] = v43;
      void v57[3] = v45;
      uint64_t v58 = v56[2];
      BOOL v59 = __OFADD__(v58, 1);
      uint64_t v60 = v58 + 1;
      if (v59) {
        goto LABEL_16;
      }
      void v56[2] = v60;
    }
    swift_bridgeObjectRelease();
    v71(v72, v6);
    unint64_t v20 = v34;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10030BF64()
{
  return sub_10030C1D0();
}

uint64_t sub_10030BF7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10030BFC4(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v9 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a1 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  double v30 = a4 * a5;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  int64_t v16 = 0;
  float v17 = 0.0;
  while (v12)
  {
    unint64_t v19 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v20 = v19 | (v16 << 6);
LABEL_22:
    uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8 * v20);
    CGFloat v25 = (CGFloat *)(*(void *)(a1 + 56) + 32 * v20);
    v34.origin.double x = *v25;
    v34.origin.CGFloat y = v25[1];
    double v26 = v25[2];
    double v27 = v25[3];
    v32.origin.double x = a2;
    v32.origin.CGFloat y = a3;
    v32.size.double width = a4;
    v32.size.double height = a5;
    v34.size.double width = v26;
    v34.size.double height = v27;
    CGRect v33 = CGRectIntersection(v32, v34);
    double width = v33.size.width;
    double height = v33.size.height;
    uint64_t result = CGRectIsNull(v33);
    if (result)
    {
      if (v17 < 0.0)
      {
        float v17 = 0.0;
        uint64_t v15 = v24;
      }
    }
    else
    {
      float v18 = width * height / (v30 + v26 * v27 - width * height);
      if (v17 < v18)
      {
        float v17 = width * height / (v30 + v26 * v27 - width * height);
        uint64_t v15 = v24;
      }
    }
  }
  int64_t v21 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v21 >= v13) {
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v21);
  ++v16;
  if (v22) {
    goto LABEL_21;
  }
  int64_t v16 = v21 + 1;
  if (v21 + 1 >= v13) {
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v16);
  if (v22) {
    goto LABEL_21;
  }
  int64_t v16 = v21 + 2;
  if (v21 + 2 >= v13) {
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v16);
  if (v22)
  {
LABEL_21:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_22;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v16 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v16 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v16);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10030C1D0()
{
  *(void *)(*(void *)(v0 + 16) + 136) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10030C20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IdentifiableCGRect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_10030C270(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 2) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(char *, char **, uint64_t))(v9 - 8);
    unint64_t v12 = v5;
    v11(a1 + 8, v8, v10);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_10030C398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = a2 + 8;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v6;
  v11(v7, v8, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **sub_10030C478(void **a1, void **a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(a2 + 1);
  uint64_t v6 = *a2;
  uint64_t v8 = *a1;
  *a1 = *a2;
  long long v9 = (uint64_t *)(a1 + 1);
  id v10 = v6;

  sub_10000E558(v9, v7);
  uint64_t v11 = *(int *)(a3 + 24);
  id v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_10030C524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10030C5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10030C664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10030C678);
}

uint64_t sub_10030C678(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for IndexSet();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10030C728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10030C73C);
}

void *sub_10030C73C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for IndexSet();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10030C7E4()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubjectLiftAnalysisView()
{
  return &type metadata for SubjectLiftAnalysisView;
}

uint64_t sub_10030C898()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10030C8B4()
{
  unint64_t result = qword_100528EA0;
  if (!qword_100528EA0)
  {
    sub_10000F69C(&qword_1005270F8);
    sub_1002B40E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528EA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SubjectLiftAnalysisUIView()
{
  return &type metadata for SubjectLiftAnalysisUIView;
}

uint64_t sub_10030C940()
{
  return sub_100013AA8(&qword_100528EE0, &qword_100528EE8);
}

unint64_t sub_10030C980()
{
  unint64_t result = qword_100528EF0;
  if (!qword_100528EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528EF0);
  }
  return result;
}

unint64_t sub_10030C9D4()
{
  unint64_t result = qword_100528EF8;
  if (!qword_100528EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528EF8);
  }
  return result;
}

double sub_10030CA28(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 48))(v3);
  return *(double *)&v3[2];
}

double sub_10030CA60(uint64_t a1, uint64_t a2)
{
  (*(void (**)(double *__return_ptr))(a2 + 48))(v3);
  return v3[0];
}

uint64_t sub_10030CA98()
{
  return 0x56736E6169646172;
}

uint64_t sub_10030CAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x56736E6169646172 && a2 == 0xEC00000065756C61)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10030CB68(uint64_t a1)
{
  unint64_t v2 = sub_10030F158();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030CBA4(uint64_t a1)
{
  unint64_t v2 = sub_10030F158();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10030CBE0(double *a1, double *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10030CBF4()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10030CC40()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10030CC74()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10030CCBC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_100528FD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10030F158();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  *a2 = v10;
  return result;
}

uint64_t sub_10030CE20(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_100528FE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10030F158();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL sub_10030CF54(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL sub_10030CF68(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10030CF7C(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10030CF90(double *a1, double *a2)
{
  return *a2 < *a1;
}

double sub_10030CFA4@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double sub_10030CFB8(double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double sub_10030CFCC@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double sub_10030CFE0(double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

double sub_10030CFF4@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  double result = (double)*a1;
  *a2 = result;
  return result;
}

BOOL sub_10030D004(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  switch(*((unsigned char *)a1 + 8))
  {
    case 1:
      BOOL v8 = v2 == v3;
      BOOL result = v4 == 1 && v8;
      break;
    case 2:
      BOOL result = v4 == 2;
      break;
    case 3:
      BOOL result = v4 == 3 && v3 == 0;
      break;
    default:
      BOOL v5 = v2 == v3;
      if (*((unsigned char *)a2 + 8)) {
        BOOL result = 0;
      }
      else {
        BOOL result = v5;
      }
      break;
  }
  return result;
}

BOOL sub_10030D088(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(double *)a1 == *(double *)a2
    && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0)
  {
    return CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32));
  }
  return result;
}

uint64_t sub_10030D0F8(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_10000F214(&qword_100529068);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  BOOL v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100529070);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  BOOL v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100529078);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10030F654();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_10030F6A8();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_10030F6FC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_10030D3A8(void *a1, char a2)
{
  uint64_t v5 = sub_10000F214(&qword_100528FF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_10030F1AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13] = a2 & 1;
    v10[12] = 2;
    sub_1002123FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_10030D558(char a1, float a2, double a3)
{
  Hasher.init(_seed:)();
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = LODWORD(a2);
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_10030D5D8()
{
  if (*v0) {
    return 0x666E6F4374786574;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_10030D624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10030E374(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10030D64C(uint64_t a1)
{
  unint64_t v2 = sub_10030F654();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030D688(uint64_t a1)
{
  unint64_t v2 = sub_10030F654();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030D6C4(uint64_t a1)
{
  unint64_t v2 = sub_10030F6FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030D700(uint64_t a1)
{
  unint64_t v2 = sub_10030F6FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030D73C(uint64_t a1)
{
  unint64_t v2 = sub_10030F6A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030D778(uint64_t a1)
{
  unint64_t v2 = sub_10030F6A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030D7B4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10030E488(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_10030D7E4(void *a1)
{
  return sub_10030D0F8(a1, *v1);
}

uint64_t sub_10030D800()
{
  uint64_t v1 = 0x6D617473656D6974;
  if (*v0 != 1) {
    uint64_t v1 = 0x7954657461647075;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E656469666E6F63;
  }
}

uint64_t sub_10030D864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10030E8D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10030D88C(uint64_t a1)
{
  unint64_t v2 = sub_10030F1AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10030D8C8(uint64_t a1)
{
  unint64_t v2 = sub_10030F1AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10030D904(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 == *(float *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8)) {
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

Swift::Int sub_10030D940()
{
  return sub_10030D558(*(unsigned char *)(v0 + 16), *(float *)v0, *(double *)(v0 + 8));
}

void sub_10030D950()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 16);
  if ((*(_DWORD *)v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = *(_DWORD *)v0;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10030D9A8()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = v1;
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void *sub_10030DA1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10030EA4C(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = result & 1;
  }
  return result;
}

uint64_t sub_10030DA54(void *a1)
{
  return sub_10030D3A8(a1, *(unsigned char *)(v1 + 16));
}

Swift::Int sub_10030DA78(uint64_t a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  switch(a3)
  {
    case 1:
      Swift::UInt v6 = 3;
      goto LABEL_4;
    case 2:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    case 3:
      if (a1 | a2) {
        Swift::UInt v7 = 2;
      }
      else {
        Swift::UInt v7 = 1;
      }
      goto LABEL_9;
    default:
      Swift::UInt v6 = 0;
LABEL_4:
      Hasher._combine(_:)(v6);
      Swift::UInt v7 = a1;
LABEL_9:
      Hasher._combine(_:)(v7);
      return Hasher._finalize()();
  }
}

uint64_t sub_10030DB58(uint64_t a1, uint64_t a2)
{
  return sub_10030E298(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

Swift::Int sub_10030DB74()
{
  return sub_10030DA78(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_10030DB80()
{
  uint64_t v1 = *v0;
  switch(*((unsigned char *)v0 + 16))
  {
    case 1:
      Swift::UInt v2 = 3;
      goto LABEL_4;
    case 2:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      return;
    case 3:
      if (*(_OWORD *)v0 == 0) {
        Swift::UInt v3 = 1;
      }
      else {
        Swift::UInt v3 = 2;
      }
      goto LABEL_11;
    default:
      Swift::UInt v2 = 0;
LABEL_4:
      Hasher._combine(_:)(v2);
      Swift::UInt v3 = v1;
LABEL_11:
      Hasher._combine(_:)(v3);
      return;
  }
}

Swift::Int sub_10030DC48()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Swift::UInt v4 = 3;
      goto LABEL_4;
    case 2:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    case 3:
      if (v1 | v2) {
        Swift::UInt v5 = 2;
      }
      else {
        Swift::UInt v5 = 1;
      }
      goto LABEL_9;
    default:
      Swift::UInt v4 = 0;
LABEL_4:
      Hasher._combine(_:)(v4);
      Swift::UInt v5 = v1;
LABEL_9:
      Hasher._combine(_:)(v5);
      return Hasher._finalize()();
  }
}

unint64_t sub_10030DD20@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10030EC38(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10030DD4C()
{
  unint64_t result = 0x6E2820796D6C6162;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x2820797473616F74;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10030DE00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_10030DE14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10030DE28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10030DE3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_10030DE50()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10030DEB0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t type metadata accessor for CameraSourceUtilities()
{
  return self;
}

ValueMetadata *type metadata accessor for CameraLocalizationState()
{
  return &type metadata for CameraLocalizationState;
}

ValueMetadata *type metadata accessor for CameraSystemPressureLevel()
{
  return &type metadata for CameraSystemPressureLevel;
}

ValueMetadata *type metadata accessor for CameraZoomGestureState()
{
  return &type metadata for CameraZoomGestureState;
}

uint64_t destroy for CameraSourceRunState(uint64_t a1)
{
  return sub_1000BC2F4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s6Tamale20CameraSourceRunStateOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000BBF50(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CameraSourceRunState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000BBF50(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000BC2F4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CameraSourceRunState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000BC2F4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraSourceRunState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraSourceRunState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10030E0E8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10030E100(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CameraSourceRunState()
{
  return &type metadata for CameraSourceRunState;
}

unint64_t sub_10030E130()
{
  unint64_t result = qword_100528F98;
  if (!qword_100528F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528F98);
  }
  return result;
}

unint64_t sub_10030E188()
{
  unint64_t result = qword_100528FA0;
  if (!qword_100528FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FA0);
  }
  return result;
}

unint64_t sub_10030E1E0()
{
  unint64_t result = qword_100528FA8;
  if (!qword_100528FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FA8);
  }
  return result;
}

void *sub_10030E234()
{
  return &protocol witness table for Int;
}

unint64_t sub_10030E244()
{
  unint64_t result = qword_100528FB0;
  if (!qword_100528FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FB0);
  }
  return result;
}

uint64_t sub_10030E298(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        return 0;
      }
      return a4 == a1;
    case 2:
      if (a6 != 2) {
        return 0;
      }
      if (a1 == a4 && a2 == a5) {
        return 1;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    case 3:
      if (a1 | a2)
      {
        if (a6 == 3 && a4 == 1 && !a5) {
          return 1;
        }
      }
      else if (a6 == 3 && !(a5 | a4))
      {
        return 1;
      }
      return 0;
    default:
      if (a6) {
        return 0;
      }
      return a4 == a1;
  }
}

uint64_t sub_10030E374(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000010042B9E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x666E6F4374786574 && a2 == 0xEE0065636E656469)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10030E488(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100529038);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  char v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100529040);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100529048);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0((void *)a1, *(void *)(a1 + 24));
  sub_10030F654();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    int v18 = v17;
    sub_10000F214(&qword_10051E3E0);
    void *v18 = &type metadata for CameraSceneUpdate.UpdateType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_10030F6A8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_10030F6FC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v26);
  return a1;
}

uint64_t sub_10030E8D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7954657461647075 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10030EA4C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_100528FE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000F3B0(a1, a1[3]);
  sub_10030F1AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    v9[12] = 2;
    sub_100212300();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[13];
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_10030EC38(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

unint64_t sub_10030EC48()
{
  unint64_t result = qword_100528FB8;
  if (!qword_100528FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Angle()
{
  return &type metadata for Angle;
}

uint64_t getEnumTagSinglePayload for CameraSourceFrameMetadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraSourceFrameMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraSourceFrameMetadata()
{
  return &type metadata for CameraSourceFrameMetadata;
}

uint64_t initializeBufferWithCopyOfBuffer for CameraImage(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_10010BCC8(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithCopy for CameraImage(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_10010BCC8(*(id *)a2, v4);
  int v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1000ACF28(v5, v6);
  return a1;
}

uint64_t assignWithTake for CameraImage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_1000ACF28(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CameraImage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10030EECC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10030EEE4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CameraImage()
{
  return &type metadata for CameraImage;
}

unsigned char *_s6Tamale25CameraSystemPressureLevelOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10030EFD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraStopReason()
{
  return &type metadata for CameraStopReason;
}

uint64_t getEnumTagSinglePayload for CameraSceneUpdate(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraSceneUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraSceneUpdate()
{
  return &type metadata for CameraSceneUpdate;
}

unint64_t sub_10030F0AC()
{
  unint64_t result = qword_100528FC0;
  if (!qword_100528FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FC0);
  }
  return result;
}

unint64_t sub_10030F104()
{
  unint64_t result = qword_100528FC8;
  if (!qword_100528FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FC8);
  }
  return result;
}

unint64_t sub_10030F158()
{
  unint64_t result = qword_100528FD8;
  if (!qword_100528FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FD8);
  }
  return result;
}

unint64_t sub_10030F1AC()
{
  unint64_t result = qword_100528FF0;
  if (!qword_100528FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100528FF0);
  }
  return result;
}

unsigned char *_s6Tamale23CameraLocalizationStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10030F2CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraSceneUpdate.CodingKeys()
{
  return &type metadata for CameraSceneUpdate.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Angle.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10030F3A0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Angle.CodingKeys()
{
  return &type metadata for Angle.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraSceneUpdate.UpdateType()
{
  return &type metadata for CameraSceneUpdate.UpdateType;
}

unint64_t sub_10030F3F0()
{
  unint64_t result = qword_100529000;
  if (!qword_100529000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529000);
  }
  return result;
}

unint64_t sub_10030F448()
{
  unint64_t result = qword_100529008;
  if (!qword_100529008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529008);
  }
  return result;
}

unint64_t sub_10030F4A0()
{
  unint64_t result = qword_100529010;
  if (!qword_100529010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529010);
  }
  return result;
}

unint64_t sub_10030F4F8()
{
  unint64_t result = qword_100529018;
  if (!qword_100529018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529018);
  }
  return result;
}

unint64_t sub_10030F550()
{
  unint64_t result = qword_100529020;
  if (!qword_100529020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529020);
  }
  return result;
}

unint64_t sub_10030F5A8()
{
  unint64_t result = qword_100529028;
  if (!qword_100529028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529028);
  }
  return result;
}

unint64_t sub_10030F600()
{
  unint64_t result = qword_100529030;
  if (!qword_100529030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529030);
  }
  return result;
}

unint64_t sub_10030F654()
{
  unint64_t result = qword_100529050;
  if (!qword_100529050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529050);
  }
  return result;
}

unint64_t sub_10030F6A8()
{
  unint64_t result = qword_100529058;
  if (!qword_100529058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529058);
  }
  return result;
}

unint64_t sub_10030F6FC()
{
  unint64_t result = qword_100529060;
  if (!qword_100529060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529060);
  }
  return result;
}

unsigned char *_s6Tamale17CameraSceneUpdateV10UpdateTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10030F81CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraSceneUpdate.UpdateType.CodingKeys()
{
  return &type metadata for CameraSceneUpdate.UpdateType.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraSceneUpdate.UpdateType.DocumentConfidenceCodingKeys()
{
  return &type metadata for CameraSceneUpdate.UpdateType.DocumentConfidenceCodingKeys;
}

ValueMetadata *type metadata accessor for CameraSceneUpdate.UpdateType.TextConfidenceCodingKeys()
{
  return &type metadata for CameraSceneUpdate.UpdateType.TextConfidenceCodingKeys;
}

unint64_t sub_10030F878()
{
  unint64_t result = qword_100529080;
  if (!qword_100529080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529080);
  }
  return result;
}

unint64_t sub_10030F8D0()
{
  unint64_t result = qword_100529088;
  if (!qword_100529088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529088);
  }
  return result;
}

unint64_t sub_10030F928()
{
  unint64_t result = qword_100529090;
  if (!qword_100529090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529090);
  }
  return result;
}

unint64_t sub_10030F980()
{
  unint64_t result = qword_100529098;
  if (!qword_100529098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529098);
  }
  return result;
}

unint64_t sub_10030F9D8()
{
  unint64_t result = qword_1005290A0;
  if (!qword_1005290A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005290A0);
  }
  return result;
}

unint64_t sub_10030FA30()
{
  unint64_t result = qword_1005290A8;
  if (!qword_1005290A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005290A8);
  }
  return result;
}

unint64_t sub_10030FA88()
{
  unint64_t result = qword_1005290B0;
  if (!qword_1005290B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005290B0);
  }
  return result;
}

void *sub_10030FAE0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v11 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v11)
          {
            case 1:
              uint64_t v185 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v185 - 8) + 16))(a1, a2, v185);
              Swift::Int v186 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)a1 + v186[5]) = *(_DWORD *)((char *)a2 + v186[5]);
              uint64_t v187 = v186[6];
              unint64_t v188 = (_OWORD *)((char *)a1 + v187);
              uint64_t v189 = (_OWORD *)((char *)a2 + v187);
              long long v190 = v189[3];
              v188[2] = v189[2];
              v188[3] = v190;
              long long v191 = v189[1];
              *unint64_t v188 = *v189;
              v188[1] = v191;
              *(void *)((char *)a1 + v186[7]) = *(void *)((char *)a2 + v186[7]);
              *(void *)((char *)a1 + v186[8]) = *(void *)((char *)a2 + v186[8]);
              *(void *)((char *)a1 + v186[9]) = *(void *)((char *)a2 + v186[9]);
              *((unsigned char *)a1 + v186[10]) = *((unsigned char *)a2 + v186[10]);
              uint64_t v192 = v186[11];
              uint64_t v193 = (void *)((char *)a1 + v192);
              uint64_t v194 = (void *)((char *)a2 + v192);
              uint64_t v195 = v194[1];
              *uint64_t v193 = *v194;
              v193[1] = v195;
              uint64_t v196 = v186[12];
              uint64_t v197 = (void *)((char *)a1 + v196);
              long long v198 = (void *)((char *)a2 + v196);
              uint64_t v199 = v198[1];
              *uint64_t v197 = *v198;
              v197[1] = v199;
              uint64_t v200 = v186[13];
              uint64_t v358 = (char *)a1 + v200;
              long long v355 = (char *)a2 + v200;
              uint64_t v201 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v202 = *(void *)(v201 - 8);
              id v203 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v203(v355, 1, v201))
              {
                uint64_t v204 = sub_10000F214(&qword_100524BD0);
                memcpy(v358, v355, *(void *)(*(void *)(v204 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v202 + 16))(v358, v355, v201);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v202 + 56))(v358, 0, 1, v201);
              }
              uint64_t v321 = v186[14];
              char v322 = (char *)a1 + v321;
              unint64_t v323 = (char *)a2 + v321;
              unint64_t v324 = *((void *)v323 + 1);
              if (v324 >> 60 == 15)
              {
                *(_OWORD *)char v322 = *(_OWORD *)v323;
              }
              else
              {
                uint64_t v325 = *(void *)v323;
                sub_100038528(*(void *)v323, *((void *)v323 + 1));
                *(void *)char v322 = v325;
                *((void *)v322 + 1) = v324;
              }
              uint64_t v326 = v186[15];
              long long v327 = (void *)((char *)a1 + v326);
              long long v328 = (void *)((char *)a2 + v326);
              if (*v328)
              {
                uint64_t v329 = v328[1];
                uint64_t v330 = v328[2];
                void *v327 = *v328;
                v327[1] = v329;
                v327[2] = v330;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                *(_OWORD *)long long v327 = *(_OWORD *)v328;
                v327[2] = v328[2];
              }
              break;
            case 2:
              uint64_t v205 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v205 - 8) + 16))(a1, a2, v205);
              uint64_t v206 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v206[5]) = *(_DWORD *)((char *)a2 + v206[5]);
              uint64_t v207 = v206[6];
              uint64_t v208 = (_OWORD *)((char *)a1 + v207);
              uint64_t v209 = (_OWORD *)((char *)a2 + v207);
              long long v210 = v209[3];
              v208[2] = v209[2];
              v208[3] = v210;
              long long v211 = v209[1];
              *uint64_t v208 = *v209;
              v208[1] = v211;
              uint64_t v212 = v206[7];
              uint64_t v213 = (void *)((char *)a1 + v212);
              uint64_t v214 = (void *)((char *)a2 + v212);
              uint64_t v216 = *v214;
              uint64_t v215 = v214[1];
              *uint64_t v213 = v216;
              v213[1] = v215;
              *(void *)((char *)a1 + v206[8]) = *(void *)((char *)a2 + v206[8]);
              *(void *)((char *)a1 + v206[9]) = *(void *)((char *)a2 + v206[9]);
              *(void *)((char *)a1 + v206[10]) = *(void *)((char *)a2 + v206[10]);
              *(void *)((char *)a1 + v206[11]) = *(void *)((char *)a2 + v206[11]);
              *(void *)((char *)a1 + v206[12]) = *(void *)((char *)a2 + v206[12]);
              uint64_t v217 = v206[13];
              uint64_t v218 = *(void **)((char *)a2 + v217);
              *(void *)((char *)a1 + v217) = v218;
              *((unsigned char *)a1 + v206[14]) = *((unsigned char *)a2 + v206[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v219 = v218;
              break;
            case 3:
            case 4:
              uint64_t v220 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v220 - 8) + 16))(a1, a2, v220);
              uint64_t v221 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)a1 + v221[5]) = *(_DWORD *)((char *)a2 + v221[5]);
              uint64_t v222 = v221[6];
              unint64_t v223 = (_OWORD *)((char *)a1 + v222);
              uint64_t v224 = (_OWORD *)((char *)a2 + v222);
              long long v225 = v224[3];
              v223[2] = v224[2];
              v223[3] = v225;
              long long v226 = v224[1];
              *unint64_t v223 = *v224;
              v223[1] = v226;
              uint64_t v227 = v221[7];
              long long v228 = (void *)((char *)a1 + v227);
              uint64_t v229 = (void *)((char *)a2 + v227);
              uint64_t v231 = *v229;
              uint64_t v230 = v229[1];
              *long long v228 = v231;
              v228[1] = v230;
              *(void *)((char *)a1 + v221[8]) = *(void *)((char *)a2 + v221[8]);
              *(void *)((char *)a1 + v221[9]) = *(void *)((char *)a2 + v221[9]);
              *(void *)((char *)a1 + v221[10]) = *(void *)((char *)a2 + v221[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v232 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v232 - 8) + 16))(a1, a2, v232);
              long long v233 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v233[5]) = *(_DWORD *)((char *)a2 + v233[5]);
              uint64_t v234 = v233[6];
              uint64_t v235 = (_OWORD *)((char *)a1 + v234);
              uint64_t v236 = (_OWORD *)((char *)a2 + v234);
              long long v237 = v236[3];
              v235[2] = v236[2];
              v235[3] = v237;
              long long v238 = v236[1];
              *uint64_t v235 = *v236;
              v235[1] = v238;
              uint64_t v239 = v233[7];
              uint64_t v240 = (void *)((char *)a1 + v239);
              int v241 = (void *)((char *)a2 + v239);
              uint64_t v243 = *v241;
              uint64_t v242 = v241[1];
              void *v240 = v243;
              v240[1] = v242;
              *(void *)((char *)a1 + v233[8]) = *(void *)((char *)a2 + v233[8]);
              *(void *)((char *)a1 + v233[9]) = *(void *)((char *)a2 + v233[9]);
              swift_bridgeObjectRetain();
              break;
            default:
              uint64_t v12 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
              uint64_t v13 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)((char *)a1 + v13[5]) = *(_DWORD *)((char *)a2 + v13[5]);
              uint64_t v14 = v13[6];
              uint64_t v15 = (_OWORD *)((char *)a1 + v14);
              uint64_t v16 = (_OWORD *)((char *)a2 + v14);
              long long v17 = v16[3];
              void v15[2] = v16[2];
              v15[3] = v17;
              long long v18 = v16[1];
              *uint64_t v15 = *v16;
              v15[1] = v18;
              uint64_t v19 = v13[7];
              char v20 = (void *)((char *)a1 + v19);
              uint64_t v21 = (void *)((char *)a2 + v19);
              uint64_t v23 = *v21;
              uint64_t v22 = v21[1];
              void *v20 = v23;
              v20[1] = v22;
              *(void *)((char *)a1 + v13[8]) = *(void *)((char *)a2 + v13[8]);
              *(void *)((char *)a1 + v13[9]) = *(void *)((char *)a2 + v13[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v341 = sub_10000F214(&qword_100520120);
          uint64_t v342 = *(int *)(v341 + 48);
          uint64_t v343 = (char *)a1 + v342;
          unint64_t v344 = (char *)a2 + v342;
          id v345 = *(id *)v344;
          unint64_t v346 = (void *)*((void *)v344 + 1);
          uint64_t v347 = *((void *)v344 + 2);
          unsigned __int8 v348 = v344[24];
          sub_1000506C4(*(id *)v344, v346, v347, v348);
          *(void *)uint64_t v343 = v345;
          *((void *)v343 + 1) = v346;
          *((void *)v343 + 2) = v347;
          v343[24] = v348;
          uint64_t v349 = *(int *)(v341 + 64);
          uint64_t v350 = (char *)a1 + v349;
          uint64_t v351 = (char *)a2 + v349;
          id v352 = *(id *)v351;
          long long v353 = (void *)*((void *)v351 + 1);
          uint64_t v354 = *((void *)v351 + 2);
          LOBYTE(v346) = v351[24];
          sub_1000506C4(*(id *)v351, v353, v354, v346);
          *(void *)uint64_t v350 = v352;
          *((void *)v350 + 1) = v353;
          *((void *)v350 + 2) = v354;
          v350[24] = (char)v346;
        }
        else
        {
          switch(v11)
          {
            case 1:
              uint64_t v244 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v244 - 8) + 16))(a1, a2, v244);
              unint64_t v245 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)a1 + v245[5]) = *(_DWORD *)((char *)a2 + v245[5]);
              uint64_t v246 = v245[6];
              uint64_t v247 = (_OWORD *)((char *)a1 + v246);
              long long v248 = (_OWORD *)((char *)a2 + v246);
              long long v249 = v248[3];
              v247[2] = v248[2];
              v247[3] = v249;
              long long v250 = v248[1];
              _OWORD *v247 = *v248;
              v247[1] = v250;
              *(void *)((char *)a1 + v245[7]) = *(void *)((char *)a2 + v245[7]);
              *(void *)((char *)a1 + v245[8]) = *(void *)((char *)a2 + v245[8]);
              *(void *)((char *)a1 + v245[9]) = *(void *)((char *)a2 + v245[9]);
              *((unsigned char *)a1 + v245[10]) = *((unsigned char *)a2 + v245[10]);
              uint64_t v251 = v245[11];
              uint64_t v252 = (void *)((char *)a1 + v251);
              uint64_t v253 = (void *)((char *)a2 + v251);
              uint64_t v254 = v253[1];
              *uint64_t v252 = *v253;
              v252[1] = v254;
              uint64_t v255 = v245[12];
              uint64_t v256 = (void *)((char *)a1 + v255);
              uint64_t v257 = (void *)((char *)a2 + v255);
              uint64_t v258 = v257[1];
              void *v256 = *v257;
              v256[1] = v258;
              uint64_t v259 = v245[13];
              long long v359 = (char *)a1 + v259;
              unint64_t v356 = (char *)a2 + v259;
              uint64_t v260 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v261 = *(void *)(v260 - 8);
              uint64_t v262 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v262(v356, 1, v260))
              {
                uint64_t v263 = sub_10000F214(&qword_100524BD0);
                memcpy(v359, v356, *(void *)(*(void *)(v263 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v359, v356, v260);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(v359, 0, 1, v260);
              }
              uint64_t v331 = v245[14];
              uint64_t v332 = (char *)a1 + v331;
              unint64_t v333 = (char *)a2 + v331;
              unint64_t v334 = *((void *)v333 + 1);
              if (v334 >> 60 == 15)
              {
                *(_OWORD *)uint64_t v332 = *(_OWORD *)v333;
              }
              else
              {
                uint64_t v335 = *(void *)v333;
                sub_100038528(*(void *)v333, *((void *)v333 + 1));
                *(void *)uint64_t v332 = v335;
                *((void *)v332 + 1) = v334;
              }
              uint64_t v336 = v245[15];
              unint64_t v337 = (void *)((char *)a1 + v336);
              long long v338 = (void *)((char *)a2 + v336);
              if (*v338)
              {
                uint64_t v339 = v338[1];
                uint64_t v340 = v338[2];
                *unint64_t v337 = *v338;
                v337[1] = v339;
                v337[2] = v340;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                *(_OWORD *)unint64_t v337 = *(_OWORD *)v338;
                v337[2] = v338[2];
              }
              break;
            case 2:
              uint64_t v264 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v264 - 8) + 16))(a1, a2, v264);
              uint64_t v265 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v265[5]) = *(_DWORD *)((char *)a2 + v265[5]);
              uint64_t v266 = v265[6];
              uint64_t v267 = (_OWORD *)((char *)a1 + v266);
              long long v268 = (_OWORD *)((char *)a2 + v266);
              long long v269 = v268[3];
              v267[2] = v268[2];
              v267[3] = v269;
              long long v270 = v268[1];
              *uint64_t v267 = *v268;
              v267[1] = v270;
              uint64_t v271 = v265[7];
              uint64_t v272 = (void *)((char *)a1 + v271);
              uint64_t v273 = (void *)((char *)a2 + v271);
              uint64_t v275 = *v273;
              uint64_t v274 = v273[1];
              *uint64_t v272 = v275;
              v272[1] = v274;
              *(void *)((char *)a1 + v265[8]) = *(void *)((char *)a2 + v265[8]);
              *(void *)((char *)a1 + v265[9]) = *(void *)((char *)a2 + v265[9]);
              *(void *)((char *)a1 + v265[10]) = *(void *)((char *)a2 + v265[10]);
              *(void *)((char *)a1 + v265[11]) = *(void *)((char *)a2 + v265[11]);
              *(void *)((char *)a1 + v265[12]) = *(void *)((char *)a2 + v265[12]);
              uint64_t v276 = v265[13];
              uint64_t v277 = *(void **)((char *)a2 + v276);
              *(void *)((char *)a1 + v276) = v277;
              *((unsigned char *)a1 + v265[14]) = *((unsigned char *)a2 + v265[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v278 = v277;
              break;
            case 3:
            case 4:
              uint64_t v279 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v279 - 8) + 16))(a1, a2, v279);
              long long v280 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)a1 + v280[5]) = *(_DWORD *)((char *)a2 + v280[5]);
              uint64_t v281 = v280[6];
              uint64_t v282 = (_OWORD *)((char *)a1 + v281);
              uint64_t v283 = (_OWORD *)((char *)a2 + v281);
              long long v284 = v283[3];
              v282[2] = v283[2];
              v282[3] = v284;
              long long v285 = v283[1];
              *uint64_t v282 = *v283;
              v282[1] = v285;
              uint64_t v286 = v280[7];
              uint64_t v287 = (void *)((char *)a1 + v286);
              uint64_t v288 = (void *)((char *)a2 + v286);
              uint64_t v290 = *v288;
              uint64_t v289 = v288[1];
              *uint64_t v287 = v290;
              v287[1] = v289;
              *(void *)((char *)a1 + v280[8]) = *(void *)((char *)a2 + v280[8]);
              *(void *)((char *)a1 + v280[9]) = *(void *)((char *)a2 + v280[9]);
              *(void *)((char *)a1 + v280[10]) = *(void *)((char *)a2 + v280[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v291 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v291 - 8) + 16))(a1, a2, v291);
              uint64_t v292 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v292[5]) = *(_DWORD *)((char *)a2 + v292[5]);
              uint64_t v293 = v292[6];
              unint64_t v294 = (_OWORD *)((char *)a1 + v293);
              uint64_t v295 = (_OWORD *)((char *)a2 + v293);
              long long v296 = v295[3];
              v294[2] = v295[2];
              v294[3] = v296;
              long long v297 = v295[1];
              *unint64_t v294 = *v295;
              v294[1] = v297;
              uint64_t v298 = v292[7];
              uint64_t v299 = (void *)((char *)a1 + v298);
              uint64_t v300 = (void *)((char *)a2 + v298);
              uint64_t v302 = *v300;
              uint64_t v301 = v300[1];
              *uint64_t v299 = v302;
              v299[1] = v301;
              *(void *)((char *)a1 + v292[8]) = *(void *)((char *)a2 + v292[8]);
              *(void *)((char *)a1 + v292[9]) = *(void *)((char *)a2 + v292[9]);
              swift_bridgeObjectRetain();
              break;
            default:
              uint64_t v67 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
              uint64_t v68 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)((char *)a1 + v68[5]) = *(_DWORD *)((char *)a2 + v68[5]);
              uint64_t v69 = v68[6];
              uint64_t v70 = (_OWORD *)((char *)a1 + v69);
              CGRect v71 = (_OWORD *)((char *)a2 + v69);
              long long v72 = v71[3];
              v70[2] = v71[2];
              v70[3] = v72;
              long long v73 = v71[1];
              *uint64_t v70 = *v71;
              v70[1] = v73;
              uint64_t v74 = v68[7];
              CGRect v75 = (void *)((char *)a1 + v74);
              CGRect v76 = (void *)((char *)a2 + v74);
              uint64_t v78 = *v76;
              uint64_t v77 = v76[1];
              void *v75 = v78;
              v75[1] = v77;
              *(void *)((char *)a1 + v68[8]) = *(void *)((char *)a2 + v68[8]);
              *(void *)((char *)a1 + v68[9]) = *(void *)((char *)a2 + v68[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        uint64_t v43 = (void *)*a2;
        uint64_t v44 = (void *)a2[1];
        uint64_t v45 = a2[2];
        unint64_t v46 = a2[3];
        uint64_t v47 = a2[4];
        uint64_t v48 = a2[5];
        uint64_t v50 = a2[6];
        uint64_t v49 = a2[7];
        sub_100050624(v43, v44, v45, v46);
        *a1 = v43;
        a1[1] = v44;
        a1[2] = v45;
        a1[3] = v46;
        a1[4] = v47;
        a1[5] = v48;
        a1[6] = v50;
        a1[7] = v49;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v126 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v126 - 8) + 16))(a1, a2, v126);
            unint64_t v127 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v127[5]) = *(_DWORD *)((char *)a2 + v127[5]);
            uint64_t v128 = v127[6];
            uint64_t v129 = (_OWORD *)((char *)a1 + v128);
            BOOL v130 = (_OWORD *)((char *)a2 + v128);
            long long v131 = v130[3];
            v129[2] = v130[2];
            v129[3] = v131;
            long long v132 = v130[1];
            *uint64_t v129 = *v130;
            v129[1] = v132;
            *(void *)((char *)a1 + v127[7]) = *(void *)((char *)a2 + v127[7]);
            *(void *)((char *)a1 + v127[8]) = *(void *)((char *)a2 + v127[8]);
            *(void *)((char *)a1 + v127[9]) = *(void *)((char *)a2 + v127[9]);
            *((unsigned char *)a1 + v127[10]) = *((unsigned char *)a2 + v127[10]);
            uint64_t v133 = v127[11];
            uint64_t v134 = (void *)((char *)a1 + v133);
            uint64_t v135 = (void *)((char *)a2 + v133);
            uint64_t v136 = v135[1];
            *uint64_t v134 = *v135;
            v134[1] = v136;
            uint64_t v137 = v127[12];
            uint64_t v138 = (void *)((char *)a1 + v137);
            uint64_t v139 = (void *)((char *)a2 + v137);
            uint64_t v140 = v139[1];
            void *v138 = *v139;
            v138[1] = v140;
            uint64_t v141 = v127[13];
            unint64_t __dst = (char *)a1 + v141;
            unint64_t v357 = (char *)a2 + v141;
            uint64_t v142 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v143 = *(void *)(v142 - 8);
            uint64_t v144 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v144(v357, 1, v142))
            {
              uint64_t v145 = sub_10000F214(&qword_100524BD0);
              memcpy(__dst, v357, *(void *)(*(void *)(v145 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v143 + 16))(__dst, v357, v142);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(__dst, 0, 1, v142);
            }
            uint64_t v303 = v127[14];
            uint64_t v304 = (char *)a1 + v303;
            uint64_t v305 = (char *)a2 + v303;
            unint64_t v306 = *((void *)v305 + 1);
            if (v306 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v304 = *(_OWORD *)v305;
            }
            else
            {
              uint64_t v307 = *(void *)v305;
              sub_100038528(*(void *)v305, *((void *)v305 + 1));
              *(void *)uint64_t v304 = v307;
              *((void *)v304 + 1) = v306;
            }
            uint64_t v308 = v127[15];
            uint64_t v309 = (void *)((char *)a1 + v308);
            uint64_t v310 = (void *)((char *)a2 + v308);
            if (*v310)
            {
              uint64_t v311 = v310[1];
              uint64_t v312 = v310[2];
              *uint64_t v309 = *v310;
              v309[1] = v311;
              v309[2] = v312;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v309 = *(_OWORD *)v310;
              v309[2] = v310[2];
            }
            break;
          case 2u:
            uint64_t v146 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v146 - 8) + 16))(a1, a2, v146);
            Swift::Int v147 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v147[5]) = *(_DWORD *)((char *)a2 + v147[5]);
            uint64_t v148 = v147[6];
            Swift::Int v149 = (_OWORD *)((char *)a1 + v148);
            uint64_t v150 = (_OWORD *)((char *)a2 + v148);
            long long v151 = v150[3];
            v149[2] = v150[2];
            v149[3] = v151;
            long long v152 = v150[1];
            _OWORD *v149 = *v150;
            v149[1] = v152;
            uint64_t v153 = v147[7];
            uint64_t v154 = (void *)((char *)a1 + v153);
            uint64_t v155 = (void *)((char *)a2 + v153);
            uint64_t v157 = *v155;
            uint64_t v156 = v155[1];
            *uint64_t v154 = v157;
            v154[1] = v156;
            *(void *)((char *)a1 + v147[8]) = *(void *)((char *)a2 + v147[8]);
            *(void *)((char *)a1 + v147[9]) = *(void *)((char *)a2 + v147[9]);
            *(void *)((char *)a1 + v147[10]) = *(void *)((char *)a2 + v147[10]);
            *(void *)((char *)a1 + v147[11]) = *(void *)((char *)a2 + v147[11]);
            *(void *)((char *)a1 + v147[12]) = *(void *)((char *)a2 + v147[12]);
            uint64_t v158 = v147[13];
            uint64_t v159 = *(void **)((char *)a2 + v158);
            *(void *)((char *)a1 + v158) = v159;
            *((unsigned char *)a1 + v147[14]) = *((unsigned char *)a2 + v147[14]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v160 = v159;
            break;
          case 3u:
          case 4u:
            uint64_t v161 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v161 - 8) + 16))(a1, a2, v161);
            unint64_t v162 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v162[5]) = *(_DWORD *)((char *)a2 + v162[5]);
            uint64_t v163 = v162[6];
            BOOL v164 = (_OWORD *)((char *)a1 + v163);
            unint64_t v165 = (_OWORD *)((char *)a2 + v163);
            long long v166 = v165[3];
            v164[2] = v165[2];
            v164[3] = v166;
            long long v167 = v165[1];
            _OWORD *v164 = *v165;
            v164[1] = v167;
            uint64_t v168 = v162[7];
            long long v169 = (void *)((char *)a1 + v168);
            long long v170 = (void *)((char *)a2 + v168);
            uint64_t v172 = *v170;
            uint64_t v171 = v170[1];
            void *v169 = v172;
            v169[1] = v171;
            *(void *)((char *)a1 + v162[8]) = *(void *)((char *)a2 + v162[8]);
            *(void *)((char *)a1 + v162[9]) = *(void *)((char *)a2 + v162[9]);
            *(void *)((char *)a1 + v162[10]) = *(void *)((char *)a2 + v162[10]);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            uint64_t v173 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v173 - 8) + 16))(a1, a2, v173);
            uint64_t v174 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v174[5]) = *(_DWORD *)((char *)a2 + v174[5]);
            uint64_t v175 = v174[6];
            unint64_t v176 = (_OWORD *)((char *)a1 + v175);
            Swift::String v177 = (_OWORD *)((char *)a2 + v175);
            long long v178 = v177[3];
            v176[2] = v177[2];
            v176[3] = v178;
            long long v179 = v177[1];
            *unint64_t v176 = *v177;
            v176[1] = v179;
            uint64_t v180 = v174[7];
            unint64_t v181 = (void *)((char *)a1 + v180);
            uint64_t v182 = (void *)((char *)a2 + v180);
            uint64_t v184 = *v182;
            uint64_t v183 = v182[1];
            *unint64_t v181 = v184;
            v181[1] = v183;
            *(void *)((char *)a1 + v174[8]) = *(void *)((char *)a2 + v174[8]);
            *(void *)((char *)a1 + v174[9]) = *(void *)((char *)a2 + v174[9]);
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v24 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
            uint64_t v25 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v25[5]) = *(_DWORD *)((char *)a2 + v25[5]);
            uint64_t v26 = v25[6];
            char v27 = (_OWORD *)((char *)a1 + v26);
            char v28 = (_OWORD *)((char *)a2 + v26);
            long long v29 = v28[3];
            v27[2] = v28[2];
            v27[3] = v29;
            long long v30 = v28[1];
            *char v27 = *v28;
            v27[1] = v30;
            uint64_t v31 = v25[7];
            CGRect v32 = (void *)((char *)a1 + v31);
            CGRect v33 = (void *)((char *)a2 + v31);
            uint64_t v35 = *v33;
            uint64_t v34 = v33[1];
            *CGRect v32 = v35;
            v32[1] = v34;
            *(void *)((char *)a1 + v25[8]) = *(void *)((char *)a2 + v25[8]);
            *(void *)((char *)a1 + v25[9]) = *(void *)((char *)a2 + v25[9]);
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v313 = sub_10000F214(&qword_10051A328);
        uint64_t v314 = *(int *)(v313 + 48);
        uint64_t v315 = *(void **)((char *)a2 + v314);
        *(void *)((char *)a1 + v314) = v315;
        uint64_t v316 = *(int *)(v313 + 64);
        unint64_t v317 = (void *)((char *)a1 + v316);
        uint64_t v318 = (void *)((char *)a2 + v316);
        uint64_t v319 = v318[1];
        void *v317 = *v318;
        v317[1] = v319;
        id v320 = v315;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        uint64_t v51 = sub_10000F214(&qword_10051A320);
        uint64_t v52 = *(void *)(v51 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(a2, 1, v51))
        {
          uint64_t v53 = type metadata accessor for DataDetectorState(0);
          memcpy(a1, a2, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          uint64_t v81 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v81 - 8) + 16))(a1, a2, v81);
          uint64_t v82 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v82[5]) = *(_DWORD *)((char *)a2 + v82[5]);
          uint64_t v83 = v82[6];
          CGRect v84 = (_OWORD *)((char *)a1 + v83);
          CGRect v85 = (_OWORD *)((char *)a2 + v83);
          long long v86 = v85[3];
          v84[2] = v85[2];
          v84[3] = v86;
          long long v87 = v85[1];
          _OWORD *v84 = *v85;
          v84[1] = v87;
          uint64_t v88 = v82[7];
          double v89 = (void *)((char *)a1 + v88);
          id v90 = (void *)((char *)a2 + v88);
          uint64_t v92 = *v90;
          uint64_t v91 = v90[1];
          *double v89 = v92;
          v89[1] = v91;
          *(void *)((char *)a1 + v82[8]) = *(void *)((char *)a2 + v82[8]);
          *(void *)((char *)a1 + v82[9]) = *(void *)((char *)a2 + v82[9]);
          *(void *)((char *)a1 + v82[10]) = *(void *)((char *)a2 + v82[10]);
          *(void *)((char *)a1 + v82[11]) = *(void *)((char *)a2 + v82[11]);
          *(void *)((char *)a1 + v82[12]) = *(void *)((char *)a2 + v82[12]);
          uint64_t v93 = v82[13];
          uint64_t v94 = *(void **)((char *)a2 + v93);
          *(void *)((char *)a1 + v93) = v94;
          *((unsigned char *)a1 + v82[14]) = *((unsigned char *)a2 + v82[14]);
          uint64_t v95 = *(int *)(v51 + 48);
          long long v96 = *(void **)((char *)a2 + v95);
          *(void *)((char *)a1 + v95) = v96;
          uint64_t v97 = *(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v98 = v94;
          id v99 = v96;
          v97(a1, 0, 1, v51);
        }
        goto LABEL_31;
      case 6u:
        uint64_t v54 = a2[1];
        if (v54)
        {
          *a1 = *a2;
          a1[1] = v54;
          *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
          uint64_t v55 = a2[4];
          a1[3] = a2[3];
          a1[4] = v55;
          uint64_t v56 = a2[5];
          uint64_t v57 = a2[6];
          a1[5] = v56;
          a1[6] = v57;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v100 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v100;
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          a1[6] = a2[6];
        }
        goto LABEL_31;
      case 7u:
        uint64_t v58 = a2[1];
        if (v58)
        {
          *a1 = *a2;
          a1[1] = v58;
          uint64_t v59 = a2[3];
          a1[2] = a2[2];
          a1[3] = v59;
          uint64_t v60 = a2[5];
          a1[4] = a2[4];
          a1[5] = v60;
          double v62 = (void *)a2[6];
          uint64_t v61 = a2[7];
          a1[6] = v62;
          a1[7] = v61;
          a1[8] = a2[8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v63 = v62;
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v101 = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          *((_OWORD *)a1 + 3) = v101;
          a1[8] = a2[8];
          long long v102 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v102;
        }
        goto LABEL_31;
      case 8u:
        uint64_t v64 = sub_10000F214(&qword_10051A428);
        uint64_t v65 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v65 + 48))(a2, 1, v64))
        {
          uint64_t v66 = type metadata accessor for EventLookupState(0);
          memcpy(a1, a2, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          uint64_t v362 = v65;
          uint64_t v103 = a2[1];
          *a1 = *a2;
          a1[1] = v103;
          uint64_t v104 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v105 = v104[5];
          int __dsta = (char *)a1 + v105;
          __n128 v106 = (char *)a2 + v105;
          uint64_t v107 = type metadata accessor for Date();
          unint64_t v108 = *(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16);
          swift_bridgeObjectRetain();
          v108(__dsta, v106, v107);
          v108((char *)a1 + v104[6], (char *)a2 + v104[6], v107);
          uint64_t v109 = v104[7];
          uint64_t v110 = (void *)((char *)a1 + v109);
          uint64_t v111 = (void *)((char *)a2 + v109);
          uint64_t v112 = v111[1];
          void *v110 = *v111;
          v110[1] = v112;
          uint64_t v113 = v104[8];
          uint64_t v114 = (void *)((char *)a1 + v113);
          uint64_t v115 = (void *)((char *)a2 + v113);
          uint64_t v116 = v115[1];
          *uint64_t v114 = *v115;
          v114[1] = v116;
          *((unsigned char *)a1 + v104[9]) = *((unsigned char *)a2 + v104[9]);
          uint64_t v117 = *(int *)(v64 + 48);
          uint64_t v118 = (void *)((char *)a1 + v117);
          uint64_t v119 = (void *)((char *)a2 + v117);
          uint64_t v120 = v119[1];
          *uint64_t v118 = *v119;
          v118[1] = v120;
          uint64_t v121 = *(int *)(v64 + 64);
          uint64_t v122 = (void *)((char *)a1 + v121);
          uint64_t v123 = (void *)((char *)a2 + v121);
          uint64_t v124 = v123[1];
          *uint64_t v122 = *v123;
          v122[1] = v124;
          uint64_t v125 = *(void (**)(void *, void, uint64_t, uint64_t))(v362 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v125(a1, 0, 1, v64);
        }
        goto LABEL_31;
      case 9u:
        if (*a2)
        {
          uint64_t v37 = a2[1];
          uint64_t v36 = a2[2];
          *a1 = *a2;
          a1[1] = v37;
          uint64_t v39 = a2[3];
          uint64_t v38 = a2[4];
          a1[2] = v36;
          a1[3] = v39;
          uint64_t v41 = a2[5];
          uint64_t v40 = a2[6];
          a1[4] = v38;
          a1[5] = v41;
          uint64_t v42 = a2[7];
          a1[6] = v40;
          a1[7] = v42;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v79 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v79;
          long long v80 = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          *((_OWORD *)a1 + 3) = v80;
        }
LABEL_31:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_1003116B0(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      break;
    case 2u:
      type metadata accessor for GeoLocateState(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      type metadata accessor for CVDetection();
      int v3 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        switch(v3)
        {
          case 0:
            uint64_t v32 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_48;
          case 1:
            uint64_t v33 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
            uint64_t v34 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v35 = a1 + v34[13];
            uint64_t v36 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v37 = *(void *)(v36 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36)) {
              (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
            }
            uint64_t v38 = (uint64_t *)(a1 + v34[14]);
            unint64_t v39 = v38[1];
            if (v39 >> 60 != 15) {
              sub_100038B34(*v38, v39);
            }
            if (*(void *)(a1 + v34[15]))
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
            break;
          case 2:
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(a1, v40);
            uint64_t v41 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            break;
          case 3:
          case 4:
            uint64_t v4 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_release();
            break;
          case 5:
            uint64_t v42 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(a1, v42);
            type metadata accessor for StreamingTextDetectorResult(0);
LABEL_48:
            swift_bridgeObjectRelease();
            break;
          default:
            break;
        }
        uint64_t v43 = sub_10000F214(&qword_100520120);
        sub_10004FFD4(*(void **)(a1 + *(int *)(v43 + 48)), *(void **)(a1 + *(int *)(v43 + 48) + 8), *(void *)(a1 + *(int *)(v43 + 48) + 16), *(unsigned char *)(a1 + *(int *)(v43 + 48) + 24));
        uint64_t v44 = a1 + *(int *)(v43 + 64);
        uint64_t v45 = *(void **)v44;
        unint64_t v46 = *(void **)(v44 + 8);
        uint64_t v47 = *(void *)(v44 + 16);
        unsigned __int8 v48 = *(unsigned char *)(v44 + 24);
        sub_10004FFD4(v45, v46, v47, v48);
      }
      else
      {
        switch(v3)
        {
          case 0:
            uint64_t v49 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(a1, v49);
            type metadata accessor for ObjectDetectorResult(0);
            goto LABEL_36;
          case 1:
            uint64_t v50 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(a1, v50);
            uint64_t v51 = (int *)type metadata accessor for ParseDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v52 = a1 + v51[13];
            uint64_t v53 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v54 = *(void *)(v53 - 8);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
              (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
            }
            uint64_t v55 = (uint64_t *)(a1 + v51[14]);
            unint64_t v56 = v55[1];
            if (v56 >> 60 != 15) {
              sub_100038B34(*v55, v56);
            }
            if (!*(void *)(a1 + v51[15])) {
              return;
            }
            swift_bridgeObjectRelease();
LABEL_59:
            swift_release();
            break;
          case 2:
            uint64_t v57 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(a1, v57);
            uint64_t v58 = type metadata accessor for TextDetectorResult(0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v13 = *(int *)(v58 + 52);
            goto LABEL_12;
          case 3:
          case 4:
            uint64_t v20 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
            type metadata accessor for StreamingBarcodeDetectorResult(0);
            swift_bridgeObjectRelease();
            goto LABEL_59;
          case 5:
            uint64_t v59 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(a1, v59);
            type metadata accessor for StreamingTextDetectorResult(0);
            goto LABEL_36;
          default:
            return;
        }
      }
      return;
    case 3u:
      int v5 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
      uint64_t v7 = *(void *)(a1 + 16);
      unint64_t v8 = *(void *)(a1 + 24);
      sub_10004FF38(v5, v6, v7, v8);
      return;
    case 4u:
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_34;
        case 1u:
          uint64_t v22 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a1, v22);
          uint64_t v23 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v24 = a1 + v23[13];
          uint64_t v25 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v26 = *(void *)(v25 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25)) {
            (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
          }
          char v27 = (uint64_t *)(a1 + v23[14]);
          unint64_t v28 = v27[1];
          if (v28 >> 60 != 15) {
            sub_100038B34(*v27, v28);
          }
          if (*(void *)(a1 + v23[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          uint64_t v29 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a1, v29);
          uint64_t v30 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          uint64_t v9 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_34:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }

      break;
    case 5u:
      uint64_t v10 = sub_10000F214(&qword_10051A320);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(a1, 1, v10))
      {
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
        uint64_t v12 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v13 = *(int *)(v10 + 48);
LABEL_12:
        uint64_t v14 = *(void **)(a1 + v13);
      }
      return;
    case 6u:
      if (!*(void *)(a1 + 8)) {
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 7u:
      if (!*(void *)(a1 + 8)) {
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 8u:
      uint64_t v15 = sub_10000F214(&qword_10051A428);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(a1, 1, v15)) {
        return;
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = type metadata accessor for EventLookupItem(0);
      uint64_t v17 = a1 + *(int *)(v16 + 20);
      uint64_t v18 = type metadata accessor for Date();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
      v19(v17, v18);
      v19(a1 + *(int *)(v16 + 24), v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 9u:
      if (!*(void *)a1) {
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
LABEL_36:

  swift_bridgeObjectRelease();
}

void *sub_1003123C8(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_68;
    case 1u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_68;
    case 2u:
      type metadata accessor for GeoLocateState(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      type metadata accessor for CVDetection();
      int v8 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        switch(v8)
        {
          case 1:
            uint64_t v183 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v183 - 8) + 16))(a1, a2, v183);
            uint64_t v184 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v184[5]) = *(_DWORD *)((char *)a2 + v184[5]);
            uint64_t v185 = v184[6];
            Swift::Int v186 = (_OWORD *)((char *)a1 + v185);
            uint64_t v187 = (_OWORD *)((char *)a2 + v185);
            long long v188 = v187[3];
            v186[2] = v187[2];
            v186[3] = v188;
            long long v189 = v187[1];
            *Swift::Int v186 = *v187;
            v186[1] = v189;
            *(void *)((char *)a1 + v184[7]) = *(void *)((char *)a2 + v184[7]);
            *(void *)((char *)a1 + v184[8]) = *(void *)((char *)a2 + v184[8]);
            *(void *)((char *)a1 + v184[9]) = *(void *)((char *)a2 + v184[9]);
            *((unsigned char *)a1 + v184[10]) = *((unsigned char *)a2 + v184[10]);
            uint64_t v190 = v184[11];
            long long v191 = (void *)((char *)a1 + v190);
            uint64_t v192 = (void *)((char *)a2 + v190);
            uint64_t v193 = v192[1];
            *long long v191 = *v192;
            v191[1] = v193;
            uint64_t v194 = v184[12];
            uint64_t v195 = (void *)((char *)a1 + v194);
            uint64_t v196 = (void *)((char *)a2 + v194);
            uint64_t v197 = v196[1];
            *uint64_t v195 = *v196;
            v195[1] = v197;
            uint64_t v198 = v184[13];
            unint64_t v357 = (char *)a1 + v198;
            uint64_t v354 = (char *)a2 + v198;
            uint64_t v199 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v200 = *(void *)(v199 - 8);
            uint64_t v201 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v201(v354, 1, v199))
            {
              uint64_t v202 = sub_10000F214(&qword_100524BD0);
              memcpy(v357, v354, *(void *)(*(void *)(v202 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v200 + 16))(v357, v354, v199);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v200 + 56))(v357, 0, 1, v199);
            }
            uint64_t v319 = v184[14];
            id v320 = (char *)a1 + v319;
            uint64_t v321 = (char *)a2 + v319;
            unint64_t v322 = *((void *)v321 + 1);
            if (v322 >> 60 == 15)
            {
              *(_OWORD *)id v320 = *(_OWORD *)v321;
            }
            else
            {
              uint64_t v323 = *(void *)v321;
              sub_100038528(*(void *)v321, *((void *)v321 + 1));
              *(void *)id v320 = v323;
              *((void *)v320 + 1) = v322;
            }
            uint64_t v324 = v184[15];
            uint64_t v325 = (void *)((char *)a1 + v324);
            uint64_t v326 = (void *)((char *)a2 + v324);
            if (*v326)
            {
              uint64_t v327 = v326[1];
              uint64_t v328 = v326[2];
              *uint64_t v325 = *v326;
              v325[1] = v327;
              v325[2] = v328;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
              v325[2] = v326[2];
            }
            break;
          case 2:
            uint64_t v203 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v203 - 8) + 16))(a1, a2, v203);
            uint64_t v204 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v204[5]) = *(_DWORD *)((char *)a2 + v204[5]);
            uint64_t v205 = v204[6];
            uint64_t v206 = (_OWORD *)((char *)a1 + v205);
            uint64_t v207 = (_OWORD *)((char *)a2 + v205);
            long long v208 = v207[3];
            v206[2] = v207[2];
            v206[3] = v208;
            long long v209 = v207[1];
            *uint64_t v206 = *v207;
            v206[1] = v209;
            uint64_t v210 = v204[7];
            long long v211 = (void *)((char *)a1 + v210);
            uint64_t v212 = (void *)((char *)a2 + v210);
            uint64_t v214 = *v212;
            uint64_t v213 = v212[1];
            void *v211 = v214;
            v211[1] = v213;
            *(void *)((char *)a1 + v204[8]) = *(void *)((char *)a2 + v204[8]);
            *(void *)((char *)a1 + v204[9]) = *(void *)((char *)a2 + v204[9]);
            *(void *)((char *)a1 + v204[10]) = *(void *)((char *)a2 + v204[10]);
            *(void *)((char *)a1 + v204[11]) = *(void *)((char *)a2 + v204[11]);
            *(void *)((char *)a1 + v204[12]) = *(void *)((char *)a2 + v204[12]);
            uint64_t v215 = v204[13];
            uint64_t v216 = *(void **)((char *)a2 + v215);
            *(void *)((char *)a1 + v215) = v216;
            *((unsigned char *)a1 + v204[14]) = *((unsigned char *)a2 + v204[14]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v217 = v216;
            break;
          case 3:
          case 4:
            uint64_t v218 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v218 - 8) + 16))(a1, a2, v218);
            id v219 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v219[5]) = *(_DWORD *)((char *)a2 + v219[5]);
            uint64_t v220 = v219[6];
            uint64_t v221 = (_OWORD *)((char *)a1 + v220);
            uint64_t v222 = (_OWORD *)((char *)a2 + v220);
            long long v223 = v222[3];
            v221[2] = v222[2];
            v221[3] = v223;
            long long v224 = v222[1];
            *uint64_t v221 = *v222;
            v221[1] = v224;
            uint64_t v225 = v219[7];
            long long v226 = (void *)((char *)a1 + v225);
            uint64_t v227 = (void *)((char *)a2 + v225);
            uint64_t v229 = *v227;
            uint64_t v228 = v227[1];
            *long long v226 = v229;
            v226[1] = v228;
            *(void *)((char *)a1 + v219[8]) = *(void *)((char *)a2 + v219[8]);
            *(void *)((char *)a1 + v219[9]) = *(void *)((char *)a2 + v219[9]);
            *(void *)((char *)a1 + v219[10]) = *(void *)((char *)a2 + v219[10]);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5:
            uint64_t v230 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v230 - 8) + 16))(a1, a2, v230);
            uint64_t v231 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v231[5]) = *(_DWORD *)((char *)a2 + v231[5]);
            uint64_t v232 = v231[6];
            long long v233 = (_OWORD *)((char *)a1 + v232);
            uint64_t v234 = (_OWORD *)((char *)a2 + v232);
            long long v235 = v234[3];
            v233[2] = v234[2];
            v233[3] = v235;
            long long v236 = v234[1];
            _OWORD *v233 = *v234;
            v233[1] = v236;
            uint64_t v237 = v231[7];
            long long v238 = (void *)((char *)a1 + v237);
            uint64_t v239 = (void *)((char *)a2 + v237);
            uint64_t v241 = *v239;
            uint64_t v240 = v239[1];
            *long long v238 = v241;
            v238[1] = v240;
            *(void *)((char *)a1 + v231[8]) = *(void *)((char *)a2 + v231[8]);
            *(void *)((char *)a1 + v231[9]) = *(void *)((char *)a2 + v231[9]);
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v9 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
            uint64_t v10 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v10[5]) = *(_DWORD *)((char *)a2 + v10[5]);
            uint64_t v11 = v10[6];
            uint64_t v12 = (_OWORD *)((char *)a1 + v11);
            uint64_t v13 = (_OWORD *)((char *)a2 + v11);
            long long v14 = v13[3];
            void v12[2] = v13[2];
            v12[3] = v14;
            long long v15 = v13[1];
            *uint64_t v12 = *v13;
            v12[1] = v15;
            uint64_t v16 = v10[7];
            uint64_t v17 = (void *)((char *)a1 + v16);
            uint64_t v18 = (void *)((char *)a2 + v16);
            uint64_t v20 = *v18;
            uint64_t v19 = v18[1];
            *uint64_t v17 = v20;
            v17[1] = v19;
            *(void *)((char *)a1 + v10[8]) = *(void *)((char *)a2 + v10[8]);
            *(void *)((char *)a1 + v10[9]) = *(void *)((char *)a2 + v10[9]);
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v339 = sub_10000F214(&qword_100520120);
        uint64_t v340 = *(int *)(v339 + 48);
        uint64_t v341 = (char *)a1 + v340;
        uint64_t v342 = (char *)a2 + v340;
        id v343 = *(id *)v342;
        unint64_t v344 = (void *)*((void *)v342 + 1);
        uint64_t v345 = *((void *)v342 + 2);
        unsigned __int8 v346 = v342[24];
        sub_1000506C4(*(id *)v342, v344, v345, v346);
        *(void *)uint64_t v341 = v343;
        *((void *)v341 + 1) = v344;
        *((void *)v341 + 2) = v345;
        v341[24] = v346;
        uint64_t v347 = *(int *)(v339 + 64);
        unsigned __int8 v348 = (char *)a1 + v347;
        uint64_t v349 = (char *)a2 + v347;
        id v350 = *(id *)v349;
        uint64_t v351 = (void *)*((void *)v349 + 1);
        uint64_t v352 = *((void *)v349 + 2);
        LOBYTE(v344) = v349[24];
        sub_1000506C4(*(id *)v349, v351, v352, v344);
        *(void *)unsigned __int8 v348 = v350;
        *((void *)v348 + 1) = v351;
        *((void *)v348 + 2) = v352;
        v348[24] = (char)v344;
      }
      else
      {
        switch(v8)
        {
          case 1:
            uint64_t v242 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v242 - 8) + 16))(a1, a2, v242);
            uint64_t v243 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v243[5]) = *(_DWORD *)((char *)a2 + v243[5]);
            uint64_t v244 = v243[6];
            unint64_t v245 = (_OWORD *)((char *)a1 + v244);
            uint64_t v246 = (_OWORD *)((char *)a2 + v244);
            long long v247 = v246[3];
            v245[2] = v246[2];
            v245[3] = v247;
            long long v248 = v246[1];
            *unint64_t v245 = *v246;
            v245[1] = v248;
            *(void *)((char *)a1 + v243[7]) = *(void *)((char *)a2 + v243[7]);
            *(void *)((char *)a1 + v243[8]) = *(void *)((char *)a2 + v243[8]);
            *(void *)((char *)a1 + v243[9]) = *(void *)((char *)a2 + v243[9]);
            *((unsigned char *)a1 + v243[10]) = *((unsigned char *)a2 + v243[10]);
            uint64_t v249 = v243[11];
            long long v250 = (void *)((char *)a1 + v249);
            uint64_t v251 = (void *)((char *)a2 + v249);
            uint64_t v252 = v251[1];
            void *v250 = *v251;
            v250[1] = v252;
            uint64_t v253 = v243[12];
            uint64_t v254 = (void *)((char *)a1 + v253);
            uint64_t v255 = (void *)((char *)a2 + v253);
            uint64_t v256 = v255[1];
            void *v254 = *v255;
            v254[1] = v256;
            uint64_t v257 = v243[13];
            uint64_t v358 = (char *)a1 + v257;
            long long v355 = (char *)a2 + v257;
            uint64_t v258 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v259 = *(void *)(v258 - 8);
            uint64_t v260 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v259 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v260(v355, 1, v258))
            {
              uint64_t v261 = sub_10000F214(&qword_100524BD0);
              memcpy(v358, v355, *(void *)(*(void *)(v261 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v358, v355, v258);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v259 + 56))(v358, 0, 1, v258);
            }
            uint64_t v329 = v243[14];
            uint64_t v330 = (char *)a1 + v329;
            uint64_t v331 = (char *)a2 + v329;
            unint64_t v332 = *((void *)v331 + 1);
            if (v332 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v330 = *(_OWORD *)v331;
            }
            else
            {
              uint64_t v333 = *(void *)v331;
              sub_100038528(*(void *)v331, *((void *)v331 + 1));
              *(void *)uint64_t v330 = v333;
              *((void *)v330 + 1) = v332;
            }
            uint64_t v334 = v243[15];
            uint64_t v335 = (void *)((char *)a1 + v334);
            uint64_t v336 = (void *)((char *)a2 + v334);
            if (*v336)
            {
              uint64_t v337 = v336[1];
              uint64_t v338 = v336[2];
              *uint64_t v335 = *v336;
              v335[1] = v337;
              v335[2] = v338;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v335 = *(_OWORD *)v336;
              v335[2] = v336[2];
            }
            break;
          case 2:
            uint64_t v262 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v262 - 8) + 16))(a1, a2, v262);
            uint64_t v263 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v263[5]) = *(_DWORD *)((char *)a2 + v263[5]);
            uint64_t v264 = v263[6];
            uint64_t v265 = (_OWORD *)((char *)a1 + v264);
            uint64_t v266 = (_OWORD *)((char *)a2 + v264);
            long long v267 = v266[3];
            v265[2] = v266[2];
            v265[3] = v267;
            long long v268 = v266[1];
            *uint64_t v265 = *v266;
            v265[1] = v268;
            uint64_t v269 = v263[7];
            long long v270 = (void *)((char *)a1 + v269);
            uint64_t v271 = (void *)((char *)a2 + v269);
            uint64_t v273 = *v271;
            uint64_t v272 = v271[1];
            *long long v270 = v273;
            v270[1] = v272;
            *(void *)((char *)a1 + v263[8]) = *(void *)((char *)a2 + v263[8]);
            *(void *)((char *)a1 + v263[9]) = *(void *)((char *)a2 + v263[9]);
            *(void *)((char *)a1 + v263[10]) = *(void *)((char *)a2 + v263[10]);
            *(void *)((char *)a1 + v263[11]) = *(void *)((char *)a2 + v263[11]);
            *(void *)((char *)a1 + v263[12]) = *(void *)((char *)a2 + v263[12]);
            uint64_t v274 = v263[13];
            uint64_t v275 = *(void **)((char *)a2 + v274);
            *(void *)((char *)a1 + v274) = v275;
            *((unsigned char *)a1 + v263[14]) = *((unsigned char *)a2 + v263[14]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v276 = v275;
            break;
          case 3:
          case 4:
            uint64_t v277 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v277 - 8) + 16))(a1, a2, v277);
            id v278 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v278[5]) = *(_DWORD *)((char *)a2 + v278[5]);
            uint64_t v279 = v278[6];
            long long v280 = (_OWORD *)((char *)a1 + v279);
            uint64_t v281 = (_OWORD *)((char *)a2 + v279);
            long long v282 = v281[3];
            v280[2] = v281[2];
            v280[3] = v282;
            long long v283 = v281[1];
            *long long v280 = *v281;
            v280[1] = v283;
            uint64_t v284 = v278[7];
            long long v285 = (void *)((char *)a1 + v284);
            uint64_t v286 = (void *)((char *)a2 + v284);
            uint64_t v288 = *v286;
            uint64_t v287 = v286[1];
            *long long v285 = v288;
            v285[1] = v287;
            *(void *)((char *)a1 + v278[8]) = *(void *)((char *)a2 + v278[8]);
            *(void *)((char *)a1 + v278[9]) = *(void *)((char *)a2 + v278[9]);
            *(void *)((char *)a1 + v278[10]) = *(void *)((char *)a2 + v278[10]);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5:
            uint64_t v289 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v289 - 8) + 16))(a1, a2, v289);
            uint64_t v290 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v290[5]) = *(_DWORD *)((char *)a2 + v290[5]);
            uint64_t v291 = v290[6];
            uint64_t v292 = (_OWORD *)((char *)a1 + v291);
            uint64_t v293 = (_OWORD *)((char *)a2 + v291);
            long long v294 = v293[3];
            v292[2] = v293[2];
            v292[3] = v294;
            long long v295 = v293[1];
            *uint64_t v292 = *v293;
            v292[1] = v295;
            uint64_t v296 = v290[7];
            long long v297 = (void *)((char *)a1 + v296);
            uint64_t v298 = (void *)((char *)a2 + v296);
            uint64_t v300 = *v298;
            uint64_t v299 = v298[1];
            *long long v297 = v300;
            v297[1] = v299;
            *(void *)((char *)a1 + v290[8]) = *(void *)((char *)a2 + v290[8]);
            *(void *)((char *)a1 + v290[9]) = *(void *)((char *)a2 + v290[9]);
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v64 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v64 - 8) + 16))(a1, a2, v64);
            uint64_t v65 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v65[5]) = *(_DWORD *)((char *)a2 + v65[5]);
            uint64_t v66 = v65[6];
            uint64_t v67 = (_OWORD *)((char *)a1 + v66);
            uint64_t v68 = (_OWORD *)((char *)a2 + v66);
            long long v69 = v68[3];
            v67[2] = v68[2];
            v67[3] = v69;
            long long v70 = v68[1];
            *uint64_t v67 = *v68;
            v67[1] = v70;
            uint64_t v71 = v65[7];
            long long v72 = (void *)((char *)a1 + v71);
            long long v73 = (void *)((char *)a2 + v71);
            uint64_t v75 = *v73;
            uint64_t v74 = v73[1];
            *long long v72 = v75;
            v72[1] = v74;
            *(void *)((char *)a1 + v65[8]) = *(void *)((char *)a2 + v65[8]);
            *(void *)((char *)a1 + v65[9]) = *(void *)((char *)a2 + v65[9]);
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_68;
    case 3u:
      uint64_t v40 = (void *)*a2;
      uint64_t v41 = (void *)a2[1];
      uint64_t v42 = a2[2];
      unint64_t v43 = a2[3];
      uint64_t v44 = a2[4];
      uint64_t v45 = a2[5];
      uint64_t v47 = a2[6];
      uint64_t v46 = a2[7];
      sub_100050624(v40, v41, v42, v43);
      *a1 = v40;
      a1[1] = v41;
      a1[2] = v42;
      a1[3] = v43;
      a1[4] = v44;
      a1[5] = v45;
      a1[6] = v47;
      a1[7] = v46;
      goto LABEL_68;
    case 4u:
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v124 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v124 - 8) + 16))(a1, a2, v124);
          uint64_t v125 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v125[5]) = *(_DWORD *)((char *)a2 + v125[5]);
          uint64_t v126 = v125[6];
          unint64_t v127 = (_OWORD *)((char *)a1 + v126);
          uint64_t v128 = (_OWORD *)((char *)a2 + v126);
          long long v129 = v128[3];
          v127[2] = v128[2];
          v127[3] = v129;
          long long v130 = v128[1];
          *unint64_t v127 = *v128;
          v127[1] = v130;
          *(void *)((char *)a1 + v125[7]) = *(void *)((char *)a2 + v125[7]);
          *(void *)((char *)a1 + v125[8]) = *(void *)((char *)a2 + v125[8]);
          *(void *)((char *)a1 + v125[9]) = *(void *)((char *)a2 + v125[9]);
          *((unsigned char *)a1 + v125[10]) = *((unsigned char *)a2 + v125[10]);
          uint64_t v131 = v125[11];
          long long v132 = (void *)((char *)a1 + v131);
          uint64_t v133 = (void *)((char *)a2 + v131);
          uint64_t v134 = v133[1];
          *long long v132 = *v133;
          v132[1] = v134;
          uint64_t v135 = v125[12];
          uint64_t v136 = (void *)((char *)a1 + v135);
          uint64_t v137 = (void *)((char *)a2 + v135);
          uint64_t v138 = v137[1];
          *uint64_t v136 = *v137;
          v136[1] = v138;
          uint64_t v139 = v125[13];
          unint64_t __dst = (char *)a1 + v139;
          unint64_t v356 = (char *)a2 + v139;
          uint64_t v140 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v141 = *(void *)(v140 - 8);
          uint64_t v142 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v142(v356, 1, v140))
          {
            uint64_t v143 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v356, *(void *)(*(void *)(v143 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v141 + 16))(__dst, v356, v140);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(__dst, 0, 1, v140);
          }
          uint64_t v301 = v125[14];
          uint64_t v302 = (char *)a1 + v301;
          uint64_t v303 = (char *)a2 + v301;
          unint64_t v304 = *((void *)v303 + 1);
          if (v304 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v302 = *(_OWORD *)v303;
          }
          else
          {
            uint64_t v305 = *(void *)v303;
            sub_100038528(*(void *)v303, *((void *)v303 + 1));
            *(void *)uint64_t v302 = v305;
            *((void *)v302 + 1) = v304;
          }
          uint64_t v306 = v125[15];
          uint64_t v307 = (void *)((char *)a1 + v306);
          uint64_t v308 = (void *)((char *)a2 + v306);
          if (*v308)
          {
            uint64_t v309 = v308[1];
            uint64_t v310 = v308[2];
            void *v307 = *v308;
            v307[1] = v309;
            v307[2] = v310;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v307 = *(_OWORD *)v308;
            v307[2] = v308[2];
          }
          break;
        case 2u:
          uint64_t v144 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v144 - 8) + 16))(a1, a2, v144);
          uint64_t v145 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v145[5]) = *(_DWORD *)((char *)a2 + v145[5]);
          uint64_t v146 = v145[6];
          Swift::Int v147 = (_OWORD *)((char *)a1 + v146);
          uint64_t v148 = (_OWORD *)((char *)a2 + v146);
          long long v149 = v148[3];
          v147[2] = v148[2];
          v147[3] = v149;
          long long v150 = v148[1];
          *Swift::Int v147 = *v148;
          v147[1] = v150;
          uint64_t v151 = v145[7];
          long long v152 = (void *)((char *)a1 + v151);
          uint64_t v153 = (void *)((char *)a2 + v151);
          uint64_t v155 = *v153;
          uint64_t v154 = v153[1];
          void *v152 = v155;
          v152[1] = v154;
          *(void *)((char *)a1 + v145[8]) = *(void *)((char *)a2 + v145[8]);
          *(void *)((char *)a1 + v145[9]) = *(void *)((char *)a2 + v145[9]);
          *(void *)((char *)a1 + v145[10]) = *(void *)((char *)a2 + v145[10]);
          *(void *)((char *)a1 + v145[11]) = *(void *)((char *)a2 + v145[11]);
          *(void *)((char *)a1 + v145[12]) = *(void *)((char *)a2 + v145[12]);
          uint64_t v156 = v145[13];
          uint64_t v157 = *(void **)((char *)a2 + v156);
          *(void *)((char *)a1 + v156) = v157;
          *((unsigned char *)a1 + v145[14]) = *((unsigned char *)a2 + v145[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v158 = v157;
          break;
        case 3u:
        case 4u:
          uint64_t v159 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v159 - 8) + 16))(a1, a2, v159);
          id v160 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v160[5]) = *(_DWORD *)((char *)a2 + v160[5]);
          uint64_t v161 = v160[6];
          unint64_t v162 = (_OWORD *)((char *)a1 + v161);
          uint64_t v163 = (_OWORD *)((char *)a2 + v161);
          long long v164 = v163[3];
          v162[2] = v163[2];
          v162[3] = v164;
          long long v165 = v163[1];
          *unint64_t v162 = *v163;
          v162[1] = v165;
          uint64_t v166 = v160[7];
          long long v167 = (void *)((char *)a1 + v166);
          uint64_t v168 = (void *)((char *)a2 + v166);
          uint64_t v170 = *v168;
          uint64_t v169 = v168[1];
          *long long v167 = v170;
          v167[1] = v169;
          *(void *)((char *)a1 + v160[8]) = *(void *)((char *)a2 + v160[8]);
          *(void *)((char *)a1 + v160[9]) = *(void *)((char *)a2 + v160[9]);
          *(void *)((char *)a1 + v160[10]) = *(void *)((char *)a2 + v160[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          uint64_t v171 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v171 - 8) + 16))(a1, a2, v171);
          uint64_t v172 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v172[5]) = *(_DWORD *)((char *)a2 + v172[5]);
          uint64_t v173 = v172[6];
          uint64_t v174 = (_OWORD *)((char *)a1 + v173);
          uint64_t v175 = (_OWORD *)((char *)a2 + v173);
          long long v176 = v175[3];
          v174[2] = v175[2];
          v174[3] = v176;
          long long v177 = v175[1];
          *uint64_t v174 = *v175;
          v174[1] = v177;
          uint64_t v178 = v172[7];
          long long v179 = (void *)((char *)a1 + v178);
          uint64_t v180 = (void *)((char *)a2 + v178);
          uint64_t v182 = *v180;
          uint64_t v181 = v180[1];
          *long long v179 = v182;
          v179[1] = v181;
          *(void *)((char *)a1 + v172[8]) = *(void *)((char *)a2 + v172[8]);
          *(void *)((char *)a1 + v172[9]) = *(void *)((char *)a2 + v172[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v21 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
          uint64_t v22 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v22[5]) = *(_DWORD *)((char *)a2 + v22[5]);
          uint64_t v23 = v22[6];
          uint64_t v24 = (_OWORD *)((char *)a1 + v23);
          uint64_t v25 = (_OWORD *)((char *)a2 + v23);
          long long v26 = v25[3];
          void v24[2] = v25[2];
          v24[3] = v26;
          long long v27 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v27;
          uint64_t v28 = v22[7];
          uint64_t v29 = (void *)((char *)a1 + v28);
          uint64_t v30 = (void *)((char *)a2 + v28);
          uint64_t v32 = *v30;
          uint64_t v31 = v30[1];
          *uint64_t v29 = v32;
          v29[1] = v31;
          *(void *)((char *)a1 + v22[8]) = *(void *)((char *)a2 + v22[8]);
          *(void *)((char *)a1 + v22[9]) = *(void *)((char *)a2 + v22[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v311 = sub_10000F214(&qword_10051A328);
      uint64_t v312 = *(int *)(v311 + 48);
      uint64_t v313 = *(void **)((char *)a2 + v312);
      *(void *)((char *)a1 + v312) = v313;
      uint64_t v314 = *(int *)(v311 + 64);
      uint64_t v315 = (void *)((char *)a1 + v314);
      uint64_t v316 = (void *)((char *)a2 + v314);
      uint64_t v317 = v316[1];
      void *v315 = *v316;
      v315[1] = v317;
      id v318 = v313;
      swift_bridgeObjectRetain();
      goto LABEL_68;
    case 5u:
      uint64_t v48 = sub_10000F214(&qword_10051A320);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v49 + 48))(a2, 1, v48))
      {
        uint64_t v50 = type metadata accessor for DataDetectorState(0);
        memcpy(a1, a2, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        uint64_t v78 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v78 - 8) + 16))(a1, a2, v78);
        long long v79 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v79[5]) = *(_DWORD *)((char *)a2 + v79[5]);
        uint64_t v80 = v79[6];
        uint64_t v81 = (_OWORD *)((char *)a1 + v80);
        uint64_t v82 = (_OWORD *)((char *)a2 + v80);
        long long v83 = v82[3];
        v81[2] = v82[2];
        v81[3] = v83;
        long long v84 = v82[1];
        _OWORD *v81 = *v82;
        v81[1] = v84;
        uint64_t v85 = v79[7];
        long long v86 = (void *)((char *)a1 + v85);
        long long v87 = (void *)((char *)a2 + v85);
        uint64_t v89 = *v87;
        uint64_t v88 = v87[1];
        *long long v86 = v89;
        v86[1] = v88;
        *(void *)((char *)a1 + v79[8]) = *(void *)((char *)a2 + v79[8]);
        *(void *)((char *)a1 + v79[9]) = *(void *)((char *)a2 + v79[9]);
        *(void *)((char *)a1 + v79[10]) = *(void *)((char *)a2 + v79[10]);
        *(void *)((char *)a1 + v79[11]) = *(void *)((char *)a2 + v79[11]);
        *(void *)((char *)a1 + v79[12]) = *(void *)((char *)a2 + v79[12]);
        uint64_t v90 = v79[13];
        uint64_t v91 = *(void **)((char *)a2 + v90);
        *(void *)((char *)a1 + v90) = v91;
        *((unsigned char *)a1 + v79[14]) = *((unsigned char *)a2 + v79[14]);
        uint64_t v92 = *(int *)(v48 + 48);
        uint64_t v93 = *(void **)((char *)a2 + v92);
        *(void *)((char *)a1 + v92) = v93;
        uint64_t v94 = *(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v95 = v91;
        id v96 = v93;
        v94(a1, 0, 1, v48);
      }
      goto LABEL_68;
    case 6u:
      uint64_t v51 = a2[1];
      if (v51)
      {
        *a1 = *a2;
        a1[1] = v51;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v52 = a2[4];
        a1[3] = a2[3];
        a1[4] = v52;
        uint64_t v53 = a2[5];
        uint64_t v54 = a2[6];
        a1[5] = v53;
        a1[6] = v54;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v97 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v97;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        a1[6] = a2[6];
      }
      goto LABEL_68;
    case 7u:
      uint64_t v55 = a2[1];
      if (v55)
      {
        *a1 = *a2;
        a1[1] = v55;
        uint64_t v56 = a2[3];
        a1[2] = a2[2];
        a1[3] = v56;
        uint64_t v57 = a2[5];
        a1[4] = a2[4];
        a1[5] = v57;
        uint64_t v59 = (void *)a2[6];
        uint64_t v58 = a2[7];
        a1[6] = v59;
        a1[7] = v58;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v60 = v59;
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v98 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v98;
        a1[8] = a2[8];
        long long v99 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v99;
      }
      goto LABEL_68;
    case 8u:
      uint64_t v61 = sub_10000F214(&qword_10051A428);
      double v62 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v61 - 8);
      if (v62[6](a2, 1, v61))
      {
        uint64_t v63 = type metadata accessor for EventLookupState(0);
        memcpy(a1, a2, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        int __dsta = v62;
        uint64_t v100 = a2[1];
        *a1 = *a2;
        a1[1] = v100;
        long long v101 = (int *)type metadata accessor for EventLookupItem(0);
        uint64_t v102 = v101[5];
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (char *)a2 + v102;
        uint64_t v105 = type metadata accessor for Date();
        __n128 v106 = *(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16);
        swift_bridgeObjectRetain();
        v106(v103, v104, v105);
        v106((char *)a1 + v101[6], (char *)a2 + v101[6], v105);
        uint64_t v107 = v101[7];
        unint64_t v108 = (void *)((char *)a1 + v107);
        uint64_t v109 = (void *)((char *)a2 + v107);
        uint64_t v110 = v109[1];
        *unint64_t v108 = *v109;
        v108[1] = v110;
        uint64_t v111 = v101[8];
        uint64_t v112 = (void *)((char *)a1 + v111);
        uint64_t v113 = (void *)((char *)a2 + v111);
        uint64_t v114 = v113[1];
        *uint64_t v112 = *v113;
        v112[1] = v114;
        *((unsigned char *)a1 + v101[9]) = *((unsigned char *)a2 + v101[9]);
        uint64_t v115 = *(int *)(v61 + 48);
        uint64_t v116 = (void *)((char *)a1 + v115);
        uint64_t v117 = (void *)((char *)a2 + v115);
        uint64_t v118 = v117[1];
        void *v116 = *v117;
        v116[1] = v118;
        uint64_t v119 = *(int *)(v61 + 64);
        uint64_t v120 = (void *)((char *)a1 + v119);
        uint64_t v121 = (void *)((char *)a2 + v119);
        uint64_t v122 = v121[1];
        *uint64_t v120 = *v121;
        v120[1] = v122;
        uint64_t v123 = (void (*)(void *, void, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v123(a1, 0, 1, v61);
      }
      goto LABEL_68;
    case 9u:
      if (*a2)
      {
        uint64_t v34 = a2[1];
        uint64_t v33 = a2[2];
        *a1 = *a2;
        a1[1] = v34;
        uint64_t v36 = a2[3];
        uint64_t v35 = a2[4];
        a1[2] = v33;
        a1[3] = v36;
        uint64_t v38 = a2[5];
        uint64_t v37 = a2[6];
        a1[4] = v35;
        a1[5] = v38;
        uint64_t v39 = a2[7];
        a1[6] = v37;
        a1[7] = v39;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v76 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v76;
        long long v77 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v77;
      }
LABEL_68:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_100313F34(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100319DD8((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_69;
      case 1u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_69;
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v7 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v7)
          {
            case 1:
              uint64_t v158 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v158 - 8) + 16))(a1, a2, v158);
              uint64_t v159 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)a1 + v159[5]) = *(_DWORD *)((char *)a2 + v159[5]);
              uint64_t v160 = v159[6];
              uint64_t v161 = (_OWORD *)((char *)a1 + v160);
              unint64_t v162 = (_OWORD *)((char *)a2 + v160);
              long long v164 = v162[2];
              long long v163 = v162[3];
              long long v165 = v162[1];
              *uint64_t v161 = *v162;
              v161[1] = v165;
              v161[2] = v164;
              v161[3] = v163;
              *(void *)((char *)a1 + v159[7]) = *(void *)((char *)a2 + v159[7]);
              *(void *)((char *)a1 + v159[8]) = *(void *)((char *)a2 + v159[8]);
              *(void *)((char *)a1 + v159[9]) = *(void *)((char *)a2 + v159[9]);
              *((unsigned char *)a1 + v159[10]) = *((unsigned char *)a2 + v159[10]);
              uint64_t v166 = v159[11];
              long long v167 = (void *)((char *)a1 + v166);
              uint64_t v168 = (void *)((char *)a2 + v166);
              *long long v167 = *v168;
              v167[1] = v168[1];
              uint64_t v169 = v159[12];
              uint64_t v170 = (void *)((char *)a1 + v169);
              uint64_t v171 = (void *)((char *)a2 + v169);
              *uint64_t v170 = *v171;
              v170[1] = v171[1];
              uint64_t v172 = v159[13];
              uint64_t v323 = (char *)a1 + v172;
              id v320 = (char *)a2 + v172;
              uint64_t v173 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v174 = *(void *)(v173 - 8);
              uint64_t v175 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v175(v320, 1, v173))
              {
                uint64_t v176 = sub_10000F214(&qword_100524BD0);
                memcpy(v323, v320, *(void *)(*(void *)(v176 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v323, v320, v173);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(v323, 0, 1, v173);
              }
              uint64_t v285 = v159[14];
              uint64_t v286 = (char *)a1 + v285;
              uint64_t v287 = (char *)a2 + v285;
              unint64_t v288 = *((void *)v287 + 1);
              if (v288 >> 60 == 15)
              {
                *(_OWORD *)uint64_t v286 = *(_OWORD *)v287;
              }
              else
              {
                uint64_t v289 = *(void *)v287;
                sub_100038528(*(void *)v287, *((void *)v287 + 1));
                *(void *)uint64_t v286 = v289;
                *((void *)v286 + 1) = v288;
              }
              uint64_t v290 = v159[15];
              uint64_t v291 = (void *)((char *)a1 + v290);
              uint64_t v292 = (void *)((char *)a2 + v290);
              if (*v292)
              {
                *uint64_t v291 = *v292;
                uint64_t v293 = v292[2];
                v291[1] = v292[1];
                v291[2] = v293;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                long long v303 = *(_OWORD *)v292;
                v291[2] = v292[2];
                *(_OWORD *)uint64_t v291 = v303;
              }
              break;
            case 2:
              uint64_t v177 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v177 - 8) + 16))(a1, a2, v177);
              uint64_t v178 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v178[5]) = *(_DWORD *)((char *)a2 + v178[5]);
              uint64_t v179 = v178[6];
              uint64_t v180 = (_OWORD *)((char *)a1 + v179);
              uint64_t v181 = (_OWORD *)((char *)a2 + v179);
              long long v183 = v181[2];
              long long v182 = v181[3];
              long long v184 = v181[1];
              *uint64_t v180 = *v181;
              v180[1] = v184;
              v180[2] = v183;
              v180[3] = v182;
              uint64_t v185 = v178[7];
              Swift::Int v186 = (void *)((char *)a1 + v185);
              uint64_t v187 = (void *)((char *)a2 + v185);
              *Swift::Int v186 = *v187;
              v186[1] = v187[1];
              *(void *)((char *)a1 + v178[8]) = *(void *)((char *)a2 + v178[8]);
              *(void *)((char *)a1 + v178[9]) = *(void *)((char *)a2 + v178[9]);
              *(void *)((char *)a1 + v178[10]) = *(void *)((char *)a2 + v178[10]);
              *(void *)((char *)a1 + v178[11]) = *(void *)((char *)a2 + v178[11]);
              *(void *)((char *)a1 + v178[12]) = *(void *)((char *)a2 + v178[12]);
              uint64_t v188 = v178[13];
              long long v189 = *(void **)((char *)a2 + v188);
              *(void *)((char *)a1 + v188) = v189;
              *((unsigned char *)a1 + v178[14]) = *((unsigned char *)a2 + v178[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v190 = v189;
              break;
            case 3:
            case 4:
              uint64_t v191 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v191 - 8) + 16))(a1, a2, v191);
              uint64_t v192 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)a1 + v192[5]) = *(_DWORD *)((char *)a2 + v192[5]);
              uint64_t v193 = v192[6];
              uint64_t v194 = (_OWORD *)((char *)a1 + v193);
              uint64_t v195 = (_OWORD *)((char *)a2 + v193);
              long long v197 = v195[2];
              long long v196 = v195[3];
              long long v198 = v195[1];
              *uint64_t v194 = *v195;
              v194[1] = v198;
              v194[2] = v197;
              v194[3] = v196;
              uint64_t v199 = v192[7];
              uint64_t v200 = (void *)((char *)a1 + v199);
              uint64_t v201 = (void *)((char *)a2 + v199);
              void *v200 = *v201;
              v200[1] = v201[1];
              *(void *)((char *)a1 + v192[8]) = *(void *)((char *)a2 + v192[8]);
              *(void *)((char *)a1 + v192[9]) = *(void *)((char *)a2 + v192[9]);
              *(void *)((char *)a1 + v192[10]) = *(void *)((char *)a2 + v192[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v202 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v202 - 8) + 16))(a1, a2, v202);
              uint64_t v203 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v203[5]) = *(_DWORD *)((char *)a2 + v203[5]);
              uint64_t v204 = v203[6];
              uint64_t v205 = (_OWORD *)((char *)a1 + v204);
              uint64_t v206 = (_OWORD *)((char *)a2 + v204);
              long long v208 = v206[2];
              long long v207 = v206[3];
              long long v209 = v206[1];
              *uint64_t v205 = *v206;
              v205[1] = v209;
              v205[2] = v208;
              v205[3] = v207;
              uint64_t v210 = v203[7];
              long long v211 = (void *)((char *)a1 + v210);
              uint64_t v212 = (void *)((char *)a2 + v210);
              void *v211 = *v212;
              v211[1] = v212[1];
              *(void *)((char *)a1 + v203[8]) = *(void *)((char *)a2 + v203[8]);
              *(void *)((char *)a1 + v203[9]) = *(void *)((char *)a2 + v203[9]);
              swift_bridgeObjectRetain();
              break;
            default:
              uint64_t v8 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
              uint64_t v9 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)((char *)a1 + v9[5]) = *(_DWORD *)((char *)a2 + v9[5]);
              uint64_t v10 = v9[6];
              uint64_t v11 = (_OWORD *)((char *)a1 + v10);
              uint64_t v12 = (_OWORD *)((char *)a2 + v10);
              long long v14 = v12[2];
              long long v13 = v12[3];
              long long v15 = v12[1];
              *uint64_t v11 = *v12;
              v11[1] = v15;
              long long v11[2] = v14;
              v11[3] = v13;
              uint64_t v16 = v9[7];
              uint64_t v17 = (void *)((char *)a1 + v16);
              uint64_t v18 = (void *)((char *)a2 + v16);
              *uint64_t v17 = *v18;
              v17[1] = v18[1];
              *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
              *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v304 = sub_10000F214(&qword_100520120);
          uint64_t v305 = *(int *)(v304 + 48);
          uint64_t v306 = (char *)a1 + v305;
          uint64_t v307 = (char *)a2 + v305;
          id v308 = *(id *)v307;
          uint64_t v309 = (void *)*((void *)v307 + 1);
          uint64_t v310 = *((void *)v307 + 2);
          unsigned __int8 v311 = v307[24];
          sub_1000506C4(*(id *)v307, v309, v310, v311);
          *(void *)uint64_t v306 = v308;
          *((void *)v306 + 1) = v309;
          *((void *)v306 + 2) = v310;
          v306[24] = v311;
          uint64_t v312 = *(int *)(v304 + 64);
          uint64_t v313 = (char *)a1 + v312;
          uint64_t v314 = (char *)a2 + v312;
          id v315 = *(id *)v314;
          uint64_t v316 = (void *)*((void *)v314 + 1);
          uint64_t v317 = *((void *)v314 + 2);
          LOBYTE(v309) = v314[24];
          sub_1000506C4(*(id *)v314, v316, v317, v309);
          *(void *)uint64_t v313 = v315;
          *((void *)v313 + 1) = v316;
          *((void *)v313 + 2) = v317;
          v313[24] = (char)v309;
        }
        else
        {
          switch(v7)
          {
            case 1:
              uint64_t v213 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v213 - 8) + 16))(a1, a2, v213);
              uint64_t v214 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)a1 + v214[5]) = *(_DWORD *)((char *)a2 + v214[5]);
              uint64_t v215 = v214[6];
              uint64_t v216 = (_OWORD *)((char *)a1 + v215);
              id v217 = (_OWORD *)((char *)a2 + v215);
              long long v219 = v217[2];
              long long v218 = v217[3];
              long long v220 = v217[1];
              *uint64_t v216 = *v217;
              v216[1] = v220;
              v216[2] = v219;
              v216[3] = v218;
              *(void *)((char *)a1 + v214[7]) = *(void *)((char *)a2 + v214[7]);
              *(void *)((char *)a1 + v214[8]) = *(void *)((char *)a2 + v214[8]);
              *(void *)((char *)a1 + v214[9]) = *(void *)((char *)a2 + v214[9]);
              *((unsigned char *)a1 + v214[10]) = *((unsigned char *)a2 + v214[10]);
              uint64_t v221 = v214[11];
              uint64_t v222 = (void *)((char *)a1 + v221);
              long long v223 = (void *)((char *)a2 + v221);
              *uint64_t v222 = *v223;
              v222[1] = v223[1];
              uint64_t v224 = v214[12];
              uint64_t v225 = (void *)((char *)a1 + v224);
              long long v226 = (void *)((char *)a2 + v224);
              *uint64_t v225 = *v226;
              v225[1] = v226[1];
              uint64_t v227 = v214[13];
              uint64_t v324 = (char *)a1 + v227;
              uint64_t v321 = (char *)a2 + v227;
              uint64_t v228 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v229 = *(void *)(v228 - 8);
              uint64_t v230 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v229 + 48);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v230(v321, 1, v228))
              {
                uint64_t v231 = sub_10000F214(&qword_100524BD0);
                memcpy(v324, v321, *(void *)(*(void *)(v231 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v324, v321, v228);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v229 + 56))(v324, 0, 1, v228);
              }
              uint64_t v294 = v214[14];
              long long v295 = (char *)a1 + v294;
              uint64_t v296 = (char *)a2 + v294;
              unint64_t v297 = *((void *)v296 + 1);
              if (v297 >> 60 == 15)
              {
                *(_OWORD *)long long v295 = *(_OWORD *)v296;
              }
              else
              {
                uint64_t v298 = *(void *)v296;
                sub_100038528(*(void *)v296, *((void *)v296 + 1));
                *(void *)long long v295 = v298;
                *((void *)v295 + 1) = v297;
              }
              uint64_t v299 = v214[15];
              uint64_t v300 = (void *)((char *)a1 + v299);
              uint64_t v301 = (void *)((char *)a2 + v299);
              if (*v301)
              {
                *uint64_t v300 = *v301;
                uint64_t v302 = v301[2];
                v300[1] = v301[1];
                v300[2] = v302;
                swift_bridgeObjectRetain();
                swift_retain();
              }
              else
              {
                long long v318 = *(_OWORD *)v301;
                v300[2] = v301[2];
                *(_OWORD *)uint64_t v300 = v318;
              }
              break;
            case 2:
              uint64_t v232 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v232 - 8) + 16))(a1, a2, v232);
              long long v233 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v233[5]) = *(_DWORD *)((char *)a2 + v233[5]);
              uint64_t v234 = v233[6];
              long long v235 = (_OWORD *)((char *)a1 + v234);
              long long v236 = (_OWORD *)((char *)a2 + v234);
              long long v238 = v236[2];
              long long v237 = v236[3];
              long long v239 = v236[1];
              *long long v235 = *v236;
              v235[1] = v239;
              v235[2] = v238;
              v235[3] = v237;
              uint64_t v240 = v233[7];
              uint64_t v241 = (void *)((char *)a1 + v240);
              uint64_t v242 = (void *)((char *)a2 + v240);
              *uint64_t v241 = *v242;
              v241[1] = v242[1];
              *(void *)((char *)a1 + v233[8]) = *(void *)((char *)a2 + v233[8]);
              *(void *)((char *)a1 + v233[9]) = *(void *)((char *)a2 + v233[9]);
              *(void *)((char *)a1 + v233[10]) = *(void *)((char *)a2 + v233[10]);
              *(void *)((char *)a1 + v233[11]) = *(void *)((char *)a2 + v233[11]);
              *(void *)((char *)a1 + v233[12]) = *(void *)((char *)a2 + v233[12]);
              uint64_t v243 = v233[13];
              uint64_t v244 = *(void **)((char *)a2 + v243);
              *(void *)((char *)a1 + v243) = v244;
              *((unsigned char *)a1 + v233[14]) = *((unsigned char *)a2 + v233[14]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v245 = v244;
              break;
            case 3:
            case 4:
              uint64_t v246 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v246 - 8) + 16))(a1, a2, v246);
              long long v247 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)a1 + v247[5]) = *(_DWORD *)((char *)a2 + v247[5]);
              uint64_t v248 = v247[6];
              uint64_t v249 = (_OWORD *)((char *)a1 + v248);
              long long v250 = (_OWORD *)((char *)a2 + v248);
              long long v252 = v250[2];
              long long v251 = v250[3];
              long long v253 = v250[1];
              *uint64_t v249 = *v250;
              v249[1] = v253;
              v249[2] = v252;
              v249[3] = v251;
              uint64_t v254 = v247[7];
              uint64_t v255 = (void *)((char *)a1 + v254);
              uint64_t v256 = (void *)((char *)a2 + v254);
              *uint64_t v255 = *v256;
              v255[1] = v256[1];
              *(void *)((char *)a1 + v247[8]) = *(void *)((char *)a2 + v247[8]);
              *(void *)((char *)a1 + v247[9]) = *(void *)((char *)a2 + v247[9]);
              *(void *)((char *)a1 + v247[10]) = *(void *)((char *)a2 + v247[10]);
              swift_bridgeObjectRetain();
              swift_retain();
              break;
            case 5:
              uint64_t v257 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v257 - 8) + 16))(a1, a2, v257);
              uint64_t v258 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v258[5]) = *(_DWORD *)((char *)a2 + v258[5]);
              uint64_t v259 = v258[6];
              uint64_t v260 = (_OWORD *)((char *)a1 + v259);
              uint64_t v261 = (_OWORD *)((char *)a2 + v259);
              long long v263 = v261[2];
              long long v262 = v261[3];
              long long v264 = v261[1];
              _OWORD *v260 = *v261;
              v260[1] = v264;
              v260[2] = v263;
              v260[3] = v262;
              uint64_t v265 = v258[7];
              uint64_t v266 = (void *)((char *)a1 + v265);
              long long v267 = (void *)((char *)a2 + v265);
              *uint64_t v266 = *v267;
              v266[1] = v267[1];
              *(void *)((char *)a1 + v258[8]) = *(void *)((char *)a2 + v258[8]);
              *(void *)((char *)a1 + v258[9]) = *(void *)((char *)a2 + v258[9]);
              swift_bridgeObjectRetain();
              break;
            default:
              uint64_t v46 = type metadata accessor for UUID();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v46 - 8) + 16))(a1, a2, v46);
              uint64_t v47 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)((char *)a1 + v47[5]) = *(_DWORD *)((char *)a2 + v47[5]);
              uint64_t v48 = v47[6];
              uint64_t v49 = (_OWORD *)((char *)a1 + v48);
              uint64_t v50 = (_OWORD *)((char *)a2 + v48);
              long long v52 = v50[2];
              long long v51 = v50[3];
              long long v53 = v50[1];
              *uint64_t v49 = *v50;
              v49[1] = v53;
              v49[2] = v52;
              v49[3] = v51;
              uint64_t v54 = v47[7];
              uint64_t v55 = (void *)((char *)a1 + v54);
              uint64_t v56 = (void *)((char *)a2 + v54);
              *uint64_t v55 = *v56;
              v55[1] = v56[1];
              *(void *)((char *)a1 + v47[8]) = *(void *)((char *)a2 + v47[8]);
              *(void *)((char *)a1 + v47[9]) = *(void *)((char *)a2 + v47[9]);
              swift_bridgeObjectRetain();
              break;
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_69;
      case 3u:
        uint64_t v30 = (void *)*a2;
        uint64_t v31 = (void *)a2[1];
        uint64_t v32 = a2[2];
        unint64_t v33 = a2[3];
        uint64_t v34 = a2[4];
        uint64_t v35 = a2[5];
        uint64_t v37 = a2[6];
        uint64_t v36 = a2[7];
        sub_100050624(v30, v31, v32, v33);
        *a1 = v30;
        a1[1] = v31;
        a1[2] = v32;
        a1[3] = v33;
        a1[4] = v34;
        a1[5] = v35;
        a1[6] = v37;
        a1[7] = v36;
        goto LABEL_69;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v103 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v103 - 8) + 16))(a1, a2, v103);
            uint64_t v104 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v104[5]) = *(_DWORD *)((char *)a2 + v104[5]);
            uint64_t v105 = v104[6];
            __n128 v106 = (_OWORD *)((char *)a1 + v105);
            uint64_t v107 = (_OWORD *)((char *)a2 + v105);
            long long v109 = v107[2];
            long long v108 = v107[3];
            long long v110 = v107[1];
            *__n128 v106 = *v107;
            v106[1] = v110;
            v106[2] = v109;
            v106[3] = v108;
            *(void *)((char *)a1 + v104[7]) = *(void *)((char *)a2 + v104[7]);
            *(void *)((char *)a1 + v104[8]) = *(void *)((char *)a2 + v104[8]);
            *(void *)((char *)a1 + v104[9]) = *(void *)((char *)a2 + v104[9]);
            *((unsigned char *)a1 + v104[10]) = *((unsigned char *)a2 + v104[10]);
            uint64_t v111 = v104[11];
            uint64_t v112 = (void *)((char *)a1 + v111);
            uint64_t v113 = (void *)((char *)a2 + v111);
            *uint64_t v112 = *v113;
            v112[1] = v113[1];
            uint64_t v114 = v104[12];
            uint64_t v115 = (void *)((char *)a1 + v114);
            uint64_t v116 = (void *)((char *)a2 + v114);
            void *v115 = *v116;
            v115[1] = v116[1];
            uint64_t v117 = v104[13];
            unint64_t __dst = (char *)a1 + v117;
            unint64_t v322 = (char *)a2 + v117;
            uint64_t v118 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v119 = *(void *)(v118 - 8);
            uint64_t v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v120(v322, 1, v118))
            {
              uint64_t v121 = sub_10000F214(&qword_100524BD0);
              memcpy(__dst, v322, *(void *)(*(void *)(v121 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v119 + 16))(__dst, v322, v118);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(__dst, 0, 1, v118);
            }
            uint64_t v268 = v104[14];
            uint64_t v269 = (char *)a1 + v268;
            long long v270 = (char *)a2 + v268;
            unint64_t v271 = *((void *)v270 + 1);
            if (v271 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v269 = *(_OWORD *)v270;
            }
            else
            {
              uint64_t v272 = *(void *)v270;
              sub_100038528(*(void *)v270, *((void *)v270 + 1));
              *(void *)uint64_t v269 = v272;
              *((void *)v269 + 1) = v271;
            }
            uint64_t v273 = v104[15];
            uint64_t v274 = (void *)((char *)a1 + v273);
            uint64_t v275 = (void *)((char *)a2 + v273);
            if (*v275)
            {
              *uint64_t v274 = *v275;
              uint64_t v276 = v275[2];
              v274[1] = v275[1];
              v274[2] = v276;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v277 = *(_OWORD *)v275;
              v274[2] = v275[2];
              *(_OWORD *)uint64_t v274 = v277;
            }
            break;
          case 2u:
            uint64_t v122 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v122 - 8) + 16))(a1, a2, v122);
            uint64_t v123 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v123[5]) = *(_DWORD *)((char *)a2 + v123[5]);
            uint64_t v124 = v123[6];
            uint64_t v125 = (_OWORD *)((char *)a1 + v124);
            uint64_t v126 = (_OWORD *)((char *)a2 + v124);
            long long v128 = v126[2];
            long long v127 = v126[3];
            long long v129 = v126[1];
            _OWORD *v125 = *v126;
            v125[1] = v129;
            v125[2] = v128;
            v125[3] = v127;
            uint64_t v130 = v123[7];
            uint64_t v131 = (void *)((char *)a1 + v130);
            long long v132 = (void *)((char *)a2 + v130);
            *uint64_t v131 = *v132;
            v131[1] = v132[1];
            *(void *)((char *)a1 + v123[8]) = *(void *)((char *)a2 + v123[8]);
            *(void *)((char *)a1 + v123[9]) = *(void *)((char *)a2 + v123[9]);
            *(void *)((char *)a1 + v123[10]) = *(void *)((char *)a2 + v123[10]);
            *(void *)((char *)a1 + v123[11]) = *(void *)((char *)a2 + v123[11]);
            *(void *)((char *)a1 + v123[12]) = *(void *)((char *)a2 + v123[12]);
            uint64_t v133 = v123[13];
            uint64_t v134 = *(void **)((char *)a2 + v133);
            *(void *)((char *)a1 + v133) = v134;
            *((unsigned char *)a1 + v123[14]) = *((unsigned char *)a2 + v123[14]);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v135 = v134;
            break;
          case 3u:
          case 4u:
            uint64_t v136 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v136 - 8) + 16))(a1, a2, v136);
            uint64_t v137 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v137[5]) = *(_DWORD *)((char *)a2 + v137[5]);
            uint64_t v138 = v137[6];
            uint64_t v139 = (_OWORD *)((char *)a1 + v138);
            uint64_t v140 = (_OWORD *)((char *)a2 + v138);
            long long v142 = v140[2];
            long long v141 = v140[3];
            long long v143 = v140[1];
            *uint64_t v139 = *v140;
            v139[1] = v143;
            v139[2] = v142;
            v139[3] = v141;
            uint64_t v144 = v137[7];
            uint64_t v145 = (void *)((char *)a1 + v144);
            uint64_t v146 = (void *)((char *)a2 + v144);
            *uint64_t v145 = *v146;
            v145[1] = v146[1];
            *(void *)((char *)a1 + v137[8]) = *(void *)((char *)a2 + v137[8]);
            *(void *)((char *)a1 + v137[9]) = *(void *)((char *)a2 + v137[9]);
            *(void *)((char *)a1 + v137[10]) = *(void *)((char *)a2 + v137[10]);
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            uint64_t v147 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v147 - 8) + 16))(a1, a2, v147);
            uint64_t v148 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v148[5]) = *(_DWORD *)((char *)a2 + v148[5]);
            uint64_t v149 = v148[6];
            long long v150 = (_OWORD *)((char *)a1 + v149);
            uint64_t v151 = (_OWORD *)((char *)a2 + v149);
            long long v153 = v151[2];
            long long v152 = v151[3];
            long long v154 = v151[1];
            _OWORD *v150 = *v151;
            v150[1] = v154;
            v150[2] = v153;
            v150[3] = v152;
            uint64_t v155 = v148[7];
            uint64_t v156 = (void *)((char *)a1 + v155);
            uint64_t v157 = (void *)((char *)a2 + v155);
            *uint64_t v156 = *v157;
            v156[1] = v157[1];
            *(void *)((char *)a1 + v148[8]) = *(void *)((char *)a2 + v148[8]);
            *(void *)((char *)a1 + v148[9]) = *(void *)((char *)a2 + v148[9]);
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v19 = type metadata accessor for UUID();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
            uint64_t v20 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v20[5]) = *(_DWORD *)((char *)a2 + v20[5]);
            uint64_t v21 = v20[6];
            uint64_t v22 = (_OWORD *)((char *)a1 + v21);
            uint64_t v23 = (_OWORD *)((char *)a2 + v21);
            long long v25 = v23[2];
            long long v24 = v23[3];
            long long v26 = v23[1];
            *uint64_t v22 = *v23;
            v22[1] = v26;
            v22[2] = v25;
            v22[3] = v24;
            uint64_t v27 = v20[7];
            uint64_t v28 = (void *)((char *)a1 + v27);
            uint64_t v29 = (void *)((char *)a2 + v27);
            *uint64_t v28 = *v29;
            v28[1] = v29[1];
            *(void *)((char *)a1 + v20[8]) = *(void *)((char *)a2 + v20[8]);
            *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v278 = sub_10000F214(&qword_10051A328);
        uint64_t v279 = *(int *)(v278 + 48);
        long long v280 = *(void **)((char *)a2 + v279);
        *(void *)((char *)a1 + v279) = v280;
        uint64_t v281 = *(int *)(v278 + 64);
        long long v282 = (void *)((char *)a1 + v281);
        long long v283 = (void *)((char *)a2 + v281);
        *long long v282 = *v283;
        v282[1] = v283[1];
        id v284 = v280;
        swift_bridgeObjectRetain();
        goto LABEL_69;
      case 5u:
        uint64_t v38 = sub_10000F214(&qword_10051A320);
        uint64_t v39 = *(void *)(v38 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(a2, 1, v38))
        {
          uint64_t v40 = type metadata accessor for DataDetectorState(0);
          memcpy(a1, a2, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          uint64_t v60 = type metadata accessor for UUID();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v60 - 8) + 16))(a1, a2, v60);
          uint64_t v61 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v61[5]) = *(_DWORD *)((char *)a2 + v61[5]);
          uint64_t v62 = v61[6];
          uint64_t v63 = (_OWORD *)((char *)a1 + v62);
          uint64_t v64 = (_OWORD *)((char *)a2 + v62);
          long long v66 = v64[2];
          long long v65 = v64[3];
          long long v67 = v64[1];
          *uint64_t v63 = *v64;
          v63[1] = v67;
          v63[2] = v66;
          v63[3] = v65;
          uint64_t v68 = v61[7];
          long long v69 = (void *)((char *)a1 + v68);
          long long v70 = (void *)((char *)a2 + v68);
          *long long v69 = *v70;
          v69[1] = v70[1];
          *(void *)((char *)a1 + v61[8]) = *(void *)((char *)a2 + v61[8]);
          *(void *)((char *)a1 + v61[9]) = *(void *)((char *)a2 + v61[9]);
          *(void *)((char *)a1 + v61[10]) = *(void *)((char *)a2 + v61[10]);
          *(void *)((char *)a1 + v61[11]) = *(void *)((char *)a2 + v61[11]);
          *(void *)((char *)a1 + v61[12]) = *(void *)((char *)a2 + v61[12]);
          uint64_t v71 = v61[13];
          long long v72 = *(void **)((char *)a2 + v71);
          *(void *)((char *)a1 + v71) = v72;
          *((unsigned char *)a1 + v61[14]) = *((unsigned char *)a2 + v61[14]);
          uint64_t v73 = *(int *)(v38 + 48);
          uint64_t v74 = *(void **)((char *)a2 + v73);
          *(void *)((char *)a1 + v73) = v74;
          uint64_t v75 = *(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v76 = v72;
          id v77 = v74;
          v75(a1, 0, 1, v38);
        }
        goto LABEL_69;
      case 6u:
        if (a2[1])
        {
          *a1 = *a2;
          a1[1] = a2[1];
          *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
          a1[3] = a2[3];
          a1[4] = a2[4];
          a1[5] = a2[5];
          a1[6] = a2[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v78 = *(_OWORD *)a2;
          long long v79 = *((_OWORD *)a2 + 1);
          long long v80 = *((_OWORD *)a2 + 2);
          a1[6] = a2[6];
          *((_OWORD *)a1 + 1) = v79;
          *((_OWORD *)a1 + 2) = v80;
          *(_OWORD *)a1 = v78;
        }
        goto LABEL_69;
      case 7u:
        if (a2[1])
        {
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          a1[4] = a2[4];
          a1[5] = a2[5];
          uint64_t v41 = (void *)a2[6];
          a1[6] = v41;
          a1[7] = a2[7];
          a1[8] = a2[8];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v42 = v41;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          long long v81 = *((_OWORD *)a2 + 1);
          long long v82 = *((_OWORD *)a2 + 2);
          long long v83 = *((_OWORD *)a2 + 3);
          a1[8] = a2[8];
          *((_OWORD *)a1 + 2) = v82;
          *((_OWORD *)a1 + 3) = v83;
          *((_OWORD *)a1 + 1) = v81;
        }
        goto LABEL_69;
      case 8u:
        uint64_t v43 = sub_10000F214(&qword_10051A428);
        uint64_t v44 = *(void *)(v43 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(a2, 1, v43))
        {
          uint64_t v45 = type metadata accessor for EventLookupState(0);
          memcpy(a1, a2, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          *a1 = *a2;
          a1[1] = a2[1];
          long long v84 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v85 = v84[5];
          long long v86 = (char *)a1 + v85;
          long long v87 = (char *)a2 + v85;
          uint64_t v88 = type metadata accessor for Date();
          uint64_t v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
          swift_bridgeObjectRetain();
          v89(v86, v87, v88);
          v89((char *)a1 + v84[6], (char *)a2 + v84[6], v88);
          uint64_t v90 = v84[7];
          uint64_t v91 = (void *)((char *)a1 + v90);
          uint64_t v92 = (void *)((char *)a2 + v90);
          *uint64_t v91 = *v92;
          v91[1] = v92[1];
          uint64_t v93 = v84[8];
          uint64_t v94 = (void *)((char *)a1 + v93);
          id v95 = (void *)((char *)a2 + v93);
          *uint64_t v94 = *v95;
          v94[1] = v95[1];
          *((unsigned char *)a1 + v84[9]) = *((unsigned char *)a2 + v84[9]);
          uint64_t v96 = *(int *)(v43 + 48);
          long long v97 = (void *)((char *)a1 + v96);
          long long v98 = (void *)((char *)a2 + v96);
          void *v97 = *v98;
          v97[1] = v98[1];
          uint64_t v99 = *(int *)(v43 + 64);
          uint64_t v100 = (void *)((char *)a1 + v99);
          long long v101 = (void *)((char *)a2 + v99);
          *uint64_t v100 = *v101;
          v100[1] = v101[1];
          uint64_t v102 = *(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v102(a1, 0, 1, v43);
        }
        goto LABEL_69;
      case 9u:
        if (*a2)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          a1[4] = a2[4];
          a1[5] = a2[5];
          a1[6] = a2[6];
          a1[7] = a2[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v57 = *(_OWORD *)a2;
          long long v58 = *((_OWORD *)a2 + 1);
          long long v59 = *((_OWORD *)a2 + 3);
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          *((_OWORD *)a1 + 3) = v59;
          *(_OWORD *)a1 = v57;
          *((_OWORD *)a1 + 1) = v58;
        }
LABEL_69:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ResultLookupState()
{
  uint64_t result = qword_100529128;
  if (!qword_100529128) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *sub_100315C54(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      type metadata accessor for GeoLocateState(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      type metadata accessor for CVDetection();
      int v7 = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        switch(v7)
        {
          case 1:
            uint64_t v82 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v82 - 8) + 32))(a1, a2, v82);
            long long v83 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v83[5]) = *(_DWORD *)((char *)a2 + v83[5]);
            uint64_t v84 = v83[6];
            uint64_t v85 = (_OWORD *)((char *)a1 + v84);
            long long v86 = (_OWORD *)((char *)a2 + v84);
            long long v87 = v86[3];
            v85[2] = v86[2];
            v85[3] = v87;
            long long v88 = v86[1];
            *uint64_t v85 = *v86;
            v85[1] = v88;
            *(void *)((char *)a1 + v83[7]) = *(void *)((char *)a2 + v83[7]);
            *(void *)((char *)a1 + v83[8]) = *(void *)((char *)a2 + v83[8]);
            *(void *)((char *)a1 + v83[9]) = *(void *)((char *)a2 + v83[9]);
            *((unsigned char *)a1 + v83[10]) = *((unsigned char *)a2 + v83[10]);
            *(_OWORD *)((char *)a1 + v83[11]) = *(_OWORD *)((char *)a2 + v83[11]);
            *(_OWORD *)((char *)a1 + v83[12]) = *(_OWORD *)((char *)a2 + v83[12]);
            uint64_t v89 = v83[13];
            uint64_t v90 = (char *)a1 + v89;
            uint64_t v91 = (char *)a2 + v89;
            uint64_t v92 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v93 = *(void *)(v92 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
            {
              uint64_t v94 = sub_10000F214(&qword_100524BD0);
              memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v90, v91, v92);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
            }
            *(_OWORD *)((char *)a1 + v83[14]) = *(_OWORD *)((char *)a2 + v83[14]);
            uint64_t v154 = v83[15];
            uint64_t v155 = (char *)a1 + v154;
            uint64_t v156 = (char *)a2 + v154;
            *((void *)v155 + 2) = *((void *)v156 + 2);
            *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
            break;
          case 2:
            uint64_t v95 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v95 - 8) + 32))(a1, a2, v95);
            uint64_t v96 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v96[5]) = *(_DWORD *)((char *)a2 + v96[5]);
            uint64_t v97 = v96[6];
            long long v98 = (_OWORD *)((char *)a1 + v97);
            uint64_t v99 = (_OWORD *)((char *)a2 + v97);
            long long v100 = v99[3];
            v98[2] = v99[2];
            v98[3] = v100;
            long long v101 = v99[1];
            _OWORD *v98 = *v99;
            v98[1] = v101;
            *(_OWORD *)((char *)a1 + v96[7]) = *(_OWORD *)((char *)a2 + v96[7]);
            *(void *)((char *)a1 + v96[8]) = *(void *)((char *)a2 + v96[8]);
            *(void *)((char *)a1 + v96[9]) = *(void *)((char *)a2 + v96[9]);
            *(void *)((char *)a1 + v96[10]) = *(void *)((char *)a2 + v96[10]);
            *(void *)((char *)a1 + v96[11]) = *(void *)((char *)a2 + v96[11]);
            *(void *)((char *)a1 + v96[12]) = *(void *)((char *)a2 + v96[12]);
            *(void *)((char *)a1 + v96[13]) = *(void *)((char *)a2 + v96[13]);
            *((unsigned char *)a1 + v96[14]) = *((unsigned char *)a2 + v96[14]);
            break;
          case 3:
          case 4:
            uint64_t v102 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v102 - 8) + 32))(a1, a2, v102);
            uint64_t v103 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v103[5]) = *(_DWORD *)((char *)a2 + v103[5]);
            uint64_t v104 = v103[6];
            uint64_t v105 = (_OWORD *)((char *)a1 + v104);
            __n128 v106 = (_OWORD *)((char *)a2 + v104);
            long long v107 = v106[3];
            v105[2] = v106[2];
            v105[3] = v107;
            long long v108 = v106[1];
            *uint64_t v105 = *v106;
            v105[1] = v108;
            *(_OWORD *)((char *)a1 + v103[7]) = *(_OWORD *)((char *)a2 + v103[7]);
            *(void *)((char *)a1 + v103[8]) = *(void *)((char *)a2 + v103[8]);
            *(void *)((char *)a1 + v103[9]) = *(void *)((char *)a2 + v103[9]);
            *(void *)((char *)a1 + v103[10]) = *(void *)((char *)a2 + v103[10]);
            break;
          case 5:
            uint64_t v109 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v109 - 8) + 32))(a1, a2, v109);
            long long v110 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v110[5]) = *(_DWORD *)((char *)a2 + v110[5]);
            uint64_t v111 = v110[6];
            uint64_t v112 = (_OWORD *)((char *)a1 + v111);
            uint64_t v113 = (_OWORD *)((char *)a2 + v111);
            long long v114 = v113[3];
            v112[2] = v113[2];
            v112[3] = v114;
            long long v115 = v113[1];
            *uint64_t v112 = *v113;
            v112[1] = v115;
            *(_OWORD *)((char *)a1 + v110[7]) = *(_OWORD *)((char *)a2 + v110[7]);
            *(void *)((char *)a1 + v110[8]) = *(void *)((char *)a2 + v110[8]);
            *(void *)((char *)a1 + v110[9]) = *(void *)((char *)a2 + v110[9]);
            break;
          default:
            uint64_t v8 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
            uint64_t v9 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v9[5]) = *(_DWORD *)((char *)a2 + v9[5]);
            uint64_t v10 = v9[6];
            uint64_t v11 = (_OWORD *)((char *)a1 + v10);
            uint64_t v12 = (_OWORD *)((char *)a2 + v10);
            long long v13 = v12[3];
            long long v11[2] = v12[2];
            v11[3] = v13;
            long long v14 = v12[1];
            *uint64_t v11 = *v12;
            v11[1] = v14;
            *(_OWORD *)((char *)a1 + v9[7]) = *(_OWORD *)((char *)a2 + v9[7]);
            *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
            *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v157 = sub_10000F214(&qword_100520120);
        uint64_t v158 = *(int *)(v157 + 48);
        uint64_t v159 = (_OWORD *)((char *)a1 + v158);
        uint64_t v160 = (_OWORD *)((char *)a2 + v158);
        _OWORD *v159 = *v160;
        *(_OWORD *)((char *)v159 + 9) = *(_OWORD *)((char *)v160 + 9);
        uint64_t v161 = *(int *)(v157 + 64);
        unint64_t v162 = (_OWORD *)((char *)a1 + v161);
        long long v163 = (_OWORD *)((char *)a2 + v161);
        *unint64_t v162 = *v163;
        *(_OWORD *)((char *)v162 + 9) = *(_OWORD *)((char *)v163 + 9);
      }
      else
      {
        switch(v7)
        {
          case 1:
            uint64_t v116 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v116 - 8) + 32))(a1, a2, v116);
            uint64_t v117 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v117[5]) = *(_DWORD *)((char *)a2 + v117[5]);
            uint64_t v118 = v117[6];
            uint64_t v119 = (_OWORD *)((char *)a1 + v118);
            uint64_t v120 = (_OWORD *)((char *)a2 + v118);
            long long v121 = v120[3];
            v119[2] = v120[2];
            v119[3] = v121;
            long long v122 = v120[1];
            *uint64_t v119 = *v120;
            v119[1] = v122;
            *(void *)((char *)a1 + v117[7]) = *(void *)((char *)a2 + v117[7]);
            *(void *)((char *)a1 + v117[8]) = *(void *)((char *)a2 + v117[8]);
            *(void *)((char *)a1 + v117[9]) = *(void *)((char *)a2 + v117[9]);
            *((unsigned char *)a1 + v117[10]) = *((unsigned char *)a2 + v117[10]);
            *(_OWORD *)((char *)a1 + v117[11]) = *(_OWORD *)((char *)a2 + v117[11]);
            *(_OWORD *)((char *)a1 + v117[12]) = *(_OWORD *)((char *)a2 + v117[12]);
            uint64_t v123 = v117[13];
            uint64_t v124 = (char *)a1 + v123;
            uint64_t v125 = (char *)a2 + v123;
            uint64_t v126 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v127 = *(void *)(v126 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
            {
              uint64_t v128 = sub_10000F214(&qword_100524BD0);
              memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v124, v125, v126);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
            }
            *(_OWORD *)((char *)a1 + v117[14]) = *(_OWORD *)((char *)a2 + v117[14]);
            uint64_t v164 = v117[15];
            long long v165 = (char *)a1 + v164;
            uint64_t v166 = (char *)a2 + v164;
            *((void *)v165 + 2) = *((void *)v166 + 2);
            *(_OWORD *)long long v165 = *(_OWORD *)v166;
            break;
          case 2:
            uint64_t v129 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v129 - 8) + 32))(a1, a2, v129);
            uint64_t v130 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v130[5]) = *(_DWORD *)((char *)a2 + v130[5]);
            uint64_t v131 = v130[6];
            long long v132 = (_OWORD *)((char *)a1 + v131);
            uint64_t v133 = (_OWORD *)((char *)a2 + v131);
            long long v134 = v133[3];
            v132[2] = v133[2];
            v132[3] = v134;
            long long v135 = v133[1];
            *long long v132 = *v133;
            v132[1] = v135;
            *(_OWORD *)((char *)a1 + v130[7]) = *(_OWORD *)((char *)a2 + v130[7]);
            *(void *)((char *)a1 + v130[8]) = *(void *)((char *)a2 + v130[8]);
            *(void *)((char *)a1 + v130[9]) = *(void *)((char *)a2 + v130[9]);
            *(void *)((char *)a1 + v130[10]) = *(void *)((char *)a2 + v130[10]);
            *(void *)((char *)a1 + v130[11]) = *(void *)((char *)a2 + v130[11]);
            *(void *)((char *)a1 + v130[12]) = *(void *)((char *)a2 + v130[12]);
            *(void *)((char *)a1 + v130[13]) = *(void *)((char *)a2 + v130[13]);
            *((unsigned char *)a1 + v130[14]) = *((unsigned char *)a2 + v130[14]);
            break;
          case 3:
          case 4:
            uint64_t v136 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v136 - 8) + 32))(a1, a2, v136);
            uint64_t v137 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v137[5]) = *(_DWORD *)((char *)a2 + v137[5]);
            uint64_t v138 = v137[6];
            uint64_t v139 = (_OWORD *)((char *)a1 + v138);
            uint64_t v140 = (_OWORD *)((char *)a2 + v138);
            long long v141 = v140[3];
            v139[2] = v140[2];
            v139[3] = v141;
            long long v142 = v140[1];
            *uint64_t v139 = *v140;
            v139[1] = v142;
            *(_OWORD *)((char *)a1 + v137[7]) = *(_OWORD *)((char *)a2 + v137[7]);
            *(void *)((char *)a1 + v137[8]) = *(void *)((char *)a2 + v137[8]);
            *(void *)((char *)a1 + v137[9]) = *(void *)((char *)a2 + v137[9]);
            *(void *)((char *)a1 + v137[10]) = *(void *)((char *)a2 + v137[10]);
            break;
          case 5:
            uint64_t v143 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v143 - 8) + 32))(a1, a2, v143);
            uint64_t v144 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v144[5]) = *(_DWORD *)((char *)a2 + v144[5]);
            uint64_t v145 = v144[6];
            uint64_t v146 = (_OWORD *)((char *)a1 + v145);
            uint64_t v147 = (_OWORD *)((char *)a2 + v145);
            long long v148 = v147[3];
            v146[2] = v147[2];
            v146[3] = v148;
            long long v149 = v147[1];
            *uint64_t v146 = *v147;
            v146[1] = v149;
            *(_OWORD *)((char *)a1 + v144[7]) = *(_OWORD *)((char *)a2 + v144[7]);
            *(void *)((char *)a1 + v144[8]) = *(void *)((char *)a2 + v144[8]);
            *(void *)((char *)a1 + v144[9]) = *(void *)((char *)a2 + v144[9]);
            break;
          default:
            uint64_t v28 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v28 - 8) + 32))(a1, a2, v28);
            uint64_t v29 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v29[5]) = *(_DWORD *)((char *)a2 + v29[5]);
            uint64_t v30 = v29[6];
            uint64_t v31 = (_OWORD *)((char *)a1 + v30);
            uint64_t v32 = (_OWORD *)((char *)a2 + v30);
            long long v33 = v32[3];
            v31[2] = v32[2];
            v31[3] = v33;
            long long v34 = v32[1];
            _OWORD *v31 = *v32;
            v31[1] = v34;
            *(_OWORD *)((char *)a1 + v29[7]) = *(_OWORD *)((char *)a2 + v29[7]);
            *(void *)((char *)a1 + v29[8]) = *(void *)((char *)a2 + v29[8]);
            *(void *)((char *)a1 + v29[9]) = *(void *)((char *)a2 + v29[9]);
            break;
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_41;
    case 4u:
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v48 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v48 - 8) + 32))(a1, a2, v48);
          uint64_t v49 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v49[5]) = *(_DWORD *)((char *)a2 + v49[5]);
          uint64_t v50 = v49[6];
          long long v51 = (_OWORD *)((char *)a1 + v50);
          long long v52 = (_OWORD *)((char *)a2 + v50);
          long long v53 = v52[3];
          v51[2] = v52[2];
          v51[3] = v53;
          long long v54 = v52[1];
          _OWORD *v51 = *v52;
          v51[1] = v54;
          *(void *)((char *)a1 + v49[7]) = *(void *)((char *)a2 + v49[7]);
          *(void *)((char *)a1 + v49[8]) = *(void *)((char *)a2 + v49[8]);
          *(void *)((char *)a1 + v49[9]) = *(void *)((char *)a2 + v49[9]);
          *((unsigned char *)a1 + v49[10]) = *((unsigned char *)a2 + v49[10]);
          *(_OWORD *)((char *)a1 + v49[11]) = *(_OWORD *)((char *)a2 + v49[11]);
          *(_OWORD *)((char *)a1 + v49[12]) = *(_OWORD *)((char *)a2 + v49[12]);
          uint64_t v55 = v49[13];
          uint64_t v56 = (char *)a1 + v55;
          long long v57 = (char *)a2 + v55;
          uint64_t v58 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v59 = *(void *)(v58 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
          {
            uint64_t v60 = sub_10000F214(&qword_100524BD0);
            memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
          }
          *(_OWORD *)((char *)a1 + v49[14]) = *(_OWORD *)((char *)a2 + v49[14]);
          uint64_t v150 = v49[15];
          uint64_t v151 = (char *)a1 + v150;
          long long v152 = (char *)a2 + v150;
          *((void *)v151 + 2) = *((void *)v152 + 2);
          *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
          break;
        case 2u:
          uint64_t v61 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v61 - 8) + 32))(a1, a2, v61);
          uint64_t v62 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v62[5]) = *(_DWORD *)((char *)a2 + v62[5]);
          uint64_t v63 = v62[6];
          uint64_t v64 = (_OWORD *)((char *)a1 + v63);
          long long v65 = (_OWORD *)((char *)a2 + v63);
          long long v66 = v65[3];
          v64[2] = v65[2];
          uint64_t v64[3] = v66;
          long long v67 = v65[1];
          _OWORD *v64 = *v65;
          v64[1] = v67;
          *(_OWORD *)((char *)a1 + v62[7]) = *(_OWORD *)((char *)a2 + v62[7]);
          *(void *)((char *)a1 + v62[8]) = *(void *)((char *)a2 + v62[8]);
          *(void *)((char *)a1 + v62[9]) = *(void *)((char *)a2 + v62[9]);
          *(void *)((char *)a1 + v62[10]) = *(void *)((char *)a2 + v62[10]);
          *(void *)((char *)a1 + v62[11]) = *(void *)((char *)a2 + v62[11]);
          *(void *)((char *)a1 + v62[12]) = *(void *)((char *)a2 + v62[12]);
          *(void *)((char *)a1 + v62[13]) = *(void *)((char *)a2 + v62[13]);
          *((unsigned char *)a1 + v62[14]) = *((unsigned char *)a2 + v62[14]);
          break;
        case 3u:
        case 4u:
          uint64_t v68 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v68 - 8) + 32))(a1, a2, v68);
          long long v69 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
          uint64_t v70 = v69[6];
          uint64_t v71 = (_OWORD *)((char *)a1 + v70);
          long long v72 = (_OWORD *)((char *)a2 + v70);
          long long v73 = v72[3];
          v71[2] = v72[2];
          v71[3] = v73;
          long long v74 = v72[1];
          *uint64_t v71 = *v72;
          v71[1] = v74;
          *(_OWORD *)((char *)a1 + v69[7]) = *(_OWORD *)((char *)a2 + v69[7]);
          *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
          *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
          *(void *)((char *)a1 + v69[10]) = *(void *)((char *)a2 + v69[10]);
          break;
        case 5u:
          uint64_t v75 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v75 - 8) + 32))(a1, a2, v75);
          id v76 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v76[5]) = *(_DWORD *)((char *)a2 + v76[5]);
          uint64_t v77 = v76[6];
          long long v78 = (_OWORD *)((char *)a1 + v77);
          long long v79 = (_OWORD *)((char *)a2 + v77);
          long long v80 = v79[3];
          v78[2] = v79[2];
          v78[3] = v80;
          long long v81 = v79[1];
          *long long v78 = *v79;
          v78[1] = v81;
          *(_OWORD *)((char *)a1 + v76[7]) = *(_OWORD *)((char *)a2 + v76[7]);
          *(void *)((char *)a1 + v76[8]) = *(void *)((char *)a2 + v76[8]);
          *(void *)((char *)a1 + v76[9]) = *(void *)((char *)a2 + v76[9]);
          break;
        default:
          uint64_t v15 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
          uint64_t v16 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v16[5]) = *(_DWORD *)((char *)a2 + v16[5]);
          uint64_t v17 = v16[6];
          uint64_t v18 = (_OWORD *)((char *)a1 + v17);
          uint64_t v19 = (_OWORD *)((char *)a2 + v17);
          long long v20 = v19[3];
          v18[2] = v19[2];
          v18[3] = v20;
          long long v21 = v19[1];
          _OWORD *v18 = *v19;
          v18[1] = v21;
          *(_OWORD *)((char *)a1 + v16[7]) = *(_OWORD *)((char *)a2 + v16[7]);
          *(void *)((char *)a1 + v16[8]) = *(void *)((char *)a2 + v16[8]);
          *(void *)((char *)a1 + v16[9]) = *(void *)((char *)a2 + v16[9]);
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v153 = sub_10000F214(&qword_10051A328);
      *(void *)((char *)a1 + *(int *)(v153 + 48)) = *(void *)((char *)a2 + *(int *)(v153 + 48));
      *(_OWORD *)((char *)a1 + *(int *)(v153 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v153 + 64));
      goto LABEL_41;
    case 5u:
      uint64_t v22 = sub_10000F214(&qword_10051A320);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
      {
        uint64_t v24 = type metadata accessor for DataDetectorState(0);
        memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for UUID();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v35 - 8) + 32))(a1, a2, v35);
        uint64_t v36 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v36[5]) = *(_DWORD *)((char *)a2 + v36[5]);
        uint64_t v37 = v36[6];
        uint64_t v38 = (_OWORD *)((char *)a1 + v37);
        uint64_t v39 = (_OWORD *)((char *)a2 + v37);
        long long v40 = v39[3];
        v38[2] = v39[2];
        v38[3] = v40;
        long long v41 = v39[1];
        _OWORD *v38 = *v39;
        v38[1] = v41;
        *(_OWORD *)((char *)a1 + v36[7]) = *(_OWORD *)((char *)a2 + v36[7]);
        *(void *)((char *)a1 + v36[8]) = *(void *)((char *)a2 + v36[8]);
        *(void *)((char *)a1 + v36[9]) = *(void *)((char *)a2 + v36[9]);
        *(void *)((char *)a1 + v36[10]) = *(void *)((char *)a2 + v36[10]);
        *(void *)((char *)a1 + v36[11]) = *(void *)((char *)a2 + v36[11]);
        *(void *)((char *)a1 + v36[12]) = *(void *)((char *)a2 + v36[12]);
        *(void *)((char *)a1 + v36[13]) = *(void *)((char *)a2 + v36[13]);
        *((unsigned char *)a1 + v36[14]) = *((unsigned char *)a2 + v36[14]);
        *(void *)((char *)a1 + *(int *)(v22 + 48)) = *(void *)((char *)a2 + *(int *)(v22 + 48));
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
      }
      goto LABEL_41;
    case 8u:
      uint64_t v25 = sub_10000F214(&qword_10051A428);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(a2, 1, v25))
      {
        uint64_t v27 = type metadata accessor for EventLookupState(0);
        memcpy(a1, a2, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        id v42 = (int *)type metadata accessor for EventLookupItem(0);
        uint64_t v43 = v42[5];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = type metadata accessor for Date();
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32);
        v47(v44, v45, v46);
        v47((char *)a1 + v42[6], (char *)a2 + v42[6], v46);
        *(_OWORD *)((char *)a1 + v42[7]) = *(_OWORD *)((char *)a2 + v42[7]);
        *(_OWORD *)((char *)a1 + v42[8]) = *(_OWORD *)((char *)a2 + v42[8]);
        *((unsigned char *)a1 + v42[9]) = *((unsigned char *)a2 + v42[9]);
        *(_OWORD *)((char *)a1 + *(int *)(v25 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v25 + 48));
        *(_OWORD *)((char *)a1 + *(int *)(v25 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v25 + 64));
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
      }
LABEL_41:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_OWORD *sub_1003171B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100319DD8((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        type metadata accessor for GeoLocateState(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        type metadata accessor for CVDetection();
        int v7 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          switch(v7)
          {
            case 1:
              uint64_t v82 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v82 - 8) + 32))(a1, a2, v82);
              long long v83 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)a1 + v83[5]) = *(_DWORD *)((char *)a2 + v83[5]);
              uint64_t v84 = v83[6];
              uint64_t v85 = (_OWORD *)((char *)a1 + v84);
              long long v86 = (_OWORD *)((char *)a2 + v84);
              long long v87 = v86[3];
              v85[2] = v86[2];
              v85[3] = v87;
              long long v88 = v86[1];
              *uint64_t v85 = *v86;
              v85[1] = v88;
              *(void *)((char *)a1 + v83[7]) = *(void *)((char *)a2 + v83[7]);
              *(void *)((char *)a1 + v83[8]) = *(void *)((char *)a2 + v83[8]);
              *(void *)((char *)a1 + v83[9]) = *(void *)((char *)a2 + v83[9]);
              *((unsigned char *)a1 + v83[10]) = *((unsigned char *)a2 + v83[10]);
              *(_OWORD *)((char *)a1 + v83[11]) = *(_OWORD *)((char *)a2 + v83[11]);
              *(_OWORD *)((char *)a1 + v83[12]) = *(_OWORD *)((char *)a2 + v83[12]);
              uint64_t v89 = v83[13];
              uint64_t v90 = (char *)a1 + v89;
              uint64_t v91 = (char *)a2 + v89;
              uint64_t v92 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v93 = *(void *)(v92 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
              {
                uint64_t v94 = sub_10000F214(&qword_100524BD0);
                memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v90, v91, v92);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
              }
              *(_OWORD *)((char *)a1 + v83[14]) = *(_OWORD *)((char *)a2 + v83[14]);
              uint64_t v154 = v83[15];
              uint64_t v155 = (char *)a1 + v154;
              uint64_t v156 = (char *)a2 + v154;
              *((void *)v155 + 2) = *((void *)v156 + 2);
              *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
              break;
            case 2:
              uint64_t v95 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v95 - 8) + 32))(a1, a2, v95);
              uint64_t v96 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v96[5]) = *(_DWORD *)((char *)a2 + v96[5]);
              uint64_t v97 = v96[6];
              long long v98 = (_OWORD *)((char *)a1 + v97);
              uint64_t v99 = (_OWORD *)((char *)a2 + v97);
              long long v100 = v99[3];
              v98[2] = v99[2];
              v98[3] = v100;
              long long v101 = v99[1];
              _OWORD *v98 = *v99;
              v98[1] = v101;
              *(_OWORD *)((char *)a1 + v96[7]) = *(_OWORD *)((char *)a2 + v96[7]);
              *(void *)((char *)a1 + v96[8]) = *(void *)((char *)a2 + v96[8]);
              *(void *)((char *)a1 + v96[9]) = *(void *)((char *)a2 + v96[9]);
              *(void *)((char *)a1 + v96[10]) = *(void *)((char *)a2 + v96[10]);
              *(void *)((char *)a1 + v96[11]) = *(void *)((char *)a2 + v96[11]);
              *(void *)((char *)a1 + v96[12]) = *(void *)((char *)a2 + v96[12]);
              *(void *)((char *)a1 + v96[13]) = *(void *)((char *)a2 + v96[13]);
              *((unsigned char *)a1 + v96[14]) = *((unsigned char *)a2 + v96[14]);
              break;
            case 3:
            case 4:
              uint64_t v102 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v102 - 8) + 32))(a1, a2, v102);
              uint64_t v103 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)a1 + v103[5]) = *(_DWORD *)((char *)a2 + v103[5]);
              uint64_t v104 = v103[6];
              uint64_t v105 = (_OWORD *)((char *)a1 + v104);
              __n128 v106 = (_OWORD *)((char *)a2 + v104);
              long long v107 = v106[3];
              v105[2] = v106[2];
              v105[3] = v107;
              long long v108 = v106[1];
              *uint64_t v105 = *v106;
              v105[1] = v108;
              *(_OWORD *)((char *)a1 + v103[7]) = *(_OWORD *)((char *)a2 + v103[7]);
              *(void *)((char *)a1 + v103[8]) = *(void *)((char *)a2 + v103[8]);
              *(void *)((char *)a1 + v103[9]) = *(void *)((char *)a2 + v103[9]);
              *(void *)((char *)a1 + v103[10]) = *(void *)((char *)a2 + v103[10]);
              break;
            case 5:
              uint64_t v109 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v109 - 8) + 32))(a1, a2, v109);
              long long v110 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v110[5]) = *(_DWORD *)((char *)a2 + v110[5]);
              uint64_t v111 = v110[6];
              uint64_t v112 = (_OWORD *)((char *)a1 + v111);
              uint64_t v113 = (_OWORD *)((char *)a2 + v111);
              long long v114 = v113[3];
              v112[2] = v113[2];
              v112[3] = v114;
              long long v115 = v113[1];
              *uint64_t v112 = *v113;
              v112[1] = v115;
              *(_OWORD *)((char *)a1 + v110[7]) = *(_OWORD *)((char *)a2 + v110[7]);
              *(void *)((char *)a1 + v110[8]) = *(void *)((char *)a2 + v110[8]);
              *(void *)((char *)a1 + v110[9]) = *(void *)((char *)a2 + v110[9]);
              break;
            default:
              uint64_t v8 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
              uint64_t v9 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)((char *)a1 + v9[5]) = *(_DWORD *)((char *)a2 + v9[5]);
              uint64_t v10 = v9[6];
              uint64_t v11 = (_OWORD *)((char *)a1 + v10);
              uint64_t v12 = (_OWORD *)((char *)a2 + v10);
              long long v13 = v12[3];
              long long v11[2] = v12[2];
              v11[3] = v13;
              long long v14 = v12[1];
              *uint64_t v11 = *v12;
              v11[1] = v14;
              *(_OWORD *)((char *)a1 + v9[7]) = *(_OWORD *)((char *)a2 + v9[7]);
              *(void *)((char *)a1 + v9[8]) = *(void *)((char *)a2 + v9[8]);
              *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
              break;
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v157 = sub_10000F214(&qword_100520120);
          uint64_t v158 = *(int *)(v157 + 48);
          uint64_t v159 = (_OWORD *)((char *)a1 + v158);
          uint64_t v160 = (_OWORD *)((char *)a2 + v158);
          _OWORD *v159 = *v160;
          *(_OWORD *)((char *)v159 + 9) = *(_OWORD *)((char *)v160 + 9);
          uint64_t v161 = *(int *)(v157 + 64);
          unint64_t v162 = (_OWORD *)((char *)a1 + v161);
          long long v163 = (_OWORD *)((char *)a2 + v161);
          *unint64_t v162 = *v163;
          *(_OWORD *)((char *)v162 + 9) = *(_OWORD *)((char *)v163 + 9);
        }
        else
        {
          switch(v7)
          {
            case 1:
              uint64_t v116 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v116 - 8) + 32))(a1, a2, v116);
              uint64_t v117 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)((char *)a1 + v117[5]) = *(_DWORD *)((char *)a2 + v117[5]);
              uint64_t v118 = v117[6];
              uint64_t v119 = (_OWORD *)((char *)a1 + v118);
              uint64_t v120 = (_OWORD *)((char *)a2 + v118);
              long long v121 = v120[3];
              v119[2] = v120[2];
              v119[3] = v121;
              long long v122 = v120[1];
              *uint64_t v119 = *v120;
              v119[1] = v122;
              *(void *)((char *)a1 + v117[7]) = *(void *)((char *)a2 + v117[7]);
              *(void *)((char *)a1 + v117[8]) = *(void *)((char *)a2 + v117[8]);
              *(void *)((char *)a1 + v117[9]) = *(void *)((char *)a2 + v117[9]);
              *((unsigned char *)a1 + v117[10]) = *((unsigned char *)a2 + v117[10]);
              *(_OWORD *)((char *)a1 + v117[11]) = *(_OWORD *)((char *)a2 + v117[11]);
              *(_OWORD *)((char *)a1 + v117[12]) = *(_OWORD *)((char *)a2 + v117[12]);
              uint64_t v123 = v117[13];
              uint64_t v124 = (char *)a1 + v123;
              uint64_t v125 = (char *)a2 + v123;
              uint64_t v126 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v127 = *(void *)(v126 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
              {
                uint64_t v128 = sub_10000F214(&qword_100524BD0);
                memcpy(v124, v125, *(void *)(*(void *)(v128 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v124, v125, v126);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
              }
              *(_OWORD *)((char *)a1 + v117[14]) = *(_OWORD *)((char *)a2 + v117[14]);
              uint64_t v164 = v117[15];
              long long v165 = (char *)a1 + v164;
              uint64_t v166 = (char *)a2 + v164;
              *((void *)v165 + 2) = *((void *)v166 + 2);
              *(_OWORD *)long long v165 = *(_OWORD *)v166;
              break;
            case 2:
              uint64_t v129 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v129 - 8) + 32))(a1, a2, v129);
              uint64_t v130 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v130[5]) = *(_DWORD *)((char *)a2 + v130[5]);
              uint64_t v131 = v130[6];
              long long v132 = (_OWORD *)((char *)a1 + v131);
              uint64_t v133 = (_OWORD *)((char *)a2 + v131);
              long long v134 = v133[3];
              v132[2] = v133[2];
              v132[3] = v134;
              long long v135 = v133[1];
              *long long v132 = *v133;
              v132[1] = v135;
              *(_OWORD *)((char *)a1 + v130[7]) = *(_OWORD *)((char *)a2 + v130[7]);
              *(void *)((char *)a1 + v130[8]) = *(void *)((char *)a2 + v130[8]);
              *(void *)((char *)a1 + v130[9]) = *(void *)((char *)a2 + v130[9]);
              *(void *)((char *)a1 + v130[10]) = *(void *)((char *)a2 + v130[10]);
              *(void *)((char *)a1 + v130[11]) = *(void *)((char *)a2 + v130[11]);
              *(void *)((char *)a1 + v130[12]) = *(void *)((char *)a2 + v130[12]);
              *(void *)((char *)a1 + v130[13]) = *(void *)((char *)a2 + v130[13]);
              *((unsigned char *)a1 + v130[14]) = *((unsigned char *)a2 + v130[14]);
              break;
            case 3:
            case 4:
              uint64_t v136 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v136 - 8) + 32))(a1, a2, v136);
              uint64_t v137 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)((char *)a1 + v137[5]) = *(_DWORD *)((char *)a2 + v137[5]);
              uint64_t v138 = v137[6];
              uint64_t v139 = (_OWORD *)((char *)a1 + v138);
              uint64_t v140 = (_OWORD *)((char *)a2 + v138);
              long long v141 = v140[3];
              v139[2] = v140[2];
              v139[3] = v141;
              long long v142 = v140[1];
              *uint64_t v139 = *v140;
              v139[1] = v142;
              *(_OWORD *)((char *)a1 + v137[7]) = *(_OWORD *)((char *)a2 + v137[7]);
              *(void *)((char *)a1 + v137[8]) = *(void *)((char *)a2 + v137[8]);
              *(void *)((char *)a1 + v137[9]) = *(void *)((char *)a2 + v137[9]);
              *(void *)((char *)a1 + v137[10]) = *(void *)((char *)a2 + v137[10]);
              break;
            case 5:
              uint64_t v143 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v143 - 8) + 32))(a1, a2, v143);
              uint64_t v144 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)((char *)a1 + v144[5]) = *(_DWORD *)((char *)a2 + v144[5]);
              uint64_t v145 = v144[6];
              uint64_t v146 = (_OWORD *)((char *)a1 + v145);
              uint64_t v147 = (_OWORD *)((char *)a2 + v145);
              long long v148 = v147[3];
              v146[2] = v147[2];
              v146[3] = v148;
              long long v149 = v147[1];
              *uint64_t v146 = *v147;
              v146[1] = v149;
              *(_OWORD *)((char *)a1 + v144[7]) = *(_OWORD *)((char *)a2 + v144[7]);
              *(void *)((char *)a1 + v144[8]) = *(void *)((char *)a2 + v144[8]);
              *(void *)((char *)a1 + v144[9]) = *(void *)((char *)a2 + v144[9]);
              break;
            default:
              uint64_t v28 = type metadata accessor for UUID();
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v28 - 8) + 32))(a1, a2, v28);
              uint64_t v29 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)((char *)a1 + v29[5]) = *(_DWORD *)((char *)a2 + v29[5]);
              uint64_t v30 = v29[6];
              uint64_t v31 = (_OWORD *)((char *)a1 + v30);
              uint64_t v32 = (_OWORD *)((char *)a2 + v30);
              long long v33 = v32[3];
              v31[2] = v32[2];
              v31[3] = v33;
              long long v34 = v32[1];
              _OWORD *v31 = *v32;
              v31[1] = v34;
              *(_OWORD *)((char *)a1 + v29[7]) = *(_OWORD *)((char *)a2 + v29[7]);
              *(void *)((char *)a1 + v29[8]) = *(void *)((char *)a2 + v29[8]);
              *(void *)((char *)a1 + v29[9]) = *(void *)((char *)a2 + v29[9]);
              break;
          }
          swift_storeEnumTagMultiPayload();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_42;
      case 4u:
        type metadata accessor for CVDetection();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v48 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v48 - 8) + 32))(a1, a2, v48);
            uint64_t v49 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)((char *)a1 + v49[5]) = *(_DWORD *)((char *)a2 + v49[5]);
            uint64_t v50 = v49[6];
            long long v51 = (_OWORD *)((char *)a1 + v50);
            long long v52 = (_OWORD *)((char *)a2 + v50);
            long long v53 = v52[3];
            v51[2] = v52[2];
            v51[3] = v53;
            long long v54 = v52[1];
            _OWORD *v51 = *v52;
            v51[1] = v54;
            *(void *)((char *)a1 + v49[7]) = *(void *)((char *)a2 + v49[7]);
            *(void *)((char *)a1 + v49[8]) = *(void *)((char *)a2 + v49[8]);
            *(void *)((char *)a1 + v49[9]) = *(void *)((char *)a2 + v49[9]);
            *((unsigned char *)a1 + v49[10]) = *((unsigned char *)a2 + v49[10]);
            *(_OWORD *)((char *)a1 + v49[11]) = *(_OWORD *)((char *)a2 + v49[11]);
            *(_OWORD *)((char *)a1 + v49[12]) = *(_OWORD *)((char *)a2 + v49[12]);
            uint64_t v55 = v49[13];
            uint64_t v56 = (char *)a1 + v55;
            long long v57 = (char *)a2 + v55;
            uint64_t v58 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v59 = *(void *)(v58 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
            {
              uint64_t v60 = sub_10000F214(&qword_100524BD0);
              memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
            }
            *(_OWORD *)((char *)a1 + v49[14]) = *(_OWORD *)((char *)a2 + v49[14]);
            uint64_t v150 = v49[15];
            uint64_t v151 = (char *)a1 + v150;
            long long v152 = (char *)a2 + v150;
            *((void *)v151 + 2) = *((void *)v152 + 2);
            *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
            break;
          case 2u:
            uint64_t v61 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v61 - 8) + 32))(a1, a2, v61);
            uint64_t v62 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v62[5]) = *(_DWORD *)((char *)a2 + v62[5]);
            uint64_t v63 = v62[6];
            uint64_t v64 = (_OWORD *)((char *)a1 + v63);
            long long v65 = (_OWORD *)((char *)a2 + v63);
            long long v66 = v65[3];
            v64[2] = v65[2];
            uint64_t v64[3] = v66;
            long long v67 = v65[1];
            _OWORD *v64 = *v65;
            v64[1] = v67;
            *(_OWORD *)((char *)a1 + v62[7]) = *(_OWORD *)((char *)a2 + v62[7]);
            *(void *)((char *)a1 + v62[8]) = *(void *)((char *)a2 + v62[8]);
            *(void *)((char *)a1 + v62[9]) = *(void *)((char *)a2 + v62[9]);
            *(void *)((char *)a1 + v62[10]) = *(void *)((char *)a2 + v62[10]);
            *(void *)((char *)a1 + v62[11]) = *(void *)((char *)a2 + v62[11]);
            *(void *)((char *)a1 + v62[12]) = *(void *)((char *)a2 + v62[12]);
            *(void *)((char *)a1 + v62[13]) = *(void *)((char *)a2 + v62[13]);
            *((unsigned char *)a1 + v62[14]) = *((unsigned char *)a2 + v62[14]);
            break;
          case 3u:
          case 4u:
            uint64_t v68 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v68 - 8) + 32))(a1, a2, v68);
            long long v69 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
            uint64_t v70 = v69[6];
            uint64_t v71 = (_OWORD *)((char *)a1 + v70);
            long long v72 = (_OWORD *)((char *)a2 + v70);
            long long v73 = v72[3];
            v71[2] = v72[2];
            v71[3] = v73;
            long long v74 = v72[1];
            *uint64_t v71 = *v72;
            v71[1] = v74;
            *(_OWORD *)((char *)a1 + v69[7]) = *(_OWORD *)((char *)a2 + v69[7]);
            *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
            *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
            *(void *)((char *)a1 + v69[10]) = *(void *)((char *)a2 + v69[10]);
            break;
          case 5u:
            uint64_t v75 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v75 - 8) + 32))(a1, a2, v75);
            id v76 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)((char *)a1 + v76[5]) = *(_DWORD *)((char *)a2 + v76[5]);
            uint64_t v77 = v76[6];
            long long v78 = (_OWORD *)((char *)a1 + v77);
            long long v79 = (_OWORD *)((char *)a2 + v77);
            long long v80 = v79[3];
            v78[2] = v79[2];
            v78[3] = v80;
            long long v81 = v79[1];
            *long long v78 = *v79;
            v78[1] = v81;
            *(_OWORD *)((char *)a1 + v76[7]) = *(_OWORD *)((char *)a2 + v76[7]);
            *(void *)((char *)a1 + v76[8]) = *(void *)((char *)a2 + v76[8]);
            *(void *)((char *)a1 + v76[9]) = *(void *)((char *)a2 + v76[9]);
            break;
          default:
            uint64_t v15 = type metadata accessor for UUID();
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
            uint64_t v16 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)((char *)a1 + v16[5]) = *(_DWORD *)((char *)a2 + v16[5]);
            uint64_t v17 = v16[6];
            uint64_t v18 = (_OWORD *)((char *)a1 + v17);
            uint64_t v19 = (_OWORD *)((char *)a2 + v17);
            long long v20 = v19[3];
            v18[2] = v19[2];
            v18[3] = v20;
            long long v21 = v19[1];
            _OWORD *v18 = *v19;
            v18[1] = v21;
            *(_OWORD *)((char *)a1 + v16[7]) = *(_OWORD *)((char *)a2 + v16[7]);
            *(void *)((char *)a1 + v16[8]) = *(void *)((char *)a2 + v16[8]);
            *(void *)((char *)a1 + v16[9]) = *(void *)((char *)a2 + v16[9]);
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v153 = sub_10000F214(&qword_10051A328);
        *(void *)((char *)a1 + *(int *)(v153 + 48)) = *(void *)((char *)a2 + *(int *)(v153 + 48));
        *(_OWORD *)((char *)a1 + *(int *)(v153 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v153 + 64));
        goto LABEL_42;
      case 5u:
        uint64_t v22 = sub_10000F214(&qword_10051A320);
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
        {
          uint64_t v24 = type metadata accessor for DataDetectorState(0);
          memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          uint64_t v35 = type metadata accessor for UUID();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v35 - 8) + 32))(a1, a2, v35);
          uint64_t v36 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v36[5]) = *(_DWORD *)((char *)a2 + v36[5]);
          uint64_t v37 = v36[6];
          uint64_t v38 = (_OWORD *)((char *)a1 + v37);
          uint64_t v39 = (_OWORD *)((char *)a2 + v37);
          long long v40 = v39[3];
          v38[2] = v39[2];
          v38[3] = v40;
          long long v41 = v39[1];
          _OWORD *v38 = *v39;
          v38[1] = v41;
          *(_OWORD *)((char *)a1 + v36[7]) = *(_OWORD *)((char *)a2 + v36[7]);
          *(void *)((char *)a1 + v36[8]) = *(void *)((char *)a2 + v36[8]);
          *(void *)((char *)a1 + v36[9]) = *(void *)((char *)a2 + v36[9]);
          *(void *)((char *)a1 + v36[10]) = *(void *)((char *)a2 + v36[10]);
          *(void *)((char *)a1 + v36[11]) = *(void *)((char *)a2 + v36[11]);
          *(void *)((char *)a1 + v36[12]) = *(void *)((char *)a2 + v36[12]);
          *(void *)((char *)a1 + v36[13]) = *(void *)((char *)a2 + v36[13]);
          *((unsigned char *)a1 + v36[14]) = *((unsigned char *)a2 + v36[14]);
          *(void *)((char *)a1 + *(int *)(v22 + 48)) = *(void *)((char *)a2 + *(int *)(v22 + 48));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
        }
        goto LABEL_42;
      case 8u:
        uint64_t v25 = sub_10000F214(&qword_10051A428);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(a2, 1, v25))
        {
          uint64_t v27 = type metadata accessor for EventLookupState(0);
          memcpy(a1, a2, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          *a1 = *a2;
          id v42 = (int *)type metadata accessor for EventLookupItem(0);
          uint64_t v43 = v42[5];
          uint64_t v44 = (char *)a1 + v43;
          uint64_t v45 = (char *)a2 + v43;
          uint64_t v46 = type metadata accessor for Date();
          uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32);
          v47(v44, v45, v46);
          v47((char *)a1 + v42[6], (char *)a2 + v42[6], v46);
          *(_OWORD *)((char *)a1 + v42[7]) = *(_OWORD *)((char *)a2 + v42[7]);
          *(_OWORD *)((char *)a1 + v42[8]) = *(_OWORD *)((char *)a2 + v42[8]);
          *((unsigned char *)a1 + v42[9]) = *((unsigned char *)a2 + v42[9]);
          *(_OWORD *)((char *)a1 + *(int *)(v25 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v25 + 48));
          *(_OWORD *)((char *)a1 + *(int *)(v25 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v25 + 64));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
        }
LABEL_42:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100318738()
{
  long long v5[4] = &unk_100450838;
  v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for GeoLocateState(319);
  if (v1 <= 0x3F)
  {
    v5[6] = *(void *)(result - 8) + 64;
    v5[7] = &unk_100450850;
    uint64_t result = type metadata accessor for CVDetection();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      v5[8] = v5;
      uint64_t result = type metadata accessor for DataDetectorState(319);
      if (v3 <= 0x3F)
      {
        v5[9] = *(void *)(result - 8) + 64;
        v5[10] = &unk_100450868;
        v5[11] = &unk_100450880;
        uint64_t result = type metadata accessor for EventLookupState(319);
        if (v4 <= 0x3F)
        {
          v5[12] = *(void *)(result - 8) + 64;
          v5[13] = &unk_100450898;
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003188D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for EventLookupItem(0);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResultLookupState();
  __chkstk_darwin(v5);
  int v7 = (uint64_t *)((char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v49 - v9;
  __chkstk_darwin(v11);
  long long v13 = (uint64_t *)((char *)&v49 - v12);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v49 - v15);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v49 - v18;
  sub_100319C68(v1, (uint64_t)&v49 - v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 6u:
      sub_100319C68((uint64_t)v19, (uint64_t)v16);
      unint64_t v20 = v16[1];
      if (!v20) {
        goto LABEL_39;
      }
      uint64_t v21 = *v16;
      uint64_t v22 = v16[6];
      if (v16[2]) {
        goto LABEL_8;
      }
      uint64_t v23 = HIBYTE(v20) & 0xF;
      if ((v20 & 0x2000000000000000) == 0) {
        uint64_t v23 = v21 & 0xFFFFFFFFFFFFLL;
      }
      if (!v23 || v16[4])
      {
LABEL_8:
        sub_10004FEE8(*v16, v16[1]);
        goto LABEL_38;
      }
      swift_bridgeObjectRetain();
      sub_10004FEE8(v21, v20);
      if (!v22) {
        goto LABEL_39;
      }
      goto LABEL_37;
    case 7u:
      sub_100319C68((uint64_t)v19, (uint64_t)v13);
      if (!v13[1]) {
        goto LABEL_39;
      }
      uint64_t v25 = v13[7];
      unint64_t v24 = v13[8];
      uint64_t v26 = (void *)v13[6];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v27 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0) {
        uint64_t v27 = v25 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v28 = v27 != 0;
      break;
    case 8u:
      sub_100319C68((uint64_t)v19, (uint64_t)v10);
      uint64_t v29 = sub_10000F214(&qword_10051A428);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v10, 1, v29) == 1)
      {
        sub_100319DD8((uint64_t)v10, type metadata accessor for EventLookupState);
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v39 = &v10[*(int *)(v29 + 48)];
        uint64_t v41 = *(void *)v39;
        unint64_t v40 = *((void *)v39 + 1);
        id v42 = &v10[*(int *)(v29 + 64)];
        uint64_t v44 = *(void *)v42;
        unint64_t v43 = *((void *)v42 + 1);
        sub_100319D70((uint64_t)v10, (uint64_t)v4, type metadata accessor for EventLookupItem);
        uint64_t v28 = v4[*(int *)(v2 + 36)];
        swift_bridgeObjectRelease();
        if (v28 == 1)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((v40 & 0x2000000000000000) != 0) {
            uint64_t v45 = HIBYTE(v40) & 0xF;
          }
          else {
            uint64_t v45 = v41 & 0xFFFFFFFFFFFFLL;
          }
          swift_bridgeObjectRelease();
          uint64_t v46 = HIBYTE(v43) & 0xF;
          if ((v43 & 0x2000000000000000) == 0) {
            uint64_t v46 = v44 & 0xFFFFFFFFFFFFLL;
          }
          BOOL v47 = v46 != 0;
          if (v45) {
            uint64_t v28 = 1;
          }
          else {
            uint64_t v28 = v47;
          }
        }
        sub_100319DD8((uint64_t)v4, type metadata accessor for EventLookupItem);
      }
      break;
    case 9u:
      sub_100319C68((uint64_t)v19, (uint64_t)v7);
      uint64_t v30 = *v7;
      if (!*v7) {
        goto LABEL_39;
      }
      unint64_t v31 = v7[5];
      uint64_t v32 = v7[6];
      unint64_t v33 = v7[7];
      uint64_t v34 = v7[4];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void *)(v30 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35)
      {
        if ((v31 & 0x2000000000000000) != 0) {
          uint64_t v36 = HIBYTE(v31) & 0xF;
        }
        else {
          uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
        }
        swift_bridgeObjectRelease();
        uint64_t v37 = HIBYTE(v33) & 0xF;
        if ((v33 & 0x2000000000000000) == 0) {
          uint64_t v37 = v32 & 0xFFFFFFFFFFFFLL;
        }
        BOOL v38 = v37 != 0;
        if (v36) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = v38;
        }
      }
      else
      {
LABEL_37:
        swift_bridgeObjectRelease();
LABEL_38:
        uint64_t v28 = 1;
      }
      break;
    default:
LABEL_39:
      uint64_t v28 = 0;
      break;
  }
  sub_100319DD8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  return v28;
}

uint64_t sub_100318D58()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ResultLookupState();
  __chkstk_darwin(v2);
  unint64_t v4 = (uint64_t *)((char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v44 = (uint64_t)&v43 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v43 - v11);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v43 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v43 - v20;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v43 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v43 - v26;
  sub_100319C68(v1, (uint64_t)&v43 - v26);
  uint64_t v28 = (uint64_t)v27;
  uint64_t v29 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_23;
    case 2u:
      sub_100319C68((uint64_t)v27, (uint64_t)v24);
      type metadata accessor for GeoLocateState(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v30 = sub_10000F214(&qword_100520120);
        sub_10004FFD4(*(void **)&v24[*(int *)(v30 + 48)], *(void **)&v24[*(int *)(v30 + 48) + 8], *(void *)&v24[*(int *)(v30 + 48) + 16], v24[*(int *)(v30 + 48) + 24]);
        sub_10004FFD4(*(void **)&v24[*(int *)(v30 + 64)], *(void **)&v24[*(int *)(v30 + 64) + 8], *(void *)&v24[*(int *)(v30 + 64) + 16], v24[*(int *)(v30 + 64) + 24]);
        unint64_t v31 = (uint64_t (*)(void))type metadata accessor for CVDetection;
        uint64_t v32 = (uint64_t)v24;
        goto LABEL_22;
      }
      uint64_t v35 = type metadata accessor for GeoLocateState;
      uint64_t v36 = (uint64_t)v24;
      goto LABEL_19;
    case 3u:
      sub_100319C68((uint64_t)v27, (uint64_t)v21);
      unint64_t v33 = *((void *)v21 + 3);
      sub_10004FF38(*(void **)v21, *((void **)v21 + 1), *((void *)v21 + 2), v33);
      if (v33 >> 62 != 2) {
        goto LABEL_17;
      }
      goto LABEL_23;
    case 4u:
      sub_100319C68((uint64_t)v27, (uint64_t)v18);

      swift_bridgeObjectRelease();
      unint64_t v31 = (uint64_t (*)(void))type metadata accessor for CVDetection;
      uint64_t v32 = (uint64_t)v18;
      goto LABEL_22;
    case 5u:
      sub_100319C68((uint64_t)v27, (uint64_t)v15);
      uint64_t v34 = sub_10000F214(&qword_10051A320);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v15, 1, v34) == 1)
      {
        uint64_t v35 = type metadata accessor for DataDetectorState;
        uint64_t v36 = (uint64_t)v15;
        goto LABEL_19;
      }

      unint64_t v31 = type metadata accessor for TextDetectorResult;
      uint64_t v32 = (uint64_t)v15;
      goto LABEL_22;
    case 6u:
      sub_100319C68((uint64_t)v27, (uint64_t)v12);
      uint64_t v37 = v12[1];
      if (!v37) {
        goto LABEL_17;
      }
      sub_10004FEE8(*v12, v37);
      goto LABEL_23;
    case 7u:
      sub_100319C68((uint64_t)v27, (uint64_t)v9);
      uint64_t v38 = *((void *)v9 + 1);
      if (!v38) {
        goto LABEL_17;
      }
      sub_10004FE7C(*(void *)v9, v38, *((void *)v9 + 2), *((void *)v9 + 3), *((void *)v9 + 4), *((void *)v9 + 5), *((void **)v9 + 6));
      goto LABEL_23;
    case 8u:
      uint64_t v39 = (uint64_t)v27;
      uint64_t v40 = v44;
      sub_100319C68(v39, v44);
      uint64_t v41 = sub_10000F214(&qword_10051A428);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41) == 1)
      {
        uint64_t v35 = type metadata accessor for EventLookupState;
        uint64_t v36 = v40;
LABEL_19:
        sub_100319DD8(v36, v35);
        uint64_t v29 = 0;
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v31 = type metadata accessor for EventLookupItem;
      uint64_t v32 = v40;
LABEL_22:
      sub_100319DD8(v32, v31);
      goto LABEL_23;
    case 9u:
      sub_100319C68((uint64_t)v27, (uint64_t)v4);
      if (*v4)
      {
        sub_1002A9B4C(*v4);
LABEL_23:
        uint64_t v29 = 1;
      }
      else
      {
LABEL_17:
        uint64_t v29 = 0;
      }
LABEL_24:
      sub_100319DD8(v28, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      return v29;
    default:
      goto LABEL_24;
  }
}

uint64_t sub_1003192A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v78 = a1;
  long long v79 = a2;
  uint64_t v2 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v74 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v73 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BarCodeLookupState(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v72 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for GeoLocateState(0);
  __chkstk_darwin(State - 8);
  uint64_t v71 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ResultLookupState();
  __chkstk_darwin(v10);
  uint64_t v75 = (long long *)((char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v77 = (uint64_t)&v71 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v71 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v71 - v18;
  __chkstk_darwin(v20);
  uint64_t v76 = (uint64_t)&v71 - v21;
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v71 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v71 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v71 - v29;
  __chkstk_darwin(v31);
  unint64_t v33 = (uint64_t *)((char *)&v71 - v32);
  __chkstk_darwin(v34);
  uint64_t v36 = (uint64_t *)((char *)&v71 - v35);
  uint64_t v37 = sub_10000F214((uint64_t *)&unk_100529160);
  __chkstk_darwin(v37 - 8);
  uint64_t v39 = (char *)&v71 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = (uint64_t)&v39[*(int *)(v40 + 56)];
  sub_100319C68(v78, (uint64_t)v39);
  uint64_t v42 = (uint64_t)v79;
  long long v79 = (uint64_t *)v41;
  sub_100319C68(v42, v41);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100319C68((uint64_t)v39, (uint64_t)v33);
      uint64_t v46 = *v33;
      BOOL v47 = v79;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_8;
      }
      char v48 = sub_1003E2274(v46, *v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    case 2u:
      sub_100319C68((uint64_t)v39, (uint64_t)v30);
      uint64_t v49 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v50 = v71;
        sub_100319D70(v49, v71, type metadata accessor for GeoLocateState);
        char v48 = sub_100115B20((uint64_t)v30, v50);
        long long v51 = type metadata accessor for GeoLocateState;
        sub_100319DD8(v50, type metadata accessor for GeoLocateState);
        uint64_t v52 = (uint64_t)v30;
        goto LABEL_24;
      }
      sub_100319DD8((uint64_t)v30, type metadata accessor for GeoLocateState);
      goto LABEL_41;
    case 3u:
      sub_100319C68((uint64_t)v39, (uint64_t)v27);
      sub_1000508CC((uint64_t)v27, (uint64_t)v80);
      uint64_t v53 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        sub_1000508CC(v53, (uint64_t)v81);
        char v48 = sub_100180908((uint64_t)v80, (uint64_t)v81);
        long long v54 = sub_10004FF38;
        sub_100319D2C(v81, (void (*)(void, void, void, void, void, void, void, void))sub_10004FF38);
        uint64_t v55 = v80;
        goto LABEL_27;
      }
      long long v67 = sub_10004FF38;
      goto LABEL_40;
    case 4u:
      sub_100319C68((uint64_t)v39, (uint64_t)v24);
      uint64_t v56 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v57 = v72;
        sub_100319D70(v56, v72, type metadata accessor for BarCodeLookupState);
        char v48 = sub_100194AAC((uint64_t)v24, v57);
        sub_100319DD8(v57, type metadata accessor for BarCodeLookupState);
        sub_100319DD8((uint64_t)v24, type metadata accessor for BarCodeLookupState);
        sub_100319DD8((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        return v48 & 1;
      }
      sub_100319DD8((uint64_t)v24, type metadata accessor for BarCodeLookupState);
      goto LABEL_41;
    case 5u:
      uint64_t v58 = v76;
      sub_100319C68((uint64_t)v39, v76);
      uint64_t v59 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v60 = v73;
        sub_100319D70(v59, v73, type metadata accessor for DataDetectorState);
        char v48 = sub_10040909C(v58, v60);
        uint64_t v61 = type metadata accessor for DataDetectorState;
        goto LABEL_23;
      }
      uint64_t v68 = type metadata accessor for DataDetectorState;
      goto LABEL_38;
    case 6u:
      sub_100319C68((uint64_t)v39, (uint64_t)v19);
      sub_100050838((uint64_t)v19, (uint64_t)v80);
      uint64_t v62 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        sub_100050838(v62, (uint64_t)v81);
        char v48 = sub_1003A1C28((uint64_t)v80, (uint64_t)v81);
        sub_100050894(v80);
        sub_100050894(v81);
        goto LABEL_28;
      }
      sub_100050894(v80);
      goto LABEL_41;
    case 7u:
      sub_100319C68((uint64_t)v39, (uint64_t)v16);
      sub_100050794((uint64_t)v16, (uint64_t)v80);
      uint64_t v63 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        sub_100050794(v63, (uint64_t)v81);
        char v48 = sub_100216E5C((uint64_t)v80, (uint64_t)v81);
        sub_1000507F0((uint64_t)v81);
        sub_1000507F0((uint64_t)v80);
        goto LABEL_28;
      }
      sub_1000507F0((uint64_t)v80);
      goto LABEL_41;
    case 8u:
      uint64_t v58 = v77;
      sub_100319C68((uint64_t)v39, v77);
      uint64_t v64 = (uint64_t)v79;
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v60 = v74;
        sub_100319D70(v64, v74, type metadata accessor for EventLookupState);
        char v48 = sub_1002228C0(v58, v60);
        uint64_t v61 = type metadata accessor for EventLookupState;
LABEL_23:
        long long v51 = v61;
        sub_100319DD8(v60, v61);
        uint64_t v52 = v58;
LABEL_24:
        sub_100319DD8(v52, v51);
        goto LABEL_28;
      }
      uint64_t v68 = type metadata accessor for EventLookupState;
LABEL_38:
      sub_100319DD8(v58, v68);
      goto LABEL_41;
    case 9u:
      long long v65 = v75;
      sub_100319C68((uint64_t)v39, (uint64_t)v75);
      sub_1002FE1D8(v65, v80);
      long long v66 = (long long *)v79;
      if (swift_getEnumCaseMultiPayload() != 9)
      {
        long long v67 = sub_1002A9B4C;
LABEL_40:
        sub_100319D2C(v80, (void (*)(void, void, void, void, void, void, void, void))v67);
        goto LABEL_41;
      }
      sub_1002FE1D8(v66, v81);
      char v48 = sub_1002F9F80(v80, v81);
      long long v54 = sub_1002A9B4C;
      sub_100319D2C(v80, (void (*)(void, void, void, void, void, void, void, void))sub_1002A9B4C);
      uint64_t v55 = v81;
LABEL_27:
      sub_100319D2C(v55, (void (*)(void, void, void, void, void, void, void, void))v54);
LABEL_28:
      sub_100319DD8((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      return v48 & 1;
    case 0xAu:
      if (swift_getEnumCaseMultiPayload() == 10) {
        goto LABEL_30;
      }
      goto LABEL_41;
    default:
      sub_100319C68((uint64_t)v39, (uint64_t)v36);
      uint64_t v44 = *v36;
      uint64_t v43 = v36[1];
      uint64_t v45 = v79;
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_8:
        swift_bridgeObjectRelease();
LABEL_41:
        sub_100319CCC((uint64_t)v39);
      }
      else
      {
        if (v44 == *v45 && v43 == v45[1])
        {
          swift_bridgeObjectRelease_n();
LABEL_30:
          sub_100319DD8((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
          char v48 = 1;
          return v48 & 1;
        }
        char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v70) {
          goto LABEL_30;
        }
        sub_100319DD8((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      }
      char v48 = 0;
      return v48 & 1;
  }
}

uint64_t sub_100319C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResultLookupState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100319CCC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_100529160);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100319D2C(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100319D70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100319DD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t VKCQuickActionType.debugDescription.getter()
{
  return 0x6E776F6E6B6E75;
}

uint64_t VKDataDetectorTypes.debugDescription.getter(Swift::UInt a1)
{
  if (!a1) {
    return 1701736302;
  }
  unint64_t v2 = sub_10032E444(&off_1004E4788);
  sub_10000F214((uint64_t *)&unk_1005291E0);
  uint64_t result = swift_arrayDestroy();
  if (*(void *)(v2 + 16))
  {
    uint64_t result = sub_10032ACD0(a1);
    if (v4)
    {
      uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * result);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  int64_t v6 = 0;
  unint64_t v7 = v2 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v2 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
  if (!v10) {
    goto LABEL_11;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v6 << 6))
  {
    if ((*(void *)(*(void *)(v2 + 48) + 8 * i) & ~a1) != 0)
    {
      if (v10) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)(*(void *)(v2 + 56) + 16 * i);
      uint64_t v19 = v18[1];
      uint64_t v26 = *v18;
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100328860(0, *((void *)v12 + 2) + 1, 1, v12);
        uint64_t v12 = (char *)result;
      }
      unint64_t v21 = *((void *)v12 + 2);
      unint64_t v20 = *((void *)v12 + 3);
      if (v21 >= v20 >> 1)
      {
        uint64_t result = (uint64_t)sub_100328860((char *)(v20 > 1), v21 + 1, 1, v12);
        uint64_t v12 = (char *)result;
      }
      *((void *)v12 + 2) = v21 + 1;
      uint64_t v22 = &v12[16 * v21];
      *((void *)v22 + 4) = v26;
      *((void *)v22 + 5) = v19;
      if (v10) {
        goto LABEL_8;
      }
    }
LABEL_11:
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v11) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          goto LABEL_31;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v11)
  {
LABEL_31:
    swift_release();
    uint64_t v23 = self;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v25 = [v23 localizedStringByJoiningStrings:isa];

    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    return v5;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_24;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10031A1F0(uint64_t a1)
{
  if (a1) {
    return 0x656E6F6870;
  }
  if ((a1 & 2) != 0) {
    return 7364973;
  }
  if ((a1 & 4) != 0) {
    return 0x7261646E656C6163;
  }
  if ((a1 & 8) != 0) {
    return 0x676E697070696873;
  }
  if ((a1 & 0x10) != 0) {
    return 0x656E616C70726961;
  }
  if ((a1 & 0x20) != 0) {
    return 6650213;
  }
  if ((a1 & 0x40) != 0) {
    return 0x697261666173;
  }
  uint64_t result = 0x65706F6C65766E65;
  if ((a1 & 0x80) == 0)
  {
    if ((a1 & 0x100) != 0)
    {
      return 0xD000000000000014;
    }
    else if ((a1 & 0x200) == 0)
    {
      if ((a1 & 0xC00) != 0)
      {
        return 0xD000000000000013;
      }
      else if ((a1 & 0x200000) != 0)
      {
        return 0x65646F637271;
      }
      else if ((a1 & 0x400000) != 0)
      {
        return 0xD000000000000018;
      }
      else
      {
        return (a1 << 40 >> 63) & 0x6E6F73726570;
      }
    }
  }
  return result;
}

unint64_t sub_10031A35C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - v7;
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v24 - v10;
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v28 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  id v25 = v11;
  uint64_t v26 = v3;
  if (v15)
  {
    while (2)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v16 << 6);
LABEL_23:
      sub_100331E9C(*(void *)(a1 + 48) + *(void *)(v3 + 72) * v18, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003337E4((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100331E9C((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
      char v22 = 0;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
        case 4u:
        case 5u:
          sub_100331F04((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_100331F04((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
          if (v15) {
            continue;
          }
          goto LABEL_7;
        case 2u:
          char v22 = 1;
          goto LABEL_25;
        default:
LABEL_25:
          sub_100331F04((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_100321E80(v22);
          sub_100331F04((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          int64_t v11 = v25;
          uint64_t v3 = v26;
          if (!v15) {
            goto LABEL_7;
          }
          continue;
      }
    }
  }
LABEL_7:
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v19 < v28)
  {
    unint64_t v20 = *(void *)(v27 + 8 * v19);
    ++v16;
    if (v20) {
      goto LABEL_22;
    }
    int64_t v16 = v19 + 1;
    if (v19 + 1 >= v28) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v16);
    if (v20) {
      goto LABEL_22;
    }
    int64_t v16 = v19 + 2;
    if (v19 + 2 >= v28) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v16);
    if (v20) {
      goto LABEL_22;
    }
    int64_t v16 = v19 + 3;
    if (v19 + 3 >= v28) {
      goto LABEL_29;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v16);
    if (v20)
    {
LABEL_22:
      unint64_t v15 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
      goto LABEL_23;
    }
    int64_t v21 = v19 + 4;
    if (v21 < v28)
    {
      unint64_t v20 = *(void *)(v27 + 8 * v21);
      if (v20)
      {
        int64_t v16 = v21;
        goto LABEL_22;
      }
      while (1)
      {
        int64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        if (v16 >= v28) {
          goto LABEL_29;
        }
        unint64_t v20 = *(void *)(v27 + 8 * v16);
        ++v21;
        if (v20) {
          goto LABEL_22;
        }
      }
LABEL_31:
      __break(1u);
      JUMPOUT(0x10031A71CLL);
    }
  }
LABEL_29:
  swift_release();
  return v29;
}

float sub_10031A734(uint64_t a1)
{
  uint64_t v58 = type metadata accessor for TextDetectorResult(0);
  uint64_t v3 = *(void *)(v1 + *(int *)(v58 + 44));
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_1000407B0(0, v4, 0);
    uint64_t v5 = (uint64_t *)(v3 + 48);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        sub_1000407B0(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v7;
      v10[5] = v6;
      v5 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100013AA8((unint64_t *)&qword_10051CA40, (uint64_t *)&unk_100522CD0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1003069CC(400);
  unint64_t v13 = v12;
  uint64_t v57 = v14;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a1 + *(int *)(v58 + 44));
  int64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v55 = v11;
    uint64_t v56 = v16;
    swift_bridgeObjectRetain();
    sub_1000407B0(0, v18, 0);
    int64_t v19 = (uint64_t *)(v17 + 48);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      unint64_t v23 = _swiftEmptyArrayStorage[2];
      unint64_t v22 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v23 >= v22 >> 1) {
        sub_1000407B0(v22 > 1, v23 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v23 + 1;
      uint64_t v24 = &_swiftEmptyArrayStorage[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
      v19 += 5;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    uint64_t v16 = v56;
    uint64_t v11 = v55;
  }
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  unint64_t v25 = sub_1003069CC(400);
  unint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = sub_10031C65C(v11, v13, v57, v16, v25, v27, v29, v31, 50, 0);
  uint64_t v33 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  uint64_t v34 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  double v35 = sub_1003FD844();
  CGFloat v37 = v36;
  double v39 = v38;
  double v41 = v40;
  v61.origin.double x = sub_1003FD844();
  v61.origin.CGFloat y = v42;
  double v44 = v43;
  double v46 = v45;
  v59.origin.double x = v35;
  v59.origin.CGFloat y = v37;
  v59.size.double width = v39;
  v59.size.double height = v41;
  v61.size.double width = v44;
  v61.size.double height = v46;
  CGRect v60 = CGRectIntersection(v59, v61);
  double width = v60.size.width;
  double height = v60.size.height;
  BOOL IsNull = CGRectIsNull(v60);
  float v50 = 0.0;
  float v51 = width * height / (v39 * v41 + v44 * v46 - width * height);
  float v52 = v51 * 0.5;
  if (!IsNull) {
    float v50 = v52;
  }
  if (v34 <= v33) {
    uint64_t v53 = v33;
  }
  else {
    uint64_t v53 = v34;
  }
  return (float)((float)(1.0 - (float)((float)v32 / (float)v53)) * 0.5) + v50;
}

unint64_t sub_10031AB50(uint64_t a1)
{
  return sub_10031C408(a1, &qword_100529C00, &qword_100529C08, (uint64_t (*)(uint64_t))sub_10032B1FC);
}

unint64_t sub_10031AB78(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A298);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_100529AC0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = v6 + 64;
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v21[1] = a1;
  uint64_t v11 = a1 + v10;
  uint64_t v12 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000FB74(v11, (uint64_t)v5, &qword_10051A298);
    unint64_t result = sub_1003310C4();
    if (v14) {
      break;
    }
    unint64_t v15 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = v7[7];
    uint64_t v17 = type metadata accessor for DisplayRepresentation();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v15, v5, v17);
    uint64_t v18 = v7[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v7[2] = v20;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031AD54(uint64_t a1)
{
  return sub_10031C408(a1, &qword_100529A90, &qword_100529A98, (uint64_t (*)(uint64_t))sub_10032B1FC);
}

unint64_t sub_10031AD7C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_100529800);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_10032AC58(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031AE98(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_1005250B0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 40);
  while (1)
  {
    char v5 = *((unsigned char *)v4 - 8);
    uint64_t v6 = *v4;
    unint64_t result = sub_10032AD3C(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v11;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031AF94(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_100529A80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_1005251E8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000FB74(v12, (uint64_t)v5, (uint64_t *)&unk_100529A80);
    uint64_t v14 = *v5;
    unint64_t result = sub_10032AE98(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v7[6] + 8 * result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B18C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_1005251E0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_retain();
    unint64_t result = sub_10032AE98((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B298(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100529658);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_100529660);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000FB74(v12, (uint64_t)v5, &qword_100529658);
    unint64_t result = sub_10032ADC4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7] + 88 * v16;
    uint64_t v20 = *((void *)v9 + 10);
    long long v21 = *((_OWORD *)v9 + 1);
    long long v22 = *((_OWORD *)v9 + 2);
    long long v23 = *((_OWORD *)v9 + 3);
    long long v24 = *((_OWORD *)v9 + 4);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v9;
    *(_OWORD *)(v19 + 16) = v21;
    *(_OWORD *)(v19 + 32) = v22;
    *(_OWORD *)(v19 + 48) = v23;
    *(_OWORD *)(v19 + 64) = v24;
    *(void *)(v19 + 80) = v20;
    uint64_t v25 = v7[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    v7[2] = v27;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B4B0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_100529AA0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    id v6 = *v4;
    id v7 = *v4;
    id v8 = v5;
    unint64_t result = sub_10032AEE8((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = 8 * result;
    *(void *)(v2[6] + v11) = v8;
    *(void *)(v2[7] + v11) = v6;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B5B4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_100525290);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_100529A70);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000FB74(v12, (uint64_t)v5, (uint64_t *)&unk_100525290);
    unint64_t result = sub_10032AF9C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CVDetection();
    unint64_t result = sub_1003337E4((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v19 = v7[7] + 24 * v16;
    char v20 = v9[16];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v9;
    *(unsigned char *)(v19 + 16) = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B7B8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_1005251F0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    int v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10032AC58(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B8CC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_100529A40);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    id v8 = *((id *)v4 - 3);
    unint64_t result = sub_10032B008((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v8;
    uint64_t v11 = v2[7] + 24 * result;
    *(void *)uint64_t v11 = v5;
    *(void *)(v11 + 8) = v6;
    *(unsigned char *)(v11 + 16) = v7;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 32;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031B9F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_1005297F0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10032AC58(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031BB08(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_100529990);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000FB74(v6, (uint64_t)v15, &qword_100529998);
    unint64_t result = sub_10032B058((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100046CEC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031BC4C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_100529A08);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000FB74(v6, (uint64_t)&v15, (uint64_t *)&unk_100529A10);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10032AC58(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100046CEC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031BD84(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_100529980);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10032AEE8((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031BE90(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_1005299E0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_10032B0D8((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031BF9C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005213A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_1005299C0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000FB74(v12, (uint64_t)v5, &qword_1005213A0);
    unint64_t result = sub_10032B128((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for FBKSForm.Question();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031C190(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214((uint64_t *)&unk_100529C90);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_10032B1FC((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031C29C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_1005297E8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10032AC58(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031C3B8(uint64_t a1)
{
  return sub_10031C408(a1, &qword_1005296A0, &qword_1005296A8, (uint64_t (*)(uint64_t))sub_10032B1FC);
}

unint64_t sub_10031C3E0(uint64_t a1)
{
  return sub_10031C408(a1, &qword_100529C40, &qword_100529C48, (uint64_t (*)(uint64_t))sub_10032B1FC);
}

unint64_t sub_10031C408(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000FB74(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_100046CEC(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10031C538(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000F214(&qword_100525098);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10032AC58(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10031C65C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v14 = a10;
  uint64_t v15 = Substring.distance(from:to:)();
  unint64_t v61 = a5;
  uint64_t v16 = Substring.distance(from:to:)();
  if (v16 <= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  if (a10) {
    a9 = v17;
  }
  uint64_t v65 = a9;
  if (__OFADD__(v16, 1)) {
    goto LABEL_107;
  }
  uint64_t v14 = v16;
  long long v19 = sub_1003A49F8(0, v16 + 1);
  if (__OFADD__(v15, 1)) {
    goto LABEL_108;
  }
  char v70 = sub_1003A4AE4((uint64_t)v19, v15 + 1);
  if (v15 < 0) {
    goto LABEL_109;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_110;
  }
  while (1)
  {
    if (v70[2])
    {
      uint64_t v66 = v14;
      uint64_t v14 = v70[4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v71 = v70 + 4;
      v70[4] = v14;
      if (isUniquelyReferenced_nonNull_native)
      {
        if (!*(void *)(v14 + 16)) {
          goto LABEL_113;
        }
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v14 = (uint64_t)sub_1003068B0((void *)v14);
    if (!*(void *)(v14 + 16))
    {
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
LABEL_14:
    unint64_t v69 = a6;
    uint64_t v59 = v17;
    *(void *)(v14 + 32) = 0;
    *uint64_t v71 = v14;
    if (v15)
    {
      a6 = 0;
      uint64_t v21 = v70 + 5;
      while (1)
      {
        uint64_t v17 = a6 + 1;
        if (a6 + 1 >= v70[2]) {
          break;
        }
        uint64_t v14 = v21[a6];
        char v22 = swift_isUniquelyReferenced_nonNull_native();
        v21[a6] = v14;
        if (v22)
        {
          if (!*(void *)(v14 + 16)) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v14 = (uint64_t)sub_1003068B0((void *)v14);
          v21[a6] = v14;
          if (!*(void *)(v14 + 16))
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        *(void *)(v14 + 32) = v17;
        ++a6;
        if (v15 == v17) {
          goto LABEL_23;
        }
      }
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
LABEL_23:
    uint64_t v14 = v66;
    if (v66 < 0) {
      goto LABEL_114;
    }
    if (v70[2])
    {
      a6 = *v71;
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v71 = a6;
      if (v23) {
        goto LABEL_26;
      }
      goto LABEL_116;
    }
LABEL_115:
    __break(1u);
LABEL_116:
    a6 = (unint64_t)sub_1003068B0((void *)a6);
LABEL_26:
    uint64_t v17 = a4;
    if (!*(void *)(a6 + 16))
    {
      __break(1u);
      goto LABEL_118;
    }
    *(void *)(a6 + 32) = 0;
    *uint64_t v71 = a6;
    if (v14)
    {
      uint64_t v24 = 0;
      while (v70[2])
      {
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v71 = a6;
        if ((v25 & 1) == 0) {
          a6 = (unint64_t)sub_1003068B0((void *)a6);
        }
        uint64_t v26 = v24 + 1;
        if ((unint64_t)(v24 + 1) >= *(void *)(a6 + 16)) {
          goto LABEL_104;
        }
        *(void *)(a6 + 8 * v24 + 40) = v26;
        *uint64_t v71 = a6;
        ++v24;
        if (v14 == v26) {
          goto LABEL_34;
        }
      }
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v27 = Substring.distance(from:to:)();
    uint64_t v60 = v15;
    if (!v27) {
      break;
    }
    a6 = v27;
    uint64_t v62 = sub_10032E30C(v27, 0);
    uint64_t v14 = a1;
    uint64_t v28 = a6 & ~((uint64_t)a6 >> 63);
    swift_bridgeObjectRetain();
    uint64_t v17 = 32;
    uint64_t v15 = a1;
    while (v28)
    {
      if ((v14 ^ a2) < 0x4000) {
        goto LABEL_119;
      }
      uint64_t v29 = (void *)((char *)v62 + v17);
      uint64_t v67 = Substring.subscript.getter();
      uint64_t v31 = v30;
      uint64_t v14 = Substring.index(after:)();
      *uint64_t v29 = v67;
      v29[1] = v31;
      --v28;
      v17 += 16;
      if (!--a6)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v66;
        goto LABEL_41;
      }
    }
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    char v70 = sub_1003068C4(v70);
  }
  uint64_t v62 = _swiftEmptyArrayStorage;
LABEL_41:
  swift_bridgeObjectRelease();
  uint64_t v17 = a8;
  swift_bridgeObjectRetain();
  unint64_t v32 = v69;
  uint64_t v33 = Substring.distance(from:to:)();
  if (v33)
  {
    uint64_t v34 = v33;
    a2 = (unint64_t)sub_10032E30C(v33, 0);
    uint64_t v15 = v34 & ~(v34 >> 63);
    swift_bridgeObjectRetain();
    uint64_t v35 = 32;
    uint64_t v14 = v61;
    a6 = v61;
    while (v15)
    {
      if ((v14 ^ v32) < 0x4000) {
        goto LABEL_120;
      }
      double v36 = (uint64_t *)(a2 + v35);
      uint64_t v17 = Substring.subscript.getter();
      uint64_t v68 = v37;
      uint64_t v14 = Substring.index(after:)();
      unint64_t v32 = v69;
      uint64_t *v36 = v17;
      v36[1] = v68;
      --v15;
      v35 += 16;
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v66;
        goto LABEL_48;
      }
    }
    goto LABEL_106;
  }
  a2 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_48:
  swift_bridgeObjectRelease();
  if (v60 < 1 || v14 < 1)
  {
LABEL_118:
    __break(1u);
LABEL_119:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_120:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  if (v62[2])
  {
    unint64_t v69 = 0;
    a6 = 1;
    uint64_t v15 = (uint64_t)(v62 + 4);
    while (1)
    {
      unint64_t v38 = 0;
      uint64_t v17 = a2 + 40;
      while (1)
      {
        if (v38 >= *(void *)(a2 + 16))
        {
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        BOOL v40 = (*(void *)v15 != *(void *)(v17 - 8) || *(void *)(v15 + 8) != *(void *)v17)
           && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0;
        unint64_t v41 = v70[2];
        if (a6 > v41) {
          goto LABEL_92;
        }
        uint64_t v14 = v38 + 1;
        unint64_t v42 = v71[v69];
        if (v38 + 1 >= *(void *)(v42 + 16)) {
          goto LABEL_93;
        }
        uint64_t v43 = *(void *)(v42 + 8 * v38 + 40);
        BOOL v44 = __OFADD__(v43, 1);
        uint64_t v45 = v43 + 1;
        if (v44) {
          goto LABEL_94;
        }
        if (a6 >= v41) {
          goto LABEL_95;
        }
        double v46 = (void *)v71[a6];
        if (v38 >= v46[2]) {
          goto LABEL_96;
        }
        uint64_t v47 = v46[v38 + 4];
        BOOL v44 = __OFADD__(v47, 1);
        uint64_t v48 = v47 + 1;
        if (v44) {
          goto LABEL_97;
        }
        uint64_t v49 = *(void *)(v42 + 8 * v38 + 32);
        BOOL v44 = __OFADD__(v49, v40);
        uint64_t v50 = v49 + v40;
        if (v44) {
          goto LABEL_98;
        }
        if (v48 >= v45) {
          uint64_t v51 = v45;
        }
        else {
          uint64_t v51 = v48;
        }
        if (v50 >= v51) {
          uint64_t v52 = v51;
        }
        else {
          uint64_t v52 = v50;
        }
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        v71[a6] = (unint64_t)v46;
        if ((v53 & 1) == 0)
        {
          double v46 = sub_1003068B0(v46);
          v71[a6] = (unint64_t)v46;
        }
        if ((unint64_t)v14 >= v46[2]) {
          goto LABEL_99;
        }
        v46[v38 + 5] = v52;
        if (a6 >= v70[2]) {
          goto LABEL_100;
        }
        unint64_t v54 = v71[a6];
        if ((unint64_t)v14 >= *(void *)(v54 + 16)) {
          goto LABEL_101;
        }
        if (v65 < *(void *)(v54 + 8 * v38 + 40)) {
          goto LABEL_86;
        }
        ++v38;
        uint64_t v14 = v66;
        if (v66 == v38) {
          break;
        }
        v17 += 16;
        if (a6 > v62[2]) {
          goto LABEL_85;
        }
      }
      if (a6 == v60) {
        break;
      }
      uint64_t v15 = (uint64_t)&v62[2 * a6 + 4];
      unint64_t v69 = a6;
      if (a6++ >= v62[2]) {
        goto LABEL_85;
      }
    }
    swift_release();
    uint64_t result = swift_release();
    if (v60 >= v70[2]) {
      goto LABEL_121;
    }
    unint64_t v58 = v71[v60];
    if (v66 < *(void *)(v58 + 16))
    {
      uint64_t v56 = *(void *)(v58 + 8 * v66 + 32);
      swift_bridgeObjectRelease();
      return v56;
    }
LABEL_122:
    __break(1u);
    return result;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v59;
}

uint64_t sub_10031CD74(unint64_t a1, Swift::String_optional *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t *a7, unint64_t a8)
{
  uint64_t v15 = Substring.distance(from:to:)();
  uint64_t v58 = a5;
  unint64_t v59 = a6;
  uint64_t v16 = String.count.getter();
  if (v16 <= v15) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = v16;
  }
  if (a8) {
    uint64_t v18 = (unint64_t *)v17;
  }
  else {
    uint64_t v18 = a7;
  }
  uint64_t v63 = v18;
  if (__OFADD__(v16, 1)) {
    goto LABEL_103;
  }
  uint64_t v9 = v16;
  long long v19 = sub_1003A49F8(0, v16 + 1);
  if (__OFADD__(v15, 1)) {
    goto LABEL_104;
  }
  BOOL v20 = sub_1003A4AE4((uint64_t)v19, v15 + 1);
  if (v15 < 0) {
    goto LABEL_105;
  }
  char v10 = v20;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_106;
  }
  if (!v10[2]) {
    goto LABEL_107;
  }
LABEL_12:
  a7 = v10 + 4;
  a8 = v10[4];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10[4] = a8;
  if (isUniquelyReferenced_nonNull_native)
  {
    if (!*(void *)(a8 + 16)) {
      goto LABEL_109;
    }
LABEL_14:
    unint64_t v57 = v17;
    *(void *)(a8 + 32) = 0;
    *a7 = a8;
    if (v15)
    {
      uint64_t v22 = 0;
      unint64_t v17 = (unint64_t)(v10 + 5);
      while (1)
      {
        uint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >= v10[2]) {
          break;
        }
        unint64_t v8 = 8 * v22;
        a8 = *(void *)(v17 + 8 * v22);
        char v24 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 8 * v22) = a8;
        if (v24)
        {
          if (!*(void *)(a8 + 16)) {
            goto LABEL_22;
          }
        }
        else
        {
          a8 = (unint64_t)sub_1003068B0((void *)a8);
          *(void *)(v17 + 8 * v22) = a8;
          if (!*(void *)(a8 + 16))
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        *(void *)(a8 + 32) = v23;
        ++v22;
        if (v15 == v23) {
          goto LABEL_23;
        }
      }
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
LABEL_23:
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (v10[2])
      {
        unint64_t v8 = *a7;
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *a7 = v8;
        if ((v25 & 1) == 0) {
          goto LABEL_112;
        }
        goto LABEL_26;
      }
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  while (1)
  {
    a8 = (unint64_t)sub_1003068B0((void *)a8);
    if (*(void *)(a8 + 16)) {
      goto LABEL_14;
    }
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    unint64_t v8 = (unint64_t)sub_1003068B0((void *)v8);
LABEL_26:
    uint64_t v26 = a2;
    unint64_t v17 = a1;
    if (!*(void *)(v8 + 16))
    {
      __break(1u);
      goto LABEL_114;
    }
    *(void *)(v8 + 32) = 0;
    *a7 = v8;
    if (v9)
    {
      a8 = 0;
      while (v10[2])
      {
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        *a7 = v8;
        if ((v27 & 1) == 0) {
          unint64_t v8 = (unint64_t)sub_1003068B0((void *)v8);
        }
        unint64_t v28 = a8 + 1;
        if (a8 + 1 >= *(void *)(v8 + 16)) {
          goto LABEL_101;
        }
        *(void *)(v8 + 8 * a8 + 40) = v28;
        *a7 = v8;
        ++a8;
        if (v9 == v28) {
          goto LABEL_34;
        }
      }
      goto LABEL_100;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v29 = Substring.distance(from:to:)();
    uint64_t v60 = v15;
    uint64_t v62 = v9;
    if (!v29) {
      break;
    }
    unint64_t v8 = v29;
    uint64_t v67 = sub_10032E30C(v29, 0);
    uint64_t v9 = v8 & ~((uint64_t)v8 >> 63);
    swift_bridgeObjectRetain();
    uint64_t v30 = 4;
    a8 = a1;
    while (v9)
    {
      if ((a8 ^ (unint64_t)v26) < 0x4000) {
        goto LABEL_116;
      }
      unint64_t v17 = (unint64_t)a7;
      uint64_t v15 = (uint64_t)&v67[v30];
      uint64_t v31 = Substring.subscript.getter();
      uint64_t v64 = v32;
      uint64_t v65 = v31;
      a8 = Substring.index(after:)();
      uint64_t v26 = a2;
      *(void *)uint64_t v15 = v65;
      *(void *)(v15 + 8) = v64;
      --v9;
      v30 += 2;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = v60;
        uint64_t v9 = v62;
        goto LABEL_41;
      }
    }
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    char v10 = sub_1003068C4(v10);
    if (v10[2]) {
      goto LABEL_12;
    }
LABEL_107:
    __break(1u);
  }
  uint64_t v67 = _swiftEmptyArrayStorage;
LABEL_41:
  swift_bridgeObjectRelease();
  a8 = v59;
  swift_bridgeObjectRetain();
  uint64_t v33 = String.count.getter();
  if (!v33)
  {
    swift_bridgeObjectRelease();
    a2 = (Swift::String_optional *)_swiftEmptyArrayStorage;
    if (v15 < 1) {
      goto LABEL_114;
    }
    goto LABEL_46;
  }
  uint64_t v34 = v33;
  a2 = (Swift::String_optional *)sub_10032E30C(v33, 0);
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_10032E384(&v68, a2 + 2, v34, v58, v59);
  swift_bridgeObjectRelease();
  if (v35 != (void *)v34)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  swift_bridgeObjectRelease();
  if (v15 < 1)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
LABEL_46:
  if (v9 < 1) {
    goto LABEL_114;
  }
  if (v67[2])
  {
    uint64_t v9 = 0;
    double v36 = (void **)(v67 + 4);
    unint64_t v8 = 1;
    while (1)
    {
      unint64_t v17 = 0;
      p_object = &a2[2].value._object;
      while (1)
      {
        if (v17 >= a2[1].value._countAndFlagsBits)
        {
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          goto LABEL_99;
        }
        BOOL v39 = (*v36 != *(p_object - 1) || v36[1] != *p_object)
           && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0;
        unint64_t v40 = v10[2];
        if (v8 > v40) {
          goto LABEL_89;
        }
        a8 = v17 + 1;
        unint64_t v41 = a7[v9];
        if (v17 + 1 >= *(void *)(v41 + 16)) {
          goto LABEL_90;
        }
        uint64_t v42 = *(void *)(v41 + 8 * v17 + 40);
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_91;
        }
        if (v8 >= v40) {
          goto LABEL_92;
        }
        uint64_t v45 = (void *)a7[v8];
        if (v17 >= v45[2]) {
          goto LABEL_93;
        }
        uint64_t v46 = v45[v17 + 4];
        BOOL v43 = __OFADD__(v46, 1);
        uint64_t v47 = v46 + 1;
        if (v43) {
          goto LABEL_94;
        }
        uint64_t v48 = *(void *)(v41 + 8 * v17 + 32);
        BOOL v43 = __OFADD__(v48, v39);
        uint64_t v49 = v48 + v39;
        if (v43) {
          goto LABEL_95;
        }
        if (v47 >= v44) {
          uint64_t v50 = v44;
        }
        else {
          uint64_t v50 = v47;
        }
        if (v49 >= v50) {
          uint64_t v15 = v50;
        }
        else {
          uint64_t v15 = v49;
        }
        char v51 = swift_isUniquelyReferenced_nonNull_native();
        a7[v8] = (unint64_t)v45;
        if ((v51 & 1) == 0)
        {
          uint64_t v45 = sub_1003068B0(v45);
          a7[v8] = (unint64_t)v45;
        }
        if (a8 >= v45[2]) {
          goto LABEL_96;
        }
        v45[v17 + 5] = v15;
        if (v8 >= v10[2]) {
          goto LABEL_97;
        }
        unint64_t v52 = a7[v8];
        if (a8 >= *(void *)(v52 + 16)) {
          goto LABEL_98;
        }
        if ((uint64_t)v63 < *(void *)(v52 + 8 * v17 + 40)) {
          goto LABEL_83;
        }
        if (v62 == ++v17) {
          break;
        }
        p_object += 2;
        if (v8 > v67[2]) {
          goto LABEL_82;
        }
      }
      a8 = v60;
      if (v8 == v60) {
        break;
      }
      double v36 = (void **)&v67[2 * v8 + 4];
      uint64_t v9 = v8;
      if (v8++ >= v67[2]) {
        goto LABEL_82;
      }
    }
    swift_release();
    uint64_t result = swift_release();
    if (v60 >= v10[2]) {
      goto LABEL_117;
    }
    unint64_t v56 = a7[v60];
    if (v62 < *(void *)(v56 + 16))
    {
      uint64_t v54 = *(void *)(v56 + 8 * v62 + 32);
      swift_bridgeObjectRelease();
      return v54;
    }
LABEL_118:
    __break(1u);
    return result;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v57;
}

uint64_t sub_10031D3D4(Swift::String_optional *a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v13 = String.count.getter();
  uint64_t p_object = (uint64_t)a3;
  uint64_t v14 = String.count.getter();
  if (v14 <= v13) {
    unint64_t v15 = v13;
  }
  else {
    unint64_t v15 = v14;
  }
  if (a6) {
    uint64_t v16 = (void *)v15;
  }
  else {
    uint64_t v16 = a5;
  }
  char v51 = v16;
  if (__OFADD__(v14, 1)) {
    goto LABEL_100;
  }
  unint64_t v6 = v14;
  unint64_t v17 = sub_1003A49F8(0, v14 + 1);
  if (__OFADD__(v13, 1)) {
    goto LABEL_101;
  }
  uint64_t v18 = sub_1003A4AE4((uint64_t)v17, v13 + 1);
  if (v13 < 0) {
    goto LABEL_102;
  }
  a3 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_103;
  }
  if (!a3[2]) {
    goto LABEL_104;
  }
LABEL_12:
  a6 = a3 + 4;
  a5 = (void *)a3[4];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a3[4] = a5;
  uint64_t v52 = v6;
  if (isUniquelyReferenced_nonNull_native)
  {
    if (!a5[2]) {
      goto LABEL_106;
    }
LABEL_14:
    a5[4] = 0;
    *a6 = a5;
    uint64_t v50 = v13;
    if (!v13) {
      goto LABEL_24;
    }
    uint64_t v7 = 0;
    unint64_t v6 = (unint64_t)(a3 + 5);
    while (1)
    {
      uint64_t v13 = v7 + 1;
      if ((unint64_t)(v7 + 1) >= a3[2])
      {
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      a5 = *(void **)(v6 + 8 * v7);
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v6 + 8 * v7) = a5;
      if (v20)
      {
        if (!a5[2]) {
          goto LABEL_23;
        }
      }
      else
      {
        a5 = sub_1003068B0(a5);
        *(void *)(v6 + 8 * v7) = a5;
        if (!a5[2])
        {
LABEL_23:
          __break(1u);
LABEL_24:
          uint64_t v7 = v52;
          if (v52 < 0) {
            goto LABEL_107;
          }
          if (!a3[2]) {
            goto LABEL_108;
          }
          a5 = (void *)*a6;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *a6 = a5;
          if ((result & 1) == 0) {
            goto LABEL_109;
          }
          if (a5[2]) {
            goto LABEL_28;
          }
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
          return result;
        }
      }
      a5[4] = v13;
      ++v7;
      BOOL v31 = v50 == v13;
      uint64_t v13 = v50;
      if (v31) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    a5 = sub_1003068B0(a5);
    if (a5[2]) {
      goto LABEL_14;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    uint64_t result = (uint64_t)sub_1003068B0(a5);
    a5 = (void *)result;
    if (!*(void *)(result + 16)) {
      goto LABEL_110;
    }
LABEL_28:
    a5[4] = 0;
    *a6 = a5;
    if (!v7) {
      break;
    }
    unint64_t v6 = 0;
    while (a3[2])
    {
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      *a6 = a5;
      if ((v22 & 1) == 0) {
        a5 = sub_1003068B0(a5);
      }
      unint64_t v23 = v6 + 1;
      if (v6 + 1 >= a5[2]) {
        goto LABEL_99;
      }
      a5[v6 + 5] = v23;
      *a6 = a5;
      ++v6;
      if (v7 == v23) {
        goto LABEL_35;
      }
    }
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    a3 = sub_1003068C4(a3);
    if (a3[2]) {
      goto LABEL_12;
    }
LABEL_104:
    __break(1u);
  }
LABEL_35:
  unint64_t v48 = v15;
  swift_bridgeObjectRetain();
  uint64_t v24 = String.count.getter();
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v54 = (Swift::String_optional *)sub_10032E30C(v24, 0);
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_10032E384(&v55, v54 + 2, v25, (uint64_t)a1, a2);
    uint64_t result = swift_bridgeObjectRelease();
    if (v26 != (void *)v25) {
      goto LABEL_112;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = (Swift::String_optional *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = String.count.getter();
  if (v27)
  {
    uint64_t v28 = v27;
    a1 = (Swift::String_optional *)sub_10032E30C(v27, 0);
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_10032E384(&v55, a1 + 2, v28, p_object, (unint64_t)a4);
    uint64_t result = swift_bridgeObjectRelease();
    if (v29 != (void *)v28) {
      goto LABEL_113;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v13 < 1) {
      goto LABEL_111;
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    a1 = (Swift::String_optional *)_swiftEmptyArrayStorage;
    if (v13 < 1) {
      goto LABEL_111;
    }
  }
  if (v7 < 1) {
    goto LABEL_111;
  }
  if (v54[1].value._countAndFlagsBits)
  {
    unint64_t v15 = 0;
    uint64_t v7 = (uint64_t)&v54[2];
    uint64_t p_object = (uint64_t)&a1[2].value._object;
    unint64_t v30 = 1;
    while (1)
    {
      unint64_t v6 = 0;
      uint64_t v13 = (uint64_t)&a1[2].value._object;
      while (1)
      {
        if (v6 >= a1[1].value._countAndFlagsBits)
        {
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }
        BOOL v31 = *(void *)v7 == *(void *)(v13 - 8) && *(void *)(v7 + 8) == *(void *)v13;
        BOOL v32 = !v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0;
        unint64_t v33 = a3[2];
        if (v30 > v33) {
          goto LABEL_87;
        }
        a5 = (void *)(v6 + 1);
        uint64_t v34 = a6[v15];
        if (v6 + 1 >= *(void *)(v34 + 16)) {
          goto LABEL_88;
        }
        uint64_t v35 = *(void *)(v34 + 8 * v6 + 40);
        BOOL v36 = __OFADD__(v35, 1);
        int64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_89;
        }
        if (v30 >= v33) {
          goto LABEL_90;
        }
        a4 = (void *)a6[v30];
        if (v6 >= a4[2]) {
          goto LABEL_91;
        }
        uint64_t v38 = a4[v6 + 4];
        BOOL v36 = __OFADD__(v38, 1);
        int64_t v39 = v38 + 1;
        if (v36) {
          goto LABEL_92;
        }
        uint64_t v40 = *(void *)(v34 + 8 * v6 + 32);
        BOOL v36 = __OFADD__(v40, v32);
        int64_t v41 = v40 + v32;
        if (v36) {
          goto LABEL_93;
        }
        if (v39 >= v37) {
          int64_t v42 = v37;
        }
        else {
          int64_t v42 = v39;
        }
        if (v41 >= v42) {
          a2 = v42;
        }
        else {
          a2 = v41;
        }
        char v43 = swift_isUniquelyReferenced_nonNull_native();
        a6[v30] = a4;
        if ((v43 & 1) == 0)
        {
          a4 = sub_1003068B0(a4);
          a6[v30] = a4;
        }
        if ((unint64_t)a5 >= a4[2]) {
          goto LABEL_94;
        }
        a4[v6 + 5] = a2;
        if (v30 >= a3[2]) {
          goto LABEL_95;
        }
        uint64_t v44 = a6[v30];
        if ((unint64_t)a5 >= *(void *)(v44 + 16)) {
          goto LABEL_96;
        }
        if ((uint64_t)v51 < *(void *)(v44 + 8 * v6 + 40)) {
          goto LABEL_81;
        }
        if (v52 == ++v6) {
          break;
        }
        v13 += 16;
        if (v30 > v54[1].value._countAndFlagsBits) {
          goto LABEL_80;
        }
      }
      if (v30 == v50) {
        break;
      }
      uint64_t v7 = (uint64_t)&v54[v30 + 2];
      unint64_t v15 = v30;
      if (v30++ >= v54[1].value._countAndFlagsBits) {
        goto LABEL_80;
      }
    }
    swift_release();
    uint64_t result = swift_release();
    if (v50 >= a3[2]) {
      goto LABEL_114;
    }
    uint64_t v47 = a6[v50];
    if (v52 < *(void *)(v47 + 16))
    {
      uint64_t v46 = *(void *)(v47 + 8 * v52 + 32);
      swift_bridgeObjectRelease();
      return v46;
    }
    goto LABEL_115;
  }
LABEL_80:
  __break(1u);
LABEL_81:
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v48;
}

uint64_t sub_10031D9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[18] = a1;
  v4[19] = a2;
  uint64_t v5 = type metadata accessor for IndexSet();
  v4[22] = v5;
  v4[23] = *(void *)(v5 - 8);
  v4[24] = swift_task_alloc();
  return _swift_task_switch(sub_10031DA94, 0, 0);
}

uint64_t sub_10031DA94()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  sub_1003FEC34((uint64_t *)(v0 + 80));
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  sub_10000F3B0((void *)(v0 + 80), v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v3, v4);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 80);
  v54.origin.CGFloat x = sub_1003FD844();
  CGFloat x = v54.origin.x;
  CGFloat y = v54.origin.y;
  CGFloat width = v54.size.width;
  CGFloat height = v54.size.height;
  double v9 = CGRectGetWidth(v54);
  v55.origin.CGFloat x = x;
  v55.origin.CGFloat y = y;
  v55.size.CGFloat width = width;
  v55.size.CGFloat height = height;
  double v10 = CGRectGetHeight(v55);
  if (v10 >= v9) {
    double v10 = v9;
  }
  CGFloat v11 = v10 * -0.35;
  v56.origin.CGFloat x = x;
  v56.origin.CGFloat y = y;
  v56.size.CGFloat width = width;
  v56.size.CGFloat height = height;
  CGRect v57 = CGRectInset(v56, v11, v11);
  v59.origin.CGFloat x = 0.0;
  v59.origin.CGFloat y = 0.0;
  v59.size.CGFloat width = 1.0;
  v59.size.CGFloat height = 1.0;
  CGRect v58 = CGRectIntersection(v57, v59);
  uint64_t v12 = (void *)sub_100399398(v2, v1, v58.origin.x, v58.origin.y, v58.size.width, v58.size.height);
  if (!v12)
  {
    sub_10021027C();
    swift_allocError();
    *(_OWORD *)uint64_t v46 = xmmword_1004508E0;
    *(unsigned char *)(v46 + 16) = 2;
    swift_willThrow();
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 168);
  id v15 = v12;
  double v16 = sub_10030CA60(v13, v14);
  uint64_t v17 = sub_1001E9464(v16);
  sub_10031C408((uint64_t)_swiftEmptyArrayStorage, &qword_1005296A0, &qword_1005296A8, (uint64_t (*)(uint64_t))sub_10032B1FC);
  id v18 = objc_allocWithZone((Class)VNImageRequestHandler);
  type metadata accessor for VNImageOption(0);
  sub_10032EFB4(&qword_100518590, type metadata accessor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v20 = [v18 initWithCGImage:v15 orientation:v17 options:isa];

  id v21 = [objc_allocWithZone((Class)VNGenerateForegroundInstanceMaskRequest) init];
  sub_10000F214(&qword_100521040);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_100440690;
  *(void *)(v22 + 32) = v21;
  specialized Array._endMutation()();
  sub_10000F734(0, &qword_100526330);
  id v23 = v21;
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = 0;
  unsigned int v25 = [v20 performRequests:v24 error:v0 + 120];

  uint64_t v26 = *(void **)(v0 + 120);
  if (!v25)
  {
    id v47 = v26;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_18:

    goto LABEL_24;
  }
  id v27 = v26;
  id v28 = [v23 results];
  if (!v28)
  {
LABEL_23:
    sub_10021027C();
    swift_allocError();
    *(void *)uint64_t v51 = 0xD00000000000001ALL;
    *(void *)(v51 + 8) = 0x800000010042BB20;
    *(unsigned char *)(v51 + 16) = 1;
    swift_willThrow();

    goto LABEL_24;
  }
  uint64_t v29 = v28;
  sub_10000F734(0, (unint64_t *)&unk_100529690);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v30 >> 62))
  {
    if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_8:
  if ((v30 & 0xC000000000000001) != 0)
  {
    id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v31 = *(id *)(v30 + 32);
  }
  BOOL v32 = v31;
  uint64_t v33 = *(void *)(v0 + 184);
  uint64_t v34 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  id v36 = [v32 instanceMask];
  sub_1003324B0(v36, 0.5, 0.5);

  int64_t v37 = v32;
  IndexSet.init(integer:)();
  IndexSet._bridgeToObjectiveC()(v38);
  uint64_t v40 = v39;
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
  *(void *)(v0 + 128) = 0;
  int64_t v41 = (__CVBuffer *)[v32 generateMaskedImageOfInstances:v40 fromRequestHandler:v20 inPlace:0 croppedToInstancesExtent:1 error:v0 + 128];

  id v42 = *(id *)(v0 + 128);
  if (!v41)
  {
    unint64_t v48 = v42;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_18;
  }
  *(void *)(v0 + 136) = 0;
  VTCreateCGImageFromCVPixelBuffer(v41, 0, (CGImageRef *)(v0 + 136));
  uint64_t v43 = *(void *)(v0 + 136);
  if (v43)
  {

    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v44(v43);
  }
  sub_10021027C();
  swift_allocError();
  *(_OWORD *)uint64_t v49 = xmmword_1004508E0;
  *(unsigned char *)(v49 + 16) = 2;
  swift_willThrow();

LABEL_24:
  swift_task_dealloc();
  uint64_t v52 = *(uint64_t (**)(void))(v0 + 8);
  return v52();
}

uint64_t sub_10031E184()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_1000EEA28(v0, qword_100529170);
  sub_10000F378(v0, (uint64_t)qword_100529170);
  return UUID.init()();
}

void sub_10031E1D0()
{
  v8.origin.CGFloat x = 0.0;
  v8.origin.CGFloat y = 0.0;
  v8.size.CGFloat width = 0.0;
  v8.size.CGFloat height = 0.0;
  CGFloat MinX = CGRectGetMinX(v8);
  v9.origin.CGFloat x = 0.0;
  v9.origin.CGFloat y = 0.0;
  v9.size.CGFloat width = 0.0;
  v9.size.CGFloat height = 0.0;
  CGFloat MinY = CGRectGetMinY(v9);
  v10.origin.CGFloat x = 0.0;
  v10.origin.CGFloat y = 0.0;
  v10.size.CGFloat width = 0.0;
  v10.size.CGFloat height = 0.0;
  CGFloat MaxX = CGRectGetMaxX(v10);
  v11.origin.CGFloat x = 0.0;
  v11.origin.CGFloat y = 0.0;
  v11.size.CGFloat width = 0.0;
  v11.size.CGFloat height = 0.0;
  CGFloat v3 = CGRectGetMinY(v11);
  v12.origin.CGFloat x = 0.0;
  v12.origin.CGFloat y = 0.0;
  v12.size.CGFloat width = 0.0;
  v12.size.CGFloat height = 0.0;
  CGFloat v4 = CGRectGetMinX(v12);
  v13.origin.CGFloat x = 0.0;
  v13.origin.CGFloat y = 0.0;
  v13.size.CGFloat width = 0.0;
  v13.size.CGFloat height = 0.0;
  CGFloat MaxY = CGRectGetMaxY(v13);
  v14.origin.CGFloat x = 0.0;
  v14.origin.CGFloat y = 0.0;
  v14.size.CGFloat width = 0.0;
  v14.size.CGFloat height = 0.0;
  CGFloat v6 = CGRectGetMaxX(v14);
  v15.origin.CGFloat x = 0.0;
  v15.origin.CGFloat y = 0.0;
  v15.size.CGFloat width = 0.0;
  v15.size.CGFloat height = 0.0;
  CGFloat v7 = CGRectGetMaxY(v15);
  *(CGFloat *)&xmmword_100529188 = MinX;
  *((CGFloat *)&xmmword_100529188 + 1) = MinY;
  qword_100529198 = *(void *)&MaxX;
  qword_1005291A0 = *(void *)&v3;
  *(CGFloat *)&xmmword_1005291A8 = v4;
  *((CGFloat *)&xmmword_1005291A8 + 1) = MaxY;
  qword_1005291B8 = *(void *)&v6;
  qword_1005291C0 = *(void *)&v7;
}

void sub_10031E2D8()
{
  qword_1005291C8 = 0;
}

void sub_10031E2E4()
{
  qword_1005291D0 = 0xFFF0000000000000;
}

uint64_t sub_10031E2F4()
{
  uint64_t v0 = sub_10033102C((uint64_t)&off_1004E4D20);
  uint64_t result = swift_arrayDestroy();
  qword_1005291D8 = v0;
  return result;
}

uint64_t sub_10031E340@<X0>(uint64_t a1@<X8>)
{
  if (qword_100517FD0 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1005291D8;
  CGFloat v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ObjectDetectorResult(0) + 28));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  swift_bridgeObjectRetain();
  LOBYTE(v5) = sub_1003DF6C4(v5, v6, v3);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10000F214(&qword_1005297A0);
  uint64_t v8 = v7;
  if (v5)
  {
    uint64_t v9 = *(int *)(v7 + 48);
    if (qword_100517FB0 != -1) {
      swift_once();
    }
    uint64_t v10 = a1 + v9;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = sub_10000F378(v11, (uint64_t)qword_100529170);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, v12, v11);
    if (qword_100517FB8 != -1) {
      swift_once();
    }
    uint64_t v13 = *((void *)&xmmword_100529188 + 1);
    uint64_t v30 = xmmword_100529188;
    uint64_t v14 = qword_100529198;
    uint64_t v15 = qword_1005291A0;
    long long v16 = xmmword_1005291A8;
    uint64_t v17 = qword_1005291B8;
    uint64_t v18 = qword_1005291C0;
    if (qword_100517FC8 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1005291D0;
    id v20 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)(a1 + v20[5]) = -1082130432;
    uint64_t v21 = a1 + v20[6];
    *(void *)uint64_t v21 = v30;
    *(void *)(v21 + 8) = v13;
    *(void *)(v21 + 16) = v14;
    *(void *)(v21 + 24) = v15;
    *(_OWORD *)(v21 + 32) = v16;
    *(void *)(v21 + 48) = v17;
    *(void *)(v21 + 56) = v18;
    uint64_t v22 = (void *)(a1 + v20[7]);
    *uint64_t v22 = 0x7974706D65;
    v22[1] = 0xE500000000000000;
    *(void *)(a1 + v20[8]) = 0;
    *(void *)(a1 + v20[9]) = v19;
    *(void *)(a1 + v20[10]) = &_swiftEmptySetSingleton;
    *(void *)(a1 + v20[11]) = _swiftEmptyArrayStorage;
    *(unsigned char *)(a1 + v20[14]) = 0;
    *(void *)(a1 + v20[12]) = _swiftEmptyArrayStorage;
    *(void *)(a1 + v20[13]) = 0;
    type metadata accessor for CVDetection();
    swift_storeEnumTagMultiPayload();
    *(double *)uint64_t v10 = sub_1003FD844();
    *(void *)(v10 + 8) = v23;
    *(void *)(v10 + 16) = v24;
    *(void *)(v10 + 24) = v25;
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v27 = a1;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v27 = a1;
    uint64_t v28 = 1;
  }

  return v26(v27, v28, 1, v8);
}

void sub_10031E668()
{
  type metadata accessor for UUID();
  sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (int *)type metadata accessor for ObjectDetectorResult(0);
  if ((*(_DWORD *)(v0 + v1[5]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = *(_DWORD *)(v0 + v1[5]);
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  uint64_t v3 = (Swift::UInt64 *)(v0 + v1[6]);
  Swift::UInt64 v4 = v3[1];
  Swift::UInt64 v5 = v3[2];
  Swift::UInt64 v6 = v3[3];
  Swift::UInt64 v7 = v3[4];
  Swift::UInt64 v8 = v3[5];
  Swift::UInt64 v9 = v3[6];
  Swift::UInt64 v20 = v3[7];
  if ((*v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *v3;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v4;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v5;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v6;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v8;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v9;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v20;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(void *)(v0 + v1[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = *(void *)(v0 + v1[8]);
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((*(void *)(v0 + v1[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *(void *)(v0 + v1[9]);
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
}

uint64_t sub_10031E800(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_1005297B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt64 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100333790();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  type metadata accessor for UUID();
  sub_10032EFB4(&qword_10051A048, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for ObjectDetectorResult(0);
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    Swift::UInt64 v10 = (long long *)(v3 + *(int *)(v9 + 24));
    long long v11 = v10[1];
    long long v16 = *v10;
    long long v17 = v11;
    long long v12 = v10[3];
    long long v18 = v10[2];
    long long v19 = v12;
    char v15 = 2;
    sub_100167ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + *(int *)(v9 + 32));
    char v15 = 4;
    sub_100107C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10031EAA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000F214(&qword_1005297A8);
  uint64_t v27 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v8 = (int *)type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v8);
  Swift::UInt64 v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100333790();
  id v31 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v25 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v28;
  LOBYTE(v33) = 0;
  sub_10032EFB4(&qword_10051A028, (void (*)(uint64_t))&type metadata accessor for UUID);
  Swift::UInt64 v13 = v29;
  uint64_t v14 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  LOBYTE(v33) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)(v11 + v8[5]) = v15;
  char v32 = 2;
  sub_100167A78();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v16 = (_OWORD *)(v11 + v8[6]);
  long long v17 = v34;
  *long long v16 = v33;
  v16[1] = v17;
  long long v18 = v36;
  v16[2] = v35;
  v16[3] = v18;
  LOBYTE(v33) = 3;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt64 v20 = (uint64_t *)(v11 + v8[7]);
  uint64_t *v20 = v19;
  v20[1] = v21;
  char v32 = 4;
  sub_100107BF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v11 + v8[8]) = v33;
  LOBYTE(v33) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v14);
  *(void *)(v11 + v8[9]) = v23;
  sub_100331E9C(v11, v26, type metadata accessor for ObjectDetectorResult);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v25);
  return sub_100331F04(v11, type metadata accessor for ObjectDetectorResult);
}

uint64_t sub_10031EF60()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      uint64_t result = 0x7372656E726F63;
      break;
    case 3:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 4:
      uint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      uint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031F02C(uint64_t a1)
{
  unint64_t v2 = sub_100333790();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10031F068(uint64_t a1)
{
  unint64_t v2 = sub_100333790();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10031F0A8(uint64_t a1)
{
  if (qword_100517FD0 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1005291D8;
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(a1 + 28));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  swift_bridgeObjectRetain();
  char v7 = sub_1003DF6C4(v5, v6, v3);
  swift_bridgeObjectRelease();
  uint64_t v8 = 1065353216;
  if (v7) {
    uint64_t v8 = 1;
  }
  return v8 | ((unint64_t)(v7 & 1) << 32);
}

Swift::Int sub_10031F15C(uint64_t a1, uint64_t a2)
{
  return sub_100321D78(a1, a2, (void (*)(unsigned char *))sub_10031E668);
}

Swift::Int sub_10031F178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100321DDC(a1, a2, a3, (void (*)(unsigned char *))sub_10031E668);
}

uint64_t sub_10031F190@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031EAA8(a1, a2);
}

uint64_t sub_10031F1A8(void *a1)
{
  return sub_10031E800(a1);
}

uint64_t sub_10031F1C0()
{
  uint64_t result = 0x74616C736E617274;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x747865546576696CLL;
      break;
    case 2:
      uint64_t result = 0x6574654461746164;
      break;
    case 3:
      uint64_t result = 0x65536C6175736976;
      break;
    case 4:
      uint64_t result = 0x6C6C4179706F63;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_10031F2B4()
{
  return VKDataDetectorTypes.debugDescription.getter(*v0);
}

void VKDataDetectorTypes.hash(into:)(int a1, Swift::UInt a2)
{
}

uint64_t sub_10031F2E4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10031F374()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_10031F3F4(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      unint64_t result = 0x7372656E726F63;
      break;
    case 3:
      unint64_t result = 0x6C6562616CLL;
      break;
    case 4:
      unint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 6:
      unint64_t result = 0x65676175676E616CLL;
      break;
    case 7:
      unint64_t result = 0x73656E696CLL;
      break;
    case 8:
      unint64_t result = 0x6574654461746164;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10031F548(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      unint64_t result = 0x7372656E726F63;
      break;
    case 3:
      unint64_t result = 0x6C6562616CLL;
      break;
    case 4:
      unint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 6:
      unint64_t result = 0x65676175676E616CLL;
      break;
    case 7:
      unint64_t result = 0x73656E696CLL;
      break;
    case 8:
      unint64_t result = 0x6574654461746164;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10031F69C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_100529BE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_1003355B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_10031F824()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10031F8A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_100529BF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100335604();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&v14[0] = *v3;
  char v15 = 0;
  type metadata accessor for VKDataDetectorTypes(0);
  sub_10032EFB4(&qword_100529BF8, type metadata accessor for VKDataDetectorTypes);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for TextDetectorResult.DataDetector(0);
    LOBYTE(v14[0]) = 1;
    type metadata accessor for UUID();
    sub_10032EFB4(&qword_10051A048, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    Swift::UInt64 v10 = (_OWORD *)((char *)v3 + *(int *)(v9 + 28));
    long long v11 = v10[1];
    v14[0] = *v10;
    v14[1] = v11;
    long long v12 = v10[3];
    void v14[2] = v10[2];
    v14[3] = v12;
    char v15 = 3;
    sub_100167ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_10031FB34()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  uint64_t v8 = type metadata accessor for TextDetectorResult.DataDetector(0);
  sub_10000FB74((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v7, (uint64_t *)&unk_100524ED0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  String.hash(into:)();
  uint64_t v9 = (Swift::UInt *)((char *)v0 + *(int *)(v8 + 28));
  Swift::UInt64 v10 = v9[1];
  Swift::UInt64 v11 = v9[2];
  Swift::UInt64 v12 = v9[3];
  Swift::UInt64 v13 = v9[4];
  Swift::UInt64 v14 = v9[5];
  Swift::UInt64 v15 = v9[6];
  Swift::UInt64 v16 = v9[7];
  if ((*v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = *v9;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v10;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = v11;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v12;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v13;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v22 = v14;
  }
  else {
    Swift::UInt64 v22 = 0;
  }
  Hasher._combine(_:)(v22);
  if ((v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v23 = v15;
  }
  else {
    Swift::UInt64 v23 = 0;
  }
  Hasher._combine(_:)(v23);
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v24 = v16;
  }
  else {
    Swift::UInt64 v24 = 0;
  }
  Hasher._combine(_:)(v24);
  return Hasher._finalize()();
}

uint64_t sub_10031FDC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100529BD0);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v10 = (int *)type metadata accessor for TextDetectorResult.DataDetector(0);
  __chkstk_darwin(v10);
  Swift::UInt64 v12 = (void **)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_100335604();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  Swift::UInt64 v23 = a1;
  uint64_t v13 = v25;
  type metadata accessor for VKDataDetectorTypes(0);
  char v31 = 0;
  sub_10032EFB4(&qword_100529BE0, type metadata accessor for VKDataDetectorTypes);
  uint64_t v14 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *Swift::UInt64 v12 = v27;
  type metadata accessor for UUID();
  LOBYTE(v27) = 1;
  sub_10032EFB4(&qword_10051A028, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10000FC34((uint64_t)v6, (uint64_t)v12 + v10[5], (uint64_t *)&unk_100524ED0);
  LOBYTE(v27) = 2;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt64 v16 = (void *)((char *)v12 + v10[6]);
  *Swift::UInt64 v16 = v15;
  v16[1] = v17;
  char v31 = 3;
  sub_100167A78();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = (uint64_t)v23;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v14);
  Swift::UInt64 v19 = (_OWORD *)((char *)v12 + v10[7]);
  long long v20 = v28;
  *Swift::UInt64 v19 = v27;
  v19[1] = v20;
  long long v21 = v30;
  void v19[2] = v29;
  v19[3] = v21;
  sub_100331E9C((uint64_t)v12, v24, type metadata accessor for TextDetectorResult.DataDetector);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v18);
  return sub_100331F04((uint64_t)v12, type metadata accessor for TextDetectorResult.DataDetector);
}

uint64_t sub_100320204(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10031F3F4(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10031F3F4(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100320290()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10031F3F4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003202F4()
{
  sub_10031F3F4(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100320348()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10031F3F4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1003203A8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100333938(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1003203D8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10031F3F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100320404()
{
  return sub_10031F548(*v0);
}

unint64_t sub_10032040C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100333938(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100320434(uint64_t a1)
{
  unint64_t v2 = sub_10033352C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100320470(uint64_t a1)
{
  unint64_t v2 = sub_10033352C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003204AC()
{
  uint64_t v1 = 0x697263736E617274;
  if (*v0 != 1) {
    uint64_t v1 = 0x65676175676E616CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E656469666E6F63;
  }
}

uint64_t sub_10032050C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100333984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100320534(uint64_t a1)
{
  unint64_t v2 = sub_1003355B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100320570(uint64_t a1)
{
  unint64_t v2 = sub_1003355B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003205AC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_10032F42C((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1003205FC()
{
  if ((*v0 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = *v0;
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  String.hash(into:)();

  return String.hash(into:)();
}

Swift::Int sub_100320674()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  String.hash(into:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

double sub_1003206F4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100333AEC(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10032073C(void *a1)
{
  return sub_10031F69C(a1);
}

unint64_t sub_100320754()
{
  unint64_t result = 0x7365707974;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x74786554776172;
      break;
    case 3:
      unint64_t result = 0x7372656E726F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003207E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100333D2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10032080C(uint64_t a1)
{
  unint64_t v2 = sub_100335604();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100320848(uint64_t a1)
{
  unint64_t v2 = sub_100335604();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10032088C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v8 - 8);
  Swift::UInt64 v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v2);
  sub_10000FB74((uint64_t)v2 + *(int *)(a2 + 20), (uint64_t)v10, (uint64_t *)&unk_100524ED0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  String.hash(into:)();
  uint64_t v11 = (Swift::UInt *)((char *)v2 + *(int *)(a2 + 28));
  Swift::UInt64 v12 = v11[1];
  Swift::UInt64 v13 = v11[2];
  Swift::UInt64 v14 = v11[3];
  Swift::UInt64 v15 = v11[4];
  Swift::UInt64 v16 = v11[5];
  Swift::UInt64 v17 = v11[6];
  Swift::UInt64 v18 = v11[7];
  if ((*v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *v11;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v12;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v13;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v22 = v14;
  }
  else {
    Swift::UInt64 v22 = 0;
  }
  Hasher._combine(_:)(v22);
  if ((v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v23 = v15;
  }
  else {
    Swift::UInt64 v23 = 0;
  }
  Hasher._combine(_:)(v23);
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v24 = v16;
  }
  else {
    Swift::UInt64 v24 = 0;
  }
  Hasher._combine(_:)(v24);
  if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v25 = v17;
  }
  else {
    Swift::UInt64 v25 = 0;
  }
  Hasher._combine(_:)(v25);
  if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v26 = v18;
  }
  else {
    Swift::UInt64 v26 = 0;
  }
  Hasher._combine(_:)(v26);
}

Swift::Int sub_100320B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v8 - 8);
  Swift::UInt64 v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v2);
  sub_10000FB74((uint64_t)v2 + *(int *)(a2 + 20), (uint64_t)v10, (uint64_t *)&unk_100524ED0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  String.hash(into:)();
  uint64_t v11 = (Swift::UInt *)((char *)v2 + *(int *)(a2 + 28));
  Swift::UInt64 v12 = v11[1];
  Swift::UInt64 v13 = v11[2];
  Swift::UInt64 v14 = v11[3];
  Swift::UInt64 v15 = v11[4];
  Swift::UInt64 v16 = v11[5];
  Swift::UInt64 v17 = v11[6];
  Swift::UInt64 v18 = v11[7];
  if ((*v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *v11;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v12;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v13;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v22 = v14;
  }
  else {
    Swift::UInt64 v22 = 0;
  }
  Hasher._combine(_:)(v22);
  if ((v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v23 = v15;
  }
  else {
    Swift::UInt64 v23 = 0;
  }
  Hasher._combine(_:)(v23);
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v24 = v16;
  }
  else {
    Swift::UInt64 v24 = 0;
  }
  Hasher._combine(_:)(v24);
  if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v25 = v17;
  }
  else {
    Swift::UInt64 v25 = 0;
  }
  Hasher._combine(_:)(v25);
  if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v26 = v18;
  }
  else {
    Swift::UInt64 v26 = 0;
  }
  Hasher._combine(_:)(v26);
  return Hasher._finalize()();
}

uint64_t sub_100320D98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10031FDC0(a1, a2);
}

uint64_t sub_100320DB0(void *a1)
{
  return sub_10031F8A8(a1);
}

uint64_t sub_100320DC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v29 = (int *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = sub_10000F214(&qword_1005296E8);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v8);
  Swift::UInt64 v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10033352C();
  long long v30 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = v28;
  Swift::UInt64 v24 = v10;
  Swift::UInt64 v25 = a1;
  LOBYTE(v32) = 0;
  sub_10032EFB4(&qword_10051A028, (void (*)(uint64_t))&type metadata accessor for UUID);
  Swift::UInt64 v12 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  Swift::UInt64 v13 = v24;
  (*(void (**)(char *, int *, uint64_t))(v27 + 32))(v24, v12, v4);
  LOBYTE(v32) = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  long long v29 = v8;
  *(_DWORD *)&v13[v8[5]] = v14;
  char v36 = 2;
  sub_100167A78();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  Swift::UInt64 v15 = &v13[v29[6]];
  long long v16 = v33;
  *(_OWORD *)Swift::UInt64 v15 = v32;
  *((_OWORD *)v15 + 1) = v16;
  long long v17 = v35;
  *((_OWORD *)v15 + 2) = v34;
  *((_OWORD *)v15 + 3) = v17;
  LOBYTE(v32) = 3;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt64 v19 = (uint64_t *)&v13[v29[7]];
  *Swift::UInt64 v19 = v18;
  v19[1] = v20;
  char v36 = 4;
  sub_100107BF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v13[v29[8]] = v32;
  LOBYTE(v32) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v13[v29[9]] = v21;
  sub_10000F214(&qword_100529710);
  char v36 = 6;
  sub_1003335D4(&qword_100529718);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v13[v29[10]] = v32;
  sub_10000F214(&qword_100529720);
  char v36 = 7;
  sub_100333638(&qword_100529728, (void (*)(void))sub_100333580);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v13[v29[11]] = v32;
  LOBYTE(v32) = 9;
  v13[v8[14]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  sub_10000F214(&qword_100529738);
  char v36 = 8;
  sub_1003336FC(&qword_100529740, &qword_100529748);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v31);
  uint64_t v22 = (uint64_t)v24;
  *(void *)&v24[v8[12]] = v32;
  *(void *)(v22 + v8[13]) = 0;
  sub_100331E9C(v22, v26, type metadata accessor for TextDetectorResult);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v25);
  return sub_100331F04(v22, type metadata accessor for TextDetectorResult);
}

uint64_t sub_100321510@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, v2, v6);
  uint64_t v7 = (int *)type metadata accessor for TextDetectorResult(0);
  uint64_t v8 = v7[6];
  int v9 = *(_DWORD *)(v2 + v7[5]);
  long long v10 = *(_OWORD *)(v2 + v8 + 48);
  v27[6] = *(_OWORD *)(v2 + v8 + 32);
  v27[7] = v10;
  long long v11 = *(_OWORD *)(v2 + v8 + 16);
  v27[4] = *(_OWORD *)(v2 + v8);
  v27[5] = v11;
  sub_1003FF210((uint64_t)v27, a2, *(double *)(v2 + v7[8]));
  Swift::UInt64 v12 = (uint64_t *)(v2 + v7[7]);
  uint64_t v13 = *(void *)(v2 + v7[9]);
  uint64_t v14 = *(void *)(v2 + v7[10]);
  uint64_t v15 = *(void *)(v3 + v7[11]);
  char v16 = *(unsigned char *)(v3 + v7[14]);
  uint64_t v17 = *(void *)(v3 + v7[12]);
  uint64_t v18 = *(void **)(v3 + v7[13]);
  *(_DWORD *)(a1 + v7[5]) = v9;
  uint64_t v19 = *v12;
  uint64_t v20 = v12[1];
  uint64_t v21 = (_OWORD *)(a1 + v7[6]);
  long long v22 = v27[1];
  _OWORD *v21 = v27[0];
  v21[1] = v22;
  long long v23 = v27[3];
  void v21[2] = v27[2];
  v21[3] = v23;
  Swift::UInt64 v24 = (void *)(a1 + v7[7]);
  *Swift::UInt64 v24 = v19;
  v24[1] = v20;
  *(double *)(a1 + v7[8]) = a2;
  *(void *)(a1 + v7[9]) = v13;
  *(void *)(a1 + v7[10]) = v14;
  *(void *)(a1 + v7[11]) = v15;
  *(unsigned char *)(a1 + v7[14]) = v16;
  *(void *)(a1 + v7[12]) = v17;
  *(void *)(a1 + v7[13]) = v18;
  id v25 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void sub_10032169C(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for UUID();
  sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (int *)type metadata accessor for TextDetectorResult(0);
  if ((*(_DWORD *)(v1 + v4[5]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = *(_DWORD *)(v1 + v4[5]);
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  uint64_t v6 = (Swift::UInt64 *)(v1 + v4[6]);
  Swift::UInt64 v7 = v6[1];
  Swift::UInt64 v8 = v6[2];
  Swift::UInt64 v9 = v6[3];
  Swift::UInt64 v10 = v6[4];
  Swift::UInt64 v11 = v6[5];
  Swift::UInt64 v12 = v6[6];
  Swift::UInt64 v28 = v6[7];
  if ((*v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = *v6;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v8;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v9;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v10;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v11;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = v12;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v28 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v28;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(void *)(v1 + v4[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = *(void *)(v1 + v4[8]);
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if ((*(void *)(v1 + v4[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v22 = *(void *)(v1 + v4[9]);
  }
  else {
    Swift::UInt64 v22 = 0;
  }
  Hasher._combine(_:)(v22);
  uint64_t v23 = *(void *)(v1 + v4[10]);
  swift_bridgeObjectRetain();
  sub_10032E174(a1, v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v2 + v4[11]);
  swift_bridgeObjectRetain();
  sub_10032E0C0(a1, v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v2 + v4[12]);
  swift_bridgeObjectRetain();
  sub_10032DD14(a1, v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(v2 + v4[13]);
  if (v26)
  {
    Hasher._combine(_:)(1u);
    id v27 = v26;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v2 + v4[14]));
}

uint64_t sub_1003218EC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214((uint64_t *)&unk_100529750);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt64 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10033352C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  type metadata accessor for UUID();
  sub_10032EFB4(&qword_10051A048, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    Swift::UInt64 v9 = (int *)type metadata accessor for TextDetectorResult(0);
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    Swift::UInt64 v10 = (long long *)(v3 + v9[6]);
    long long v11 = v10[1];
    long long v16 = *v10;
    long long v17 = v11;
    long long v12 = v10[3];
    long long v18 = v10[2];
    long long v19 = v12;
    char v15 = 2;
    sub_100167ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + v9[8]);
    char v15 = 4;
    sub_100107C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + v9[10]);
    char v15 = 6;
    sub_10000F214(&qword_100529710);
    sub_1003335D4(&qword_100529770);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + v9[11]);
    char v15 = 7;
    sub_10000F214(&qword_100529720);
    sub_100333638(&qword_100529778, (void (*)(void))sub_1003336A8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v16 = *(void *)(v3 + v9[12]);
    char v15 = 8;
    sub_10000F214(&qword_100529738);
    sub_1003336FC(&qword_100529788, (unint64_t *)&unk_100529790);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100321D3C()
{
  return 1061997773;
}

Swift::Int sub_100321D60(uint64_t a1, uint64_t a2)
{
  return sub_100321D78(a1, a2, (void (*)(unsigned char *))sub_10032169C);
}

Swift::Int sub_100321D78(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_100321DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100321DDC(a1, a2, a3, (void (*)(unsigned char *))sub_10032169C);
}

Swift::Int sub_100321DDC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_100321E20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100320DC8(a1, a2);
}

uint64_t sub_100321E38(void *a1)
{
  return sub_1003218EC(a1);
}

uint64_t sub_100321E50()
{
  if (*v0) {
    return 1954047348;
  }
  else {
    return 0x7463656A626FLL;
  }
}

uint64_t sub_100321E80(char a1)
{
  if ((a1 & 1) == 0)
  {
    id v1 = [objc_allocWithZone((Class)VNRecognizeObjectsRequest) init];
    id v11 = 0;
    unsigned __int8 v2 = [v1 setRevision:3737841667 error:&v11];
    id v3 = v11;
    if (v2)
    {
LABEL_7:
      id v8 = v3;
      return (uint64_t)v1;
    }
    id v4 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
  }
  id v1 = [objc_allocWithZone((Class)VNRecognizeDocumentsRequest) init];
  [v1 setRecognitionLevel:0];
  Class isa = (Class)[self preferredLanguages];
  if (!isa)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v1 setRecognitionLanguages:isa];

  [v1 setUsesAlternateLineGrouping:1];
  [v1 setUsesLanguageDetection:1];
  LODWORD(v6) = 1008981770;
  [v1 setMinimumTextHeight:v6];
  [v1 setKeepResourcesLoaded:1];
  id v11 = 0;
  unsigned int v7 = [v1 setRevision:1 error:&v11];
  id v3 = v11;
  if (v7) {
    goto LABEL_7;
  }
  id v10 = v11;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1003220BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v98 = a8;
  uint64_t v99 = a3;
  uint64_t v100 = a2;
  uint64_t v97 = a9;
  uint64_t v14 = (void *)(a5 & 0x100);
  Swift::UInt v15 = (Swift::UInt)[a1 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v18 = v17;

  if ((a7 & 1) == 0)
  {
    self;
    uint64_t v19 = swift_dynamicCastObjCClass();
    if (v19)
    {
      Swift::UInt64 v20 = (void *)v19;
      char v21 = BYTE1(v14);
      id v22 = a1;
      id v23 = [v20 results];
      if (v23)
      {
        uint64_t v24 = v23;
        swift_bridgeObjectRelease();
        sub_10000F734(0, &qword_1005298B8);
        unint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        __chkstk_darwin(v26);
        uint64_t v86 = v98;
        uint64_t v87 = v97;
        uint64_t v88 = a4;
        LOBYTE(v89) = a5 & 1;
        BYTE1(v89) = v21;
        HIDWORD(v89) = HIDWORD(a5);
        LOBYTE(v90) = a6 & 1;
        uint64_t v91 = v99;
        uint64_t v92 = v100;
        long long v18 = sub_1003DE0F0((void (*)(id *))sub_100334028, (uint64_t)v85, v25);
        swift_bridgeObjectRelease();

        return (uint64_t)v18;
      }
      goto LABEL_32;
    }
LABEL_33:
    sub_10021027C();
    swift_allocError();
    *(void *)uint64_t v61 = v16;
    *(void *)(v61 + 8) = v18;
    *(unsigned char *)(v61 + 16) = 1;
    swift_willThrow();
    return (uint64_t)v18;
  }
  self;
  uint64_t v27 = swift_dynamicCastObjCClass();
  if (!v27) {
    goto LABEL_33;
  }
  Swift::UInt64 v28 = (void *)v27;
  id v29 = v14;
  id v30 = a1;
  id v31 = [v28 results];
  if (!v31)
  {
LABEL_32:

    goto LABEL_33;
  }
  long long v32 = v31;
  swift_bridgeObjectRelease();
  sub_10000F734(0, &qword_1005296C0);
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v35 = sub_100331608(_swiftEmptyArrayStorage);
  unint64_t v112 = v35;
  id v111 = 0;
  if (v33 >> 62) {
    goto LABEL_39;
  }
  uint64_t v36 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v37 = v106;
    id v96 = v30;
    if (!v36)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    if ((v33 & 0xC000000000000001) == 0) {
      break;
    }
    id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_13:
    id v30 = v38;
    BOOL v39 = v29 != 0;
    swift_bridgeObjectRelease();
    id v40 = [self analysisWithDocumentObservation:v30];
    sub_100334078(v40, 4095, v39);
    id v41 = [v40 dataDetectorInfo];
    id v111 = v41;
    if (!v41)
    {

      goto LABEL_44;
    }
    id v94 = v41;
    id v42 = [v94 elements];
    sub_10000F734(0, &qword_1005298C0);
    Swift::UInt v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v95 = v40;
    if (v15 >> 62) {
      goto LABEL_42;
    }
    uint64_t v43 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43) {
      goto LABEL_43;
    }
LABEL_16:
    unint64_t v104 = v33;
    unint64_t v105 = v15 & 0xC000000000000001;
    uint64_t v34 = 4;
    Swift::UInt v102 = v15;
    id v103 = v30;
    uint64_t v101 = v43;
    while (1)
    {
      id v29 = (id)(v34 - 4);
      id v45 = v105 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v15 + 8 * v34);
      uint64_t v46 = v45;
      if (__OFADD__(v29, 1)) {
        break;
      }
      uint64_t v107 = v34 - 3;
      id v30 = (id)v36;
      Swift::UInt v15 = (Swift::UInt)[v45 range];
      Swift::UInt v48 = v47;
      id v29 = v46;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v110 = (void *)v35;
      unint64_t v33 = sub_10032B5A0(v15, v48);
      uint64_t v51 = *(void *)(v35 + 16);
      BOOL v52 = (v50 & 1) == 0;
      uint64_t v53 = v51 + v52;
      if (__OFADD__(v51, v52)) {
        goto LABEL_37;
      }
      char v54 = v50;
      if (*(void *)(v35 + 24) >= v53)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1001F8018();
        }
      }
      else
      {
        sub_1001F1E38(v53, isUniquelyReferenced_nonNull_native);
        unint64_t v55 = sub_10032B5A0(v15, v48);
        if ((v54 & 1) != (v56 & 1))
        {
LABEL_96:
          type metadata accessor for _NSRange(0);
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v33 = v55;
      }
      uint64_t v36 = (uint64_t)v30;
      unint64_t v35 = (unint64_t)v110;
      if (v54)
      {
        uint64_t v44 = v110[7];

        *(void *)(v44 + 8 * v33) = v29;
      }
      else
      {
        v110[(v33 >> 6) + 8] |= 1 << v33;
        CGRect v57 = (Swift::UInt *)(*(void *)(v35 + 48) + 16 * v33);
        *CGRect v57 = v15;
        v57[1] = v48;
        *(void *)(*(void *)(v35 + 56) + 8 * v33) = v29;
        uint64_t v58 = *(void *)(v35 + 16);
        BOOL v59 = __OFADD__(v58, 1);
        uint64_t v60 = v58 + 1;
        if (v59) {
          goto LABEL_38;
        }
        *(void *)(v35 + 16) = v60;
      }
      unint64_t v112 = v35;

      swift_bridgeObjectRelease();
      ++v34;
      Swift::UInt v15 = v102;
      uint64_t v37 = v106;
      id v30 = v103;
      unint64_t v33 = v104;
      if (v107 == v101) {
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
  }
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v38 = *(id *)(v33 + 32);
    goto LABEL_13;
  }
  __break(1u);
LABEL_42:
  swift_bridgeObjectRetain();
  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v43) {
    goto LABEL_16;
  }
LABEL_43:

  swift_bridgeObjectRelease();
LABEL_44:
  uint64_t v34 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_45:
  swift_bridgeObjectRetain();
  uint64_t v62 = NSNotFound.getter();
  int64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v65 = v35 + 64;
  uint64_t v66 = 1 << *(unsigned char *)(v35 + 32);
  uint64_t v67 = -1;
  if (v66 < 64) {
    uint64_t v67 = ~(-1 << v66);
  }
  unint64_t v68 = v67 & *(void *)(v35 + 64);
  int64_t v69 = (unint64_t)(v66 + 63) >> 6;
  do
  {
    while (2)
    {
      uint64_t v70 = v64;
      uint64_t v71 = v62;
      if (v68)
      {
        unint64_t v72 = __clz(__rbit64(v68));
        v68 &= v68 - 1;
        unint64_t v73 = v72 | (v63 << 6);
      }
      else
      {
        int64_t v74 = v63 + 1;
        if (__OFADD__(v63, 1)) {
          goto LABEL_92;
        }
        if (v74 >= v69) {
          goto LABEL_78;
        }
        unint64_t v75 = *(void *)(v65 + 8 * v74);
        ++v63;
        if (!v75)
        {
          int64_t v63 = v74 + 1;
          if (v74 + 1 >= v69) {
            goto LABEL_78;
          }
          unint64_t v75 = *(void *)(v65 + 8 * v63);
          if (!v75)
          {
            int64_t v63 = v74 + 2;
            if (v74 + 2 >= v69) {
              goto LABEL_78;
            }
            unint64_t v75 = *(void *)(v65 + 8 * v63);
            if (!v75)
            {
              int64_t v63 = v74 + 3;
              if (v74 + 3 >= v69) {
                goto LABEL_78;
              }
              unint64_t v75 = *(void *)(v65 + 8 * v63);
              if (!v75)
              {
                int64_t v63 = v74 + 4;
                if (v74 + 4 >= v69) {
                  goto LABEL_78;
                }
                unint64_t v75 = *(void *)(v65 + 8 * v63);
                if (!v75)
                {
                  int64_t v76 = v74 + 5;
                  if (v76 >= v69) {
                    goto LABEL_78;
                  }
                  unint64_t v75 = *(void *)(v65 + 8 * v76);
                  if (!v75)
                  {
                    while (1)
                    {
                      int64_t v63 = v76 + 1;
                      if (__OFADD__(v76, 1)) {
                        goto LABEL_94;
                      }
                      if (v63 >= v69) {
                        goto LABEL_78;
                      }
                      unint64_t v75 = *(void *)(v65 + 8 * v63);
                      ++v76;
                      if (v75) {
                        goto LABEL_67;
                      }
                    }
                  }
                  int64_t v63 = v76;
                }
              }
            }
          }
        }
LABEL_67:
        unint64_t v68 = (v75 - 1) & v75;
        unint64_t v73 = __clz(__rbit64(v75)) + (v63 << 6);
      }
      uint64_t v77 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v73);
      uint64_t v62 = *v77;
      uint64_t v64 = v77[1];
      if (!v70) {
        continue;
      }
      break;
    }
    if (__OFADD__(v71, v70))
    {
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_96;
    }
    BOOL v59 = __OFADD__(v62, v64);
    uint64_t v78 = v62 + v64;
    if (v59) {
      goto LABEL_91;
    }
    if (v71 + v70 > v78) {
      uint64_t v78 = v71 + v70;
    }
    if (v71 < v62) {
      uint64_t v62 = v71;
    }
    BOOL v59 = __OFSUB__(v78, v62);
    uint64_t v64 = v78 - v62;
  }
  while (!v59);
  __break(1u);
LABEL_78:
  swift_release();
  long long v110 = (void *)v34;
  if (v36)
  {
    swift_bridgeObjectRetain();
    uint64_t v79 = 4;
    while (1)
    {
      id v80 = (v33 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v33 + 8 * v79);
      unint64_t v35 = (unint64_t)v80;
      uint64_t v81 = v79 - 3;
      if (__OFADD__(v79 - 4, 1)) {
        goto LABEL_93;
      }
      id v109 = v80;
      sub_100322A14(&v109, &v108);
      if (v37) {
        goto LABEL_95;
      }
      uint64_t v37 = 0;

      sub_10019FFCC(v108);
      ++v79;
      if (v81 == v36)
      {
        uint64_t v82 = swift_bridgeObjectRelease_n();
        long long v83 = v110;
        goto LABEL_88;
      }
    }
  }
  uint64_t v82 = swift_bridgeObjectRelease();
  long long v83 = _swiftEmptyArrayStorage;
LABEL_88:
  __chkstk_darwin(v82);
  uint64_t v86 = v98;
  uint64_t v87 = v97;
  uint64_t v88 = v71;
  uint64_t v89 = v70;
  uint64_t v90 = &v112;
  uint64_t v91 = v99;
  uint64_t v92 = v100;
  uint64_t v93 = &v111;
  long long v18 = sub_100330834((uint64_t)v83, (void (*)(id, id))sub_1003340FC, (uint64_t)v85);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void sub_100322A14(id *a1@<X0>, void *a2@<X8>)
{
  id v31 = [*a1 getCRDocumentOutputRegion];
  id v3 = [v31 contentsWithTypes:4];
  sub_10000F734(0, &qword_1005298C8);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62) {
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  sub_10000F734(0, &qword_1005298E0);
  if (!swift_dynamicCastMetatype())
  {
    uint64_t v23 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v23)
    {
      uint64_t v24 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
      do
      {
        self;
        if (!swift_dynamicCastObjCClass()) {
          break;
        }
        v24 += 8;
        --v23;
      }
      while (v23);
    }
  }
  swift_bridgeObjectRelease();
  while (1)
  {
    uint64_t v5 = self;
    sub_10000F734(0, &qword_1005298E0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v7 = [v5 groupedParagraphBlocksFromParagraphs:isa];

    sub_10000F734(0, &qword_1005298E8);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62) {
      break;
    }
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v10 = v31;
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_26;
    }
LABEL_6:
    id v30 = a2;
    id v11 = _swiftEmptyArrayStorage;
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v8 + 8 * v12);
      uint64_t v14 = v13;
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = _swiftEmptyArrayStorage;
      long long v17 = (unint64_t *)(v16 + 16);
      aBlock[4] = sub_100334174;
      void aBlock[5] = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100323110;
      aBlock[3] = &unk_1004F48C8;
      long long v18 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v14 enumerateContentsWithTypes:4 usingBlock:v18];
      _Block_release(v18);
      swift_beginAccess();
      unint64_t v19 = *v17;
      swift_bridgeObjectRetain();
      swift_release();
      a2 = v31;
      Swift::UInt64 v20 = sub_1003305B4(v19, a2);

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v11 = sub_100329A24(0, v11[2] + 1, 1, v11, &qword_1005298F0, (uint64_t *)&unk_1005298F8);
      }
      unint64_t v22 = v11[2];
      unint64_t v21 = v11[3];
      if (v22 >= v21 >> 1) {
        id v11 = sub_100329A24((void *)(v21 > 1), v22 + 1, 1, v11, &qword_1005298F0, (uint64_t *)&unk_1005298F8);
      }
      long long v11[2] = v22 + 1;
      v11[v22 + 4] = v20;
      ++v12;
      if (v15 == v9)
      {

        swift_bridgeObjectRelease();
        a2 = v30;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_24:
    sub_10000F734(0, &qword_1005298E0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease_n();
  }
  id v25 = v31;
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  if (v9) {
    goto LABEL_6;
  }
LABEL_26:

  swift_bridgeObjectRelease();
  id v11 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease();
  uint64_t v26 = v11[2];
  if (v26)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = 0;
    Swift::UInt64 v28 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v29 = v11[v27++ + 4];
      aBlock[0] = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10019FFCC(v29);
      swift_bridgeObjectRelease();
      Swift::UInt64 v28 = (void *)aBlock[0];
    }
    while (v26 != v27);

    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();

    Swift::UInt64 v28 = _swiftEmptyArrayStorage;
  }
  *a2 = v28;
}

void sub_100322F78(void *a1, uint64_t a2, uint64_t a3)
{
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (!v5) {
    return;
  }
  double v6 = (void *)v5;
  id v12 = a1;
  id v7 = [v6 children];
  if (v7)
  {
    unint64_t v8 = v7;
    sub_10000F734(0, &qword_1005298C8);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v9 >> 62))
    {
LABEL_4:
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_5:
  swift_bridgeObjectRelease();
  if (v10)
  {
    swift_beginAccess();
    id v11 = v12;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
  }
}

void sub_100323110(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_100323184(void *a1@<X0>, void *a2@<X1>, Swift::Int a3@<X2>, Swift::Int a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void **a8@<X7>, uint64_t a9@<X8>, uint64_t a10, NLLanguage a11)
{
  uint64_t v140 = a7;
  uint64_t v142 = a6;
  v138.length = a4;
  v138.location = a3;
  id v137 = a2;
  NLLanguage v144 = a11;
  uint64_t v143 = a10;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v133 = *(void *)(v15 - 8);
  double v16 = __chkstk_darwin(v15);
  long long v141 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [a1 children:v16];
  if (v18)
  {
    unint64_t v19 = v18;
    sub_10000F734(0, &qword_1005298C8);
    unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v139 = a5;
  uint64_t v145 = v20 >> 62;
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v146 = (void *)v20;
  uint64_t v136 = a9;
  long long v135 = a8;
  uint64_t v134 = v15;
  if (v21)
  {
    if (v21 < 1)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      return;
    }
    uint64_t v22 = 0;
    unint64_t v23 = v20 & 0xC000000000000001;
    uint64_t v24 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (v23) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v20 + 8 * v22 + 32);
      }
      uint64_t v26 = v25;
      id v27 = [v25 recognizedLocale];
      if (v27)
      {
        Swift::UInt64 v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = sub_100328860(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v33 = *((void *)v24 + 2);
        unint64_t v32 = *((void *)v24 + 3);
        if (v33 >= v32 >> 1) {
          uint64_t v24 = sub_100328860((char *)(v32 > 1), v33 + 1, 1, v24);
        }
        *((void *)v24 + 2) = v33 + 1;
        uint64_t v34 = &v24[16 * v33];
        *((void *)v34 + 4) = v29;
        *((void *)v34 + 5) = v31;
        unint64_t v20 = (unint64_t)v146;
      }
      else
      {
      }
      ++v22;
    }
    while (v21 != v22);
  }
  else
  {
    uint64_t v24 = (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_10033102C((uint64_t)v24);
  swift_bridgeObjectRelease();
  id v36 = [a1 text];
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v40 = v39;
  }
  else
  {
    uint64_t v38 = 0;
    id v40 = 0;
  }
  uint64_t v41 = v140;
  unint64_t v42 = swift_bridgeObjectRetain();
  uint64_t v43 = sub_1003309E8(v42, v20);
  swift_bridgeObjectRelease();
  uint64_t v44 = v43[2];
  if (v44)
  {
    if (v44 == 1)
    {
      uint64_t v45 = 0;
      float v46 = 0.0;
    }
    else
    {
      uint64_t v45 = v44 & 0x7FFFFFFFFFFFFFFELL;
      Swift::UInt v47 = (float *)v43 + 9;
      float v46 = 0.0;
      uint64_t v48 = v44 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        float v46 = (float)(v46 + *(v47 - 1)) + *v47;
        v47 += 2;
        v48 -= 2;
      }
      while (v48);
      if (v44 == v45) {
        goto LABEL_33;
      }
    }
    uint64_t v49 = v44 - v45;
    char v50 = (float *)v43 + v45 + 8;
    do
    {
      float v51 = *v50++;
      float v46 = v46 + v51;
      --v49;
    }
    while (v49);
  }
  else
  {
    float v46 = 0.0;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t v149 = 0;
  unint64_t v150 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v52._countAndFlagsBits = 91;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  if (v145)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v53 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v145 = v53;
  *(void *)&v148[0] = v53;
  v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 23389;
  v55._object = (void *)0xE200000000000000;
  String.append(_:)(v55);
  *(void *)&v148[0] = v35;
  sub_10000F214(&qword_100529710);
  sub_100013AA8((unint64_t *)&unk_1005205A0, &qword_100529710);
  sub_1000317A0();
  v56._countAndFlagsBits = Sequence<>.joined(separator:)();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._countAndFlagsBits = 23389;
  v57._object = (void *)0xE200000000000000;
  String.append(_:)(v57);
  Float.write<A>(to:)();
  v58._countAndFlagsBits = 5966429;
  v58._object = (void *)0xE300000000000000;
  String.append(_:)(v58);
  if (!v40) {
    goto LABEL_68;
  }
  v59._countAndFlagsBits = v38;
  v59._object = v40;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 93;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  uint64_t v61 = v149;
  unint64_t v130 = v150;
  id v62 = [v137 rangeOfContentRegion:a1];
  Swift::UInt v64 = v63;
  unint64_t v65 = sub_100331608(_swiftEmptyArrayStorage);
  __C::_NSRange_optional v158 = _NSRange.intersection(_:)(v138);
  uint64_t v131 = v61;
  if (v158.is_nil)
  {
    uint64_t v66 = v139;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v66 = v139;
    uint64_t v67 = swift_bridgeObjectRetain();
    sub_100323CA4(v67, (uint64_t)v62, v64);
    unint64_t v65 = v68;
    v158.value.location = swift_bridgeObjectRelease();
  }
  __chkstk_darwin(v158.value.location);
  NLLanguage v69 = v144;
  *(&v129 - 4) = v143;
  *(&v129 - 3) = (uint64_t)v69;
  *(&v129 - 2) = v142;
  *(&v129 - 1) = v41;
  uint64_t v139 = sub_100330BAC(v65, (void (*)(uint64_t, uint64_t, id))sub_100334130, (uint64_t)(&v129 - 6));
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)v66 + 16))
  {
    sub_10032B5A0((Swift::UInt)v62, v64);
    int v71 = v70;
  }
  else
  {
    int v71 = 0;
  }
  uint64_t v72 = v145;
  id v73 = [a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v74 = [a1 boundingQuad];
  if (!v74) {
    id v74 = [objc_allocWithZone((Class)CRNormalizedQuad) initWithNormalizedBoundingBox:0.0, 0.0, 0.0, 0.0, 1.0, 1.0];
  }
  type metadata accessor for CVCoordinator(0);
  [v74 topLeft];
  uint64_t v140 = v75;
  unint64_t v77 = v76;
  [v74 topRight];
  uint64_t v79 = v78;
  uint64_t v81 = v80;
  [v74 bottomLeft];
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  [v74 bottomRight];
  uint64_t v87 = v86;
  uint64_t v89 = v88;

  uint64_t v149 = v140;
  unint64_t v150 = v77;
  uint64_t v151 = v79;
  uint64_t v152 = v81;
  uint64_t v153 = v83;
  uint64_t v154 = v85;
  uint64_t v155 = v87;
  uint64_t v156 = v89;
  double v90 = sub_1003FD844();
  uint64_t v91 = v143;
  NLLanguage v92 = v144;
  sub_1001E9140(v142, v143, (uint64_t)v144, (CGFloat *)v148, v90, v93, v94, v95);
  double v96 = sub_10030CA60(v91, (uint64_t)v92);
  double v97 = sub_10030CA28(v91, (uint64_t)v92);
  uint64_t v132 = v35;
  if (v72)
  {
    uint64_t v147 = _swiftEmptyArrayStorage;
    sub_100040E3C(0, v72 & ~(v72 >> 63), 0);
    if ((v72 & 0x8000000000000000) == 0)
    {
      LODWORD(v143) = v71;
      uint64_t v98 = 0;
      uint64_t v99 = v147;
      unint64_t v100 = v20 & 0xC000000000000001;
      NLLanguage v144 = NLLanguageUndetermined;
      do
      {
        if (v100) {
          id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v101 = *(id *)(v20 + 8 * v98 + 32);
        }
        Swift::UInt v102 = v101;
        [v101 rawConfidence];
        int v104 = v103;
        id v105 = [v102 text];
        if (v105)
        {
          uint64_t v106 = v105;
          uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v109 = v108;
        }
        else
        {
          uint64_t v107 = 0;
          unint64_t v109 = 0xE000000000000000;
        }
        id v110 = [v102 recognizedLocale];
        if (v110)
        {
          id v111 = v110;
          uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v114 = v113;

          Swift::UInt v102 = v111;
        }
        else
        {
          uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v114 = v115;
        }

        uint64_t v147 = v99;
        unint64_t v117 = v99[2];
        unint64_t v116 = v99[3];
        if (v117 >= v116 >> 1)
        {
          sub_100040E3C(v116 > 1, v117 + 1, 1);
          uint64_t v99 = v147;
        }
        v99[2] = v117 + 1;
        uint64_t v118 = &v99[5 * v117];
        *((_DWORD *)v118 + 8) = v104;
        ++v98;
        v118[5] = v107;
        v118[6] = v109;
        v118[7] = v112;
        v118[8] = v114;
        unint64_t v20 = (unint64_t)v146;
      }
      while (v145 != v98);
      swift_bridgeObjectRelease();
      unint64_t v119 = v130;
      uint64_t v120 = v139;
      LOBYTE(v71) = v143;
      goto LABEL_62;
    }
    goto LABEL_67;
  }
  swift_bridgeObjectRelease();
  uint64_t v99 = _swiftEmptyArrayStorage;
  unint64_t v119 = v130;
  uint64_t v120 = v139;
LABEL_62:
  uint64_t v146 = *v135;
  uint64_t v121 = v136;
  (*(void (**)(uint64_t, char *, uint64_t))(v133 + 32))(v136, v141, v134);
  long long v122 = (int *)type metadata accessor for TextDetectorResult(0);
  *(float *)(v121 + v122[5]) = v46;
  uint64_t v123 = (_OWORD *)(v121 + v122[6]);
  long long v124 = v148[1];
  _OWORD *v123 = v148[0];
  v123[1] = v124;
  long long v125 = v148[3];
  v123[2] = v148[2];
  v123[3] = v125;
  uint64_t v126 = (void *)(v121 + v122[7]);
  void *v126 = v131;
  v126[1] = v119;
  *(double *)(v121 + v122[8]) = v96;
  *(double *)(v121 + v122[9]) = v97;
  *(void *)(v121 + v122[10]) = v132;
  *(void *)(v121 + v122[11]) = v99;
  *(unsigned char *)(v121 + v122[14]) = v71 & 1;
  *(void *)(v121 + v122[12]) = v120;
  *(void *)(v121 + v122[13]) = v146;
  type metadata accessor for CVDetection();
  swift_storeEnumTagMultiPayload();
  uint64_t v127 = v146;

  id v128 = v127;
}

void sub_100323CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v38 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = a2 + a3;
  BOOL v10 = __OFADD__(a2, a3);
  swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v37 = v5;
  if (v8) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v14 = i + 1;
  if (__OFADD__(i, 1))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v14 >= v38) {
    goto LABEL_54;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v14);
  int64_t v16 = i + 1;
  if (!v15)
  {
    int64_t v16 = i + 2;
    if (i + 2 >= v38) {
      goto LABEL_54;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v16);
    if (!v15)
    {
      int64_t v16 = i + 3;
      if (i + 3 >= v38) {
        goto LABEL_54;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = i + 4;
        if (i + 4 >= v38) {
          goto LABEL_54;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v16);
        if (!v15)
        {
          int64_t v17 = i + 5;
          if (i + 5 < v38)
          {
            unint64_t v15 = *(void *)(v5 + 8 * v17);
            if (v15)
            {
              int64_t v16 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v16 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_59;
              }
              if (v16 >= v38) {
                break;
              }
              unint64_t v15 = *(void *)(v5 + 8 * v16);
              ++v17;
              if (v15) {
                goto LABEL_26;
              }
            }
          }
LABEL_54:
          sub_10014AAB4();
          return;
        }
      }
    }
  }
LABEL_26:
  unint64_t v8 = (v15 - 1) & v15;
  unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
  for (i = v16; ; unint64_t v13 = v12 | (i << 6))
  {
    long long v39 = *(_OWORD *)(*(void *)(a1 + 48) + 16 * v13);
    id v18 = *(id *)(*(void *)(a1 + 56) + 8 * v13);
    id v19 = [v18 range];
    if (v10)
    {
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (__OFADD__(v19, v20)) {
      goto LABEL_56;
    }
    if (((uint64_t)v19 > a2 || (uint64_t)v19 + v20 <= a2) && ((uint64_t)v19 < a2 || (uint64_t)v19 >= v9))
    {

      if (!v8) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    unint64_t v23 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    if (*((void *)&_swiftEmptyDictionarySingleton + 3) <= v23)
    {
      uint64_t v25 = v23 + 1;
      id v26 = v18;
      sub_1001F1E38(v25, 1);
    }
    else
    {
      id v24 = v18;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v39);
    Hasher._combine(_:)(*((Swift::UInt *)&v39 + 1));
    Swift::Int v27 = Hasher._finalize()();
    Swift::UInt64 v28 = (char *)&_swiftEmptyDictionarySingleton + 64;
    uint64_t v29 = -1 << *((unsigned char *)&_swiftEmptyDictionarySingleton + 32);
    unint64_t v30 = v27 & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*((void *)&_swiftEmptyDictionarySingleton + (v30 >> 6) + 8)) == 0) {
      break;
    }
    unint64_t v32 = __clz(__rbit64((-1 << v30) & ~*((void *)&_swiftEmptyDictionarySingleton + (v30 >> 6) + 8))) | v30 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v5 = v37;
LABEL_52:
    *(void *)&v28[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
    *(_OWORD *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 16 * v32) = v39;
    *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + 8 * v32) = v18;
    ++*((void *)&_swiftEmptyDictionarySingleton + 2);

    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
  }
  char v33 = 0;
  unint64_t v34 = (unint64_t)(63 - v29) >> 6;
  uint64_t v5 = v37;
  while (++v31 != v34 || (v33 & 1) == 0)
  {
    BOOL v35 = v31 == v34;
    if (v31 == v34) {
      unint64_t v31 = 0;
    }
    v33 |= v35;
    uint64_t v36 = *(void *)&v28[8 * v31];
    if (v36 != -1)
    {
      unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
      goto LABEL_52;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
}

double sub_100324004@<D0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v9 = sub_10000F214((uint64_t *)&unk_100524ED0);
  double v10 = __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [a1 types];
  id v14 = [a1 correlationIdentifier];
  if (v14)
  {
    unint64_t v15 = v14;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 0, 1, v16);
  }
  else
  {
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v12, 1, 1, v17);
  }
  id v18 = [a1 text];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
  }
  else
  {
    unint64_t v22 = 0xE400000000000000;
    uint64_t v20 = 1162760014;
  }
  type metadata accessor for CVCoordinator(0);
  id v23 = [a1 boundingQuad];
  [v23 boundingBox];
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  CGFloat v31 = v30;

  sub_1001E9140(a2, a3, v39, (CGFloat *)v40, v25, v27, v29, v31);
  *a5 = v13;
  unint64_t v32 = (int *)type metadata accessor for TextDetectorResult.DataDetector(0);
  sub_10000FC34((uint64_t)v12, (uint64_t)a5 + v32[5], (uint64_t *)&unk_100524ED0);
  char v33 = (void *)((char *)a5 + v32[6]);
  *char v33 = v20;
  v33[1] = v22;
  unint64_t v34 = (_OWORD *)((char *)a5 + v32[7]);
  long long v35 = v40[1];
  *unint64_t v34 = v40[0];
  v34[1] = v35;
  double result = *(double *)&v41;
  long long v37 = v42;
  v34[2] = v41;
  v34[3] = v37;
  return result;
}

uint64_t sub_100324264@<X0>(id *a1@<X0>, char a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v59 = a3;
  id v10 = *a1;
  id v11 = [*a1 labels];
  sub_10000F734(0, &qword_100529908);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    unint64_t v12 = 0xE000000000000000;
    if (a2)
    {
LABEL_12:
      id v20 = [v10 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      [v10 confidence];
      int v49 = v21;
      type metadata accessor for CVCoordinator(0);
      [v10 boundingBox];
      CGFloat x = v60.origin.x;
      CGFloat width = v60.size.width;
      CGFloat height = v60.size.height;
      v60.origin.CGFloat y = 1.0 - v25 - v60.size.height;
      CGFloat y = v60.origin.y;
      CGFloat MinX = CGRectGetMinX(v60);
      v61.origin.CGFloat x = x;
      v61.origin.CGFloat y = y;
      v61.size.CGFloat width = width;
      v61.size.CGFloat height = height;
      CGFloat MinY = CGRectGetMinY(v61);
      v62.origin.CGFloat x = x;
      v62.origin.CGFloat y = y;
      v62.size.CGFloat width = width;
      v62.size.CGFloat height = height;
      CGFloat MaxX = CGRectGetMaxX(v62);
      v63.origin.CGFloat x = x;
      v63.origin.CGFloat y = y;
      v63.size.CGFloat width = width;
      v63.size.CGFloat height = height;
      CGFloat v27 = CGRectGetMinY(v63);
      v64.origin.CGFloat x = x;
      v64.origin.CGFloat y = y;
      v64.size.CGFloat width = width;
      v64.size.CGFloat height = height;
      CGFloat v28 = CGRectGetMinX(v64);
      v65.origin.CGFloat x = x;
      v65.origin.CGFloat y = y;
      v65.size.CGFloat width = width;
      v65.size.CGFloat height = height;
      CGFloat MaxY = CGRectGetMaxY(v65);
      v66.origin.CGFloat x = x;
      v66.origin.CGFloat y = y;
      v66.size.CGFloat width = width;
      v66.size.CGFloat height = height;
      CGFloat v30 = CGRectGetMaxX(v66);
      v67.origin.CGFloat x = x;
      v67.origin.CGFloat y = y;
      v67.size.CGFloat width = width;
      v67.size.CGFloat height = height;
      CGFloat v51 = MinX;
      CGFloat v52 = MinY;
      CGFloat v53 = MaxX;
      CGFloat v54 = v27;
      CGFloat v55 = v28;
      CGFloat v56 = MaxY;
      CGFloat v57 = v30;
      CGFloat v58 = CGRectGetMaxY(v67);
      double v31 = sub_1003FD844();
      sub_1001E9140(v59, a4, a5, (CGFloat *)v50, v31, v32, v33, v34);
      double v35 = sub_10030CA60(a4, a5);
      double v36 = sub_10030CA28(a4, a5);
      long long v37 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a6 + v37[5]) = v49;
      uint64_t v38 = (_OWORD *)(a6 + v37[6]);
      long long v39 = v50[1];
      _OWORD *v38 = v50[0];
      v38[1] = v39;
      long long v40 = v50[3];
      v38[2] = v50[2];
      v38[3] = v40;
      long long v41 = (uint64_t *)(a6 + v37[7]);
      *long long v41 = v13;
      v41[1] = v12;
      *(double *)(a6 + v37[8]) = v35;
      *(double *)(a6 + v37[9]) = v36;
      uint64_t v42 = type metadata accessor for CVDetection();
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(a6, 0, 1, v42);
    }
LABEL_10:
    if (qword_100517FD0 == -1) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_9;
  }
LABEL_3:
  char v48 = a2;
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    id v18 = [v17 identifier];

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v19;

    a5 = v15;
    a4 = v14;
    if (v48) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    id v16 = *(id *)(v12 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_16:
  swift_once();
LABEL_11:
  if (sub_1003DF6C4(v13, v12, qword_1005291D8)) {
    goto LABEL_12;
  }
  uint64_t v44 = type metadata accessor for CVDetection();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(a6, 1, 1, v44);
  return swift_bridgeObjectRelease();
}

void sub_1003246F4(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = v1;
  id v4 = [v1 pixelsWideRange];
  id v5 = [v1 pixelsHighRange];
  unint64_t v6 = (unint64_t)[v4 idealDimension];
  if ((v6 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = v6;
    unint64_t v8 = (unint64_t)[v5 idealDimension];
    if ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v9 = v8;
      unsigned int v10 = [v2 idealImageFormat];
      unsigned __int8 v11 = [v2 isOrientationAgnostic];
      if (v11) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = [v2 idealOrientation];
      }
      uint64_t v13 = (CGColor *)[v2 aspectRatioHandling];
      if (v13 != (CGColor *)2)
      {
        GenericGraCGFloat y = v13;
        if ((unint64_t)v13 < 2)
        {
LABEL_10:

          *(void *)a1 = v7;
          *(void *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 16) = v10;
          *(_DWORD *)(a1 + 20) = v12;
          *(unsigned char *)(a1 + 24) = v11;
          *(void *)(a1 + 32) = GenericGray;
          return;
        }
        type metadata accessor for VNSizeRangeAspectRatioHandling(0);
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
      }
      GenericGraCGFloat y = CGColorCreateGenericGray(0.0, 0.0);
      goto LABEL_10;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1003248A8(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v3[14] = type metadata accessor for CVDetection();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_10032495C, v2, 0);
}

uint64_t sub_10032495C()
{
  sub_100331E9C(*(void *)(v0 + 96), *(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for CVDetection);
  char v1 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 3u:
    case 4u:
    case 5u:
      sub_100331F04(*(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v2 = 0;
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 3;
      goto LABEL_26;
    case 2u:
      char v1 = 1;
      goto LABEL_4;
    default:
LABEL_4:
      uint64_t v7 = *(void *)(v0 + 128);
      uint64_t v8 = *(void *)(v0 + 120);
      uint64_t v9 = *(void *)(v0 + 96);
      sub_100331F04(*(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100331E9C(v9, v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      swift_beginAccess();
      sub_1001F9D08(v7, v8);
      sub_100331F04(v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      swift_endAccess();
      unsigned int v10 = (void *)sub_100321E80(v1);
      *(void *)(v0 + 80) = &OBJC_PROTOCOL___VNImageIdealImageSizeProviding;
      id v11 = [(id)swift_dynamicCastObjCProtocolUnconditional() supportedImageSizeSet];

      sub_10000F734(0, (unint64_t *)&unk_100529970);
      unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v12 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_6;
        }
      }
      else if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        if ((v12 & 0xC000000000000001) != 0)
        {
          id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_9;
        }
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v13 = *(id *)(v12 + 32);
LABEL_9:
          uint64_t v14 = v13;
          swift_bridgeObjectRelease();
          sub_1003246F4(v0 + 16);
          uint64_t v2 = *(void *)(v0 + 16);
          uint64_t v3 = *(void *)(v0 + 24);
          uint64_t v4 = *(void *)(v0 + 32);
          uint64_t v5 = *(unsigned __int8 *)(v0 + 40);
          uint64_t v6 = *(void *)(v0 + 48);

          goto LABEL_26;
        }
        __break(1u);
        goto LABEL_31;
      }
      swift_bridgeObjectRelease();
      if (qword_100517FB0 == -1) {
        goto LABEL_12;
      }
LABEL_31:
      swift_once();
LABEL_12:
      uint64_t v16 = *(void *)(v0 + 128);
      uint64_t v17 = type metadata accessor for UUID();
      uint64_t v18 = sub_10000F378(v17, (uint64_t)qword_100529170);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v18, v17);
      if (qword_100517FB8 != -1) {
        swift_once();
      }
      uint64_t v19 = *((void *)&xmmword_100529188 + 1);
      uint64_t v35 = xmmword_100529188;
      uint64_t v20 = qword_100529198;
      uint64_t v21 = qword_1005291A0;
      long long v22 = xmmword_1005291A8;
      uint64_t v23 = qword_1005291B8;
      uint64_t v24 = qword_1005291C0;
      if (qword_100517FC8 != -1) {
        swift_once();
      }
      uint64_t v25 = *(void *)(v0 + 128);
      uint64_t v26 = *(void *)(v0 + 96);
      uint64_t v27 = qword_1005291D0;
      CGFloat v28 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v25 + v28[5]) = -1082130432;
      uint64_t v29 = v25 + v28[6];
      *(void *)uint64_t v29 = v35;
      *(void *)(v29 + 8) = v19;
      *(void *)(v29 + 16) = v20;
      *(void *)(v29 + 24) = v21;
      *(_OWORD *)(v29 + 32) = v22;
      *(void *)(v29 + 48) = v23;
      *(void *)(v29 + 56) = v24;
      CGFloat v30 = (void *)(v25 + v28[7]);
      void *v30 = 0x7974706D65;
      v30[1] = 0xE500000000000000;
      *(void *)(v25 + v28[8]) = 0;
      *(void *)(v25 + v28[9]) = v27;
      *(void *)(v25 + v28[10]) = &_swiftEmptySetSingleton;
      *(void *)(v25 + v28[11]) = _swiftEmptyArrayStorage;
      *(unsigned char *)(v25 + v28[14]) = 0;
      *(void *)(v25 + v28[12]) = _swiftEmptyArrayStorage;
      *(void *)(v25 + v28[13]) = 0;
      swift_storeEnumTagMultiPayload();
      char v31 = sub_100402834(v26, v25);
      sub_100331F04(v25, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v5 = 0;
      if (v31) {
        uint64_t v2 = 1376;
      }
      else {
        uint64_t v2 = 0;
      }
      if (v31) {
        uint64_t v4 = 0x134323066;
      }
      else {
        uint64_t v4 = 0;
      }
      if (v31) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = 2;
      }
      uint64_t v3 = v2;
LABEL_26:
      CGFloat v32 = *(uint64_t **)(v0 + 88);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      *CGFloat v32 = v2;
      v32[1] = v3;
      v32[2] = v4;
      v32[3] = v5;
      v32[4] = v6;
      CGFloat v33 = *(uint64_t (**)(void))(v0 + 8);
      return v33();
  }
}

uint64_t sub_100324E90()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  v1[17] = v3;
  v1[18] = *(void *)(v3 - 8);
  v1[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DispatchTime();
  v1[20] = v4;
  v1[21] = *(void *)(v4 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  v1[24] = v5;
  v1[25] = *(void *)(v5 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = sub_10000F214(&qword_100524EB0);
  v1[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CVDetection();
  v1[29] = v6;
  v1[30] = *(void *)(v6 - 8);
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  return _swift_task_switch(sub_100325154, v0, 0);
}

uint64_t sub_100325154()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale15VisionProcessor_sequenceHandler);
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuredDetectionTypes);
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_10031A35C(v4);
  swift_bridgeObjectRelease();
  sub_10000F734(0, &qword_100526330);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v0[11] = 0;
  unsigned int v6 = [v2 prepareForPerformingRequests:isa error:v0 + 11];

  uint64_t v7 = (void *)v0[11];
  if (!v6)
  {
    id v40 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v41 = (uint64_t (*)(void))v0[1];
    goto LABEL_48;
  }
  uint64_t v8 = *v3;
  uint64_t v56 = *v3 + 56;
  uint64_t v60 = v0[27];
  uint64_t v62 = v0[30];
  uint64_t v9 = -1;
  uint64_t v10 = -1 << *(unsigned char *)(*v3 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(*v3 + 56);
  int64_t v58 = (unint64_t)(63 - v10) >> 6;
  uint64_t v64 = v8;
  swift_bridgeObjectRetain_n();
  id v12 = v7;
  int64_t v13 = 0;
  while (2)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v13 << 6);
    }
    else
    {
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_52;
      }
      if (v18 >= v58) {
        goto LABEL_46;
      }
      unint64_t v19 = *(void *)(v56 + 8 * v18);
      ++v13;
      if (!v19)
      {
        int64_t v13 = v18 + 1;
        if (v18 + 1 >= v58) {
          goto LABEL_46;
        }
        unint64_t v19 = *(void *)(v56 + 8 * v13);
        if (!v19)
        {
          int64_t v13 = v18 + 2;
          if (v18 + 2 >= v58) {
            goto LABEL_46;
          }
          unint64_t v19 = *(void *)(v56 + 8 * v13);
          if (!v19)
          {
            int64_t v13 = v18 + 3;
            if (v18 + 3 >= v58) {
              goto LABEL_46;
            }
            unint64_t v19 = *(void *)(v56 + 8 * v13);
            if (!v19)
            {
              int64_t v13 = v18 + 4;
              if (v18 + 4 >= v58) {
                goto LABEL_46;
              }
              unint64_t v19 = *(void *)(v56 + 8 * v13);
              if (!v19)
              {
                int64_t v20 = v18 + 5;
                if (v20 >= v58)
                {
LABEL_46:
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_47;
                }
                unint64_t v19 = *(void *)(v56 + 8 * v20);
                if (!v19)
                {
                  while (1)
                  {
                    int64_t v13 = v20 + 1;
                    if (__OFADD__(v20, 1)) {
                      break;
                    }
                    if (v13 >= v58) {
                      goto LABEL_46;
                    }
                    unint64_t v19 = *(void *)(v56 + 8 * v13);
                    ++v20;
                    if (v19) {
                      goto LABEL_26;
                    }
                  }
LABEL_52:
                  __break(1u);
                }
                int64_t v13 = v20;
              }
            }
          }
        }
      }
LABEL_26:
      unint64_t v11 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
    }
    uint64_t v22 = v0[32];
    uint64_t v21 = v0[33];
    sub_100331E9C(*(void *)(v64 + 48) + *(void *)(v62 + 72) * v17, v21, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003337E4(v21, v22, (uint64_t (*)(void))type metadata accessor for CVDetection);
    if (qword_100517FB0 != -1) {
      swift_once();
    }
    uint64_t v23 = v0[31];
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = sub_10000F378(v24, (uint64_t)qword_100529170);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v25, v24);
    if (qword_100517FB8 != -1) {
      swift_once();
    }
    uint64_t v26 = *((void *)&xmmword_100529188 + 1);
    uint64_t v66 = xmmword_100529188;
    uint64_t v27 = qword_100529198;
    uint64_t v28 = qword_1005291A0;
    long long v29 = xmmword_1005291A8;
    uint64_t v30 = qword_1005291B8;
    uint64_t v31 = qword_1005291C0;
    if (qword_100517FC8 != -1) {
      swift_once();
    }
    uint64_t v32 = v0[31];
    uint64_t v33 = v0[32];
    uint64_t v34 = v0[28];
    uint64_t v35 = qword_1005291D0;
    uint64_t v36 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)(v32 + v36[5]) = -1082130432;
    uint64_t v37 = v32 + v36[6];
    *(void *)uint64_t v37 = v66;
    *(void *)(v37 + 8) = v26;
    *(void *)(v37 + 16) = v27;
    *(void *)(v37 + 24) = v28;
    *(_OWORD *)(v37 + 32) = v29;
    *(void *)(v37 + 48) = v30;
    *(void *)(v37 + 56) = v31;
    uint64_t v38 = (void *)(v32 + v36[7]);
    void *v38 = 0x7974706D65;
    v38[1] = 0xE500000000000000;
    *(void *)(v32 + v36[8]) = 0;
    *(void *)(v32 + v36[9]) = v35;
    *(void *)(v32 + v36[10]) = &_swiftEmptySetSingleton;
    *(void *)(v32 + v36[11]) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v32 + v36[14]) = 0;
    *(void *)(v32 + v36[12]) = _swiftEmptyArrayStorage;
    *(void *)(v32 + v36[13]) = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = v34 + *(int *)(v60 + 48);
    sub_100331E9C(v33, v34, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_100331E9C(v32, v39, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_45;
        }
        goto LABEL_6;
      case 2u:
        if (swift_getEnumCaseMultiPayload() == 2) {
          goto LABEL_45;
        }
        goto LABEL_6;
      case 3u:
        if (swift_getEnumCaseMultiPayload() == 3) {
          goto LABEL_45;
        }
        goto LABEL_6;
      case 4u:
        if (swift_getEnumCaseMultiPayload() == 4) {
          goto LABEL_45;
        }
        goto LABEL_6;
      case 5u:
        if (swift_getEnumCaseMultiPayload() == 5) {
          goto LABEL_45;
        }
        goto LABEL_6;
      default:
        if (swift_getEnumCaseMultiPayload())
        {
LABEL_6:
          uint64_t v15 = v0[31];
          uint64_t v14 = v0[32];
          sub_10000FBD8(v0[28], &qword_100524EB0);
          sub_100331F04(v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_100331F04(v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
          continue;
        }
LABEL_45:
        uint64_t v43 = v0[31];
        uint64_t v42 = v0[32];
        uint64_t v44 = v0[28];
        uint64_t v45 = v0[25];
        uint64_t v46 = v0[26];
        uint64_t v47 = v0[22];
        uint64_t v50 = v0[24];
        uint64_t v51 = v0[23];
        uint64_t v52 = v0[21];
        uint64_t v67 = v0[20];
        uint64_t v61 = v0[18];
        uint64_t v63 = v0[17];
        uint64_t v54 = v0[19];
        uint64_t v55 = v0[16];
        uint64_t v57 = v0[14];
        uint64_t v59 = v0[15];
        sub_100331F04(v39, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_100331F04(v44, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_100331F04(v43, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_100331F04(v42, (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_release();
        swift_bridgeObjectRelease();
        sub_10000F734(0, (unint64_t *)&qword_10051A950);
        (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))(v46, enum case for DispatchQoS.QoSClass.default(_:), v50);
        CGFloat v53 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v50);
        static DispatchTime.now()();
        + infix(_:_:)();
        CGRect v65 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v65(v47, v67);
        v0[6] = sub_100325B90;
        v0[7] = 0;
        v0[2] = _NSConcreteStackBlock;
        v0[3] = 1107296256;
        v0[4] = sub_1002EDB98;
        v0[5] = &unk_1004F48F0;
        char v48 = _Block_copy(v0 + 2);
        static DispatchQoS.unspecified.getter();
        v0[12] = _swiftEmptyArrayStorage;
        sub_10032EFB4((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000F214(&qword_10051A960);
        sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
        _Block_release(v48);

        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v55, v57);
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v54, v63);
        v65(v51, v67);
LABEL_47:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        long long v41 = (uint64_t (*)(void))v0[1];
LABEL_48:
        return v41();
    }
  }
}

uint64_t sub_100325B90()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)aBlock - v5;
  Date.init()();
  uint64_t v7 = self;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v9 + v8, v3, v0);
  aBlock[4] = sub_100334224;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F4940;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [v7 preWarmIfNecessaryWithCompletion:v10];
  _Block_release(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

void sub_100325D80()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (qword_100517EB0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000F378(v6, (uint64_t)qword_10055E328);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    v10[1] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "VKCDataDetectorInfo.preWarmIfNecessary took %f seconds", v9, 0xCu);
    swift_slowDealloc();
  }
}

uint64_t sub_100325F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 232) = a7;
  *(void *)(v8 + 240) = v7;
  *(void *)(v8 + 216) = a5;
  *(void *)(v8 + 224) = a6;
  *(void *)(v8 + 200) = a3;
  *(void *)(v8 + 208) = a4;
  *(void *)(v8 + 184) = a1;
  *(void *)(v8 + 192) = a2;
  sub_10000FC34(a4, v8 + 96, &qword_100529670);
  long long v9 = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v8 + 248) = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v8 + 264) = v9;
  *(void *)(v8 + 280) = *(void *)(v8 + 128);
  uint64_t v10 = sub_10000F214((uint64_t *)&unk_100529860);
  *(void *)(v8 + 288) = v10;
  *(void *)(v8 + 296) = *(void *)(v10 - 8);
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 320) = swift_task_alloc();
  sub_10000F214(&qword_100524E28);
  *(void *)(v8 + 328) = swift_task_alloc();
  sub_10000F214(&qword_100529870);
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DetectionRequest(0);
  *(void *)(v8 + 352) = v11;
  *(void *)(v8 + 360) = *(void *)(v11 - 8);
  *(void *)(v8 + 368) = swift_task_alloc();
  *(void *)(v8 + 376) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CVDetection();
  *(void *)(v8 + 384) = v12;
  *(void *)(v8 + 392) = *(void *)(v12 - 8);
  *(void *)(v8 + 400) = swift_task_alloc();
  *(void *)(v8 + 408) = swift_task_alloc();
  *(void *)(v8 + 416) = swift_task_alloc();
  *(void *)(v8 + 424) = swift_task_alloc();
  *(void *)(v8 + 432) = swift_task_alloc();
  *(void *)(v8 + 440) = swift_task_alloc();
  return _swift_task_switch(sub_100326200, v7, 0);
}

uint64_t sub_100326200()
{
  uint64_t v116 = v0 + 56;
  uint64_t v2 = *(void *)(v0 + 200);
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 360);
    sub_100040D64(0, v3, 0);
    uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v1 = *(void *)(v5 + 72);
    do
    {
      uint64_t v7 = *(void *)(v0 + 440);
      uint64_t v8 = *(void *)(v0 + 376);
      sub_100331E9C(v6, v8, type metadata accessor for DetectionRequest);
      sub_100331E9C(v8, v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100331F04(v8, type metadata accessor for DetectionRequest);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100040D64(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_100040D64(v9 > 1, v10 + 1, 1);
      }
      uint64_t v11 = *(void *)(v0 + 440);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      sub_1003337E4(v11, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v6 += v1;
      --v3;
    }
    while (v3);
  }
  uint64_t v125 = *(void *)(v0 + 392);
  unint64_t v12 = sub_10033178C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  unint64_t v118 = v12 + 56;
  uint64_t v13 = -1;
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  if (-v14 < 64) {
    uint64_t v13 = ~(-1 << -(char)v14);
  }
  uint64_t v15 = v13 & *(void *)(v12 + 56);
  int64_t v120 = (unint64_t)(63 - v14) >> 6;
  unint64_t v123 = v12;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v126 = v16;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_35;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    if (v19 >= v120) {
      goto LABEL_52;
    }
    unint64_t v20 = *(void *)(v118 + 8 * v19);
    int64_t v21 = v16 + 1;
    if (!v20)
    {
      int64_t v21 = v16 + 2;
      if (v16 + 2 >= v120) {
        goto LABEL_52;
      }
      unint64_t v20 = *(void *)(v118 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v16 + 3;
        if (v16 + 3 >= v120) {
          goto LABEL_52;
        }
        unint64_t v20 = *(void *)(v118 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v16 + 4;
          if (v16 + 4 >= v120) {
            goto LABEL_52;
          }
          unint64_t v20 = *(void *)(v118 + 8 * v21);
          if (!v20)
          {
            int64_t v21 = v16 + 5;
            if (v16 + 5 >= v120) {
              goto LABEL_52;
            }
            unint64_t v20 = *(void *)(v118 + 8 * v21);
            if (!v20) {
              break;
            }
          }
        }
      }
    }
LABEL_34:
    uint64_t v15 = (v20 - 1) & v20;
    int64_t v126 = v21;
    unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_35:
    uint64_t v24 = *(void *)(v0 + 424);
    uint64_t v23 = *(void *)(v0 + 432);
    uint64_t v26 = *(void *)(v0 + 408);
    uint64_t v25 = *(void *)(v0 + 416);
    uint64_t v1 = *(void *)(v0 + 384);
    uint64_t v27 = *(void *)(v125 + 72);
    sub_100331E9C(*(void *)(v123 + 48) + v27 * v18, v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003337E4(v23, v24, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_100331E9C(v24, v25, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_100331E9C(v24, v26, (uint64_t (*)(void))type metadata accessor for CVDetection);
    char v28 = 0;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
      case 4u:
      case 5u:
        uint64_t v29 = *(void *)(v0 + 416);
        sub_100331F04(*(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for CVDetection);
        swift_bridgeObjectRetain();
        unint64_t v30 = sub_10032AF9C(v29);
        char v32 = v31;
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0) {
          goto LABEL_13;
        }
        int64_t v16 = v126;
        if (!swift_isUniquelyReferenced_nonNull_native()) {
          sub_1001F7868();
        }
        sub_100331F04(*((void *)&_swiftEmptyDictionarySingleton + 6) + v30 * v27, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003F4B08(v30, (uint64_t)&_swiftEmptyDictionarySingleton);
        swift_bridgeObjectRelease();
        goto LABEL_14;
      case 2u:
        char v28 = 1;
        break;
      default:
        break;
    }
    uint64_t v33 = *(void *)(v0 + 416);
    sub_100331F04(*(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for CVDetection);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v12 = sub_10032AF9C(v33);
    uint64_t v36 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    BOOL v37 = (v35 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_111;
    }
    char v39 = v35;
    if (*((void *)&_swiftEmptyDictionarySingleton + 3) >= v38)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v35) {
          goto LABEL_11;
        }
      }
      else
      {
        sub_1001F7868();
        if (v39) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v40 = *(void *)(v0 + 416);
      sub_1001F0E98(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v41 = sub_10032AF9C(v40);
      if ((v39 & 1) != (v42 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v12 = v41;
      if (v39)
      {
LABEL_11:
        *(unsigned char *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + v12) = v28;
        goto LABEL_12;
      }
    }
    uint64_t v43 = *(void *)(v0 + 416);
    *((void *)&_swiftEmptyDictionarySingleton + (v12 >> 6) + 8) |= 1 << v12;
    sub_100331E9C(v43, *((void *)&_swiftEmptyDictionarySingleton + 6) + v12 * v27, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(unsigned char *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + v12) = v28;
    uint64_t v44 = *((void *)&_swiftEmptyDictionarySingleton + 2);
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_112;
    }
    *((void *)&_swiftEmptyDictionarySingleton + 2) = v46;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    int64_t v16 = v126;
LABEL_14:
    unint64_t v12 = *(void *)(v0 + 424);
    sub_100331F04(*(void *)(v0 + 416), (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_100331F04(v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  uint64_t v22 = v16 + 6;
  if (v16 + 6 < v120)
  {
    unint64_t v20 = *(void *)(v118 + 8 * v22);
    if (!v20)
    {
      while (1)
      {
        int64_t v21 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_114;
        }
        if (v21 >= v120) {
          goto LABEL_52;
        }
        unint64_t v20 = *(void *)(v118 + 8 * v21);
        ++v22;
        if (v20) {
          goto LABEL_34;
        }
      }
    }
    int64_t v21 = v16 + 6;
    goto LABEL_34;
  }
LABEL_52:
  swift_release();
  swift_bridgeObjectRelease();
  if (!*((void *)&_swiftEmptyDictionarySingleton + 2))
  {
    swift_bridgeObjectRelease();
    long long v122 = _swiftEmptyArrayStorage;
LABEL_100:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v106 = *(uint64_t (**)(void *))(v0 + 8);
    return v106(v122);
  }
  uint64_t v15 = *(void *)(v0 + 360);
  uint64_t v112 = *(void *)(v0 + 320);
  uint64_t v114 = *(void *)(v0 + 296);
  uint64_t v115 = *(void *)(v0 + 288);
  uint64_t v110 = *(void *)(v0 + 352);
  uint64_t v111 = *(void *)(v0 + 280);
  unsigned int v113 = sub_100327334(*(void *)(v0 + 208), *(void *)(v0 + 192), *(void *)(v0 + 224), *(void *)(v0 + 232));
  unint64_t v12 = 0;
  int64_t v47 = 0;
  uint64_t v48 = -1;
  uint64_t v49 = -1 << *((unsigned char *)&_swiftEmptyDictionarySingleton + 32);
  if (-v49 < 64) {
    uint64_t v48 = ~(-1 << -(char)v49);
  }
  unint64_t v50 = v48 & *((void *)&_swiftEmptyDictionarySingleton + 8);
  int64_t v121 = (unint64_t)(63 - v49) >> 6;
  long long v124 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  unint64_t v119 = (char *)&_swiftEmptyDictionarySingleton + 64;
  unint64_t v117 = _swiftEmptyArrayStorage;
  uint64_t v1 = (uint64_t)&unk_100529878;
  while (2)
  {
    if (v50)
    {
      unint64_t v51 = v12;
      unint64_t v52 = __clz(__rbit64(v50));
      uint64_t v53 = (v50 - 1) & v50;
      unint64_t v54 = v52 | (v47 << 6);
      goto LABEL_58;
    }
    int64_t v58 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      goto LABEL_113;
    }
    if (v58 >= v121)
    {
      int64_t v60 = v47;
LABEL_64:
      uint64_t v61 = *(void *)(v0 + 336);
      uint64_t v62 = sub_10000F214((uint64_t *)v1);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
      uint64_t v53 = 0;
      int64_t v47 = v60;
      goto LABEL_65;
    }
    unint64_t v59 = *(void *)&v119[8 * v58];
    if (!v59)
    {
      int64_t v60 = v47 + 1;
      if (v47 + 2 < v121)
      {
        unint64_t v59 = *(void *)&v119[8 * v47 + 16];
        if (v59)
        {
          int64_t v58 = v47 + 2;
          goto LABEL_62;
        }
        int64_t v60 = v47 + 2;
        if (v47 + 3 < v121)
        {
          unint64_t v59 = *(void *)&v119[8 * v47 + 24];
          if (v59)
          {
            int64_t v58 = v47 + 3;
            goto LABEL_62;
          }
          int64_t v58 = v47 + 4;
          int64_t v60 = v47 + 3;
          if (v47 + 4 < v121)
          {
            unint64_t v59 = *(void *)&v119[8 * v58];
            if (v59) {
              goto LABEL_62;
            }
            while (v121 - 5 != v47)
            {
              unint64_t v59 = *((void *)&_swiftEmptyDictionarySingleton + v47++ + 13);
              if (v59)
              {
                int64_t v58 = v47 + 4;
                goto LABEL_62;
              }
            }
            int64_t v60 = v121 - 1;
          }
        }
      }
      goto LABEL_64;
    }
LABEL_62:
    unint64_t v51 = v12;
    uint64_t v53 = (v59 - 1) & v59;
    unint64_t v54 = __clz(__rbit64(v59)) + (v58 << 6);
    int64_t v47 = v58;
LABEL_58:
    uint64_t v55 = *(void *)(v0 + 336);
    sub_100331E9C(*((void *)&_swiftEmptyDictionarySingleton + 6) + *(void *)(v125 + 72) * v54, v55, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v56 = *((void *)&_swiftEmptyDictionarySingleton + 7);
    uint64_t v57 = sub_10000F214((uint64_t *)v1);
    *(unsigned char *)(v55 + *(int *)(v57 + 48)) = *(unsigned char *)(v56 + v54);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v55, 0, 1, v57);
    unint64_t v12 = v51;
LABEL_65:
    uint64_t v63 = *(void *)(v0 + 344);
    sub_10000FC34(*(void *)(v0 + 336), v63, &qword_100529870);
    uint64_t v64 = sub_10000F214((uint64_t *)v1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v63, 1, v64) != 1)
    {
      unint64_t v65 = v53;
      int64_t v66 = v47;
      uint64_t v67 = v1;
      uint64_t v68 = *(void *)(v0 + 400);
      uint64_t v69 = *(void *)(v0 + 344);
      uint64_t v127 = *(void *)(v0 + 352);
      uint64_t v70 = *(void *)(v0 + 328);
      uint64_t v71 = *(void *)(v0 + 200);
      char v72 = *(unsigned char *)(v69 + *(int *)(v64 + 48));
      sub_1003337E4(v69, v68, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v73 = swift_task_alloc();
      *(void *)(v73 + 16) = v68;
      swift_bridgeObjectRetain();
      sub_1001C2354((uint64_t (*)(char *))sub_100334008, v73, v71);
      uint64_t v15 = v74;
      swift_task_dealloc();
      sub_100331F04(v68, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1001C4AE8(v15, v70);
      swift_bridgeObjectRelease();
      if ((*v124)(v70, 1, v127) == 1)
      {
        sub_10000FBD8(*(void *)(v0 + 328), &qword_100524E28);
        uint64_t v1 = v67;
        int64_t v47 = v66;
        unint64_t v50 = v65;
      }
      else
      {
        uint64_t v75 = *(void *)(v0 + 216);
        sub_1003337E4(*(void *)(v0 + 328), *(void *)(v0 + 368), type metadata accessor for DetectionRequest);
        unint64_t v76 = (void *)sub_100321E80(v72);
        sub_10000FC34(v75, v0 + 136, (uint64_t *)&unk_100518AE0);
        uint64_t v1 = v67;
        int64_t v47 = v66;
        unint64_t v50 = v65;
        if (*(unsigned char *)(v0 + 168) == 1)
        {
          sub_10000FC34(*(void *)(v0 + 208), v116, &qword_100529670);
          if (*(void *)(v0 + 88) == 3)
          {
            sub_100210C68(*(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(void *)(v0 + 272), *(void **)(v0 + 280));
            sub_100210C68(0, 0, 0, 0, (void *)2);
          }
          else
          {
            sub_100331E04(v116, v0 + 16);
            if (v111 == 2)
            {
              unint64_t v77 = (double *)(*(void *)(v0 + 368) + *(int *)(v110 + 24));
              [v76 setRegionOfInterest:*v77, 1.0 - v77[1] - v77[3], v77[2]];
            }
          }
        }
        uint64_t v78 = *(void *)(v0 + 368);
        uint64_t v79 = *(char **)(v0 + 320);
        uint64_t v80 = (uint64_t)&v79[*(int *)(v115 + 64)];
        *uint64_t v79 = v72;
        *(void *)(v112 + 8) = v76;
        sub_100331E9C(v78, v80, type metadata accessor for DetectionRequest);
        id v81 = v76;
        unint64_t v82 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v117 = (void *)sub_10032A5C0(0, v117[2] + 1, 1, (unint64_t)v117, &qword_100529888, (uint64_t *)&unk_100529860);
        }
        unint64_t v84 = v117[2];
        unint64_t v83 = v117[3];
        if (v84 >= v83 >> 1) {
          unint64_t v117 = (void *)sub_10032A5C0(v83 > 1, v84 + 1, 1, (unint64_t)v117, &qword_100529888, (uint64_t *)&unk_100529860);
        }
        uint64_t v15 = *(void *)(v0 + 368);
        uint64_t v85 = *(void *)(v0 + 320);
        v117[2] = v84 + 1;
        sub_10000FC34(v85, (uint64_t)v117+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(void *)(v114 + 72) * v84, (uint64_t *)&unk_100529860);

        sub_100331F04(v15, type metadata accessor for DetectionRequest);
        unint64_t v12 = v82;
      }
      continue;
    }
    break;
  }
  swift_release();
  uint64_t v1 = (uint64_t)v117;
  uint64_t v86 = v117[2];
  if (v86)
  {
    uint64_t v87 = *(void *)(v0 + 304);
    uint64_t v128 = *(void *)(v0 + 312);
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v88 = (uint64_t)v117
        + ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80));
    uint64_t v89 = *(void *)(v114 + 72);
    do
    {
      uint64_t v91 = *(unsigned char **)(v0 + 304);
      double v90 = *(unsigned char **)(v0 + 312);
      sub_10000FB74(v88, (uint64_t)v90, (uint64_t *)&unk_100529860);
      uint64_t v92 = *(int *)(v115 + 64);
      uint64_t v93 = (uint64_t)&v91[v92];
      *uint64_t v91 = *v90;
      CGFloat v94 = *(void **)(v128 + 8);
      *(void *)(v87 + 8) = v94;
      sub_100331E9C((uint64_t)&v90[v92], v93, type metadata accessor for DetectionRequest);
      id v95 = v94;
      sub_100331F04(v93, type metadata accessor for DetectionRequest);
      sub_10000FBD8((uint64_t)v90, (uint64_t *)&unk_100529860);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v88 += v89;
      --v86;
    }
    while (v86);
    uint64_t v1 = (uint64_t)v117;
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(void *)(*(void *)(v0 + 240) + OBJC_IVAR____TtC6Tamale15VisionProcessor_sequenceHandler);
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10000F734(0, &qword_100526330);
    goto LABEL_96;
  }
LABEL_115:
  sub_10000F734(0, &qword_100526330);
  swift_bridgeObjectRetain();
  _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
LABEL_96:
  uint64_t v96 = *(void *)(v0 + 184);
  swift_bridgeObjectRelease();
  sub_10000F734(0, &qword_100526330);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 176) = 0;
  unsigned __int8 v98 = [(id)v15 performRequests:isa onCVPixelBuffer:v96 orientation:v113 error:v0 + 176];

  uint64_t v99 = *(void **)(v0 + 176);
  if (v98)
  {
    uint64_t v100 = *(void *)(v0 + 240);
    uint64_t v101 = *(void *)(v0 + 216);
    uint64_t v102 = *(void *)(v0 + 192);
    uint64_t v103 = swift_task_alloc();
    *(_OWORD *)(v103 + 16) = *(_OWORD *)(v0 + 224);
    *(void *)(v103 + 32) = v102;
    *(void *)(v103 + 40) = v101;
    *(void *)(v103 + 48) = v100;
    id v104 = v99;
    id v105 = sub_10033020C(v1, (void (*)(void, void, unsigned __int8 *))sub_100333FE0, v103);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    if (!v12)
    {
      long long v122 = v105;
      goto LABEL_100;
    }
  }
  else
  {
    id v108 = v99;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v109 = *(uint64_t (**)(void))(v0 + 8);
  return v109();
}