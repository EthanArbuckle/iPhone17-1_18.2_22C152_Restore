uint64_t sub_100327334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  uint64_t result;
  unsigned char v9[32];
  uint64_t v10;
  unsigned char v11[40];
  _OWORD v12[2];
  uint64_t v13;
  long long v14;
  long long v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;

  sub_10000FC34(a1, (uint64_t)v9, &qword_100529670);
  if (v10 != 3)
  {
    sub_100331E04((uint64_t)v9, (uint64_t)v11);
    sub_100331E04((uint64_t)v11, (uint64_t)v12);
    if (v13 != 2)
    {
      v14 = v12[0];
      v15 = v12[1];
      v16 = v13;
      sub_10020F6E0((int *)&v15 + 1, (uint64_t)&v17);
      sub_10020F6E0(&v17, (uint64_t)&v18);
      if ((v19 & 1) == 0) {
        return v18;
      }
    }
  }
  v6 = sub_10030CA60(a3, a4);
  if (v6 == 0.0) {
    return 1;
  }
  result = 3;
  if (v6 != 3.14159265 && v6 != -3.14159265)
  {
    result = 6;
    if (v6 != 1.57079633 && v6 != -1.57079633)
    {
      if (v6 == -4.71238898 || v6 == 4.71238898) {
        return 8;
      }
      else {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_100327470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524EB0);
  __chkstk_darwin(v4 - 8);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t)&v6[*(int *)(v7 + 56)];
  sub_100331E9C(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_100331E9C(a2, v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_13;
    case 2u:
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 5u:
      if (swift_getEnumCaseMultiPayload() == 5) {
        goto LABEL_13;
      }
      goto LABEL_3;
    default:
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        sub_10000FBD8((uint64_t)v6, &qword_100524EB0);
        return 0;
      }
      else
      {
LABEL_13:
        sub_100331F04(v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_100331F04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
        return 1;
      }
  }
}

uint64_t sub_100327654@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v55 = a8;
  uint64_t v56 = a5;
  uint64_t v57 = a7;
  uint64_t v52 = a3;
  uint64_t v53 = a9;
  int v12 = a1 & 1;
  uint64_t v13 = type metadata accessor for CVDetection();
  uint64_t v58 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)v51 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)v51 - v20;
  uint64_t v22 = a6 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuration;
  uint64_t v23 = *(void *)(a6 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuration);
  uint64_t v24 = *(unsigned __int8 *)(a6 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuration + 8);
  int v25 = *(unsigned __int8 *)(a6 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuration + 9);
  uint64_t v26 = *(unsigned int *)(a6 + OBJC_IVAR____TtC6Tamale15VisionProcessor_configuration + 12);
  int v27 = *(unsigned __int8 *)(v22 + 16);
  uint64_t v28 = 256;
  if (!v25) {
    uint64_t v28 = 0;
  }
  v29 = v59;
  uint64_t result = sub_1003220BC(a2, a4, v56, v23, v28 | v24 | (v26 << 32), v27, v12, v57, v55);
  if (v29) {
    return result;
  }
  int v64 = v27;
  v59 = v15;
  uint64_t v56 = v13;
  LODWORD(v57) = v12;
  v31 = _swiftEmptyArrayStorage;
  v63 = _swiftEmptyArrayStorage;
  uint64_t v55 = *(void *)(result + 16);
  v51[1] = 0;
  if (!v55) {
    goto LABEL_28;
  }
  unint64_t v32 = 0;
  float v33 = *(float *)&v26;
  uint64_t v34 = v58;
  uint64_t v54 = result;
  do
  {
    if (v32 >= *(void *)(result + 16))
    {
      __break(1u);
      JUMPOUT(0x100327C44);
    }
    unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v36 = *(void *)(v34 + 72);
    unint64_t v37 = v32 + 1;
    sub_100331E9C(result + v35 + v36 * v32, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_100331E9C((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v61 = type metadata accessor for ParseDetectorResult(0);
        uint64_t v38 = sub_10032EFB4(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
        v39 = type metadata accessor for ParseDetectorResult;
        break;
      case 2u:
        uint64_t v61 = type metadata accessor for TextDetectorResult(0);
        uint64_t v38 = sub_10032EFB4((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
        v39 = type metadata accessor for TextDetectorResult;
        break;
      case 3u:
      case 4u:
        uint64_t v61 = type metadata accessor for StreamingBarcodeDetectorResult(0);
        uint64_t v38 = sub_10032EFB4(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
        v39 = type metadata accessor for StreamingBarcodeDetectorResult;
        break;
      case 5u:
        uint64_t v61 = type metadata accessor for StreamingTextDetectorResult(0);
        uint64_t v38 = sub_10032EFB4((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
        v39 = type metadata accessor for StreamingTextDetectorResult;
        break;
      default:
        uint64_t v61 = type metadata accessor for ObjectDetectorResult(0);
        uint64_t v38 = sub_10032EFB4(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
        v39 = type metadata accessor for ObjectDetectorResult;
        break;
    }
    v40 = v39;
    uint64_t v62 = v38;
    v41 = sub_100040120(v60);
    sub_1003337E4((uint64_t)v18, (uint64_t)v41, v40);
    uint64_t v42 = v61;
    uint64_t v43 = v62;
    sub_10000F3B0(v60, v61);
    float v44 = (*(float (**)(uint64_t, uint64_t))(v43 + 56))(v42, v43);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v60);
    if (v57)
    {
      uint64_t v45 = (uint64_t)v59;
      if (v44 <= 0.1) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v45 = (uint64_t)v59;
      if (v64)
      {
        if (v44 <= 0.2) {
          goto LABEL_6;
        }
      }
      else if (v44 <= v33)
      {
LABEL_6:
        sub_100331F04((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CVDetection);
        goto LABEL_7;
      }
    }
    sub_1003337E4((uint64_t)v21, v45, (uint64_t (*)(void))type metadata accessor for CVDetection);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100040D64(0, v31[2] + 1, 1);
      uint64_t v45 = (uint64_t)v59;
    }
    v31 = v63;
    unint64_t v47 = v63[2];
    unint64_t v46 = v63[3];
    if (v47 >= v46 >> 1)
    {
      sub_100040D64(v46 > 1, v47 + 1, 1);
      uint64_t v45 = (uint64_t)v59;
      v31 = v63;
    }
    v31[2] = v47 + 1;
    sub_1003337E4(v45, (uint64_t)v31 + v35 + v47 * v36, (uint64_t (*)(void))type metadata accessor for CVDetection);
LABEL_7:
    unint64_t v32 = v37;
    uint64_t result = v54;
    uint64_t v34 = v58;
  }
  while (v55 != v37);
  v31 = v63;
LABEL_28:
  uint64_t v49 = v52;
  uint64_t v48 = v53;
  swift_bridgeObjectRelease();
  sub_100331E9C(v49, v48, type metadata accessor for DetectionRequest);
  uint64_t v50 = type metadata accessor for DetectionResult(0);
  *(void *)(v48 + *(int *)(v50 + 20)) = v31;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v48, 0, 1, v50);
}

uint64_t sub_100327C5C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  id v11 = [v10 uuid:v7];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  [v10 confidence];
  int v70 = v12;
  [v10 topLeft];
  uint64_t v69 = v13;
  double v15 = v14;
  [v10 topRight];
  uint64_t v17 = v16;
  double v19 = v18;
  [v10 bottomLeft];
  uint64_t v21 = v20;
  double v23 = v22;
  [v10 bottomRight];
  uint64_t v25 = v24;
  double v27 = v26;
  id v28 = [v10 getTranscript];
  if (v28)
  {
    v29 = v28;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v31;
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v67 = 0xE000000000000000;
  }
  id v32 = [v10 getRecognizedLanguages];
  uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v66 = sub_10033102C(v33);
  swift_bridgeObjectRelease();
  id v34 = [v10 getLines];
  sub_10000F734(0, &qword_1005296E0);
  unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v35 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v71 = v9;
  uint64_t v72 = v6;
  uint64_t v68 = v30;
  if (!v36)
  {
    swift_bridgeObjectRelease();
    v39 = _swiftEmptyArrayStorage;
LABEL_23:
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(a2, v71, v5);
    uint64_t v57 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)(a2 + v57[5]) = v70;
    uint64_t v58 = a2 + v57[6];
    *(void *)uint64_t v58 = v69;
    *(double *)(v58 + 8) = 1.0 - v15;
    *(void *)(v58 + 16) = v17;
    *(double *)(v58 + 24) = 1.0 - v19;
    *(void *)(v58 + 32) = v21;
    *(double *)(v58 + 40) = 1.0 - v23;
    *(void *)(v58 + 48) = v25;
    *(double *)(v58 + 56) = 1.0 - v27;
    v59 = (uint64_t *)(a2 + v57[7]);
    unint64_t v60 = v67;
    uint64_t *v59 = v68;
    v59[1] = v60;
    *(void *)(a2 + v57[8]) = 0;
    *(void *)(a2 + v57[9]) = 0;
    *(void *)(a2 + v57[10]) = v66;
    *(void *)(a2 + v57[11]) = v39;
    *(unsigned char *)(a2 + v57[14]) = 0;
    *(void *)(a2 + v57[12]) = _swiftEmptyArrayStorage;
    *(void *)(a2 + v57[13]) = 0;
    uint64_t v61 = type metadata accessor for CVDetection();
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(a2, 0, 1, v61);
  }
  v77 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100040E3C(0, v36 & ~(v36 >> 63), 0);
  if ((v36 & 0x8000000000000000) == 0)
  {
    uint64_t v63 = v5;
    uint64_t v64 = a2;
    uint64_t v65 = v2;
    uint64_t v38 = 0;
    v39 = v77;
    unint64_t v74 = v35 & 0xC000000000000001;
    NLLanguage v73 = NLLanguageUndetermined;
    uint64_t v75 = v36;
    unint64_t v76 = v35;
    do
    {
      if (v74) {
        id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v40 = *(id *)(v35 + 8 * v38 + 32);
      }
      v41 = v40;
      [v40 confidence];
      int v43 = v42;
      id v44 = [v41 getTranscript];
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;
      }
      else
      {
        uint64_t v46 = 0;
        unint64_t v48 = 0xE000000000000000;
      }
      id v49 = [v41 getRecognizedLanguages];
      uint64_t v50 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v50[2])
      {
        uint64_t v51 = v50[4];
        uint64_t v52 = v50[5];
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v53;
      }
      v77 = v39;
      unint64_t v55 = v39[2];
      unint64_t v54 = v39[3];
      if (v55 >= v54 >> 1)
      {
        sub_100040E3C(v54 > 1, v55 + 1, 1);
        v39 = v77;
      }
      v39[2] = v55 + 1;
      uint64_t v56 = &v39[5 * v55];
      *((_DWORD *)v56 + 8) = v43;
      ++v38;
      v56[5] = v46;
      v56[6] = v48;
      v56[7] = v51;
      v56[8] = v52;
      unint64_t v35 = v76;
    }
    while (v75 != v38);
    swift_bridgeObjectRelease();
    a2 = v64;
    uint64_t v5 = v63;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003281CC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale15VisionProcessor_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100328278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_10020EA98;
  return sub_100325F38(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10032835C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10032840C;
  return sub_1003248A8(v2 + 16, a2);
}

uint64_t sub_10032840C()
{
  uint64_t v1 = *v0 + 16;
  uint64_t v2 = *(void *)(*v0 + 56);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  sub_10000FC34(v1, v2, &qword_100529670);
  v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_10032852C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000F878;
  return sub_100324E90();
}

uint64_t sub_1003285BC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    double v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    double v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        double v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

char *sub_100328860(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_10051F3E0);
      int64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10032F234(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100328970(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100519FA8, type metadata accessor for TextDetectorResult, type metadata accessor for TextDetectorResult);
}

uint64_t sub_1003289A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100525590, type metadata accessor for ActionBarItem, type metadata accessor for ActionBarItem);
}

uint64_t sub_1003289D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100529830, type metadata accessor for CVTrackSnapshot, type metadata accessor for CVTrackSnapshot);
}

void *sub_100328A0C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100525080);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FD54(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100328B1C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100329A24(a1, a2, a3, a4, &qword_100529828, &qword_100518A90);
}

uint64_t sub_100328B30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100529848, type metadata accessor for CVTrackedDetection.HistoryEntry, type metadata accessor for CVTrackedDetection.HistoryEntry);
}

void *sub_100328B64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529810);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10032FC60(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100328C90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100525100, (uint64_t (*)(void))type metadata accessor for CVDetection, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

void *sub_100328CC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_10051A170);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10033071C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100328DE4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_1005299F0);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FF34(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100328EF4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_1005299F8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FF34(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100329004(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529A38);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100331C1C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10032912C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529A30);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100330020(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10032923C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100521060);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FF34(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10032934C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214((uint64_t *)&unk_100529A50);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100331D14(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100329470(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529A48);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100331F64(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10032959C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100529C30, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

void *sub_1003295D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100519FF8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FD54(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1003296E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214((uint64_t *)&unk_100529C10);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FF34(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1003297F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214((uint64_t *)&unk_100529620);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FE40(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100329900(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100519FD8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FD54(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100329A10(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100329A24(a1, a2, a3, a4, (uint64_t *)&unk_100529C20, &qword_100529738);
}

void *sub_100329A24(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000F214(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size_0(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100332780(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100329B40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_10051A0C0, type metadata accessor for TextDetectorResult.DataDetector, type metadata accessor for TextDetectorResult.DataDetector);
}

void *sub_100329B74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529A20);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 136);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[17 * v8 + 4]) {
          memmove(v12, a4 + 4, 136 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100330114(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100329C98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100529A28, type metadata accessor for GeoLookupResultBusiness.Action, type metadata accessor for GeoLookupResultBusiness.Action);
}

void *sub_100329CCC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100329CEC(a1, a2, a3, a4, &qword_10051FB78, type metadata accessor for DeviceType);
}

void *sub_100329CEC(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000F214(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size_0(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100332164(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100329E08(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100329CEC(a1, a2, a3, a4, &qword_100529A00, type metadata accessor for ObjectType);
}

void *sub_100329E28(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100522CE0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FF34(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100329F38(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_10051A070, type metadata accessor for CVBundle, type metadata accessor for CVBundle);
}

void *sub_100329F6C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214((uint64_t *)&unk_1005299B0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100332270(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10032A068(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_1005299A0, type metadata accessor for BundleClassification, type metadata accessor for BundleClassification);
}

uint64_t sub_10032A09C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_10051A108, type metadata accessor for DetectionResult, type metadata accessor for DetectionResult);
}

uint64_t sub_10032A0D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100529640, type metadata accessor for DetectionRequest, type metadata accessor for DetectionRequest);
}

uint64_t sub_10032A104(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100526228, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

void *sub_10032A138(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529C50);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10033268C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10032A248(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529C38);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size_0(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100332270(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10032A344(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10032AB3C(a1, a2, a3, a4, &qword_100529648, &qword_100529650);
}

void *sub_10032A358(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214(&qword_100529820);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10033384C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10032A468(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000F214((uint64_t *)&unk_1005298D0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size_0(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100332058(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10032A578(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, (uint64_t *)&unk_100529CA0, (uint64_t (*)(void))&type metadata accessor for Text.Layout.Run, (uint64_t (*)(void))&type metadata accessor for Text.Layout.Run);
}

uint64_t sub_10032A5AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A5C0(a1, a2, a3, a4, &qword_100529850, &qword_100529858);
}

uint64_t sub_10032A5C0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000F214(a5);
  uint64_t v13 = *(void *)(sub_10000F214(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size_0(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_10000F214(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100332358(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_10032A82C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A5C0(a1, a2, a3, a4, &qword_100529838, &qword_100529840);
}

uint64_t sub_10032A840(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_100519FB8, type metadata accessor for ParseDetectorResult, type metadata accessor for ParseDetectorResult);
}

uint64_t sub_10032A874(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10032A8A8(a1, a2, a3, a4, &qword_1005297E0, (uint64_t (*)(void))&type metadata accessor for VisualDomain, (uint64_t (*)(void))&type metadata accessor for VisualDomain);
}

uint64_t sub_10032A8A8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    BOOL v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000F214(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  BOOL v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size_0(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10032FB04(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_10032AB28(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10032AB3C(a1, a2, a3, a4, &qword_1005297C8, (uint64_t *)&unk_1005297D0);
}

void *sub_10032AB3C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000F214(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size_0(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100333ED8(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t sub_10032AC58(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10032B620(a1, a2, v4);
}

unint64_t sub_10032ACD0(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10032B704(a1, v2);
}

unint64_t sub_10032AD3C(char a1)
{
  Hasher.init(_seed:)();
  sub_100062F74(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10032B7A0(a1, v2);
}

unint64_t sub_10032ADC4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10032C170(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10032AE98(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10032BF94(a1, v4, (unint64_t *)&qword_100521030);
}

unint64_t sub_10032AEE8(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_10032EFB4(&qword_100529988, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10032BCD8(a1, v2);
}

unint64_t sub_10032AF9C(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_1003FFF94((uint64_t)v4);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10032BE34(a1, v2);
}

unint64_t sub_10032B008(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10032BF94(a1, v4, (unint64_t *)&unk_10051F2D8);
}

unint64_t sub_10032B058(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10032C0A8(a1, v4);
}

unint64_t sub_10032B09C(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_10032C488(a1, v2);
}

unint64_t sub_10032B0D8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10032BF94(a1, v4, (unint64_t *)&qword_10051B450);
}

unint64_t sub_10032B128(uint64_t a1)
{
  type metadata accessor for FBKSForm.Question();
  sub_10032EFB4(&qword_1005299C8, (void (*)(uint64_t))&type metadata accessor for FBKSForm.Question);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10032C170(a1, v2, (uint64_t (*)(void))&type metadata accessor for FBKSForm.Question, (unint64_t *)&unk_1005299D0, (void (*)(uint64_t))&type metadata accessor for FBKSForm.Question, (uint64_t)&protocol conformance descriptor for FBKSForm.Question);
}

unint64_t sub_10032B1FC(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_10032C310(a1, v2);
}

unint64_t sub_10032B28C(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_10032C488(a1, v2);
}

unint64_t sub_10032B2C8(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10032C524(v2, a1);
}

unint64_t sub_10032B310(Swift::UInt *a1)
{
  Hasher.init(_seed:)();
  uint64_t v2 = (void *)a1[4];
  if (v2 == (void *)2) {
    goto LABEL_12;
  }
  Swift::UInt v3 = *a1;
  Swift::UInt v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if ((v6 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(HIDWORD(v5));
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    Swift::UInt v7 = 0;
LABEL_13:
    Hasher._combine(_:)(v7);
    unint64_t v9 = (void *)a1[5];
    if (v9) {
      goto LABEL_14;
    }
LABEL_9:
    Hasher._combine(_:)(0);
    goto LABEL_15;
  }
  if (HIDWORD(v5)) {
    Swift::UInt v8 = 2;
  }
  else {
    Swift::UInt v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (!v2) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 == (void *)1)
  {
    Swift::UInt v7 = 1;
    goto LABEL_13;
  }
  Hasher._combine(_:)(2uLL);
  sub_10020F1BC(v2);
  type metadata accessor for CGColor(0);
  sub_10032EFB4(&qword_100524E78, type metadata accessor for CGColor);
  _CFObject.hash(into:)();
  sub_10020F474(v3, v4, v5, v6, v2);
  unint64_t v9 = (void *)a1[5];
  if (!v9) {
    goto LABEL_9;
  }
LABEL_14:
  Hasher._combine(_:)(1u);
  type metadata accessor for CVBuffer(0);
  sub_10032EFB4((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
  id v10 = v9;
  _CFObject.hash(into:)();

LABEL_15:
  Swift::Int v11 = Hasher._finalize()();

  return sub_10032C5BC((uint64_t)a1, v11);
}

unint64_t sub_10032B534(uint64_t a1)
{
  Hasher.init(_seed:)();
  Color.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10032CA34(a1, v2);
}

unint64_t sub_10032B5A0(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return sub_10032CB38(a1, a2, v4);
}

unint64_t sub_10032B620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10032B704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10032B7A0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEC00000070756B6FLL;
      unint64_t v8 = 0x6F4C6C6175736956;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xEA00000000007075;
          unint64_t v8 = 0x6B6F6F4C7370614DLL;
          break;
        case 2:
          unint64_t v8 = 0x697463417370614DLL;
          unint64_t v7 = 0xEA00000000006E6FLL;
          break;
        case 3:
          unint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x65646F435251;
          break;
        case 4:
          unint64_t v8 = 0x4370696C43707041;
          uint64_t v9 = 6644847;
          goto LABEL_19;
        case 5:
          unint64_t v8 = 0x6574654461746144;
          unint64_t v7 = 0xEC000000726F7463;
          break;
        case 6:
          unint64_t v8 = 0x7A6972616D6D7553;
          goto LABEL_16;
        case 7:
          unint64_t v7 = 0xE900000000000064;
          unint64_t v8 = 0x756F6C4164616552;
          break;
        case 8:
          unint64_t v8 = 0x7261646E656C6143;
          unint64_t v7 = 0xED0000746E657645;
          break;
        case 9:
          unint64_t v7 = 0x8000000100424480;
          unint64_t v8 = 0xD000000000000014;
          break;
        case 0xA:
          unint64_t v7 = 0xE300000000000000;
          unint64_t v8 = 7041857;
          break;
        case 0xB:
          unint64_t v8 = 0x6165536567616D49;
          uint64_t v9 = 6841202;
          goto LABEL_19;
        case 0xC:
          unint64_t v8 = 0x74616C736E617254;
LABEL_16:
          unint64_t v7 = 0xE900000000000065;
          break;
        case 0xD:
          unint64_t v8 = 0x4E72657474756853;
          unint64_t v7 = 0xEF6E6F697463416FLL;
          break;
        case 0xE:
          unint64_t v8 = 0x6669636570736E55;
          uint64_t v9 = 6579561;
LABEL_19:
          unint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          break;
      }
      unint64_t v10 = 0xEC00000070756B6FLL;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xEA00000000007075;
          if (v8 == 0x6B6F6F4C7370614DLL) {
            goto LABEL_22;
          }
          goto LABEL_23;
        case 2:
          unint64_t v10 = 0xEA00000000006E6FLL;
          if (v8 != 0x697463417370614DLL) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 3:
          unint64_t v10 = 0xE600000000000000;
          if (v8 != 0x65646F435251) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 4:
          uint64_t v12 = 0x4370696C43707041;
          uint64_t v13 = 6644847;
          goto LABEL_51;
        case 5:
          unint64_t v10 = 0xEC000000726F7463;
          if (v8 != 0x6574654461746144) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 6:
          uint64_t v14 = 0x7A6972616D6D7553;
          goto LABEL_46;
        case 7:
          unint64_t v10 = 0xE900000000000064;
          if (v8 != 0x756F6C4164616552) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 8:
          unint64_t v10 = 0xED0000746E657645;
          if (v8 != 0x7261646E656C6143) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 9:
          unint64_t v10 = 0x8000000100424480;
          if (v8 != 0xD000000000000014) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 10:
          unint64_t v10 = 0xE300000000000000;
          if (v8 != 7041857) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 11:
          uint64_t v12 = 0x6165536567616D49;
          uint64_t v13 = 6841202;
          goto LABEL_51;
        case 12:
          uint64_t v14 = 0x74616C736E617254;
LABEL_46:
          unint64_t v10 = 0xE900000000000065;
          if (v8 != v14) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 13:
          unint64_t v10 = 0xEF6E6F697463416FLL;
          if (v8 != 0x4E72657474756853) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 14:
          uint64_t v12 = 0x6669636570736E55;
          uint64_t v13 = 6579561;
LABEL_51:
          unint64_t v10 = v13 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          if (v8 != v12) {
            goto LABEL_23;
          }
          goto LABEL_22;
        default:
          if (v8 != 0x6F4C6C6175736956) {
            goto LABEL_23;
          }
LABEL_22:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_23:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_10032BCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_10032EFB4(&qword_100529988, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10032BE34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CVDetection() - 8;
  __chkstk_darwin(v5);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      sub_100331E9C(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      char v13 = sub_100402834((uint64_t)v8, a1);
      sub_100331F04((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (v13) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10032BF94(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10000F734(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10032C0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100046B94(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100046BF0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10032C170(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    BOOL v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8, v10);
      sub_10032EFB4(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_10032C310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10032C488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10032C524(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10032C5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v29 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = v2;
    uint64_t v28 = ~v3;
    sub_100331E04(a1, (uint64_t)v30);
    uint64_t v26 = v2;
    do
    {
      uint64_t v6 = (uint64_t *)(*(void *)(v5 + 48) + 48 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      uint64_t v10 = v6[2];
      uint64_t v9 = v6[3];
      uint64_t v12 = (void *)v6[4];
      char v11 = (void *)v6[5];
      if (v12 == (void *)2)
      {
        sub_100331E04((uint64_t)v30, (uint64_t)v37);
        if (v38 != 2) {
          goto LABEL_4;
        }
        id v13 = v11;
      }
      else
      {
        sub_100331E04((uint64_t)v30, (uint64_t)&v31);
        if (v33 == 2) {
          goto LABEL_4;
        }
        long long v34 = v31;
        long long v35 = v32;
        uint64_t v36 = v33;
        BOOL v19 = v8 == (void)v31 && v7 == *((void *)&v31 + 1);
        if (!v19 || v32 != v10) {
          goto LABEL_4;
        }
        sub_10020F6E0((int *)&v35 + 1, (uint64_t)&v40);
        if (v9)
        {
          if (HIDWORD(v10))
          {
            sub_10020F6E0(&v40, (uint64_t)&v41);
            if (v42 != 1 || !v41) {
              goto LABEL_4;
            }
          }
          else
          {
            sub_10020F6E0(&v40, (uint64_t)&v45);
            if (v46 != 1 || v45) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          sub_10020F6E0(&v40, (uint64_t)&v43);
          if ((v44 & 1) != 0 || v43 != HIDWORD(v10)) {
            goto LABEL_4;
          }
        }
        sub_100210218(&v36, &v39);
        if (v12)
        {
          if (v12 == (void *)1)
          {
            sub_100210218(&v39, &v48);
            if (v48 != 1) {
              goto LABEL_4;
            }
            id v21 = v11;
            sub_10020F1A8(v8, v7, v10, v9, (void *)1);
          }
          else
          {
            sub_100210218(&v39, &v47);
            if (v47 < 2) {
              goto LABEL_4;
            }
            type metadata accessor for CGColor(0);
            sub_10020F1A8(v8, v7, v10, v9, v12);
            id v25 = v11;
            sub_10020F1A8(v8, v7, v10, v9, v12);
            sub_100331E60(v30, (void (*)(void, void, void, void, void))sub_10020F1A8);
            sub_10032EFB4(&qword_100524E78, type metadata accessor for CGColor);
            char v23 = static _CFObject.== infix(_:_:)();
            sub_100331E60(v30, (void (*)(void, void, void, void, void))sub_10020F474);
            sub_10020F474(v8, v7, v10, v9, v12);
            if ((v23 & 1) == 0)
            {
              sub_10020F474(v8, v7, v10, v9, v12);

              goto LABEL_4;
            }
          }
        }
        else
        {
          sub_100210218(&v39, &v49);
          if (v49) {
            goto LABEL_4;
          }
          id v22 = v11;
          sub_10020F1A8(v8, v7, v10, v9, 0);
        }
      }
      uint64_t v14 = v9;
      uint64_t v15 = *(void **)(a1 + 40);
      if (v11)
      {
        if (v15)
        {
          type metadata accessor for CVBuffer(0);
          sub_10032EFB4((unint64_t *)&unk_100524E80, type metadata accessor for CVBuffer);
          id v16 = v11;
          id v17 = v15;
          uint64_t v5 = v26;
          char v18 = static _CFObject.== infix(_:_:)();

          sub_10020F474(v8, v7, v10, v14, v12);
          if (v18) {
            return v4;
          }
        }
        else
        {
          sub_10020F474(v8, v7, v10, v14, v12);
        }
      }
      else
      {
        sub_10020F474(v8, v7, v10, v14, v12);
        if (!v15) {
          return v4;
        }
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v28;
    }
    while (((*(void *)(v29 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10032CA34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    swift_retain();
    char v6 = static Color.== infix(_:_:)();
    swift_release();
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = ~v4;
      for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
      {
        swift_retain();
        char v8 = static Color.== infix(_:_:)();
        swift_release();
        if (v8) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10032CB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      char v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (v10 == a1 && v9 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

void sub_10032CBB4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    for (unint64_t i = (unsigned char *)(a2 + 40); ; i += 16)
    {
      Swift::UInt64 v7 = *((void *)i - 1);
      if (!*i) {
        break;
      }
      if (*i == 1)
      {
        Swift::UInt v5 = 3;
        goto LABEL_4;
      }
      if (v7) {
        Hasher._combine(_:)(2uLL);
      }
      else {
        Hasher._combine(_:)(1uLL);
      }
LABEL_8:
      if (!--v3) {
        return;
      }
    }
    Swift::UInt v5 = 0;
LABEL_4:
    Hasher._combine(_:)(v5);
    if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v7;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
    goto LABEL_8;
  }
}

void sub_10032CC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  Swift::UInt64 v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  uint64_t v50 = v8;
  __chkstk_darwin(v7);
  char v42 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v10 - 8);
  uint64_t v48 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v15);
  id v17 = (uint64_t *)((char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for BundleClassification(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a2;
  Swift::UInt v22 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v22);
  Swift::UInt v52 = v22;
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(v19 + 72);
    uint64_t v25 = v51 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    int v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    uint64_t v46 = v15;
    int v40 = (void (**)(char *, uint64_t))(v50 + 8);
    int v41 = (void (**)(char *, uint64_t, uint64_t))(v50 + 32);
    unint64_t v47 = v14;
    uint64_t v50 = v25;
    uint64_t v51 = v24;
    uint64_t v44 = v18;
    do
    {
      uint64_t v29 = v25 + v51 * v23++;
      sub_100331E9C(v29, (uint64_t)v21, type metadata accessor for BundleClassification);
      sub_100331E9C((uint64_t)v21, (uint64_t)v17, type metadata accessor for BundleClassification.ClassificationType);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v31 = *(uint64_t *)((char *)v17 + *(int *)(sub_10000F214(&qword_1005297C0) + 48));
          sub_1003337E4((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          Hasher._combine(_:)(4uLL);
          uint64_t v32 = v48;
          sub_100331E9C((uint64_t)v14, v48, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          switch((*v45)(v32, 3, v49))
          {
            case 1u:
              Swift::UInt v35 = 0;
              goto LABEL_21;
            case 2u:
              Swift::UInt v35 = 2;
              goto LABEL_21;
            case 3u:
              Swift::UInt v35 = 3;
LABEL_21:
              Hasher._combine(_:)(v35);
              break;
            default:
              uint64_t v33 = v42;
              uint64_t v34 = v49;
              (*v41)(v42, v48, v49);
              Hasher._combine(_:)(1uLL);
              sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
              dispatch thunk of Hashable.hash(into:)();
              (*v40)(v33, v34);
              break;
          }
          Hasher._combine(_:)(*(void *)(v31 + 16));
          uint64_t v36 = *(void *)(v31 + 16);
          if (v36)
          {
            uint64_t v37 = v31 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
            uint64_t v38 = *(void *)(v43 + 72);
            do
            {
              sub_100331E9C(v37, (uint64_t)v6, type metadata accessor for VisualIntelligenceLookupResult);
              sub_1003E4DFC(a1);
              sub_100331F04((uint64_t)v6, type metadata accessor for VisualIntelligenceLookupResult);
              v37 += v38;
              --v36;
            }
            while (v36);
          }
          uint64_t v14 = v47;
          sub_100331F04((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          swift_bridgeObjectRelease();
          uint64_t v25 = v50;
          uint64_t v18 = v44;
          break;
        case 2u:
          Swift::UInt v26 = 1;
          goto LABEL_4;
        case 3u:
          Swift::UInt v26 = 2;
          goto LABEL_4;
        case 4u:
          Swift::UInt v26 = 3;
LABEL_4:
          Hasher._combine(_:)(v26);
          break;
        default:
          uint64_t v30 = *v17;
          Hasher._combine(_:)(0);
          sub_10032D260(a1, v30);
          uint64_t v25 = v50;
          swift_bridgeObjectRelease();
          break;
      }
      if ((*(void *)&v21[*(int *)(v18 + 20)] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v27 = *(void *)&v21[*(int *)(v18 + 20)];
      }
      else {
        Swift::UInt64 v27 = 0;
      }
      Hasher._combine(_:)(v27);
      if ((*(void *)&v21[*(int *)(v18 + 24)] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v28 = *(void *)&v21[*(int *)(v18 + 24)];
      }
      else {
        Swift::UInt64 v28 = 0;
      }
      Hasher._combine(_:)(v28);
      sub_100331F04((uint64_t)v21, type metadata accessor for BundleClassification);
    }
    while (v23 != v52);
  }
}

void sub_10032D260(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  Swift::UInt v21 = v3;
  if (v3)
  {
    for (uint64_t i = 0; i != v21; ++i)
    {
      uint64_t v5 = a2 + 32 + (i << 6);
      Swift::UInt64 v6 = *(void **)v5;
      Swift::UInt64 v7 = *(void *)(v5 + 24);
      Swift::UInt64 v8 = *(void *)(v5 + 32);
      Swift::UInt64 v22 = *(void *)(v5 + 40);
      uint64_t v10 = *(void *)(v5 + 48);
      uint64_t v9 = *(void *)(v5 + 56);
      swift_bridgeObjectRetain();
      id v11 = v6;
      swift_bridgeObjectRetain();
      NSObject.hash(into:)();

      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v12 = v7;
      }
      else {
        Swift::UInt64 v12 = 0;
      }
      Hasher._combine(_:)(v12);
      if (v9)
      {
        Hasher._combine(_:)(1u);
        if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v13 = v8;
        }
        else {
          Swift::UInt64 v13 = 0;
        }
        Hasher._combine(_:)(v13);
        if (v10)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v14 = v22;
          }
          else {
            Swift::UInt64 v14 = 0;
          }
          Hasher._combine(_:)(v14);
        }
        Swift::UInt v15 = *(void *)(v9 + 16);
        Hasher._combine(_:)(v15);
        if (v15)
        {
          uint64_t v16 = (unsigned char *)(v9 + 40);
          do
          {
            Swift::UInt64 v19 = *((void *)v16 - 1);
            if (*v16)
            {
              if (*v16 != 1)
              {
                if (v19) {
                  Swift::UInt v20 = 2;
                }
                else {
                  Swift::UInt v20 = 1;
                }
                Hasher._combine(_:)(v20);
                goto LABEL_25;
              }
              Swift::UInt v17 = 3;
            }
            else
            {
              Swift::UInt v17 = 0;
            }
            Hasher._combine(_:)(v17);
            if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              Swift::UInt64 v18 = v19;
            }
            else {
              Swift::UInt64 v18 = 0;
            }
            Hasher._combine(_:)(v18);
LABEL_25:
            v16 += 16;
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10032D440(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  Swift::UInt v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v34);
  uint64_t v33 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVBundle(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::UInt64 v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v14 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v14);
  if (v14)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v36 = *(void *)(v11 + 72);
    uint64_t v31 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v32 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      sub_100331E9C(v15, (uint64_t)v13, type metadata accessor for CVBundle);
      sub_100331E9C((uint64_t)v13, (uint64_t)v9, type metadata accessor for CVBundle.BundleType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v16 = v7;
        Swift::UInt v17 = v35;
        Swift::UInt64 v18 = v9;
        Swift::UInt64 v19 = v9;
        uint64_t v20 = v10;
        uint64_t v21 = v37;
        (*v32)(v35, v18, v37);
        Hasher._combine(_:)(1uLL);
        sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Hasher._combine(_:)(0);
        Swift::UInt64 v22 = v17;
        uint64_t v7 = v16;
        uint64_t v23 = v21;
        uint64_t v10 = v20;
        uint64_t v9 = v19;
        (*v31)(v22, v23);
      }
      else
      {
        uint64_t v26 = v33;
        sub_1003337E4((uint64_t)v9, v33, type metadata accessor for CVTrackSnapshot);
        Hasher._combine(_:)(0);
        sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::UInt64 v27 = (int *)v34;
        sub_1003FFF94(a1);
        sub_1003FFF94(a1);
        Hasher._combine(_:)(*(unsigned __int8 *)(v26 + v27[7]));
        if ((*(void *)(v26 + v27[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v28 = *(void *)(v26 + v27[8]);
        }
        else {
          Swift::UInt64 v28 = 0;
        }
        Hasher._combine(_:)(v28);
        if ((*(_DWORD *)(v26 + v27[9]) & 0x7FFFFFFF) != 0) {
          Swift::UInt32 v29 = *(_DWORD *)(v26 + v27[9]);
        }
        else {
          Swift::UInt32 v29 = 0;
        }
        Hasher._combine(_:)(v29);
        sub_100331F04(v26, type metadata accessor for CVTrackSnapshot);
      }
      uint64_t v24 = *(void *)&v13[*(int *)(v10 + 20)];
      swift_bridgeObjectRetain();
      sub_10032D440(a1, v24);
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)&v13[*(int *)(v10 + 24)];
      swift_bridgeObjectRetain();
      sub_10032CC50(a1, v25);
      swift_bridgeObjectRelease();
      sub_100331F04((uint64_t)v13, type metadata accessor for CVBundle);
      v15 += v36;
      --v14;
    }
    while (v14);
  }
}

void sub_10032D8D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v8);
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      NSObject.hash(into:)();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v5 = (void **)(a2 + 32);
    do
    {
      uint64_t v6 = *v5++;
      id v7 = v6;
      NSObject.hash(into:)();

      --v3;
    }
    while (v3);
  }
}

void sub_10032D9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v26 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GeoLookupResultBusiness.Action(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt v8 = (void **)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - v10;
  Swift::UInt v12 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v14 = *(void *)(v6 + 72);
    Swift::UInt64 v22 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v24 = v14;
    uint64_t v25 = v5;
    do
    {
      sub_100331E9C(v13, (uint64_t)v11, type metadata accessor for GeoLookupResultBusiness.Action);
      sub_100331E9C((uint64_t)v11, (uint64_t)v8, type metadata accessor for GeoLookupResultBusiness.Action);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          Swift::UInt64 v28 = v8[2];
          uint64_t v16 = sub_10000F214(&qword_10051F400);
          Swift::UInt64 v18 = v26;
          uint64_t v17 = v27;
          (*v23)(v26, (char *)v8 + *(int *)(v16 + 64), v27);
          Hasher._combine(_:)(2uLL);
          String.hash(into:)();
          swift_bridgeObjectRelease();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          sub_10032EFB4((unint64_t *)&qword_10051F670, (void (*)(uint64_t))&type metadata accessor for URL);
          dispatch thunk of Hashable.hash(into:)();
          Swift::UInt64 v19 = v18;
          uint64_t v14 = v24;
          (*v22)(v19, v17);
        }
        else
        {
          Hasher._combine(_:)(0);
        }
      }
      else
      {
        uint64_t v20 = *v8;
        Hasher._combine(_:)(1uLL);
        NSObject.hash(into:)();
      }
      sub_100331F04((uint64_t)v11, type metadata accessor for GeoLookupResultBusiness.Action);
      v13 += v14;
      --v12;
    }
    while (v12);
  }
}

void sub_10032DD14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v6 - 8);
  Swift::UInt v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult.DataDetector(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::UInt v12 = (Swift::UInt *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::UInt v13 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    uint64_t v37 = (uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v38 = v15;
    uint64_t v34 = (void (**)(char *, uint64_t))(v4 + 8);
    Swift::UInt v35 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    int v41 = v8;
    uint64_t v42 = v3;
    uint64_t v39 = v12;
    uint64_t v40 = v9;
    do
    {
      sub_100331E9C(v14, (uint64_t)v12, type metadata accessor for TextDetectorResult.DataDetector);
      Hasher._combine(_:)(*v12);
      sub_10000FB74((uint64_t)v12 + *(int *)(v9 + 20), (uint64_t)v8, (uint64_t *)&unk_100524ED0);
      int v33 = (*v37)(v8, 1, v3);
      Swift::UInt v43 = v13;
      if (v33 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v16 = v36;
        (*v35)(v36, v8, v3);
        Hasher._combine(_:)(1u);
        sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        (*v34)(v16, v3);
      }
      String.hash(into:)();
      uint64_t v17 = (Swift::UInt *)((char *)v12 + *(int *)(v9 + 28));
      Swift::UInt64 v18 = v17[1];
      Swift::UInt64 v19 = v17[2];
      Swift::UInt64 v20 = v17[3];
      Swift::UInt64 v21 = v17[4];
      Swift::UInt64 v22 = v17[5];
      Swift::UInt64 v23 = v17[6];
      Swift::UInt64 v24 = v17[7];
      if ((*v17 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v25 = *v17;
      }
      else {
        Swift::UInt64 v25 = 0;
      }
      Hasher._combine(_:)(v25);
      if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v26 = v18;
      }
      else {
        Swift::UInt64 v26 = 0;
      }
      Hasher._combine(_:)(v26);
      if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v27 = v19;
      }
      else {
        Swift::UInt64 v27 = 0;
      }
      Hasher._combine(_:)(v27);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v28 = v20;
      }
      else {
        Swift::UInt64 v28 = 0;
      }
      Hasher._combine(_:)(v28);
      if ((v21 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v29 = v21;
      }
      else {
        Swift::UInt64 v29 = 0;
      }
      Hasher._combine(_:)(v29);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v30 = v22;
      }
      else {
        Swift::UInt64 v30 = 0;
      }
      uint64_t v9 = v40;
      Hasher._combine(_:)(v30);
      if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v31 = v23;
      }
      else {
        Swift::UInt64 v31 = 0;
      }
      Swift::UInt v12 = v39;
      Hasher._combine(_:)(v31);
      if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v32 = v24;
      }
      else {
        Swift::UInt64 v32 = 0;
      }
      Hasher._combine(_:)(v32);
      sub_100331F04((uint64_t)v12, type metadata accessor for TextDetectorResult.DataDetector);
      v14 += v38;
      uint64_t v3 = v42;
      Swift::UInt v13 = v43 - 1;
      Swift::UInt v8 = v41;
    }
    while (v43 != 1);
  }
}

void sub_10032E0C0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 64;
    do
    {
      if ((*(_DWORD *)(v4 - 32) & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v5 = *(_DWORD *)(v4 - 32);
      }
      else {
        Swift::UInt32 v5 = 0;
      }
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

void sub_10032E174(uint64_t a1, uint64_t a2)
{
  Hasher._finalize()();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_19;
    }
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v9);
    if (!v12) {
      break;
    }
LABEL_16:
    uint64_t v6 = (v12 - 1) & v12;
LABEL_5:
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v10 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v10;
  }
  int64_t v13 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

void *sub_10032E30C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000F214(&qword_10051A160);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = j__malloc_size_0(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

void *sub_10032E384(void *result, Swift::String_optional *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5 = result;
  uint64_t v6 = HIBYTE(a5) & 0xF;
  uint64_t v11 = a4;
  unint64_t v12 = a5;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v13 = v6;
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_14:
    *int64_t v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (void *)v7;
  }
  uint64_t v7 = a3;
  if (!a3) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    Swift::UInt v8 = a2;
    uint64_t v9 = 0;
    while (1)
    {
      Swift::String_optional v10 = String.Iterator.next()();
      if (!v10.value._object) {
        break;
      }
      ++v9;
      *v8++ = v10;
      if (v7 == v9)
      {
        a4 = v11;
        a5 = v12;
        goto LABEL_13;
      }
    }
    a4 = v11;
    a5 = v12;
    uint64_t v7 = v9;
LABEL_13:
    uint64_t v6 = v13;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

unint64_t sub_10032E444(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10000F214(&qword_100529AD0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_10032ACD0(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    Swift::String_optional v10 = (void *)(v3[7] + 16 * result);
    *Swift::String_optional v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10032ACD0(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10032E554()
{
  return sub_10032EFB4(&qword_100518398, type metadata accessor for VKDataDetectorTypes);
}

uint64_t sub_10032E59C()
{
  return type metadata accessor for VisionProcessor(0);
}

uint64_t type metadata accessor for VisionProcessor(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100529238);
}

uint64_t sub_10032E5C4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_10032E684(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    Swift::String_optional v10 = (_OWORD *)((char *)a2 + v8);
    long long v11 = v10[1];
    _OWORD *v9 = *v10;
    v9[1] = v11;
    long long v12 = v10[3];
    v9[2] = v10[2];
    v9[3] = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (void *)((char *)a1 + v13);
    char v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v18 = a3[10];
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v19 = a3[12];
    *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
    *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
    uint64_t v20 = a3[13];
    uint64_t v21 = a3[14];
    Swift::UInt64 v22 = *(void **)((char *)a2 + v20);
    *(void *)((char *)a1 + v20) = v22;
    *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v23 = v22;
  }
  return a1;
}

void sub_10032E7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + *(int *)(a2 + 52));
}

uint64_t sub_10032E890(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v17 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[13];
  uint64_t v20 = a3[14];
  uint64_t v21 = *(void **)(a2 + v19);
  *(void *)(a1 + v19) = v21;
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v22 = v21;
  return a1;
}

uint64_t sub_10032E9A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v8[6] = v9[6];
  v8[7] = v9[7];
  uint64_t v10 = a3[7];
  long long v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *long long v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[13];
  uint64_t v14 = *(void **)(a1 + v13);
  uint64_t v15 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v15;
  id v16 = v15;

  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10032EB28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  return a1;
}

uint64_t sub_10032EC0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[13];
  uint64_t v19 = *(void **)(a1 + v18);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);

  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10032ED2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032ED40);
}

uint64_t sub_10032ED44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032ED58);
}

uint64_t type metadata accessor for TextDetectorResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100529380);
}

uint64_t sub_10032ED7C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10032EE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10032EE74);
}

uint64_t sub_10032EE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10032EE8C);
}

uint64_t type metadata accessor for ObjectDetectorResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100529438);
}

uint64_t sub_10032EEB0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10032EF6C()
{
  return sub_10032EFB4((unint64_t *)&unk_100529480, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
}

uint64_t sub_10032EFB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10032EFFC()
{
  return sub_10032EFB4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10032F044(void *a1)
{
  a1[1] = sub_10032EFB4(&qword_100529518, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
  a1[2] = sub_10032EFB4(&qword_100529520, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
  a1[3] = sub_10032EFB4(&qword_100529528, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
  uint64_t result = sub_10032EFB4(&qword_100529530, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
  a1[4] = result;
  return result;
}

uint64_t sub_10032F118()
{
  return sub_10032EFB4(&qword_100529538, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
}

uint64_t sub_10032F160(void *a1)
{
  a1[1] = sub_10032EFB4(&qword_1005295C8, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
  a1[2] = sub_10032EFB4((unint64_t *)&unk_1005295D0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
  a1[3] = sub_10032EFB4(&qword_10051B9E8, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
  uint64_t result = sub_10032EFB4(&qword_1005295E0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
  a1[4] = result;
  return result;
}

uint64_t sub_10032F234(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_10032F328(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for ObjectDetectorResult(0);
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  unint64_t v5 = (int *)v4;
  unint64_t v6 = (_OWORD *)(a1 + *(int *)(v4 + 24));
  long long v7 = v6[3];
  v18[2] = v6[2];
  v18[3] = v7;
  long long v8 = v6[1];
  v18[0] = *v6;
  v18[1] = v8;
  uint64_t v9 = (_OWORD *)(a2 + *(int *)(v4 + 24));
  long long v10 = v9[3];
  v19[2] = v9[2];
  v19[3] = v10;
  long long v11 = v9[1];
  v19[0] = *v9;
  v19[1] = v11;
  if (!sub_1004027A4((double *)v18, (double *)v19)) {
    return 0;
  }
  uint64_t v12 = v5[7];
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  if (v13 == *v15 && v14 == v15[1]
    || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v16 & 1) != 0))
  {
    if (*(double *)(a1 + v5[8]) == *(double *)(a2 + v5[8])) {
      return *(double *)(a1 + v5[9]) == *(double *)(a2 + v5[9]);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10032F42C(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32))
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

BOOL sub_10032F4CC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100521670);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v16 = (char *)&v45 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v45 - v18;
  if (*a1 != *a2) {
    return 0;
  }
  int v45 = v7;
  uint64_t v20 = type metadata accessor for TextDetectorResult.DataDetector(0);
  uint64_t v21 = *(int *)(v20 + 20);
  unint64_t v47 = a1;
  sub_10000FB74((uint64_t)a1 + v21, (uint64_t)v19, (uint64_t *)&unk_100524ED0);
  uint64_t v46 = v20;
  uint64_t v22 = *(int *)(v20 + 20);
  uint64_t v48 = a2;
  sub_10000FB74((uint64_t)a2 + v22, (uint64_t)v16, (uint64_t *)&unk_100524ED0);
  uint64_t v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10000FB74((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_100524ED0);
  sub_10000FB74((uint64_t)v16, v23, (uint64_t *)&unk_100524ED0);
  uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v10, 1, v4) == 1)
  {
    sub_10000FBD8((uint64_t)v16, (uint64_t *)&unk_100524ED0);
    sub_10000FBD8((uint64_t)v19, (uint64_t *)&unk_100524ED0);
    if (v24(v23, 1, v4) == 1)
    {
      sub_10000FBD8((uint64_t)v10, (uint64_t *)&unk_100524ED0);
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  sub_10000FB74((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100524ED0);
  if (v24(v23, 1, v4) == 1)
  {
    sub_10000FBD8((uint64_t)v16, (uint64_t *)&unk_100524ED0);
    sub_10000FBD8((uint64_t)v19, (uint64_t *)&unk_100524ED0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_7:
    sub_10000FBD8((uint64_t)v10, &qword_100521670);
    return 0;
  }
  Swift::UInt64 v27 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v45, v23, v4);
  sub_10032EFB4(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v28 = v5;
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  Swift::UInt64 v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  v30(v27, v4);
  sub_10000FBD8((uint64_t)v16, (uint64_t *)&unk_100524ED0);
  sub_10000FBD8((uint64_t)v19, (uint64_t *)&unk_100524ED0);
  v30(v13, v4);
  sub_10000FBD8((uint64_t)v10, (uint64_t *)&unk_100524ED0);
  if ((v29 & 1) == 0) {
    return 0;
  }
LABEL_11:
  uint64_t v32 = v46;
  Swift::UInt64 v31 = v47;
  uint64_t v33 = *(int *)(v46 + 24);
  uint64_t v34 = *(void *)((char *)v47 + v33);
  uint64_t v35 = *(void *)((char *)v47 + v33 + 8);
  uint64_t v36 = v48;
  uint64_t v37 = (void *)((char *)v48 + v33);
  if (v34 == *v37 && v35 == v37[1] || (v38 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL v25 = 0, (v38 & 1) != 0))
  {
    uint64_t v39 = (_OWORD *)((char *)v31 + *(int *)(v32 + 28));
    long long v40 = v39[3];
    v49[2] = v39[2];
    v49[3] = v40;
    long long v41 = v39[1];
    v49[0] = *v39;
    v49[1] = v41;
    uint64_t v42 = (_OWORD *)((char *)v36 + *(int *)(v32 + 28));
    long long v43 = v42[3];
    v50[2] = v42[2];
    v50[3] = v43;
    long long v44 = v42[1];
    v50[0] = *v42;
    v50[1] = v44;
    return sub_1004027A4((double *)v49, (double *)v50);
  }
  return v25;
}

uint64_t sub_10032F944(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20))) {
    goto LABEL_17;
  }
  uint64_t v5 = (int *)v4;
  uint64_t v6 = (_OWORD *)(a1 + *(int *)(v4 + 24));
  long long v7 = v6[3];
  v25[2] = v6[2];
  v25[3] = v7;
  long long v8 = v6[1];
  v25[0] = *v6;
  v25[1] = v8;
  uint64_t v9 = (_OWORD *)(a2 + *(int *)(v4 + 24));
  long long v10 = v9[3];
  v26[2] = v9[2];
  v26[3] = v10;
  long long v11 = v9[1];
  v26[0] = *v9;
  v26[1] = v11;
  if (!sub_1004027A4((double *)v25, (double *)v26)) {
    goto LABEL_17;
  }
  uint64_t v12 = v5[7];
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(a1 + v12 + 8);
  uint64_t v15 = (void *)(a2 + v12);
  if (v13 == *v15 && v14 == v15[1] || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), v17 = 0, (v16 & 1) != 0))
  {
    if (*(double *)(a1 + v5[8]) == *(double *)(a2 + v5[8])
      && *(double *)(a1 + v5[9]) == *(double *)(a2 + v5[9])
      && (sub_1003285BC(*(void *)(a1 + v5[10]), *(void *)(a2 + v5[10])) & 1) != 0
      && (sub_1003E23A0(*(void *)(a1 + v5[11]), *(void *)(a2 + v5[11])) & 1) != 0
      && (sub_1003E2480(*(void *)(a1 + v5[12]), *(void *)(a2 + v5[12])) & 1) != 0)
    {
      uint64_t v18 = v5[13];
      uint64_t v19 = *(void **)(a1 + v18);
      uint64_t v20 = *(void **)(a2 + v18);
      if (v19)
      {
        if (v20)
        {
          sub_10000F734(0, (unint64_t *)&unk_100529630);
          id v21 = v20;
          id v22 = v19;
          char v23 = static NSObject.== infix(_:_:)();

          if (v23) {
            goto LABEL_15;
          }
        }
      }
      else if (!v20)
      {
LABEL_15:
        char v17 = *(unsigned char *)(a1 + v5[14]) ^ *(unsigned char *)(a2 + v5[14]) ^ 1;
        return v17 & 1;
      }
    }
LABEL_17:
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_10032FB04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10032FC60(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 88 * a1 + 32);
    uint64_t v6 = &__dst[88 * v4];
    if (v5 >= v6 || &v5[88 * v4] <= __dst)
    {
      memcpy(__dst, v5, 88 * v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10032FD54(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    long long v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10032FE40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10032FF34(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    long long v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330020(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330114(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 136 * a1 + 32;
    unint64_t v6 = a3 + 136 * v4;
    if (v5 >= v6 || v5 + 136 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10033020C(uint64_t a1, void (*a2)(void, void, unsigned __int8 *), uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100521070);
  __chkstk_darwin(v6 - 8);
  long long v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DetectionResult(0);
  uint64_t v9 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v23 = (uint64_t)v21 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = sub_10000F214((uint64_t *)&unk_100529860);
  uint64_t v14 = *(void *)(v25 - 8);
  uint64_t v15 = (unsigned __int8 *)(a1
                          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)));
  uint64_t v22 = v9;
  uint64_t v24 = *(void *)(v14 + 72);
  v21[1] = a1;
  swift_bridgeObjectRetain();
  char v16 = _swiftEmptyArrayStorage;
  do
  {
    a2(*v15, *((void *)v15 + 1), &v15[*(int *)(v25 + 64)]);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v27) == 1)
    {
      sub_10000FBD8((uint64_t)v8, (uint64_t *)&unk_100521070);
    }
    else
    {
      uint64_t v17 = v23;
      sub_1003337E4((uint64_t)v8, v23, type metadata accessor for DetectionResult);
      sub_1003337E4(v17, v26, type metadata accessor for DetectionResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v16 = (void *)sub_10032A8A8(0, v16[2] + 1, 1, (unint64_t)v16, &qword_10051A108, type metadata accessor for DetectionResult, type metadata accessor for DetectionResult);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        char v16 = (void *)sub_10032A8A8(v18 > 1, v19 + 1, 1, (unint64_t)v16, &qword_10051A108, type metadata accessor for DetectionResult, type metadata accessor for DetectionResult);
      }
      v16[2] = v19 + 1;
      sub_1003337E4(v26, (uint64_t)v16+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v19, type metadata accessor for DetectionResult);
    }
    v15 += v24;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_1003305B4(unint64_t a1, void *a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v3) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_100040E1C(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0) {
      break;
    }
    uint64_t v5 = 0;
    unint64_t v13 = v2 & 0xC000000000000001;
    unint64_t v6 = v2;
    while (v3 != v5)
    {
      if (v13) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      id v8 = v7;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      id v11 = a2;
      if (v9 >= v10 >> 1) {
        sub_100040E1C(v10 > 1, v9 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v9];
      v12[4] = v8;
      v12[5] = v11;
      unint64_t v2 = v6;
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10033071C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TextDetectorResult.DataDetector(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100529B30);
}

void *sub_100330834(uint64_t a1, void (*a2)(id, id), uint64_t a3)
{
  v19[1] = a3;
  uint64_t v6 = type metadata accessor for CVDetection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  id v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v19[0] = v3;
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_100040D64(0, v10, 0);
    id v11 = v20;
    uint64_t v12 = (void **)(a1 + 40);
    do
    {
      unint64_t v13 = *v12;
      id v14 = *(v12 - 1);
      id v15 = v13;
      a2(v14, v15);

      uint64_t v20 = v11;
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      if (v17 >= v16 >> 1)
      {
        sub_100040D64(v16 > 1, v17 + 1, 1);
        id v11 = v20;
      }
      v11[2] = v17 + 1;
      sub_1003337E4((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v12 += 2;
      --v10;
    }
    while (v10);
  }
  return v11;
}

void *sub_1003309E8(unint64_t a1, unint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v3) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_100040954(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0) {
      break;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      [v6 rawConfidence];
      float v9 = v8;
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100040954(v11 > 1, v12 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      *((float *)&_swiftEmptyArrayStorage[4] + v12) = v9 / (float)v10;
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100330BAC(uint64_t a1, void (*a2)(uint64_t, uint64_t, id), uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for TextDetectorResult.DataDetector(0);
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  float v9 = _swiftEmptyArrayStorage;
  if (!v8) {
    return (uint64_t)v9;
  }
  v30[1] = v3;
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1000407D0(0, v8, 0);
  float v9 = v39;
  uint64_t result = sub_10030B124(a1);
  uint64_t v12 = result;
  uint64_t v13 = 0;
  uint64_t v14 = a1 + 64;
  uint64_t v31 = a1 + 80;
  int64_t v32 = v8;
  uint64_t v33 = v11;
  uint64_t v34 = a1 + 64;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v17 = (unint64_t)v12 >> 6;
    if ((*(void *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v11) {
      goto LABEL_24;
    }
    uint64_t v38 = v13;
    unint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    unint64_t v19 = v9;
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    id v22 = *(id *)(*(void *)(a1 + 56) + 8 * v12);
    v36(v20, v21, v22);
    float v9 = v19;

    uint64_t v39 = v19;
    unint64_t v24 = v19[2];
    unint64_t v23 = v19[3];
    if (v24 >= v23 >> 1)
    {
      sub_1000407D0(v23 > 1, v24 + 1, 1);
      float v9 = v39;
    }
    v9[2] = v24 + 1;
    uint64_t result = sub_1003337E4((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v24, type metadata accessor for TextDetectorResult.DataDetector);
    int64_t v15 = 1 << *(unsigned char *)(a1 + 32);
    if (v12 >= v15) {
      goto LABEL_25;
    }
    uint64_t v14 = v34;
    uint64_t v25 = *(void *)(v34 + 8 * v17);
    if ((v25 & (1 << v12)) == 0) {
      goto LABEL_26;
    }
    LODWORD(v11) = v33;
    if (*(_DWORD *)(a1 + 36) != v33) {
      goto LABEL_27;
    }
    unint64_t v26 = v25 & (-2 << (v12 & 0x3F));
    if (v26)
    {
      int64_t v15 = __clz(__rbit64(v26)) | v12 & 0xFFFFFFFFFFFFFFC0;
      int64_t v16 = v32;
    }
    else
    {
      unint64_t v27 = v17 + 1;
      unint64_t v28 = (unint64_t)(v15 + 63) >> 6;
      int64_t v16 = v32;
      if (v17 + 1 < v28)
      {
        unint64_t v29 = *(void *)(v34 + 8 * v27);
        if (v29)
        {
LABEL_20:
          int64_t v15 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v17)
          {
            unint64_t v29 = *(void *)(v31 + 8 * v17++);
            if (v29)
            {
              unint64_t v27 = v17 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v13 = v38 + 1;
    uint64_t v12 = v15;
    if (v38 + 1 == v16) {
      return (uint64_t)v9;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100330E90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VisualDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10032EFB4((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      sub_1001F9028((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_10033102C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1001F934C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1003310C4()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  return sub_1003311F8(v0);
}

unint64_t sub_100331120(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000F214(&qword_1005255C0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      unint64_t result = sub_10032B28C(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(unsigned char *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_1003311F8(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_100331224()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();
  return sub_1003311F8(v0);
}

unint64_t sub_100331278(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10000F214((uint64_t *)&unk_1005251C0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[4];
  unint64_t result = sub_100331224();
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return v3;
  }
  Swift::Int v7 = a1 + 5;
  uint64_t v8 = v1 - 1;
  while (1)
  {
    *(void *)(v3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v3 + 56) + 8 * result) = v4;
    uint64_t v9 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    *(void *)(v3 + 16) = v11;
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v12 = *v7++;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100331224();
    --v8;
    uint64_t v4 = v12;
    if (v13) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100331360(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005299A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_10000F214(&qword_1005251B0);
    uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    while (1)
    {
      sub_10000FB74(v8, (uint64_t)v5, &qword_1005299A8);
      unint64_t result = sub_100331224();
      if (v11) {
        break;
      }
      unint64_t v12 = result;
      *(void *)(v7 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v13 = *(void *)(v7 + 56);
      uint64_t v14 = type metadata accessor for UUID();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v13 + *(void *)(*(void *)(v14 - 8) + 72) * v12, v5, v14);
      uint64_t v15 = *(void *)(v7 + 16);
      BOOL v16 = __OFADD__(v15, 1);
      uint64_t v17 = v15 + 1;
      if (v16) {
        goto LABEL_10;
      }
      *(void *)(v7 + 16) = v17;
      v8 += v9;
      if (!--v6) {
        return v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10033150C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000F214(&qword_100525120);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 64); ; i += 5)
    {
      uint64_t v5 = *(i - 4);
      uint64_t v6 = *(i - 3);
      long long v14 = *((_OWORD *)i - 1);
      uint64_t v7 = *i;
      unint64_t result = sub_10032B28C(v5);
      if (v9) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v10 = v3[7] + 32 * result;
      *(void *)uint64_t v10 = v6;
      *(_OWORD *)(v10 + 8) = v14;
      *(void *)(v10 + 24) = v7;
      uint64_t v11 = v3[2];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100331608(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10000F214(&qword_100525110);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = a1[5];
  uint64_t v6 = (void *)a1[6];
  unint64_t result = sub_10032B5A0(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v18 = v6;
    return (unint64_t)v3;
  }
  char v9 = (void **)(a1 + 9);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (Swift::UInt *)(v3[6] + 16 * result);
    *uint64_t v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    long long v14 = v9 + 3;
    Swift::UInt v4 = (Swift::UInt)*(v9 - 2);
    Swift::UInt v5 = (Swift::UInt)*(v9 - 1);
    uint64_t v15 = *v9;
    id v16 = v6;
    unint64_t result = sub_10032B5A0(v4, v5);
    char v9 = v14;
    uint64_t v6 = v15;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100331718(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100334284();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    Swift::UInt v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1001F94FC(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10033178C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unsigned int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10032EFB4(qword_100521BB0, (void (*)(uint64_t))type metadata accessor for CVDetection);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_100331E9C(v11, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1001F9D08((uint64_t)v8, (uint64_t)v5);
      sub_100331F04((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_10033191C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CVTrackedDetection(0);
  sub_10032EFB4(&qword_1005250B8, (void (*)(uint64_t))type metadata accessor for CVTrackedDetection);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1001F9F8C(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100331A8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10032EFB4(&qword_100529818, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_100331E9C(v11, (uint64_t)v5, type metadata accessor for CVTrackSnapshot);
      sub_1001FAA1C((uint64_t)v8, (uint64_t)v5);
      sub_100331F04((uint64_t)v8, type metadata accessor for CVTrackSnapshot);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_100331C1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100331D14(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100331E04(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_100331E60(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100331E9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100331F04(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100331F64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100332058(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000F214(&qword_10051A0C8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100332164(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      a5(0);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100332270(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100332358(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_10000F214(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t sub_1003324B0(void *a1, double a2, double a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = a1;
  if (CVPixelBufferGetPixelFormatType(v5) != 1278226488)
  {
    sub_10000F214((uint64_t *)&unk_10051D350);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10043D4F0;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 32) = 0xD000000000000024;
    *(void *)(v15 + 40) = 0x800000010042BB40;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = 0;
    goto LABEL_16;
  }
  CVPixelBufferLockBaseAddress(v5, 1uLL);
  int64_t result = (int64_t)CVPixelBufferGetBaseAddress(v5);
  if (result)
  {
    int64_t v7 = result;
    int64_t Width = CVPixelBufferGetWidth(v5);
    int64_t Height = CVPixelBufferGetHeight(v5);
    int64_t result = CVPixelBufferGetBytesPerRow(v5);
    double v10 = round((double)Height * a3);
    if (v10 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v10 < 9.22337204e18)
    {
      double v11 = round((double)Width * a2);
      if ((~*(void *)&v11 & 0x7FF0000000000000) != 0
        && (*(void *)&v10 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (v11 > -9.22337204e18)
        {
          if (v11 < 9.22337204e18)
          {
            uint64_t v13 = (uint64_t)v10 * result;
            if ((unsigned __int128)((uint64_t)v10 * (__int128)result) >> 64 == v13 >> 63)
            {
              uint64_t v14 = *(unsigned __int8 *)(v7 + v13 + (uint64_t)v11);
              CVPixelBufferUnlockBaseAddress(v5, 1uLL);
LABEL_16:

              return v14;
            }
            goto LABEL_23;
          }
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_10033268C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100332780(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_10000F214(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100332888(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 80) = a2;
  *(void *)(v2 + 32) = a1;
  sub_10000F214(&qword_10051CB10);
  *(void *)(v2 + 40) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CVDetection();
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = *(void *)(v3 - 8);
  *(void *)(v2 + 64) = swift_task_alloc();
  *(void *)(v2 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_1003329B8, 0, 0);
}

uint64_t sub_1003329B8()
{
  uint64_t v66 = v0;
  uint64_t v1 = *((unsigned int *)v0 + 20);
  id v2 = *((id *)v0 + 4);
  sub_10031C408((uint64_t)_swiftEmptyArrayStorage, &qword_1005296A0, &qword_1005296A8, (uint64_t (*)(uint64_t))sub_10032B1FC);
  id v3 = objc_allocWithZone((Class)VNImageRequestHandler);
  type metadata accessor for VNImageOption(0);
  sub_10032EFB4(&qword_100518590, type metadata accessor for VNImageOption);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v5 = (unint64_t)[v3 initWithCGImage:v2 orientation:v1 options:isa];

  id v6 = [objc_allocWithZone((Class)VNRecognizeDocumentsRequest) init];
  *((void *)v0 + 2) = 0;
  LODWORD(v3) = [v6 setRevision:1 error:v0 + 16];
  id v7 = *((id *)v0 + 2);
  if (!v3)
  {
    uint64_t v31 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_unexpectedError();
  }
  [v6 setRecognitionLevel:0];
  [v6 setUsesLanguageDetection:1];
  [v6 setUsesLanguageCorrection:1];
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  [v6 setRecognitionLanguages:v8];

  sub_10000F214(&qword_100521040);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100440690;
  *(void *)(v9 + 32) = v6;
  uint64_t v65 = (void *)v9;
  specialized Array._endMutation()();
  sub_10000F734(0, &qword_100526330);
  unint64_t v10 = (unint64_t)v6;
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *((void *)v0 + 3) = 0;
  unsigned int v12 = [(id)v5 performRequests:v11 error:v0 + 24];

  uint64_t v13 = (void *)*((void *)v0 + 3);
  uint64_t v64 = v0;
  if (!v12)
  {
    id v33 = v13;
    _convertNSErrorToError(_:)();

    uint64_t v34 = (void *)v10;
    unint64_t v10 = v5;
LABEL_40:
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(void))*((void *)v64 + 1);
    return v36();
  }
  id v14 = v13;
  id v15 = [(id)v10 results];
  if (!v15)
  {
    sub_10021027C();
    swift_allocError();
    *(void *)uint64_t v35 = 0;
    *(void *)(v35 + 8) = 0;
    *(unsigned char *)(v35 + 16) = 1;
    uint64_t v34 = (void *)v5;
    goto LABEL_40;
  }
  id v16 = v15;
  sub_10000F734(0, &qword_1005296C0);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62) {
    goto LABEL_77;
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v53 = (void *)v10;
    unint64_t v54 = (void *)v5;
    unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
    if (!v18) {
      break;
    }
    unint64_t v10 = 0;
    uint64_t v57 = v18;
    unint64_t v59 = v17 & 0xC000000000000001;
    unint64_t v55 = v17 + 32;
    unint64_t v19 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v59)
      {
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v22 = __OFADD__(v10++, 1);
        if (v22) {
          goto LABEL_75;
        }
      }
      else
      {
        id v21 = *(id *)(v55 + 8 * v10);
        BOOL v22 = __OFADD__(v10++, 1);
        if (v22) {
          goto LABEL_75;
        }
      }
      uint64_t v61 = v21;
      id v23 = [v21 blocksWithTypes:2 inRegion:0.0, 0.0, 1.0, 1.0];
      sub_10000F734(0, &qword_1005296C8);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v65 = _swiftEmptyArrayStorage;
      if (v17 >> 62) {
        break;
      }
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v24 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v24) {
        goto LABEL_18;
      }
LABEL_28:
      unint64_t v28 = v65;
      swift_bridgeObjectRelease();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = sub_100329A24(0, v19[2] + 1, 1, v19, &qword_1005296D0, &qword_1005296D8);
      }
      uint64_t v20 = v57;
      unint64_t v30 = v19[2];
      unint64_t v29 = v19[3];
      unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
      if (v30 >= v29 >> 1) {
        unint64_t v19 = sub_100329A24((void *)(v29 > 1), v30 + 1, 1, v19, &qword_1005296D0, &qword_1005296D8);
      }
      void v19[2] = v30 + 1;
      v19[v30 + 4] = v28;
LABEL_10:
      Swift::Int v0 = v64;
      if (v10 == v20) {
        goto LABEL_44;
      }
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_28;
    }
LABEL_18:
    if ((v17 & 0xC000000000000001) != 0)
    {
      uint64_t v25 = 0;
      while (1)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        Swift::Int v0 = (char *)(v25 + 1);
        if (__OFADD__(v25, 1)) {
          break;
        }
        self;
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_9;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v5 = v65[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v25;
        if (v0 == (char *)v24) {
          goto LABEL_28;
        }
      }
      __break(1u);
    }
    else
    {
      unint64_t v5 = 0;
      while (1)
      {
        Swift::Int v0 = (char *)(v5 + 1);
        if (__OFADD__(v5, 1)) {
          break;
        }
        unint64_t v26 = *(void **)(v17 + 32 + 8 * v5);
        self;
        if (!swift_dynamicCastObjCClass())
        {
LABEL_9:
          swift_release();
          swift_bridgeObjectRelease();

          uint64_t v20 = v57;
          unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
          goto LABEL_10;
        }
        id v27 = v26;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v0 == (char *)v24) {
          goto LABEL_28;
        }
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  }
  unint64_t v19 = _swiftEmptyArrayStorage;
LABEL_44:
  uint64_t v37 = *((void *)v0 + 7);
  swift_bridgeObjectRelease_n();
  uint64_t v60 = v37;
  unint64_t v10 = v37 + 48;
  uint64_t v38 = v19 + 4;
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  uint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v63 = v19;
  uint64_t v56 = v19 + 4;
  unint64_t v58 = 0;
  while (1)
  {
    unint64_t v51 = v19[2];
    if (v58 == v51) {
      break;
    }
    if (v58 >= v51) {
      goto LABEL_76;
    }
    unint64_t v17 = v38[v58];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v5 = v17;
    Swift::Int v0 = v64;
    ++v58;
    if (v17)
    {
      unint64_t v40 = 0;
      unint64_t v62 = v17 & 0xC000000000000001;
      if (v17 >> 62)
      {
LABEL_46:
        swift_bridgeObjectRetain();
        unint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      while (1)
      {
        unint64_t v17 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_48:
        if (v40 == v17) {
          break;
        }
        if (v62)
        {
          long long v41 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v40 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_73;
          }
          long long v41 = *(id *)(v5 + 8 * v40 + 32);
        }
        unint64_t v17 = (unint64_t)v41;
        if (__OFADD__(v40, 1)) {
          goto LABEL_74;
        }
        uint64_t v42 = *((void *)v0 + 5);
        uint64_t v65 = v41;
        sub_100327C5C((void **)&v65, v42);
        uint64_t v44 = *((void *)v0 + 5);
        uint64_t v43 = *((void *)v0 + 6);

        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v10)(v44, 1, v43) == 1)
        {
          sub_10000FBD8(*((void *)v0 + 5), &qword_10051CB10);
        }
        else
        {
          uint64_t v46 = *((void *)v0 + 8);
          uint64_t v45 = *((void *)v0 + 9);
          sub_1003337E4(*((void *)v0 + 5), v45, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_1003337E4(v45, v46, (uint64_t (*)(void))type metadata accessor for CVDetection);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v39 = (void *)sub_10032A8A8(0, v39[2] + 1, 1, (unint64_t)v39, &qword_100525100, (uint64_t (*)(void))type metadata accessor for CVDetection, (uint64_t (*)(void))type metadata accessor for CVDetection);
          }
          unint64_t v48 = v39[2];
          unint64_t v47 = v39[3];
          if (v48 >= v47 >> 1) {
            uint64_t v39 = (void *)sub_10032A8A8(v47 > 1, v48 + 1, 1, (unint64_t)v39, &qword_100525100, (uint64_t (*)(void))type metadata accessor for CVDetection, (uint64_t (*)(void))type metadata accessor for CVDetection);
          }
          uint64_t v49 = *((void *)v64 + 8);
          v39[2] = v48 + 1;
          uint64_t v50 = (uint64_t)v39
              + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))
              + *(void *)(v60 + 72) * v48;
          Swift::Int v0 = v64;
          sub_1003337E4(v49, v50, (uint64_t (*)(void))type metadata accessor for CVDetection);
        }
        ++v40;
        if (v5 >> 62) {
          goto LABEL_46;
        }
      }
      unint64_t v19 = v63;
      uint64_t v38 = v56;
    }
  }
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::UInt v52 = (uint64_t (*)(void *))*((void *)v0 + 1);
  return v52(v39);
}

unint64_t sub_10033352C()
{
  unint64_t result = qword_1005296F0;
  if (!qword_1005296F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005296F0);
  }
  return result;
}

unint64_t sub_100333580()
{
  unint64_t result = qword_100529730;
  if (!qword_100529730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529730);
  }
  return result;
}

uint64_t sub_1003335D4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_100529710);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100333638(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_100529720);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003336A8()
{
  unint64_t result = qword_100529780;
  if (!qword_100529780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529780);
  }
  return result;
}

uint64_t sub_1003336FC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_100529738);
    sub_10032EFB4(a2, (void (*)(uint64_t))type metadata accessor for TextDetectorResult.DataDetector);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100333790()
{
  unint64_t result = qword_1005297B0;
  if (!qword_1005297B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005297B0);
  }
  return result;
}

uint64_t sub_1003337E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

char *sub_10033384C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    id v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100333938(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E5C60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t sub_100333984(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697263736E617274 && a2 == 0xEA00000000007470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100333AEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_100529BC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Class v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003355B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  char v22 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v10 = v9;
  char v21 = 1;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  char v20 = 2;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  unint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v19 = v14;
  v17(v8, v5);
  swift_bridgeObjectRetain();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v16;
  return result;
}

uint64_t sub_100333D2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7365707974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010042BBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74786554776172 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7372656E726F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100333ED8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_10000F214(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100333FE0@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100327654(a1 & 1, a2, a3, v4[4], v4[5], v4[6], v4[2], v4[3], a4);
}

uint64_t sub_100334008(uint64_t a1)
{
  return sub_100327470(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100334028@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100324264(a1, *(unsigned char *)(v2 + 40), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_100334078(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (objc_opt_respondsToSelector()) {
    [v5 generateDataDetectorInfoWithTypes:a2 unfiltered:a3];
  }
  else {
    [v5 generateDataDetectorInfoWithTypes:a2];
  }
}

void sub_1003340FC(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100323184(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void ***)(v3 + 72), a3, *(void *)(v3 + 16), *(NLLanguage *)(v3 + 24));
}

double sub_100334130@<D0>(void *a1@<X2>, void *a2@<X8>)
{
  return sub_100324004(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_10033413C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_100334174(void *a1, uint64_t a2)
{
  sub_100322F78(a1, a2, v2);
}

uint64_t sub_10033417C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10033418C()
{
  return swift_release();
}

uint64_t sub_100334194()
{
  uint64_t v1 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void sub_100334224()
{
  type metadata accessor for Date();

  sub_100325D80();
}

unint64_t sub_100334284()
{
  unint64_t result = qword_100529A60;
  if (!qword_100529A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529A60);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ObjectDetectorResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003343A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectDetectorResult.CodingKeys()
{
  return &type metadata for ObjectDetectorResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TextDetectorResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003344A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextDetectorResult.CodingKeys()
{
  return &type metadata for TextDetectorResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for VisionProcessorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003345ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VisionProcessorType()
{
  return &type metadata for VisionProcessorType;
}

uint64_t *sub_1003345E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    Class v8 = (char *)a1 + v7;
    int v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_10000F214((uint64_t *)&unk_100524ED0);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)v4 + v14);
    unint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (_OWORD *)((char *)v4 + v15);
    char v20 = (_OWORD *)((char *)a2 + v15);
    long long v21 = v20[3];
    void v19[2] = v20[2];
    v19[3] = v21;
    long long v22 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v22;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100334788(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100334868(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  Class v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = (_OWORD *)((char *)a1 + v13);
  uint64_t v18 = (_OWORD *)((char *)a2 + v13);
  long long v19 = v18[3];
  v17[2] = v18[2];
  v17[3] = v19;
  long long v20 = v18[1];
  *unint64_t v17 = *v18;
  v17[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1003349BC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  Class v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  unint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  long long v19 = (void *)((char *)a1 + v18);
  long long v20 = (void *)((char *)a2 + v18);
  *long long v19 = *v20;
  v19[1] = v20[1];
  void v19[2] = v20[2];
  v19[3] = v20[3];
  _OWORD v19[4] = v20[4];
  v19[5] = v20[5];
  v19[6] = v20[6];
  v19[7] = v20[7];
  return a1;
}

void *sub_100334BBC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  Class v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  int v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  long long v15 = v14[1];
  *int v13 = *v14;
  v13[1] = v15;
  long long v16 = v14[3];
  v13[2] = v14[2];
  v13[3] = v16;
  return a1;
}

void *sub_100334D04(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  Class v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10000F214((uint64_t *)&unk_100524ED0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  long long v16 = (void *)((char *)a1 + v15);
  unint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *long long v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  long long v21 = (_OWORD *)((char *)a1 + v20);
  long long v22 = (_OWORD *)((char *)a2 + v20);
  long long v23 = v22[1];
  _OWORD *v21 = *v22;
  v21[1] = v23;
  long long v24 = v22[3];
  void v21[2] = v22[2];
  v21[3] = v24;
  return a1;
}

uint64_t sub_100334EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100334ED8);
}

uint64_t sub_100334ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100524ED0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100334FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100334FB8);
}

uint64_t sub_100334FB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214((uint64_t *)&unk_100524ED0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

void sub_100335080()
{
  sub_100335130();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100335130()
{
  if (!qword_100529B40)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100529B40);
    }
  }
}

uint64_t initializeWithCopy for TextDetectorResult.Line(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextDetectorResult.Line(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TextDetectorResult.Line(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TextDetectorResult.Line()
{
  return &type metadata for TextDetectorResult.Line;
}

unint64_t sub_1003352AC()
{
  unint64_t result = qword_100529B78;
  if (!qword_100529B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529B78);
  }
  return result;
}

uint64_t sub_100335300()
{
  return sub_10032EFB4(&qword_100529B80, (void (*)(uint64_t))type metadata accessor for TextDetectorResult.DataDetector);
}

unint64_t sub_10033534C()
{
  unint64_t result = qword_100529B88;
  if (!qword_100529B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529B88);
  }
  return result;
}

unint64_t sub_1003353A4()
{
  unint64_t result = qword_100529B90;
  if (!qword_100529B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529B90);
  }
  return result;
}

unint64_t sub_1003353FC()
{
  unint64_t result = qword_100529B98;
  if (!qword_100529B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529B98);
  }
  return result;
}

unint64_t sub_100335454()
{
  unint64_t result = qword_100529BA0;
  if (!qword_100529BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529BA0);
  }
  return result;
}

unint64_t sub_1003354AC()
{
  unint64_t result = qword_100529BA8;
  if (!qword_100529BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529BA8);
  }
  return result;
}

unint64_t sub_100335504()
{
  unint64_t result = qword_100529BB0;
  if (!qword_100529BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529BB0);
  }
  return result;
}

unint64_t sub_10033555C()
{
  unint64_t result = qword_100529BB8;
  if (!qword_100529BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529BB8);
  }
  return result;
}

unint64_t sub_1003355B0()
{
  unint64_t result = qword_100529BC8;
  if (!qword_100529BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529BC8);
  }
  return result;
}

unint64_t sub_100335604()
{
  unint64_t result = qword_100529BD8;
  if (!qword_100529BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529BD8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TextDetectorResult.DataDetector.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100335724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextDetectorResult.DataDetector.CodingKeys()
{
  return &type metadata for TextDetectorResult.DataDetector.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TextDetectorResult.Line.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100335828);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextDetectorResult.Line.CodingKeys()
{
  return &type metadata for TextDetectorResult.Line.CodingKeys;
}

unint64_t sub_100335864()
{
  unint64_t result = qword_100529C58;
  if (!qword_100529C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529C58);
  }
  return result;
}

unint64_t sub_1003358BC()
{
  unint64_t result = qword_100529C60;
  if (!qword_100529C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529C60);
  }
  return result;
}

unint64_t sub_100335914()
{
  unint64_t result = qword_100529C68;
  if (!qword_100529C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529C68);
  }
  return result;
}

unint64_t sub_10033596C()
{
  unint64_t result = qword_100529C70;
  if (!qword_100529C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529C70);
  }
  return result;
}

unint64_t sub_1003359C4()
{
  unint64_t result = qword_100529C78;
  if (!qword_100529C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529C78);
  }
  return result;
}

unint64_t sub_100335A1C()
{
  unint64_t result = qword_100529C80;
  if (!qword_100529C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529C80);
  }
  return result;
}

void *sub_100335A80()
{
  return sub_100335EC8();
}

double sub_100335A98()
{
  static Font.largeTitle.getter();
  char v0 = static Font.== infix(_:_:)();
  swift_release();
  if (v0)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleLargeTitle;
LABEL_19:
    UIFontTextStyle v11 = *v2;
    goto LABEL_20;
  }
  static Font.title.getter();
  char v3 = static Font.== infix(_:_:)();
  swift_release();
  if (v3)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleTitle1;
    goto LABEL_19;
  }
  static Font.title2.getter();
  char v4 = static Font.== infix(_:_:)();
  swift_release();
  if (v4)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleTitle2;
    goto LABEL_19;
  }
  static Font.headline.getter();
  char v5 = static Font.== infix(_:_:)();
  swift_release();
  if (v5)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleHeadline;
    goto LABEL_19;
  }
  static Font.subheadline.getter();
  char v6 = static Font.== infix(_:_:)();
  swift_release();
  if (v6)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleSubheadline;
    goto LABEL_19;
  }
  static Font.caption.getter();
  char v7 = static Font.== infix(_:_:)();
  swift_release();
  if (v7)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleCaption1;
    goto LABEL_19;
  }
  static Font.caption2.getter();
  char v8 = static Font.== infix(_:_:)();
  swift_release();
  if (v8)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleCaption2;
    goto LABEL_19;
  }
  static Font.footnote.getter();
  char v9 = static Font.== infix(_:_:)();
  swift_release();
  if (v9)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleFootnote;
    goto LABEL_19;
  }
  static Font.body.getter();
  char v10 = static Font.== infix(_:_:)();
  swift_release();
  if (v10)
  {
    uint64_t v1 = self;
    uint64_t v2 = &UIFontTextStyleBody;
    goto LABEL_19;
  }
  static Font.callout.getter();
  char v26 = static Font.== infix(_:_:)();
  swift_release();
  uint64_t v1 = self;
  if (v26) {
    id v27 = &UIFontTextStyleCallout;
  }
  else {
    id v27 = &UIFontTextStyleBody;
  }
  UIFontTextStyle v11 = *v27;
LABEL_20:
  id v12 = [v1 preferredFontForTextStyle:v11];
  id v13 = [self defaultMetrics];
  id v14 = [v13 scaledFontForFont:v12];

  sub_10000F214(&qword_100529CB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
  *(void *)(inited + 32) = NSFontAttributeName;
  *(void *)(inited + 40) = v14;
  long long v16 = NSFontAttributeName;
  id v17 = v14;
  unint64_t v18 = sub_10031C190(inited);
  id v19 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v19 initWithString:v20];

  sub_100336320(v18);
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_10033727C();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v21 boundingRectWithSize:3 options:isa context:0 1.79769313e308 1.79769313e308];
  double v24 = v23;

  return v24;
}

void *sub_100335EB0()
{
  return sub_100335EC8();
}

void *sub_100335EC8()
{
  id v0 = [objc_allocWithZone((Class)NLTokenizer) initWithUnit:0];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setString:v1];

  NLTokenizer.enumerateTokens(in:using:)();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100335FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char **a6)
{
  String.subscript.getter();
  uint64_t v9 = static String._fromSubstring(_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  id v12 = *a6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v12 = sub_100328860(0, *((void *)v12 + 2) + 1, 1, v12);
    *a6 = v12;
  }
  unint64_t v15 = *((void *)v12 + 2);
  unint64_t v14 = *((void *)v12 + 3);
  if (v15 >= v14 >> 1)
  {
    id v12 = sub_100328860((char *)(v14 > 1), v15 + 1, 1, v12);
    *a6 = v12;
  }
  *((void *)v12 + 2) = v15 + 1;
  long long v16 = &v12[16 * v15];
  *((void *)v16 + 4) = v9;
  *((void *)v16 + 5) = v11;
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v18 = String.index(_:offsetBy:limitedBy:)();
  if ((v19 & 1) == 0)
  {
    NSString v20 = (char *)v18;
    unint64_t v21 = v18 >> 14;
    if (v18 >> 14 < 4 * v17)
    {
      String.subscript.getter();
      char v22 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if (v22)
      {
        String.subscript.getter();
        char v23 = Character.isWhitespace.getter();
        swift_bridgeObjectRelease();
        unint64_t v24 = v21;
        if (v23)
        {
          do
          {
            unint64_t v24 = (unint64_t)String.index(after:)() >> 14;
            if (v24 >= 4 * v17) {
              break;
            }
            String.subscript.getter();
            char v25 = Character.isWhitespace.getter();
            swift_bridgeObjectRelease();
          }
          while ((v25 & 1) != 0);
        }
        if (v24 < v21)
        {
          __break(1u);
        }
        else
        {
          String.subscript.getter();
          a5 = static String._fromSubstring(_:)();
          a4 = v26;
          swift_bridgeObjectRelease();
          NSString v20 = *a6;
          char v27 = swift_isUniquelyReferenced_nonNull_native();
          *a6 = v20;
          if (v27)
          {
LABEL_16:
            unint64_t v29 = *((void *)v20 + 2);
            unint64_t v28 = *((void *)v20 + 3);
            if (v29 >= v28 >> 1)
            {
              NSString v20 = sub_100328860((char *)(v28 > 1), v29 + 1, 1, v20);
              *a6 = v20;
            }
            *((void *)v20 + 2) = v29 + 1;
            unint64_t v30 = &v20[16 * v29];
            *((void *)v30 + 4) = a5;
            *((void *)v30 + 5) = a4;
            return 1;
          }
        }
        NSString v20 = sub_100328860(0, *((void *)v20 + 2) + 1, 1, v20);
        *a6 = v20;
        goto LABEL_16;
      }
    }
  }
  return 1;
}

uint64_t sub_10033624C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v7 = String.subscript.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  unint64_t v14 = *a6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v14 = sub_1003297F0(0, v14[2] + 1, 1, v14);
    *a6 = v14;
  }
  unint64_t v17 = v14[2];
  unint64_t v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    unint64_t v14 = sub_1003297F0((void *)(v16 > 1), v17 + 1, 1, v14);
    *a6 = v14;
  }
  v14[2] = v17 + 1;
  unint64_t v18 = &v14[4 * v17];
  _OWORD v18[4] = v7;
  v18[5] = v9;
  v18[6] = v11;
  v18[7] = v13;
  return 1;
}

uint64_t sub_100336320(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000F214(&qword_100529CB8);
    uint64_t v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  char v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v30 + 1;
    if (!v12)
    {
      int64_t v13 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v30 = v13;
LABEL_28:
    unint64_t v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v33[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    unint64_t v15 = *(void **)&v33[0];
    *(void *)&v32[0] = v16;
    sub_1003372D4();
    id v17 = v15;
    id v18 = v16;
    swift_dynamicCast();
    uint64_t v19 = *(void *)&v33[0];
    sub_100046CEC((_OWORD *)((char *)v33 + 8), v31);
    sub_100046CEC(v31, v33);
    sub_100046CEC(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << v2[32];
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v6[8 * v23];
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v19;
    uint64_t result = (uint64_t)sub_100046CEC(v32, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_10014AAB4();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_1003366C4(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_100336764(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_1003367D4(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_100336764(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_100380BB8(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1003367D4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

unint64_t sub_1003368F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for CharacterSet();
  __chkstk_darwin(v91);
  v90 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = 0;
  unint64_t v101 = 0xE000000000000000;
  unint64_t v89 = *(void *)(a1 + 16);
  if (!v89) {
    return 0;
  }
  v85 = v5;
  uint64_t v86 = v2;
  v88 = (void (**)(char *, uint64_t))(v6 + 8);
  v84 = (void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  sub_1000317A0();
  unint64_t v8 = 0;
  uint64_t v87 = a1;
  uint64_t v9 = (void **)(a1 + 56);
  while (1)
  {
    uint64_t v10 = (uint64_t)*(v9 - 3);
    int v11 = *(v9 - 2);
    v93 = v9;
    unint64_t v94 = v8 + 1;
    v99._uint64_t countAndFlagsBits = v10;
    v99._unint64_t object = v11;
    uint64_t v97 = 11565;
    unint64_t v98 = 0xE200000000000000;
    uint64_t v95 = 0x209480E220;
    unint64_t v96 = 0xA500000000000000;
    swift_bridgeObjectRetain();
    v99._uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v99._unint64_t object = v12;
    uint64_t v92 = 9732322;
    uint64_t v97 = 9732322;
    unint64_t v98 = 0xA300000000000000;
    uint64_t v95 = 0x209480E220;
    unint64_t v96 = 0xA500000000000000;
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v99._uint64_t countAndFlagsBits = v13;
    v99._unint64_t object = v15;
    uint64_t v97 = 9666786;
    unint64_t v98 = 0xA300000000000000;
    uint64_t v95 = 0x209480E220;
    unint64_t v96 = 0xA500000000000000;
    uint64_t v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    id v18 = v17;
    swift_bridgeObjectRelease();
    v99._uint64_t countAndFlagsBits = v16;
    v99._unint64_t object = v18;
    uint64_t v97 = 45;
    unint64_t v98 = 0xE100000000000000;
    uint64_t v95 = 0x209480E220;
    unint64_t v96 = 0xA500000000000000;
    uint64_t v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    v99._uint64_t countAndFlagsBits = v19;
    v99._unint64_t object = v21;
    uint64_t v97 = 126;
    unint64_t v98 = 0xE100000000000000;
    uint64_t v95 = 0x209480E220;
    unint64_t v96 = 0xA500000000000000;
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    char v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v99._uint64_t countAndFlagsBits = v22;
    v99._unint64_t object = v24;
    unint64_t v25 = v90;
    static CharacterSet.whitespacesAndNewlines.getter();
    uint64_t v26 = StringProtocol.trimmingCharacters(in:)();
    unint64_t object = v27;
    uint64_t v29 = *v88;
    uint64_t v30 = v91;
    (*v88)(v25, v91);
    uint64_t v31 = v26;
    swift_bridgeObjectRelease();
    v99._uint64_t countAndFlagsBits = v26;
    v99._unint64_t object = (void *)object;
    static CharacterSet.whitespacesAndNewlines.getter();
    StringProtocol.trimmingCharacters(in:)();
    int64_t v32 = v25;
    id v33 = v29;
    v29(v32, v30);
    v34._uint64_t countAndFlagsBits = 11565;
    v34._unint64_t object = (void *)0xE200000000000000;
    if (!String.hasSuffix(_:)(v34))
    {
      v35._uint64_t countAndFlagsBits = v92;
      v35._unint64_t object = (void *)0xA300000000000000;
      if (!String.hasSuffix(_:)(v35))
      {
        v36._uint64_t countAndFlagsBits = 9666786;
        v36._unint64_t object = (void *)0xA300000000000000;
        if (!String.hasSuffix(_:)(v36))
        {
          v37._uint64_t countAndFlagsBits = 45;
          v37._unint64_t object = (void *)0xE100000000000000;
          if (!String.hasSuffix(_:)(v37)) {
            break;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v38 = v93;
LABEL_8:
    v99._uint64_t countAndFlagsBits = v26;
    v99._unint64_t object = (void *)object;
    swift_bridgeObjectRetain();
    v39._uint64_t countAndFlagsBits = 32;
    v39._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    String.append(_:)(v99);
    unint64_t v8 = v94;
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v9 = v38 + 2;
    if (v89 == v8)
    {
      swift_bridgeObjectRelease();
      return v100;
    }
  }
  v40._uint64_t countAndFlagsBits = 126;
  v40._unint64_t object = (void *)0xE100000000000000;
  Swift::Bool v41 = String.hasSuffix(_:)(v40);
  swift_bridgeObjectRelease();
  uint64_t v38 = v93;
  if (v41) {
    goto LABEL_8;
  }
  if ((object & 0x2000000000000000) != 0) {
    uint64_t v42 = HIBYTE(object) & 0xF;
  }
  else {
    uint64_t v42 = v26 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v8 = v94;
  if (v42)
  {
    swift_bridgeObjectRetain();
    String.index(before:)();
    unint64_t v43 = String.subscript.getter();
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v46 = sub_1000A34C4(v43, v45);
    swift_bridgeObjectRelease();
    if ((v46 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v47 = v90;
      static CharacterSet.punctuationCharacters.getter();
      char v48 = CharacterSet.contains(_:)();
      v33(v47, v91);
      swift_bridgeObjectRelease();
      if (v48)
      {
        v99._uint64_t countAndFlagsBits = v31;
        v99._unint64_t object = (void *)object;
        swift_bridgeObjectRetain();
        uint64_t v49 = 10;
        goto LABEL_49;
      }
    }
  }
  if (v8 >= v89)
  {
    uint64_t countAndFlagsBits = v31;
    goto LABEL_51;
  }
  uint64_t v50 = *v38;
  v99._uint64_t countAndFlagsBits = (uint64_t)*(v38 - 1);
  v99._unint64_t object = v50;
  swift_bridgeObjectRetain();
  unint64_t v51 = v90;
  static CharacterSet.whitespacesAndNewlines.getter();
  uint64_t v52 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v54 = v53;
  v33(v51, v91);
  swift_bridgeObjectRelease();
  uint64_t v55 = HIBYTE(v54) & 0xF;
  if ((v54 & 0x2000000000000000) == 0) {
    uint64_t v55 = v52 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v92 = v42;
  if (!v55)
  {
    unint64_t v67 = 0xE100000000000000;
    unint64_t v68 = 32;
    goto LABEL_40;
  }
  uint64_t v83 = v31;
  swift_bridgeObjectRetain();
  uint64_t v82 = v52;
  unint64_t v56 = String.subscript.getter();
  unint64_t v58 = v57;
  swift_bridgeObjectRelease();
  if ((Character._isSingleScalar.getter() & 1) == 0) {
    goto LABEL_27;
  }
  unint64_t v59 = v56;
  unint64_t result = sub_1000A34C4(v56, v58);
  if ((result & 0x100000000) == 0)
  {
    uint64_t v60 = v85;
    Unicode.Scalar.properties.getter();
    char v61 = Unicode.Scalar.Properties.isUppercase.getter();
    (*v84)(v60, v86);
    unint64_t v56 = v59;
    if ((v61 & 1) == 0)
    {
LABEL_27:
      if ((Character._isUppercased.getter() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      if ((Character._isSingleScalar.getter() & 1) == 0) {
        goto LABEL_31;
      }
      unint64_t result = sub_1000A34C4(v56, v58);
      if ((result & 0x100000000) != 0) {
        goto LABEL_54;
      }
      unint64_t v62 = v85;
      Unicode.Scalar.properties.getter();
      char v63 = Unicode.Scalar.Properties.isCased.getter();
      (*v84)(v62, v86);
      if ((v63 & 1) == 0)
      {
LABEL_31:
        if (Character._isUppercased.getter())
        {
          char v64 = Character._isLowercased.getter();
          swift_bridgeObjectRelease();
          if ((v64 & 1) == 0)
          {
LABEL_36:
            uint64_t v31 = v83;
            swift_bridgeObjectRelease();
            uint64_t v66 = v92;
LABEL_42:
            if (v66
              && (swift_bridgeObjectRetain(),
                  String.index(before:)(),
                  String.subscript.getter(),
                  swift_bridgeObjectRelease(),
                  char v75 = Character.isWhitespace.getter(),
                  swift_bridgeObjectRelease(),
                  (v75 & 1) != 0))
            {
              uint64_t v76 = 0;
              v77 = (void *)0xE000000000000000;
            }
            else
            {
              v77 = (void *)0xE200000000000000;
              uint64_t v76 = 8238;
            }
            v99._uint64_t countAndFlagsBits = v31;
            v99._unint64_t object = (void *)object;
            swift_bridgeObjectRetain();
            v78._uint64_t countAndFlagsBits = v76;
            v78._unint64_t object = v77;
            String.append(_:)(v78);
            swift_bridgeObjectRelease();
            goto LABEL_50;
          }
LABEL_39:
          swift_bridgeObjectRetain();
          unint64_t v68 = String.subscript.getter();
          unint64_t v67 = v69;
          swift_bridgeObjectRelease();
          uint64_t v31 = v83;
LABEL_40:
          swift_bridgeObjectRetain();
          unint64_t v70 = sub_1000A34C4(v68, v67);
          swift_bridgeObjectRelease();
          if ((v70 & 0x100000000) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v71 = v31;
            uint64_t v72 = v33;
            NLLanguage v73 = v90;
            static CharacterSet.punctuationCharacters.getter();
            char v74 = CharacterSet.contains(_:)();
            v72(v73, v91);
            uint64_t v31 = v71;
            uint64_t v66 = v92;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v74) {
              goto LABEL_42;
            }
          }
          v99._uint64_t countAndFlagsBits = v31;
          v99._unint64_t object = (void *)object;
          swift_bridgeObjectRetain();
          uint64_t v49 = 32;
LABEL_49:
          unint64_t v79 = 0xE100000000000000;
          String.append(_:)(*(Swift::String *)&v49);
LABEL_50:
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v99._countAndFlagsBits;
          unint64_t object = (unint64_t)v99._object;
LABEL_51:
          unint64_t v80 = object;
          String.append(_:)(*(Swift::String *)&countAndFlagsBits);
          goto LABEL_9;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

unint64_t sub_10033727C()
{
  unint64_t result = qword_100518638;
  if (!qword_100518638)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518638);
  }
  return result;
}

unint64_t sub_1003372D4()
{
  unint64_t result = qword_100529CC0;
  if (!qword_100529CC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100529CC0);
  }
  return result;
}

uint64_t sub_100337314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100335FB0(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(char ***)(v3 + 32));
}

uint64_t *sub_100337320(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v10 = (uint64_t *)((char *)v4 + v9);
    int v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100337454(uint64_t a1)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_100337504(void *a1, void *a2, uint64_t a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1003375EC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

char *sub_100337704(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *sub_1003377E0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  swift_release();
  return a1;
}

uint64_t sub_1003378EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100337900);
}

uint64_t sub_100337900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1003379C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003379D8);
}

uint64_t sub_1003379D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ImageSearchRelatedSearchesCardView()
{
  uint64_t result = qword_100529D20;
  if (!qword_100529D20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100337AE4()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100337B8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100337BA8@<X0>(uint64_t a1@<X8>)
{
  v12[0] = a1;
  uint64_t v2 = type metadata accessor for ImageSearchRelatedSearchesCardView();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = sub_10000F214(&qword_100529D60);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0x4024000000000000;
  v8[16] = 0;
  sub_10000F214(&qword_100529D68);
  v12[1] = *(void *)(v1 + *(int *)(v3 + 28));
  swift_getKeyPath();
  sub_100339D28(v1, (uint64_t)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  sub_100339CC0((uint64_t)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_100529D70);
  sub_10000F214(&qword_100529D78);
  sub_100013AA8(&qword_100529D80, &qword_100529D70);
  sub_10033989C(&qword_1005285C0, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
  sub_100339758();
  ForEach<>.init(_:id:content:)();
  sub_100013AA8(&qword_100529DB0, &qword_100529D60);
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8((uint64_t)v8, &qword_100529D60);
}

uint64_t sub_100337E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v73 = a3;
  uint64_t v4 = type metadata accessor for ImageSearchRelatedSearchesCardView();
  uint64_t v59 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v60 = v5;
  uint64_t v61 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100529DA8);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  __chkstk_darwin(v6);
  char v64 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100529D98);
  uint64_t v71 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  __chkstk_darwin(v8);
  unint64_t v62 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v68 = *(void *)(v13 - 8);
  uint64_t v69 = v13;
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v16 - 8);
  id v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v22 = type metadata accessor for URL();
  unint64_t v23 = *(void **)(v22 - 8);
  uint64_t v24 = v23[8];
  __chkstk_darwin(v22);
  unint64_t v58 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  unint64_t v70 = (char *)&v53 - v26;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v53 - v28;
  uint64_t v30 = a1;
  URL.init(string:)();
  unint64_t v67 = (unsigned int (*)(char *, uint64_t, uint64_t))v23[6];
  if (v67(v21, 1, v22) == 1)
  {
    id v18 = v21;
LABEL_8:
    sub_10000FBD8((uint64_t)v18, &qword_10051E070);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v73, 1, 1, v72);
  }
  unint64_t v57 = v23;
  uint64_t v55 = (void (*)(char *, char *, uint64_t))v23[4];
  unint64_t v56 = v23 + 4;
  v55(v29, v21, v22);
  uint64_t v31 = type metadata accessor for Lens_RelatedSearch(0);
  sub_10000FB74(a1 + *(int *)(v31 + 28), (uint64_t)v12, &qword_10051BE80);
  int64_t v32 = v29;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v12, 1, v69) == 1)
  {
    *(void *)unint64_t v15 = 0;
    *((void *)v15 + 1) = 0xE000000000000000;
    *((_OWORD *)v15 + 1) = xmmword_10043FAF0;
    *((void *)v15 + 4) = 0;
    *((void *)v15 + 5) = 0xE000000000000000;
    *((void *)v15 + 6) = 0;
    *((void *)v15 + 7) = 0;
    *((void *)v15 + 8) = 0xE000000000000000;
    UnknownStorage.init()();
    sub_10000FBD8((uint64_t)v12, &qword_10051BE80);
  }
  else
  {
    sub_100339CC0((uint64_t)v12, (uint64_t)v15, type metadata accessor for Lens_ImageThumbnail);
  }
  swift_bridgeObjectRetain();
  sub_100339D90((uint64_t)v15, type metadata accessor for Lens_ImageThumbnail);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  unsigned int v33 = v67(v18, 1, v22);
  Swift::String v34 = v57;
  if (v33 == 1)
  {
    ((void (*)(char *, uint64_t))v57[1])(v29, v22);
    goto LABEL_8;
  }
  Swift::String v36 = (uint64_t (*)(unint64_t, char *, uint64_t))v55;
  v55(v70, v18, v22);
  uint64_t v37 = v63;
  uint64_t v53 = v22;
  unint64_t v54 = v32;
  uint64_t v38 = v32;
  uint64_t v39 = v61;
  sub_100339D28(v63, v61, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
  Swift::String v40 = v58;
  ((void (*)(char *, char *, uint64_t))v34[2])(v58, v38, v22);
  unint64_t v41 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  uint64_t v42 = *((unsigned __int8 *)v34 + 80);
  uint64_t v69 = v30;
  unint64_t v43 = (v60 + v42 + v41) & ~v42;
  uint64_t v44 = swift_allocObject();
  sub_100339CC0(v39, v44 + v41, (uint64_t (*)(void))type metadata accessor for ImageSearchRelatedSearchesCardView);
  uint64_t v45 = v53;
  uint64_t v46 = v36(v44 + v43, v40, v53);
  __chkstk_darwin(v46);
  unint64_t v47 = v70;
  *(&v53 - 4) = v69;
  *(&v53 - 3) = (uint64_t)v47;
  *(&v53 - 2) = v37;
  sub_10000F214(&qword_100529DB8);
  sub_100339B80();
  char v48 = v64;
  Button.init(action:label:)();
  sub_100013AA8(&qword_100529DA0, &qword_100529DA8);
  uint64_t v49 = (uint64_t)v62;
  uint64_t v50 = v66;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v50);
  unint64_t v51 = (void (*)(char *, uint64_t))v34[1];
  v51(v54, v45);
  uint64_t v52 = v73;
  sub_10000FC34(v49, v73, &qword_100529D98);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v52, 0, 1, v72);
  return ((uint64_t (*)(char *, uint64_t))v51)(v47, v45);
}

uint64_t sub_100338648@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v39[0] = a2;
  v39[1] = a3;
  uint64_t v41 = a4;
  uint64_t v40 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v40);
  uint64_t v6 = (_OWORD *)((char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for ColorScheme();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v39 - v12;
  uint64_t v14 = sub_10000F214(&qword_1005272C0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (uint64_t)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_1005272C8);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_100529DB8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v16 = static VerticalAlignment.center.getter();
  *(void *)(v16 + 8) = 0;
  *(unsigned char *)(v16 + 16) = 0;
  uint64_t v23 = sub_10000F214(&qword_100529DD8);
  sub_100338A88(a1, v39[0], v16 + *(int *)(v23 + 44));
  uint64_t v24 = static Alignment.center.getter();
  sub_100226E2C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v24, v25);
  sub_10000FBD8(v16, &qword_1005272C0);
  sub_10027CA80((uint64_t)v13);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for ColorScheme.light(_:), v7);
  LOBYTE(v16) = static ColorScheme.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v10, v7);
  if (v16) {
    static Color.black.getter();
  }
  else {
    static Color.white.getter();
  }
  uint64_t v27 = Color.opacity(_:)();
  swift_release();
  v26(v13, v7);
  uint64_t v28 = (char *)v6 + *(int *)(v40 + 20);
  uint64_t v29 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v30 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  __asm { FMOV            V0.2D, #16.0 }
  _OWORD *v6 = _Q0;
  Swift::String v36 = (uint64_t *)&v22[*(int *)(v20 + 36)];
  uint64_t v37 = sub_10000F214(&qword_100527570);
  sub_100339D28((uint64_t)v6, (uint64_t)v36 + *(int *)(v37 + 52), (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *Swift::String v36 = v27;
  *(_WORD *)((char *)v36 + *(int *)(v37 + 56)) = 256;
  sub_10000FB74((uint64_t)v19, (uint64_t)v22, &qword_1005272C8);
  sub_100339D90((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000FBD8((uint64_t)v19, &qword_1005272C8);
  return sub_10000FC34((uint64_t)v22, v41, &qword_100529DB8);
}

uint64_t sub_100338A88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v111 = a2;
  uint64_t v120 = a3;
  uint64_t v119 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v119);
  v118 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v5 - 8);
  uint64_t v108 = (uint64_t)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v103 = (char *)&v96 - v8;
  uint64_t v115 = sub_10000F214(&qword_100529DE0);
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  v107 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000F214(&qword_100529DE8) - 8;
  __chkstk_darwin(v110);
  v109 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000F214(&qword_100529DF0) - 8;
  __chkstk_darwin(v114);
  v112 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_10000F214(&qword_100529DF8) - 8;
  __chkstk_darwin(v117);
  uint64_t v116 = (uint64_t)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v127 = (uint64_t)&v96 - v14;
  uint64_t v15 = type metadata accessor for Font.Leading();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[1];
  uint64_t v157 = *a1;
  uint64_t v158 = v19;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for Font.Leading.tight(_:), v15);
  Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v25 = Text.font(_:)();
  uint64_t v104 = v26;
  uint64_t v105 = v25;
  LOBYTE(v15) = v27;
  uint64_t v106 = v28;
  swift_release();
  sub_100012FAC(v20, v22, v24);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  id v29 = [self labelColor];
  uint64_t v101 = Color.init(uiColor:)();
  uint64_t v124 = swift_getKeyPath();
  uint64_t v126 = swift_getKeyPath();
  int v100 = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v98 = v31;
  uint64_t v99 = v30;
  uint64_t v96 = v33;
  uint64_t v97 = v32;
  unsigned __int8 v137 = v15 & 1;
  unsigned __int8 v134 = 0;
  unsigned __int8 v131 = 0;
  int v125 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  int v121 = v137;
  v144[0] = *(_DWORD *)v136;
  *(_DWORD *)((char *)v144 + 3) = *(_DWORD *)&v136[3];
  v143[0] = *(_DWORD *)v135;
  *(_DWORD *)((char *)v143 + 3) = *(_DWORD *)&v135[3];
  v142[0] = *(_DWORD *)v133;
  *(_DWORD *)((char *)v142 + 3) = *(_DWORD *)&v133[3];
  *(_DWORD *)((char *)v141 + 3) = *(_DWORD *)&v132[3];
  v141[0] = *(_DWORD *)v132;
  int v122 = v131;
  int v123 = v134;
  unsigned __int8 v138 = 0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = (uint64_t)v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v103, v111, v42);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
  sub_10000FB74(v44, v108, &qword_10051E070);
  sub_10000F214(&qword_100529E00);
  sub_10033A204();
  uint64_t v45 = v107;
  AsyncImage.init(url:scale:transaction:content:)();
  sub_10000FBD8(v44, &qword_10051E070);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v46 = v113;
  uint64_t v47 = (uint64_t)v109;
  uint64_t v48 = v115;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v109, v45, v115);
  uint64_t v49 = (_OWORD *)(v47 + *(int *)(v110 + 44));
  long long v50 = v129;
  *uint64_t v49 = v128;
  v49[1] = v50;
  v49[2] = v130;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v48);
  unint64_t v51 = v118;
  uint64_t v52 = &v118[*(int *)(v119 + 28)];
  uint64_t v53 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v54 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 104))(v52, v53, v54);
  __asm { FMOV            V0.2D, #9.0 }
  *unint64_t v51 = _Q0;
  uint64_t v60 = (uint64_t)v112;
  uint64_t v61 = (uint64_t)&v112[*(int *)(v114 + 44)];
  sub_100339D28((uint64_t)v51, v61, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v61 + *(int *)(sub_10000F214(&qword_100519008) + 36)) = 256;
  sub_10000FB74(v47, v60, &qword_100529DE8);
  sub_100339D90((uint64_t)v51, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000FBD8(v47, &qword_100529DE8);
  LOBYTE(v61) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v69 = v68;
  uint64_t v70 = v116;
  sub_10000FB74(v60, v116, &qword_100529DF0);
  uint64_t v71 = v70 + *(int *)(v117 + 44);
  *(unsigned char *)uint64_t v71 = v61;
  *(void *)(v71 + 8) = v63;
  *(void *)(v71 + 16) = v65;
  *(void *)(v71 + 24) = v67;
  *(void *)(v71 + 32) = v69;
  *(unsigned char *)(v71 + 40) = 0;
  sub_10000FBD8(v60, &qword_100529DF0);
  uint64_t v72 = v127;
  sub_10000FC34(v70, v127, &qword_100529DF8);
  int v73 = v138;
  sub_10000FB74(v72, v70, &qword_100529DF8);
  uint64_t v74 = v104;
  uint64_t v75 = v105;
  *(void *)&long long v145 = v105;
  *((void *)&v145 + 1) = v104;
  LOBYTE(v146) = v121;
  *(_DWORD *)((char *)&v146 + 1) = v144[0];
  DWORD1(v146) = *(_DWORD *)((char *)v144 + 3);
  uint64_t v76 = v106;
  uint64_t v77 = v101;
  uint64_t v78 = KeyPath;
  *((void *)&v146 + 1) = v106;
  *(void *)&long long v147 = KeyPath;
  BYTE8(v147) = 0;
  *(_DWORD *)((char *)&v147 + 9) = v143[0];
  HIDWORD(v147) = *(_DWORD *)((char *)v143 + 3);
  *(void *)&long long v148 = v124;
  *((void *)&v148 + 1) = v101;
  *(void *)&long long v149 = v126;
  *((void *)&v149 + 1) = 3;
  LOBYTE(v150) = v123;
  DWORD1(v150) = *(_DWORD *)((char *)v142 + 3);
  *(_DWORD *)((char *)&v150 + 1) = v142[0];
  LOBYTE(v61) = v100;
  BYTE8(v150) = v100;
  HIDWORD(v150) = *(_DWORD *)((char *)v141 + 3);
  *(_DWORD *)((char *)&v150 + 9) = v141[0];
  uint64_t v80 = v98;
  uint64_t v79 = v99;
  *(void *)&long long v151 = v99;
  *((void *)&v151 + 1) = v98;
  uint64_t v82 = v96;
  uint64_t v81 = v97;
  *(void *)&long long v152 = v97;
  *((void *)&v152 + 1) = v96;
  LOBYTE(v153) = v122;
  *(_DWORD *)((char *)&v153 + 1) = *(_DWORD *)v140;
  DWORD1(v153) = *(_DWORD *)&v140[3];
  BYTE8(v153) = v125;
  HIDWORD(v153) = *(_DWORD *)&v139[3];
  *(_DWORD *)((char *)&v153 + 9) = *(_DWORD *)v139;
  *(void *)&long long v154 = v35;
  *((void *)&v154 + 1) = v37;
  *(void *)&long long v155 = v39;
  *((void *)&v155 + 1) = v41;
  LODWORD(v119) = v73;
  char v156 = v73;
  long long v83 = v153;
  long long v84 = v154;
  long long v85 = v155;
  uint64_t v86 = v120;
  *(unsigned char *)(v120 + 176) = v73;
  *(_OWORD *)(v86 + 144) = v84;
  *(_OWORD *)(v86 + 160) = v85;
  *(_OWORD *)(v86 + 128) = v83;
  long long v87 = v145;
  long long v88 = v146;
  long long v89 = v148;
  *(_OWORD *)(v86 + 32) = v147;
  *(_OWORD *)(v86 + 48) = v89;
  *(_OWORD *)uint64_t v86 = v87;
  *(_OWORD *)(v86 + 16) = v88;
  long long v90 = v149;
  long long v91 = v150;
  long long v92 = v152;
  *(_OWORD *)(v86 + 96) = v151;
  *(_OWORD *)(v86 + 112) = v92;
  *(_OWORD *)(v86 + 64) = v90;
  *(_OWORD *)(v86 + 80) = v91;
  *(void *)(v86 + 184) = 0;
  *(unsigned char *)(v86 + 192) = 1;
  uint64_t v93 = v86;
  uint64_t v94 = sub_10000F214(&qword_100529E10);
  sub_10000FB74(v70, v93 + *(int *)(v94 + 64), &qword_100529DF8);
  sub_10033A2A4((uint64_t)&v145);
  sub_10000FBD8(v127, &qword_100529DF8);
  sub_10000FBD8(v70, &qword_100529DF8);
  uint64_t v157 = v75;
  uint64_t v158 = v74;
  char v159 = v121;
  *(_DWORD *)v160 = v144[0];
  *(_DWORD *)&v160[3] = *(_DWORD *)((char *)v144 + 3);
  uint64_t v161 = v76;
  uint64_t v162 = v78;
  char v163 = 0;
  *(_DWORD *)v164 = v143[0];
  *(_DWORD *)&v164[3] = *(_DWORD *)((char *)v143 + 3);
  uint64_t v165 = v124;
  uint64_t v166 = v77;
  uint64_t v167 = v126;
  uint64_t v168 = 3;
  char v169 = v123;
  *(_DWORD *)&v170[3] = *(_DWORD *)((char *)v142 + 3);
  *(_DWORD *)v170 = v142[0];
  char v171 = v61;
  *(_DWORD *)&v172[3] = *(_DWORD *)((char *)v141 + 3);
  *(_DWORD *)v172 = v141[0];
  uint64_t v173 = v79;
  uint64_t v174 = v80;
  uint64_t v175 = v81;
  uint64_t v176 = v82;
  char v177 = v122;
  *(_DWORD *)&v178[3] = *(_DWORD *)&v140[3];
  *(_DWORD *)v178 = *(_DWORD *)v140;
  char v179 = v125;
  *(_DWORD *)&v180[3] = *(_DWORD *)&v139[3];
  *(_DWORD *)v180 = *(_DWORD *)v139;
  uint64_t v181 = v35;
  uint64_t v182 = v37;
  uint64_t v183 = v39;
  uint64_t v184 = v41;
  char v185 = v119;
  return sub_10033A31C((uint64_t)&v157);
}

uint64_t sub_1003395A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for ImageSearchRelatedSearchesCardView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003396D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ImageSearchRelatedSearchesCardView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100337E8C(a1, v6, a2);
}

unint64_t sub_100339758()
{
  unint64_t result = qword_100529D88;
  if (!qword_100529D88)
  {
    sub_10000F69C(&qword_100529D78);
    sub_1003397CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529D88);
  }
  return result;
}

unint64_t sub_1003397CC()
{
  unint64_t result = qword_100529D90;
  if (!qword_100529D90)
  {
    sub_10000F69C(&qword_100529D98);
    sub_100013AA8(&qword_100529DA0, &qword_100529DA8);
    sub_10033989C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529D90);
  }
  return result;
}

uint64_t sub_10033989C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003398E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for ImageSearchRelatedSearchesCardView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v2, v7);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);

  return swift_deallocObject();
}

uint64_t sub_100339AA0()
{
  uint64_t v1 = (int *)(type metadata accessor for ImageSearchRelatedSearchesCardView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + v1[8] + v2))(v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_100339B74@<X0>(uint64_t a1@<X8>)
{
  return sub_100338648(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

unint64_t sub_100339B80()
{
  unint64_t result = qword_100529DC0;
  if (!qword_100529DC0)
  {
    sub_10000F69C(&qword_100529DB8);
    sub_100339C20();
    sub_100013AA8(&qword_1005275B0, &qword_100527570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529DC0);
  }
  return result;
}

unint64_t sub_100339C20()
{
  unint64_t result = qword_100529DC8;
  if (!qword_100529DC8)
  {
    sub_10000F69C(&qword_1005272C8);
    sub_100013AA8(&qword_100529DD0, &qword_1005272C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529DC8);
  }
  return result;
}

uint64_t sub_100339CC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100339D28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100339D90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100339DF0@<X0>(uint64_t a1@<X8>)
{
  v25[1] = a1;
  uint64_t v1 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v1);
  uint64_t v3 = (_OWORD *)((char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_10000F214(&qword_10051BD48);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100529E18);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Image.ResizingMode();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AsyncImagePhase.image.getter())
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for Image.ResizingMode.stretch(_:), v10);
    uint64_t v14 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(void *)uint64_t v9 = v14;
    *((void *)v9 + 1) = 0;
    *((_WORD *)v9 + 8) = 257;
    swift_storeEnumTagMultiPayload();
    swift_retain_n();
    sub_10000F214((uint64_t *)&unk_1005230E0);
    sub_100061FC8();
    sub_100013AA8(&qword_10051BD40, &qword_10051BD48);
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    return swift_release();
  }
  else
  {
    uint64_t v16 = (char *)v3 + *(int *)(v1 + 20);
    uint64_t v17 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v18 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v16, v17, v18);
    __asm { FMOV            V0.2D, #9.0 }
    *uint64_t v3 = _Q0;
    LODWORD(v16) = static HierarchicalShapeStyle.secondary.getter();
    sub_100339D28((uint64_t)v3, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    char v24 = &v6[*(int *)(v4 + 52)];
    *(_DWORD *)char v24 = v16;
    *((_DWORD *)v24 + 1) = 1045220557;
    *(_WORD *)&v6[*(int *)(v4 + 56)] = 256;
    sub_100339D90((uint64_t)v3, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    sub_10000FB74((uint64_t)v6, (uint64_t)v9, &qword_10051BD48);
    swift_storeEnumTagMultiPayload();
    sub_10000F214((uint64_t *)&unk_1005230E0);
    sub_100061FC8();
    sub_100013AA8(&qword_10051BD40, &qword_10051BD48);
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8((uint64_t)v6, &qword_10051BD48);
  }
}

unint64_t sub_10033A204()
{
  unint64_t result = qword_100529E08;
  if (!qword_100529E08)
  {
    sub_10000F69C(&qword_100529E00);
    sub_100061FC8();
    sub_100013AA8(&qword_10051BD40, &qword_10051BD48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529E08);
  }
  return result;
}

uint64_t sub_10033A2A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10033A31C(uint64_t a1)
{
  return a1;
}

unint64_t sub_10033A398()
{
  unint64_t result = qword_100529E20;
  if (!qword_100529E20)
  {
    sub_10000F69C(&qword_100529E28);
    sub_100013AA8(&qword_100529DB0, &qword_100529D60);
    sub_10033989C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529E20);
  }
  return result;
}

uint64_t *sub_10033A468(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)v4 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *uint64_t v11 = *v12;
    *((void *)v11 + 1) = *((void *)v12 + 1);
    uint64_t v13 = (uint64_t *)((char *)v4 + v10);
    uint64_t v14 = (uint64_t *)((char *)a2 + v10);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    *uint64_t v17 = *v18;
    *((void *)v17 + 1) = *((void *)v18 + 1);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10033A5D0(uint64_t a1)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_10033A694(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  char *v9 = *v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  uint64_t v11 = (void *)((char *)a1 + v8);
  uint64_t v12 = (void *)((char *)a2 + v8);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  char *v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_10033A7B0(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *v9;
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *uint64_t v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_10033A90C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_10033A9F4(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    uint64_t v6 = sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  char *v9 = *v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_release();
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  char *v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_release();
  return a1;
}

uint64_t sub_10033AB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033AB54);
}

uint64_t sub_10033AB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB50);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10033AC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033AC3C);
}

uint64_t sub_10033AC3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_10051BB50);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for OnboardingMastheadView()
{
  uint64_t result = qword_100529E88;
  if (!qword_100529E88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10033AD4C()
{
  sub_100082914();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10033ADE4()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_10033AE00()
{
  uint64_t v1 = type metadata accessor for Text.Layout.Line();
  uint64_t v33 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - v5;
  __chkstk_darwin(v7);
  uint64_t v39 = (char *)&v32 - v8;
  uint64_t v9 = type metadata accessor for Text.Layout();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100529FF8);
  uint64_t v14 = v13 - 8;
  double v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v34 = (void (**)(char *, uint64_t))v10;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  uint64_t v37 = v10 + 16;
  v36(v12, v0, v9, v15);
  sub_10033E5F4(&qword_10052A000, (void (*)(uint64_t))&type metadata accessor for Text.Layout);
  uint64_t v38 = v12;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v18 = &v17[*(int *)(v14 + 44)];
  sub_10033E5F4(&qword_10052A008, (void (*)(uint64_t))&type metadata accessor for Text.Layout);
  uint64_t v19 = *(void *)v18;
  uint64_t v40 = v17;
  dispatch thunk of Collection.endIndex.getter();
  if (v19 != v41[0])
  {
    ++v34;
    uint64_t v35 = (void (**)(char *))(v33 + 16);
    uint64_t v20 = (void (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v21 = (uint64_t)v40;
    do
    {
      uint64_t v22 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      char v23 = v39;
      (*v35)(v39);
      v22(v41, 0);
      char v24 = v38;
      ((void (*)(char *, uint64_t, uint64_t))v36)(v38, v21, v9);
      dispatch thunk of Collection.formIndex(after:)();
      (*v34)(v24, v9);
      uint64_t v25 = *v20;
      (*v20)(v6, v23, v1);
      v25(v3, v6, v1);
      sub_1001A0130(v3);
      uint64_t v26 = v6;
      char v27 = v3;
      uint64_t v28 = v1;
      uint64_t v29 = *(void *)v18;
      dispatch thunk of Collection.endIndex.getter();
      BOOL v30 = v29 == v41[0];
      uint64_t v1 = v28;
      uint64_t v3 = v27;
      uint64_t v6 = v26;
    }
    while (!v30);
  }
  sub_10000FBD8((uint64_t)v40, &qword_100529FF8);
  return v42;
}

uint64_t sub_10033B1E8()
{
  uint64_t v0 = sub_100335EB0()[2];
  if (v0)
  {
    uint64_t v1 = 0;
    char v2 = 0;
    uint64_t v3 = swift_bridgeObjectRetain() + 40;
    unint64_t v4 = 0xE000000000000000;
    do
    {
      uint64_t v26 = v4;
      uint64_t v27 = v3;
      uint64_t v24 = v0;
      uint64_t v25 = v1;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      sub_1000317A0();
      uint64_t v5 = Text.init<A>(_:)();
      uint64_t v7 = v6;
      char v9 = v8 & 1;
      sub_10033E3D0();
      char v10 = v2;
      uint64_t v11 = Text.customAttribute<A>(_:)();
      uint64_t v13 = v12;
      char v15 = v14 & 1;
      sub_100012FAC(v5, v7, v9);
      swift_bridgeObjectRelease();
      char v23 = v10 & 1;
      uint64_t v16 = static Text.+ infix(_:_:)();
      uint64_t v18 = v17;
      LOBYTE(v5) = v19 & 1;
      sub_100012FAC(v11, v13, v15);
      swift_bridgeObjectRelease();
      uint64_t v1 = static Text.+ infix(_:_:)();
      unint64_t v4 = v20;
      char v2 = v21 & 1;
      sub_100012FAC(v16, v18, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100012FAC(v25, v26, v23);
      swift_bridgeObjectRelease();
      uint64_t v3 = v27 + 16;
      uint64_t v0 = v24 - 1;
    }
    while (v24 != 1);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v1;
}

uint64_t sub_10033B424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10033B1E8();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.largeTitle.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_100012FAC(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.Weight.bold.getter();
  uint64_t v12 = Text.fontWeight(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  sub_100012FAC(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(unsigned char *)(a1 + 16) = v16 & 1;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_10033B540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v76 = a1;
  uint64_t v3 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  __chkstk_darwin(v3);
  uint64_t v71 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OnboardingMastheadView();
  uint64_t v6 = v5 - 8;
  uint64_t v69 = *(void *)(v5 - 8);
  uint64_t v68 = *(void *)(v69 + 64);
  __chkstk_darwin(v5);
  uint64_t v67 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100529EC8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v74 = v8;
  uint64_t v75 = v9;
  __chkstk_darwin(v8);
  uint64_t v70 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = static Alignment.center.getter();
  sub_100226E88(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v86, 0.0, 1, 0.0, 1, v11, v12, (uint64_t)&off_1004E5DF0);
  uint64_t v65 = v86[0].i64[1];
  uint64_t v66 = v86[0].i64[0];
  __int8 v13 = v86[1].i8[0];
  LODWORD(v51) = v86[2].u8[0];
  uint64_t v63 = v86[2].i64[1];
  uint64_t v64 = v86[1].i64[1];
  LODWORD(v50) = v86[3].u8[0];
  LODWORD(v49) = v86[4].u8[0];
  uint64_t v61 = v86[4].i64[1];
  uint64_t v62 = v86[3].i64[1];
  __int8 v14 = v86[5].i8[0];
  __int8 v15 = v86[6].i8[0];
  uint64_t v59 = v86[6].i64[1];
  uint64_t v60 = v86[5].i64[1];
  uint64_t v58 = v86[7].i64[0];
  char v16 = (uint64_t *)(v1 + *(int *)(v6 + 32));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  *(void *)&v77[0] = v17;
  *((void *)&v77[0] + 1) = v18;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  unsigned __int8 v19 = v88;
  uint64_t v56 = v89;
  uint64_t v57 = v87;
  unsigned __int8 v20 = v90;
  uint64_t v54 = v92;
  uint64_t v55 = v91;
  uint64_t v21 = static Alignment.center.getter();
  uint64_t v52 = v22;
  uint64_t v53 = v21;
  static Color.white.getter();
  uint64_t v23 = v1 + *(int *)(v6 + 36);
  __int8 v24 = *(unsigned char *)v23;
  uint64_t v25 = *(void *)(v23 + 8);
  v86[0].i8[0] = v24;
  v86[0].i64[1] = v25;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  __int8 v85 = v13;
  char v84 = v51;
  char v83 = v50;
  char v82 = v49;
  __int8 v81 = v14;
  __int8 v80 = v15;
  unsigned __int8 v79 = v19;
  unsigned __int8 v78 = v20;
  uint64_t v51 = Color.opacity(_:)();
  swift_release();
  __int8 v26 = v85;
  char v27 = v84;
  char v28 = v83;
  char v29 = v82;
  __int8 v30 = v81;
  LOBYTE(v6) = v80;
  int v47 = v79;
  int v48 = v78;
  uint64_t v31 = static Alignment.center.getter();
  uint64_t v49 = v32;
  uint64_t v50 = v31;
  sub_10033BBC4(v2, v86);
  int64x2_t v45 = v86[1];
  int64x2_t v46 = v86[0];
  int64x2_t v44 = v86[2];
  uint64_t v42 = v86[3].i64[1];
  uint64_t v43 = v86[3].i64[0];
  uint64_t v33 = v67;
  sub_10033CED8(v2, v67);
  unint64_t v34 = (*(unsigned __int8 *)(v69 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
  uint64_t v35 = swift_allocObject();
  sub_10033CF40(v33, v35 + v34);
  *(void *)&v77[0] = v66;
  *((void *)&v77[0] + 1) = v65;
  LOBYTE(v77[1]) = v26;
  *((void *)&v77[1] + 1) = v64;
  LOBYTE(v77[2]) = v27;
  *((void *)&v77[2] + 1) = v63;
  LOBYTE(v77[3]) = v28;
  *((void *)&v77[3] + 1) = v62;
  LOBYTE(v77[4]) = v29;
  *((void *)&v77[4] + 1) = v61;
  LOBYTE(v77[5]) = v30;
  *((void *)&v77[5] + 1) = v60;
  LOBYTE(v77[6]) = v6;
  *((void *)&v77[6] + 1) = v59;
  *(void *)&v77[7] = v58;
  *((void *)&v77[7] + 1) = v57;
  LOBYTE(v77[8]) = v47;
  *((void *)&v77[8] + 1) = v56;
  LOBYTE(v77[9]) = v48;
  *((void *)&v77[9] + 1) = v55;
  *(void *)&v77[10] = v54;
  *((void *)&v77[10] + 1) = v51;
  *(void *)&v77[11] = v53;
  *((void *)&v77[11] + 1) = v52;
  *(void *)&v77[12] = v50;
  *((void *)&v77[12] + 1) = v49;
  v77[13] = v46;
  v77[14] = v45;
  v77[15] = v44;
  *(void *)&v77[16] = v43;
  *((void *)&v77[16] + 1) = v42;
  v77[17] = xmmword_100451530;
  *(void *)&v77[18] = sub_10033CFA4;
  *((void *)&v77[18] + 1) = v35;
  v77[19] = 0uLL;
  uint64_t v36 = v71;
  static AccessibilityChildBehavior.combine.getter();
  uint64_t v37 = sub_10000F214(&qword_100529ED0);
  uint64_t v38 = sub_10033CFEC(&qword_100529ED8, &qword_100529ED0, (void (*)(void))sub_10033CFBC);
  uint64_t v39 = v70;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v36, v73);
  memcpy(v86, v77, sizeof(v86));
  sub_10033D234(v86);
  LocalizedStringKey.init(stringLiteral:)();
  *(void *)&v77[0] = v37;
  *((void *)&v77[0] + 1) = v38;
  swift_getOpaqueTypeConformance2();
  uint64_t v40 = v74;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v39, v40);
}

uint64_t sub_10033BBC4@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OnboardingMastheadView();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = a1 + *(int *)(v5 + 28);
  char v11 = *(unsigned char *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  v23[8] = v11;
  uint64_t v24 = v12;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v25 == 1)
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v13 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v15 = v14;
    sub_10033D390();
    uint64_t v16 = AnyTransition.init<A>(_:)();
    sub_10033CED8(a1, (uint64_t)&v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v18 = swift_allocObject();
    sub_10033CF40((uint64_t)&v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v18 + v17);
    uint64_t result = static Alignment.center.getter();
    int64x2_t v21 = vdupq_n_s64(0x100uLL);
    v21.i64[0] = v16;
    uint64_t v22 = sub_10033D3E8;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t result = 0;
    uint64_t v20 = 0;
    int64x2_t v21 = 0uLL;
  }
  a2->i64[0] = v13;
  a2->i64[1] = v15;
  a2[1] = v21;
  a2[2].i64[0] = (uint64_t)v22;
  a2[2].i64[1] = v18;
  a2[3].i64[0] = result;
  a2[3].i64[1] = v20;
  return result;
}

uint64_t sub_10033BE40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v47 = a3;
  uint64_t v48 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v48 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v48);
  uint64_t v7 = type metadata accessor for OnboardingMastheadView();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v38 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ContentSizeCategory();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100529F68);
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  __chkstk_darwin(v14);
  uint64_t v39 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = static Color.clear.getter();
  uint64_t v42 = a2;
  sub_10027CDC8((uint64_t)v13);
  uint64_t v36 = v9;
  sub_10033CED8(a2, (uint64_t)v9);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v35 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v48;
  v40(v35, a1, v48);
  uint64_t v17 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  uint64_t v19 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v20 = (v8 + v19 + v18) & ~v19;
  uint64_t v37 = v17 | v19 | 7;
  uint64_t v38 = v20 + v6;
  uint64_t v21 = swift_allocObject();
  sub_10033CF40((uint64_t)v9, v21 + v18);
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v22(v21 + v20, (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  sub_10033E5F4(&qword_100529F70, (void (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  uint64_t v23 = v39;
  uint64_t v24 = v43;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v24);
  swift_release();
  uint64_t v25 = (uint64_t)v36;
  sub_10033CED8(v42, (uint64_t)v36);
  __int8 v26 = v35;
  uint64_t v27 = v48;
  v40(v35, v41, v48);
  uint64_t v28 = swift_allocObject();
  sub_10033CF40(v25, v28 + v18);
  v22(v28 + v20, v26, v27);
  uint64_t v30 = v45;
  uint64_t v29 = v46;
  uint64_t v31 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v47, v23, v46);
  uint64_t v32 = (uint64_t (**)())(v31 + *(int *)(sub_10000F214(&qword_100529F78) + 36));
  *uint64_t v32 = sub_10033DE88;
  v32[1] = (uint64_t (*)())v28;
  _OWORD v32[2] = 0;
  v32[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v23, v29);
}

uint64_t sub_10033C2A8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10033C320(uint64_t a1)
{
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v31 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OnboardingMastheadView();
  uint64_t v7 = v6 - 8;
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v28 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v30 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v27 - v14;
  GeometryProxy.size.getter();
  uint64_t v16 = (void ***)(a1 + *(int *)(v7 + 32));
  uint64_t v17 = *v16;
  uint64_t v18 = (uint64_t)v16[1];
  aBlock = v17;
  uint64_t v37 = v18;
  uint64_t v42 = v19;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.setter();
  sub_10002E8B0();
  uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v12, v9);
  sub_10033CED8(a1, (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v21 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v22 = swift_allocObject();
  sub_10033CF40((uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21);
  uint64_t v40 = sub_10033E0C8;
  uint64_t v41 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  uint64_t v38 = sub_1002EDB98;
  uint64_t v39 = &unk_1004F4E28;
  uint64_t v23 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v42 = _swiftEmptyArrayStorage;
  sub_10033E5F4((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v24 = v31;
  uint64_t v25 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
  v29(v15, v30);
  return swift_release();
}

uint64_t sub_10033C7B4()
{
  return swift_release();
}

uint64_t sub_10033C830()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10033C8A4(uint64_t a1)
{
  uint64_t v29 = a1;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v31 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OnboardingMastheadView();
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v25 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v28 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E8B0();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  uint64_t v26 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v9, v6);
  sub_10033CED8(v29, (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v18 = swift_allocObject();
  sub_10033CF40((uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  aBlock[4] = sub_10033D344;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F4D60;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_10033E5F4((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v22 = v31;
  uint64_t v21 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = (void *)v26;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
  v27(v12, v28);
  return swift_release();
}

uint64_t sub_10033CDB4()
{
  return swift_release();
}

uint64_t sub_10033CE20()
{
  return swift_release();
}

uint64_t sub_10033CED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnboardingMastheadView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033CF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnboardingMastheadView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033CFA4()
{
  return sub_10033E0E0(sub_10033C8A4);
}

uint64_t sub_10033CFBC()
{
  return sub_10033CFEC(&qword_100529EE0, &qword_100529EE8, (void (*)(void))sub_10033D068);
}

uint64_t sub_10033CFEC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10033D068()
{
  return sub_10033CFEC(&qword_100529EF0, &qword_100529EF8, (void (*)(void))sub_10033D098);
}

unint64_t sub_10033D098()
{
  unint64_t result = qword_100529F00;
  if (!qword_100529F00)
  {
    sub_10000F69C(&qword_100529F08);
    sub_10033D138();
    sub_100013AA8(&qword_100529F50, &qword_100529F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529F00);
  }
  return result;
}

unint64_t sub_10033D138()
{
  unint64_t result = qword_100529F10;
  if (!qword_100529F10)
  {
    sub_10000F69C(&qword_100529F18);
    sub_10033CFEC(&qword_100529F20, &qword_100529F28, (void (*)(void))sub_10033D204);
    sub_100013AA8(&qword_100529F40, &qword_100529F48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529F10);
  }
  return result;
}

uint64_t sub_10033D204()
{
  return sub_10033CFEC(&qword_100529F30, &qword_100529F38, (void (*)(void))sub_10002D640);
}

void *sub_10033D234(void *a1)
{
  uint64_t v2 = a1[26];
  uint64_t v3 = a1[27];
  uint64_t v5 = a1[36];
  uint64_t v6 = a1[38];
  swift_release();
  swift_bridgeObjectRelease();
  sub_10033D2F0(v2, v3);
  sub_10000F478(v5);
  sub_10000F478(v6);
  return a1;
}

uint64_t sub_10033D2F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10033D344()
{
  return sub_10033E0E0((uint64_t (*)(uint64_t))sub_10033CDB4);
}

uint64_t sub_10033D35C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10033D36C()
{
  return swift_release();
}

uint64_t sub_10033D374()
{
  return sub_10033CE20();
}

unint64_t sub_10033D390()
{
  unint64_t result = qword_100529F60;
  if (!qword_100529F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529F60);
  }
  return result;
}

uint64_t sub_10033D3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for OnboardingMastheadView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10033BE40(a1, v6, a2);
}

uint64_t sub_10033D468(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = type metadata accessor for Text.Layout.Run();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10033AE00();
  uint64_t v15 = v14[2];
  if (v15)
  {
    uint64_t v16 = 0;
    double v17 = a2 - a4;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v18 = v11 + 16;
    uint64_t v19 = v20;
    unint64_t v21 = (*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64);
    uint64_t v28 = v14;
    uint64_t v22 = (char *)v14 + v21;
    uint64_t v23 = *(void *)(v18 + 56);
    do
    {
      v19(v13, v22, v10);
      double v24 = a1 - v17 * (double)v16;
      if (v24 > a2) {
        double v24 = a2;
      }
      if (v24 < 0.0) {
        double v25 = 0.0;
      }
      else {
        double v25 = v24;
      }
      ++v16;
      uint64_t v29 = *a6;
      swift_retain();
      sub_10033D650((uint64_t)v13, (uint64_t)&v29, v25, v26, a2);
      swift_release();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v13, v10);
      v22 += v23;
    }
    while (v15 != v16);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10033D650(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v21 = a2;
  uint64_t v24 = a1;
  uint64_t v7 = type metadata accessor for GraphicsContext.Filter();
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Spring();
  uint64_t v10 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UnitCurve();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UnitCurve.easeIn.getter();
  UnitCurve.value(at:)(a3 / a5);
  double v17 = *(void (**)(char *, uint64_t))(v14 + 8);
  v17(v16, v13);
  type metadata accessor for Text.Layout.Run();
  sub_10033E5F4(&qword_100529FF0, (void (*)(uint64_t))&type metadata accessor for Text.Layout.Run);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  dispatch thunk of Collection.distance(from:to:)();
  static UnitCurve.easeIn.getter();
  UnitCurve.value(at:)(1.0 - a3 / a5);
  v17(v16, v13);
  Spring.init(response:dampingRatio:)();
  uint64_t v26 = 0;
  uint64_t v27 = 0x4040000000000000;
  uint64_t v25 = 0;
  Spring.value<A>(fromValue:toValue:initialVelocity:time:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  GraphicsContext.translateBy(x:y:)();
  static GraphicsContext.Filter.blur(radius:options:)();
  GraphicsContext.addFilter(_:options:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  GraphicsContext.opacity.setter();
  return GraphicsContext.draw(_:options:)();
}

uint64_t sub_10033D9D4(uint64_t a1, uint64_t *a2)
{
  return sub_10033D468(*v2, v2[1], v2[2], v2[3], a1, a2);
}

uint64_t sub_10033D9E0()
{
  return TextProxy.sizeThatFits(_:)();
}

double sub_10033DA1C()
{
  return 0.0;
}

double (*sub_10033DA30(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return sub_10033DA5C;
}

double sub_10033DA5C(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

uint64_t sub_10033DA70()
{
  uint64_t result = Transaction.disablesAnimations.getter();
  if ((result & 1) == 0)
  {
    static Animation.linear(duration:)();
    return Transaction.animation.setter();
  }
  return result;
}

uint64_t sub_10033DAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v12 = sub_10000F214(&qword_100529FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a2, a1, v12);
  uint64_t result = sub_10000F214(&qword_100529F98);
  uint64_t v14 = (double *)(a2 + *(int *)(result + 36));
  *uint64_t v14 = a3;
  v14[1] = a4;
  v14[2] = a5;
  v14[3] = a6;
  return result;
}

uint64_t sub_10033DB54()
{
  *(void *)(swift_allocObject() + 16) = 0x4014000000000000;
  sub_10000F214(&qword_100529F90);
  sub_10000F214(&qword_100529F98);
  sub_100013AA8(&qword_100529FA0, &qword_100529F90);
  sub_10033E304();
  View.transaction<A>(_:body:)();
  return swift_release();
}

uint64_t sub_10033DC90()
{
  return TransitionProperties.init(hasMotion:)(1);
}

uint64_t sub_10033DC9C()
{
  return sub_10033DEA0((uint64_t (*)(unint64_t, uint64_t))sub_10033C2A8);
}

uint64_t sub_10033DCB8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OnboardingMastheadView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v2, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);

  return swift_deallocObject();
}

uint64_t sub_10033DE88()
{
  return sub_10033DEA0((uint64_t (*)(unint64_t, uint64_t))sub_10033C320);
}

uint64_t sub_10033DEA0(uint64_t (*a1)(unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for OnboardingMastheadView() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  uint64_t v6 = v1 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a1(v1 + v3, v6);
}

uint64_t sub_10033DF84()
{
  uint64_t v1 = *(void *)(type metadata accessor for OnboardingMastheadView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10033E0C8()
{
  return sub_10033E0E0((uint64_t (*)(uint64_t))sub_10033C7B4);
}

uint64_t sub_10033E0E0(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for OnboardingMastheadView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_10033E154()
{
  return sub_10033C830();
}

ValueMetadata *type metadata accessor for TextTransition()
{
  return &type metadata for TextTransition;
}

ValueMetadata *type metadata accessor for TokenizedTextView()
{
  return &type metadata for TokenizedTextView;
}

unint64_t sub_10033E194()
{
  unint64_t result = qword_100529F80;
  if (!qword_100529F80)
  {
    sub_10000F69C(&qword_100529F88);
    sub_10000F69C(&qword_100529ED0);
    sub_10033CFEC(&qword_100529ED8, &qword_100529ED0, (void (*)(void))sub_10033CFBC);
    swift_getOpaqueTypeConformance2();
    sub_10033E5F4((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529F80);
  }
  return result;
}

uint64_t sub_10033E2A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10033E2C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10033E2E0()
{
  return swift_deallocObject();
}

uint64_t sub_10033E2F0()
{
  return sub_10033DA70();
}

uint64_t sub_10033E2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10033DAB4(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

unint64_t sub_10033E304()
{
  unint64_t result = qword_100529FA8;
  if (!qword_100529FA8)
  {
    sub_10000F69C(&qword_100529F98);
    sub_100013AA8(&qword_100529FB0, &qword_100529FB8);
    sub_100013AA8(&qword_100529FC0, &qword_100529FC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529FA8);
  }
  return result;
}

unint64_t sub_10033E3D0()
{
  unint64_t result = qword_100529FD0;
  if (!qword_100529FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529FD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SliceAttribute()
{
  return &type metadata for SliceAttribute;
}

ValueMetadata *type metadata accessor for AppearanceEffectRenderer()
{
  return &type metadata for AppearanceEffectRenderer;
}

uint64_t sub_10033E444()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10033E4F0()
{
  unint64_t result = qword_100529FD8;
  if (!qword_100529FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529FD8);
  }
  return result;
}

unint64_t sub_10033E548()
{
  unint64_t result = qword_100529FE0;
  if (!qword_100529FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529FE0);
  }
  return result;
}

unint64_t sub_10033E5A0()
{
  unint64_t result = qword_100529FE8;
  if (!qword_100529FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100529FE8);
  }
  return result;
}

uint64_t sub_10033E5F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10033E644(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v6 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v6;
    uint64_t v7 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = a2[9];
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v8 = *(int *)(a3 + 40);
    __dst = (unsigned char *)(a1 + v8);
    uint64_t v9 = (char *)a2 + v8;
    *(void *)(a1 + 88) = a2[11];
    uint64_t v10 = type metadata accessor for AccessibilityTechnologies();
    uint64_t v11 = *(void *)(v10 - 8);
    double v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v17(v9, 1, v10))
    {
      uint64_t v12 = sub_10000F214(&qword_100525F60);
      uint64_t v13 = __dst;
      memcpy(__dst, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = __dst;
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = (int *)sub_10000F214(&qword_100519A10);
    v13[v15[9]] = v9[v15[9]];
    *(void *)&v13[v15[10]] = *(void *)&v9[v15[10]];
    v13[v15[11]] = v9[v15[11]];
  }
  swift_retain();
  return v3;
}

uint64_t sub_10033E878(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_10000F214(&qword_100519A10);

  return swift_release();
}

uint64_t sub_10033E974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v7 = *(int *)(a3 + 40);
  __dst = (unsigned char *)(a1 + v7);
  uint64_t v8 = (char *)(a2 + v7);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v9 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v15(v8, 1, v9))
  {
    uint64_t v11 = sub_10000F214(&qword_100525F60);
    uint64_t v12 = __dst;
    memcpy(__dst, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = __dst;
    (*(void (**)(unsigned char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = (int *)sub_10000F214(&qword_100519A10);
  v12[v13[9]] = v8[v13[9]];
  *(void *)&v12[v13[10]] = *(void *)&v8[v13[10]];
  v12[v13[11]] = v8[v13[11]];
  swift_retain();
  return a1;
}

uint64_t sub_10033EB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000F214(&qword_100525F60);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = (int *)sub_10000F214(&qword_100519A10);
  v8[v16[9]] = v9[v16[9]];
  *(void *)&v8[v16[10]] = *(void *)&v9[v16[10]];
  swift_retain();
  swift_release();
  v8[v16[11]] = v9[v16[11]];
  return a1;
}

_OWORD *sub_10033EDD0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  long long v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000F214(&qword_100525F60);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  int v13 = (int *)sub_10000F214(&qword_100519A10);
  v8[v13[9]] = v9[v13[9]];
  *(void *)&v8[v13[10]] = *(void *)&v9[v13[10]];
  v8[v13[11]] = v9[v13[11]];
  return a1;
}

uint64_t sub_10033EF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000F214(&qword_100525F60);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  double v17 = (int *)sub_10000F214(&qword_100519A10);
  v9[v17[9]] = v10[v17[9]];
  *(void *)&v9[v17[10]] = *(void *)&v10[v17[10]];
  swift_release();
  v9[v17[11]] = v10[v17[11]];
  return a1;
}

uint64_t sub_10033F150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033F164);
}

uint64_t sub_10033F164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_100519A10);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10033F218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033F22C);
}

uint64_t sub_10033F22C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_100519A10);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for OnboardingOverlay()
{
  uint64_t result = qword_10052A068;
  if (!qword_10052A068) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10033F324()
{
  sub_100027AE0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10033F3D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10033F3EC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isSmartDialog.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10033F41C()
{
  return EnvironmentValues.isSmartDialog.setter();
}

uint64_t sub_10033F444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v2 = type metadata accessor for ScrollBounceBehavior();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  __chkstk_darwin(v2);
  v33[0] = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10052A0B8);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000F214(&qword_10052A0C0);
  uint64_t v7 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_100527240);
  __chkstk_darwin(v34);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100527248);
  __chkstk_darwin(v12 - 8);
  int v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10052A0C8);
  __chkstk_darwin(v15 - 8);
  double v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000F214(&qword_10052A0D0);
  __chkstk_darwin(v35);
  uint64_t v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_100518FE8);
  swift_allocObject();
  uint64_t v20 = PassthroughSubject.init()();
  uint64_t v42 = v1;
  uint64_t v43 = v20;
  v33[1] = v20;
  static Axis.Set.vertical.getter();
  sub_10000F214(&qword_10052A0D8);
  sub_100013AA8(&qword_10052A0E0, &qword_10052A0D8);
  uint64_t v21 = v33[0];
  ScrollView.init(_:showsIndicators:content:)();
  static ScrollBounceBehavior.basedOnSize.getter();
  unsigned __int8 v22 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v22) {
    Axis.Set.init(rawValue:)();
  }
  sub_100013AA8(&qword_10052A0E8, &qword_10052A0B8);
  uint64_t v23 = v37;
  View.scrollBounceBehavior(_:axes:)();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v21, v40);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v23);
  uint64_t v24 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = v38;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v38);
  uint64_t v27 = (uint64_t *)&v11[*(int *)(v34 + 36)];
  *uint64_t v27 = KeyPath;
  v27[1] = v24;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v26);
  uint64_t v28 = static Alignment.center.getter();
  sub_100227044(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, INFINITY, 0, v28, v29);
  sub_10000FBD8((uint64_t)v11, &qword_100527240);
  sub_10000FB74((uint64_t)v14, (uint64_t)v17, &qword_100527248);
  sub_10000FBD8((uint64_t)v14, &qword_100527248);
  uint64_t v30 = static SafeAreaRegions.all.getter();
  LOBYTE(KeyPath) = static Edge.Set.all.getter();
  swift_release();
  sub_10000FB74((uint64_t)v17, (uint64_t)v19, &qword_10052A0C8);
  uint64_t v31 = &v19[*(int *)(v35 + 36)];
  *(void *)uint64_t v31 = v30;
  v31[8] = KeyPath;
  sub_10000FBD8((uint64_t)v17, &qword_10052A0C8);
  return sub_10000FC34((uint64_t)v19, v41, &qword_10052A0D0);
}

uint64_t sub_10033F9D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = static Alignment.center.getter();
  a3[1] = v6;
  uint64_t v7 = sub_10000F214(&qword_10052A0F0);
  return sub_10033FA2C(a1, a2, (char *)a3 + *(int *)(v7 + 44));
}

uint64_t sub_10033FA2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v45 = a3;
  uint64_t v3 = sub_10000F214(&qword_10052A0F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_10000F214(&qword_10052A100);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v44 = (uint64_t)&v40 - v9;
  uint64_t v10 = sub_10000F214(&qword_100518B60);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v40 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v46 = 0;
  char v47 = 1;
  unsigned __int8 v20 = static Axis.Set.horizontal.getter();
  unsigned __int8 v21 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v20) {
    Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v21) {
    Axis.Set.init(rawValue:)();
  }
  static Alignment.center.getter();
  View.containerRelativeFrame(_:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v16, v10);
  *uint64_t v5 = static Alignment.center.getter();
  v5[1] = v22;
  uint64_t v23 = (char *)v5 + *(int *)(sub_10000F214(&qword_10052A108) + 44);
  *(void *)uint64_t v23 = static HorizontalAlignment.center.getter();
  *((void *)v23 + 1) = 0;
  unsigned char v23[16] = 0;
  uint64_t v24 = sub_10000F214(&qword_10052A110);
  sub_10033FE38(v42, v43, (uint64_t)&v23[*(int *)(v24 + 44)]);
  LOBYTE(v23) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  sub_10000FB74((uint64_t)v5, (uint64_t)v7, &qword_10052A0F8);
  uint64_t v33 = &v7[*(int *)(v41 + 36)];
  *uint64_t v33 = (char)v23;
  *((void *)v33 + 1) = v26;
  *((void *)v33 + 2) = v28;
  *((void *)v33 + 3) = v30;
  *((void *)v33 + 4) = v32;
  v33[40] = 0;
  sub_10000FBD8((uint64_t)v5, &qword_10052A0F8);
  uint64_t v34 = v44;
  sub_10000FC34((uint64_t)v7, v44, &qword_10052A100);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v35(v13, v19, v10);
  sub_10000FB74(v34, (uint64_t)v7, &qword_10052A100);
  uint64_t v36 = v45;
  v35(v45, v13, v10);
  uint64_t v37 = sub_10000F214(&qword_10052A118);
  sub_10000FB74((uint64_t)v7, (uint64_t)&v36[*(int *)(v37 + 48)], &qword_10052A100);
  sub_10000FBD8(v34, &qword_10052A100);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v11 + 8);
  v38(v19, v10);
  sub_10000FBD8((uint64_t)v7, &qword_10052A100);
  return ((uint64_t (*)(char *, uint64_t))v38)(v13, v10);
}

uint64_t sub_10033FE38@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v90 = a3;
  uint64_t v4 = *a2;
  unsigned __int8 v78 = a2;
  uint64_t v79 = v4;
  uint64_t v5 = type metadata accessor for Spring();
  __chkstk_darwin(v5 - 8);
  uint64_t v77 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SmartDialogAnimationSettings();
  __chkstk_darwin(v7 - 8);
  uint64_t v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10052A120);
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  __int8 v80 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000F214(&qword_10052A128);
  __chkstk_darwin(v83);
  __int8 v81 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000F214(&qword_10052A130);
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  unsigned __int8 v88 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v82 = (char *)&v70 - v13;
  __chkstk_darwin(v14);
  __int8 v85 = (char *)&v70 - v15;
  uint64_t v16 = type metadata accessor for OnboardingOverlay();
  uint64_t v74 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v74 + 64);
  __chkstk_darwin(v16);
  uint64_t v75 = (uint64_t)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v72 = (uint64_t)&v70 - v19;
  unsigned __int8 v20 = (int *)type metadata accessor for OnboardingMastheadView();
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = sub_10000F214(&qword_10052A138);
  uint64_t v23 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_10052A140);
  uint64_t v27 = v26 - 8;
  __chkstk_darwin(v26);
  uint64_t v91 = (uint64_t)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v92 = (uint64_t)&v70 - v30;
  *uint64_t v22 = swift_getKeyPath();
  sub_10000F214(&qword_10051BB48);
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = (char *)v22 + v20[5];
  LOBYTE(v95) = 0;
  State.init(wrappedValue:)();
  uint64_t v32 = v94;
  char *v31 = (char)v93;
  *((void *)v31 + 1) = v32;
  uint64_t v33 = (uint64_t *)((char *)v22 + v20[6]);
  uint64_t v95 = 0;
  State.init(wrappedValue:)();
  uint64_t v34 = v94;
  *uint64_t v33 = v93;
  v33[1] = v34;
  uint64_t v35 = (char *)v22 + v20[7];
  LOBYTE(v95) = 0;
  State.init(wrappedValue:)();
  uint64_t v36 = v94;
  *uint64_t v35 = (char)v93;
  *((void *)v35 + 1) = v36;
  uint64_t v71 = a1;
  sub_10000F214(&qword_100519A10);
  AccessibilityFocusState.projectedValue.getter();
  sub_100342A74(&qword_10052A148, (void (*)(uint64_t))type metadata accessor for OnboardingMastheadView);
  View.accessibilityFocused(_:)();
  swift_release();
  swift_release();
  sub_1003420C8((uint64_t)v22);
  uint64_t v37 = v72;
  sub_100342124(a1, v72);
  unint64_t v38 = (*(unsigned __int8 *)(v74 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  uint64_t v39 = swift_allocObject();
  sub_10034218C(v37, v39 + v38);
  uint64_t v40 = v91;
  uint64_t v41 = v73;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v91, v25, v73);
  uint64_t v42 = (uint64_t (**)())(v40 + *(int *)(v27 + 44));
  *uint64_t v42 = sub_1003421F0;
  v42[1] = (uint64_t (*)())v39;
  v42[2] = 0;
  v42[3] = 0;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v41);
  sub_10000FC34(v40, v92, &qword_10052A140);
  Spring.init(response:dampingRatio:)();
  SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
  uint64_t v93 = v78;
  sub_100013AA8(&qword_100518FF0, &qword_100518FE8);
  Publisher.eraseToAnyPublisher()();
  uint64_t v43 = v71;
  sub_100342124(v71, v37);
  uint64_t v44 = swift_allocObject();
  sub_10034218C(v37, v44 + v38);
  uint64_t v45 = v75;
  sub_100342124(v43, v75);
  uint64_t v46 = swift_allocObject();
  sub_10034218C(v45, v46 + v38);
  sub_10000F214(&qword_100527268);
  sub_10000F214(&qword_100527258);
  sub_1003422C4();
  sub_100342364();
  char v47 = v80;
  SmartDialog.init(animationSettings:animationTrigger:header:body:)();
  uint64_t v48 = *(void *)(v43 + 88);
  LOBYTE(v93) = *(unsigned char *)(v43 + 80);
  uint64_t v94 = v48;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if ((_BYTE)v95) {
    double v49 = 1.0;
  }
  else {
    double v49 = 0.0;
  }
  uint64_t v50 = v84;
  uint64_t v51 = (uint64_t)v81;
  uint64_t v52 = v47;
  uint64_t v53 = v47;
  uint64_t v54 = v86;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v52, v86);
  *(double *)(v51 + *(int *)(v83 + 36)) = v49;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v54);
  uint64_t v55 = *(void *)(v43 + 88);
  LOBYTE(v93) = *(unsigned char *)(v43 + 80);
  uint64_t v94 = v55;
  State.wrappedValue.getter();
  LOBYTE(v93) = v95;
  sub_100342404();
  swift_retain();
  uint64_t v56 = v82;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8(v51, &qword_10052A128);
  uint64_t v57 = v87;
  uint64_t v58 = v85;
  uint64_t v59 = v89;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v85, v56, v89);
  uint64_t v61 = v91;
  uint64_t v60 = v92;
  sub_10000FB74(v92, v91, &qword_10052A140);
  uint64_t v62 = v57;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v64 = v88;
  uint64_t v65 = v59;
  v63(v88, v58, v59);
  uint64_t v66 = v90;
  sub_10000FB74(v61, v90, &qword_10052A140);
  uint64_t v67 = sub_10000F214(&qword_10052A180);
  v63((char *)(v66 + *(int *)(v67 + 48)), v64, v65);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v62 + 8);
  v68(v58, v65);
  sub_10000FBD8(v60, &qword_10052A140);
  v68(v64, v65);
  return sub_10000FBD8(v61, &qword_10052A140);
}

uint64_t sub_100340890(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OnboardingOverlay();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v23 - v14;
  sub_10002E8B0();
  uint64_t v23 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  sub_100342124(v24, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  sub_10034218C((uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  aBlock[4] = sub_1003429D0;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = &unk_1004F5060;
  uint64_t v19 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_100342A74((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v20 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v21 = (void *)v23;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v2, v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  v16(v15, v25);
  return swift_release();
}

uint64_t sub_100340CD4()
{
  return swift_release();
}

uint64_t sub_100340D40()
{
  return AccessibilityFocusState.wrappedValue.setter();
}

uint64_t sub_100340DD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_100527260);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4028000000000000;
  v6[16] = 0;
  uint64_t v7 = sub_10000F214(&qword_10052A1D8);
  sub_100340EDC(a1, (uint64_t)&v6[*(int *)(v7 + 44)]);
  uint64_t v8 = static Alignment.center.getter();
  sub_1002270A0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v8, v9);
  return sub_10000FBD8((uint64_t)v6, &qword_100527260);
}

uint64_t sub_100340EDC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v3 = type metadata accessor for Font.Leading();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10052A1E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v83 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v82 = (uint64_t)&v77 - v10;
  __chkstk_darwin(v11);
  __int8 v81 = (char *)&v77 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v77 - v14;
  uint64_t v16 = a1[1];
  if (v16)
  {
    uint64_t v85 = *a1;
    uint64_t v86 = v16;
    sub_1000317A0();
    uint64_t v77 = a1;
    swift_bridgeObjectRetain();
    uint64_t v17 = Text.init<A>(_:)();
    uint64_t v19 = v18;
    char v21 = v20 & 1;
    static Font.title3.getter();
    uint64_t v22 = Text.font(_:)();
    uint64_t v80 = v3;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    unsigned __int8 v78 = v6;
    char v27 = v26;
    uint64_t v79 = v4;
    swift_release();
    char v28 = v27 & 1;
    sub_100012FAC(v17, v19, v21);
    swift_bridgeObjectRelease();
    static Font.Weight.regular.getter();
    uint64_t v29 = Text.fontWeight(_:)();
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    char v35 = v34 & 1;
    sub_100012FAC(v23, v25, v28);
    uint64_t v4 = v79;
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v37 = static Color.white.getter();
    LOBYTE(v19) = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v85 = v29;
    uint64_t v86 = v31;
    char v87 = v35;
    uint64_t v88 = v33;
    uint64_t v89 = KeyPath;
    char v90 = 1;
    uint64_t v91 = v37;
    char v92 = v19;
    uint64_t v93 = v38;
    uint64_t v94 = v39;
    uint64_t v95 = v40;
    uint64_t v96 = v41;
    char v97 = 0;
    sub_10000F214(&qword_10052A1F8);
    sub_100342B1C(&qword_10052A200, &qword_10052A1F8, (void (*)(void))sub_100342794);
    View.accessibilityIdentifier(_:)();
    a1 = v77;
    sub_100012FAC(v29, v31, v35);
    swift_release();
    uint64_t v3 = v80;
    swift_release();
    uint64_t v6 = v78;
    swift_bridgeObjectRelease();
    uint64_t v42 = sub_10000F214(&qword_10052A1E8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v15, 0, 1, v42);
  }
  else
  {
    uint64_t v43 = sub_10000F214(&qword_10052A1E8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v15, 1, 1, v43);
  }
  uint64_t v44 = a1[3];
  if (v44)
  {
    uint64_t v85 = a1[2];
    uint64_t v86 = v44;
    sub_1000317A0();
    swift_bridgeObjectRetain();
    uint64_t v45 = Text.init<A>(_:)();
    uint64_t v47 = v46;
    char v49 = v48 & 1;
    static Font.subheadline.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Font.Leading.tight(_:), v3);
    Font.leading(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v50 = Text.font(_:)();
    uint64_t v52 = v51;
    uint64_t v53 = v15;
    char v55 = v54;
    swift_release();
    sub_100012FAC(v45, v47, v49);
    swift_bridgeObjectRelease();
    static Font.Weight.medium.getter();
    uint64_t v56 = Text.fontWeight(_:)();
    uint64_t v80 = v57;
    uint64_t v79 = v58;
    char v60 = v59 & 1;
    char v61 = v55 & 1;
    uint64_t v15 = v53;
    sub_100012FAC(v50, v52, v61);
    swift_bridgeObjectRelease();
    uint64_t v62 = swift_getKeyPath();
    static Color.white.getter();
    uint64_t v63 = Color.opacity(_:)();
    swift_release();
    LOBYTE(v47) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v64 = v80;
    uint64_t v85 = v56;
    uint64_t v86 = v80;
    char v87 = v60;
    uint64_t v88 = v79;
    uint64_t v89 = v62;
    char v90 = 1;
    uint64_t v91 = v63;
    char v92 = v47;
    uint64_t v93 = v65;
    uint64_t v94 = v66;
    uint64_t v95 = v67;
    uint64_t v96 = v68;
    char v97 = 0;
    sub_10000F214(&qword_10052A1F8);
    sub_100342B1C(&qword_10052A200, &qword_10052A1F8, (void (*)(void))sub_100342794);
    uint64_t v69 = (uint64_t)v81;
    View.accessibilityIdentifier(_:)();
    sub_100012FAC(v56, v64, v60);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v70 = sub_10000F214(&qword_10052A1E8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 0, 1, v70);
  }
  else
  {
    uint64_t v71 = sub_10000F214(&qword_10052A1E8);
    uint64_t v69 = (uint64_t)v81;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v81, 1, 1, v71);
  }
  uint64_t v72 = v82;
  sub_10000FB74((uint64_t)v15, v82, &qword_10052A1E0);
  uint64_t v73 = v83;
  sub_10000FB74(v69, v83, &qword_10052A1E0);
  uint64_t v74 = v84;
  sub_10000FB74(v72, v84, &qword_10052A1E0);
  uint64_t v75 = sub_10000F214(&qword_10052A1F0);
  sub_10000FB74(v73, v74 + *(int *)(v75 + 48), &qword_10052A1E0);
  sub_10000FBD8(v69, &qword_10052A1E0);
  sub_10000FBD8((uint64_t)v15, &qword_10052A1E0);
  sub_10000FBD8(v73, &qword_10052A1E0);
  return sub_10000FBD8(v72, &qword_10052A1E0);
}

uint64_t sub_100341644@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_100527250);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v4 = static HorizontalAlignment.center.getter();
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  uint64_t v5 = sub_10000F214(&qword_10052A188);
  sub_10034174C((uint64_t)&v4[*(int *)(v5 + 44)]);
  uint64_t v6 = static Alignment.center.getter();
  sub_1002270FC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1, v6, v7);
  return sub_10000FBD8((uint64_t)v4, &qword_100527250);
}

uint64_t sub_10034174C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OpacityTransition();
  uint64_t v63 = *(void *)(v2 - 8);
  uint64_t v64 = v2;
  __chkstk_darwin(v2);
  uint64_t v62 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v61 = (char *)&v42 - v5;
  uint64_t v46 = sub_10000F214(&qword_100518CD0);
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000F214(&qword_100518CD8);
  uint64_t v58 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000F214(&qword_10052A190);
  uint64_t v47 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v42 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000F214(&qword_10052A198) - 8;
  __chkstk_darwin(v44);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_10052A1A0) - 8;
  __chkstk_darwin(v45);
  uint64_t v43 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000F214(&qword_10052A1A8);
  __chkstk_darwin(v59);
  uint64_t v48 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10052A1B0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v60 = (uint64_t)&v42 - v19;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v57 = v69;
  int v56 = v70;
  uint64_t v55 = v71;
  int v54 = v72;
  uint64_t v53 = v73;
  uint64_t v52 = v74;
  swift_retain();
  sub_10000F214(&qword_100518CF0);
  sub_10003199C((unint64_t *)&qword_100518CF8, &qword_100518CF0, &qword_100518D00, &qword_100523200);
  char v20 = v7;
  Button.init(action:label:)();
  uint64_t v21 = sub_100013AA8(&qword_100518D08, &qword_100518CD0);
  unint64_t v22 = sub_1000137D4();
  uint64_t v23 = v9;
  uint64_t v24 = v46;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v24);
  uint64_t v65 = v24;
  uint64_t v66 = &type metadata for OnboardingProminentButtonStyle;
  uint64_t v67 = v21;
  unint64_t v68 = v22;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v42;
  uint64_t v26 = v50;
  View.smartDialogAnimatable()();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v23, v26);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = v47;
  uint64_t v29 = v51;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v12, v25, v51);
  uint64_t v30 = &v12[*(int *)(v44 + 44)];
  *(void *)uint64_t v30 = KeyPath;
  v30[8] = 0;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v29);
  LODWORD(KeyPath) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v31 = v43;
  sub_10000FB74((uint64_t)v12, v43, &qword_10052A198);
  *(_DWORD *)(v31 + *(int *)(v45 + 44)) = KeyPath;
  sub_10000FBD8((uint64_t)v12, &qword_10052A198);
  uint64_t v32 = v61;
  OpacityTransition.init()();
  uint64_t v33 = v63;
  uint64_t v34 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v62, v32, v64);
  sub_100342A74(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v35 = v34;
  uint64_t v36 = AnyTransition.init<A>(_:)();
  uint64_t v37 = v48;
  sub_10000FB74(v31, v48, &qword_10052A1A0);
  *(void *)(v37 + *(int *)(v59 + 36)) = v36;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
  sub_10000FBD8(v31, &qword_10052A1A0);
  sub_1003424FC();
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v37, &qword_10052A1A8);
  uint64_t v38 = v60;
  sub_10000FC34((uint64_t)v17, v60, &qword_10052A1B0);
  sub_10000FB74(v38, (uint64_t)v17, &qword_10052A1B0);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v57;
  *(unsigned char *)(a1 + 24) = v56;
  *(void *)(a1 + 32) = v55;
  *(unsigned char *)(a1 + 40) = v54;
  uint64_t v39 = v52;
  *(void *)(a1 + 48) = v53;
  *(void *)(a1 + 56) = v39;
  uint64_t v40 = sub_10000F214(&qword_10052A1D0);
  sub_10000FB74((uint64_t)v17, a1 + *(int *)(v40 + 48), &qword_10052A1B0);
  sub_10000FBD8(v38, &qword_10052A1B0);
  return sub_10000FBD8((uint64_t)v17, &qword_10052A1B0);
}

uint64_t sub_100341F58@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title3.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_100012FAC(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v12 = Text.fontWeight(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  sub_100012FAC(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(unsigned char *)(a1 + 16) = v16 & 1;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1003420B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10033F9D4(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1003420C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OnboardingMastheadView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100342124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnboardingOverlay();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10034218C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnboardingOverlay();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003421F0()
{
  return sub_1003429E8(sub_100340890);
}

uint64_t sub_10034220C()
{
  return sub_100342240((uint64_t (*)(uint64_t))sub_100340DD8);
}

uint64_t sub_100342228()
{
  return sub_100342240((uint64_t (*)(uint64_t))sub_100341644);
}

uint64_t sub_100342240(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for OnboardingOverlay() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

unint64_t sub_1003422C4()
{
  unint64_t result = qword_10052A150;
  if (!qword_10052A150)
  {
    sub_10000F69C(&qword_100527268);
    sub_100013AA8(&qword_10052A158, &qword_100527260);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A150);
  }
  return result;
}

unint64_t sub_100342364()
{
  unint64_t result = qword_10052A160;
  if (!qword_10052A160)
  {
    sub_10000F69C(&qword_100527258);
    sub_100013AA8(&qword_10052A168, &qword_100527250);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A160);
  }
  return result;
}

unint64_t sub_100342404()
{
  unint64_t result = qword_10052A170;
  if (!qword_10052A170)
  {
    sub_10000F69C(&qword_10052A128);
    sub_100013AA8(&qword_10052A178, &qword_10052A120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A170);
  }
  return result;
}

uint64_t sub_1003424A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isSmartDialog.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1003424D4()
{
  return EnvironmentValues.isSmartDialog.setter();
}

unint64_t sub_1003424FC()
{
  unint64_t result = qword_10052A1B8;
  if (!qword_10052A1B8)
  {
    sub_10000F69C(&qword_10052A1A8);
    sub_10034259C();
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A1B8);
  }
  return result;
}

unint64_t sub_10034259C()
{
  unint64_t result = qword_10052A1C0;
  if (!qword_10052A1C0)
  {
    sub_10000F69C(&qword_10052A1A0);
    sub_10034263C();
    sub_100013AA8(&qword_100518D20, &qword_100518D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A1C0);
  }
  return result;
}

unint64_t sub_10034263C()
{
  unint64_t result = qword_10052A1C8;
  if (!qword_10052A1C8)
  {
    sub_10000F69C(&qword_10052A198);
    sub_10000F69C(&qword_100518CD8);
    sub_10000F69C(&qword_100518CD0);
    sub_100013AA8(&qword_100518D08, &qword_100518CD0);
    sub_1000137D4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A1C8);
  }
  return result;
}

unint64_t sub_100342794()
{
  unint64_t result = qword_10052A208;
  if (!qword_10052A208)
  {
    sub_10000F69C(&qword_10052A210);
    sub_10003199C((unint64_t *)&qword_100519C38, &qword_100519C40, &qword_100518C38, &qword_100518C40);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A208);
  }
  return result;
}

uint64_t sub_100342858()
{
  uint64_t v1 = (int *)(type metadata accessor for OnboardingOverlay() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[12];
  uint64_t v4 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003429D0()
{
  return sub_1003429E8((uint64_t (*)(uint64_t))sub_100340CD4);
}

uint64_t sub_1003429E8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for OnboardingOverlay() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_100342A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100342A6C()
{
  return swift_release();
}

uint64_t sub_100342A74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100342ABC()
{
  return sub_100340D40();
}

uint64_t sub_100342AD8()
{
  return sub_100342B1C(&qword_10052A218, &qword_10052A0D0, (void (*)(void))sub_100342B98);
}

uint64_t sub_100342B1C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100342B98()
{
  unint64_t result = qword_10052A220;
  if (!qword_10052A220)
  {
    sub_10000F69C(&qword_10052A0C8);
    sub_100342B1C(&qword_10052A228, &qword_100527248, (void (*)(void))sub_100342C40);
    sub_100013F50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A220);
  }
  return result;
}

unint64_t sub_100342C40()
{
  unint64_t result = qword_10052A230;
  if (!qword_10052A230)
  {
    sub_10000F69C(&qword_100527240);
    sub_10000F69C(&qword_10052A0B8);
    sub_100013AA8(&qword_10052A0E8, &qword_10052A0B8);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A230);
  }
  return result;
}

ValueMetadata *type metadata accessor for Blur()
{
  return &type metadata for Blur;
}

unint64_t sub_100342D58()
{
  unint64_t result = qword_10052A238;
  if (!qword_10052A238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A238);
  }
  return result;
}

uint64_t sub_100342DB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100342DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100342F58();

  return static AnimatableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_100342E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100342F58();

  return static AnimatableModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_100342EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = sub_10000F214(&qword_10052A240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  uint64_t result = sub_10000F214(&qword_10052A248);
  uint64_t v8 = a2 + *(int *)(result + 36);
  *(void *)uint64_t v8 = v5;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

unint64_t sub_100342F58()
{
  unint64_t result = qword_10052A250;
  if (!qword_10052A250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A250);
  }
  return result;
}

uint64_t sub_100342FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[1] = a1;
  uint64_t v27 = a2;
  uint64_t v25 = sub_10000F214(&qword_10052A270);
  uint64_t v3 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_10052A278);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_10052A280);
  uint64_t v8 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v28 = *(void *)v2;
  uint64_t v11 = swift_allocObject();
  long long v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(v2 + 32);
  *(void *)(v11 + 64) = *(void *)(v2 + 48);
  sub_100343C28(v2);
  sub_10000F214(&qword_10052A288);
  sub_100013AA8(&qword_10052A290, &qword_10052A288);
  sub_100343C60();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  long long v28 = *(_OWORD *)(v2 + 40);
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.getter();
  uint64_t v13 = v29;
  uint64_t v14 = v25;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v5, v25);
  char v15 = &v7[*(int *)(v24 + 36)];
  *(void *)char v15 = 0;
  *((void *)v15 + 1) = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v14);
  *(void *)&long long v28 = *(void *)(v2 + 8);
  uint64_t v16 = swift_allocObject();
  long long v17 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v16 + 32) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(v2 + 32);
  *(void *)(v16 + 64) = *(void *)(v2 + 48);
  sub_100343C28(v2);
  sub_100343CF8();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100343DE8((uint64_t)v7);
  long long v28 = *(_OWORD *)(v2 + 24);
  State.wrappedValue.getter();
  uint64_t v18 = v29;
  uint64_t v20 = v26;
  uint64_t v19 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v27, v10, v26);
  uint64_t v21 = (void *)(v19 + *(int *)(sub_10000F214(&qword_10052A2A8) + 36));
  void *v21 = v18;
  v21[1] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v20);
}

uint64_t sub_100343398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  v25[1] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  __chkstk_darwin(v10);
  long long v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v27 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v25 - v18;
  sub_10002E8B0();
  uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v16, v13);
  uint64_t v21 = swift_allocObject();
  long long v22 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v21 + 32) = v22;
  *(_OWORD *)(v21 + 48) = *(_OWORD *)(a3 + 32);
  *(void *)(v21 + 64) = *(void *)(a3 + 48);
  aBlock[4] = v28;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002EDB98;
  aBlock[3] = v29;
  uint64_t v23 = _Block_copy(aBlock);
  sub_100343C28(a3);
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_100064C3C();
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  v26(v19, v27);
  return swift_release();
}

uint64_t sub_100343724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100342FAC(a1, a2);
}

uint64_t sub_100343768()
{
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  sub_1003438A0();
  uint64_t v0 = static AnyTransition.modifier<A>(active:identity:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

unint64_t sub_1003438A0()
{
  unint64_t result = qword_10052A258;
  if (!qword_10052A258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A258);
  }
  return result;
}

uint64_t destroy for OffsetModifier()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for OffsetModifier(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OffsetModifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OffsetModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OffsetModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OffsetModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OffsetModifier()
{
  return &type metadata for OffsetModifier;
}

unint64_t sub_100343B28()
{
  unint64_t result = qword_10052A260;
  if (!qword_10052A260)
  {
    sub_10000F69C(&qword_10052A248);
    sub_100013AA8(&qword_10052A268, &qword_10052A240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A260);
  }
  return result;
}

uint64_t sub_100343BC8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100343BE8(uint64_t a1, uint64_t a2)
{
  return sub_100343398(a1, a2, v2 + 16, (uint64_t)&unk_1004F51F0, (uint64_t)sub_100343F34, (uint64_t)&unk_1004F5208);
}

uint64_t sub_100343C28(uint64_t a1)
{
  return a1;
}

unint64_t sub_100343C60()
{
  unint64_t result = qword_10052A298;
  if (!qword_10052A298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A298);
  }
  return result;
}

uint64_t sub_100343CB8(uint64_t a1, uint64_t a2)
{
  return sub_100343398(a1, a2, v2 + 16, (uint64_t)&unk_1004F51A0, (uint64_t)sub_100343E4C, (uint64_t)&unk_1004F51B8);
}

unint64_t sub_100343CF8()
{
  unint64_t result = qword_10052A2A0;
  if (!qword_10052A2A0)
  {
    sub_10000F69C(&qword_10052A278);
    sub_10000F69C(&qword_10052A288);
    sub_100013AA8(&qword_10052A290, &qword_10052A288);
    sub_100343C60();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A2A0);
  }
  return result;
}

uint64_t sub_100343DE8(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052A278);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100343E4C()
{
  return sub_1002745F4();
}

uint64_t sub_100343E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100343E8C()
{
  return swift_release();
}

uint64_t sub_100343E94()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100343EF4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100343F34()
{
  return sub_1002745F4();
}

uint64_t sub_100343F64()
{
  return State.wrappedValue.setter();
}

unint64_t sub_100343FC4()
{
  unint64_t result = qword_10052A2B0;
  if (!qword_10052A2B0)
  {
    sub_10000F69C(&qword_10052A2A8);
    sub_10000F69C(&qword_10052A278);
    sub_100343CF8();
    sub_100343C60();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A2B0);
  }
  return result;
}

uint64_t sub_100344098(uint64_t a1, uint64_t a2)
{
  v2[34] = a1;
  v2[35] = a2;
  unint64_t v3 = (void *)swift_task_alloc();
  v2[36] = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_100344140;
  return _swift_task_switch(sub_100344870, 0, 0);
}

uint64_t sub_100344140(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 296) = a1;
  swift_task_dealloc();
  if (v1)
  {
    int v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100344274, 0, 0);
  }
}

uint64_t sub_100344274()
{
  uint64_t v1 = (void *)v0[37];
  uint64_t v3 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v4 = swift_allocObject();
  v0[38] = v4;
  *(unsigned char *)(v4 + 16) = 0;
  id v5 = [self sharedPhotoLibrary];
  v0[39] = v5;
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v2;
  v6[4] = v1;
  v6[5] = v4;
  v0[24] = sub_1003453B8;
  v0[25] = v6;
  v0[20] = _NSConcreteStackBlock;
  v0[21] = 1107296256;
  v0[22] = sub_1002EDB98;
  v0[23] = &unk_1004F5280;
  uint64_t v7 = _Block_copy(v0 + 20);
  v0[40] = v7;
  swift_retain();
  id v8 = v1;
  swift_retain();
  swift_release();
  v0[2] = v0;
  v0[3] = sub_100344470;
  uint64_t v9 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_100345078;
  v0[29] = &unk_1004F52A8;
  v0[30] = v9;
  [v5 performChanges:v7 completionHandler:v0 + 26];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100344470()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 328) = v1;
  if (v1) {
    uint64_t v2 = sub_100344760;
  }
  else {
    uint64_t v2 = sub_100344580;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100344580()
{
  uint64_t v1 = *(const void **)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 304);

  _Block_release(v1);
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    uint64_t v3 = *(void **)(v0 + 296);
    sub_10000F214((uint64_t *)&unk_10051FB50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000003FLL;
    *(void *)(inited + 56) = 0x800000010042BCE0;
    sub_10031BC4C(inited);
    id v6 = objc_allocWithZone((Class)NSError);
    NSString v7 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v6 initWithDomain:v7 code:2 userInfo:isa];

    swift_willThrow();
    swift_release();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 296);
    swift_release();
  }
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100344760()
{
  uint64_t v1 = (const void *)v0[40];
  uint64_t v2 = (void *)v0[39];
  uint64_t v3 = (void *)v0[37];
  swift_willThrow();

  _Block_release(v1);
  swift_release();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

id sub_1003447F4()
{
  uint64_t v0 = self;
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v4 = [v0 creationRequestForAssetFromVideoAtFileURL:v2];

  return v4;
}

uint64_t sub_100344854()
{
  return _swift_task_switch(sub_100344870, 0, 0);
}

uint64_t sub_100344870()
{
  if (sub_1003451D4())
  {
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    v0[34] = v3;
    *(void *)(v3 + 16) = 0;
    id v4 = [self sharedPhotoLibrary];
    v0[35] = v4;
    v0[24] = sub_100345414;
    v0[25] = v3;
    v0[20] = _NSConcreteStackBlock;
    v0[21] = 1107296256;
    v0[22] = sub_1002EDB98;
    v0[23] = &unk_1004F52E8;
    uint64_t v5 = _Block_copy(v0 + 20);
    v0[36] = v5;
    swift_retain();
    swift_release();
    v0[2] = v0;
    v0[3] = sub_100344A74;
    uint64_t v6 = swift_continuation_init();
    v0[26] = _NSConcreteStackBlock;
    v0[27] = 0x40000000;
    v0[28] = sub_100345078;
    v0[29] = &unk_1004F5310;
    v0[30] = v6;
    [v4 performChanges:v5 completionHandler:v0 + 26];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100344A74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 296) = v1;
  if (v1) {
    uint64_t v2 = sub_100344E64;
  }
  else {
    uint64_t v2 = sub_100344B84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100344B84()
{
  uint64_t v1 = *(const void **)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 272);

  _Block_release(v1);
  sub_10000F214(&qword_10051F3E0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10043D4F0;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void **)(v2 + 16);
  if (v5)
  {
    uint64_t v6 = self;
    id v7 = [v5 localIdentifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(v3 + 32) = v8;
    *(void *)(v3 + 40) = v10;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [v6 fetchAssetCollectionsWithLocalIdentifiers:isa options:0];

    id v13 = [v12 firstObject];
    if (v13)
    {
      id v14 = v13;

      swift_release();
      uint64_t v15 = *(uint64_t (**)(id))(v0 + 8);
      return v15(v14);
    }
    else
    {
      sub_10000F214((uint64_t *)&unk_10051FB50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v17;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = 0xD00000000000002BLL;
      *(void *)(inited + 56) = 0x800000010042BD20;
      sub_10031BC4C(inited);
      id v18 = objc_allocWithZone((Class)NSError);
      NSString v19 = String._bridgeToObjectiveC()();
      Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v18 initWithDomain:v19 code:1 userInfo:v20];

      swift_willThrow();
      swift_release();
      uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100344E64()
{
  uint64_t v1 = (const void *)v0[36];
  uint64_t v2 = (void *)v0[35];
  swift_willThrow();

  _Block_release(v1);
  swift_release();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_100344EF0(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)a1();
  if (!v6) {
    goto LABEL_10;
  }
  id v7 = v6;
  id v8 = [v6 placeholderForCreatedAsset];
  if (!v8)
  {
    uint64_t v9 = v7;
LABEL_9:

LABEL_10:
    swift_beginAccess();
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  uint64_t v9 = v8;
  id v10 = [self changeRequestForAssetCollection:a3];
  if (!v10)
  {

    goto LABEL_9;
  }
  uint64_t v11 = v10;
  sub_10000F214(&qword_100521040);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100440690;
  *(void *)(v12 + 32) = v9;
  specialized Array._endMutation()();
  sub_10000F734(0, &qword_10052A2D8);
  id v13 = v9;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 addAssets:isa];
}

uint64_t sub_100345078(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    a1 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(a1);
  }
  if (!a3)
  {
    __break(1u);
    return _swift_continuation_throwingResume(a1);
  }
  sub_10000F214(&qword_10051F3B0);
  uint64_t v5 = swift_allocError();
  void *v6 = a3;
  id v7 = a3;

  return _swift_continuation_throwingResumeWithError(v3, v5);
}

void sub_100345118(uint64_t a1)
{
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 creationRequestForAssetCollectionWithTitle:v3];

  id v5 = [v4 placeholderForCreatedAssetCollection];
  swift_beginAccess();
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;
}

id sub_1003451D4()
{
  id v0 = [objc_allocWithZone((Class)PHFetchOptions) init];
  sub_10000F734(0, &qword_10052A2B8);
  sub_10000F214(&qword_10051F350);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10043D4F0;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_10034530C();
  *(void *)(v1 + 32) = 2494275568;
  *(void *)(v1 + 40) = 0xA400000000000000;
  uint64_t v2 = NSPredicate.init(format:_:)();
  [v0 setPredicate:v2];

  id v3 = [self fetchAssetCollectionsWithType:1 subtype:0x7FFFFFFFFFFFFFFFLL options:v0];
  id v4 = [v3 firstObject];

  return v4;
}

unint64_t sub_10034530C()
{
  unint64_t result = qword_10052A2C0;
  if (!qword_10052A2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10052A2C0);
  }
  return result;
}

uint64_t sub_100345360()
{
  return swift_deallocObject();
}

uint64_t sub_100345370()
{
  swift_release();

  swift_release();

  return swift_deallocObject();
}

void sub_1003453B8()
{
  sub_100344EF0(*(uint64_t (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1003453C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003453D4()
{
  return swift_release();
}

uint64_t sub_1003453DC()
{
  return swift_deallocObject();
}

void sub_100345414()
{
  sub_100345118(v0);
}

const char *sub_100345424()
{
  return "Tamale";
}

const char *sub_100345438()
{
  unint64_t result = "CameraInterface";
  switch(*v0)
  {
    case 1:
      unint64_t result = "AskAcme";
      break;
    case 2:
      unint64_t result = "ImageSearch";
      break;
    case 3:
      unint64_t result = "DeveloperMode";
      break;
    case 4:
      unint64_t result = "ConfigurationMenu";
      break;
    case 5:
      unint64_t result = "RecordingOnly";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003454DC(uint64_t a1)
{
  return sub_100345590(a1, 0, &byte_10055E430);
}

uint64_t sub_1003454EC(uint64_t a1)
{
  return sub_100345590(a1, 1, &byte_10055E431);
}

uint64_t sub_1003454FC(uint64_t a1)
{
  return sub_100345590(a1, 2, &byte_10055E432);
}

uint64_t sub_10034550C(uint64_t a1)
{
  return sub_100345590(a1, 3, &byte_10055E433);
}

unint64_t sub_10034551C()
{
  unint64_t result = qword_10052A2E0;
  if (!qword_10052A2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A2E0);
  }
  return result;
}

uint64_t sub_100345570(uint64_t a1)
{
  return sub_100345590(a1, 4, &byte_10055E434);
}

uint64_t sub_100345580(uint64_t a1)
{
  return sub_100345590(a1, 5, &byte_10055E435);
}

uint64_t sub_100345590(uint64_t a1, char a2, unsigned char *a3)
{
  id v8 = &type metadata for TamaleFeatureFlagsKey;
  unint64_t v9 = sub_10034551C();
  v7[0] = a2;
  char v5 = isFeatureEnabled(_:)();
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v7);
  *a3 = v5 & 1;
  return result;
}

unsigned char *storeEnumTagSinglePayload for TamaleFeatureFlagsKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003456BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TamaleFeatureFlagsKey()
{
  return &type metadata for TamaleFeatureFlagsKey;
}

unint64_t sub_1003456F8()
{
  unint64_t result = qword_10052A2E8[0];
  if (!qword_10052A2E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10052A2E8);
  }
  return result;
}

void sub_100345750()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Logger();
    if (v1 <= 0x3F)
    {
      sub_100056294(319, &qword_10052A370, &qword_10052A378);
      if (v2 <= 0x3F)
      {
        sub_100056294(319, &qword_10052A380, (uint64_t *)&unk_100528AB0);
        if (v3 <= 0x3F) {
          swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_1003458DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return _swift_task_switch(sub_1003458FC, 0, 0);
}

uint64_t sub_1003458FC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = *(void *)(v0 + 104);
  int v3 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for CameraControllerConfiguration(0) + 44));
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      if (v3 == 1)
      {
        uint64_t v4 = v2 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v5 = &qword_100526528;
LABEL_9:
        *(void *)(v0 + 80) = sub_10000F214(v5);
        *(void *)(v0 + 88) = &off_1004F5500;
        *(void *)(v0 + 56) = v4;
        goto LABEL_10;
      }
    }
    else if (v3 == 2)
    {
      uint64_t v4 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v5 = &qword_100526518;
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v2;
LABEL_10:
    sub_1000321A8((long long *)(v0 + 56), v0 + 16);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    sub_10000F3B0((void *)(v0 + 16), v6);
    id v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 24) + **(int **)(v7 + 24));
    swift_retain();
    id v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v8;
    *id v8 = v0;
    v8[1] = sub_100345B1C;
    uint64_t v9 = *(void *)(v0 + 96);
    return v13(v9, v6, v7);
  }
  sub_10010C570();
  swift_allocError();
  *uint64_t v11 = 0;
  v11[1] = 0;
  swift_willThrow();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100345B1C()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_100345C94;
  }
  else {
    unint64_t v2 = sub_100345C30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100345C30()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100345C94()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100345CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return _swift_task_switch(sub_100345D1C, 0, 0);
}

uint64_t sub_100345D1C()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 40) + **(int **)(v6 + 40));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100345EB4;
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  return v12(v10, v8, v9, v5, v6);
}

uint64_t sub_100345EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100346050;
  }
  else
  {
    *(void *)(v6 + 144) = a2;
    *(void *)(v6 + 152) = a1;
    uint64_t v7 = sub_100345FE8;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100345FE8()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  unint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  return v1(v2, v3);
}

uint64_t sub_100346050()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003460B4(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(v3 + 136) = a2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = a3;
  return _swift_task_switch(sub_1003460D8, 0, 0);
}

uint64_t sub_1003460D8()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 32) + **(int **)(v6 + 32));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10027BD50;
  uint64_t v8 = *(unsigned int *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 96);
  return v11(v9, v8, v5, v6);
}

uint64_t sub_100346270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return _swift_task_switch(sub_100346294, 0, 0);
}

uint64_t sub_100346294()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 48) + **(int **)(v6 + 48));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10034642C;
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  return v12(v10, v8, v9, v5, v6);
}

uint64_t sub_10034642C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100346050;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    uint64_t v5 = sub_100346554;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100346554()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  return v1(v2);
}

uint64_t sub_1003465BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return _swift_task_switch(sub_1003465E0, 0, 0);
}

uint64_t sub_1003465E0()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 56) + **(int **)(v6 + 56));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100346778;
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v10 = *(void *)(v0 + 96);
  return v12(v10, v8, v9, v5, v6);
}

uint64_t sub_100346778(uint64_t a1, int a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100346050;
  }
  else
  {
    *(_DWORD *)(v6 + 152) = a2;
    *(void *)(v6 + 144) = a1;
    uint64_t v7 = sub_1003468B0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1003468B0()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  unint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(unsigned int *)(v0 + 152);
  return v1(v2, v3);
}

uint64_t sub_10034691C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return _swift_task_switch(sub_10034693C, 0, 0);
}

uint64_t sub_10034693C()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 72) + **(int **)(v6 + 72));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100346AD0;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_100346AD0()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10027BAF0;
  }
  else {
    unint64_t v2 = sub_100345C30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100346BE4(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 120) = a2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = a3;
  return _swift_task_switch(sub_100346C08, 0, 0);
}

uint64_t sub_100346C08()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  uint64_t v5 = *(unsigned char *)(v0 + 120) & 1;
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v6);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 80) + **(int **)(v7 + 80));
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100346DB0;
  uint64_t v9 = *(void *)(v0 + 96);
  return v11(v9, v5, v6, v7);
}

uint64_t sub_100346DB0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100346EAC, 0, 0);
}

uint64_t sub_100346EAC()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100346F0C(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return _swift_task_switch(sub_100346F2C, 0, 0);
}

uint64_t sub_100346F2C()
{
  unint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 88) + **(int **)(v6 + 88));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003470B8;
  return v9(v5, v6);
}

uint64_t sub_1003470B8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100346EAC, 0, 0);
}

uint64_t sub_1003471B4(char a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a2;
  *(unsigned char *)(v2 + 112) = a1;
  return _swift_task_switch(sub_1003471D8, 0, 0);
}

uint64_t sub_1003471D8()
{
  unint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 96) + **(int **)(v6 + 96));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003470B8;
  uint64_t v8 = *(unsigned __int8 *)(v0 + 112);
  return v10(v8, v5, v6);
}

uint64_t sub_10034736C(char a1, uint64_t a2)
{
  *(void *)(v2 + 96) = a2;
  *(unsigned char *)(v2 + 112) = a1;
  return _swift_task_switch(sub_100347390, 0, 0);
}

uint64_t sub_100347390()
{
  unint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 104) + **(int **)(v6 + 104));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100347524;
  uint64_t v8 = *(unsigned __int8 *)(v0 + 112);
  return v10(v8, v5, v6);
}

uint64_t sub_100347524()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034F534, 0, 0);
}

uint64_t sub_100347620(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v3;
  return _swift_task_switch(sub_100347644, 0, 0);
}

uint64_t sub_100347644()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003477D8;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_1003477D8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034F534, 0, 0);
}

uint64_t sub_1003478D4(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v3;
  return _swift_task_switch(sub_1003478F8, 0, 0);
}

uint64_t sub_1003478F8()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 16) + **(int **)(v6 + 16));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003477D8;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_100347A8C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  v5[12] = a1;
  v5[13] = v4;
  return _swift_task_switch(sub_1003458FC, 0, 0);
}

uint64_t sub_100347B3C(uint64_t a1, int a2)
{
  *(_DWORD *)(v3 + 136) = a2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v4;
  return _swift_task_switch(sub_1003460D8, 0, 0);
}

uint64_t sub_100347B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_100139DD8;
  v9[14] = a2;
  v9[15] = a3;
  v9[12] = a1;
  v9[13] = v8;
  return _swift_task_switch(sub_100345D1C, 0, 0);
}

uint64_t sub_100347C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10020EA98;
  v9[14] = a2;
  v9[15] = a3;
  v9[12] = a1;
  v9[13] = v8;
  return _swift_task_switch(sub_100346294, 0, 0);
}

uint64_t sub_100347CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_100139DD8;
  v9[14] = a2;
  v9[15] = a3;
  v9[12] = a1;
  v9[13] = v8;
  return _swift_task_switch(sub_1003465E0, 0, 0);
}

uint64_t sub_100347DB0(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v3;
  return _swift_task_switch(sub_100347DD4, 0, 0);
}

uint64_t sub_100347DD4()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 64) + **(int **)(v6 + 64));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003477D8;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_100347F68(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v3;
  return _swift_task_switch(sub_10034693C, 0, 0);
}

uint64_t sub_100347F8C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 120) = a2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v4;
  return _swift_task_switch(sub_100347FB4, 0, 0);
}

uint64_t sub_100347FB4()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  uint64_t v5 = *(unsigned char *)(v0 + 120) & 1;
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v6);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 80) + **(int **)(v7 + 80));
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1003477D8;
  uint64_t v9 = *(void *)(v0 + 96);
  return v11(v9, v5, v6, v7);
}

uint64_t sub_10034815C()
{
  *(void *)(v1 + 96) = *v0;
  return _swift_task_switch(sub_100348180, 0, 0);
}

uint64_t sub_100348180()
{
  unint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 88) + **(int **)(v6 + 88));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100347524;
  return v9(v5, v6);
}

uint64_t sub_10034830C(char a1)
{
  *(unsigned char *)(v2 + 112) = a1;
  *(void *)(v2 + 96) = *v1;
  return _swift_task_switch(sub_1003471D8, 0, 0);
}

uint64_t sub_100348334(char a1)
{
  *(unsigned char *)(v2 + 112) = a1;
  *(void *)(v2 + 96) = *v1;
  return _swift_task_switch(sub_100347390, 0, 0);
}

uint64_t sub_10034835C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v52 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v53 = (uint64_t)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v49 - v12;
  uint64_t v14 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  uint64_t v17 = v3 + *(void *)(*(void *)v3 + 152);
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10000F378(v18, (uint64_t)qword_10055E190);
  Class v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  v49[1] = v17;
  v20(v17, v19, v18);
  uint64_t v21 = v3 + *(void *)(*(void *)v3 + 160);
  uint64_t v22 = sub_10000F214(&qword_10052A378);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3 + *(void *)(*(void *)v3 + 168), 1, 1, v6);
  sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for SimulatorCameraSource(0);
  swift_allocObject();
  id v51 = a2;
  *(void *)(v3 + 24) = sub_1002EE3F8((uint64_t)v16, (uint64_t)v51);
  int v23 = *(unsigned __int8 *)(a1 + 28);
  sub_10000FB74(a1 + v14[18], (uint64_t)v13, &qword_10051E070);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v49[2] = v25 + 48;
  uint64_t v50 = v26;
  BOOL v27 = v26((uint64_t)v13, 1, v24) != 1;
  sub_10000FBD8((uint64_t)v13, &qword_10051E070);
  unint64_t v28 = sub_1001C86F0(v27, v23);
  unint64_t v29 = v23 == 1;
  uint64_t v30 = (float *)(a1 + v14[13]);
  float v31 = *v30;
  float v32 = v30[1];
  uint64_t v33 = *(void *)(v3 + 24);
  uint64_t v34 = sub_1002EE774();
  if (v34) {
    uint64_t v35 = &off_1004F31F0;
  }
  else {
    uint64_t v35 = 0;
  }
  type metadata accessor for TrackManager(0);
  swift_allocObject();
  uint64_t v36 = sub_1003A7DFC(v34, (uint64_t)v35, v31, v32);
  *(void *)(v3 + 48) = v36;
  type metadata accessor for CVCoordinator(0);
  swift_allocObject();
  swift_retain();
  uint64_t v37 = sub_1001CB4B4(v28, v29, 1, v36);
  *(void *)(v3 + 32) = v37;
  sub_1002F72CC(v37, v33);
  id v38 = [objc_allocWithZone((Class)type metadata accessor for StreamingMetadataProcessor()) init];
  sub_10034E390((uint64_t)v38, v37);
  if (qword_100517F58 != -1) {
    swift_once();
  }
  uint64_t v39 = (uint64_t)v52;
  if (byte_10055E408 == 1)
  {
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Recording only supported for ARCameraSource", v42, 2u);
      swift_slowDealloc();
    }
  }
  sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for PreviewLayer(0);
  swift_allocObject();
  uint64_t v43 = sub_100301AD4((uint64_t)v16);
  *(void *)(v3 + 40) = v43;
  if (*(unsigned char *)(a1 + v14[20]) == 1)
  {
    uint64_t v44 = *(void *)(v3 + 32);
    sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
    swift_retain();
    swift_retain();
    sub_1003AB8B0();
    swift_release();
    type metadata accessor for DebugPreviewLayer(0);
    swift_allocObject();
    *(void *)(v44 + 24) = sub_100303138((uint64_t)v16, v39);
    *(void *)(v44 + 32) = &off_1004F3C00;
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v43 = *(void *)(v3 + 40);
  }
  sub_1002F7448(v43, *(void *)(v3 + 24));
  float v45 = *(float *)(a1 + 24);
  swift_retain();
  sub_1003AB8B0();
  swift_release();
  type metadata accessor for BundleManager();
  swift_allocObject();
  *(void *)(v3 + 16) = sub_1001A3F10(v39, v45);
  uint64_t v46 = v53;
  sub_10000FB74(a1 + v14[10], v53, &qword_10051E070);
  int v47 = v50(v46, 1, v24);
  sub_10000FBD8(v46, &qword_10051E070);
  if (v47 != 1 && (*(unsigned char *)(v3 + 56) & 1) == 0)
  {
    if (qword_100517D88 != -1) {
      swift_once();
    }
    sub_1002F75C4(qword_10055E098, *(void *)(v3 + 24));
    *(unsigned char *)(v3 + 56) = 1;
  }

  sub_10034F244(a1, type metadata accessor for CameraControllerConfiguration);
  return v3;
}

uint64_t sub_100348A8C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v53 = (uint64_t)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v48 - v12;
  uint64_t v14 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  uint64_t v17 = v3 + *(void *)(*(void *)v3 + 152);
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10000F378(v18, (uint64_t)qword_10055E190);
  Class v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  v48[1] = v17;
  v20(v17, v19, v18);
  uint64_t v21 = v3 + *(void *)(*(void *)v3 + 160);
  uint64_t v22 = sub_10000F214(&qword_10052A378);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3 + *(void *)(*(void *)v3 + 168), 1, 1, v6);
  sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  id v23 = objc_allocWithZone((Class)type metadata accessor for AVCameraSource());
  id v24 = a2;
  id v25 = sub_10010C748((uint64_t)v16, v24);
  id v52 = v24;

  *(void *)(v3 + 24) = v25;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 28);
  sub_10000FB74(a1 + v14[18], (uint64_t)v13, &qword_10051E070);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  uint64_t v50 = v27 + 48;
  id v51 = v28;
  LODWORD(v24) = v28((uint64_t)v13, 1, v26) != 1;
  sub_10000FBD8((uint64_t)v13, &qword_10051E070);
  unint64_t v29 = sub_1001C86F0((int)v24, v25);
  unint64_t v30 = v25 == 1;
  float v31 = (float *)(a1 + v14[13]);
  float v32 = *v31;
  float v33 = v31[1];
  type metadata accessor for TrackManager(0);
  swift_allocObject();
  uint64_t v34 = sub_1003A7DFC(0, 0, v32, v33);
  *(void *)(v3 + 48) = v34;
  type metadata accessor for CVCoordinator(0);
  swift_allocObject();
  swift_retain();
  uint64_t v35 = sub_1001CB4B4(v29, v30, 1, v34);
  *(void *)(v3 + 32) = v35;
  sub_10034E6AC(v35, 0, *(char **)(v3 + 24));
  id v36 = [objc_allocWithZone((Class)type metadata accessor for StreamingMetadataProcessor()) init];
  sub_100109E58((uint64_t)v36);
  id v37 = v36;
  sub_10034E390((uint64_t)v37, v35);
  if (qword_100517F58 != -1) {
    swift_once();
  }
  uint64_t v38 = (uint64_t)v49;
  if (byte_10055E408 == 1)
  {
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Recording only supported for ARCameraSource", v41, 2u);
      swift_slowDealloc();
    }
  }
  sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for PreviewLayer(0);
  swift_allocObject();
  uint64_t v42 = sub_100301AD4((uint64_t)v16);
  *(void *)(v3 + 40) = v42;
  if (*(unsigned char *)(a1 + v14[20]) == 1)
  {
    uint64_t v43 = *(void *)(v3 + 32);
    sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
    swift_retain();
    swift_retain();
    sub_1003AB8B0();
    swift_release();
    type metadata accessor for DebugPreviewLayer(0);
    swift_allocObject();
    *(void *)(v43 + 24) = sub_100303138((uint64_t)v16, v38);
    *(void *)(v43 + 32) = &off_1004F3C00;
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v42 = *(void *)(v3 + 40);
  }
  sub_10034E82C(v42, 0, *(char **)(v3 + 24));
  float v44 = *(float *)(a1 + 24);
  swift_retain();
  sub_1003AB8B0();
  swift_release();
  type metadata accessor for BundleManager();
  swift_allocObject();
  *(void *)(v3 + 16) = sub_1001A3F10(v38, v44);
  uint64_t v45 = v53;
  sub_10000FB74(a1 + v14[10], v53, &qword_10051E070);
  int v46 = v51(v45, 1, v26);
  sub_10000FBD8(v45, &qword_10051E070);
  if (v46 != 1 && (*(unsigned char *)(v3 + 56) & 1) == 0)
  {
    if (qword_100517D88 != -1) {
      swift_once();
    }
    sub_10034E52C(qword_10055E098, 0, *(char **)(v3 + 24));
    *(unsigned char *)(v3 + 56) = 1;
  }

  sub_10034F244(a1, type metadata accessor for CameraControllerConfiguration);
  return v3;
}

uint64_t sub_1003491B4(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100528AB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  uint64_t v66 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v58 - v12;
  uint64_t v14 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  uint64_t v17 = v3 + *(void *)(*(void *)v3 + 152);
  if (qword_100517E28 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10000F378(v18, (uint64_t)qword_10055E190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, v19, v18);
  uint64_t v20 = v3 + *(void *)(*(void *)v3 + 160);
  uint64_t v21 = sub_10000F214(&qword_10052A378);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3 + *(void *)(*(void *)v3 + 168), 1, 1, v6);
  sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  Class v59 = (Class)type metadata accessor for ARCameraSource(0);
  id v22 = objc_allocWithZone(v59);
  id v23 = a2;
  id v24 = sub_100146E94((uint64_t)v16, v23);
  id v63 = v23;

  *(void *)(v3 + 24) = v24;
  LODWORD(v24) = *(unsigned __int8 *)(a1 + 28);
  sub_10000FB74(a1 + *(int *)(v14 + 72), (uint64_t)v13, &qword_10051E070);
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  uint64_t v62 = v25;
  char v61 = v27;
  uint64_t v60 = v26 + 48;
  LODWORD(v23) = ((uint64_t (*)(char *, uint64_t))v27)(v13, 1) != 1;
  sub_10000FBD8((uint64_t)v13, &qword_10051E070);
  unint64_t v28 = sub_1001C86F0((int)v23, v24);
  unint64_t v29 = v24 == 1;
  uint64_t v64 = v14;
  unint64_t v30 = (float *)(a1 + *(int *)(v14 + 52));
  float v31 = *v30;
  float v32 = v30[1];
  float v33 = *(char **)(v3 + 24);
  if (*(void *)&v33[OBJC_IVAR____TtC6Tamale14ARCameraSource_trackManagerSupporting]) {
    uint64_t v34 = &off_1004EC7D0;
  }
  else {
    uint64_t v34 = 0;
  }
  type metadata accessor for TrackManager(0);
  swift_allocObject();
  uint64_t v35 = swift_retain();
  uint64_t v36 = sub_1003A7DFC(v35, (uint64_t)v34, v31, v32);
  *(void *)(v3 + 48) = v36;
  type metadata accessor for CVCoordinator(0);
  swift_allocObject();
  swift_retain();
  uint64_t v37 = sub_1001CB4B4(v28, v29, 1, v36);
  *(void *)(v3 + 32) = v37;
  sub_10034EB2C(v37, 0, v33);
  id v38 = [objc_allocWithZone((Class)type metadata accessor for StreamingMetadataProcessor()) init];
  uint64_t v39 = *(NSObject **)&v33[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v33;
  *(void *)(v40 + 24) = v38;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = sub_10034F2E4;
  *(void *)(v41 + 24) = v40;
  uint64_t v71 = sub_10014C6EC;
  uint64_t v72 = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  Class v70 = (Class)&unk_1004F56F8;
  uint64_t v42 = _Block_copy(aBlock);
  uint64_t v43 = v33;
  id v44 = v38;
  swift_retain();
  swift_release();
  dispatch_sync(v39, v42);
  _Block_release(v42);
  LOBYTE(v39) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v39)
  {
    __break(1u);
  }
  else
  {
    uint64_t v45 = *(void *)(v3 + 32);
    float v33 = (char *)v44;
    sub_10034E390((uint64_t)v33, v45);
    if (qword_100517F58 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  uint64_t v46 = (uint64_t)v65;
  uint64_t v47 = v64;
  if (byte_10055E408 == 1)
  {
    uint64_t v49 = *(void **)(v3 + 24);
    uint64_t v48 = *(void *)(v3 + 32);
    Class v70 = v59;
    uint64_t v71 = (uint64_t (*)())&off_1004EC7C0;
    aBlock[0] = v49;
    sub_10000F578((uint64_t)aBlock, (uint64_t)v68);
    sub_10034F2FC((uint64_t)v68, (uint64_t)v67);
    uint64_t v50 = v48 + OBJC_IVAR____TtC6Tamale13CVCoordinator_streamingMetadataConsumer;
    swift_beginAccess();
    id v51 = v49;
    sub_10000F5DC((uint64_t)v67, v50, &qword_100525190);
    swift_endAccess();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)aBlock);
  }
  sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for PreviewLayer(0);
  swift_allocObject();
  uint64_t v52 = sub_100301AD4((uint64_t)v16);
  *(void *)(v3 + 40) = v52;
  if (*(unsigned char *)(a1 + *(int *)(v47 + 80)) == 1)
  {
    uint64_t v53 = *(void *)(v3 + 32);
    sub_10034F1DC(a1, (uint64_t)v16, type metadata accessor for CameraControllerConfiguration);
    swift_retain();
    swift_retain();
    sub_1003AB8B0();
    swift_release();
    type metadata accessor for DebugPreviewLayer(0);
    swift_allocObject();
    *(void *)(v53 + 24) = sub_100303138((uint64_t)v16, v46);
    *(void *)(v53 + 32) = &off_1004F3C00;
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v52 = *(void *)(v3 + 40);
  }
  sub_10034ECAC(v52, 0, *(char **)(v3 + 24));
  float v54 = *(float *)(a1 + 24);
  swift_retain();
  sub_1003AB8B0();
  swift_release();
  type metadata accessor for BundleManager();
  swift_allocObject();
  *(void *)(v3 + 16) = sub_1001A3F10(v46, v54);
  uint64_t v55 = v66;
  sub_10000FB74(a1 + *(int *)(v47 + 40), v66, &qword_10051E070);
  int v56 = v61(v55, 1, v62);
  sub_10000FBD8(v55, &qword_10051E070);
  if (v56 != 1 && (*(unsigned char *)(v3 + 56) & 1) == 0)
  {
    if (qword_100517D88 != -1) {
      swift_once();
    }
    sub_10034E9AC(qword_10055E098, 0, *(char **)(v3 + 24));
    *(unsigned char *)(v3 + 56) = 1;
  }

  sub_10034F244(a1, type metadata accessor for CameraControllerConfiguration);
  return v3;
}

uint64_t sub_100349A8C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74(a1 + *(int *)(v8 + 40), (uint64_t)v7, &qword_10051E070);
  uint64_t v9 = type metadata accessor for URL();
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9);
  uint64_t result = sub_10000FBD8((uint64_t)v7, &qword_10051E070);
  if (a1 != 1)
  {
    uint64_t v11 = *(void *)(*v2 + 136);
    if ((*((unsigned char *)v2 + v11) & 1) == 0)
    {
      if (qword_100517D88 != -1) {
        swift_once();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, _UNKNOWN **, void, void))(*(void *)(v4 + 88) + 64))(qword_10055E098, &off_1004E8A20, 0, *(void *)(v4 + 80));
      *((unsigned char *)v2 + v11) = 1;
    }
  }
  return result;
}

uint64_t sub_100349C5C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v4 = *v1;
  sub_10000F214(&qword_10051E070);
  v2[4] = swift_task_alloc();
  uint64_t v5 = *(void *)(v4 + 88);
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 56) + **(int **)(v5 + 56));
  uint64_t v7 = (void *)swift_task_alloc();
  v2[5] = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100349DD8;
  return v9(a1, v6, v5);
}

uint64_t sub_100349DD8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100349F24, 0, 0);
  }
}

uint64_t sub_100349F24()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  sub_100349A8C(v2);
  uint64_t v3 = type metadata accessor for CameraControllerConfiguration(0);
  sub_10000FB74(v2 + *(int *)(v3 + 72), v1, &qword_10051E070);
  uint64_t v4 = type metadata accessor for URL();
  LODWORD(v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v1, 1, v4);
  sub_10000FBD8(v1, &qword_10051E070);
  if (v2 == 1)
  {
    sub_1001CDE4C();
    sub_1001CDF50();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v0[3] + *(void *)(*(void *)v0[3] + 128));
    v0[6] = v7;
    return _swift_task_switch(sub_10034A0AC, v7, 0);
  }
}

uint64_t sub_10034A0AC()
{
  sub_1003AB4D0();
  return _swift_task_switch(sub_10034A114, 0, 0);
}

uint64_t sub_10034A114()
{
  sub_1001CDE4C();
  sub_1001CDF50();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034A1BC(char a1)
{
  if (a1) {
    return sub_1001CDE4C();
  }
  else {
    return sub_1001CDF50();
  }
}

uint64_t sub_10034A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *v3;
  sub_10000F214((uint64_t *)&unk_1005254A0);
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_10034A32C, 0, 0);
}

uint64_t sub_10034A32C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + *(void *)(**(void **)(v0 + 40) + 128));
  *(void *)(v0 + 96) = v1;
  return _swift_task_switch(sub_10034A364, v1, 0);
}

uint64_t sub_10034A364()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 96) + 112);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10034A3D8, 0, 0);
}

uint64_t sub_10034A3D8()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[6];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = v0[10];
      uint64_t v9 = v0[3];
      uint64_t v8 = v0[4];
      uint64_t v10 = v0[2];
      sub_10034F1DC(v5, v7, type metadata accessor for CVTrackSnapshot);
      if (sub_10034C4D4(v7, v10, *(void *)(v4 + 80), v9, *(void *)(v4 + 88), v8)) {
        break;
      }
      sub_10034F244(v0[10], type metadata accessor for CVTrackSnapshot);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v12 = v0[10];
    uint64_t v13 = v0[7];
    swift_bridgeObjectRelease();
    sub_10034F120(v12, v13);
    uint64_t v11 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v11 = 1;
  }
  uint64_t v14 = v0[8];
  uint64_t v15 = v0[9];
  uint64_t v16 = v0[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v16, v11, 1, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
  {
    sub_10000FBD8(v0[7], (uint64_t *)&unk_1005254A0);
    sub_10021027C();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_100446CA0;
    *(unsigned char *)(v17 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  else
  {
    uint64_t v20 = v0[6];
    sub_10034F120(v0[7], v0[11]);
    uint64_t v22 = *(void *)(v20 + 80);
    uint64_t v21 = *(void *)(v20 + 88);
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)(v21 + 136)
                                                                                       + **(int **)(v21 + 136));
    id v23 = (void *)swift_task_alloc();
    v0[14] = v23;
    unint64_t v24 = sub_10034F184();
    *id v23 = v0;
    v23[1] = sub_10034A744;
    uint64_t v25 = v0[11];
    uint64_t v26 = v0[8];
    return v27(v25, v26, v24, v22, v21);
  }
}

uint64_t sub_10034A744(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10034A91C;
  }
  else
  {
    *(void *)(v6 + 128) = a2;
    *(void *)(v6 + 136) = a1;
    uint64_t v7 = sub_10034A878;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10034A878()
{
  sub_10034F244(v0[11], type metadata accessor for CVTrackSnapshot);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  return v1(v2, v3);
}

uint64_t sub_10034A91C()
{
  sub_10034F244(*(void *)(v0 + 88), type metadata accessor for CVTrackSnapshot);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034A9B8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return _swift_task_switch(sub_10034AA00, 0, 0);
}

uint64_t sub_10034AA00()
{
  uint64_t v1 = (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0 + 32) + 88) + 80))(*(void *)(*(void *)(v0 + 32) + 80), *(void *)(*(void *)(v0 + 32) + 88));
  if (v3 == 3 && (v1 | v2) == 0)
  {
    (*(void (**)(void))(*(void *)(**(void **)(v0 + 24) + 88) + 96))(*(void *)(**(void **)(v0 + 24) + 80));
  }
  else
  {
    sub_1000BC2F4(v1, v2, v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "qualityFrame() called on unpaused camera source", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 16);

    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10034AC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *v3;
  type metadata accessor for CVDetection();
  v4[6] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CVTrackSnapshot(0);
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  sub_10000F214((uint64_t *)&unk_1005254A0);
  v4[10] = swift_task_alloc();
  v4[11] = *(void *)(v5 + 88);
  v4[12] = *(void *)(v5 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[13] = AssociatedTypeWitness;
  uint64_t v8 = type metadata accessor for Optional();
  v4[14] = v8;
  v4[15] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[16] = v9;
  v4[17] = *(void *)(AssociatedTypeWitness - 8);
  v4[18] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[19] = v10;
  *uint64_t v10 = v4;
  v10[2] = v9;
  v10[3] = v3;
  v10[1] = sub_10034AEA0;
  v10[4] = *v3;
  return _swift_task_switch(sub_10034AA00, 0, 0);
}

uint64_t sub_10034AEA0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034AF9C, 0, 0);
}

uint64_t sub_10034AF9C()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[15] + 8))(v1, v0[14]);
    sub_10021027C();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v0[5];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[18], v1, v3);
    uint64_t v8 = *(void *)(v7 + *(void *)(*(void *)v7 + 128));
    v0[20] = v8;
    return _swift_task_switch(sub_10034B12C, v8, 0);
  }
}

uint64_t sub_10034B12C()
{
  *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 160) + 112);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10034B1A0, 0, 0);
}

uint64_t sub_10034B1A0()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[8];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = v0[11];
      uint64_t v6 = v0[12];
      uint64_t v8 = v0[9];
      uint64_t v10 = v0[3];
      uint64_t v9 = v0[4];
      uint64_t v11 = v0[2];
      sub_10034F1DC(v4, v8, type metadata accessor for CVTrackSnapshot);
      if (sub_10034C4D4(v8, v11, v6, v10, v7, v9)) {
        break;
      }
      sub_10034F244(v0[9], type metadata accessor for CVTrackSnapshot);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[10];
    swift_bridgeObjectRelease();
    sub_10034F120(v13, v14);
    uint64_t v12 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v12 = 1;
  }
  uint64_t v15 = v0[10];
  uint64_t v16 = v0[7];
  uint64_t v17 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v12, 1, v16);
  swift_bridgeObjectRelease();
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  uint64_t v19 = v0[10];
  if (v18 == 1)
  {
    uint64_t v21 = v0[17];
    uint64_t v20 = v0[18];
    uint64_t v22 = v0[13];
    sub_10000FBD8(v0[10], (uint64_t *)&unk_1005254A0);
    sub_10021027C();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_100446CA0;
    *(unsigned char *)(v23 + 16) = 2;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    sub_10034F1DC(v19 + *(int *)(v0[7] + 24), v0[6], (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10034F244(v19, type metadata accessor for CVTrackSnapshot);
    float v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100524EF0 + dword_100524EF0);
    uint64_t v26 = (void *)swift_task_alloc();
    v0[22] = v26;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *uint64_t v26 = v0;
    v26[1] = sub_10034B540;
    uint64_t v28 = v0[18];
    uint64_t v29 = v0[13];
    uint64_t v30 = v0[6];
    return v31(v30, v28, v29, AssociatedConformanceWitness);
  }
}

uint64_t sub_10034B540(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[23] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[6];
  if (v1)
  {
    sub_10034F244(v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v6 = sub_10034B770;
  }
  else
  {
    v4[24] = a1;
    sub_10034F244(v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v6 = sub_10034B6B0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10034B6B0()
{
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[24];
  return v1(v2);
}

uint64_t sub_10034B770()
{
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10034B828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = *v3;
  type metadata accessor for CVDetection();
  v4[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CVTrackSnapshot(0);
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  sub_10000F214((uint64_t *)&unk_1005254A0);
  v4[23] = swift_task_alloc();
  v4[24] = *(void *)(v5 + 88);
  v4[25] = *(void *)(v5 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[26] = AssociatedTypeWitness;
  uint64_t v8 = type metadata accessor for Optional();
  v4[27] = v8;
  v4[28] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[29] = v9;
  v4[30] = *(void *)(AssociatedTypeWitness - 8);
  v4[31] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[32] = v10;
  *uint64_t v10 = v4;
  v10[2] = v9;
  v10[3] = v3;
  v10[1] = sub_10034BAC8;
  v10[4] = *v3;
  return _swift_task_switch(sub_10034AA00, 0, 0);
}

uint64_t sub_10034BAC8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034BBC4, 0, 0);
}

uint64_t sub_10034BBC4()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[26];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[28] + 8))(v1, v0[27]);
    sub_10021027C();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v0[18];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[31], v1, v3);
    uint64_t v8 = *(void *)(v7 + *(void *)(*(void *)v7 + 128));
    v0[33] = v8;
    return _swift_task_switch(sub_10034BD54, v8, 0);
  }
}

uint64_t sub_10034BD54()
{
  *(void *)(v0 + 272) = *(void *)(*(void *)(v0 + 264) + 112);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10034BDC8, 0, 0);
}

uint64_t sub_10034BDC8()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[21];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = v0[24];
      uint64_t v6 = v0[25];
      uint64_t v8 = v0[22];
      uint64_t v10 = v0[16];
      uint64_t v9 = v0[17];
      uint64_t v11 = v0[15];
      sub_10034F1DC(v4, v8, type metadata accessor for CVTrackSnapshot);
      if (sub_10034C4D4(v8, v11, v6, v10, v7, v9)) {
        break;
      }
      sub_10034F244(v0[22], type metadata accessor for CVTrackSnapshot);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v13 = v0[22];
    uint64_t v14 = v0[23];
    swift_bridgeObjectRelease();
    sub_10034F120(v13, v14);
    uint64_t v12 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v12 = 1;
  }
  uint64_t v15 = v0[23];
  uint64_t v16 = v0[20];
  uint64_t v17 = v0[21];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v12, 1, v16);
  swift_bridgeObjectRelease();
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  uint64_t v19 = v0[31];
  if (v18 == 1)
  {
    uint64_t v20 = v0[30];
    uint64_t v21 = v0[26];
    sub_10000FBD8(v0[23], (uint64_t *)&unk_1005254A0);
    sub_10021027C();
    swift_allocError();
    *(_OWORD *)uint64_t v22 = xmmword_100446CA0;
    *(unsigned char *)(v22 + 16) = 2;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Class v70 = (uint64_t (*)(void))v0[1];
    return v70();
  }
  uint64_t v23 = v0[26];
  uint64_t v24 = v0[23];
  uint64_t v25 = v0[19];
  sub_10034F1DC(v24 + *(int *)(v0[20] + 24), v25, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10034F244(v24, type metadata accessor for CVTrackSnapshot);
  sub_1003FEC34(v0 + 10);
  sub_10034F244(v25, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v26 = v0[13];
  uint64_t v27 = v0[14];
  sub_10000F3B0(v0 + 10, v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 64))(v26, v27);
  v77.origin.CGFloat x = sub_1003FD844();
  CGFloat x = v77.origin.x;
  CGFloat y = v77.origin.y;
  CGFloat width = v77.size.width;
  CGFloat height = v77.size.height;
  double v32 = CGRectGetWidth(v77);
  v78.origin.CGFloat x = x;
  v78.origin.CGFloat y = y;
  v78.size.CGFloat width = width;
  v78.size.CGFloat height = height;
  CGFloat v33 = CGRectGetHeight(v78) * -0.3;
  v79.origin.CGFloat x = x;
  v79.origin.CGFloat y = y;
  v79.size.CGFloat width = width;
  v79.size.CGFloat height = height;
  CGRect v80 = CGRectInset(v79, v32 * -0.025, v33);
  CGFloat v34 = v80.origin.x;
  CGFloat v74 = v80.origin.y;
  CGFloat rect = v80.origin.x;
  CGFloat v35 = v80.size.width;
  CGFloat v71 = v80.size.width;
  CGFloat v36 = v80.size.height;
  v80.origin.CGFloat x = x;
  v80.origin.CGFloat y = y;
  v80.size.CGFloat width = width;
  v80.size.CGFloat height = height;
  double MinX = CGRectGetMinX(v80);
  v81.origin.CGFloat x = v34;
  v81.origin.CGFloat y = v74;
  v81.size.CGFloat width = v35;
  v81.size.CGFloat height = v36;
  double v38 = CGRectGetMinX(v81);
  if (v38 >= MinX) {
    double v38 = MinX;
  }
  double v73 = v38;
  v82.origin.CGFloat x = x;
  v82.origin.CGFloat y = y;
  v82.size.CGFloat width = width;
  v82.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v82);
  v83.origin.CGFloat x = rect;
  v83.origin.CGFloat y = v74;
  v83.size.CGFloat width = v71;
  v83.size.CGFloat height = v36;
  double v40 = CGRectGetMinY(v83);
  if (v40 >= MinY) {
    double v40 = MinY;
  }
  double v72 = v40;
  v84.origin.CGFloat x = x;
  v84.origin.CGFloat y = y;
  v84.size.CGFloat width = width;
  v84.size.CGFloat height = height;
  double v41 = CGRectGetWidth(v84);
  v85.origin.CGFloat x = rect;
  v85.origin.CGFloat y = v74;
  v85.size.CGFloat width = v71;
  v85.size.CGFloat height = v36;
  double v42 = CGRectGetWidth(v85);
  if (v41 <= v42) {
    double v41 = v42;
  }
  v86.origin.CGFloat x = x;
  v86.origin.CGFloat y = y;
  v86.size.CGFloat width = width;
  v86.size.CGFloat height = height;
  double v43 = CGRectGetHeight(v86);
  v87.origin.CGFloat x = rect;
  v87.origin.CGFloat y = v74;
  v87.size.CGFloat width = v71;
  v87.size.CGFloat height = v36;
  double v44 = CGRectGetHeight(v87);
  if (v43 > v44) {
    double v45 = v43;
  }
  else {
    double v45 = v44;
  }
  v89.origin.CGFloat x = 0.0;
  v89.origin.CGFloat y = 0.0;
  v89.size.CGFloat width = 1.0;
  v89.size.CGFloat height = 1.0;
  double v47 = v72;
  double v46 = v73;
  double v48 = v41;
  CGRect v88 = CGRectIntersection(*(CGRect *)(&v45 - 3), v89);
  CGFloat v49 = v88.origin.x;
  CGFloat v50 = v88.origin.y;
  CGFloat v51 = v88.size.width;
  CGFloat v52 = v88.size.height;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v54 = sub_100399398(v23, AssociatedConformanceWitness, v49, v50, v51, v52);
  if (!v54)
  {
    id v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Subject cropping failed: frame not available for the provided bounds", v65, 2u);
      swift_slowDealloc();
    }
    uint64_t v66 = v0[30];
    uint64_t v67 = v0[31];
    uint64_t v68 = v0[26];

    sub_10010C1AC();
    swift_allocError();
    *uint64_t v69 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v67, v68);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 10));
    goto LABEL_26;
  }
  uint64_t v55 = v54;
  uint64_t v56 = v0[30];
  uint64_t v57 = v0[31];
  uint64_t v58 = v0[26];
  double v59 = sub_10030CA60(v58, AssociatedConformanceWitness);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
  uint64_t v60 = sub_1001E9464(v59);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 10));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v61 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v61(v55, v60);
}

uint64_t sub_10034C4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(a6 + 16))(a4, a6, v10);
  char v13 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v13 & 1;
}

uint64_t sub_10034C5E8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  uint64_t v3 = sub_10000F214(&qword_10052A4C0);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = *(void *)(v4 + 64);
  v2[8] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_10034C70C, 0, 0);
}

uint64_t sub_10034C70C()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v15 = v0[7];
  uint64_t v16 = v1;
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 1, 1, v8);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = *(void *)(v4 + 80);
  *((void *)v11 + 5) = *(void *)(v4 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v11[v10], v2, v5);
  *(void *)&v11[(v15 + v10 + 7) & 0xFFFFFFFFFFFFFFF8] = v9;
  uint64_t v12 = sub_100064D5C(v16, (uint64_t)&unk_10052A4D0, (uint64_t)v11);
  sub_10034EFE8();
  *(void *)(v6 + *(void *)(*(void *)v6 + 144)) = v12;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  char v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10034C8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  uint64_t v8 = sub_10000F214(&qword_10052A4D8);
  v7[16] = v8;
  v7[17] = *(void *)(v8 - 8);
  v7[18] = swift_task_alloc();
  return _swift_task_switch(sub_10034C9AC, 0, 0);
}

uint64_t sub_10034C9AC()
{
  sub_10000F214(&qword_10052A4C0);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10034CAA0;
  uint64_t v2 = *(void *)(v0 + 128);
  return AsyncStream.Iterator.next(isolation:)(v0 + 88, 0, 0, v2);
}

uint64_t sub_10034CAA0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034CB9C, 0, 0);
}

uint64_t sub_10034CB9C()
{
  uint64_t v1 = (void *)v0[11];
  if (v1 != (void *)4)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (!Strong)
    {
      (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
      goto LABEL_7;
    }
    uint64_t v3 = Strong;
    if (static Task<>.isCancelled.getter())
    {
      (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
      swift_release();
LABEL_7:
      sub_10034F068(v1);
      goto LABEL_8;
    }
    if (v1 == (void *)3)
    {
      (*(void (**)(void))(v0[15] + 120))(v0[14]);
    }
    else if (v1 == (void *)2)
    {
      (*(void (**)(void))(v0[15] + 128))(v0[14]);
    }
    else
    {
      if (v1 != (void *)1)
      {
        uint64_t v6 = *(void *)(v3 + *(void *)(*(void *)v3 + 120));
        sub_10002E8B0();
        sub_10034F08C(v1);
        swift_retain();
        uint64_t v7 = static OS_dispatch_queue.main.getter();
        uint64_t v8 = swift_allocObject();
        *(void *)(v8 + 16) = v1;
        *(void *)(v8 + 24) = v6;
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 16) = sub_10034F0F0;
        *(void *)(v9 + 24) = v8;
        v0[6] = sub_100146854;
        v0[7] = v9;
        v0[2] = _NSConcreteStackBlock;
        v0[3] = 1107296256;
        v0[4] = sub_100109E30;
        v0[5] = &unk_1004F5680;
        uint64_t v10 = _Block_copy(v0 + 2);
        sub_10034F08C(v1);
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync((dispatch_queue_t)v7, v10);

        _Block_release(v10);
        LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        sub_10034F068(v1);
        swift_release();
        swift_release();
        sub_10034F068(v1);
        if (v7)
        {
          __break(1u);
          return AsyncStream.Iterator.next(isolation:)(v11, v12, v13, v14);
        }
LABEL_19:
        uint64_t v15 = (void *)swift_task_alloc();
        v0[19] = v15;
        void *v15 = v0;
        v15[1] = sub_10034CAA0;
        uint64_t v14 = v0[16];
        uint64_t v11 = v0 + 11;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        return AsyncStream.Iterator.next(isolation:)(v11, v12, v13, v14);
      }
      (*(void (**)(void))(v0[15] + 112))(v0[14]);
    }
    swift_release();
    goto LABEL_19;
  }
  (*(void (**)(void, void))(v0[17] + 8))(v0[18], v0[16]);
LABEL_8:
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10034CF74(uint64_t a1)
{
  v2[2] = a1;
  uint64_t v3 = *v1;
  v2[3] = *(void *)(*v1 + 88);
  v2[4] = *(void *)(v3 + 80);
  v2[5] = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  v2[6] = v4;
  v2[7] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  v2[8] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v2[9] = v6;
  void *v6 = v2;
  v6[2] = v5;
  v6[3] = v1;
  v6[1] = sub_10034D0FC;
  v6[4] = *v1;
  return _swift_task_switch(sub_10034AA00, 0, 0);
}

uint64_t sub_10034D0FC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034D1F8, 0, 0);
}

uint64_t sub_10034D1F8()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[7] + 8))(v1, v0[6]);
    sub_10021027C();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    uint64_t v6 = (uint64_t *)v0[2];
    v6[3] = v2;
    v6[4] = swift_getAssociatedConformanceWitness();
    uint64_t v7 = sub_100040120(v6);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(v7, v1, v2);
  }
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10034D388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_10052A500);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 160);
  swift_beginAccess();
  sub_10000FB74(v9, (uint64_t)v8, &qword_10052A500);
  uint64_t v10 = sub_10000F214(&qword_10052A378);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_10000FBD8((uint64_t)v8, &qword_10052A500);
  sub_1001A4914();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v5, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  swift_beginAccess();
  sub_10000F5DC((uint64_t)v5, v9, &qword_10052A500);
  return swift_endAccess();
}

uint64_t sub_10034D580()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 88))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10034D5F8(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)(*(void *)v2 + 88) + 152))(a1, a2 & 1, *(void *)(*(void *)v2 + 80));
}

uint64_t sub_10034D674()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 160))(*(void *)(*(void *)v0 + 80));
}

uint64_t sub_10034D6EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 88) + 168))(a1, *(void *)(*(void *)v1 + 80));
}

uint64_t *sub_10034D764()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 152);
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  sub_10000FBD8((uint64_t)v0 + *(void *)(*v0 + 160), &qword_10052A500);
  sub_10000FBD8((uint64_t)v0 + *(void *)(*v0 + 168), &qword_10052A508);
  return v0;
}

uint64_t sub_10034D8EC()
{
  sub_10034D764();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CameraSourceWrapper()
{
  return sub_1000684BC();
}

uint64_t sub_10034D95C(void *a1)
{
  return *a1 >> 62;
}

uint64_t *sub_10034D968(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for CameraSource()
{
  return &type metadata for CameraSource;
}

uint64_t sub_10034D98C(uint64_t a1)
{
  sub_10034D388(a1);
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return sub_10034E128(v2);
}

uint64_t sub_10034DA10()
{
  sub_10034D580();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return sub_10034E128(v1);
}

uint64_t sub_10034DA94(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000FC9C;
  return sub_100349C5C(a1);
}

uint64_t sub_10034DB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005296B0 + dword_1005296B0);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10034F544;
  return v7(a1, a2);
}

uint64_t sub_10034DBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10034F540;
  return sub_10034A200(a1, a2, a3);
}

uint64_t sub_10034DC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10034F544;
  return sub_10034AC00(a1, a2, a3);
}

uint64_t sub_10034DD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10034F540;
  return sub_10034B828(a1, a2, a3);
}

uint64_t sub_10034DDF0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000FC9C;
  return sub_10034C5E8(a1);
}

uint64_t sub_10034DE88(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000FC9C;
  return sub_10034CF74(a1);
}

uint64_t sub_10034DF24(uint64_t a1, char a2)
{
  sub_10034D5F8(a1, a2 & 1);
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
  return sub_10034E128(v3);
}

uint64_t sub_10034DFA8()
{
  sub_10034D674();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return sub_10034E128(v1);
}

uint64_t sub_10034E028(uint64_t a1)
{
  sub_10034D6EC(a1);
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return sub_10034E128(v2);
}

uint64_t sub_10034E0A8(char a1)
{
  sub_10034A1BC(a1);
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return sub_10034E128(v2);
}

uint64_t sub_10034E128(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10034E130()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10034E168()
{
  uint64_t v1 = sub_10000F214(&qword_10052A4C0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10034E254(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(sub_10000F214(&qword_10052A4C0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = (uint64_t)v1 + v7;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000F878;
  return sub_10034C8E4(a1, v8, v9, v10, v11, v4, v5);
}

uint64_t sub_10034E390(uint64_t a1, uint64_t a2)
{
  v12[3] = type metadata accessor for StreamingMetadataProcessor();
  v12[4] = &off_1004E8E88;
  v12[0] = a1;
  uint64_t v4 = *(void **)(a2 + 48);
  sub_10000F578((uint64_t)v12, (uint64_t)v11);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  sub_1000321A8(v11, v5 + 24);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10034F3CC;
  *(void *)(v6 + 24) = v5;
  v10[4] = sub_10014C6EC;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100109E30;
  v10[3] = &unk_1004F5860;
  unint64_t v7 = _Block_copy(v10);
  uint64_t v8 = v4;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v7);
  _Block_release(v7);

  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v12);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034E52C(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue];
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = &off_1004E8A20;
  v7[5] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10010C514;
  *(void *)(v8 + 24) = v7;
  void v13[4] = sub_10014C6EC;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100109E30;
  v13[3] = &unk_1004F5950;
  uint64_t v9 = _Block_copy(v13);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034E6AC(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue];
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = &off_1004EFD60;
  v7[5] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10034F53C;
  *(void *)(v8 + 24) = v7;
  void v13[4] = sub_10014C6EC;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100109E30;
  v13[3] = &unk_1004F5A40;
  uint64_t v9 = _Block_copy(v13);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034E82C(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14AVCameraSource_frameQueue];
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = &off_1004F3C10;
  v7[5] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10034F53C;
  *(void *)(v8 + 24) = v7;
  void v13[4] = sub_10014C6EC;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100109E30;
  v13[3] = &unk_1004F59C8;
  uint64_t v9 = _Block_copy(v13);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034E9AC(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = &off_1004E8A20;
  v7[5] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100146838;
  *(void *)(v8 + 24) = v7;
  void v13[4] = sub_10014C6EC;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100109E30;
  v13[3] = &unk_1004F5770;
  uint64_t v9 = _Block_copy(v13);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034EB2C(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = &off_1004EFD60;
  v7[5] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10034F538;
  *(void *)(v8 + 24) = v7;
  void v13[4] = sub_10014C6EC;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100109E30;
  v13[3] = &unk_1004F58D8;
  uint64_t v9 = _Block_copy(v13);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034ECAC(uint64_t a1, void *a2, char *a3)
{
  uint64_t v6 = *(NSObject **)&a3[OBJC_IVAR____TtC6Tamale14ARCameraSource_frameQueue];
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = &off_1004F3C10;
  v7[5] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_10034F538;
  *(void *)(v8 + 24) = v7;
  void v13[4] = sub_10014C6EC;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100109E30;
  v13[3] = &unk_1004F57E8;
  uint64_t v9 = _Block_copy(v13);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

unint64_t sub_10034EE2C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(v5 + 52)))
  {
    if (*(unsigned char *)(a1 + *(int *)(v5 + 52)) == 1)
    {
      sub_10034F1DC(a1, (uint64_t)v7, type metadata accessor for CameraControllerConfiguration);
      sub_10000F214(&qword_100526528);
      swift_allocObject();
      uint64_t v8 = sub_100348A8C((uint64_t)v7, a2);
      sub_10034F244(a1, type metadata accessor for CameraControllerConfiguration);
      return v8 | 0x4000000000000000;
    }
    else
    {
      sub_10034F1DC(a1, (uint64_t)v7, type metadata accessor for CameraControllerConfiguration);
      sub_10000F214(&qword_100526518);
      swift_allocObject();
      uint64_t v10 = sub_10034835C((uint64_t)v7, a2);
      sub_10034F244(a1, type metadata accessor for CameraControllerConfiguration);
      return v10 | 0x8000000000000000;
    }
  }
  else
  {
    sub_10034F1DC(a1, (uint64_t)v7, type metadata accessor for CameraControllerConfiguration);
    sub_10000F214(&qword_100526530);
    swift_allocObject();
    uint64_t v9 = sub_1003491B4((uint64_t)v7, a2);
    sub_10034F244(a1, type metadata accessor for CameraControllerConfiguration);
  }
  return v9;
}

uint64_t sub_10034EFE8()
{
  if (*(void *)(v0 + *(void *)(*(void *)v0 + 144)))
  {
    swift_retain();
    Task.cancel()();
    return swift_release();
  }
  return result;
}

void sub_10034F068(id a1)
{
  if (a1 != (id)4) {
    sub_10034F078(a1);
  }
}

void sub_10034F078(id a1)
{
  if ((char *)a1 - 1 >= (char *)3) {
}
  }

id sub_10034F08C(id result)
{
  if (result != (id)4) {
    return sub_10034F09C(result);
  }
  return result;
}

id sub_10034F09C(id result)
{
  if ((char *)result - 1 >= (char *)3) {
    return result;
  }
  return result;
}

uint64_t sub_10034F0B0()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10034F0F0()
{
  sub_100302674(*(void **)(v0 + 16));
}

uint64_t sub_10034F0F8()
{
  return swift_deallocObject();
}

uint64_t sub_10034F108(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10034F118()
{
  return swift_release();
}

uint64_t sub_10034F120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10034F184()
{
  unint64_t result = qword_100520FA8;
  if (!qword_100520FA8)
  {
    type metadata accessor for CVTrackSnapshot(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520FA8);
  }
  return result;
}

uint64_t sub_10034F1DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10034F244(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10034F2A4()
{
  return swift_deallocObject();
}

id sub_10034F2E4()
{
  return sub_1001354D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10034F2EC()
{
  return swift_deallocObject();
}

uint64_t sub_10034F2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100525190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10034F368()
{
  return swift_deallocObject();
}

uint64_t sub_10034F37C()
{
  return swift_deallocObject();
}

uint64_t sub_10034F38C()
{
  swift_release();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 24);

  return swift_deallocObject();
}

uint64_t sub_10034F3CC()
{
  return sub_1001CAA94(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10034F3D8()
{
  return swift_deallocObject();
}

uint64_t sub_10034F3EC()
{
  return swift_deallocObject();
}

uint64_t sub_10034F400()
{
  return swift_deallocObject();
}

uint64_t sub_10034F414()
{
  return swift_deallocObject();
}

uint64_t sub_10034F428()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10034F470()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for CameraSourceError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CameraSourceError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraSourceError()
{
  return &type metadata for CameraSourceError;
}

uint64_t sub_10034F588()
{
  uint64_t v0 = type metadata accessor for Spring();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for ContainerSmartDialogViewModifier();
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Spring.init(response:dampingRatio:)();
  SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
  uint64_t v4 = *(int *)(v1 + 20);
  sub_10000F214(&qword_100518FE8);
  swift_allocObject();
  *(void *)&v3[v4] = PassthroughSubject.init()();
  View.modifier<A>(_:)();
  return sub_10034F728((uint64_t)v3);
}

uint64_t type metadata accessor for ContainerSmartDialogViewModifier()
{
  uint64_t result = qword_10052A568;
  if (!qword_10052A568) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10034F728(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContainerSmartDialogViewModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10034F784(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SmartDialogAnimationSettings();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_10034F850(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_10034F8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_10034F944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10034F9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10034FA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_10034FAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10034FAE4);
}

uint64_t sub_10034FAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SmartDialogAnimationSettings();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10034FBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10034FBB8);
}

uint64_t sub_10034FBB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SmartDialogAnimationSettings();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10034FC74()
{
  uint64_t result = type metadata accessor for SmartDialogAnimationSettings();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10034FD0C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10034FD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ContainerSmartDialogViewModifier();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  sub_100350214(a2, (uint64_t)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1003503F0((uint64_t)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  uint64_t v11 = sub_10000F214(&qword_10052A5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a3, a1, v11);
  uint64_t result = sub_10000F214(&qword_10052A5A8);
  uint64_t v13 = (uint64_t (**)())(a3 + *(int *)(result + 36));
  *uint64_t v13 = sub_1003506BC;
  v13[1] = (uint64_t (*)())v10;
  v13[2] = 0;
  v13[3] = 0;
  return result;
}

uint64_t sub_10034FE7C()
{
  return Subject<>.send()();
}

uint64_t sub_10034FEF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v5 = a2 - 8;
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v19 = a1;
  uint64_t v20 = v4;
  uint64_t v6 = *(void *)(v4 + 64);
  __chkstk_darwin(a1);
  uint64_t v7 = sub_10000F214(&qword_10052A5A0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SmartDialogAnimationSettings();
  double v12 = __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v12);
  uint64_t v22 = *(void *)(v3 + *(int *)(v5 + 28));
  sub_10000F214(&qword_100518FE8);
  sub_100013AA8(&qword_100518FF0, &qword_100518FE8);
  Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19, v7);
  sub_100350214(v3, (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v16 = (v9 + *(unsigned __int8 *)(v20 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v17 + v15, v10, v7);
  sub_1003503F0((uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  sub_10000F214(&qword_10052A5A8);
  sub_10035052C();
  return SmartDialog.init(animationSettings:animationTrigger:header:body:)();
}

uint64_t sub_100350214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContainerSmartDialogViewModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100350278()
{
  uint64_t v1 = sub_10000F214(&qword_10052A5A0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ContainerSmartDialogViewModifier() - 8) + 80);
  unint64_t v6 = (v3 + v4 + v5) & ~v5;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  uint64_t v7 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v6, v7);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003503F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContainerSmartDialogViewModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100350454@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_10000F214(&qword_10052A5A0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for ContainerSmartDialogViewModifier() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_10034FD28(v1 + v4, v7, a1);
}

unint64_t sub_10035052C()
{
  unint64_t result = qword_10052A5B0;
  if (!qword_10052A5B0)
  {
    sub_10000F69C(&qword_10052A5A8);
    sub_100013AA8(&qword_10052A5B8, &qword_10052A5A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052A5B0);
  }
  return result;
}

uint64_t sub_1003505CC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ContainerSmartDialogViewModifier() - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003506BC()
{
  type metadata accessor for ContainerSmartDialogViewModifier();

  return sub_10034FE7C();
}

uint64_t sub_10035071C()
{
  return sub_100013AA8(&qword_10052A5C0, &qword_10052A5C8);
}

void sub_100350758()
{
  id v0 = [self defaultConfiguration];
  sub_10000F214(&qword_10052A5D0);
  uint64_t v1 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 tweakedConfigurationForCaller:v1 usage:v2];

  swift_unknownObjectRelease();
  sub_10000F214(&qword_10052A5D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1004416D0;
  id v5 = v3;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = 0x6D6F74737563;
  *(void *)(inited + 80) = 0xE600000000000000;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = 29527;
  AnyHashable.init<A>(_:)();
  unint64_t v6 = sub_10031B9F4((uint64_t)&off_1004E5240);
  *(void *)(inited + 240) = sub_10000F214(&qword_10052A5E0);
  *(void *)(inited + 216) = v6;
  sub_10031BB08(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [self feedbackWithDictionaryRepresentation:isa];

  [v5 setInteractionStartedFeedback:v8];
  id v9 = v5;
  id v10 = [v9 interactionStartedFeedback];
  [v9 setInteractionEndedFeedback:v10];

  id v11 = [objc_allocWithZone((Class)_UIButtonFeedbackGenerator) initWithConfiguration:v9];
  [v11 _setOutputMode:5];
  [v11 userInteractionStarted];
}

ValueMetadata *type metadata accessor for HapticFeedback()
{
  return &type metadata for HapticFeedback;
}

void sub_100350A58()
{
  qword_10055E438 = (uint64_t)&off_1004E5E18;
}

unint64_t sub_100350A6C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_100350A84@<X0>(void *a1@<X8>)
{
  return sub_100350B9C(&qword_100518008, &qword_10055E438, a1);
}

void *sub_100350AA8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_100350AC8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1003609A0();

  return Enum.hash(into:)(a1, a2, v4);
}

void sub_100350B18()
{
  qword_10055E440 = (uint64_t)&off_1004E5E68;
}

void sub_100350B2C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void sub_100350B3C(uint64_t a1@<X8>)
{
  sub_10036B4B0();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_100350B70()
{
  return *(void *)v0;
}

uint64_t sub_100350B78@<X0>(void *a1@<X8>)
{
  return sub_100350B9C(&qword_100518010, &qword_10055E440, a1);
}

uint64_t sub_100350B9C@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

void sub_100350BF4(uint64_t a1@<X8>)
{
  sub_10036B4B0();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

Swift::Int sub_100350C2C()
{
  return Hasher._finalize()();
}

uint64_t sub_100350C98(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100361060();

  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100350CE4()
{
  return Hasher._finalize()();
}

uint64_t sub_100350D4C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E448);
  sub_10000F378(v0, (uint64_t)qword_10055E448);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "center_x";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  id v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "center_y";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  id v11 = (void *)(v5 + 2 * v2);
  double v12 = (char *)v11 + v1[14];
  *id v11 = 3;
  *(void *)double v12 = "width";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "height";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100350F90()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100351070()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        if (!v0[3] || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Lens_NormalizedBox(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100351184@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

unint64_t sub_1003511A8()
{
  return 0xD000000000000012;
}

uint64_t (*sub_1003511D0())()
{
  return nullsub_2;
}

uint64_t sub_1003511F4()
{
  return sub_100350F90();
}

uint64_t sub_10035120C()
{
  return sub_100351070();
}

uint64_t sub_100351228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC30, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1003512A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518018, (uint64_t)qword_10055E448, a1);
}

uint64_t sub_1003512CC(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AC18, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10035133C()
{
  sub_10035C530(&qword_10052AC18, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);

  return Message.hash(into:)();
}

uint64_t sub_1003513C0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E460);
  sub_10000F378(v0, (uint64_t)qword_10055E460);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100441600;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)unint64_t v4 = "image_source_url";
  *(void *)(v4 + 8) = 16;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 5;
  *(void *)unint64_t v8 = "image_source_bytes";
  *(void *)(v8 + 8) = 18;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  id v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 6;
  *(void *)unint64_t v10 = "image_source_type";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v7();
  id v11 = (void *)(v18 + v3 + 3 * v2);
  double v12 = (char *)v11 + v1[14];
  *id v11 = 2;
  *(void *)double v12 = "width";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "height";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v7();
  unint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)unint64_t v16 = "image_action_url";
  *((void *)v16 + 1) = 16;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100351680()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1003517A8()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 48)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 52)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        unint64_t v5 = *(void *)(v0 + 64);
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = *(void *)(v0 + 56) & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          uint64_t v7 = *(void *)(v0 + 16);
          unint64_t v8 = *(void *)(v0 + 24);
          switch(v8 >> 62)
          {
            case 1uLL:
              if ((int)v7 != v7 >> 32) {
                goto LABEL_19;
              }
              goto LABEL_20;
            case 2uLL:
              if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                goto LABEL_19;
              }
              goto LABEL_20;
            case 3uLL:
              goto LABEL_20;
            default:
              if ((v8 & 0xFF000000000000) == 0) {
                goto LABEL_20;
              }
LABEL_19:
              uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
              if (!v1)
              {
LABEL_20:
                unint64_t v9 = *(void *)(v0 + 40);
                uint64_t v10 = HIBYTE(v9) & 0xF;
                if ((v9 & 0x2000000000000000) == 0) {
                  uint64_t v10 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
                }
                if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for Lens_ImageThumbnail(0);
                  uint64_t result = UnknownStorage.traverse<A>(visitor:)();
                }
              }
              break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100351980@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_10043FAF0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t sub_1003519C0()
{
  return 0xD000000000000013;
}

uint64_t sub_1003519DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100351A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_100351ABC())()
{
  return nullsub_2;
}

uint64_t sub_100351AE0()
{
  return sub_100351680();
}

uint64_t sub_100351AF8()
{
  return sub_1003517A8();
}

uint64_t sub_100351B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC50, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100351B8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518020, (uint64_t)qword_10055E460, a1);
}

uint64_t sub_100351BB0(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052ABF8, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100351C1C()
{
  sub_10035C530(&qword_10052ABF8, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);

  return Message.hash(into:)();
}

uint64_t sub_100351C9C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E478);
  sub_10000F378(v0, (uint64_t)qword_10055E478);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "badge_url";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "price";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  id v11 = (void *)(v5 + 2 * v2);
  double v12 = (char *)v11 + v1[14];
  *id v11 = 3;
  *(void *)double v12 = "price_micros";
  *((void *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "currency_code";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100351EDC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100351FCC()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!v0[4] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
      {
        unint64_t v7 = v0[6];
        uint64_t v8 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0) {
          uint64_t v8 = v0[5] & 0xFFFFFFFFFFFFLL;
        }
        if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Lens_ShoppableBadge(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100352100@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t sub_100352134()
{
  return 0xD000000000000013;
}

uint64_t sub_100352150()
{
  return sub_100351EDC();
}

uint64_t sub_100352168()
{
  return sub_100351FCC();
}

uint64_t sub_100352180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC58, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1003521FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518028, (uint64_t)qword_10055E478, a1);
}

uint64_t sub_100352220(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052ABD8, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10035228C()
{
  sub_10035C530(&qword_10052ABD8, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);

  return Message.hash(into:)();
}

uint64_t sub_10035230C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E490);
  sub_10000F378(v0, (uint64_t)qword_10055E490);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100451D70;
  unint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 1;
  *(void *)unint64_t v5 = "title";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "image_thumbnail";
  *(void *)(v9 + 8) = 15;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  id v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)id v11 = "item_type";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  double v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *double v12 = 4;
  *(void *)uint64_t v13 = "referrer_url";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v30 + v3 + 4 * v2);
  unint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)unint64_t v15 = "a11y_label";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v30 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *unint64_t v16 = 6;
  *(void *)uint64_t v17 = "favicon_url";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 11;
  *(void *)uint64_t v19 = "favicon_bytes";
  *((void *)v19 + 1) = 13;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v30 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 12;
  *(void *)uint64_t v21 = "favicon_bytes_type";
  *((void *)v21 + 1) = 18;
  v21[16] = 2;
  v8();
  uint64_t v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 7;
  *(void *)uint64_t v22 = "domain_name";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v30 + v3 + 9 * v2);
  uint64_t v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 8;
  *(void *)uint64_t v24 = "badge_attributes";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  uint64_t v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *uint64_t v25 = 9;
  *(void *)uint64_t v26 = "shoppable_badge";
  *((void *)v26 + 1) = 15;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 10;
  *(void *)uint64_t v28 = "video_duration";
  *((void *)v28 + 1) = 14;
  v28[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100352738()
{
  type metadata accessor for Lens_Item._StorageClass(0);
  swift_allocObject();
  uint64_t result = sub_100352778();
  qword_10052A5E8 = result;
  return result;
}

uint64_t sub_100352778()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
  uint64_t v2 = type metadata accessor for Lens_ImageThumbnail(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__itemType;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  unint64_t v4 = (void *)(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
  *unint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  unint64_t v5 = (void *)(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
  *unint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL);
  void *v6 = 0;
  v6[1] = 0xE000000000000000;
  *(_OWORD *)(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes) = xmmword_10043FAF0;
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType);
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = (void *)(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  unint64_t v9 = (void *)(v0
                + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes);
  void *v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v10 = v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  uint64_t v11 = type metadata accessor for Lens_ShoppableBadge(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  double v12 = (void *)(v0
                 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration);
  *double v12 = 0;
  v12[1] = 0xE000000000000000;
  return v0;
}

uint64_t sub_1003528DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051BEF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v73 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v6 - 8);
  uint64_t v65 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v8 = v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
  uint64_t v64 = v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
  uint64_t v9 = type metadata accessor for Lens_ImageThumbnail(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__itemType;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
  *uint64_t v11 = 0;
  v11[1] = 0xE000000000000000;
  double v12 = (void *)(v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
  *double v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v13 = (void *)(v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL);
  uint64_t v66 = v13;
  *uint64_t v13 = 0;
  v13[1] = 0xE000000000000000;
  uint64_t v67 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes);
  *(_OWORD *)uint64_t v67 = xmmword_10043FAF0;
  uint64_t v14 = (void *)(v1
                 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType);
  uint64_t v68 = v14;
  *uint64_t v14 = 0;
  v14[1] = 0xE000000000000000;
  unint64_t v15 = (void *)(v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
  uint64_t v69 = v15;
  void *v15 = 0;
  v15[1] = 0xE000000000000000;
  unint64_t v16 = (void *)(v1
                 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes);
  Class v70 = v16;
  *unint64_t v16 = 0;
  v16[1] = 0xE000000000000000;
  uint64_t v17 = v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  uint64_t v71 = v1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  uint64_t v18 = type metadata accessor for Lens_ShoppableBadge(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = (void *)(v1
                 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration);
  double v72 = v19;
  *uint64_t v19 = 0;
  v19[1] = 0xE000000000000000;
  swift_beginAccess();
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v20;
  *(void *)(v1 + 24) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
  swift_beginAccess();
  uint64_t v23 = v65;
  sub_10000FB74(v22, v65, &qword_10051BE80);
  uint64_t v24 = v64;
  swift_beginAccess();
  sub_10000F5DC(v23, v24, &qword_10051BE80);
  swift_endAccess();
  uint64_t v25 = (uint64_t *)(a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__itemType);
  swift_beginAccess();
  uint64_t v26 = *v25;
  LOBYTE(v25) = *((unsigned char *)v25 + 8);
  swift_beginAccess();
  *(void *)uint64_t v10 = v26;
  *(unsigned char *)(v10 + 8) = (_BYTE)v25;
  uint64_t v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
  swift_beginAccess();
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  swift_beginAccess();
  *uint64_t v11 = v29;
  v11[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = (uint64_t *)(a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
  swift_beginAccess();
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  swift_beginAccess();
  *double v12 = v32;
  v12[1] = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CGFloat v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL);
  swift_beginAccess();
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  CGFloat v36 = v66;
  swift_beginAccess();
  *CGFloat v36 = v35;
  v36[1] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes);
  swift_beginAccess();
  uint64_t v39 = *v37;
  unint64_t v38 = v37[1];
  double v40 = v67;
  swift_beginAccess();
  uint64_t v41 = *v40;
  unint64_t v42 = v40[1];
  *double v40 = v39;
  v40[1] = v38;
  sub_100038528(v39, v38);
  sub_100038B34(v41, v42);
  double v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType);
  swift_beginAccess();
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  double v46 = v68;
  swift_beginAccess();
  *double v46 = v45;
  v46[1] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
  swift_beginAccess();
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  CGFloat v50 = v69;
  swift_beginAccess();
  *CGFloat v50 = v49;
  v50[1] = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  CGFloat v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes);
  swift_beginAccess();
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  uint64_t v54 = v70;
  swift_beginAccess();
  *uint64_t v54 = v53;
  v54[1] = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  swift_beginAccess();
  uint64_t v56 = v73;
  sub_10000FB74(v55, v73, &qword_10051BEF8);
  uint64_t v57 = v71;
  swift_beginAccess();
  sub_10000F5DC(v56, v57, &qword_10051BEF8);
  swift_endAccess();
  uint64_t v58 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration);
  swift_beginAccess();
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  swift_bridgeObjectRetain();
  swift_release();
  char v61 = v72;
  swift_beginAccess();
  *char v61 = v60;
  v61[1] = v59;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100352F34()
{
  swift_bridgeObjectRelease();
  sub_10000FBD8(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail, &qword_10051BE80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100038B34(*(void *)(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes), *(void *)(v0+ OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes+ 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FBD8(v0 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge, &qword_10051BEF8);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100353024()
{
  sub_100352F34();

  return swift_deallocClassInstance();
}

uint64_t sub_100353078()
{
  return type metadata accessor for Lens_Item._StorageClass(0);
}

uint64_t type metadata accessor for Lens_Item._StorageClass(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052A670);
}

void sub_1003530A0()
{
  sub_1003531EC(319, &qword_10052A680, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
  if (v0 <= 0x3F)
  {
    sub_1003531EC(319, (unint64_t *)&unk_10052A688, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for Lens_ImageThumbnail(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052AA10);
}

void sub_1003531EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for Lens_ShoppableBadge(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052A970);
}

uint64_t *sub_100353260(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_10035332C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_1003533A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_100353420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1003534AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100353528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1003535AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003535C0);
}

uint64_t sub_1003535C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100353680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100353694);
}

uint64_t sub_100353694(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for Lens_Item(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052A8E0);
}

uint64_t sub_100353770()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lens_Item.ItemType()
{
  return &type metadata for Lens_Item.ItemType;
}

void *sub_100353818(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_100353930(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1003539B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *sub_100353A80(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100353B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_100353BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100353CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100353CB8);
}

uint64_t sub_100353CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100353CD0);
}

uint64_t sub_100353CD4()
{
  return sub_100361B64();
}

uint64_t *sub_100353CEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    unint64_t v9 = a2[3];
    swift_bridgeObjectRetain();
    sub_100038528(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    uint64_t v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    a1[6] = a2[6];
    uint64_t v11 = a2[7];
    uint64_t v12 = a2[8];
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (char *)a2 + v13;
    unint64_t v15 = (char *)a1 + v13;
    a1[7] = v11;
    a1[8] = v12;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v15, v14, v16);
  }
  return a1;
}

uint64_t sub_100353E14(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_100038B34(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100353EA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  swift_bridgeObjectRetain();
  sub_100038528(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (char *)a2 + v12;
  uint64_t v14 = (char *)a1 + v12;
  a1[7] = v10;
  a1[8] = v11;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v14, v13, v15);
  return a1;
}

uint64_t sub_100353F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_100038528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  sub_100038B34(v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_10035408C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_100354120(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100038B34(v7, v8);
  uint64_t v9 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v9;
  swift_bridgeObjectRelease();
  a1[6] = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 64);
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1003541E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003541F8);
}

uint64_t sub_1003541F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003542A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003542BC);
}

uint64_t sub_1003542BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100354364()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10035441C()
{
  unint64_t result = qword_10052AA60;
  if (!qword_10052AA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052AA60);
  }
  return result;
}

uint64_t sub_100354470()
{
  return sub_1001B8988(&qword_10052AA68, &qword_10052AA70);
}

unint64_t sub_10035449C()
{
  unint64_t result = qword_10052AA78;
  if (!qword_10052AA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052AA78);
  }
  return result;
}

unint64_t sub_1003544F4()
{
  unint64_t result = qword_10052AA80;
  if (!qword_10052AA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052AA80);
  }
  return result;
}

uint64_t sub_100354548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(int *)(type metadata accessor for Lens_Item(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Lens_Item._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v3 + v7) = sub_1003528DC(v8);
    swift_release();
  }
  uint64_t v9 = swift_retain();
  sub_100354614(v9, a1, a2, a3);
  return swift_release();
}

uint64_t sub_100354614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_1003548EC();
          break;
        case 2:
          sub_10035496C();
          break;
        case 3:
          sub_100354A3C();
          break;
        case 4:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL;
          goto LABEL_5;
        case 5:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel;
          goto LABEL_5;
        case 6:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL;
          goto LABEL_5;
        case 7:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName;
          goto LABEL_5;
        case 8:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes;
          goto LABEL_5;
        case 9:
          sub_100354AD4();
          break;
        case 10:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration;
          goto LABEL_5;
        case 11:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularBytesField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes;
          goto LABEL_5;
        case 12:
          uint64_t v11 = &dispatch thunk of Decoder.decodeSingularStringField(value:);
          uint64_t v12 = a2;
          uint64_t v13 = a1;
          uint64_t v14 = a3;
          uint64_t v15 = a4;
          uint64_t v16 = &OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType;
LABEL_5:
          sub_100354BA4(v12, v13, v14, v15, v16, (void (*)(uint64_t, uint64_t, uint64_t))v11);
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1003548EC()
{
  return swift_endAccess();
}

uint64_t sub_10035496C()
{
  return swift_endAccess();
}

uint64_t sub_100354A3C()
{
  return swift_endAccess();
}

uint64_t sub_100354AD4()
{
  return swift_endAccess();
}

uint64_t sub_100354BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t sub_100354C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Lens_Item(0);
  uint64_t v7 = swift_retain();
  sub_100354CC4(v7, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v3) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100354CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1003551CC(a1, a2, a3, a4);
  if (!v4)
  {
    uint64_t v12 = (void *)(a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__itemType);
    swift_beginAccess();
    if (*v12)
    {
      sub_1003609A0();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    uint64_t v13 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
    swift_beginAccess();
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
    swift_beginAccess();
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL);
    swift_beginAccess();
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    uint64_t v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v25 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
    swift_beginAccess();
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    uint64_t v28 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0) {
      uint64_t v28 = v26 & 0xFFFFFFFFFFFFLL;
    }
    if (v28)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v29 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes);
    swift_beginAccess();
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    uint64_t v32 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0) {
      uint64_t v32 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (v32)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    sub_1003553DC(a1, a2, a3, a4);
    CGFloat v33 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration);
    swift_beginAccess();
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    uint64_t v36 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0) {
      uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v37 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes);
    swift_beginAccess();
    uint64_t v38 = *v37;
    unint64_t v39 = v37[1];
    switch(v39 >> 62)
    {
      case 1uLL:
        uint64_t v40 = (int)v38;
        uint64_t v41 = v38 >> 32;
        goto LABEL_40;
      case 2uLL:
        uint64_t v40 = *(void *)(v38 + 16);
        uint64_t v41 = *(void *)(v38 + 24);
LABEL_40:
        if (v40 != v41) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 3uLL:
        goto LABEL_42;
      default:
        if ((v39 & 0xFF000000000000) == 0) {
          goto LABEL_42;
        }
LABEL_41:
        sub_100038528(v38, v39);
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        sub_100038B34(v38, v39);
LABEL_42:
        unint64_t v42 = (uint64_t *)(a1
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType);
        uint64_t result = swift_beginAccess();
        uint64_t v43 = *v42;
        unint64_t v44 = v42[1];
        uint64_t v45 = HIBYTE(v44) & 0xF;
        if ((v44 & 0x2000000000000000) == 0) {
          uint64_t v45 = v43 & 0xFFFFFFFFFFFFLL;
        }
        if (!v45) {
          return result;
        }
        swift_bridgeObjectRetain();
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
        break;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003551CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
  swift_beginAccess();
  sub_10000FB74(v12, (uint64_t)v7, &qword_10051BE80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10051BE80);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_ImageThumbnail);
  sub_10035C530(&qword_10052ABF8, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_1003553DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = sub_10000F214(&qword_10051BEF8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_ShoppableBadge(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  swift_beginAccess();
  sub_10000FB74(v12, (uint64_t)v7, &qword_10051BEF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10051BEF8);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_ShoppableBadge);
  sub_10035C530(&qword_10052ABD8, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ShoppableBadge);
}

uint64_t sub_1003555EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Lens_ShoppableBadge(0);
  uint64_t v95 = *(void *)(v4 - 8);
  uint64_t v96 = v4;
  __chkstk_darwin(v4);
  char v92 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000F214(&qword_10052AC70);
  __chkstk_darwin(v94);
  uint64_t v7 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051BEF8);
  __chkstk_darwin(v8 - 8);
  uint64_t v93 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v97 = (uint64_t)&v91 - v11;
  uint64_t v12 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v98 = (uint64_t)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10052AC78);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v18 - 8);
  uint64_t v99 = (uint64_t)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v91 - v21;
  swift_beginAccess();
  uint64_t v101 = a1;
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  swift_beginAccess();
  if (v24 == *(void *)(a2 + 16) && v23 == *(void *)(a2 + 24)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v91 = v7;
    uint64_t v100 = a2;
    uint64_t v26 = v101;
    uint64_t v27 = v101 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
    swift_beginAccess();
    sub_10000FB74(v27, (uint64_t)v22, &qword_10051BE80);
    uint64_t v28 = v100;
    uint64_t v29 = v100 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
    swift_beginAccess();
    uint64_t v30 = (uint64_t)&v17[*(int *)(v15 + 48)];
    sub_10000FB74((uint64_t)v22, (uint64_t)v17, &qword_10051BE80);
    sub_10000FB74(v29, v30, &qword_10051BE80);
    unint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v31((uint64_t)v17, 1, v12) == 1)
    {
      swift_retain();
      swift_retain();
      sub_10000FBD8((uint64_t)v22, &qword_10051BE80);
      int v32 = v31(v30, 1, v12);
      uint64_t v33 = v26;
      if (v32 == 1)
      {
        sub_10000FBD8((uint64_t)v17, &qword_10051BE80);
LABEL_15:
        uint64_t v40 = (uint64_t *)(v33
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__itemType);
        swift_beginAccess();
        uint64_t v41 = *v40;
        unint64_t v42 = (uint64_t *)(v28
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__itemType);
        swift_beginAccess();
        uint64_t v43 = *v42;
        if (*((unsigned char *)v42 + 8) == 1)
        {
          if (v43)
          {
            if (v43 == 1)
            {
              if (v41 != 1) {
                goto LABEL_11;
              }
            }
            else if (v41 != 2)
            {
              goto LABEL_11;
            }
          }
          else if (v41)
          {
            goto LABEL_11;
          }
        }
        else if (v41 != v43)
        {
          goto LABEL_11;
        }
        unint64_t v44 = (uint64_t *)(v33
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
        swift_beginAccess();
        uint64_t v45 = *v44;
        uint64_t v46 = v44[1];
        double v47 = (void *)(v28
                       + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
        swift_beginAccess();
        if (v45 != *v47 || v46 != v47[1])
        {
          char v25 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v48 = (uint64_t *)(v33
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
        swift_beginAccess();
        uint64_t v49 = *v48;
        uint64_t v50 = v48[1];
        CGFloat v51 = (void *)(v28
                       + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__a11YLabel);
        swift_beginAccess();
        if (v49 != *v51 || v50 != v51[1])
        {
          char v25 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v52 = (uint64_t *)(v33
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL);
        swift_beginAccess();
        uint64_t v53 = *v52;
        uint64_t v54 = v52[1];
        uint64_t v55 = (void *)(v28
                       + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconURL);
        swift_beginAccess();
        if (v53 != *v55 || v54 != v55[1])
        {
          char v25 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v56 = (uint64_t *)(v33
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes);
        swift_beginAccess();
        uint64_t v58 = *v56;
        unint64_t v57 = v56[1];
        uint64_t v59 = (uint64_t *)(v28
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes);
        swift_beginAccess();
        uint64_t v60 = v33;
        uint64_t v61 = v28;
        uint64_t v63 = *v59;
        unint64_t v62 = v59[1];
        sub_100038528(v58, v57);
        sub_100038528(v63, v62);
        char v64 = sub_1003F5B24(v58, v57, v63, v62);
        sub_100038B34(v63, v62);
        sub_100038B34(v58, v57);
        if ((v64 & 1) == 0)
        {
          char v25 = 0;
          goto LABEL_12;
        }
        uint64_t v65 = (uint64_t *)(v60
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType);
        swift_beginAccess();
        uint64_t v66 = *v65;
        uint64_t v67 = v65[1];
        uint64_t v68 = (void *)(v61
                       + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytesType);
        swift_beginAccess();
        if (v66 != *v68 || v67 != v68[1])
        {
          char v25 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v69 = (uint64_t *)(v60
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
        swift_beginAccess();
        uint64_t v70 = *v69;
        uint64_t v71 = v69[1];
        double v72 = (void *)(v61
                       + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
        swift_beginAccess();
        if (v70 != *v72 || v71 != v72[1])
        {
          char v25 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v73 = (uint64_t *)(v60
                        + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes);
        swift_beginAccess();
        uint64_t v74 = *v73;
        uint64_t v75 = v73[1];
        uint64_t v76 = (void *)(v61
                       + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__badgeAttributes);
        swift_beginAccess();
        if (v74 != *v76 || v75 != v76[1])
        {
          char v25 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v77 = v60
            + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
        swift_beginAccess();
        uint64_t v78 = v97;
        sub_10000FB74(v77, v97, &qword_10051BEF8);
        uint64_t v79 = v61
            + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
        swift_beginAccess();
        uint64_t v80 = (uint64_t)v91;
        uint64_t v81 = (uint64_t)&v91[*(int *)(v94 + 48)];
        sub_10000FB74(v78, (uint64_t)v91, &qword_10051BEF8);
        sub_10000FB74(v79, v81, &qword_10051BEF8);
        uint64_t v82 = v96;
        CGRect v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
        if (v83(v80, 1, v96) == 1)
        {
          sub_10000FBD8(v78, &qword_10051BEF8);
          if (v83(v81, 1, v82) == 1)
          {
            sub_10000FBD8(v80, &qword_10051BEF8);
LABEL_52:
            CGRect v87 = (uint64_t *)(v60
                            + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration);
            swift_beginAccess();
            uint64_t v88 = *v87;
            uint64_t v89 = v87[1];
            char v90 = (void *)(v61
                           + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__videoDuration);
            swift_beginAccess();
            if (v88 == *v90 && v89 == v90[1]) {
              char v25 = 1;
            }
            else {
              char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            goto LABEL_12;
          }
        }
        else
        {
          CGRect v84 = v93;
          sub_10000FB74(v80, (uint64_t)v93, &qword_10051BEF8);
          if (v83(v81, 1, v82) != 1)
          {
            CGRect v85 = v92;
            sub_1003609F4(v81, (uint64_t)v92, type metadata accessor for Lens_ShoppableBadge);
            char v86 = sub_10035EA30(v84, v85);
            sub_100360A5C((uint64_t)v85, type metadata accessor for Lens_ShoppableBadge);
            sub_10000FBD8(v97, &qword_10051BEF8);
            sub_100360A5C((uint64_t)v84, type metadata accessor for Lens_ShoppableBadge);
            sub_10000FBD8(v80, &qword_10051BEF8);
            if (v86) {
              goto LABEL_52;
            }
            goto LABEL_11;
          }
          sub_10000FBD8(v97, &qword_10051BEF8);
          sub_100360A5C((uint64_t)v84, type metadata accessor for Lens_ShoppableBadge);
        }
        unint64_t v35 = &qword_10052AC70;
        uint64_t v36 = v80;
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v34 = v99;
      sub_10000FB74((uint64_t)v17, v99, &qword_10051BE80);
      if (v31(v30, 1, v12) != 1)
      {
        uint64_t v38 = v98;
        sub_1003609F4(v30, v98, type metadata accessor for Lens_ImageThumbnail);
        uint64_t v33 = v101;
        swift_retain();
        swift_retain();
        char v39 = sub_100360754(v34, v38);
        sub_100360A5C(v38, type metadata accessor for Lens_ImageThumbnail);
        sub_10000FBD8((uint64_t)v22, &qword_10051BE80);
        sub_100360A5C(v34, type metadata accessor for Lens_ImageThumbnail);
        uint64_t v28 = v100;
        sub_10000FBD8((uint64_t)v17, &qword_10051BE80);
        if ((v39 & 1) == 0) {
          goto LABEL_11;
        }
        goto LABEL_15;
      }
      swift_retain();
      swift_retain();
      sub_10000FBD8((uint64_t)v22, &qword_10051BE80);
      sub_100360A5C(v34, type metadata accessor for Lens_ImageThumbnail);
    }
    unint64_t v35 = &qword_10052AC78;
    uint64_t v36 = (uint64_t)v17;
LABEL_10:
    sub_10000FBD8(v36, v35);
LABEL_11:
    char v25 = 0;
LABEL_12:
    swift_release();
    swift_release();
  }
  return v25 & 1;
}

uint64_t sub_100356148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_100518038 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_10052A5E8;

  return swift_retain();
}

uint64_t sub_1003561C0()
{
  return 0x6574492E736E656CLL;
}

uint64_t sub_1003561DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100356244(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t sub_1003562AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100354548(a1, a2, a3);
}

uint64_t sub_1003562C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100354C30(a1, a2, a3);
}

uint64_t sub_1003562DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC60, (void (*)(uint64_t))type metadata accessor for Lens_Item);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100356358@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518030, (uint64_t)qword_10055E490, a1);
}

uint64_t sub_10035637C(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052ABC0, (void (*)(uint64_t))type metadata accessor for Lens_Item);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1003563E8()
{
  sub_10035C530(&qword_10052ABC0, (void (*)(uint64_t))type metadata accessor for Lens_Item);

  return Message.hash(into:)();
}

uint64_t sub_100356468()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E4A8);
  sub_10000F378(v0, (uint64_t)qword_10055E4A8);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1004416D0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "SIMILAR_IMAGE";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "PRODUCT";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "VIDEO";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100356668@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518040, (uint64_t)qword_10055E4A8, a1);
}

uint64_t sub_10035668C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E4C0);
  sub_10000F378(v0, (uint64_t)qword_10055E4C0);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "source_url";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "title";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "snippet";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "domain_name";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1003568DC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1003569BC()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = v0[5];
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        unint64_t v9 = v0[7];
        uint64_t v10 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0) {
          uint64_t v10 = v0[6] & 0xFFFFFFFFFFFFLL;
        }
        if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Lens_SearchResult(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100356AFC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t sub_100356B30()
{
  return 0xD000000000000011;
}

uint64_t sub_100356B4C()
{
  return sub_1003568DC();
}

uint64_t sub_100356B64()
{
  return sub_1003569BC();
}

uint64_t sub_100356B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC80, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100356BF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518048, (uint64_t)qword_10055E4C0, a1);
}

uint64_t sub_100356C1C(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052ABA0, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100356C88()
{
  sub_10035C530(&qword_10052ABA0, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);

  return Message.hash(into:)();
}

uint64_t sub_100356D08(uint64_t a1)
{
  return sub_100356F64(a1, qword_10055E4D8);
}

uint64_t sub_100356D14()
{
  return sub_1003570BC();
}

uint64_t sub_100356D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003571D8(a1, a2, a3, (void (*)(void))type metadata accessor for Lens_ExploreGrid);
}

unint64_t sub_100356D58()
{
  return 0xD000000000000010;
}

uint64_t (*sub_100356D7C())()
{
  return nullsub_2;
}

uint64_t sub_100356DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC88, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100356E1C@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518050, (uint64_t)qword_10055E4D8, a1);
}

uint64_t sub_100356E40(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AB80, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100356EAC()
{
  sub_10035C530(&qword_10052AB80, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);

  return Message.hash(into:)();
}

uint64_t sub_100356F28(uint64_t *a1, uint64_t *a2)
{
  return sub_10035E434(a1, a2, type metadata accessor for Lens_ExploreGrid) & 1;
}

uint64_t sub_100356F58(uint64_t a1)
{
  return sub_100356F64(a1, qword_10055E4F0);
}

uint64_t sub_100356F64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  sub_1000EEA28(v3, a2);
  sub_10000F378(v3, (uint64_t)a2);
  sub_10000F214(&qword_10052AC38);
  uint64_t v4 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10043D4F0;
  unint64_t v7 = v6 + v5 + v4[14];
  *(void *)(v6 + v5) = 1;
  *(void *)unint64_t v7 = "items";
  *(void *)(v7 + 8) = 5;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v9 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1003570BC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for Lens_Item(0);
        sub_10035C530(&qword_10052ABC0, (void (*)(uint64_t))type metadata accessor for Lens_Item);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1003571AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003571D8(a1, a2, a3, (void (*)(void))type metadata accessor for Lens_ExactMatch);
}

uint64_t sub_1003571D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for Lens_Item(0),
        sub_10035C530(&qword_10052ABC0, (void (*)(uint64_t))type metadata accessor for Lens_Item),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1003572D4@<X0>(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_100357300()
{
  return 0x6178452E736E656CLL;
}

uint64_t sub_100357324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC90, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1003573A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518058, (uint64_t)qword_10055E4F0, a1);
}

uint64_t sub_1003573C4(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AB60, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100357430()
{
  sub_10035C530(&qword_10052AB60, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);

  return Message.hash(into:)();
}

uint64_t sub_1003574AC(uint64_t *a1, uint64_t *a2)
{
  return sub_10035E434(a1, a2, type metadata accessor for Lens_ExactMatch) & 1;
}

uint64_t sub_1003574DC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E508);
  sub_10000F378(v0, (uint64_t)qword_10055E508);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1004416D0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "query";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "action_url";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "image_thumbnail";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1003576EC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_1003577A4();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1003577A4()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_100357854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    unint64_t v11 = v3[3];
    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v12 = v3[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v12 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      uint64_t result = sub_100357950((uint64_t)v3, a1, a2, a3);
      if (!v4)
      {
        type metadata accessor for Lens_RelatedSearch(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_100357950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_RelatedSearch(0);
  sub_10000FB74(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_10051BE80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10051BE80);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_ImageThumbnail);
  sub_10035C530(&qword_10052ABF8, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_100357B4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t sub_100357BDC()
{
  return 0xD000000000000012;
}

uint64_t (*sub_100357C00())()
{
  return nullsub_2;
}

uint64_t sub_100357C24()
{
  return sub_1003576EC();
}

uint64_t sub_100357C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100357854(a1, a2, a3);
}

uint64_t sub_100357C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AC98, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100357CD0@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518060, (uint64_t)qword_10055E508, a1);
}

uint64_t sub_100357CF4(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AB48, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100357D60()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E520);
  sub_10000F378(v0, (uint64_t)qword_10055E520);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10043F400;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "title";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "query";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)unint64_t v11 = "ally_label";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "action_url";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "image_thumbnail";
  *(void *)(v14 + 8) = 15;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100357FE8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
          sub_1003580E8();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_1003580E8()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_100358198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    unint64_t v12 = v5[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      unint64_t v14 = v5[5];
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = v5[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
      {
        unint64_t v16 = v5[7];
        uint64_t v17 = HIBYTE(v16) & 0xF;
        if ((v16 & 0x2000000000000000) == 0) {
          uint64_t v17 = v5[6] & 0xFFFFFFFFFFFFLL;
        }
        if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
        {
          uint64_t result = sub_1003582F8((uint64_t)v5, a1, a2, a3);
          if (!v4)
          {
            type metadata accessor for Lens_Answer(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003582F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Answer(0);
  sub_10000FB74(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_10051BE80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10051BE80);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_ImageThumbnail);
  sub_10035C530(&qword_10052ABF8, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_1003584F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  a2[6] = 0;
  a2[7] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_10035858C()
{
  return 0x736E412E736E656CLL;
}

uint64_t sub_1003585AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10035861C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10035868C()
{
  return sub_100357FE8();
}

uint64_t sub_1003586A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100358198(a1, a2, a3);
}

uint64_t sub_1003586BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052ACA0, (void (*)(uint64_t))type metadata accessor for Lens_Answer);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100358738@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518068, (uint64_t)qword_10055E520, a1);
}

uint64_t sub_10035875C(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AB30, (void (*)(uint64_t))type metadata accessor for Lens_Answer);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1003587C8()
{
  sub_10035C530(&qword_10052AB30, (void (*)(uint64_t))type metadata accessor for Lens_Answer);

  return Message.hash(into:)();
}

uint64_t sub_100358844()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E538);
  sub_10000F378(v0, (uint64_t)qword_10055E538);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1004416D0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "answer";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sources";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "confidence";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100358A48()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Lens_SearchResult(0);
        sub_10035C530(&qword_10052ABA0, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_100358B84()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for Lens_SearchResult(0),
          sub_10035C530(&qword_10052ABA0, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult),
          uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(_DWORD *)(v0 + 24)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for Lens_LlmAnswer(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_100358CD4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = _swiftEmptyArrayStorage;
  *(_DWORD *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_100358D0C()
{
  return 0x6D6C4C2E736E656CLL;
}

uint64_t sub_100358D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100358DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_100358E10())()
{
  return nullsub_2;
}

uint64_t sub_100358E34()
{
  return sub_100358A48();
}

uint64_t sub_100358E4C()
{
  return sub_100358B84();
}

uint64_t sub_100358E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052ACA8, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100358EE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518070, (uint64_t)qword_10055E538, a1);
}

uint64_t sub_100358F04(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AB10, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100358F70()
{
  sub_10035C530(&qword_10052AB10, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);

  return Message.hash(into:)();
}

uint64_t sub_100358FF0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E550);
  sub_10000F378(v0, (uint64_t)qword_10055E550);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F400;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "explore_grid";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "exact_match";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "related_searches";
  *((void *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)unint64_t v14 = "answers";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 7;
  *(void *)uint64_t v15 = "llm_answer";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100359278()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          sub_100359454();
          goto LABEL_6;
        case 2:
          uint64_t v4 = v3;
          sub_100359504();
          goto LABEL_6;
        case 3:
          type metadata accessor for Lens_RelatedSearch(0);
          sub_10035C530(&qword_10052AB48, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
          goto LABEL_5;
        case 4:
          type metadata accessor for Lens_Answer(0);
          sub_10035C530(&qword_10052AB30, (void (*)(uint64_t))type metadata accessor for Lens_Answer);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 7:
          uint64_t v4 = v3;
          sub_1003595B4();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100359454()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_100359504()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_1003595B4()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_100359664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100359824((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    sub_100359A1C((uint64_t)v3, a1, a2, a3);
    if (*(void *)(*v3 + 16))
    {
      type metadata accessor for Lens_RelatedSearch(0);
      sub_10035C530(&qword_10052AB48, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(void *)(v3[1] + 16))
    {
      type metadata accessor for Lens_Answer(0);
      sub_10035C530(&qword_10052AB30, (void (*)(uint64_t))type metadata accessor for Lens_Answer);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    sub_100359C14((uint64_t)v3, a1, a2, a3);
    type metadata accessor for Lens_Result(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_100359824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_100526378);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Result(0);
  sub_10000FB74(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_100526378);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_100526378);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_ExploreGrid);
  sub_10035C530(&qword_10052AB80, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ExploreGrid);
}

uint64_t sub_100359A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_10052ACC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Result(0);
  sub_10000FB74(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_10052ACC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10052ACC0);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_ExactMatch);
  sub_10035C530(&qword_10052AB60, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ExactMatch);
}

uint64_t sub_100359C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_10052ACB8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Result(0);
  sub_10000FB74(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_10052ACB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10052ACB8);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_LlmAnswer);
  sub_10035C530(&qword_10052AB10, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_LlmAnswer);
}

uint64_t sub_100359E0C@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  a2[1] = _swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[7];
  uint64_t v5 = type metadata accessor for Lens_ExploreGrid(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + a1[8];
  uint64_t v7 = type metadata accessor for Lens_ExactMatch(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (char *)a2 + a1[9];
  uint64_t v9 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_100359F34()
{
  return 0x7365522E736E656CLL;
}

uint64_t sub_100359F54()
{
  return sub_100359278();
}

uint64_t sub_100359F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359664(a1, a2, a3);
}

uint64_t sub_100359F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052ACB0, (void (*)(uint64_t))type metadata accessor for Lens_Result);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10035A000@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518078, (uint64_t)qword_10055E550, a1);
}

uint64_t sub_10035A024(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AAF0, (void (*)(uint64_t))type metadata accessor for Lens_Result);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10035A090()
{
  sub_10035C530(&qword_10052AAF0, (void (*)(uint64_t))type metadata accessor for Lens_Result);

  return Message.hash(into:)();
}

uint64_t sub_10035A110()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E568);
  sub_10000F378(v0, (uint64_t)qword_10055E568);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "box";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "result";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "status";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)unint64_t v14 = "result_panel_url";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10035A358()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        sub_10035A44C();
        break;
      case 2:
        sub_10035A4FC();
        break;
      case 3:
        sub_10035A5AC();
        break;
      case 4:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10035A44C()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10035A4FC()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10035A5AC()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10035A65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10035A758((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    sub_10035A950((uint64_t)v3, a1, a2, a3);
    sub_10035AB48((uint64_t)v3, a1, a2, a3);
    unint64_t v9 = v3[1];
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = *v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v10) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    type metadata accessor for Lens_Object(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10035A758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_100526370);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_NormalizedBox(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Object(0);
  sub_10000FB74(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_100526370);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_100526370);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_NormalizedBox);
  sub_10035C530(&qword_10052AC18, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_NormalizedBox);
}

uint64_t sub_10035A950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_100526380);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_Result(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Object(0);
  sub_10000FB74(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_100526380);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_100526380);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_Result);
  sub_10035C530(&qword_10052AAF0, (void (*)(uint64_t))type metadata accessor for Lens_Result);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_Result);
}

uint64_t sub_10035AB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_100526368);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_Status(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Lens_Object(0);
  sub_10000FB74(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_100526368);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_100526368);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_Status);
  sub_10035C530(&qword_10052AAB0, (void (*)(uint64_t))type metadata accessor for Lens_Status);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_Status);
}

uint64_t sub_10035AD44@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + a1[6];
  uint64_t v5 = type metadata accessor for Lens_NormalizedBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + a1[7];
  uint64_t v7 = type metadata accessor for Lens_Result(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (char *)a2 + a1[8];
  uint64_t v9 = type metadata accessor for Lens_Status(0);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

uint64_t sub_10035AE68()
{
  return 0x6A624F2E736E656CLL;
}

uint64_t sub_10035AE88()
{
  return sub_10035A358();
}

uint64_t sub_10035AEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10035A65C(a1, a2, a3);
}

uint64_t sub_10035AEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052ACE0, (void (*)(uint64_t))type metadata accessor for Lens_Object);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10035AF34@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518080, (uint64_t)qword_10055E568, a1);
}

uint64_t sub_10035AF58(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AAD0, (void (*)(uint64_t))type metadata accessor for Lens_Object);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10035AFC4()
{
  sub_10035C530(&qword_10052AAD0, (void (*)(uint64_t))type metadata accessor for Lens_Object);

  return Message.hash(into:)();
}

uint64_t sub_10035B040()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E580);
  sub_10000F378(v0, (uint64_t)qword_10055E580);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100440F30;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "code";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error_message";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10035B200()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        sub_100361060();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10035B2E4()
{
  if (!*v0
    || (sub_100361060(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = v0[3];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for Lens_Status(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t sub_10035B3DC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_10035B410()
{
  return 0x6174532E736E656CLL;
}

uint64_t sub_10035B430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10035B4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10035B510()
{
  return sub_10035B200();
}

uint64_t sub_10035B528()
{
  return sub_10035B2E4();
}

uint64_t sub_10035B540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AD00, (void (*)(uint64_t))type metadata accessor for Lens_Status);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10035B5BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518088, (uint64_t)qword_10055E580, a1);
}

uint64_t sub_10035B5E0(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AAB0, (void (*)(uint64_t))type metadata accessor for Lens_Status);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10035B64C()
{
  sub_10035C530(&qword_10052AAB0, (void (*)(uint64_t))type metadata accessor for Lens_Status);

  return Message.hash(into:)();
}

uint64_t sub_10035B6C8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E598);
  sub_10000F378(v0, (uint64_t)qword_10055E598);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F400;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "OK";
  *(void *)(v6 + 8) = 2;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SENSITIVE_NO_RESULT";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "NO_RESULT";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  unint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)unint64_t v14 = "INTERNAL";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "INVALID_INPUT";
  *(void *)(v15 + 8) = 13;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10035B944@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518090, (uint64_t)qword_10055E598, a1);
}

uint64_t sub_10035B968()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E5B0);
  sub_10000F378(v0, (uint64_t)qword_10055E5B0);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100440F30;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "objects";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "status";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10035BB20()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_10035BC3C();
      }
      else if (result == 1)
      {
        type metadata accessor for Lens_Object(0);
        sub_10035C530(&qword_10052AAD0, (void (*)(uint64_t))type metadata accessor for Lens_Object);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10035BC3C()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10035BCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*(void *)v3 + 16)
    || (type metadata accessor for Lens_Object(0),
        sub_10035C530(&qword_10052AAD0, (void (*)(uint64_t))type metadata accessor for Lens_Object),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v4))
  {
    uint64_t result = sub_10035BDF8(v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for Lens_FetchVisualDataResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t sub_10035BDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_100526368);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_Status(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t VisualDataResponse = type metadata accessor for Lens_FetchVisualDataResponse(0);
  sub_10000FB74(a1 + *(int *)(VisualDataResponse + 24), (uint64_t)v7, &qword_100526368);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_100526368);
  }
  sub_1003609F4((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_Status);
  sub_10035C530(&qword_10052AAB0, (void (*)(uint64_t))type metadata accessor for Lens_Status);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_Status);
}

uint64_t sub_10035BFF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Lens_Status(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t sub_10035C080()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_10035C09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10035C10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10035C17C()
{
  return sub_10035BB20();
}

uint64_t sub_10035C194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10035BCEC(a1, a2, a3);
}

uint64_t sub_10035C1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035C530(&qword_10052AD10, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10035C228@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_100518098, (uint64_t)qword_10055E5B0, a1);
}

uint64_t sub_10035C24C@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_10000F378(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_10035C2E8(uint64_t a1)
{
  uint64_t v2 = sub_10035C530(&qword_10052AA90, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);

  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_10035C354()
{
  return Hasher._finalize()();
}

uint64_t sub_10035C3AC()
{
  sub_10035C530(&qword_10052AA90, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);

  return Message.hash(into:)();
}

Swift::Int sub_10035C428()
{
  return Hasher._finalize()();
}

uint64_t sub_10035C480()
{
  return sub_10035C530(&qword_10052AA88, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);
}

uint64_t type metadata accessor for Lens_FetchVisualDataResponse(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052B310);
}

uint64_t sub_10035C4E8()
{
  return sub_10035C530(&qword_10052AA90, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);
}

uint64_t sub_10035C530(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10035C578()
{
  return sub_10035C530(&qword_10052AA98, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);
}

uint64_t sub_10035C5C0()
{
  return sub_10035C530(&qword_10052AAA0, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);
}

uint64_t sub_10035C608()
{
  return sub_10035C530(&qword_10052AAA8, (void (*)(uint64_t))type metadata accessor for Lens_Status);
}

uint64_t type metadata accessor for Lens_Status(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052B278);
}

uint64_t sub_10035C670()
{
  return sub_10035C530(&qword_10052AAB0, (void (*)(uint64_t))type metadata accessor for Lens_Status);
}

uint64_t sub_10035C6B8()
{
  return sub_10035C530(&qword_10052AAB8, (void (*)(uint64_t))type metadata accessor for Lens_Status);
}

uint64_t sub_10035C700()
{
  return sub_10035C530(&qword_10052AAC0, (void (*)(uint64_t))type metadata accessor for Lens_Status);
}

uint64_t sub_10035C748()
{
  return sub_10035C530(&qword_10052AAC8, (void (*)(uint64_t))type metadata accessor for Lens_Object);
}

uint64_t type metadata accessor for Lens_Object(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052B1C0);
}

uint64_t sub_10035C7B0()
{
  return sub_10035C530(&qword_10052AAD0, (void (*)(uint64_t))type metadata accessor for Lens_Object);
}

uint64_t sub_10035C7F8()
{
  return sub_10035C530(&qword_10052AAD8, (void (*)(uint64_t))type metadata accessor for Lens_Object);
}

uint64_t sub_10035C840()
{
  return sub_10035C530(&qword_10052AAE0, (void (*)(uint64_t))type metadata accessor for Lens_Object);
}

uint64_t sub_10035C888()
{
  return sub_10035C530(&qword_10052AAE8, (void (*)(uint64_t))type metadata accessor for Lens_Result);
}

uint64_t type metadata accessor for Lens_Result(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052B108);
}

uint64_t sub_10035C8F0()
{
  return sub_10035C530(&qword_10052AAF0, (void (*)(uint64_t))type metadata accessor for Lens_Result);
}

uint64_t sub_10035C938()
{
  return sub_10035C530(&qword_10052AAF8, (void (*)(uint64_t))type metadata accessor for Lens_Result);
}

uint64_t sub_10035C980()
{
  return sub_10035C530(&qword_10052AB00, (void (*)(uint64_t))type metadata accessor for Lens_Result);
}

uint64_t sub_10035C9C8()
{
  return sub_10035C530(&qword_10052AB08, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);
}

uint64_t type metadata accessor for Lens_LlmAnswer(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052B070);
}

uint64_t sub_10035CA30()
{
  return sub_10035C530(&qword_10052AB10, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);
}

uint64_t sub_10035CA78()
{
  return sub_10035C530(&qword_10052AB18, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);
}

uint64_t sub_10035CAC0()
{
  return sub_10035C530(&qword_10052AB20, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);
}

uint64_t sub_10035CB08()
{
  return sub_10035C530(&qword_10052AB28, (void (*)(uint64_t))type metadata accessor for Lens_Answer);
}

uint64_t type metadata accessor for Lens_Answer(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052AFD0);
}

uint64_t sub_10035CB70()
{
  return sub_10035C530(&qword_10052AB30, (void (*)(uint64_t))type metadata accessor for Lens_Answer);
}

uint64_t sub_10035CBB8()
{
  return sub_10035C530(&qword_10052AB38, (void (*)(uint64_t))type metadata accessor for Lens_Answer);
}

uint64_t sub_10035CC00()
{
  return sub_10035C530(&qword_10052AB40, (void (*)(uint64_t))type metadata accessor for Lens_Answer);
}

uint64_t sub_10035CC48()
{
  return sub_10035C530(&qword_10052AB48, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
}

uint64_t type metadata accessor for Lens_RelatedSearch(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052B3A8);
}

uint64_t sub_10035CCB0()
{
  return sub_10035C530(&qword_1005285C0, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
}

uint64_t sub_10035CCF8()
{
  return sub_10035C530(&qword_10052AB50, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
}

uint64_t sub_10035CD40()
{
  return sub_10035C530(&qword_10052AB58, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);
}

uint64_t type metadata accessor for Lens_ExactMatch(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052AF40);
}

uint64_t sub_10035CDA8()
{
  return sub_10035C530(&qword_10052AB60, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);
}

uint64_t sub_10035CDF0()
{
  return sub_10035C530(&qword_10052AB68, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);
}

uint64_t sub_10035CE38()
{
  return sub_10035C530(&qword_10052AB70, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);
}

uint64_t sub_10035CE80()
{
  return sub_10035C530(&qword_10052AB78, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);
}

uint64_t type metadata accessor for Lens_ExploreGrid(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052AEB0);
}

uint64_t sub_10035CEE8()
{
  return sub_10035C530(&qword_10052AB80, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);
}

uint64_t sub_10035CF30()
{
  return sub_10035C530(&qword_10052AB88, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);
}

uint64_t sub_10035CF78()
{
  return sub_10035C530(&qword_10052AB90, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);
}

uint64_t sub_10035CFC0()
{
  return sub_10035C530(&qword_10052AB98, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);
}

uint64_t type metadata accessor for Lens_SearchResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052AE10);
}

uint64_t sub_10035D028()
{
  return sub_10035C530(&qword_10052ABA0, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);
}

uint64_t sub_10035D070()
{
  return sub_10035C530(&qword_10052ABA8, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);
}

uint64_t sub_10035D0B8()
{
  return sub_10035C530(&qword_10052ABB0, (void (*)(uint64_t))type metadata accessor for Lens_SearchResult);
}

uint64_t sub_10035D100()
{
  return sub_10035C530(&qword_10052ABB8, (void (*)(uint64_t))type metadata accessor for Lens_Item);
}

uint64_t sub_10035D148()
{
  return sub_10035C530(&qword_10052ABC0, (void (*)(uint64_t))type metadata accessor for Lens_Item);
}

uint64_t sub_10035D190()
{
  return sub_10035C530(&qword_1005285B8, (void (*)(uint64_t))type metadata accessor for Lens_Item);
}

uint64_t sub_10035D1D8()
{
  return sub_10035C530(&qword_10052ABC8, (void (*)(uint64_t))type metadata accessor for Lens_Item);
}

uint64_t sub_10035D220()
{
  return sub_10035C530(&qword_10052ABD0, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);
}

uint64_t sub_10035D268()
{
  return sub_10035C530(&qword_10052ABD8, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);
}

uint64_t sub_10035D2B0()
{
  return sub_10035C530(&qword_10052ABE0, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);
}

uint64_t sub_10035D2F8()
{
  return sub_10035C530(&qword_10052ABE8, (void (*)(uint64_t))type metadata accessor for Lens_ShoppableBadge);
}

uint64_t sub_10035D340()
{
  return sub_10035C530(&qword_10052ABF0, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_10035D388()
{
  return sub_10035C530(&qword_10052ABF8, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_10035D3D0()
{
  return sub_10035C530(&qword_10052AC00, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_10035D418()
{
  return sub_10035C530(&qword_10052AC08, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_10035D460()
{
  return sub_10035C530(&qword_10052AC10, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);
}

uint64_t type metadata accessor for Lens_NormalizedBox(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052AD70);
}

uint64_t sub_10035D4C8()
{
  return sub_10035C530(&qword_10052AC18, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);
}

uint64_t sub_10035D510()
{
  return sub_10035C530(&qword_10052AC20, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);
}

uint64_t sub_10035D558()
{
  return sub_10035C530(&qword_10052AC28, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);
}

uint64_t sub_10035D5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for Lens_Item(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), char v14 = sub_1003555EC(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v7, a2, v4);
    sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10035D78C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4);
  uint64_t v49 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = type metadata accessor for Lens_Status(0);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000F214(&qword_10052ACE8);
  __chkstk_darwin(v12);
  char v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100526368);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v44 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = a1;
  if ((sub_1003E1EF8(*a1, *a2) & 1) == 0) {
    goto LABEL_8;
  }
  double v47 = v8;
  uint64_t v48 = v17;
  uint64_t v45 = v11;
  uint64_t VisualDataResponse = type metadata accessor for Lens_FetchVisualDataResponse(0);
  sub_10000FB74((uint64_t)a1 + *(int *)(VisualDataResponse + 24), (uint64_t)v23, &qword_100526368);
  uint64_t v46 = VisualDataResponse;
  uint64_t v26 = *(int *)(VisualDataResponse + 24);
  uint64_t v27 = a2;
  sub_10000FB74((uint64_t)a2 + v26, (uint64_t)v20, &qword_100526368);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000FB74((uint64_t)v23, (uint64_t)v14, &qword_100526368);
  sub_10000FB74((uint64_t)v20, v28, &qword_100526368);
  uint64_t v29 = v53;
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  if (v30((uint64_t)v14, 1, v53) == 1)
  {
    sub_10000FBD8((uint64_t)v20, &qword_100526368);
    sub_10000FBD8((uint64_t)v23, &qword_100526368);
    if (v30(v28, 1, v29) == 1)
    {
      sub_10000FBD8((uint64_t)v14, &qword_100526368);
LABEL_11:
      uint64_t v36 = v46;
      uint64_t v37 = v47;
      uint64_t v39 = v50;
      uint64_t v38 = v51;
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
      v40(v47, (char *)v24 + *(int *)(v46 + 20), v51);
      uint64_t v41 = (char *)v27 + *(int *)(v36 + 20);
      unint64_t v42 = v49;
      v40(v49, v41, v38);
      sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v38);
      v43(v37, v38);
      return v32 & 1;
    }
    goto LABEL_7;
  }
  unint64_t v31 = v48;
  sub_10000FB74((uint64_t)v14, (uint64_t)v48, &qword_100526368);
  if (v30(v28, 1, v29) == 1)
  {
    sub_10000FBD8((uint64_t)v20, &qword_100526368);
    sub_10000FBD8((uint64_t)v23, &qword_100526368);
    sub_100360A5C((uint64_t)v31, type metadata accessor for Lens_Status);
LABEL_7:
    sub_10000FBD8((uint64_t)v14, &qword_10052ACE8);
    goto LABEL_8;
  }
  uint64_t v34 = v45;
  sub_1003609F4(v28, (uint64_t)v45, type metadata accessor for Lens_Status);
  char v35 = sub_10035E7E0(v31, v34);
  sub_100360A5C((uint64_t)v34, type metadata accessor for Lens_Status);
  sub_10000FBD8((uint64_t)v20, &qword_100526368);
  sub_10000FBD8((uint64_t)v23, &qword_100526368);
  sub_100360A5C((uint64_t)v31, type metadata accessor for Lens_Status);
  sub_10000FBD8((uint64_t)v14, &qword_100526368);
  if (v35) {
    goto LABEL_11;
  }
LABEL_8:
  char v32 = 0;
  return v32 & 1;
}

uint64_t sub_10035DCA4(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*((void *)a1 + 6) == *((void *)a2 + 6) && *((void *)a1 + 7) == *((void *)a2 + 7)
          || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          uint64_t v14 = type metadata accessor for Lens_SearchResult(0);
          uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v15(v10, &a1[*(int *)(v14 + 32)], v4);
          v15(v7, &a2[*(int *)(v14 + 32)], v4);
          sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
          v16(v7, v4);
          v16(v10, v4);
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_10035DEDC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v45 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v43 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10052AC78);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v14 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v39 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v39 - v20;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v41 = v4;
      uint64_t v23 = type metadata accessor for Lens_RelatedSearch(0);
      sub_10000FB74((uint64_t)a1 + *(int *)(v23 + 28), (uint64_t)v21, &qword_10051BE80);
      uint64_t v40 = v23;
      sub_10000FB74((uint64_t)a2 + *(int *)(v23 + 28), (uint64_t)v18, &qword_10051BE80);
      uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 48)];
      sub_10000FB74((uint64_t)v21, (uint64_t)v13, &qword_10051BE80);
      sub_10000FB74((uint64_t)v18, v24, &qword_10051BE80);
      char v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v25((uint64_t)v13, 1, v8) == 1)
      {
        sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
        sub_10000FBD8((uint64_t)v21, &qword_10051BE80);
        if (v25(v24, 1, v8) == 1)
        {
          sub_10000FBD8((uint64_t)v13, &qword_10051BE80);
LABEL_14:
          uint64_t v29 = v40;
          uint64_t v30 = (char *)a1 + *(int *)(v40 + 24);
          uint64_t v31 = v45;
          char v32 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
          uint64_t v33 = v43;
          uint64_t v34 = v41;
          v32(v43, v30, v41);
          char v35 = (char *)a2 + *(int *)(v29 + 24);
          uint64_t v36 = v44;
          v32(v44, v35, v34);
          sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
          v37(v36, v34);
          v37(v33, v34);
          return v22 & 1;
        }
      }
      else
      {
        uint64_t v26 = v46;
        sub_10000FB74((uint64_t)v13, v46, &qword_10051BE80);
        if (v25(v24, 1, v8) != 1)
        {
          uint64_t v27 = v42;
          sub_1003609F4(v24, v42, type metadata accessor for Lens_ImageThumbnail);
          char v28 = sub_100360754(v26, v27);
          sub_100360A5C(v27, type metadata accessor for Lens_ImageThumbnail);
          sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
          sub_10000FBD8((uint64_t)v21, &qword_10051BE80);
          sub_100360A5C(v26, type metadata accessor for Lens_ImageThumbnail);
          sub_10000FBD8((uint64_t)v13, &qword_10051BE80);
          if (v28) {
            goto LABEL_14;
          }
LABEL_15:
          char v22 = 0;
          return v22 & 1;
        }
        sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
        sub_10000FBD8((uint64_t)v21, &qword_10051BE80);
        sub_100360A5C(v26, type metadata accessor for Lens_ImageThumbnail);
      }
      sub_10000FBD8((uint64_t)v13, &qword_10052AC78);
      goto LABEL_15;
    }
  }
  return v22 & 1;
}

uint64_t sub_10035E434(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v18 - v11;
  if (sub_1003E29C4(*a1, *a2))
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v14(v12, (char *)a1 + *(int *)(v13 + 20), v6);
    v14(v9, (char *)a2 + *(int *)(v13 + 20), v6);
    sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v9, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10035E5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((sub_1003E2C88(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0
      && *(float *)(a1 + 24) == *(float *)(a2 + 24))
    {
      uint64_t v13 = type metadata accessor for Lens_LlmAnswer(0);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v14(v10, a1 + *(int *)(v13 + 28), v4);
      v14(v7, a2 + *(int *)(v13 + 28), v4);
      sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v7, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t sub_10035E7E0(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_6;
        }
        goto LABEL_4;
      case 2:
        if (v11 == 2) {
          goto LABEL_6;
        }
        goto LABEL_4;
      case 3:
        if (v11 == 3) {
          goto LABEL_6;
        }
        goto LABEL_4;
      case 4:
        if (v11 == 4) {
          goto LABEL_6;
        }
        goto LABEL_4;
      default:
        if (v11) {
          goto LABEL_4;
        }
        goto LABEL_6;
    }
  }
  if (v11 == v12)
  {
LABEL_6:
    BOOL v14 = *((void *)a1 + 2) == a2[2] && *((void *)a1 + 3) == a2[3];
    if (v14 || (char v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v15 = type metadata accessor for Lens_Status(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, &a1[*(int *)(v15 + 24)], v4);
      v16(v7, (char *)a2 + *(int *)(v15 + 24), v4);
      sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v7, v4);
      v17(v10, v4);
    }
  }
  else
  {
LABEL_4:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_10035EA30(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *((void *)a2 + 4))
      {
        if (*((void *)a1 + 5) == *((void *)a2 + 5) && *((void *)a1 + 6) == *((void *)a2 + 6)
          || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          uint64_t v14 = type metadata accessor for Lens_ShoppableBadge(0);
          uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v15(v10, &a1[*(int *)(v14 + 32)], v4);
          v15(v7, &a2[*(int *)(v14 + 32)], v4);
          sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
          v16(v7, v4);
          v16(v10, v4);
        }
      }
      else
      {
        char v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_10035EC58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  uint64_t v92 = type metadata accessor for UnknownStorage();
  uint64_t v82 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v81 = (char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v80 = (char *)&v79 - v4;
  uint64_t v5 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v79 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000F214(&qword_10052ACC8);
  __chkstk_darwin(v84);
  uint64_t v88 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052ACB8);
  __chkstk_darwin(v8 - 8);
  uint64_t v83 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v89 = (uint64_t)&v79 - v11;
  __chkstk_darwin(v12);
  uint64_t v85 = (uint64_t)&v79 - v13;
  uint64_t v97 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v94 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  char v90 = (uint64_t *)((char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v93 = sub_10000F214(&qword_10052ACD0);
  __chkstk_darwin(v93);
  uint64_t v98 = (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10052ACC0);
  __chkstk_darwin(v16 - 8);
  uint64_t v91 = (uint64_t *)((char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  uint64_t v95 = (uint64_t)&v79 - v19;
  __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)&v79 - v21;
  uint64_t v22 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  char v25 = (uint64_t *)((char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = sub_10000F214(&qword_10052ACD8);
  uint64_t v27 = v26 - 8;
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000F214(&qword_100526378);
  __chkstk_darwin(v30 - 8);
  char v32 = (uint64_t *)((char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v33);
  char v35 = (char *)&v79 - v34;
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v79 - v37;
  uint64_t v39 = type metadata accessor for Lens_Result(0);
  sub_10000FB74((uint64_t)v100 + *(int *)(v39 + 28), (uint64_t)v38, &qword_100526378);
  uint64_t v99 = (int *)v39;
  sub_10000FB74((uint64_t)v101 + *(int *)(v39 + 28), (uint64_t)v35, &qword_100526378);
  uint64_t v40 = (uint64_t)&v29[*(int *)(v27 + 56)];
  sub_10000FB74((uint64_t)v38, (uint64_t)v29, &qword_100526378);
  sub_10000FB74((uint64_t)v35, v40, &qword_100526378);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v41((uint64_t)v29, 1, v22) == 1)
  {
    sub_10000FBD8((uint64_t)v35, &qword_100526378);
    sub_10000FBD8((uint64_t)v38, &qword_100526378);
    if (v41(v40, 1, v22) == 1)
    {
      sub_10000FBD8((uint64_t)v29, &qword_100526378);
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v51 = &qword_10052ACD8;
    uint64_t v52 = (uint64_t)v29;
LABEL_26:
    sub_10000FBD8(v52, v51);
    goto LABEL_27;
  }
  sub_10000FB74((uint64_t)v29, (uint64_t)v32, &qword_100526378);
  if (v41(v40, 1, v22) == 1)
  {
    sub_10000FBD8((uint64_t)v35, &qword_100526378);
    sub_10000FBD8((uint64_t)v38, &qword_100526378);
    sub_100360A5C((uint64_t)v32, type metadata accessor for Lens_ExploreGrid);
    goto LABEL_9;
  }
  sub_1003609F4(v40, (uint64_t)v25, type metadata accessor for Lens_ExploreGrid);
  if ((sub_1003E29C4(*v32, *v25) & 1) == 0)
  {
    sub_100360A5C((uint64_t)v25, type metadata accessor for Lens_ExploreGrid);
    uint64_t v55 = &qword_100526378;
    sub_10000FBD8((uint64_t)v35, &qword_100526378);
    sub_10000FBD8((uint64_t)v38, &qword_100526378);
    sub_100360A5C((uint64_t)v32, type metadata accessor for Lens_ExploreGrid);
    uint64_t v52 = (uint64_t)v29;
    goto LABEL_25;
  }
  sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_100360A5C((uint64_t)v25, type metadata accessor for Lens_ExploreGrid);
  sub_10000FBD8((uint64_t)v35, &qword_100526378);
  sub_10000FBD8((uint64_t)v38, &qword_100526378);
  sub_100360A5C((uint64_t)v32, type metadata accessor for Lens_ExploreGrid);
  sub_10000FBD8((uint64_t)v29, &qword_100526378);
  if ((v53 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_4:
  uint64_t v42 = v99;
  uint64_t v43 = v100;
  uint64_t v44 = v96;
  sub_10000FB74((uint64_t)v100 + v99[8], v96, &qword_10052ACC0);
  uint64_t v45 = v101;
  uint64_t v46 = v95;
  sub_10000FB74((uint64_t)v101 + v42[8], v95, &qword_10052ACC0);
  uint64_t v47 = v98;
  uint64_t v48 = v98 + *(int *)(v93 + 48);
  sub_10000FB74(v44, v98, &qword_10052ACC0);
  sub_10000FB74(v46, v48, &qword_10052ACC0);
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  uint64_t v50 = v97;
  if (v49(v47, 1, v97) != 1)
  {
    uint64_t v54 = v91;
    sub_10000FB74(v47, (uint64_t)v91, &qword_10052ACC0);
    if (v49(v48, 1, v50) == 1)
    {
      sub_10000FBD8(v46, &qword_10052ACC0);
      sub_10000FBD8(v44, &qword_10052ACC0);
      sub_100360A5C((uint64_t)v54, type metadata accessor for Lens_ExactMatch);
      goto LABEL_15;
    }
    uint64_t v56 = v90;
    sub_1003609F4(v48, (uint64_t)v90, type metadata accessor for Lens_ExactMatch);
    if (sub_1003E29C4(*v54, *v56))
    {
      sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100360A5C((uint64_t)v56, type metadata accessor for Lens_ExactMatch);
      sub_10000FBD8(v46, &qword_10052ACC0);
      sub_10000FBD8(v44, &qword_10052ACC0);
      sub_100360A5C((uint64_t)v54, type metadata accessor for Lens_ExactMatch);
      sub_10000FBD8(v47, &qword_10052ACC0);
      if ((v57 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    sub_100360A5C((uint64_t)v56, type metadata accessor for Lens_ExactMatch);
    uint64_t v55 = &qword_10052ACC0;
    sub_10000FBD8(v46, &qword_10052ACC0);
    sub_10000FBD8(v44, &qword_10052ACC0);
    sub_100360A5C((uint64_t)v54, type metadata accessor for Lens_ExactMatch);
    uint64_t v52 = v47;
LABEL_25:
    uint64_t v51 = v55;
    goto LABEL_26;
  }
  sub_10000FBD8(v46, &qword_10052ACC0);
  sub_10000FBD8(v44, &qword_10052ACC0);
  if (v49(v48, 1, v50) != 1)
  {
LABEL_15:
    uint64_t v51 = &qword_10052ACD0;
    uint64_t v52 = v47;
    goto LABEL_26;
  }
  sub_10000FBD8(v47, &qword_10052ACC0);
LABEL_19:
  if ((sub_1003E2C34(*v43, *v45) & 1) == 0 || (sub_1003E3200(v43[1], v45[1]) & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v58 = v99;
  uint64_t v59 = v85;
  sub_10000FB74((uint64_t)v43 + v99[9], v85, &qword_10052ACB8);
  uint64_t v60 = v89;
  sub_10000FB74((uint64_t)v45 + v58[9], v89, &qword_10052ACB8);
  uint64_t v61 = v88;
  uint64_t v62 = v88 + *(int *)(v84 + 48);
  sub_10000FB74(v59, v88, &qword_10052ACB8);
  sub_10000FB74(v60, v62, &qword_10052ACB8);
  uint64_t v63 = v87;
  char v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  if (v64(v61, 1, v87) == 1)
  {
    sub_10000FBD8(v60, &qword_10052ACB8);
    sub_10000FBD8(v59, &qword_10052ACB8);
    if (v64(v62, 1, v63) == 1)
    {
      sub_10000FBD8(v61, &qword_10052ACB8);
LABEL_33:
      uint64_t v70 = v99;
      uint64_t v71 = (char *)v43 + v99[6];
      uint64_t v72 = v82;
      uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      uint64_t v74 = v80;
      uint64_t v75 = v92;
      v73(v80, v71, v92);
      uint64_t v76 = (char *)v45 + v70[6];
      uint64_t v77 = v81;
      v73(v81, v76, v75);
      sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v78 = *(void (**)(char *, uint64_t))(v72 + 8);
      v78(v77, v75);
      v78(v74, v75);
      return v65 & 1;
    }
    goto LABEL_31;
  }
  uint64_t v67 = v83;
  sub_10000FB74(v61, v83, &qword_10052ACB8);
  if (v64(v62, 1, v63) == 1)
  {
    sub_10000FBD8(v89, &qword_10052ACB8);
    sub_10000FBD8(v59, &qword_10052ACB8);
    sub_100360A5C(v67, type metadata accessor for Lens_LlmAnswer);
LABEL_31:
    uint64_t v51 = &qword_10052ACC8;
    uint64_t v52 = v61;
    goto LABEL_26;
  }
  uint64_t v68 = v79;
  sub_1003609F4(v62, v79, type metadata accessor for Lens_LlmAnswer);
  char v69 = sub_10035E5F4(v67, v68);
  sub_100360A5C(v68, type metadata accessor for Lens_LlmAnswer);
  sub_10000FBD8(v89, &qword_10052ACB8);
  sub_10000FBD8(v59, &qword_10052ACB8);
  sub_100360A5C(v67, type metadata accessor for Lens_LlmAnswer);
  sub_10000FBD8(v61, &qword_10052ACB8);
  if (v69) {
    goto LABEL_33;
  }
LABEL_27:
  char v65 = 0;
  return v65 & 1;
}

uint64_t sub_10035F98C(float *a1, float *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3])
  {
    uint64_t v11 = type metadata accessor for Lens_NormalizedBox(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 32), v4);
    v12(v7, (char *)a2 + *(int *)(v11 + 32), v4);
    sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_10035FB74(char *a1, void *a2)
{
  v102 = a2;
  v103 = a1;
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v84 = *(void *)(v2 - 8);
  uint64_t v85 = v2;
  __chkstk_darwin(v2);
  uint64_t v83 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v82 = (char *)&v81 - v5;
  uint64_t v88 = type metadata accessor for Lens_Status(0);
  uint64_t v96 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v81 = (uint64_t *)((char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = sub_10000F214(&qword_10052ACE8);
  __chkstk_darwin(v87);
  uint64_t v97 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100526368);
  __chkstk_darwin(v8 - 8);
  uint64_t v95 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v93 = (char *)&v81 - v11;
  __chkstk_darwin(v12);
  uint64_t v94 = (char *)&v81 - v13;
  uint64_t v14 = type metadata accessor for Lens_Result(0);
  uint64_t v91 = *(void *)(v14 - 8);
  uint64_t v92 = v14;
  __chkstk_darwin(v14);
  uint64_t v86 = (uint64_t *)((char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v90 = sub_10000F214(&qword_10052ACF0);
  __chkstk_darwin(v90);
  uint64_t v101 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_100526380);
  __chkstk_darwin(v17 - 8);
  uint64_t v89 = (uint64_t *)((char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v99 = (uint64_t)&v81 - v20;
  __chkstk_darwin(v21);
  uint64_t v100 = (uint64_t)&v81 - v22;
  uint64_t v23 = type metadata accessor for Lens_NormalizedBox(0);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (float *)((char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = sub_10000F214(&qword_10052ACF8);
  uint64_t v28 = v27 - 8;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000F214(&qword_100526370);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (float *)((char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v81 - v35;
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v81 - v38;
  uint64_t v40 = type metadata accessor for Lens_Object(0);
  sub_10000FB74((uint64_t)&v103[*(int *)(v40 + 24)], (uint64_t)v39, &qword_100526370);
  uint64_t v98 = (int *)v40;
  sub_10000FB74((uint64_t)v102 + *(int *)(v40 + 24), (uint64_t)v36, &qword_100526370);
  uint64_t v41 = (uint64_t)&v30[*(int *)(v28 + 56)];
  sub_10000FB74((uint64_t)v39, (uint64_t)v30, &qword_100526370);
  sub_10000FB74((uint64_t)v36, v41, &qword_100526370);
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v42((uint64_t)v30, 1, v23) == 1)
  {
    sub_10000FBD8((uint64_t)v36, &qword_100526370);
    sub_10000FBD8((uint64_t)v39, &qword_100526370);
    if (v42(v41, 1, v23) == 1)
    {
      sub_10000FBD8((uint64_t)v30, &qword_100526370);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v43 = &qword_10052ACF8;
    uint64_t v44 = (uint64_t)v30;
LABEL_21:
    sub_10000FBD8(v44, v43);
    goto LABEL_22;
  }
  sub_10000FB74((uint64_t)v30, (uint64_t)v33, &qword_100526370);
  if (v42(v41, 1, v23) == 1)
  {
    sub_10000FBD8((uint64_t)v36, &qword_100526370);
    sub_10000FBD8((uint64_t)v39, &qword_100526370);
    sub_100360A5C((uint64_t)v33, type metadata accessor for Lens_NormalizedBox);
    goto LABEL_6;
  }
  sub_1003609F4(v41, (uint64_t)v26, type metadata accessor for Lens_NormalizedBox);
  char v45 = sub_10035F98C(v33, v26);
  sub_100360A5C((uint64_t)v26, type metadata accessor for Lens_NormalizedBox);
  sub_10000FBD8((uint64_t)v36, &qword_100526370);
  sub_10000FBD8((uint64_t)v39, &qword_100526370);
  sub_100360A5C((uint64_t)v33, type metadata accessor for Lens_NormalizedBox);
  sub_10000FBD8((uint64_t)v30, &qword_100526370);
  if ((v45 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_8:
  uint64_t v46 = v98;
  uint64_t v47 = v100;
  sub_10000FB74((uint64_t)&v103[v98[7]], v100, &qword_100526380);
  uint64_t v48 = v99;
  sub_10000FB74((uint64_t)v102 + v46[7], v99, &qword_100526380);
  uint64_t v49 = v101;
  uint64_t v50 = v101 + *(int *)(v90 + 48);
  sub_10000FB74(v47, v101, &qword_100526380);
  sub_10000FB74(v48, v50, &qword_100526380);
  uint64_t v51 = v92;
  uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (v52(v49, 1, v92) == 1)
  {
    sub_10000FBD8(v48, &qword_100526380);
    sub_10000FBD8(v47, &qword_100526380);
    int v53 = v52(v50, 1, v51);
    uint64_t v55 = v96;
    uint64_t v54 = (uint64_t)v97;
    uint64_t v57 = (uint64_t)v94;
    uint64_t v56 = v95;
    uint64_t v58 = (uint64_t)v93;
    if (v53 == 1)
    {
      sub_10000FBD8(v101, &qword_100526380);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v59 = v89;
  sub_10000FB74(v49, (uint64_t)v89, &qword_100526380);
  int v60 = v52(v50, 1, v51);
  uint64_t v55 = v96;
  uint64_t v54 = (uint64_t)v97;
  uint64_t v57 = (uint64_t)v94;
  uint64_t v56 = v95;
  uint64_t v58 = (uint64_t)v93;
  if (v60 == 1)
  {
    sub_10000FBD8(v99, &qword_100526380);
    sub_10000FBD8(v100, &qword_100526380);
    sub_100360A5C((uint64_t)v59, type metadata accessor for Lens_Result);
LABEL_13:
    uint64_t v43 = &qword_10052ACF0;
    uint64_t v44 = v101;
    goto LABEL_21;
  }
  uint64_t v61 = v86;
  sub_1003609F4(v50, (uint64_t)v86, type metadata accessor for Lens_Result);
  char v62 = sub_10035EC58(v59, v61);
  sub_100360A5C((uint64_t)v61, type metadata accessor for Lens_Result);
  sub_10000FBD8(v99, &qword_100526380);
  sub_10000FBD8(v100, &qword_100526380);
  sub_100360A5C((uint64_t)v59, type metadata accessor for Lens_Result);
  sub_10000FBD8(v49, &qword_100526380);
  if ((v62 & 1) == 0)
  {
LABEL_22:
    char v68 = 0;
    return v68 & 1;
  }
LABEL_15:
  uint64_t v63 = v98;
  sub_10000FB74((uint64_t)&v103[v98[8]], v57, &qword_100526368);
  char v64 = v102;
  sub_10000FB74((uint64_t)v102 + v63[8], v58, &qword_100526368);
  uint64_t v65 = v54 + *(int *)(v87 + 48);
  sub_10000FB74(v57, v54, &qword_100526368);
  sub_10000FB74(v58, v65, &qword_100526368);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  uint64_t v67 = v88;
  if (v66(v54, 1, v88) == 1)
  {
    sub_10000FBD8(v58, &qword_100526368);
    sub_10000FBD8(v57, &qword_100526368);
    if (v66(v65, 1, v67) == 1)
    {
      sub_10000FBD8(v54, &qword_100526368);
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  sub_10000FB74(v54, (uint64_t)v56, &qword_100526368);
  if (v66(v65, 1, v67) == 1)
  {
    sub_10000FBD8(v58, &qword_100526368);
    sub_10000FBD8(v57, &qword_100526368);
    sub_100360A5C((uint64_t)v56, type metadata accessor for Lens_Status);
LABEL_20:
    uint64_t v43 = &qword_10052ACE8;
    uint64_t v44 = v54;
    goto LABEL_21;
  }
  uint64_t v70 = v81;
  sub_1003609F4(v65, (uint64_t)v81, type metadata accessor for Lens_Status);
  char v71 = sub_10035E7E0(v56, v70);
  sub_100360A5C((uint64_t)v70, type metadata accessor for Lens_Status);
  sub_10000FBD8(v58, &qword_100526368);
  sub_10000FBD8(v57, &qword_100526368);
  sub_100360A5C((uint64_t)v56, type metadata accessor for Lens_Status);
  sub_10000FBD8(v54, &qword_100526368);
  if ((v71 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_25:
  if (*(void *)v103 == *v64 && *((void *)v103 + 1) == v64[1]
    || (char v68 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v72 = v98;
    uint64_t v74 = v84;
    uint64_t v73 = v85;
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
    uint64_t v76 = v64;
    uint64_t v77 = v82;
    v75(v82, &v103[v98[5]], v85);
    uint64_t v78 = (char *)v76 + v72[5];
    uint64_t v79 = v83;
    v75(v83, v78, v73);
    sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v74 + 8);
    v80(v79, v73);
    v80(v77, v73);
  }
  return v68 & 1;
}

uint64_t sub_100360754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - v9;
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v12 & 1;
    }
  }
  if ((sub_1003F5B24(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0) {
    goto LABEL_16;
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40))
  {
    char v12 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v12 & 1;
    }
  }
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48) || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
  {
LABEL_16:
    char v12 = 0;
    return v12 & 1;
  }
  if (*(void *)(a1 + 56) == *(void *)(a2 + 56) && *(void *)(a1 + 64) == *(void *)(a2 + 64)
    || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for Lens_ImageThumbnail(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1 + *(int *)(v13 + 40), v4);
    v14(v7, a2 + *(int *)(v13 + 40), v4);
    sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v10, v4);
  }
  return v12 & 1;
}

unint64_t sub_1003609A0()
{
  unint64_t result = qword_10052AC68;
  if (!qword_10052AC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052AC68);
  }
  return result;
}

uint64_t sub_1003609F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100360A5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100360ABC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v42 = (char *)&v38 - v7;
  uint64_t v8 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v45 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v41 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052AC78);
  __chkstk_darwin(v10);
  char v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v38 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v38 - v20;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (a1[6] == a2[6] && a1[7] == a2[7] || (char v22 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          uint64_t v40 = v4;
          uint64_t v23 = type metadata accessor for Lens_Answer(0);
          sub_10000FB74((uint64_t)a1 + *(int *)(v23 + 36), (uint64_t)v21, &qword_10051BE80);
          uint64_t v39 = v23;
          sub_10000FB74((uint64_t)a2 + *(int *)(v23 + 36), (uint64_t)v18, &qword_10051BE80);
          uint64_t v24 = (uint64_t)&v12[*(int *)(v10 + 48)];
          sub_10000FB74((uint64_t)v21, (uint64_t)v12, &qword_10051BE80);
          sub_10000FB74((uint64_t)v18, v24, &qword_10051BE80);
          uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
          if (v25((uint64_t)v12, 1, v8) == 1)
          {
            sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
            sub_10000FBD8((uint64_t)v21, &qword_10051BE80);
            if (v25(v24, 1, v8) == 1)
            {
              sub_10000FBD8((uint64_t)v12, &qword_10051BE80);
LABEL_21:
              uint64_t v29 = v39;
              uint64_t v28 = v40;
              uint64_t v30 = (char *)a1 + *(int *)(v39 + 32);
              uint64_t v31 = v44;
              uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
              uint64_t v33 = v42;
              v32(v42, v30, v40);
              uint64_t v34 = (char *)a2 + *(int *)(v29 + 32);
              uint64_t v35 = v43;
              v32(v43, v34, v28);
              sub_10035C530(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
              char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
              v36(v35, v28);
              v36(v33, v28);
              return v22 & 1;
            }
          }
          else
          {
            sub_10000FB74((uint64_t)v12, (uint64_t)v15, &qword_10051BE80);
            if (v25(v24, 1, v8) != 1)
            {
              uint64_t v26 = v41;
              sub_1003609F4(v24, v41, type metadata accessor for Lens_ImageThumbnail);
              char v27 = sub_100360754((uint64_t)v15, v26);
              sub_100360A5C(v26, type metadata accessor for Lens_ImageThumbnail);
              sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
              sub_10000FBD8((uint64_t)v21, &qword_10051BE80);
              sub_100360A5C((uint64_t)v15, type metadata accessor for Lens_ImageThumbnail);
              sub_10000FBD8((uint64_t)v12, &qword_10051BE80);
              if (v27) {
                goto LABEL_21;
              }
              goto LABEL_19;
            }
            sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
            sub_10000FBD8((uint64_t)v21, &qword_10051BE80);
            sub_100360A5C((uint64_t)v15, type metadata accessor for Lens_ImageThumbnail);
          }
          sub_10000FBD8((uint64_t)v12, &qword_10052AC78);
LABEL_19:
          char v22 = 0;
        }
      }
    }
  }
  return v22 & 1;
}

unint64_t sub_100361060()
{
  unint64_t result = qword_10052AD08;
  if (!qword_10052AD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052AD08);
  }
  return result;
}

uint64_t *sub_1003610B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100361180(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_1003611E8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *sub_100361264(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1003612F8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *sub_100361374(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1003613F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100361404);
}

uint64_t sub_100361404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_100361474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100361488);
}

uint64_t sub_100361488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 32);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_1003614FC()
{
  return sub_100361B64();
}

uint64_t *sub_100361510(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t sub_100361630(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1003616C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a2 + v8;
  uint64_t v10 = (char *)a1 + v8;
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

void *sub_100361790(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_10036188C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *sub_100361910(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1003619CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003619E0);
}

uint64_t sub_1003619E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100361A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100361AA8);
}

uint64_t sub_100361AAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100361B54()
{
  return sub_100361B64();
}

uint64_t sub_100361B64()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100361C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100361C24);
}

uint64_t sub_100361C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100361C3C);
}

uint64_t *sub_100361C44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100361D28(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100361DA0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_100361E38(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100361ECC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100361F48(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100361FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100361FE8);
}

uint64_t sub_100361FEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10036209C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003620B0);
}

void *sub_1003620B4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10036215C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1003621F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v30 = (char *)a2 + v11;
    uint64_t v31 = (char *)a1 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v31, v30, v12);
    uint64_t v14 = *(int *)(a3 + 36);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Lens_ImageThumbnail(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10000F214(&qword_10051BE80);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = v16[1];
      void *v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[2];
      unint64_t v23 = v16[3];
      swift_bridgeObjectRetain();
      sub_100038528(v22, v23);
      v15[2] = v22;
      v15[3] = v23;
      uint64_t v24 = v16[5];
      v15[4] = v16[4];
      v15[5] = v24;
      v15[6] = v16[6];
      uint64_t v25 = v16[8];
      v15[7] = v16[7];
      v15[8] = v25;
      uint64_t v26 = *(int *)(v17 + 40);
      char v27 = (char *)v15 + v26;
      uint64_t v28 = (char *)v16 + v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v27, v28, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_100362448(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    sub_100038B34(*(void *)(v6 + 16), *(void *)(v6 + 24));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 40);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *sub_10036258C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v28 = (char *)a2 + v10;
  uint64_t v29 = (char *)a1 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v29, v28, v11);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000F214(&qword_10051BE80);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[2];
    unint64_t v21 = v15[3];
    swift_bridgeObjectRetain();
    sub_100038528(v20, v21);
    void v14[2] = v20;
    v14[3] = v21;
    uint64_t v22 = v15[5];
    v14[4] = v15[4];
    v14[5] = v22;
    void v14[6] = v15[6];
    uint64_t v23 = v15[8];
    v14[7] = v15[7];
    v14[8] = v23;
    uint64_t v24 = *(int *)(v16 + 40);
    uint64_t v25 = (char *)v14 + v24;
    uint64_t v26 = (char *)v15 + v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v25, v26, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_10036278C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v30 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v26 = *((void *)v13 + 2);
      unint64_t v27 = *((void *)v13 + 3);
      sub_100038528(v26, v27);
      uint64_t v28 = *(void *)(v12 + 16);
      unint64_t v29 = *(void *)(v12 + 24);
      *(void *)(v12 + 16) = v26;
      *(void *)(v12 + 24) = v27;
      sub_100038B34(v28, v29);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 48) = *((_DWORD *)v13 + 12);
      *(_DWORD *)(v12 + 52) = *((_DWORD *)v13 + 13);
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = *((void *)v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 40), &v13[*(int *)(v14 + 40)], v31);
      return a1;
    }
    sub_100360A5C(v12, type metadata accessor for Lens_ImageThumbnail);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v24 = sub_10000F214(&qword_10051BE80);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  uint64_t v18 = *((void *)v13 + 2);
  unint64_t v19 = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  sub_100038528(v18, v19);
  *(void *)(v12 + 16) = v18;
  *(void *)(v12 + 24) = v19;
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(void *)(v12 + 40) = *((void *)v13 + 5);
  *(_DWORD *)(v12 + 48) = *((_DWORD *)v13 + 12);
  *(_DWORD *)(v12 + 52) = *((_DWORD *)v13 + 13);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  *(void *)(v12 + 64) = *((void *)v13 + 8);
  uint64_t v20 = *(int *)(v14 + 40);
  uint64_t v21 = v12 + v20;
  uint64_t v22 = &v13[v20];
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v21, v22, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *sub_100362AF4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000F214(&qword_10051BE80);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    long long v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    void v14[2] = v15[2];
    *((void *)v14 + 6) = *((void *)v15 + 6);
    *(_OWORD *)((char *)v14 + 56) = *(_OWORD *)((char *)v15 + 56);
    v12((char *)v14 + *(int *)(v16 + 40), (char *)v15 + *(int *)(v16 + 40), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_100362C88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v30 + 40);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20((char *)v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v25 = *((void *)v17 + 1);
      *uint64_t v16 = *(void *)v17;
      v16[1] = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = v16[2];
      unint64_t v27 = v16[3];
      *((_OWORD *)v16 + 1) = *((_OWORD *)v17 + 1);
      sub_100038B34(v26, v27);
      uint64_t v28 = *((void *)v17 + 5);
      v16[4] = *((void *)v17 + 4);
      v16[5] = v28;
      swift_bridgeObjectRelease();
      v16[6] = *((void *)v17 + 6);
      uint64_t v29 = *((void *)v17 + 8);
      v16[7] = *((void *)v17 + 7);
      v16[8] = v29;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 40), &v17[*(int *)(v18 + 40)], v31);
      return a1;
    }
    sub_100360A5C((uint64_t)v16, type metadata accessor for Lens_ImageThumbnail);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v23 = sub_10000F214(&qword_10051BE80);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  long long v22 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v22;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  v16[6] = *((void *)v17 + 6);
  *(_OWORD *)(v16 + 7) = *(_OWORD *)(v17 + 56);
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)v16 + *(int *)(v18 + 40), &v17[*(int *)(v18 + 40)], v31);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_100362F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100362F30);
}

uint64_t sub_100362F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000F214(&qword_10051BE80);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100363060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100363074);
}

uint64_t sub_100363074(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000F214(&qword_10051BE80);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1003631A4()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1003531EC(319, &qword_10052A680, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_100363298(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100363398(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100363418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1003634C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100363584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100363610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1003636B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003636C8);
}

uint64_t sub_1003636C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100363778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036378C);
}

uint64_t sub_10036378C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100363834()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1003638E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Lens_ExploreGrid(0);
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v44 = v11;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = v12;
      uint64_t v19 = sub_10000F214(&qword_100526378);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      uint64_t v20 = *(int *)(v16 + 20);
      uint64_t v43 = (char *)v14 + v20;
      int v21 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      uint64_t v22 = v11;
      uint64_t v18 = v12;
      v12(v43, v21, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v23 = a3[8];
    uint64_t v24 = (uint64_t *)((char *)v7 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = type metadata accessor for Lens_ExactMatch(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_10000F214(&qword_10052ACC0);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *uint64_t v24 = *v25;
      uint64_t v29 = *(int *)(v26 + 20);
      uint64_t v30 = (char *)v24 + v29;
      uint64_t v31 = (char *)v25 + v29;
      swift_bridgeObjectRetain();
      v18(v30, v31, v44);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v32 = a3[9];
    uint64_t v33 = (uint64_t *)((char *)v7 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = type metadata accessor for Lens_LlmAnswer(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = sub_10000F214(&qword_10052ACB8);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v38 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v38;
      void v33[2] = v34[2];
      *((_DWORD *)v33 + 6) = *((_DWORD *)v34 + 6);
      uint64_t v39 = *(int *)(v35 + 28);
      uint64_t v40 = (char *)v33 + v39;
      uint64_t v41 = (char *)v34 + v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v40, v41, v44);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return v7;
}

uint64_t sub_100363D04(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Lens_ExploreGrid(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v14(v6 + *(int *)(v7 + 20), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Lens_ExactMatch(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    v14(v8 + *(int *)(v9 + 20), v5);
  }
  uint64_t v10 = a1 + a2[9];
  uint64_t v11 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v10 + *(int *)(v11 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
  }
  return result;
}

void *sub_100363F14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v44 = a3;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v43 = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = v11;
    uint64_t v18 = sub_10000F214(&qword_100526378);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    uint64_t v19 = *(int *)(v15 + 20);
    uint64_t v20 = (char *)v13 + v19;
    int v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    uint64_t v22 = v10;
    uint64_t v17 = v11;
    v11(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v23 = *(int *)(v44 + 32);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_10000F214(&qword_10052ACC0);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *v25;
    uint64_t v29 = *(int *)(v26 + 20);
    uint64_t v30 = (char *)v24 + v29;
    uint64_t v31 = (char *)v25 + v29;
    swift_bridgeObjectRetain();
    v17(v30, v31, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v32 = *(int *)(v44 + 36);
  uint64_t v33 = (void *)((char *)a1 + v32);
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = sub_10000F214(&qword_10052ACB8);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    uint64_t v38 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v38;
    void v33[2] = v34[2];
    *((_DWORD *)v33 + 6) = *((_DWORD *)v34 + 6);
    uint64_t v39 = *(int *)(v35 + 28);
    uint64_t v40 = (char *)v33 + v39;
    uint64_t v41 = (char *)v34 + v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v40, v41, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

void *sub_1003642DC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  uint64_t v50 = *(void (**)(char *, char *))(v51 + 24);
  v50(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *uint64_t v11 = *v12;
      uint64_t v18 = *(int *)(v13 + 20);
      uint64_t v19 = (char *)v11 + v18;
      uint64_t v20 = (char *)v12 + v18;
      int v21 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      swift_bridgeObjectRetain();
      v21(v19, v20, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ExploreGrid);
LABEL_6:
    uint64_t v22 = sub_10000F214(&qword_100526378);
    memcpy(v11, v12, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v11 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v50)((char *)v11 + *(int *)(v13 + 20), (char *)v12 + *(int *)(v13 + 20), v52);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      *uint64_t v24 = *v25;
      uint64_t v31 = *(int *)(v26 + 20);
      uint64_t v32 = (char *)v24 + v31;
      uint64_t v33 = (char *)v25 + v31;
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      swift_bridgeObjectRetain();
      v34(v32, v33, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    sub_100360A5C((uint64_t)v24, type metadata accessor for Lens_ExactMatch);
LABEL_12:
    uint64_t v35 = sub_10000F214(&qword_10052ACC0);
    memcpy(v24, v25, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  *uint64_t v24 = *v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v50)((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v52);
LABEL_13:
  uint64_t v36 = a3[9];
  uint64_t v37 = (uint64_t)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41((uint64_t)v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      *(void *)uint64_t v37 = *(void *)v38;
      *(void *)(v37 + 8) = *((void *)v38 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v37 + 16) = *((void *)v38 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v37 + 24) = *((_DWORD *)v38 + 6);
      ((void (*)(uint64_t, char *, uint64_t))v50)(v37 + *(int *)(v39 + 28), &v38[*(int *)(v39 + 28)], v52);
      return a1;
    }
    sub_100360A5C(v37, type metadata accessor for Lens_LlmAnswer);
    goto LABEL_18;
  }
  if (v43)
  {
LABEL_18:
    uint64_t v48 = sub_10000F214(&qword_10052ACB8);
    memcpy((void *)v37, v38, *(void *)(*(void *)(v48 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v37 = *(void *)v38;
  *(void *)(v37 + 8) = *((void *)v38 + 1);
  *(void *)(v37 + 16) = *((void *)v38 + 2);
  *(_DWORD *)(v37 + 24) = *((_DWORD *)v38 + 6);
  uint64_t v44 = *(int *)(v39 + 28);
  uint64_t v45 = v37 + v44;
  uint64_t v46 = &v38[v44];
  uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v45, v46, v52);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  return a1;
}

_OWORD *sub_100364878(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000F214(&qword_100526378);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_10000F214(&qword_10052ACC0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    void *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v23 = a3[9];
  uint64_t v24 = (_OWORD *)((char *)a1 + v23);
  uint64_t v25 = (_OWORD *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_10000F214(&qword_10052ACB8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *v25;
    *((void *)v24 + 2) = *((void *)v25 + 2);
    *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
    v10((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

void *sub_100364BE4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v39 = *(void (**)(char *, char *))(v40 + 40);
  v39(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(void *)uint64_t v11 = *(void *)v12;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v11[*(int *)(v13 + 20)], &v12[*(int *)(v13 + 20)], v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_ExploreGrid);
LABEL_6:
    uint64_t v18 = sub_10000F214(&qword_100526378);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v11 = *(void *)v12;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v39)(&v11[*(int *)(v13 + 20)], &v12[*(int *)(v13 + 20)], v41);
LABEL_7:
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *(void *)uint64_t v20 = *(void *)v21;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    sub_100360A5C((uint64_t)v20, type metadata accessor for Lens_ExactMatch);
LABEL_12:
    uint64_t v27 = sub_10000F214(&qword_10052ACC0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)uint64_t v20 = *(void *)v21;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v39)(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v41);
LABEL_13:
  uint64_t v28 = a3[9];
  uint64_t v29 = (uint64_t)a1 + v28;
  int v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33((uint64_t)v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      uint64_t v38 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *(void *)(v29 + 8) = v38;
      swift_bridgeObjectRelease();
      *(void *)(v29 + 16) = *((void *)v30 + 2);
      swift_bridgeObjectRelease();
      *(_DWORD *)(v29 + 24) = *((_DWORD *)v30 + 6);
      ((void (*)(uint64_t, char *, uint64_t))v39)(v29 + *(int *)(v31 + 28), &v30[*(int *)(v31 + 28)], v41);
      return a1;
    }
    sub_100360A5C(v29, type metadata accessor for Lens_LlmAnswer);
    goto LABEL_18;
  }
  if (v35)
  {
LABEL_18:
    uint64_t v36 = sub_10000F214(&qword_10052ACB8);
    memcpy((void *)v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *(void *)(v29 + 16) = *((void *)v30 + 2);
  *(_DWORD *)(v29 + 24) = *((_DWORD *)v30 + 6);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v29 + *(int *)(v31 + 28), &v30[*(int *)(v31 + 28)], v41);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t sub_100365108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036511C);
}

uint64_t sub_10036511C(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v14(&a1[v11], a2, v9);
  }
  uint64_t v12 = sub_10000F214(&qword_100526378);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v13 = sub_10000F214(&qword_10052ACC0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v15 = sub_10000F214(&qword_10052ACB8);
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = &a1[a3[9]];

  return v16(v18, a2, v17);
}

uint64_t sub_1003652EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100365300);
}

char *sub_100365300(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v14(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_10000F214(&qword_100526378);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v13 = sub_10000F214(&qword_10052ACC0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v15 = sub_10000F214(&qword_10052ACB8);
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = &v5[a4[9]];

  return (char *)v16(v18, a2, a2, v17);
}

void sub_1003654D0()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1003531EC(319, &qword_10052B118, (void (*)(uint64_t))type metadata accessor for Lens_ExploreGrid);
    if (v1 <= 0x3F)
    {
      sub_1003531EC(319, &qword_10052B120, (void (*)(uint64_t))type metadata accessor for Lens_ExactMatch);
      if (v2 <= 0x3F)
      {
        sub_1003531EC(319, (unint64_t *)&unk_10052B128, (void (*)(uint64_t))type metadata accessor for Lens_LlmAnswer);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void *sub_100365674(void *a1, void *a2, int *a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = v6[6];
    uint64_t v14 = (_OWORD *)((char *)v4 + v13);
    uint64_t v15 = (_OWORD *)((char *)v3 + v13);
    uint64_t v16 = type metadata accessor for Lens_NormalizedBox(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_10000F214(&qword_100526370);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      v12((char *)v14 + *(int *)(v16 + 32), (char *)v15 + *(int *)(v16 + 32), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v20 = v6[7];
    uint64_t v21 = (void *)((char *)v4 + v20);
    uint64_t v22 = (void *)((char *)v3 + v20);
    uint64_t v23 = type metadata accessor for Lens_Result(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10000F214(&qword_100526380);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v76 = v3;
      uint64_t v77 = v6;
      uint64_t v78 = v24;
      uint64_t v26 = v22[1];
      void *v21 = *v22;
      v21[1] = v26;
      uint64_t v27 = *(int *)(v23 + 24);
      uint64_t v28 = v11;
      uint64_t v29 = (char *)v21 + v27;
      int v30 = (int *)v23;
      uint64_t v31 = (char *)v22 + v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v32 = v31;
      uint64_t v33 = v30;
      uint64_t v34 = v28;
      v12(v29, v32, v28);
      int v35 = v12;
      uint64_t v36 = v33[7];
      uint64_t v79 = v21;
      uint64_t v37 = (void *)((char *)v21 + v36);
      uint64_t v38 = (void *)((char *)v22 + v36);
      uint64_t v39 = type metadata accessor for Lens_ExploreGrid(0);
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v80 = v28;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = sub_10000F214(&qword_100526378);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        *uint64_t v37 = *v38;
        uint64_t v42 = *(int *)(v39 + 20);
        int v43 = (char *)v37 + v42;
        uint64_t v44 = (char *)v38 + v42;
        swift_bridgeObjectRetain();
        v35(v43, v44, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      uint64_t v45 = v33[8];
      uint64_t v46 = (void *)((char *)v79 + v45);
      uint64_t v47 = (void *)((char *)v22 + v45);
      uint64_t v48 = type metadata accessor for Lens_ExactMatch(0);
      uint64_t v49 = *(void *)(v48 - 8);
      unint64_t v3 = v76;
      uint64_t v6 = v77;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = sub_10000F214(&qword_10052ACC0);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        *uint64_t v46 = *v47;
        uint64_t v51 = *(int *)(v48 + 20);
        uint64_t v74 = (char *)v46 + v51;
        uint64_t v52 = (char *)v47 + v51;
        swift_bridgeObjectRetain();
        v35(v74, v52, v80);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      uint64_t v53 = v33[9];
      uint64_t v54 = (void *)((char *)v79 + v53);
      uint64_t v55 = (void *)((char *)v22 + v53);
      uint64_t v56 = type metadata accessor for Lens_LlmAnswer(0);
      uint64_t v57 = *(void *)(v56 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
      {
        uint64_t v58 = sub_10000F214(&qword_10052ACB8);
        memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
        uint64_t v12 = v35;
        uint64_t v11 = v80;
      }
      else
      {
        uint64_t v59 = v55[1];
        *uint64_t v54 = *v55;
        v54[1] = v59;
        v54[2] = v55[2];
        *((_DWORD *)v54 + 6) = *((_DWORD *)v55 + 6);
        uint64_t v60 = *(int *)(v56 + 28);
        uint64_t v75 = (char *)v54 + v60;
        uint64_t v61 = (char *)v55 + v60;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v62 = v61;
        uint64_t v12 = v35;
        uint64_t v11 = v80;
        v35(v75, v62, v80);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      }
      (*(void (**)(void *, void, uint64_t, int *))(v78 + 56))(v79, 0, 1, v33);
    }
    uint64_t v63 = v6[8];
    char v64 = (void *)((char *)v4 + v63);
    uint64_t v65 = (void *)((char *)v3 + v63);
    uint64_t v66 = type metadata accessor for Lens_Status(0);
    uint64_t v67 = *(void *)(v66 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      uint64_t v68 = sub_10000F214(&qword_100526368);
      memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      *char v64 = *v65;
      *((unsigned char *)v64 + 8) = *((unsigned char *)v65 + 8);
      uint64_t v69 = v65[3];
      v64[2] = v65[2];
      v64[3] = v69;
      uint64_t v70 = *(int *)(v66 + 24);
      char v71 = (char *)v64 + v70;
      uint64_t v72 = (char *)v65 + v70;
      swift_bridgeObjectRetain();
      v12(v71, v72, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
  }
  return v4;
}

uint64_t sub_100365DB0(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v20(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Lens_NormalizedBox(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v20(v6 + *(int *)(v7 + 32), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = (int *)type metadata accessor for Lens_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20(v8 + v9[6], v5);
    uint64_t v10 = v8 + v9[7];
    uint64_t v11 = type metadata accessor for Lens_ExploreGrid(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v20(v10 + *(int *)(v11 + 20), v5);
    }
    uint64_t v12 = v8 + v9[8];
    uint64_t v13 = type metadata accessor for Lens_ExactMatch(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease();
      v20(v12 + *(int *)(v13 + 20), v5);
    }
    uint64_t v14 = v8 + v9[9];
    uint64_t v15 = type metadata accessor for Lens_LlmAnswer(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20(v14 + *(int *)(v15 + 28), v5);
    }
  }
  uint64_t v16 = a1 + a2[8];
  uint64_t v17 = type metadata accessor for Lens_Status(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = v16 + *(int *)(v17 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v20)(v19, v5);
  }
  return result;
}

void *sub_100366114(void *a1, void *a2, int *a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v3[6];
  uint64_t v13 = (_OWORD *)((char *)v5 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Lens_NormalizedBox(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000F214(&qword_100526370);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = v3[7];
  uint64_t v19 = (void *)((char *)v5 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = (int *)type metadata accessor for Lens_Result(0);
  uint64_t v22 = *((void *)v21 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_10000F214(&qword_100526380);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    char v71 = v5;
    uint64_t v72 = v22;
    uint64_t v74 = v3;
    uint64_t v24 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v24;
    uint64_t v25 = v21[6];
    uint64_t v26 = (char *)v19 + v25;
    uint64_t v27 = (char *)v20 + v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = v26;
    uint64_t v29 = v10;
    v11(v28, v27, v10);
    int v30 = v11;
    uint64_t v31 = v21[7];
    uint64_t v73 = v19;
    uint64_t v32 = (void *)((char *)v19 + v31);
    uint64_t v33 = (void *)((char *)v20 + v31);
    uint64_t v34 = type metadata accessor for Lens_ExploreGrid(0);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v75 = v30;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = sub_10000F214(&qword_100526378);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      *uint64_t v32 = *v33;
      uint64_t v37 = *(int *)(v34 + 20);
      uint64_t v38 = (char *)v32 + v37;
      uint64_t v39 = (char *)v33 + v37;
      swift_bridgeObjectRetain();
      v30(v38, v39, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v40 = v21[8];
    uint64_t v41 = (void *)((char *)v73 + v40);
    uint64_t v42 = (void *)((char *)v20 + v40);
    uint64_t v43 = type metadata accessor for Lens_ExactMatch(0);
    uint64_t v44 = *(void *)(v43 - 8);
    unint64_t v3 = v74;
    uint64_t v5 = v71;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      uint64_t v45 = sub_10000F214(&qword_10052ACC0);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      void *v41 = *v42;
      uint64_t v46 = *(int *)(v43 + 20);
      uint64_t v69 = (char *)v41 + v46;
      uint64_t v47 = (char *)v42 + v46;
      swift_bridgeObjectRetain();
      v75(v69, v47, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
    uint64_t v48 = v21[9];
    uint64_t v49 = (void *)((char *)v73 + v48);
    uint64_t v50 = (void *)((char *)v20 + v48);
    uint64_t v51 = type metadata accessor for Lens_LlmAnswer(0);
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      uint64_t v53 = sub_10000F214(&qword_10052ACB8);
      memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
      uint64_t v11 = v75;
      uint64_t v10 = v29;
    }
    else
    {
      uint64_t v54 = v50[1];
      *uint64_t v49 = *v50;
      v49[1] = v54;
      v49[2] = v50[2];
      *((_DWORD *)v49 + 6) = *((_DWORD *)v50 + 6);
      uint64_t v55 = *(int *)(v51 + 28);
      uint64_t v70 = (char *)v49 + v55;
      uint64_t v56 = (char *)v50 + v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v57 = v56;
      uint64_t v11 = v75;
      uint64_t v10 = v29;
      v75(v70, v57, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    (*(void (**)(void *, void, uint64_t, int *))(v72 + 56))(v73, 0, 1, v21);
  }
  uint64_t v58 = v3[8];
  uint64_t v59 = (void *)((char *)v5 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  uint64_t v61 = type metadata accessor for Lens_Status(0);
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = sub_10000F214(&qword_100526368);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    void *v59 = *v60;
    *((unsigned char *)v59 + 8) = *((unsigned char *)v60 + 8);
    uint64_t v64 = v60[3];
    v59[2] = v60[2];
    v59[3] = v64;
    uint64_t v65 = *(int *)(v61 + 24);
    uint64_t v66 = (char *)v59 + v65;
    uint64_t v67 = (char *)v60 + v65;
    swift_bridgeObjectRetain();
    v11(v66, v67, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  }
  return v5;
}

void *sub_1003667F8(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v126 = *(void *)(v9 - 8);
  int v125 = *(void (**)(char *, char *, uint64_t))(v126 + 24);
  v125(v7, v8, v9);
  uint64_t v127 = a3;
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = (char *)v4 + v10;
  uint64_t v13 = type metadata accessor for Lens_NormalizedBox(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      *((_DWORD *)v11 + 3) = *((_DWORD *)v12 + 3);
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(&v11[*(int *)(v13 + 32)], &v12[*(int *)(v13 + 32)], v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_100360A5C((uint64_t)v11, type metadata accessor for Lens_NormalizedBox);
LABEL_6:
    uint64_t v18 = sub_10000F214(&qword_100526370);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
  *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
  *((_DWORD *)v11 + 3) = *((_DWORD *)v12 + 3);
  v125(&v11[*(int *)(v13 + 32)], &v12[*(int *)(v13 + 32)], v9);
LABEL_7:
  uint64_t v19 = a3;
  uint64_t v20 = a3[7];
  uint64_t v21 = (char *)v5 + v20;
  uint64_t v22 = (char *)v4 + v20;
  uint64_t v23 = (int *)type metadata accessor for Lens_Result(0);
  int v122 = (void *)*((void *)v23 - 1);
  uint64_t v24 = (uint64_t (*)(char *, uint64_t, int *))v122[6];
  int v25 = v24(v21, 1, v23);
  int v26 = v24(v22, 1, v23);
  if (!v25)
  {
    if (v26)
    {
      sub_100360A5C((uint64_t)v21, type metadata accessor for Lens_Result);
      goto LABEL_13;
    }
    *(void *)uint64_t v21 = *(void *)v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v21 + 1) = *((void *)v22 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v121 = v9;
    v125(&v21[v23[6]], &v22[v23[6]], v9);
    uint64_t v41 = v23[7];
    uint64_t v42 = &v21[v41];
    uint64_t v43 = &v22[v41];
    uint64_t v44 = type metadata accessor for Lens_ExploreGrid(0);
    uint64_t v115 = *(void *)(v44 - 8);
    uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
    int v123 = v42;
    LODWORD(v42) = v45(v42, 1, v44);
    int v46 = v45(v43, 1, v44);
    if (v42)
    {
      if (v46)
      {
        size_t v47 = *(void *)(*(void *)(sub_10000F214(&qword_100526378) - 8) + 64);
        uint64_t v48 = v123;
LABEL_37:
        memcpy(v48, v43, v47);
        goto LABEL_40;
      }
      *int v123 = *(void *)v43;
      uint64_t v85 = *(int *)(v44 + 20);
      uint64_t v86 = (char *)v123 + v85;
      uint64_t v87 = &v43[v85];
      __srcb = *(void (**)(char *, char *, uint64_t))(v126 + 16);
      swift_bridgeObjectRetain();
      __srcb(v86, v87, v121);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v123, 0, 1, v44);
    }
    else
    {
      if (v46)
      {
        sub_100360A5C((uint64_t)v123, type metadata accessor for Lens_ExploreGrid);
        size_t v47 = *(void *)(*(void *)(sub_10000F214(&qword_100526378) - 8) + 64);
        uint64_t v48 = v123;
        goto LABEL_37;
      }
      *int v123 = *(void *)v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v125((char *)v123 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v121);
    }
LABEL_40:
    uint64_t v88 = v23[8];
    uint64_t v89 = &v21[v88];
    uint64_t v90 = &v22[v88];
    uint64_t v91 = type metadata accessor for Lens_ExactMatch(0);
    uint64_t v116 = *(void *)(v91 - 8);
    uint64_t v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 48);
    __srca = v89;
    LODWORD(v89) = v92(v89, 1, v91);
    int v93 = v92(v90, 1, v91);
    if (v89)
    {
      if (!v93)
      {
        void *__srca = *(void *)v90;
        uint64_t v96 = *(int *)(v91 + 20);
        uint64_t v97 = (char *)__srca + v96;
        uint64_t v124 = &v90[v96];
        uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
        swift_bridgeObjectRetain();
        v98(v97, v124, v121);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(__srca, 0, 1, v91);
        goto LABEL_48;
      }
      size_t v94 = *(void *)(*(void *)(sub_10000F214(&qword_10052ACC0) - 8) + 64);
      uint64_t v95 = __srca;
    }
    else
    {
      if (!v93)
      {
        void *__srca = *(void *)v90;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v125((char *)__srca + *(int *)(v91 + 20), &v90[*(int *)(v91 + 20)], v121);
        goto LABEL_48;
      }
      sub_100360A5C((uint64_t)__srca, type metadata accessor for Lens_ExactMatch);
      size_t v94 = *(void *)(*(void *)(sub_10000F214(&qword_10052ACC0) - 8) + 64);
      uint64_t v95 = __srca;
    }
    memcpy(v95, v90, v94);
LABEL_48:
    uint64_t v99 = v23[9];
    uint64_t v100 = (uint64_t)&v21[v99];
    uint64_t v101 = &v22[v99];
    uint64_t v102 = type metadata accessor for Lens_LlmAnswer(0);
    uint64_t v103 = *(void *)(v102 - 8);
    uint64_t v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
    int v105 = v104(v100, 1, v102);
    int v106 = v104((uint64_t)v101, 1, v102);
    if (v105)
    {
      uint64_t v9 = v121;
      uint64_t v19 = v127;
      if (!v106)
      {
        *(void *)uint64_t v100 = *(void *)v101;
        *(void *)(v100 + 8) = *((void *)v101 + 1);
        *(void *)(v100 + 16) = *((void *)v101 + 2);
        *(_DWORD *)(v100 + 24) = *((_DWORD *)v101 + 6);
        uint64_t v107 = *(int *)(v102 + 28);
        uint64_t v108 = v100 + v107;
        v109 = &v101[v107];
        uint64_t v110 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v111 = v108;
        uint64_t v19 = v127;
        v110(v111, v109, v121);
        uint64_t v9 = v121;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v9 = v121;
      uint64_t v19 = v127;
      if (!v106)
      {
        *(void *)uint64_t v100 = *(void *)v101;
        *(void *)(v100 + 8) = *((void *)v101 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(v100 + 16) = *((void *)v101 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(v100 + 24) = *((_DWORD *)v101 + 6);
        v125((char *)(v100 + *(int *)(v102 + 28)), &v101[*(int *)(v102 + 28)], v121);
        goto LABEL_27;
      }
      sub_100360A5C(v100, type metadata accessor for Lens_LlmAnswer);
    }
    size_t v38 = *(void *)(*(void *)(sub_10000F214(&qword_10052ACB8) - 8) + 64);
    uint64_t v39 = (void *)v100;
    uint64_t v40 = v101;
LABEL_14:
    memcpy(v39, v40, v38);
    goto LABEL_27;
  }
  if (v26)
  {
LABEL_13:
    size_t v38 = *(void *)(*(void *)(sub_10000F214(&qword_100526380) - 8) + 64);
    uint64_t v39 = v21;
    uint64_t v40 = v22;
    goto LABEL_14;
  }
  uint64_t v114 = v5;
  __src = v4;
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  uint64_t v27 = v23[6];
  uint64_t v28 = &v21[v27];
  uint64_t v29 = v9;
  int v30 = &v22[v27];
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31(v28, v30, v29);
  uint64_t v32 = v23[7];
  uint64_t v33 = &v21[v32];
  uint64_t v34 = &v22[v32];
  uint64_t v35 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v120 = v29;
  uint64_t v113 = v31;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = sub_10000F214(&qword_100526378);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v33 = *(void *)v34;
    uint64_t v49 = *(int *)(v35 + 20);
    v112 = &v33[v49];
    uint64_t v50 = &v34[v49];
    swift_bridgeObjectRetain();
    v31(v112, v50, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  uint64_t v51 = v23[8];
  uint64_t v52 = &v21[v51];
  uint64_t v53 = &v22[v51];
  uint64_t v54 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v5 = v114;
  uint64_t v4 = __src;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    uint64_t v56 = sub_10000F214(&qword_10052ACC0);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v52 = *(void *)v53;
    uint64_t v57 = *(int *)(v54 + 20);
    uint64_t v58 = &v52[v57];
    uint64_t v59 = &v53[v57];
    swift_bridgeObjectRetain();
    uint64_t v4 = __src;
    v113(v58, v59, v120);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  uint64_t v60 = v23[9];
  uint64_t v61 = &v21[v60];
  uint64_t v62 = &v22[v60];
  uint64_t v63 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    uint64_t v65 = sub_10000F214(&qword_10052ACB8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v61 = *(void *)v62;
    *((void *)v61 + 1) = *((void *)v62 + 1);
    *((void *)v61 + 2) = *((void *)v62 + 2);
    *((_DWORD *)v61 + 6) = *((_DWORD *)v62 + 6);
    uint64_t v66 = *(int *)(v63 + 28);
    uint64_t v67 = &v61[v66];
    uint64_t v68 = &v62[v66];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v113(v67, v68, v120);
    uint64_t v4 = __src;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  ((void (*)(char *, void, uint64_t, int *))v122[7])(v21, 0, 1, v23);
  uint64_t v9 = v120;
  uint64_t v19 = v127;
LABEL_27:
  uint64_t v69 = v19[8];
  uint64_t v70 = (uint64_t)v5 + v69;
  char v71 = (char *)v4 + v69;
  uint64_t v72 = type metadata accessor for Lens_Status(0);
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  int v75 = v74(v70, 1, v72);
  int v76 = v74((uint64_t)v71, 1, v72);
  if (!v75)
  {
    if (!v76)
    {
      uint64_t v84 = *(void *)v71;
      *(unsigned char *)(v70 + 8) = v71[8];
      *(void *)uint64_t v70 = v84;
      *(void *)(v70 + 16) = *((void *)v71 + 2);
      *(void *)(v70 + 24) = *((void *)v71 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v125((char *)(v70 + *(int *)(v72 + 24)), &v71[*(int *)(v72 + 24)], v9);
      return v5;
    }
    sub_100360A5C(v70, type metadata accessor for Lens_Status);
    goto LABEL_32;
  }
  if (v76)
  {
LABEL_32:
    uint64_t v82 = sub_10000F214(&qword_100526368);
    memcpy((void *)v70, v71, *(void *)(*(void *)(v82 - 8) + 64));
    return v5;
  }
  uint64_t v77 = *(void *)v71;
  *(unsigned char *)(v70 + 8) = v71[8];
  *(void *)uint64_t v70 = v77;
  *(void *)(v70 + 16) = *((void *)v71 + 2);
  *(void *)(v70 + 24) = *((void *)v71 + 3);
  uint64_t v78 = *(int *)(v72 + 24);
  uint64_t v79 = v70 + v78;
  uint64_t v80 = &v71[v78];
  uint64_t v81 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 16);
  swift_bridgeObjectRetain();
  v81(v79, v80, v9);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
  return v5;
}

_OWORD *sub_100367650(_OWORD *a1, _OWORD *a2, int *a3)
{
  unint64_t v3 = a3;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = v3[6];
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Lens_NormalizedBox(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000F214(&qword_100526370);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = v3[7];
  uint64_t v18 = (_OWORD *)((char *)a1 + v17);
  uint64_t v19 = (_OWORD *)((char *)a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for Lens_Result(0);
  uint64_t v21 = *((void *)v20 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_10000F214(&qword_100526380);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v50 = v3;
    _OWORD *v18 = *v19;
    v10((char *)v18 + v20[6], (char *)v19 + v20[6], v9);
    uint64_t v23 = v20[7];
    uint64_t v49 = v18;
    __dst = (void *)((char *)v18 + v23);
    uint64_t v24 = v10;
    int v25 = (void *)((char *)v19 + v23);
    uint64_t v26 = type metadata accessor for Lens_ExploreGrid(0);
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v51 = v24;
    uint64_t v52 = v9;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_10000F214(&qword_100526378);
      memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      void *__dst = *v25;
      v24((char *)__dst + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    uint64_t v29 = v20[8];
    int v30 = (void *)((char *)v49 + v29);
    uint64_t v31 = (void *)((char *)v19 + v29);
    uint64_t v32 = type metadata accessor for Lens_ExactMatch(0);
    uint64_t v33 = *(void *)(v32 - 8);
    unint64_t v3 = v50;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_10000F214(&qword_10052ACC0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      *int v30 = *v31;
      v51((char *)v30 + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v35 = v20[9];
    uint64_t v36 = (_OWORD *)((char *)v49 + v35);
    uint64_t v37 = (_OWORD *)((char *)v19 + v35);
    uint64_t v38 = type metadata accessor for Lens_LlmAnswer(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = sub_10000F214(&qword_10052ACB8);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      *uint64_t v36 = *v37;
      *((void *)v36 + 2) = *((void *)v37 + 2);
      *((_DWORD *)v36 + 6) = *((_DWORD *)v37 + 6);
      v51((char *)v36 + *(int *)(v38 + 28), (char *)v37 + *(int *)(v38 + 28), v52);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v21 + 56))(v49, 0, 1, v20);
    uint64_t v10 = v51;
    uint64_t v9 = v52;
  }
  uint64_t v41 = v3[8];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v44 = type metadata accessor for Lens_Status(0);
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    uint64_t v46 = sub_10000F214(&qword_100526368);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    *uint64_t v42 = *v43;
    *((unsigned char *)v42 + 8) = *((unsigned char *)v43 + 8);
    *((_OWORD *)v42 + 1) = *((_OWORD *)v43 + 1);
    v10((char *)v42 + *(int *)(v44 + 24), (char *)v43 + *(int *)(v44 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  return a1;
}

void *sub_100367CD0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v95 = *(void *)(v10 - 8);
  size_t v94 = *(void (**)(char *, char *, uint64_t))(v95 + 40);
  v94(v8, v9, v10);
  uint64_t v96 = a3;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Lens_NormalizedBox(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(&v12[*(int *)(v14 + 32)], &v13[*(int *)(v14 + 32)], v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100360A5C((uint64_t)v12, type metadata accessor for Lens_NormalizedBox);
LABEL_6:
    uint64_t v19 = sub_10000F214(&qword_100526370);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  v94(&v12[*(int *)(v14 + 32)], &v13[*(int *)(v14 + 32)], v10);
LABEL_7:
  uint64_t v20 = v96;
  uint64_t v21 = *(int *)(v96 + 28);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = (int *)type metadata accessor for Lens_Result(0);
  uint64_t v92 = (void *)*((void *)v24 - 1);
  int v25 = (uint64_t (*)(char *, uint64_t, int *))v92[6];
  int v26 = v25(v22, 1, v24);
  int v27 = v25(v23, 1, v24);
  if (!v26)
  {
    if (v27)
    {
      sub_100360A5C((uint64_t)v22, type metadata accessor for Lens_Result);
      goto LABEL_13;
    }
    *(void *)uint64_t v22 = *(void *)v23;
    swift_bridgeObjectRelease();
    *((void *)v22 + 1) = *((void *)v23 + 1);
    swift_bridgeObjectRelease();
    uint64_t v91 = v10;
    v94(&v22[v24[6]], &v23[v24[6]], v10);
    uint64_t v36 = v24[7];
    uint64_t v37 = &v22[v36];
    uint64_t v38 = &v23[v36];
    uint64_t v39 = type metadata accessor for Lens_ExploreGrid(0);
    __dsta = *(void **)(v39 - 8);
    uint64_t v40 = (uint64_t (*)(char *, uint64_t, uint64_t))__dsta[6];
    int v93 = v37;
    LODWORD(v37) = v40(v37, 1, v39);
    int v41 = v40(v38, 1, v39);
    if (v37)
    {
      if (v41)
      {
        size_t v42 = *(void *)(*(void *)(sub_10000F214(&qword_100526378) - 8) + 64);
        uint64_t v43 = v93;
LABEL_28:
        memcpy(v43, v38, v42);
        goto LABEL_31;
      }
      *(void *)int v93 = *(void *)v38;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(&v93[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v91);
      ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v93, 0, 1, v39);
    }
    else
    {
      if (v41)
      {
        sub_100360A5C((uint64_t)v93, type metadata accessor for Lens_ExploreGrid);
        size_t v42 = *(void *)(*(void *)(sub_10000F214(&qword_100526378) - 8) + 64);
        uint64_t v43 = v93;
        goto LABEL_28;
      }
      *(void *)int v93 = *(void *)v38;
      swift_bridgeObjectRelease();
      v94(&v93[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v91);
    }
LABEL_31:
    uint64_t v56 = v24[8];
    uint64_t v57 = &v22[v56];
    uint64_t v58 = &v23[v56];
    uint64_t v59 = type metadata accessor for Lens_ExactMatch(0);
    __dstb = *(void **)(v59 - 8);
    uint64_t v60 = (uint64_t (*)(char *, uint64_t, uint64_t))__dstb[6];
    __src = v57;
    LODWORD(v57) = v60(v57, 1, v59);
    int v61 = v60(v58, 1, v59);
    if (v57)
    {
      if (v61)
      {
        size_t v62 = *(void *)(*(void *)(sub_10000F214(&qword_10052ACC0) - 8) + 64);
        uint64_t v63 = __src;
LABEL_36:
        memcpy(v63, v58, v62);
        goto LABEL_39;
      }
      *(void *)__src = *(void *)v58;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(&__src[*(int *)(v59 + 20)], &v58[*(int *)(v59 + 20)], v91);
      ((void (*)(char *, void, uint64_t, uint64_t))__dstb[7])(__src, 0, 1, v59);
    }
    else
    {
      if (v61)
      {
        sub_100360A5C((uint64_t)__src, type metadata accessor for Lens_ExactMatch);
        size_t v62 = *(void *)(*(void *)(sub_10000F214(&qword_10052ACC0) - 8) + 64);
        uint64_t v63 = __src;
        goto LABEL_36;
      }
      *(void *)__src = *(void *)v58;
      swift_bridgeObjectRelease();
      v94(&__src[*(int *)(v59 + 20)], &v58[*(int *)(v59 + 20)], v91);
    }
LABEL_39:
    uint64_t v64 = v24[9];
    uint64_t v65 = &v22[v64];
    uint64_t v66 = &v23[v64];
    uint64_t v67 = type metadata accessor for Lens_LlmAnswer(0);
    uint64_t v68 = *(void *)(v67 - 8);
    uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    int v70 = v69(v65, 1, v67);
    int v71 = v69(v66, 1, v67);
    if (v70)
    {
      uint64_t v10 = v91;
      if (!v71)
      {
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
        *((void *)v65 + 2) = *((void *)v66 + 2);
        *((_DWORD *)v65 + 6) = *((_DWORD *)v66 + 6);
        (*(void (**)(char *, char *, uint64_t))(v95 + 32))(&v65[*(int *)(v67 + 28)], &v66[*(int *)(v67 + 28)], v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
LABEL_45:
        uint64_t v20 = v96;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v10 = v91;
      if (!v71)
      {
        uint64_t v84 = *((void *)v66 + 1);
        *(void *)uint64_t v65 = *(void *)v66;
        *((void *)v65 + 1) = v84;
        swift_bridgeObjectRelease();
        *((void *)v65 + 2) = *((void *)v66 + 2);
        swift_bridgeObjectRelease();
        *((_DWORD *)v65 + 6) = *((_DWORD *)v66 + 6);
        v94(&v65[*(int *)(v67 + 28)], &v66[*(int *)(v67 + 28)], v91);
        goto LABEL_45;
      }
      sub_100360A5C((uint64_t)v65, type metadata accessor for Lens_LlmAnswer);
    }
    uint64_t v72 = sub_10000F214(&qword_10052ACB8);
    memcpy(v65, v66, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_45;
  }
  if (v27)
  {
LABEL_13:
    uint64_t v35 = sub_10000F214(&qword_100526380);
    memcpy(v22, v23, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_46;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
  v28(&v22[v24[6]], &v23[v24[6]], v10);
  uint64_t v29 = v24[7];
  __dst = &v22[v29];
  int v30 = &v23[v29];
  uint64_t v31 = v10;
  uint64_t v32 = type metadata accessor for Lens_ExploreGrid(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v90 = v31;
  uint64_t v85 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32))
  {
    uint64_t v34 = sub_10000F214(&qword_100526378);
    memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    *(void *)__dst = *(void *)v30;
    v28(&__dst[*(int *)(v32 + 20)], &v30[*(int *)(v32 + 20)], v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  uint64_t v44 = v24[8];
  uint64_t v45 = &v22[v44];
  uint64_t v46 = &v23[v44];
  uint64_t v47 = type metadata accessor for Lens_ExactMatch(0);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v20 = v96;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    uint64_t v49 = sub_10000F214(&qword_10052ACC0);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v45 = *(void *)v46;
    v85(&v45[*(int *)(v47 + 20)], &v46[*(int *)(v47 + 20)], v90);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  uint64_t v50 = v24[9];
  uint64_t v51 = &v22[v50];
  uint64_t v52 = &v23[v50];
  uint64_t v53 = type metadata accessor for Lens_LlmAnswer(0);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = sub_10000F214(&qword_10052ACB8);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *((void *)v51 + 2) = *((void *)v52 + 2);
    *((_DWORD *)v51 + 6) = *((_DWORD *)v52 + 6);
    v85(&v51[*(int *)(v53 + 28)], &v52[*(int *)(v53 + 28)], v90);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  ((void (*)(char *, void, uint64_t, int *))v92[7])(v22, 0, 1, v24);
  uint64_t v10 = v90;
LABEL_46:
  uint64_t v73 = *(int *)(v20 + 32);
  uint64_t v74 = (uint64_t)a1 + v73;
  int v75 = (char *)a2 + v73;
  uint64_t v76 = type metadata accessor for Lens_Status(0);
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  int v79 = v78(v74, 1, v76);
  int v80 = v78((uint64_t)v75, 1, v76);
  if (!v79)
  {
    if (!v80)
    {
      *(void *)uint64_t v74 = *(void *)v75;
      *(unsigned char *)(v74 + 8) = v75[8];
      uint64_t v83 = *((void *)v75 + 3);
      *(void *)(v74 + 16) = *((void *)v75 + 2);
      *(void *)(v74 + 24) = v83;
      swift_bridgeObjectRelease();
      v94((char *)(v74 + *(int *)(v76 + 24)), &v75[*(int *)(v76 + 24)], v10);
      return a1;
    }
    sub_100360A5C(v74, type metadata accessor for Lens_Status);
    goto LABEL_51;
  }
  if (v80)
  {
LABEL_51:
    uint64_t v81 = sub_10000F214(&qword_100526368);
    memcpy((void *)v74, v75, *(void *)(*(void *)(v81 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v74 = *(void *)v75;
  *(unsigned char *)(v74 + 8) = v75[8];
  *(_OWORD *)(v74 + 16) = *((_OWORD *)v75 + 1);
  (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v74 + *(int *)(v76 + 24), &v75[*(int *)(v76 + 24)], v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
  return a1;
}

uint64_t sub_1003689F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100368A04);
}

uint64_t sub_100368A04(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_10000F214(&qword_100526370);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_11;
  }
  uint64_t v13 = sub_10000F214(&qword_100526380);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v15 = sub_10000F214(&qword_100526368);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[8];

  return v16(v18, a2, v17);
}

uint64_t sub_100368BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100368BE8);
}

uint64_t sub_100368BE8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_10000F214(&qword_100526370);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  uint64_t v13 = sub_10000F214(&qword_100526380);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v15 = sub_10000F214(&qword_100526368);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[8];

  return v16(v18, a2, a2, v17);
}

void sub_100368DB8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1003531EC(319, &qword_10052B1D0, (void (*)(uint64_t))type metadata accessor for Lens_NormalizedBox);
    if (v1 <= 0x3F)
    {
      sub_1003531EC(319, &qword_10052B1D8, (void (*)(uint64_t))type metadata accessor for Lens_Result);
      if (v2 <= 0x3F)
      {
        sub_1003531EC(319, (unint64_t *)&unk_10052B1E0, (void (*)(uint64_t))type metadata accessor for Lens_Status);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void *sub_100368F58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100369050(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1003690C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_100369170(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10036921C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1003692A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100369344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100369358);
}

uint64_t sub_100369358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100369408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036941C);
}

uint64_t sub_10036941C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1003694C4()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lens_Status.Code()
{
  return &type metadata for Lens_Status.Code;
}

uint64_t *sub_100369574(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Lens_Status(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_10000F214(&qword_100526368);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
      uint64_t v19 = v15[3];
      void v14[2] = v15[2];
      v14[3] = v19;
      uint64_t v20 = *(int *)(v16 + 24);
      uint64_t v21 = (char *)v14 + v20;
      uint64_t v22 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12(v21, v22, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t sub_100369760(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Lens_Status(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *sub_100369874(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Lens_Status(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000F214(&qword_100526368);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    uint64_t v17 = v13[3];
    void v12[2] = v13[2];
    v12[3] = v17;
    uint64_t v18 = *(int *)(v14 + 24);
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *sub_100369A14(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Lens_Status(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v25 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      *(void *)uint64_t v12 = v25;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v27);
      return a1;
    }
    sub_100360A5C(v12, type metadata accessor for Lens_Status);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v23 = sub_10000F214(&qword_100526368);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(void *)uint64_t v12 = v18;
  *(void *)(v12 + 16) = *((void *)v13 + 2);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  uint64_t v19 = *(int *)(v14 + 24);
  uint64_t v20 = v12 + v19;
  uint64_t v21 = &v13[v19];
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v27);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

void *sub_100369C78(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Lens_Status(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10000F214(&qword_100526368);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    *((unsigned char *)v12 + 8) = *((unsigned char *)v13 + 8);
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *sub_100369DFC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v21 + 40);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Lens_Status(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(unsigned char *)(v12 + 8) = v13[8];
      uint64_t v20 = *((void *)v13 + 3);
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      *(void *)(v12 + 24) = v20;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v22);
      return a1;
    }
    sub_100360A5C(v12, type metadata accessor for Lens_Status);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000F214(&qword_100526368);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v13[8];
  *(_OWORD *)(v12 + 16) = *((_OWORD *)v13 + 1);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v22);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_10036A030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036A044);
}

uint64_t sub_10036A044(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000F214(&qword_100526368);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10036A174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036A188);
}

void *sub_10036A188(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000F214(&qword_100526368);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10036A2B8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1003531EC(319, (unint64_t *)&unk_10052B1E0, (void (*)(uint64_t))type metadata accessor for Lens_Status);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_10036A3AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Lens_ImageThumbnail(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10000F214(&qword_10051BE80);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = v16[1];
      void *v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[2];
      unint64_t v23 = v16[3];
      swift_bridgeObjectRetain();
      sub_100038528(v22, v23);
      v15[2] = v22;
      v15[3] = v23;
      uint64_t v24 = v16[5];
      v15[4] = v16[4];
      v15[5] = v24;
      v15[6] = v16[6];
      uint64_t v25 = v16[8];
      v15[7] = v16[7];
      v15[8] = v25;
      uint64_t v26 = *(int *)(v17 + 40);
      uint64_t v27 = (char *)v15 + v26;
      uint64_t v28 = (char *)v16 + v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v27, v28, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_10036A5D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    sub_100038B34(*(void *)(v6 + 16), *(void *)(v6 + 24));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 40);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *sub_10036A708(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000F214(&qword_10051BE80);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[2];
    unint64_t v21 = v15[3];
    swift_bridgeObjectRetain();
    sub_100038528(v20, v21);
    void v14[2] = v20;
    v14[3] = v21;
    uint64_t v22 = v15[5];
    v14[4] = v15[4];
    v14[5] = v22;
    void v14[6] = v15[6];
    uint64_t v23 = v15[8];
    v14[7] = v15[7];
    v14[8] = v23;
    uint64_t v24 = *(int *)(v16 + 40);
    uint64_t v25 = (char *)v14 + v24;
    uint64_t v26 = (char *)v15 + v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v25, v26, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_10036A8E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v30 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16((uint64_t)v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v26 = *((void *)v13 + 2);
      unint64_t v27 = *((void *)v13 + 3);
      sub_100038528(v26, v27);
      uint64_t v28 = *(void *)(v12 + 16);
      unint64_t v29 = *(void *)(v12 + 24);
      *(void *)(v12 + 16) = v26;
      *(void *)(v12 + 24) = v27;
      sub_100038B34(v28, v29);
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      *(void *)(v12 + 40) = *((void *)v13 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(v12 + 48) = *((_DWORD *)v13 + 12);
      *(_DWORD *)(v12 + 52) = *((_DWORD *)v13 + 13);
      *(void *)(v12 + 56) = *((void *)v13 + 7);
      *(void *)(v12 + 64) = *((void *)v13 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, char *, uint64_t))v10)(v12 + *(int *)(v14 + 40), &v13[*(int *)(v14 + 40)], v31);
      return a1;
    }
    sub_100360A5C(v12, type metadata accessor for Lens_ImageThumbnail);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v24 = sub_10000F214(&qword_10051BE80);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  uint64_t v18 = *((void *)v13 + 2);
  unint64_t v19 = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  sub_100038528(v18, v19);
  *(void *)(v12 + 16) = v18;
  *(void *)(v12 + 24) = v19;
  *(void *)(v12 + 32) = *((void *)v13 + 4);
  *(void *)(v12 + 40) = *((void *)v13 + 5);
  *(_DWORD *)(v12 + 48) = *((_DWORD *)v13 + 12);
  *(_DWORD *)(v12 + 52) = *((_DWORD *)v13 + 13);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  *(void *)(v12 + 64) = *((void *)v13 + 8);
  uint64_t v20 = *(int *)(v14 + 40);
  uint64_t v21 = v12 + v20;
  uint64_t v22 = &v13[v20];
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v21, v22, v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *sub_10036AC08(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000F214(&qword_10051BE80);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    *((void *)v13 + 6) = *((void *)v14 + 6);
    *(_OWORD *)((char *)v13 + 56) = *(_OWORD *)((char *)v14 + 56);
    v11((char *)v13 + *(int *)(v15 + 40), (char *)v14 + *(int *)(v15 + 40), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *sub_10036AD94(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v28 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v17 = *(void *)(v16 - 8);
  long long v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18((char *)v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v23 = *((void *)v15 + 1);
      *uint64_t v14 = *(void *)v15;
      v14[1] = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = v14[2];
      unint64_t v25 = v14[3];
      *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
      sub_100038B34(v24, v25);
      uint64_t v26 = *((void *)v15 + 5);
      v14[4] = *((void *)v15 + 4);
      v14[5] = v26;
      swift_bridgeObjectRelease();
      void v14[6] = *((void *)v15 + 6);
      uint64_t v27 = *((void *)v15 + 8);
      v14[7] = *((void *)v15 + 7);
      v14[8] = v27;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 40), &v15[*(int *)(v16 + 40)], v29);
      return a1;
    }
    sub_100360A5C((uint64_t)v14, type metadata accessor for Lens_ImageThumbnail);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_10000F214(&qword_10051BE80);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  long long v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v20;
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  void v14[6] = *((void *)v15 + 6);
  *(_OWORD *)(v14 + 7) = *(_OWORD *)(v15 + 56);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)v14 + *(int *)(v16 + 40), &v15[*(int *)(v16 + 40)], v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_10036B008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036B01C);
}

uint64_t sub_10036B01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000F214(&qword_10051BE80);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10036B14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036B160);
}

uint64_t sub_10036B160(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000F214(&qword_10051BE80);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10036B290()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1003531EC(319, &qword_10052A680, (void (*)(uint64_t))type metadata accessor for Lens_ImageThumbnail);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_10036B384()
{
  unint64_t result = qword_10052B3E8;
  if (!qword_10052B3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B3E8);
  }
  return result;
}

uint64_t sub_10036B3D8()
{
  return sub_1001B8988(&qword_10052B3F0, &qword_10052B3F8);
}

unint64_t sub_10036B404()
{
  unint64_t result = qword_10052B400;
  if (!qword_10052B400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B400);
  }
  return result;
}

unint64_t sub_10036B45C()
{
  unint64_t result = qword_10052B408;
  if (!qword_10052B408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B408);
  }
  return result;
}

void sub_10036B4E0()
{
  qword_10055E5C8 = (uint64_t)&off_1004E5ED8;
}

void sub_10036B4F4(uint64_t a1@<X8>)
{
  sub_10037098C();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_10036B528@<X0>(void *a1@<X8>)
{
  if (qword_1005180A0 != -1) {
    swift_once();
  }
  *a1 = qword_10055E5C8;

  return swift_bridgeObjectRetain();
}

void sub_10036B594(uint64_t a1@<X8>)
{
  sub_10037098C();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_10036B5CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10036D63C();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_10036B618()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E5D0);
  sub_10000F378(v0, (uint64_t)qword_10055E5D0);
  sub_10000F214(&qword_10052AC38);
  unint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "requested_features";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "enable_private_access_token_auth";
  *(void *)(v10 + 8) = 32;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "enable_debug_logging";
  *((void *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "num_inline_items";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10036B850()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_10036D63C();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10036B984()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (sub_10036D63C(), uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 8) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 9) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 12)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for Lens_RequestConfig(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t sub_10036BAB0@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = _swiftEmptyArrayStorage;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

unint64_t sub_10036BAE4()
{
  return 0xD000000000000012;
}

uint64_t sub_10036BB00()
{
  return sub_10036B850();
}

uint64_t sub_10036BB18()
{
  return sub_10036B984();
}

uint64_t sub_10036BB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10036D2E4(&qword_10052B470, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10036BBAC@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_1005180A8, (uint64_t)qword_10055E5D0, a1);
}

uint64_t sub_10036BBD0(uint64_t a1)
{
  uint64_t v2 = sub_10036D2E4(&qword_10052B458, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10036BC3C()
{
  sub_10036D2E4(&qword_10052B458, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);

  return Message.hash(into:)();
}

uint64_t sub_10036BCB8()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E5E8);
  sub_10000F378(v0, (uint64_t)qword_10055E5E8);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100441600;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "DEFAULT";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SIMILAR_IMAGES";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "EXACT_MATCH";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "RELATED_QUERY";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)uint64_t v16 = "ANSWER";
  *((void *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  long long v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)long long v18 = "AI_OVERVIEW";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10036BF70@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_1005180B0, (uint64_t)qword_10055E5E8, a1);
}

uint64_t sub_10036BF94()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E600);
  sub_10000F378(v0, (uint64_t)qword_10055E600);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1004416D0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "language";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "region";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "time_zone";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10036C1A0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10036C248()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = v0[5];
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for Lens_Locale(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_10036C360@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_10036C390()
{
  return 0x636F4C2E736E656CLL;
}

uint64_t sub_10036C3B0()
{
  return sub_10036C1A0();
}

uint64_t sub_10036C3C8()
{
  return sub_10036C248();
}

uint64_t sub_10036C3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10036D2E4(&qword_10052B480, (void (*)(uint64_t))type metadata accessor for Lens_Locale);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10036C45C@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_1005180B8, (uint64_t)qword_10055E600, a1);
}

uint64_t sub_10036C480(uint64_t a1)
{
  uint64_t v2 = sub_10036D2E4(&qword_10052B438, (void (*)(uint64_t))type metadata accessor for Lens_Locale);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10036C4EC()
{
  sub_10036D2E4(&qword_10052B438, (void (*)(uint64_t))type metadata accessor for Lens_Locale);

  return Message.hash(into:)();
}

uint64_t sub_10036C568()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_1000EEA28(v0, qword_10055E618);
  sub_10000F378(v0, (uint64_t)qword_10055E618);
  sub_10000F214(&qword_10052AC38);
  uint64_t v1 = (int *)(sub_10000F214(&qword_10052AC40) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043F3F0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "image_bytes";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "locale";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "text_query";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 6;
  *(void *)uint64_t v14 = "request_config";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10036C7A8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 2:
          sub_10036C8B8();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 6:
          sub_10036C968();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10036C8B8()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10036C968()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_10036CA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        uint64_t result = sub_10036CB84((uint64_t)v3, a1, a2, a3);
        if (!v4)
        {
          unint64_t v11 = v3[3];
          uint64_t v12 = HIBYTE(v11) & 0xF;
          if ((v11 & 0x2000000000000000) == 0) {
            uint64_t v12 = v3[2] & 0xFFFFFFFFFFFFLL;
          }
          if (v12) {
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
          }
          sub_10036CD7C((uint64_t)v3, a1, a2, a3);
          type metadata accessor for Lens_FetchVisualDataRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

uint64_t sub_10036CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_10052B498);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_Locale(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t VisualDataRequest = type metadata accessor for Lens_FetchVisualDataRequest(0);
  sub_10000FB74(a1 + *(int *)(VisualDataRequest + 28), (uint64_t)v7, &qword_10052B498);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10052B498);
  }
  sub_10036E308((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_Locale);
  sub_10036D2E4(&qword_10052B438, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10036E370((uint64_t)v11, type metadata accessor for Lens_Locale);
}

uint64_t sub_10036CD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_10000F214(&qword_10052B490);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t VisualDataRequest = type metadata accessor for Lens_FetchVisualDataRequest(0);
  sub_10000FB74(a1 + *(int *)(VisualDataRequest + 32), (uint64_t)v7, &qword_10052B490);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_10000FBD8((uint64_t)v7, &qword_10052B490);
  }
  sub_10036E308((uint64_t)v7, (uint64_t)v11, type metadata accessor for Lens_RequestConfig);
  sub_10036D2E4(&qword_10052B458, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10036E370((uint64_t)v11, type metadata accessor for Lens_RequestConfig);
}

uint64_t sub_10036CF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_10043FAF0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Lens_Locale(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

unint64_t sub_10036D05C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10036D078()
{
  return sub_10036C7A8();
}

uint64_t sub_10036D090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10036CA18(a1, a2, a3);
}

uint64_t sub_10036D0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10036D2E4(&qword_10052B488, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10036D124@<X0>(uint64_t a1@<X8>)
{
  return sub_10035C24C(&qword_1005180C0, (uint64_t)qword_10055E618, a1);
}

uint64_t sub_10036D148(uint64_t a1)
{
  uint64_t v2 = sub_10036D2E4(&qword_10052B418, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10036D1B4()
{
  sub_10036D2E4(&qword_10052B418, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);

  return Message.hash(into:)();
}

uint64_t sub_10036D234()
{
  return sub_10036D2E4(&qword_10052B410, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);
}

uint64_t type metadata accessor for Lens_FetchVisualDataRequest(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052B640);
}

uint64_t sub_10036D29C()
{
  return sub_10036D2E4(&qword_10052B418, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);
}

uint64_t sub_10036D2E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10036D32C()
{
  return sub_10036D2E4(&qword_10052B420, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);
}

uint64_t sub_10036D374()
{
  return sub_10036D2E4(&qword_10052B428, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);
}

uint64_t sub_10036D3BC()
{
  return sub_10036D2E4(&qword_10052B430, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
}

uint64_t type metadata accessor for Lens_Locale(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052B5A8);
}

uint64_t sub_10036D424()
{
  return sub_10036D2E4(&qword_10052B438, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
}

uint64_t sub_10036D46C()
{
  return sub_10036D2E4(&qword_10052B440, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
}

uint64_t sub_10036D4B4()
{
  return sub_10036D2E4(&qword_10052B448, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
}

uint64_t sub_10036D4FC()
{
  return sub_10036D2E4(&qword_10052B450, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
}

uint64_t type metadata accessor for Lens_RequestConfig(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052B508);
}

uint64_t sub_10036D564()
{
  return sub_10036D2E4(&qword_10052B458, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
}

uint64_t sub_10036D5AC()
{
  return sub_10036D2E4(&qword_10052B460, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
}

uint64_t sub_10036D5F4()
{
  return sub_10036D2E4(&qword_10052B468, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
}

unint64_t sub_10036D63C()
{
  unint64_t result = qword_10052B478;
  if (!qword_10052B478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B478);
  }
  return result;
}

uint64_t sub_10036D690(uint64_t *a1, uint64_t *a2)
{
  uint64_t v87 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v78 = *(void *)(v3 - 8);
  uint64_t v79 = v3;
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v70 - v6;
  uint64_t v7 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  __chkstk_darwin(v7);
  uint64_t v75 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_10000F214(&qword_10052B4A0);
  __chkstk_darwin(v81);
  uint64_t v84 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052B490);
  __chkstk_darwin(v10 - 8);
  uint64_t v80 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v70 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v70 - v16;
  uint64_t v18 = type metadata accessor for Lens_Locale(0);
  uint64_t v85 = *(void *)(v18 - 8);
  uint64_t v86 = v18;
  __chkstk_darwin(v18);
  long long v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214(&qword_10052B4A8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_10052B498);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v70 - v28;
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v70 - v31;
  uint64_t v33 = *a1;
  unint64_t v34 = a1[1];
  uint64_t v35 = a1;
  uint64_t v36 = v87;
  if ((sub_1003F5B24(v33, v34, *v87, v87[1]) & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v73 = v14;
  uint64_t v74 = v26;
  int v70 = v20;
  int v71 = v17;
  uint64_t VisualDataRequest = type metadata accessor for Lens_FetchVisualDataRequest(0);
  uint64_t v38 = *(int *)(VisualDataRequest + 28);
  uint64_t v72 = v35;
  sub_10000FB74((uint64_t)v35 + v38, (uint64_t)v32, &qword_10052B498);
  sub_10000FB74((uint64_t)v36 + *(int *)(VisualDataRequest + 28), (uint64_t)v29, &qword_10052B498);
  uint64_t v39 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_10000FB74((uint64_t)v32, (uint64_t)v23, &qword_10052B498);
  sub_10000FB74((uint64_t)v29, v39, &qword_10052B498);
  uint64_t v40 = v86;
  int v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v41((uint64_t)v23, 1, v86) == 1)
  {
    sub_10000FBD8((uint64_t)v29, &qword_10052B498);
    sub_10000FBD8((uint64_t)v32, &qword_10052B498);
    if (v41(v39, 1, v40) == 1)
    {
      sub_10000FBD8((uint64_t)v23, &qword_10052B498);
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v43 = &qword_10052B4A8;
    uint64_t v44 = (uint64_t)v23;
LABEL_18:
    sub_10000FBD8(v44, v43);
    goto LABEL_19;
  }
  size_t v42 = v74;
  sub_10000FB74((uint64_t)v23, (uint64_t)v74, &qword_10052B498);
  if (v41(v39, 1, v40) == 1)
  {
    sub_10000FBD8((uint64_t)v29, &qword_10052B498);
    sub_10000FBD8((uint64_t)v32, &qword_10052B498);
    sub_10036E370((uint64_t)v42, type metadata accessor for Lens_Locale);
    goto LABEL_7;
  }
  uint64_t v45 = v70;
  sub_10036E308(v39, (uint64_t)v70, type metadata accessor for Lens_Locale);
  char v46 = sub_10036E0F8(v42, v45);
  sub_10036E370((uint64_t)v45, type metadata accessor for Lens_Locale);
  sub_10000FBD8((uint64_t)v29, &qword_10052B498);
  sub_10000FBD8((uint64_t)v32, &qword_10052B498);
  sub_10036E370((uint64_t)v42, type metadata accessor for Lens_Locale);
  sub_10000FBD8((uint64_t)v23, &qword_10052B498);
  if ((v46 & 1) == 0)
  {
LABEL_19:
    char v49 = 0;
    return v49 & 1;
  }
LABEL_9:
  uint64_t v47 = v72;
  uint64_t v48 = v87;
  if (v72[2] == v87[2] && v72[3] == v87[3] || (char v49 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v50 = (uint64_t)v71;
    sub_10000FB74((uint64_t)v47 + *(int *)(VisualDataRequest + 32), (uint64_t)v71, &qword_10052B490);
    uint64_t v86 = VisualDataRequest;
    uint64_t v51 = (uint64_t)v48 + *(int *)(VisualDataRequest + 32);
    uint64_t v52 = (uint64_t)v73;
    sub_10000FB74(v51, (uint64_t)v73, &qword_10052B490);
    uint64_t v53 = v84;
    uint64_t v54 = v84 + *(int *)(v81 + 48);
    sub_10000FB74(v50, v84, &qword_10052B490);
    sub_10000FB74(v52, v54, &qword_10052B490);
    uint64_t v55 = v83;
    uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    if (v56(v53, 1, v83) == 1)
    {
      sub_10000FBD8(v52, &qword_10052B490);
      sub_10000FBD8(v50, &qword_10052B490);
      if (v56(v54, 1, v55) == 1)
      {
        sub_10000FBD8(v53, &qword_10052B490);
LABEL_22:
        uint64_t v61 = v86;
        uint64_t v62 = (uint64_t)v47 + *(int *)(v86 + 24);
        uint64_t v64 = v78;
        uint64_t v63 = v79;
        uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
        uint64_t v66 = v76;
        v65(v76, v62, v79);
        uint64_t v67 = (char *)v48 + *(int *)(v61 + 24);
        uint64_t v68 = v77;
        v65(v77, (uint64_t)v67, v63);
        sub_10036D2E4(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
        v69(v68, v63);
        v69(v66, v63);
        return v49 & 1;
      }
    }
    else
    {
      uint64_t v57 = v80;
      sub_10000FB74(v53, v80, &qword_10052B490);
      if (v56(v54, 1, v55) != 1)
      {
        uint64_t v59 = v75;
        sub_10036E308(v54, v75, type metadata accessor for Lens_RequestConfig);
        char v60 = sub_10036DF10(v57, v59);
        sub_10036E370(v59, type metadata accessor for Lens_RequestConfig);
        sub_10000FBD8((uint64_t)v73, &qword_10052B490);
        sub_10000FBD8(v50, &qword_10052B490);
        sub_10036E370(v57, type metadata accessor for Lens_RequestConfig);
        sub_10000FBD8(v53, &qword_10052B490);
        if (v60) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
      sub_10000FBD8((uint64_t)v73, &qword_10052B490);
      sub_10000FBD8(v50, &qword_10052B490);
      sub_10036E370(v57, type metadata accessor for Lens_RequestConfig);
    }
    uint64_t v43 = &qword_10052B4A0;
    uint64_t v44 = v53;
    goto LABEL_18;
  }
  return v49 & 1;
}

uint64_t sub_10036DF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_1003E22C8(*(void *)a1, *(void *)a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12))
  {
    uint64_t v11 = type metadata accessor for Lens_RequestConfig(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 32), v4);
    v12(v7, a2 + *(int *)(v11 + 32), v4);
    sub_10036D2E4(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_10036E0F8(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t v14 = type metadata accessor for Lens_Locale(0);
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v15(v10, &a1[*(int *)(v14 + 28)], v4);
        v15(v7, &a2[*(int *)(v14 + 28)], v4);
        sub_10036D2E4(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
        v16(v7, v4);
        v16(v10, v4);
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_10036E308(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10036E370(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10036E3D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_10036E4C4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10036E53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_10036E5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_10036E690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10036E71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_10036E7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036E7D4);
}

uint64_t sub_10036E7D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    BOOL v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10036E884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036E898);
}

void *sub_10036E898(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10036E940()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lens_RequestConfig.Feature()
{
  return &type metadata for Lens_RequestConfig.Feature;
}

uint64_t *sub_10036EA04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    char v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t sub_10036EB14(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10036EB9C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

void *sub_10036EC5C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_10036ED38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_10036EDBC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_10036EE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10036EE7C);
}

uint64_t sub_10036EE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10036EF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10036EF40);
}

uint64_t sub_10036EF40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10036EFE8()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10036F084(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100038528(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for Lens_Locale(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10000F214(&qword_10052B498);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v22;
      uint64_t v38 = v14;
      uint64_t v23 = v17[3];
      v16[2] = v17[2];
      v16[3] = v23;
      uint64_t v24 = v17[5];
      v16[4] = v17[4];
      v16[5] = v24;
      uint64_t v25 = *(int *)(v18 + 28);
      uint64_t v37 = (char *)v16 + v25;
      uint64_t v26 = (char *)v17 + v25;
      swift_bridgeObjectRetain();
      uint64_t v14 = v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v37, v26, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v27 = a3[8];
    uint64_t v28 = (uint64_t *)((char *)a1 + v27);
    uint64_t v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = type metadata accessor for Lens_RequestConfig(0);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = sub_10000F214(&qword_10052B490);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      *uint64_t v28 = *v29;
      *((_WORD *)v28 + 4) = *((_WORD *)v29 + 4);
      *((_DWORD *)v28 + 3) = *((_DWORD *)v29 + 3);
      uint64_t v33 = *(int *)(v30 + 32);
      unint64_t v34 = (char *)v28 + v33;
      uint64_t v35 = (char *)v29 + v33;
      swift_bridgeObjectRetain();
      v14(v34, v35, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
  }
  return a1;
}

uint64_t sub_10036F3BC(uint64_t a1, int *a2)
{
  sub_100038B34(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Lens_Locale(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 28), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(v9 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t *sub_10036F568(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100038528(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for Lens_Locale(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_10000F214(&qword_10052B498);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v16[1];
    void *v15 = *v16;
    v15[1] = v20;
    uint64_t v36 = v13;
    uint64_t v21 = v16[3];
    v15[2] = v16[2];
    v15[3] = v21;
    uint64_t v22 = v16[5];
    v15[4] = v16[4];
    v15[5] = v22;
    uint64_t v23 = *(int *)(v17 + 28);
    uint64_t v35 = (char *)v15 + v23;
    uint64_t v24 = (char *)v16 + v23;
    swift_bridgeObjectRetain();
    uint64_t v13 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v35, v24, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  uint64_t v28 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = sub_10000F214(&qword_10052B490);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    *uint64_t v26 = *v27;
    *((_WORD *)v26 + 4) = *((_WORD *)v27 + 4);
    *((_DWORD *)v26 + 3) = *((_DWORD *)v27 + 3);
    uint64_t v31 = *(int *)(v28 + 32);
    uint64_t v32 = (char *)v26 + v31;
    uint64_t v33 = (char *)v27 + v31;
    swift_bridgeObjectRetain();
    v13(v32, v33, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

uint64_t *sub_10036F850(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100038528(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100038B34(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v43 = v13;
  int v41 = *(void (**)(char *, char *))(v42 + 24);
  v41(v11, v12);
  uint64_t v44 = a3;
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for Lens_Locale(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      void *v15 = *v16;
      v15[1] = v16[1];
      v15[2] = v16[2];
      v15[3] = v16[3];
      v15[4] = v16[4];
      v15[5] = v16[5];
      uint64_t v22 = *(int *)(v17 + 28);
      uint64_t v23 = (char *)v16 + v22;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      uint64_t v40 = (char *)v15 + v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v40, v23, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_10036E370((uint64_t)v15, type metadata accessor for Lens_Locale);
LABEL_6:
    uint64_t v24 = sub_10000F214(&qword_10052B498);
    memcpy(v15, v16, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  void *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[2] = v16[2];
  v15[3] = v16[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[4] = v16[4];
  v15[5] = v16[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v41)((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v43);
LABEL_7:
  uint64_t v25 = *(int *)(v44 + 32);
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30((uint64_t)v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      *(void *)uint64_t v26 = *(void *)v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v26 + 8) = v27[8];
      *(unsigned char *)(v26 + 9) = v27[9];
      *(_DWORD *)(v26 + 12) = *((_DWORD *)v27 + 3);
      ((void (*)(uint64_t, char *, uint64_t))v41)(v26 + *(int *)(v28 + 32), &v27[*(int *)(v28 + 32)], v43);
      return a1;
    }
    sub_10036E370(v26, type metadata accessor for Lens_RequestConfig);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    uint64_t v37 = sub_10000F214(&qword_10052B490);
    memcpy((void *)v26, v27, *(void *)(*(void *)(v37 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = v27[8];
  *(unsigned char *)(v26 + 9) = v27[9];
  *(_DWORD *)(v26 + 12) = *((_DWORD *)v27 + 3);
  uint64_t v33 = *(int *)(v28 + 32);
  uint64_t v34 = v26 + v33;
  uint64_t v35 = &v27[v33];
  uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
  swift_bridgeObjectRetain();
  v36(v34, v35, v43);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return a1;
}

_OWORD *sub_10036FCEC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Lens_Locale(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000F214(&qword_10052B498);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = a3[8];
  int v20 = (void *)((char *)a1 + v19);
  int v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_10000F214(&qword_10052B490);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *int v20 = *v21;
    *((_WORD *)v20 + 4) = *((_WORD *)v21 + 4);
    *((_DWORD *)v20 + 3) = *((_DWORD *)v21 + 3);
    v11((char *)v20 + *(int *)(v22 + 32), (char *)v21 + *(int *)(v22 + 32), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t *sub_10036FF70(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100038B34(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v37 = *(void *)(v12 - 8);
  uint64_t v38 = v12;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v37 + 40);
  v36(v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Lens_Locale(0);
  uint64_t v17 = *(void *)(v16 - 8);
  long long v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      long long v21 = *((_OWORD *)v15 + 1);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v21;
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_10036E370((uint64_t)v14, type metadata accessor for Lens_Locale);
LABEL_6:
    uint64_t v22 = sub_10000F214(&qword_10052B498);
    memcpy(v14, v15, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v33 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = v15[3];
  void v14[2] = v15[2];
  v14[3] = v34;
  swift_bridgeObjectRelease();
  uint64_t v35 = v15[5];
  v14[4] = v15[4];
  v14[5] = v35;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v36)((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v38);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t)a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      *(void *)uint64_t v24 = *(void *)v25;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
      *(unsigned char *)(v24 + 9) = *(unsigned char *)(v25 + 9);
      *(_DWORD *)(v24 + 12) = *(_DWORD *)(v25 + 12);
      ((void (*)(uint64_t, uint64_t, uint64_t))v36)(v24 + *(int *)(v26 + 32), v25 + *(int *)(v26 + 32), v38);
      return a1;
    }
    sub_10036E370(v24, type metadata accessor for Lens_RequestConfig);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = sub_10000F214(&qword_10052B490);
    memcpy((void *)v24, (const void *)v25, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v24 = *(void *)v25;
  *(_WORD *)(v24 + 8) = *(_WORD *)(v25 + 8);
  *(_DWORD *)(v24 + 12) = *(_DWORD *)(v25 + 12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v24 + *(int *)(v26 + 32), v25 + *(int *)(v26 + 32), v38);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_100370358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10037036C);
}

uint64_t sub_10037036C(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_10000F214(&qword_10052B498);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = sub_10000F214(&qword_10052B490);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];

  return v15(v17, a2, v16);
}

uint64_t sub_1003704EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100370500);
}

uint64_t sub_100370500(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_10000F214(&qword_10052B498);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = sub_10000F214(&qword_10052B490);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];

  return v15(v17, a2, a2, v16);
}

void sub_100370680()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_1003707D0(319, &qword_10052B650, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
    if (v1 <= 0x3F)
    {
      sub_1003707D0(319, (unint64_t *)&unk_10052B658, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1003707D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_100370828()
{
  unint64_t result = qword_10052B698;
  if (!qword_10052B698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B698);
  }
  return result;
}

unint64_t sub_100370880()
{
  unint64_t result = qword_10052B6A0;
  if (!qword_10052B6A0)
  {
    sub_10000F69C(&qword_10052B6A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B6A0);
  }
  return result;
}

unint64_t sub_1003708E0()
{
  unint64_t result = qword_10052B6B0;
  if (!qword_10052B6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B6B0);
  }
  return result;
}

unint64_t sub_100370938()
{
  unint64_t result = qword_10052B6B8;
  if (!qword_10052B6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B6B8);
  }
  return result;
}

uint64_t sub_1003709A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  switch(v2 >> 62)
  {
    case 1uLL:
      if ((int)v1 != v1 >> 32) {
        goto LABEL_3;
      }
      return 0;
    case 2uLL:
      if (*(void *)(v1 + 16) == *(void *)(v1 + 24)) {
        return 0;
      }
      goto LABEL_3;
    case 3uLL:
      return 0;
    default:
      if ((v2 & 0xFF000000000000) == 0) {
        return 0;
      }
LABEL_3:
      sub_100038528(v1, v2);
      return Image.init(data:)();
  }
}

uint64_t sub_100370A50()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + *(int *)(type metadata accessor for Lens_Item(0) + 20))
                 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100370AB8()
{
  return 7955819;
}

uint64_t sub_100370AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100370B50(uint64_t a1)
{
  unint64_t v2 = sub_100375520();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100370B8C(uint64_t a1)
{
  unint64_t v2 = sub_100375520();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100370BC8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003752B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100370BF4(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052B780);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100375520();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100370D2C@<X0>(uint64_t a1@<X8>)
{
  sub_10000F214(&qword_10052B788);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  v9[0] = v10;
  v9[1] = v11;
  Binding.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  long long v3 = v11;
  long long v8 = v10;
  v9[0] = *(_OWORD *)(v1 + 32);
  long long v4 = v9[0];
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(void *)(v5 + 64) = *(void *)(v1 + 48);
  *(void *)a1 = 7955787;
  *(void *)(a1 + 8) = 0xE300000000000000;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = sub_1003755CC;
  *(void *)(a1 + 72) = v5;
  sub_100110F38((uint64_t)v9);
  return sub_1003755D4(v1);
}

void sub_100370E68()
{
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setObject:v2 forKey:v3];
}

uint64_t sub_100370F3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100370D2C(a1);
}

uint64_t sub_100370F80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (void *)(*(void *)(v2 + *(int *)(a1 + 20))
                + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__referrerURL);
  swift_beginAccess();
  uint64_t v5 = v4[1];
  *a2 = *v4;
  a2[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100370FE0()
{
  sub_100374D28(&qword_10052AB48, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);

  return Message.hash(into:)();
}

uint64_t sub_10037105C()
{
  return sub_100374D28(&qword_10052B6C0, (void (*)(uint64_t))type metadata accessor for Lens_RelatedSearch);
}

void sub_1003710A4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000F214(&qword_10052B6E8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E8B0();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.userInitiated(_:), v7);
  long long v11 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100374FA4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100371544;
  void aBlock[3] = &unk_1004F5D40;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [a2 fetchTokenWithQueue:v11 completionHandler:v14];
  _Block_release(v14);
}

uint64_t sub_10037132C(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      swift_errorRetain();
      if (qword_100517E58 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10000F378(v3, (uint64_t)qword_10055E220);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v7 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 138412290;
        swift_errorRetain();
        uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v7 = v8;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to fetch private access token %@", v6, 0xCu);
        sub_10000F214(&qword_10051A948);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_10000F214(&qword_10052B6E8);
      return CheckedContinuation.resume(throwing:)();
    }
  }
  else
  {
    sub_100038528(result, a2);
    sub_10000F214(&qword_10052B6E8);
    return CheckedContinuation.resume(returning:)();
  }
  return result;
}

uint64_t sub_100371544(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  os_log_type_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_100094760((uint64_t)v4, v8);

  return swift_release();
}

uint64_t sub_1003715F0(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for TimeZone();
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v31 = v2;
  __chkstk_darwin(v2);
  int v29 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10052B6E0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - v12;
  static Locale.current.getter();
  uint64_t v14 = Locale.identifier.getter();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v13, v7);
  swift_bridgeObjectRelease();
  *a1 = v14;
  a1[1] = v16;
  static Locale.current.getter();
  Locale.region.getter();
  v17(v10, v7);
  uint64_t v18 = type metadata accessor for Locale.Region();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1)
  {
    sub_10000FBD8((uint64_t)v6, &qword_10052B6E0);
    unint64_t v20 = 0xE200000000000000;
    uint64_t v21 = 21333;
  }
  else
  {
    uint64_t v21 = Locale.Region.identifier.getter();
    unint64_t v20 = v22;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
  }
  swift_bridgeObjectRelease();
  a1[2] = v21;
  a1[3] = v20;
  uint64_t v23 = v29;
  static TimeZone.current.getter();
  uint64_t v24 = TimeZone.identifier.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
  uint64_t result = swift_bridgeObjectRelease();
  a1[4] = v24;
  a1[5] = v26;
  return result;
}

uint64_t sub_1003718E8(uint64_t result)
{
  uint64_t v1 = result;
  *(unsigned char *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = 8;
  if (qword_100517F58 != -1) {
    uint64_t result = swift_once();
  }
  *(unsigned char *)(v1 + 9) = byte_10055E408;
  return result;
}

uint64_t sub_10037195C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v25 = a4;
  unint64_t v26 = a5;
  uint64_t v24 = a3;
  uint64_t v7 = type metadata accessor for Lens_RequestConfig(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Lens_Locale(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100374E38(a2, (uint64_t)v14, type metadata accessor for Lens_Locale);
  uint64_t VisualDataRequest = type metadata accessor for Lens_FetchVisualDataRequest(0);
  uint64_t v16 = (uint64_t)a1 + *(int *)(VisualDataRequest + 28);
  sub_10000FBD8(v16, &qword_10052B498);
  sub_100374EA0((uint64_t)v14, v16, type metadata accessor for Lens_Locale);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  sub_100374E38(v24, (uint64_t)v10, type metadata accessor for Lens_RequestConfig);
  uint64_t v17 = (uint64_t)a1 + *(int *)(VisualDataRequest + 32);
  sub_10000FBD8(v17, &qword_10052B490);
  sub_100374EA0((uint64_t)v10, v17, type metadata accessor for Lens_RequestConfig);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  uint64_t v18 = *a1;
  unint64_t v19 = a1[1];
  uint64_t v21 = v25;
  unint64_t v20 = v26;
  sub_100038528(v25, v26);
  uint64_t result = sub_100038B34(v18, v19);
  *a1 = v21;
  a1[1] = v20;
  return result;
}

unsigned char *sub_100371BC8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_100293C3C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_100371DF0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_100371E6C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100371C40()
{
  type metadata accessor for UserDefaultsUtility();
  uint64_t v0 = swift_allocObject();
  ObservationRegistrar.init()();
  id v1 = [self standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 stringForKey:v2];

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_setDeallocating();
    uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
    uint64_t v6 = type metadata accessor for ObservationRegistrar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_setDeallocating();
    uint64_t v7 = v0 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
    uint64_t v8 = type metadata accessor for ObservationRegistrar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    uint64_t v4 = 0;
  }
  swift_deallocClassInstance();
  return v4;
}

uint64_t sub_100371DF0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_100371E6C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100371EF0(uint64_t a1)
{
  uint64_t v9 = sub_10000F214(&qword_10052B6F0);
  unint64_t v10 = sub_100375048();
  v8[0] = a1;
  uint64_t v2 = sub_10000F3B0(v8, v9);
  id v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_100371BC8(v3, v4, &v7);
  uint64_t v5 = v7;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v8);
  return v5;
}

uint64_t sub_100371F8C()
{
  type metadata accessor for URLError.Code();
  v0[36] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for URLError();
  v0[37] = v1;
  v0[38] = *(void *)(v1 - 8);
  v0[39] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for String.Encoding();
  v0[40] = v2;
  v0[41] = *(void *)(v2 - 8);
  v0[42] = swift_task_alloc();
  return _swift_task_switch(sub_1003720D0, 0, 0);
}

uint64_t sub_1003720D0()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[40];
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  v0[43] = v4;
  v0[44] = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 == 15)
  {
    if (qword_100517E58 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000F378(v7, (uint64_t)qword_10055E220);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to generate nonce input data", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[38];
    uint64_t v11 = v0[39];
    uint64_t v13 = v0[37];

    static URLError.Code.unknown.getter();
    sub_10000F214((uint64_t *)&unk_10051FB50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
    *(void *)(inited + 32) = 0x6E656B6F74;
    *(void *)(inited + 40) = 0xE500000000000000;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000016;
    *(void *)(inited + 56) = 0x800000010042C510;
    sub_10031BC4C(inited);
    sub_100374D28(&qword_10052B6D8, (void (*)(uint64_t))&type metadata accessor for URLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    URLError._nsError.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_willThrow();
    goto LABEL_7;
  }
  uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v17 + 16) = 32;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v19 = [(objc_class *)isa bytes];
  unint64_t v20 = isa;
  unint64_t v21 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v4), v4))
      {
        unint64_t v21 = HIDWORD(v4) - (int)v4;
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_23;
    case 2uLL:
      uint64_t v41 = *(void *)(v4 + 16);
      uint64_t v40 = *(void *)(v4 + 24);
      unint64_t v21 = v40 - v41;
      if (__OFSUB__(v40, v41))
      {
LABEL_23:
        __break(1u);
      }
      else
      {
LABEL_19:
        if ((v21 & 0x8000000000000000) != 0) {
          return _assertionFailure(_:_:file:line:flags:)();
        }
      }
      if (HIDWORD(v21)) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
LABEL_12:
      CC_SHA256(v19, v21, (unsigned __int8 *)(v17 + 32));
      uint64_t v22 = sub_100371EF0(v17);
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      v0[45] = v22;
      v0[46] = v24;
      id v25 = objc_allocWithZone((Class)NSPPrivateAccessTokenChallenge);
      NSString v26 = String._bridgeToObjectiveC()();
      Class v27 = Data._bridgeToObjectiveC()().super.isa;
      Class v28 = Array._bridgeToObjectiveC()().super.isa;
      id v29 = [v25 initRSABlindSignatureChallengeWithIssuerName:v26 redemptionNonce:v27 originNames:v28];
      v0[47] = v29;

      id v30 = [v29 challengeData];
      if (!v30)
      {
        uint64_t v42 = v0[39];
        uint64_t v45 = v0[38];
        uint64_t v43 = v0[37];
        static URLError.Code.unknown.getter();
        sub_10000F214((uint64_t *)&unk_10051FB50);
        uint64_t v44 = swift_initStackObject();
        *(_OWORD *)(v44 + 16) = xmmword_10043D4F0;
        *(void *)(v44 + 32) = 0x65736E6F70736572;
        *(void *)(v44 + 40) = 0xE800000000000000;
        *(void *)(v44 + 72) = &type metadata for String;
        *(void *)(v44 + 48) = 0xD000000000000028;
        *(void *)(v44 + 56) = 0x800000010042C550;
        sub_10031BC4C(v44);
        sub_100374D28(&qword_10052B6D8, (void (*)(uint64_t))&type metadata accessor for URLError);
        _BridgedStoredNSError.init(_:userInfo:)();
        URLError._nsError.getter();
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v42, v43);
        swift_willThrow();
        sub_100094760(v4, v6);
        sub_100038B34(v22, v24);

LABEL_7:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v15 = (uint64_t (*)(void))v0[1];
        return v15();
      }
      uint64_t v31 = v30;
      uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      v0[48] = v32;
      v0[49] = v34;
      id v35 = objc_allocWithZone((Class)NSPPrivateAccessTokenFetcher);
      sub_100038528(v32, v34);
      Class v36 = Data._bridgeToObjectiveC()().super.isa;
      id v37 = [v35 initForKnownIssuerWithChallenge:v36];
      v0[50] = v37;
      sub_100038B34(v32, v34);

      [v37 setSystemClient:1];
      uint64_t v38 = swift_task_alloc();
      v0[51] = v38;
      *(void *)(v38 + 16) = v37;
      uint64_t v39 = (void *)swift_task_alloc();
      v0[52] = v39;
      void *v39 = v0;
      v39[1] = sub_100372804;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 22, 0, 0, 0xD00000000000001FLL, 0x800000010042C580, sub_100374F08, v38, &type metadata for Data);
    case 3uLL:
      goto LABEL_12;
    default:
      LODWORD(v21) = BYTE6(v6);
      goto LABEL_12;
  }
}

uint64_t sub_100372804()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100372B7C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100372920;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100372920()
{
  unint64_t object = (unint64_t)v0[24]._object;
  uint64_t countAndFlagsBits = (void *)v0[25]._countAndFlagsBits;
  uint64_t v17 = v0[24]._countAndFlagsBits;
  uint64_t v13 = (uint64_t)v0[22]._object;
  unint64_t v14 = v0[23]._countAndFlagsBits;
  uint64_t v11 = (uint64_t)v0[21]._object;
  unint64_t v12 = v0[22]._countAndFlagsBits;
  unint64_t v20 = v0[23]._object;
  unint64_t v15 = (unint64_t)v0[11]._object;
  uint64_t v16 = v0[11]._countAndFlagsBits;
  v0[12] = Data.base64EncodedString(options:)(0);
  v0[13]._uint64_t countAndFlagsBits = 43;
  v0[13]._unint64_t object = (void *)0xE100000000000000;
  v0[14]._uint64_t countAndFlagsBits = 45;
  v0[14]._unint64_t object = (void *)0xE100000000000000;
  sub_1000317A0();
  uint64_t v1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  v0[15]._uint64_t countAndFlagsBits = v1;
  v0[15]._unint64_t object = v3;
  v0[16]._uint64_t countAndFlagsBits = 47;
  v0[16]._unint64_t object = (void *)0xE100000000000000;
  v0[17]._uint64_t countAndFlagsBits = 95;
  v0[17]._unint64_t object = (void *)0xE100000000000000;
  uint64_t v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._unint64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34;
  v8._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  sub_100094760(v11, v12);
  sub_100038B34(v13, v14);
  sub_100038B34(v17, object);

  sub_100038B34(v16, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(unint64_t, unint64_t))v0->_object;
  return v9(0xD000000000000014, 0x800000010042C5A0);
}

uint64_t sub_100372B7C()
{
  uint64_t v1 = (void *)v0[50];
  uint64_t v3 = v0[48];
  unint64_t v2 = v0[49];
  unint64_t v4 = v0[46];
  unint64_t v5 = (void *)v0[47];
  uint64_t v6 = v0[45];
  sub_100094760(v0[43], v0[44]);
  sub_100038B34(v6, v4);
  sub_100038B34(v3, v2);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100372C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[25] = a3;
  v4[26] = a4;
  v4[23] = a1;
  v4[24] = a2;
  type metadata accessor for String.Encoding();
  v4[27] = swift_task_alloc();
  type metadata accessor for URLError.Code();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLError();
  v4[30] = v5;
  v4[31] = *(void *)(v5 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  sub_10000F214(&qword_100526368);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Lens_Status(0);
  v4[36] = v6;
  v4[37] = *(void *)(v6 - 8);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  type metadata accessor for BinaryDecodingOptions();
  v4[40] = swift_task_alloc();
  v4[41] = type metadata accessor for Lens_FetchVisualDataResponse(0);
  v4[42] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[43] = v7;
  v4[44] = *(void *)(v7 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URLRequest();
  v4[48] = v8;
  v4[49] = *(void *)(v8 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = type metadata accessor for Lens_FetchVisualDataRequest(0);
  v4[52] = swift_task_alloc();
  v4[53] = type metadata accessor for Lens_RequestConfig(0);
  v4[54] = swift_task_alloc();
  v4[55] = type metadata accessor for Lens_Locale(0);
  v4[56] = swift_task_alloc();
  sub_10000F214(&qword_10051E070);
  v4[57] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v4[58] = v9;
  v4[59] = *(void *)(v9 - 8);
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v4[62] = v10;
  v4[63] = *(void *)(v10 - 8);
  v4[64] = swift_task_alloc();
  return _swift_task_switch(sub_1003730F0, 0, 0);
}

uint64_t sub_1003730F0()
{
  if (qword_100517E58 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[63];
  uint64_t v1 = v0[64];
  uint64_t v3 = v0[62];
  uint64_t v4 = sub_10000F378(v3, (uint64_t)qword_10055E220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  Data.base64EncodedString(options:)(0);
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_10052B6D0 + dword_10052B6D0);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[65] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100373220;
  return v7();
}

uint64_t sub_100373220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[66] = a1;
  v4[67] = a2;
  v4[68] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100373AEC;
  }
  else {
    uint64_t v5 = sub_10037333C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10037333C()
{
  uint64_t v2 = *(void *)(v0 + 200);
  unint64_t v1 = *(void *)(v0 + 208);
  uint64_t v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v3 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v2 = 0xD000000000000027;
    unint64_t v1 = 0x800000010042C4E0;
  }
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 456);
  v7._uint64_t countAndFlagsBits = v2;
  v7._unint64_t object = (void *)v1;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 512);
    uint64_t v10 = *(void *)(v0 + 496);
    uint64_t v11 = *(void *)(v0 + 456);
    swift_bridgeObjectRelease();
    sub_10000FBD8(v11, &qword_10051E070);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
    return v12(_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 544);
    Swift::String v39 = *(Swift::String *)(v0 + 528);
    uint64_t v37 = *(void *)(v0 + 488);
    uint64_t v38 = *(void *)(v0 + 480);
    uint64_t v15 = *(void *)(v0 + 472);
    uint64_t v16 = *(void *)(v0 + 448);
    uint64_t v17 = *(void *)(v0 + 432);
    uint64_t v35 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 464);
    uint64_t v34 = *(void *)(v0 + 184);
    (*(void (**)(void))(v15 + 32))();
    sub_100374D28(&qword_10052B438, (void (*)(uint64_t))type metadata accessor for Lens_Locale);
    static Message.with(_:)();
    sub_100374D28(&qword_10052B458, (void (*)(uint64_t))type metadata accessor for Lens_RequestConfig);
    static Message.with(_:)();
    uint64_t v18 = (void *)swift_task_alloc();
    v18[2] = v16;
    v18[3] = v17;
    _OWORD v18[4] = v34;
    v18[5] = v35;
    sub_100374D28(&qword_10052B418, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataRequest);
    static Message.with(_:)();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v38, v37, v36);
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    URLRequest.httpMethod.setter();
    v19._unint64_t object = (void *)0x800000010042C4C0;
    v19._uint64_t countAndFlagsBits = 0xD000000000000016;
    v20._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
    v20._unint64_t object = (void *)0xEC00000065707954;
    URLRequest.addValue(_:forHTTPHeaderField:)(v19, v20);
    v21._uint64_t countAndFlagsBits = 0x7A69726F68747541;
    v21._unint64_t object = (void *)0xED00006E6F697461;
    URLRequest.addValue(_:forHTTPHeaderField:)(v39, v21);
    swift_bridgeObjectRelease();
    Message.serializedData(partial:)();
    if (v14)
    {
      uint64_t v23 = *(void *)(v0 + 504);
      uint64_t v22 = *(void *)(v0 + 512);
      uint64_t v25 = *(void *)(v0 + 488);
      uint64_t v24 = *(void *)(v0 + 496);
      uint64_t v26 = *(void *)(v0 + 464);
      uint64_t v27 = *(void *)(v0 + 472);
      uint64_t v28 = *(void *)(v0 + 448);
      uint64_t v29 = *(void *)(v0 + 432);
      uint64_t v30 = *(void *)(v0 + 416);
      (*(void (**)(void, void))(*(void *)(v0 + 392) + 8))(*(void *)(v0 + 400), *(void *)(v0 + 384));
      sub_100374DD8(v30, type metadata accessor for Lens_FetchVisualDataRequest);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      sub_100374DD8(v29, type metadata accessor for Lens_RequestConfig);
      sub_100374DD8(v28, type metadata accessor for Lens_Locale);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
      return v31();
    }
    else
    {
      URLRequest.httpBody.setter();
      Date.init()();
      *(void *)(v0 + 552) = [self sharedSession];
      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 560) = v32;
      *uint64_t v32 = v0;
      v32[1] = sub_100373C98;
      uint64_t v33 = *(void *)(v0 + 400);
      return NSURLSession.data(for:delegate:)(v33, 0);
    }
  }
}

uint64_t sub_100373AEC()
{
  (*(void (**)(void, void))(v0[63] + 8))(v0[64], v0[62]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100373C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[71] = a1;
  v6[72] = a2;
  v6[73] = a3;
  v6[74] = v3;
  swift_task_dealloc();

  if (v3) {
    Swift::String v7 = sub_100374A98;
  }
  else {
    Swift::String v7 = sub_100373DE0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100373DE0()
{
  (*(void (**)(void, void, void))(v0[44] + 16))(v0[46], v0[47], v0[43]);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[45];
    uint64_t v4 = v0[46];
    uint64_t v5 = v0[43];
    uint64_t v6 = v0[44];
    Swift::String v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)Swift::String v7 = 134217984;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v9 = v8;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v10(v3, v5);
    v0[22] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v109 = v10;
    v10(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Retrieved image search results in %f seconds", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v11 = v0[46];
    uint64_t v12 = v0[43];
    uint64_t v13 = v0[44];

    v109 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v109(v11, v12);
  }
  self;
  uint64_t v14 = (void *)swift_dynamicCastObjCClass();
  if (!v14 || [v14 statusCode] != (id)200)
  {
    uint64_t v85 = (void *)v0[73];
    unint64_t v24 = v0[72];
    uint64_t v73 = v0[71];
    uint64_t v97 = v0[63];
    uint64_t v100 = v0[62];
    uint64_t v91 = v0[58];
    uint64_t v94 = v0[61];
    uint64_t v105 = v0[64];
    uint64_t v107 = v0[56];
    uint64_t v102 = v0[54];
    uint64_t v87 = v0[52];
    uint64_t v25 = v0[49];
    uint64_t v81 = v0[48];
    uint64_t v83 = v0[50];
    uint64_t v77 = v0[47];
    uint64_t v79 = v0[59];
    uint64_t v75 = v0[43];
    uint64_t v27 = v0[31];
    uint64_t v26 = v0[32];
    uint64_t v28 = v0[30];
    static String.Encoding.utf8.getter();
    unint64_t v29 = v24;
    uint64_t v30 = String.init(data:encoding:)();
    unint64_t v32 = v31;
    static URLError.Code.badServerResponse.getter();
    sub_10000F214((uint64_t *)&unk_10051FB50);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
    *(void *)(inited + 32) = 0x65736E6F70736572;
    *(void *)(inited + 40) = 0xE800000000000000;
    *(void *)(inited + 72) = &type metadata for String;
    uint64_t v34 = 0x206E776F6E6B6E55;
    if (v32) {
      uint64_t v34 = v30;
    }
    unint64_t v35 = 0xED0000726F727265;
    if (v32) {
      unint64_t v35 = v32;
    }
    *(void *)(inited + 48) = v34;
    *(void *)(inited + 56) = v35;
    sub_10031BC4C(inited);
    sub_100374D28(&qword_10052B6D8, (void (*)(uint64_t))&type metadata accessor for URLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    URLError._nsError.getter();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    swift_willThrow();
    sub_100038B34(v73, v29);

    v109(v77, v75);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v83, v81);
    sub_100374DD8(v87, type metadata accessor for Lens_FetchVisualDataRequest);
    uint64_t v36 = v79;
    goto LABEL_13;
  }
  uint64_t v15 = v0[74];
  sub_100038528(v0[71], v0[72]);
  BinaryDecodingOptions.init()();
  sub_100374D28(&qword_10052AA90, (void (*)(uint64_t))type metadata accessor for Lens_FetchVisualDataResponse);
  Message.init(serializedData:extensions:partial:options:)();
  if (v15)
  {
    uint64_t v16 = (void *)v0[73];
    uint64_t v17 = v0[63];
    uint64_t v96 = v0[61];
    uint64_t v99 = v0[62];
    uint64_t v18 = v0[59];
    uint64_t v104 = v0[64];
    uint64_t v107 = v0[56];
    uint64_t v102 = v0[54];
    uint64_t v90 = v0[52];
    uint64_t v93 = v0[58];
    uint64_t v19 = v0[49];
    uint64_t v20 = v0[50];
    uint64_t v21 = v0[47];
    uint64_t v22 = v0[48];
    uint64_t v23 = v0[43];
    sub_100038B34(v0[71], v0[72]);

    v109(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v22);
    sub_100374DD8(v90, type metadata accessor for Lens_FetchVisualDataRequest);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v96, v93);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v104, v99);
LABEL_14:
    sub_100374DD8(v102, type metadata accessor for Lens_RequestConfig);
    sub_100374DD8(v107, type metadata accessor for Lens_Locale);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  uint64_t v39 = v0[36];
  uint64_t v40 = v0[37];
  uint64_t v41 = v0[35];
  uint64_t v42 = v0[42] + *(int *)(v0[41] + 24);
  sub_100374D70(v42, v41);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  int v44 = v43(v41, 1, v39);
  uint64_t v45 = v0[39];
  if (v44 == 1)
  {
    uint64_t v46 = v0[35];
    *(void *)uint64_t v45 = 0;
    *(unsigned char *)(v45 + 8) = 1;
    *(void *)(v45 + 16) = 0;
    *(void *)(v45 + 24) = 0xE000000000000000;
    UnknownStorage.init()();
    sub_10000FBD8(v46, &qword_100526368);
  }
  else
  {
    sub_100374EA0(v0[35], v45, type metadata accessor for Lens_Status);
  }
  uint64_t v47 = (uint64_t *)v0[39];
  uint64_t v48 = *v47;
  sub_100374DD8((uint64_t)v47, type metadata accessor for Lens_Status);
  if (v48)
  {
    uint64_t v49 = v0[36];
    uint64_t v50 = v0[34];
    static URLError.Code.badServerResponse.getter();
    sub_10000F214((uint64_t *)&unk_10051FB50);
    uint64_t v51 = swift_initStackObject();
    *(_OWORD *)(v51 + 16) = xmmword_10043D4F0;
    *(void *)(v51 + 32) = 0x65736E6F70736572;
    *(void *)(v51 + 40) = 0xE800000000000000;
    sub_100374D70(v42, v50);
    int v52 = v43(v50, 1, v49);
    uint64_t v53 = v0[38];
    if (v52 == 1)
    {
      uint64_t v54 = v0[34];
      *(void *)uint64_t v53 = 0;
      *(unsigned char *)(v53 + 8) = 1;
      *(void *)(v53 + 16) = 0;
      *(void *)(v53 + 24) = 0xE000000000000000;
      UnknownStorage.init()();
      sub_10000FBD8(v54, &qword_100526368);
    }
    else
    {
      sub_100374EA0(v0[34], v53, type metadata accessor for Lens_Status);
    }
    uint64_t v80 = (void *)v0[73];
    unint64_t v74 = v0[72];
    uint64_t v72 = v0[71];
    uint64_t v97 = v0[63];
    uint64_t v100 = v0[62];
    uint64_t v91 = v0[58];
    uint64_t v94 = v0[61];
    uint64_t v105 = v0[64];
    uint64_t v107 = v0[56];
    uint64_t v102 = v0[54];
    uint64_t v86 = v0[52];
    uint64_t v89 = v0[59];
    uint64_t v64 = v0[49];
    uint64_t v82 = v0[48];
    uint64_t v84 = v0[50];
    uint64_t v76 = v0[43];
    uint64_t v78 = v0[47];
    uint64_t v71 = v0[42];
    uint64_t v65 = v0[38];
    uint64_t v66 = v0[33];
    uint64_t v67 = v0[30];
    uint64_t v68 = v0[31];
    uint64_t v70 = *(void *)(v65 + 16);
    uint64_t v69 = *(void *)(v65 + 24);
    swift_bridgeObjectRetain();
    sub_100374DD8(v65, type metadata accessor for Lens_Status);
    *(void *)(v51 + 72) = &type metadata for String;
    *(void *)(v51 + 48) = v70;
    *(void *)(v51 + 56) = v69;
    sub_10031BC4C(v51);
    sub_100374D28(&qword_10052B6D8, (void (*)(uint64_t))&type metadata accessor for URLError);
    _BridgedStoredNSError.init(_:userInfo:)();
    URLError._nsError.getter();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
    swift_willThrow();
    sub_100038B34(v72, v74);

    sub_100374DD8(v71, type metadata accessor for Lens_FetchVisualDataResponse);
    v109(v78, v76);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v84, v82);
    sub_100374DD8(v86, type metadata accessor for Lens_FetchVisualDataRequest);
    uint64_t v36 = v89;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v94, v91);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v105, v100);
    goto LABEL_14;
  }
  uint64_t v55 = (void *)v0[73];
  uint64_t v56 = v0[63];
  uint64_t v95 = v0[61];
  uint64_t v98 = v0[62];
  uint64_t v57 = v0[59];
  uint64_t v101 = v0[54];
  uint64_t v103 = v0[64];
  uint64_t v88 = v0[52];
  uint64_t v92 = v0[58];
  uint64_t v58 = v0[49];
  uint64_t v59 = v0[50];
  uint64_t v61 = v0[47];
  uint64_t v60 = v0[48];
  uint64_t v62 = v0[43];
  int v106 = (uint64_t *)v0[42];
  uint64_t v108 = v0[56];
  sub_100038B34(v0[71], v0[72]);

  v109(v61, v62);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v60);
  sub_100374DD8(v88, type metadata accessor for Lens_FetchVisualDataRequest);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v95, v92);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v103, v98);
  sub_100374DD8(v101, type metadata accessor for Lens_RequestConfig);
  sub_100374DD8(v108, type metadata accessor for Lens_Locale);
  uint64_t v110 = *v106;
  swift_bridgeObjectRetain();
  sub_100374DD8((uint64_t)v106, type metadata accessor for Lens_FetchVisualDataResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = (uint64_t (*)(uint64_t))v0[1];
  return v63(v110);
}

uint64_t sub_100374A98()
{
  uint64_t v1 = v0[63];
  uint64_t v13 = v0[64];
  uint64_t v3 = v0[61];
  uint64_t v2 = v0[62];
  uint64_t v5 = v0[58];
  uint64_t v4 = v0[59];
  uint64_t v14 = v0[56];
  uint64_t v12 = v0[54];
  uint64_t v6 = v0[52];
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[50];
  uint64_t v9 = v0[48];
  (*(void (**)(void, void))(v0[44] + 8))(v0[47], v0[43]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  sub_100374DD8(v6, type metadata accessor for Lens_FetchVisualDataRequest);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v2);
  sub_100374DD8(v12, type metadata accessor for Lens_RequestConfig);
  sub_100374DD8(v14, type metadata accessor for Lens_Locale);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100374D08(uint64_t *a1)
{
  return sub_10037195C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100374D28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100374D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100526368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100374DD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100374E38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100374EA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100374F08(uint64_t a1)
{
  sub_1003710A4(a1, *(void **)(v1 + 16));
}

uint64_t sub_100374F10()
{
  uint64_t v1 = sub_10000F214(&qword_10052B6E8);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100374FA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10000F214(&qword_10052B6E8);

  return sub_10037132C(a1, a2, a3);
}

uint64_t sub_100375030(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100375040()
{
  return swift_release();
}

unint64_t sub_100375048()
{
  unint64_t result = qword_10052B6F8;
  if (!qword_10052B6F8)
  {
    sub_10000F69C(&qword_10052B6F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B6F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for GoogleImageSearchConfiguration()
{
  return &type metadata for GoogleImageSearchConfiguration;
}

unint64_t sub_1003750B8()
{
  unint64_t result = qword_10052B700;
  if (!qword_10052B700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B700);
  }
  return result;
}

unint64_t sub_10037510C(uint64_t a1)
{
  unint64_t result = sub_100375134();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100375134()
{
  unint64_t result = qword_10052B730;
  if (!qword_10052B730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B730);
  }
  return result;
}

unint64_t sub_10037518C(uint64_t a1)
{
  unint64_t result = sub_1003751B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003751B4()
{
  unint64_t result = qword_10052B760;
  if (!qword_10052B760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B760);
  }
  return result;
}

uint64_t sub_100375208()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100375224(void *a1)
{
  a1[1] = sub_100016FD4();
  a1[2] = sub_100017374();
  unint64_t result = sub_10037525C();
  a1[3] = result;
  return result;
}

unint64_t sub_10037525C()
{
  unint64_t result = qword_10052B768;
  if (!qword_10052B768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B768);
  }
  return result;
}

uint64_t sub_1003752B0(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10052B770);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UserDefaultsUtility();
  uint64_t v7 = swift_allocObject();
  ObservationRegistrar.init()();
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();

  swift_setDeallocating();
  uint64_t v10 = v7 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v11 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_deallocClassInstance();
  uint64_t v12 = (uint64_t)sub_10000F3B0(a1, a1[3]);
  sub_100375520();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v12;
}

unint64_t sub_100375520()
{
  unint64_t result = qword_10052B778;
  if (!qword_10052B778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B778);
  }
  return result;
}

uint64_t sub_100375574()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void sub_1003755CC()
{
}

uint64_t sub_1003755D4(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for GoogleImageSearchConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003756D8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GoogleImageSearchConfiguration.CodingKeys()
{
  return &type metadata for GoogleImageSearchConfiguration.CodingKeys;
}

uint64_t destroy for GoogleImageSearchConfigurationForm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for GoogleImageSearchConfigurationForm(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for GoogleImageSearchConfigurationForm(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GoogleImageSearchConfigurationForm(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for GoogleImageSearchConfigurationForm()
{
  return &type metadata for GoogleImageSearchConfigurationForm;
}

unint64_t sub_100375918()
{
  unint64_t result = qword_10052B790;
  if (!qword_10052B790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B790);
  }
  return result;
}

unint64_t sub_100375970()
{
  unint64_t result = qword_10052B798;
  if (!qword_10052B798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B798);
  }
  return result;
}

unint64_t sub_1003759C8()
{
  unint64_t result = qword_10052B7A0;
  if (!qword_10052B7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B7A0);
  }
  return result;
}

unint64_t sub_100375A20()
{
  unint64_t result = qword_10052B7A8[0];
  if (!qword_10052B7A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10052B7A8);
  }
  return result;
}

uint64_t sub_100375A74(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_100376058, 0, 0);
}

uint64_t sub_100375A94(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_100375AB4, 0, 0);
}

uint64_t sub_100375AB4()
{
  if (qword_100517DF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = qword_10055E100;
  swift_beginAccess();
  *uint64_t v1 = *(void *)(v2 + 16);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  return v4();
}

unint64_t sub_100375B84()
{
  unint64_t result = qword_10052B7C0;
  if (!qword_10052B7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B7C0);
  }
  return result;
}

unint64_t sub_100375BDC()
{
  unint64_t result = qword_10052B7C8[0];
  if (!qword_10052B7C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10052B7C8);
  }
  return result;
}

uint64_t sub_100375C30()
{
  return _swift_task_switch(sub_100375C4C, 0, 0);
}

uint64_t sub_100375C4C()
{
  if (qword_100517DF0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_100375D04(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_100376004();
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  return EnumerableEntityQuery.suggestedEntities()(a1, a2, v6);
}

unint64_t sub_100375DBC()
{
  unint64_t result = qword_10052B7E0;
  if (!qword_10052B7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B7E0);
  }
  return result;
}

unint64_t sub_100375E14()
{
  unint64_t result = qword_10052B7E8;
  if (!qword_10052B7E8)
  {
    sub_10000F69C(qword_10052B7F0);
    sub_100047214();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B7E8);
  }
  return result;
}

uint64_t sub_100375E88(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_1000470A4();
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100375F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000F878;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

ValueMetadata *type metadata accessor for FrameEntityQuery()
{
  return &type metadata for FrameEntityQuery;
}

unint64_t sub_100376004()
{
  unint64_t result = qword_10052B808;
  if (!qword_10052B808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B808);
  }
  return result;
}

uint64_t Numeric<>.isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v11 = AdditiveArithmetic.isApproximatelyEqual<A>(to:absoluteTolerance:relativeTolerance:norm:)(a1, a2, a3, (void (*)(uint64_t))sub_1003767CC, (uint64_t)v13, a4, AssociatedTypeWitness, *(void *)(v14 + 8), v15);
  swift_release();
  return v11 & 1;
}

uint64_t sub_10037613C()
{
  return dispatch thunk of Numeric.magnitude.getter();
}

uint64_t sub_10037616C()
{
  return dispatch thunk of Numeric.magnitude.getter();
}

uint64_t sub_10037619C()
{
  return 24;
}

__n128 sub_1003761A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t Numeric<>.isApproximatelyEqual(to:relativeTolerance:norm:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a4;
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v20 - v16;
  dispatch thunk of static FloatingPoint.leastNormalMagnitude.getter();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, AssociatedTypeWitness);
  LOBYTE(a7) = AdditiveArithmetic.isApproximatelyEqual<A>(to:absoluteTolerance:relativeTolerance:norm:)(v20, (uint64_t)v17, a2, v21, v22, a5, AssociatedTypeWitness, *(void *)(a6 + 8), a7);
  v18(v17, AssociatedTypeWitness);
  return a7 & 1;
}

uint64_t AdditiveArithmetic.isApproximatelyEqual<A>(to:absoluteTolerance:relativeTolerance:norm:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v54 = a4;
  uint64_t v56 = a3;
  uint64_t v58 = a2;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v52 = a5;
  uint64_t v53 = v12;
  __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = *(void *)(v15 - 8);
  __chkstk_darwin(v16);
  uint64_t v59 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v57 = (char *)&v49 - v19;
  __chkstk_darwin(v20);
  uint64_t v55 = (char *)&v49 - v21;
  __chkstk_darwin(v22);
  uint64_t v51 = (char *)&v49 - v23;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v49 - v25;
  __chkstk_darwin(v27);
  unint64_t v29 = (void (*)(uint64_t))((char *)&v49 - v28);
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v49 - v31;
  uint64_t v34 = v33;
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    char v35 = 1;
  }
  else
  {
    uint64_t v49 = a9;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v50 = v32;
    uint64_t v36 = v54;
    v54((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v14, a6);
    v36(v9);
    uint64_t v37 = v51;
    v36(v34);
    uint64_t v38 = v29;
    uint64_t v39 = *(void *)(*(void *)(v49 + 24) + 8);
    max<A>(_:_:)();
    uint64_t v40 = v60;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v42 = v37;
    uint64_t v43 = v50;
    v41(v42, a7);
    v41(v26, a7);
    uint64_t v54 = v38;
    dispatch thunk of static Numeric.* infix(_:_:)();
    int v44 = v55;
    uint64_t v58 = v39;
    max<A>(_:_:)();
    v41(v26, a7);
    LOBYTE(v38) = dispatch thunk of FloatingPoint.isFinite.getter();
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    uint64_t v46 = v57;
    v45(v57, v43, a7);
    uint64_t v47 = v59;
    v45(v59, v44, a7);
    if (v38) {
      char v35 = dispatch thunk of static Comparable.<= infix(_:_:)();
    }
    else {
      char v35 = 0;
    }
    v41(v47, a7);
    v41(v46, a7);
    v41(v44, a7);
    v41((char *)v54, a7);
    v41(v43, a7);
  }
  return v35 & 1;
}

uint64_t sub_1003767CC()
{
  return swift_getAtKeyPath();
}

BOOL sub_1003767D4(double a1, double a2, double a3, double a4)
{
  if (a4 == a1) {
    return 1;
  }
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0) {
    return 0;
  }
  double v7 = v8 * a3;
  if (v8 * a3 < a2) {
    double v7 = a2;
  }
  return v8 <= v7;
}

uint64_t (*sub_1003768B8())(uint64_t a1, char a2)
{
  sub_10027DE88();
  EnvironmentValues.subscript.getter();
  *(_OWORD *)(swift_allocObject() + 16) = v1;
  return sub_10037695C;
}

uint64_t sub_100376924()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10037695C(uint64_t a1, char a2)
{
  return sub_100228DE0(a1, a2, *(uint64_t (**)(uint64_t, char *))(v2 + 16));
}

ValueMetadata *type metadata accessor for OpenSensitiveURLKey()
{
  return &type metadata for OpenSensitiveURLKey;
}

unsigned char *storeEnumTagSinglePayload for OpenSensitiveURLOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100376A40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenSensitiveURLOptions()
{
  return &type metadata for OpenSensitiveURLOptions;
}

ValueMetadata *type metadata accessor for OpenSensitiveURLModifier()
{
  return &type metadata for OpenSensitiveURLModifier;
}

uint64_t sub_100376A88()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_100376AA4(void *a1@<X8>)
{
  *a1 = nullsub_2;
  a1[1] = 0;
}

uint64_t sub_100376ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_100376B98;
  *(void *)(v5 + 24) = 0;
  uint64_t v6 = sub_10000F214(&qword_10052B810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  uint64_t result = sub_10000F214(&qword_10052B818);
  double v8 = (uint64_t *)(a2 + *(int *)(result + 36));
  *double v8 = KeyPath;
  v8[1] = (uint64_t)sub_100376B9C;
  v8[2] = v5;
  return result;
}

uint64_t sub_100376B9C(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, *a2);
}

void sub_100376BC8(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000F378(v8, (uint64_t)qword_10055E2E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    int v25 = a2;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v24 = a1;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_100049058();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = sub_1003806B0(v13, v14, &v27);
    LOBYTE(a2) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attempting to open a sensitive URL: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  id v15 = [self defaultWorkspace];
  if (v15)
  {
    uint64_t v17 = v15;
    URL._bridgeToObjectiveC()(v16);
    uint64_t v19 = v18;
    if (a2)
    {
      sub_10000F214((uint64_t *)&unk_10051FB50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v22;
      *(void *)(inited + 72) = &type metadata for Bool;
      *(unsigned char *)(inited + 48) = 1;
      uint64_t v20 = (void *)inited;
    }
    else
    {
      uint64_t v20 = _swiftEmptyArrayStorage;
    }
    sub_10031BC4C((uint64_t)v20);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 openSensitiveURL:v19 withOptions:isa];
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100376F2C()
{
  unint64_t result = qword_10052B820;
  if (!qword_10052B820)
  {
    sub_10000F69C(&qword_10052B818);
    sub_100013AA8(&qword_10052B828, &qword_10052B810);
    sub_100013AA8(&qword_10052B830, &qword_10052B838);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B820);
  }
  return result;
}

ValueMetadata *type metadata accessor for ACMEResultView()
{
  return &type metadata for ACMEResultView;
}

ValueMetadata *type metadata accessor for ACMEConfiguration()
{
  return &type metadata for ACMEConfiguration;
}

unsigned char *storeEnumTagSinglePayload for AcmeState(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003770B0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AcmeState()
{
  return &type metadata for AcmeState;
}

unint64_t sub_1003770EC()
{
  unint64_t result = qword_10052B840;
  if (!qword_10052B840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B840);
  }
  return result;
}

uint64_t sub_100377140(uint64_t a1)
{
  unint64_t v2 = sub_1003778D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10037717C(uint64_t a1)
{
  unint64_t v2 = sub_1003778D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003771B8(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052B8B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003778D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1003772CC()
{
  unint64_t result = qword_10052B848;
  if (!qword_10052B848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B848);
  }
  return result;
}

unint64_t sub_100377320(uint64_t a1)
{
  unint64_t result = sub_100377348();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100377348()
{
  unint64_t result = qword_10052B878;
  if (!qword_10052B878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B878);
  }
  return result;
}

unint64_t sub_1003773A0(uint64_t a1)
{
  unint64_t result = sub_1003773C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003773C8()
{
  unint64_t result = qword_10052B8A8;
  if (!qword_10052B8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B8A8);
  }
  return result;
}

uint64_t sub_10037741C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100377438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000F214(&qword_10051EB90);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  Button<>.init(_:action:)();
  v14[0] = a1;
  v14[1] = a2;
  sub_10000F214(&qword_10052B8C8);
  Binding.wrappedValue.getter();
  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  LOBYTE(a2) = static GenerativeAssistantSettingsUserDefaults.isEnabled()();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = (a2 & 1) == 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a3, v9, v6);
  uint64_t v12 = (uint64_t *)(a3 + *(int *)(sub_10000F214(&qword_10051EB98) + 36));
  *uint64_t v12 = KeyPath;
  v12[1] = (uint64_t)sub_1000E5558;
  void v12[2] = v11;
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100377608()
{
  return static GenerativeAssistantSettingsUserDefaults.setEnabled(_:)();
}

uint64_t sub_100377638@<X0>(uint64_t a1@<X8>)
{
  return sub_100377438(*v1, v1[1], a1);
}

unint64_t sub_100377640(void *a1)
{
  a1[1] = sub_100017124();
  a1[2] = sub_1000174C4();
  unint64_t result = sub_100377678();
  a1[3] = result;
  return result;
}

unint64_t sub_100377678()
{
  unint64_t result = qword_10052B8B0;
  if (!qword_10052B8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B8B0);
  }
  return result;
}

uint64_t sub_1003776CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1003776E8()
{
  uint64_t v0 = type metadata accessor for LatencyTextStyle();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (uint64_t *)&v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-v4];
  uint64_t v6 = sub_10000F214(&qword_1005256D8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  *uint64_t v2 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  sub_100377934((uint64_t)v2, (uint64_t)v5);
  sub_100377998((uint64_t)v5, (uint64_t)&v8[*(int *)(v6 + 36)]);
  *(void *)uint64_t v8 = v9;
  *((void *)v8 + 1) = v11;
  v8[16] = v13 & 1;
  *((void *)v8 + 3) = v15;
  sub_1003779FC((uint64_t)v5);
  sub_10021843C();
  View.accessibilityIdentifier(_:)();
  return sub_100377A58((uint64_t)v8);
}

unint64_t sub_1003778D8()
{
  unint64_t result = qword_10052B8C0;
  if (!qword_10052B8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B8C0);
  }
  return result;
}

uint64_t sub_100377934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LatencyTextStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100377998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LatencyTextStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003779FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LatencyTextStyle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100377A58(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005256D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100377AC0()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ACMEConfiguration.CodingKeys()
{
  return &type metadata for ACMEConfiguration.CodingKeys;
}

void *sub_100377AE4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ACMEConfigurationForm(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ACMEConfigurationForm(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ACMEConfigurationForm()
{
  return &type metadata for ACMEConfigurationForm;
}

uint64_t sub_100377BD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100377C1C()
{
  unint64_t result = qword_10052B8D0;
  if (!qword_10052B8D0)
  {
    sub_10000F69C(&qword_10051EB98);
    sub_100013AA8(&qword_100521430, &qword_10051EB90);
    sub_100013AA8(&qword_100521B48, &qword_100521B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B8D0);
  }
  return result;
}

unint64_t sub_100377CE4()
{
  unint64_t result = qword_10052B8D8;
  if (!qword_10052B8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B8D8);
  }
  return result;
}

unint64_t sub_100377D3C()
{
  unint64_t result = qword_10052B8E0[0];
  if (!qword_10052B8E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10052B8E0);
  }
  return result;
}

BOOL sub_100377D90(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v8 = type metadata accessor for TextDetectorResult(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = a2 * a3;
  char v13 = (long long *)(a1 + *(int *)(v9 + 24));
  long long v14 = v13[1];
  long long v28 = *v13;
  long long v29 = v14;
  long long v15 = v13[3];
  long long v30 = v13[2];
  long long v31 = v15;
  v32.origin.CGFloat x = sub_1003FD844();
  CGFloat v16 = CGRectGetWidth(v32) * a2;
  v33.origin.CGFloat x = sub_1003FD844();
  double v17 = v16 * (CGRectGetHeight(v33) * a3) / v12 * 100.0;
  if (v17 < a4)
  {
    if (qword_100517E78 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000F378(v18, (uint64_t)qword_10055E280);
    sub_100378024(a1, (uint64_t)v11);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134218242;
      uint64_t v26 = *(void *)&a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v22 = (uint64_t *)&v11[*(int *)(v8 + 28)];
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1003806B0(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100378088((uint64_t)v11);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Not reading out text because it is less than %f%% of the image content: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100378088((uint64_t)v11);
    }
  }
  return v17 < a4;
}

uint64_t sub_100378024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100378088(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_1003780E4(uint64_t a1, double a2, double a3, float a4)
{
  uint64_t v8 = type metadata accessor for TextDetectorResult(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  long long v14 = (char *)v45 - v13;
  __chkstk_darwin(v15);
  double v17 = (char *)v45 - v16;
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(unsigned __int8 *)(v9 + 80);
    v45[1] = a1;
    uint64_t v46 = v9;
    uint64_t v21 = *(void *)(v9 + 72);
    uint64_t v47 = (v20 + 32) & ~v20;
    uint64_t v22 = a1 + v47;
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t v48 = v8;
    while (1)
    {
      sub_100378024(v22 + v21 * v19, (uint64_t)v17);
      BOOL result = sub_100377D90((uint64_t)v17, a2, a3, 2.5);
      if (!result)
      {
        uint64_t v25 = *(void *)&v17[*(int *)(v8 + 44)];
        uint64_t v26 = *(void *)(v25 + 16);
        if (v26)
        {
          if (*(float *)(v25 + 32) >= a4) {
            goto LABEL_16;
          }
          if (v26 != 1)
          {
            if (*(float *)(v25 + 72) >= a4)
            {
LABEL_16:
              sub_1003784B0((uint64_t)v17, (uint64_t)v14);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_10004080C(0, v23[2] + 1, 1);
              }
              uint64_t v23 = v49;
              unint64_t v31 = v49[2];
              unint64_t v30 = v49[3];
              if (v31 >= v30 >> 1)
              {
                sub_10004080C(v30 > 1, v31 + 1, 1);
                uint64_t v23 = v49;
              }
              void v23[2] = v31 + 1;
              sub_1003784B0((uint64_t)v14, (uint64_t)v23 + v47 + v31 * v21);
              uint64_t v8 = v48;
              goto LABEL_4;
            }
            if (v26 != 2)
            {
              uint64_t v27 = (float *)(v25 + 112);
              uint64_t v28 = 2;
              while (1)
              {
                uint64_t v29 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  break;
                }
                if (*v27 >= a4) {
                  goto LABEL_16;
                }
                ++v28;
                v27 += 10;
                if (v29 == v26) {
                  goto LABEL_3;
                }
              }
              __break(1u);
              return result;
            }
          }
        }
      }
LABEL_3:
      sub_100378088((uint64_t)v17);
LABEL_4:
      if (++v19 == v18)
      {
        CGRect v32 = v49;
        uint64_t v9 = v46;
        goto LABEL_23;
      }
    }
  }
  CGRect v32 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
  int64_t v33 = v32[2];
  if (v33)
  {
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_1000407B0(0, v33, 0);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v47 = (uint64_t)v32;
    uint64_t v35 = (uint64_t)v32 + ((v34 + 32) & ~v34);
    uint64_t v36 = *(void *)(v9 + 72);
    do
    {
      sub_100378024(v35, (uint64_t)v11);
      uint64_t v37 = &v11[*(int *)(v8 + 28)];
      uint64_t v39 = *(void *)v37;
      uint64_t v38 = *((void *)v37 + 1);
      swift_bridgeObjectRetain();
      sub_100378088((uint64_t)v11);
      uint64_t v40 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000407B0(0, v40[2] + 1, 1);
        uint64_t v40 = v49;
      }
      unint64_t v42 = v40[2];
      unint64_t v41 = v40[3];
      if (v42 >= v41 >> 1)
      {
        sub_1000407B0(v41 > 1, v42 + 1, 1);
        uint64_t v40 = v49;
      }
      v40[2] = v42 + 1;
      uint64_t v43 = &v40[2 * v42];
      v43[4] = v39;
      v43[5] = v38;
      v35 += v36;
      --v33;
    }
    while (v33);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v40 = _swiftEmptyArrayStorage;
  }
  unint64_t v44 = sub_1003368F8((uint64_t)v40);
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_1003784B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100378514()
{
  sub_100027A88();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *sub_100378640(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(void *)(v7 + 64) <= 8uLL) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  unsigned int v14 = v13 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (v14 > 7
    || ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((((*(void *)(*(void *)(v9 - 8) + 64)
           + 7
           + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
             + v13
             + (((v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 42) & ~v11)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v17 = *(void *)a2;
    *a1 = v17;
    a1 = (void *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    unsigned int v18 = a2[v8];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v20 = v8;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v8 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_25;
          }
          goto LABEL_23;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_23:
          }
            unsigned int v18 = (v21 | (v19 << (8 * v8))) + 2;
          else {
LABEL_25:
          }
            unsigned int v18 = v21 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v39 = *(void *)(*(void *)(v9 - 8) + 64) + 7;
    uint64_t v40 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    uint64_t v41 = *(void *)(a3 + 24);
    uint64_t v42 = *(void *)(a3 + 16);
    uint64_t v22 = v8 + 1;
    uint64_t v23 = ~v11;
    uint64_t v24 = ~v13;
    if (v18 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      char v25 = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      swift_retain();
      char v25 = 0;
    }
    *((unsigned char *)a1 + v8) = v25;
    unint64_t v26 = ((unint64_t)a1 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (unint64_t)&a2[v22 + 7] & 0xFFFFFFFFFFFFFFF8;
    long long v28 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v28;
    *(unsigned char *)(v26 + 32) = *(unsigned char *)(v27 + 32);
    *(unsigned char *)(v26 + 33) = *(unsigned char *)(v27 + 33);
    uint64_t v29 = (v26 + v11 + 34) & v23;
    uint64_t v30 = (v27 + v11 + 34) & v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v29, v30, v42);
    uint64_t v31 = (v29 + v40 + v13) & v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v31, (v30 + v40 + v13) & v24, v41);
    CGRect v32 = (void *)((v39 + v31) & 0xFFFFFFFFFFFFFFF8);
    int64_t v33 = (void *)((v39 + ((v30 + v40 + v13) & v24)) & 0xFFFFFFFFFFFFFFF8);
    *CGRect v32 = *v33;
    v32[1] = v33[1];
    uint64_t v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v35;
    v34[1] = v35[1];
    unint64_t v36 = ((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = ((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v36 = *(unsigned char *)v37;
    *(void *)(v36 + 8) = *(void *)(v37 + 8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t sub_100378A10(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v4 - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else {
    swift_release();
  }
  unint64_t v11 = (unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v13 = v12 + 8;
  unint64_t v14 = (v11 + *(unsigned __int8 *)(v12 + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v14);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((v14
                                                                                            + *(void *)(v13 + 56)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_100378C20(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    *a1 = *(void *)a2;
    swift_retain();
    char v12 = 0;
  }
  *((unsigned char *)a1 + v7) = v12;
  unint64_t v13 = ((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(unsigned char *)(v13 + 33) = *(unsigned char *)(v14 + 33);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 34 + v13) & ~v18;
  uint64_t v20 = (v18 + 34 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 48);
  uint64_t v22 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v23 = v22 + 16;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = v21 + v24;
  uint64_t v26 = (v25 + v19) & ~v24;
  uint64_t v27 = (v25 + v20) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v26, v27);
  uint64_t v28 = *(void *)(v23 + 48) + 7;
  uint64_t v29 = (void *)((v28 + v26) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)((v28 + v27) & 0xFFFFFFFFFFFFFFF8);
  void *v29 = *v30;
  v29[1] = v30[1];
  uint64_t v31 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  CGRect v32 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v31 = *v32;
  v31[1] = v32[1];
  unint64_t v33 = ((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v33 = *(unsigned char *)v34;
  *(void *)(v33 + 8) = *(void *)(v34 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

unsigned __int8 *sub_100378EE0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_36:
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  unint64_t v17 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v17 <= 8) {
    unint64_t v17 = 8;
  }
  unint64_t v18 = v17 + 8;
  unint64_t v19 = (unint64_t)&a1[v18] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (unint64_t)&a2[v18] & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  *(void *)(v19 + 24) = *(void *)(v20 + 24);
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
  *(unsigned char *)(v19 + 33) = *(unsigned char *)(v20 + 33);
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = (v23 + 34 + v19) & ~v23;
  uint64_t v25 = (v23 + 34 + v20) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v24, v25);
  uint64_t v26 = *(void *)(v22 + 40);
  uint64_t v27 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v28 = v27 + 24;
  uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v30 = v26 + v29;
  uint64_t v31 = (v30 + v24) & ~v29;
  uint64_t v32 = (v30 + v25) & ~v29;
  (*(void (**)(uint64_t, uint64_t))(v27 + 24))(v31, v32);
  uint64_t v33 = *(void *)(v28 + 40) + 7;
  unint64_t v34 = (void *)((v33 + v31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)((v33 + v32) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_retain();
  swift_release();
  unint64_t v36 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_retain();
  swift_release();
  unint64_t v38 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v38 = *(unsigned char *)v39;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1003792E0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    char v12 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v7) = v12;
  unint64_t v13 = ((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(unsigned char *)(v13 + 33) = *(unsigned char *)(v14 + 33);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 34 + v13) & ~v18;
  uint64_t v20 = (v18 + 34 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 32);
  uint64_t v22 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v23 = v22 + 32;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = v21 + v24;
  uint64_t v26 = (v25 + v19) & ~v24;
  uint64_t v27 = (v25 + v20) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v26, v27);
  uint64_t v28 = *(void *)(v23 + 32) + 7;
  uint64_t v29 = (_OWORD *)((v28 + v26) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (_OWORD *)((v28 + v27) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v29 = *v30;
  uint64_t v31 = (_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v31 = *v32;
  *(_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *sub_100379560(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v17 = 1;
    }
    else
    {
LABEL_36:
      char v17 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v17;
  }
  unint64_t v18 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v18 <= 8) {
    unint64_t v18 = 8;
  }
  unint64_t v19 = v18 + 8;
  unint64_t v20 = (unint64_t)&a1[v19] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (unint64_t)&a2[v19] & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v20 = *(void *)v21;
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  *(void *)(v20 + 16) = *(void *)(v21 + 16);
  *(void *)(v20 + 24) = *(void *)(v21 + 24);
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v21 + 32);
  *(unsigned char *)(v20 + 33) = *(unsigned char *)(v21 + 33);
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v23 = v22 + 40;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = (v24 + 34 + v20) & ~v24;
  uint64_t v26 = (v24 + 34 + v21) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v25, v26);
  uint64_t v27 = *(void *)(v23 + 24);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v29 = v28 + 40;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 24) + 7;
  uint64_t v35 = (void *)((v34 + v32) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = (void *)((v34 + v33) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_release();
  unint64_t v37 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_release();
  unint64_t v39 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v39 = *(unsigned char *)v40;
  *(void *)(v39 + 8) = *(void *)(v40 + 8);
  swift_release();
  return a1;
}

uint64_t sub_100379944(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v6 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v6;
  }
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v12 = *(void *)(v7 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v11 <= v13) {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v17 = *(_DWORD *)(v9 + 84);
  }
  if (v17 <= 0x7FFFFFFE) {
    unsigned int v17 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  if (v17 < a2)
  {
    unint64_t v19 = ((((((v18 + ((v15 + v16 + (((v10 & 0xFFFFFFFFFFFFFFF8) + v14 + 42) & ~v14)) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if ((v19 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v17 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = *((unsigned __int8 *)a1 + v19);
        if (!*((unsigned char *)a1 + v19)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v23 = *(unsigned __int16 *)((char *)a1 + v19);
        if (*(_WORD *)((char *)a1 + v19)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100379BF4);
      case 4:
        int v23 = *(_DWORD *)((char *)a1 + v19);
        if (!v23) {
          break;
        }
LABEL_27:
        int v25 = v23 - 1;
        if ((v19 & 0xFFFFFFF8) != 0)
        {
          int v25 = 0;
          int v26 = *a1;
        }
        else
        {
          int v26 = 0;
        }
        int v32 = v17 + (v26 | v25);
        return (v32 + 1);
      default:
        break;
    }
  }
  unint64_t v27 = ((((unint64_t)a1 + v10 + 8) & 0xFFFFFFFFFFFFFFF8) + v14 + 34) & ~v14;
  if (v11 == v17)
  {
    uint64_t v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 48);
    return v28(v27, v11, v8);
  }
  else
  {
    unint64_t v29 = (v27 + v15 + v16) & ~v16;
    if (v13 == v17)
    {
      uint64_t v30 = *(uint64_t (**)(unint64_t))(v12 + 48);
      return v30(v29);
    }
    else
    {
      unint64_t v31 = *(void *)(((v18 + v29) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v31 >= 0xFFFFFFFF) {
        LODWORD(v31) = -1;
      }
      int v32 = v31 - 1;
      if (v32 < 0) {
        int v32 = -1;
      }
      return (v32 + 1);
    }
  }
}

void sub_100379C08(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  if (v12 <= v14) {
    unsigned int v18 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v18 = *(_DWORD *)(v11 + 84);
  }
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  uint64_t v19 = *(void *)(*(void *)(v10 - 8) + 64) + 7;
  unint64_t v20 = ((((((v19 + ((v16 + v17 + (((v9 & 0xFFFFFFFFFFFFFFF8) + v15 + 42) & ~v15)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v18 >= a3)
  {
    int v23 = 0;
    int v24 = a2 - v18;
    if (a2 <= v18)
    {
LABEL_22:
      switch(v23)
      {
        case 1:
          *((unsigned char *)a1 + v20) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 2:
          *(_WORD *)((char *)a1 + v20) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 3:
          goto LABEL_51;
        case 4:
          *(_DWORD *)((char *)a1 + v20) = 0;
          goto LABEL_34;
        default:
LABEL_34:
          if (a2)
          {
LABEL_35:
            unint64_t v27 = ((((unint64_t)a1 + v9 + 8) & 0xFFFFFFFFFFFFFFF8) + v15 + 34) & ~v15;
            if (v12 == v18)
            {
              uint64_t v28 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
              v28(v27, a2);
            }
            else
            {
              unint64_t v29 = (v27 + v16 + v17) & ~v17;
              if (v14 == v18)
              {
                uint64_t v30 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
                v30(v29, a2, v14, v10);
              }
              else
              {
                unint64_t v31 = (void *)((v19 + v29) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0x7FFFFFFE)
                {
                  void *v31 = (a2 - 0x7FFFFFFF);
                  v31[1] = 0;
                }
                else
                {
                  v31[1] = a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((v19
             + (((int)v16 + (int)v17 + (((v9 & 0xFFFFFFF8) + v15 + 42) & ~v15)) & ~v17)) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v21 = a3 - v18 + 1;
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v23 = v22;
    }
    else {
      int v23 = 0;
    }
    int v24 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_22;
    }
  }
  if (((((((v19
           + (((int)v16 + (int)v17 + (((v9 & 0xFFFFFFF8) + v15 + 42) & ~v15)) & ~v17)) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v25 = v24;
  else {
    int v25 = 1;
  }
  if (((((((v19
           + (((int)v16 + (int)v17 + (((v9 & 0xFFFFFFF8) + v15 + 42) & ~v15)) & ~v17)) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v26 = ~v18 + a2;
    bzero(a1, ((((((v19 + ((v16 + v17 + (((v9 & 0xFFFFFFFFFFFFFFF8) + v15 + 42) & ~v15)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v26;
  }
  switch(v23)
  {
    case 1:
      *((unsigned char *)a1 + v20) = v25;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v20) = v25;
      break;
    case 3:
LABEL_51:
      __break(1u);
      JUMPOUT(0x100379F20);
    case 4:
      *(_DWORD *)((char *)a1 + v20) = v25;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for AttributionContainer()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100379F60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100379FA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v126 = a2;
  uint64_t v125 = a1[3];
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v124 = a1[5];
  uint64_t v178 = v124;
  char v179 = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ScrollView();
  uint64_t v113 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v111 = (char *)v104 - v5;
  uint64_t v6 = type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v129 = v4;
  uint64_t v134 = v6;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v115 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v114 = (char *)v104 - v8;
  uint64_t v9 = a1[2];
  uint64_t v116 = a1;
  uint64_t v122 = v9;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10052B968);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10052B970);
  type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v128 = a1[4];
  uint64_t v176 = v128;
  char v177 = &protocol witness table for _FlexFrameLayout;
  uint64_t v11 = swift_getWitnessTable();
  uint64_t v12 = sub_10037D938(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
  uint64_t v174 = v11;
  uint64_t v175 = v12;
  uint64_t v136 = v12;
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v14 = sub_100013AA8(&qword_10052B978, &qword_10052B968);
  uint64_t v172 = v13;
  uint64_t v173 = v14;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = sub_100013AA8(&qword_10052B980, &qword_10052B970);
  uint64_t v170 = v15;
  uint64_t v171 = v16;
  uint64_t v169 = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v123 = v10;
  uint64_t v118 = v17;
  uint64_t v18 = type metadata accessor for _InsetViewModifier();
  uint64_t v135 = v7;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v110 = (char *)v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v109 = (char *)v104 - v23;
  sub_10000F69C(&qword_10052B988);
  uint64_t v112 = v3;
  type metadata accessor for ModifiedContent();
  uint64_t v24 = sub_100013AA8(&qword_10052B990, &qword_10052B988);
  uint64_t v167 = WitnessTable;
  uint64_t v168 = v24;
  swift_getWitnessTable();
  type metadata accessor for ScrollView();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10051D678);
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v165 = swift_getWitnessTable();
  uint64_t v166 = &protocol witness table for _FrameLayout;
  uint64_t v26 = v117;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v28 = sub_100013AA8(&qword_10051D670, &qword_10051D678);
  uint64_t v163 = v27;
  uint64_t v164 = v28;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v106 = v25;
  v104[1] = v29;
  uint64_t v30 = type metadata accessor for VStack();
  uint64_t v105 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  int v32 = (char *)v104 - v31;
  uint64_t v132 = v33;
  uint64_t v34 = type metadata accessor for ModifiedContent();
  uint64_t v108 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v107 = (char *)v104 - v35;
  uint64_t v119 = v36;
  uint64_t v133 = v18;
  uint64_t v37 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  unint64_t v40 = (char *)v104 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)v104 - v42;
  uint64_t v130 = v44;
  uint64_t v134 = v19;
  uint64_t v45 = type metadata accessor for _ConditionalContent();
  uint64_t v120 = *(void *)(v45 - 8);
  uint64_t v121 = v45;
  __chkstk_darwin(v45);
  unsigned __int8 v131 = (char *)v104 - v47;
  uint64_t v48 = v116;
  uint64_t v49 = v26;
  if (*(unsigned char *)(v26 + *((int *)v116 + 15)) == 1)
  {
    __chkstk_darwin(v46);
    uint64_t WitnessTable = v38;
    uint64_t v50 = v122;
    v104[0] = v43;
    uint64_t v51 = v124;
    uint64_t v52 = v125;
    v104[-6] = v122;
    v104[-5] = v52;
    v104[-4] = v128;
    v104[-3] = v51;
    uint64_t v102 = v49;
    static HorizontalAlignment.center.getter();
    VStack.init(alignment:spacing:content:)();
    uint64_t v53 = (double *)(v49 + *((int *)v48 + 13));
    double v54 = *v53;
    double v55 = v53[1];
    double v56 = v53[3];
    uint64_t v57 = v132;
    uint64_t v58 = swift_getWitnessTable();
    uint64_t v59 = v107;
    sub_10037BD04(v54, v55, 0.0, v56);
    uint64_t v60 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v32, v57);
    uint64_t v116 = v104;
    __chkstk_darwin(v60);
    v104[-6] = v50;
    v104[-5] = v52;
    v104[-4] = v128;
    v104[-3] = v51;
    static HorizontalAlignment.center.getter();
    uint64_t v143 = v58;
    uint64_t v144 = v136;
    uint64_t v61 = v119;
    uint64_t v62 = swift_getWitnessTable();
    uint64_t v102 = v62;
    uint64_t v103 = v118;
    View.safeAreaInset<A>(edge:alignment:spacing:content:)();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v59, v61);
    uint64_t v63 = swift_getWitnessTable();
    uint64_t v141 = v62;
    uint64_t v142 = v63;
    uint64_t v64 = v130;
    uint64_t v65 = swift_getWitnessTable();
    uint64_t v66 = v104[0];
    sub_100224E4C(v40, v64, v65);
    uint64_t v67 = *(void (**)(char *, uint64_t))(WitnessTable + 8);
    v67(v40, v64);
    sub_100224E4C(v66, v64, v65);
    uint64_t v139 = swift_getWitnessTable();
    uint64_t v140 = v136;
    uint64_t v137 = swift_getWitnessTable();
    uint64_t v138 = v63;
    swift_getWitnessTable();
    sub_100059D38((uint64_t)v40, v64);
    v67(v40, v64);
    v67((char *)v104[0], v64);
  }
  else
  {
    uint64_t v68 = static Axis.Set.vertical.getter();
    __chkstk_darwin(v68);
    uint64_t v69 = v122;
    uint64_t v71 = v124;
    uint64_t v70 = v125;
    v104[-6] = v122;
    v104[-5] = v70;
    uint64_t v108 = v20;
    uint64_t v72 = v128;
    v104[-4] = v128;
    v104[-3] = v71;
    uint64_t v102 = v26;
    uint64_t v73 = v111;
    ScrollView.init(_:showsIndicators:content:)();
    unint64_t v74 = (double *)(v26 + *((int *)v48 + 13));
    double v75 = *v74;
    double v76 = v74[1];
    double v77 = v74[3];
    uint64_t v78 = v129;
    uint64_t v79 = swift_getWitnessTable();
    uint64_t v80 = v114;
    sub_10037BD04(v75, v76, 0.0, v77);
    uint64_t v81 = (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v73, v78);
    __chkstk_darwin(v81);
    v104[-6] = v69;
    v104[-5] = v70;
    v104[-4] = v72;
    v104[-3] = v71;
    static HorizontalAlignment.center.getter();
    uint64_t v82 = v135;
    uint64_t v83 = v136;
    uint64_t v161 = v79;
    uint64_t v162 = v136;
    uint64_t v84 = swift_getWitnessTable();
    uint64_t v102 = v84;
    uint64_t v103 = v118;
    uint64_t v85 = (uint64_t)v110;
    View.safeAreaInset<A>(edge:alignment:spacing:content:)();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v80, v82);
    uint64_t v86 = swift_getWitnessTable();
    uint64_t v159 = v84;
    uint64_t v160 = v86;
    uint64_t v87 = v134;
    uint64_t v88 = swift_getWitnessTable();
    uint64_t v89 = v109;
    sub_100224E4C(v85, v87, v88);
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
    v90(v85, v87);
    sub_100224E4C(v89, v87, v88);
    uint64_t v157 = swift_getWitnessTable();
    uint64_t v158 = v83;
    uint64_t v155 = swift_getWitnessTable();
    uint64_t v156 = v86;
    uint64_t v91 = v130;
    swift_getWitnessTable();
    sub_100059E9C(v85, v91, v87);
    v90(v85, v87);
    v90((uint64_t)v89, v87);
  }
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v93 = v136;
  uint64_t v153 = v92;
  uint64_t v154 = v136;
  uint64_t v94 = swift_getWitnessTable();
  uint64_t v95 = swift_getWitnessTable();
  uint64_t v151 = v94;
  uint64_t v152 = v95;
  uint64_t v96 = swift_getWitnessTable();
  uint64_t v149 = swift_getWitnessTable();
  uint64_t v150 = v93;
  uint64_t v147 = swift_getWitnessTable();
  uint64_t v148 = v95;
  uint64_t v97 = swift_getWitnessTable();
  uint64_t v145 = v96;
  uint64_t v146 = v97;
  uint64_t v98 = v121;
  uint64_t v99 = swift_getWitnessTable();
  uint64_t v100 = v131;
  sub_100224E4C(v131, v98, v99);
  return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v100, v98);
}

uint64_t sub_10037AE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v46 = a6;
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10052B988);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v62 = a5;
  uint64_t v63 = &protocol witness table for _FlexFrameLayout;
  uint64_t v45 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v61 = sub_100013AA8(&qword_10052B990, &qword_10052B988);
  v37[2] = v11;
  v37[1] = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for ScrollView();
  uint64_t v41 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v37 - v13;
  uint64_t v40 = type metadata accessor for ModifiedContent();
  uint64_t v43 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  v37[0] = (char *)v37 - v15;
  sub_10000F69C(&qword_10051D678);
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v44 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v42 = (char *)v37 - v18;
  static Axis.Set.vertical.getter();
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v19 = type metadata accessor for AttributionContainer();
  uint64_t v20 = (char *)(a1 + *(int *)(v19 + 80));
  char v21 = *v20;
  uint64_t v22 = *((void *)v20 + 1);
  LOBYTE(v56) = v21;
  uint64_t v57 = v22;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v51 = a1;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v23 = (uint64_t *)(a1 + *(int *)(v19 + 76));
  uint64_t v24 = v23[1];
  uint64_t v56 = *v23;
  uint64_t v57 = v24;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = v37[0];
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v12);
  static Animation.easeInOut.getter();
  uint64_t v27 = v23[1];
  uint64_t v56 = *v23;
  uint64_t v57 = v27;
  State.wrappedValue.getter();
  uint64_t v54 = v25;
  double v55 = &protocol witness table for _FrameLayout;
  uint64_t v28 = v40;
  uint64_t v29 = swift_getWitnessTable();
  sub_100343C60();
  uint64_t v30 = v38;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v28);
  uint64_t v31 = sub_100013AA8(&qword_10051D670, &qword_10051D678);
  uint64_t v52 = v29;
  uint64_t v53 = v31;
  uint64_t v32 = v39;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = v42;
  sub_100224E4C(v30, v32, v33);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v44 + 8);
  v35(v30, v32);
  sub_100224E4C(v34, v32, v33);
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v32);
}

uint64_t sub_10037B3C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v38 = a6;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v9 = type metadata accessor for AttributionContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v31 = (char *)&v29 - v11;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v30 = (char *)&v29 - v13;
  sub_10000F69C(&qword_10052B988);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v32 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v35 = (char *)&v29 - v17;
  static Alignment.center.getter();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v31, a1, v9);
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v33;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = v34;
  *((void *)v20 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v19], v18, v9);
  uint64_t v43 = sub_10037DA1C;
  uint64_t v44 = v20;
  static Alignment.center.getter();
  sub_10000F214(&qword_10052B9F8);
  uint64_t v41 = a5;
  uint64_t v42 = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100013AA8(&qword_10052BA00, &qword_10052B9F8);
  uint64_t v22 = v32;
  uint64_t v23 = v30;
  View.background<A>(_:alignment:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v12);
  uint64_t v24 = sub_100013AA8(&qword_10052B990, &qword_10052B988);
  uint64_t v39 = WitnessTable;
  uint64_t v40 = v24;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = v35;
  sub_100224E4C(v22, v14, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v37 + 8);
  v27(v22, v14);
  sub_100224E4C(v26, v14, v25);
  return ((uint64_t (*)(char *, uint64_t))v27)(v26, v14);
}

uint64_t sub_10037B81C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)()@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v43 = a6;
  uint64_t v38 = a5;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v41 = a3;
  uint64_t v37 = a7;
  uint64_t v34 = type metadata accessor for GeometryProxy();
  uint64_t v11 = *(void *)(v34 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v34);
  v33[0] = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = (char *)a5;
  uint64_t v48 = a6;
  uint64_t v13 = type metadata accessor for AttributionContainer();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v33 - v16;
  uint64_t v18 = static Color.clear.getter();
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v35 = v18;
  uint64_t v36 = v19;
  v19(v17, v39, v13);
  uint64_t v20 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v34);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v22 = (v21 + 48) & ~v21;
  v33[1] = v21 | 7;
  void v33[2] = v22 + v15;
  unint64_t v23 = (v22 + v15 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  uint64_t v25 = v42;
  *((void *)v24 + 2) = v41;
  *((void *)v24 + 3) = v25;
  uint64_t v26 = v43;
  *((void *)v24 + 4) = v38;
  *((void *)v24 + 5) = v26;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v27(&v24[v22], v17, v13);
  (*(void (**)(char *, void, uint64_t))(v11 + 32))(&v24[v23], v33[0], v20);
  uint64_t v45 = v35;
  uint64_t v46 = sub_10037DD30;
  uint64_t v47 = v24;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  GeometryProxy.size.getter();
  uint64_t v44 = v28;
  v36(v17, v39, v13);
  uint64_t v29 = (char *)swift_allocObject();
  uint64_t v30 = v42;
  *((void *)v29 + 2) = v41;
  *((void *)v29 + 3) = v30;
  uint64_t v31 = v43;
  *((void *)v29 + 4) = v38;
  *((void *)v29 + 5) = v31;
  v27(&v29[v22], v17, v13);
  sub_10000F214(&qword_10052BA08);
  sub_10037E0C0();
  sub_100343C60();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_release();
  sub_10000F478((uint64_t)v46);
  return sub_10000F478(v48);
}

uint64_t sub_10037BB60()
{
  return sub_10037BBDC();
}

uint64_t sub_10037BBDC()
{
  return swift_release();
}

uint64_t sub_10037BD04(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Edge.Set.all.getter();
  *(double *)&v13[1] = a1;
  *(double *)&v13[2] = a2;
  *(double *)&v13[3] = a3;
  *(double *)&void v13[4] = a4;
  char v14 = 0;
  SafeAreaPaddingModifier.init(edges:insets:)();
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10037BE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v31 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28 - v5;
  type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - v8;
  sub_10000F69C(&qword_10052B968);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  uint64_t v34 = v11;
  __chkstk_darwin(v10);
  uint64_t v30 = (char *)&v28 - v12;
  static Alignment.leading.getter();
  uint64_t v13 = *(void *)(a1 + 32);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  char v14 = (double *)(v2 + *(int *)(a1 + 52));
  double v15 = v14[1];
  double v16 = *v14 + 8.0;
  double v17 = v14[2];
  double v18 = v14[3];
  uint64_t v45 = v13;
  uint64_t v46 = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_10037BD04(v16, v15, v17, v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v4);
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v36 = v29;
  uint64_t v37 = v20;
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v38 = v13;
  uint64_t v39 = v21;
  uint64_t v40 = v2;
  static Alignment.center.getter();
  sub_10000F214(&qword_10052B998);
  uint64_t v22 = sub_10037D938(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
  uint64_t v43 = WitnessTable;
  uint64_t v44 = v22;
  uint64_t v23 = swift_getWitnessTable();
  sub_10037D74C(&qword_10052B9A0, &qword_10052B998, (void (*)(void))sub_10037D71C);
  uint64_t v24 = v30;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  static Alignment.top.getter();
  sub_10000F214(&qword_10052B9C8);
  uint64_t v25 = sub_100013AA8(&qword_10052B978, &qword_10052B968);
  uint64_t v41 = v23;
  uint64_t v42 = v25;
  uint64_t v26 = v33;
  swift_getWitnessTable();
  sub_10037D88C();
  View.overlay<A>(alignment:content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v24, v26);
}

uint64_t sub_10037C2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  double v15 = (char *)v19 - v14;
  void v19[2] = a2;
  v19[3] = a3;
  _OWORD v19[4] = a4;
  v19[5] = a5;
  type metadata accessor for AttributionContainer();
  static Alignment.leading.getter();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v19[0] = a5;
  v19[1] = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100224E4C(v12, v9, WitnessTable);
  double v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  sub_100224E4C(v15, v9, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t sub_10037C4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v54 = a5;
  uint64_t v57 = a6;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v58 = v10;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10052B968);
  uint64_t v59 = v11;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10052B970);
  uint64_t v60 = v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  double v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v53 - v18;
  uint64_t v56 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v55 = (uint64_t)&v53 - v24;
  uint64_t v86 = a2;
  uint64_t v87 = a3;
  uint64_t v25 = a4;
  uint64_t v88 = a4;
  uint64_t v89 = v54;
  uint64_t v26 = type metadata accessor for AttributionContainer();
  if (*(unsigned char *)(a1 + *(int *)(v26 + 56)) == 1)
  {
    sub_10037BE30(v26, (uint64_t)v16);
    uint64_t v67 = a4;
    uint64_t v68 = &protocol witness table for _FlexFrameLayout;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v28 = sub_10037D938(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    uint64_t v65 = WitnessTable;
    uint64_t v66 = v28;
    uint64_t v29 = swift_getWitnessTable();
    uint64_t v30 = sub_100013AA8(&qword_10052B978, &qword_10052B968);
    uint64_t v63 = v29;
    uint64_t v64 = v30;
    uint64_t v31 = swift_getWitnessTable();
    uint64_t v32 = sub_100013AA8(&qword_10052B980, &qword_10052B970);
    uint64_t v61 = v31;
    uint64_t v62 = v32;
    uint64_t v33 = swift_getWitnessTable();
    sub_100224E4C(v16, v13, v33);
    uint64_t v34 = v25;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v14 + 8);
    v35(v16, v13);
    sub_100224E4C(v19, v13, v33);
    v35(v19, v13);
    uint64_t v25 = v34;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v22, 1, 1, v13);
    uint64_t v84 = a4;
    uint64_t v85 = &protocol witness table for _FlexFrameLayout;
    uint64_t v37 = swift_getWitnessTable();
    uint64_t v38 = sub_10037D938(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    uint64_t v82 = v37;
    uint64_t v83 = v38;
    uint64_t v39 = swift_getWitnessTable();
    uint64_t v40 = sub_100013AA8(&qword_10052B978, &qword_10052B968);
    uint64_t v80 = v39;
    uint64_t v81 = v40;
    uint64_t v41 = swift_getWitnessTable();
    uint64_t v42 = sub_100013AA8(&qword_10052B980, &qword_10052B970);
    uint64_t v78 = v41;
    uint64_t v79 = v42;
    swift_getWitnessTable();
  }
  uint64_t v36 = v55;
  sub_100059E30((uint64_t)v22, v55);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v44 = v56;
  v43(v22, v56);
  uint64_t v76 = v25;
  double v77 = &protocol witness table for _FlexFrameLayout;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = sub_10037D938(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
  uint64_t v74 = v45;
  uint64_t v75 = v46;
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v48 = sub_100013AA8(&qword_10052B978, &qword_10052B968);
  uint64_t v72 = v47;
  uint64_t v73 = v48;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = sub_100013AA8(&qword_10052B980, &qword_10052B970);
  uint64_t v70 = v49;
  uint64_t v71 = v50;
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v51 = swift_getWitnessTable();
  sub_100224E4C(v36, v44, v51);
  return ((uint64_t (*)(uint64_t, uint64_t))v43)(v36, v44);
}

uint64_t sub_10037CBC4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10037CC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v88 = a4;
  uint64_t v89 = a5;
  uint64_t v86 = a2;
  uint64_t v87 = a3;
  uint64_t v92 = a6;
  uint64_t v90 = sub_10000F214(&qword_10052B9C0);
  __chkstk_darwin(v90);
  uint64_t v91 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ColorScheme();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v66 - v13;
  uint64_t v71 = type metadata accessor for Material();
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v93 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000F214(&qword_10052B9E0);
  __chkstk_darwin(v67);
  uint64_t v94 = (uint64_t)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000F214(&qword_1005272B0);
  __chkstk_darwin(v73);
  uint64_t v76 = (uint64_t)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_1005272B8);
  __chkstk_darwin(v18 - 8);
  uint64_t v75 = (uint64_t)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000F214(&qword_10052B9E8);
  __chkstk_darwin(v74);
  uint64_t v80 = (uint64_t)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_10000F214(&qword_10052B9F0);
  __chkstk_darwin(v78);
  uint64_t v81 = (uint64_t)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_1005272A0);
  __chkstk_darwin(v79);
  uint64_t v85 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_1005272A8);
  __chkstk_darwin(v23 - 8);
  uint64_t v84 = (uint64_t)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000F214(&qword_10052B998);
  __chkstk_darwin(v83);
  uint64_t v82 = (uint64_t)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = static Color.clear.getter();
  uint64_t v72 = a1;
  sub_10027CA80((uint64_t)v14);
  uint64_t v26 = enum case for ColorScheme.dark(_:);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v27(v11, enum case for ColorScheme.dark(_:), v8);
  LOBYTE(a1) = static ColorScheme.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v68 = v11;
  v28(v11, v8);
  uint64_t v29 = (uint64_t)v14;
  uint64_t v69 = v9 + 8;
  v28(v14, v8);
  if (a1) {
    static Material.regular.getter();
  }
  else {
    static Material.thick.getter();
  }
  uint64_t v30 = v70;
  uint64_t v31 = v93;
  uint64_t v32 = v94;
  uint64_t v33 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v94, v93, v71);
  *(_WORD *)(v32 + *(int *)(v67 + 56)) = 256;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v33);
  sub_10027CA80(v29);
  uint64_t v34 = v68;
  v27(v68, v26, v8);
  LOBYTE(v32) = static ColorScheme.== infix(_:_:)();
  v28(v34, v8);
  v28((char *)v29, v8);
  if (v32) {
    uint64_t v35 = static Color.clear.getter();
  }
  else {
    uint64_t v35 = static Color.white.getter();
  }
  uint64_t v36 = v35;
  char v37 = static Edge.Set.all.getter();
  uint64_t v38 = v94;
  uint64_t v39 = v76;
  sub_10000FB74(v94, v76, &qword_10052B9E0);
  uint64_t v40 = v39 + *(int *)(v73 + 36);
  *(void *)uint64_t v40 = v36;
  *(unsigned char *)(v40 + 8) = v37;
  sub_10000FBD8(v38, &qword_10052B9E0);
  uint64_t v41 = static Alignment.center.getter();
  uint64_t v42 = v75;
  sub_100227158(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v75, 0.0, 1, 0.0, 1, v41, v43);
  sub_10000FBD8(v39, &qword_1005272B0);
  LOBYTE(v36) = static Edge.Set.all.getter();
  uint64_t v44 = v80;
  sub_10000FB74(v42, v80, &qword_1005272B8);
  *(unsigned char *)(v44 + *(int *)(v74 + 36)) = v36;
  sub_10000FBD8(v42, &qword_1005272B8);
  LOBYTE(v36) = static Edge.Set.bottom.getter();
  uint64_t v95 = v86;
  uint64_t v96 = v87;
  uint64_t v97 = v88;
  uint64_t v98 = v89;
  type metadata accessor for AttributionContainer();
  EdgeInsets.init(_all:)();
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v53 = v81;
  sub_10000FB74(v44, v81, &qword_10052B9E8);
  uint64_t v54 = v53 + *(int *)(v78 + 36);
  *(unsigned char *)uint64_t v54 = v36;
  *(void *)(v54 + 8) = v46;
  *(void *)(v54 + 16) = v48;
  *(void *)(v54 + 24) = v50;
  *(void *)(v54 + 32) = v52;
  *(unsigned char *)(v54 + 40) = 0;
  sub_10000FBD8(v44, &qword_10052B9E8);
  uint64_t v55 = static Alignment.center.getter();
  uint64_t v57 = v56;
  uint64_t v58 = v91;
  sub_10000FB74(v53, v91, &qword_10052B9F0);
  uint64_t v59 = (uint64_t *)(v58 + *(int *)(v90 + 36));
  uint64_t *v59 = v55;
  v59[1] = v57;
  uint64_t v60 = (uint64_t)v85;
  sub_10000FB74(v58, (uint64_t)&v85[*(int *)(v79 + 36)], &qword_10052B9C0);
  *(void *)uint64_t v60 = v77;
  *(_WORD *)(v60 + 8) = 256;
  swift_retain();
  sub_10000FBD8(v58, &qword_10052B9C0);
  sub_10000FBD8(v53, &qword_10052B9F0);
  swift_release();
  uint64_t v61 = static Alignment.center.getter();
  uint64_t v62 = v84;
  sub_1002271B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v84, 0.0, 1, 0.0, 1, v61, v63);
  sub_10000FBD8(v60, &qword_1005272A0);
  LOBYTE(v55) = static Edge.Set.all.getter();
  uint64_t v64 = v82;
  sub_10000FB74(v62, v82, &qword_1005272A8);
  *(unsigned char *)(v64 + *(int *)(v83 + 36)) = v55;
  sub_10000FBD8(v62, &qword_1005272A8);
  return sub_10037D980(v64, v92);
}

uint64_t sub_10037D5A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Divider();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Divider.init()();
  char v6 = static Edge.Set.all.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  *(unsigned char *)(a1 + *(int *)(sub_10000F214(&qword_10052B9C8) + 36)) = v6;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10037D6AC()
{
  return sub_10037DA00(sub_10037C2EC);
}

uint64_t sub_10037D6C8()
{
  return sub_10037DA00((uint64_t (*)(void, void, void, void, void))sub_10037AE1C);
}

uint64_t sub_10037D6E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10037C4DC(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10037D704()
{
  return sub_10037DA00((uint64_t (*)(void, void, void, void, void))sub_10037CC90);
}

uint64_t sub_10037D71C()
{
  return sub_10037D74C(&qword_10052B9A8, &qword_1005272A8, (void (*)(void))sub_10037D7C8);
}

uint64_t sub_10037D74C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10037D7C8()
{
  unint64_t result = qword_10052B9B0;
  if (!qword_10052B9B0)
  {
    sub_10000F69C(&qword_1005272A0);
    sub_100013AA8(&qword_10051AC90, &qword_10051AC58);
    sub_100013AA8(&qword_10052B9B8, &qword_10052B9C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B9B0);
  }
  return result;
}

unint64_t sub_10037D88C()
{
  unint64_t result = qword_10052B9D0;
  if (!qword_10052B9D0)
  {
    sub_10000F69C(&qword_10052B9C8);
    sub_10037D938(&qword_10052B9D8, (void (*)(uint64_t))&type metadata accessor for Divider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052B9D0);
  }
  return result;
}

uint64_t sub_10037D938(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10037D980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10052B998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037D9E8()
{
  return sub_10037DA00((uint64_t (*)(void, void, void, void, void))sub_10037B3C0);
}

uint64_t sub_10037DA00(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10037DA1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  char v6 = (uint64_t (*)())v2[3];
  uint64_t v7 = (void *)v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for AttributionContainer() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return sub_10037B81C(a1, v10, v5, v6, v7, v8, a2);
}

uint64_t sub_10037DAD8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v10 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = type metadata accessor for AttributionContainer();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v11 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v11 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0 + v3;
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v0 + v3, v8);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7 + *(int *)(v2 + 64), v1);
  (*(void (**)(uint64_t))(*(void *)(v10 - 8) + 8))(v7 + *(int *)(v2 + 68));
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v4 + v6) & ~v6), v11);
  return swift_deallocObject();
}

uint64_t sub_10037DD30()
{
  type metadata accessor for AttributionContainer();
  type metadata accessor for GeometryProxy();

  return sub_10037BB60();
}

uint64_t sub_10037DE3C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = type metadata accessor for AttributionContainer();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = v0 + v3;
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 64), v1);
  (*(void (**)(uint64_t))(*(void *)(v7 - 8) + 8))(v4 + *(int *)(v2 + 68));
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_10037E010()
{
  return sub_10037BBDC();
}

unint64_t sub_10037E0C0()
{
  unint64_t result = qword_10052BA10;
  if (!qword_10052BA10)
  {
    sub_10000F69C(&qword_10052BA08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BA10);
  }
  return result;
}

uint64_t sub_10037E134()
{
  return sub_10037CBC4();
}

uint64_t sub_10037E158()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TappableSpacer()
{
  return &type metadata for TappableSpacer;
}

uint64_t sub_10037E620()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10037E63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static Color.clear.getter();
  uint64_t v5 = static Alignment.center.getter();
  sub_100227210(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v16, 0.0, 1, INFINITY, 0, v5, v6, v4);
  swift_release();
  long long v9 = v16;
  LOBYTE(v10) = v17;
  *((void *)&v10 + 1) = *((void *)&v17 + 1);
  LOBYTE(v11) = v18;
  *((void *)&v11 + 1) = *((void *)&v18 + 1);
  LOBYTE(v12) = v19;
  *((void *)&v12 + 1) = *((void *)&v19 + 1);
  LOBYTE(v13) = v20;
  *((void *)&v13 + 1) = *((void *)&v20 + 1);
  LOBYTE(v14) = v21;
  *((void *)&v14 + 1) = *((void *)&v21 + 1);
  v15[0] = v22[0];
  *(_OWORD *)&v15[8] = *(_OWORD *)((char *)v22 + 8);
  v15[24] = 0;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_retain();
  sub_10000F214(&qword_10052BA18);
  sub_10037E844();
  View.onTapGesture(count:perform:)();
  swift_release();
  long long v20 = v13;
  long long v21 = v14;
  v22[0] = *(_OWORD *)v15;
  *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)&v15[9];
  long long v16 = v9;
  long long v17 = v10;
  long long v18 = v11;
  long long v19 = v12;
  return sub_100062354((uint64_t)&v16);
}

uint64_t sub_10037E804()
{
  return sub_10037E63C(*v0, v0[1]);
}

uint64_t sub_10037E80C()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_10037E844()
{
  unint64_t result = qword_10052BA20;
  if (!qword_10052BA20)
  {
    sub_10000F69C(&qword_10052BA18);
    sub_10037E8C0();
    sub_10037E934();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BA20);
  }
  return result;
}

unint64_t sub_10037E8C0()
{
  unint64_t result = qword_10052BA28;
  if (!qword_10052BA28)
  {
    sub_10000F69C(&qword_10052BA30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BA28);
  }
  return result;
}

unint64_t sub_10037E934()
{
  unint64_t result = qword_10051B8C0;
  if (!qword_10051B8C0)
  {
    sub_10000F69C(&qword_100522F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B8C0);
  }
  return result;
}

uint64_t sub_10037E990()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ResultPillTransition()
{
  return &type metadata for ResultPillTransition;
}

uint64_t sub_10037E9FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10037EA18@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v47 = a3;
  uint64_t v13 = sub_10000F214(&qword_10052BA68);
  uint64_t v44 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10052BA88);
  uint64_t v45 = *(void *)(v16 - 8);
  uint64_t v46 = v16;
  __chkstk_darwin(v16);
  long long v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_10052BA60);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_10052BA40);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = a2;
  if (TransitionPhase.isIdentity.getter()) {
    double v27 = 0.0;
  }
  else {
    double v27 = 16.0;
  }
  uint64_t v28 = sub_10000F214(&qword_10052BA80);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v15, a1, v28);
  uint64_t v29 = &v15[*(int *)(v13 + 36)];
  *(double *)uint64_t v29 = v27;
  v29[8] = 0;
  uint64_t v30 = swift_allocObject();
  *(double *)(v30 + 16) = a4;
  *(double *)(v30 + 24) = a5;
  *(double *)(v30 + 32) = a6;
  *(double *)(v30 + 40) = a7;
  *(unsigned char *)(v30 + 48) = a2;
  sub_10000F214(&qword_100520550);
  sub_10037F300();
  uint64_t v31 = type metadata accessor for EmptyVisualEffect();
  unint64_t v32 = sub_10037F3DC();
  uint64_t v48 = v31;
  unint64_t v49 = v32;
  swift_getOpaqueTypeConformance2();
  View.visualEffect<A>(_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v15, &qword_10052BA68);
  if (TransitionPhase.isIdentity.getter()) {
    double v33 = 1.0;
  }
  else {
    double v33 = 0.0;
  }
  uint64_t v35 = v45;
  uint64_t v34 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v22, v18, v46);
  *(double *)&v22[*(int *)(v20 + 44)] = v33;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v34);
  if (TransitionPhase.isIdentity.getter()) {
    double v36 = 1.0;
  }
  else {
    double v36 = 0.98;
  }
  static UnitPoint.center.getter();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10037F454((uint64_t)v22, (uint64_t)v26);
  uint64_t v41 = &v26[*(int *)(v24 + 44)];
  *(double *)uint64_t v41 = v36;
  *((double *)v41 + 1) = v36;
  *((void *)v41 + 2) = v38;
  *((void *)v41 + 3) = v40;
  sub_10000FBD8((uint64_t)v22, &qword_10052BA60);
  return sub_10000FC34((uint64_t)v26, v47, &qword_10052BA40);
}

uint64_t sub_10037EDD8(CGFloat a1, CGFloat a2, CGFloat a3, double a4)
{
  uint64_t v8 = type metadata accessor for NamedCoordinateSpace();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = 0x6C61626F6C67;
  v29[1] = 0xE600000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.bounds(of:)();
  double v12 = *(double *)v28;
  double v13 = *(double *)&v28[1];
  double v14 = *(double *)&v28[2];
  double v15 = *(double *)&v28[3];
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  sub_10000FC34((uint64_t)v28, (uint64_t)v29, (uint64_t *)&unk_100518AE0);
  if (v30)
  {
    double v17 = a4;
  }
  else
  {
    a1 = v12;
    a2 = v13;
    a3 = v14;
    double v17 = v15;
  }
  *(double *)double v27 = v17;
  v27[1] = 0x6C61626F6C67;
  v27[2] = 0xE600000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.frame<A>(in:)();
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  CGFloat v25 = v24;
  v16(v11, v8);
  if ((TransitionPhase.isIdentity.getter() & 1) == 0)
  {
    v31.origin.CGFloat x = a1;
    v31.origin.CGFloat y = a2;
    v31.size.CGFloat width = a3;
    *(void *)&v31.size.CGFloat height = v27[0];
    CGRectGetMidY(v31);
    v32.origin.CGFloat x = v19;
    v32.origin.CGFloat y = v21;
    v32.size.CGFloat width = v23;
    v32.size.CGFloat height = v25;
    CGRectGetMinY(v32);
  }
  type metadata accessor for EmptyVisualEffect();
  sub_10037F3DC();
  return VisualEffect.offset(x:y:)();
}

uint64_t sub_10037F030()
{
  id v0 = [self mainScreen];
  [v0 bounds];

  static Animation.spring(response:dampingFraction:blendDuration:)();
  sub_10000F214(&qword_10052BA38);
  sub_10000F214(&qword_10052BA40);
  sub_10037F38C(&qword_10052BA48, &qword_10052BA38);
  sub_10037F178();
  View.animation<A>(_:body:)();
  return swift_release();
}

uint64_t sub_10037F168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10037EA18(a1, *(unsigned __int8 *)(v2 + 16), a2, *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 48));
}

unint64_t sub_10037F178()
{
  unint64_t result = qword_10052BA50;
  if (!qword_10052BA50)
  {
    sub_10000F69C(&qword_10052BA40);
    sub_10037F1F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BA50);
  }
  return result;
}

unint64_t sub_10037F1F4()
{
  unint64_t result = qword_10052BA58;
  if (!qword_10052BA58)
  {
    sub_10000F69C(&qword_10052BA60);
    sub_10000F69C(&qword_10052BA68);
    sub_10000F69C(&qword_100520550);
    sub_10037F300();
    type metadata accessor for EmptyVisualEffect();
    sub_10037F3DC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BA58);
  }
  return result;
}

unint64_t sub_10037F300()
{
  unint64_t result = qword_10052BA70;
  if (!qword_10052BA70)
  {
    sub_10000F69C(&qword_10052BA68);
    sub_10037F38C(&qword_10052BA78, &qword_10052BA80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BA70);
  }
  return result;
}

uint64_t sub_10037F38C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10037F3DC()
{
  unint64_t result = qword_100520570;
  if (!qword_100520570)
  {
    type metadata accessor for EmptyVisualEffect();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100520570);
  }
  return result;
}

uint64_t sub_10037F434()
{
  return swift_deallocObject();
}

uint64_t sub_10037F444()
{
  return sub_10037EDD8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10037F454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10052BA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10037F4BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10037F54C()
{
  swift_getKeyPath();
  sub_100380E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10037F5BC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100380E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_10037F634()
{
  return swift_release();
}

uint64_t sub_10037F6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 32) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10037F76C, v6, v5);
}

uint64_t sub_10037F76C()
{
  uint64_t v17 = v0;
  swift_release();
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v1 = (uint64_t *)(v0 + 16);
  uint64_t v2 = (uint64_t *)(v0 + 24);
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000F378(v3, (uint64_t)qword_10055E2E0);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 24);
  if (!v6)
  {
    swift_release_n();

    goto LABEL_12;
  }
  uint64_t v8 = (uint8_t *)swift_slowAlloc();
  uint64_t v16 = swift_slowAlloc();
  *(_DWORD *)uint64_t v8 = 136315138;
  swift_getKeyPath();
  *uint64_t v1 = v7;
  sub_100380E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v7 + 16))
  {
    if (*(unsigned char *)(v7 + 16) != 1)
    {
      unint64_t v10 = 0xE400000000000000;
      uint64_t v9 = 1701602409;
      goto LABEL_11;
    }
    uint64_t v9 = 0x69746E6573657270;
  }
  else
  {
    uint64_t v9 = 0x69737365636F7270;
  }
  unint64_t v10 = 0xEA0000000000676ELL;
LABEL_11:
  *uint64_t v1 = sub_1003806B0(v9, v10, &v16);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "SiriRequestStateResponder - siriWillPresentResults received, currentState: %s", v8, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_12:
  uint64_t v11 = *v2;
  swift_getKeyPath();
  *uint64_t v1 = v11;
  sub_100380E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (!*(unsigned char *)(v11 + 16))
  {
    uint64_t v12 = *v2;
    swift_getKeyPath();
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = 1;
    *uint64_t v1 = v12;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
  }
  double v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_10037FAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 32) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10037FB3C, v6, v5);
}

uint64_t sub_10037FB3C()
{
  double v20 = v0;
  swift_release();
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0 + 3;
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000F378(v3, (uint64_t)qword_10055E2E0);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[3];
  if (v6)
  {
    os_log_type_t v18 = v5;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_getKeyPath();
    *uint64_t v1 = v7;
    sub_100380E10();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v7 + 16))
    {
      if (*(unsigned char *)(v7 + 16) == 1)
      {
        unint64_t v9 = 0xEA0000000000676ELL;
        uint64_t v10 = 0x69746E6573657270;
      }
      else
      {
        unint64_t v9 = 0xE400000000000000;
        uint64_t v10 = 1701602409;
      }
    }
    else
    {
      unint64_t v9 = 0xEA0000000000676ELL;
      uint64_t v10 = 0x69737365636F7270;
    }
    uint64_t v11 = v0[3];
    v0[2] = sub_1003806B0(v10, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 1024;
    swift_getKeyPath();
    v0[2] = v11;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v12 = *(unsigned __int8 *)(v7 + 16);
    swift_release();
    *((_DWORD *)v0 + 4) = v12 == 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v18, "SiriRequestStateResponder - siriWillProcessRequest received, currentState: %s idle: %{BOOL}d", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  uint64_t v13 = *v2;
  swift_getKeyPath();
  *uint64_t v1 = v13;
  sub_100380E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v13 + 16) == 2)
  {
    uint64_t v14 = *v2;
    swift_getKeyPath();
    uint64_t v15 = swift_task_alloc();
    *(void *)(v15 + 16) = v14;
    *(unsigned char *)(v15 + 24) = 0;
    *uint64_t v1 = v14;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
  }
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10037FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 32) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10037FF8C, v6, v5);
}

uint64_t sub_10037FF8C()
{
  uint64_t v15 = v0;
  swift_release();
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v1 = v0 + 2;
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000F378(v2, (uint64_t)qword_10055E2E0);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[3];
  if (!v5)
  {
    swift_release_n();

    goto LABEL_12;
  }
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136315138;
  swift_getKeyPath();
  *uint64_t v1 = v6;
  sub_100380E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v6 + 16))
  {
    if (*(unsigned char *)(v6 + 16) != 1)
    {
      unint64_t v9 = 0xE400000000000000;
      uint64_t v8 = 1701602409;
      goto LABEL_11;
    }
    uint64_t v8 = 0x69746E6573657270;
  }
  else
  {
    uint64_t v8 = 0x69737365636F7270;
  }
  unint64_t v9 = 0xEA0000000000676ELL;
LABEL_11:
  *uint64_t v1 = sub_1003806B0(v8, v9, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "SiriRequestStateResponder - siriDidDeactivate received, currentState: %s", v7, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_12:
  uint64_t v10 = v0[3];
  swift_getKeyPath();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = 2;
  v0[2] = v10;
  sub_100380E10();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  int v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100380288()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale25SiriRequestStateResponder___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100380328()
{
  return type metadata accessor for SiriRequestStateResponder();
}

uint64_t type metadata accessor for SiriRequestStateResponder()
{
  uint64_t result = qword_10052BAC0;
  if (!qword_10052BAC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10038037C()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SiriRequestStateResponder.SiriRequestState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003804E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriRequestStateResponder.SiriRequestState()
{
  return &type metadata for SiriRequestStateResponder.SiriRequestState;
}

uint64_t sub_100380520(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void *sub_10038055C(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

unsigned char **sub_100380600(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100380610(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100380638(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_1003806B0(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1003806B0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100380784(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000A7FD8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000A7FD8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_100380784(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100380940(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100380940(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1003809D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100380C34(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100380C34(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1003809D8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100380B50(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100380B50(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000F214(&qword_100529C38);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size_0(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100380BB8(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_100380C34(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100529C38);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100380D84(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100380DB0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100380DD8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_100380E10()
{
  unint64_t result = qword_10051B278;
  if (!qword_10051B278)
  {
    type metadata accessor for SiriRequestStateResponder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B278);
  }
  return result;
}

CGColorSpaceRef sub_100380E68(uint64_t a1, uint64_t a2, double a3)
{
  id v6 = [objc_allocWithZone((Class)CIContext) init];
  id v7 = [objc_allocWithZone((Class)CIImage) initWithCGImage:a1];
  id v8 = [v7 imageByApplyingCGOrientation:a2];

  [v8 extent];
  double Width = CGRectGetWidth(v21);
  [v8 extent];
  CGFloat Height = CGRectGetHeight(v22);
  CGAffineTransformMakeScale(&v20, 1000000.0 / (Width * Height), 1000000.0 / (Width * Height));
  id v11 = [v8 imageByApplyingTransform:&v20];
  unint64_t v12 = (id)kCGImageDestinationLossyCompressionQuality;
  CGColorSpaceRef v13 = (CGColorSpaceRef)[v11 colorSpace];
  if (v13 || (result = CGColorSpaceCreateWithName(kCGColorSpaceSRGB), (CGColorSpaceRef v13 = result) != 0))
  {
    sub_10000F214(qword_10052BBC0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
    *(void *)(inited + 32) = v12;
    *(void *)(inited + 64) = &type metadata for Double;
    *(double *)(inited + 40) = a3;
    uint64_t v16 = v12;
    sub_10031C3E0(inited);
    type metadata accessor for CIImageRepresentationOption(0);
    sub_10021C9F4();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = [v6 JPEGRepresentationOfImage:v11 colorSpace:v13 options:isa];

    if (v18)
    {
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {

      return 0;
    }
    return (CGColorSpaceRef)v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003810DC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100381124@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 240) - 8) + 16))(a1);
}

void sub_100381154(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 240);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v17 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v17 - v11;
  os_unfair_lock_lock((os_unfair_lock_t)(v1[6] + 16));
  if (sub_10038380C()) {
    goto LABEL_4;
  }
  v17[1] = v1;
  swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_4:
    sub_1003819D8(a1);
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(v1[6] + 16));
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v4);
  uint64_t v13 = *(void *)(v3 + 248);
  uint64_t v14 = *(double (**)(uint64_t, uint64_t))(v13 + 8);
  double v15 = v14(v4, v13);
  if (v15 < v14(v4, v13))
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v3;
    sub_100382A08(a1, (void (*)(char *, char *))sub_100386C0C, v16);
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v4);
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100381488(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v9 = &v28[-v8];
  uint64_t v10 = (os_unfair_lock_s *)(v1[4] + 16);
  os_unfair_lock_lock(v10);
  uint64_t v11 = v1 + 2;
  swift_beginAccess();
  uint64_t v12 = v1[2];
  if (!*(void *)(v12 + 16))
  {
    sub_100386988(a1, (uint64_t)v9);
    swift_beginAccess();
    uint64_t v1 = (void *)*v11;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v11 = (unint64_t)v1;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_12:
      unint64_t v25 = v1[2];
      unint64_t v24 = v1[3];
      if (v25 >= v24 >> 1)
      {
        uint64_t v1 = (void *)sub_100328B30(v24 > 1, v25 + 1, 1, (unint64_t)v1);
        *uint64_t v11 = (unint64_t)v1;
      }
      v1[2] = v25 + 1;
      uint64_t v21 = (uint64_t)v1
          + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
          + *(void *)(v4 + 72) * v25;
      uint64_t v22 = (uint64_t)v9;
      goto LABEL_15;
    }
LABEL_23:
    uint64_t v1 = (void *)sub_100328B30(0, v1[2] + 1, 1, (unint64_t)v1);
    *uint64_t v11 = (unint64_t)v1;
    goto LABEL_12;
  }
  uint64_t v13 = v1[3];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v16 = v1[5];
  if (!v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v15 == 0x8000000000000000 && v16 == -1)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v17 = v15 % v16;
  v1[3] = v15 % v16;
  if (*(void *)(v12 + 16) < v16)
  {
    sub_100386988(a1, (uint64_t)v6);
    swift_beginAccess();
    uint64_t v1 = (void *)*v11;
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v11 = (unint64_t)v1;
    if (v18)
    {
LABEL_8:
      unint64_t v20 = v1[2];
      unint64_t v19 = v1[3];
      if (v20 >= v19 >> 1)
      {
        uint64_t v1 = (void *)sub_100328B30(v19 > 1, v20 + 1, 1, (unint64_t)v1);
        *uint64_t v11 = (unint64_t)v1;
      }
      v1[2] = v20 + 1;
      uint64_t v21 = (uint64_t)v1
          + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
          + *(void *)(v4 + 72) * v20;
      uint64_t v22 = (uint64_t)v6;
LABEL_15:
      sub_100386A6C(v22, v21, type metadata accessor for CVTrackedDetection.HistoryEntry);
LABEL_20:
      swift_endAccess();
      os_unfair_lock_unlock(v10);
      return;
    }
LABEL_25:
    uint64_t v1 = (void *)sub_100328B30(0, v1[2] + 1, 1, (unint64_t)v1);
    *uint64_t v11 = (unint64_t)v1;
    goto LABEL_8;
  }
  swift_beginAccess();
  unint64_t v26 = *v11;
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v11 = v26;
  if (v27)
  {
    if ((v17 & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v26 = sub_1003068D8(v26);
  *uint64_t v11 = v26;
  if ((v17 & 0x8000000000000000) != 0) {
    goto LABEL_27;
  }
LABEL_18:
  if (v17 < *(void *)(v26 + 16))
  {
    sub_100386B34(a1, v26+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v17);
    goto LABEL_20;
  }
LABEL_28:
  __break(1u);
}

void sub_1003817E8(uint64_t a1)
{
  uint64_t v4 = (os_unfair_lock_s *)(v1[4] + 16);
  os_unfair_lock_lock(v4);
  uint64_t v5 = (void **)(v1 + 2);
  swift_beginAccess();
  uint64_t v6 = v1[2];
  if (!*(void *)(v6 + 16)) {
    goto LABEL_13;
  }
  uint64_t v7 = v1[3];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = v1[5];
  if (!v10)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 == 0x8000000000000000 && v10 == -1) {
    goto LABEL_21;
  }
  unint64_t v2 = v9 % v10;
  v1[3] = v9 % v10;
  if (*(void *)(v6 + 16) < v10)
  {
LABEL_13:
    swift_beginAccess();
    uint64_t v16 = *v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v16 = sub_100328B64(0, v16[2] + 1, 1, v16);
      *uint64_t v5 = v16;
    }
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t v16 = sub_100328B64((void *)(v18 > 1), v19 + 1, 1, v16);
      *uint64_t v5 = v16;
    }
    v16[2] = v19 + 1;
    unint64_t v20 = &v16[11 * v19];
    long long v21 = *(_OWORD *)(a1 + 16);
    *((_OWORD *)v20 + 2) = *(_OWORD *)a1;
    *((_OWORD *)v20 + 3) = v21;
    long long v22 = *(_OWORD *)(a1 + 32);
    long long v23 = *(_OWORD *)(a1 + 48);
    long long v24 = *(_OWORD *)(a1 + 64);
    v20[14] = *(void *)(a1 + 80);
    *((_OWORD *)v20 + 5) = v23;
    *((_OWORD *)v20 + 6) = v24;
    *((_OWORD *)v20 + 4) = v22;
    goto LABEL_18;
  }
  swift_beginAccess();
  uint64_t v1 = *v5;
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v5 = v1;
  if (v12)
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v1 = sub_1003068EC(v1);
  *uint64_t v5 = v1;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_23;
  }
LABEL_11:
  if (v2 < v1[2])
  {
    long long v13 = *(_OWORD *)(a1 + 48);
    BOOL v14 = &v1[11 * v2];
    *((_OWORD *)v14 + 4) = *(_OWORD *)(a1 + 32);
    *((_OWORD *)v14 + 5) = v13;
    *((_OWORD *)v14 + 6) = *(_OWORD *)(a1 + 64);
    v14[14] = *(void *)(a1 + 80);
    long long v15 = *(_OWORD *)(a1 + 16);
    *((_OWORD *)v14 + 2) = *(_OWORD *)a1;
    *((_OWORD *)v14 + 3) = v15;
LABEL_18:
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    return;
  }
LABEL_24:
  __break(1u);
}

void sub_1003819D8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v18 - v6;
  os_unfair_lock_lock((os_unfair_lock_t)(v1[4] + 16));
  BOOL v8 = v1 + 2;
  swift_beginAccess();
  uint64_t v20 = v1[2];
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    goto LABEL_9;
  }
  uint64_t v9 = v1[3];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = v1[5];
  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 != 0x8000000000000000 || v12 != -1)
  {
    uint64_t v19 = a1;
    unint64_t v13 = v11 % v12;
    v1[3] = v11 % v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = Array.count.getter();
    swift_bridgeObjectRelease();
    if (v14 >= v12)
    {
      swift_beginAccess();
      Array._makeMutableAndUnique()();
      uint64_t v15 = *v8;
      sub_1003861AC(v13, *v8);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v17 = v15;
      }
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24))(v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v19, v4);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v19, v4);
LABEL_9:
    swift_beginAccess();
    Array.append(_:)();
LABEL_13:
    swift_endAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v2[4] + 16));
    return;
  }
LABEL_16:
  __break(1u);
}

void sub_100381C5C(uint64_t a1, uint64_t a2)
{
}

void sub_100381C74(uint64_t a1, uint64_t a2)
{
}

void sub_100381C8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *))
{
  uint64_t v94 = a3;
  uint64_t v100 = a2;
  uint64_t v89 = sub_10000F214(&qword_100519F80);
  __chkstk_darwin(v89);
  uint64_t v91 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100519F88);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CVDetection();
  __chkstk_darwin(v8 - 8);
  BOOL v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v99 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v93 = (double *)((char *)&v87 - v15);
  __chkstk_darwin(v16);
  uint64_t v92 = (double *)((char *)&v87 - v17);
  __chkstk_darwin(v18);
  uint64_t v95 = (uint64_t)&v87 - v19;
  __chkstk_darwin(v20);
  uint64_t v96 = (uint64_t)&v87 - v21;
  __chkstk_darwin(v22);
  uint64_t v97 = (double *)((char *)&v87 - v23);
  __chkstk_darwin(v24);
  unint64_t v26 = (double *)((char *)&v87 - v25);
  __chkstk_darwin(v27);
  uint64_t v98 = (uint64_t)&v87 - v28;
  __chkstk_darwin(v29);
  CGRect v31 = (double *)((char *)&v87 - v30);
  __chkstk_darwin(v32);
  uint64_t v34 = (double *)((char *)&v87 - v33);
  sub_100386988(a1, (uint64_t)&v87 - v33);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v90 = v13;
  if (EnumCaseMultiPayload == 1)
  {
    double v36 = *v34;
  }
  else
  {
    sub_100386A6C((uint64_t)v34, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003FEC34(v101);
    uint64_t v37 = v11;
    uint64_t v38 = a1;
    uint64_t v40 = v102;
    uint64_t v39 = v103;
    sub_10000F3B0(v101, v102);
    uint64_t v41 = v40;
    a1 = v38;
    uint64_t v11 = v37;
    double v36 = (*(double (**)(uint64_t, uint64_t))(v39 + 88))(v41, v39);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v101);
    sub_100386AD4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  if ((~*(void *)&v36 & 0x7FF0000000000000) != 0 || (*(void *)&v36 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    sub_100386988(a1, (uint64_t)v31);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      double v42 = *v31;
    }
    else
    {
      sub_100386A6C((uint64_t)v31, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003FEC34(v101);
      uint64_t v43 = v11;
      uint64_t v44 = a1;
      uint64_t v45 = v102;
      uint64_t v46 = v103;
      sub_10000F3B0(v101, v102);
      uint64_t v47 = v45;
      a1 = v44;
      uint64_t v11 = v43;
      double v42 = (*(double (**)(uint64_t, uint64_t))(v46 + 88))(v47, v46);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v101);
      sub_100386AD4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
    }
    if (v42 > -INFINITY)
    {
      uint64_t v48 = v100;
      unint64_t v49 = (os_unfair_lock_s *)(*(void *)(v100 + 32) + 16);
      os_unfair_lock_lock(v49);
      swift_beginAccess();
      uint64_t v50 = *(void *)(*(void *)(v48 + 16) + 16);
      os_unfair_lock_unlock(v49);
      if (!v50)
      {
LABEL_13:
        sub_100381488(a1);
        return;
      }
      sub_1000352F0((uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v7, 1, v11) == 1)
      {
        sub_1003869EC((uint64_t)v7);
        goto LABEL_13;
      }
      uint64_t v51 = v98;
      sub_100386A6C((uint64_t)v7, v98, type metadata accessor for CVTrackedDetection.HistoryEntry);
      sub_100386988(v51, (uint64_t)v26);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        double v52 = *v26;
      }
      else
      {
        sub_100386A6C((uint64_t)v26, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003FEC34(v101);
        uint64_t v53 = a1;
        uint64_t v54 = v102;
        uint64_t v55 = v103;
        sub_10000F3B0(v101, v102);
        uint64_t v56 = *(double (**)(uint64_t, uint64_t))(v55 + 88);
        uint64_t v57 = v55;
        a1 = v53;
        double v52 = v56(v54, v57);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v101);
        sub_100386AD4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      uint64_t v58 = v97;
      sub_100386988(a1, (uint64_t)v97);
      uint64_t v59 = swift_getEnumCaseMultiPayload();
      if (v59 == 1)
      {
        if (v52 >= *v58)
        {
LABEL_19:
          __chkstk_darwin(v59);
          sub_10003F640(v94);
          if ((v61 & 1) == 0)
          {
            unint64_t v62 = v60;
            uint64_t v63 = v96;
            sub_10003FB08(v60, v96);
            sub_100386988(a1, v95);
            uint64_t v64 = v92;
            sub_100386988(v63, (uint64_t)v92);
            int v65 = swift_getEnumCaseMultiPayload();
            uint64_t v88 = a1;
            if (v65 == 1)
            {
              double v66 = *v64;
            }
            else
            {
              sub_100386A6C((uint64_t)v64, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
              sub_1003FEC34(v101);
              uint64_t v75 = v102;
              uint64_t v76 = v103;
              sub_10000F3B0(v101, v102);
              double v66 = (*(double (**)(uint64_t, uint64_t))(v76 + 88))(v75, v76);
              _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v101);
              sub_100386AD4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
            }
            uint64_t v77 = v93;
            uint64_t v78 = v95;
            sub_100386988(v95, (uint64_t)v93);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              double v79 = *v77;
            }
            else
            {
              sub_100386A6C((uint64_t)v77, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
              sub_1003FEC34(v101);
              uint64_t v80 = v102;
              uint64_t v81 = v103;
              sub_10000F3B0(v101, v102);
              uint64_t v78 = v95;
              double v79 = (*(double (**)(uint64_t, uint64_t))(v81 + 88))(v80, v81);
              _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v101);
              sub_100386AD4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
            }
            if (v66 != v79)
            {
              sub_1003838C8(v88, v62);
LABEL_45:
              sub_100386AD4(v78, type metadata accessor for CVTrackedDetection.HistoryEntry);
              sub_100386AD4(v96, type metadata accessor for CVTrackedDetection.HistoryEntry);
              uint64_t v74 = v51;
              goto LABEL_46;
            }
            uint64_t v82 = v91 + *(int *)(v89 + 48);
            sub_100386988(v96, v91);
            sub_100386988(v78, v82);
            int v83 = swift_getEnumCaseMultiPayload();
            int v84 = swift_getEnumCaseMultiPayload();
            int v85 = v84;
            if (v83 == 1)
            {
              uint64_t v86 = (uint64_t)v90;
              sub_100386988(v78, (uint64_t)v90);
              if (v85 == 1) {
                goto LABEL_44;
              }
            }
            else
            {
              uint64_t v86 = (uint64_t)v90;
              if (v84 == 1)
              {
                sub_100386988(v96, (uint64_t)v90);
              }
              else
              {
                sub_100386988(v78, (uint64_t)v90);
                sub_100386AD4(v82, type metadata accessor for CVTrackedDetection.HistoryEntry);
              }
              uint64_t v82 = v91;
            }
            sub_100386AD4(v82, type metadata accessor for CVTrackedDetection.HistoryEntry);
LABEL_44:
            sub_1003833D4(v86, v62);
            goto LABEL_45;
          }
          if (qword_100517EA8 != -1) {
            swift_once();
          }
          uint64_t v70 = type metadata accessor for Logger();
          sub_10000F378(v70, (uint64_t)qword_10055E310);
          uint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v73 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v73 = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, v72, "Cannot append data with older timestamp to log", v73, 2u);
            swift_slowDealloc();
          }

LABEL_29:
          uint64_t v74 = v51;
LABEL_46:
          sub_100386AD4(v74, type metadata accessor for CVTrackedDetection.HistoryEntry);
          return;
        }
      }
      else
      {
        sub_100386A6C((uint64_t)v58, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003FEC34(v101);
        uint64_t v67 = v102;
        uint64_t v68 = v103;
        sub_10000F3B0(v101, v102);
        double v69 = (*(double (**)(uint64_t, uint64_t))(v68 + 88))(v67, v68);
        _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v101);
        uint64_t v59 = sub_100386AD4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if (v52 >= v69) {
          goto LABEL_19;
        }
      }
      sub_100381488(a1);
      goto LABEL_29;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100382740(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 48);
  long long v26 = *(_OWORD *)(a1 + 32);
  long long v27 = v3;
  long long v28 = *(_OWORD *)(a1 + 64);
  double v29 = *(double *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v24 = *(_OWORD *)a1;
  long long v25 = v4;
  BOOL v5 = (*(void *)&v2 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v2 & 0x7FF0000000000000) != 0;
  if (v2 <= -INFINITY || !v5)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v9 = (os_unfair_lock_s *)(*(void *)(a2 + 32) + 16);
    os_unfair_lock_lock(v9);
    swift_beginAccess();
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) + 16);
    os_unfair_lock_unlock(v9);
    if (v10 && (sub_100035434((uint64_t)v21), (v23 & 1) == 0) && v22 >= v2)
    {
      __chkstk_darwin(v11);
      sub_10003F900((uint64_t (*)(long long *))sub_1003868E0);
      if (v13)
      {
        if (qword_100517EA8 != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        sub_10000F378(v15, (uint64_t)qword_10055E310);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Cannot append data with older timestamp to log", v18, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        uint64_t v14 = (void *)v12;
        sub_10003FC60(v12, (uint64_t)v19);
        double v22 = v29;
        void v21[2] = v26;
        v21[3] = v27;
        v21[4] = v28;
        v21[0] = v24;
        v21[1] = v25;
        if (v20 == v29)
        {
          v30[0] = v19[0];
          v30[1] = v19[1];
          void v30[2] = v19[2];
          v30[3] = v19[3];
          v30[4] = v19[4];
          double v31 = v20;
          sub_100383588((uint64_t)v30, v14);
        }
        else
        {
          sub_100383CAC(v21, (uint64_t)v14);
        }
      }
    }
    else
    {
      sub_1003817E8(a1);
    }
  }
}

void sub_100382A08(uint64_t a1, void (*a2)(char *, char *), uint64_t a3)
{
  uint64_t v4 = (uint64_t)v3;
  uint64_t v43 = a3;
  uint64_t v44 = a2;
  uint64_t v6 = *v3;
  uint64_t v48 = v6;
  uint64_t v7 = *(void *)(v6 + 240);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&WitnessTable - v10;
  uint64_t v49 = *(void *)(v7 - 8);
  __chkstk_darwin(v12);
  double v42 = (char *)&WitnessTable - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v45 = (char *)&WitnessTable - v15;
  __chkstk_darwin(v16);
  uint64_t v46 = (char *)&WitnessTable - v17;
  double v19 = __chkstk_darwin(v18);
  uint64_t v47 = (char *)&WitnessTable - v20;
  uint64_t v21 = *(void *)(v6 + 248);
  double v22 = *(double (**)(uint64_t, uint64_t, double))(v21 + 8);
  double v23 = v22(v7, v21, v19);
  BOOL v24 = (~*(void *)&v23 & 0x7FF0000000000000) != 0 || (*(void *)&v23 & 0xFFFFFFFFFFFFFLL) == 0;
  if (v24 && ((double (*)(uint64_t, uint64_t))v22)(v7, v21) > -INFINITY)
  {
    if (sub_10038380C())
    {
LABEL_10:
      sub_1003819D8(a1);
      return;
    }
    uint64_t v41 = v9;
    uint64_t v51 = v4;
    uint64_t WitnessTable = swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v25 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v11, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v8);
      goto LABEL_10;
    }
    long long v26 = v47;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v47, v11, v7);
    double v27 = ((double (*)(uint64_t, uint64_t))v22)(v7, v21);
    if (v27 >= ((double (*)(uint64_t, uint64_t))v22)(v7, v21))
    {
      uint64_t v50 = v4;
      __chkstk_darwin(v28);
      *(&WitnessTable - 4) = v7;
      *(&WitnessTable - 3) = v21;
      uint64_t v39 = a1;
      BidirectionalCollection.lastIndex(where:)();
      if (v52)
      {
        if (qword_100517EA8 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_10000F378(v29, (uint64_t)qword_10055E310);
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Cannot append data with older timestamp to log", v32, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v7);
      }
      else
      {
        uint64_t v33 = v46;
        uint64_t v48 = v51;
        sub_100383294(v51);
        uint64_t v34 = v49;
        uint64_t v35 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v45, a1, v7);
        double v36 = ((double (*)(uint64_t, uint64_t))v22)(v7, v21);
        if (v36 == ((double (*)(uint64_t, uint64_t))v22)(v7, v21))
        {
          uint64_t v37 = (uint64_t)v42;
          v44(v33, v35);
          sub_100386680(v37, v48);
          uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
          v38(v37, v7);
        }
        else
        {
          sub_100384014(a1, v48);
          uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
        }
        v38((uint64_t)v35, v7);
        v38((uint64_t)v33, v7);
        v38((uint64_t)v47, v7);
      }
    }
    else
    {
      sub_1003819D8(a1);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v7);
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

BOOL sub_100383040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v12 = (double *)((char *)&v21[-1] - v11);
  sub_100386988(a1, (uint64_t)&v21[-1] - v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    double v13 = *v12;
  }
  else
  {
    sub_100386A6C((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003FEC34(v21);
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    sub_10000F3B0(v21, v22);
    double v13 = (*(double (**)(uint64_t, uint64_t))(v15 + 88))(v14, v15);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v21);
    sub_100386AD4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  sub_100386988(a2, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    double v16 = *v9;
  }
  else
  {
    sub_100386A6C((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003FEC34(v21);
    uint64_t v17 = v22;
    uint64_t v18 = v23;
    sub_10000F3B0(v21, v22);
    double v16 = (*(double (**)(uint64_t, uint64_t))(v18 + 88))(v17, v18);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v21);
    sub_100386AD4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  return v13 <= v16;
}

void sub_100383294(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(v1[4] + 16));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v3 = Array.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = 0;
  uint64_t v5 = v1[5];
  if (v3 != v5)
  {
LABEL_9:
    BOOL v7 = __OFADD__(v4, a1);
    uint64_t v10 = v4 + a1;
    if (v7)
    {
      __break(1u);
    }
    else if (v5)
    {
      if (v5 != -1 || v10 != 0x8000000000000000)
      {
        swift_bridgeObjectRetain();
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock((os_unfair_lock_t)(v1[4] + 16));
        return;
      }
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v1[3];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3)
  {
    if (v3 == -1 && v8 == 0x8000000000000000) {
      goto LABEL_19;
    }
    uint64_t v4 = v8 % v3;
    goto LABEL_9;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_1003833D4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = (os_unfair_lock_s *)(v2[4] + 16);
  os_unfair_lock_lock(v5);
  uint64_t v6 = v2 + 2;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v2[2] + 16);
  uint64_t v10 = v2[5];
  if (v9 != v10)
  {
LABEL_5:
    uint64_t v14 = v8 + a2;
    if (__OFADD__(v8, a2))
    {
      __break(1u);
    }
    else if (v10)
    {
      if (v10 == -1 && v14 == 0x8000000000000000) {
        goto LABEL_20;
      }
      swift_beginAccess();
      a2 = *v6;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v6 = a2;
      if (result) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
    __break(1u);
LABEL_15:
    uint64_t result = sub_1003068D8(a2);
    a2 = result;
    unint64_t *v6 = result;
LABEL_10:
    unint64_t v15 = v14 % v10;
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v15 < *(void *)(a2 + 16))
    {
      uint64_t v16 = *(void *)(type metadata accessor for CVTrackedDetection.HistoryEntry(0) - 8);
      sub_100386B34(a1, a2+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v15);
      swift_endAccess();
      os_unfair_lock_unlock(v5);
      return sub_100386AD4(a1, type metadata accessor for CVTrackedDetection.HistoryEntry);
    }
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v11 = v2[3];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v9)
  {
    uint64_t v8 = v13 % v9;
    goto LABEL_5;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void sub_100383588(uint64_t a1, void *a2)
{
  uint64_t v5 = (os_unfair_lock_s *)(v2[4] + 16);
  os_unfair_lock_lock(v5);
  uint64_t v6 = (void **)(v2 + 2);
  swift_beginAccess();
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(v2[2] + 16);
  uint64_t v9 = v2[5];
  if (v8 != v9)
  {
LABEL_5:
    uint64_t v13 = (uint64_t)a2 + v7;
    if (__OFADD__(v7, a2))
    {
      __break(1u);
    }
    else if (v9)
    {
      if (v9 == -1 && v13 == 0x8000000000000000) {
        goto LABEL_20;
      }
      swift_beginAccess();
      a2 = *v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v6 = a2;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
    __break(1u);
LABEL_15:
    a2 = sub_1003068EC(a2);
    unint64_t *v6 = a2;
LABEL_10:
    unint64_t v15 = v13 % v9;
    if (v13 % v9 < 0)
    {
      __break(1u);
    }
    else if (v15 < a2[2])
    {
      long long v16 = *(_OWORD *)(a1 + 48);
      uint64_t v17 = &a2[11 * v15];
      *((_OWORD *)v17 + 4) = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v17 + 5) = v16;
      *((_OWORD *)v17 + 6) = *(_OWORD *)(a1 + 64);
      v17[14] = *(void *)(a1 + 80);
      long long v18 = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v17 + 2) = *(_OWORD *)a1;
      *((_OWORD *)v17 + 3) = v18;
      swift_endAccess();
      os_unfair_lock_unlock(v5);
      return;
    }
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = v2[3];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v8)
  {
    uint64_t v7 = v12 % v8;
    goto LABEL_5;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t sub_1003836E4()
{
  return swift_release();
}

uint64_t sub_1003836EC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10038371C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100383744()
{
  sub_1003836EC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TimestampDataBuffer()
{
  return sub_1000684BC();
}

uint64_t sub_100383790()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1003837F4()
{
  return sub_100384748((uint64_t (*)(uint64_t, uint64_t))&Array.count.getter);
}

uint64_t sub_10038380C()
{
  uint64_t v1 = v0;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v0 + 32) + 16));
  swift_beginAccess();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v2 = Collection.isEmpty.getter();
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v1 + 32) + 16));
  return v2 & 1;
}

void sub_1003838C8(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a1;
  uint64_t v4 = sub_10000F214((uint64_t *)&unk_100528AA0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - v12;
  os_unfair_lock_t v39 = (os_unfair_lock_t)(v2[4] + 16);
  os_unfair_lock_lock(v39);
  uint64_t v14 = v2 + 2;
  swift_beginAccess();
  unint64_t v15 = v2[2];
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v40 = v2;
  uint64_t v17 = v2[5];
  if (v16 == v17)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      char v2 = (void *)a2;
      if (a2)
      {
        if (!v16)
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        long long v18 = 0;
        while (1)
        {
          unint64_t v19 = *(void *)(v15 + 16);
          if (v19 == v16)
          {
            uint64_t v20 = v40[3];
            BOOL v21 = __OFADD__(v20, 1);
            uint64_t v22 = v20 + 1;
            if (v21) {
              goto LABEL_40;
            }
            uint64_t v23 = v22 % v16;
            uint64_t v17 = (uint64_t)v18 + v23;
            if (__OFADD__(v23, v18)) {
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v17 = (uint64_t)v18;
          }
          long long v18 = (void *)((char *)v18 + 1);
          BOOL v21 = __OFADD__(v23, v18);
          uint64_t v24 = (uint64_t)v18 + v23;
          if (v21) {
            goto LABEL_36;
          }
          unint64_t v25 = v24 % v16;
          if (v25 >= v19) {
            break;
          }
          unint64_t v26 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
          unint64_t v27 = v15 + v26;
          uint64_t v28 = *(void *)(v8 + 72);
          sub_100386988(v27 + v28 * v25, (uint64_t)v13);
          swift_beginAccess();
          unint64_t v29 = *v14;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v14 = v29;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v29 = sub_1003068D8(v29);
            *uint64_t v14 = v29;
          }
          unint64_t v31 = v17 % v16;
          if (v17 % v16 < 0) {
            goto LABEL_38;
          }
          if (v31 >= *(void *)(v29 + 16)) {
            goto LABEL_39;
          }
          sub_100386B98((uint64_t)v13, v29 + v26 + v28 * v31);
          unint64_t v15 = *v14;
          swift_endAccess();
          if (v2 == v18)
          {
            if (*(void *)(v15 + 16) == v16) {
              goto LABEL_25;
            }
            uint64_t v17 = (uint64_t)v2;
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_25:
        uint64_t v32 = v40[3];
        BOOL v21 = __OFADD__(v32, 1);
        uint64_t v33 = v32 + 1;
        if (v21)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (!v16)
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v34 = v33 % v16;
        uint64_t v17 = (uint64_t)v2 + v34;
        if (!__OFADD__(v34, v2))
        {
LABEL_28:
          swift_beginAccess();
          char v2 = (void *)*v14;
          char v35 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v14 = (unint64_t)v2;
          if (v35)
          {
LABEL_29:
            unint64_t v36 = v17 % v16;
            if (v17 % v16 < 0)
            {
              __break(1u);
            }
            else if (v36 < v2[2])
            {
              sub_100386B34(v38, (uint64_t)v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v36);
              goto LABEL_32;
            }
            __break(1u);
            goto LABEL_46;
          }
LABEL_43:
          char v2 = (void *)sub_1003068D8((unint64_t)v2);
          *uint64_t v14 = (unint64_t)v2;
          goto LABEL_29;
        }
        __break(1u);
LABEL_36:
        __break(1u);
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    __break(1u);
    __break(1u);
    goto LABEL_43;
  }
  if (v16 >= v17)
  {
LABEL_33:
    os_unfair_lock_unlock(v39);
    return;
  }
  sub_100386988(v38, (uint64_t)v10);
  swift_beginAccess();
  if (*(void *)(*v14 + 16) < a2 % v17) {
    goto LABEL_49;
  }
  if (((a2 % v17) & 0x8000000000000000) == 0)
  {
    sub_100386A6C((uint64_t)v10, (uint64_t)v6, type metadata accessor for CVTrackedDetection.HistoryEntry);
    sub_10030637C(a2 % v17, a2 % v17, (uint64_t)v6);
LABEL_32:
    swift_endAccess();
    goto LABEL_33;
  }
LABEL_50:
  __break(1u);
}

void sub_100383CAC(void *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t v51 = a1[9];
  uint64_t v53 = a1[8];
  uint64_t v49 = a1[10];
  uint64_t v13 = (os_unfair_lock_s *)(v2[4] + 16);
  os_unfair_lock_lock(v13);
  uint64_t v14 = v2 + 2;
  swift_beginAccess();
  unint64_t v15 = (void *)v2[2];
  uint64_t v16 = v15[2];
  uint64_t v17 = v2[5];
  if (v16 == v17)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      if (a2)
      {
        if (!v16)
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        uint64_t v18 = 0;
        while (1)
        {
          unint64_t v19 = v15[2];
          if (v19 == v16)
          {
            uint64_t v20 = v2[3];
            BOOL v21 = __OFADD__(v20, 1);
            uint64_t v22 = v20 + 1;
            if (v21) {
              goto LABEL_40;
            }
            uint64_t v23 = v22 % v16;
            uint64_t v24 = v23 + v18;
            if (__OFADD__(v23, v18)) {
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v23 = 0;
            uint64_t v24 = v18;
          }
          BOOL v21 = __OFADD__(v23, ++v18);
          uint64_t v25 = v23 + v18;
          if (v21) {
            goto LABEL_36;
          }
          unint64_t v26 = v25 % v16;
          if (v26 >= v19) {
            break;
          }
          unint64_t v27 = &v15[11 * v26];
          uint64_t v28 = v27[4];
          uint64_t v29 = v27[5];
          uint64_t v30 = v27[6];
          uint64_t v31 = v27[7];
          uint64_t v32 = v27[8];
          uint64_t v33 = v27[9];
          uint64_t v34 = v27[10];
          uint64_t v35 = v27[11];
          uint64_t v52 = v27[13];
          uint64_t v54 = v27[12];
          uint64_t v50 = v27[14];
          swift_beginAccess();
          unint64_t v36 = (void *)*v14;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v14 = v36;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v36 = sub_1003068EC(v36);
            *uint64_t v14 = v36;
          }
          unint64_t v38 = v24 % v16;
          if (v24 % v16 < 0) {
            goto LABEL_38;
          }
          if (v38 >= v36[2]) {
            goto LABEL_39;
          }
          os_unfair_lock_t v39 = &v36[11 * v38];
          v39[4] = v28;
          v39[5] = v29;
          v39[6] = v30;
          v39[7] = v31;
          v39[8] = v32;
          v39[9] = v33;
          v39[10] = v34;
          v39[11] = v35;
          v39[12] = v54;
          v39[13] = v52;
          v39[14] = v50;
          unint64_t v15 = (void *)*v14;
          swift_endAccess();
          if (a2 == v18)
          {
            if (v15[2] != v16) {
              goto LABEL_28;
            }
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        uint64_t v41 = v2[3];
        BOOL v21 = __OFADD__(v41, 1);
        uint64_t v42 = v41 + 1;
        if (v21)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (!v16)
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v43 = v42 % v16;
        BOOL v21 = __OFADD__(v43, a2);
        a2 += v43;
        if (!v21)
        {
LABEL_28:
          swift_beginAccess();
          char v2 = (void *)*v14;
          char v44 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v14 = v2;
          if (v44)
          {
LABEL_29:
            unint64_t v45 = a2 % v16;
            if (a2 % v16 < 0)
            {
              __break(1u);
            }
            else if (v45 < v2[2])
            {
              long long v46 = *((_OWORD *)a1 + 3);
              uint64_t v47 = &v2[11 * v45];
              *((_OWORD *)v47 + 4) = *((_OWORD *)a1 + 2);
              *((_OWORD *)v47 + 5) = v46;
              *((_OWORD *)v47 + 6) = *((_OWORD *)a1 + 4);
              v47[14] = a1[10];
              long long v48 = *((_OWORD *)a1 + 1);
              *((_OWORD *)v47 + 2) = *(_OWORD *)a1;
              *((_OWORD *)v47 + 3) = v48;
              goto LABEL_32;
            }
            __break(1u);
            goto LABEL_46;
          }
LABEL_43:
          char v2 = sub_1003068EC(v2);
          *uint64_t v14 = v2;
          goto LABEL_29;
        }
        __break(1u);
LABEL_36:
        __break(1u);
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    __break(1u);
    __break(1u);
    goto LABEL_43;
  }
  if (v16 >= v17)
  {
LABEL_33:
    os_unfair_lock_unlock(v13);
    return;
  }
  uint64_t v40 = a2 % v17;
  swift_beginAccess();
  if (*(void *)(*v14 + 16) < v40) {
    goto LABEL_49;
  }
  if ((v40 & 0x8000000000000000) == 0)
  {
    v55[0] = v5;
    v55[1] = v6;
    v55[2] = v7;
    v55[3] = v8;
    v55[4] = v9;
    v55[5] = v10;
    v55[6] = v11;
    v55[7] = v12;
    v55[8] = v53;
    v55[9] = v51;
    v55[10] = v49;
    sub_1003065A0(v40, v40, (uint64_t)v55);
LABEL_32:
    swift_endAccess();
    goto LABEL_33;
  }
LABEL_50:
  __break(1u);
}

void sub_100384014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v43 - v10;
  os_unfair_lock_lock((os_unfair_lock_t)(v2[4] + 16));
  uint64_t v12 = v2 + 2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v13 = Array.count.getter();
  swift_bridgeObjectRelease();
  unint64_t v45 = v2;
  uint64_t v14 = v2[5];
  if (v13 == v14)
  {
    if (a2 < 0)
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v43[0] = v4;
    if (a2)
    {
      if (!v13)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v4 = 0;
      v43[1] = v6 + 40;
      uint64_t v44 = a2;
      while (1)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = Array.count.getter();
        swift_bridgeObjectRelease();
        if (v18 == v13)
        {
          uint64_t v19 = v45[3];
          BOOL v20 = __OFADD__(v19, 1);
          uint64_t v21 = v19 + 1;
          if (v20) {
            goto LABEL_59;
          }
          if (v13 == -1 && v21 == 0x8000000000000000) {
            goto LABEL_62;
          }
          uint64_t v22 = v21 % v13;
        }
        else
        {
          uint64_t v22 = 0;
        }
        a2 = v22 + v4;
        if (__OFADD__(v22, v4)) {
          break;
        }
        if (v13 == -1 && a2 == 0x8000000000000000) {
          goto LABEL_60;
        }
        uint64_t v8 = (char *)*v12;
        swift_bridgeObjectRetain();
        uint64_t v23 = Array.count.getter();
        swift_bridgeObjectRelease();
        if (v23 == v13)
        {
          uint64_t v24 = v45[3];
          BOOL v20 = __OFADD__(v24, 1);
          uint64_t v25 = v24 + 1;
          if (v20) {
            goto LABEL_61;
          }
          if (v13 == -1 && v25 == 0x8000000000000000) {
            goto LABEL_63;
          }
          uint64_t v26 = v25 % v13;
        }
        else
        {
          uint64_t v26 = 0;
        }
        BOOL v20 = __OFADD__(v26, ++v4);
        uint64_t v27 = v26 + v4;
        if (v20) {
          goto LABEL_58;
        }
        if (v13 == -1 && v27 == 0x8000000000000000)
        {
          __break(1u);
          goto LABEL_28;
        }
        swift_bridgeObjectRetain();
        Array.subscript.getter();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        type metadata accessor for Array();
        uint64_t v14 = (uint64_t)v12;
        Array._makeMutableAndUnique()();
        uint64_t v15 = *v12;
        sub_1003861AC(a2 % v13, *v12);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v17 = v15 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0) {
          uint64_t v17 = v15;
        }
        (*(void (**)(unint64_t, char *, uint64_t))(v6 + 40))(v17+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * (a2 % v13), v11, v5);
        swift_endAccess();
        a2 = v44;
        if (v44 == v4) {
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v33 = Array.count.getter();
    swift_bridgeObjectRelease();
    if (v33 == v13)
    {
      uint64_t v34 = v45[3];
      BOOL v20 = __OFADD__(v34, 1);
      uint64_t v35 = v34 + 1;
      if (v20)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (!v13)
      {
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      if (v13 == -1 && v35 == 0x8000000000000000) {
        goto LABEL_75;
      }
      uint64_t v36 = v35 % v13;
    }
    else
    {
      uint64_t v36 = 0;
    }
    BOOL v20 = __OFADD__(v36, a2);
    uint64_t v37 = v36 + a2;
    if (v20) {
      goto LABEL_65;
    }
    if (!v13)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v13 == -1 && v37 == 0x8000000000000000) {
      goto LABEL_72;
    }
    unint64_t v38 = v37 % v13;
    swift_beginAccess();
    type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    uint64_t v39 = *v12;
    sub_1003861AC(v38, *v12);
    char v40 = _swift_isClassOrObjCExistentialType();
    uint64_t v41 = v39 & 0xFFFFFFFFFFFFFF8;
    if ((v40 & 1) == 0) {
      uint64_t v41 = v39;
    }
    (*(void (**)(unint64_t, void, uint64_t))(v6 + 24))(v41+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v38, v43[0], v5);
    goto LABEL_55;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  uint64_t v28 = Array.count.getter();
  swift_bridgeObjectRelease();
  if (v28 >= v14)
  {
LABEL_56:
    os_unfair_lock_unlock((os_unfair_lock_t)(v45[4] + 16));
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v4, v5);
  swift_bridgeObjectRetain();
  uint64_t v29 = Array.count.getter();
  swift_bridgeObjectRelease();
  if (v29 != v14)
  {
    uint64_t v32 = 0;
LABEL_50:
    BOOL v20 = __OFADD__(v32, a2);
    uint64_t v42 = v32 + a2;
    if (v20)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (!v14)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v14 == -1 && v42 == 0x8000000000000000) {
      goto LABEL_76;
    }
    swift_beginAccess();
    type metadata accessor for Array();
    Array.insert(_:at:)();
LABEL_55:
    swift_endAccess();
    goto LABEL_56;
  }
  uint64_t v30 = v45[3];
  BOOL v20 = __OFADD__(v30, 1);
  uint64_t v31 = v30 + 1;
  if (v20)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (v14)
  {
    if (v14 == -1 && v31 == 0x8000000000000000) {
      goto LABEL_77;
    }
    uint64_t v32 = v31 % v14;
    goto LABEL_50;
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
}

uint64_t sub_1003845BC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CircularBuffer()
{
  return sub_1000684BC();
}

uint64_t sub_100384614()
{
  return swift_getWitnessTable();
}

uint64_t sub_100384630()
{
  return sub_100386144();
}

unint64_t sub_100384648()
{
  unint64_t result = qword_10052BCC8;
  if (!qword_10052BCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BCC8);
  }
  return result;
}

uint64_t sub_10038469C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100384700()
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v0 + 32) + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v0 + 32) + 16));
  return 0;
}

uint64_t sub_100384730()
{
  return sub_100384748((uint64_t (*)(uint64_t, uint64_t))&Array.endIndex.getter);
}

uint64_t sub_100384748(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  os_unfair_lock_lock((os_unfair_lock_t)(v1[4] + 16));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = a1(v5, v4);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock((os_unfair_lock_t)(v1[4] + 16));
  return v6;
}

uint64_t sub_1003847E4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100384700();
  *a1 = 0;
  return result;
}

uint64_t sub_100384810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100384748((uint64_t (*)(uint64_t, uint64_t))&Array.endIndex.getter);
  *a1 = result;
  return result;
}

void (*sub_100384850(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_1003848B4(v4, *a2);
  return sub_10020B490;
}

void (*sub_1003848B4(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 80);
  *a1 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  a1[1] = v5;
  a1[2] = malloc(*(void *)(v5 + 64));
  sub_100383294(a2);
  return sub_10038496C;
}

void sub_10038496C(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t sub_1003849B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_100384A30(a1, v4, WitnessTable, a2);
}

uint64_t sub_100384A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v52 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v47 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v44 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  __chkstk_darwin(v19);
  long long v46 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v44 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = v4;
  uint64_t v50 = v6;
  uint64_t v51 = a2;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v25 = v12;
    uint64_t v26 = v15;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = v47;
    uint64_t v29 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    unint64_t v45 = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v30(v47, v18, AssociatedTypeWitness);
    uint64_t v31 = v29;
    v30(v29, v26, AssociatedTypeWitness);
    uint64_t v32 = &v9[*(int *)(v27 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v33(v9, v28, AssociatedTypeWitness);
    v33(v32, v31, AssociatedTypeWitness);
    uint64_t v34 = v46;
    v30(v46, v9, AssociatedTypeWitness);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v32, AssociatedTypeWitness);
    uint64_t v35 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    v30(v9, v28, AssociatedTypeWitness);
    v30(v35, v31, AssociatedTypeWitness);
    uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v30;
    uint64_t v37 = v49;
    v30(&v34[*(int *)(v49 + 36)], v35, AssociatedTypeWitness);
    v44(v9, AssociatedTypeWitness);
    uint64_t v38 = v48;
    uint64_t v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v34, v37);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v42 = type metadata accessor for Slice();
    uint64_t v43 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v52 + *(int *)(v42 + 40), v40, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v55, v37);
    v36(v43, v39, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v43 + *(int *)(v42 + 36), &v39[*(int *)(v37 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100384F18()
{
  uint64_t v0 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter(v0, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_100384F90()
{
  return sub_10038380C() & 1;
}

uint64_t sub_100384FB8()
{
  return sub_1003837F4();
}

void sub_100384FDC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_100384FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CircularBuffer();
  return sub_10038640C(a1, a2, v7, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for Range, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t sub_100385070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CircularBuffer();
  return sub_10038640C(a1, a2, v7, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for ClosedRange, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.<= infix(_:_:));
}

uint64_t sub_1003850E8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CircularBuffer();

  return sub_100386200(a1, a2);
}

uint64_t sub_100385144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100385D18(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))&RandomAccessCollection<>.index(after:));
}

void *sub_10038515C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100385DC4(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *))&RandomAccessCollection<>.index(after:));
}

uint64_t sub_100385174@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain();
  sub_100384700();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t sub_1003851B0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_100385204()
{
  return 2;
}

uint64_t sub_10038520C()
{
  type metadata accessor for CircularBuffer();
  swift_getWitnessTable();
  uint64_t v0 = j___ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF();
  swift_release();
  return v0;
}

uint64_t sub_100385274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for CircularBuffer();

  return Sequence._copyContents(initializing:)(a1, a2, a3, v9, a5);
}

uint64_t sub_1003852E0()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_100385350(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_100386680(a1, *a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 80) - 8) + 8);

  return v5(a1);
}

void (*sub_1003853C4(void *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 80);
  *uint64_t v7 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[1] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[2] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *a2;
  v7[3] = v11;
  v7[4] = v12;
  v7[5] = *v3;
  sub_100383294(v12);
  return sub_1003854A0;
}

void sub_1003854A0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (void *)(*a1)[2];
  uint64_t v5 = (void *)(*a1)[3];
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[2], v5, v6);
    sub_100386680((uint64_t)v4, v3);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v7 + 8);
    v8(v4, v6);
    v8(v5, v6);
  }
  else
  {
    sub_100386680((*a1)[3], v3);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  free(v5);
  free(v4);

  free(v2);
}

uint64_t sub_10038558C()
{
  return swift_release();
}

void (*sub_1003855F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  uint64_t v8 = type metadata accessor for CircularBuffer();
  v7[4] = sub_100385678(v7, a2, v8, a4);
  return sub_1000EA47C;
}

void (*sub_100385678(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  _OWORD v9[2] = v4;
  void *v9 = a3;
  uint64_t v10 = type metadata accessor for Slice();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  sub_100384A30(a2, a3, a4, (uint64_t)v13);
  return sub_100385844;
}

void sub_100385844(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);

  free(v2);
}

uint64_t sub_1003859EC()
{
  return MutableCollection<>.partition(by:)();
}

uint64_t sub_100385A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CircularBuffer();

  return MutableCollection.swapAt(_:_:)(a1, a2, v7, a4);
}

uint64_t sub_100385AD4()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t sub_100385B44()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

uint64_t sub_100385BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CircularBuffer();

  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, v7, a4, &protocol witness table for Int);
}

uint64_t sub_100385C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for CircularBuffer();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, v9, a5);
}

uint64_t sub_100385C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CircularBuffer();

  return RandomAccessCollection<>.distance(from:to:)(a1, a2, v7, a4, &protocol witness table for Int);
}

uint64_t sub_100385D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100385D18(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))&RandomAccessCollection<>.index(before:));
}

uint64_t sub_100385D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v5 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();

  return a4(a1, v5, WitnessTable, &protocol witness table for Int);
}

void *sub_100385DAC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100385DC4(a1, a2, a3, (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *))&RandomAccessCollection<>.index(before:));
}

void *sub_100385DC4(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void *))
{
  uint64_t v6 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, v6, WitnessTable, &protocol witness table for Int);
  *a1 = v9;
  return result;
}

uint64_t sub_100385E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();

  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, v4, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_100385EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, v6, WitnessTable);
}

uint64_t sub_100385F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CircularBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();

  return RandomAccessCollection<>.distance(from:to:)(a1, a2, v4, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_100385FEC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100386008()
{
  return sub_100386144();
}

uint64_t sub_100386020()
{
  return swift_getWitnessTable();
}

uint64_t sub_100386084()
{
  return swift_getWitnessTable();
}

uint64_t sub_1003860E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100386104()
{
  return swift_getWitnessTable();
}

void *sub_100386120()
{
  return &protocol witness table for Int;
}

uint64_t sub_10038612C()
{
  return sub_100386144();
}

uint64_t sub_100386144()
{
  return swift_getWitnessTable();
}

uint64_t sub_100386190()
{
  return swift_getWitnessTable();
}

uint64_t sub_1003861AC(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100386200(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  size_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_10038640C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void sub_100386680(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  os_unfair_lock_lock((os_unfair_lock_t)(v2[4] + 16));
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 80);
  swift_bridgeObjectRetain();
  uint64_t v8 = Array.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  uint64_t v10 = v2[5];
  if (v8 == v10)
  {
    uint64_t v11 = v2[3];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (!v8)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      return;
    }
    if (v8 == -1 && v13 == 0x8000000000000000) {
      goto LABEL_21;
    }
    uint64_t v9 = v13 % v8;
  }
  BOOL v12 = __OFADD__(v9, a2);
  uint64_t v15 = v9 + a2;
  if (v12)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v10 == -1 && v15 == 0x8000000000000000) {
    goto LABEL_20;
  }
  unint64_t v16 = v15 % v10;
  swift_beginAccess();
  type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  uint64_t v17 = v2[2];
  sub_1003861AC(v16, v3[2]);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v19 = v17 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v19 = v17;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v19+ ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80))+ *(void *)(*(void *)(v7 - 8) + 72) * v16, a1, v7);
  swift_endAccess();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3[4] + 16));
}

uint64_t sub_100386848()
{
  type metadata accessor for Slice();
  swift_getWitnessTable();

  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

BOOL sub_1003868E0(uint64_t a1)
{
  return *(double *)(a1 + 80) <= *(double *)(*(void *)(v1 + 16) + 80);
}

BOOL sub_1003868F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(double (**)(uint64_t, uint64_t))(v2 + 8);
  double v4 = v3(v1, v2);
  return v4 <= v3(v1, v2);
}

uint64_t sub_100386988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003869EC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100519F88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_100386A4C(uint64_t a1)
{
  return sub_100383040(a1, *(void *)(v1 + 16));
}

uint64_t sub_100386A6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100386AD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100386B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100386B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100386BFC()
{
  return swift_deallocObject();
}

uint64_t sub_100386C0C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)(v1 + 16) + 240) - 8) + 16))(a1);
}

BOOL sub_100386C40(uint64_t a1)
{
  return sub_100386A4C(a1);
}

uint64_t destroy for InclementStatusOverlay(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    swift_release();
  }

  return swift_release();
}

void *initializeWithCopy for InclementStatusOverlay(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v8 = a2 + 6;
  uint64_t v7 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_retain();
  return a1;
}

void *assignWithCopy for InclementStatusOverlay(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  if (!a1[6])
  {
    if (v4)
    {
      uint64_t v6 = a2[7];
      a1[6] = v4;
      a1[7] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[7];
  a1[6] = v4;
  a1[7] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for InclementStatusOverlay(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  if (!a1[6])
  {
    if (v7)
    {
      uint64_t v9 = a2[7];
      a1[6] = v7;
      a1[7] = v9;
      goto LABEL_8;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v8 = a2[7];
  a1[6] = v7;
  a1[7] = v8;
  swift_release();
LABEL_8:
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InclementStatusOverlay(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InclementStatusOverlay(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InclementStatusOverlay()
{
  return &type metadata for InclementStatusOverlay;
}

uint64_t sub_100386FF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100387010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v2 = type metadata accessor for ScrollBounceBehavior();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  __chkstk_darwin(v2);
  uint64_t v33 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10052BCD0);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000F214(&qword_10052BCD8);
  uint64_t v32 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_100527230);
  __chkstk_darwin(v34);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100527238);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10052BCE0);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10000F214(&qword_10052BCE8);
  __chkstk_darwin(v35);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v1;
  static Axis.Set.vertical.getter();
  sub_10000F214(&qword_10052BCF0);
  sub_100013AA8(&qword_10052BCF8, &qword_10052BCF0);
  uint64_t v19 = v33;
  ScrollView.init(_:showsIndicators:content:)();
  static ScrollBounceBehavior.basedOnSize.getter();
  unsigned __int8 v20 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v20) {
    Axis.Set.init(rawValue:)();
  }
  sub_100013AA8(&qword_10052BD00, &qword_10052BCD0);
  uint64_t v21 = v37;
  View.scrollBounceBehavior(_:axes:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v40);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v21);
  uint64_t v22 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = v32;
  uint64_t v25 = v38;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v10, v8, v38);
  uint64_t v26 = (uint64_t *)&v10[*(int *)(v34 + 36)];
  *uint64_t v26 = KeyPath;
  v26[1] = v22;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v25);
  uint64_t v27 = static Alignment.center.getter();
  sub_1002273CC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, INFINITY, 0, v27, v28);
  sub_10000FBD8((uint64_t)v10, &qword_100527230);
  sub_10000FB74((uint64_t)v13, (uint64_t)v16, &qword_100527238);
  sub_10000FBD8((uint64_t)v13, &qword_100527238);
  uint64_t v29 = static SafeAreaRegions.all.getter();
  LOBYTE(KeyPath) = static Edge.Set.all.getter();
  sub_10000FB74((uint64_t)v16, (uint64_t)v18, &qword_10052BCE0);
  uint64_t v30 = &v18[*(int *)(v35 + 36)];
  *(void *)uint64_t v30 = v29;
  v30[8] = KeyPath;
  sub_10000FBD8((uint64_t)v16, &qword_10052BCE0);
  return sub_10000FC34((uint64_t)v18, v41, &qword_10052BCE8);
}

uint64_t sub_100387574@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = static Alignment.center.getter();
  a2[1] = v4;
  uint64_t v5 = sub_10000F214(&qword_10052BD08);
  return sub_1003875BC(a1, (char *)a2 + *(int *)(v5 + 44));
}

uint64_t sub_1003875BC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v42 = a1;
  long long v46 = a2;
  uint64_t v2 = sub_10000F214(&qword_10052BD10);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_10000F214(&qword_10052BD18);
  __chkstk_darwin(v41);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000F214(&qword_10052BD20);
  __chkstk_darwin(v43);
  uint64_t v45 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = sub_10000F214(&qword_100518B60);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v44 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v41 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v41 - v18;
  *(void *)&long long v47 = 0;
  BYTE8(v47) = 1;
  unsigned __int8 v20 = static Axis.Set.horizontal.getter();
  unsigned __int8 v21 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v20) {
    Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v21) {
    Axis.Set.init(rawValue:)();
  }
  static Alignment.center.getter();
  View.containerRelativeFrame(_:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v16, v11);
  *uint64_t v4 = static Alignment.center.getter();
  v4[1] = v22;
  uint64_t v23 = sub_10000F214(&qword_10052BD28);
  sub_100387A30(v42, (uint64_t)v4 + *(int *)(v23 + 44));
  char v24 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  sub_10000FB74((uint64_t)v4, (uint64_t)v6, &qword_10052BD10);
  uint64_t v33 = &v6[*(int *)(v41 + 36)];
  *uint64_t v33 = v24;
  *((void *)v33 + 1) = v26;
  *((void *)v33 + 2) = v28;
  *((void *)v33 + 3) = v30;
  *((void *)v33 + 4) = v32;
  v33[40] = 0;
  sub_10000FBD8((uint64_t)v4, &qword_10052BD10);
  static Edge.Set.vertical.getter();
  long long v47 = 0u;
  long long v48 = 0u;
  char v49 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  sub_10000FC34((uint64_t)v6, (uint64_t)v10, &qword_10052BD18);
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v35 = v44;
  v34(v44, v19, v11);
  uint64_t v36 = v45;
  sub_10000FB74((uint64_t)v10, v45, &qword_10052BD20);
  uint64_t v37 = v46;
  v34(v46, v35, v11);
  uint64_t v38 = sub_10000F214(&qword_10052BD30);
  sub_10000FB74(v36, (uint64_t)&v37[*(int *)(v38 + 48)], &qword_10052BD20);
  sub_10000FBD8((uint64_t)v10, &qword_10052BD20);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v12 + 8);
  v39(v19, v11);
  sub_10000FBD8(v36, &qword_10052BD20);
  return ((uint64_t (*)(char *, uint64_t))v39)(v35, v11);
}

uint64_t sub_100387A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10052BD38);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = sub_10000F214(&qword_10052BD40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v23 - v14;
  *(void *)uint64_t v15 = static HorizontalAlignment.center.getter();
  *((void *)v15 + 1) = 0;
  v15[16] = 0;
  uint64_t v16 = sub_10000F214(&qword_10052BD48);
  sub_100387CC4(a1, (uint64_t)&v15[*(int *)(v16 + 44)]);
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17)
  {
    swift_retain();
    *(void *)uint64_t v9 = static HorizontalAlignment.center.getter();
    *((void *)v9 + 1) = 0;
    v9[16] = 1;
    uint64_t v18 = sub_10000F214(&qword_10052BD60);
    sub_100388F80(v17, &v9[*(int *)(v18 + 44)]);
    sub_10000F478(v17);
    uint64_t v19 = sub_10000F214(&qword_10052BD50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 0, 1, v19);
  }
  else
  {
    uint64_t v20 = sub_10000F214(&qword_10052BD50);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 1, 1, v20);
  }
  sub_10000FB74((uint64_t)v15, (uint64_t)v12, &qword_10052BD40);
  sub_10000FB74((uint64_t)v9, (uint64_t)v6, &qword_10052BD38);
  sub_10000FB74((uint64_t)v12, a2, &qword_10052BD40);
  uint64_t v21 = sub_10000F214(&qword_10052BD58);
  sub_10000FB74((uint64_t)v6, a2 + *(int *)(v21 + 48), &qword_10052BD38);
  sub_10000FBD8((uint64_t)v9, &qword_10052BD38);
  sub_10000FBD8((uint64_t)v15, &qword_10052BD40);
  sub_10000FBD8((uint64_t)v6, &qword_10052BD38);
  return sub_10000FBD8((uint64_t)v12, &qword_10052BD40);
}

uint64_t sub_100387CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v162 = a2;
  uint64_t v3 = sub_10000F214(&qword_10052A1E0);
  __chkstk_darwin(v3 - 8);
  uint64_t v163 = (uint64_t)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v161 = (char *)&v138 - v6;
  uint64_t v7 = type metadata accessor for Font.Leading();
  uint64_t v154 = *(void *)(v7 - 8);
  uint64_t v155 = v7;
  __chkstk_darwin(v7);
  uint64_t v153 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052BDE8);
  __chkstk_darwin(v9 - 8);
  uint64_t v160 = (uint64_t)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v167 = (uint64_t)&v138 - v12;
  uint64_t v13 = type metadata accessor for SymbolEffectOptions();
  uint64_t v151 = *(void *)(v13 - 8);
  uint64_t v152 = v13;
  __chkstk_darwin(v13);
  uint64_t v150 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BounceSymbolEffect();
  uint64_t v149 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v148 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v147 = (char *)&v138 - v18;
  uint64_t v144 = sub_10000F214(&qword_10052BDF0);
  __chkstk_darwin(v144);
  uint64_t v20 = (uint64_t *)((char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = sub_10000F214(&qword_10051ED38);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for Image.ResizingMode();
  uint64_t v24 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v26 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10052BDF8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000F214(&qword_10052BE00);
  __chkstk_darwin(v142);
  uint64_t v31 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000F214(&qword_10052BE08);
  __chkstk_darwin(v143);
  uint64_t v164 = (uint64_t)&v138 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000F214(&qword_10052BE10);
  __chkstk_darwin(v165);
  uint64_t v146 = (char *)&v138 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_10052BE18);
  uint64_t v157 = *(void *)(v34 - 8);
  uint64_t v158 = v34;
  __chkstk_darwin(v34);
  uint64_t v145 = (char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000F214(&qword_10052BE20);
  __chkstk_darwin(v36 - 8);
  uint64_t v159 = (uint64_t)&v138 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v168 = a1;
  uint64_t v40 = *(void *)(a1 + 40);
  uint64_t v166 = (uint64_t)&v138 - v39;
  if (v40)
  {
    uint64_t v41 = *(void *)(v168 + 32);
    uint64_t v139 = v40;
    uint64_t v140 = v41;
    uint64_t v138 = v27;
    swift_bridgeObjectRetain();
    Image.init(systemName:)();
    uint64_t v42 = v141;
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v26, enum case for Image.ResizingMode.stretch(_:), v141);
    uint64_t v43 = Image.resizable(capInsets:resizingMode:)();
    uint64_t v156 = v15;
    uint64_t v44 = v43;
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v42);
    static SymbolRenderingMode.multicolor.getter();
    uint64_t v45 = type metadata accessor for SymbolRenderingMode();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v23, 0, 1, v45);
    uint64_t KeyPath = swift_getKeyPath();
    sub_10000FB74((uint64_t)v23, (uint64_t)v20 + *(int *)(v144 + 28), &qword_10051ED38);
    *uint64_t v20 = KeyPath;
    sub_10000FB74((uint64_t)v20, (uint64_t)&v29[*(int *)(v138 + 36)], &qword_10052BDF0);
    *(void *)uint64_t v29 = v44;
    *((void *)v29 + 1) = 0;
    *((_WORD *)v29 + 8) = 1;
    swift_retain();
    sub_10000FBD8((uint64_t)v20, &qword_10052BDF0);
    sub_10000FBD8((uint64_t)v23, &qword_10051ED38);
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_10000FB74((uint64_t)v29, (uint64_t)v31, &qword_10052BDF8);
    long long v47 = &v31[*(int *)(v142 + 36)];
    long long v48 = v199;
    *(_OWORD *)long long v47 = v198;
    *((_OWORD *)v47 + 1) = v48;
    *((_OWORD *)v47 + 2) = v200;
    sub_10000FBD8((uint64_t)v29, &qword_10052BDF8);
    LOBYTE(KeyPath) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v57 = v164;
    sub_10000FB74((uint64_t)v31, v164, &qword_10052BE00);
    uint64_t v58 = v57 + *(int *)(v143 + 36);
    *(unsigned char *)uint64_t v58 = KeyPath;
    *(void *)(v58 + 8) = v50;
    *(void *)(v58 + 16) = v52;
    *(void *)(v58 + 24) = v54;
    *(void *)(v58 + 32) = v56;
    *(unsigned char *)(v58 + 40) = 0;
    sub_10000FBD8((uint64_t)v31, &qword_10052BE00);
    uint64_t v59 = v147;
    BounceSymbolEffect.init()();
    uint64_t v60 = v148;
    BounceSymbolEffect.up.getter();
    uint64_t v149 = *(void *)(v149 + 8);
    ((void (*)(char *, uint64_t))v149)(v59, v156);
    char v61 = v150;
    static SymbolEffectOptions.default.getter();
    uint64_t v62 = (uint64_t)v146;
    uint64_t v63 = &v146[*(int *)(v165 + 36)];
    sub_100389ED8(&qword_10051FC78, (void (*)(uint64_t))&type metadata accessor for BounceSymbolEffect);
    uint64_t v64 = v139;
    swift_bridgeObjectRetain();
    dispatch thunk of SymbolEffect.configuration.getter();
    uint64_t v65 = sub_10000F214(&qword_10051FC38);
    uint64_t v67 = v151;
    uint64_t v66 = v152;
    (*(void (**)(char *, char *, uint64_t))(v151 + 16))(&v63[*(int *)(v65 + 36)], v61, v152);
    uint64_t v68 = &v63[*(int *)(v65 + 40)];
    *(void *)uint64_t v68 = v140;
    *((void *)v68 + 1) = v64;
    uint64_t v69 = v164;
    sub_10000FB74(v164, v62, &qword_10052BE08);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v61, v66);
    ((void (*)(char *, uint64_t))v149)(v60, v156);
    sub_10000FBD8(v69, &qword_10052BE08);
    sub_100389F20();
    uint64_t v70 = (uint64_t)v145;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8(v62, &qword_10052BE10);
    uint64_t v71 = v166;
    sub_10000FC34(v70, v166, &qword_10052BE18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v157 + 56))(v71, 0, 1, v158);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))((char *)&v138 - v39, 1, 1, v158);
  }
  uint64_t v72 = *(void *)(v168 + 8);
  if (v72)
  {
    uint64_t v169 = *(void *)v168;
    uint64_t v170 = v72;
    sub_1000317A0();
    swift_bridgeObjectRetain();
    uint64_t v73 = Text.init<A>(_:)();
    uint64_t v75 = v74;
    char v77 = v76 & 1;
    static Font.largeTitle.getter();
    double v79 = v153;
    uint64_t v78 = v154;
    uint64_t v80 = v155;
    (*(void (**)(char *, void, uint64_t))(v154 + 104))(v153, enum case for Font.Leading.tight(_:), v155);
    Font.leading(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
    uint64_t v81 = Text.font(_:)();
    uint64_t v83 = v82;
    char v85 = v84;
    swift_release();
    char v86 = v85 & 1;
    sub_100012FAC(v73, v75, v77);
    swift_bridgeObjectRelease();
    static Font.Weight.regular.getter();
    uint64_t v87 = Text.fontWeight(_:)();
    uint64_t v164 = v88;
    uint64_t v165 = v89;
    uint64_t v90 = v89;
    LODWORD(v158) = v91 & 1;
    sub_100012FAC(v81, v83, v86);
    swift_bridgeObjectRelease();
    uint64_t v92 = swift_getKeyPath();
    uint64_t v157 = static Color.white.getter();
    uint64_t v93 = (_OWORD *)swift_allocObject();
    long long v94 = *(_OWORD *)(v168 + 48);
    v93[3] = *(_OWORD *)(v168 + 32);
    v93[4] = v94;
    v93[5] = *(_OWORD *)(v168 + 64);
    long long v95 = *(_OWORD *)(v168 + 16);
    v93[1] = *(_OWORD *)v168;
    v93[2] = v95;
    sub_100389CE0(v168);
    uint64_t v96 = static Alignment.center.getter();
    uint64_t v98 = v97;
    LOBYTE(v73) = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    LOBYTE(v81) = v158;
    char v197 = v158;
    char v192 = 0;
    uint64_t v99 = v164;
    uint64_t v169 = v87;
    uint64_t v170 = v164;
    char v171 = v158;
    *(_DWORD *)uint64_t v172 = *(_DWORD *)v196;
    *(_DWORD *)&v172[3] = *(_DWORD *)&v196[3];
    uint64_t v173 = v90;
    uint64_t v174 = v92;
    char v175 = 1;
    *(_DWORD *)uint64_t v176 = *(_DWORD *)v195;
    *(_DWORD *)&v176[3] = *(_DWORD *)&v195[3];
    uint64_t v177 = v157;
    __int16 v178 = 256;
    __int16 v180 = v194;
    int v179 = *(_DWORD *)&v193[7];
    uint64_t v181 = sub_100389CD8;
    uint64_t v182 = v93;
    uint64_t v183 = v96;
    uint64_t v184 = v98;
    char v185 = v73;
    *(_DWORD *)&v186[3] = *(_DWORD *)&v193[3];
    *(_DWORD *)v186 = *(_DWORD *)v193;
    uint64_t v187 = v100;
    uint64_t v188 = v101;
    uint64_t v189 = v102;
    uint64_t v190 = v103;
    char v191 = 0;
    sub_10000F214(&qword_10052BE38);
    sub_10038A308(&qword_10052BE40, &qword_10052BE38, (void (*)(void))sub_100389D50);
    uint64_t v104 = v167;
    View.accessibilityIdentifier(_:)();
    sub_100012FAC(v87, v99, v81);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v105 = sub_10000F214(&qword_10052BE28);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
  }
  else
  {
    uint64_t v106 = sub_10000F214(&qword_10052BE28);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v167, 1, 1, v106);
  }
  uint64_t v107 = *(void *)(v168 + 24);
  if (v107)
  {
    uint64_t v169 = *(void *)(v168 + 16);
    uint64_t v170 = v107;
    sub_1000317A0();
    swift_bridgeObjectRetain();
    uint64_t v108 = Text.init<A>(_:)();
    uint64_t v110 = v109;
    char v112 = v111 & 1;
    static Font.title3.getter();
    uint64_t v113 = Text.font(_:)();
    uint64_t v115 = v114;
    char v117 = v116;
    uint64_t v119 = v118;
    swift_release();
    char v120 = v117 & 1;
    sub_100012FAC(v108, v110, v112);
    swift_bridgeObjectRelease();
    uint64_t v121 = swift_getKeyPath();
    static Color.white.getter();
    uint64_t v122 = Color.opacity(_:)();
    swift_release();
    LOBYTE(v108) = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v169 = v113;
    uint64_t v170 = v115;
    char v171 = v117 & 1;
    uint64_t v173 = v119;
    uint64_t v174 = v121;
    char v175 = 1;
    uint64_t v177 = v122;
    LOBYTE(v178) = v108;
    uint64_t v181 = v123;
    uint64_t v182 = v124;
    uint64_t v183 = v125;
    uint64_t v184 = v126;
    char v185 = 0;
    sub_10000F214(&qword_10052A1F8);
    sub_10038A308(&qword_10052A200, &qword_10052A1F8, (void (*)(void))sub_100342794);
    uint64_t v127 = (uint64_t)v161;
    View.accessibilityIdentifier(_:)();
    sub_100012FAC(v113, v115, v120);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v128 = sub_10000F214(&qword_10052A1E8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v127, 0, 1, v128);
  }
  else
  {
    uint64_t v129 = sub_10000F214(&qword_10052A1E8);
    uint64_t v127 = (uint64_t)v161;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v161, 1, 1, v129);
  }
  uint64_t v130 = v166;
  uint64_t v131 = v159;
  sub_10000FB74(v166, v159, &qword_10052BE20);
  uint64_t v132 = v167;
  uint64_t v133 = v160;
  sub_10000FB74(v167, v160, &qword_10052BDE8);
  uint64_t v134 = v163;
  sub_10000FB74(v127, v163, &qword_10052A1E0);
  uint64_t v135 = v162;
  sub_10000FB74(v131, v162, &qword_10052BE20);
  uint64_t v136 = sub_10000F214(&qword_10052BE30);
  sub_10000FB74(v133, v135 + *(int *)(v136 + 48), &qword_10052BDE8);
  sub_10000FB74(v134, v135 + *(int *)(v136 + 64), &qword_10052A1E0);
  sub_10000FBD8(v127, &qword_10052A1E0);
  sub_10000FBD8(v132, &qword_10052BDE8);
  sub_10000FBD8(v130, &qword_10052BE20);
  sub_10000FBD8(v134, &qword_10052A1E0);
  sub_10000FBD8(v133, &qword_10052BDE8);
  return sub_10000FBD8(v131, &qword_10052BE20);
}

uint64_t sub_100388DC0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for GeometryProxy();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = static Color.clear.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  long long v12 = a2[3];
  *((_OWORD *)v11 + 3) = a2[2];
  *((_OWORD *)v11 + 4) = v12;
  *((_OWORD *)v11 + 5) = a2[4];
  long long v13 = a2[1];
  *((_OWORD *)v11 + 1) = *a2;
  *((_OWORD *)v11 + 2) = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a3 = v9;
  a3[1] = (uint64_t)sub_10038A1B8;
  a3[2] = (uint64_t)v11;
  a3[3] = 0;
  a3[4] = 0;
  return sub_100389CE0((uint64_t)a2);
}

uint64_t sub_100388F28()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100388F80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v53 = a2;
  uint64_t v2 = type metadata accessor for BorderedButtonStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  uint64_t v52 = v3;
  __chkstk_darwin(v2);
  uint64_t v50 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for ButtonBorderShape();
  uint64_t v46 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v43 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052BD68);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052BD70);
  __chkstk_darwin(v10 - 8);
  long long v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10052BD78);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10052BD80);
  uint64_t v47 = *(void *)(v16 - 8);
  uint64_t v48 = v16;
  __chkstk_darwin(v16);
  uint64_t v42 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10052BD88);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v44 = (uint64_t)&v42 - v23;
  swift_retain();
  sub_10000F214(&qword_10052BD90);
  sub_10038987C();
  Button.init(action:label:)();
  sub_100013AA8(&qword_10052BDB0, &qword_10052BD68);
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v24 = v43;
  static ButtonBorderShape.capsule.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = (uint64_t *)&v15[*(int *)(v13 + 36)];
  uint64_t v27 = sub_10000F214(&qword_10052BDB8);
  uint64_t v28 = v46;
  uint64_t v29 = v24;
  uint64_t v30 = v24;
  uint64_t v31 = v49;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v26 + *(int *)(v27 + 28), v29, v49);
  *uint64_t v26 = KeyPath;
  sub_10000FB74((uint64_t)v12, (uint64_t)v15, &qword_10052BD70);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v31);
  sub_10000FBD8((uint64_t)v12, &qword_10052BD70);
  uint64_t v32 = v50;
  BorderedButtonStyle.init()();
  sub_100389AF8();
  sub_100389ED8(&qword_10052BDD8, (void (*)(uint64_t))&type metadata accessor for BorderedButtonStyle);
  uint64_t v33 = v42;
  uint64_t v34 = v51;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v34);
  sub_10000FBD8((uint64_t)v15, &qword_10052BD78);
  LODWORD(v15) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v21, v33, v48);
  *(_DWORD *)&v21[*(int *)(v19 + 44)] = v15;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
  uint64_t v37 = v44;
  sub_10000FC34((uint64_t)v21, v44, &qword_10052BD88);
  sub_10000FB74(v37, (uint64_t)v21, &qword_10052BD88);
  uint64_t v38 = v53;
  *uint64_t v53 = 0;
  *((unsigned char *)v38 + 8) = 1;
  uint64_t v39 = v38;
  uint64_t v40 = sub_10000F214(&qword_10052BDE0);
  sub_10000FB74((uint64_t)v21, (uint64_t)v39 + *(int *)(v40 + 48), &qword_10052BD88);
  sub_10000FBD8(v37, &qword_10052BD88);
  return sub_10000FBD8((uint64_t)v21, &qword_10052BD88);
}

uint64_t sub_100389584@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title3.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_100012FAC(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v12 = Text.fontWeight(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  sub_100012FAC(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v7) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  LOBYTE(v9) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t result = static Color.white.getter();
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(unsigned char *)(a1 + 16) = v16 & 1;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v21;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v27;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v31;
  *(void *)(a1 + 128) = v33;
  *(void *)(a1 + 136) = v35;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = result;
  return result;
}

uint64_t sub_100389780@<X0>(uint64_t a1@<X8>)
{
  return sub_100387010(a1);
}

uint64_t sub_1003897C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100387574(*(void *)(v1 + 16), a1);
}

uint64_t sub_1003897CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003897F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accentColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100389824()
{
  return EnvironmentValues.accentColor.setter();
}

uint64_t sub_100389850()
{
  return EnvironmentValues.accentColor.setter();
}

unint64_t sub_10038987C()
{
  unint64_t result = qword_10052BD98;
  if (!qword_10052BD98)
  {
    sub_10000F69C(&qword_10052BD90);
    sub_10038A308(&qword_10052BDA0, &qword_10052BDA8, (void (*)(void))sub_100389948);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BD98);
  }
  return result;
}

unint64_t sub_100389948()
{
  unint64_t result = qword_100518D48;
  if (!qword_100518D48)
  {
    sub_10000F69C(&qword_100518D50);
    sub_10003199C((unint64_t *)&qword_100518CF8, &qword_100518CF0, &qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D48);
  }
  return result;
}

uint64_t sub_1003899E4()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_100389A08()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_100389A2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ButtonBorderShape();
  double v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues._buttonBorderShape.setter();
}

unint64_t sub_100389AF8()
{
  unint64_t result = qword_10052BDC0;
  if (!qword_10052BDC0)
  {
    sub_10000F69C(&qword_10052BD78);
    sub_100389B98();
    sub_100013AA8(&qword_10052BDD0, &qword_10052BDB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BDC0);
  }
  return result;
}

unint64_t sub_100389B98()
{
  unint64_t result = qword_10052BDC8;
  if (!qword_10052BDC8)
  {
    sub_10000F69C(&qword_10052BD70);
    sub_100013AA8(&qword_10052BDB0, &qword_10052BD68);
    sub_100389ED8((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BDC8);
  }
  return result;
}

uint64_t sub_100389C78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100389CD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100388DC0(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t sub_100389CE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10000F724(v2);
  swift_retain();
  return a1;
}

unint64_t sub_100389D50()
{
  unint64_t result = qword_10052BE48;
  if (!qword_10052BE48)
  {
    sub_10000F69C(&qword_10052BE50);
    sub_10038A308(&qword_10052BE58, &qword_10052BE60, (void (*)(void))sub_100342794);
    sub_100013AA8(&qword_10052BE68, &qword_10052BE70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BE48);
  }
  return result;
}

uint64_t sub_100389E1C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100389E40(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051ED38);
  __chkstk_darwin(v2 - 8);
  sub_10000FB74(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10051ED38);
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t sub_100389ED8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100389F20()
{
  unint64_t result = qword_10052BE78;
  if (!qword_10052BE78)
  {
    sub_10000F69C(&qword_10052BE10);
    sub_10038A308(&qword_10052BE80, &qword_10052BE08, (void (*)(void))sub_100389FEC);
    sub_100013AA8(&qword_10051FC88, &qword_10051FC38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BE78);
  }
  return result;
}

uint64_t sub_100389FEC()
{
  return sub_10038A308(&qword_10052BE88, &qword_10052BE00, (void (*)(void))sub_10038A01C);
}

unint64_t sub_10038A01C()
{
  unint64_t result = qword_10052BE90;
  if (!qword_10052BE90)
  {
    sub_10000F69C(&qword_10052BDF8);
    sub_100061FC8();
    sub_100013AA8(&qword_10052BE98, &qword_10052BDF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BE90);
  }
  return result;
}

uint64_t sub_10038A0BC()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 64)) {
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 96) & ~v3), v1);

  return swift_deallocObject();
}

uint64_t sub_10038A1B8()
{
  type metadata accessor for GeometryProxy();

  return sub_100388F28();
}

uint64_t sub_10038A21C()
{
  return sub_10038A308(&qword_10052BEA0, &qword_10052BCE8, (void (*)(void))sub_10038A260);
}

unint64_t sub_10038A260()
{
  unint64_t result = qword_10052BEA8;
  if (!qword_10052BEA8)
  {
    sub_10000F69C(&qword_10052BCE0);
    sub_10038A308(&qword_10052BEB0, &qword_100527238, (void (*)(void))sub_10038A384);
    sub_100013F50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BEA8);
  }
  return result;
}

uint64_t sub_10038A308(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10038A384()
{
  unint64_t result = qword_10052BEB8;
  if (!qword_10052BEB8)
  {
    sub_10000F69C(&qword_100527230);
    sub_10000F69C(&qword_10052BCD0);
    sub_100013AA8(&qword_10052BD00, &qword_10052BCD0);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052BEB8);
  }
  return result;
}

void *sub_10038A484(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for BundleClassification.ClassificationType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 3, v10))
      {
        uint64_t v12 = type metadata accessor for VisualLookupClassifier.SearchState();
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 3, v10);
      }
      uint64_t v13 = sub_10000F214(&qword_1005297C0);
      *(void *)((char *)a1 + *(int *)(v13 + 48)) = *(void *)((char *)a2 + *(int *)(v13 + 48));
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_12:
        uint64_t v14 = *(int *)(a3 + 24);
        *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
        *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
        return a1;
      }
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  uint64_t v9 = *a2;
  *a1 = *a2;
  a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for BundleClassification.ClassificationType(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052BFC8);
}

uint64_t sub_10038A6B0(uint64_t a1)
{
  type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result != 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(void *)(v3 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 3, v3)) {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    }
    sub_10000F214(&qword_1005297C0);
  }

  return swift_bridgeObjectRelease();
}

void *sub_10038A7B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BundleClassification.ClassificationType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 3, v8))
    {
      uint64_t v10 = type metadata accessor for VisualLookupClassifier.SearchState();
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 3, v8);
    }
    uint64_t v11 = sub_10000F214(&qword_1005297C0);
    *(void *)((char *)a1 + *(int *)(v11 + 48)) = *(void *)((char *)a2 + *(int *)(v11 + 48));
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_10:
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *sub_10038A974(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10038EE10((uint64_t)a1, type metadata accessor for BundleClassification.ClassificationType);
    uint64_t v6 = type metadata accessor for BundleClassification.ClassificationType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 3, v8))
      {
        uint64_t v10 = type metadata accessor for VisualLookupClassifier.SearchState();
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 3, v8);
      }
      uint64_t v11 = sub_10000F214(&qword_1005297C0);
      *(void *)((char *)a1 + *(int *)(v11 + 48)) = *(void *)((char *)a2 + *(int *)(v11 + 48));
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_11:
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *sub_10038AB58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BundleClassification.ClassificationType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      uint64_t v9 = type metadata accessor for VisualLookupClassifier.SearchState();
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
    uint64_t v10 = sub_10000F214(&qword_1005297C0);
    *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  return a1;
}

char *sub_10038ACF0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10038EE10((uint64_t)a1, type metadata accessor for BundleClassification.ClassificationType);
    uint64_t v6 = type metadata accessor for BundleClassification.ClassificationType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
      {
        uint64_t v9 = type metadata accessor for VisualLookupClassifier.SearchState();
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
      }
      uint64_t v10 = sub_10000F214(&qword_1005297C0);
      *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  return a1;
}

uint64_t sub_10038AEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10038AEC0);
}

uint64_t sub_10038AEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BundleClassification.ClassificationType(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10038AF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10038AF40);
}

uint64_t sub_10038AF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BundleClassification.ClassificationType(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BundleClassification(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052BF18);
}

uint64_t sub_10038AFD0()
{
  uint64_t result = type metadata accessor for BundleClassification.ClassificationType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10038B06C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 3, v9))
      {
        uint64_t v11 = type metadata accessor for VisualLookupClassifier.SearchState();
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 3, v9);
      }
      uint64_t v12 = sub_10000F214(&qword_1005297C0);
      *(uint64_t *)((char *)a1 + *(int *)(v12 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v12 + 48));
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_10038B24C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result != 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(void *)(v3 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 3, v3)) {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    }
    sub_10000F214(&qword_1005297C0);
  }

  return swift_bridgeObjectRelease();
}

void *sub_10038B344(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      uint64_t v9 = type metadata accessor for VisualLookupClassifier.SearchState();
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
    uint64_t v10 = sub_10000F214(&qword_1005297C0);
    *(void *)((char *)a1 + *(int *)(v10 + 48)) = *(void *)((char *)a2 + *(int *)(v10 + 48));
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_10038B4E0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10038EE10((uint64_t)a1, type metadata accessor for BundleClassification.ClassificationType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
      {
        uint64_t v9 = type metadata accessor for VisualLookupClassifier.SearchState();
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
      }
      uint64_t v10 = sub_10000F214(&qword_1005297C0);
      *(void *)((char *)a1 + *(int *)(v10 + 48)) = *(void *)((char *)a2 + *(int *)(v10 + 48));
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10038B6A0(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
    {
      uint64_t v8 = type metadata accessor for VisualLookupClassifier.SearchState();
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
    }
    uint64_t v9 = sub_10000F214(&qword_1005297C0);
    *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_10038B818(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10038EE10((uint64_t)a1, type metadata accessor for BundleClassification.ClassificationType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
      {
        uint64_t v8 = type metadata accessor for VisualLookupClassifier.SearchState();
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
      }
      uint64_t v9 = sub_10000F214(&qword_1005297C0);
      *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10038B9B4()
{
  v2[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for VisualLookupClassifier.SearchState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

BOOL sub_10038BA64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10038E900((uint64_t)v15);
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  sub_10000F3B0(v15, v16);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, v7, v8);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v15);
  if ((v9 & 1) == 0) {
    return 0;
  }
  sub_10019D408((uint64_t)v6);
  sub_1003FEC34(v15);
  uint64_t v10 = v16;
  uint64_t v11 = v17;
  sub_10000F3B0(v15, v16);
  double v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v15);
  sub_10038EE10((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return *(double *)(v2 + *(int *)(type metadata accessor for BundleClassification(0) + 24)) + 0.2 <= v12;
}

uint64_t sub_10038BBD4(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  type metadata accessor for CVDetection();
  v3[15] = swift_task_alloc();
  type metadata accessor for BundleClassification.ClassificationType(0);
  v3[16] = swift_task_alloc();
  v3[17] = type metadata accessor for BundleClassification(0);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_10038BCD4, 0, 0);
}

uint64_t sub_10038BCD4()
{
  if (sub_10038BA64(v0[13]))
  {
    sub_10038E900((uint64_t)(v0 + 2));
    uint64_t v1 = v0[5];
    uint64_t v2 = v0[6];
    sub_10000F3B0(v0 + 2, v1);
    char v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 16) + **(int **)(v2 + 16));
    uint64_t v3 = (void *)swift_task_alloc();
    v0[20] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10038BE80;
    uint64_t v4 = v0[18];
    uint64_t v5 = v0[13];
    uint64_t v6 = v0[14];
    return v9(v4, v5, v6, v1, v2);
  }
  else
  {
    sub_10038F2D8(v0[14], v0[12], type metadata accessor for BundleClassification);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10038BE80()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10038C054;
  }
  else {
    uint64_t v2 = sub_10038BF94;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10038BF94()
{
  sub_10038F394(v0[18], v0[19], type metadata accessor for BundleClassification);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  sub_10038F394(v0[19], v0[12], type metadata accessor for BundleClassification);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10038C054()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = (void *)v0[16];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[15];
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  sub_10038C1E0(v2);
  sub_10019D408(v4);
  sub_1003FEC34(v0 + 7);
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  sub_10000F3B0(v0 + 7, v5);
  double v7 = (*(double (**)(uint64_t, uint64_t))(v6 + 88))(v5, v6);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 7));
  swift_errorRelease();
  sub_10038EE10(v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10038F394((uint64_t)v2, v1, type metadata accessor for BundleClassification.ClassificationType);
  *(void *)(v1 + *(int *)(v3 + 20)) = 0;
  *(double *)(v1 + *(int *)(v3 + 24)) = v7;
  sub_10038F394(v0[19], v0[12], type metadata accessor for BundleClassification);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10038C1E0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10038F2D8(v2, (uint64_t)v6, type metadata accessor for BundleClassification.ClassificationType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v7 = sub_10000F214(&qword_1005297C0);
      swift_bridgeObjectRelease();
      uint64_t v8 = *(int *)(v7 + 48);
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 3, v9);
      *(void *)((char *)a1 + v8) = _swiftEmptyArrayStorage;
      swift_storeEnumTagMultiPayload();
      uint64_t result = sub_10038EE10((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      break;
    case 2u:
    case 3u:
    case 4u:
      goto LABEL_4;
    default:
      swift_bridgeObjectRelease();
      *a1 = _swiftEmptyArrayStorage;
LABEL_4:
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
  }
  return result;
}

void sub_10038C3B4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v27 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v10 - 8);
  double v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v15 = (char *)&v26 - v14;
  uint64_t v16 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10038F2D8(v1, (uint64_t)v18, type metadata accessor for BundleClassification.ClassificationType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v20 = *(uint64_t *)((char *)v18 + *(int *)(sub_10000F214(&qword_1005297C0) + 48));
      sub_10038F394((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      Hasher._combine(_:)(4uLL);
      sub_10038F2D8((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 3, v6))
      {
        case 1u:
          Swift::UInt v22 = 0;
          goto LABEL_12;
        case 2u:
          Swift::UInt v22 = 2;
          goto LABEL_12;
        case 3u:
          Swift::UInt v22 = 3;
LABEL_12:
          Hasher._combine(_:)(v22);
          break;
        default:
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
          Hasher._combine(_:)(1uLL);
          sub_10038E8B8((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
          dispatch thunk of Hashable.hash(into:)();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          break;
      }
      Hasher._combine(_:)(*(void *)(v20 + 16));
      uint64_t v23 = *(void *)(v20 + 16);
      if (v23)
      {
        uint64_t v24 = v20 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
        uint64_t v25 = *(void *)(v27 + 72);
        do
        {
          sub_10038F2D8(v24, (uint64_t)v5, type metadata accessor for VisualIntelligenceLookupResult);
          sub_1003E4DFC(a1);
          sub_10038EE10((uint64_t)v5, type metadata accessor for VisualIntelligenceLookupResult);
          v24 += v25;
          --v23;
        }
        while (v23);
      }
      sub_10038EE10((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      goto LABEL_17;
    case 2u:
      Swift::UInt v21 = 1;
      goto LABEL_8;
    case 3u:
      Swift::UInt v21 = 2;
      goto LABEL_8;
    case 4u:
      Swift::UInt v21 = 3;
LABEL_8:
      Hasher._combine(_:)(v21);
      break;
    default:
      uint64_t v19 = *v18;
      Hasher._combine(_:)(0);
      sub_10032D260(a1, v19);
LABEL_17:
      swift_bridgeObjectRelease();
      break;
  }
}

uint64_t sub_10038C840(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052C0D0);
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2);
  uint64_t v48 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v46);
  uint64_t v47 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10052C0D8);
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10052C0E0);
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052C0E8);
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  __chkstk_darwin(v10);
  double v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10052C0F0);
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  __chkstk_darwin(v13);
  char v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000F214(&qword_10052C0F8);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v51 = v19;
  uint64_t v52 = v20;
  __chkstk_darwin(v19);
  Swift::UInt v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10038F3FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10038F2D8(v54, (uint64_t)v18, type metadata accessor for BundleClassification.ClassificationType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v27 = *(uint64_t *)((char *)v18 + *(int *)(sub_10000F214(&qword_1005297C0) + 48));
      uint64_t v28 = v47;
      sub_10038F394((uint64_t)v18, v47, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      LOBYTE(v56) = 4;
      sub_10038F450();
      uint64_t v29 = v48;
      uint64_t v30 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v56) = 0;
      sub_10038E8B8(&qword_10052C100, (void (*)(uint64_t))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v31 = v50;
      uint64_t v32 = v53;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v32)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v31);
        sub_10038EE10(v28, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v22, v30);
      }
      else
      {
        uint64_t v56 = v27;
        char v55 = 1;
        sub_10000F214(&qword_10052C080);
        sub_10038F648(&qword_10052C108, &qword_10052C110);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v31);
        sub_10038EE10(v28, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v30);
        return swift_bridgeObjectRelease();
      }
    case 2u:
      LOBYTE(v56) = 1;
      sub_10038F54C();
      uint64_t v33 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v35 = v37;
      uint64_t v34 = v38;
      goto LABEL_8;
    case 3u:
      LOBYTE(v56) = 2;
      sub_10038F4F8();
      uint64_t v33 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
      goto LABEL_9;
    case 4u:
      LOBYTE(v56) = 3;
      sub_10038F4A4();
      double v12 = v43;
      uint64_t v33 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v35 = v44;
      uint64_t v34 = v45;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
LABEL_9:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v22, v33);
      break;
    default:
      uint64_t v23 = *v18;
      LOBYTE(v56) = 0;
      sub_10038F5A0();
      uint64_t v24 = v51;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v56 = v23;
      sub_10000F214(&qword_10052C0B8);
      sub_10038F6DC(&qword_10052C118, (void (*)(void))sub_10038F74C);
      uint64_t v25 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v25);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v24);
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t sub_10038D084@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = sub_10000F214(&qword_10052C038);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  uint64_t v60 = v4;
  __chkstk_darwin(v3);
  uint64_t v67 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052C040);
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  __chkstk_darwin(v6);
  uint64_t v66 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_10000F214(&qword_10052C048);
  uint64_t v56 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v62 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052C050);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  char v61 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10052C058);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10052C060);
  uint64_t v64 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v48 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v48 - v23;
  uint64_t v25 = a1[3];
  uint64_t v68 = a1;
  sub_10000F3B0(a1, v25);
  sub_10038F3FC();
  uint64_t v26 = (uint64_t)v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v68);
  }
  uint64_t v48 = v21;
  uint64_t v28 = v65;
  uint64_t v27 = v66;
  uint64_t v49 = v18;
  uint64_t v29 = v67;
  uint64_t v69 = v24;
  uint64_t v50 = v16;
  uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v31 = (char *)v30;
  uint64_t v32 = v13;
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = v37;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v38 = v50;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for DecodingError.typeMismatch(_:), v36);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v13);
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v68);
  }
  switch(*(unsigned char *)(v30 + 32))
  {
    case 1:
      char v72 = 1;
      sub_10038F54C();
      uint64_t v39 = v61;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v13);
      uint64_t v40 = (uint64_t)v69;
      goto LABEL_9;
    case 2:
      char v73 = 2;
      sub_10038F4F8();
      uint64_t v41 = v62;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v51);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v13);
      uint64_t v40 = (uint64_t)v69;
      goto LABEL_9;
    case 3:
      char v74 = 3;
      sub_10038F4A4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v13);
      uint64_t v40 = (uint64_t)v69;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    case 4:
      char v77 = 4;
      sub_10038F450();
      uint64_t v44 = v29;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v66 = v31;
      type metadata accessor for VisualLookupClassifier.SearchState();
      char v76 = 0;
      sub_10038E8B8(&qword_10052C078, (void (*)(uint64_t))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v45 = (uint64_t)v49;
      uint64_t v46 = v59;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      sub_10000F214(&qword_1005297C0);
      sub_10000F214(&qword_10052C080);
      char v75 = 1;
      sub_10038F648(&qword_10052C088, &qword_10052C090);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v47 = v64;
      (*(void (**)(char *, uint64_t))(v60 + 8))(v44, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v32);
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = v45;
      goto LABEL_13;
    default:
      char v71 = 0;
      sub_10038F5A0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10000F214(&qword_10052C0B8);
      sub_10038F6DC(&qword_10052C0C0, (void (*)(void))sub_10038F5F4);
      uint64_t v33 = v55;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v28, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v32);
      uint64_t v34 = v48;
      *uint64_t v48 = v70;
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = (uint64_t)v34;
LABEL_13:
      uint64_t v40 = (uint64_t)v69;
      sub_10038F394(v35, (uint64_t)v69, type metadata accessor for BundleClassification.ClassificationType);
LABEL_10:
      uint64_t v42 = (uint64_t)v68;
      sub_10038F394(v40, v63, type metadata accessor for BundleClassification.ClassificationType);
      uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0(v42);
      break;
  }
  return result;
}

uint64_t sub_10038DB88(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10052C028);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_10038F340();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for BundleClassification.ClassificationType(0);
  sub_10038E8B8(&qword_10052C030, (void (*)(uint64_t))type metadata accessor for BundleClassification.ClassificationType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for BundleClassification(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_10038DD6C()
{
  Hasher.init(_seed:)();
  sub_10038C3B4((uint64_t)v6);
  uint64_t v1 = type metadata accessor for BundleClassification(0);
  uint64_t v2 = v1;
  if ((*(void *)(v0 + *(int *)(v1 + 20)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + *(int *)(v1 + 20));
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)(v0 + *(int *)(v2 + 24)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v0 + *(int *)(v2 + 24));
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_10038DDF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v4);
  uint64_t v23 = (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052C010);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BundleClassification(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10038F340();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = v21;
  uint64_t v13 = (uint64_t)v11;
  char v26 = 0;
  sub_10038E8B8(&qword_10052C020, (void (*)(uint64_t))type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v14 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10038F394(v23, v13, type metadata accessor for BundleClassification.ClassificationType);
  char v25 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v13 + *(int *)(v9 + 20)) = v15;
  char v24 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v14);
  *(void *)(v13 + *(int *)(v9 + 24)) = v17;
  sub_10038F2D8(v13, v20, type metadata accessor for BundleClassification);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return sub_10038EE10(v13, type metadata accessor for BundleClassification);
}

uint64_t sub_10038E14C()
{
  uint64_t result = 0x757365527370616DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E657665;
      break;
    case 2:
      uint64_t result = 0x756F6C4164616572;
      break;
    case 3:
      uint64_t result = 0x7A6972616D6D7573;
      break;
    case 4:
      uint64_t result = 0x796669746E656469;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10038E208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003901F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10038E230(uint64_t a1)
{
  unint64_t v2 = sub_10038F3FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E26C(uint64_t a1)
{
  unint64_t v2 = sub_10038F3FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10038E2A8(uint64_t a1)
{
  unint64_t v2 = sub_10038F54C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E2E4(uint64_t a1)
{
  unint64_t v2 = sub_10038F54C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10038E320(uint64_t a1)
{
  unint64_t v2 = sub_10038F450();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E35C(uint64_t a1)
{
  unint64_t v2 = sub_10038F450();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10038E398(uint64_t a1)
{
  unint64_t v2 = sub_10038F5A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E3D4(uint64_t a1)
{
  unint64_t v2 = sub_10038F5A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10038E410(uint64_t a1)
{
  unint64_t v2 = sub_10038F4F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E44C(uint64_t a1)
{
  unint64_t v2 = sub_10038F4F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10038E488(uint64_t a1)
{
  unint64_t v2 = sub_10038F4A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E4C4(uint64_t a1)
{
  unint64_t v2 = sub_10038F4A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10038E500()
{
  Hasher.init(_seed:)();
  sub_10038C3B4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10038E544()
{
  Hasher.init(_seed:)();
  sub_10038C3B4((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10038E580@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10038D084(a1, a2);
}

uint64_t sub_10038E598(void *a1)
{
  return sub_10038C840(a1);
}

uint64_t sub_10038E5B0()
{
  return sub_10038E8B8(&qword_10052C000, (void (*)(uint64_t))type metadata accessor for BundleClassification.ClassificationType);
}

uint64_t sub_10038E5F8()
{
  uint64_t v1 = 0x65726F6373;
  if (*v0 != 1) {
    uint64_t v1 = 0x6D617473656D6974;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_10038E64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100390430(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10038E674(uint64_t a1)
{
  unint64_t v2 = sub_10038F340();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10038E6B0(uint64_t a1)
{
  unint64_t v2 = sub_10038F340();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10038E6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (sub_10038C3B0() & 1) != 0
      && *(double *)(a1 + *(int *)(a3 + 20)) == *(double *)(a2 + *(int *)(a3 + 20))
      && *(double *)(a1 + *(int *)(a3 + 24)) == *(double *)(a2 + *(int *)(a3 + 24));
}

void sub_10038E758(uint64_t a1, uint64_t a2)
{
  sub_10038C3B4(a1);
  if ((*(void *)(v2 + *(int *)(a2 + 20)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v2 + *(int *)(a2 + 20));
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)(v2 + *(int *)(a2 + 24)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v2 + *(int *)(a2 + 24));
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int sub_10038E7B8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_10038C3B4((uint64_t)v7);
  if ((*(void *)(v2 + *(int *)(a2 + 20)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v2 + *(int *)(a2 + 20));
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)(v2 + *(int *)(a2 + 24)) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v2 + *(int *)(a2 + 24));
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_10038E834@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10038DDF4(a1, a2);
}

uint64_t sub_10038E84C(void *a1)
{
  return sub_10038DB88(a1);
}

double sub_10038E864(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 24));
}

uint64_t sub_10038E870()
{
  return sub_10038E8B8(&qword_10052C008, (void (*)(uint64_t))type metadata accessor for BundleClassification);
}

uint64_t sub_10038E8B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10038E900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10038F2D8(v2, (uint64_t)v6, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      sub_10000F214(&qword_1005297C0);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24) = &type metadata for VisualLookupClassifier;
      *(void *)(a1 + 32) = &off_1004F2D00;
      return sub_10038EE10((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
    case 2:
      uint64_t v8 = &type metadata for EventClassifier;
      uint64_t v9 = &off_1004E6FC8;
      goto LABEL_7;
    case 3:
      uint64_t v8 = &type metadata for ReadAloudClassifier;
      uint64_t v9 = (char **)&off_1004EC708;
      goto LABEL_7;
    case 4:
      uint64_t v8 = &type metadata for SummarizeClassifier;
      uint64_t v9 = (char **)&off_1004E7000;
      goto LABEL_7;
    default:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = &type metadata for MapsResultsClassifier;
      uint64_t v9 = (char **)&off_1004E8000;
LABEL_7:
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v9;
      return result;
  }
}

void *sub_10038EA84()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10038F2D8(v1, (uint64_t)v10, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v11 = &off_1004E4B38;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v19 = *(void *)&v10[*(int *)(sub_10000F214(&qword_1005297C0) + 48)];
      sub_10038F394((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 2, 3, v20);
      char v21 = sub_1002C6A78((uint64_t)v7, (uint64_t)v4);
      sub_10038EE10((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      if (v21)
      {
        uint64_t v22 = *(void *)(v19 + 16);
        swift_bridgeObjectRelease();
        if (v22)
        {
          sub_10038EE10((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          return &off_1004E4C10;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_10038EE10((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      return _swiftEmptyArrayStorage;
    case 2u:
      return v11;
    case 3u:
      return &off_1004E4B80;
    case 4u:
      return &off_1004E4BC8;
    default:
      uint64_t v12 = *(void **)v10;
      uint64_t v13 = *(void *)(*(void *)v10 + 16);
      if (v13)
      {
        uint64_t v14 = (void *)v12[4];
        uint64_t v15 = v12[5];
        uint64_t v16 = (void *)v12[6];
        swift_bridgeObjectRetain();
        id v17 = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v13 == 1)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = v16;
        }
        else
        {
          uint64_t v25 = 0x203A656279614DLL;
          unint64_t v26 = 0xE700000000000000;
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = v15;
          v23._unint64_t object = v16;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          uint64_t v15 = v25;
          uint64_t v18 = (void *)v26;
        }
        sub_10000F214(&qword_10051A170);
        uint64_t v11 = (_UNKNOWN **)swift_allocObject();
        *((_OWORD *)v11 + 1) = xmmword_10043D4F0;
        v11[4] = (_UNKNOWN *)v15;
        v11[5] = v18;
        v11[6] = 0;
        v11[7] = 0;
        *((unsigned char *)v11 + 64) = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        return &off_1004E4AF0;
      }
      return v11;
  }
}

void *sub_10038EDE8(uint64_t a1)
{
  if (*(double *)(v1 + *(int *)(a1 + 20)) <= 0.0) {
    return _swiftEmptyArrayStorage;
  }
  else {
    return sub_10038EA84();
  }
}

uint64_t sub_10038EE10(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10038EE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v25 - v11);
  uint64_t v13 = sub_10000F214((uint64_t *)&unk_1005255A0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = (uint64_t *)&v15[*(int *)(v16 + 56)];
  sub_10038F2D8(a1, (uint64_t)v15, type metadata accessor for BundleClassification.ClassificationType);
  sub_10038F2D8(a2, (uint64_t)v17, type metadata accessor for BundleClassification.ClassificationType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10038F2D8((uint64_t)v15, (uint64_t)v9, type metadata accessor for BundleClassification.ClassificationType);
      uint64_t v20 = *(int *)(sub_10000F214(&qword_1005297C0) + 48);
      uint64_t v21 = *(void *)&v9[v20];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        swift_bridgeObjectRelease();
        sub_10038EE10((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        goto LABEL_14;
      }
      uint64_t v22 = *(uint64_t *)((char *)v17 + v20);
      sub_10038F394((uint64_t)v17, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      char v23 = sub_1002C6A78((uint64_t)v9, (uint64_t)v6);
      sub_10038EE10((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      if (v23)
      {
        char v19 = sub_1003E2274(v21, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10038EE10((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        goto LABEL_18;
      }
      sub_10038EE10((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10038EE10((uint64_t)v15, type metadata accessor for BundleClassification.ClassificationType);
      goto LABEL_15;
    case 2u:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_14;
      }
      goto LABEL_9;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_14;
      }
      goto LABEL_9;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_14;
      }
LABEL_9:
      sub_10038EE10((uint64_t)v15, type metadata accessor for BundleClassification.ClassificationType);
      char v19 = 1;
      break;
    default:
      sub_10038F2D8((uint64_t)v15, (uint64_t)v12, type metadata accessor for BundleClassification.ClassificationType);
      uint64_t v18 = *v12;
      if (swift_getEnumCaseMultiPayload())
      {
        swift_bridgeObjectRelease();
LABEL_14:
        sub_10038F278((uint64_t)v15);
LABEL_15:
        char v19 = 0;
      }
      else
      {
        char v19 = sub_1003E1FA0(v18, *v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_18:
        sub_10038EE10((uint64_t)v15, type metadata accessor for BundleClassification.ClassificationType);
      }
      break;
  }
  return v19 & 1;
}

uint64_t sub_10038F278(uint64_t a1)
{
  uint64_t v2 = sub_10000F214((uint64_t *)&unk_1005255A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10038F2D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10038F340()
{
  unint64_t result = qword_10052C018;
  if (!qword_10052C018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C018);
  }
  return result;
}

uint64_t sub_10038F394(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10038F3FC()
{
  unint64_t result = qword_10052C068;
  if (!qword_10052C068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C068);
  }
  return result;
}

unint64_t sub_10038F450()
{
  unint64_t result = qword_10052C070;
  if (!qword_10052C070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C070);
  }
  return result;
}

unint64_t sub_10038F4A4()
{
  unint64_t result = qword_10052C098;
  if (!qword_10052C098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C098);
  }
  return result;
}

unint64_t sub_10038F4F8()
{
  unint64_t result = qword_10052C0A0;
  if (!qword_10052C0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C0A0);
  }
  return result;
}

unint64_t sub_10038F54C()
{
  unint64_t result = qword_10052C0A8;
  if (!qword_10052C0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C0A8);
  }
  return result;
}

unint64_t sub_10038F5A0()
{
  unint64_t result = qword_10052C0B0;
  if (!qword_10052C0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C0B0);
  }
  return result;
}

unint64_t sub_10038F5F4()
{
  unint64_t result = qword_10052C0C8;
  if (!qword_10052C0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C0C8);
  }
  return result;
}

uint64_t sub_10038F648(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10052C080);
    sub_10038E8B8(a2, (void (*)(uint64_t))type metadata accessor for VisualIntelligenceLookupResult);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10038F6DC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10052C0B8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10038F74C()
{
  unint64_t result = qword_10052C120;
  if (!qword_10052C120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10052C120);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BundleClassification.ClassificationType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10038F86CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleClassification.ClassificationType.CodingKeys()
{
  return &type metadata for BundleClassification.ClassificationType.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BundleClassification.ClassificationType.MapsResultsCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10038F940);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleClassification.ClassificationType.MapsResultsCodingKeys()
{
  return &type metadata for BundleClassification.ClassificationType.MapsResultsCodingKeys;
}

ValueMetadata *type metadata accessor for BundleClassification.ClassificationType.EventCodingKeys()
{
  return &type metadata for BundleClassification.ClassificationType.EventCodingKeys;
}

ValueMetadata *type metadata accessor for BundleClassification.ClassificationType.ReadAloudCodingKeys()
{
  return &type metadata for BundleClassification.ClassificationType.ReadAloudCodingKeys;
}

ValueMetadata *type metadata accessor for BundleClassification.ClassificationType.SummarizeCodingKeys()
{
  return &type metadata for BundleClassification.ClassificationType.SummarizeCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BundleClassification.ClassificationType.IdentifyCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10038FA74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleClassification.ClassificationType.IdentifyCodingKeys()
{
  return &type metadata for BundleClassification.ClassificationType.IdentifyCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BundleClassification.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10038FB78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleClassification.CodingKeys()
{
  return &type metadata for BundleClassification.CodingKeys;
}

ValueMetadata *type metadata accessor for BundleUnmetCriteriaError()
{
  return &type metadata for BundleUnmetCriteriaError;
}

unint64_t sub_10038FBC4()
{
  unint64_t result = qword_10052C130;
  if (!qword_10052C130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C130);
  }
  return result;
}

unint64_t sub_10038FC1C()
{
  unint64_t result = qword_10052C138;
  if (!qword_10052C138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C138);
  }
  return result;
}

unint64_t sub_10038FC74()
{
  unint64_t result = qword_10052C140;
  if (!qword_10052C140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C140);
  }
  return result;
}

unint64_t sub_10038FCCC()
{
  unint64_t result = qword_10052C148;
  if (!qword_10052C148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C148);
  }
  return result;
}

unint64_t sub_10038FD24()
{
  unint64_t result = qword_10052C150;
  if (!qword_10052C150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C150);
  }
  return result;
}

unint64_t sub_10038FD7C()
{
  unint64_t result = qword_10052C158;
  if (!qword_10052C158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C158);
  }
  return result;
}

unint64_t sub_10038FDD4()
{
  unint64_t result = qword_10052C160;
  if (!qword_10052C160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C160);
  }
  return result;
}

unint64_t sub_10038FE2C()
{
  unint64_t result = qword_10052C168;
  if (!qword_10052C168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C168);
  }
  return result;
}

unint64_t sub_10038FE84()
{
  unint64_t result = qword_10052C170;
  if (!qword_10052C170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C170);
  }
  return result;
}

unint64_t sub_10038FEDC()
{
  unint64_t result = qword_10052C178;
  if (!qword_10052C178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C178);
  }
  return result;
}

unint64_t sub_10038FF34()
{
  unint64_t result = qword_10052C180;
  if (!qword_10052C180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C180);
  }
  return result;
}

unint64_t sub_10038FF8C()
{
  unint64_t result = qword_10052C188;
  if (!qword_10052C188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C188);
  }
  return result;
}

unint64_t sub_10038FFE4()
{
  unint64_t result = qword_10052C190;
  if (!qword_10052C190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C190);
  }
  return result;
}

unint64_t sub_10039003C()
{
  unint64_t result = qword_10052C198;
  if (!qword_10052C198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C198);
  }
  return result;
}

unint64_t sub_100390094()
{
  unint64_t result = qword_10052C1A0;
  if (!qword_10052C1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C1A0);
  }
  return result;
}

unint64_t sub_1003900EC()
{
  unint64_t result = qword_10052C1A8;
  if (!qword_10052C1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C1A8);
  }
  return result;
}

unint64_t sub_100390144()
{
  unint64_t result = qword_10052C1B0;
  if (!qword_10052C1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C1B0);
  }
  return result;
}

unint64_t sub_10039019C()
{
  unint64_t result = qword_10052C1B8[0];
  if (!qword_10052C1B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10052C1B8);
  }
  return result;
}

uint64_t sub_1003901F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x757365527370616DLL && a2 == 0xEB0000000073746CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F6C4164616572 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7A6972616D6D7573 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x796669746E656469 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100390430(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10039057C()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100390668(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v8 & (v6 + 16);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = ((v7 + 16) & ~v7) + v10 + v7;
  uint64_t v12 = v10 + 7;
  unint64_t v13 = ((v10 + 7 + ((v11 + v9) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v14 = v6 & 0x100000;
  if (v7 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + v9);
    swift_retain();
  }
  else
  {
    uint64_t v18 = a2[1];
    *a1 = *a2;
    a1[1] = v18;
    char v19 = (void *)(v8 & ((unint64_t)a1 + 23));
    uint64_t v28 = (void *)(v8 & ((unint64_t)a2 + 23));
    *char v19 = *v28;
    uint64_t v20 = ~v7;
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v21 = *v22;
    uint64_t v23 = v7 + 8;
    unint64_t v26 = ((unint64_t)v22 + v23) & v20;
    unint64_t v27 = ((unint64_t)v21 + v23) & v20;
    char v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v24(v27, v26, v4);
    v24(((unint64_t)v19 + v11) & v20, ((unint64_t)v28 + v11) & v20, v4);
    *(void *)((v12 + (((unint64_t)v19 + v11) & v20)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + (((unint64_t)v28 + v11) & v20)) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100390828(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 16) & ~(v6 | 7);
  swift_release();
  swift_release();
  unint64_t v8 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v8((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  v8((((v6 + 16) | v6) + *(void *)(v5 + 64) + v7) & ~v6, v4);

  return swift_bridgeObjectRelease();
}

void *sub_10039092C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v6 = *(void *)(v5 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  void *v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = ((unint64_t)v11 + v7 + 8) & ~v7;
  uint64_t v14 = ((unint64_t)v12 + v7 + 8) & ~v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v20(v13, v14, v5);
  uint64_t v15 = *(void *)(v6 + 48);
  uint64_t v16 = v15 + v7 + ((v7 + 16) & ~v7);
  unint64_t v17 = ((unint64_t)v9 + v16) & ~v7;
  unint64_t v18 = ((unint64_t)v10 + v16) & ~v7;
  v20(v17, v18, v5);
  *(void *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100390A80(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  swift_retain();
  swift_release();
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_retain();
  swift_release();
  uint64_t v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24);
  v14(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8, v6);
  uint64_t v15 = *(void *)(v7 + 64);
  uint64_t v16 = v15 + v8 + ((v8 + 16) & ~v8);
  unint64_t v17 = ((unint64_t)v10 + v16) & ~v8;
  unint64_t v18 = ((unint64_t)v11 + v16) & ~v8;
  v14(v17, v18, v6);
  *(void *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100390C08(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  v6(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8, v4);
  uint64_t v14 = *(void *)(v7 + 32);
  uint64_t v15 = v14 + v8 + ((v8 + 16) & ~v8);
  unint64_t v16 = ((unint64_t)v10 + v15) & ~v8;
  unint64_t v17 = ((unint64_t)v11 + v15) & ~v8;
  v6(v16, v17, v4);
  *(void *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_100390D24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 16;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  swift_release();
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  swift_release();
  uint64_t v15 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40);
  v15(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9, v7);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = v16 + v9 + ((v9 + 16) & ~v9);
  unint64_t v18 = ((unint64_t)v11 + v17) & ~v9;
  unint64_t v19 = ((unint64_t)v12 + v17) & ~v9;
  v15(v18, v19, v7);
  *(void *)((v16 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100390E84(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v6 >= 0) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v8 | 7;
  uint64_t v12 = ((v8 + 16) & ~v8) + v9 + v8;
  if (v10 < a2)
  {
    unint64_t v13 = ((v9 + ((v12 + ((v8 + 16) & ~v11)) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v14 = a2 - v10;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      LODWORD(v17) = 4;
    }
    else {
      LODWORD(v17) = 2;
    }
    if (v16 < 0x100) {
      LODWORD(v17) = 1;
    }
    if (v16 >= 2) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *(unsigned __int8 *)(a1 + v13);
        if (!v18) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)(a1 + v13);
        if (v18) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10039102CLL);
      case 4:
        int v18 = *(_DWORD *)(a1 + v13);
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = v18 - 1;
        if (v15)
        {
          int v20 = 0;
          LODWORD(v15) = *(_DWORD *)a1;
        }
        return v10 + (v15 | v20) + 1;
      default:
        break;
    }
  }
  if (v10 == 0x7FFFFFFF)
  {
    unint64_t v21 = *(void *)(a1 + 8);
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    return (v21 + 1);
  }
  else
  {
    uint64_t v22 = (a1 + v11 + 16) & ~v11;
    if (v7 == v10) {
      unint64_t v23 = v8 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else {
      unint64_t v23 = v12 + v22;
    }
    return (*(uint64_t (**)(unint64_t))(v5 + 48))(v23 & ~v8);
  }
}

void sub_100391040(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 >= 0) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v12 = ((v10 + 16) & ~v10) + v11 + v10;
  size_t v13 = ((v11 + ((v12 + ((v10 + 16) & ~(v10 | 7))) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 >= a3)
  {
    int v17 = 0;
    int v18 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_20:
      switch(v17)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v9 == 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)a1 = a2 ^ 0x80000000;
                *((void *)a1 + 1) = 0;
              }
              else
              {
                *((void *)a1 + 1) = a2 - 1;
              }
            }
            else
            {
              unint64_t v21 = (unint64_t)&a1[(v10 | 7) + 16] & ~(v10 | 7);
              if (v8 == v9) {
                unint64_t v22 = v10 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
              }
              else {
                unint64_t v22 = v12 + v21;
              }
              unint64_t v23 = *(void (**)(unint64_t))(v6 + 56);
              v23(v22 & ~v10);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v14 = a3 - v9;
    if (((v11 + ((v12 + ((v10 + 16) & ~(v10 | 7))) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v17 = v16;
    }
    else {
      int v17 = 0;
    }
    int v18 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_20;
    }
  }
  if (v13) {
    int v19 = 1;
  }
  else {
    int v19 = v18;
  }
  if (v13)
  {
    int v20 = ~v9 + a2;
    bzero(a1, v13);
    *(_DWORD *)a1 = v20;
  }
  switch(v17)
  {
    case 1:
      a1[v13] = v19;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v19;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x100391284);
    case 4:
      *(_DWORD *)&a1[v13] = v19;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ConfigPicker()
{
  return sub_1000684BC();
}

uint64_t sub_1003912C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100391310@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a5;
  v31[1] = a3;
  int v36 = a2;
  uint64_t v44 = a7;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v47 = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = v10;
  uint64_t v11 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v43 = v11;
  __chkstk_darwin(v11);
  uint64_t v41 = (char *)v31 - v12;
  uint64_t v32 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v13 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unsigned int v15 = (char *)v31 - v14;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for _TraitWritingModifier();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v16 - 8);
  uint64_t v38 = v16;
  v17.n128_f64[0] = __chkstk_darwin(v16);
  int v19 = (char *)v31 - v18;
  uint64_t v20 = *(void *)(a4 - 8);
  unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v31[0] = a1;
  v21(v15, a1, a4, v17);
  unint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
  v22(v15, 0, 1, a4);
  uint64_t v34 = v19;
  uint64_t v23 = v35;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v32);
  if (v36)
  {
    char v24 = v41;
    ((void (*)(char *, void, uint64_t))v21)(v41, v31[0], a4);
    v22(v24, 0, 1, a4);
    uint64_t v25 = swift_checkMetadataState();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
  }
  else
  {
    uint64_t v26 = swift_checkMetadataState();
    char v24 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v41, 1, 1, v26);
  }
  type metadata accessor for TagValueTraitKey();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v45 = v23;
  uint64_t v46 = v27;
  uint64_t v28 = v38;
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v29 = v34;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v29, v28);
}

uint64_t sub_1003917B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v68 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v66 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v65 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Binding();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v62 = (char *)&v48 - v5;
  uint64_t v6 = type metadata accessor for Array();
  uint64_t v7 = *(void *)(a1 + 32);
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v97 = v7;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  char v86 = (void *)v6;
  uint64_t v87 = v2;
  uint64_t v88 = v8;
  uint64_t v89 = (void *)WitnessTable;
  uint64_t v90 = v7;
  uint64_t v10 = type metadata accessor for ForEach();
  uint64_t v11 = swift_getWitnessTable();
  long long v95 = &protocol witness table for Text;
  uint64_t v96 = v11;
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v93 = v12;
  uint64_t v94 = v13;
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v53 = v10;
  uint64_t v52 = swift_getWitnessTable();
  char v86 = &type metadata for Text;
  uint64_t v87 = v2;
  uint64_t v88 = v10;
  uint64_t v89 = &protocol witness table for Text;
  uint64_t v90 = v7;
  uint64_t v91 = v52;
  uint64_t v14 = v7;
  uint64_t v15 = type metadata accessor for Picker();
  uint64_t v54 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v51 = (uint64_t)&v48 - v16;
  uint64_t v17 = sub_10000F69C(&qword_10051C120);
  uint64_t v49 = v17;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v69 = v18;
  uint64_t v50 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
  char v86 = (void *)v15;
  uint64_t v87 = v17;
  uint64_t v88 = v18;
  uint64_t v89 = (void *)v50;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v57 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  unint64_t v21 = (char *)&v48 - v20;
  sub_10000F69C(&qword_100518C50);
  uint64_t v58 = OpaqueTypeMetadata2;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v22 - 8);
  uint64_t v60 = v22;
  __chkstk_darwin(v22);
  uint64_t v55 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = __chkstk_darwin(v24);
  uint64_t v56 = (char *)&v48 - v26;
  uint64_t v27 = v68;
  uint64_t v28 = v64;
  uint64_t v48 = v64 + *(int *)(v68 + 44);
  uint64_t v29 = v62;
  (*(void (**)(char *, double))(v61 + 16))(v62, v25);
  uint64_t v30 = *(void *)(v27 + 24);
  uint64_t v79 = v2;
  uint64_t v80 = v30;
  uint64_t v81 = v14;
  uint64_t v82 = v28;
  uint64_t v74 = v2;
  uint64_t v75 = v30;
  uint64_t v76 = v14;
  uint64_t v77 = v28;
  uint64_t v31 = v28;
  uint64_t v32 = v51;
  uint64_t v33 = (uint64_t)v29;
  uint64_t v34 = v49;
  sub_100392654(v33, (uint64_t)sub_100392B14, (uint64_t)v78, (uint64_t)sub_100392B20, v53, v51, (uint64_t)&protocol witness table for Text);
  uint64_t v70 = v2;
  uint64_t v71 = v30;
  uint64_t v72 = v14;
  uint64_t v73 = v31;
  uint64_t v62 = v21;
  uint64_t v35 = (void *)v50;
  View.swipeActions<A>(edge:allowsFullSwipe:content:)();
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v32, v15);
  int v36 = v65;
  Binding.wrappedValue.getter();
  LOBYTE(v32) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v2);
  if (v32) {
    uint64_t v37 = static Color.primary.getter();
  }
  else {
    uint64_t v37 = static Color.red.getter();
  }
  uint64_t v85 = v37;
  char v86 = (void *)v15;
  uint64_t v87 = v34;
  uint64_t v88 = v69;
  uint64_t v89 = v35;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v39 = v55;
  uint64_t v40 = v58;
  uint64_t v41 = v62;
  View.foregroundStyle<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v40);
  uint64_t v42 = sub_100013AA8(&qword_100518C48, &qword_100518C50);
  uint64_t v83 = OpaqueTypeConformance2;
  uint64_t v84 = v42;
  uint64_t v43 = v60;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = v56;
  sub_100224E4C(v39, v43, v44);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v59 + 8);
  v46(v39, v43);
  sub_100224E4C(v45, v43, v44);
  return ((uint64_t (*)(char *, uint64_t))v46)(v45, v43);
}

uint64_t sub_100391FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v9 = type metadata accessor for Array();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for _TraitWritingModifier();
  v26[2] = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v44 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  v26[3] = type metadata accessor for _TraitWritingModifier();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v28 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = v9;
  uint64_t v40 = a2;
  uint64_t v41 = v10;
  uint64_t v42 = WitnessTable;
  uint64_t v43 = a4;
  uint64_t v11 = type metadata accessor for ForEach();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v26 - v16;
  uint64_t v39 = *(void *)(a1 + *(int *)(type metadata accessor for ConfigPicker() + 52));
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  v26[1] = swift_getKeyPath();
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  _OWORD v18[4] = a4;
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v37 = &protocol witness table for Text;
  uint64_t v38 = v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  uint64_t v25 = swift_getWitnessTable();
  ForEach<>.init(_:id:content:)();
  uint64_t v34 = v25;
  uint64_t v22 = swift_getWitnessTable();
  sub_100224E4C(v14, v11, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v14, v11);
  sub_100224E4C(v17, v11, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v17, v11);
}

uint64_t sub_10039236C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = a3;
  uint64_t v26 = a5;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for _TraitWritingModifier();
  uint64_t v22 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v35 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v32 = v15;
  char v33 = 0;
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_100391310(a1, 1, (uint64_t)&type metadata for Text, a2, (uint64_t)&protocol witness table for Text, v23, (uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for Text;
  uint64_t v30 = WitnessTable;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v27 = v17;
  uint64_t v28 = v18;
  uint64_t v19 = swift_getWitnessTable();
  sub_100224E4C(v11, v8, v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v11, v8);
  sub_100224E4C(v14, v8, v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v8);
}

uint64_t sub_100392654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  v14[4] = a3;
  v14[5] = a5;
  v14[0] = a4;
  v14[1] = a6;
  void v14[2] = a2;
  v14[3] = a7;
  __chkstk_darwin(a1);
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = __chkstk_darwin(v8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v14 - v11, a1, v8, v10);
  ((void (*)(uint64_t))v14[0])(v12);
  Picker.init(selection:label:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
}

uint64_t sub_1003927E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v20[1] = a5;
  uint64_t v9 = type metadata accessor for ConfigPicker();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = sub_10000F214(&qword_10051C128);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.cancel.getter();
  uint64_t v16 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a2;
  *((void *)v18 + 3) = a3;
  *((void *)v18 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], v12, v9);
  sub_10000F214((uint64_t *)&unk_10051E360);
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  return Button.init(role:action:label:)();
}

uint64_t sub_100392A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConfigPicker();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1 + *(int *)(v7 + 48), a2);
  type metadata accessor for Binding();
  return Binding.wrappedValue.setter();
}

uint64_t sub_100392B14@<X0>(uint64_t a1@<X8>)
{
  return sub_100391FC0(v1[5], v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100392B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 40);
  uint64_t v3 = v2[1];
  *(void *)a1 = *v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100392B40@<X0>(uint64_t a1@<X8>)
{
  return sub_1003927E4(v1[5], v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100392B4C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for ConfigPicker() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_bridgeObjectRelease();
  uint64_t v4 = v3 + v2[13];
  swift_release();
  swift_release();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
  v6(v5, v1);
  v6(v3 + v2[14], v1);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100392C90()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for ConfigPicker() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return sub_100392A28(v3, v1);
}

uint64_t sub_100392D20()
{
  return swift_deallocObject();
}

uint64_t sub_100392D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10039236C(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_100392D3C()
{
  return swift_getWitnessTable();
}

uint64_t destroy for StatusPill()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *_s6Tamale10StatusPillVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for StatusPill(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for StatusPill(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for StatusPill()
{
  return &type metadata for StatusPill;
}

uint64_t sub_1003931AC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1003931C8()
{
  qword_10052C240 = 0x4014000000000000;
}

void sub_1003931D8()
{
  qword_10052C248 = 0x4020000000000000;
}

void sub_1003931E8()
{
  qword_10052C250 = 0x402E000000000000;
}

uint64_t sub_1003931F8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v66 = a1;
  uint64_t v68 = a2;
  uint64_t v2 = type metadata accessor for Capsule();
  __chkstk_darwin(v2 - 8);
  uint64_t v65 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_1005226A8);
  __chkstk_darwin(v64);
  uint64_t v67 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100519C60);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051ED38);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_10000F214(&qword_10052C258);
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000F214(&qword_10052C260);
  __chkstk_darwin(v59);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000F214(&qword_10052C268);
  __chkstk_darwin(v61);
  uint64_t v63 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Image.init(_internalSystemName:)();
  static SymbolRenderingMode.hierarchical.getter();
  uint64_t v16 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 0, 1, v16);
  uint64_t v17 = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v10, &qword_10051ED38);
  uint64_t v18 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  if (qword_1005180D8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
  uint64_t v21 = static Font.system(size:weight:design:)();
  sub_10000FBD8((uint64_t)v7, &qword_100519C60);
  uint64_t v22 = swift_getKeyPath();
  uint64_t v69 = v17;
  uint64_t v70 = KeyPath;
  uint64_t v71 = v18;
  uint64_t v72 = v22;
  uint64_t v73 = v21;
  static Font.Weight.medium.getter();
  sub_10000F214(&qword_10052C270);
  sub_1003938D0();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  char v23 = static Edge.Set.vertical.getter();
  if (qword_1005180C8 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v60;
  uint64_t v33 = v62;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v14, v12, v62);
  uint64_t v34 = &v14[*(int *)(v59 + 36)];
  *uint64_t v34 = v23;
  *((void *)v34 + 1) = v25;
  *((void *)v34 + 2) = v27;
  *((void *)v34 + 3) = v29;
  *((void *)v34 + 4) = v31;
  v34[40] = 0;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  char v35 = static Edge.Set.horizontal.getter();
  if (qword_1005180D0 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v44 = v63;
  sub_10000FB74((uint64_t)v14, v63, &qword_10052C260);
  uint64_t v45 = v44 + *(int *)(v61 + 36);
  *(unsigned char *)uint64_t v45 = v35;
  *(void *)(v45 + 8) = v37;
  *(void *)(v45 + 16) = v39;
  *(void *)(v45 + 24) = v41;
  *(void *)(v45 + 32) = v43;
  *(unsigned char *)(v45 + 40) = 0;
  sub_10000FBD8((uint64_t)v14, &qword_10052C260);
  uint64_t v46 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v47 = type metadata accessor for RoundedCornerStyle();
  uint64_t v48 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 104))(v65, v46, v47);
  uint64_t v49 = v67;
  sub_10008D3F0(v48, v67);
  uint64_t v50 = v64;
  *(void *)(v49 + *(int *)(v64 + 52)) = v66;
  *(_WORD *)(v49 + *(int *)(v50 + 56)) = 256;
  swift_retain();
  sub_10008D454(v48);
  uint64_t v51 = static Alignment.center.getter();
  uint64_t v53 = v52;
  uint64_t v54 = sub_10000F214(&qword_10052C290);
  uint64_t v55 = v68;
  uint64_t v56 = v68 + *(int *)(v54 + 36);
  sub_10000FB74(v49, v56, &qword_1005226A8);
  uint64_t v57 = (uint64_t *)(v56 + *(int *)(sub_10000F214(&qword_1005226D0) + 36));
  *uint64_t v57 = v51;
  v57[1] = v53;
  sub_10000FB74(v44, v55, &qword_10052C268);
  sub_10000FBD8(v49, &qword_1005226A8);
  return sub_10000FBD8(v44, &qword_10052C268);
}

uint64_t sub_1003938B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003931F8(*(void *)(v1 + 16), a1);
}

unint64_t sub_1003938D0()
{
  unint64_t result = qword_10052C278;
  if (!qword_10052C278)
  {
    sub_10000F69C(&qword_10052C270);
    sub_100393970();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C278);
  }
  return result;
}

unint64_t sub_100393970()
{
  unint64_t result = qword_10052C280;
  if (!qword_10052C280)
  {
    sub_10000F69C(&qword_10052C288);
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C280);
  }
  return result;
}

unint64_t sub_100393A14()
{
  unint64_t result = qword_10052C298;
  if (!qword_10052C298)
  {
    sub_10000F69C(&qword_10052C290);
    sub_100393AB4();
    sub_100013AA8(&qword_100522728, &qword_1005226D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C298);
  }
  return result;
}

unint64_t sub_100393AB4()
{
  unint64_t result = qword_10052C2A0;
  if (!qword_10052C2A0)
  {
    sub_10000F69C(&qword_10052C268);
    sub_100393B30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C2A0);
  }
  return result;
}

unint64_t sub_100393B30()
{
  unint64_t result = qword_10052C2A8;
  if (!qword_10052C2A8)
  {
    sub_10000F69C(&qword_10052C260);
    sub_10000F69C(&qword_10052C270);
    sub_1003938D0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C2A8);
  }
  return result;
}

uint64_t sub_100393BE0(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10052C578);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100397DAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v10 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100393D70()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 0x786F426F54706174;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x64656C62616E65;
  }
}

uint64_t sub_100393DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100397974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100393DF8(uint64_t a1)
{
  unint64_t v2 = sub_100397DAC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100393E34(uint64_t a1)
{
  unint64_t v2 = sub_100397DAC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100393E70@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100397AC4(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result) & 1;
  }
  return result;
}

uint64_t sub_100393EB0(void *a1)
{
  return sub_100393BE0(a1);
}

BOOL sub_100393EF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

uint64_t sub_100393F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v15 = a3 & 1;
  char v19 = a3 & 1;
  unsigned int v14 = (a3 >> 8) & 1;
  unsigned int v13 = WORD1(a3) & 1;
  sub_10000F214(&qword_10052C5E0);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = v15;
  *(unsigned char *)(v8 + 33) = v14;
  *(unsigned char *)(v8 + 34) = v13;
  unsigned int v11 = BYTE3(a3) & 1;
  *(unsigned char *)(v8 + 35) = v11;
  *(unsigned char *)(v8 + 36) = BYTE4(a3) & 1;
  uint64_t v12 = (a3 >> 40) & 1;
  *(unsigned char *)(v8 + 37) = v12;
  *(void *)(v8 + 40) = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *(void *)a5 = 0x64656C62616E45;
  *(void *)(a5 + 8) = 0xE700000000000000;
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  *(unsigned char *)(a5 + 32) = v19;
  *(unsigned char *)(a5 + 33) = v11;
  *(void *)(a5 + 40) = sub_10039893C;
  *(void *)(a5 + 48) = v8;
  *(void *)(a5 + 56) = 0xD000000000000013;
  *(void *)(a5 + 64) = 0x8000000100425AC0;
  *(void *)(a5 + 72) = a1;
  *(void *)(a5 + 80) = a2;
  *(unsigned char *)(a5 + 88) = v15;
  *(unsigned char *)(a5 + 89) = BYTE4(a3) & 1;
  *(_DWORD *)(a5 + 90) = v20;
  *(_WORD *)(a5 + 94) = v21;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = 0;
  *(void *)(a5 + 112) = 0x422D6F742D706154;
  *(void *)(a5 + 120) = 0xEA0000000000786FLL;
  *(void *)(a5 + 128) = a1;
  *(void *)(a5 + 136) = a2;
  *(unsigned char *)(a5 + 144) = v15;
  *(unsigned char *)(a5 + 145) = v12;
  *(_WORD *)(a5 + 150) = WORD2(a1);
  *(_DWORD *)(a5 + 146) = a1;
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724((uint64_t)sub_10039893C);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000F478((uint64_t)sub_10039893C);
}

void sub_100394374(char a1)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setBool:a1 & 1 forKey:v3];
}

uint64_t sub_100394410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = 256;
  if (!*(unsigned char *)(v1 + 17)) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  uint64_t v4 = 0x10000;
  if (!*(unsigned char *)(v1 + 18)) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!*(unsigned char *)(v1 + 19)) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v3 | v4 | v5;
  uint64_t v7 = &_mh_execute_header;
  if (!*(unsigned char *)(v1 + 20)) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0x10000000000;
  if (!*(unsigned char *)(v1 + 21)) {
    uint64_t v8 = 0;
  }
  return sub_100393F2C(*(void *)v1, *(void *)(v1 + 8), v6 | (unint64_t)v7 | v8, *(void *)(v1 + 24), a1);
}

BOOL sub_100394484(unint64_t *a1, unint64_t *a2)
{
  return sub_1003972E4(*a1, *a2);
}

uint64_t sub_100394490()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FocusSelectionPoint()
{
  return self;
}

BOOL sub_1003944C4(double **a1, double **a2)
{
  return sub_100397478(*a1, *a2);
}

uint64_t sub_1003944D0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FocusSelectionArea()
{
  return self;
}

BOOL sub_100394504(uint64_t *a1, uint64_t *a2)
{
  return sub_100397414(*a1, *a2);
}

uint64_t sub_100394510()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  __chkstk_darwin(v2);
  uint64_t v56 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v54 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DispatchTime();
  uint64_t v53 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v50 - v8;
  uint64_t v9 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v9 - 8);
  unsigned int v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v61 = (char *)&v50 - v17;
  id v18 = [self mainBundle];
  NSString v19 = String._bridgeToObjectiveC()();
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v18 URLForResource:v19 withExtension:v20];

  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_8;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v11, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v22(v61, v11, v12);
  URL._bridgeToObjectiveC()(v23);
  uint64_t v25 = v24;
  uint64_t v26 = self;
  aBlock[0] = 0;
  id v27 = [v26 worldWithURL:v25 options:0 error:aBlock];

  id v28 = aBlock[0];
  if (!v27)
  {
    id v49 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_11;
  }
  *(void *)(v1 + 24) = v27;
  id v29 = v28;
  id v30 = [v27 rootNode];
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v30 childNodeWithName:v31];

  if (!v32) {
LABEL_9:
  }
    __break(1u);
  uint64_t v50 = v13;
  uint64_t v51 = v12;
  *(void *)(v1 + 16) = v32;
  id v33 = [objc_allocWithZone((Class)VFXView) init];
  *(void *)(v1 + 32) = v33;
  sub_10000F734(0, &qword_10052C4F0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v35 = v33;
  id v36 = [ObjCClassFromMetadata clearColor];
  [v35 setBackgroundColor:v36];

  uint64_t v37 = *(void **)(v1 + 32);
  [v37 setWorld:*(void *)(v1 + 24)];
  [v37 setRendersContinuously:1];
  id v38 = [*(id *)(v1 + 16) behaviorGraph];
  if (v38)
  {
    uint64_t v39 = v38;
    Class isa = Double._bridgeToObjectiveC()().super.super.isa;
    NSString v41 = String._bridgeToObjectiveC()();
    [v39 setValue:isa forKeyPath:v41];

    [*(id *)(v1 + 32) setHidden:1];
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v42 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    uint64_t v43 = v52;
    + infix(_:_:)();
    uint64_t v53 = *(void *)(v53 + 8);
    ((void (*)(char *, uint64_t))v53)(v6, v60);
    aBlock[4] = sub_1003974CC;
    aBlock[5] = (id)v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1002EDB98;
    void aBlock[3] = &unk_1004F6C28;
    uint64_t v44 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v45 = v54;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = _swiftEmptyArrayStorage;
    sub_100398208((unint64_t *)&qword_10051FB30, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
    uint64_t v46 = v56;
    uint64_t v47 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v57);
    ((void (*)(char *, uint64_t))v53)(v43, v60);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v61, v51);
    swift_release();
    return v1;
  }
LABEL_11:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100394DD8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WandVFXOverlayModel()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for FocusSelection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for FocusSelection()
{
  return swift_release();
}

void *assignWithCopy for FocusSelection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FocusSelection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusSelection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FocusSelection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100394FAC(void *a1)
{
  return *a1 >> 63;
}

void *sub_100394FB8(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_100394FC8(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for FocusSelection()
{
  return &type metadata for FocusSelection;
}

uint64_t sub_100394FEC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WandVFXOverlayModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id sub_100395028()
{
  return *v0;
}

uint64_t sub_100395030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100398E88();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100395094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100398E88();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1003950F8()
{
}

uint64_t sub_100395120()
{
  type metadata accessor for WandVFXOverlayModel();
  uint64_t v0 = swift_allocObject();
  sub_100394510();
  return v0;
}

void sub_100395158(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  type metadata accessor for WandVFXOverlayModel();
  sub_100398208(&qword_10052C580, v7, (void (*)(uint64_t))type metadata accessor for WandVFXOverlayModel);
  id v8 = *(id *)(StateObject.wrappedValue.getter() + 32);
  swift_release();
  uint64_t v9 = static Alignment.center.getter();
  uint64_t v11 = v10;
  char v12 = static Edge.Set.all.getter();
  if (*(unsigned char *)a1)
  {
    uint64_t v14 = (_OWORD *)swift_allocObject();
    long long v15 = a1[3];
    v14[3] = a1[2];
    v14[4] = v15;
    v14[5] = a1[4];
    long long v16 = a1[1];
    v14[1] = *a1;
    void v14[2] = v16;
    sub_100397E64((uint64_t)a1);
    uint64_t v13 = sub_100397E5C;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v11;
  *(unsigned char *)(a2 + 56) = v12;
  *(void *)(a2 + 64) = v13;
  *(void *)(a2 + 72) = v14;
  id v17 = v8;
  sub_10000F724((uint64_t)v13);
  sub_10000F478((uint64_t)v13);
}

uint64_t sub_1003952EC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v68 = a3;
  uint64_t v59 = type metadata accessor for DragGesture();
  uint64_t v61 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v57 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_10051D330);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  uint64_t v65 = v7;
  __chkstk_darwin(v6);
  uint64_t v58 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051D2E0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v66 = v9;
  uint64_t v67 = v10;
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for LocalCoordinateSpace();
  uint64_t v54 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for GeometryProxy();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  id v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10052C588);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v62 = v18;
  uint64_t v63 = v19;
  __chkstk_darwin(v18);
  uint64_t v75 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = static Alignment.center.getter();
  uint64_t v23 = v22;
  char v24 = static Edge.Set.all.getter();
  uint64_t v76 = v21;
  uint64_t v77 = v23;
  unint64_t v78 = 0;
  LOWORD(v79) = 1;
  BYTE2(v79) = v24;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v53 = v15 + 16;
  uint64_t v73 = v25;
  uint64_t v52 = v14;
  v25(v17, a1, v14);
  uint64_t v26 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v27 = (v26 + 16) & ~v26;
  uint64_t v70 = v26 | 7;
  uint64_t v28 = swift_allocObject();
  id v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v71 = v15 + 32;
  uint64_t v72 = v29;
  v29((char *)(v28 + v27), v17, v14);
  id v30 = (_OWORD *)(v28 + ((v16 + v27 + 7) & 0xFFFFFFFFFFFFFFF8));
  long long v31 = a2[3];
  void v30[2] = a2[2];
  v30[3] = v31;
  v30[4] = a2[4];
  long long v32 = a2[1];
  *id v30 = *a2;
  v30[1] = v32;
  sub_100397E64((uint64_t)a2);
  static CoordinateSpaceProtocol<>.local.getter();
  uint64_t v55 = sub_10000F214(&qword_10052C590);
  unint64_t v56 = sub_100398050();
  uint64_t v33 = v69;
  View.onTapGesture<A>(count:coordinateSpace:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v33);
  static CoordinateSpaceProtocol<>.local.getter();
  uint64_t v34 = v57;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  uint64_t v35 = v52;
  v73(v17, v74, v52);
  uint64_t v36 = (v26 + 96) & ~v26;
  uint64_t v54 = v36 + v16;
  uint64_t v37 = (char *)swift_allocObject();
  long long v38 = a2[3];
  *((_OWORD *)v37 + 3) = a2[2];
  *((_OWORD *)v37 + 4) = v38;
  *((_OWORD *)v37 + 5) = a2[4];
  long long v39 = a2[1];
  *((_OWORD *)v37 + 1) = *a2;
  *((_OWORD *)v37 + 2) = v39;
  v72(&v37[v36], v17, v35);
  sub_100397E64((uint64_t)a2);
  sub_100398208(&qword_10051C3B8, 255, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_100398208((unint64_t *)&unk_10051D340, 255, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  uint64_t v40 = v58;
  uint64_t v41 = v59;
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v41);
  v73(v17, v74, v35);
  uint64_t v42 = (char *)swift_allocObject();
  long long v43 = a2[3];
  *((_OWORD *)v42 + 3) = a2[2];
  *((_OWORD *)v42 + 4) = v43;
  *((_OWORD *)v42 + 5) = a2[4];
  long long v44 = a2[1];
  *((_OWORD *)v42 + 1) = *a2;
  *((_OWORD *)v42 + 2) = v44;
  v72(&v42[v36], v17, v35);
  sub_100397E64((uint64_t)a2);
  sub_100013AA8(&qword_10051C3C0, (uint64_t *)&unk_10051D330);
  uint64_t v45 = v60;
  uint64_t v46 = v64;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v40, v46);
  static GestureMask.all.getter();
  uint64_t v76 = v55;
  uint64_t v77 = v69;
  unint64_t v78 = v56;
  uint64_t v79 = &protocol witness table for LocalCoordinateSpace;
  swift_getOpaqueTypeConformance2();
  sub_100013AA8(&qword_10051C3B0, &qword_10051D2E0);
  uint64_t v47 = v62;
  uint64_t v48 = v66;
  id v49 = v75;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v49, v47);
}

uint64_t sub_100395AF4(uint64_t a1, _OWORD *a2, double a3, double a4)
{
  uint64_t v8 = type metadata accessor for GeometryProxy();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  type metadata accessor for MainActor();
  sub_100397E64((uint64_t)a2);
  uint64_t v16 = static MainActor.shared.getter();
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = &protocol witness table for MainActor;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v11, v8);
  uint64_t v20 = (double *)(v19 + v18);
  *uint64_t v20 = a3;
  v20[1] = a4;
  uint64_t v21 = (_OWORD *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8));
  long long v22 = a2[4];
  long long v23 = a2[2];
  uint64_t v21[3] = a2[3];
  v21[4] = v22;
  long long v24 = a2[1];
  _OWORD *v21 = *a2;
  v21[1] = v24;
  void v21[2] = v23;
  sub_100064D5C((uint64_t)v14, (uint64_t)&unk_10052C5D8, v19);
  return swift_release();
}

uint64_t sub_100395D30(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 40) = a7;
  *(double *)(v7 + 24) = a1;
  *(double *)(v7 + 32) = a2;
  *(void *)(v7 + 16) = a6;
  type metadata accessor for MainActor();
  *(void *)(v7 + 48) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v7 + 56) = v9;
  *(void *)(v7 + 64) = v8;
  return _swift_task_switch(sub_100395DD0, v9, v8);
}

uint64_t sub_100395DD0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  double v2 = *(double *)(v0 + 32);
  GeometryProxy.size.getter();
  double v5 = v4;
  GeometryProxy.safeAreaInsets.getter();
  double v7 = v5 + v6;
  GeometryProxy.safeAreaInsets.getter();
  double v9 = 1920.0 / (v7 + v8);
  GeometryProxy.size.getter();
  double v11 = (1440.0 - v10 * v9) * 0.5;
  GeometryProxy.safeAreaInsets.getter();
  double v13 = v2 + v12;
  GeometryProxy.size.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  type metadata accessor for FocusSelectionPoint();
  uint64_t v18 = swift_allocObject();
  *(void *)(v0 + 72) = v18;
  *(void *)(v18 + 16) = v3;
  *(double *)(v18 + 24) = v13;
  *(void *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = v17;
  *(double *)(v18 + 48) = v11;
  *(double *)(v18 + 56) = v9;
  uint64_t v21 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 24) + **(int **)(v1 + 24));
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100395F44;
  return v21(v18);
}

uint64_t sub_100395F44()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return _swift_task_switch(sub_100396064, v3, v2);
}

uint64_t sub_100396064()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1003960D0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WandVFXOverlayModel();
  sub_100398208(&qword_10052C580, v3, (void (*)(uint64_t))type metadata accessor for WandVFXOverlayModel);
  id v4 = *(id *)(StateObject.wrappedValue.getter() + 32);
  swift_release();
  unsigned __int8 v5 = [v4 rendersContinuously];

  if ((v5 & 1) == 0)
  {
    id v6 = *(id *)(StateObject.wrappedValue.getter() + 32);
    swift_release();
    [v6 setRendersContinuously:1];
  }
  DragGesture.Value.location.getter();
  uint64_t v8 = v7;
  DragGesture.Value.location.getter();
  double v10 = v9;
  GeometryProxy.safeAreaInsets.getter();
  double v12 = v11;
  long long v27 = *(_OWORD *)(a2 + 64);
  sub_100398630((uint64_t)&v27 + 8, (uint64_t)v29);
  uint64_t v28 = v27;
  sub_1000B4980((uint64_t)&v28);
  sub_100062328((uint64_t)v29);
  sub_10000F214(&qword_10052C5B0);
  State.wrappedValue.getter();
  double v13 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v13 = sub_10032923C(0, v26[2] + 1, 1, v26);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    double v13 = sub_10032923C((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  v13[2] = v15 + 1;
  uint64_t v16 = (double *)&v13[2 * v15];
  *((void *)v16 + 4) = v8;
  v16[5] = v10 + v12;
  State.wrappedValue.setter();
  sub_1000A6A04((uint64_t)&v28);
  sub_100062354((uint64_t)v29);
  GeometryProxy.size.getter();
  GeometryProxy.safeAreaInsets.getter();
  GeometryProxy.safeAreaInsets.getter();
  GeometryProxy.size.getter();
  uint64_t v17 = StateObject.wrappedValue.getter();
  GeometryProxy.size.getter();
  id v18 = [*(id *)(v17 + 16) behaviorGraph];
  if (!v18) {
    goto LABEL_10;
  }
  uint64_t v19 = v18;
  Class isa = CGPoint._bridgeToObjectiveC()().super.isa;
  NSString v21 = String._bridgeToObjectiveC()();
  [v19 setValue:isa forKeyPath:v21];
  swift_release();

  id v22 = [*(id *)(StateObject.wrappedValue.getter() + 16) behaviorGraph];
  if (v22)
  {
    long long v23 = v22;
    Class v24 = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v25 = String._bridgeToObjectiveC()();
    [v23 setValue:v24 forKeyPath:v25];
    swift_release();
  }
  else
  {
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_100396510(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v65 = a1;
  uint64_t v69 = type metadata accessor for GeometryProxy();
  uint64_t v66 = *(void *)(v69 - 8);
  uint64_t v3 = *(void *)(v66 + 64);
  __chkstk_darwin(v69);
  uint64_t v68 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v67 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WandVFXOverlayModel();
  sub_100398208(&qword_10052C580, v6, (void (*)(uint64_t))type metadata accessor for WandVFXOverlayModel);
  id v7 = [*(id *)(StateObject.wrappedValue.getter() + 16) behaviorGraph];
  if (v7)
  {
    uint64_t v8 = v7;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v10 = String._bridgeToObjectiveC()();
    [v8 setValue:isa forKeyPath:v10];
    swift_release();

    long long v72 = v1[4];
    long long v70 = v1[4];
    sub_10000F214(&qword_10052C5B0);
    State.wrappedValue.getter();
    double v11 = v71;
    int64_t v12 = v71[2];
    if (v12)
    {
      *(void *)&long long v70 = _swiftEmptyArrayStorage;
      sub_100040758(0, v12, 0);
      double v13 = (void *)v70;
      unint64_t v14 = *(void *)(v70 + 16);
      uint64_t v15 = 4;
      do
      {
        uint64_t v16 = v11[v15];
        *(void *)&long long v70 = v13;
        unint64_t v17 = v13[3];
        if (v14 >= v17 >> 1)
        {
          sub_100040758(v17 > 1, v14 + 1, 1);
          double v13 = (void *)v70;
        }
        v13[2] = v14 + 1;
        v13[v14 + 4] = v16;
        v15 += 2;
        ++v14;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      double v13 = _swiftEmptyArrayStorage;
    }
    uint64_t v64 = sub_1003A4DC0((uint64_t)v13);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      long long v70 = v72;
      State.wrappedValue.getter();
      uint64_t v20 = v71;
      int64_t v21 = v71[2];
      if (v21)
      {
        *(void *)&long long v70 = _swiftEmptyArrayStorage;
        sub_100040758(0, v21, 0);
        id v22 = (void *)v70;
        unint64_t v23 = *(void *)(v70 + 16);
        uint64_t v24 = 4;
        do
        {
          uint64_t v25 = v20[v24];
          *(void *)&long long v70 = v22;
          unint64_t v26 = v22[3];
          if (v23 >= v26 >> 1)
          {
            sub_100040758(v26 > 1, v23 + 1, 1);
            id v22 = (void *)v70;
          }
          _OWORD v22[2] = v23 + 1;
          v22[v23 + 4] = v25;
          v24 += 2;
          ++v23;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        id v22 = _swiftEmptyArrayStorage;
      }
      uint64_t v63 = sub_100171F6C((uint64_t)v22);
      char v28 = v27;
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        long long v70 = v72;
        State.wrappedValue.getter();
        id v29 = v71;
        int64_t v30 = v71[2];
        if (v30)
        {
          *(void *)&long long v70 = _swiftEmptyArrayStorage;
          sub_100040758(0, v30, 0);
          long long v31 = (void *)v70;
          unint64_t v32 = *(void *)(v70 + 16);
          uint64_t v33 = 5;
          do
          {
            uint64_t v34 = v29[v33];
            *(void *)&long long v70 = v31;
            unint64_t v35 = v31[3];
            if (v32 >= v35 >> 1)
            {
              sub_100040758(v35 > 1, v32 + 1, 1);
              long long v31 = (void *)v70;
            }
            void v31[2] = v32 + 1;
            v31[v32 + 4] = v34;
            v33 += 2;
            ++v32;
            --v30;
          }
          while (v30);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          long long v31 = _swiftEmptyArrayStorage;
        }
        uint64_t v36 = sub_1003A4DC0((uint64_t)v31);
        char v38 = v37;
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0)
        {
          long long v70 = v72;
          State.wrappedValue.getter();
          long long v39 = v71;
          int64_t v40 = v71[2];
          uint64_t v62 = v36;
          if (v40)
          {
            *(void *)&long long v70 = _swiftEmptyArrayStorage;
            sub_100040758(0, v40, 0);
            uint64_t v41 = (void *)v70;
            unint64_t v42 = *(void *)(v70 + 16);
            uint64_t v43 = 5;
            do
            {
              uint64_t v44 = v39[v43];
              *(void *)&long long v70 = v41;
              unint64_t v45 = v41[3];
              if (v42 >= v45 >> 1)
              {
                sub_100040758(v45 > 1, v42 + 1, 1);
                uint64_t v41 = (void *)v70;
              }
              v41[2] = v42 + 1;
              v41[v42 + 4] = v44;
              v43 += 2;
              ++v42;
              --v40;
            }
            while (v40);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v41 = _swiftEmptyArrayStorage;
          }
          uint64_t v46 = sub_100171F6C((uint64_t)v41);
          char v48 = v47;
          swift_bridgeObjectRelease();
          if ((v48 & 1) == 0)
          {
            uint64_t v49 = type metadata accessor for TaskPriority();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v67, 1, 1, v49);
            uint64_t v50 = v66;
            (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v68, v65, v69);
            type metadata accessor for MainActor();
            sub_100397E64((uint64_t)v2);
            uint64_t v61 = static MainActor.shared.getter();
            uint64_t v51 = *(unsigned __int8 *)(v50 + 80);
            uint64_t v65 = v46;
            uint64_t v52 = (v51 + 112) & ~v51;
            unint64_t v53 = (v3 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v56 = swift_allocObject();
            *(void *)(v56 + 16) = v61;
            *(void *)(v56 + 24) = &protocol witness table for MainActor;
            long long v57 = v2[3];
            *(_OWORD *)(v56 + 64) = v2[2];
            *(_OWORD *)(v56 + 80) = v57;
            *(_OWORD *)(v56 + 96) = v2[4];
            long long v58 = v2[1];
            *(_OWORD *)(v56 + 32) = *v2;
            *(_OWORD *)(v56 + 48) = v58;
            (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v56 + v52, v68, v69);
            *(void *)(v56 + v53) = v64;
            *(void *)(v56 + v54) = v62;
            *(void *)(v56 + v55) = v63;
            *(void *)(v56 + ((v55 + 15) & 0xFFFFFFFFFFFFFFF8)) = v65;
            sub_100064D5C(v67, (uint64_t)&unk_10052C5C0, v56);
            swift_release();
          }
        }
      }
    }
    long long v70 = v72;
    uint64_t v71 = _swiftEmptyArrayStorage;
    return State.wrappedValue.setter();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100396C5C(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(double *)(v9 + 48) = a3;
  *(double *)(v9 + 56) = a4;
  *(double *)(v9 + 32) = a1;
  *(double *)(v9 + 40) = a2;
  *(void *)(v9 + 16) = a8;
  *(void *)(v9 + 24) = a9;
  *(void *)(v9 + 64) = type metadata accessor for MainActor();
  *(void *)(v9 + 72) = static MainActor.shared.getter();
  double v13 = (uint64_t (*)(void))(*(void *)(a8 + 8) + **(int **)(a8 + 8));
  double v11 = (void *)swift_task_alloc();
  *(void *)(v9 + 80) = v11;
  *double v11 = v9;
  v11[1] = sub_100396D50;
  return v13();
}

uint64_t sub_100396D50(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  v2[11] = a1;
  swift_task_dealloc();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[12] = v4;
  v2[13] = v3;
  return _swift_task_switch(sub_100396E9C, v4, v3);
}

uint64_t sub_100396E9C()
{
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1 && (uint64_t v2 = (CGImage *)sub_10041BBA8(), *(void *)(v0 + 112) = v2, v1, v2))
  {
    double v4 = *(double *)(v0 + 48);
    double v3 = *(double *)(v0 + 56);
    double v6 = *(double *)(v0 + 32);
    double v5 = *(double *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 16);
    GeometryProxy.size.getter();
    double v9 = v8;
    GeometryProxy.safeAreaInsets.getter();
    double v11 = v9 + v10;
    GeometryProxy.safeAreaInsets.getter();
    double v13 = (double)(uint64_t)CGImageGetHeight(v2) / (v11 + v12);
    GeometryProxy.size.getter();
    double v15 = (double)(uint64_t)CGImageGetWidth(v2) - v14 * v13;
    uint64_t v16 = *(int **)(v7 + 24);
    double v17 = v3 - v5;
    GeometryProxy.size.getter();
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    type metadata accessor for FocusSelectionArea();
    uint64_t v22 = swift_allocObject();
    *(void *)(v0 + 120) = v22;
    *(double *)(v22 + 16) = v6;
    *(double *)(v22 + 24) = v5;
    *(double *)(v22 + 32) = v4 - v6;
    *(double *)(v22 + 40) = v17;
    *(void *)(v22 + 48) = v19;
    *(void *)(v22 + 56) = v21;
    *(double *)(v22 + 64) = v15 * 0.5;
    *(double *)(v22 + 72) = v13;
    unint64_t v23 = v22 | 0x8000000000000000;
    char v27 = (uint64_t (*)(unint64_t))((char *)v16 + *v16);
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_10039709C;
    return v27(v23);
  }
  else
  {
    swift_release();
    unint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

uint64_t sub_10039709C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_1003971E0, v3, v2);
}

uint64_t sub_1003971E0()
{
  uint64_t v1 = *(void **)(v0 + 112);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

__n128 sub_100397248@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[3];
  _OWORD v22[2] = v1[2];
  v22[3] = v3;
  v22[4] = v1[4];
  long long v4 = v1[1];
  v22[0] = *v1;
  v22[1] = v4;
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  sub_100395158(v22, (uint64_t)&v15);
  uint64_t v8 = v16;
  char v9 = v17;
  uint64_t v10 = v18;
  char v11 = v20;
  __n128 result = v15;
  long long v13 = v19;
  long long v14 = v21;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(__n128 *)(a1 + 16) = result;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 80) = v14;
  return result;
}

BOOL sub_1003972E4(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      return 0;
    }
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16) || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
    BOOL v3 = *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)(a1 + 40) == *(double *)(a2 + 40);
    return v3 && *(double *)(a1 + 48) == *(double *)(a2 + 48) && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = a1 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v5 = a2 & 0x7FFFFFFFFFFFFFFFLL;
    CGFloat v6 = *(double *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
    CGFloat v7 = *(double *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
    CGFloat v8 = *(double *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
    CGFloat v9 = *(double *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x28);
    CGFloat v10 = *(double *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
    CGFloat v11 = *(double *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
    CGFloat v12 = *(double *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
    CGFloat v13 = *(double *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 0x28);
    swift_retain();
    swift_retain();
    v17.origin.CGFloat x = v6;
    v17.origin.CGFloat y = v7;
    v17.size.CGFloat width = v8;
    v17.size.CGFloat height = v9;
    v18.origin.CGFloat x = v10;
    v18.origin.CGFloat y = v11;
    v18.size.CGFloat width = v12;
    v18.size.CGFloat height = v13;
    if (CGRectEqualToRect(v17, v18) && *(double *)(v4 + 64) == *(double *)(v5 + 64))
    {
      double v14 = *(double *)(v4 + 72);
      double v15 = *(double *)(v5 + 72);
      swift_release();
      swift_release();
      if (v14 == v15) {
        return 1;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  return 0;
}

BOOL sub_100397414(uint64_t a1, uint64_t a2)
{
  BOOL result = CGRectEqualToRect(*(CGRect *)(a1 + 16), *(CGRect *)(a2 + 16));
  if (result) {
    return *(double *)(a1 + 64) == *(double *)(a2 + 64) && *(double *)(a1 + 72) == *(double *)(a2 + 72);
  }
  return result;
}

BOOL sub_100397478(double *a1, double *a2)
{
  BOOL v2 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v2 && (a1[4] == a2[4] ? (BOOL v3 = a1[5] == a2[5]) : (BOOL v3 = 0), v3 && a1[6] == a2[6])) {
    return a1[7] == a2[7];
  }
  else {
    return 0;
  }
}

id sub_1003974CC()
{
  return [*(id *)(v0 + 32) setHidden:0];
}

uint64_t sub_1003974E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003974F0()
{
  return swift_release();
}

uint64_t destroy for FocusSelectionView()
{
  swift_release();
  swift_release();
  sub_100020414();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for FocusSelectionView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  char v6 = *(unsigned char *)(a2 + 56);
  swift_retain();
  swift_retain();
  sub_10002025C();
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusSelectionView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 56);
  sub_10002025C();
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  sub_100020414();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusSelectionView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = v4;
  sub_100020414();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusSelectionView()
{
  return &type metadata for FocusSelectionView;
}

ValueMetadata *type metadata accessor for FocusSelectionConfiguration()
{
  return &type metadata for FocusSelectionConfiguration;
}

unint64_t sub_100397760()
{
  unint64_t result = qword_10052C4F8;
  if (!qword_10052C4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C4F8);
  }
  return result;
}

unint64_t sub_1003977B4(uint64_t a1)
{
  unint64_t result = sub_1003977DC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003977DC()
{
  unint64_t result = qword_10052C528;
  if (!qword_10052C528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C528);
  }
  return result;
}

unint64_t sub_100397834(uint64_t a1)
{
  unint64_t result = sub_10039785C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10039785C()
{
  unint64_t result = qword_10052C558;
  if (!qword_10052C558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C558);
  }
  return result;
}

uint64_t sub_1003978B0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1003978CC(void *a1)
{
  a1[1] = sub_100017178();
  a1[2] = sub_100017518();
  unint64_t result = sub_100397904();
  a1[3] = result;
  return result;
}

unint64_t sub_100397904()
{
  unint64_t result = qword_10052C560;
  if (!qword_10052C560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C560);
  }
  return result;
}

uint64_t sub_100397958()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100397974(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656C62616E65 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010042CB10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x786F426F54706174 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100397AC4(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10052C568);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UserDefaultsUtility();
  uint64_t v7 = swift_allocObject();
  ObservationRegistrar.init()();
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 BOOLForKey:v9];

  swift_setDeallocating();
  uint64_t v10 = v7 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v11 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_deallocClassInstance();
  sub_10000F3B0(a1, a1[3]);
  sub_100397DAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  char v21 = 0;
  char v12 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 1;
  char v14 = KeyedDecodingContainer.decode(_:forKey:)();
  char v19 = 2;
  char v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  if (v15) {
    int v16 = 0x10000;
  }
  else {
    int v16 = 0;
  }
  if (v14) {
    int v17 = 256;
  }
  else {
    int v17 = 0;
  }
  return v17 & 0xFFFFFFFE | v12 & 1 | v16;
}

unint64_t sub_100397DAC()
{
  unint64_t result = qword_10052C570;
  if (!qword_10052C570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C570);
  }
  return result;
}

uint64_t sub_100397E00()
{
  swift_release();
  swift_release();
  sub_100020414();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100397E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003952EC(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t sub_100397E64(uint64_t a1)
{
  return a1;
}

uint64_t sub_100397EE0()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  sub_100020414();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100397FAC(double a1, double a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (_OWORD *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100395AF4(v2 + v6, v7, a1, a2);
}

unint64_t sub_100398050()
{
  unint64_t result = qword_10052C598;
  if (!qword_10052C598)
  {
    sub_10000F69C(&qword_10052C590);
    sub_1003980CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C598);
  }
  return result;
}

unint64_t sub_1003980CC()
{
  unint64_t result = qword_10052C5A0;
  if (!qword_10052C5A0)
  {
    sub_10000F69C(&qword_10052C5A8);
    sub_100013AA8(&qword_100526870, &qword_100526878);
    sub_100013AA8((unint64_t *)&qword_10051B8C0, &qword_100522F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C5A0);
  }
  return result;
}

void sub_100398194(uint64_t a1)
{
  type metadata accessor for GeometryProxy();

  sub_1003960D0(a1, v1 + 16);
}

uint64_t sub_100398208(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100398254()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  sub_100020414();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_100398344()
{
  uint64_t v1 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  return sub_100396510(v0 + ((*(unsigned __int8 *)(v1 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1003983A8()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  sub_100020414();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1003984C4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  double v12 = *(double *)(v1 + v6);
  double v13 = *(double *)(v1 + v7);
  double v14 = *(double *)(v1 + v8);
  double v15 = *(double *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  int v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  *int v16 = v2;
  v16[1] = sub_10000F878;
  return sub_100396C5C(v12, v13, v14, v15, a1, v9, v10, v1 + 32, v11);
}

uint64_t sub_100398630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10052C5C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100398698()
{
  uint64_t v1 = type metadata accessor for GeometryProxy();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  sub_100020414();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003987B0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  double v10 = *(double *)(v1 + v6);
  double v11 = *(double *)(v1 + v6 + 8);
  uint64_t v12 = v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  double v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *double v13 = v2;
  v13[1] = sub_10000FC9C;
  return sub_100395D30(v10, v11, a1, v7, v8, v9, v12);
}

uint64_t sub_1003988F4()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_10039893C(char a1)
{
}

unsigned char *storeEnumTagSinglePayload for FocusSelectionConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100398A7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusSelectionConfiguration.CodingKeys()
{
  return &type metadata for FocusSelectionConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for WandVFXOverlay()
{
  return &type metadata for WandVFXOverlay;
}

uint64_t destroy for FocusSelectionConfigurationForm()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FocusSelectionConfigurationForm(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(_WORD *)(a1 + 19) = *(_WORD *)(a2 + 19);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusSelectionConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusSelectionConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusSelectionConfigurationForm()
{
  return &type metadata for FocusSelectionConfigurationForm;
}

uint64_t sub_100398CB0()
{
  return sub_100013AA8(&qword_10052C5E8, &qword_10052C5F0);
}

uint64_t sub_100398CEC()
{
  return sub_100013AA8(&qword_10052C5F8, &qword_10052C600);
}

unint64_t sub_100398D2C()
{
  unint64_t result = qword_10052C608;
  if (!qword_10052C608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C608);
  }
  return result;
}

unint64_t sub_100398D84()
{
  unint64_t result = qword_10052C610;
  if (!qword_10052C610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C610);
  }
  return result;
}

unint64_t sub_100398DDC()
{
  unint64_t result = qword_10052C618;
  if (!qword_10052C618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C618);
  }
  return result;
}

unint64_t sub_100398E34()
{
  unint64_t result = qword_10052C620;
  if (!qword_10052C620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C620);
  }
  return result;
}

unint64_t sub_100398E88()
{
  unint64_t result = qword_10052C628;
  if (!qword_10052C628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C628);
  }
  return result;
}

CGImageRef sub_100398EE0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 48))(v13);
  if ((v14 & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1003991E4);
  }
  unsigned int v4 = (CGImage *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  CGImageRef result = 0;
  switch(v6)
  {
    case 1:
      CGImageRef result = v4;
      break;
    case 2:
      if (qword_100517E28 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10000F378(v7, (uint64_t)qword_10055E190);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        double v10 = (uint8_t *)swift_slowAlloc();
        CGImageRef imageOut = (CGImageRef)swift_slowAlloc();
        *(_DWORD *)double v10 = 136315138;
        swift_getErrorValue();
        uint64_t v11 = Error.localizedDescription.getter();
        sub_1003806B0(v11, v12, (uint64_t *)&imageOut);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000ACF28(v4, 2u);
        sub_1000ACF28(v4, 2u);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to get CGImage copy: %s", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000ACF28(v4, 2u);
      }
      else
      {
        sub_1000ACF28(v4, 2u);
        sub_1000ACF28(v4, 2u);
        swift_errorRelease();
      }
      CGImageRef result = 0;
      break;
    case 3:
      return result;
    default:
      CGImageRef imageOut = 0;
      VTCreateCGImageFromCVPixelBuffer(v4, 0, &imageOut);
      sub_1000ACF28(v4, 0);
      CGImageRef result = imageOut;
      break;
  }
  return result;
}

uint64_t sub_1003991F4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(double *__return_ptr))(a2 + 48))(v4);
  if (v4[0] == 0.0) {
    return 1;
  }
  uint64_t result = 3;
  if (v4[0] != 3.14159265 && v4[0] != -3.14159265)
  {
    uint64_t result = 6;
    if (v4[0] != 1.57079633 && v4[0] != -1.57079633)
    {
      if (v4[0] == -4.71238898 || v4[0] == 4.71238898) {
        return 8;
      }
      else {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1003992A4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 48))(v11);
  if (v12)
  {
    unsigned int v4 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    char v6 = v4;
    if (v5)
    {
      IOSurfaceRef v7 = 0;
    }
    else
    {
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v4);
      IOSurfaceRef v7 = IOSurface;
      if (IOSurface) {
        os_log_type_t v9 = IOSurface;
      }
      unsigned __int8 v5 = 0;
    }
    sub_1000ACF28(v6, v5);
    return (uint64_t)v7;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100399398(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  (*(void (**)(void *__return_ptr))(a2 + 48))(v21);
  if (v22)
  {
    char v12 = sub_100398EE0(a1, a2);
    if (!v12) {
      return 0;
    }
    double v13 = v12;
    double Width = (double)(uint64_t)CGImageGetWidth(v12);
    double Height = (double)(uint64_t)CGImageGetHeight(v13);
    v23.origin.CGFloat x = a3;
    v23.origin.CGFloat y = a4;
    v23.size.CGFloat width = a5;
    v23.size.CGFloat height = a6;
    CGFloat v16 = CGRectGetMinX(v23) * Width;
    v24.origin.CGFloat x = a3;
    v24.origin.CGFloat y = a4;
    v24.size.CGFloat width = a5;
    v24.size.CGFloat height = a6;
    CGFloat v17 = CGRectGetMinY(v24) * Height;
    v25.origin.CGFloat x = a3;
    v25.origin.CGFloat y = a4;
    v25.size.CGFloat width = a5;
    v25.size.CGFloat height = a6;
    CGFloat v18 = CGRectGetWidth(v25) * Width;
    v26.origin.CGFloat x = a3;
    v26.origin.CGFloat y = a4;
    v26.size.CGFloat width = a5;
    v26.size.CGFloat height = a6;
    v27.size.CGFloat height = CGRectGetHeight(v26) * Height;
    v27.origin.CGFloat x = v16;
    v27.origin.CGFloat y = v17;
    v27.size.CGFloat width = v18;
    CGImageRef v19 = CGImageCreateWithImageInRect(v13, v27);

    return (uint64_t)v19;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LookupState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LookupState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LookupState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupState()
{
  return &type metadata for LookupState;
}

unint64_t sub_100399650()
{
  unint64_t result = qword_10052C630;
  if (!qword_10052C630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C630);
  }
  return result;
}

unint64_t sub_1003996A4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for VisualIntelligenceLookupResult(0);
    _StringGuts.grow(_:)(16);
    v1._uint64_t countAndFlagsBits = 0x6552747372696620;
    v1._unint64_t object = (void *)0xEE00203A746C7573;
    String.append(_:)(v1);
    _print_unlocked<A, B>(_:_:)();
    v2._uint64_t countAndFlagsBits = 0;
    v2._unint64_t object = (void *)0xE000000000000000;
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
  }
  return 0xD000000000000028;
}

Swift::Int sub_1003997CC(uint64_t a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for VisualIntelligenceLookupResult(0) - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      sub_1003E4DFC((uint64_t)v7);
      v4 += v5;
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_10039989C(uint64_t *a1, uint64_t *a2)
{
  return sub_1003E2274(*a1, *a2);
}

Swift::Int sub_1003998A8()
{
  return sub_1003997CC(*v0);
}

void sub_1003998B0(uint64_t a1)
{
  uint64_t v3 = *v1;
  Hasher._combine(_:)(0);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = *(void *)(type metadata accessor for VisualIntelligenceLookupResult(0) - 8);
    uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    do
    {
      sub_1003E4DFC(a1);
      v6 += v7;
      --v4;
    }
    while (v4);
  }
}

Swift::Int sub_100399964()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for VisualIntelligenceLookupResult(0) - 8);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      sub_1003E4DFC((uint64_t)v7);
      v4 += v5;
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_100399A30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  uint64_t v44 = type metadata accessor for EmptyResultsView();
  __chkstk_darwin(v44);
  uint64_t v4 = (uint64_t *)((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v38 = (uint64_t)&v37 - v6;
  uint64_t v42 = sub_10000F214(&qword_10052C638);
  __chkstk_darwin(v42);
  uint64_t v43 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Spring();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  char v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = (int *)type metadata accessor for VisualLookupSiriView();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000F214(&qword_10052C640);
  __chkstk_darwin(v41);
  CGFloat v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v20 = (char *)&v37 - v19;
  uint64_t v21 = sub_10000F214(&qword_10052C648);
  __chkstk_darwin(v21 - 8);
  int64_t v40 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(*(void *)v39 + 16))
  {
    sub_10039A58C(*(void *)v39 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), (uint64_t)v12, type metadata accessor for VisualIntelligenceLookupResult);
    Spring.init(response:dampingRatio:)();
    SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
    uint64_t v23 = v13[8];
    sub_10000F214(&qword_100518FE8);
    swift_allocObject();
    *(void *)&v15[v23] = PassthroughSubject.init()();
    sub_10039A58C((uint64_t)v12, (uint64_t)v15, type metadata accessor for VisualIntelligenceLookupResult);
    CGRect v24 = &v15[v13[5]];
    char v46 = 0;
    State.init(wrappedValue:)();
    uint64_t v25 = v48;
    *CGRect v24 = v47;
    *((void *)v24 + 1) = v25;
    id v26 = objc_allocWithZone((Class)type metadata accessor for Context());
    uint64_t v27 = Context.init(idiom:)();
    sub_10039A5F4((uint64_t)v12, type metadata accessor for VisualIntelligenceLookupResult);
    *(void *)&v15[v13[6]] = v27;
    sub_10039A478(&qword_10052C650, (void (*)(uint64_t))type metadata accessor for VisualLookupSiriView);
    View.accessibilityIdentifier(_:)();
    sub_10039A5F4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for VisualLookupSiriView);
    sub_10000FC34((uint64_t)v17, (uint64_t)v20, &qword_10052C640);
    sub_10039A334((uint64_t)v20, v43);
    swift_storeEnumTagMultiPayload();
    sub_10039A39C();
    sub_10039A478(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    uint64_t v28 = (uint64_t)v40;
    _ConditionalContent<>.init(storage:)();
    sub_10039A4C0((uint64_t)v20);
  }
  else
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v29 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v31 = v30;
    *uint64_t v4 = swift_getKeyPath();
    sub_10000F214(&qword_100522BF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = v44;
    uint64_t v33 = (uint64_t *)((char *)v4 + *(int *)(v44 + 20));
    *uint64_t v33 = v29;
    v33[1] = v31;
    uint64_t v34 = (uint64_t *)((char *)v4 + *(int *)(v32 + 24));
    *uint64_t v34 = 0xD000000000000023;
    v34[1] = 0x800000010042CBE0;
    uint64_t v35 = v38;
    sub_10039A528((uint64_t)v4, v38);
    sub_10039A58C(v35, v43, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
    swift_storeEnumTagMultiPayload();
    sub_10039A39C();
    sub_10039A478(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    uint64_t v28 = (uint64_t)v40;
    _ConditionalContent<>.init(storage:)();
    sub_10039A5F4(v35, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
  }
  return sub_10000FC34(v28, v45, &qword_10052C648);
}

uint64_t destroy for VisualIntelligenceLookupView()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for VisualIntelligenceLookupView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VisualIntelligenceLookupView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for VisualIntelligenceLookupView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for VisualIntelligenceLookupView()
{
  return &type metadata for VisualIntelligenceLookupView;
}

uint64_t sub_10039A318()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10039A334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10052C640);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10039A39C()
{
  unint64_t result = qword_10052C658;
  if (!qword_10052C658)
  {
    sub_10000F69C(&qword_10052C640);
    sub_10039A478(&qword_10052C650, (void (*)(uint64_t))type metadata accessor for VisualLookupSiriView);
    sub_10039A478((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C658);
  }
  return result;
}

uint64_t sub_10039A478(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10039A4C0(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052C640);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10039A528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EmptyResultsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10039A58C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10039A5F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10039A658()
{
  unint64_t result = qword_10052C660;
  if (!qword_10052C660)
  {
    sub_10000F69C(&qword_10052C648);
    sub_10039A39C();
    sub_10039A478(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C660);
  }
  return result;
}

unint64_t sub_10039A708(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0x6F6E206B63617254;
      break;
    case 4:
      unint64_t result = 0x7070757320746F4ELL;
      break;
    case 5:
      unint64_t result = 0x6C706D6920746F4ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10039A804()
{
  return sub_10039A708(*v0);
}

uint64_t sub_10039A80C()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Camera()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for CameraCommand(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((v4 + 1) <= 1) {
    id v5 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for CameraCommand(void **a1)
{
  uint64_t v1 = *a1;
  int v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    int v2 = (int)v1;
  }
  if ((v2 + 1) <= 1) {
}
  }

void **assignWithCopy for CameraCommand(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v5) = -1;
  }
  else {
    id v5 = *a1;
  }
  unsigned int v6 = v5 + 1;
  uint64_t v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  unsigned int v8 = v4 + 1;
  if (v6 > 1)
  {
    if (v8 <= 1)
    {
      *a1 = v7;
      id v10 = v7;
      return a1;
    }
LABEL_12:
    *a1 = v7;
    return a1;
  }
  if (v8 > 1)
  {

    uint64_t v7 = *a2;
    goto LABEL_12;
  }
  *a1 = v7;
  id v9 = v7;

  return a1;
}

void **assignWithTake for CameraCommand(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v5) = -1;
  }
  else {
    id v5 = *a1;
  }
  unsigned int v6 = v5 + 1;
  uint64_t v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  unsigned int v8 = v4 + 1;
  if (v6 > 1) {
    goto LABEL_11;
  }
  if (v8 > 1)
  {

LABEL_11:
    *a1 = v7;
    return a1;
  }
  *a1 = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for CameraCommand(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 4) {
    return (v3 - 3);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CameraCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_10039AAA8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *sub_10039AAC8(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *unint64_t result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraCommand()
{
  return &type metadata for CameraCommand;
}

uint64_t sub_10039AB08(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(sub_10039AB28, v1, 0);
}

uint64_t sub_10039AB28()
{
  *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 104) + 112);
  return _swift_task_switch(sub_10039AB50, 0, 0);
}

uint64_t sub_10039AB50()
{
  unint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  id v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10039ACE4;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_10039ACE4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100346EAC, 0, 0);
}

uint64_t sub_10039ADE0(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(sub_10039AE00, v1, 0);
}

uint64_t sub_10039AE00()
{
  *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 104) + 112);
  return _swift_task_switch(sub_10039AE28, 0, 0);
}

uint64_t sub_10039AE28()
{
  unint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  id v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 16) + **(int **)(v6 + 16));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10039AFBC;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_10039AFBC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10034F534, 0, 0);
}

uint64_t sub_10039B0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10039B0DC, v3, 0);
}

uint64_t sub_10039B0DC()
{
  uint64_t v1 = *(void *)(v0[5] + 112);
  unint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_10039B180;
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  return sub_100345CF8(v5, v1, v3, v4);
}

uint64_t sub_10039B180(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_10039B290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10039B2B4, v3, 0);
}

uint64_t sub_10039B2B4()
{
  uint64_t v1 = *(void *)(v0[5] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10039B358;
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  return sub_100346270(v5, v1, v3, v4);
}

uint64_t sub_10039B358(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_10039B458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10039B47C, v3, 0);
}

uint64_t sub_10039B47C()
{
  uint64_t v1 = *(void *)(v0[5] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[6] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10039B180;
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  return sub_1003465BC(v5, v1, v3, v4);
}

uint64_t sub_10039B520(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return _swift_task_switch(sub_10039B540, v1, 0);
}

uint64_t sub_10039B540()
{
  *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 104) + 112);
  return _swift_task_switch(sub_10039B568, 0, 0);
}

uint64_t sub_10039B568()
{
  unint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 64) + **(int **)(v6 + 64));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10039ACE4;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_10039B6FC(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  v5[12] = a1;
  v5[13] = v4;
  return _swift_task_switch(sub_10039AB28, v4, 0);
}

uint64_t sub_10039B7AC(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  v5[12] = a1;
  v5[13] = v4;
  return _swift_task_switch(sub_10039AE00, v4, 0);
}

uint64_t sub_10039B85C(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10039B87C, v3, 0);
}

uint64_t sub_10039B87C()
{
  uint64_t v1 = *(void *)(v0[3] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10039B91C;
  uint64_t v3 = v0[2];
  return sub_1003458DC(v3, v1);
}

uint64_t sub_10039B91C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10039BA10(uint64_t a1, int a2)
{
  *(_DWORD *)(v3 + 144) = a2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v4;
  return _swift_task_switch(sub_10039BA34, v4, 0);
}

uint64_t sub_10039BA34()
{
  *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 104) + 112);
  return _swift_task_switch(sub_10039BA5C, 0, 0);
}

uint64_t sub_10039BA5C()
{
  unint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 32) + **(int **)(v6 + 32));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10039BBF4;
  uint64_t v8 = *(unsigned int *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 96);
  return v11(v9, v8, v5, v6);
}

uint64_t sub_10039BBF4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10039BD84;
  }
  else
  {
    *(void *)(v4 + 136) = a1;
    uint64_t v5 = sub_10039BD1C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10039BD1C()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 136);
  return v1(v2);
}

uint64_t sub_10039BD84()
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10039BDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[4] = a3;
  v9[5] = v8;
  _OWORD v9[2] = a1;
  v9[3] = a2;
  v9[1] = sub_100139DD8;
  return _swift_task_switch(sub_10039B0DC, v8, 0);
}

uint64_t sub_10039BEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[4] = a3;
  v9[5] = v8;
  _OWORD v9[2] = a1;
  v9[3] = a2;
  v9[1] = sub_10020EA98;
  return _swift_task_switch(sub_10039B2B4, v8, 0);
}

uint64_t sub_10039BF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[4] = a3;
  v9[5] = v8;
  _OWORD v9[2] = a1;
  v9[3] = a2;
  v9[1] = sub_100139DD8;
  return _swift_task_switch(sub_10039B47C, v8, 0);
}

uint64_t sub_10039C034(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  v5[12] = a1;
  v5[13] = v4;
  return _swift_task_switch(sub_10039B540, v4, 0);
}

uint64_t sub_10039C0E4(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v3;
  return _swift_task_switch(sub_10039C104, v3, 0);
}

uint64_t sub_10039C104()
{
  *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 104) + 112);
  return _swift_task_switch(sub_10039C12C, 0, 0);
}

uint64_t sub_10039C12C()
{
  unint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 72) + **(int **)(v6 + 72));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10039C2C0;
  uint64_t v8 = *(void *)(v0 + 96);
  return v10(v8, v5, v6);
}

uint64_t sub_10039C2C0()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10039BD84;
  }
  else {
    unint64_t v2 = sub_100345C30;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10039C3D4(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 128) = a2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v4;
  return _swift_task_switch(sub_10039C3F8, v4, 0);
}

uint64_t sub_10039C3F8()
{
  *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 104) + 112);
  return _swift_task_switch(sub_10039C420, 0, 0);
}

uint64_t sub_10039C420()
{
  unint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  uint64_t v5 = *(unsigned char *)(v0 + 128) & 1;
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v6);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 80) + **(int **)(v7 + 80));
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10039AFBC;
  uint64_t v9 = *(void *)(v0 + 96);
  return v11(v9, v5, v6, v7);
}

uint64_t sub_10039C5C8()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 96) = *v0;
  return _swift_task_switch(sub_10039C5E8, v2, 0);
}

uint64_t sub_10039C5E8()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 96) + 112);
  return _swift_task_switch(sub_10039C610, 0, 0);
}

uint64_t sub_10039C610()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 88) + **(int **)(v6 + 88));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003477D8;
  return v9(v5, v6);
}

uint64_t sub_10039C79C(char a1)
{
  *(unsigned char *)(v2 + 120) = a1;
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = *v1;
  return _swift_task_switch(sub_10039C7C0, v3, 0);
}

uint64_t sub_10039C7C0()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 96) + 112);
  return _swift_task_switch(sub_10039C7E8, 0, 0);
}

uint64_t sub_10039C7E8()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 96) + **(int **)(v6 + 96));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100346DB0;
  uint64_t v8 = *(unsigned __int8 *)(v0 + 120);
  return v10(v8, v5, v6);
}

uint64_t sub_10039C97C(char a1)
{
  *(unsigned char *)(v2 + 120) = a1;
  uint64_t v3 = *v1;
  *(void *)(v2 + 96) = *v1;
  return _swift_task_switch(sub_10039C9A0, v3, 0);
}

uint64_t sub_10039C9A0()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 96) + 112);
  return _swift_task_switch(sub_10039C9C8, 0, 0);
}

uint64_t sub_10039C9C8()
{
  unint64_t v1 = *(void *)(v0 + 104);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62)
  {
    uint64_t v3 = v1 & 0x3FFFFFFFFFFFFFFFLL;
    if (v2 == 1) {
      uint64_t v4 = &qword_100526528;
    }
    else {
      uint64_t v4 = &qword_100526518;
    }
    *(void *)(v0 + 80) = sub_10000F214(v4);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v3;
  }
  else
  {
    *(void *)(v0 + 80) = sub_10000F214(&qword_100526530);
    *(void *)(v0 + 88) = &off_1004F5500;
    *(void *)(v0 + 56) = v1;
  }
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v5);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 104) + **(int **)(v6 + 104));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003477D8;
  uint64_t v8 = *(unsigned __int8 *)(v0 + 120);
  return v10(v8, v5, v6);
}

unsigned char *storeEnumTagSinglePayload for CameraError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10039CC2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraError()
{
  return &type metadata for CameraError;
}

unint64_t sub_10039CC68()
{
  unint64_t result = qword_10052C7D8;
  if (!qword_10052C7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C7D8);
  }
  return result;
}

uint64_t sub_10039CCC0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&aBlock[-1] - v9;
  uint64_t v26 = static Color.red.getter();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11(v10, a2, v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for ColorScheme.light(_:))
  {
    uint64_t v13 = 1;
  }
  else if (v12 == enum case for ColorScheme.dark(_:))
  {
    uint64_t v13 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v13 = 0;
  }
  id v14 = [self traitCollectionWithUserInterfaceStyle:v13];
  v11(v7, a2, v4);
  unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v15, v7, v4);
  *(void *)(v17 + v16) = &v26;
  *(void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = a1;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_10039E184;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_10014C6EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  void aBlock[3] = &unk_1004F7448;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = a1;
  swift_retain();
  swift_release();
  [v14 performAsCurrentTraitCollection:v19];

  _Block_release(v19);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = v26;
    swift_release();
    return v23;
  }
  return result;
}

uint64_t sub_10039CFEC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&aBlock[-1] - v9;
  uint64_t v26 = static Color.red.getter();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11(v10, a2, v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for ColorScheme.light(_:))
  {
    uint64_t v13 = 1;
  }
  else if (v12 == enum case for ColorScheme.dark(_:))
  {
    uint64_t v13 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v13 = 0;
  }
  id v14 = [self traitCollectionWithUserInterfaceStyle:v13];
  v11(v7, a2, v4);
  unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v15, v7, v4);
  *(void *)(v17 + v16) = a1;
  *(void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = &v26;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_10039D4A8;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_100146854;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  void aBlock[3] = &unk_1004F72E0;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = a1;
  swift_retain();
  swift_release();
  [v14 performAsCurrentTraitCollection:v19];

  _Block_release(v19);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = v26;
    swift_release();
    return v23;
  }
  return result;
}

uint64_t sub_10039D318(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, v5, v7);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v10 != enum case for ColorScheme.light(_:) && v10 != enum case for ColorScheme.dark(_:)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  id v11 = (id)CUIKAdjustedColorForColor();
  id v12 = (id)CUIKBackgroundColorForCalendarColorWithOpaqueForStyle();
  uint64_t v13 = Color.init(uiColor:)();

  *a3 = v13;
  return swift_release();
}

uint64_t sub_10039D4A8()
{
  return sub_10039E01C((uint64_t (*)(unint64_t, uint64_t, uint64_t))sub_10039D318);
}

uint64_t sub_10039D4C0()
{
  return swift_deallocObject();
}

uint64_t sub_10039D4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10039D4E0()
{
  return swift_release();
}

uint64_t sub_10039D4E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v4 = (id)CUIKAdjustedColorForColor();
  *a3 = Color.init(uiColor:)();

  return swift_release();
}

uint64_t sub_10039D534(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v9 != enum case for ColorScheme.light(_:) && v9 != enum case for ColorScheme.dark(_:)) {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  id v10 = (id)CUIKOccurrenceTextColor();
  *a2 = Color.init(_:)();
  return swift_release();
}

uint64_t sub_10039D6C8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v10 = (char *)&aBlock[-1] - v9;
  id v28 = [self systemRedColor];
  id v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11(v10, a2, v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for ColorScheme.light(_:))
  {
    uint64_t v13 = 1;
  }
  else if (v12 == enum case for ColorScheme.dark(_:))
  {
    uint64_t v13 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v13 = 0;
  }
  id v14 = [self traitCollectionWithUserInterfaceStyle:v13];
  v11(v7, a2, v4);
  unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v15, v7, v4);
  *(void *)(v17 + v16) = a1;
  *(void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = &v28;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_10039E004;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_10014C6EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  void aBlock[3] = &unk_1004F73D0;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = a1;
  swift_retain();
  swift_release();
  [v14 performAsCurrentTraitCollection:v19];

  _Block_release(v19);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    id v23 = v28;
    uint64_t v24 = Color.init(_:)();
    id v25 = v28;
    swift_release();

    return v24;
  }
  return result;
}

void sub_10039DA24(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, v5, v7);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v10 != enum case for ColorScheme.light(_:) && v10 != enum case for ColorScheme.dark(_:)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  id v11 = (id)CUIKOccurrenceSecondaryTextColor();
  int v12 = *a3;
  *a3 = v11;
}

uint64_t sub_10039DBB0(void *a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = __chkstk_darwin(v7);
  int v10 = (char *)&aBlock[-1] - v9;
  id v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v11((char *)&aBlock[-1] - v9, a2, v3, v8);
  int v12 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v13 = v12(v10, v3);
  int v14 = enum case for ColorScheme.light(_:);
  if (v13 == enum case for ColorScheme.light(_:))
  {
    uint64_t v15 = 1;
  }
  else if (v13 == enum case for ColorScheme.dark(_:))
  {
    uint64_t v15 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    uint64_t v15 = 0;
  }
  uint64_t v28 = static Color.red.getter();
  ((void (*)(char *, uint64_t, uint64_t))v11)(v6, a2, v3);
  int v16 = v12(v6, v3);
  if (v16 == v14)
  {
    uint64_t v17 = 1;
  }
  else if (v16 == enum case for ColorScheme.dark(_:))
  {
    uint64_t v17 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v17 = 0;
  }
  id v18 = [self traitCollectionWithUserInterfaceStyle:v17];
  uint64_t v19 = (void *)swift_allocObject();
  id v20 = v26;
  void v19[2] = v26;
  v19[3] = v15;
  _OWORD v19[4] = &v28;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10039DF38;
  *(void *)(v21 + 24) = v19;
  aBlock[4] = sub_10014C6EC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100109E30;
  void aBlock[3] = &unk_1004F7358;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v20;
  swift_retain();
  swift_release();
  [v18 performAsCurrentTraitCollection:v22];

  _Block_release(v22);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v20)
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = v28;
    swift_release();
    return v25;
  }
  return result;
}

uint64_t sub_10039DF00()
{
  return swift_deallocObject();
}

uint64_t sub_10039DF38()
{
  return sub_10039D4E8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_10039DF44()
{
  return swift_deallocObject();
}

uint64_t sub_10039DF58()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10039E004()
{
  return sub_10039E01C((uint64_t (*)(unint64_t, uint64_t, uint64_t))sub_10039DA24);
}

uint64_t sub_10039E01C(uint64_t (*a1)(unint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ColorScheme() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v1 + v4);
  uint64_t v6 = *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v5, v6);
}

uint64_t sub_10039E0C8()
{
  return swift_deallocObject();
}

uint64_t sub_10039E0D8()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10039E184()
{
  uint64_t v1 = *(void *)(type metadata accessor for ColorScheme() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = *(uint64_t **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10039D534(v0 + v2, v3);
}

uint64_t sub_10039E21C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ResultErrorView()
{
  return &type metadata for ResultErrorView;
}

uint64_t sub_10039E254()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10039E270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v93 = a1;
  uint64_t v94 = a2;
  uint64_t v106 = a3;
  uint64_t v101 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v101);
  uint64_t v100 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Material();
  uint64_t v102 = *(void *)(v4 - 8);
  uint64_t v103 = v4;
  __chkstk_darwin(v4);
  uint64_t v92 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052C7E0);
  __chkstk_darwin(v6 - 8);
  double v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052C7E8);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10052C7F0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10052C7F8);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_10052C800);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  uint64_t v91 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000F214(&qword_10052C808) - 8;
  __chkstk_darwin(v95);
  uint64_t v24 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000F214(&qword_100527280) - 8;
  __chkstk_darwin(v96);
  uint64_t v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_100527288);
  __chkstk_darwin(v27 - 8);
  uint64_t v97 = (uint64_t)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000F214(&qword_10052C810) - 8;
  __chkstk_darwin(v99);
  uint64_t v98 = (uint64_t)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_10000F214(&qword_10052C818);
  __chkstk_darwin(v105);
  uint64_t v104 = (uint64_t)&v90 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)double v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0x4010000000000000;
  unsigned char v8[16] = 0;
  uint64_t v31 = sub_10000F214(&qword_10052C820);
  sub_10039EAEC(v93, v94, (uint64_t)&v8[*(int *)(v31 + 44)]);
  sub_10000FB74((uint64_t)v8, (uint64_t)v11, &qword_10052C7E0);
  sub_10000FBD8((uint64_t)v8, &qword_10052C7E0);
  LOBYTE(v8) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_10000FB74((uint64_t)v11, (uint64_t)v15, &qword_10052C7E8);
  int64_t v40 = &v15[*(int *)(v13 + 44)];
  *int64_t v40 = (char)v8;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v35;
  *((void *)v40 + 3) = v37;
  *((void *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10000FBD8((uint64_t)v11, &qword_10052C7E8);
  LOBYTE(v11) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_10052C7F0);
  uint64_t v49 = &v19[*(int *)(v17 + 44)];
  *uint64_t v49 = (char)v11;
  *((void *)v49 + 1) = v42;
  *((void *)v49 + 2) = v44;
  *((void *)v49 + 3) = v46;
  *((void *)v49 + 4) = v48;
  v49[40] = 0;
  sub_10000FBD8((uint64_t)v15, &qword_10052C7F0);
  uint64_t v50 = v92;
  static Material.thick.getter();
  uint64_t v51 = v100;
  uint64_t v52 = &v100[*(int *)(v101 + 28)];
  uint64_t v53 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v54 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 104))(v52, v53, v54);
  __asm { FMOV            V0.2D, #22.0 }
  *uint64_t v51 = _Q0;
  uint64_t v60 = (uint64_t)v51;
  uint64_t v61 = (uint64_t)v91;
  uint64_t v62 = &v91[*(int *)(v21 + 44)];
  uint64_t v64 = v102;
  uint64_t v63 = v103;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v62, v50, v103);
  uint64_t v65 = sub_10000F214(&qword_10051B880);
  sub_10002DFC8(v60, (uint64_t)&v62[*(int *)(v65 + 52)]);
  *(_WORD *)&v62[*(int *)(v65 + 56)] = 256;
  uint64_t v66 = v61;
  sub_10000FB74((uint64_t)v19, v61, &qword_10052C7F8);
  sub_10002D5A4(v60);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v50, v63);
  sub_10000FBD8((uint64_t)v19, &qword_10052C7F8);
  uint64_t v67 = static Alignment.center.getter();
  uint64_t v69 = v68;
  uint64_t v70 = (uint64_t)&v24[*(int *)(v95 + 44)];
  sub_10039F61C(v70);
  uint64_t v71 = (uint64_t *)(v70 + *(int *)(sub_10000F214(&qword_100519920) + 36));
  uint64_t *v71 = v67;
  v71[1] = v69;
  sub_10000FC34(v66, (uint64_t)v24, &qword_10052C800);
  LOBYTE(v70) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v79 = v78;
  sub_10000FB74((uint64_t)v24, (uint64_t)v26, &qword_10052C808);
  uint64_t v80 = &v26[*(int *)(v96 + 44)];
  *uint64_t v80 = v70;
  *((void *)v80 + 1) = v73;
  *((void *)v80 + 2) = v75;
  *((void *)v80 + 3) = v77;
  *((void *)v80 + 4) = v79;
  v80[40] = 0;
  sub_10000FBD8((uint64_t)v24, &qword_10052C808);
  uint64_t v81 = static Alignment.center.getter();
  uint64_t v82 = v97;
  sub_100227428(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v97, 0.0, 1, 0.0, 1, v81, v83);
  sub_10000FBD8((uint64_t)v26, &qword_100527280);
  static Color.black.getter();
  uint64_t v84 = Color.opacity(_:)();
  swift_release();
  uint64_t v85 = v98;
  sub_10000FB74(v82, v98, &qword_100527288);
  uint64_t v86 = v85 + *(int *)(v99 + 44);
  *(void *)uint64_t v86 = v84;
  *(_OWORD *)(v86 + 8) = xmmword_10043D5B0;
  *(void *)(v86 + 24) = 0x4020000000000000;
  sub_10000FBD8(v82, &qword_100527288);
  static AnyTransition.move(edge:)();
  static AnyTransition.opacity.getter();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.blur(radius:)();
  uint64_t v87 = AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  uint64_t v88 = v104;
  sub_10000FB74(v85, v104, &qword_10052C810);
  *(void *)(v88 + *(int *)(v105 + 36)) = v87;
  sub_10000FBD8(v85, &qword_10052C810);
  sub_10039F988();
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8(v88, &qword_10052C818);
}

uint64_t sub_10039EAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v94 = a1;
  *((void *)&v94 + 1) = a2;
  uint64_t v86 = a3;
  uint64_t v79 = sub_10000F214(&qword_10051EF30);
  __chkstk_darwin(v79);
  uint64_t v95 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10052C878);
  uint64_t v82 = *(void *)(v4 - 8);
  uint64_t v83 = v4;
  __chkstk_darwin(v4);
  uint64_t v81 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_10000F214(&qword_10052C880);
  __chkstk_darwin(v80);
  uint64_t v85 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v84 = (uint64_t)&v79 - v8;
  uint64_t v87 = sub_10000F214(&qword_100519C68) - 8;
  __chkstk_darwin(v87);
  uint64_t v10 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000F214(&qword_100519C70);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_100519C78);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000F214(&qword_10052C888) - 8;
  __chkstk_darwin(v89);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000F214(&qword_100527290) - 8;
  __chkstk_darwin(v90);
  uint64_t v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000F214(&qword_100527298);
  __chkstk_darwin(v22 - 8);
  uint64_t v88 = (uint64_t)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000F214(&qword_10052C890) - 8;
  __chkstk_darwin(v92);
  uint64_t v91 = (uint64_t)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000F214(&qword_10052C898) - 8;
  __chkstk_darwin(v93);
  uint64_t v97 = (uint64_t)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v96 = (uint64_t)&v79 - v27;
  uint64_t v28 = enum case for Text.Case.uppercase(_:);
  uint64_t v29 = type metadata accessor for Text.Case();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 104))(v13, v28, v29);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v13, 0, 1, v29);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74(v13, (uint64_t)v10 + *(int *)(v87 + 36), &qword_100519C70);
  *uint64_t v10 = KeyPath;
  sub_10000FB74((uint64_t)v10, (uint64_t)&v17[*(int *)(v15 + 44)], &qword_100519C68);
  *(_OWORD *)uint64_t v17 = xmmword_10043D880;
  unsigned char v17[16] = 0;
  *((void *)v17 + 3) = _swiftEmptyArrayStorage;
  sub_10000FBD8((uint64_t)v10, &qword_100519C68);
  sub_10000FBD8(v13, &qword_100519C70);
  static Font.caption.getter();
  static Font.Weight.semibold.getter();
  uint64_t v32 = Font.weight(_:)();
  swift_release();
  uint64_t v33 = swift_getKeyPath();
  sub_10000FB74((uint64_t)v17, (uint64_t)v19, &qword_100519C78);
  uint64_t v34 = (uint64_t *)&v19[*(int *)(v89 + 44)];
  *uint64_t v34 = v33;
  v34[1] = v32;
  sub_10000FBD8((uint64_t)v17, &qword_100519C78);
  uint64_t v35 = swift_getKeyPath();
  sub_10000FB74((uint64_t)v19, (uint64_t)v21, &qword_10052C888);
  uint64_t v36 = &v21[*(int *)(v90 + 44)];
  *(void *)uint64_t v36 = v35;
  *((void *)v36 + 1) = 1;
  v36[16] = 0;
  sub_10000FBD8((uint64_t)v19, &qword_10052C888);
  uint64_t v37 = static Alignment.leading.getter();
  uint64_t v38 = v88;
  sub_100227484(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v88, 0.0, 1, 0.0, 1, v37, v39);
  sub_10000FBD8((uint64_t)v21, &qword_100527290);
  id v40 = [self secondaryLabelColor:v79];
  uint64_t v41 = Color.init(uiColor:)();
  uint64_t v42 = swift_getKeyPath();
  uint64_t v43 = v91;
  sub_10000FB74(v38, v91, &qword_100527298);
  uint64_t v44 = (uint64_t *)(v43 + *(int *)(v92 + 44));
  *uint64_t v44 = v42;
  v44[1] = v41;
  sub_10000FBD8(v38, &qword_100527298);
  uint64_t v45 = swift_getKeyPath();
  uint64_t v46 = v97;
  sub_10000FB74(v43, v97, &qword_10052C890);
  uint64_t v47 = (uint64_t *)(v46 + *(int *)(v93 + 44));
  *uint64_t v47 = v45;
  v47[1] = 0x3FE0000000000000;
  sub_10000FBD8(v43, &qword_10052C890);
  sub_10000FC34(v46, v96, &qword_10052C898);
  v115[0] = v94;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v48 = Text.init<A>(_:)();
  uint64_t v50 = v49;
  LOBYTE(v43) = v51 & 1;
  static Font.headline.getter();
  uint64_t v52 = Text.font(_:)();
  uint64_t v54 = v53;
  LOBYTE(v13) = v55;
  swift_release();
  LOBYTE(v38) = v13 & 1;
  sub_100012FAC(v48, v50, v43);
  swift_bridgeObjectRelease();
  LODWORD(v115[0]) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v56 = Text.foregroundStyle<A>(_:)();
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  LOBYTE(v13) = v61 & 1;
  uint64_t v62 = v52;
  uint64_t v63 = (uint64_t)v95;
  sub_100012FAC(v62, v54, v38);
  swift_bridgeObjectRelease();
  uint64_t v64 = swift_getKeyPath();
  uint64_t v109 = v56;
  uint64_t v110 = v58;
  char v111 = v13;
  uint64_t v112 = v60;
  uint64_t v113 = v64;
  char v114 = 0;
  static Alignment.leading.getter();
  sub_100224F40(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v108, 0.0, 1, 0.0, 1);
  sub_100012FAC(v56, v58, v13);
  swift_release();
  swift_bridgeObjectRelease();
  long long v104 = v108[6];
  long long v105 = v108[7];
  long long v106 = v108[8];
  long long v107 = v108[9];
  long long v100 = v108[2];
  long long v101 = v108[3];
  long long v102 = v108[4];
  long long v103 = v108[5];
  long long v98 = v108[0];
  long long v99 = v108[1];
  uint64_t v65 = enum case for DynamicTypeSize.accessibility2(_:);
  uint64_t v66 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 104))(v63, v65, v66);
  sub_1002C2EF0(&qword_10051EF68, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    sub_10000F214(&qword_100519C30);
    sub_10039FDC0((unint64_t *)&qword_100519C28, &qword_100519C30, (void (*)(void))sub_10008776C);
    sub_100013AA8(&qword_10051EF38, &qword_10051EF30);
    uint64_t v68 = v81;
    View.dynamicTypeSize<A>(_:)();
    sub_10000FBD8(v63, &qword_10051EF30);
    v115[6] = v104;
    v115[7] = v105;
    v115[8] = v106;
    v115[9] = v107;
    v115[2] = v100;
    v115[3] = v101;
    v115[4] = v102;
    v115[5] = v103;
    v115[0] = v98;
    v115[1] = v99;
    sub_100031C5C((uint64_t)v115);
    uint64_t v69 = swift_getKeyPath();
    uint64_t v71 = v82;
    uint64_t v70 = v83;
    uint64_t v72 = (uint64_t)v85;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v85, v68, v83);
    uint64_t v73 = v72 + *(int *)(v80 + 36);
    *(void *)uint64_t v73 = v69;
    *(void *)(v73 + 8) = 10;
    *(unsigned char *)(v73 + 16) = 0;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
    uint64_t v74 = v84;
    sub_10000FC34(v72, v84, &qword_10052C880);
    uint64_t v76 = v96;
    uint64_t v75 = v97;
    sub_10000FB74(v96, v97, &qword_10052C898);
    sub_10000FB74(v74, v72, &qword_10052C880);
    uint64_t v77 = v86;
    sub_10000FB74(v75, v86, &qword_10052C898);
    uint64_t v78 = sub_10000F214(&qword_10052C8A0);
    sub_10000FB74(v72, v77 + *(int *)(v78 + 48), &qword_10052C880);
    sub_10000FBD8(v74, &qword_10052C880);
    sub_10000FBD8(v76, &qword_10052C898);
    sub_10000FBD8(v72, &qword_10052C880);
    return sub_10000FBD8(v75, &qword_10052C898);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10039F61C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v1 = type metadata accessor for ColorRenderingMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RoundedRectangle();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (_OWORD *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000F214(&qword_100519A78);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100519A60);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (char *)v8 + *(int *)(v6 + 28);
  uint64_t v16 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v17 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  __asm { FMOV            V0.2D, #22.0 }
  *uint64_t v8 = _Q0;
  static Color.white.getter();
  uint64_t v23 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  sub_10002DFC8((uint64_t)v8, (uint64_t)v11);
  uint64_t v24 = &v11[*(int *)(sub_10000F214(&qword_100519A80) + 36)];
  long long v25 = v35;
  *(_OWORD *)uint64_t v24 = v34;
  *((_OWORD *)v24 + 1) = v25;
  *((void *)v24 + 4) = v36;
  uint64_t v26 = sub_10000F214(&qword_100519A88);
  *(void *)&v11[*(int *)(v26 + 52)] = v23;
  *(_WORD *)&v11[*(int *)(v26 + 56)] = 256;
  uint64_t v27 = static Alignment.center.getter();
  uint64_t v29 = v28;
  uint64_t v30 = (uint64_t *)&v11[*(int *)(sub_10000F214(&qword_100519A90) + 36)];
  *uint64_t v30 = v27;
  v30[1] = v29;
  sub_10002D5A4((uint64_t)v8);
  sub_10000FB74((uint64_t)v11, (uint64_t)v14, &qword_100519A78);
  uint64_t v31 = &v14[*(int *)(v12 + 36)];
  *(void *)uint64_t v31 = 0x4000000000000000;
  v31[8] = 0;
  sub_10000FBD8((uint64_t)v11, &qword_100519A78);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for ColorRenderingMode.nonLinear(_:), v1);
  sub_10002E7F4();
  View.drawingGroup(opaque:colorMode:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10000FBD8((uint64_t)v14, &qword_100519A60);
}

uint64_t sub_10039F980@<X0>(uint64_t a1@<X8>)
{
  return sub_10039E270(*v1, v1[1], a1);
}

unint64_t sub_10039F988()
{
  unint64_t result = qword_10052C828;
  if (!qword_10052C828)
  {
    sub_10000F69C(&qword_10052C818);
    sub_10039FDC0(&qword_10052C830, &qword_10052C810, (void (*)(void))sub_10039FA54);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C828);
  }
  return result;
}

uint64_t sub_10039FA54()
{
  return sub_10039FDC0(&qword_10052C838, &qword_100527288, (void (*)(void))sub_10039FA84);
}

uint64_t sub_10039FA84()
{
  return sub_10039FDC0(&qword_10052C840, &qword_100527280, (void (*)(void))sub_10039FAB4);
}

unint64_t sub_10039FAB4()
{
  unint64_t result = qword_10052C848;
  if (!qword_10052C848)
  {
    sub_10000F69C(&qword_10052C808);
    sub_10039FB54();
    sub_100013AA8(&qword_100519940, &qword_100519920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C848);
  }
  return result;
}

unint64_t sub_10039FB54()
{
  unint64_t result = qword_10052C850;
  if (!qword_10052C850)
  {
    sub_10000F69C(&qword_10052C800);
    sub_10039FDC0(&qword_10052C858, &qword_10052C7F8, (void (*)(void))sub_10039FC20);
    sub_100013AA8(&qword_10051B8B8, &qword_10051B880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C850);
  }
  return result;
}

uint64_t sub_10039FC20()
{
  return sub_10039FDC0(&qword_10052C860, &qword_10052C7F0, (void (*)(void))sub_10039FC50);
}

unint64_t sub_10039FC50()
{
  unint64_t result = qword_10052C868;
  if (!qword_10052C868)
  {
    sub_10000F69C(&qword_10052C7E8);
    sub_100013AA8(&qword_10052C870, &qword_10052C7E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C868);
  }
  return result;
}

uint64_t sub_10039FD10@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10039FD3C@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10039FD68()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10039FD90()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_10039FDC0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10039FE40()
{
  unint64_t result = qword_10052C8A8;
  if (!qword_10052C8A8)
  {
    sub_10000F69C(&qword_10052C8B0);
    sub_10039F988();
    sub_1002C2EF0((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C8A8);
  }
  return result;
}

unint64_t sub_10039FEEC(uint64_t a1)
{
  sub_100050838(a1, (uint64_t)v4);
  if (!*((void *)&v4[0] + 1)) {
    return 0xD000000000000022;
  }
  long long v6 = v4[0];
  long long v7 = v4[1];
  long long v8 = v4[2];
  uint64_t v9 = v5;
  _StringGuts.grow(_:)(28);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v1._unint64_t object = (void *)0x800000010042CCF0;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0;
  v2._unint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

double sub_1003A0008()
{
  double result = 12.0;
  xmmword_10052C8B8 = xmmword_10043D870;
  *(_OWORD *)&qword_10052C8C8 = xmmword_10043D870;
  return result;
}

BOOL sub_1003A0020(uint64_t a1, uint64_t a2)
{
  sub_100050838(a1, (uint64_t)v4);
  sub_100050838(a2, (uint64_t)v5);
  return sub_1003A1C28((uint64_t)v4, (uint64_t)v5);
}

Swift::Int sub_1003A006C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    sub_10008997C();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1003A010C()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    sub_10008997C();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1003A0184()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    sub_10008997C();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1003A0220@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v109 = a1;
  uint64_t v99 = sub_10000F214(&qword_10052C8E0);
  uint64_t v92 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v91 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Spring();
  __chkstk_darwin(v4 - 8);
  uint64_t v87 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for SmartDialogAnimationSettings();
  uint64_t v90 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v88 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v89 = (char *)&v83 - v8;
  uint64_t v95 = sub_10000F214(&qword_10052C8E8);
  __chkstk_darwin(v95);
  uint64_t v97 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for SafetyInterstitial();
  __chkstk_darwin(v96);
  uint64_t v83 = (uint64_t *)((char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)&v83 - v12;
  uint64_t v105 = sub_10000F214(&qword_10052C8F0);
  __chkstk_darwin(v105);
  long long v98 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_10000F214(&qword_10052C8F8);
  __chkstk_darwin(v102);
  uint64_t v104 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  long long v94 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v17 - 8);
  uint64_t v93 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for EmptyResultsView();
  __chkstk_darwin(v101);
  uint64_t v20 = (uint64_t *)((char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v85 = (uint64_t)&v83 - v22;
  uint64_t v106 = sub_10000F214(&qword_10052C900);
  __chkstk_darwin(v106);
  long long v103 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000F214(&qword_10052C908);
  __chkstk_darwin(v108);
  uint64_t v107 = (uint64_t)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for LatencyTextStyle();
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (uint64_t *)((char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v83 - v29;
  uint64_t v31 = sub_10000F214(&qword_1005256D8);
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_1005256E0);
  __chkstk_darwin(v34 - 8);
  uint64_t v36 = (char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000F214(&qword_100526938);
  __chkstk_darwin(v37);
  uint64_t v39 = (char *)&v83 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v83 - v41;
  sub_100050838(v2, (uint64_t)v111);
  sub_100050838((uint64_t)v111, (uint64_t)v112);
  if (*((void *)&v112[0] + 1))
  {
    uint64_t v86 = v37;
    long long v114 = v112[0];
    long long v115 = v112[1];
    long long v116 = v112[2];
    uint64_t v43 = *(void *)&v112[0];
    uint64_t v117 = v113;
    uint64_t v44 = *((void *)&v112[0] + 1);
    uint64_t v45 = HIBYTE(*((void *)&v112[0] + 1)) & 0xFLL;
    if ((*((void *)&v112[0] + 1) & 0x2000000000000000) == 0) {
      uint64_t v45 = *(void *)&v112[0] & 0xFFFFFFFFFFFFLL;
    }
    if (!v45)
    {
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v54 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v56 = v55;
      sub_10000FC34((uint64_t)&v116 + 8, (uint64_t)&v118, &qword_10051D468);
      *uint64_t v20 = swift_getKeyPath();
      sub_10000F214(&qword_100522BF0);
      swift_storeEnumTagMultiPayload();
      uint64_t v57 = v101;
      uint64_t v58 = (uint64_t *)((char *)v20 + *(int *)(v101 + 20));
      *uint64_t v58 = v54;
      v58[1] = v56;
      sub_10000FC34((uint64_t)&v118, (uint64_t)v20 + *(int *)(v57 + 24), &qword_10051D468);
      uint64_t v59 = v85;
      sub_1003A2A20((uint64_t)v20, v85, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
      sub_1003A2A88(v59, v104, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
      swift_storeEnumTagMultiPayload();
      sub_100110F38((uint64_t)&v118);
      sub_1003A2884(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
      sub_1003A2738();
      uint64_t v60 = (uint64_t)v103;
      _ConditionalContent<>.init(storage:)();
      sub_1003A2AF0(v59, (uint64_t (*)(void))type metadata accessor for EmptyResultsView);
      uint64_t v61 = v107;
LABEL_13:
      uint64_t v52 = &qword_10052C900;
      sub_10000FB74(v60, v61, &qword_10052C900);
      swift_storeEnumTagMultiPayload();
      sub_1003A2808(&qword_10052C958, &qword_100526938, (void (*)(void))sub_100218390);
      sub_1003A28CC();
      _ConditionalContent<>.init(storage:)();
      uint64_t v53 = v60;
      return sub_10000FBD8(v53, v52);
    }
    if (v115)
    {
      long long v118 = *(_OWORD *)(v2 + 56);
      swift_bridgeObjectRetain();
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.getter();
      if ((v110 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v70 = swift_allocObject();
        long long v71 = *(_OWORD *)(v2 + 48);
        *(_OWORD *)(v70 + 48) = *(_OWORD *)(v2 + 32);
        *(_OWORD *)(v70 + 64) = v71;
        *(void *)(v70 + 80) = *(void *)(v2 + 64);
        long long v72 = *(_OWORD *)(v2 + 16);
        *(_OWORD *)(v70 + 16) = *(_OWORD *)v2;
        *(_OWORD *)(v70 + 32) = v72;
        sub_1003A29D4((uint64_t *)v2);
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v73 = String.init(localized:table:bundle:locale:comment:)();
        uint64_t v75 = v74;
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v77 = (uint64_t)v83;
        *uint64_t v83 = KeyPath;
        sub_10000F214(&qword_100522BF0);
        swift_storeEnumTagMultiPayload();
        uint64_t v78 = v96;
        uint64_t v79 = (uint64_t *)(v77 + *(int *)(v96 + 20));
        *uint64_t v79 = v73;
        v79[1] = v75;
        uint64_t v80 = (uint64_t (**)())(v77 + *(int *)(v78 + 24));
        *uint64_t v80 = sub_1003A29CC;
        v80[1] = (uint64_t (*)())v70;
        uint64_t v81 = v84;
        sub_1003A2A20(v77, v84, (uint64_t (*)(void))type metadata accessor for SafetyInterstitial);
        sub_1003A2A88(v81, v97, (uint64_t (*)(void))type metadata accessor for SafetyInterstitial);
        swift_storeEnumTagMultiPayload();
        sub_1003A2884(&qword_100525E90, (void (*)(uint64_t))type metadata accessor for SafetyInterstitial);
        sub_100013AA8(&qword_10052C948, &qword_10052C8E0);
        uint64_t v69 = (uint64_t)v98;
        _ConditionalContent<>.init(storage:)();
        sub_1003A2AF0(v81, (uint64_t (*)(void))type metadata accessor for SafetyInterstitial);
        goto LABEL_12;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_10000F214(&qword_100518FE8);
    swift_allocObject();
    uint64_t v62 = PassthroughSubject.init()();
    Spring.init(response:dampingRatio:)();
    uint64_t v63 = v89;
    SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
    uint64_t v64 = v90;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v88, v63, v100);
    *(void *)&long long v118 = v62;
    sub_100013AA8(&qword_100518FF0, &qword_100518FE8);
    Publisher.eraseToAnyPublisher()();
    uint64_t v65 = (void *)swift_allocObject();
    v65[2] = v43;
    v65[3] = v44;
    v65[4] = v62;
    swift_retain();
    sub_10000F214(&qword_10052C910);
    sub_1003A2808(&qword_10052C918, &qword_10052C910, (void (*)(void))sub_1003A262C);
    uint64_t v66 = v91;
    SmartDialog.init(animationSettings:animationTrigger:header:body:)();
    uint64_t v67 = v92;
    uint64_t v68 = v99;
    (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v97, v66, v99);
    swift_storeEnumTagMultiPayload();
    sub_1003A2884(&qword_100525E90, (void (*)(uint64_t))type metadata accessor for SafetyInterstitial);
    sub_100013AA8(&qword_10052C948, &qword_10052C8E0);
    uint64_t v69 = (uint64_t)v98;
    _ConditionalContent<>.init(storage:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v100);
LABEL_12:
    uint64_t v61 = v107;
    sub_10000FB74(v69, v104, &qword_10052C8F0);
    swift_storeEnumTagMultiPayload();
    sub_1003A2884(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    sub_1003A2738();
    uint64_t v60 = (uint64_t)v103;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v69, &qword_10052C8F0);
    goto LABEL_13;
  }
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v105 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v104 = v46;
  LODWORD(v103) = v47;
  uint64_t v49 = v48;
  *uint64_t v27 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  sub_1003A2A20((uint64_t)v27, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
  sub_1003A2A88((uint64_t)v30, (uint64_t)&v33[*(int *)(v31 + 36)], (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
  uint64_t v50 = v104;
  *(void *)uint64_t v33 = v105;
  *((void *)v33 + 1) = v50;
  v33[16] = v103 & 1;
  *((void *)v33 + 3) = v49;
  sub_1003A2AF0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for LatencyTextStyle);
  sub_10021843C();
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8((uint64_t)v33, &qword_1005256D8);
  sub_10000FB74((uint64_t)v36, (uint64_t)v39, &qword_1005256E0);
  char v51 = (uint64_t (**)())&v39[*(int *)(v37 + 36)];
  *char v51 = sub_1003A1370;
  v51[1] = 0;
  void v51[2] = 0;
  v51[3] = 0;
  sub_10000FBD8((uint64_t)v36, &qword_1005256E0);
  uint64_t v52 = &qword_100526938;
  sub_10000FC34((uint64_t)v39, (uint64_t)v42, &qword_100526938);
  sub_10000FB74((uint64_t)v42, v107, &qword_100526938);
  swift_storeEnumTagMultiPayload();
  sub_1003A2808(&qword_10052C958, &qword_100526938, (void (*)(void))sub_100218390);
  sub_1003A28CC();
  _ConditionalContent<>.init(storage:)();
  uint64_t v53 = (uint64_t)v42;
  return sub_10000FBD8(v53, v52);
}

uint64_t sub_1003A1370()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.Announcement();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v19 = v0;
  uint64_t v20 = v1;
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_1005269D8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v19 - v12;
  AttributedString.init(stringLiteral:)();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v14 = enum case for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority.high(_:);
  uint64_t v15 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v6, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
  sub_1002AA0B4();
  AttributedString.subscript.setter();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  AccessibilityNotification.Announcement.init(_:)();
  uint64_t v17 = v19;
  _AccessibilityNotifications.post()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_1003A1664()
{
  return swift_release();
}

uint64_t sub_1003A16D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)()@<X2>, uint64_t a4@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v49 = a4;
  uint64_t v46 = type metadata accessor for SummaryItemStandardView();
  *(void *)&long long v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10052C938);
  __chkstk_darwin(v7 - 8);
  uint64_t v44 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000F214(&qword_10052C928);
  __chkstk_darwin(v48);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = a1;
  uint64_t v66 = a2;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  id v16 = [self labelColor];
  Color.init(uiColor:)();
  uint64_t v17 = Text.foregroundColor(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  sub_100012FAC(v11, v13, v15);
  swift_bridgeObjectRelease();
  uint64_t v65 = v17;
  uint64_t v66 = v19;
  char v67 = v21 & 1;
  uint64_t v68 = v23;
  uint64_t v24 = View.eraseToAnyView()();
  sub_100012FAC(v17, v19, v21 & 1);
  swift_bridgeObjectRelease();
  uint64_t v68 = &type metadata for AnyView;
  uint64_t v69 = &protocol witness table for AnyView;
  uint64_t v65 = v24;
  uint64_t v64 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v25 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v27 = v26;
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  LOBYTE(v19) = v28 & 1;
  char v56 = v28 & 1;
  uint64_t v57 = v29;
  uint64_t v30 = View.eraseToAnyView()();
  char v31 = v19;
  uint64_t v32 = (uint64_t)v44;
  sub_100012FAC(v25, v27, v31);
  swift_bridgeObjectRelease();
  uint64_t v57 = &type metadata for AnyView;
  uint64_t v58 = &protocol witness table for AnyView;
  uint64_t v54 = v30;
  uint64_t v53 = 0;
  long long v52 = 0u;
  long long v51 = 0u;
  uint64_t v33 = v45;
  SummaryItemStandardView.init(text1:text2:text3:text4:thumbnail:)();
  sub_1003A2884(&qword_10052C940, (void (*)(uint64_t))&type metadata accessor for SummaryItemStandardView);
  uint64_t v34 = v46;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v34);
  if (qword_1005180E0 != -1) {
    swift_once();
  }
  long long v47 = xmmword_10052C8B8;
  uint64_t v35 = qword_10052C8C8;
  uint64_t v36 = unk_10052C8D0;
  char v37 = static Edge.Set.all.getter();
  sub_10000FB74(v32, (uint64_t)v10, &qword_10052C938);
  uint64_t v38 = &v10[*(int *)(v48 + 36)];
  *uint64_t v38 = v37;
  *(_OWORD *)(v38 + 8) = v47;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v36;
  v38[40] = 0;
  sub_10000FBD8(v32, &qword_10052C938);
  uint64_t v39 = v49;
  sub_10000FB74((uint64_t)v10, v49, &qword_10052C928);
  uint64_t v40 = (uint64_t (**)())(v39 + *(int *)(sub_10000F214(&qword_10052C910) + 36));
  uint64_t v41 = v50;
  *uint64_t v40 = sub_1002C2958;
  v40[1] = v41;
  v40[2] = 0;
  v40[3] = 0;
  swift_retain();
  return sub_10000FBD8((uint64_t)v10, &qword_10052C928);
}

uint64_t sub_1003A1BE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003A0220(a1);
}

BOOL sub_1003A1C28(uint64_t a1, uint64_t a2)
{
  sub_100050838(a1, (uint64_t)&v27);
  uint64_t v3 = v28;
  if (v28)
  {
    uint64_t v4 = v27;
    int v5 = v29;
    uint64_t v7 = v30;
    uint64_t v6 = v31;
    uint64_t v9 = v32;
    uint64_t v8 = v33;
    sub_100050838(a2, (uint64_t)&v20);
    if (!v21) {
      return 0;
    }
    int v10 = v22;
    uint64_t v12 = v23;
    uint64_t v11 = v24;
    uint64_t v13 = v26;
    uint64_t v19 = v25;
    if (v4 != v20 || v3 != v21)
    {
      uint64_t v14 = v26;
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v13 = v14;
      if ((v15 & 1) == 0) {
        return 0;
      }
    }
    if ((v5 ^ v10)) {
      return 0;
    }
    if (v6)
    {
      if (!v11) {
        return 0;
      }
      if (v7 != v12 || v6 != v11)
      {
        uint64_t v17 = v13;
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v13 = v17;
        if ((v18 & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v11)
    {
      return 0;
    }
    if (v8)
    {
      if (v13 && (v9 == v19 && v8 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v13)
    {
      return 1;
    }
    return 0;
  }
  sub_100050838(a2, (uint64_t)&v20);
  return v21 == 0;
}

unint64_t destroy for SummarizationState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SummarizationState(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v4;
    uint64_t v5 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for SummarizationState(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SummarizationState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SummarizationState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SummarizationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

double sub_1003A211C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SummarizationState()
{
  return &type metadata for SummarizationState;
}

unint64_t sub_1003A2160()
{
  unint64_t result = qword_10052C8D8;
  if (!qword_10052C8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C8D8);
  }
  return result;
}

uint64_t destroy for SummarizationResultView(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for SummarizationResultView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v5;
    uint64_t v6 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SummarizationResultView(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1003A23F8(a1);
      long long v6 = a2[1];
      long long v5 = a2[2];
      long long v7 = *a2;
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v7;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v8;
  }
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1003A23F8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for SummarizationResultView(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    sub_1003A23F8(a1);
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SummarizationResultView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SummarizationResultView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SummarizationResultView()
{
  return &type metadata for SummarizationResultView;
}

uint64_t sub_1003A25C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1003A25E0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003A2620@<X0>(uint64_t a1@<X8>)
{
  return sub_1003A16D0(*(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)())(v1 + 32), a1);
}

uint64_t sub_1003A262C()
{
  return sub_1003A2808(&qword_10052C920, &qword_10052C928, (void (*)(void))sub_1003A265C);
}

unint64_t sub_1003A265C()
{
  unint64_t result = qword_10052C930;
  if (!qword_10052C930)
  {
    sub_10000F69C(&qword_10052C938);
    sub_1003A2884(&qword_10052C940, (void (*)(uint64_t))&type metadata accessor for SummaryItemStandardView);
    sub_1003A2884((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C930);
  }
  return result;
}

unint64_t sub_1003A2738()
{
  unint64_t result = qword_10052C950;
  if (!qword_10052C950)
  {
    sub_10000F69C(&qword_10052C8F0);
    sub_1003A2884(&qword_100525E90, (void (*)(uint64_t))type metadata accessor for SafetyInterstitial);
    sub_100013AA8(&qword_10052C948, &qword_10052C8E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C950);
  }
  return result;
}

uint64_t sub_1003A2808(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003A2884(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003A28CC()
{
  unint64_t result = qword_10052C960;
  if (!qword_10052C960)
  {
    sub_10000F69C(&qword_10052C900);
    sub_1003A2884(&qword_100523B58, (void (*)(uint64_t))type metadata accessor for EmptyResultsView);
    sub_1003A2738();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C960);
  }
  return result;
}

uint64_t sub_1003A2978()
{
  if (*(void *)(v0 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003A29CC()
{
  return sub_1003A1664();
}

uint64_t *sub_1003A29D4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1003A2A20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003A2A88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003A2AF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003A2B5C()
{
  return 8;
}

uint64_t sub_1003A2B68()
{
  return swift_release();
}

uint64_t sub_1003A2B70(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1003A2B84(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1003A2B90()
{
  return State.wrappedValue.setter();
}

unint64_t sub_1003A2BF0()
{
  unint64_t result = qword_10052C968;
  if (!qword_10052C968)
  {
    sub_10000F69C(&qword_10052C970);
    sub_1003A2808(&qword_10052C958, &qword_100526938, (void (*)(void))sub_100218390);
    sub_1003A28CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C968);
  }
  return result;
}

uint64_t destroy for AppIconView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_100161890(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return swift_release();
}

uint64_t initializeWithCopy for AppIconView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_10016180C(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  long long v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  id v9 = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppIconView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  sub_10016180C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  sub_100161890(v6, v7);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v9;
  id v10 = v9;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AppIconView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v5;
  sub_100161890(v6, v7);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AppIconView()
{
  return &type metadata for AppIconView;
}

uint64_t sub_1003A2E88()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1003A2EA4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v45 = *(long long *)((char *)v1 + 40);
  long long v30 = *(long long *)((char *)v1 + 40);
  sub_10000F214(&qword_10052C978);
  State.wrappedValue.getter();
  if ((void)v24)
  {
    id v8 = (id)v24;
    Image.init(uiImage:)();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v9 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    *(void *)&long long v24 = v9;
    *((void *)&v24 + 1) = v37;
    uint64_t v25 = v38;
    uint64_t v26 = v39;
    uint64_t v27 = v40;
    *(_OWORD *)uint64_t v28 = v41;
    *(_OWORD *)&v28[16] = 0u;
    memset(v29, 0, 25);
    swift_retain();
    sub_10000F214(&qword_1005234C0);
    sub_10000F214(&qword_10052C988);
    sub_1003A3C94((unint64_t *)&qword_1005234B8, &qword_1005234C0);
    sub_1003A3C00();
    _ConditionalContent<>.init(storage:)();
    swift_release();
  }
  else
  {
    sub_10000FC34((uint64_t)&v45, (uint64_t)&v47, &qword_10051EF58);
    sub_10000FC34((uint64_t)&v45 + 8, (uint64_t)v46, &qword_10052C980);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v10 = v37;
    uint64_t v11 = v38;
    uint64_t v12 = v39;
    uint64_t v13 = v40;
    long long v14 = v41;
    long long v44 = *v2;
    uint64_t v42 = *((void *)v2 + 3);
    char v43 = *((unsigned char *)v2 + 32);
    uint64_t v15 = swift_allocObject();
    long long v16 = v2[1];
    *(_OWORD *)(v15 + 16) = *v2;
    *(_OWORD *)(v15 + 32) = v16;
    *(_OWORD *)(v15 + 48) = v2[2];
    *(void *)(v15 + 64) = *((void *)v2 + 6);
    long long v24 = xmmword_10043ED80;
    uint64_t v25 = v10;
    uint64_t v26 = v11;
    uint64_t v27 = v12;
    *(void *)uint64_t v28 = v13;
    *(_OWORD *)&v28[8] = v14;
    *(void *)&unsigned char v28[24] = sub_1003A3BC8;
    v29[0] = (unint64_t)v15;
    *(void *)&v29[1] = 0;
    BYTE8(v29[1]) = 1;
    sub_100110F38((uint64_t)&v44);
    sub_1003A3BD0((uint64_t)&v42);
    sub_100107B18(&v47);
    sub_100062328((uint64_t)v46);
    sub_10000F214(&qword_1005234C0);
    sub_10000F214(&qword_10052C988);
    sub_1003A3C94((unint64_t *)&qword_1005234B8, &qword_1005234C0);
    sub_1003A3C00();
    _ConditionalContent<>.init(storage:)();
  }
  double result = *(double *)&v30;
  long long v18 = v31;
  long long v19 = v32;
  long long v20 = v33;
  long long v21 = v34;
  long long v22 = v35;
  char v23 = v36;
  *(_OWORD *)a1 = v30;
  *(_OWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 48) = v20;
  *(_OWORD *)(a1 + 64) = v21;
  *(_OWORD *)(a1 + 80) = v22;
  *(unsigned char *)(a1 + 96) = v23;
  return result;
}

uint64_t sub_1003A326C(long long *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  static TaskPriority.userInitiated.getter();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  long long v7 = *a1;
  long long v8 = a1[1];
  *(_OWORD *)(v6 + 32) = *a1;
  *(_OWORD *)(v6 + 48) = v8;
  *(_OWORD *)(v6 + 64) = a1[2];
  *(void *)(v6 + 80) = *((void *)a1 + 6);
  long long v15 = v7;
  uint64_t v13 = *((void *)a1 + 3);
  char v14 = *((unsigned char *)a1 + 32);
  long long v10 = *(long long *)((char *)a1 + 40);
  sub_10000FC34((uint64_t)&v10, (uint64_t)&v12, &qword_10051EF58);
  sub_10000FC34((uint64_t)&v10 + 8, (uint64_t)v11, &qword_10052C980);
  sub_100110F38((uint64_t)&v15);
  sub_1003A3BD0((uint64_t)&v13);
  sub_100107B18(&v12);
  sub_100062328((uint64_t)v11);
  sub_1002EF924((uint64_t)v4, (uint64_t)&unk_10052C9B0, v6);
  swift_release();
  return sub_1003A3E10((uint64_t)v4);
}

uint64_t sub_1003A33F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 48) = a4;
  sub_10000F214(&qword_10051A8C0);
  *(void *)(v4 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1003A3488, 0, 0);
}

uint64_t sub_1003A3488()
{
  uint64_t v1 = (void *)v0[6];
  v0[8] = *v1;
  v0[9] = v1[1];
  v0[10] = v1[2];
  v0[11] = type metadata accessor for MainActor();
  v0[12] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003A353C, v3, v2);
}

uint64_t sub_1003A353C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v0 + 104) = v2;
  LOBYTE(v1) = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 136) = v1;
  sub_10016180C(v2, v1);
  *(double *)(v0 + 112) = sub_10027D2F8(v2, v1);
  sub_100161890(v2, v1);
  return _swift_task_switch(sub_1003A35E0, 0, 0);
}

uint64_t sub_1003A35E0()
{
  *(void *)(v0 + 120) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003A366C, v2, v1);
}

uint64_t sub_1003A366C()
{
  double v1 = v0[14];
  double v2 = v0[10];
  swift_release();
  id v3 = [objc_allocWithZone((Class)ISImageDescriptor) initWithSize:v2 scale:v2];
  [v3 setDrawBorder:1];
  id v4 = objc_allocWithZone((Class)ISIcon);
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithBundleIdentifier:v5];

  id v7 = [v6 imageForDescriptor:v3];
  if (v7)
  {
    long long v8 = v7;
    if ([v7 placeholder])
    {
      id v9 = [v6 prepareImageForDescriptor:v3];
      id v10 = [v9 CGImage];
    }
    else
    {
      id v10 = [v8 CGImage];
    }
    *((void *)v0 + 16) = v10;

    return _swift_task_switch(sub_1003A3868, 0, 0);
  }
  else
  {

    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))*((void *)v0 + 1);
    return v11();
  }
}

uint64_t sub_1003A3868()
{
  double v1 = *(void **)(v0 + 128);
  if (v1)
  {
    char v2 = *(unsigned char *)(v0 + 136);
    uint64_t v3 = *(void *)(v0 + 104);
    NSString v5 = *(long long **)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
    *(_OWORD *)(v0 + 16) = *(long long *)((char *)v5 + 40);
    sub_10000FC34(v0 + 16, v0 + 32, &qword_10051EF58);
    sub_10000FC34(v0 + 24, v0 + 40, &qword_10052C980);
    sub_10016180C(v3, v2);
    swift_bridgeObjectRetain();
    sub_100107B18((id *)(v0 + 32));
    sub_100062328(v0 + 40);
    id v7 = v1;
    uint64_t v8 = static MainActor.shared.getter();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = &protocol witness table for MainActor;
    long long v10 = v5[2];
    uint64_t v11 = *((void *)v5 + 6);
    long long v12 = *v5;
    *(_OWORD *)(v9 + 48) = v5[1];
    *(_OWORD *)(v9 + 64) = v10;
    *(_OWORD *)(v9 + 32) = v12;
    *(void *)(v9 + 80) = v11;
    *(void *)(v9 + 88) = v7;
    sub_100064D5C(v4, (uint64_t)&unk_10052C9C0, v9);

    swift_release();
  }
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1003A3A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003A3ABC, v7, v6);
}

uint64_t sub_1003A3ABC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_release();
  id v3 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v1];
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v2 + 40);
  *(void *)(v0 + 32) = v3;
  sub_10000F214(&qword_10052C978);
  State.wrappedValue.setter();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1003A3B74()
{
  swift_bridgeObjectRelease();
  sub_100161890(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003A3BC8()
{
  return sub_1003A326C((long long *)(v0 + 16));
}

uint64_t sub_1003A3BD0(uint64_t a1)
{
  return a1;
}

unint64_t sub_1003A3C00()
{
  unint64_t result = qword_10052C990;
  if (!qword_10052C990)
  {
    sub_10000F69C(&qword_10052C988);
    sub_1003A3C94(&qword_10052C998, &qword_10052C9A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C990);
  }
  return result;
}

uint64_t sub_1003A3C94(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003A3D00()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_100161890(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003A3D5C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10000F878;
  return sub_1003A33F4(a1, v4, v5, v1 + 32);
}

uint64_t sub_1003A3E10(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003A3E70()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_100161890(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003A3ED4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[11];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_1003A3A24(a1, v4, v5, v6, v7);
}

unint64_t sub_1003A3F9C()
{
  unint64_t result = qword_10052C9C8;
  if (!qword_10052C9C8)
  {
    sub_10000F69C(&qword_10052C9D0);
    sub_1003A3C94((unint64_t *)&qword_1005234B8, &qword_1005234C0);
    sub_1003A3C00();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052C9C8);
  }
  return result;
}

uint64_t sub_1003A4030(uint64_t a1, uint64_t a2)
{
  return sub_1003A40A8(a1, a2, &qword_100521098, (uint64_t *)&unk_100521050, (void (*)(char *, uint64_t, uint64_t))sub_1002F4FF8, (void (*)(uint64_t))sub_1003F3960);
}

uint64_t sub_1003A406C(uint64_t a1, uint64_t a2)
{
  return sub_1003A40A8(a1, a2, &qword_1005242E8, &qword_1005242C8, (void (*)(char *, uint64_t, uint64_t))sub_1002F5490, (void (*)(uint64_t))sub_1003F3B1C);
}

uint64_t sub_1003A40A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(char *, uint64_t, uint64_t), void (*a6)(uint64_t))
{
  uint64_t v11 = v6;
  uint64_t v14 = sub_10000F214(a3);
  __chkstk_darwin(v14 - 8);
  long long v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(a4);
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = __chkstk_darwin(v17);
  long long v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v18 + 48))(a1, 1, v17, v19) == 1)
  {
    sub_10000FBD8(a1, a3);
    a6(a2);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a2, v22);
    return sub_10000FBD8((uint64_t)v16, a3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v21, a1, v17);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = *v11;
    *uint64_t v11 = 0x8000000000000000;
    a5(v21, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v11 = v27;
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a2, v25);
  }
}

unint64_t sub_1003A42E8(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1002F5C44(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
  }
  else
  {
    unint64_t result = sub_10032B09C(a2);
    if ((v8 & 1) == 0) {
      return result;
    }
    unint64_t v9 = result;
    int v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v13 = *v3;
    *id v3 = 0x8000000000000000;
    if (!v10)
    {
      sub_1001F7E74();
      uint64_t v11 = v13;
    }
    sub_1003F5188(v9, v11);
    *id v3 = v11;
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void sub_1003A43CC(void *a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_10052CEE8);
  v5.n128_f64[0] = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  unint64_t v8 = v1[1];
  unint64_t v10 = *(void *)(*v1 + 16);
  if (v8 == v10)
  {
    uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
    v11(a1, 1, 1, v3, v5);
  }
  else
  {
    if (v8 >= v10)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = v4;
      uint64_t v12 = *(void *)(type metadata accessor for CVDetection() - 8);
      uint64_t v13 = v9
          + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(void *)(v12 + 72) * v8;
      v1[1] = v8 + 1;
      uint64_t v14 = (uint64_t)&v7[*(int *)(v3 + 48)];
      uint64_t v15 = v1[2];
      sub_1003C1DB8(v13, v14, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (!__OFADD__(v15, 1))
      {
        v1[2] = v15 + 1;
        uint64_t v16 = (uint64_t)a1 + *(int *)(v3 + 48);
        *a1 = v15;
        sub_1003C1D08(v14, v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v3);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1003A45C4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_1005250E0);
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin(v2);
  long long v41 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000F214(&qword_10052CF20);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v40 = (uint64_t)&v36 - v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v37 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v46 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v39 = (char *)&type metadata for () + 8;
  uint64_t v13 = v41;
  uint64_t v14 = (uint64_t)v42;
  uint64_t v15 = v45;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v47 = v12;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v32 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v32 >= v38) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v37 + 8 * v32);
    int64_t v34 = v12 + 1;
    if (!v33)
    {
      int64_t v34 = v12 + 2;
      if (v12 + 2 >= v38) {
        return swift_release();
      }
      unint64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v12 + 3;
        if (v12 + 3 >= v38) {
          return swift_release();
        }
        unint64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v12 + 4;
          if (v12 + 4 >= v38) {
            return swift_release();
          }
          unint64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v33 - 1) & v33;
    int64_t v47 = v34;
    unint64_t v17 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_5:
    uint64_t v18 = v46;
    uint64_t v19 = *(void *)(v46 + 48);
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for CVDetection() - 8) + 72) * v17;
    uint64_t v21 = v40;
    sub_1003C1DB8(v20, v40, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v22 = *(void *)(v18 + 56) + *(void *)(v44 + 72) * v17;
    uint64_t v23 = v43;
    sub_10000FB74(v22, v21 + *(int *)(v43 + 48), &qword_1005250E0);
    sub_10000FC34(v21, v14, &qword_10052CF20);
    long long v24 = (void *)(v14 + *(int *)(v23 + 48));
    uint64_t v25 = *(int *)(v15 + 48);
    uint64_t v26 = (char *)v24 + v25;
    uint64_t v27 = (char *)v24 + *(int *)(v15 + 64);
    *uint64_t v13 = *v24;
    uint64_t v28 = (char *)v13 + v25;
    uint64_t v29 = sub_10000F214(&qword_10052CE98);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v28, v26, v29);
    long long v30 = (char *)v13 + *(int *)(v15 + 64);
    uint64_t v31 = sub_10000F214(&qword_10052CDD8);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v30, v27, v31);
    swift_retain();
    AsyncStream.Continuation.finish()();
    Task.cancel()();
    sub_10000FBD8((uint64_t)v13, &qword_1005250E0);
    uint64_t result = sub_10000FBD8(v14, &qword_10052CF20);
    int64_t v12 = v47;
  }
  uint64_t v35 = v12 + 5;
  if (v12 + 5 >= v38) {
    return swift_release();
  }
  unint64_t v33 = *(void *)(v37 + 8 * v35);
  if (v33)
  {
    int64_t v34 = v12 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v34 >= v38) {
      return swift_release();
    }
    unint64_t v33 = *(void *)(v37 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

int64x2_t *sub_1003A49F8(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = (int64x2_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return (int64x2_t *)_swiftEmptyArrayStorage;
  }
  uint64_t result = (int64x2_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[1].i64[0] = a2;
  uint64_t v5 = (unint64_t *)&result[2];
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = result + 3;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

void *sub_1003A4AE4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_10000F214(&qword_100518A90);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          int64x2_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    return v5;
  }
  return result;
}

void *sub_1003A4BD8(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[2] = a1;
  uint64_t v4 = (double *)(result + 4);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  uint64_t v8 = (int64x2_t *)(result + 6);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

int32x4_t *sub_1003A4CCC(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = (int32x4_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return (int32x4_t *)_swiftEmptyArrayStorage;
  }
  uint64_t result = (int32x4_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[1].i64[0] = a1;
  i32 = result[2].i32;
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *i32++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  i32 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  uint64_t v8 = result + 3;
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1003A4DC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v5 < v2) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

unint64_t sub_1003A4E04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    float v2 = *(float *)(a1 + 32);
    uint64_t v3 = v1 - 1;
    if (v1 != 1)
    {
      uint64_t v4 = (float *)(a1 + 36);
      do
      {
        float v5 = *v4++;
        float v6 = v5;
        if (v5 < v2) {
          float v2 = v6;
        }
        --v3;
      }
      while (v3);
    }
    uint64_t v7 = LODWORD(v2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

unint64_t *sub_1003A4E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_100206CD4(a1);
    return (unint64_t *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = sub_1003BEF8C(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_100207934(a1, v2);
}

void sub_1003A4F64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v18 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)(a5 + 16) <= a3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v21 = *(void *)(a5 + 8 * a3 + 32);
  if (v21 != -1)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      if (v21 < *(void *)(a6 + 16))
      {
        uint64_t v34 = a1;
        uint64_t v22 = a4;
        uint64_t v23 = a2;
        uint64_t v24 = type metadata accessor for CVDetection();
        uint64_t v25 = *(void *)(v24 - 8);
        sub_1003C1DB8(a6+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v21, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v20, 0, 1, v24);
        uint64_t v26 = a3 * a8;
        if ((unsigned __int128)((uint64_t)a3 * (__int128)a8) >> 64 == (uint64_t)(a3 * a8) >> 63)
        {
          BOOL v27 = __OFADD__(v26, v21);
          unint64_t v28 = v26 + v21;
          if (!v27)
          {
            if ((v28 & 0x8000000000000000) == 0)
            {
              if (v28 < *(void *)(*(void *)a7 + 16))
              {
                a2 = v23;
                float v29 = *(float *)(*(void *)a7 + 4 * v28 + 32);
                a4 = v22;
                a1 = v34;
                goto LABEL_12;
              }
LABEL_22:
              __break(1u);
              return;
            }
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v30 = type metadata accessor for CVDetection();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v20, 1, 1, v30);
  float v29 = 1.0;
LABEL_12:
  float v31 = 1.0 - v29;
  sub_1003C1DB8(a4, a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if (v31 <= a9)
  {
    sub_10000FBD8((uint64_t)v20, &qword_10051CB10);
    uint64_t v32 = type metadata accessor for CVDetection();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  else
  {
    sub_10000FC34((uint64_t)v20, a2, &qword_10051CB10);
  }
}

uint64_t sub_1003A523C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignposter();
  sub_1000EEA28(v4, qword_10052C9D8);
  sub_10000F378(v4, (uint64_t)qword_10052C9D8);
  if (qword_100517EA8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000F378(v0, (uint64_t)qword_10055E310);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

uint64_t sub_1003A5378(uint64_t a1)
{
  uint64_t v201 = a1;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v183 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v218);
  v217 = (uint64_t (*)())((char *)&v183 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v216 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  uint64_t v189 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  uint64_t v188 = (uint64_t)&v183 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = v6;
  __chkstk_darwin(v7);
  uint64_t v202 = (uint64_t)&v183 - v8;
  uint64_t v9 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v9 - 8);
  long long v198 = (char *)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v203 = (uint64_t)&v183 - v12;
  __chkstk_darwin(v13);
  uint64_t v214 = (uint64_t)&v183 - v14;
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v192 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v196 = (uint64_t)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  long long v199 = (char *)&v183 - v18;
  __chkstk_darwin(v19);
  uint64_t v206 = (uint64_t)&v183 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v183 - v22;
  __chkstk_darwin(v24);
  uint64_t v219 = (uint64_t)&v183 - v25;
  __chkstk_darwin(v26);
  v213 = (char *)&v183 - v27;
  __chkstk_darwin(v28);
  uint64_t v204 = (uint64_t)&v183 - v29;
  __chkstk_darwin(v30);
  uint64_t v207 = (uint64_t)&v183 - v31;
  __chkstk_darwin(v32);
  v205 = (char *)&v183 - v33;
  __chkstk_darwin(v34);
  uint64_t v215 = (uint64_t)&v183 - v35;
  uint64_t v193 = v36;
  __chkstk_darwin(v37);
  uint64_t v220 = (uint64_t)&v183 - v38;
  uint64_t v186 = sub_10000F214(&qword_100529858);
  uint64_t v187 = *(void *)(v186 - 8);
  __chkstk_darwin(v186);
  v211 = (uint64_t *)((char *)&v183 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v208 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))type metadata accessor for TrackManager.MatchingComputationResult(0);
  __chkstk_darwin(v208);
  uint64_t v184 = (uint64_t)&v183 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v183 - v42;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  int64_t v47 = (char *)&v183 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = v1;
  uint64_t v48 = (uint64_t *)(v1 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  swift_beginAccess();
  uint64_t v49 = *v48;
  uint64_t v50 = *v48 & 0xFFFFFFFFFFFFFF8;
  long long v51 = (void *)((unint64_t)*v48 >> 62);
  if (v51)
  {
    v195 = v51;
    swift_bridgeObjectRetain_n();
    long long v51 = v195;
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v52 = *(void *)(v50 + 16);
    swift_bridgeObjectRetain_n();
  }
  uint64_t v190 = v4;
  uint64_t v200 = v15;
  char v197 = v23;
  char v191 = v43;
  uint64_t v209 = v49;
  if (v52)
  {
    *(void *)&long long aBlock = _swiftEmptyArrayStorage;
    sub_100040CB0(0, v52 & ~(v52 >> 63), 0);
    if (v52 < 0)
    {
      __break(1u);
      goto LABEL_115;
    }
    v195 = v51;
    uint64_t v53 = 0;
    uint64_t v54 = (void *)aBlock;
    uint64_t v55 = v209;
    v212 = (char *)(v209 & 0xC000000000000001);
    char v56 = (void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    uint64_t v210 = v45 + 32;
    do
    {
      if (v212)
      {
        uint64_t v57 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        (*v56)(v47, v57 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id, v44);
        uint64_t v55 = v209;
        swift_unknownObjectRelease();
      }
      else
      {
        (*v56)(v47, *(void *)(v55 + 8 * v53 + 32) + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id, v44);
      }
      *(void *)&long long aBlock = v54;
      unint64_t v59 = v54[2];
      unint64_t v58 = v54[3];
      if (v59 >= v58 >> 1)
      {
        sub_100040CB0(v58 > 1, v59 + 1, 1);
        uint64_t v55 = v209;
        uint64_t v54 = (void *)aBlock;
      }
      ++v53;
      v54[2] = v59 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v45 + 32))((unint64_t)v54+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v59, v47, v44);
    }
    while (v52 != v53);
    swift_bridgeObjectRelease();
    long long v51 = v195;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = _swiftEmptyArrayStorage;
  }
  uint64_t v60 = v54[2];
  if (v51)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v61 = *(void *)((v209 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v61 >= v60) {
    uint64_t v61 = v60;
  }
  if (v61)
  {
    sub_10000F214(&qword_1005250C8);
    long long v62 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    long long v62 = &_swiftEmptyDictionarySingleton;
  }
  *(void *)&long long aBlock = v62;
  uint64_t v63 = v209;
  swift_bridgeObjectRetain();
  uint64_t v64 = swift_bridgeObjectRetain();
  sub_1003BF1EC(v64, v63, 1, &aBlock);
  swift_bridgeObjectRelease();
  uint64_t v65 = swift_bridgeObjectRelease();
  uint64_t v66 = aBlock;
  uint64_t v67 = *((int *)v208 + 5);
  uint64_t v68 = v201;
  __chkstk_darwin(v65);
  *(&v183 - 2) = v66;
  uint64_t v69 = swift_bridgeObjectRetain();
  uint64_t v70 = sub_1003C06D4(v69, (void (*)(uint64_t, uint64_t))sub_1003C6E30, (uint64_t)(&v183 - 4), &qword_10052CF50, &qword_100529858, &qword_100529840, (uint64_t)sub_10032A5AC);
  swift_bridgeObjectRelease();
  uint64_t v71 = v68;
  uint64_t v72 = v70[2];
  BOOL v73 = v72 == *(void *)(*(void *)(v68 + v67) + 16);
  uint64_t v74 = v214;
  uint64_t v75 = v220;
  v195 = v70;
  if (!v73)
  {
    uint64_t v76 = (uint64_t)v191;
    sub_1003C1DB8(v71, (uint64_t)v191, type metadata accessor for TrackManager.MatchingComputationResult);
    swift_bridgeObjectRetain();
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 134218240;
      uint64_t v80 = *(void *)(*(void *)(v76 + *((int *)v208 + 5)) + 16);
      sub_1003B4A5C(v76, type metadata accessor for TrackManager.MatchingComputationResult);
      *(void *)&long long aBlock = v80;
      uint64_t v74 = v214;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 12) = 2048;
      *(void *)&long long aBlock = v72;
      uint64_t v70 = v195;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Matched pair count: expected %ld but got %ld back. Did matching take too long?", (uint8_t *)v79, 0x16u);
      uint64_t v75 = v220;
      swift_slowDealloc();
    }
    else
    {
      sub_1003B4A5C(v76, type metadata accessor for TrackManager.MatchingComputationResult);
      swift_bridgeObjectRelease();
    }

    uint64_t v71 = v201;
  }
  uint64_t v81 = *(void *)(v71 + *((int *)v208 + 7));
  swift_retain();
  uint64_t v82 = swift_bridgeObjectRetain();
  unint64_t v83 = (unint64_t)sub_1003C0580(v82, v66);
  swift_release_n();
  swift_bridgeObjectRelease();
  uint64_t v84 = v215;
  char v191 = (char *)(v83 >> 62);
  if (v83 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v84 = v215;
    uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v86 = v200;
  BOOL v73 = v85 == *(void *)(v81 + 16);
  v212 = (char *)v83;
  uint64_t v87 = v201;
  if (!v73)
  {
    uint64_t v88 = v184;
    sub_1003C1DB8(v201, v184, type metadata accessor for TrackManager.MatchingComputationResult);
    swift_bridgeObjectRetain();
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)uint64_t v91 = 134218240;
      uint64_t v92 = *(void *)(*(void *)(v88 + *((int *)v208 + 7)) + 16);
      sub_1003B4A5C(v88, type metadata accessor for TrackManager.MatchingComputationResult);
      *(void *)&long long aBlock = v92;
      uint64_t v75 = v220;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v91 + 12) = 2048;
      *(void *)&long long aBlock = v85;
      uint64_t v74 = v214;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Unmatched count: expected %ld but got %ld back. Did matching take too long?", (uint8_t *)v91, 0x16u);
      unint64_t v83 = (unint64_t)v212;
      swift_slowDealloc();
    }
    else
    {
      sub_1003B4A5C(v88, type metadata accessor for TrackManager.MatchingComputationResult);
      swift_bridgeObjectRelease();
    }

    uint64_t v84 = v215;
    uint64_t v87 = v201;
  }
  uint64_t v93 = *(void *)(v87 + *((int *)v208 + 6));
  uint64_t v94 = v87;
  uint64_t v95 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  sub_10000F578(v94 + *(int *)(v95 + 20), (uint64_t)&v233);
  uint64_t v96 = v70[2];
  uint64_t v201 = v93;
  uint64_t v184 = v96;
  if (v96)
  {
    uint64_t v210 = (uint64_t)v211 + *(int *)(v186 + 48);
    uint64_t v97 = (uint64_t)v70 + ((*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80));
    uint64_t v209 = *(void *)(v187 + 72);
    v208 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56);
    long long v98 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v99 = (uint64_t)v205;
    while (1)
    {
      uint64_t v112 = v211;
      sub_10000FB74(v97, (uint64_t)v211, &qword_100529858);
      uint64_t v113 = *v112;
      sub_1003C1D08(v210, v75, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003C1DB8(v75, v99, (uint64_t (*)(void))type metadata accessor for CVDetection);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v115 = (uint64_t)v213;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          *((void *)&v231 + 1) = type metadata accessor for ParseDetectorResult(0);
          uint64_t v116 = sub_1003C1D70(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          uint64_t v117 = type metadata accessor for ParseDetectorResult;
          break;
        case 2:
          *((void *)&v231 + 1) = type metadata accessor for TextDetectorResult(0);
          uint64_t v116 = sub_1003C1D70((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          uint64_t v117 = type metadata accessor for TextDetectorResult;
          break;
        case 3:
        case 4:
          *((void *)&v231 + 1) = v216;
          uint64_t v116 = sub_1003C1D70(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          uint64_t v117 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5:
          *((void *)&v231 + 1) = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v116 = sub_1003C1D70((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          uint64_t v117 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          *((void *)&v231 + 1) = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v116 = sub_1003C1D70(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          uint64_t v117 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      long long v118 = v117;
      uint64_t v232 = v116;
      uint64_t v119 = sub_100040120((uint64_t *)&v230);
      sub_1003C1D08(v99, (uint64_t)v119, v118);
      sub_10000F214(&qword_100519FA0);
      sub_10000F214(&qword_10052CF28);
      if (swift_dynamicCast())
      {
        if (*((void *)&v226 + 1))
        {
          sub_10000F3B0(&aBlock, *((uint64_t *)&v226 + 1));
          uint64_t v120 = v207;
          sub_100035D50(v207);
          uint64_t v121 = v204;
          sub_1003C1DB8(v120, v204, (uint64_t (*)(void))type metadata accessor for CVDetection);
          if (swift_getEnumCaseMultiPayload() - 3 >= 2)
          {
            sub_1003B4A5C(v121, (uint64_t (*)(void))type metadata accessor for CVDetection);
          }
          else
          {
            uint64_t v122 = v202;
            sub_1003C1D08(v121, v202, type metadata accessor for StreamingBarcodeDetectorResult);
            unint64_t v123 = *(void *)(v122 + *(int *)(v216 + 40));
            swift_retain();
            sub_1003B4A5C(v122, type metadata accessor for StreamingBarcodeDetectorResult);
            if (v123 >> 62 == 1)
            {
              uint64_t v74 = v214;
              sub_1001660E8(v207, v123 & 0x3FFFFFFFFFFFFFFFLL, v214);
              swift_release();
              uint64_t v115 = (uint64_t)v213;
              uint64_t v99 = (uint64_t)v205;
              uint64_t v84 = v215;
LABEL_54:
              sub_1003B4A5C(v207, (uint64_t (*)(void))type metadata accessor for CVDetection);
              _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&aBlock);
              goto LABEL_55;
            }
            swift_release();
            uint64_t v74 = v214;
            uint64_t v115 = (uint64_t)v213;
          }
          uint64_t v99 = (uint64_t)v205;
          uint64_t v84 = v215;
          (*v208)(v74, 1, 1, v86);
          goto LABEL_54;
        }
      }
      else
      {
        v227 = 0;
        long long v226 = 0u;
        long long aBlock = 0u;
      }
      sub_10000FBD8((uint64_t)&aBlock, &qword_10052CF30);
      (*v208)(v74, 1, 1, v86);
LABEL_55:
      sub_1003C1DB8(v220, v115, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if ((*v98)(v74, 1, v86) == 1)
      {
        sub_1003C1D08(v115, v84, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10000FBD8(v74, &qword_10051CB10);
      }
      else
      {
        sub_1003B4A5C(v115, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003C1D08(v74, v84, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      sub_1003C1DB8(v84, v219, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *((void *)&v226 + 1) = type metadata accessor for ParseDetectorResult(0);
          uint64_t v100 = sub_1003C1D70(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          uint64_t v101 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          *((void *)&v226 + 1) = type metadata accessor for TextDetectorResult(0);
          uint64_t v100 = sub_1003C1D70((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          uint64_t v101 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          *((void *)&v226 + 1) = v216;
          uint64_t v100 = sub_1003C1D70(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          uint64_t v101 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          *((void *)&v226 + 1) = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v100 = sub_1003C1D70((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          uint64_t v101 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          *((void *)&v226 + 1) = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v100 = sub_1003C1D70(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          uint64_t v101 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      uint64_t v102 = v101;
      v227 = (void (*)(void *, uint64_t))v100;
      long long v103 = sub_100040120((uint64_t *)&aBlock);
      sub_1003C1D08(v219, (uint64_t)v103, v102);
      uint64_t v104 = *((void *)&v226 + 1);
      uint64_t v105 = v227;
      sub_10000F3B0(&aBlock, *((uint64_t *)&v226 + 1));
      double v106 = (*((double (**)(uint64_t, void))v105 + 11))(v104, v105);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&aBlock);
      sub_1000CD800(0.7, v106);
      uint64_t v107 = *(void *)(v113 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_historyBuffer);
      uint64_t v108 = v215;
      uint64_t v109 = v217;
      sub_1003C1DB8(v215, (uint64_t)v217, (uint64_t (*)(void))type metadata accessor for CVDetection);
      swift_storeEnumTagMultiPayload();
      char v110 = (os_unfair_lock_s *)(*(void *)(v107 + 48) + 16);
      os_unfair_lock_lock(v110);
      sub_100381C74((uint64_t)v109, v107);
      char v111 = v110;
      uint64_t v84 = v108;
      os_unfair_lock_unlock(v111);
      sub_1003B4A5C((uint64_t)v109, type metadata accessor for CVTrackedDetection.HistoryEntry);
      swift_release();
      sub_1003B4A5C(v108, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v75 = v220;
      sub_1003B4A5C(v220, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v97 += v209;
      --v96;
      uint64_t v74 = v214;
      if (!v96)
      {
        swift_bridgeObjectRelease();
        unint64_t v83 = (unint64_t)v212;
        goto LABEL_65;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_65:
  uint64_t v124 = (uint64_t)v199;
  if (v191)
  {
    swift_bridgeObjectRetain();
    uint64_t v125 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v125) {
      goto LABEL_75;
    }
  }
  else
  {
    uint64_t v125 = *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v125) {
      goto LABEL_75;
    }
  }
  if (v125 < 1)
  {
LABEL_115:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1003A7714);
  }
  uint64_t v126 = 0;
  unint64_t v127 = v83 & 0xC000000000000001;
  uint64_t v128 = v86;
  do
  {
    if (v127)
    {
      uint64_t v129 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v129 = *(void *)(v83 + 8 * v126 + 32);
      swift_retain();
    }
    ++v126;
    uint64_t v130 = v234;
    uint64_t v131 = v235;
    sub_10000F3B0(&v233, v234);
    double v132 = sub_10030CA28(v130, v131);
    sub_1000CD800(0.35, v132);
    uint64_t v133 = *(void *)(v129 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_historyBuffer);
    uint64_t v134 = v217;
    *(double *)v217 = v132;
    swift_storeEnumTagMultiPayload();
    uint64_t v135 = (os_unfair_lock_s *)(*(void *)(v133 + 48) + 16);
    os_unfair_lock_lock(v135);
    sub_100381C74((uint64_t)v134, v133);
    os_unfair_lock_unlock(v135);
    sub_1003B4A5C((uint64_t)v134, type metadata accessor for CVTrackedDetection.HistoryEntry);
    swift_release();
    uint64_t v86 = v128;
    unint64_t v83 = (unint64_t)v212;
  }
  while (v125 != v126);
LABEL_75:
  swift_bridgeObjectRelease();
  uint64_t v136 = v201;
  uint64_t v137 = *(void *)(v201 + 16);
  swift_bridgeObjectRelease();
  if (v137)
  {
    uint64_t v138 = *(unsigned __int8 *)(v192 + 80);
    uint64_t v210 = ~v138;
    uint64_t v139 = v136 + ((v138 + 32) & ~v138);
    unint64_t v229 = (unint64_t)_swiftEmptyArrayStorage;
    v218 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48);
    uint64_t v220 = *(void *)(v192 + 72);
    uint64_t v215 = (v138 + 40) & ~v138;
    uint64_t v214 = v215 + v193;
    v213 = (char *)(v138 | 7);
    v211 = (uint64_t *)v138;
    uint64_t v209 = v185 + v138;
    v208 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v226;
    v212 = (char *)&type metadata for () + 8;
    uint64_t v140 = v206;
    uint64_t v141 = (uint64_t)v198;
    uint64_t v142 = (uint64_t)v197;
    while (1)
    {
      sub_1003C1DB8(v139, v142, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003C1DB8(v142, v140, (uint64_t (*)(void))type metadata accessor for CVDetection);
      type metadata accessor for CVTrackedDetection(0);
      swift_allocObject();
      uint64_t v143 = sub_100034F6C(v140);
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v229 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v229 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1003C1DB8(v142, v124, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *((void *)&v226 + 1) = type metadata accessor for ParseDetectorResult(0);
          uint64_t v144 = sub_1003C1D70(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          uint64_t v145 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          *((void *)&v226 + 1) = type metadata accessor for TextDetectorResult(0);
          uint64_t v144 = sub_1003C1D70((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          uint64_t v145 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          *((void *)&v226 + 1) = v216;
          uint64_t v144 = sub_1003C1D70(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          uint64_t v145 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          *((void *)&v226 + 1) = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v144 = sub_1003C1D70((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          uint64_t v145 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          *((void *)&v226 + 1) = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v144 = sub_1003C1D70(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          uint64_t v145 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      uint64_t v146 = v145;
      v227 = (void (*)(void *, uint64_t))v144;
      uint64_t v147 = sub_100040120((uint64_t *)&aBlock);
      sub_1003C1D08(v124, (uint64_t)v147, v146);
      sub_10000F214(&qword_100519FA0);
      sub_10000F214(&qword_10052CF28);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      if (!*((void *)&v231 + 1)) {
        goto LABEL_97;
      }
      uint64_t v148 = sub_10000F3B0(&v230, *((uint64_t *)&v231 + 1));
      unint64_t v149 = *(void *)((char *)v148 + *(int *)(v216 + 40));
      if (!(v149 >> 62))
      {
        uint64_t v150 = *(void *)(v149 + 24);
        if (v150)
        {
          swift_retain_n();
          swift_retain();
          swift_retain();
          uint64_t v151 = v142;
          uint64_t v152 = v203;
          uint64_t v153 = v150;
          uint64_t v154 = v151;
          uint64_t v219 = v153;
          sub_1001660E8(v151, v153, v203);
          sub_10000FB74(v152, v141, &qword_10051CB10);
          if ((*v218)(v141, 1, v86) == 1)
          {
            sub_10000FBD8(v141, &qword_10051CB10);
            uint64_t v142 = v154;
          }
          else
          {
            v217 = type metadata accessor for CVDetection;
            uint64_t v155 = v196;
            sub_1003C1D08(v141, v196, (uint64_t (*)(void))type metadata accessor for CVDetection);
            uint64_t v156 = type metadata accessor for TaskPriority();
            uint64_t v157 = *(void *)(v156 - 8);
            uint64_t v158 = (uint64_t)v190;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v190, 1, 1, v156);
            uint64_t v159 = v206;
            sub_1003C1DB8(v155, v206, (uint64_t (*)(void))type metadata accessor for CVDetection);
            uint64_t v160 = (void *)swift_allocObject();
            v160[2] = 0;
            v160[3] = 0;
            v160[4] = v143;
            sub_1003C1D08(v159, (uint64_t)v160 + v215, (uint64_t (*)(void))v217);
            LODWORD(v159) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v158, 1, v156);
            swift_retain();
            if (v159 == 1)
            {
              sub_10000FBD8(v158, &qword_10051A8C0);
              uint64_t v161 = 0;
            }
            else
            {
              unsigned __int8 v172 = TaskPriority.rawValue.getter();
              (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v158, v156);
              uint64_t v161 = (uint64_t (*)())v172;
            }
            uint64_t v173 = v160[2];
            uint64_t v86 = v200;
            v217 = v161;
            if (v173)
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v174 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v176 = v175;
              swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v174 = 0;
              uint64_t v176 = 0;
            }
            uint64_t v124 = (uint64_t)v199;
            uint64_t v177 = swift_allocObject();
            *(void *)(v177 + 16) = &unk_10052CF40;
            *(void *)(v177 + 24) = v160;
            if (v176 | v174)
            {
              uint64_t v222 = 0;
              uint64_t v221 = 0;
              uint64_t v223 = v174;
              uint64_t v224 = v176;
            }
            uint64_t v141 = (uint64_t)v198;
            uint64_t v142 = (uint64_t)v197;
            swift_task_create();
            swift_release();
            sub_1003B4A5C(v196, (uint64_t (*)(void))type metadata accessor for CVDetection);
          }
          swift_release();
          swift_release();
          sub_10000FBD8(v203, &qword_10051CB10);
          swift_release_n();
        }
        else
        {
          uint64_t v162 = *(void **)(v149 + 16);
          if (v162)
          {
            uint64_t v163 = v188;
            sub_1003C1DB8((uint64_t)v148, v188, type metadata accessor for StreamingBarcodeDetectorResult);
            uint64_t v164 = v206;
            sub_1003C1DB8(v142, v206, (uint64_t (*)(void))type metadata accessor for CVDetection);
            unint64_t v165 = (*(unsigned __int8 *)(v189 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80);
            uint64_t v166 = (v209 + v165) & v210;
            uint64_t v167 = (void *)swift_allocObject();
            v167[2] = v149;
            v167[3] = sub_1003C6E38;
            v167[4] = v143;
            uint64_t v168 = v163;
            uint64_t v86 = v200;
            sub_1003C1D08(v168, (uint64_t)v167 + v165, type metadata accessor for StreamingBarcodeDetectorResult);
            uint64_t v169 = (uint64_t)v167 + v166;
            uint64_t v124 = (uint64_t)v199;
            sub_1003C1D08(v164, v169, (uint64_t (*)(void))type metadata accessor for CVDetection);
            v227 = sub_1003C721C;
            v228 = v167;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v226 = sub_1000F4EF4;
            *((void *)&v226 + 1) = &unk_1004F7900;
            uint64_t v170 = _Block_copy(&aBlock);
            swift_retain_n();
            swift_retain_n();
            id v171 = v162;
            swift_release();
            [v171 parseCodeWithCompletion:v170];
            _Block_release(v170);

            uint64_t v140 = v164;
            uint64_t v141 = (uint64_t)v198;
            uint64_t v142 = (uint64_t)v197;
            swift_release();
            swift_release_n();
            sub_1003B4A5C(v142, (uint64_t (*)(void))type metadata accessor for CVDetection);
            _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v230);
            goto LABEL_80;
          }
        }
      }
      swift_release();
      sub_1003B4A5C(v142, (uint64_t (*)(void))type metadata accessor for CVDetection);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v230);
      uint64_t v140 = v206;
LABEL_80:
      v139 += v220;
      if (!--v137)
      {
        swift_bridgeObjectRelease();
        __int16 v178 = (void *)v229;
        goto LABEL_110;
      }
    }
    uint64_t v232 = 0;
    long long v230 = 0u;
    long long v231 = 0u;
LABEL_97:
    sub_1003B4A5C(v142, (uint64_t (*)(void))type metadata accessor for CVDetection);
    swift_release();
    sub_10000FBD8((uint64_t)&v230, &qword_10052CF30);
    goto LABEL_80;
  }
  if (v184)
  {
    swift_bridgeObjectRelease();
    __int16 v178 = _swiftEmptyArrayStorage;
LABEL_110:
    uint64_t v179 = v234;
    uint64_t v180 = v235;
    uint64_t v181 = sub_10000F3B0(&v233, v234);
    sub_1003AE8B0((unint64_t)v178, (uint64_t)v181, v179, v180);
  }
  swift_bridgeObjectRelease();
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v233);
}

uint64_t sub_1003A775C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v7 = sub_10032ADC4(a1), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(a3 + 56) + 8 * v7);
    uint64_t v10 = sub_10000F214(&qword_100529858);
    uint64_t v11 = (uint64_t)a4 + *(int *)(v10 + 48);
    *a4 = v9;
    sub_1003C1DB8(a2, v11, (uint64_t (*)(void))type metadata accessor for CVDetection);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a4, 0, 1, v10);
    return swift_retain();
  }
  else
  {
    uint64_t v13 = sub_10000F214(&qword_100529858);
    uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    return v14(a4, 1, 1, v13);
  }
}

uint64_t sub_1003A7888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVDetection();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v21 - v15;
  sub_10000FB74(a1, (uint64_t)v9, &qword_10051CB10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_10000FBD8((uint64_t)v9, &qword_10051CB10);
  }
  sub_1003C1D08((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
  sub_1003C1DB8((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
  unint64_t v19 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0;
  v20[3] = 0;
  v20[4] = a2;
  sub_1003C1D08((uint64_t)v13, (uint64_t)v20 + v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_retain();
  sub_100064D5C((uint64_t)v6, (uint64_t)&unk_10052CF58, (uint64_t)v20);
  swift_release();
  return sub_1003B4A5C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

uint64_t sub_1003A7B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  sub_10000F214(&qword_10051CB10);
  v5[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CVDetection();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  return _swift_task_switch(sub_1003A7C50, 0, 0);
}

uint64_t sub_1003A7C50()
{
  uint64_t v1 = v0[12];
  sub_100035D50(v1);
  sub_1003FF634((uint64_t)(v0 + 2));
  sub_1003B4A5C(v1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[9];
  if (v2)
  {
    uint64_t v6 = v0[8];
    sub_10000F3B0(v0 + 2, v2);
    sub_100165F00(v6, v5);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) != 1)
    {
      uint64_t v7 = v0[13];
      sub_1003C1D08(v0[9], v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100037510(v7);
      sub_1003B4A5C(v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      goto LABEL_6;
    }
  }
  else
  {
    sub_10000FBD8((uint64_t)(v0 + 2), &qword_10052CF30);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v3);
  }
  sub_10000FBD8(v0[9], &qword_10051CB10);
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1003A7DFC(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v58 = a2;
  uint64_t v60 = a1;
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  unint64_t v59 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052CF60);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10052CEB8);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  __chkstk_darwin(v11);
  uint64_t v52 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10052CE70);
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v51 = v13;
  __chkstk_darwin(v13);
  uint64_t v49 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000F214(&qword_10052CE90);
  uint64_t v15 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10052CDD8);
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v48 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_10052CE98);
  uint64_t v21 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(void *)(v4 + 112) = _swiftEmptyArrayStorage;
  uint64_t v24 = OBJC_IVAR____TtC6Tamale12TrackManager_logger;
  if (qword_100517EA8 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = sub_10000F378(v25, (uint64_t)qword_10055E310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v4 + v24, v26, v25);
  uint64_t v27 = v4 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStream;
  uint64_t v44 = v4 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStreamContinuation;
  type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v28 = enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:);
  uint64_t v29 = v15;
  uint64_t v30 = *(void (**)(char *, void, uint64_t))(v15 + 104);
  uint64_t v31 = v46;
  v30(v17, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v46);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v31);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v27, v23, v45);
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v44, v20, v48);
  uint64_t v32 = v4 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationResultStream;
  uint64_t v33 = v4 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationResultStreamContinuation;
  type metadata accessor for TrackManager.MatchingComputationResult(0);
  uint64_t v34 = v56;
  uint64_t v35 = v53;
  uint64_t v36 = v28;
  uint64_t v37 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v53, v36, v57);
  uint64_t v38 = v49;
  uint64_t v39 = v52;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v32, v38, v51);
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v33, v39, v55);
  *(void *)(v4 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestProcessingTask) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v4 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal) = _swiftEmptyArrayStorage;
  *(void *)(v4 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksStreamContinuations) = &_swiftEmptyDictionarySingleton;
  *(float *)(v4 + 120) = a3;
  *(float *)(v4 + 124) = a4;
  *(void *)(v4 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting + 8) = v58;
  swift_unknownObjectWeakAssign();
  uint64_t v40 = type metadata accessor for TaskPriority();
  uint64_t v41 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v59, 1, 1, v40);
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = 0;
  v42[3] = 0;
  v42[4] = v4;
  swift_retain();
  sub_100064D5C(v41, (uint64_t)&unk_10052CF70, (uint64_t)v42);
  swift_release();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_1003A84B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1003A84D4, a4, 0);
}

uint64_t sub_1003A84D4()
{
  sub_1003AA7CC();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003A8534()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_10052CE90);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052CE98);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10052CDD8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStreamContinuation;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  AsyncStream.Continuation.finish()();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v14, v11);
  uint64_t v26 = v1;
  uint64_t v28 = OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestProcessingTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestProcessingTask))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  type metadata accessor for TrackManager.MatchingComputationRequest(0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = v26;
  uint64_t v17 = v26 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStream;
  swift_beginAccess();
  uint64_t v19 = v29;
  uint64_t v18 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 24))(v17, v10, v30);
  swift_endAccess();
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 24))(v15, v14, v11);
  swift_endAccess();
  uint64_t v20 = type metadata accessor for TaskPriority();
  uint64_t v21 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v31, 1, 1, v20);
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = 0;
  v23[3] = 0;
  v23[4] = v22;
  uint64_t v24 = sub_1002EF924(v21, (uint64_t)&unk_10052CEA8, (uint64_t)v23);
  sub_10000FBD8(v21, &qword_10051A8C0);
  v27(v14, v11);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v18);
  *(void *)(v16 + v28) = v24;
  return swift_release();
}

uint64_t sub_1003A89D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a4;
  uint64_t v5 = sub_10000F214(&qword_10052CDE0);
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v4[22] = swift_task_alloc();
  uint64_t v6 = sub_10000F214(&qword_10052CE90);
  v4[23] = v6;
  v4[24] = *(void *)(v6 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v7 = sub_10000F214(&qword_1005250E0);
  v4[26] = v7;
  v4[27] = *(void *)(v7 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  uint64_t v8 = sub_10000F214(&qword_10052CDD8);
  v4[31] = v8;
  v4[32] = *(void *)(v8 - 8);
  v4[33] = swift_task_alloc();
  type metadata accessor for CVDetection();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  v4[36] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[37] = v10;
  v4[38] = *(void *)(v10 + 64);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  sub_10000F214(&qword_10052CDE8);
  v4[41] = swift_task_alloc();
  uint64_t v11 = sub_10000F214(&qword_10052CEB0);
  v4[42] = v11;
  v4[43] = *(void *)(v11 - 8);
  v4[44] = swift_task_alloc();
  uint64_t v12 = sub_10000F214(&qword_10052CEB8);
  v4[45] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[46] = v13;
  v4[47] = *(void *)(v13 + 64);
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  uint64_t v14 = sub_10000F214(&qword_10052CE98);
  v4[51] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[52] = v15;
  v4[53] = *(void *)(v15 + 64);
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  unsigned char v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  return _swift_task_switch(sub_1003A8E54, 0, 0);
}

uint64_t sub_1003A8E54()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 464) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_1003A903C, Strong, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_1003A903C()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[52];
  uint64_t v4 = v0[58] + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStream;
  swift_beginAccess();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[59] = v5;
  v0[60] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  swift_release();
  return _swift_task_switch(sub_1003A9108, 0, 0);
}

uint64_t sub_1003A9108()
{
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  uint64_t v3 = v0[51];
  uint64_t v4 = v0[52];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[61] = v5;
  v0[62] = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v5(v1, v2, v3);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[63] = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_1003A9330, Strong, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[52] + 8))(v0[57], v0[51]);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1003A9330()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[63] + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationResultStreamContinuation;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[64] = v5;
  v0[65] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  swift_release();
  return _swift_task_switch(sub_1003A93D0, 0, 0);
}

uint64_t sub_1003A93D0()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 528) = v5;
  *(void *)(v0 + 536) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v5(v1, v2, v3);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v7 = *(void *)(v0 + 456);
  if (Strong)
  {
    *(_DWORD *)(v0 + 560) = *(_DWORD *)(Strong + 124);
    swift_release();
    AsyncStream.makeAsyncIterator()();
    *(_DWORD *)(v0 + 564) = enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:);
    *(void *)(v0 + 544) = &_swiftEmptyDictionarySingleton;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1003A9698;
    uint64_t v9 = *(void *)(v0 + 328);
    uint64_t v10 = *(void *)(v0 + 336);
    return AsyncStream.Iterator.next(isolation:)(v9, 0, 0, v10);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 416);
    (*(void (**)(void, void))(*(void *)(v0 + 368) + 8))(*(void *)(v0 + 400), *(void *)(v0 + 360));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v7, v11);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_1003A9698()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A9794, 0, 0);
}

uint64_t sub_1003A9794()
{
  uint64_t v1 = *(void *)(v0 + 328);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 296) + 48))(v1, 1, *(void *)(v0 + 288)) == 1)
  {
LABEL_4:
    uint64_t v2 = *(void *)(v0 + 456);
    uint64_t v3 = *(void *)(v0 + 408);
    uint64_t v4 = *(void *)(v0 + 416);
    uint64_t v5 = *(void *)(v0 + 400);
    uint64_t v6 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 336));
    uint64_t v8 = swift_bridgeObjectRetain();
    sub_1003A45C4(v8);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  sub_1003C1D08(v1, *(void *)(v0 + 320), type metadata accessor for TrackManager.MatchingComputationRequest);
  if (static Task<>.isCancelled.getter())
  {
    sub_1003B4A5C(*(void *)(v0 + 320), type metadata accessor for TrackManager.MatchingComputationRequest);
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(v0 + 544);
  sub_1003FD108(*(void *)(v0 + 280));
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_10032AF9C(*(void *)(v0 + 280)), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 416);
    uint64_t v17 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 264);
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 208);
    sub_10000FB74(*(void *)(*(void *)(v0 + 544) + 56) + *(void *)(*(void *)(v0 + 216) + 72) * v12, v19, &qword_1005250E0);
    swift_release();
    uint64_t v21 = v19 + *(int *)(v20 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v16, v19 + *(int *)(v20 + 64), v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v21, v14);
    uint64_t v84 = *(void *)(v0 + 544);
  }
  else
  {
    uint64_t v22 = *(unsigned int *)(v0 + 564);
    int v23 = *(_DWORD *)(v0 + 560);
    os_log_type_t v78 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 528);
    uint64_t v77 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 488);
    uint64_t v24 = *(void *)(v0 + 440);
    uint64_t v69 = *(void *)(v0 + 432);
    uint64_t v76 = *(void *)(v0 + 424);
    uint64_t v73 = *(void *)(v0 + 416);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 512);
    uint64_t v67 = *(void *)(v0 + 408);
    uint64_t v70 = *(void *)(v0 + 400);
    uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
    uint64_t v82 = *(void *)(v0 + 384);
    uint64_t v75 = *(void *)(v0 + 368);
    uint64_t v85 = *(void *)(v0 + 360);
    uint64_t v65 = *(void *)(v0 + 320);
    uint64_t v80 = *(void *)(v0 + 312);
    uint64_t v72 = *(void *)(v0 + 304);
    uint64_t v68 = *(void *)(v0 + 296);
    uint64_t v26 = *(void *)(v0 + 272);
    uint64_t v25 = *(void *)(v0 + 280);
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v27 = *(void **)(v0 + 200);
    uint64_t v30 = *(void *)(v0 + 176);
    uint64_t v29 = *(void *)(v0 + 184);
    *uint64_t v27 = 1;
    (*(void (**)(void *, uint64_t, uint64_t))(v28 + 104))(v27, v22, v29);
    static AsyncStream.makeStream(of:bufferingPolicy:)();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v27, v29);
    sub_1003C1DB8(v25, v26, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v31 = type metadata accessor for TaskPriority();
    uint64_t v66 = *(void *)(v31 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v30, 1, 1, v31);
    sub_1003C1DB8(v65, v80, type metadata accessor for TrackManager.MatchingComputationRequest);
    v71(v69, v24, v67);
    v74(v82, v70, v85);
    unint64_t v32 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    unint64_t v33 = (v72 + *(unsigned __int8 *)(v73 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    unint64_t v34 = (v76 + v33 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v35 = (*(unsigned __int8 *)(v75 + 80) + v34 + 4) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = 0;
    *(void *)(v36 + 24) = 0;
    sub_1003C1D08(v80, v36 + v32, type metadata accessor for TrackManager.MatchingComputationRequest);
    v77(v36 + v33, v69, v67);
    *(_DWORD *)(v36 + v34) = v23;
    v78(v36 + v35, v82, v85);
    int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v30, 1, v31);
    uint64_t v38 = *(void *)(v0 + 176);
    if (v37 == 1)
    {
      sub_10000FBD8(*(void *)(v0 + 176), &qword_10051A8C0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v38, v31);
    }
    if (*(void *)(v36 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v39 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v41 = v40;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = 0;
    }
    uint64_t v42 = *(uint64_t **)(v0 + 232);
    uint64_t v43 = *(void *)(v0 + 208);
    unint64_t v83 = (char *)v42 + *(int *)(v43 + 48);
    uint64_t v86 = (char *)v42 + *(int *)(v43 + 64);
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = &unk_10052CEC8;
    *(void *)(v44 + 24) = v36;
    if (v41 | v39)
    {
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v39;
      *(void *)(v0 + 40) = v41;
    }
    uint64_t v45 = *(void *)(v0 + 544);
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 472);
    uint64_t v47 = *(void *)(v0 + 440);
    uint64_t v49 = *(void *)(v0 + 408);
    uint64_t v48 = *(void *)(v0 + 416);
    uint64_t v81 = *(void *)(v0 + 272);
    uint64_t v50 = *(void *)(v0 + 256);
    uint64_t v79 = *(void *)(v0 + 264);
    uint64_t v51 = *(void *)(v0 + 248);
    uint64_t v52 = *(void *)(v0 + 224);
    *uint64_t v42 = swift_task_create();
    v46(v83, v47, v49);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v86, v79, v51);
    sub_10000FC34((uint64_t)v42, v52, &qword_1005250E0);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002F5FD8(v52, v81, isUniquelyReferenced_nonNull_native);
    uint64_t v84 = v45;
    swift_bridgeObjectRelease();
    sub_1003B4A5C(v81, (uint64_t (*)(void))type metadata accessor for CVDetection);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  }
  uint64_t v54 = *(void *)(v0 + 320);
  uint64_t v55 = *(void *)(v0 + 280);
  uint64_t v57 = *(void *)(v0 + 256);
  uint64_t v56 = *(void *)(v0 + 264);
  uint64_t v58 = *(void *)(v0 + 248);
  uint64_t v60 = *(void *)(v0 + 160);
  uint64_t v59 = *(void *)(v0 + 168);
  uint64_t v61 = *(void *)(v0 + 152);
  sub_1003C1DB8(v54, *(void *)(v0 + 312), type metadata accessor for TrackManager.MatchingComputationRequest);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  sub_1003B4A5C(v55, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1003B4A5C(v54, type metadata accessor for TrackManager.MatchingComputationRequest);
  *(void *)(v0 + 544) = v84;
  long long v62 = (void *)swift_task_alloc();
  *(void *)(v0 + 552) = v62;
  *long long v62 = v0;
  v62[1] = sub_1003A9698;
  uint64_t v63 = *(void *)(v0 + 328);
  uint64_t v64 = *(void *)(v0 + 336);
  return AsyncStream.Iterator.next(isolation:)(v63, 0, 0, v64);
}

uint64_t sub_1003AA0A4(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  *(float *)(v7 + 160) = a1;
  *(void *)(v7 + 16) = a5;
  uint64_t v8 = sub_10000F214(&qword_10052CED0);
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = *(void *)(v8 - 8);
  *(void *)(v7 + 56) = swift_task_alloc();
  *(void *)(v7 + 64) = type metadata accessor for TrackManager.MatchingComputationResult(0);
  *(void *)(v7 + 72) = swift_task_alloc();
  *(void *)(v7 + 80) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  *(void *)(v7 + 88) = v9;
  *(void *)(v7 + 96) = *(void *)(v9 - 8);
  *(void *)(v7 + 104) = swift_task_alloc();
  sub_10000F214(&qword_10052CDE8);
  *(void *)(v7 + 112) = swift_task_alloc();
  uint64_t v10 = sub_10000F214(&qword_10052CEB0);
  *(void *)(v7 + 120) = v10;
  *(void *)(v7 + 128) = *(void *)(v10 - 8);
  *(void *)(v7 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_1003AA29C, 0, 0);
}

uint64_t sub_1003AA29C()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = *(void *)(*(void *)(v1 + *(int *)(type metadata accessor for DetectionResult(0) + 20)) + 16);
  if (v2 >= 5) {
    unint64_t v2 = 5;
  }
  v0[18] = [objc_allocWithZone((Class)FTBipartiteMatcher) initWithInitialSize:v2 * v2];
  sub_10000F214(&qword_10052CE98);
  AsyncStream.makeAsyncIterator()();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1003AA3A8;
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  return AsyncStream.Iterator.next(isolation:)(v4, 0, 0, v5);
}

uint64_t sub_1003AA3A8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003AA4A4, 0, 0);
}

uint64_t sub_1003AA4A4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 96) + 48))(v1, 1, *(void *)(v0 + 88)) == 1)
  {
    unint64_t v2 = *(void **)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 128) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));

LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  sub_1003C1D08(v1, *(void *)(v0 + 104), type metadata accessor for TrackManager.MatchingComputationRequest);
  char v3 = static Task<>.isCancelled.getter();
  uint64_t v4 = *(void **)(v0 + 144);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 104);

    sub_1003B4A5C(v8, type metadata accessor for TrackManager.MatchingComputationRequest);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v14 = *(int **)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 48);
  uint64_t v27 = *(void *)(v0 + 40);
  uint64_t v26 = *(void *)(v0 + 56);
  float v16 = *(float *)(v0 + 160);
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = sub_1003C5F54(v17, v11, v4, v16);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  sub_1003C1DB8(v11, v12, type metadata accessor for TrackManager.MatchingComputationRequest);
  *(void *)(v12 + v14[5]) = v18;
  *(void *)(v12 + v14[6]) = v22;
  *(void *)(v12 + v14[7]) = v20;
  sub_1003C1DB8(v12, v13, type metadata accessor for TrackManager.MatchingComputationResult);
  sub_10000F214(&qword_10052CEB8);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v26, v27);
  sub_1003B4A5C(v12, type metadata accessor for TrackManager.MatchingComputationResult);
  sub_1003B4A5C(v11, type metadata accessor for TrackManager.MatchingComputationRequest);
  int v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v23;
  *int v23 = v0;
  v23[1] = sub_1003AA3A8;
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 120);
  return AsyncStream.Iterator.next(isolation:)(v24, 0, 0, v25);
}

uint64_t sub_1003AA7CC()
{
  uint64_t v1 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v1 - 8);
  char v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t v6 = sub_1003C1D70(&qword_10052CE48, (void (*)(uint64_t))type metadata accessor for TrackManager);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v0;
  v7[3] = v6;
  v7[4] = v0;
  swift_retain_n();
  sub_100064D5C((uint64_t)v3, (uint64_t)&unk_10052CE50, (uint64_t)v7);
  swift_release();
  sub_1003A8534();
  v5(v3, 1, 1, v4);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v0;
  void v8[3] = v6;
  v8[4] = v0;
  swift_retain_n();
  sub_100064D5C((uint64_t)v3, (uint64_t)&unk_10052CE60, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_1003AA988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v4[3] = a4;
  uint64_t v6 = sub_10000F214(&qword_10052CE80);
  v4[4] = v6;
  v4[5] = *(void *)(v6 - 8);
  v4[6] = swift_task_alloc();
  uint64_t v7 = sub_10000F214(&qword_10052CE88);
  v4[7] = v7;
  double v4[8] = *(void *)(v7 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return _swift_task_switch(sub_1003AAAC0, a4, 0);
}

uint64_t sub_1003AAAC0()
{
  uint64_t v1 = v0[3] + OBJC_IVAR____TtC6Tamale12TrackManager_supporting;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v3 = v0[9];
    uint64_t v2 = v0[10];
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[8];
    uint64_t v6 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
    AsyncStream.makeAsyncIterator()();
    uint64_t v8 = sub_1003C1D70(&qword_10052CE48, (void (*)(uint64_t))type metadata accessor for TrackManager);
    v0[11] = v8;
    uint64_t v9 = v0[3];
    uint64_t v10 = (void *)swift_task_alloc();
    v0[12] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1003AACA0;
    uint64_t v11 = v0[4];
    return AsyncStream.Iterator.next(isolation:)(v0 + 2, v9, v8, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_1003AACA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003AADB0, v1, 0);
}

uint64_t sub_1003AADB0()
{
  if (v0[2])
  {
    sub_1003AC4F0(v0[2]);
    swift_bridgeObjectRelease();
    uint64_t v1 = v0[11];
    uint64_t v2 = v0[3];
    uint64_t v3 = (void *)swift_task_alloc();
    v0[12] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1003AACA0;
    uint64_t v4 = v0[4];
    return AsyncStream.Iterator.next(isolation:)(v0 + 2, v2, v1, v4);
  }
  else
  {
    uint64_t v5 = v0[10];
    uint64_t v6 = v0[7];
    uint64_t v7 = v0[8];
    (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1003AAF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v6 = type metadata accessor for TrackManager.MatchingComputationResult(0);
  _OWORD v4[3] = v6;
  v4[4] = *(void *)(v6 - 8);
  v4[5] = swift_task_alloc();
  sub_10000F214(&qword_10052CE68);
  v4[6] = swift_task_alloc();
  uint64_t v7 = sub_10000F214(&qword_10052CE70);
  v4[7] = v7;
  double v4[8] = *(void *)(v7 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v8 = sub_10000F214(&qword_10052CE78);
  v4[10] = v8;
  v4[11] = *(void *)(v8 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_1003AB0C4, a4, 0);
}

uint64_t sub_1003AB0C4()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[2] + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationResultStream, v3);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_1003C1D70(&qword_10052CE48, (void (*)(uint64_t))type metadata accessor for TrackManager);
  v0[13] = v4;
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[14] = v6;
  void *v6 = v0;
  v6[1] = sub_1003AB214;
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[6];
  return AsyncStream.Iterator.next(isolation:)(v8, v5, v4, v7);
}

uint64_t sub_1003AB214()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003AB324, v1, 0);
}

uint64_t sub_1003AB324()
{
  uint64_t v1 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[4] + 48))(v1, 1, v0[3]) == 1)
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[5];
    sub_1003C1D08(v1, v4, type metadata accessor for TrackManager.MatchingComputationResult);
    sub_1003A5378(v4);
    sub_1003B4A5C(v4, type metadata accessor for TrackManager.MatchingComputationResult);
    uint64_t v5 = v0[13];
    uint64_t v6 = v0[2];
    uint64_t v7 = (void *)swift_task_alloc();
    v0[14] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1003AB214;
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[6];
    return AsyncStream.Iterator.next(isolation:)(v9, v6, v5, v8);
  }
}

uint64_t sub_1003AB4D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v3 = *((void *)v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v8)
  {
    uint64_t v36 = _swiftEmptyArrayStorage;
    uint64_t result = sub_100040C38(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }
    unint64_t v33 = v6;
    uint64_t v34 = v0;
    uint64_t v10 = 0;
    uint64_t v11 = v36;
    uint64_t v12 = v7;
    unint64_t v35 = v7 & 0xC000000000000001;
    uint64_t v13 = v8;
    do
    {
      if (v35)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v14 = *(void *)(v12 + 8 * v10 + 32);
        swift_retain();
      }
      uint64_t v15 = v14 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v5, v15, v16);
      sub_100035548((uint64_t)&v5[v2[5]]);
      sub_100035D50((uint64_t)&v5[v2[6]]);
      uint64_t v17 = *(void *)(v14 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
      uint64_t v18 = *(void *)(v14 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp);
      char v19 = *(unsigned char *)(v17 + 64);
      float v20 = *(float *)(v17 + 32);
      float v21 = *(float *)(v17 + 36);
      float v22 = *(float *)(v17 + 40);
      if ((float)(v20 * v21) == 0.0)
      {
        if (v22 == 0.0)
        {
          float v22 = fabsf(*(float *)(v17 + 44));
          float v20 = *(float *)(v17 + 36);
        }
        float v23 = *(float *)(v17 + 16);
        swift_release();
        float v24 = fabsf(v23);
        float v21 = v20;
      }
      else
      {
        float v25 = v22 - fabsf(*(float *)(v17 + 44));
        float v26 = *(float *)(v17 + 16);
        swift_release();
        float v24 = v22 - v26;
        float v22 = v25;
      }
      v5[v2[7]] = v19;
      *(void *)&v5[v2[8]] = v18;
      *(float *)&v5[v2[9]] = (float)((float)(v21 * v24) / v22)
                           + (float)((float)((float)(1.0 - v20) * (float)(v22 - v24)) / v22);
      uint64_t v36 = v11;
      unint64_t v28 = v11[2];
      unint64_t v27 = v11[3];
      if (v28 >= v27 >> 1)
      {
        sub_100040C38(v27 > 1, v28 + 1, 1);
        uint64_t v11 = v36;
      }
      ++v10;
      long long v11[2] = v28 + 1;
      sub_1003C1D08((uint64_t)v5, (uint64_t)v11+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v28, type metadata accessor for CVTrackSnapshot);
    }
    while (v13 != v10);
    swift_bridgeObjectRelease();
    uint64_t v6 = v33;
    uint64_t v1 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v29 = v1 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v30 = *(void *)(v29 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v30 + 32))(v11, ObjectType, v30);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  void *v6 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  return sub_1003A8534();
}

uint64_t sub_1003AB8B0()
{
  uint64_t v0 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v38 = (uint64_t)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v35 - 8);
  uint64_t v36 = *(void *)(v2 + 64);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - v5;
  uint64_t v7 = sub_10000F214(&qword_10052CE10);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10000F214(&qword_1005250D0);
  uint64_t v11 = *(void *)(v33 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v33);
  uint64_t v31 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - v14;
  sub_10000F214(&qword_10051A130);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v7);
  uint64_t v16 = v15;
  uint64_t v30 = v15;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v17 = v6;
  uint64_t v32 = v6;
  UUID.init()();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v38, 1, 1, v18);
  uint64_t v19 = v2;
  float v20 = v34;
  uint64_t v21 = v35;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v34, v17, v35);
  float v22 = v31;
  float v23 = v16;
  uint64_t v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v31, v23, v33);
  unint64_t v25 = (*(unsigned __int8 *)(v19 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v26 = (v36 + *(unsigned __int8 *)(v11 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  *((void *)v27 + 4) = v37;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v27[v25], v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v26], v22, v24);
  swift_retain();
  sub_100064D5C(v38, (uint64_t)&unk_10052CE20, (uint64_t)v27);
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v32, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v30, v24);
}

uint64_t sub_1003ABCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v8 = sub_10000F214(&qword_10052CDF0);
  v6[9] = v8;
  v6[10] = *(void *)(v8 - 8);
  v6[11] = swift_task_alloc();
  sub_10000F214(&qword_10052CE28);
  v6[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v6[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[14] = v10;
  v6[15] = *(void *)(v10 + 64);
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_1003ABE5C, a4, 0);
}

uint64_t sub_1003ABE5C()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[17] = v7;
  v0[18] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v5, v2);
  uint64_t v8 = sub_10000F214(&qword_1005250D0);
  v0[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v6, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  swift_beginAccess();
  sub_1003A40A8(v4, v1, &qword_10052CE28, &qword_1005250D0, (void (*)(char *, uint64_t, uint64_t))sub_1002F5D6C, (void (*)(uint64_t))sub_1003F3F44);
  swift_endAccess();
  return _swift_task_switch(sub_1003ABFFC, 0, 0);
}

uint64_t sub_1003ABFFC()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[6];
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  v2(v1, v5, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v7;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v9 + v8, v1, v4);
  AsyncStream.Continuation.onTermination.setter();
  return _swift_task_switch(sub_1003AC130, v6, 0);
}

uint64_t sub_1003AC130()
{
  *(void *)(v0 + 160) = *(void *)(*(void *)(v0 + 48) + 112);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001A525C, 0, 0);
}

uint64_t sub_1003AC1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
    unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    sub_100064D5C((uint64_t)v9, (uint64_t)&unk_10052CE38, (uint64_t)v14);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003AC39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  sub_10000F214(&qword_10052CE28);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_1003AC434, a4, 0);
}

uint64_t sub_1003AC434()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  swift_beginAccess();
  sub_1003F3F44(v1, v2);
  sub_10000FBD8(v2, &qword_10052CE28);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1003AC4F0(uint64_t a1)
{
  uint64_t v66 = a1;
  uint64_t v2 = sub_10000F214(&qword_10052CDF8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v61 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v72 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v61 - v11;
  unint64_t v13 = (unint64_t *)(v1 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  swift_beginAccess();
  unint64_t v14 = *v13;
  if (!(*v13 >> 62))
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_14:
    unint64_t v23 = *v13;
    uint64_t v24 = (uint64_t *)v17[2];
    uint64_t v25 = v66;
    if (!(v23 >> 62))
    {
      uint64_t v26 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    while (1)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_16:
      if (v26 >= (uint64_t)v24) {
        uint64_t v26 = (uint64_t)v24;
      }
      if (v26)
      {
        sub_10000F214(&qword_1005250C8);
        unint64_t v27 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        unint64_t v27 = &_swiftEmptyDictionarySingleton;
      }
      *(void *)&v73[0] = v27;
      swift_bridgeObjectRetain();
      uint64_t v28 = swift_bridgeObjectRetain();
      sub_1003BF1EC(v28, v23, 1, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)&v73[0];
      uint64_t v30 = *(void *)(v25 + 64);
      uint64_t v65 = (unint64_t *)(v25 + 64);
      uint64_t v31 = 1 << *(unsigned char *)(v25 + 32);
      uint64_t v32 = -1;
      if (v31 < 64) {
        uint64_t v32 = ~(-1 << v31);
      }
      unint64_t v33 = v32 & v30;
      unint64_t v23 = (unint64_t)(v31 + 63) >> 6;
      unint64_t v68 = v72 + 16;
      uint64_t v69 = (void (**)(char *, char *, uint64_t))(v72 + 32);
      uint64_t v70 = (void (**)(unint64_t, uint64_t))(v72 + 8);
      unint64_t v62 = v23 - 1;
      swift_bridgeObjectRetain();
      unint64_t v34 = 0;
      uint64_t v67 = (char *)v23;
      unint64_t v64 = v23 - 5;
      uint64_t v63 = v25 + 104;
      uint64_t v24 = &qword_10052CE00;
      if (v33) {
        break;
      }
LABEL_29:
      uint64_t v46 = v34 + 1;
      if (!__OFADD__(v34, 1))
      {
        if (v46 >= (uint64_t)v67)
        {
          unint64_t v48 = v34;
        }
        else
        {
          unint64_t v47 = v65[v46];
          if (v47)
          {
LABEL_32:
            unint64_t v33 = (v47 - 1) & v47;
            unint64_t v37 = __clz(__rbit64(v47)) + (v46 << 6);
            unint64_t v34 = v46;
            goto LABEL_28;
          }
          unint64_t v48 = v34 + 1;
          if ((uint64_t)(v34 + 2) < (uint64_t)v67)
          {
            unint64_t v47 = v65[v34 + 2];
            if (v47)
            {
              uint64_t v46 = v34 + 2;
              goto LABEL_32;
            }
            unint64_t v48 = v34 + 2;
            if ((uint64_t)(v34 + 3) < (uint64_t)v67)
            {
              unint64_t v47 = v65[v34 + 3];
              if (v47)
              {
                uint64_t v46 = v34 + 3;
                goto LABEL_32;
              }
              uint64_t v46 = v34 + 4;
              unint64_t v48 = v34 + 3;
              if ((uint64_t)(v34 + 4) < (uint64_t)v67)
              {
                unint64_t v47 = v65[v46];
                if (v47) {
                  goto LABEL_32;
                }
                while (v64 != v34)
                {
                  unint64_t v47 = *(void *)(v63 + 8 * v34++);
                  if (v47)
                  {
                    uint64_t v46 = v34 + 4;
                    goto LABEL_32;
                  }
                }
                unint64_t v48 = v62;
              }
            }
          }
        }
        uint64_t v49 = sub_10000F214(&qword_10052CE00);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v4, 1, 1, v49);
        unint64_t v33 = 0;
        unint64_t v34 = v48;
        goto LABEL_35;
      }
      __break(1u);
    }
    while (1)
    {
      while (1)
      {
        unint64_t v36 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        unint64_t v37 = v36 | (v34 << 6);
LABEL_28:
        (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))(v4, *(void *)(v25 + 48) + *(void *)(v72 + 72) * v37, v8);
        uint64_t v38 = *(void *)(v25 + 56) + 88 * v37;
        uint64_t v39 = sub_10000F214(&qword_10052CE00);
        uint64_t v40 = &v4[*(int *)(v39 + 48)];
        uint64_t v41 = *(void *)(v38 + 80);
        long long v42 = *(_OWORD *)(v38 + 16);
        long long v43 = *(_OWORD *)(v38 + 32);
        long long v44 = *(_OWORD *)(v38 + 48);
        long long v45 = *(_OWORD *)(v38 + 64);
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v38;
        *((_OWORD *)v40 + 1) = v42;
        *((_OWORD *)v40 + 2) = v43;
        *((_OWORD *)v40 + 3) = v44;
        *((_OWORD *)v40 + 4) = v45;
        *((void *)v40 + 10) = v41;
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v4, 0, 1, v39);
LABEL_35:
        sub_10000FC34((uint64_t)v4, (uint64_t)v7, &qword_10052CDF8);
        uint64_t v50 = sub_10000F214(&qword_10052CE00);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v7, 1, v50) == 1)
        {
          swift_release();
          return swift_release();
        }
        uint64_t v51 = v4;
        uint64_t v52 = &v7[*(int *)(v50 + 48)];
        long long v53 = *((_OWORD *)v52 + 3);
        v73[2] = *((_OWORD *)v52 + 2);
        v73[3] = v53;
        v73[4] = *((_OWORD *)v52 + 4);
        uint64_t v74 = *((void *)v52 + 10);
        long long v54 = *((_OWORD *)v52 + 1);
        v73[0] = *(_OWORD *)v52;
        v73[1] = v54;
        unint64_t v23 = (unint64_t)v71;
        (*v69)(v71, v7, v8);
        if (*(void *)(v29 + 16)) {
          break;
        }
        uint64_t v35 = *v70;
LABEL_26:
        v35(v23, v8);
        uint64_t v4 = v51;
        if (!v33) {
          goto LABEL_29;
        }
      }
      unint64_t v55 = sub_10032ADC4(v23);
      uint64_t v35 = *v70;
      if ((v56 & 1) == 0) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(*(void *)(v29 + 56) + 8 * v55);
      swift_retain();
      v35((unint64_t)v71, v8);
      uint64_t v57 = *(void *)(v23 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_predictions);
      uint64_t v58 = (os_unfair_lock_s *)(*(void *)(v57 + 48) + 16);
      os_unfair_lock_lock(v58);
      sub_100382740((uint64_t)v73, v57);
      uint64_t v59 = v58;
      uint64_t v25 = v66;
      os_unfair_lock_unlock(v59);
      swift_release();
      uint64_t v4 = v51;
      if (!v33) {
        goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15) {
    goto LABEL_13;
  }
LABEL_3:
  unint64_t v68 = v14;
  *(void *)&v73[0] = _swiftEmptyArrayStorage;
  sub_100040CB0(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v65 = v13;
    uint64_t v67 = v4;
    uint64_t v16 = 0;
    uint64_t v17 = *(void **)&v73[0];
    unint64_t v18 = v68;
    uint64_t v19 = (void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    uint64_t v69 = (void (**)(char *, char *, uint64_t))(v72 + 32);
    uint64_t v70 = (void (**)(unint64_t, uint64_t))(v68 & 0xC000000000000001);
    do
    {
      if (v70)
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        (*v19)(v12, v20 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id, v8);
        unint64_t v18 = v68;
        swift_unknownObjectRelease();
      }
      else
      {
        (*v19)(v12, *(void *)(v18 + 8 * v16 + 32) + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id, v8);
      }
      *(void *)&v73[0] = v17;
      unint64_t v22 = v17[2];
      unint64_t v21 = v17[3];
      if (v22 >= v21 >> 1)
      {
        sub_100040CB0(v21 > 1, v22 + 1, 1);
        unint64_t v18 = v68;
        uint64_t v17 = *(void **)&v73[0];
      }
      ++v16;
      void v17[2] = v22 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v72 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v22, v12, v8);
    }
    while (v15 != v16);
    swift_bridgeObjectRelease();
    uint64_t v4 = v67;
    unint64_t v13 = v65;
    goto LABEL_14;
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1003ACD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100521070);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a1, v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_6:
    uint64_t v25 = (uint64_t *)(v3 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
    swift_beginAccess();
    uint64_t v24 = *v25;
    swift_bridgeObjectRetain();
    return v24;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a2);
  uint64_t v19 = v3 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting;
  if (!swift_unknownObjectWeakLoadStrong())
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
    goto LABEL_6;
  }
  uint64_t v29 = a3;
  uint64_t v20 = *(void *)(v19 + 8);
  uint64_t ObjectType = swift_getObjectType();
  swift_beginAccess();
  uint64_t v21 = type metadata accessor for DetectionResult(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  unint64_t v22 = *(uint64_t (**)(uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = v22(v23, v9, v18, a2, v29, ObjectType, v20);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000FBD8((uint64_t)v9, (uint64_t *)&unk_100521070);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  return v24;
}

uint64_t sub_1003AD064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v71 = a4;
  uint64_t v84 = a2;
  uint64_t v8 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v86 = *((void *)v8 - 1);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v13 = (char *)v70 - v12;
  uint64_t v83 = sub_10000F214(&qword_10052CDD8);
  uint64_t v73 = *(void (***)(char *, uint64_t))(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_10000F214(&qword_10052CDE0);
  uint64_t v72 = *(void (***)(char *, uint64_t))(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v80 = (char *)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10052CDE8);
  __chkstk_darwin(v16 - 8);
  unint64_t v18 = (char *)v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  __chkstk_darwin(v87);
  uint64_t v79 = (uint64_t)v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v78 = (uint64_t)v70 - v22;
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v85 = v5;
  if (!v23)
  {
    sub_1003AED30();
    uint64_t v46 = *(void *)(a3 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v13, v84, a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v13, 0, 1, a3);
    unint64_t v47 = sub_1003ACD18((uint64_t)v13, a3, v71);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v76);
    if (v47 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v48)
      {
LABEL_12:
        uint64_t v88 = _swiftEmptyArrayStorage;
        uint64_t result = sub_100040C38(0, v48 & ~(v48 >> 63), 0);
        if (v48 < 0)
        {
          __break(1u);
          return result;
        }
        uint64_t v49 = 0;
        uint64_t v50 = v88;
        unint64_t v51 = v47 & 0xC000000000000001;
        unint64_t v52 = v47;
        do
        {
          if (v51)
          {
            uint64_t v53 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v53 = *(void *)(v47 + 8 * v49 + 32);
            swift_retain();
          }
          uint64_t v54 = v53 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
          uint64_t v55 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v10, v54, v55);
          sub_100035548((uint64_t)&v10[v8[5]]);
          sub_100035D50((uint64_t)&v10[v8[6]]);
          uint64_t v56 = *(void *)(v53 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
          uint64_t v57 = *(void *)(v53 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp);
          char v58 = *(unsigned char *)(v56 + 64);
          float v59 = *(float *)(v56 + 32);
          float v60 = *(float *)(v56 + 36);
          float v61 = *(float *)(v56 + 40);
          if ((float)(v59 * v60) == 0.0)
          {
            if (v61 == 0.0)
            {
              float v61 = fabsf(*(float *)(v56 + 44));
              float v59 = *(float *)(v56 + 36);
            }
            float v62 = *(float *)(v56 + 16);
            swift_release();
            float v63 = fabsf(v62);
            float v60 = v59;
          }
          else
          {
            float v64 = v61 - fabsf(*(float *)(v56 + 44));
            float v65 = *(float *)(v56 + 16);
            swift_release();
            float v63 = v61 - v65;
            float v61 = v64;
          }
          v10[v8[7]] = v58;
          *(void *)&v10[v8[8]] = v57;
          *(float *)&v10[v8[9]] = (float)((float)(v60 * v63) / v61)
                                + (float)((float)((float)(1.0 - v59) * (float)(v61 - v63)) / v61);
          uint64_t v88 = v50;
          unint64_t v67 = v50[2];
          unint64_t v66 = v50[3];
          if (v67 >= v66 >> 1)
          {
            sub_100040C38(v66 > 1, v67 + 1, 1);
            uint64_t v50 = v88;
          }
          ++v49;
          v50[2] = v67 + 1;
          sub_1003C1D08((uint64_t)v10, (uint64_t)v50+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v67, type metadata accessor for CVTrackSnapshot);
          unint64_t v47 = v52;
        }
        while (v48 != v49);
        swift_bridgeObjectRelease();
LABEL_28:
        uint64_t v68 = v85;
        *(void *)(v85 + 112) = v50;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_retain();
        uint64_t v69 = swift_bridgeObjectRetain();
        sub_1003C162C(v69, v68);
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v50 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  uint64_t v76 = v5 + OBJC_IVAR____TtC6Tamale12TrackManager_logger;
  uint64_t v24 = v5 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStreamContinuation;
  uint64_t v25 = v21;
  uint64_t v26 = type metadata accessor for DetectionResult(0);
  uint64_t v27 = a1;
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = v27 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v70[1] = v27;
  swift_bridgeObjectRetain();
  uint64_t v75 = v24;
  swift_beginAccess();
  uint64_t v30 = *(void *)(v28 + 72);
  uint64_t v86 = v25 + 48;
  uint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v73 + 2);
  ++v73;
  ++v72;
  uint64_t v31 = v71;
  uint64_t v32 = v84;
  uint64_t v77 = v18;
  do
  {
    sub_1003ADA5C(v29, v32, a3, v31, (uint64_t)v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v86)(v18, 1, v87) == 1)
    {
      uint64_t v33 = a3;
      uint64_t v34 = v31;
      sub_10000FBD8((uint64_t)v18, &qword_10052CDE8);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to make a matching computation request", v37, 2u);
        swift_slowDealloc();
      }

      uint64_t v31 = v34;
      a3 = v33;
    }
    else
    {
      uint64_t v38 = (uint64_t)v18;
      uint64_t v39 = v78;
      sub_1003C1D08(v38, v78, type metadata accessor for TrackManager.MatchingComputationRequest);
      uint64_t v40 = v82;
      uint64_t v41 = v83;
      (*v74)(v82, v75, v83);
      sub_1003C1DB8(v39, v79, type metadata accessor for TrackManager.MatchingComputationRequest);
      long long v42 = v80;
      AsyncStream.Continuation.yield(_:)();
      uint64_t v43 = v41;
      uint64_t v32 = v84;
      (*v73)(v40, v43);
      (*v72)(v42, v81);
      uint64_t v44 = v39;
      unint64_t v18 = v77;
      sub_1003B4A5C(v44, type metadata accessor for TrackManager.MatchingComputationRequest);
    }
    v29 += v30;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  return sub_1003AED30();
}

uint64_t sub_1003ADA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v12 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v99 = *((void *)v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v95 = type metadata accessor for DetectionResult(0);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214((uint64_t *)&unk_100521070);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = *(double *)(a1 + *(int *)(type metadata accessor for DetectionRequest(0) + 28));
  uint64_t v96 = (unint64_t *)a3;
  uint64_t v97 = a4;
  uint64_t v98 = a2;
  if (v20 > sub_10030CA28(a3, a4))
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Detection result provided but applies to some future frame", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
    uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    return v25(a5, 1, 1, v24);
  }
  uint64_t v91 = v16;
  uint64_t v92 = a5;
  uint64_t v27 = (unint64_t *)(v6 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  uint64_t v28 = swift_beginAccess();
  unint64_t v29 = *v27;
  __chkstk_darwin(v28);
  *(&v88 - 2) = a1;
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_1001C1F00((uint64_t (*)(uint64_t *))sub_1003C1CE8, &v88 - 4, v29);
  uint64_t v31 = v6 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v32 = *(void *)(v31 + 8);
    uint64_t ObjectType = swift_getObjectType();
    sub_1003C1DB8(a1, (uint64_t)v19, type metadata accessor for DetectionResult);
    (*(void (**)(char *, void, uint64_t, int64_t))(v94 + 56))(v19, 0, 1, v95);
    uint64_t v34 = (uint64_t)v96;
    uint64_t v35 = (*(uint64_t (**)(void *, char *, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t))(v32 + 8))(v30, v19, v98, v96, v97, ObjectType, v32);
    swift_unknownObjectRelease();
    sub_10000FBD8((uint64_t)v19, (uint64_t *)&unk_100521070);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = (uint64_t)v30;
    uint64_t v34 = (uint64_t)v96;
  }
  uint64_t v90 = a1;
  uint64_t v36 = sub_10033191C((unint64_t)v30);
  swift_bridgeObjectRelease();
  unint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = sub_10033191C(v37);
  unint64_t v89 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_1003A4E5C(v38, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (((unint64_t)v39 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for CVTrackedDetection(0);
    sub_1003C1D70(&qword_1005250B8, (void (*)(uint64_t))type metadata accessor for CVTrackedDetection);
    Set.Iterator.init(_cocoa:)();
    uint64_t v39 = v104;
    uint64_t v96 = v105;
    uint64_t v40 = v106;
    unint64_t v41 = v107;
    unint64_t v42 = v108;
  }
  else
  {
    unint64_t v41 = 0;
    uint64_t v43 = -1 << *((unsigned char *)v39 + 32);
    unint64_t v44 = v39[7];
    uint64_t v96 = v39 + 7;
    uint64_t v45 = ~v43;
    uint64_t v46 = -v43;
    if (v46 < 64) {
      uint64_t v47 = ~(-1 << v46);
    }
    else {
      uint64_t v47 = -1;
    }
    unint64_t v42 = v47 & v44;
    uint64_t v40 = v45;
  }
  uint64_t v94 = (unint64_t)v39 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v88 = v40;
  int64_t v95 = (unint64_t)(v40 + 64) >> 6;
  uint64_t v93 = (char *)&type metadata for Swift.AnyObject + 8;
  while (((unint64_t)v39 & 0x8000000000000000) != 0)
  {
    uint64_t v51 = __CocoaSet.Iterator.next()();
    if (!v51) {
      goto LABEL_59;
    }
    uint64_t v100 = (void *)v51;
    type metadata accessor for CVTrackedDetection(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v52 = v101;
    swift_unknownObjectRelease();
    unint64_t v50 = v41;
    uint64_t v35 = v42;
    if (!v52) {
      goto LABEL_59;
    }
LABEL_41:
    double v56 = sub_10030CA28(v34, v97);
    uint64_t v57 = *(void *)(v52 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
    double v58 = *(double *)(v57 + 24);
    if (v58 <= v56)
    {
      float v59 = 0.0;
      if (v58 != -INFINITY && (*(unsigned char *)(v57 + 48) & 1) != 0)
      {
        double v60 = *(double *)(v57 + 56);
        if (v60 > 0.0)
        {
          float v61 = v60;
          float v59 = (float)(*(float *)(v57 + 40) - *(float *)(v57 + 44)) / v61;
        }
        float v62 = v56 - v58;
        float v59 = v59 * v62;
      }
      *(double *)(v57 + 24) = v56;
      float v63 = 0.0 - v59;
      if (*(unsigned char *)(v57 + 64))
      {
        if (*(unsigned char *)(v57 + 64) == 1)
        {
          float v64 = v63 + *(float *)(v57 + 16);
          if (*(float *)(v57 + 44) > v64) {
            float v64 = *(float *)(v57 + 44);
          }
        }
        else
        {
          float v64 = v63 + *(float *)(v57 + 16);
        }
      }
      else
      {
        float v64 = v63 + *(float *)(v57 + 16);
        if (v64 >= *(float *)(v57 + 40)) {
          float v64 = *(float *)(v57 + 40);
        }
      }
      *(float *)(v57 + 16) = v64;
      if (*(float *)(v57 + 40) < v64)
      {
        char v48 = 0;
LABEL_18:
        *(unsigned char *)(v57 + 64) = v48;
        goto LABEL_19;
      }
      if (v64 < *(float *)(v57 + 44))
      {
        char v48 = 1;
        goto LABEL_18;
      }
    }
LABEL_19:
    swift_release();
    unint64_t v41 = v50;
    unint64_t v42 = v35;
  }
  if (v42)
  {
    uint64_t v35 = (v42 - 1) & v42;
    unint64_t v49 = __clz(__rbit64(v42)) | (v41 << 6);
    unint64_t v50 = v41;
    goto LABEL_40;
  }
  int64_t v53 = v41 + 1;
  if (__OFADD__(v41, 1))
  {
    __break(1u);
    goto LABEL_79;
  }
  if (v53 >= v95) {
    goto LABEL_59;
  }
  unint64_t v54 = v96[v53];
  unint64_t v50 = v41 + 1;
  if (v54) {
    goto LABEL_39;
  }
  unint64_t v50 = v41 + 2;
  if ((uint64_t)(v41 + 2) >= v95) {
    goto LABEL_59;
  }
  unint64_t v54 = v96[v50];
  if (v54) {
    goto LABEL_39;
  }
  unint64_t v50 = v41 + 3;
  if ((uint64_t)(v41 + 3) >= v95) {
    goto LABEL_59;
  }
  unint64_t v54 = v96[v50];
  if (v54) {
    goto LABEL_39;
  }
  unint64_t v50 = v41 + 4;
  if ((uint64_t)(v41 + 4) >= v95) {
    goto LABEL_59;
  }
  unint64_t v54 = v96[v50];
  if (v54)
  {
LABEL_39:
    uint64_t v35 = (v54 - 1) & v54;
    unint64_t v49 = __clz(__rbit64(v54)) + (v50 << 6);
LABEL_40:
    uint64_t v52 = *(void *)(v39[6] + 8 * v49);
    swift_retain();
    if (!v52) {
      goto LABEL_59;
    }
    goto LABEL_41;
  }
  unint64_t v55 = v41 + 5;
  while (v95 != v55)
  {
    unint64_t v54 = v96[v55++];
    if (v54)
    {
      unint64_t v50 = v55 - 1;
      goto LABEL_39;
    }
  }
LABEL_59:
  sub_10014AAB4();
  uint64_t v35 = (uint64_t)v91;
  sub_1003C1DB8(v90, (uint64_t)v91, type metadata accessor for DetectionResult);
  uint64_t v102 = v34;
  uint64_t v103 = v97;
  float v65 = sub_100040120((uint64_t *)&v101);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v65, v98, v34);
  unint64_t v41 = v89;
  if (!(v89 >> 62))
  {
    uint64_t v66 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_61;
  }
LABEL_79:
  swift_bridgeObjectRetain();
  uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_61:
  uint64_t v67 = v92;
  if (!v66)
  {
    swift_bridgeObjectRelease();
    uint64_t v69 = _swiftEmptyArrayStorage;
    goto LABEL_77;
  }
  uint64_t v100 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100040C38(0, v66 & ~(v66 >> 63), 0);
  if (v66 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v69 = v100;
    unint64_t v70 = v41;
    unint64_t v71 = v41 & 0xC000000000000001;
    do
    {
      if (v71)
      {
        uint64_t v72 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v72 = *(void *)(v70 + 8 * v68 + 32);
        swift_retain();
      }
      uint64_t v73 = v72 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
      uint64_t v74 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16))(v14, v73, v74);
      sub_100035548((uint64_t)&v14[v12[5]]);
      sub_100035D50((uint64_t)&v14[v12[6]]);
      uint64_t v75 = *(void *)(v72 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
      uint64_t v76 = *(void *)(v72 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp);
      char v77 = *(unsigned char *)(v75 + 64);
      float v78 = *(float *)(v75 + 32);
      float v79 = *(float *)(v75 + 36);
      float v80 = *(float *)(v75 + 40);
      if ((float)(v78 * v79) == 0.0)
      {
        if (v80 == 0.0)
        {
          float v80 = fabsf(*(float *)(v75 + 44));
          float v78 = *(float *)(v75 + 36);
        }
        float v81 = *(float *)(v75 + 16);
        swift_release();
        float v82 = fabsf(v81);
        float v79 = v78;
      }
      else
      {
        float v83 = v80 - fabsf(*(float *)(v75 + 44));
        float v84 = *(float *)(v75 + 16);
        swift_release();
        float v82 = v80 - v84;
        float v80 = v83;
      }
      v14[v12[7]] = v77;
      *(void *)&v14[v12[8]] = v76;
      *(float *)&v14[v12[9]] = (float)((float)(v79 * v82) / v80)
                             + (float)((float)((float)(1.0 - v78) * (float)(v80 - v82)) / v80);
      uint64_t v100 = v69;
      unint64_t v86 = v69[2];
      unint64_t v85 = v69[3];
      if (v86 >= v85 >> 1)
      {
        sub_100040C38(v85 > 1, v86 + 1, 1);
        uint64_t v69 = v100;
      }
      ++v68;
      v69[2] = v86 + 1;
      sub_1003C1D08((uint64_t)v14, (uint64_t)v69+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v86, type metadata accessor for CVTrackSnapshot);
    }
    while (v66 != v68);
    swift_bridgeObjectRelease();
    uint64_t v67 = v92;
    uint64_t v35 = (uint64_t)v91;
LABEL_77:
    sub_1003C1D08(v35, v67, type metadata accessor for DetectionResult);
    uint64_t v87 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
    sub_1000321A8(&v101, v67 + *(int *)(v87 + 20));
    *(void *)(v67 + *(int *)(v87 + 24)) = v69;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v67, 0, 1, v87);
  }
  return result;
}

uint64_t sub_1003AE654(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000F214(&qword_100524EB0);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVDetection();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035548((uint64_t)v9);
  uint64_t v10 = (uint64_t)&v6[*(int *)(v4 + 56)];
  sub_1003C1DB8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1003C1DB8(a2, v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_13;
    case 2u:
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 5u:
      if (swift_getEnumCaseMultiPayload() == 5) {
        goto LABEL_13;
      }
      goto LABEL_3;
    default:
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        sub_10000FBD8((uint64_t)v6, &qword_100524EB0);
        uint64_t v11 = 0;
      }
      else
      {
LABEL_13:
        sub_1003B4A5C(v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003B4A5C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v11 = 1;
      }
      sub_1003B4A5C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      return v11;
  }
}

uint64_t sub_1003AE8B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v10 = *((void *)v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v4;
  uint64_t v13 = (void *)(v4 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  swift_beginAccess();
  uint64_t v14 = (void *)*v13;
  if (!(a1 >> 62))
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v40)
  {
LABEL_3:
    swift_beginAccess();
    unint64_t v16 = swift_bridgeObjectRetain();
    sub_1001A0A34(v16);
    swift_endAccess();
  }
LABEL_4:
  unint64_t v49 = (unint64_t)v14;
  unint64_t v17 = swift_bridgeObjectRetain();
  sub_1001A0A34(v17);
  unint64_t v18 = v49;
  if (v49 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v45 = a2;
    uint64_t v46 = a3;
    if (v19) {
      goto LABEL_6;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    os_log_type_t v22 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  uint64_t v19 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  if (!v19) {
    goto LABEL_23;
  }
LABEL_6:
  unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t result = sub_100040C38(0, v19 & ~(v19 >> 63), 0);
  if (v19 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v48 = v19;
  uint64_t v44 = a4;
  uint64_t v21 = 0;
  os_log_type_t v22 = (void *)v49;
  unint64_t v23 = v18 & 0xC000000000000001;
  unint64_t v24 = v18;
  do
  {
    if (v23)
    {
      uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v25 = *(void *)(v18 + 8 * v21 + 32);
      swift_retain();
    }
    uint64_t v26 = v25 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
    uint64_t v27 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v12, v26, v27);
    sub_100035548((uint64_t)&v12[v9[5]]);
    sub_100035D50((uint64_t)&v12[v9[6]]);
    uint64_t v28 = *(void *)(v25 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
    uint64_t v29 = *(void *)(v25 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp);
    char v30 = *(unsigned char *)(v28 + 64);
    float v31 = *(float *)(v28 + 32);
    float v32 = *(float *)(v28 + 36);
    float v33 = *(float *)(v28 + 40);
    if ((float)(v31 * v32) == 0.0)
    {
      if (v33 == 0.0)
      {
        float v33 = fabsf(*(float *)(v28 + 44));
        float v31 = *(float *)(v28 + 36);
      }
      float v34 = *(float *)(v28 + 16);
      swift_release();
      float v35 = fabsf(v34);
      float v32 = v31;
    }
    else
    {
      float v36 = v33 - fabsf(*(float *)(v28 + 44));
      float v37 = *(float *)(v28 + 16);
      swift_release();
      float v35 = v33 - v37;
      float v33 = v36;
    }
    v12[v9[7]] = v30;
    *(void *)&v12[v9[8]] = v29;
    *(float *)&v12[v9[9]] = (float)((float)(v32 * v35) / v33)
                          + (float)((float)((float)(1.0 - v31) * (float)(v33 - v35)) / v33);
    unint64_t v49 = (unint64_t)v22;
    unint64_t v39 = v22[2];
    unint64_t v38 = v22[3];
    if (v39 >= v38 >> 1)
    {
      sub_100040C38(v38 > 1, v39 + 1, 1);
      os_log_type_t v22 = (void *)v49;
    }
    ++v21;
    _OWORD v22[2] = v39 + 1;
    sub_1003C1D08((uint64_t)v12, (uint64_t)v22+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v39, type metadata accessor for CVTrackSnapshot);
    unint64_t v18 = v24;
  }
  while (v48 != v21);
  swift_bridgeObjectRelease();
  a4 = v44;
LABEL_24:
  uint64_t v41 = v47 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting;
  if (!swift_unknownObjectWeakLoadStrong()) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v42 = *(void *)(v41 + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 24))(v22, v45, v46, a4, ObjectType, v42);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1003AED30()
{
  uint64_t v1 = (int *)type metadata accessor for CVTrackSnapshot(0);
  uint64_t v60 = *((void *)v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v62 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v59 = v0;
  uint64_t v4 = (unint64_t *)(v0 + OBJC_IVAR____TtC6Tamale12TrackManager_tracksInternal);
  swift_beginAccess();
  double v58 = v4;
  unint64_t v5 = *v4;
  if (*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v6)
  {
    if (v6 < 1)
    {
      __break(1u);
      goto LABEL_58;
    }
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(v5 + 8 * i + 32);
        swift_retain();
      }
      if (*(unsigned char *)(*(void *)(v8 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger) + 64) == 1)
      {
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = v62;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v9 = v5 >> 62;
  if (!(v5 >> 62))
  {
    uint64_t v10 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v46) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    double v12 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    goto LABEL_33;
  }
LABEL_19:
  double v61 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_100040954(0, v10 & ~(v10 >> 63), 0);
  if (v10 < 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  unint64_t v57 = v5 >> 62;
  uint64_t v11 = 0;
  double v12 = v61;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v13 = swift_retain();
    }
    uint64_t v14 = *(float **)(v13 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
    float v15 = v14[8];
    float v16 = v14[9];
    float v17 = v14[10];
    if ((float)(v15 * v16) == 0.0)
    {
      if (v17 == 0.0)
      {
        float v17 = fabsf(v14[11]);
        float v15 = v14[9];
      }
      float v18 = v14[4];
      swift_release();
      float v19 = fabsf(v18);
      float v16 = v15;
    }
    else
    {
      float v20 = v17 - fabsf(v14[11]);
      float v21 = v14[4];
      swift_release();
      float v19 = v17 - v21;
      float v17 = v20;
    }
    double v61 = v12;
    unint64_t v23 = *(void *)(*(void *)&v12 + 16);
    unint64_t v22 = *(void *)(*(void *)&v12 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_100040954(v22 > 1, v23 + 1, 1);
      double v12 = v61;
    }
    ++v11;
    *(void *)(*(void *)&v12 + 16) = v23 + 1;
    *(float *)(*(void *)&v12 + 4 * v23 + 32) = (float)((float)(v16 * v19) / v17)
                                               + (float)((float)((float)(1.0 - v15) * (float)(v17 - v19)) / v17);
  }
  while (v10 != v11);
  swift_bridgeObjectRelease();
  unint64_t v9 = v57;
LABEL_33:
  swift_bridgeObjectRetain_n();
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v24, v25))
  {
    swift_bridgeObjectRelease_n();
LABEL_37:

    if (!v9)
    {
      uint64_t v28 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v28)
      {
LABEL_39:
        double v61 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        sub_100040C38(0, v28 & ~(v28 >> 63), 0);
        if (v28 < 0)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        uint64_t v29 = 0;
        double v30 = v61;
        do
        {
          if ((v5 & 0xC000000000000001) != 0)
          {
            uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v31 = *(void *)(v5 + 8 * v29 + 32);
            swift_retain();
          }
          uint64_t v32 = v31 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
          uint64_t v33 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v3, v32, v33);
          sub_100035548((uint64_t)&v3[v1[5]]);
          sub_100035D50((uint64_t)&v3[v1[6]]);
          uint64_t v34 = *(void *)(v31 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
          uint64_t v35 = *(void *)(v31 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp);
          char v36 = *(unsigned char *)(v34 + 64);
          float v37 = *(float *)(v34 + 32);
          float v38 = *(float *)(v34 + 36);
          float v39 = *(float *)(v34 + 40);
          if ((float)(v37 * v38) == 0.0)
          {
            if (v39 == 0.0)
            {
              float v39 = fabsf(*(float *)(v34 + 44));
              float v37 = *(float *)(v34 + 36);
            }
            float v40 = *(float *)(v34 + 16);
            swift_release();
            float v41 = fabsf(v40);
            float v38 = v37;
          }
          else
          {
            float v42 = v39 - fabsf(*(float *)(v34 + 44));
            float v43 = *(float *)(v34 + 16);
            swift_release();
            float v41 = v39 - v43;
            float v39 = v42;
          }
          v3[v1[7]] = v36;
          *(void *)&v3[v1[8]] = v35;
          *(float *)&v3[v1[9]] = (float)((float)(v38 * v41) / v39)
                               + (float)((float)((float)(1.0 - v37) * (float)(v39 - v41)) / v39);
          double v61 = v30;
          unint64_t v45 = *(void *)(*(void *)&v30 + 16);
          unint64_t v44 = *(void *)(*(void *)&v30 + 24);
          if (v45 >= v44 >> 1)
          {
            sub_100040C38(v44 > 1, v45 + 1, 1);
            double v30 = v61;
          }
          ++v29;
          *(void *)(*(void *)&v30 + 16) = v45 + 1;
          sub_1003C1D08((uint64_t)v3, *(void *)&v30+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v45, type metadata accessor for CVTrackSnapshot);
        }
        while (v28 != v29);
        swift_bridgeObjectRelease();
LABEL_61:
        uint64_t v47 = v59 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        unint64_t v49 = v58;
        if (Strong)
        {
          uint64_t v50 = *(void *)(v47 + 8);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(double, uint64_t, uint64_t))(v50 + 32))(COERCE_DOUBLE(*(void *)&v30), ObjectType, v50);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_beginAccess();
        uint64_t v52 = sub_1003BFE1C(v49, (uint64_t *)&v62);
        uint64_t v53 = v52;
        if (*v49 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v54 >= v53) {
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v54 = *(void *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v54 >= v52)
          {
LABEL_66:
            sub_10030777C(v53, v54);
            swift_endAccess();
            return swift_bridgeObjectRelease();
          }
        }
        __break(1u);
        goto LABEL_70;
      }
LABEL_60:
      swift_bridgeObjectRelease();
      double v30 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      goto LABEL_61;
    }
LABEL_59:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_39;
    }
    goto LABEL_60;
  }
  uint64_t v26 = swift_slowAlloc();
  *(_DWORD *)uint64_t v26 = 134218240;
  double v61 = *(double *)(*(void *)&v12 + 16);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v26 + 12) = 2048;
  unint64_t v27 = sub_1003A4E04(*(uint64_t *)&v12);
  if ((v27 & 0x100000000) == 0)
  {
    double v61 = *(float *)&v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Tracks expired: %ld (minScore: %f)", (uint8_t *)v26, 0x16u);
    swift_slowDealloc();
    goto LABEL_37;
  }
LABEL_71:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1003AF584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  return sub_1003C1DB8(a1 + *(int *)(v4 + 24), a2, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

Swift::Int sub_1003AF5D4@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = sub_100033B14();
  *a1 = result;
  return result;
}

void *sub_1003AF600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[2] = a4;
  uint64_t v7 = sub_1003C06D4(a1, (void (*)(uint64_t, uint64_t))sub_1003C6E28, (uint64_t)v18, &qword_10052CF10, &qword_100529840, &qword_100524EB0, (uint64_t)sub_10032A82C);
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1003C09F4(a2, a4);
  swift_bridgeObjectRelease();
  if (v7[2] != *(void *)(a1 + 16))
  {
    if (qword_100517EA8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000F378(v9, (uint64_t)qword_10055E310);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      double v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to lookup track with latest estimate for matchPairs", v12, 2u);
      swift_slowDealloc();
    }
  }
  if (v8[2] != *(void *)(a2 + 16))
  {
    if (qword_100517EA8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000F378(v13, (uint64_t)qword_10055E310);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      float v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to lookup track with latest estimate for unmatchedTracks", v16, 2u);
      swift_slowDealloc();
    }
  }
  swift_bridgeObjectRetain();
  return v7;
}

uint64_t sub_1003AF858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - v13;
  if (*(void *)(a3 + 16) && (unint64_t v15 = sub_10032AF9C(a1), (v16 & 1) != 0))
  {
    sub_1003C1DB8(*(void *)(a3 + 56) + *(void *)(v9 + 72) * v15, (uint64_t)v11, type metadata accessor for CVTrackSnapshot);
    sub_1003C1D08((uint64_t)v11, (uint64_t)v14, type metadata accessor for CVTrackSnapshot);
    uint64_t v17 = sub_10000F214(&qword_100529840);
    uint64_t v18 = a4 + *(int *)(v17 + 48);
    sub_1003C1D08((uint64_t)v14, a4, type metadata accessor for CVTrackSnapshot);
    sub_1003C1DB8(a2, v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a4, 0, 1, v17);
  }
  else
  {
    uint64_t v20 = sub_10000F214(&qword_100529840);
    float v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
    return v21(a4, 1, 1, v20);
  }
}

uint64_t sub_1003AFA7C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale12TrackManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStream;
  uint64_t v4 = sub_10000F214(&qword_10052CE98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationRequestStreamContinuation;
  uint64_t v6 = sub_10000F214(&qword_10052CDD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationResultStream;
  uint64_t v8 = sub_10000F214(&qword_10052CE70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC6Tamale12TrackManager_matchingComputationResultStreamContinuation;
  uint64_t v10 = sub_10000F214(&qword_10052CEB8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  sub_10010DE80(v0 + OBJC_IVAR____TtC6Tamale12TrackManager_supporting);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1003AFC50()
{
  sub_1003AFA7C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003AFC7C()
{
  return type metadata accessor for TrackManager(0);
}

uint64_t type metadata accessor for TrackManager(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052CA60);
}

void sub_1003AFCA4()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_1003AFF40(319, &qword_10052CA70, type metadata accessor for TrackManager.MatchingComputationRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
    if (v1 <= 0x3F)
    {
      sub_1003AFF40(319, &qword_10052CA78, type metadata accessor for TrackManager.MatchingComputationRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
      if (v2 <= 0x3F)
      {
        sub_1003AFF40(319, &qword_10052CA80, type metadata accessor for TrackManager.MatchingComputationResult, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
        if (v3 <= 0x3F)
        {
          sub_1003AFF40(319, (unint64_t *)&unk_10052CA88, type metadata accessor for TrackManager.MatchingComputationResult, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for TrackManager.MatchingComputationRequest(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052CD98);
}

void sub_1003AFF40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for TrackManager.MatchingComputationResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052CD00);
}

void *sub_1003AFFC4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a3;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v284 = v6;
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        float v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)((char *)a1 + v21[5]) = *(_DWORD *)((char *)a2 + v21[5]);
        uint64_t v22 = v21[6];
        unint64_t v23 = (_OWORD *)((char *)a1 + v22);
        unint64_t v24 = (_OWORD *)((char *)a2 + v22);
        long long v25 = v24[3];
        void v23[2] = v24[2];
        v23[3] = v25;
        long long v26 = v24[1];
        *unint64_t v23 = *v24;
        v23[1] = v26;
        *(void *)((char *)a1 + v21[7]) = *(void *)((char *)a2 + v21[7]);
        *(void *)((char *)a1 + v21[8]) = *(void *)((char *)a2 + v21[8]);
        *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
        *((unsigned char *)a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
        uint64_t v27 = v21[11];
        uint64_t v28 = (void *)((char *)a1 + v27);
        uint64_t v29 = (void *)((char *)a2 + v27);
        uint64_t v30 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v30;
        uint64_t v31 = v21[12];
        uint64_t v32 = (void *)((char *)a1 + v31);
        uint64_t v33 = (void *)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *uint64_t v32 = *v33;
        v32[1] = v34;
        uint64_t v35 = v21[13];
        __dst = (char *)a1 + v35;
        char v36 = (char *)a2 + v35;
        uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v38 = *(void *)(v37 - 8);
        float v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v39(v36, 1, v37))
        {
          uint64_t v40 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v36, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
        }
        uint64_t v6 = v284;
        uint64_t v80 = v21[14];
        float v81 = (char *)a1 + v80;
        float v82 = (char *)a2 + v80;
        unint64_t v83 = *((void *)v82 + 1);
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)float v81 = *(_OWORD *)v82;
        }
        else
        {
          uint64_t v84 = *(void *)v82;
          sub_100038528(*(void *)v82, *((void *)v82 + 1));
          *(void *)float v81 = v84;
          *((void *)v81 + 1) = v83;
        }
        uint64_t v85 = v21[15];
        unint64_t v86 = (void *)((char *)a1 + v85);
        uint64_t v87 = (void *)((char *)a2 + v85);
        if (*v87)
        {
          uint64_t v88 = v87[1];
          uint64_t v89 = v87[2];
          *unint64_t v86 = *v87;
          v86[1] = v88;
          v86[2] = v89;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)unint64_t v86 = *(_OWORD *)v87;
          v86[2] = v87[2];
        }
        break;
      case 2u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        float v42 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v42[5]) = *(_DWORD *)((char *)a2 + v42[5]);
        uint64_t v43 = v42[6];
        unint64_t v44 = (_OWORD *)((char *)a1 + v43);
        unint64_t v45 = (_OWORD *)((char *)a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *unint64_t v44 = *v45;
        v44[1] = v47;
        uint64_t v48 = v42[7];
        unint64_t v49 = (void *)((char *)a1 + v48);
        uint64_t v50 = (void *)((char *)a2 + v48);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        *unint64_t v49 = v52;
        v49[1] = v51;
        *(void *)((char *)a1 + v42[8]) = *(void *)((char *)a2 + v42[8]);
        *(void *)((char *)a1 + v42[9]) = *(void *)((char *)a2 + v42[9]);
        *(void *)((char *)a1 + v42[10]) = *(void *)((char *)a2 + v42[10]);
        *(void *)((char *)a1 + v42[11]) = *(void *)((char *)a2 + v42[11]);
        *(void *)((char *)a1 + v42[12]) = *(void *)((char *)a2 + v42[12]);
        uint64_t v53 = v42[13];
        uint64_t v54 = *(void **)((char *)a2 + v53);
        *(void *)((char *)a1 + v53) = v54;
        *((unsigned char *)a1 + v42[14]) = *((unsigned char *)a2 + v42[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v55 = v54;
        break;
      case 3u:
      case 4u:
        uint64_t v56 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
        unint64_t v57 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)((char *)a1 + v57[5]) = *(_DWORD *)((char *)a2 + v57[5]);
        uint64_t v58 = v57[6];
        uint64_t v59 = (_OWORD *)((char *)a1 + v58);
        uint64_t v60 = (_OWORD *)((char *)a2 + v58);
        long long v61 = v60[3];
        v59[2] = v60[2];
        v59[3] = v61;
        long long v62 = v60[1];
        _OWORD *v59 = *v60;
        v59[1] = v62;
        uint64_t v63 = v57[7];
        float v64 = (void *)((char *)a1 + v63);
        float v65 = (void *)((char *)a2 + v63);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        *float v64 = v67;
        v64[1] = v66;
        *(void *)((char *)a1 + v57[8]) = *(void *)((char *)a2 + v57[8]);
        *(void *)((char *)a1 + v57[9]) = *(void *)((char *)a2 + v57[9]);
        *(void *)((char *)a1 + v57[10]) = *(void *)((char *)a2 + v57[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v68 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(a1, a2, v68);
        uint64_t v69 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
        uint64_t v70 = v69[6];
        unint64_t v71 = (_OWORD *)((char *)a1 + v70);
        uint64_t v72 = (_OWORD *)((char *)a2 + v70);
        long long v73 = v72[3];
        v71[2] = v72[2];
        v71[3] = v73;
        long long v74 = v72[1];
        _OWORD *v71 = *v72;
        v71[1] = v74;
        uint64_t v75 = v69[7];
        uint64_t v76 = (void *)((char *)a1 + v75);
        char v77 = (void *)((char *)a2 + v75);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        *uint64_t v76 = v79;
        v76[1] = v78;
        *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
        *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        unint64_t v8 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)((char *)a1 + v8[5]) = *(_DWORD *)((char *)a2 + v8[5]);
        uint64_t v9 = v8[6];
        uint64_t v10 = (_OWORD *)((char *)a1 + v9);
        os_log_type_t v11 = (_OWORD *)((char *)a2 + v9);
        long long v12 = v11[3];
        v10[2] = v11[2];
        v10[3] = v12;
        long long v13 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v13;
        uint64_t v14 = v8[7];
        unint64_t v15 = (void *)((char *)a1 + v14);
        char v16 = (void *)((char *)a2 + v14);
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        void *v15 = v18;
        v15[1] = v17;
        *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
        *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v90 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v91 = v90[5];
    uint64_t v92 = (void *)((char *)a1 + v91);
    uint64_t v93 = (void *)((char *)a2 + v91);
    uint64_t v94 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *uint64_t v92 = *v93;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v285 = v6;
      v276 = (void *)type metadata accessor for UUID();
      __dstb = (void **)(*(v276 - 1) + 16);
      v281 = (void (*)(char *, char *, void *))*__dstb;
      ((void (*)(uint64_t *, uint64_t *))*__dstb)(v92, v93);
      uint64_t v98 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v99 = v98[5];
      uint64_t v100 = (char *)v92 + v99;
      long long v101 = (char *)v93 + v99;
      v275 = v98;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v281(v100, v101, v276);
          uint64_t v113 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v100[v113[5]] = *(_DWORD *)&v101[v113[5]];
          uint64_t v114 = v113[6];
          uint64_t v115 = &v100[v114];
          uint64_t v116 = &v101[v114];
          long long v117 = *((_OWORD *)v116 + 3);
          *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
          *((_OWORD *)v115 + 3) = v117;
          long long v118 = *((_OWORD *)v116 + 1);
          *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
          *((_OWORD *)v115 + 1) = v118;
          *(void *)&v100[v113[7]] = *(void *)&v101[v113[7]];
          *(void *)&v100[v113[8]] = *(void *)&v101[v113[8]];
          *(void *)&v100[v113[9]] = *(void *)&v101[v113[9]];
          v100[v113[10]] = v101[v113[10]];
          uint64_t v119 = v113[11];
          uint64_t v120 = &v100[v119];
          uint64_t v121 = &v101[v119];
          uint64_t v266 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v266;
          uint64_t v122 = v113[12];
          unint64_t v123 = &v100[v122];
          uint64_t v124 = &v101[v122];
          uint64_t v265 = *((void *)v124 + 1);
          *(void *)unint64_t v123 = *(void *)v124;
          *((void *)v123 + 1) = v265;
          uint64_t v125 = v113[13];
          v269 = &v100[v125];
          v271 = v113;
          __src = &v101[v125];
          uint64_t v126 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v263 = *(void *)(v126 - 8);
          v264 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v264(__src, 1, v126))
          {
            uint64_t v127 = sub_10000F214(&qword_100524BD0);
            memcpy(v269, __src, *(void *)(*(void *)(v127 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v269, __src, v126);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v263 + 56))(v269, 0, 1, v126);
          }
          uint64_t v164 = v271;
          uint64_t v165 = v271[14];
          uint64_t v166 = &v100[v165];
          uint64_t v167 = (uint64_t *)&v101[v165];
          unint64_t v168 = v167[1];
          if (v168 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
          }
          else
          {
            __srca = (void *)*v167;
            sub_100038528(*v167, v168);
            uint64_t v164 = v271;
            *(void *)uint64_t v166 = __srca;
            *((void *)v166 + 1) = v168;
          }
          uint64_t v169 = v164[15];
          uint64_t v170 = &v100[v169];
          id v171 = &v101[v169];
          if (*(void *)v171)
          {
            uint64_t v172 = *((void *)v171 + 1);
            uint64_t v173 = *((void *)v171 + 2);
            *(void *)uint64_t v170 = *(void *)v171;
            *((void *)v170 + 1) = v172;
            *((void *)v170 + 2) = v173;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
            *((void *)v170 + 2) = *((void *)v171 + 2);
          }
          uint64_t v98 = v275;
          break;
        case 2u:
          v281(v100, v101, v276);
          uint64_t v128 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v100[v128[5]] = *(_DWORD *)&v101[v128[5]];
          uint64_t v129 = v128[6];
          uint64_t v130 = &v100[v129];
          uint64_t v131 = &v101[v129];
          long long v132 = *((_OWORD *)v131 + 3);
          *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
          *((_OWORD *)v130 + 3) = v132;
          long long v133 = *((_OWORD *)v131 + 1);
          *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
          *((_OWORD *)v130 + 1) = v133;
          uint64_t v134 = v128[7];
          uint64_t v135 = &v100[v134];
          uint64_t v136 = &v101[v134];
          uint64_t v138 = *(void *)v136;
          uint64_t v137 = *((void *)v136 + 1);
          *(void *)uint64_t v135 = v138;
          *((void *)v135 + 1) = v137;
          *(void *)&v100[v128[8]] = *(void *)&v101[v128[8]];
          *(void *)&v100[v128[9]] = *(void *)&v101[v128[9]];
          *(void *)&v100[v128[10]] = *(void *)&v101[v128[10]];
          *(void *)&v100[v128[11]] = *(void *)&v101[v128[11]];
          *(void *)&v100[v128[12]] = *(void *)&v101[v128[12]];
          uint64_t v139 = v128[13];
          uint64_t v140 = *(void **)&v101[v139];
          *(void *)&v100[v139] = v140;
          v100[v128[14]] = v101[v128[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v141 = v140;
          break;
        case 3u:
        case 4u:
          v281(v100, v101, v276);
          uint64_t v142 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v100[v142[5]] = *(_DWORD *)&v101[v142[5]];
          uint64_t v143 = v142[6];
          uint64_t v144 = &v100[v143];
          uint64_t v145 = &v101[v143];
          long long v146 = *((_OWORD *)v145 + 3);
          *((_OWORD *)v144 + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)v144 + 3) = v146;
          long long v147 = *((_OWORD *)v145 + 1);
          *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
          *((_OWORD *)v144 + 1) = v147;
          uint64_t v148 = v142[7];
          unint64_t v149 = &v100[v148];
          uint64_t v150 = &v101[v148];
          uint64_t v152 = *(void *)v150;
          uint64_t v151 = *((void *)v150 + 1);
          *(void *)unint64_t v149 = v152;
          *((void *)v149 + 1) = v151;
          *(void *)&v100[v142[8]] = *(void *)&v101[v142[8]];
          *(void *)&v100[v142[9]] = *(void *)&v101[v142[9]];
          *(void *)&v100[v142[10]] = *(void *)&v101[v142[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v281(v100, v101, v276);
          uint64_t v153 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v100[v153[5]] = *(_DWORD *)&v101[v153[5]];
          uint64_t v154 = v153[6];
          uint64_t v155 = &v100[v154];
          uint64_t v156 = &v101[v154];
          long long v157 = *((_OWORD *)v156 + 3);
          *((_OWORD *)v155 + 2) = *((_OWORD *)v156 + 2);
          *((_OWORD *)v155 + 3) = v157;
          long long v158 = *((_OWORD *)v156 + 1);
          *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
          *((_OWORD *)v155 + 1) = v158;
          uint64_t v159 = v153[7];
          uint64_t v160 = &v100[v159];
          uint64_t v161 = &v101[v159];
          uint64_t v163 = *(void *)v161;
          uint64_t v162 = *((void *)v161 + 1);
          *(void *)uint64_t v160 = v163;
          *((void *)v160 + 1) = v162;
          *(void *)&v100[v153[8]] = *(void *)&v101[v153[8]];
          *(void *)&v100[v153[9]] = *(void *)&v101[v153[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v281(v100, v101, v276);
          uint64_t v102 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v100[v102[5]] = *(_DWORD *)&v101[v102[5]];
          uint64_t v103 = v102[6];
          uint64_t v104 = &v100[v103];
          uint64_t v105 = &v101[v103];
          long long v106 = *((_OWORD *)v105 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
          *((_OWORD *)v104 + 3) = v106;
          long long v107 = *((_OWORD *)v105 + 1);
          *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
          *((_OWORD *)v104 + 1) = v107;
          uint64_t v108 = v102[7];
          uint64_t v109 = &v100[v108];
          char v110 = &v101[v108];
          uint64_t v112 = *(void *)v110;
          uint64_t v111 = *((void *)v110 + 1);
          *(void *)uint64_t v109 = v112;
          *((void *)v109 + 1) = v111;
          *(void *)&v100[v102[8]] = *(void *)&v101[v102[8]];
          *(void *)&v100[v102[9]] = *(void *)&v101[v102[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v174 = v98[6];
      uint64_t v175 = (char *)v92 + v174;
      uint64_t v176 = (char *)v93 + v174;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v281(v175, v176, v276);
          uint64_t v188 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v175[v188[5]] = *(_DWORD *)&v176[v188[5]];
          uint64_t v189 = v188[6];
          uint64_t v190 = &v175[v189];
          char v191 = &v176[v189];
          long long v192 = *((_OWORD *)v191 + 3);
          *((_OWORD *)v190 + 2) = *((_OWORD *)v191 + 2);
          *((_OWORD *)v190 + 3) = v192;
          long long v193 = *((_OWORD *)v191 + 1);
          *(_OWORD *)uint64_t v190 = *(_OWORD *)v191;
          *((_OWORD *)v190 + 1) = v193;
          *(void *)&v175[v188[7]] = *(void *)&v176[v188[7]];
          *(void *)&v175[v188[8]] = *(void *)&v176[v188[8]];
          *(void *)&v175[v188[9]] = *(void *)&v176[v188[9]];
          v175[v188[10]] = v176[v188[10]];
          uint64_t v194 = v188[11];
          v195 = &v175[v194];
          uint64_t v196 = &v176[v194];
          uint64_t v272 = *((void *)v196 + 1);
          *(void *)v195 = *(void *)v196;
          *((void *)v195 + 1) = v272;
          uint64_t v197 = v188[12];
          long long v198 = &v175[v197];
          long long v199 = &v176[v197];
          v270 = (void *)*((void *)v199 + 1);
          *(void *)long long v198 = *(void *)v199;
          *((void *)v198 + 1) = v270;
          uint64_t v200 = v188[13];
          v277 = &v175[v200];
          __dsta = v188;
          v282 = &v176[v200];
          uint64_t v201 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v267 = *(void *)(v201 - 8);
          v268 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v267 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v268(v282, 1, v201))
          {
            uint64_t v202 = sub_10000F214(&qword_100524BD0);
            memcpy(v277, v282, *(void *)(*(void *)(v202 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v267 + 16))(v277, v282, v201);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v267 + 56))(v277, 0, 1, v201);
          }
          v253 = __dsta;
          uint64_t v254 = __dsta[14];
          v255 = &v175[v254];
          v256 = (uint64_t *)&v176[v254];
          unint64_t v257 = v256[1];
          if (v257 >> 60 == 15)
          {
            *(_OWORD *)v255 = *(_OWORD *)v256;
          }
          else
          {
            v283 = (void *)*v256;
            sub_100038528(*v256, v257);
            v253 = __dsta;
            *(void *)v255 = v283;
            *((void *)v255 + 1) = v257;
          }
          uint64_t v258 = v253[15];
          v259 = &v175[v258];
          v260 = &v176[v258];
          if (*(void *)v260)
          {
            uint64_t v261 = *((void *)v260 + 1);
            uint64_t v262 = *((void *)v260 + 2);
            *(void *)v259 = *(void *)v260;
            *((void *)v259 + 1) = v261;
            *((void *)v259 + 2) = v262;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)v259 = *(_OWORD *)v260;
            *((void *)v259 + 2) = *((void *)v260 + 2);
          }
          uint64_t v6 = v285;
          uint64_t v98 = v275;
          swift_storeEnumTagMultiPayload();
          goto LABEL_46;
        case 2u:
          v281(v175, v176, v276);
          uint64_t v203 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v175[v203[5]] = *(_DWORD *)&v176[v203[5]];
          uint64_t v204 = v203[6];
          v205 = &v175[v204];
          uint64_t v206 = &v176[v204];
          long long v207 = *((_OWORD *)v206 + 3);
          *((_OWORD *)v205 + 2) = *((_OWORD *)v206 + 2);
          *((_OWORD *)v205 + 3) = v207;
          long long v208 = *((_OWORD *)v206 + 1);
          *(_OWORD *)v205 = *(_OWORD *)v206;
          *((_OWORD *)v205 + 1) = v208;
          uint64_t v209 = v203[7];
          uint64_t v210 = &v175[v209];
          v211 = &v176[v209];
          uint64_t v213 = *(void *)v211;
          uint64_t v212 = *((void *)v211 + 1);
          *(void *)uint64_t v210 = v213;
          *((void *)v210 + 1) = v212;
          *(void *)&v175[v203[8]] = *(void *)&v176[v203[8]];
          *(void *)&v175[v203[9]] = *(void *)&v176[v203[9]];
          *(void *)&v175[v203[10]] = *(void *)&v176[v203[10]];
          *(void *)&v175[v203[11]] = *(void *)&v176[v203[11]];
          *(void *)&v175[v203[12]] = *(void *)&v176[v203[12]];
          uint64_t v214 = v203[13];
          uint64_t v215 = *(void **)&v176[v214];
          *(void *)&v175[v214] = v215;
          v175[v203[14]] = v176[v203[14]];
          swift_bridgeObjectRetain();
          uint64_t v98 = v275;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v216 = v215;
          goto LABEL_45;
        case 3u:
        case 4u:
          v281(v175, v176, v276);
          v217 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v175[v217[5]] = *(_DWORD *)&v176[v217[5]];
          uint64_t v218 = v217[6];
          uint64_t v219 = &v175[v218];
          uint64_t v220 = &v176[v218];
          long long v221 = *((_OWORD *)v220 + 3);
          *((_OWORD *)v219 + 2) = *((_OWORD *)v220 + 2);
          *((_OWORD *)v219 + 3) = v221;
          long long v222 = *((_OWORD *)v220 + 1);
          *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
          *((_OWORD *)v219 + 1) = v222;
          uint64_t v223 = v217[7];
          uint64_t v224 = &v175[v223];
          v225 = &v176[v223];
          uint64_t v227 = *(void *)v225;
          uint64_t v226 = *((void *)v225 + 1);
          *(void *)uint64_t v224 = v227;
          *((void *)v224 + 1) = v226;
          *(void *)&v175[v217[8]] = *(void *)&v176[v217[8]];
          *(void *)&v175[v217[9]] = *(void *)&v176[v217[9]];
          *(void *)&v175[v217[10]] = *(void *)&v176[v217[10]];
          swift_bridgeObjectRetain();
          uint64_t v98 = v275;
          swift_retain();
          goto LABEL_45;
        case 5u:
          v281(v175, v176, v276);
          v228 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v175[v228[5]] = *(_DWORD *)&v176[v228[5]];
          uint64_t v229 = v228[6];
          long long v230 = &v175[v229];
          long long v231 = &v176[v229];
          long long v232 = *((_OWORD *)v231 + 3);
          *((_OWORD *)v230 + 2) = *((_OWORD *)v231 + 2);
          *((_OWORD *)v230 + 3) = v232;
          long long v233 = *((_OWORD *)v231 + 1);
          *(_OWORD *)long long v230 = *(_OWORD *)v231;
          *((_OWORD *)v230 + 1) = v233;
          uint64_t v234 = v228[7];
          uint64_t v235 = &v175[v234];
          v236 = &v176[v234];
          uint64_t v238 = *(void *)v236;
          uint64_t v237 = *((void *)v236 + 1);
          *(void *)uint64_t v235 = v238;
          *((void *)v235 + 1) = v237;
          *(void *)&v175[v228[8]] = *(void *)&v176[v228[8]];
          *(void *)&v175[v228[9]] = *(void *)&v176[v228[9]];
          swift_bridgeObjectRetain();
          goto LABEL_45;
        default:
          v281(v175, v176, v276);
          uint64_t v177 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v175[v177[5]] = *(_DWORD *)&v176[v177[5]];
          uint64_t v178 = v177[6];
          uint64_t v179 = &v175[v178];
          uint64_t v180 = &v176[v178];
          long long v181 = *((_OWORD *)v180 + 3);
          *((_OWORD *)v179 + 2) = *((_OWORD *)v180 + 2);
          *((_OWORD *)v179 + 3) = v181;
          long long v182 = *((_OWORD *)v180 + 1);
          *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
          *((_OWORD *)v179 + 1) = v182;
          uint64_t v183 = v177[7];
          uint64_t v184 = &v175[v183];
          uint64_t v185 = &v176[v183];
          uint64_t v187 = *(void *)v185;
          uint64_t v186 = *((void *)v185 + 1);
          *(void *)uint64_t v184 = v187;
          *((void *)v184 + 1) = v186;
          *(void *)&v175[v177[8]] = *(void *)&v176[v177[8]];
          *(void *)&v175[v177[9]] = *(void *)&v176[v177[9]];
          swift_bridgeObjectRetain();
LABEL_45:
          swift_storeEnumTagMultiPayload();
          uint64_t v6 = v285;
LABEL_46:
          *((unsigned char *)v92 + v98[7]) = *((unsigned char *)v93 + v98[7]);
          *(uint64_t *)((char *)v92 + v98[8]) = *(uint64_t *)((char *)v93 + v98[8]);
          *(_DWORD *)((char *)v92 + v98[9]) = *(_DWORD *)((char *)v93 + v98[9]);
          break;
      }
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
LABEL_48:
        uint64_t v239 = v90[6];
        v240 = (_OWORD *)((char *)a1 + v239);
        v241 = (_OWORD *)((char *)a2 + v239);
        long long v242 = v241[1];
        _OWORD *v240 = *v241;
        v240[1] = v242;
        *(void *)((char *)a1 + v90[7]) = *(void *)((char *)a2 + v90[7]);
        uint64_t v243 = type metadata accessor for DetectionResult(0);
        *(void *)((char *)a1 + *(int *)(v243 + 20)) = *(void *)((char *)a2 + *(int *)(v243 + 20));
        uint64_t v244 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
        uint64_t v245 = *(int *)(v244 + 20);
        v246 = (char *)a1 + v245;
        v247 = (char *)a2 + v245;
        long long v248 = *(_OWORD *)((char *)a2 + v245 + 24);
        *(_OWORD *)((char *)a1 + v245 + 24) = v248;
        uint64_t v249 = v248;
        v250 = **(void (***)(char *, char *, uint64_t))(v248 - 8);
        swift_bridgeObjectRetain();
        v250(v246, v247, v249);
        *(void *)((char *)a1 + *(int *)(v244 + 24)) = *(void *)((char *)a2 + *(int *)(v244 + 24));
        uint64_t v251 = v6[6];
        *(void *)((char *)a1 + v6[5]) = *(void *)((char *)a2 + v6[5]);
        *(void *)((char *)a1 + v251) = *(void *)((char *)a2 + v251);
        *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
      uint64_t v96 = *v93;
      unint64_t v97 = v93[1];
      sub_100038528(v96, v97);
      *uint64_t v92 = v96;
      v92[1] = v97;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_48;
  }
  uint64_t v19 = *a2;
  *a1 = *a2;
  a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_1003B1590(uint64_t a1)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      int v5 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = a1 + v5[13];
      uint64_t v7 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      uint64_t v9 = (uint64_t *)(a1 + v5[14]);
      unint64_t v10 = v9[1];
      if (v10 >> 60 != 15) {
        sub_100038B34(*v9, v10);
      }
      if (*(void *)(a1 + v5[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v2 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v14 = a1 + *(int *)(type metadata accessor for DetectionRequest(0) + 20);
  type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_41:
      swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v16 = type metadata accessor for UUID();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v14, v16);
      uint64_t v18 = type metadata accessor for CVTrackSnapshot(0);
      uint64_t v19 = v14 + *(int *)(v18 + 20);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v17(v19, v16);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_29;
        case 1u:
          uint64_t v41 = v18;
          v17(v19, v16);
          uint64_t v20 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v21 = v19 + v20[13];
          uint64_t v22 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v39 = *(void *)(v22 - 8);
          uint64_t v40 = v21;
          uint64_t v23 = v21;
          uint64_t v24 = v22;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v23, 1, v22)) {
            (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v24);
          }
          long long v25 = (uint64_t *)(v19 + v20[14]);
          unint64_t v26 = v25[1];
          if (v26 >> 60 != 15) {
            sub_100038B34(*v25, v26);
          }
          uint64_t v27 = (void *)(v19 + v20[15]);
          uint64_t v18 = v41;
          if (*v27)
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v17(v19, v16);
          uint64_t v28 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v17(v19, v16);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v17(v19, v16);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_29:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      uint64_t v29 = v14 + *(int *)(v18 + 24);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v17(v29, v16);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_41;
        case 1u:
          v17(v29, v16);
          uint64_t v30 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v31 = v29 + v30[13];
          uint64_t v32 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v33 = *(void *)(v32 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32)) {
            (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
          }
          uint64_t v34 = (uint64_t *)(v29 + v30[14]);
          unint64_t v35 = v34[1];
          if (v35 >> 60 != 15) {
            sub_100038B34(*v34, v35);
          }
          if (*(void *)(v29 + v30[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v17(v29, v16);
          uint64_t v36 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v17(v29, v16);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v17(v29, v16);
          type metadata accessor for StreamingTextDetectorResult(0);
          goto LABEL_41;
        default:
          goto LABEL_42;
      }
      break;
    case 0:
      sub_100038B34(*(void *)v14, *(void *)(v14 + 8));
      break;
  }
LABEL_42:
  type metadata accessor for DetectionResult(0);
  swift_bridgeObjectRelease();
  uint64_t v37 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + *(int *)(v37 + 20));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003B1E98(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
      uint64_t v20 = v19[6];
      uint64_t v21 = (_OWORD *)(a1 + v20);
      uint64_t v22 = (_OWORD *)(a2 + v20);
      long long v23 = v22[3];
      void v21[2] = v22[2];
      void v21[3] = v23;
      long long v24 = v22[1];
      _OWORD *v21 = *v22;
      v21[1] = v24;
      *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
      *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
      *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
      *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
      uint64_t v25 = v19[11];
      unint64_t v26 = (void *)(a1 + v25);
      uint64_t v27 = (void *)(a2 + v25);
      uint64_t v28 = v27[1];
      *unint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v19[12];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (void *)(a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v19[13];
      __dst = (void *)(a1 + v33);
      uint64_t v34 = (const void *)(a2 + v33);
      uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(__dst, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
      }
      uint64_t v78 = v19[14];
      uint64_t v79 = a1 + v78;
      uint64_t v80 = (uint64_t *)(a2 + v78);
      unint64_t v81 = v80[1];
      if (v81 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      }
      else
      {
        uint64_t v82 = *v80;
        sub_100038528(*v80, v80[1]);
        *(void *)uint64_t v79 = v82;
        *(void *)(v79 + 8) = v81;
      }
      uint64_t v83 = v19[15];
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (void *)(a2 + v83);
      if (*v85)
      {
        uint64_t v86 = v85[1];
        uint64_t v87 = v85[2];
        *uint64_t v84 = *v85;
        v84[1] = v86;
        v84[2] = v87;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
        v84[2] = v85[2];
      }
      break;
    case 2u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      uint64_t v40 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v40[5]) = *(_DWORD *)(a2 + v40[5]);
      uint64_t v41 = v40[6];
      float v42 = (_OWORD *)(a1 + v41);
      uint64_t v43 = (_OWORD *)(a2 + v41);
      long long v44 = v43[3];
      v42[2] = v43[2];
      v42[3] = v44;
      long long v45 = v43[1];
      *float v42 = *v43;
      v42[1] = v45;
      uint64_t v46 = v40[7];
      long long v47 = (void *)(a1 + v46);
      uint64_t v48 = (uint64_t *)(a2 + v46);
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *long long v47 = v50;
      v47[1] = v49;
      *(void *)(a1 + v40[8]) = *(void *)(a2 + v40[8]);
      *(void *)(a1 + v40[9]) = *(void *)(a2 + v40[9]);
      *(void *)(a1 + v40[10]) = *(void *)(a2 + v40[10]);
      *(void *)(a1 + v40[11]) = *(void *)(a2 + v40[11]);
      *(void *)(a1 + v40[12]) = *(void *)(a2 + v40[12]);
      uint64_t v51 = v40[13];
      uint64_t v52 = *(void **)(a2 + v51);
      *(void *)(a1 + v51) = v52;
      *(unsigned char *)(a1 + v40[14]) = *(unsigned char *)(a2 + v40[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v53 = v52;
      break;
    case 3u:
    case 4u:
      uint64_t v54 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
      id v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
      uint64_t v56 = v55[6];
      unint64_t v57 = (_OWORD *)(a1 + v56);
      uint64_t v58 = (_OWORD *)(a2 + v56);
      long long v59 = v58[3];
      v57[2] = v58[2];
      v57[3] = v59;
      long long v60 = v58[1];
      *unint64_t v57 = *v58;
      v57[1] = v60;
      uint64_t v61 = v55[7];
      long long v62 = (void *)(a1 + v61);
      uint64_t v63 = (uint64_t *)(a2 + v61);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      *long long v62 = v65;
      v62[1] = v64;
      *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
      *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
      *(void *)(a1 + v55[10]) = *(void *)(a2 + v55[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v66 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(a1, a2, v66);
      uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v67[5]) = *(_DWORD *)(a2 + v67[5]);
      uint64_t v68 = v67[6];
      uint64_t v69 = (_OWORD *)(a1 + v68);
      uint64_t v70 = (_OWORD *)(a2 + v68);
      long long v71 = v70[3];
      v69[2] = v70[2];
      v69[3] = v71;
      long long v72 = v70[1];
      *uint64_t v69 = *v70;
      v69[1] = v72;
      uint64_t v73 = v67[7];
      long long v74 = (void *)(a1 + v73);
      uint64_t v75 = (uint64_t *)(a2 + v73);
      uint64_t v77 = *v75;
      uint64_t v76 = v75[1];
      *long long v74 = v77;
      v74[1] = v76;
      *(void *)(a1 + v67[8]) = *(void *)(a2 + v67[8]);
      *(void *)(a1 + v67[9]) = *(void *)(a2 + v67[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      unint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      _OWORD v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      _OWORD *v9 = *v10;
      v9[1] = v12;
      uint64_t v13 = v7[7];
      uint64_t v14 = (void *)(a1 + v13);
      unint64_t v15 = (uint64_t *)(a2 + v13);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      *uint64_t v14 = v17;
      v14[1] = v16;
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v88 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v89 = v88[5];
  uint64_t v90 = (uint64_t *)(a1 + v89);
  uint64_t v91 = (uint64_t *)(a2 + v89);
  uint64_t v92 = type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t *v90 = *v91;
      swift_bridgeObjectRetain();
      goto LABEL_45;
    case 2:
      v282 = a3;
      uint64_t v272 = type metadata accessor for UUID();
      __dstb = (void (**)(uint64_t *, uint64_t *))(*(void *)(v272 - 8) + 16);
      v278 = *__dstb;
      (*__dstb)(v90, v91);
      uint64_t v96 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v97 = v96[5];
      uint64_t v98 = (char *)v90 + v97;
      uint64_t v99 = (char *)v91 + v97;
      v271 = v96;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          ((void (*)(char *, char *, uint64_t))v278)(v98, v99, v272);
          uint64_t v111 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v98[v111[5]] = *(_DWORD *)&v99[v111[5]];
          uint64_t v112 = v111[6];
          uint64_t v113 = &v98[v112];
          uint64_t v114 = &v99[v112];
          long long v115 = *((_OWORD *)v114 + 3);
          *((_OWORD *)v113 + 2) = *((_OWORD *)v114 + 2);
          *((_OWORD *)v113 + 3) = v115;
          long long v116 = *((_OWORD *)v114 + 1);
          *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
          *((_OWORD *)v113 + 1) = v116;
          *(void *)&v98[v111[7]] = *(void *)&v99[v111[7]];
          *(void *)&v98[v111[8]] = *(void *)&v99[v111[8]];
          *(void *)&v98[v111[9]] = *(void *)&v99[v111[9]];
          v98[v111[10]] = v99[v111[10]];
          uint64_t v117 = v111[11];
          long long v118 = &v98[v117];
          uint64_t v119 = &v99[v117];
          uint64_t v260 = *((void *)v119 + 1);
          *(void *)long long v118 = *(void *)v119;
          *((void *)v118 + 1) = v260;
          uint64_t v120 = v111[12];
          uint64_t v121 = &v98[v120];
          uint64_t v122 = &v99[v120];
          uint64_t v259 = *((void *)v122 + 1);
          *(void *)uint64_t v121 = *(void *)v122;
          *((void *)v121 + 1) = v259;
          uint64_t v123 = v111[13];
          uint64_t v263 = v111;
          uint64_t v265 = &v98[v123];
          v268 = &v99[v123];
          uint64_t v124 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v257 = *(void *)(v124 - 8);
          uint64_t v258 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v258(v268, 1, v124))
          {
            uint64_t v125 = sub_10000F214(&qword_100524BD0);
            memcpy(v265, v268, *(void *)(*(void *)(v125 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v257 + 16))(v265, v268, v124);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v257 + 56))(v265, 0, 1, v124);
          }
          uint64_t v161 = v263[14];
          uint64_t v162 = &v98[v161];
          uint64_t v163 = (uint64_t *)&v99[v161];
          unint64_t v164 = v163[1];
          if (v164 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
          }
          else
          {
            uint64_t v266 = (uint64_t *)v162;
            uint64_t v270 = *v163;
            sub_100038528(*v163, v164);
            *uint64_t v266 = v270;
            v266[1] = v164;
          }
          uint64_t v165 = v263[15];
          uint64_t v166 = &v98[v165];
          uint64_t v167 = &v99[v165];
          if (*(void *)v167)
          {
            uint64_t v168 = *((void *)v167 + 1);
            uint64_t v169 = *((void *)v167 + 2);
            *(void *)uint64_t v166 = *(void *)v167;
            *((void *)v166 + 1) = v168;
            *((void *)v166 + 2) = v169;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
            *((void *)v166 + 2) = *((void *)v167 + 2);
          }
          uint64_t v96 = v271;
          break;
        case 2u:
          ((void (*)(char *, char *, uint64_t))v278)(v98, v99, v272);
          uint64_t v126 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v98[v126[5]] = *(_DWORD *)&v99[v126[5]];
          uint64_t v127 = v126[6];
          uint64_t v128 = &v98[v127];
          uint64_t v129 = &v99[v127];
          long long v130 = *((_OWORD *)v129 + 3);
          *((_OWORD *)v128 + 2) = *((_OWORD *)v129 + 2);
          *((_OWORD *)v128 + 3) = v130;
          long long v131 = *((_OWORD *)v129 + 1);
          *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
          *((_OWORD *)v128 + 1) = v131;
          uint64_t v132 = v126[7];
          long long v133 = &v98[v132];
          uint64_t v134 = &v99[v132];
          uint64_t v136 = *(void *)v134;
          uint64_t v135 = *((void *)v134 + 1);
          *(void *)long long v133 = v136;
          *((void *)v133 + 1) = v135;
          *(void *)&v98[v126[8]] = *(void *)&v99[v126[8]];
          *(void *)&v98[v126[9]] = *(void *)&v99[v126[9]];
          *(void *)&v98[v126[10]] = *(void *)&v99[v126[10]];
          *(void *)&v98[v126[11]] = *(void *)&v99[v126[11]];
          *(void *)&v98[v126[12]] = *(void *)&v99[v126[12]];
          uint64_t v137 = v126[13];
          v269 = *(void **)&v99[v137];
          *(void *)&v98[v137] = v269;
          v98[v126[14]] = v99[v126[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v138 = v269;
          break;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))v278)(v98, v99, v272);
          uint64_t v139 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v98[v139[5]] = *(_DWORD *)&v99[v139[5]];
          uint64_t v140 = v139[6];
          id v141 = &v98[v140];
          uint64_t v142 = &v99[v140];
          long long v143 = *((_OWORD *)v142 + 3);
          *((_OWORD *)v141 + 2) = *((_OWORD *)v142 + 2);
          *((_OWORD *)v141 + 3) = v143;
          long long v144 = *((_OWORD *)v142 + 1);
          *(_OWORD *)id v141 = *(_OWORD *)v142;
          *((_OWORD *)v141 + 1) = v144;
          uint64_t v145 = v139[7];
          long long v146 = &v98[v145];
          long long v147 = &v99[v145];
          uint64_t v149 = *(void *)v147;
          uint64_t v148 = *((void *)v147 + 1);
          *(void *)long long v146 = v149;
          *((void *)v146 + 1) = v148;
          *(void *)&v98[v139[8]] = *(void *)&v99[v139[8]];
          *(void *)&v98[v139[9]] = *(void *)&v99[v139[9]];
          *(void *)&v98[v139[10]] = *(void *)&v99[v139[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          ((void (*)(char *, char *, uint64_t))v278)(v98, v99, v272);
          uint64_t v150 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v98[v150[5]] = *(_DWORD *)&v99[v150[5]];
          uint64_t v151 = v150[6];
          uint64_t v152 = &v98[v151];
          uint64_t v153 = &v99[v151];
          long long v154 = *((_OWORD *)v153 + 3);
          *((_OWORD *)v152 + 2) = *((_OWORD *)v153 + 2);
          *((_OWORD *)v152 + 3) = v154;
          long long v155 = *((_OWORD *)v153 + 1);
          *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
          *((_OWORD *)v152 + 1) = v155;
          uint64_t v156 = v150[7];
          long long v157 = &v98[v156];
          long long v158 = &v99[v156];
          uint64_t v160 = *(void *)v158;
          uint64_t v159 = *((void *)v158 + 1);
          *(void *)long long v157 = v160;
          *((void *)v157 + 1) = v159;
          *(void *)&v98[v150[8]] = *(void *)&v99[v150[8]];
          *(void *)&v98[v150[9]] = *(void *)&v99[v150[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          ((void (*)(char *, char *, uint64_t))v278)(v98, v99, v272);
          uint64_t v100 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v98[v100[5]] = *(_DWORD *)&v99[v100[5]];
          uint64_t v101 = v100[6];
          uint64_t v102 = &v98[v101];
          uint64_t v103 = &v99[v101];
          long long v104 = *((_OWORD *)v103 + 3);
          *((_OWORD *)v102 + 2) = *((_OWORD *)v103 + 2);
          *((_OWORD *)v102 + 3) = v104;
          long long v105 = *((_OWORD *)v103 + 1);
          *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
          *((_OWORD *)v102 + 1) = v105;
          uint64_t v106 = v100[7];
          long long v107 = &v98[v106];
          uint64_t v108 = &v99[v106];
          uint64_t v110 = *(void *)v108;
          uint64_t v109 = *((void *)v108 + 1);
          *(void *)long long v107 = v110;
          *((void *)v107 + 1) = v109;
          *(void *)&v98[v100[8]] = *(void *)&v99[v100[8]];
          *(void *)&v98[v100[9]] = *(void *)&v99[v100[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v170 = v96[6];
      id v171 = (char *)v90 + v170;
      uint64_t v172 = (char *)v91 + v170;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          ((void (*)(char *, char *, uint64_t))v278)(v171, v172, v272);
          uint64_t v184 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v171[v184[5]] = *(_DWORD *)&v172[v184[5]];
          uint64_t v185 = v184[6];
          uint64_t v186 = &v171[v185];
          uint64_t v187 = &v172[v185];
          long long v188 = *((_OWORD *)v187 + 3);
          *((_OWORD *)v186 + 2) = *((_OWORD *)v187 + 2);
          *((_OWORD *)v186 + 3) = v188;
          long long v189 = *((_OWORD *)v187 + 1);
          *(_OWORD *)uint64_t v186 = *(_OWORD *)v187;
          *((_OWORD *)v186 + 1) = v189;
          *(void *)&v171[v184[7]] = *(void *)&v172[v184[7]];
          *(void *)&v171[v184[8]] = *(void *)&v172[v184[8]];
          *(void *)&v171[v184[9]] = *(void *)&v172[v184[9]];
          v171[v184[10]] = v172[v184[10]];
          uint64_t v190 = v184[11];
          char v191 = &v171[v190];
          long long v192 = &v172[v190];
          uint64_t v267 = *((void *)v192 + 1);
          *(void *)char v191 = *(void *)v192;
          *((void *)v191 + 1) = v267;
          uint64_t v193 = v184[12];
          uint64_t v194 = &v171[v193];
          v195 = &v172[v193];
          uint64_t v264 = *((void *)v195 + 1);
          *(void *)uint64_t v194 = *(void *)v195;
          *((void *)v194 + 1) = v264;
          uint64_t v196 = v184[13];
          v273 = v184;
          __dsta = &v171[v196];
          v279 = &v172[v196];
          uint64_t v197 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v261 = *(void *)(v197 - 8);
          uint64_t v262 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v262(v279, 1, v197))
          {
            uint64_t v198 = sub_10000F214(&qword_100524BD0);
            memcpy(__dsta, v279, *(void *)(*(void *)(v198 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v261 + 16))(__dsta, v279, v197);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(__dsta, 0, 1, v197);
          }
          uint64_t v248 = v273[14];
          uint64_t v249 = &v171[v248];
          v250 = (uint64_t *)&v172[v248];
          unint64_t v251 = v250[1];
          if (v251 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v249 = *(_OWORD *)v250;
          }
          else
          {
            __dstc = (uint64_t *)v249;
            uint64_t v281 = *v250;
            sub_100038528(*v250, v251);
            uint64_t *__dstc = v281;
            __dstc[1] = v251;
          }
          uint64_t v252 = v273[15];
          v253 = &v171[v252];
          uint64_t v254 = &v172[v252];
          if (*(void *)v254)
          {
            uint64_t v255 = *((void *)v254 + 1);
            uint64_t v256 = *((void *)v254 + 2);
            *(void *)v253 = *(void *)v254;
            *((void *)v253 + 1) = v255;
            *((void *)v253 + 2) = v256;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)v253 = *(_OWORD *)v254;
            *((void *)v253 + 2) = *((void *)v254 + 2);
          }
          a3 = v282;
          uint64_t v96 = v271;
          swift_storeEnumTagMultiPayload();
          goto LABEL_44;
        case 2u:
          ((void (*)(char *, char *, uint64_t))v278)(v171, v172, v272);
          long long v199 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v171[v199[5]] = *(_DWORD *)&v172[v199[5]];
          uint64_t v200 = v199[6];
          uint64_t v201 = &v171[v200];
          uint64_t v202 = &v172[v200];
          long long v203 = *((_OWORD *)v202 + 3);
          *((_OWORD *)v201 + 2) = *((_OWORD *)v202 + 2);
          *((_OWORD *)v201 + 3) = v203;
          long long v204 = *((_OWORD *)v202 + 1);
          *(_OWORD *)uint64_t v201 = *(_OWORD *)v202;
          *((_OWORD *)v201 + 1) = v204;
          uint64_t v205 = v199[7];
          uint64_t v206 = &v171[v205];
          long long v207 = &v172[v205];
          uint64_t v209 = *(void *)v207;
          uint64_t v208 = *((void *)v207 + 1);
          *(void *)uint64_t v206 = v209;
          *((void *)v206 + 1) = v208;
          *(void *)&v171[v199[8]] = *(void *)&v172[v199[8]];
          *(void *)&v171[v199[9]] = *(void *)&v172[v199[9]];
          *(void *)&v171[v199[10]] = *(void *)&v172[v199[10]];
          *(void *)&v171[v199[11]] = *(void *)&v172[v199[11]];
          *(void *)&v171[v199[12]] = *(void *)&v172[v199[12]];
          uint64_t v210 = v199[13];
          v280 = *(void **)&v172[v210];
          *(void *)&v171[v210] = v280;
          v171[v199[14]] = v172[v199[14]];
          swift_bridgeObjectRetain();
          uint64_t v96 = v271;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v211 = v280;
          goto LABEL_43;
        case 3u:
        case 4u:
          ((void (*)(char *, char *, uint64_t))v278)(v171, v172, v272);
          uint64_t v212 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v171[v212[5]] = *(_DWORD *)&v172[v212[5]];
          uint64_t v213 = v212[6];
          uint64_t v214 = &v171[v213];
          uint64_t v215 = &v172[v213];
          long long v216 = *((_OWORD *)v215 + 3);
          *((_OWORD *)v214 + 2) = *((_OWORD *)v215 + 2);
          *((_OWORD *)v214 + 3) = v216;
          long long v217 = *((_OWORD *)v215 + 1);
          *(_OWORD *)uint64_t v214 = *(_OWORD *)v215;
          *((_OWORD *)v214 + 1) = v217;
          uint64_t v218 = v212[7];
          uint64_t v219 = &v171[v218];
          uint64_t v220 = &v172[v218];
          uint64_t v222 = *(void *)v220;
          uint64_t v221 = *((void *)v220 + 1);
          *(void *)uint64_t v219 = v222;
          *((void *)v219 + 1) = v221;
          *(void *)&v171[v212[8]] = *(void *)&v172[v212[8]];
          *(void *)&v171[v212[9]] = *(void *)&v172[v212[9]];
          *(void *)&v171[v212[10]] = *(void *)&v172[v212[10]];
          swift_bridgeObjectRetain();
          uint64_t v96 = v271;
          swift_retain();
          goto LABEL_43;
        case 5u:
          ((void (*)(char *, char *, uint64_t))v278)(v171, v172, v272);
          uint64_t v223 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v171[v223[5]] = *(_DWORD *)&v172[v223[5]];
          uint64_t v224 = v223[6];
          v225 = &v171[v224];
          uint64_t v226 = &v172[v224];
          long long v227 = *((_OWORD *)v226 + 3);
          *((_OWORD *)v225 + 2) = *((_OWORD *)v226 + 2);
          *((_OWORD *)v225 + 3) = v227;
          long long v228 = *((_OWORD *)v226 + 1);
          *(_OWORD *)v225 = *(_OWORD *)v226;
          *((_OWORD *)v225 + 1) = v228;
          uint64_t v229 = v223[7];
          long long v230 = &v171[v229];
          long long v231 = &v172[v229];
          uint64_t v233 = *(void *)v231;
          uint64_t v232 = *((void *)v231 + 1);
          *(void *)long long v230 = v233;
          *((void *)v230 + 1) = v232;
          *(void *)&v171[v223[8]] = *(void *)&v172[v223[8]];
          *(void *)&v171[v223[9]] = *(void *)&v172[v223[9]];
          swift_bridgeObjectRetain();
          goto LABEL_43;
        default:
          ((void (*)(char *, char *, uint64_t))v278)(v171, v172, v272);
          uint64_t v173 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v171[v173[5]] = *(_DWORD *)&v172[v173[5]];
          uint64_t v174 = v173[6];
          uint64_t v175 = &v171[v174];
          uint64_t v176 = &v172[v174];
          long long v177 = *((_OWORD *)v176 + 3);
          *((_OWORD *)v175 + 2) = *((_OWORD *)v176 + 2);
          *((_OWORD *)v175 + 3) = v177;
          long long v178 = *((_OWORD *)v176 + 1);
          *(_OWORD *)uint64_t v175 = *(_OWORD *)v176;
          *((_OWORD *)v175 + 1) = v178;
          uint64_t v179 = v173[7];
          uint64_t v180 = &v171[v179];
          long long v181 = &v172[v179];
          uint64_t v183 = *(void *)v181;
          uint64_t v182 = *((void *)v181 + 1);
          *(void *)uint64_t v180 = v183;
          *((void *)v180 + 1) = v182;
          *(void *)&v171[v173[8]] = *(void *)&v172[v173[8]];
          *(void *)&v171[v173[9]] = *(void *)&v172[v173[9]];
          swift_bridgeObjectRetain();
LABEL_43:
          swift_storeEnumTagMultiPayload();
          a3 = v282;
LABEL_44:
          *((unsigned char *)v90 + v96[7]) = *((unsigned char *)v91 + v96[7]);
          *(uint64_t *)((char *)v90 + v96[8]) = *(uint64_t *)((char *)v91 + v96[8]);
          *(_DWORD *)((char *)v90 + v96[9]) = *(_DWORD *)((char *)v91 + v96[9]);
          break;
      }
      goto LABEL_45;
    case 0:
      uint64_t v94 = *v91;
      unint64_t v95 = v91[1];
      sub_100038528(*v91, v95);
      uint64_t *v90 = v94;
      v90[1] = v95;
LABEL_45:
      swift_storeEnumTagMultiPayload();
      goto LABEL_46;
  }
  memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64));
LABEL_46:
  uint64_t v234 = v88[6];
  uint64_t v235 = (_OWORD *)(a1 + v234);
  v236 = (_OWORD *)(a2 + v234);
  long long v237 = v236[1];
  *uint64_t v235 = *v236;
  v235[1] = v237;
  *(void *)(a1 + v88[7]) = *(void *)(a2 + v88[7]);
  uint64_t v238 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v238 + 20)) = *(void *)(a2 + *(int *)(v238 + 20));
  uint64_t v239 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v240 = *(int *)(v239 + 20);
  uint64_t v241 = a1 + v240;
  uint64_t v242 = a2 + v240;
  long long v243 = *(_OWORD *)(a2 + v240 + 24);
  *(_OWORD *)(a1 + v240 + 24) = v243;
  uint64_t v244 = v243;
  uint64_t v245 = **(void (***)(uint64_t, uint64_t, uint64_t))(v243 - 8);
  swift_bridgeObjectRetain();
  v245(v241, v242, v244);
  *(void *)(a1 + *(int *)(v239 + 24)) = *(void *)(a2 + *(int *)(v239 + 24));
  uint64_t v246 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v246) = *(void *)(a2 + v246);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003B3408(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 == a2)
  {
    uint64_t v17 = (int *)type metadata accessor for DetectionRequest(0);
  }
  else
  {
    sub_1003B4A5C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
        uint64_t v20 = v19[6];
        uint64_t v21 = (_OWORD *)(a1 + v20);
        uint64_t v22 = (_OWORD *)(a2 + v20);
        long long v24 = v22[2];
        long long v23 = v22[3];
        long long v25 = v22[1];
        _OWORD *v21 = *v22;
        v21[1] = v25;
        void v21[2] = v24;
        void v21[3] = v23;
        *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
        *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
        *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
        *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
        uint64_t v26 = v19[11];
        uint64_t v27 = (void *)(a1 + v26);
        uint64_t v28 = (void *)(a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v19[12];
        uint64_t v30 = (void *)(a1 + v29);
        uint64_t v31 = (void *)(a2 + v29);
        *uint64_t v30 = *v31;
        v30[1] = v31[1];
        uint64_t v32 = v19[13];
        __dst = (void *)(a1 + v32);
        uint64_t v33 = (const void *)(a2 + v32);
        uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36(v33, 1, v34))
        {
          uint64_t v37 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(__dst, v33, v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v74 = v19[14];
        uint64_t v75 = a1 + v74;
        uint64_t v76 = (uint64_t *)(a2 + v74);
        unint64_t v77 = v76[1];
        if (v77 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
        }
        else
        {
          uint64_t v78 = *v76;
          sub_100038528(*v76, v76[1]);
          *(void *)uint64_t v75 = v78;
          *(void *)(v75 + 8) = v77;
        }
        uint64_t v79 = v19[15];
        uint64_t v80 = (void *)(a1 + v79);
        unint64_t v81 = (void *)(a2 + v79);
        if (*v81)
        {
          *uint64_t v80 = *v81;
          uint64_t v82 = v81[2];
          v80[1] = v81[1];
          v80[2] = v82;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v83 = *(_OWORD *)v81;
          v80[2] = v81[2];
          *(_OWORD *)uint64_t v80 = v83;
        }
        break;
      case 2u:
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
        uint64_t v40 = v39[6];
        uint64_t v41 = (_OWORD *)(a1 + v40);
        float v42 = (_OWORD *)(a2 + v40);
        long long v44 = v42[2];
        long long v43 = v42[3];
        long long v45 = v42[1];
        _OWORD *v41 = *v42;
        v41[1] = v45;
        v41[2] = v44;
        v41[3] = v43;
        uint64_t v46 = v39[7];
        long long v47 = (void *)(a1 + v46);
        uint64_t v48 = (void *)(a2 + v46);
        *long long v47 = *v48;
        v47[1] = v48[1];
        *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
        *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
        *(void *)(a1 + v39[10]) = *(void *)(a2 + v39[10]);
        *(void *)(a1 + v39[11]) = *(void *)(a2 + v39[11]);
        *(void *)(a1 + v39[12]) = *(void *)(a2 + v39[12]);
        uint64_t v49 = v39[13];
        uint64_t v50 = *(void **)(a2 + v49);
        *(void *)(a1 + v49) = v50;
        *(unsigned char *)(a1 + v39[14]) = *(unsigned char *)(a2 + v39[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v51 = v50;
        break;
      case 3u:
      case 4u:
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
        id v53 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v53[5]) = *(_DWORD *)(a2 + v53[5]);
        uint64_t v54 = v53[6];
        id v55 = (_OWORD *)(a1 + v54);
        uint64_t v56 = (_OWORD *)(a2 + v54);
        long long v58 = v56[2];
        long long v57 = v56[3];
        long long v59 = v56[1];
        *id v55 = *v56;
        v55[1] = v59;
        v55[2] = v58;
        v55[3] = v57;
        uint64_t v60 = v53[7];
        uint64_t v61 = (void *)(a1 + v60);
        long long v62 = (void *)(a2 + v60);
        *uint64_t v61 = *v62;
        v61[1] = v62[1];
        *(void *)(a1 + v53[8]) = *(void *)(a2 + v53[8]);
        *(void *)(a1 + v53[9]) = *(void *)(a2 + v53[9]);
        *(void *)(a1 + v53[10]) = *(void *)(a2 + v53[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v63 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(a1, a2, v63);
        uint64_t v64 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v64[5]) = *(_DWORD *)(a2 + v64[5]);
        uint64_t v65 = v64[6];
        uint64_t v66 = (_OWORD *)(a1 + v65);
        uint64_t v67 = (_OWORD *)(a2 + v65);
        long long v69 = v67[2];
        long long v68 = v67[3];
        long long v70 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v70;
        v66[2] = v69;
        v66[3] = v68;
        uint64_t v71 = v64[7];
        long long v72 = (void *)(a1 + v71);
        uint64_t v73 = (void *)(a2 + v71);
        *long long v72 = *v73;
        v72[1] = v73[1];
        *(void *)(a1 + v64[8]) = *(void *)(a2 + v64[8]);
        *(void *)(a1 + v64[9]) = *(void *)(a2 + v64[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        unint64_t v10 = (_OWORD *)(a2 + v8);
        long long v12 = v10[2];
        long long v11 = v10[3];
        long long v13 = v10[1];
        _OWORD *v9 = *v10;
        v9[1] = v13;
        _OWORD v9[2] = v12;
        v9[3] = v11;
        uint64_t v14 = v7[7];
        unint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        void *v15 = *v16;
        v15[1] = v16[1];
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v84 = v17[5];
    uint64_t v85 = (uint64_t *)(a1 + v84);
    uint64_t v86 = (uint64_t *)(a2 + v84);
    sub_1003B4A5C(a1 + v84, type metadata accessor for DetectionRequest.Originator);
    uint64_t v87 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t *v85 = *v86;
        swift_bridgeObjectRetain();
        goto LABEL_54;
      case 2:
        uint64_t v260 = a3;
        uint64_t v252 = (void *)type metadata accessor for UUID();
        __dstb = (void **)(*(v252 - 1) + 16);
        uint64_t v257 = (void (*)(char *, char *, void *))*__dstb;
        ((void (*)(uint64_t *, uint64_t *))*__dstb)(v85, v86);
        uint64_t v91 = (int *)type metadata accessor for CVTrackSnapshot(0);
        uint64_t v92 = v91[5];
        uint64_t v93 = (char *)v85 + v92;
        uint64_t v94 = (char *)v86 + v92;
        unint64_t v251 = v91;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            v257(v93, v94, v252);
            long long v105 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v93[v105[5]] = *(_DWORD *)&v94[v105[5]];
            uint64_t v106 = v105[6];
            long long v107 = &v93[v106];
            uint64_t v108 = &v94[v106];
            long long v110 = *((_OWORD *)v108 + 2);
            long long v109 = *((_OWORD *)v108 + 3);
            long long v111 = *((_OWORD *)v108 + 1);
            *(_OWORD *)long long v107 = *(_OWORD *)v108;
            *((_OWORD *)v107 + 1) = v111;
            *((_OWORD *)v107 + 2) = v110;
            *((_OWORD *)v107 + 3) = v109;
            *(void *)&v93[v105[7]] = *(void *)&v94[v105[7]];
            *(void *)&v93[v105[8]] = *(void *)&v94[v105[8]];
            *(void *)&v93[v105[9]] = *(void *)&v94[v105[9]];
            v93[v105[10]] = v94[v105[10]];
            uint64_t v112 = v105[11];
            uint64_t v113 = &v93[v112];
            uint64_t v114 = &v94[v112];
            *(void *)uint64_t v113 = *(void *)v114;
            *((void *)v113 + 1) = *((void *)v114 + 1);
            uint64_t v115 = v105[12];
            long long v116 = &v93[v115];
            uint64_t v117 = &v94[v115];
            *(void *)long long v116 = *(void *)v117;
            *((void *)v116 + 1) = *((void *)v117 + 1);
            uint64_t v118 = v105[13];
            uint64_t v246 = &v93[v118];
            uint64_t v248 = v105;
            __src = &v94[v118];
            uint64_t v119 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v242 = *(void *)(v119 - 8);
            long long v243 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v242 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v243(__src, 1, v119))
            {
              uint64_t v120 = sub_10000F214(&qword_100524BD0);
              memcpy(v246, __src, *(void *)(*(void *)(v120 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v242 + 16))(v246, __src, v119);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v242 + 56))(v246, 0, 1, v119);
            }
            long long v154 = v248;
            uint64_t v155 = v248[14];
            uint64_t v156 = &v93[v155];
            long long v157 = (uint64_t *)&v94[v155];
            unint64_t v158 = v157[1];
            if (v158 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
            }
            else
            {
              __srca = (void *)*v157;
              sub_100038528(*v157, v158);
              long long v154 = v248;
              *(void *)uint64_t v156 = __srca;
              *((void *)v156 + 1) = v158;
            }
            uint64_t v159 = v154[15];
            uint64_t v160 = &v93[v159];
            uint64_t v161 = &v94[v159];
            if (*(void *)v161)
            {
              *(void *)uint64_t v160 = *(void *)v161;
              uint64_t v162 = *((void *)v161 + 2);
              *((void *)v160 + 1) = *((void *)v161 + 1);
              *((void *)v160 + 2) = v162;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v163 = *(_OWORD *)v161;
              *((void *)v160 + 2) = *((void *)v161 + 2);
              *(_OWORD *)uint64_t v160 = v163;
            }
            uint64_t v91 = v251;
            break;
          case 2u:
            v257(v93, v94, v252);
            uint64_t v121 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v93[v121[5]] = *(_DWORD *)&v94[v121[5]];
            uint64_t v122 = v121[6];
            uint64_t v123 = &v93[v122];
            uint64_t v124 = &v94[v122];
            long long v126 = *((_OWORD *)v124 + 2);
            long long v125 = *((_OWORD *)v124 + 3);
            long long v127 = *((_OWORD *)v124 + 1);
            *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
            *((_OWORD *)v123 + 1) = v127;
            *((_OWORD *)v123 + 2) = v126;
            *((_OWORD *)v123 + 3) = v125;
            uint64_t v128 = v121[7];
            uint64_t v129 = &v93[v128];
            long long v130 = &v94[v128];
            *(void *)uint64_t v129 = *(void *)v130;
            *((void *)v129 + 1) = *((void *)v130 + 1);
            *(void *)&v93[v121[8]] = *(void *)&v94[v121[8]];
            *(void *)&v93[v121[9]] = *(void *)&v94[v121[9]];
            *(void *)&v93[v121[10]] = *(void *)&v94[v121[10]];
            *(void *)&v93[v121[11]] = *(void *)&v94[v121[11]];
            *(void *)&v93[v121[12]] = *(void *)&v94[v121[12]];
            uint64_t v131 = v121[13];
            uint64_t v132 = *(void **)&v94[v131];
            *(void *)&v93[v131] = v132;
            v93[v121[14]] = v94[v121[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v133 = v132;
            break;
          case 3u:
          case 4u:
            v257(v93, v94, v252);
            uint64_t v134 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v93[v134[5]] = *(_DWORD *)&v94[v134[5]];
            uint64_t v135 = v134[6];
            uint64_t v136 = &v93[v135];
            uint64_t v137 = &v94[v135];
            long long v139 = *((_OWORD *)v137 + 2);
            long long v138 = *((_OWORD *)v137 + 3);
            long long v140 = *((_OWORD *)v137 + 1);
            *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
            *((_OWORD *)v136 + 1) = v140;
            *((_OWORD *)v136 + 2) = v139;
            *((_OWORD *)v136 + 3) = v138;
            uint64_t v141 = v134[7];
            uint64_t v142 = &v93[v141];
            long long v143 = &v94[v141];
            *(void *)uint64_t v142 = *(void *)v143;
            *((void *)v142 + 1) = *((void *)v143 + 1);
            *(void *)&v93[v134[8]] = *(void *)&v94[v134[8]];
            *(void *)&v93[v134[9]] = *(void *)&v94[v134[9]];
            *(void *)&v93[v134[10]] = *(void *)&v94[v134[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            v257(v93, v94, v252);
            long long v144 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v93[v144[5]] = *(_DWORD *)&v94[v144[5]];
            uint64_t v145 = v144[6];
            long long v146 = &v93[v145];
            long long v147 = &v94[v145];
            long long v149 = *((_OWORD *)v147 + 2);
            long long v148 = *((_OWORD *)v147 + 3);
            long long v150 = *((_OWORD *)v147 + 1);
            *(_OWORD *)long long v146 = *(_OWORD *)v147;
            *((_OWORD *)v146 + 1) = v150;
            *((_OWORD *)v146 + 2) = v149;
            *((_OWORD *)v146 + 3) = v148;
            uint64_t v151 = v144[7];
            uint64_t v152 = &v93[v151];
            uint64_t v153 = &v94[v151];
            *(void *)uint64_t v152 = *(void *)v153;
            *((void *)v152 + 1) = *((void *)v153 + 1);
            *(void *)&v93[v144[8]] = *(void *)&v94[v144[8]];
            *(void *)&v93[v144[9]] = *(void *)&v94[v144[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            v257(v93, v94, v252);
            unint64_t v95 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v93[v95[5]] = *(_DWORD *)&v94[v95[5]];
            uint64_t v96 = v95[6];
            uint64_t v97 = &v93[v96];
            uint64_t v98 = &v94[v96];
            long long v100 = *((_OWORD *)v98 + 2);
            long long v99 = *((_OWORD *)v98 + 3);
            long long v101 = *((_OWORD *)v98 + 1);
            *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
            *((_OWORD *)v97 + 1) = v101;
            *((_OWORD *)v97 + 2) = v100;
            *((_OWORD *)v97 + 3) = v99;
            uint64_t v102 = v95[7];
            uint64_t v103 = &v93[v102];
            long long v104 = &v94[v102];
            *(void *)uint64_t v103 = *(void *)v104;
            *((void *)v103 + 1) = *((void *)v104 + 1);
            *(void *)&v93[v95[8]] = *(void *)&v94[v95[8]];
            *(void *)&v93[v95[9]] = *(void *)&v94[v95[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v164 = v91[6];
        uint64_t v165 = (char *)v85 + v164;
        uint64_t v166 = (char *)v86 + v164;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            v257(v165, v166, v252);
            long long v177 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v165[v177[5]] = *(_DWORD *)&v166[v177[5]];
            uint64_t v178 = v177[6];
            uint64_t v179 = &v165[v178];
            uint64_t v180 = &v166[v178];
            long long v182 = *((_OWORD *)v180 + 2);
            long long v181 = *((_OWORD *)v180 + 3);
            long long v183 = *((_OWORD *)v180 + 1);
            *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
            *((_OWORD *)v179 + 1) = v183;
            *((_OWORD *)v179 + 2) = v182;
            *((_OWORD *)v179 + 3) = v181;
            *(void *)&v165[v177[7]] = *(void *)&v166[v177[7]];
            *(void *)&v165[v177[8]] = *(void *)&v166[v177[8]];
            *(void *)&v165[v177[9]] = *(void *)&v166[v177[9]];
            v165[v177[10]] = v166[v177[10]];
            uint64_t v184 = v177[11];
            uint64_t v185 = &v165[v184];
            uint64_t v186 = &v166[v184];
            *(void *)uint64_t v185 = *(void *)v186;
            *((void *)v185 + 1) = *((void *)v186 + 1);
            uint64_t v187 = v177[12];
            long long v188 = &v165[v187];
            long long v189 = &v166[v187];
            *(void *)long long v188 = *(void *)v189;
            *((void *)v188 + 1) = *((void *)v189 + 1);
            uint64_t v190 = v177[13];
            v253 = &v165[v190];
            __dsta = v177;
            uint64_t v258 = &v166[v190];
            uint64_t v191 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v244 = *(void *)(v191 - 8);
            uint64_t v245 = *(unsigned int (**)(char *, uint64_t))(v244 + 48);
            v247 = (void *)v191;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v245(v258, 1))
            {
              uint64_t v192 = sub_10000F214(&qword_100524BD0);
              memcpy(v253, v258, *(void *)(*(void *)(v192 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(v244 + 16))(v253, v258, v247);
              (*(void (**)(char *, void, uint64_t, void *))(v244 + 56))(v253, 0, 1, v247);
            }
            uint64_t v226 = __dsta;
            uint64_t v227 = __dsta[14];
            long long v228 = &v165[v227];
            uint64_t v229 = (uint64_t *)&v166[v227];
            unint64_t v230 = v229[1];
            if (v230 >> 60 == 15)
            {
              *(_OWORD *)long long v228 = *(_OWORD *)v229;
            }
            else
            {
              uint64_t v259 = (void *)*v229;
              sub_100038528(*v229, v230);
              uint64_t v226 = __dsta;
              *(void *)long long v228 = v259;
              *((void *)v228 + 1) = v230;
            }
            uint64_t v231 = v226[15];
            uint64_t v232 = &v165[v231];
            uint64_t v233 = &v166[v231];
            if (*(void *)v233)
            {
              *(void *)uint64_t v232 = *(void *)v233;
              uint64_t v234 = *((void *)v233 + 2);
              *((void *)v232 + 1) = *((void *)v233 + 1);
              *((void *)v232 + 2) = v234;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v235 = *(_OWORD *)v233;
              *((void *)v232 + 2) = *((void *)v233 + 2);
              *(_OWORD *)uint64_t v232 = v235;
            }
            uint64_t v91 = v251;
            break;
          case 2u:
            v257(v165, v166, v252);
            uint64_t v193 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v165[v193[5]] = *(_DWORD *)&v166[v193[5]];
            uint64_t v194 = v193[6];
            v195 = &v165[v194];
            uint64_t v196 = &v166[v194];
            long long v198 = *((_OWORD *)v196 + 2);
            long long v197 = *((_OWORD *)v196 + 3);
            long long v199 = *((_OWORD *)v196 + 1);
            *(_OWORD *)v195 = *(_OWORD *)v196;
            *((_OWORD *)v195 + 1) = v199;
            *((_OWORD *)v195 + 2) = v198;
            *((_OWORD *)v195 + 3) = v197;
            uint64_t v200 = v193[7];
            uint64_t v201 = &v165[v200];
            uint64_t v202 = &v166[v200];
            *(void *)uint64_t v201 = *(void *)v202;
            *((void *)v201 + 1) = *((void *)v202 + 1);
            *(void *)&v165[v193[8]] = *(void *)&v166[v193[8]];
            *(void *)&v165[v193[9]] = *(void *)&v166[v193[9]];
            *(void *)&v165[v193[10]] = *(void *)&v166[v193[10]];
            *(void *)&v165[v193[11]] = *(void *)&v166[v193[11]];
            *(void *)&v165[v193[12]] = *(void *)&v166[v193[12]];
            uint64_t v203 = v193[13];
            long long v204 = *(void **)&v166[v203];
            *(void *)&v165[v203] = v204;
            v165[v193[14]] = v166[v193[14]];
            swift_bridgeObjectRetain();
            uint64_t v91 = v251;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v205 = v204;
            break;
          case 3u:
          case 4u:
            v257(v165, v166, v252);
            uint64_t v206 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v165[v206[5]] = *(_DWORD *)&v166[v206[5]];
            uint64_t v207 = v206[6];
            uint64_t v208 = &v165[v207];
            uint64_t v209 = &v166[v207];
            long long v211 = *((_OWORD *)v209 + 2);
            long long v210 = *((_OWORD *)v209 + 3);
            long long v212 = *((_OWORD *)v209 + 1);
            *(_OWORD *)uint64_t v208 = *(_OWORD *)v209;
            *((_OWORD *)v208 + 1) = v212;
            *((_OWORD *)v208 + 2) = v211;
            *((_OWORD *)v208 + 3) = v210;
            uint64_t v213 = v206[7];
            uint64_t v214 = &v165[v213];
            uint64_t v215 = &v166[v213];
            *(void *)uint64_t v214 = *(void *)v215;
            *((void *)v214 + 1) = *((void *)v215 + 1);
            *(void *)&v165[v206[8]] = *(void *)&v166[v206[8]];
            *(void *)&v165[v206[9]] = *(void *)&v166[v206[9]];
            *(void *)&v165[v206[10]] = *(void *)&v166[v206[10]];
            swift_bridgeObjectRetain();
            uint64_t v91 = v251;
            swift_retain();
            break;
          case 5u:
            v257(v165, v166, v252);
            long long v216 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v165[v216[5]] = *(_DWORD *)&v166[v216[5]];
            uint64_t v217 = v216[6];
            uint64_t v218 = &v165[v217];
            uint64_t v219 = &v166[v217];
            long long v221 = *((_OWORD *)v219 + 2);
            long long v220 = *((_OWORD *)v219 + 3);
            long long v222 = *((_OWORD *)v219 + 1);
            *(_OWORD *)uint64_t v218 = *(_OWORD *)v219;
            *((_OWORD *)v218 + 1) = v222;
            *((_OWORD *)v218 + 2) = v221;
            *((_OWORD *)v218 + 3) = v220;
            uint64_t v223 = v216[7];
            uint64_t v224 = &v165[v223];
            v225 = &v166[v223];
            *(void *)uint64_t v224 = *(void *)v225;
            *((void *)v224 + 1) = *((void *)v225 + 1);
            *(void *)&v165[v216[8]] = *(void *)&v166[v216[8]];
            *(void *)&v165[v216[9]] = *(void *)&v166[v216[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            v257(v165, v166, v252);
            uint64_t v167 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v165[v167[5]] = *(_DWORD *)&v166[v167[5]];
            uint64_t v168 = v167[6];
            uint64_t v169 = &v165[v168];
            uint64_t v170 = &v166[v168];
            long long v172 = *((_OWORD *)v170 + 2);
            long long v171 = *((_OWORD *)v170 + 3);
            long long v173 = *((_OWORD *)v170 + 1);
            *(_OWORD *)uint64_t v169 = *(_OWORD *)v170;
            *((_OWORD *)v169 + 1) = v173;
            *((_OWORD *)v169 + 2) = v172;
            *((_OWORD *)v169 + 3) = v171;
            uint64_t v174 = v167[7];
            uint64_t v175 = &v165[v174];
            uint64_t v176 = &v166[v174];
            *(void *)uint64_t v175 = *(void *)v176;
            *((void *)v175 + 1) = *((void *)v176 + 1);
            *(void *)&v165[v167[8]] = *(void *)&v166[v167[8]];
            *(void *)&v165[v167[9]] = *(void *)&v166[v167[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        a3 = v260;
        *((unsigned char *)v85 + v91[7]) = *((unsigned char *)v86 + v91[7]);
        *(uint64_t *)((char *)v85 + v91[8]) = *(uint64_t *)((char *)v86 + v91[8]);
        *(_DWORD *)((char *)v85 + v91[9]) = *(_DWORD *)((char *)v86 + v91[9]);
        goto LABEL_54;
      case 0:
        uint64_t v89 = *v86;
        unint64_t v90 = v86[1];
        sub_100038528(v89, v90);
        uint64_t *v85 = v89;
        v85[1] = v90;
LABEL_54:
        swift_storeEnumTagMultiPayload();
        goto LABEL_55;
    }
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
LABEL_55:
  uint64_t v236 = v17[6];
  long long v237 = (void *)(a1 + v236);
  uint64_t v238 = (void *)(a2 + v236);
  *long long v237 = *v238;
  v237[1] = v238[1];
  v237[2] = v238[2];
  v237[3] = v238[3];
  *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
  uint64_t v239 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v239 + 20)) = *(void *)(a2 + *(int *)(v239 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v240 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  sub_10000E558((uint64_t *)(a1 + *(int *)(v240 + 20)), (uint64_t *)(a2 + *(int *)(v240 + 20)));
  *(void *)(a1 + *(int *)(v240 + 24)) = *(void *)(a2 + *(int *)(v240 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003B4A5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003B4ABC(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
      uint64_t v15 = v14[6];
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      long long v18 = v17[3];
      v16[2] = v17[2];
      v16[3] = v18;
      long long v19 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v19;
      *(void *)(a1 + v14[7]) = *(void *)(a2 + v14[7]);
      *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
      *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
      *(unsigned char *)(a1 + v14[10]) = *(unsigned char *)(a2 + v14[10]);
      *(_OWORD *)(a1 + v14[11]) = *(_OWORD *)(a2 + v14[11]);
      *(_OWORD *)(a1 + v14[12]) = *(_OWORD *)(a2 + v14[12]);
      uint64_t v20 = v14[13];
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = (const void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_10000F214(&qword_100524BD0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)(a1 + v14[14]) = *(_OWORD *)(a2 + v14[14]);
      uint64_t v47 = v14[15];
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      *(void *)(v48 + 16) = *(void *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      break;
    case 2u:
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
      uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v27[5]) = *(_DWORD *)(a2 + v27[5]);
      uint64_t v28 = v27[6];
      uint64_t v29 = (_OWORD *)(a1 + v28);
      uint64_t v30 = (_OWORD *)(a2 + v28);
      long long v31 = v30[3];
      _OWORD v29[2] = v30[2];
      v29[3] = v31;
      long long v32 = v30[1];
      _OWORD *v29 = *v30;
      v29[1] = v32;
      *(_OWORD *)(a1 + v27[7]) = *(_OWORD *)(a2 + v27[7]);
      *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
      *(void *)(a1 + v27[9]) = *(void *)(a2 + v27[9]);
      *(void *)(a1 + v27[10]) = *(void *)(a2 + v27[10]);
      *(void *)(a1 + v27[11]) = *(void *)(a2 + v27[11]);
      *(void *)(a1 + v27[12]) = *(void *)(a2 + v27[12]);
      *(void *)(a1 + v27[13]) = *(void *)(a2 + v27[13]);
      *(unsigned char *)(a1 + v27[14]) = *(unsigned char *)(a2 + v27[14]);
      break;
    case 3u:
    case 4u:
      uint64_t v33 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
      uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
      uint64_t v35 = v34[6];
      uint64_t v36 = (_OWORD *)(a1 + v35);
      uint64_t v37 = (_OWORD *)(a2 + v35);
      long long v38 = v37[3];
      v36[2] = v37[2];
      v36[3] = v38;
      long long v39 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v39;
      *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
      *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
      *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
      *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
      break;
    case 5u:
      uint64_t v40 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
      uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
      uint64_t v42 = v41[6];
      long long v43 = (_OWORD *)(a1 + v42);
      long long v44 = (_OWORD *)(a2 + v42);
      long long v45 = v44[3];
      void v43[2] = v44[2];
      v43[3] = v45;
      long long v46 = v44[1];
      *long long v43 = *v44;
      v43[1] = v46;
      *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
      *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
      *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      unint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      _OWORD v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      _OWORD *v9 = *v10;
      v9[1] = v12;
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v51 = v50[5];
  uint64_t v52 = (unsigned char *)(a1 + v51);
  id v53 = (unsigned char *)(a2 + v51);
  uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v55 = type metadata accessor for UUID();
    __dst = *(void **)(*(void *)(v55 - 8) + 32);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))__dst)(v52, v53, v55);
    long long v157 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v56 = v157[5];
    long long v57 = &v52[v56];
    long long v58 = &v53[v56];
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v151 = v50;
        uint64_t v153 = a3;
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
        uint64_t v66 = v65[6];
        uint64_t v67 = &v57[v66];
        long long v68 = &v58[v66];
        long long v69 = *((_OWORD *)v68 + 3);
        *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
        *((_OWORD *)v67 + 3) = v69;
        long long v70 = *((_OWORD *)v68 + 1);
        *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
        *((_OWORD *)v67 + 1) = v70;
        *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
        *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
        *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
        v57[v65[10]] = v58[v65[10]];
        *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
        *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
        uint64_t v71 = v65[13];
        long long v150 = &v57[v71];
        long long v72 = &v58[v71];
        uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v149 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v72, 1, v73))
        {
          uint64_t v74 = sub_10000F214(&qword_100524BD0);
          memcpy(v150, v72, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v150, v72, v73);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v150, 0, 1, v73);
        }
        *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
        uint64_t v131 = v65[15];
        uint64_t v132 = &v57[v131];
        id v133 = &v58[v131];
        *((void *)v132 + 2) = *((void *)v133 + 2);
        *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
        swift_storeEnumTagMultiPayload();
        a3 = v153;
        uint64_t v50 = v151;
        goto LABEL_20;
      case 2u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v75 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v57[v75[5]] = *(_DWORD *)&v58[v75[5]];
        uint64_t v76 = v75[6];
        unint64_t v77 = &v57[v76];
        uint64_t v78 = &v58[v76];
        long long v79 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v79;
        long long v80 = *((_OWORD *)v78 + 1);
        *(_OWORD *)unint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v80;
        *(_OWORD *)&v57[v75[7]] = *(_OWORD *)&v58[v75[7]];
        *(void *)&v57[v75[8]] = *(void *)&v58[v75[8]];
        *(void *)&v57[v75[9]] = *(void *)&v58[v75[9]];
        *(void *)&v57[v75[10]] = *(void *)&v58[v75[10]];
        *(void *)&v57[v75[11]] = *(void *)&v58[v75[11]];
        *(void *)&v57[v75[12]] = *(void *)&v58[v75[12]];
        *(void *)&v57[v75[13]] = *(void *)&v58[v75[13]];
        v57[v75[14]] = v58[v75[14]];
        goto LABEL_19;
      case 3u:
      case 4u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        unint64_t v81 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v57[v81[5]] = *(_DWORD *)&v58[v81[5]];
        uint64_t v82 = v81[6];
        long long v83 = &v57[v82];
        uint64_t v84 = &v58[v82];
        long long v85 = *((_OWORD *)v84 + 3);
        *((_OWORD *)v83 + 2) = *((_OWORD *)v84 + 2);
        *((_OWORD *)v83 + 3) = v85;
        long long v86 = *((_OWORD *)v84 + 1);
        *(_OWORD *)long long v83 = *(_OWORD *)v84;
        *((_OWORD *)v83 + 1) = v86;
        *(_OWORD *)&v57[v81[7]] = *(_OWORD *)&v58[v81[7]];
        *(void *)&v57[v81[8]] = *(void *)&v58[v81[8]];
        *(void *)&v57[v81[9]] = *(void *)&v58[v81[9]];
        *(void *)&v57[v81[10]] = *(void *)&v58[v81[10]];
        goto LABEL_19;
      case 5u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v87 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v57[v87[5]] = *(_DWORD *)&v58[v87[5]];
        uint64_t v88 = v87[6];
        uint64_t v89 = &v57[v88];
        unint64_t v90 = &v58[v88];
        long long v91 = *((_OWORD *)v90 + 3);
        *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
        *((_OWORD *)v89 + 3) = v91;
        long long v92 = *((_OWORD *)v90 + 1);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        *((_OWORD *)v89 + 1) = v92;
        *(_OWORD *)&v57[v87[7]] = *(_OWORD *)&v58[v87[7]];
        *(void *)&v57[v87[8]] = *(void *)&v58[v87[8]];
        *(void *)&v57[v87[9]] = *(void *)&v58[v87[9]];
        goto LABEL_19;
      default:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        long long v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
        uint64_t v60 = v59[6];
        uint64_t v61 = &v57[v60];
        long long v62 = &v58[v60];
        long long v63 = *((_OWORD *)v62 + 3);
        *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
        *((_OWORD *)v61 + 3) = v63;
        long long v64 = *((_OWORD *)v62 + 1);
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        *((_OWORD *)v61 + 1) = v64;
        *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
        *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
        *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_19:
        swift_storeEnumTagMultiPayload();
LABEL_20:
        uint64_t v93 = v157[6];
        uint64_t v94 = &v52[v93];
        unint64_t v95 = &v53[v93];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v152 = v50;
            long long v154 = a3;
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v94[v102[5]] = *(_DWORD *)&v95[v102[5]];
            uint64_t v103 = v102[6];
            long long v104 = &v94[v103];
            long long v105 = &v95[v103];
            long long v106 = *((_OWORD *)v105 + 3);
            *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
            *((_OWORD *)v104 + 3) = v106;
            long long v107 = *((_OWORD *)v105 + 1);
            *(_OWORD *)long long v104 = *(_OWORD *)v105;
            *((_OWORD *)v104 + 1) = v107;
            *(void *)&v94[v102[7]] = *(void *)&v95[v102[7]];
            *(void *)&v94[v102[8]] = *(void *)&v95[v102[8]];
            *(void *)&v94[v102[9]] = *(void *)&v95[v102[9]];
            v94[v102[10]] = v95[v102[10]];
            *(_OWORD *)&v94[v102[11]] = *(_OWORD *)&v95[v102[11]];
            *(_OWORD *)&v94[v102[12]] = *(_OWORD *)&v95[v102[12]];
            uint64_t v108 = v102[13];
            __dsta = &v94[v108];
            long long v109 = &v95[v108];
            uint64_t v110 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v111 = *(void *)(v110 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
            {
              uint64_t v112 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v109, *(void *)(*(void *)(v112 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v111 + 32))(__dsta, v109, v110);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(__dsta, 0, 1, v110);
            }
            a3 = v154;
            uint64_t v50 = v152;
            *(_OWORD *)&v94[v102[14]] = *(_OWORD *)&v95[v102[14]];
            uint64_t v134 = v102[15];
            uint64_t v135 = &v94[v134];
            uint64_t v136 = &v95[v134];
            *((void *)v135 + 2) = *((void *)v136 + 2);
            *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v113 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v94[v113[5]] = *(_DWORD *)&v95[v113[5]];
            uint64_t v114 = v113[6];
            uint64_t v115 = &v94[v114];
            long long v116 = &v95[v114];
            long long v117 = *((_OWORD *)v116 + 3);
            *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
            *((_OWORD *)v115 + 3) = v117;
            long long v118 = *((_OWORD *)v116 + 1);
            *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
            *((_OWORD *)v115 + 1) = v118;
            *(_OWORD *)&v94[v113[7]] = *(_OWORD *)&v95[v113[7]];
            *(void *)&v94[v113[8]] = *(void *)&v95[v113[8]];
            *(void *)&v94[v113[9]] = *(void *)&v95[v113[9]];
            *(void *)&v94[v113[10]] = *(void *)&v95[v113[10]];
            *(void *)&v94[v113[11]] = *(void *)&v95[v113[11]];
            *(void *)&v94[v113[12]] = *(void *)&v95[v113[12]];
            *(void *)&v94[v113[13]] = *(void *)&v95[v113[13]];
            v94[v113[14]] = v95[v113[14]];
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v119 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v94[v119[5]] = *(_DWORD *)&v95[v119[5]];
            uint64_t v120 = v119[6];
            uint64_t v121 = &v94[v120];
            uint64_t v122 = &v95[v120];
            long long v123 = *((_OWORD *)v122 + 3);
            *((_OWORD *)v121 + 2) = *((_OWORD *)v122 + 2);
            *((_OWORD *)v121 + 3) = v123;
            long long v124 = *((_OWORD *)v122 + 1);
            *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
            *((_OWORD *)v121 + 1) = v124;
            *(_OWORD *)&v94[v119[7]] = *(_OWORD *)&v95[v119[7]];
            *(void *)&v94[v119[8]] = *(void *)&v95[v119[8]];
            *(void *)&v94[v119[9]] = *(void *)&v95[v119[9]];
            *(void *)&v94[v119[10]] = *(void *)&v95[v119[10]];
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            long long v125 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v94[v125[5]] = *(_DWORD *)&v95[v125[5]];
            uint64_t v126 = v125[6];
            long long v127 = &v94[v126];
            uint64_t v128 = &v95[v126];
            long long v129 = *((_OWORD *)v128 + 3);
            *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
            *((_OWORD *)v127 + 3) = v129;
            long long v130 = *((_OWORD *)v128 + 1);
            *(_OWORD *)long long v127 = *(_OWORD *)v128;
            *((_OWORD *)v127 + 1) = v130;
            *(_OWORD *)&v94[v125[7]] = *(_OWORD *)&v95[v125[7]];
            *(void *)&v94[v125[8]] = *(void *)&v95[v125[8]];
            *(void *)&v94[v125[9]] = *(void *)&v95[v125[9]];
            break;
          default:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v96 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v94[v96[5]] = *(_DWORD *)&v95[v96[5]];
            uint64_t v97 = v96[6];
            uint64_t v98 = &v94[v97];
            long long v99 = &v95[v97];
            long long v100 = *((_OWORD *)v99 + 3);
            *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
            *((_OWORD *)v98 + 3) = v100;
            long long v101 = *((_OWORD *)v99 + 1);
            *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
            *((_OWORD *)v98 + 1) = v101;
            *(_OWORD *)&v94[v96[7]] = *(_OWORD *)&v95[v96[7]];
            *(void *)&v94[v96[8]] = *(void *)&v95[v96[8]];
            *(void *)&v94[v96[9]] = *(void *)&v95[v96[9]];
            break;
        }
        swift_storeEnumTagMultiPayload();
        v52[v157[7]] = v53[v157[7]];
        *(void *)&v52[v157[8]] = *(void *)&v53[v157[8]];
        *(_DWORD *)&v52[v157[9]] = *(_DWORD *)&v53[v157[9]];
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  else
  {
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  uint64_t v137 = v50[6];
  long long v138 = (_OWORD *)(a1 + v137);
  long long v139 = (_OWORD *)(a2 + v137);
  long long v140 = v139[1];
  *long long v138 = *v139;
  v138[1] = v140;
  *(void *)(a1 + v50[7]) = *(void *)(a2 + v50[7]);
  uint64_t v141 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v141 + 20)) = *(void *)(a2 + *(int *)(v141 + 20));
  uint64_t v142 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v143 = *(int *)(v142 + 20);
  uint64_t v144 = a1 + v143;
  uint64_t v145 = a2 + v143;
  long long v146 = *(_OWORD *)(v145 + 16);
  *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
  *(_OWORD *)(v144 + 16) = v146;
  *(void *)(v144 + 32) = *(void *)(v145 + 32);
  *(void *)(a1 + *(int *)(v142 + 24)) = *(void *)(a2 + *(int *)(v142 + 24));
  uint64_t v147 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v147) = *(void *)(a2 + v147);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1003B5BE0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 == a2)
  {
    uint64_t v13 = (int *)type metadata accessor for DetectionRequest(0);
  }
  else
  {
    sub_1003B4A5C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v15[5]) = *(_DWORD *)(a2 + v15[5]);
        uint64_t v16 = v15[6];
        uint64_t v17 = (_OWORD *)(a1 + v16);
        long long v18 = (_OWORD *)(a2 + v16);
        long long v19 = v18[3];
        void v17[2] = v18[2];
        v17[3] = v19;
        long long v20 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v20;
        *(void *)(a1 + v15[7]) = *(void *)(a2 + v15[7]);
        *(void *)(a1 + v15[8]) = *(void *)(a2 + v15[8]);
        *(void *)(a1 + v15[9]) = *(void *)(a2 + v15[9]);
        *(unsigned char *)(a1 + v15[10]) = *(unsigned char *)(a2 + v15[10]);
        *(_OWORD *)(a1 + v15[11]) = *(_OWORD *)(a2 + v15[11]);
        *(_OWORD *)(a1 + v15[12]) = *(_OWORD *)(a2 + v15[12]);
        uint64_t v21 = v15[13];
        uint64_t v22 = (void *)(a1 + v21);
        uint64_t v23 = (const void *)(a2 + v21);
        uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v25 = *(void *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = sub_10000F214(&qword_100524BD0);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        *(_OWORD *)(a1 + v15[14]) = *(_OWORD *)(a2 + v15[14]);
        uint64_t v48 = v15[15];
        uint64_t v49 = a1 + v48;
        uint64_t v50 = a2 + v48;
        *(void *)(v49 + 16) = *(void *)(v50 + 16);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        break;
      case 2u:
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t v28 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v28[5]) = *(_DWORD *)(a2 + v28[5]);
        uint64_t v29 = v28[6];
        uint64_t v30 = (_OWORD *)(a1 + v29);
        long long v31 = (_OWORD *)(a2 + v29);
        long long v32 = v31[3];
        void v30[2] = v31[2];
        v30[3] = v32;
        long long v33 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v33;
        *(_OWORD *)(a1 + v28[7]) = *(_OWORD *)(a2 + v28[7]);
        *(void *)(a1 + v28[8]) = *(void *)(a2 + v28[8]);
        *(void *)(a1 + v28[9]) = *(void *)(a2 + v28[9]);
        *(void *)(a1 + v28[10]) = *(void *)(a2 + v28[10]);
        *(void *)(a1 + v28[11]) = *(void *)(a2 + v28[11]);
        *(void *)(a1 + v28[12]) = *(void *)(a2 + v28[12]);
        *(void *)(a1 + v28[13]) = *(void *)(a2 + v28[13]);
        *(unsigned char *)(a1 + v28[14]) = *(unsigned char *)(a2 + v28[14]);
        break;
      case 3u:
      case 4u:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
        uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v35[5]) = *(_DWORD *)(a2 + v35[5]);
        uint64_t v36 = v35[6];
        uint64_t v37 = (_OWORD *)(a1 + v36);
        long long v38 = (_OWORD *)(a2 + v36);
        long long v39 = v38[3];
        v37[2] = v38[2];
        void v37[3] = v39;
        long long v40 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v40;
        *(_OWORD *)(a1 + v35[7]) = *(_OWORD *)(a2 + v35[7]);
        *(void *)(a1 + v35[8]) = *(void *)(a2 + v35[8]);
        *(void *)(a1 + v35[9]) = *(void *)(a2 + v35[9]);
        *(void *)(a1 + v35[10]) = *(void *)(a2 + v35[10]);
        break;
      case 5u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v42[5]) = *(_DWORD *)(a2 + v42[5]);
        uint64_t v43 = v42[6];
        long long v44 = (_OWORD *)(a1 + v43);
        long long v45 = (_OWORD *)(a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *long long v44 = *v45;
        v44[1] = v47;
        *(_OWORD *)(a1 + v42[7]) = *(_OWORD *)(a2 + v42[7]);
        *(void *)(a1 + v42[8]) = *(void *)(a2 + v42[8]);
        *(void *)(a1 + v42[9]) = *(void *)(a2 + v42[9]);
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        unint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        _OWORD v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        _OWORD *v9 = *v10;
        v9[1] = v12;
        *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v51 = v13[5];
    uint64_t v52 = (char *)(a1 + v51);
    id v53 = (char *)(a2 + v51);
    sub_1003B4A5C(a1 + v51, type metadata accessor for DetectionRequest.Originator);
    uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v55 = type metadata accessor for UUID();
      uint64_t v155 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
      v155(v52, v53, v55);
      long long v157 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v56 = v157[5];
      long long v57 = &v52[v56];
      long long v58 = &v53[v56];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v153 = a3;
          v155(v57, v58, v55);
          uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
          uint64_t v66 = v65[6];
          uint64_t v67 = &v57[v66];
          long long v68 = &v58[v66];
          long long v69 = *((_OWORD *)v68 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
          *((_OWORD *)v67 + 3) = v69;
          long long v70 = *((_OWORD *)v68 + 1);
          *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
          *((_OWORD *)v67 + 1) = v70;
          *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
          *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
          *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
          v57[v65[10]] = v58[v65[10]];
          *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
          *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
          uint64_t v71 = v65[13];
          uint64_t v151 = &v57[v71];
          long long v72 = &v58[v71];
          uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v149 = *(void *)(v73 - 8);
          long long v150 = v72;
          uint64_t v74 = v72;
          uint64_t v75 = v73;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v74, 1, v73))
          {
            uint64_t v76 = sub_10000F214(&qword_100524BD0);
            memcpy(v151, v150, *(void *)(*(void *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v149 + 32))(v151, v150, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))(v151, 0, 1, v75);
          }
          *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
          uint64_t v132 = v65[15];
          id v133 = &v57[v132];
          uint64_t v134 = &v58[v132];
          *((void *)v133 + 2) = *((void *)v134 + 2);
          *(_OWORD *)id v133 = *(_OWORD *)v134;
          swift_storeEnumTagMultiPayload();
          a3 = v153;
          goto LABEL_22;
        case 2u:
          v155(v57, v58, v55);
          unint64_t v77 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v57[v77[5]] = *(_DWORD *)&v58[v77[5]];
          uint64_t v78 = v77[6];
          long long v79 = &v57[v78];
          long long v80 = &v58[v78];
          long long v81 = *((_OWORD *)v80 + 3);
          *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
          *((_OWORD *)v79 + 3) = v81;
          long long v82 = *((_OWORD *)v80 + 1);
          *(_OWORD *)long long v79 = *(_OWORD *)v80;
          *((_OWORD *)v79 + 1) = v82;
          *(_OWORD *)&v57[v77[7]] = *(_OWORD *)&v58[v77[7]];
          *(void *)&v57[v77[8]] = *(void *)&v58[v77[8]];
          *(void *)&v57[v77[9]] = *(void *)&v58[v77[9]];
          *(void *)&v57[v77[10]] = *(void *)&v58[v77[10]];
          *(void *)&v57[v77[11]] = *(void *)&v58[v77[11]];
          *(void *)&v57[v77[12]] = *(void *)&v58[v77[12]];
          *(void *)&v57[v77[13]] = *(void *)&v58[v77[13]];
          v57[v77[14]] = v58[v77[14]];
          goto LABEL_21;
        case 3u:
        case 4u:
          v155(v57, v58, v55);
          long long v83 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v57[v83[5]] = *(_DWORD *)&v58[v83[5]];
          uint64_t v84 = v83[6];
          long long v85 = &v57[v84];
          long long v86 = &v58[v84];
          long long v87 = *((_OWORD *)v86 + 3);
          *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
          *((_OWORD *)v85 + 3) = v87;
          long long v88 = *((_OWORD *)v86 + 1);
          *(_OWORD *)long long v85 = *(_OWORD *)v86;
          *((_OWORD *)v85 + 1) = v88;
          *(_OWORD *)&v57[v83[7]] = *(_OWORD *)&v58[v83[7]];
          *(void *)&v57[v83[8]] = *(void *)&v58[v83[8]];
          *(void *)&v57[v83[9]] = *(void *)&v58[v83[9]];
          *(void *)&v57[v83[10]] = *(void *)&v58[v83[10]];
          goto LABEL_21;
        case 5u:
          v155(v57, v58, v55);
          uint64_t v89 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v57[v89[5]] = *(_DWORD *)&v58[v89[5]];
          uint64_t v90 = v89[6];
          long long v91 = &v57[v90];
          long long v92 = &v58[v90];
          long long v93 = *((_OWORD *)v92 + 3);
          *((_OWORD *)v91 + 2) = *((_OWORD *)v92 + 2);
          *((_OWORD *)v91 + 3) = v93;
          long long v94 = *((_OWORD *)v92 + 1);
          *(_OWORD *)long long v91 = *(_OWORD *)v92;
          *((_OWORD *)v91 + 1) = v94;
          *(_OWORD *)&v57[v89[7]] = *(_OWORD *)&v58[v89[7]];
          *(void *)&v57[v89[8]] = *(void *)&v58[v89[8]];
          *(void *)&v57[v89[9]] = *(void *)&v58[v89[9]];
          goto LABEL_21;
        default:
          v155(v57, v58, v55);
          long long v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
          uint64_t v60 = v59[6];
          uint64_t v61 = &v57[v60];
          long long v62 = &v58[v60];
          long long v63 = *((_OWORD *)v62 + 3);
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          *((_OWORD *)v61 + 3) = v63;
          long long v64 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v64;
          *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
          *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
          *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_21:
          swift_storeEnumTagMultiPayload();
LABEL_22:
          uint64_t v95 = v157[6];
          uint64_t v96 = &v52[v95];
          uint64_t v97 = &v53[v95];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              long long v154 = a3;
              v155(v96, v97, v55);
              long long v104 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v96[v104[5]] = *(_DWORD *)&v97[v104[5]];
              uint64_t v105 = v104[6];
              long long v106 = &v96[v105];
              long long v107 = &v97[v105];
              long long v108 = *((_OWORD *)v107 + 3);
              *((_OWORD *)v106 + 2) = *((_OWORD *)v107 + 2);
              *((_OWORD *)v106 + 3) = v108;
              long long v109 = *((_OWORD *)v107 + 1);
              *(_OWORD *)long long v106 = *(_OWORD *)v107;
              *((_OWORD *)v106 + 1) = v109;
              *(void *)&v96[v104[7]] = *(void *)&v97[v104[7]];
              *(void *)&v96[v104[8]] = *(void *)&v97[v104[8]];
              *(void *)&v96[v104[9]] = *(void *)&v97[v104[9]];
              v96[v104[10]] = v97[v104[10]];
              *(_OWORD *)&v96[v104[11]] = *(_OWORD *)&v97[v104[11]];
              *(_OWORD *)&v96[v104[12]] = *(_OWORD *)&v97[v104[12]];
              uint64_t v110 = v104[13];
              uint64_t v156 = &v96[v110];
              uint64_t v111 = &v97[v110];
              uint64_t v112 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v152 = *(void *)(v112 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v111, 1, v112))
              {
                uint64_t v113 = sub_10000F214(&qword_100524BD0);
                memcpy(v156, v111, *(void *)(*(void *)(v113 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v156, v111, v112);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v152 + 56))(v156, 0, 1, v112);
              }
              a3 = v154;
              *(_OWORD *)&v96[v104[14]] = *(_OWORD *)&v97[v104[14]];
              uint64_t v135 = v104[15];
              uint64_t v136 = &v96[v135];
              uint64_t v137 = &v97[v135];
              *((void *)v136 + 2) = *((void *)v137 + 2);
              *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
              break;
            case 2u:
              v155(v96, v97, v55);
              uint64_t v114 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v96[v114[5]] = *(_DWORD *)&v97[v114[5]];
              uint64_t v115 = v114[6];
              long long v116 = &v96[v115];
              long long v117 = &v97[v115];
              long long v118 = *((_OWORD *)v117 + 3);
              *((_OWORD *)v116 + 2) = *((_OWORD *)v117 + 2);
              *((_OWORD *)v116 + 3) = v118;
              long long v119 = *((_OWORD *)v117 + 1);
              *(_OWORD *)long long v116 = *(_OWORD *)v117;
              *((_OWORD *)v116 + 1) = v119;
              *(_OWORD *)&v96[v114[7]] = *(_OWORD *)&v97[v114[7]];
              *(void *)&v96[v114[8]] = *(void *)&v97[v114[8]];
              *(void *)&v96[v114[9]] = *(void *)&v97[v114[9]];
              *(void *)&v96[v114[10]] = *(void *)&v97[v114[10]];
              *(void *)&v96[v114[11]] = *(void *)&v97[v114[11]];
              *(void *)&v96[v114[12]] = *(void *)&v97[v114[12]];
              *(void *)&v96[v114[13]] = *(void *)&v97[v114[13]];
              v96[v114[14]] = v97[v114[14]];
              break;
            case 3u:
            case 4u:
              v155(v96, v97, v55);
              uint64_t v120 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v96[v120[5]] = *(_DWORD *)&v97[v120[5]];
              uint64_t v121 = v120[6];
              uint64_t v122 = &v96[v121];
              long long v123 = &v97[v121];
              long long v124 = *((_OWORD *)v123 + 3);
              *((_OWORD *)v122 + 2) = *((_OWORD *)v123 + 2);
              *((_OWORD *)v122 + 3) = v124;
              long long v125 = *((_OWORD *)v123 + 1);
              *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
              *((_OWORD *)v122 + 1) = v125;
              *(_OWORD *)&v96[v120[7]] = *(_OWORD *)&v97[v120[7]];
              *(void *)&v96[v120[8]] = *(void *)&v97[v120[8]];
              *(void *)&v96[v120[9]] = *(void *)&v97[v120[9]];
              *(void *)&v96[v120[10]] = *(void *)&v97[v120[10]];
              break;
            case 5u:
              v155(v96, v97, v55);
              uint64_t v126 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v96[v126[5]] = *(_DWORD *)&v97[v126[5]];
              uint64_t v127 = v126[6];
              uint64_t v128 = &v96[v127];
              long long v129 = &v97[v127];
              long long v130 = *((_OWORD *)v129 + 3);
              *((_OWORD *)v128 + 2) = *((_OWORD *)v129 + 2);
              *((_OWORD *)v128 + 3) = v130;
              long long v131 = *((_OWORD *)v129 + 1);
              *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
              *((_OWORD *)v128 + 1) = v131;
              *(_OWORD *)&v96[v126[7]] = *(_OWORD *)&v97[v126[7]];
              *(void *)&v96[v126[8]] = *(void *)&v97[v126[8]];
              *(void *)&v96[v126[9]] = *(void *)&v97[v126[9]];
              break;
            default:
              v155(v96, v97, v55);
              uint64_t v98 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v96[v98[5]] = *(_DWORD *)&v97[v98[5]];
              uint64_t v99 = v98[6];
              long long v100 = &v96[v99];
              long long v101 = &v97[v99];
              long long v102 = *((_OWORD *)v101 + 3);
              *((_OWORD *)v100 + 2) = *((_OWORD *)v101 + 2);
              *((_OWORD *)v100 + 3) = v102;
              long long v103 = *((_OWORD *)v101 + 1);
              *(_OWORD *)long long v100 = *(_OWORD *)v101;
              *((_OWORD *)v100 + 1) = v103;
              *(_OWORD *)&v96[v98[7]] = *(_OWORD *)&v97[v98[7]];
              *(void *)&v96[v98[8]] = *(void *)&v97[v98[8]];
              *(void *)&v96[v98[9]] = *(void *)&v97[v98[9]];
              break;
          }
          swift_storeEnumTagMultiPayload();
          v52[v157[7]] = v53[v157[7]];
          *(void *)&v52[v157[8]] = *(void *)&v53[v157[8]];
          *(_DWORD *)&v52[v157[9]] = *(_DWORD *)&v53[v157[9]];
          swift_storeEnumTagMultiPayload();
          break;
      }
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  uint64_t v138 = v13[6];
  long long v139 = (_OWORD *)(a1 + v138);
  long long v140 = (_OWORD *)(a2 + v138);
  long long v141 = v140[1];
  *long long v139 = *v140;
  v139[1] = v141;
  *(void *)(a1 + v13[7]) = *(void *)(a2 + v13[7]);
  uint64_t v142 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v142 + 20)) = *(void *)(a2 + *(int *)(v142 + 20));
  swift_bridgeObjectRelease();
  uint64_t v143 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v144 = *(int *)(v143 + 20);
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + v144);
  long long v147 = *(_OWORD *)(v146 + 16);
  *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
  *(_OWORD *)(v145 + 16) = v147;
  *(void *)(v145 + 32) = *(void *)(v146 + 32);
  *(void *)(a1 + *(int *)(v143 + 24)) = *(void *)(a2 + *(int *)(v143 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003B6D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003B6D94);
}

uint64_t sub_1003B6D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1003B6E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003B6E68);
}

uint64_t sub_1003B6E68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1003B6F24()
{
  uint64_t result = type metadata accessor for TrackManager.MatchingComputationRequest(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1003B6FC0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a3;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v282 = v6;
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)((char *)a1 + v21[5]) = *(_DWORD *)((char *)a2 + v21[5]);
        uint64_t v22 = v21[6];
        uint64_t v23 = (_OWORD *)((char *)a1 + v22);
        uint64_t v24 = (_OWORD *)((char *)a2 + v22);
        long long v25 = v24[3];
        void v23[2] = v24[2];
        v23[3] = v25;
        long long v26 = v24[1];
        *uint64_t v23 = *v24;
        v23[1] = v26;
        *(void *)((char *)a1 + v21[7]) = *(void *)((char *)a2 + v21[7]);
        *(void *)((char *)a1 + v21[8]) = *(void *)((char *)a2 + v21[8]);
        *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
        *((unsigned char *)a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
        uint64_t v27 = v21[11];
        uint64_t v28 = (void *)((char *)a1 + v27);
        uint64_t v29 = (void *)((char *)a2 + v27);
        uint64_t v30 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v30;
        uint64_t v31 = v21[12];
        long long v32 = (void *)((char *)a1 + v31);
        long long v33 = (void *)((char *)a2 + v31);
        uint64_t v34 = v33[1];
        *long long v32 = *v33;
        v32[1] = v34;
        uint64_t v35 = v21[13];
        __dst = (char *)a1 + v35;
        uint64_t v36 = (char *)a2 + v35;
        uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v38 = *(void *)(v37 - 8);
        long long v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v39(v36, 1, v37))
        {
          uint64_t v40 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v36, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
        }
        uint64_t v6 = v282;
        uint64_t v80 = v21[14];
        long long v81 = (char *)a1 + v80;
        long long v82 = (char *)a2 + v80;
        unint64_t v83 = *((void *)v82 + 1);
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)long long v81 = *(_OWORD *)v82;
        }
        else
        {
          uint64_t v84 = *(void *)v82;
          sub_100038528(*(void *)v82, *((void *)v82 + 1));
          *(void *)long long v81 = v84;
          *((void *)v81 + 1) = v83;
        }
        uint64_t v85 = v21[15];
        long long v86 = (void *)((char *)a1 + v85);
        long long v87 = (void *)((char *)a2 + v85);
        if (*v87)
        {
          uint64_t v88 = v87[1];
          uint64_t v89 = v87[2];
          *long long v86 = *v87;
          v86[1] = v88;
          v86[2] = v89;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)long long v86 = *(_OWORD *)v87;
          v86[2] = v87[2];
        }
        break;
      case 2u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v42[5]) = *(_DWORD *)((char *)a2 + v42[5]);
        uint64_t v43 = v42[6];
        long long v44 = (_OWORD *)((char *)a1 + v43);
        long long v45 = (_OWORD *)((char *)a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *long long v44 = *v45;
        v44[1] = v47;
        uint64_t v48 = v42[7];
        uint64_t v49 = (void *)((char *)a1 + v48);
        uint64_t v50 = (void *)((char *)a2 + v48);
        uint64_t v52 = *v50;
        uint64_t v51 = v50[1];
        *uint64_t v49 = v52;
        v49[1] = v51;
        *(void *)((char *)a1 + v42[8]) = *(void *)((char *)a2 + v42[8]);
        *(void *)((char *)a1 + v42[9]) = *(void *)((char *)a2 + v42[9]);
        *(void *)((char *)a1 + v42[10]) = *(void *)((char *)a2 + v42[10]);
        *(void *)((char *)a1 + v42[11]) = *(void *)((char *)a2 + v42[11]);
        *(void *)((char *)a1 + v42[12]) = *(void *)((char *)a2 + v42[12]);
        uint64_t v53 = v42[13];
        uint64_t v54 = *(void **)((char *)a2 + v53);
        *(void *)((char *)a1 + v53) = v54;
        *((unsigned char *)a1 + v42[14]) = *((unsigned char *)a2 + v42[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v55 = v54;
        break;
      case 3u:
      case 4u:
        uint64_t v56 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
        long long v57 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)((char *)a1 + v57[5]) = *(_DWORD *)((char *)a2 + v57[5]);
        uint64_t v58 = v57[6];
        long long v59 = (_OWORD *)((char *)a1 + v58);
        uint64_t v60 = (_OWORD *)((char *)a2 + v58);
        long long v61 = v60[3];
        v59[2] = v60[2];
        v59[3] = v61;
        long long v62 = v60[1];
        _OWORD *v59 = *v60;
        v59[1] = v62;
        uint64_t v63 = v57[7];
        long long v64 = (void *)((char *)a1 + v63);
        uint64_t v65 = (void *)((char *)a2 + v63);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        *long long v64 = v67;
        v64[1] = v66;
        *(void *)((char *)a1 + v57[8]) = *(void *)((char *)a2 + v57[8]);
        *(void *)((char *)a1 + v57[9]) = *(void *)((char *)a2 + v57[9]);
        *(void *)((char *)a1 + v57[10]) = *(void *)((char *)a2 + v57[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v68 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v68 - 8) + 16))(a1, a2, v68);
        long long v69 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v69[5]) = *(_DWORD *)((char *)a2 + v69[5]);
        uint64_t v70 = v69[6];
        uint64_t v71 = (_OWORD *)((char *)a1 + v70);
        long long v72 = (_OWORD *)((char *)a2 + v70);
        long long v73 = v72[3];
        v71[2] = v72[2];
        v71[3] = v73;
        long long v74 = v72[1];
        _OWORD *v71 = *v72;
        v71[1] = v74;
        uint64_t v75 = v69[7];
        uint64_t v76 = (void *)((char *)a1 + v75);
        unint64_t v77 = (void *)((char *)a2 + v75);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        *uint64_t v76 = v79;
        v76[1] = v78;
        *(void *)((char *)a1 + v69[8]) = *(void *)((char *)a2 + v69[8]);
        *(void *)((char *)a1 + v69[9]) = *(void *)((char *)a2 + v69[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)((char *)a1 + v8[5]) = *(_DWORD *)((char *)a2 + v8[5]);
        uint64_t v9 = v8[6];
        unint64_t v10 = (_OWORD *)((char *)a1 + v9);
        long long v11 = (_OWORD *)((char *)a2 + v9);
        long long v12 = v11[3];
        v10[2] = v11[2];
        v10[3] = v12;
        long long v13 = v11[1];
        *unint64_t v10 = *v11;
        v10[1] = v13;
        uint64_t v14 = v8[7];
        uint64_t v15 = (void *)((char *)a1 + v14);
        uint64_t v16 = (void *)((char *)a2 + v14);
        uint64_t v18 = *v16;
        uint64_t v17 = v16[1];
        void *v15 = v18;
        v15[1] = v17;
        *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
        *(void *)((char *)a1 + v8[9]) = *(void *)((char *)a2 + v8[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v90 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v91 = v90[5];
    long long v92 = (void *)((char *)a1 + v91);
    long long v93 = (void *)((char *)a2 + v91);
    uint64_t v94 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *long long v92 = *v93;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v283 = v6;
      v274 = (void *)type metadata accessor for UUID();
      __dstb = (void **)(*(v274 - 1) + 16);
      v279 = (void (*)(char *, char *, void *))*__dstb;
      ((void (*)(uint64_t *, uint64_t *))*__dstb)(v92, v93);
      uint64_t v98 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v99 = v98[5];
      long long v100 = (char *)v92 + v99;
      long long v101 = (char *)v93 + v99;
      v273 = v98;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v279(v100, v101, v274);
          uint64_t v113 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v100[v113[5]] = *(_DWORD *)&v101[v113[5]];
          uint64_t v114 = v113[6];
          uint64_t v115 = &v100[v114];
          long long v116 = &v101[v114];
          long long v117 = *((_OWORD *)v116 + 3);
          *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
          *((_OWORD *)v115 + 3) = v117;
          long long v118 = *((_OWORD *)v116 + 1);
          *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
          *((_OWORD *)v115 + 1) = v118;
          *(void *)&v100[v113[7]] = *(void *)&v101[v113[7]];
          *(void *)&v100[v113[8]] = *(void *)&v101[v113[8]];
          *(void *)&v100[v113[9]] = *(void *)&v101[v113[9]];
          v100[v113[10]] = v101[v113[10]];
          uint64_t v119 = v113[11];
          uint64_t v120 = &v100[v119];
          uint64_t v121 = &v101[v119];
          uint64_t v264 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v264;
          uint64_t v122 = v113[12];
          long long v123 = &v100[v122];
          long long v124 = &v101[v122];
          uint64_t v263 = *((void *)v124 + 1);
          *(void *)long long v123 = *(void *)v124;
          *((void *)v123 + 1) = v263;
          uint64_t v125 = v113[13];
          uint64_t v267 = &v100[v125];
          v269 = v113;
          __src = &v101[v125];
          uint64_t v126 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v261 = *(void *)(v126 - 8);
          uint64_t v262 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v262(__src, 1, v126))
          {
            uint64_t v127 = sub_10000F214(&qword_100524BD0);
            memcpy(v267, __src, *(void *)(*(void *)(v127 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v267, __src, v126);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(v267, 0, 1, v126);
          }
          uint64_t v164 = v269;
          uint64_t v165 = v269[14];
          uint64_t v166 = &v100[v165];
          uint64_t v167 = (uint64_t *)&v101[v165];
          unint64_t v168 = v167[1];
          if (v168 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
          }
          else
          {
            __srca = (void *)*v167;
            sub_100038528(*v167, v168);
            uint64_t v164 = v269;
            *(void *)uint64_t v166 = __srca;
            *((void *)v166 + 1) = v168;
          }
          uint64_t v169 = v164[15];
          uint64_t v170 = &v100[v169];
          long long v171 = &v101[v169];
          if (*(void *)v171)
          {
            uint64_t v172 = *((void *)v171 + 1);
            uint64_t v173 = *((void *)v171 + 2);
            *(void *)uint64_t v170 = *(void *)v171;
            *((void *)v170 + 1) = v172;
            *((void *)v170 + 2) = v173;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
            *((void *)v170 + 2) = *((void *)v171 + 2);
          }
          uint64_t v98 = v273;
          break;
        case 2u:
          v279(v100, v101, v274);
          uint64_t v128 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v100[v128[5]] = *(_DWORD *)&v101[v128[5]];
          uint64_t v129 = v128[6];
          long long v130 = &v100[v129];
          long long v131 = &v101[v129];
          long long v132 = *((_OWORD *)v131 + 3);
          *((_OWORD *)v130 + 2) = *((_OWORD *)v131 + 2);
          *((_OWORD *)v130 + 3) = v132;
          long long v133 = *((_OWORD *)v131 + 1);
          *(_OWORD *)long long v130 = *(_OWORD *)v131;
          *((_OWORD *)v130 + 1) = v133;
          uint64_t v134 = v128[7];
          uint64_t v135 = &v100[v134];
          uint64_t v136 = &v101[v134];
          uint64_t v138 = *(void *)v136;
          uint64_t v137 = *((void *)v136 + 1);
          *(void *)uint64_t v135 = v138;
          *((void *)v135 + 1) = v137;
          *(void *)&v100[v128[8]] = *(void *)&v101[v128[8]];
          *(void *)&v100[v128[9]] = *(void *)&v101[v128[9]];
          *(void *)&v100[v128[10]] = *(void *)&v101[v128[10]];
          *(void *)&v100[v128[11]] = *(void *)&v101[v128[11]];
          *(void *)&v100[v128[12]] = *(void *)&v101[v128[12]];
          uint64_t v139 = v128[13];
          long long v140 = *(void **)&v101[v139];
          *(void *)&v100[v139] = v140;
          v100[v128[14]] = v101[v128[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v141 = v140;
          break;
        case 3u:
        case 4u:
          v279(v100, v101, v274);
          uint64_t v142 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v100[v142[5]] = *(_DWORD *)&v101[v142[5]];
          uint64_t v143 = v142[6];
          uint64_t v144 = &v100[v143];
          uint64_t v145 = &v101[v143];
          long long v146 = *((_OWORD *)v145 + 3);
          *((_OWORD *)v144 + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)v144 + 3) = v146;
          long long v147 = *((_OWORD *)v145 + 1);
          *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
          *((_OWORD *)v144 + 1) = v147;
          uint64_t v148 = v142[7];
          uint64_t v149 = &v100[v148];
          long long v150 = &v101[v148];
          uint64_t v152 = *(void *)v150;
          uint64_t v151 = *((void *)v150 + 1);
          *(void *)uint64_t v149 = v152;
          *((void *)v149 + 1) = v151;
          *(void *)&v100[v142[8]] = *(void *)&v101[v142[8]];
          *(void *)&v100[v142[9]] = *(void *)&v101[v142[9]];
          *(void *)&v100[v142[10]] = *(void *)&v101[v142[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v279(v100, v101, v274);
          uint64_t v153 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v100[v153[5]] = *(_DWORD *)&v101[v153[5]];
          uint64_t v154 = v153[6];
          uint64_t v155 = &v100[v154];
          uint64_t v156 = &v101[v154];
          long long v157 = *((_OWORD *)v156 + 3);
          *((_OWORD *)v155 + 2) = *((_OWORD *)v156 + 2);
          *((_OWORD *)v155 + 3) = v157;
          long long v158 = *((_OWORD *)v156 + 1);
          *(_OWORD *)uint64_t v155 = *(_OWORD *)v156;
          *((_OWORD *)v155 + 1) = v158;
          uint64_t v159 = v153[7];
          uint64_t v160 = &v100[v159];
          uint64_t v161 = &v101[v159];
          uint64_t v163 = *(void *)v161;
          uint64_t v162 = *((void *)v161 + 1);
          *(void *)uint64_t v160 = v163;
          *((void *)v160 + 1) = v162;
          *(void *)&v100[v153[8]] = *(void *)&v101[v153[8]];
          *(void *)&v100[v153[9]] = *(void *)&v101[v153[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v279(v100, v101, v274);
          long long v102 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v100[v102[5]] = *(_DWORD *)&v101[v102[5]];
          uint64_t v103 = v102[6];
          long long v104 = &v100[v103];
          uint64_t v105 = &v101[v103];
          long long v106 = *((_OWORD *)v105 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
          *((_OWORD *)v104 + 3) = v106;
          long long v107 = *((_OWORD *)v105 + 1);
          *(_OWORD *)long long v104 = *(_OWORD *)v105;
          *((_OWORD *)v104 + 1) = v107;
          uint64_t v108 = v102[7];
          long long v109 = &v100[v108];
          uint64_t v110 = &v101[v108];
          uint64_t v112 = *(void *)v110;
          uint64_t v111 = *((void *)v110 + 1);
          *(void *)long long v109 = v112;
          *((void *)v109 + 1) = v111;
          *(void *)&v100[v102[8]] = *(void *)&v101[v102[8]];
          *(void *)&v100[v102[9]] = *(void *)&v101[v102[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v174 = v98[6];
      uint64_t v175 = (char *)v92 + v174;
      uint64_t v176 = (char *)v93 + v174;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v279(v175, v176, v274);
          long long v188 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v175[v188[5]] = *(_DWORD *)&v176[v188[5]];
          uint64_t v189 = v188[6];
          uint64_t v190 = &v175[v189];
          uint64_t v191 = &v176[v189];
          long long v192 = *((_OWORD *)v191 + 3);
          *((_OWORD *)v190 + 2) = *((_OWORD *)v191 + 2);
          *((_OWORD *)v190 + 3) = v192;
          long long v193 = *((_OWORD *)v191 + 1);
          *(_OWORD *)uint64_t v190 = *(_OWORD *)v191;
          *((_OWORD *)v190 + 1) = v193;
          *(void *)&v175[v188[7]] = *(void *)&v176[v188[7]];
          *(void *)&v175[v188[8]] = *(void *)&v176[v188[8]];
          *(void *)&v175[v188[9]] = *(void *)&v176[v188[9]];
          v175[v188[10]] = v176[v188[10]];
          uint64_t v194 = v188[11];
          v195 = &v175[v194];
          uint64_t v196 = &v176[v194];
          uint64_t v270 = *((void *)v196 + 1);
          *(void *)v195 = *(void *)v196;
          *((void *)v195 + 1) = v270;
          uint64_t v197 = v188[12];
          long long v198 = &v175[v197];
          long long v199 = &v176[v197];
          v268 = (void *)*((void *)v199 + 1);
          *(void *)long long v198 = *(void *)v199;
          *((void *)v198 + 1) = v268;
          uint64_t v200 = v188[13];
          v275 = &v175[v200];
          __dsta = v188;
          v280 = &v176[v200];
          uint64_t v201 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v265 = *(void *)(v201 - 8);
          uint64_t v266 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v265 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v266(v280, 1, v201))
          {
            uint64_t v202 = sub_10000F214(&qword_100524BD0);
            memcpy(v275, v280, *(void *)(*(void *)(v202 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v265 + 16))(v275, v280, v201);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v265 + 56))(v275, 0, 1, v201);
          }
          uint64_t v239 = __dsta;
          uint64_t v240 = __dsta[14];
          uint64_t v241 = &v175[v240];
          uint64_t v242 = (uint64_t *)&v176[v240];
          unint64_t v243 = v242[1];
          if (v243 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v241 = *(_OWORD *)v242;
          }
          else
          {
            uint64_t v281 = (void *)*v242;
            sub_100038528(*v242, v243);
            uint64_t v239 = __dsta;
            *(void *)uint64_t v241 = v281;
            *((void *)v241 + 1) = v243;
          }
          uint64_t v244 = v239[15];
          uint64_t v245 = &v175[v244];
          uint64_t v246 = &v176[v244];
          if (*(void *)v246)
          {
            uint64_t v247 = *((void *)v246 + 1);
            uint64_t v248 = *((void *)v246 + 2);
            *(void *)uint64_t v245 = *(void *)v246;
            *((void *)v245 + 1) = v247;
            *((void *)v245 + 2) = v248;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v245 = *(_OWORD *)v246;
            *((void *)v245 + 2) = *((void *)v246 + 2);
          }
          uint64_t v98 = v273;
          break;
        case 2u:
          v279(v175, v176, v274);
          uint64_t v203 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v175[v203[5]] = *(_DWORD *)&v176[v203[5]];
          uint64_t v204 = v203[6];
          id v205 = &v175[v204];
          uint64_t v206 = &v176[v204];
          long long v207 = *((_OWORD *)v206 + 3);
          *((_OWORD *)v205 + 2) = *((_OWORD *)v206 + 2);
          *((_OWORD *)v205 + 3) = v207;
          long long v208 = *((_OWORD *)v206 + 1);
          *(_OWORD *)id v205 = *(_OWORD *)v206;
          *((_OWORD *)v205 + 1) = v208;
          uint64_t v209 = v203[7];
          long long v210 = &v175[v209];
          long long v211 = &v176[v209];
          uint64_t v213 = *(void *)v211;
          uint64_t v212 = *((void *)v211 + 1);
          *(void *)long long v210 = v213;
          *((void *)v210 + 1) = v212;
          *(void *)&v175[v203[8]] = *(void *)&v176[v203[8]];
          *(void *)&v175[v203[9]] = *(void *)&v176[v203[9]];
          *(void *)&v175[v203[10]] = *(void *)&v176[v203[10]];
          *(void *)&v175[v203[11]] = *(void *)&v176[v203[11]];
          *(void *)&v175[v203[12]] = *(void *)&v176[v203[12]];
          uint64_t v214 = v203[13];
          uint64_t v215 = *(void **)&v176[v214];
          *(void *)&v175[v214] = v215;
          v175[v203[14]] = v176[v203[14]];
          swift_bridgeObjectRetain();
          uint64_t v98 = v273;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v216 = v215;
          break;
        case 3u:
        case 4u:
          v279(v175, v176, v274);
          uint64_t v217 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v175[v217[5]] = *(_DWORD *)&v176[v217[5]];
          uint64_t v218 = v217[6];
          uint64_t v219 = &v175[v218];
          long long v220 = &v176[v218];
          long long v221 = *((_OWORD *)v220 + 3);
          *((_OWORD *)v219 + 2) = *((_OWORD *)v220 + 2);
          *((_OWORD *)v219 + 3) = v221;
          long long v222 = *((_OWORD *)v220 + 1);
          *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
          *((_OWORD *)v219 + 1) = v222;
          uint64_t v223 = v217[7];
          uint64_t v224 = &v175[v223];
          v225 = &v176[v223];
          uint64_t v227 = *(void *)v225;
          uint64_t v226 = *((void *)v225 + 1);
          *(void *)uint64_t v224 = v227;
          *((void *)v224 + 1) = v226;
          *(void *)&v175[v217[8]] = *(void *)&v176[v217[8]];
          *(void *)&v175[v217[9]] = *(void *)&v176[v217[9]];
          *(void *)&v175[v217[10]] = *(void *)&v176[v217[10]];
          swift_bridgeObjectRetain();
          uint64_t v98 = v273;
          swift_retain();
          break;
        case 5u:
          v279(v175, v176, v274);
          long long v228 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v175[v228[5]] = *(_DWORD *)&v176[v228[5]];
          uint64_t v229 = v228[6];
          unint64_t v230 = &v175[v229];
          uint64_t v231 = &v176[v229];
          long long v232 = *((_OWORD *)v231 + 3);
          *((_OWORD *)v230 + 2) = *((_OWORD *)v231 + 2);
          *((_OWORD *)v230 + 3) = v232;
          long long v233 = *((_OWORD *)v231 + 1);
          *(_OWORD *)unint64_t v230 = *(_OWORD *)v231;
          *((_OWORD *)v230 + 1) = v233;
          uint64_t v234 = v228[7];
          long long v235 = &v175[v234];
          uint64_t v236 = &v176[v234];
          uint64_t v238 = *(void *)v236;
          uint64_t v237 = *((void *)v236 + 1);
          *(void *)long long v235 = v238;
          *((void *)v235 + 1) = v237;
          *(void *)&v175[v228[8]] = *(void *)&v176[v228[8]];
          *(void *)&v175[v228[9]] = *(void *)&v176[v228[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v279(v175, v176, v274);
          long long v177 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v175[v177[5]] = *(_DWORD *)&v176[v177[5]];
          uint64_t v178 = v177[6];
          uint64_t v179 = &v175[v178];
          uint64_t v180 = &v176[v178];
          long long v181 = *((_OWORD *)v180 + 3);
          *((_OWORD *)v179 + 2) = *((_OWORD *)v180 + 2);
          *((_OWORD *)v179 + 3) = v181;
          long long v182 = *((_OWORD *)v180 + 1);
          *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
          *((_OWORD *)v179 + 1) = v182;
          uint64_t v183 = v177[7];
          uint64_t v184 = &v175[v183];
          uint64_t v185 = &v176[v183];
          uint64_t v187 = *(void *)v185;
          uint64_t v186 = *((void *)v185 + 1);
          *(void *)uint64_t v184 = v187;
          *((void *)v184 + 1) = v186;
          *(void *)&v175[v177[8]] = *(void *)&v176[v177[8]];
          *(void *)&v175[v177[9]] = *(void *)&v176[v177[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v6 = v283;
      *((unsigned char *)v92 + v98[7]) = *((unsigned char *)v93 + v98[7]);
      *(uint64_t *)((char *)v92 + v98[8]) = *(uint64_t *)((char *)v93 + v98[8]);
      *(_DWORD *)((char *)v92 + v98[9]) = *(_DWORD *)((char *)v93 + v98[9]);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
LABEL_55:
        uint64_t v249 = v90[6];
        v250 = (_OWORD *)((char *)a1 + v249);
        unint64_t v251 = (_OWORD *)((char *)a2 + v249);
        long long v252 = v251[1];
        _OWORD *v250 = *v251;
        v250[1] = v252;
        *(void *)((char *)a1 + v90[7]) = *(void *)((char *)a2 + v90[7]);
        uint64_t v253 = type metadata accessor for DetectionResult(0);
        *(void *)((char *)a1 + *(int *)(v253 + 20)) = *(void *)((char *)a2 + *(int *)(v253 + 20));
        uint64_t v254 = *(int *)(v6 + 20);
        uint64_t v255 = (char *)a1 + v254;
        uint64_t v256 = (char *)a2 + v254;
        long long v257 = *(_OWORD *)((char *)a2 + v254 + 24);
        *(_OWORD *)((char *)a1 + v254 + 24) = v257;
        uint64_t v258 = v257;
        uint64_t v259 = **(void (***)(char *, char *, uint64_t))(v257 - 8);
        swift_bridgeObjectRetain();
        v259(v255, v256, v258);
        *(void *)((char *)a1 + *(int *)(v6 + 24)) = *(void *)((char *)a2 + *(int *)(v6 + 24));
        swift_bridgeObjectRetain();
        return a1;
      }
      uint64_t v96 = *v93;
      unint64_t v97 = v93[1];
      sub_100038528(v96, v97);
      *long long v92 = v96;
      v92[1] = v97;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_55;
  }
  uint64_t v19 = *a2;
  *a1 = *a2;
  a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_1003B853C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
      uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = a1 + v7[13];
      uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      long long v11 = (uint64_t *)(a1 + v7[14]);
      unint64_t v12 = v11[1];
      if (v12 >> 60 != 15) {
        sub_100038B34(*v11, v12);
      }
      if (*(void *)(a1 + v7[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      uint64_t v14 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v16 = a1 + *(int *)(type metadata accessor for DetectionRequest(0) + 20);
  type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_41:
      swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v18 = type metadata accessor for UUID();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
      v19(v16, v18);
      uint64_t v20 = type metadata accessor for CVTrackSnapshot(0);
      uint64_t v21 = v16 + *(int *)(v20 + 20);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v19(v21, v18);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_29;
        case 1u:
          uint64_t v42 = v20;
          v19(v21, v18);
          uint64_t v22 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v23 = v21 + v22[13];
          uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v40 = *(void *)(v24 - 8);
          uint64_t v41 = v23;
          uint64_t v25 = v23;
          uint64_t v26 = v24;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v25, 1, v24)) {
            (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v26);
          }
          uint64_t v27 = (uint64_t *)(v21 + v22[14]);
          unint64_t v28 = v27[1];
          if (v28 >> 60 != 15) {
            sub_100038B34(*v27, v28);
          }
          uint64_t v29 = (void *)(v21 + v22[15]);
          uint64_t v20 = v42;
          if (*v29)
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v19(v21, v18);
          uint64_t v30 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v19(v21, v18);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v19(v21, v18);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_29:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      uint64_t v31 = v16 + *(int *)(v20 + 24);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v19(v31, v18);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_41;
        case 1u:
          v19(v31, v18);
          long long v32 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v33 = v31 + v32[13];
          uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v35 = *(void *)(v34 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
          }
          uint64_t v36 = (uint64_t *)(v31 + v32[14]);
          unint64_t v37 = v36[1];
          if (v37 >> 60 != 15) {
            sub_100038B34(*v36, v37);
          }
          if (*(void *)(v31 + v32[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v19(v31, v18);
          uint64_t v38 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v19(v31, v18);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v19(v31, v18);
          type metadata accessor for StreamingTextDetectorResult(0);
          goto LABEL_41;
        default:
          goto LABEL_42;
      }
      break;
    case 0:
      sub_100038B34(*(void *)v16, *(void *)(v16 + 8));
      break;
  }
LABEL_42:
  type metadata accessor for DetectionResult(0);
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + *(int *)(a2 + 20));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003B8E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
      uint64_t v20 = v19[6];
      uint64_t v21 = (_OWORD *)(a1 + v20);
      uint64_t v22 = (_OWORD *)(a2 + v20);
      long long v23 = v22[3];
      void v21[2] = v22[2];
      void v21[3] = v23;
      long long v24 = v22[1];
      _OWORD *v21 = *v22;
      v21[1] = v24;
      *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
      *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
      *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
      *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
      uint64_t v25 = v19[11];
      uint64_t v26 = (void *)(a1 + v25);
      uint64_t v27 = (void *)(a2 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v19[12];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (void *)(a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v19[13];
      __dst = (void *)(a1 + v33);
      uint64_t v34 = (const void *)(a2 + v33);
      uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v36 = *(void *)(v35 - 8);
      unint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(__dst, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
      }
      uint64_t v78 = v19[14];
      uint64_t v79 = a1 + v78;
      uint64_t v80 = (uint64_t *)(a2 + v78);
      unint64_t v81 = v80[1];
      if (v81 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      }
      else
      {
        uint64_t v82 = *v80;
        sub_100038528(*v80, v80[1]);
        *(void *)uint64_t v79 = v82;
        *(void *)(v79 + 8) = v81;
      }
      uint64_t v83 = v19[15];
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (void *)(a2 + v83);
      if (*v85)
      {
        uint64_t v86 = v85[1];
        uint64_t v87 = v85[2];
        *uint64_t v84 = *v85;
        v84[1] = v86;
        v84[2] = v87;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
        v84[2] = v85[2];
      }
      break;
    case 2u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      uint64_t v40 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v40[5]) = *(_DWORD *)(a2 + v40[5]);
      uint64_t v41 = v40[6];
      uint64_t v42 = (_OWORD *)(a1 + v41);
      uint64_t v43 = (_OWORD *)(a2 + v41);
      long long v44 = v43[3];
      v42[2] = v43[2];
      v42[3] = v44;
      long long v45 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v45;
      uint64_t v46 = v40[7];
      long long v47 = (void *)(a1 + v46);
      uint64_t v48 = (uint64_t *)(a2 + v46);
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *long long v47 = v50;
      v47[1] = v49;
      *(void *)(a1 + v40[8]) = *(void *)(a2 + v40[8]);
      *(void *)(a1 + v40[9]) = *(void *)(a2 + v40[9]);
      *(void *)(a1 + v40[10]) = *(void *)(a2 + v40[10]);
      *(void *)(a1 + v40[11]) = *(void *)(a2 + v40[11]);
      *(void *)(a1 + v40[12]) = *(void *)(a2 + v40[12]);
      uint64_t v51 = v40[13];
      uint64_t v52 = *(void **)(a2 + v51);
      *(void *)(a1 + v51) = v52;
      *(unsigned char *)(a1 + v40[14]) = *(unsigned char *)(a2 + v40[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v53 = v52;
      break;
    case 3u:
    case 4u:
      uint64_t v54 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
      id v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v55[5]) = *(_DWORD *)(a2 + v55[5]);
      uint64_t v56 = v55[6];
      long long v57 = (_OWORD *)(a1 + v56);
      uint64_t v58 = (_OWORD *)(a2 + v56);
      long long v59 = v58[3];
      v57[2] = v58[2];
      v57[3] = v59;
      long long v60 = v58[1];
      *long long v57 = *v58;
      v57[1] = v60;
      uint64_t v61 = v55[7];
      long long v62 = (void *)(a1 + v61);
      uint64_t v63 = (uint64_t *)(a2 + v61);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      *long long v62 = v65;
      v62[1] = v64;
      *(void *)(a1 + v55[8]) = *(void *)(a2 + v55[8]);
      *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
      *(void *)(a1 + v55[10]) = *(void *)(a2 + v55[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v66 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(a1, a2, v66);
      uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v67[5]) = *(_DWORD *)(a2 + v67[5]);
      uint64_t v68 = v67[6];
      long long v69 = (_OWORD *)(a1 + v68);
      uint64_t v70 = (_OWORD *)(a2 + v68);
      long long v71 = v70[3];
      v69[2] = v70[2];
      v69[3] = v71;
      long long v72 = v70[1];
      *long long v69 = *v70;
      v69[1] = v72;
      uint64_t v73 = v67[7];
      long long v74 = (void *)(a1 + v73);
      uint64_t v75 = (uint64_t *)(a2 + v73);
      uint64_t v77 = *v75;
      uint64_t v76 = v75[1];
      *long long v74 = v77;
      v74[1] = v76;
      *(void *)(a1 + v67[8]) = *(void *)(a2 + v67[8]);
      *(void *)(a1 + v67[9]) = *(void *)(a2 + v67[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      uint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      _OWORD v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      _OWORD *v9 = *v10;
      v9[1] = v12;
      uint64_t v13 = v7[7];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)(a2 + v13);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      *uint64_t v14 = v17;
      v14[1] = v16;
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v88 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v89 = v88[5];
  uint64_t v90 = (uint64_t *)(a1 + v89);
  uint64_t v91 = (uint64_t *)(a2 + v89);
  uint64_t v92 = type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t *v90 = *v91;
      swift_bridgeObjectRetain();
      goto LABEL_52;
    case 2:
      uint64_t v270 = type metadata accessor for UUID();
      uint64_t v272 = (void **)(*(void *)(v270 - 8) + 16);
      __dsta = (void (*)(char *, char *, uint64_t))*v272;
      ((void (*)(uint64_t *, uint64_t *))*v272)(v90, v91);
      v280 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v96 = v280[5];
      unint64_t v97 = (char *)v90 + v96;
      uint64_t v98 = (char *)v91 + v96;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v268 = a3;
          __dsta(v97, v98, v270);
          uint64_t v110 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v97[v110[5]] = *(_DWORD *)&v98[v110[5]];
          uint64_t v111 = v110[6];
          uint64_t v112 = &v97[v111];
          uint64_t v113 = &v98[v111];
          long long v114 = *((_OWORD *)v113 + 3);
          *((_OWORD *)v112 + 2) = *((_OWORD *)v113 + 2);
          *((_OWORD *)v112 + 3) = v114;
          long long v115 = *((_OWORD *)v113 + 1);
          *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
          *((_OWORD *)v112 + 1) = v115;
          *(void *)&v97[v110[7]] = *(void *)&v98[v110[7]];
          *(void *)&v97[v110[8]] = *(void *)&v98[v110[8]];
          *(void *)&v97[v110[9]] = *(void *)&v98[v110[9]];
          v97[v110[10]] = v98[v110[10]];
          uint64_t v116 = v110[11];
          long long v117 = &v97[v116];
          long long v118 = &v98[v116];
          uint64_t v257 = *((void *)v118 + 1);
          *(void *)long long v117 = *(void *)v118;
          *((void *)v117 + 1) = v257;
          uint64_t v119 = v110[12];
          uint64_t v120 = &v97[v119];
          uint64_t v121 = &v98[v119];
          uint64_t v256 = *((void *)v121 + 1);
          *(void *)uint64_t v120 = *(void *)v121;
          *((void *)v120 + 1) = v256;
          uint64_t v122 = v110[13];
          uint64_t v260 = v110;
          uint64_t v262 = &v97[v122];
          uint64_t v265 = &v98[v122];
          uint64_t v123 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v254 = *(void *)(v123 - 8);
          uint64_t v255 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v255(v265, 1, v123))
          {
            uint64_t v124 = sub_10000F214(&qword_100524BD0);
            memcpy(v262, v265, *(void *)(*(void *)(v124 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v262, v265, v123);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v254 + 56))(v262, 0, 1, v123);
          }
          uint64_t v160 = v260[14];
          uint64_t v161 = &v97[v160];
          uint64_t v162 = (uint64_t *)&v98[v160];
          unint64_t v163 = v162[1];
          if (v163 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
          }
          else
          {
            uint64_t v263 = (uint64_t *)v161;
            uint64_t v267 = *v162;
            sub_100038528(*v162, v163);
            *uint64_t v263 = v267;
            v263[1] = v163;
          }
          uint64_t v164 = v260[15];
          uint64_t v165 = &v97[v164];
          uint64_t v166 = &v98[v164];
          if (*(void *)v166)
          {
            uint64_t v167 = *((void *)v166 + 1);
            uint64_t v168 = *((void *)v166 + 2);
            *(void *)uint64_t v165 = *(void *)v166;
            *((void *)v165 + 1) = v167;
            *((void *)v165 + 2) = v168;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
            *((void *)v165 + 2) = *((void *)v166 + 2);
          }
          a3 = v268;
          break;
        case 2u:
          __dsta(v97, v98, v270);
          uint64_t v125 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v97[v125[5]] = *(_DWORD *)&v98[v125[5]];
          uint64_t v126 = v125[6];
          uint64_t v127 = &v97[v126];
          uint64_t v128 = &v98[v126];
          long long v129 = *((_OWORD *)v128 + 3);
          *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
          *((_OWORD *)v127 + 3) = v129;
          long long v130 = *((_OWORD *)v128 + 1);
          *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
          *((_OWORD *)v127 + 1) = v130;
          uint64_t v131 = v125[7];
          long long v132 = &v97[v131];
          long long v133 = &v98[v131];
          uint64_t v135 = *(void *)v133;
          uint64_t v134 = *((void *)v133 + 1);
          *(void *)long long v132 = v135;
          *((void *)v132 + 1) = v134;
          *(void *)&v97[v125[8]] = *(void *)&v98[v125[8]];
          *(void *)&v97[v125[9]] = *(void *)&v98[v125[9]];
          *(void *)&v97[v125[10]] = *(void *)&v98[v125[10]];
          *(void *)&v97[v125[11]] = *(void *)&v98[v125[11]];
          *(void *)&v97[v125[12]] = *(void *)&v98[v125[12]];
          uint64_t v136 = v125[13];
          uint64_t v266 = *(void **)&v98[v136];
          *(void *)&v97[v136] = v266;
          v97[v125[14]] = v98[v125[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v137 = v266;
          break;
        case 3u:
        case 4u:
          __dsta(v97, v98, v270);
          uint64_t v138 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v97[v138[5]] = *(_DWORD *)&v98[v138[5]];
          uint64_t v139 = v138[6];
          long long v140 = &v97[v139];
          id v141 = &v98[v139];
          long long v142 = *((_OWORD *)v141 + 3);
          *((_OWORD *)v140 + 2) = *((_OWORD *)v141 + 2);
          *((_OWORD *)v140 + 3) = v142;
          long long v143 = *((_OWORD *)v141 + 1);
          *(_OWORD *)long long v140 = *(_OWORD *)v141;
          *((_OWORD *)v140 + 1) = v143;
          uint64_t v144 = v138[7];
          uint64_t v145 = &v97[v144];
          long long v146 = &v98[v144];
          uint64_t v148 = *(void *)v146;
          uint64_t v147 = *((void *)v146 + 1);
          *(void *)uint64_t v145 = v148;
          *((void *)v145 + 1) = v147;
          *(void *)&v97[v138[8]] = *(void *)&v98[v138[8]];
          *(void *)&v97[v138[9]] = *(void *)&v98[v138[9]];
          *(void *)&v97[v138[10]] = *(void *)&v98[v138[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          __dsta(v97, v98, v270);
          uint64_t v149 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v97[v149[5]] = *(_DWORD *)&v98[v149[5]];
          uint64_t v150 = v149[6];
          uint64_t v151 = &v97[v150];
          uint64_t v152 = &v98[v150];
          long long v153 = *((_OWORD *)v152 + 3);
          *((_OWORD *)v151 + 2) = *((_OWORD *)v152 + 2);
          *((_OWORD *)v151 + 3) = v153;
          long long v154 = *((_OWORD *)v152 + 1);
          *(_OWORD *)uint64_t v151 = *(_OWORD *)v152;
          *((_OWORD *)v151 + 1) = v154;
          uint64_t v155 = v149[7];
          uint64_t v156 = &v97[v155];
          long long v157 = &v98[v155];
          uint64_t v159 = *(void *)v157;
          uint64_t v158 = *((void *)v157 + 1);
          *(void *)uint64_t v156 = v159;
          *((void *)v156 + 1) = v158;
          *(void *)&v97[v149[8]] = *(void *)&v98[v149[8]];
          *(void *)&v97[v149[9]] = *(void *)&v98[v149[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          __dsta(v97, v98, v270);
          uint64_t v99 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v97[v99[5]] = *(_DWORD *)&v98[v99[5]];
          uint64_t v100 = v99[6];
          long long v101 = &v97[v100];
          long long v102 = &v98[v100];
          long long v103 = *((_OWORD *)v102 + 3);
          *((_OWORD *)v101 + 2) = *((_OWORD *)v102 + 2);
          *((_OWORD *)v101 + 3) = v103;
          long long v104 = *((_OWORD *)v102 + 1);
          *(_OWORD *)long long v101 = *(_OWORD *)v102;
          *((_OWORD *)v101 + 1) = v104;
          uint64_t v105 = v99[7];
          long long v106 = &v97[v105];
          long long v107 = &v98[v105];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          *(void *)long long v106 = v109;
          *((void *)v106 + 1) = v108;
          *(void *)&v97[v99[8]] = *(void *)&v98[v99[8]];
          *(void *)&v97[v99[9]] = *(void *)&v98[v99[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v169 = v280[6];
      uint64_t v170 = (char *)v90 + v169;
      long long v171 = (char *)v91 + v169;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v269 = a3;
          __dsta(v170, v171, v270);
          uint64_t v183 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v170[v183[5]] = *(_DWORD *)&v171[v183[5]];
          uint64_t v184 = v183[6];
          uint64_t v185 = &v170[v184];
          uint64_t v186 = &v171[v184];
          long long v187 = *((_OWORD *)v186 + 3);
          *((_OWORD *)v185 + 2) = *((_OWORD *)v186 + 2);
          *((_OWORD *)v185 + 3) = v187;
          long long v188 = *((_OWORD *)v186 + 1);
          *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
          *((_OWORD *)v185 + 1) = v188;
          *(void *)&v170[v183[7]] = *(void *)&v171[v183[7]];
          *(void *)&v170[v183[8]] = *(void *)&v171[v183[8]];
          *(void *)&v170[v183[9]] = *(void *)&v171[v183[9]];
          v170[v183[10]] = v171[v183[10]];
          uint64_t v189 = v183[11];
          uint64_t v190 = &v170[v189];
          uint64_t v191 = &v171[v189];
          uint64_t v264 = *((void *)v191 + 1);
          *(void *)uint64_t v190 = *(void *)v191;
          *((void *)v190 + 1) = v264;
          uint64_t v192 = v183[12];
          long long v193 = &v170[v192];
          uint64_t v194 = &v171[v192];
          uint64_t v261 = *((void *)v194 + 1);
          *(void *)long long v193 = *(void *)v194;
          *((void *)v193 + 1) = v261;
          uint64_t v195 = v183[13];
          v271 = v183;
          v273 = &v170[v195];
          __dstb = &v171[v195];
          uint64_t v196 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v258 = *(void *)(v196 - 8);
          uint64_t v259 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v258 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v259(__dstb, 1, v196))
          {
            uint64_t v197 = sub_10000F214(&qword_100524BD0);
            memcpy(v273, __dstb, *(void *)(*(void *)(v197 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v273, __dstb, v196);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v273, 0, 1, v196);
          }
          uint64_t v233 = v271[14];
          uint64_t v234 = &v170[v233];
          long long v235 = (uint64_t *)&v171[v233];
          unint64_t v236 = v235[1];
          if (v236 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
          }
          else
          {
            v274 = v234;
            __dstd = (void *)*v235;
            sub_100038528(*v235, v236);
            *(void *)v274 = __dstd;
            *((void *)v274 + 1) = v236;
          }
          uint64_t v237 = v271[15];
          uint64_t v238 = &v170[v237];
          uint64_t v239 = &v171[v237];
          if (*(void *)v239)
          {
            uint64_t v240 = *((void *)v239 + 1);
            uint64_t v241 = *((void *)v239 + 2);
            *(void *)uint64_t v238 = *(void *)v239;
            *((void *)v238 + 1) = v240;
            *((void *)v238 + 2) = v241;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v238 = *(_OWORD *)v239;
            *((void *)v238 + 2) = *((void *)v239 + 2);
          }
          a3 = v269;
          break;
        case 2u:
          __dsta(v170, v171, v270);
          long long v198 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v170[v198[5]] = *(_DWORD *)&v171[v198[5]];
          uint64_t v199 = v198[6];
          uint64_t v200 = &v170[v199];
          uint64_t v201 = &v171[v199];
          long long v202 = *((_OWORD *)v201 + 3);
          *((_OWORD *)v200 + 2) = *((_OWORD *)v201 + 2);
          *((_OWORD *)v200 + 3) = v202;
          long long v203 = *((_OWORD *)v201 + 1);
          *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
          *((_OWORD *)v200 + 1) = v203;
          uint64_t v204 = v198[7];
          id v205 = &v170[v204];
          uint64_t v206 = &v171[v204];
          uint64_t v208 = *(void *)v206;
          uint64_t v207 = *((void *)v206 + 1);
          *(void *)id v205 = v208;
          *((void *)v205 + 1) = v207;
          *(void *)&v170[v198[8]] = *(void *)&v171[v198[8]];
          *(void *)&v170[v198[9]] = *(void *)&v171[v198[9]];
          *(void *)&v170[v198[10]] = *(void *)&v171[v198[10]];
          *(void *)&v170[v198[11]] = *(void *)&v171[v198[11]];
          *(void *)&v170[v198[12]] = *(void *)&v171[v198[12]];
          uint64_t v209 = v198[13];
          __dstc = *(void **)&v171[v209];
          *(void *)&v170[v209] = __dstc;
          v170[v198[14]] = v171[v198[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v210 = __dstc;
          break;
        case 3u:
        case 4u:
          __dsta(v170, v171, v270);
          long long v211 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v170[v211[5]] = *(_DWORD *)&v171[v211[5]];
          uint64_t v212 = v211[6];
          uint64_t v213 = &v170[v212];
          uint64_t v214 = &v171[v212];
          long long v215 = *((_OWORD *)v214 + 3);
          *((_OWORD *)v213 + 2) = *((_OWORD *)v214 + 2);
          *((_OWORD *)v213 + 3) = v215;
          long long v216 = *((_OWORD *)v214 + 1);
          *(_OWORD *)uint64_t v213 = *(_OWORD *)v214;
          *((_OWORD *)v213 + 1) = v216;
          uint64_t v217 = v211[7];
          uint64_t v218 = &v170[v217];
          uint64_t v219 = &v171[v217];
          uint64_t v221 = *(void *)v219;
          uint64_t v220 = *((void *)v219 + 1);
          *(void *)uint64_t v218 = v221;
          *((void *)v218 + 1) = v220;
          *(void *)&v170[v211[8]] = *(void *)&v171[v211[8]];
          *(void *)&v170[v211[9]] = *(void *)&v171[v211[9]];
          *(void *)&v170[v211[10]] = *(void *)&v171[v211[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          __dsta(v170, v171, v270);
          long long v222 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v170[v222[5]] = *(_DWORD *)&v171[v222[5]];
          uint64_t v223 = v222[6];
          uint64_t v224 = &v170[v223];
          v225 = &v171[v223];
          long long v226 = *((_OWORD *)v225 + 3);
          *((_OWORD *)v224 + 2) = *((_OWORD *)v225 + 2);
          *((_OWORD *)v224 + 3) = v226;
          long long v227 = *((_OWORD *)v225 + 1);
          *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
          *((_OWORD *)v224 + 1) = v227;
          uint64_t v228 = v222[7];
          uint64_t v229 = &v170[v228];
          unint64_t v230 = &v171[v228];
          uint64_t v232 = *(void *)v230;
          uint64_t v231 = *((void *)v230 + 1);
          *(void *)uint64_t v229 = v232;
          *((void *)v229 + 1) = v231;
          *(void *)&v170[v222[8]] = *(void *)&v171[v222[8]];
          *(void *)&v170[v222[9]] = *(void *)&v171[v222[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          __dsta(v170, v171, v270);
          uint64_t v172 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v170[v172[5]] = *(_DWORD *)&v171[v172[5]];
          uint64_t v173 = v172[6];
          uint64_t v174 = &v170[v173];
          uint64_t v175 = &v171[v173];
          long long v176 = *((_OWORD *)v175 + 3);
          *((_OWORD *)v174 + 2) = *((_OWORD *)v175 + 2);
          *((_OWORD *)v174 + 3) = v176;
          long long v177 = *((_OWORD *)v175 + 1);
          *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
          *((_OWORD *)v174 + 1) = v177;
          uint64_t v178 = v172[7];
          uint64_t v179 = &v170[v178];
          uint64_t v180 = &v171[v178];
          uint64_t v182 = *(void *)v180;
          uint64_t v181 = *((void *)v180 + 1);
          *(void *)uint64_t v179 = v182;
          *((void *)v179 + 1) = v181;
          *(void *)&v170[v172[8]] = *(void *)&v171[v172[8]];
          *(void *)&v170[v172[9]] = *(void *)&v171[v172[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      *((unsigned char *)v90 + v280[7]) = *((unsigned char *)v91 + v280[7]);
      *(uint64_t *)((char *)v90 + v280[8]) = *(uint64_t *)((char *)v91 + v280[8]);
      *(_DWORD *)((char *)v90 + v280[9]) = *(_DWORD *)((char *)v91 + v280[9]);
      goto LABEL_52;
    case 0:
      uint64_t v94 = *v91;
      unint64_t v95 = v91[1];
      sub_100038528(*v91, v95);
      uint64_t *v90 = v94;
      v90[1] = v95;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      goto LABEL_53;
  }
  memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64));
LABEL_53:
  uint64_t v242 = v88[6];
  unint64_t v243 = (_OWORD *)(a1 + v242);
  uint64_t v244 = (_OWORD *)(a2 + v242);
  long long v245 = v244[1];
  *unint64_t v243 = *v244;
  v243[1] = v245;
  *(void *)(a1 + v88[7]) = *(void *)(a2 + v88[7]);
  uint64_t v246 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v246 + 20)) = *(void *)(a2 + *(int *)(v246 + 20));
  uint64_t v247 = *(int *)(a3 + 20);
  uint64_t v248 = a1 + v247;
  uint64_t v249 = a2 + v247;
  long long v250 = *(_OWORD *)(a2 + v247 + 24);
  *(_OWORD *)(a1 + v247 + 24) = v250;
  uint64_t v251 = v250;
  long long v252 = **(void (***)(uint64_t, uint64_t, uint64_t))(v250 - 8);
  swift_bridgeObjectRetain();
  v252(v248, v249, v251);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003BA31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
  {
    uint64_t v17 = (int *)type metadata accessor for DetectionRequest(0);
  }
  else
  {
    sub_1003B4A5C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v19[5]) = *(_DWORD *)(a2 + v19[5]);
        uint64_t v20 = v19[6];
        uint64_t v21 = (_OWORD *)(a1 + v20);
        uint64_t v22 = (_OWORD *)(a2 + v20);
        long long v24 = v22[2];
        long long v23 = v22[3];
        long long v25 = v22[1];
        _OWORD *v21 = *v22;
        v21[1] = v25;
        void v21[2] = v24;
        void v21[3] = v23;
        *(void *)(a1 + v19[7]) = *(void *)(a2 + v19[7]);
        *(void *)(a1 + v19[8]) = *(void *)(a2 + v19[8]);
        *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
        *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
        uint64_t v26 = v19[11];
        uint64_t v27 = (void *)(a1 + v26);
        uint64_t v28 = (void *)(a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v19[12];
        uint64_t v30 = (void *)(a1 + v29);
        uint64_t v31 = (void *)(a2 + v29);
        *uint64_t v30 = *v31;
        v30[1] = v31[1];
        uint64_t v32 = v19[13];
        __dst = (void *)(a1 + v32);
        uint64_t v33 = (const void *)(a2 + v32);
        uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36(v33, 1, v34))
        {
          uint64_t v37 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(__dst, v33, v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v74 = v19[14];
        uint64_t v75 = a1 + v74;
        uint64_t v76 = (uint64_t *)(a2 + v74);
        unint64_t v77 = v76[1];
        if (v77 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
        }
        else
        {
          uint64_t v78 = *v76;
          sub_100038528(*v76, v76[1]);
          *(void *)uint64_t v75 = v78;
          *(void *)(v75 + 8) = v77;
        }
        uint64_t v79 = v19[15];
        uint64_t v80 = (void *)(a1 + v79);
        unint64_t v81 = (void *)(a2 + v79);
        if (*v81)
        {
          *uint64_t v80 = *v81;
          uint64_t v82 = v81[2];
          v80[1] = v81[1];
          v80[2] = v82;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v83 = *(_OWORD *)v81;
          v80[2] = v81[2];
          *(_OWORD *)uint64_t v80 = v83;
        }
        break;
      case 2u:
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
        uint64_t v40 = v39[6];
        uint64_t v41 = (_OWORD *)(a1 + v40);
        uint64_t v42 = (_OWORD *)(a2 + v40);
        long long v44 = v42[2];
        long long v43 = v42[3];
        long long v45 = v42[1];
        _OWORD *v41 = *v42;
        v41[1] = v45;
        v41[2] = v44;
        v41[3] = v43;
        uint64_t v46 = v39[7];
        long long v47 = (void *)(a1 + v46);
        uint64_t v48 = (void *)(a2 + v46);
        *long long v47 = *v48;
        v47[1] = v48[1];
        *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
        *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
        *(void *)(a1 + v39[10]) = *(void *)(a2 + v39[10]);
        *(void *)(a1 + v39[11]) = *(void *)(a2 + v39[11]);
        *(void *)(a1 + v39[12]) = *(void *)(a2 + v39[12]);
        uint64_t v49 = v39[13];
        uint64_t v50 = *(void **)(a2 + v49);
        *(void *)(a1 + v49) = v50;
        *(unsigned char *)(a1 + v39[14]) = *(unsigned char *)(a2 + v39[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v51 = v50;
        break;
      case 3u:
      case 4u:
        uint64_t v52 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
        id v53 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v53[5]) = *(_DWORD *)(a2 + v53[5]);
        uint64_t v54 = v53[6];
        id v55 = (_OWORD *)(a1 + v54);
        uint64_t v56 = (_OWORD *)(a2 + v54);
        long long v58 = v56[2];
        long long v57 = v56[3];
        long long v59 = v56[1];
        *id v55 = *v56;
        v55[1] = v59;
        v55[2] = v58;
        v55[3] = v57;
        uint64_t v60 = v53[7];
        uint64_t v61 = (void *)(a1 + v60);
        long long v62 = (void *)(a2 + v60);
        *uint64_t v61 = *v62;
        v61[1] = v62[1];
        *(void *)(a1 + v53[8]) = *(void *)(a2 + v53[8]);
        *(void *)(a1 + v53[9]) = *(void *)(a2 + v53[9]);
        *(void *)(a1 + v53[10]) = *(void *)(a2 + v53[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v63 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(a1, a2, v63);
        uint64_t v64 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v64[5]) = *(_DWORD *)(a2 + v64[5]);
        uint64_t v65 = v64[6];
        uint64_t v66 = (_OWORD *)(a1 + v65);
        uint64_t v67 = (_OWORD *)(a2 + v65);
        long long v69 = v67[2];
        long long v68 = v67[3];
        long long v70 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v70;
        v66[2] = v69;
        v66[3] = v68;
        uint64_t v71 = v64[7];
        long long v72 = (void *)(a1 + v71);
        uint64_t v73 = (void *)(a2 + v71);
        *long long v72 = *v73;
        v72[1] = v73[1];
        *(void *)(a1 + v64[8]) = *(void *)(a2 + v64[8]);
        *(void *)(a1 + v64[9]) = *(void *)(a2 + v64[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v12 = v10[2];
        long long v11 = v10[3];
        long long v13 = v10[1];
        _OWORD *v9 = *v10;
        v9[1] = v13;
        _OWORD v9[2] = v12;
        v9[3] = v11;
        uint64_t v14 = v7[7];
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        void *v15 = *v16;
        v15[1] = v16[1];
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v84 = v17[5];
    uint64_t v85 = (uint64_t *)(a1 + v84);
    uint64_t v86 = (uint64_t *)(a2 + v84);
    sub_1003B4A5C(a1 + v84, type metadata accessor for DetectionRequest.Originator);
    uint64_t v87 = type metadata accessor for DetectionRequest.Originator(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t *v85 = *v86;
        swift_bridgeObjectRetain();
        goto LABEL_54;
      case 2:
        uint64_t v258 = a3;
        uint64_t v248 = type metadata accessor for UUID();
        __dstb = (void (**)(uint64_t *, uint64_t *))(*(void *)(v248 - 8) + 16);
        uint64_t v254 = *__dstb;
        (*__dstb)(v85, v86);
        uint64_t v91 = (int *)type metadata accessor for CVTrackSnapshot(0);
        uint64_t v92 = v91[5];
        long long v93 = (char *)v85 + v92;
        uint64_t v94 = (char *)v86 + v92;
        uint64_t v247 = v91;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            ((void (*)(char *, char *, uint64_t))v254)(v93, v94, v248);
            uint64_t v105 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v93[v105[5]] = *(_DWORD *)&v94[v105[5]];
            uint64_t v106 = v105[6];
            long long v107 = &v93[v106];
            uint64_t v108 = &v94[v106];
            long long v110 = *((_OWORD *)v108 + 2);
            long long v109 = *((_OWORD *)v108 + 3);
            long long v111 = *((_OWORD *)v108 + 1);
            *(_OWORD *)long long v107 = *(_OWORD *)v108;
            *((_OWORD *)v107 + 1) = v111;
            *((_OWORD *)v107 + 2) = v110;
            *((_OWORD *)v107 + 3) = v109;
            *(void *)&v93[v105[7]] = *(void *)&v94[v105[7]];
            *(void *)&v93[v105[8]] = *(void *)&v94[v105[8]];
            *(void *)&v93[v105[9]] = *(void *)&v94[v105[9]];
            v93[v105[10]] = v94[v105[10]];
            uint64_t v112 = v105[11];
            uint64_t v113 = &v93[v112];
            long long v114 = &v94[v112];
            *(void *)uint64_t v113 = *(void *)v114;
            *((void *)v113 + 1) = *((void *)v114 + 1);
            uint64_t v115 = v105[12];
            uint64_t v116 = &v93[v115];
            long long v117 = &v94[v115];
            *(void *)uint64_t v116 = *(void *)v117;
            *((void *)v116 + 1) = *((void *)v117 + 1);
            uint64_t v118 = v105[13];
            uint64_t v241 = v105;
            uint64_t v242 = &v93[v118];
            uint64_t v244 = &v94[v118];
            uint64_t v119 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v237 = *(void *)(v119 - 8);
            uint64_t v238 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v237 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v238(v244, 1, v119))
            {
              uint64_t v120 = sub_10000F214(&qword_100524BD0);
              memcpy(v242, v244, *(void *)(*(void *)(v120 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v237 + 16))(v242, v244, v119);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v237 + 56))(v242, 0, 1, v119);
            }
            uint64_t v153 = v241[14];
            long long v154 = &v93[v153];
            uint64_t v155 = (uint64_t *)&v94[v153];
            unint64_t v156 = v155[1];
            if (v156 >> 60 == 15)
            {
              *(_OWORD *)long long v154 = *(_OWORD *)v155;
            }
            else
            {
              unint64_t v243 = (uint64_t *)v154;
              uint64_t v246 = *v155;
              sub_100038528(*v155, v156);
              *unint64_t v243 = v246;
              v243[1] = v156;
            }
            uint64_t v157 = v241[15];
            uint64_t v158 = &v93[v157];
            uint64_t v159 = &v94[v157];
            if (*(void *)v159)
            {
              *(void *)uint64_t v158 = *(void *)v159;
              uint64_t v160 = *((void *)v159 + 2);
              *((void *)v158 + 1) = *((void *)v159 + 1);
              *((void *)v158 + 2) = v160;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v161 = *(_OWORD *)v159;
              *((void *)v158 + 2) = *((void *)v159 + 2);
              *(_OWORD *)uint64_t v158 = v161;
            }
            uint64_t v91 = v247;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))v254)(v93, v94, v248);
            uint64_t v121 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v93[v121[5]] = *(_DWORD *)&v94[v121[5]];
            uint64_t v122 = v121[6];
            uint64_t v123 = &v93[v122];
            uint64_t v124 = &v94[v122];
            long long v126 = *((_OWORD *)v124 + 2);
            long long v125 = *((_OWORD *)v124 + 3);
            long long v127 = *((_OWORD *)v124 + 1);
            *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
            *((_OWORD *)v123 + 1) = v127;
            *((_OWORD *)v123 + 2) = v126;
            *((_OWORD *)v123 + 3) = v125;
            uint64_t v128 = v121[7];
            long long v129 = &v93[v128];
            long long v130 = &v94[v128];
            *(void *)long long v129 = *(void *)v130;
            *((void *)v129 + 1) = *((void *)v130 + 1);
            *(void *)&v93[v121[8]] = *(void *)&v94[v121[8]];
            *(void *)&v93[v121[9]] = *(void *)&v94[v121[9]];
            *(void *)&v93[v121[10]] = *(void *)&v94[v121[10]];
            *(void *)&v93[v121[11]] = *(void *)&v94[v121[11]];
            *(void *)&v93[v121[12]] = *(void *)&v94[v121[12]];
            uint64_t v131 = v121[13];
            long long v245 = *(void **)&v94[v131];
            *(void *)&v93[v131] = v245;
            v93[v121[14]] = v94[v121[14]];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v132 = v245;
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))v254)(v93, v94, v248);
            long long v133 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v93[v133[5]] = *(_DWORD *)&v94[v133[5]];
            uint64_t v134 = v133[6];
            uint64_t v135 = &v93[v134];
            uint64_t v136 = &v94[v134];
            long long v138 = *((_OWORD *)v136 + 2);
            long long v137 = *((_OWORD *)v136 + 3);
            long long v139 = *((_OWORD *)v136 + 1);
            *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
            *((_OWORD *)v135 + 1) = v139;
            *((_OWORD *)v135 + 2) = v138;
            *((_OWORD *)v135 + 3) = v137;
            uint64_t v140 = v133[7];
            id v141 = &v93[v140];
            long long v142 = &v94[v140];
            *(void *)id v141 = *(void *)v142;
            *((void *)v141 + 1) = *((void *)v142 + 1);
            *(void *)&v93[v133[8]] = *(void *)&v94[v133[8]];
            *(void *)&v93[v133[9]] = *(void *)&v94[v133[9]];
            *(void *)&v93[v133[10]] = *(void *)&v94[v133[10]];
            swift_bridgeObjectRetain();
            swift_retain();
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))v254)(v93, v94, v248);
            long long v143 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v93[v143[5]] = *(_DWORD *)&v94[v143[5]];
            uint64_t v144 = v143[6];
            uint64_t v145 = &v93[v144];
            long long v146 = &v94[v144];
            long long v148 = *((_OWORD *)v146 + 2);
            long long v147 = *((_OWORD *)v146 + 3);
            long long v149 = *((_OWORD *)v146 + 1);
            *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
            *((_OWORD *)v145 + 1) = v149;
            *((_OWORD *)v145 + 2) = v148;
            *((_OWORD *)v145 + 3) = v147;
            uint64_t v150 = v143[7];
            uint64_t v151 = &v93[v150];
            uint64_t v152 = &v94[v150];
            *(void *)uint64_t v151 = *(void *)v152;
            *((void *)v151 + 1) = *((void *)v152 + 1);
            *(void *)&v93[v143[8]] = *(void *)&v94[v143[8]];
            *(void *)&v93[v143[9]] = *(void *)&v94[v143[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            ((void (*)(char *, char *, uint64_t))v254)(v93, v94, v248);
            unint64_t v95 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v93[v95[5]] = *(_DWORD *)&v94[v95[5]];
            uint64_t v96 = v95[6];
            unint64_t v97 = &v93[v96];
            uint64_t v98 = &v94[v96];
            long long v100 = *((_OWORD *)v98 + 2);
            long long v99 = *((_OWORD *)v98 + 3);
            long long v101 = *((_OWORD *)v98 + 1);
            *(_OWORD *)unint64_t v97 = *(_OWORD *)v98;
            *((_OWORD *)v97 + 1) = v101;
            *((_OWORD *)v97 + 2) = v100;
            *((_OWORD *)v97 + 3) = v99;
            uint64_t v102 = v95[7];
            long long v103 = &v93[v102];
            long long v104 = &v94[v102];
            *(void *)long long v103 = *(void *)v104;
            *((void *)v103 + 1) = *((void *)v104 + 1);
            *(void *)&v93[v95[8]] = *(void *)&v94[v95[8]];
            *(void *)&v93[v95[9]] = *(void *)&v94[v95[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v162 = v91[6];
        unint64_t v163 = (char *)v85 + v162;
        uint64_t v164 = (char *)v86 + v162;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            ((void (*)(char *, char *, uint64_t))v254)(v163, v164, v248);
            uint64_t v175 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v163[v175[5]] = *(_DWORD *)&v164[v175[5]];
            uint64_t v176 = v175[6];
            long long v177 = &v163[v176];
            uint64_t v178 = &v164[v176];
            long long v180 = *((_OWORD *)v178 + 2);
            long long v179 = *((_OWORD *)v178 + 3);
            long long v181 = *((_OWORD *)v178 + 1);
            *(_OWORD *)long long v177 = *(_OWORD *)v178;
            *((_OWORD *)v177 + 1) = v181;
            *((_OWORD *)v177 + 2) = v180;
            *((_OWORD *)v177 + 3) = v179;
            *(void *)&v163[v175[7]] = *(void *)&v164[v175[7]];
            *(void *)&v163[v175[8]] = *(void *)&v164[v175[8]];
            *(void *)&v163[v175[9]] = *(void *)&v164[v175[9]];
            v163[v175[10]] = v164[v175[10]];
            uint64_t v182 = v175[11];
            uint64_t v183 = &v163[v182];
            uint64_t v184 = &v164[v182];
            *(void *)uint64_t v183 = *(void *)v184;
            *((void *)v183 + 1) = *((void *)v184 + 1);
            uint64_t v185 = v175[12];
            uint64_t v186 = &v163[v185];
            long long v187 = &v164[v185];
            *(void *)uint64_t v186 = *(void *)v187;
            *((void *)v186 + 1) = *((void *)v187 + 1);
            uint64_t v188 = v175[13];
            uint64_t v249 = v175;
            __dsta = &v163[v188];
            uint64_t v255 = &v164[v188];
            uint64_t v189 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v239 = *(void *)(v189 - 8);
            uint64_t v240 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v240(v255, 1, v189))
            {
              uint64_t v190 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v255, *(void *)(*(void *)(v190 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v239 + 16))(__dsta, v255, v189);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(__dsta, 0, 1, v189);
            }
            uint64_t v223 = v249[14];
            uint64_t v224 = &v163[v223];
            v225 = (uint64_t *)&v164[v223];
            unint64_t v226 = v225[1];
            if (v226 >> 60 == 15)
            {
              *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
            }
            else
            {
              __dstc = (uint64_t *)v224;
              uint64_t v257 = *v225;
              sub_100038528(*v225, v226);
              uint64_t *__dstc = v257;
              __dstc[1] = v226;
            }
            uint64_t v227 = v249[15];
            uint64_t v228 = &v163[v227];
            uint64_t v229 = &v164[v227];
            if (*(void *)v229)
            {
              *(void *)uint64_t v228 = *(void *)v229;
              uint64_t v230 = *((void *)v229 + 2);
              *((void *)v228 + 1) = *((void *)v229 + 1);
              *((void *)v228 + 2) = v230;
              swift_bridgeObjectRetain();
              swift_retain();
            }
            else
            {
              long long v231 = *(_OWORD *)v229;
              *((void *)v228 + 2) = *((void *)v229 + 2);
              *(_OWORD *)uint64_t v228 = v231;
            }
            uint64_t v91 = v247;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))v254)(v163, v164, v248);
            uint64_t v191 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v163[v191[5]] = *(_DWORD *)&v164[v191[5]];
            uint64_t v192 = v191[6];
            long long v193 = &v163[v192];
            uint64_t v194 = &v164[v192];
            long long v196 = *((_OWORD *)v194 + 2);
            long long v195 = *((_OWORD *)v194 + 3);
            long long v197 = *((_OWORD *)v194 + 1);
            *(_OWORD *)long long v193 = *(_OWORD *)v194;
            *((_OWORD *)v193 + 1) = v197;
            *((_OWORD *)v193 + 2) = v196;
            *((_OWORD *)v193 + 3) = v195;
            uint64_t v198 = v191[7];
            uint64_t v199 = &v163[v198];
            uint64_t v200 = &v164[v198];
            *(void *)uint64_t v199 = *(void *)v200;
            *((void *)v199 + 1) = *((void *)v200 + 1);
            *(void *)&v163[v191[8]] = *(void *)&v164[v191[8]];
            *(void *)&v163[v191[9]] = *(void *)&v164[v191[9]];
            *(void *)&v163[v191[10]] = *(void *)&v164[v191[10]];
            *(void *)&v163[v191[11]] = *(void *)&v164[v191[11]];
            *(void *)&v163[v191[12]] = *(void *)&v164[v191[12]];
            uint64_t v201 = v191[13];
            uint64_t v256 = *(void **)&v164[v201];
            *(void *)&v163[v201] = v256;
            v163[v191[14]] = v164[v191[14]];
            swift_bridgeObjectRetain();
            uint64_t v91 = v247;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v202 = v256;
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))v254)(v163, v164, v248);
            long long v203 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v163[v203[5]] = *(_DWORD *)&v164[v203[5]];
            uint64_t v204 = v203[6];
            id v205 = &v163[v204];
            uint64_t v206 = &v164[v204];
            long long v208 = *((_OWORD *)v206 + 2);
            long long v207 = *((_OWORD *)v206 + 3);
            long long v209 = *((_OWORD *)v206 + 1);
            *(_OWORD *)id v205 = *(_OWORD *)v206;
            *((_OWORD *)v205 + 1) = v209;
            *((_OWORD *)v205 + 2) = v208;
            *((_OWORD *)v205 + 3) = v207;
            uint64_t v210 = v203[7];
            long long v211 = &v163[v210];
            uint64_t v212 = &v164[v210];
            *(void *)long long v211 = *(void *)v212;
            *((void *)v211 + 1) = *((void *)v212 + 1);
            *(void *)&v163[v203[8]] = *(void *)&v164[v203[8]];
            *(void *)&v163[v203[9]] = *(void *)&v164[v203[9]];
            *(void *)&v163[v203[10]] = *(void *)&v164[v203[10]];
            swift_bridgeObjectRetain();
            uint64_t v91 = v247;
            swift_retain();
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))v254)(v163, v164, v248);
            uint64_t v213 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v163[v213[5]] = *(_DWORD *)&v164[v213[5]];
            uint64_t v214 = v213[6];
            long long v215 = &v163[v214];
            long long v216 = &v164[v214];
            long long v218 = *((_OWORD *)v216 + 2);
            long long v217 = *((_OWORD *)v216 + 3);
            long long v219 = *((_OWORD *)v216 + 1);
            *(_OWORD *)long long v215 = *(_OWORD *)v216;
            *((_OWORD *)v215 + 1) = v219;
            *((_OWORD *)v215 + 2) = v218;
            *((_OWORD *)v215 + 3) = v217;
            uint64_t v220 = v213[7];
            uint64_t v221 = &v163[v220];
            long long v222 = &v164[v220];
            *(void *)uint64_t v221 = *(void *)v222;
            *((void *)v221 + 1) = *((void *)v222 + 1);
            *(void *)&v163[v213[8]] = *(void *)&v164[v213[8]];
            *(void *)&v163[v213[9]] = *(void *)&v164[v213[9]];
            swift_bridgeObjectRetain();
            break;
          default:
            ((void (*)(char *, char *, uint64_t))v254)(v163, v164, v248);
            uint64_t v165 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v163[v165[5]] = *(_DWORD *)&v164[v165[5]];
            uint64_t v166 = v165[6];
            uint64_t v167 = &v163[v166];
            uint64_t v168 = &v164[v166];
            long long v170 = *((_OWORD *)v168 + 2);
            long long v169 = *((_OWORD *)v168 + 3);
            long long v171 = *((_OWORD *)v168 + 1);
            *(_OWORD *)uint64_t v167 = *(_OWORD *)v168;
            *((_OWORD *)v167 + 1) = v171;
            *((_OWORD *)v167 + 2) = v170;
            *((_OWORD *)v167 + 3) = v169;
            uint64_t v172 = v165[7];
            uint64_t v173 = &v163[v172];
            uint64_t v174 = &v164[v172];
            *(void *)uint64_t v173 = *(void *)v174;
            *((void *)v173 + 1) = *((void *)v174 + 1);
            *(void *)&v163[v165[8]] = *(void *)&v164[v165[8]];
            *(void *)&v163[v165[9]] = *(void *)&v164[v165[9]];
            swift_bridgeObjectRetain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        a3 = v258;
        *((unsigned char *)v85 + v91[7]) = *((unsigned char *)v86 + v91[7]);
        *(uint64_t *)((char *)v85 + v91[8]) = *(uint64_t *)((char *)v86 + v91[8]);
        *(_DWORD *)((char *)v85 + v91[9]) = *(_DWORD *)((char *)v86 + v91[9]);
        goto LABEL_54;
      case 0:
        uint64_t v89 = *v86;
        unint64_t v90 = v86[1];
        sub_100038528(*v86, v90);
        uint64_t *v85 = v89;
        v85[1] = v90;
LABEL_54:
        swift_storeEnumTagMultiPayload();
        goto LABEL_55;
    }
    memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
  }
LABEL_55:
  uint64_t v232 = v17[6];
  uint64_t v233 = (void *)(a1 + v232);
  uint64_t v234 = (void *)(a2 + v232);
  *uint64_t v233 = *v234;
  v233[1] = v234[1];
  v233[2] = v234[2];
  v233[3] = v234[3];
  *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
  uint64_t v235 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v235 + 20)) = *(void *)(a2 + *(int *)(v235 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10000E558((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003BB908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v14[5]) = *(_DWORD *)(a2 + v14[5]);
      uint64_t v15 = v14[6];
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      long long v18 = v17[3];
      v16[2] = v17[2];
      v16[3] = v18;
      long long v19 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v19;
      *(void *)(a1 + v14[7]) = *(void *)(a2 + v14[7]);
      *(void *)(a1 + v14[8]) = *(void *)(a2 + v14[8]);
      *(void *)(a1 + v14[9]) = *(void *)(a2 + v14[9]);
      *(unsigned char *)(a1 + v14[10]) = *(unsigned char *)(a2 + v14[10]);
      *(_OWORD *)(a1 + v14[11]) = *(_OWORD *)(a2 + v14[11]);
      *(_OWORD *)(a1 + v14[12]) = *(_OWORD *)(a2 + v14[12]);
      uint64_t v20 = v14[13];
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = (const void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = sub_10000F214(&qword_100524BD0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_OWORD *)(a1 + v14[14]) = *(_OWORD *)(a2 + v14[14]);
      uint64_t v47 = v14[15];
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      *(void *)(v48 + 16) = *(void *)(v49 + 16);
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      break;
    case 2u:
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
      uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v27[5]) = *(_DWORD *)(a2 + v27[5]);
      uint64_t v28 = v27[6];
      uint64_t v29 = (_OWORD *)(a1 + v28);
      uint64_t v30 = (_OWORD *)(a2 + v28);
      long long v31 = v30[3];
      _OWORD v29[2] = v30[2];
      v29[3] = v31;
      long long v32 = v30[1];
      _OWORD *v29 = *v30;
      v29[1] = v32;
      *(_OWORD *)(a1 + v27[7]) = *(_OWORD *)(a2 + v27[7]);
      *(void *)(a1 + v27[8]) = *(void *)(a2 + v27[8]);
      *(void *)(a1 + v27[9]) = *(void *)(a2 + v27[9]);
      *(void *)(a1 + v27[10]) = *(void *)(a2 + v27[10]);
      *(void *)(a1 + v27[11]) = *(void *)(a2 + v27[11]);
      *(void *)(a1 + v27[12]) = *(void *)(a2 + v27[12]);
      *(void *)(a1 + v27[13]) = *(void *)(a2 + v27[13]);
      *(unsigned char *)(a1 + v27[14]) = *(unsigned char *)(a2 + v27[14]);
      break;
    case 3u:
    case 4u:
      uint64_t v33 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
      uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v34[5]) = *(_DWORD *)(a2 + v34[5]);
      uint64_t v35 = v34[6];
      uint64_t v36 = (_OWORD *)(a1 + v35);
      uint64_t v37 = (_OWORD *)(a2 + v35);
      long long v38 = v37[3];
      v36[2] = v37[2];
      v36[3] = v38;
      long long v39 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v39;
      *(_OWORD *)(a1 + v34[7]) = *(_OWORD *)(a2 + v34[7]);
      *(void *)(a1 + v34[8]) = *(void *)(a2 + v34[8]);
      *(void *)(a1 + v34[9]) = *(void *)(a2 + v34[9]);
      *(void *)(a1 + v34[10]) = *(void *)(a2 + v34[10]);
      break;
    case 5u:
      uint64_t v40 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
      uint64_t v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v41[5]) = *(_DWORD *)(a2 + v41[5]);
      uint64_t v42 = v41[6];
      long long v43 = (_OWORD *)(a1 + v42);
      long long v44 = (_OWORD *)(a2 + v42);
      long long v45 = v44[3];
      void v43[2] = v44[2];
      v43[3] = v45;
      long long v46 = v44[1];
      *long long v43 = *v44;
      v43[1] = v46;
      *(_OWORD *)(a1 + v41[7]) = *(_OWORD *)(a2 + v41[7]);
      *(void *)(a1 + v41[8]) = *(void *)(a2 + v41[8]);
      *(void *)(a1 + v41[9]) = *(void *)(a2 + v41[9]);
      break;
    default:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
      uint64_t v8 = v7[6];
      uint64_t v9 = (_OWORD *)(a1 + v8);
      uint64_t v10 = (_OWORD *)(a2 + v8);
      long long v11 = v10[3];
      _OWORD v9[2] = v10[2];
      v9[3] = v11;
      long long v12 = v10[1];
      _OWORD *v9 = *v10;
      v9[1] = v12;
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v50 = (int *)type metadata accessor for DetectionRequest(0);
  uint64_t v51 = v50[5];
  uint64_t v52 = (unsigned char *)(a1 + v51);
  id v53 = (unsigned char *)(a2 + v51);
  uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v55 = type metadata accessor for UUID();
    __dst = *(void **)(*(void *)(v55 - 8) + 32);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))__dst)(v52, v53, v55);
    unint64_t v156 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v56 = v156[5];
    long long v57 = &v52[v56];
    long long v58 = &v53[v56];
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v150 = v50;
        uint64_t v152 = a3;
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
        uint64_t v66 = v65[6];
        uint64_t v67 = &v57[v66];
        long long v68 = &v58[v66];
        long long v69 = *((_OWORD *)v68 + 3);
        *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
        *((_OWORD *)v67 + 3) = v69;
        long long v70 = *((_OWORD *)v68 + 1);
        *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
        *((_OWORD *)v67 + 1) = v70;
        *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
        *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
        *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
        v57[v65[10]] = v58[v65[10]];
        *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
        *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
        uint64_t v71 = v65[13];
        long long v149 = &v57[v71];
        long long v72 = &v58[v71];
        uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v148 = *(void *)(v73 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v72, 1, v73))
        {
          uint64_t v74 = sub_10000F214(&qword_100524BD0);
          memcpy(v149, v72, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v149, v72, v73);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v149, 0, 1, v73);
        }
        *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
        uint64_t v131 = v65[15];
        id v132 = &v57[v131];
        long long v133 = &v58[v131];
        *((void *)v132 + 2) = *((void *)v133 + 2);
        *(_OWORD *)id v132 = *(_OWORD *)v133;
        swift_storeEnumTagMultiPayload();
        a3 = v152;
        uint64_t v50 = v150;
        goto LABEL_20;
      case 2u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v75 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v57[v75[5]] = *(_DWORD *)&v58[v75[5]];
        uint64_t v76 = v75[6];
        unint64_t v77 = &v57[v76];
        uint64_t v78 = &v58[v76];
        long long v79 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v79;
        long long v80 = *((_OWORD *)v78 + 1);
        *(_OWORD *)unint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v80;
        *(_OWORD *)&v57[v75[7]] = *(_OWORD *)&v58[v75[7]];
        *(void *)&v57[v75[8]] = *(void *)&v58[v75[8]];
        *(void *)&v57[v75[9]] = *(void *)&v58[v75[9]];
        *(void *)&v57[v75[10]] = *(void *)&v58[v75[10]];
        *(void *)&v57[v75[11]] = *(void *)&v58[v75[11]];
        *(void *)&v57[v75[12]] = *(void *)&v58[v75[12]];
        *(void *)&v57[v75[13]] = *(void *)&v58[v75[13]];
        v57[v75[14]] = v58[v75[14]];
        goto LABEL_19;
      case 3u:
      case 4u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        unint64_t v81 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v57[v81[5]] = *(_DWORD *)&v58[v81[5]];
        uint64_t v82 = v81[6];
        long long v83 = &v57[v82];
        uint64_t v84 = &v58[v82];
        long long v85 = *((_OWORD *)v84 + 3);
        *((_OWORD *)v83 + 2) = *((_OWORD *)v84 + 2);
        *((_OWORD *)v83 + 3) = v85;
        long long v86 = *((_OWORD *)v84 + 1);
        *(_OWORD *)long long v83 = *(_OWORD *)v84;
        *((_OWORD *)v83 + 1) = v86;
        *(_OWORD *)&v57[v81[7]] = *(_OWORD *)&v58[v81[7]];
        *(void *)&v57[v81[8]] = *(void *)&v58[v81[8]];
        *(void *)&v57[v81[9]] = *(void *)&v58[v81[9]];
        *(void *)&v57[v81[10]] = *(void *)&v58[v81[10]];
        goto LABEL_19;
      case 5u:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        uint64_t v87 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v57[v87[5]] = *(_DWORD *)&v58[v87[5]];
        uint64_t v88 = v87[6];
        uint64_t v89 = &v57[v88];
        unint64_t v90 = &v58[v88];
        long long v91 = *((_OWORD *)v90 + 3);
        *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
        *((_OWORD *)v89 + 3) = v91;
        long long v92 = *((_OWORD *)v90 + 1);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        *((_OWORD *)v89 + 1) = v92;
        *(_OWORD *)&v57[v87[7]] = *(_OWORD *)&v58[v87[7]];
        *(void *)&v57[v87[8]] = *(void *)&v58[v87[8]];
        *(void *)&v57[v87[9]] = *(void *)&v58[v87[9]];
        goto LABEL_19;
      default:
        ((void (*)(char *, char *, uint64_t))__dst)(v57, v58, v55);
        long long v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
        uint64_t v60 = v59[6];
        uint64_t v61 = &v57[v60];
        long long v62 = &v58[v60];
        long long v63 = *((_OWORD *)v62 + 3);
        *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
        *((_OWORD *)v61 + 3) = v63;
        long long v64 = *((_OWORD *)v62 + 1);
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        *((_OWORD *)v61 + 1) = v64;
        *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
        *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
        *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_19:
        swift_storeEnumTagMultiPayload();
LABEL_20:
        uint64_t v93 = v156[6];
        uint64_t v94 = &v52[v93];
        unint64_t v95 = &v53[v93];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v151 = v50;
            uint64_t v153 = a3;
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v94[v102[5]] = *(_DWORD *)&v95[v102[5]];
            uint64_t v103 = v102[6];
            long long v104 = &v94[v103];
            uint64_t v105 = &v95[v103];
            long long v106 = *((_OWORD *)v105 + 3);
            *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
            *((_OWORD *)v104 + 3) = v106;
            long long v107 = *((_OWORD *)v105 + 1);
            *(_OWORD *)long long v104 = *(_OWORD *)v105;
            *((_OWORD *)v104 + 1) = v107;
            *(void *)&v94[v102[7]] = *(void *)&v95[v102[7]];
            *(void *)&v94[v102[8]] = *(void *)&v95[v102[8]];
            *(void *)&v94[v102[9]] = *(void *)&v95[v102[9]];
            v94[v102[10]] = v95[v102[10]];
            *(_OWORD *)&v94[v102[11]] = *(_OWORD *)&v95[v102[11]];
            *(_OWORD *)&v94[v102[12]] = *(_OWORD *)&v95[v102[12]];
            uint64_t v108 = v102[13];
            __dsta = &v94[v108];
            long long v109 = &v95[v108];
            uint64_t v110 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v111 = *(void *)(v110 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
            {
              uint64_t v112 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v109, *(void *)(*(void *)(v112 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v111 + 32))(__dsta, v109, v110);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(__dsta, 0, 1, v110);
            }
            a3 = v153;
            uint64_t v50 = v151;
            *(_OWORD *)&v94[v102[14]] = *(_OWORD *)&v95[v102[14]];
            uint64_t v134 = v102[15];
            uint64_t v135 = &v94[v134];
            uint64_t v136 = &v95[v134];
            *((void *)v135 + 2) = *((void *)v136 + 2);
            *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
            break;
          case 2u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v113 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v94[v113[5]] = *(_DWORD *)&v95[v113[5]];
            uint64_t v114 = v113[6];
            uint64_t v115 = &v94[v114];
            uint64_t v116 = &v95[v114];
            long long v117 = *((_OWORD *)v116 + 3);
            *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
            *((_OWORD *)v115 + 3) = v117;
            long long v118 = *((_OWORD *)v116 + 1);
            *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
            *((_OWORD *)v115 + 1) = v118;
            *(_OWORD *)&v94[v113[7]] = *(_OWORD *)&v95[v113[7]];
            *(void *)&v94[v113[8]] = *(void *)&v95[v113[8]];
            *(void *)&v94[v113[9]] = *(void *)&v95[v113[9]];
            *(void *)&v94[v113[10]] = *(void *)&v95[v113[10]];
            *(void *)&v94[v113[11]] = *(void *)&v95[v113[11]];
            *(void *)&v94[v113[12]] = *(void *)&v95[v113[12]];
            *(void *)&v94[v113[13]] = *(void *)&v95[v113[13]];
            v94[v113[14]] = v95[v113[14]];
            break;
          case 3u:
          case 4u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v119 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v94[v119[5]] = *(_DWORD *)&v95[v119[5]];
            uint64_t v120 = v119[6];
            uint64_t v121 = &v94[v120];
            uint64_t v122 = &v95[v120];
            long long v123 = *((_OWORD *)v122 + 3);
            *((_OWORD *)v121 + 2) = *((_OWORD *)v122 + 2);
            *((_OWORD *)v121 + 3) = v123;
            long long v124 = *((_OWORD *)v122 + 1);
            *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
            *((_OWORD *)v121 + 1) = v124;
            *(_OWORD *)&v94[v119[7]] = *(_OWORD *)&v95[v119[7]];
            *(void *)&v94[v119[8]] = *(void *)&v95[v119[8]];
            *(void *)&v94[v119[9]] = *(void *)&v95[v119[9]];
            *(void *)&v94[v119[10]] = *(void *)&v95[v119[10]];
            break;
          case 5u:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            long long v125 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v94[v125[5]] = *(_DWORD *)&v95[v125[5]];
            uint64_t v126 = v125[6];
            long long v127 = &v94[v126];
            uint64_t v128 = &v95[v126];
            long long v129 = *((_OWORD *)v128 + 3);
            *((_OWORD *)v127 + 2) = *((_OWORD *)v128 + 2);
            *((_OWORD *)v127 + 3) = v129;
            long long v130 = *((_OWORD *)v128 + 1);
            *(_OWORD *)long long v127 = *(_OWORD *)v128;
            *((_OWORD *)v127 + 1) = v130;
            *(_OWORD *)&v94[v125[7]] = *(_OWORD *)&v95[v125[7]];
            *(void *)&v94[v125[8]] = *(void *)&v95[v125[8]];
            *(void *)&v94[v125[9]] = *(void *)&v95[v125[9]];
            break;
          default:
            ((void (*)(char *, char *, uint64_t))__dst)(v94, v95, v55);
            uint64_t v96 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v94[v96[5]] = *(_DWORD *)&v95[v96[5]];
            uint64_t v97 = v96[6];
            uint64_t v98 = &v94[v97];
            long long v99 = &v95[v97];
            long long v100 = *((_OWORD *)v99 + 3);
            *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
            *((_OWORD *)v98 + 3) = v100;
            long long v101 = *((_OWORD *)v99 + 1);
            *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
            *((_OWORD *)v98 + 1) = v101;
            *(_OWORD *)&v94[v96[7]] = *(_OWORD *)&v95[v96[7]];
            *(void *)&v94[v96[8]] = *(void *)&v95[v96[8]];
            *(void *)&v94[v96[9]] = *(void *)&v95[v96[9]];
            break;
        }
        swift_storeEnumTagMultiPayload();
        v52[v156[7]] = v53[v156[7]];
        *(void *)&v52[v156[8]] = *(void *)&v53[v156[8]];
        *(_DWORD *)&v52[v156[9]] = *(_DWORD *)&v53[v156[9]];
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  else
  {
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  uint64_t v137 = v50[6];
  long long v138 = (_OWORD *)(a1 + v137);
  long long v139 = (_OWORD *)(a2 + v137);
  long long v140 = v139[1];
  *long long v138 = *v139;
  v138[1] = v140;
  *(void *)(a1 + v50[7]) = *(void *)(a2 + v50[7]);
  uint64_t v141 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v141 + 20)) = *(void *)(a2 + *(int *)(v141 + 20));
  uint64_t v142 = *(int *)(a3 + 20);
  uint64_t v143 = *(int *)(a3 + 24);
  uint64_t v144 = a1 + v142;
  uint64_t v145 = a2 + v142;
  *(void *)(v144 + 32) = *(void *)(v145 + 32);
  long long v146 = *(_OWORD *)(v145 + 16);
  *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
  *(_OWORD *)(v144 + 16) = v146;
  *(void *)(a1 + v143) = *(void *)(a2 + v143);
  return a1;
}

uint64_t sub_1003BCA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
  {
    uint64_t v13 = (int *)type metadata accessor for DetectionRequest(0);
  }
  else
  {
    sub_1003B4A5C(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v15[5]) = *(_DWORD *)(a2 + v15[5]);
        uint64_t v16 = v15[6];
        uint64_t v17 = (_OWORD *)(a1 + v16);
        long long v18 = (_OWORD *)(a2 + v16);
        long long v19 = v18[3];
        void v17[2] = v18[2];
        v17[3] = v19;
        long long v20 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v20;
        *(void *)(a1 + v15[7]) = *(void *)(a2 + v15[7]);
        *(void *)(a1 + v15[8]) = *(void *)(a2 + v15[8]);
        *(void *)(a1 + v15[9]) = *(void *)(a2 + v15[9]);
        *(unsigned char *)(a1 + v15[10]) = *(unsigned char *)(a2 + v15[10]);
        *(_OWORD *)(a1 + v15[11]) = *(_OWORD *)(a2 + v15[11]);
        *(_OWORD *)(a1 + v15[12]) = *(_OWORD *)(a2 + v15[12]);
        uint64_t v21 = v15[13];
        uint64_t v22 = (void *)(a1 + v21);
        uint64_t v23 = (const void *)(a2 + v21);
        uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v25 = *(void *)(v24 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        {
          uint64_t v26 = sub_10000F214(&qword_100524BD0);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        *(_OWORD *)(a1 + v15[14]) = *(_OWORD *)(a2 + v15[14]);
        uint64_t v48 = v15[15];
        uint64_t v49 = a1 + v48;
        uint64_t v50 = a2 + v48;
        *(void *)(v49 + 16) = *(void *)(v50 + 16);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        break;
      case 2u:
        uint64_t v27 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t v28 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v28[5]) = *(_DWORD *)(a2 + v28[5]);
        uint64_t v29 = v28[6];
        uint64_t v30 = (_OWORD *)(a1 + v29);
        long long v31 = (_OWORD *)(a2 + v29);
        long long v32 = v31[3];
        void v30[2] = v31[2];
        v30[3] = v32;
        long long v33 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v33;
        *(_OWORD *)(a1 + v28[7]) = *(_OWORD *)(a2 + v28[7]);
        *(void *)(a1 + v28[8]) = *(void *)(a2 + v28[8]);
        *(void *)(a1 + v28[9]) = *(void *)(a2 + v28[9]);
        *(void *)(a1 + v28[10]) = *(void *)(a2 + v28[10]);
        *(void *)(a1 + v28[11]) = *(void *)(a2 + v28[11]);
        *(void *)(a1 + v28[12]) = *(void *)(a2 + v28[12]);
        *(void *)(a1 + v28[13]) = *(void *)(a2 + v28[13]);
        *(unsigned char *)(a1 + v28[14]) = *(unsigned char *)(a2 + v28[14]);
        break;
      case 3u:
      case 4u:
        uint64_t v34 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
        uint64_t v35 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v35[5]) = *(_DWORD *)(a2 + v35[5]);
        uint64_t v36 = v35[6];
        uint64_t v37 = (_OWORD *)(a1 + v36);
        long long v38 = (_OWORD *)(a2 + v36);
        long long v39 = v38[3];
        v37[2] = v38[2];
        void v37[3] = v39;
        long long v40 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v40;
        *(_OWORD *)(a1 + v35[7]) = *(_OWORD *)(a2 + v35[7]);
        *(void *)(a1 + v35[8]) = *(void *)(a2 + v35[8]);
        *(void *)(a1 + v35[9]) = *(void *)(a2 + v35[9]);
        *(void *)(a1 + v35[10]) = *(void *)(a2 + v35[10]);
        break;
      case 5u:
        uint64_t v41 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v42[5]) = *(_DWORD *)(a2 + v42[5]);
        uint64_t v43 = v42[6];
        long long v44 = (_OWORD *)(a1 + v43);
        long long v45 = (_OWORD *)(a2 + v43);
        long long v46 = v45[3];
        v44[2] = v45[2];
        v44[3] = v46;
        long long v47 = v45[1];
        *long long v44 = *v45;
        v44[1] = v47;
        *(_OWORD *)(a1 + v42[7]) = *(_OWORD *)(a2 + v42[7]);
        *(void *)(a1 + v42[8]) = *(void *)(a2 + v42[8]);
        *(void *)(a1 + v42[9]) = *(void *)(a2 + v42[9]);
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)(a1 + v8);
        uint64_t v10 = (_OWORD *)(a2 + v8);
        long long v11 = v10[3];
        _OWORD v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        _OWORD *v9 = *v10;
        v9[1] = v12;
        *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
        *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
        *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = (int *)type metadata accessor for DetectionRequest(0);
    uint64_t v51 = v13[5];
    uint64_t v52 = (char *)(a1 + v51);
    id v53 = (char *)(a2 + v51);
    sub_1003B4A5C(a1 + v51, type metadata accessor for DetectionRequest.Originator);
    uint64_t v54 = type metadata accessor for DetectionRequest.Originator(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v55 = type metadata accessor for UUID();
      long long v154 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32);
      v154(v52, v53, v55);
      unint64_t v156 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v56 = v156[5];
      long long v57 = &v52[v56];
      long long v58 = &v53[v56];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v152 = a3;
          v154(v57, v58, v55);
          uint64_t v65 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v57[v65[5]] = *(_DWORD *)&v58[v65[5]];
          uint64_t v66 = v65[6];
          uint64_t v67 = &v57[v66];
          long long v68 = &v58[v66];
          long long v69 = *((_OWORD *)v68 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
          *((_OWORD *)v67 + 3) = v69;
          long long v70 = *((_OWORD *)v68 + 1);
          *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
          *((_OWORD *)v67 + 1) = v70;
          *(void *)&v57[v65[7]] = *(void *)&v58[v65[7]];
          *(void *)&v57[v65[8]] = *(void *)&v58[v65[8]];
          *(void *)&v57[v65[9]] = *(void *)&v58[v65[9]];
          v57[v65[10]] = v58[v65[10]];
          *(_OWORD *)&v57[v65[11]] = *(_OWORD *)&v58[v65[11]];
          *(_OWORD *)&v57[v65[12]] = *(_OWORD *)&v58[v65[12]];
          uint64_t v71 = v65[13];
          uint64_t v150 = &v57[v71];
          long long v72 = &v58[v71];
          uint64_t v73 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v148 = *(void *)(v73 - 8);
          long long v149 = v72;
          uint64_t v74 = v72;
          uint64_t v75 = v73;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v74, 1, v73))
          {
            uint64_t v76 = sub_10000F214(&qword_100524BD0);
            memcpy(v150, v149, *(void *)(*(void *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v150, v149, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v150, 0, 1, v75);
          }
          *(_OWORD *)&v57[v65[14]] = *(_OWORD *)&v58[v65[14]];
          uint64_t v132 = v65[15];
          long long v133 = &v57[v132];
          uint64_t v134 = &v58[v132];
          *((void *)v133 + 2) = *((void *)v134 + 2);
          *(_OWORD *)long long v133 = *(_OWORD *)v134;
          swift_storeEnumTagMultiPayload();
          a3 = v152;
          goto LABEL_22;
        case 2u:
          v154(v57, v58, v55);
          unint64_t v77 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v57[v77[5]] = *(_DWORD *)&v58[v77[5]];
          uint64_t v78 = v77[6];
          long long v79 = &v57[v78];
          long long v80 = &v58[v78];
          long long v81 = *((_OWORD *)v80 + 3);
          *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
          *((_OWORD *)v79 + 3) = v81;
          long long v82 = *((_OWORD *)v80 + 1);
          *(_OWORD *)long long v79 = *(_OWORD *)v80;
          *((_OWORD *)v79 + 1) = v82;
          *(_OWORD *)&v57[v77[7]] = *(_OWORD *)&v58[v77[7]];
          *(void *)&v57[v77[8]] = *(void *)&v58[v77[8]];
          *(void *)&v57[v77[9]] = *(void *)&v58[v77[9]];
          *(void *)&v57[v77[10]] = *(void *)&v58[v77[10]];
          *(void *)&v57[v77[11]] = *(void *)&v58[v77[11]];
          *(void *)&v57[v77[12]] = *(void *)&v58[v77[12]];
          *(void *)&v57[v77[13]] = *(void *)&v58[v77[13]];
          v57[v77[14]] = v58[v77[14]];
          goto LABEL_21;
        case 3u:
        case 4u:
          v154(v57, v58, v55);
          long long v83 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v57[v83[5]] = *(_DWORD *)&v58[v83[5]];
          uint64_t v84 = v83[6];
          long long v85 = &v57[v84];
          long long v86 = &v58[v84];
          long long v87 = *((_OWORD *)v86 + 3);
          *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
          *((_OWORD *)v85 + 3) = v87;
          long long v88 = *((_OWORD *)v86 + 1);
          *(_OWORD *)long long v85 = *(_OWORD *)v86;
          *((_OWORD *)v85 + 1) = v88;
          *(_OWORD *)&v57[v83[7]] = *(_OWORD *)&v58[v83[7]];
          *(void *)&v57[v83[8]] = *(void *)&v58[v83[8]];
          *(void *)&v57[v83[9]] = *(void *)&v58[v83[9]];
          *(void *)&v57[v83[10]] = *(void *)&v58[v83[10]];
          goto LABEL_21;
        case 5u:
          v154(v57, v58, v55);
          uint64_t v89 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v57[v89[5]] = *(_DWORD *)&v58[v89[5]];
          uint64_t v90 = v89[6];
          long long v91 = &v57[v90];
          long long v92 = &v58[v90];
          long long v93 = *((_OWORD *)v92 + 3);
          *((_OWORD *)v91 + 2) = *((_OWORD *)v92 + 2);
          *((_OWORD *)v91 + 3) = v93;
          long long v94 = *((_OWORD *)v92 + 1);
          *(_OWORD *)long long v91 = *(_OWORD *)v92;
          *((_OWORD *)v91 + 1) = v94;
          *(_OWORD *)&v57[v89[7]] = *(_OWORD *)&v58[v89[7]];
          *(void *)&v57[v89[8]] = *(void *)&v58[v89[8]];
          *(void *)&v57[v89[9]] = *(void *)&v58[v89[9]];
          goto LABEL_21;
        default:
          v154(v57, v58, v55);
          long long v59 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v57[v59[5]] = *(_DWORD *)&v58[v59[5]];
          uint64_t v60 = v59[6];
          uint64_t v61 = &v57[v60];
          long long v62 = &v58[v60];
          long long v63 = *((_OWORD *)v62 + 3);
          *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
          *((_OWORD *)v61 + 3) = v63;
          long long v64 = *((_OWORD *)v62 + 1);
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *((_OWORD *)v61 + 1) = v64;
          *(_OWORD *)&v57[v59[7]] = *(_OWORD *)&v58[v59[7]];
          *(void *)&v57[v59[8]] = *(void *)&v58[v59[8]];
          *(void *)&v57[v59[9]] = *(void *)&v58[v59[9]];
LABEL_21:
          swift_storeEnumTagMultiPayload();
LABEL_22:
          uint64_t v95 = v156[6];
          uint64_t v96 = &v52[v95];
          uint64_t v97 = &v53[v95];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v153 = a3;
              v154(v96, v97, v55);
              long long v104 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v96[v104[5]] = *(_DWORD *)&v97[v104[5]];
              uint64_t v105 = v104[6];
              long long v106 = &v96[v105];
              long long v107 = &v97[v105];
              long long v108 = *((_OWORD *)v107 + 3);
              *((_OWORD *)v106 + 2) = *((_OWORD *)v107 + 2);
              *((_OWORD *)v106 + 3) = v108;
              long long v109 = *((_OWORD *)v107 + 1);
              *(_OWORD *)long long v106 = *(_OWORD *)v107;
              *((_OWORD *)v106 + 1) = v109;
              *(void *)&v96[v104[7]] = *(void *)&v97[v104[7]];
              *(void *)&v96[v104[8]] = *(void *)&v97[v104[8]];
              *(void *)&v96[v104[9]] = *(void *)&v97[v104[9]];
              v96[v104[10]] = v97[v104[10]];
              *(_OWORD *)&v96[v104[11]] = *(_OWORD *)&v97[v104[11]];
              *(_OWORD *)&v96[v104[12]] = *(_OWORD *)&v97[v104[12]];
              uint64_t v110 = v104[13];
              uint64_t v155 = &v96[v110];
              uint64_t v111 = &v97[v110];
              uint64_t v112 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v151 = *(void *)(v112 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v111, 1, v112))
              {
                uint64_t v113 = sub_10000F214(&qword_100524BD0);
                memcpy(v155, v111, *(void *)(*(void *)(v113 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v155, v111, v112);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v155, 0, 1, v112);
              }
              a3 = v153;
              *(_OWORD *)&v96[v104[14]] = *(_OWORD *)&v97[v104[14]];
              uint64_t v135 = v104[15];
              uint64_t v136 = &v96[v135];
              uint64_t v137 = &v97[v135];
              *((void *)v136 + 2) = *((void *)v137 + 2);
              *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
              break;
            case 2u:
              v154(v96, v97, v55);
              uint64_t v114 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v96[v114[5]] = *(_DWORD *)&v97[v114[5]];
              uint64_t v115 = v114[6];
              uint64_t v116 = &v96[v115];
              long long v117 = &v97[v115];
              long long v118 = *((_OWORD *)v117 + 3);
              *((_OWORD *)v116 + 2) = *((_OWORD *)v117 + 2);
              *((_OWORD *)v116 + 3) = v118;
              long long v119 = *((_OWORD *)v117 + 1);
              *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
              *((_OWORD *)v116 + 1) = v119;
              *(_OWORD *)&v96[v114[7]] = *(_OWORD *)&v97[v114[7]];
              *(void *)&v96[v114[8]] = *(void *)&v97[v114[8]];
              *(void *)&v96[v114[9]] = *(void *)&v97[v114[9]];
              *(void *)&v96[v114[10]] = *(void *)&v97[v114[10]];
              *(void *)&v96[v114[11]] = *(void *)&v97[v114[11]];
              *(void *)&v96[v114[12]] = *(void *)&v97[v114[12]];
              *(void *)&v96[v114[13]] = *(void *)&v97[v114[13]];
              v96[v114[14]] = v97[v114[14]];
              break;
            case 3u:
            case 4u:
              v154(v96, v97, v55);
              uint64_t v120 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v96[v120[5]] = *(_DWORD *)&v97[v120[5]];
              uint64_t v121 = v120[6];
              uint64_t v122 = &v96[v121];
              long long v123 = &v97[v121];
              long long v124 = *((_OWORD *)v123 + 3);
              *((_OWORD *)v122 + 2) = *((_OWORD *)v123 + 2);
              *((_OWORD *)v122 + 3) = v124;
              long long v125 = *((_OWORD *)v123 + 1);
              *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
              *((_OWORD *)v122 + 1) = v125;
              *(_OWORD *)&v96[v120[7]] = *(_OWORD *)&v97[v120[7]];
              *(void *)&v96[v120[8]] = *(void *)&v97[v120[8]];
              *(void *)&v96[v120[9]] = *(void *)&v97[v120[9]];
              *(void *)&v96[v120[10]] = *(void *)&v97[v120[10]];
              break;
            case 5u:
              v154(v96, v97, v55);
              uint64_t v126 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v96[v126[5]] = *(_DWORD *)&v97[v126[5]];
              uint64_t v127 = v126[6];
              uint64_t v128 = &v96[v127];
              long long v129 = &v97[v127];
              long long v130 = *((_OWORD *)v129 + 3);
              *((_OWORD *)v128 + 2) = *((_OWORD *)v129 + 2);
              *((_OWORD *)v128 + 3) = v130;
              long long v131 = *((_OWORD *)v129 + 1);
              *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
              *((_OWORD *)v128 + 1) = v131;
              *(_OWORD *)&v96[v126[7]] = *(_OWORD *)&v97[v126[7]];
              *(void *)&v96[v126[8]] = *(void *)&v97[v126[8]];
              *(void *)&v96[v126[9]] = *(void *)&v97[v126[9]];
              break;
            default:
              v154(v96, v97, v55);
              uint64_t v98 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v96[v98[5]] = *(_DWORD *)&v97[v98[5]];
              uint64_t v99 = v98[6];
              long long v100 = &v96[v99];
              long long v101 = &v97[v99];
              long long v102 = *((_OWORD *)v101 + 3);
              *((_OWORD *)v100 + 2) = *((_OWORD *)v101 + 2);
              *((_OWORD *)v100 + 3) = v102;
              long long v103 = *((_OWORD *)v101 + 1);
              *(_OWORD *)long long v100 = *(_OWORD *)v101;
              *((_OWORD *)v100 + 1) = v103;
              *(_OWORD *)&v96[v98[7]] = *(_OWORD *)&v97[v98[7]];
              *(void *)&v96[v98[8]] = *(void *)&v97[v98[8]];
              *(void *)&v96[v98[9]] = *(void *)&v97[v98[9]];
              break;
          }
          swift_storeEnumTagMultiPayload();
          v52[v156[7]] = v53[v156[7]];
          *(void *)&v52[v156[8]] = *(void *)&v53[v156[8]];
          *(_DWORD *)&v52[v156[9]] = *(_DWORD *)&v53[v156[9]];
          swift_storeEnumTagMultiPayload();
          break;
      }
    }
    else
    {
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
  }
  uint64_t v138 = v13[6];
  long long v139 = (_OWORD *)(a1 + v138);
  long long v140 = (_OWORD *)(a2 + v138);
  long long v141 = v140[1];
  *long long v139 = *v140;
  v139[1] = v141;
  *(void *)(a1 + v13[7]) = *(void *)(a2 + v13[7]);
  uint64_t v142 = type metadata accessor for DetectionResult(0);
  *(void *)(a1 + *(int *)(v142 + 20)) = *(void *)(a2 + *(int *)(v142 + 20));
  swift_bridgeObjectRelease();
  uint64_t v143 = *(int *)(a3 + 20);
  uint64_t v144 = a1 + v143;
  uint64_t v145 = a2 + v143;
  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + v143);
  long long v146 = *(_OWORD *)(v145 + 16);
  *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
  *(_OWORD *)(v144 + 16) = v146;
  *(void *)(v144 + 32) = *(void *)(v145 + 32);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003BDB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BDB6C);
}

uint64_t sub_1003BDB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DetectionResult(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1003BDC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003BDC44);
}

uint64_t sub_1003BDC44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DetectionResult(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1003BDD04()
{
  uint64_t result = type metadata accessor for DetectionResult(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_1003BDDA8(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, double), uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v26 - v13;
  a2(&v29, a1, v12);
  uint64_t v15 = *a4;
  uint64_t v16 = v29;
  v27[0] = v29;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  char v17 = sub_1003DF7FC((uint64_t)v28, v15);
  swift_bridgeObjectRelease();
  sub_100046BF0((uint64_t)v28);
  if (v17)
  {
    if (qword_100517EA8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000F378(v18, (uint64_t)qword_10055E310);
    sub_1003C1DB8(a1, (uint64_t)v14, type metadata accessor for CVTrackSnapshot);
    long long v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      v26[0] = swift_slowAlloc();
      v28[0] = v26[0];
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v22 = sub_1003806B0(0x536B636172545643, 0xEF746F687370616ELL, v28);
      v26[1] = v4;
      v27[0] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2080;
      sub_1003C1DB8((uint64_t)v14, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
      uint64_t v23 = String.init<A>(describing:)();
      v27[0] = sub_1003806B0(v23, v24, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B4A5C((uint64_t)v14, type metadata accessor for CVTrackSnapshot);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "filterUnique is eliminating duplicate %s: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B4A5C((uint64_t)v14, type metadata accessor for CVTrackSnapshot);
    }
  }
  else
  {
    v27[5] = v16;
    AnyHashable.init<A>(_:)();
    sub_1003BE664((uint64_t)v28, (uint64_t)v27);
    AnyHashable.base.getter();
    sub_100046BF0((uint64_t)v28);
    swift_dynamicCast();
  }
  return (v17 & 1) == 0;
}

BOOL sub_1003BE154(uint64_t a1, void (*a2)(uint64_t, double), uint64_t a3, uint64_t *a4)
{
  uint64_t v34 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v34);
  long long v33 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  unint64_t v10 = &v31[-v9];
  uint64_t v11 = type metadata accessor for CVDetection();
  __chkstk_darwin(v11);
  uint64_t v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v16 = &v31[-v15];
  double v18 = __chkstk_darwin(v17);
  os_log_type_t v20 = &v31[-v19];
  a2(a1, v18);
  uint64_t v21 = *a4;
  sub_1003C1DB8((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1003C1D70(qword_100521BB0, (void (*)(uint64_t))type metadata accessor for CVDetection);
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  int v22 = sub_1003DF7FC((uint64_t)v36, v21);
  swift_bridgeObjectRelease();
  sub_100046BF0((uint64_t)v36);
  if (v22)
  {
    if (qword_100517EA8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10000F378(v23, (uint64_t)qword_10055E310);
    sub_1003C1DB8(a1, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      v35[0] = sub_1003806B0(0x536B636172545643, 0xEF746F687370616ELL, v36);
      int v32 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2080;
      sub_1003C1DB8((uint64_t)v10, (uint64_t)v33, type metadata accessor for CVTrackSnapshot);
      uint64_t v27 = String.init<A>(describing:)();
      v35[0] = sub_1003806B0(v27, v28, v36);
      LOBYTE(v22) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B4A5C((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "filterUnique is eliminating duplicate %s: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003B4A5C((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    }
    uint64_t v29 = (uint64_t)v20;
  }
  else
  {
    sub_1003C1DB8((uint64_t)v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
    AnyHashable.init<A>(_:)();
    sub_1003BE664((uint64_t)v36, (uint64_t)v35);
    AnyHashable.base.getter();
    sub_100046BF0((uint64_t)v36);
    swift_dynamicCast();
    sub_1003B4A5C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v29 = (uint64_t)v20;
  }
  sub_1003B4A5C(v29, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return (v22 & 1) == 0;
}

double sub_1003BE638(float (*a1)(void))
{
  return a1();
}

uint64_t sub_1003BE664(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_100046B94(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_100046BF0((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_100046BF0(a2);
    sub_100046B94(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100046B94(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1003BE7E0((uint64_t)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_1003BE7E0(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  int64_t v6 = result;
  uint64_t v7 = *(void *)v4;
  if (*(void *)(*(void *)v4 + 24) > *(void *)(*(void *)v4 + 16))
  {
    if (a3) {
      goto LABEL_87;
    }
    sub_10000F214(&qword_100521140);
    uint64_t v9 = static _SetStorage.copy(original:)();
    uint64_t v5 = v9;
    if (*(void *)(v7 + 16))
    {
      unint64_t v10 = (void *)(v9 + 56);
      uint64_t v11 = v7 + 56;
      unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
      if (v5 != v7 || (unint64_t)v10 >= v11 + 8 * v12) {
        memmove(v10, (const void *)(v7 + 56), 8 * v12);
      }
      uint64_t v13 = 0;
      *(void *)(v5 + 16) = *(void *)(v7 + 16);
      uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v15 = -1;
      if (v14 < 64) {
        uint64_t v15 = ~(-1 << v14);
      }
      unint64_t v16 = v15 & *(void *)(v7 + 56);
      int64_t v17 = (unint64_t)(v14 + 63) >> 6;
      while (1)
      {
        if (v16)
        {
LABEL_90:
          unint64_t v67 = __clz(__rbit64(v16));
          v16 &= v16 - 1;
          unint64_t v68 = v67 | (v13 << 6);
        }
        else
        {
          int64_t v73 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_114;
          }
          if (v73 >= v17) {
            break;
          }
          unint64_t v74 = *(void *)(v11 + 8 * v73);
          ++v13;
          if (!v74)
          {
            uint64_t v13 = v73 + 1;
            if (v73 + 1 >= v17) {
              break;
            }
            unint64_t v74 = *(void *)(v11 + 8 * v13);
            if (!v74)
            {
              uint64_t v13 = v73 + 2;
              if (v73 + 2 >= v17) {
                break;
              }
              unint64_t v74 = *(void *)(v11 + 8 * v13);
              if (!v74)
              {
                uint64_t v13 = v73 + 3;
                if (v73 + 3 >= v17) {
                  break;
                }
                unint64_t v74 = *(void *)(v11 + 8 * v13);
                if (!v74)
                {
                  uint64_t v13 = v73 + 4;
                  if (v73 + 4 >= v17) {
                    break;
                  }
                  unint64_t v74 = *(void *)(v11 + 8 * v13);
                  for (int64_t i = v73 + 4; !v74; ++i)
                  {
                    uint64_t v13 = i + 1;
                    if (__OFADD__(i, 1)) {
                      goto LABEL_115;
                    }
                    if (v13 >= v17) {
                      goto LABEL_111;
                    }
                    unint64_t v74 = *(void *)(v11 + 8 * v13);
                  }
                }
              }
            }
          }
          unint64_t v16 = (v74 - 1) & v74;
          unint64_t v68 = __clz(__rbit64(v74)) + (v13 << 6);
        }
        uint64_t v69 = 40 * v68;
        sub_100046B94(*(void *)(v7 + 48) + 40 * v68, (uint64_t)&v80);
        uint64_t v70 = *(void *)(v5 + 48) + v69;
        long long v71 = v80;
        long long v72 = v81;
        *(void *)(v70 + 32) = v82;
        *(_OWORD *)uint64_t v70 = v71;
        *(_OWORD *)(v70 + 16) = v72;
      }
    }
LABEL_111:
    while (1)
    {
      uint64_t result = swift_release();
      *(void *)uint64_t v4 = v5;
LABEL_87:
      uint64_t v61 = *(void *)v4;
      *(void *)(*(void *)v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      uint64_t v62 = *(void *)(v61 + 48) + 40 * a2;
      long long v63 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v6;
      *(_OWORD *)(v62 + 16) = v63;
      *(void *)(v62 + 32) = *(void *)(v6 + 32);
      uint64_t v64 = *(void *)(v61 + 16);
      BOOL v65 = __OFADD__(v64, 1);
      uint64_t v66 = v64 + 1;
      if (!v65) {
        break;
      }
LABEL_110:
      __break(1u);
    }
    *(void *)(v61 + 16) = v66;
    return result;
  }
  uint64_t v18 = sub_10000F214(&qword_100521140);
  if ((v5 & 1) == 0)
  {
    uint64_t v5 = v18;
    uint64_t v38 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v11 = v38;
    if (*(void *)(v7 + 16))
    {
      uint64_t v77 = v4;
      int64_t v79 = v6;
      uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v7 + 56;
      if (v39 < 64) {
        uint64_t v40 = ~(-1 << v39);
      }
      else {
        uint64_t v40 = -1;
      }
      a2 = v40 & *(void *)(v7 + 56);
      int64_t v6 = (unint64_t)(v39 + 63) >> 6;
      uint64_t v4 = v38 + 56;
      swift_retain();
      int64_t v17 = 0;
      uint64_t v13 = 40;
      while (1)
      {
        if (a2)
        {
          unint64_t v45 = __clz(__rbit64(a2));
          a2 &= a2 - 1;
          unint64_t v46 = v45 | (v17 << 6);
        }
        else
        {
          int64_t v47 = v17 + 1;
          if (__OFADD__(v17, 1)) {
            goto LABEL_109;
          }
          if (v47 >= v6) {
            goto LABEL_79;
          }
          unint64_t v48 = *(void *)(v16 + 8 * v47);
          ++v17;
          if (!v48)
          {
            int64_t v17 = v47 + 1;
            if (v47 + 1 >= v6) {
              goto LABEL_79;
            }
            unint64_t v48 = *(void *)(v16 + 8 * v17);
            if (!v48)
            {
              int64_t v17 = v47 + 2;
              if (v47 + 2 >= v6) {
                goto LABEL_79;
              }
              unint64_t v48 = *(void *)(v16 + 8 * v17);
              if (!v48)
              {
                int64_t v17 = v47 + 3;
                if (v47 + 3 >= v6) {
                  goto LABEL_79;
                }
                unint64_t v48 = *(void *)(v16 + 8 * v17);
                if (!v48)
                {
                  int64_t v17 = v47 + 4;
                  if (v47 + 4 >= v6) {
                    goto LABEL_79;
                  }
                  unint64_t v48 = *(void *)(v16 + 8 * v17);
                  int64_t v49 = v47 + 4;
                  if (!v48)
                  {
                    while (1)
                    {
                      int64_t v17 = v49 + 1;
                      if (__OFADD__(v49, 1)) {
                        goto LABEL_113;
                      }
                      if (v17 >= v6) {
                        break;
                      }
                      unint64_t v48 = *(void *)(v16 + 8 * v17);
                      ++v49;
                      if (v48) {
                        goto LABEL_67;
                      }
                    }
LABEL_79:
                    swift_release_n();
                    uint64_t v4 = v77;
                    int64_t v6 = v79;
LABEL_83:
                    *(void *)uint64_t v4 = v11;
                    uint64_t v5 = v6;
                    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v11 + 40));
                    uint64_t v59 = -1 << *(unsigned char *)(v11 + 32);
                    a2 = result & ~v59;
                    if (((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                      goto LABEL_87;
                    }
                    uint64_t v60 = ~v59;
                    while (1)
                    {
                      sub_100046B94(*(void *)(v11 + 48) + 40 * a2, (uint64_t)&v80);
                      uint64_t v5 = static AnyHashable.== infix(_:_:)();
                      uint64_t result = sub_100046BF0((uint64_t)&v80);
                      if (v5) {
                        goto LABEL_116;
                      }
                      a2 = (a2 + 1) & v60;
                      if (((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
                        goto LABEL_87;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_67:
          a2 = (v48 - 1) & v48;
          unint64_t v46 = __clz(__rbit64(v48)) + (v17 << 6);
        }
        sub_100046B94(*(void *)(v7 + 48) + 40 * v46, (uint64_t)&v80);
        uint64_t v5 = (uint64_t)&v80;
        Swift::Int v50 = AnyHashable._rawHashValue(seed:)(*(void *)(v11 + 40));
        uint64_t v51 = -1 << *(unsigned char *)(v11 + 32);
        unint64_t v52 = v50 & ~v51;
        unint64_t v53 = v52 >> 6;
        if (((-1 << v52) & ~*(void *)(v4 + 8 * (v52 >> 6))) != 0)
        {
          unint64_t v41 = __clz(__rbit64((-1 << v52) & ~*(void *)(v4 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v54 = 0;
          unint64_t v55 = (unint64_t)(63 - v51) >> 6;
          do
          {
            if (++v53 == v55 && (v54 & 1) != 0) {
              goto LABEL_89;
            }
            BOOL v56 = v53 == v55;
            if (v53 == v55) {
              unint64_t v53 = 0;
            }
            v54 |= v56;
            uint64_t v57 = *(void *)(v4 + 8 * v53);
          }
          while (v57 == -1);
          unint64_t v41 = __clz(__rbit64(~v57)) + (v53 << 6);
        }
        *(void *)(v4 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
        uint64_t v42 = *(void *)(v11 + 48) + 40 * v41;
        long long v43 = v80;
        long long v44 = v81;
        *(void *)(v42 + 32) = v82;
        *(_OWORD *)uint64_t v42 = v43;
        *(_OWORD *)(v42 + 16) = v44;
        ++*(void *)(v11 + 16);
      }
    }
LABEL_82:
    swift_release();
    goto LABEL_83;
  }
  uint64_t v5 = v18;
  uint64_t v19 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v11 = v19;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_82;
  }
  uint64_t v76 = v4;
  int64_t v78 = v6;
  uint64_t v20 = 1 << *(unsigned char *)(v7 + 32);
  a2 = v7 + 56;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v16 = v21 & *(void *)(v7 + 56);
  int64_t v6 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v4 = v19 + 56;
  swift_retain();
  int64_t v17 = 0;
  uint64_t v13 = 40;
  while (v16)
  {
    unint64_t v24 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v25 = v24 | (v17 << 6);
LABEL_35:
    uint64_t v29 = *(void *)(v7 + 48) + 40 * v25;
    long long v80 = *(_OWORD *)v29;
    long long v81 = *(_OWORD *)(v29 + 16);
    uint64_t v82 = *(void *)(v29 + 32);
    uint64_t v5 = (uint64_t)&v80;
    Swift::Int v30 = AnyHashable._rawHashValue(seed:)(*(void *)(v11 + 40));
    uint64_t v31 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v32 = v30 & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v4 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v32) & ~*(void *)(v4 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_17;
    }
    char v34 = 0;
    unint64_t v35 = (unint64_t)(63 - v31) >> 6;
    do
    {
      if (++v33 == v35 && (v34 & 1) != 0)
      {
        __break(1u);
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      BOOL v36 = v33 == v35;
      if (v33 == v35) {
        unint64_t v33 = 0;
      }
      v34 |= v36;
      uint64_t v37 = *(void *)(v4 + 8 * v33);
    }
    while (v37 == -1);
    unint64_t v22 = __clz(__rbit64(~v37)) + (v33 << 6);
LABEL_17:
    *(void *)(v4 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t v23 = *(void *)(v11 + 48) + 40 * v22;
    *(_OWORD *)uint64_t v23 = v80;
    *(_OWORD *)(v23 + 16) = v81;
    *(void *)(v23 + 32) = v82;
    ++*(void *)(v11 + 16);
  }
  int64_t v26 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (v26 >= v6) {
    goto LABEL_77;
  }
  unint64_t v27 = *(void *)(a2 + 8 * v26);
  ++v17;
  if (v27) {
    goto LABEL_34;
  }
  int64_t v17 = v26 + 1;
  if (v26 + 1 >= v6) {
    goto LABEL_77;
  }
  unint64_t v27 = *(void *)(a2 + 8 * v17);
  if (v27) {
    goto LABEL_34;
  }
  int64_t v17 = v26 + 2;
  if (v26 + 2 >= v6) {
    goto LABEL_77;
  }
  unint64_t v27 = *(void *)(a2 + 8 * v17);
  if (v27) {
    goto LABEL_34;
  }
  int64_t v17 = v26 + 3;
  if (v26 + 3 >= v6) {
    goto LABEL_77;
  }
  unint64_t v27 = *(void *)(a2 + 8 * v17);
  if (v27)
  {
LABEL_34:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v17 << 6);
    goto LABEL_35;
  }
  int64_t v17 = v26 + 4;
  if (v26 + 4 >= v6)
  {
LABEL_77:
    swift_release();
    uint64_t v58 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v4 = v76;
    int64_t v6 = v78;
    if (v58 >= 64) {
      bzero((void *)(v7 + 56), ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *(void *)a2 = -1 << v58;
    }
    *(void *)(v7 + 16) = 0;
    goto LABEL_82;
  }
  unint64_t v27 = *(void *)(a2 + 8 * v17);
  int64_t v28 = v26 + 4;
  if (v27) {
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v17 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v17 >= v6) {
      goto LABEL_77;
    }
    unint64_t v27 = *(void *)(a2 + 8 * v17);
    ++v28;
    if (v27) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1003BEF8C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000F214(&qword_1005250C0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CVTrackedDetection(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1001FD5E4();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_1003C1D70((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1003BF1EC(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  unint64_t v67 = a4;
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v68 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v66 = (char *)v50 - v14;
  uint64_t v62 = sub_10000F214(&qword_10052CE08);
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v58 = v16;
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_30:
    sub_10000FBD8((uint64_t)v9, (uint64_t *)&unk_100524ED0);
LABEL_31:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v17 = 0;
  uint64_t v63 = v11 + 56;
  uint64_t v59 = v11 + 48;
  uint64_t v60 = v11 + 16;
  uint64_t v18 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v19 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v65 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0) {
    uint64_t v19 = a2;
  }
  v50[0] = v19;
  unint64_t v55 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  unint64_t v56 = a2 & 0xC000000000000001;
  uint64_t v53 = a2;
  uint64_t v54 = a1;
  uint64_t v69 = v10;
  uint64_t v57 = v11;
  unint64_t v52 = v9;
  while (1)
  {
    if (v17 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v20 = *(void *)(v11 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v9, a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)) + v20 * v17, v10);
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v51(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
      goto LABEL_30;
    }
    uint64_t v21 = v9;
    unint64_t v22 = *v18;
    (*v18)(v66, v21, v10);
    if ((unint64_t)a2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17 == v45)
      {
LABEL_29:
        (*(void (**)(char *, uint64_t))(v57 + 8))(v66, v10);
        goto LABEL_31;
      }
    }
    else if (v17 == *(void *)(v65 + 16))
    {
      goto LABEL_29;
    }
    uint64_t v64 = v20;
    if (v56)
    {
      uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v17 >= *(void *)(v65 + 16)) {
        goto LABEL_35;
      }
      uint64_t v23 = *(void *)(a2 + 8 * v17 + 32);
      swift_retain();
    }
    unint64_t v24 = v61;
    uint64_t v25 = *(int *)(v62 + 48);
    uint64_t v26 = v69;
    unint64_t v27 = v55;
    v22(v61, v66, v69);
    uint64_t v28 = v23;
    *(void *)&v24[v25] = v23;
    uint64_t v29 = (uint64_t)v68;
    Swift::Int v30 = v24;
    uint64_t v18 = v27;
    v22(v68, v30, v26);
    uint64_t v31 = (void *)*v67;
    unint64_t v33 = sub_10032ADC4(v29);
    uint64_t v34 = v31[2];
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      goto LABEL_34;
    }
    char v37 = v32;
    if (v31[3] < v36) {
      break;
    }
    if (a3)
    {
      if (v32) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_1001F81C0();
      if (v37) {
        goto LABEL_26;
      }
    }
LABEL_19:
    uint64_t v40 = (uint64_t)v68;
    unint64_t v41 = (void *)*v67;
    *(void *)(*v67 + 8 * (v33 >> 6) + 64) |= 1 << v33;
    v22((char *)(v41[6] + v33 * v64), (char *)v40, v69);
    *(void *)(v41[7] + 8 * v33) = v28;
    uint64_t v42 = v41[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_36;
    }
    ++v17;
    v41[2] = v44;
    a3 = 1;
    uint64_t v11 = v57;
    a2 = v53;
    a1 = v54;
    uint64_t v10 = v69;
    char v9 = v52;
    if (v58 == v17)
    {
      v51(v52, 1, 1, v69);
      goto LABEL_30;
    }
  }
  sub_1001F2124(v36, a3 & 1);
  unint64_t v38 = sub_10032ADC4((uint64_t)v68);
  if ((v37 & 1) != (v39 & 1)) {
    goto LABEL_37;
  }
  unint64_t v33 = v38;
  if ((v37 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_26:
  uint64_t v46 = swift_allocError();
  swift_willThrow();
  uint64_t v72 = v46;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v68, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_38:
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v48._unint64_t object = (void *)0x80000001004271E0;
  v48._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  v49._uint64_t countAndFlagsBits = 39;
  v49._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003BF854(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v54 = a4;
  uint64_t v7 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v50 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v53 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for CVDetection();
  uint64_t v51 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v55 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v49 = sub_10000F214(&qword_10052CF18);
  __chkstk_darwin(v49);
  uint64_t v48 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v47 = v14;
  if (!v14)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v15 = 0;
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  while (1)
  {
    if (v15 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_27;
    }
    uint64_t v16 = *(void *)(v51 + 72);
    sub_1003C1DB8(a1 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80)) + v16 * v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
    unint64_t v17 = *(void *)(a2 + 16);
    if (v15 == v17)
    {
      sub_1003B4A5C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
      goto LABEL_20;
    }
    if (v15 >= v17) {
      goto LABEL_23;
    }
    uint64_t v52 = v16;
    char v18 = a3;
    uint64_t v19 = *(void *)(v50 + 72);
    uint64_t v20 = a2 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80)) + v19 * v15;
    uint64_t v21 = v48;
    uint64_t v22 = v48 + *(int *)(v49 + 48);
    uint64_t v23 = v12;
    sub_1003C1D08((uint64_t)v12, v48, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003C1DB8(v20, v22, type metadata accessor for CVTrackSnapshot);
    uint64_t v24 = v55;
    sub_1003C1D08(v21, v55, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003C1D08(v22, v53, type metadata accessor for CVTrackSnapshot);
    uint64_t v25 = (void *)*v54;
    unint64_t v27 = sub_10032AF9C(v24);
    uint64_t v28 = v25[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      goto LABEL_24;
    }
    char v31 = v26;
    if (v25[3] < v30) {
      break;
    }
    uint64_t v12 = v23;
    if (v18)
    {
      if (v26) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_1001F8B3C();
      if (v31) {
        goto LABEL_17;
      }
    }
LABEL_13:
    uint64_t v34 = v55;
    BOOL v35 = (void *)*v54;
    *(void *)(*v54 + 8 * (v27 >> 6) + 64) |= 1 << v27;
    sub_1003C1D08(v34, v35[6] + v27 * v52, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003C1D08(v53, v35[7] + v27 * v19, type metadata accessor for CVTrackSnapshot);
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_25;
    }
    ++v15;
    v35[2] = v38;
    a3 = 1;
    a1 = v46;
    a2 = v45;
    if (v47 == v15) {
      goto LABEL_20;
    }
  }
  sub_1001F32D0(v30, v18 & 1);
  unint64_t v32 = sub_10032AF9C(v55);
  if ((v31 & 1) != (v33 & 1)) {
    goto LABEL_26;
  }
  unint64_t v27 = v32;
  uint64_t v12 = v23;
  if ((v31 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v39 = swift_allocError();
  swift_willThrow();
  uint64_t v58 = v39;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003B4A5C(v53, type metadata accessor for CVTrackSnapshot);
    sub_1003B4A5C(v55, (uint64_t (*)(void))type metadata accessor for CVDetection);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
LABEL_27:
  uint64_t v56 = 0;
  unint64_t v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v41._unint64_t object = (void *)0x80000001004271E0;
  v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._uint64_t countAndFlagsBits = 39;
  v42._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003BFE1C(unint64_t *a1, uint64_t *a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v32 = a2;
  uint64_t v6 = sub_1003C02E0(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    unint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_75;
    }
    if (*a1 >> 62)
    {
LABEL_76:
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v29) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      char v31 = a1;
      while (1)
      {
        unint64_t v10 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          a1 = (unint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v9 & 0x8000000000000000) != 0) {
            goto LABEL_64;
          }
          if (v9 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_65;
          }
          a1 = *(unint64_t **)(v10 + 8 * v9 + 32);
          swift_retain();
        }
        unint64_t v33 = v6;
        uint64_t v11 = *v32;
        if ((unint64_t)*v32 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          if (!v12) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (!v12) {
            goto LABEL_28;
          }
        }
        if ((v11 & 0xC000000000000001) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        uint64_t v6 = (uint64_t)a1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
        char v13 = static UUID.== infix(_:_:)();
        swift_release();
        if (v13)
        {
LABEL_16:
          swift_release();
          swift_bridgeObjectRelease_n();
          a1 = v31;
          uint64_t v6 = v33;
          goto LABEL_48;
        }
        if (v12 != 1)
        {
          if ((v11 & 0xC000000000000001) != 0)
          {
            uint64_t v14 = 1;
            while (1)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v15 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                break;
              }
              char v16 = static UUID.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v16) {
                goto LABEL_16;
              }
              ++v14;
              if (v15 == v12) {
                goto LABEL_28;
              }
            }
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
          uint64_t v17 = 5;
          while (1)
          {
            uint64_t v18 = v17 - 3;
            if (__OFADD__(v17 - 4, 1)) {
              break;
            }
            swift_retain();
            char v19 = static UUID.== infix(_:_:)();
            swift_release();
            if (v19) {
              goto LABEL_16;
            }
            ++v17;
            if (v18 == v12) {
              goto LABEL_28;
            }
          }
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
LABEL_28:
        swift_release();
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v33;
        a1 = v31;
        if (v33 == v9) {
          goto LABEL_47;
        }
        unint64_t v20 = *v31;
        if ((*v31 & 0xC000000000000001) != 0)
        {
          uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v20 = *v31;
          if ((*v31 & 0xC000000000000001) == 0) {
            goto LABEL_33;
          }
        }
        else
        {
          if ((v33 & 0x8000000000000000) != 0) {
            goto LABEL_69;
          }
          if (v33 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_70;
          }
          uint64_t v21 = *(void *)(v20 + 8 * v33 + 32);
          swift_retain();
          if ((v20 & 0xC000000000000001) == 0)
          {
LABEL_33:
            if ((v9 & 0x8000000000000000) != 0) {
              goto LABEL_71;
            }
            if (v9 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_72;
            }
            uint64_t v22 = *(void *)(v20 + 8 * v9 + 32);
            swift_retain();
            goto LABEL_36;
          }
        }
        uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v20 = *v31;
LABEL_36:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        unint64_t *v31 = v20;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v20 & 0x8000000000000000) != 0
          || (v20 & 0x4000000000000000) != 0)
        {
          unint64_t v20 = sub_100306928(v20);
          unint64_t *v31 = v20;
        }
        *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v33 + 0x20) = v22;
        swift_release();
        specialized Array._endMutation()();
        unint64_t v24 = *v31;
        int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        unint64_t *v31 = v24;
        if (!v25 || (v24 & 0x8000000000000000) != 0 || (v24 & 0x4000000000000000) != 0)
        {
          unint64_t v24 = sub_100306928(v24);
          unint64_t *v31 = v24;
        }
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_73;
        }
        if (v9 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_74;
        }
        *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v9 + 0x20) = v21;
        swift_release();
        specialized Array._endMutation()();
LABEL_47:
        uint64_t v6 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_68;
        }
LABEL_48:
        if (__OFADD__(v9++, 1)) {
          goto LABEL_66;
        }
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v27 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v27) {
          return v6;
        }
      }
    }
    return v6;
  }
  if (!(*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_1003C02E0(unint64_t a1, uint64_t *a2)
{
  if (a1 >> 62) {
    goto LABEL_33;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; a1 = v14)
  {
    uint64_t v3 = 0;
    uint64_t v16 = i;
    unint64_t v17 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v17) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t v4 = *a2;
      if ((unint64_t)*a2 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        if (!v5) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v5) {
          goto LABEL_23;
        }
      }
      if ((v4 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      char v6 = static UUID.== infix(_:_:)();
      a1 = swift_release();
      if (v6)
      {
LABEL_29:
        swift_release();
        swift_bridgeObjectRelease_n();
        return v3;
      }
      if (v5 != 1) {
        break;
      }
LABEL_23:
      swift_release();
      a1 = swift_bridgeObjectRelease_n();
      if (__OFADD__(v3++, 1)) {
        goto LABEL_32;
      }
      if (v3 == v16) {
        return 0;
      }
    }
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = 1;
      while (1)
      {
        a1 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v8 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        char v9 = static UUID.== infix(_:_:)();
        swift_unknownObjectRelease();
        if (v9) {
          goto LABEL_29;
        }
        ++v7;
        if (v8 == v5) {
          goto LABEL_23;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = 5;
      while (1)
      {
        uint64_t v11 = v10 - 3;
        if (__OFADD__(v10 - 4, 1)) {
          break;
        }
        swift_retain();
        char v12 = static UUID.== infix(_:_:)();
        a1 = swift_release();
        if (v12) {
          goto LABEL_29;
        }
        ++v10;
        if (v11 == v5) {
          goto LABEL_23;
        }
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    unint64_t v14 = a1;
    swift_bridgeObjectRetain();
    uint64_t i = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

void *sub_1003C0580(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(type metadata accessor for CVTrackSnapshot(0) - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      if (*(void *)(a2 + 16))
      {
        sub_10032ADC4(v7);
        if (v9)
        {
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1003C06D4(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  BOOL v35 = a4;
  uint64_t v36 = a3;
  uint64_t v40 = a2;
  uint64_t v12 = sub_10000F214(a4);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v37 = a5;
  uint64_t v39 = sub_10000F214(a5);
  uint64_t v15 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (uint64_t)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v34 = (uint64_t)v32 - v18;
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return _swiftEmptyArrayStorage;
  }
  v32[0] = a7;
  _OWORD v32[2] = v7;
  uint64_t v20 = sub_10000F214(a6);
  uint64_t v21 = a1
      + ((*(unsigned __int8 *)(*(void *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v20 - 8) + 80));
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v23 = *(void *)(*(void *)(v20 - 8) + 72);
  v32[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v33 = v15;
  do
  {
    v40(v21, v21 + *(int *)(v20 + 48));
    if ((*v22)(v14, 1, v39) == 1)
    {
      sub_10000FBD8((uint64_t)v14, v35);
    }
    else
    {
      uint64_t v25 = v23;
      uint64_t v26 = v20;
      uint64_t v27 = v34;
      uint64_t v28 = v37;
      sub_10000FC34((uint64_t)v14, v34, v37);
      sub_10000FC34(v27, v38, v28);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v24 = (void *)((uint64_t (*)(void, uint64_t, uint64_t, void *))v32[0])(0, v24[2] + 1, 1, v24);
      }
      unint64_t v30 = v24[2];
      unint64_t v29 = v24[3];
      if (v30 >= v29 >> 1) {
        unint64_t v24 = (void *)((uint64_t (*)(BOOL, unint64_t, uint64_t, void *))v32[0])(v29 > 1, v30 + 1, 1, v24);
      }
      v24[2] = v30 + 1;
      sub_10000FC34(v38, (uint64_t)v24+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v30, v37);
      uint64_t v20 = v26;
      uint64_t v23 = v25;
    }
    v21 += v23;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  return v24;
}

void *sub_1003C09F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v30 = (uint64_t)v27 - v9;
  __chkstk_darwin(v10);
  uint64_t v29 = (uint64_t)v27 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  v27[2] = v2;
  uint64_t v13 = *(void *)(type metadata accessor for CVDetection() - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  v27[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v28 = v7;
  do
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v18 = sub_10032AF9C(v14);
      if (v19)
      {
        uint64_t v20 = *(void *)(v31 + 72);
        uint64_t v21 = v30;
        sub_1003C1DB8(*(void *)(a2 + 56) + v20 * v18, v30, type metadata accessor for CVTrackSnapshot);
        uint64_t v22 = v21;
        uint64_t v23 = v29;
        sub_1003C1D08(v22, v29, type metadata accessor for CVTrackSnapshot);
        sub_1003C1D08(v23, (uint64_t)v7, type metadata accessor for CVTrackSnapshot);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v16 = (void *)sub_1003289D8(0, v16[2] + 1, 1, (unint64_t)v16);
        }
        unint64_t v25 = v16[2];
        unint64_t v24 = v16[3];
        if (v25 >= v24 >> 1) {
          uint64_t v16 = (void *)sub_1003289D8(v24 > 1, v25 + 1, 1, (unint64_t)v16);
        }
        v16[2] = v25 + 1;
        uint64_t v17 = (uint64_t)v16
            + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
            + v25 * v20;
        uint64_t v7 = v28;
        sub_1003C1D08((uint64_t)v28, v17, type metadata accessor for CVTrackSnapshot);
      }
    }
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_1003C0CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v46 = (uint64_t)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v47 = (uint64_t)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v45 = (uint64_t)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v44 = (uint64_t)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v43 = (uint64_t)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for CVDetection();
  __chkstk_darwin(v49);
  uint64_t v53 = (uint64_t)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)v42 - v17;
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  unint64_t v24 = (char *)v42 - v23;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v56 = _swiftEmptyArrayStorage;
  uint64_t v52 = *(void *)(a1 + 16);
  if (v52)
  {
    uint64_t v48 = v22;
    v42[1] = v2;
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(v21 + 72);
    unint64_t v50 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v51 = a1 + v50;
    uint64_t v28 = a2 + 56;
    uint64_t v29 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v54 = v29;
      sub_1003C1DB8(v51 + v27 * v26, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (!*(void *)(a2 + 16)) {
        goto LABEL_18;
      }
      Hasher.init(_seed:)();
      uint64_t v30 = v48;
      sub_1003C1DB8((uint64_t)v24, v48, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v31 = v44;
          sub_1003C1D08(v30, v44, type metadata accessor for ParseDetectorResult);
          Hasher._combine(_:)(1uLL);
          sub_1003E7010((uint64_t)v55);
          unint64_t v32 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v31 = v45;
          sub_1003C1D08(v30, v45, type metadata accessor for TextDetectorResult);
          Hasher._combine(_:)(2uLL);
          sub_10032169C((uint64_t)v55);
          unint64_t v32 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
          uint64_t v31 = v47;
          sub_1003C1D08(v30, v47, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v33 = 3;
          goto LABEL_12;
        case 4u:
          uint64_t v31 = v47;
          sub_1003C1D08(v30, v47, type metadata accessor for StreamingBarcodeDetectorResult);
          Swift::UInt v33 = 4;
LABEL_12:
          Hasher._combine(_:)(v33);
          sub_100165074();
          unint64_t v32 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v31 = v46;
          sub_1003C1D08(v30, v46, type metadata accessor for StreamingTextDetectorResult);
          Hasher._combine(_:)(5uLL);
          sub_1001665AC();
          unint64_t v32 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v31 = v43;
          sub_1003C1D08(v30, v43, type metadata accessor for ObjectDetectorResult);
          Hasher._combine(_:)(0);
          sub_10031E668();
          unint64_t v32 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      sub_1003B4A5C(v31, v32);
      Swift::Int v34 = Hasher._finalize()();
      uint64_t v35 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v36 = v34 & ~v35;
      if ((*(void *)(v28 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36))
      {
        uint64_t v37 = ~v35;
        while (1)
        {
          sub_1003C1DB8(*(void *)(a2 + 48) + v36 * v27, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
          char v38 = sub_100402834((uint64_t)v18, (uint64_t)v24);
          sub_1003B4A5C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
          if (v38) {
            break;
          }
          unint64_t v36 = (v36 + 1) & v37;
          if (((*(void *)(v28 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
            goto LABEL_18;
          }
        }
        sub_1003B4A5C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v29 = v54;
      }
      else
      {
LABEL_18:
        sub_1003C1D08((uint64_t)v24, v53, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v39 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100040D64(0, v39[2] + 1, 1);
        }
        uint64_t v29 = v56;
        unint64_t v41 = v56[2];
        unint64_t v40 = v56[3];
        if (v41 >= v40 >> 1)
        {
          sub_100040D64(v40 > 1, v41 + 1, 1);
          uint64_t v29 = v56;
        }
        _OWORD v29[2] = v41 + 1;
        sub_1003C1D08(v53, (uint64_t)v29 + v50 + v41 * v27, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      ++v26;
    }
    while (v26 != v52);
    return v56;
  }
  return result;
}

void sub_1003C139C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v26 = a2;
  uint64_t v8 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v25 = (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    unint64_t v15 = 0;
    uint64_t v22 = a5;
    uint64_t v23 = a1;
    while (v15 < *(void *)(a1 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v17 = *(void *)(v9 + 72);
      sub_1003C1DB8(a1 + v16 + v17 * v15, (uint64_t)v13, type metadata accessor for CVTrackSnapshot);
      char v18 = a5(v13, v26, v27, v28);
      if (v5)
      {
        sub_1003B4A5C((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      if (v18)
      {
        sub_1003C1D08((uint64_t)v13, v25, type metadata accessor for CVTrackSnapshot);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100040C38(0, v14[2] + 1, 1);
        }
        uint64_t v14 = v29;
        unint64_t v20 = v29[2];
        unint64_t v19 = v29[3];
        if (v20 >= v19 >> 1)
        {
          sub_100040C38(v19 > 1, v20 + 1, 1);
          uint64_t v14 = v29;
        }
        void v14[2] = v20 + 1;
        sub_1003C1D08(v25, (uint64_t)v14 + v16 + v20 * v17, type metadata accessor for CVTrackSnapshot);
        a5 = v22;
        a1 = v23;
      }
      else
      {
        sub_1003B4A5C((uint64_t)v13, type metadata accessor for CVTrackSnapshot);
      }
      if (v24 == ++v15) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1003C162C(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v32 = sub_10000F214(&qword_10052CDF0);
  uint64_t v3 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_1005250D0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v30 = v7 + 32;
  uint64_t v31 = v7 + 16;
  uint64_t v17 = (void (**)(char *, uint64_t))(v3 + 8);
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v7 + 8;
  uint64_t v18 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v28) {
        return swift_release();
      }
      unint64_t v24 = *(void *)(v27 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v28) {
          return swift_release();
        }
        unint64_t v24 = *(void *)(v27 + 8 * v20);
        if (!v24)
        {
          int64_t v20 = v23 + 3;
          if (v23 + 3 >= v28) {
            return swift_release();
          }
          unint64_t v24 = *(void *)(v27 + 8 * v20);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v18 + 56) + *(void *)(v7 + 72) * v22, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    uint64_t v34 = *(void *)(v33 + 112);
    swift_bridgeObjectRetain();
    AsyncStream.Continuation.yield(_:)();
    (*v17)(v5, v32);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  int64_t v25 = v23 + 4;
  if (v25 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v20 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1003C1994(uint64_t a1, float (*a2)(char *, char *, void, char *), uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v4 = sub_10000F214(&qword_10051A098);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000F214(&qword_10052CEE8);
  __chkstk_darwin(v31);
  uint64_t v30 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v27 - v9);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v27 - v12);
  unint64_t v36 = _swiftEmptyArrayStorage;
  sub_100040E5C(0, 0, 0);
  uint64_t v14 = v36;
  uint64_t v15 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v29 = v15;
  uint64_t v27 = a1;
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(type metadata accessor for CVDetection() - 8);
    uint64_t v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v28 = *(void *)(v17 + 72);
    do
    {
      uint64_t v19 = v31;
      uint64_t v20 = (uint64_t)&v30[*(int *)(v31 + 48)];
      sub_1003C1DB8(v18, v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v21 = (uint64_t)v10 + *(int *)(v19 + 48);
      *uint64_t v10 = v16;
      sub_1003C1D08(v20, v21, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FC34((uint64_t)v10, (uint64_t)v13, &qword_10052CEE8);
      unint64_t v22 = (char *)v13 + *(int *)(v19 + 48);
      uint64_t v23 = *(int *)(v33 + 64);
      *(float *)&v6[v23] = v34(v6, &v6[*(int *)(v33 + 48)], *v13, v22);
      sub_10000FBD8((uint64_t)v13, &qword_10052CEE8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040E5C(0, v14[2] + 1, 1);
        uint64_t v14 = v36;
      }
      unint64_t v25 = v14[2];
      unint64_t v24 = v14[3];
      if (v25 >= v24 >> 1)
      {
        sub_100040E5C(v24 > 1, v25 + 1, 1);
        uint64_t v14 = v36;
      }
      ++v16;
      void v14[2] = v25 + 1;
      sub_10000FC34((uint64_t)v6, (uint64_t)v14+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v25, &qword_10051A098);
      v18 += v28;
    }
    while (v29 != v16);
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1003C1CE8(uint64_t a1)
{
  return sub_1003AE654(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1003C1D08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003C1D70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003C1DB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003C1E20()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_10000F214(&qword_1005250D0);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1003C1F84(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000F214(&qword_1005250D0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  void *v15 = v3;
  v15[1] = sub_10000FC9C;
  return sub_1003ABCFC(a1, v10, v11, v12, v13, v14);
}

uint64_t sub_1003C20E8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1003C2120()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1003C21EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1003AC1A4(a1, v4, v5);
}

uint64_t sub_1003C2260()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1003C2334(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_1003AC39C(a1, v5, v6, v7, v8);
}

uint64_t sub_1003C2434(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_1003AA988(a1, v4, v5, v6);
}

uint64_t sub_1003C24EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_1003AAF10(a1, v4, v5, v6);
}

uint64_t sub_1003C25A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_1003A89D0(a1, v4, v5, v6);
}

uint64_t sub_1003C2658()
{
  uint64_t v1 = type metadata accessor for TrackManager.MatchingComputationRequest(0);
  uint64_t v51 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v49 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = sub_10000F214(&qword_10052CE98);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v48 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v47 = *(void *)(v3 + 64);
  uint64_t v52 = sub_10000F214(&qword_10052CEB8);
  uint64_t v4 = *(void *)(v52 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_unknownObjectRelease();
  uint64_t v50 = (v51 + 32) & ~v51;
  uint64_t v6 = v0 + v50;
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v43 = v2;
      uint64_t v45 = v1;
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
      uint64_t v10 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v6 + v10[13];
      uint64_t v12 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v13 = *(void *)(v12 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      }
      uint64_t v14 = (uint64_t *)(v6 + v10[14]);
      unint64_t v15 = v14[1];
      uint64_t v2 = v43;
      uint64_t v1 = v45;
      if (v15 >> 60 != 15) {
        sub_100038B34(*v14, v15);
      }
      if (*(void *)(v6 + v10[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v6, v16);
      uint64_t v17 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v18 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v6, v18);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v19 = v6 + *(int *)(type metadata accessor for DetectionRequest(0) + 20);
  type metadata accessor for DetectionRequest.Originator(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
LABEL_41:
      swift_bridgeObjectRelease();
      break;
    case 2:
      uint64_t v44 = v2;
      uint64_t v46 = v1;
      uint64_t v21 = type metadata accessor for UUID();
      Swift::String v42 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
      v42(v19, v21);
      uint64_t v41 = type metadata accessor for CVTrackSnapshot(0);
      uint64_t v22 = v19 + *(int *)(v41 + 20);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v42(v22, v21);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_29;
        case 1u:
          v42(v22, v21);
          uint64_t v23 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v40 = v22 + v23[13];
          uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v38 = *(void *)(v24 - 8);
          uint64_t v39 = v24;
          if (!(*(unsigned int (**)(uint64_t, uint64_t))(v38 + 48))(v40, 1)) {
            (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
          }
          unint64_t v25 = (uint64_t *)(v22 + v23[14]);
          unint64_t v26 = v25[1];
          if (v26 >> 60 != 15) {
            sub_100038B34(*v25, v26);
          }
          if (*(void *)(v22 + v23[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v42(v22, v21);
          uint64_t v27 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v42(v22, v21);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v42(v22, v21);
          type metadata accessor for StreamingTextDetectorResult(0);
LABEL_29:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      uint64_t v28 = v19 + *(int *)(v41 + 24);
      uint64_t v2 = v44;
      uint64_t v1 = v46;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v42(v28, v21);
          type metadata accessor for ObjectDetectorResult(0);
          goto LABEL_41;
        case 1u:
          v42(v28, v21);
          uint64_t v29 = (int *)type metadata accessor for ParseDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = v28 + v29[13];
          uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v32 = *(void *)(v31 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
            (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
          }
          uint64_t v33 = (uint64_t *)(v28 + v29[14]);
          unint64_t v34 = v33[1];
          uint64_t v2 = v44;
          uint64_t v1 = v46;
          if (v34 >> 60 != 15) {
            sub_100038B34(*v33, v34);
          }
          if (*(void *)(v28 + v29[15]))
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          break;
        case 2u:
          v42(v28, v21);
          uint64_t v35 = type metadata accessor for TextDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          break;
        case 3u:
        case 4u:
          v42(v28, v21);
          type metadata accessor for StreamingBarcodeDetectorResult(0);
          swift_bridgeObjectRelease();
          swift_release();
          break;
        case 5u:
          v42(v28, v21);
          type metadata accessor for StreamingTextDetectorResult(0);
          goto LABEL_41;
        default:
          goto LABEL_42;
      }
      break;
    case 0:
      sub_100038B34(*(void *)v19, *(void *)(v19 + 8));
      break;
  }
LABEL_42:
  uint64_t v36 = (v50 + v49 + v48) & ~v48;
  type metadata accessor for DetectionResult(0);
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0(v6 + *(int *)(v1 + 20));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v36, v2);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((((v47 + v36 + 3) & 0xFFFFFFFFFFFFFFFCLL) + v5 + 4) & ~v5), v52);

  return swift_deallocObject();
}

uint64_t sub_1003C3118(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for TrackManager.MatchingComputationRequest(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(sub_10000F214(&qword_10052CE98) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v10 = *(void *)(sub_10000F214(&qword_10052CEB8) - 8);
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = v1 + v5;
  uint64_t v14 = v1 + v8;
  float v15 = *(float *)(v1 + v9);
  uint64_t v16 = v1 + ((v9 + *(unsigned __int8 *)(v10 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v17;
  *uint64_t v17 = v2;
  v17[1] = sub_10000FC9C;
  return sub_1003AA0A4(v15, a1, v11, v12, v13, v14, v16);
}

uint64_t sub_1003C32F0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003C3328(char *a1, char *a2, void *a3, uint64_t a4, float a5)
{
  v314 = (char *)a4;
  v309 = a3;
  v319 = a1;
  uint64_t v297 = type metadata accessor for OSSignpostError();
  v296 = *(void (***)(unint64_t, uint64_t))(v297 - 8);
  __chkstk_darwin(v297);
  v295 = (char *)&v292 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v294 = (char *)&v292 - v9;
  uint64_t v350 = sub_10000F214(&qword_10052CEE8);
  uint64_t v311 = *(void *)(v350 - 8);
  __chkstk_darwin(v350);
  v341 = (char **)((char *)&v292 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000F214(&qword_10052CEF0);
  __chkstk_darwin(v11 - 8);
  int64_t v349 = (int64_t)&v292 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  float v15 = (NSObject **)((char *)&v292 - v14);
  __chkstk_darwin(v16);
  v323 = (char **)((char *)&v292 - v17);
  __chkstk_darwin(v18);
  uint64_t v324 = (uint64_t)&v292 - v19;
  uint64_t v316 = type metadata accessor for OSSignpostID();
  uint64_t v320 = *(void *)(v316 - 8);
  __chkstk_darwin(v316);
  v301 = (char *)&v292 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v298 = (char *)&v292 - v22;
  __chkstk_darwin(v23);
  v303 = (char *)&v292 - v24;
  __chkstk_darwin(v25);
  v307 = (char *)&v292 - v26;
  __chkstk_darwin(v27);
  v300 = (char *)&v292 - v28;
  uint64_t v322 = type metadata accessor for OSSignposter();
  uint64_t v317 = *(void *)(v322 - 8);
  __chkstk_darwin(v322);
  uint64_t v30 = (char *)&v292 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v302 = (char *)&v292 - v32;
  __chkstk_darwin(v33);
  v308 = (char *)&v292 - v34;
  uint64_t v333 = sub_10000F214(&qword_100524EB0);
  uint64_t v332 = *(void *)(v333 - 8);
  __chkstk_darwin(v333);
  uint64_t v36 = (uint64_t)&v292 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v37 - 8);
  uint64_t v338 = (uint64_t)&v292 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000F214(&qword_10052CED8);
  __chkstk_darwin(v39 - 8);
  uint64_t v41 = (char *)&v292 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v315 = sub_10000F214(&qword_10052CEF8);
  __chkstk_darwin(v315);
  v305 = (char *)&v292 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v313 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v292 - v44);
  uint64_t v45 = sub_10000F214(&qword_10052CF00);
  __chkstk_darwin(v45 - 8);
  uint64_t v299 = (uint64_t)&v292 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  uint64_t v306 = (uint64_t)&v292 - v48;
  __chkstk_darwin(v49);
  v318 = (char *)&v292 - v50;
  uint64_t v51 = sub_10000F214(&qword_10052CF08);
  __chkstk_darwin(v51 - 8);
  uint64_t v53 = (char *)&v292 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v304 = (uint64_t)&v292 - v55;
  __chkstk_darwin(v56);
  uint64_t v312 = (uint64_t)&v292 - v57;
  __chkstk_darwin(v58);
  uint64_t v321 = (uint64_t)&v292 - v59;
  uint64_t v343 = type metadata accessor for CVDetection();
  uint64_t v345 = *(void *)(v343 - 8);
  __chkstk_darwin(v343);
  uint64_t v61 = (char *)&v292 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  v347 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v292 - v63);
  __chkstk_darwin(v64);
  uint64_t v66 = (char *)&v292 - v65;
  __chkstk_darwin(v67);
  uint64_t v337 = (uint64_t)&v292 - v68;
  __chkstk_darwin(v69);
  uint64_t v326 = (uint64_t)&v292 - v70;
  __chkstk_darwin(v71);
  int64_t v73 = (char *)&v292 - v72;
  uint64_t v346 = sub_10000F214(&qword_10051A098);
  uint64_t v340 = *(void *)(v346 - 8);
  __chkstk_darwin(v346);
  v330 = (char *)&v292 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  uint64_t v329 = (uint64_t)&v292 - v76;
  __chkstk_darwin(v77);
  v327 = (char *)&v292 - v78;
  __chkstk_darwin(v79);
  uint64_t v335 = (uint64_t)&v292 - v80;
  __chkstk_darwin(v81);
  uint64_t v334 = (uint64_t)&v292 - v82;
  __chkstk_darwin(v83);
  uint64_t v344 = (uint64_t)&v292 - v84;
  __chkstk_darwin(v85);
  uint64_t v331 = (uint64_t)&v292 - v86;
  __chkstk_darwin(v87);
  v328 = (char *)&v292 - v88;
  __chkstk_darwin(v89);
  v339 = (char *)&v292 - v90;
  __chkstk_darwin(v91);
  v336 = (char *)&v292 - v92;
  __chkstk_darwin(v93);
  uint64_t v95 = (char *)&v292 - v94;
  int64_t v96 = *((void *)a2 + 2);
  uint64_t v325 = v36;
  v342 = a2;
  v310 = v66;
  if (v96)
  {
    int64_t v348 = v96;
    v292 = v30;
    uint64_t v97 = (uint64_t)v313;
    uint64_t v98 = (char *)v313 + *(int *)(v315 + 48);
    sub_10000FB74((uint64_t)v314, (uint64_t)v41, &qword_10052CED8);
    uint64_t v99 = sub_10000F214(&qword_10052CEE0);
    int v100 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v99 - 8) + 48))(v41, 1, v99);
    v293 = v53;
    if (v100 == 1)
    {
      sub_10000FBD8((uint64_t)v41, &qword_10052CED8);
      uint64_t v101 = v317;
      uint64_t v102 = v322;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v317 + 56))(v97, 1, 1, v322);
      uint64_t v103 = v320;
      uint64_t v104 = v316;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v320 + 56))(v98, 1, 1, v316);
    }
    else
    {
      long long v117 = &v41[*(int *)(v99 + 48)];
      uint64_t v118 = v315;
      uint64_t v119 = *(int *)(v315 + 48);
      v314 = v98;
      uint64_t v120 = v305;
      uint64_t v121 = &v305[v119];
      uint64_t v101 = v317;
      uint64_t v122 = v41;
      uint64_t v102 = v322;
      (*(void (**)(char *, char *, uint64_t))(v317 + 32))(v305, v122, v322);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v120, 0, 1, v102);
      long long v123 = v117;
      uint64_t v103 = v320;
      uint64_t v104 = v316;
      (*(void (**)(char *, char *, uint64_t))(v320 + 32))(v121, v123, v316);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(v121, 0, 1, v104);
      uint64_t v124 = (uint64_t)&v120[*(int *)(v118 + 48)];
      uint64_t v125 = (uint64_t)v120;
      uint64_t v98 = v314;
      sub_10000FC34(v125, v97, &qword_10052CF08);
      sub_10000FC34(v124, (uint64_t)v98, &qword_10052CF00);
    }
    uint64_t v126 = v97;
    uint64_t v127 = v321;
    sub_10000FC34(v126, v321, &qword_10052CF08);
    uint64_t v128 = v318;
    sub_10000FC34((uint64_t)v98, (uint64_t)v318, &qword_10052CF00);
    uint64_t v129 = v127;
    uint64_t v130 = v312;
    sub_10000FB74(v129, v312, &qword_10052CF08);
    long long v131 = *(char **)(v101 + 48);
    v314 = (char *)(v101 + 48);
    v313 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v131;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v131)(v130, 1, v102) == 1)
    {
      uint64_t v132 = &qword_10052CF08;
    }
    else
    {
      long long v133 = v308;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v308, v130, v102);
      uint64_t v130 = v306;
      sub_10000FB74((uint64_t)v128, v306, &qword_10052CF00);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v130, 1, v104) != 1)
      {
        uint64_t v128 = v300;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 32))(v300, v130, v104);
        uint64_t v136 = OSSignposter.logHandle.getter();
        int v137 = static os_signpost_type_t.begin.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          LODWORD(v315) = v137;
          uint64_t v98 = *(char **)(v103 + 16);
          uint64_t v138 = v307;
          ((void (*)(char *, char *, uint64_t))v98)(v307, v128, v104);
          long long v139 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v139 = 0;
          os_signpost_id_t v140 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v136, (os_signpost_type_t)v315, v140, "Tamale.TrackManager.matchSelectedTracks.costMatrix", "", v139, 2u);
          uint64_t v103 = v320;
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v103 + 8))(v138, v104);
        }
        else
        {

          uint64_t v98 = *(char **)(v103 + 16);
          uint64_t v138 = v307;
        }
        ((void (*)(char *, char *, uint64_t))v98)(v138, v128, v104);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        unint64_t v135 = OSSignpostIntervalState.init(id:isOpen:)();
        (*(void (**)(char *, uint64_t))(v103 + 8))(v128, v104);
        (*(void (**)(char *, uint64_t))(v317 + 8))(v308, v322);
LABEL_23:
        long long v141 = v319;
        uint64_t v142 = *((void *)v319 + 2);
        uint64_t v36 = (uint64_t)v347;
        uint64_t v143 = v324;
        if ((unsigned __int128)(v348 * (__int128)v142) >> 64 != (v348 * v142) >> 63)
        {
          __break(1u);
          goto LABEL_78;
        }
        uint64_t v312 = *((void *)v319 + 2);
        uint64_t v315 = v135;
        v134.i32[0] = 1.0;
        v308 = (char *)(v348 * v142);
        uint64_t v144 = sub_1003A4CCC(v348 * v142, v134);
        uint64_t v353 = 0;
        v354 = v144;
        v351 = v141;
        uint64_t v352 = 0;
        swift_bridgeObjectRetain();
        uint64_t v145 = v323;
        sub_1003A43CC(v323);
        sub_10000FC34((uint64_t)v145, v143, &qword_10052CEF0);
        uint64_t v146 = v311;
        long long v147 = *(void (***)(unint64_t, uint64_t))(v311 + 48);
        uint64_t v148 = v350;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v147)(v143, 1, v350) != 1)
        {
          unint64_t v156 = (void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v146 + 56);
LABEL_31:
          uint64_t v158 = *(void *)v143;
          sub_1003C1D08(v143 + *(int *)(v148 + 48), v36, (uint64_t (*)(void))type metadata accessor for CVDetection);
          uint64_t v143 = v348 * v158;
          uint64_t v36 = (unsigned __int128)(v348 * (__int128)v158) >> 64 != (v348 * v158) >> 63;
          swift_bridgeObjectRetain();
          unint64_t v159 = 0;
          while (1)
          {
            uint64_t v160 = v349;
            if (v159 == v348)
            {
              uint64_t v161 = 1;
              unint64_t v159 = v348;
            }
            else
            {
              if (v159 >= v348)
              {
                __break(1u);
LABEL_59:
                v147[1](v159, v148);
                uint64_t v174 = "";
LABEL_60:
                uint64_t v175 = v298;
                uint64_t v176 = v307;
                uint64_t v177 = v316;
                (*(void (**)(void))(v143 + 16))();
                uint64_t v178 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v178 = 0;
                os_signpost_id_t v179 = OSSignpostID.rawValue.getter();
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v160, (os_signpost_type_t)v61, v179, "Tamale.TrackManager.matchSelectedTracks.costMatrix", v174, v178, 2u);
                uint64_t v143 = v320;
                swift_slowDealloc();

                long long v180 = *(void (**)(char *, uint64_t))(v143 + 8);
                v180(v175, v177);
                uint64_t v350 = (uint64_t)v180;
                v180(v176, v177);
                goto LABEL_61;
              }
              uint64_t v162 = (uint64_t)v341 + *(int *)(v350 + 48);
              sub_1003C1DB8((uint64_t)&v342[((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80))+ *(void *)(v345 + 72) * v159], v162, (uint64_t (*)(void))type metadata accessor for CVDetection);
              uint64_t v163 = v349 + *(int *)(v350 + 48);
              *(void *)int64_t v349 = v159;
              uint64_t v164 = v162;
              uint64_t v160 = v349;
              sub_1003C1D08(v164, v163, (uint64_t (*)(void))type metadata accessor for CVDetection);
              uint64_t v161 = 0;
              ++v159;
              uint64_t v148 = v350;
            }
            (*v156)(v160, v161, 1, v148);
            sub_10000FC34((uint64_t)v160, (uint64_t)v15, &qword_10052CEF0);
            if (((unsigned int (*)(NSObject **, uint64_t, uint64_t))v147)(v15, 1, v148) == 1)
            {
              swift_bridgeObjectRelease();
              uint64_t v36 = (uint64_t)v347;
              sub_1003B4A5C((uint64_t)v347, (uint64_t (*)(void))type metadata accessor for CVDetection);
              uint64_t v157 = v323;
              sub_1003A43CC(v323);
              uint64_t v148 = v350;
              uint64_t v143 = v324;
              sub_10000FC34((uint64_t)v157, v324, &qword_10052CEF0);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v147)(v143, 1, v148) == 1) {
                break;
              }
              goto LABEL_31;
            }
            uint64_t v160 = *v15;
            sub_1003C1D08((uint64_t)v15 + *(int *)(v148 + 48), (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for CVDetection);
            float v165 = sub_100032DCC((uint64_t)v61);
            if (v36)
            {
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
            Class v166 = (Class)((char *)v160 + v143);
            if (__OFADD__(v143, v160)) {
              goto LABEL_55;
            }
            float v167 = v165;
            uint64_t v160 = v354;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if (((unint64_t)v166 & 0x8000000000000000) != 0) {
                goto LABEL_44;
              }
            }
            else
            {
              uint64_t v160 = sub_1003069A4(v160);
              if (((unint64_t)v166 & 0x8000000000000000) != 0)
              {
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }
            }
            if (v166 >= v160[2].isa) {
              goto LABEL_56;
            }
            *((float *)&v160[4].isa + (void)v166) = 1.0 - v167;
            v354 = v160;
            sub_1003B4A5C((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for CVDetection);
            uint64_t v148 = v350;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v149 = v322;
        if (v315)
        {
          uint64_t v150 = v304;
          sub_10000FB74(v321, v304, &qword_10052CF08);
          int v151 = v313(v150, 1, v149);
          uint64_t v36 = v325;
          uint64_t v61 = v342;
          uint64_t v116 = v344;
          uint64_t v143 = v320;
          uint64_t v152 = (uint64_t)v318;
          uint64_t v153 = v309;
          if (v151 == 1)
          {
            long long v154 = &qword_10052CF08;
            uint64_t v155 = v150;
          }
          else
          {
            uint64_t v168 = v317;
            long long v169 = v302;
            (*(void (**)(char *, uint64_t, uint64_t))(v317 + 32))(v302, v150, v149);
            uint64_t v170 = v152;
            uint64_t v171 = v299;
            sub_10000FB74(v170, v299, &qword_10052CF00);
            unint64_t v159 = v316;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v171, 1, v316) != 1)
            {
              (*(void (**)(char *, uint64_t, unint64_t))(v143 + 32))(v303, v171, v159);
              swift_retain();
              uint64_t v160 = OSSignposter.logHandle.getter();
              long long v147 = (void (**)(unint64_t, uint64_t))v298;
              OSSignpostIntervalState.signpostID.getter();
              LOBYTE(v61) = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                unint64_t v159 = (unint64_t)v294;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                long long v147 = v296;
                uint64_t v148 = v297;
                if (((unsigned int (*)(unint64_t, uint64_t))v296[11])(v159, v297) != enum case for OSSignpostError.doubleEnd(_:)) {
                  goto LABEL_59;
                }
                uint64_t v174 = "[Error] Interval already ended";
                goto LABEL_60;
              }
LABEL_57:

              uint64_t v350 = *(void *)(v143 + 8);
              ((void (*)(void, unint64_t))v350)(v147, v159);
LABEL_61:
              long long v181 = OSSignposter.logHandle.getter();
              os_signpost_type_t v182 = static os_signpost_type_t.begin.getter();
              char v183 = OS_os_log.signpostsEnabled.getter();
              uint64_t v184 = v303;
              if (v183)
              {
                uint64_t v185 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
                uint64_t v186 = v307;
                uint64_t v187 = v316;
                v185(v307, v303, v316);
                uint64_t v188 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v188 = 0;
                os_signpost_id_t v189 = OSSignpostID.rawValue.getter();
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v181, v182, v189, "Tamale.TrackManager.matchSelectedTracks.bipartiteMatching", "", v188, 2u);
                swift_slowDealloc();

                uint64_t v184 = v303;
                uint64_t v190 = (void (*)(char *, uint64_t))v350;
                ((void (*)(char *, uint64_t))v350)(v186, v187);
                uint64_t v116 = v344;
                uint64_t v172 = v312;
              }
              else
              {

                uint64_t v185 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
                uint64_t v116 = v344;
                uint64_t v187 = v316;
                uint64_t v186 = v307;
                uint64_t v172 = v312;
                uint64_t v190 = (void (*)(char *, uint64_t))v350;
              }
              v185(v186, v184, v187);
              type metadata accessor for OSSignpostIntervalState();
              swift_allocObject();
              uint64_t v98 = (char *)OSSignpostIntervalState.init(id:isOpen:)();
              swift_release();
              uint64_t v143 = v320;
              v190(v184, v187);
              (*(void (**)(char *, uint64_t))(v317 + 8))(v302, v322);
              uint64_t v61 = v342;
              uint64_t v153 = v309;
              if (v309) {
                goto LABEL_50;
              }
              goto LABEL_65;
            }
            (*(void (**)(char *, uint64_t))(v168 + 8))(v169, v149);
            long long v154 = &qword_10052CF00;
            uint64_t v155 = v171;
          }
          sub_10000FBD8(v155, v154);
          uint64_t v98 = 0;
        }
        else
        {
LABEL_45:
          uint64_t v98 = 0;
          uint64_t v36 = v325;
          uint64_t v61 = v342;
          uint64_t v116 = v344;
          uint64_t v143 = v320;
          uint64_t v153 = v309;
        }
        uint64_t v172 = v312;
        if (v153)
        {
LABEL_50:
          id v173 = v153;
          goto LABEL_66;
        }
LABEL_65:
        id v191 = objc_allocWithZone((Class)FTBipartiteMatcher);
        id v173 = [v191 initWithInitialSize:v308];
LABEL_66:
        uint64_t v192 = v354 + 4;
        id v193 = v153;
        uint64_t v350 = (uint64_t)v173;
        id v194 = [v173 computeMatchingForCostMatrix:v192 withRowCount:v172 columnCount:v348];
        uint64_t v128 = (char *)_swiftEmptyArrayStorage;
        if (!v194)
        {
LABEL_80:
          uint64_t v204 = v322;
          if (v98)
          {
            uint64_t v205 = (uint64_t)v293;
            sub_10000FB74(v321, (uint64_t)v293, &qword_10052CF08);
            if (v313(v205, 1, v204) == 1)
            {
              id v194 = (id)sub_10000FBD8(v205, &qword_10052CF08);
            }
            else
            {
              uint64_t v206 = v317;
              long long v207 = v292;
              (*(void (**)(char *, uint64_t, uint64_t))(v317 + 32))(v292, v205, v204);
              swift_retain();
              uint64_t v208 = v204;
              long long v209 = OSSignposter.logHandle.getter();
              uint64_t v210 = v301;
              OSSignpostIntervalState.signpostID.getter();
              LODWORD(v349) = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                long long v211 = v295;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                uint64_t v212 = v296;
                uint64_t v213 = v297;
                if (((unsigned int (*)(char *, uint64_t))v296[11])(v211, v297) == enum case for OSSignpostError.doubleEnd(_:))
                {
                  uint64_t v214 = "[Error] Interval already ended";
                }
                else
                {
                  v212[1]((unint64_t)v211, v213);
                  uint64_t v214 = "";
                }
                long long v215 = v301;
                uint64_t v216 = v320;
                long long v217 = v307;
                uint64_t v218 = v316;
                (*(void (**)(char *, char *, uint64_t))(v320 + 16))(v307, v301, v316);
                long long v219 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)long long v219 = 0;
                os_signpost_id_t v220 = OSSignpostID.rawValue.getter();
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v209, (os_signpost_type_t)v349, v220, "Tamale.TrackManager.matchSelectedTracks.bipartiteMatching", v214, v219, 2u);
                swift_slowDealloc();

                uint64_t v221 = *(void (**)(char *, uint64_t))(v216 + 8);
                v221(v215, v218);
                (*(void (**)(char *, uint64_t))(v317 + 8))(v292, v322);
                swift_release();
                id v194 = (id)((uint64_t (*)(char *, uint64_t))v221)(v217, v218);
              }
              else
              {

                (*(void (**)(char *, uint64_t))(v143 + 8))(v210, v316);
                (*(void (**)(char *, uint64_t))(v206 + 8))(v207, v208);
                id v194 = (id)swift_release();
              }
              uint64_t v116 = v344;
              uint64_t v61 = v342;
            }
          }
          __chkstk_darwin(v194);
          *(&v292 - 6) = v128;
          *(&v292 - 5) = v61;
          *(&v292 - 4) = (char *)&v354;
          *(&v292 - 3) = (char *)v348;
          *((float *)&v292 - 4) = a5;
          uint64_t v222 = swift_bridgeObjectRetain();
          uint64_t v223 = (char *)sub_1003C1994(v222, (float (*)(char *, char *, void, char *))sub_1003C6E18, (uint64_t)(&v292 - 8));
          v341 = 0;
          swift_bridgeObjectRelease();
          swift_release();

          swift_release();
          sub_10000FBD8((uint64_t)v318, &qword_10052CF00);
          sub_10000FBD8(v321, &qword_10052CF08);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v107 = v223;
          goto LABEL_91;
        }
        long long v195 = v194;
        sub_10006F238();
        unint64_t v135 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v135 >> 62))
        {
          uint64_t v196 = *(void *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v196)
          {
LABEL_79:
            id v194 = (id)swift_bridgeObjectRelease();
            uint64_t v116 = v344;
            goto LABEL_80;
          }
LABEL_69:
          int64_t v349 = (int64_t)v98;
          v351 = v128;
          uint64_t result = sub_100040730(0, v196 & ~(v196 >> 63), 0);
          if (v196 < 0)
          {
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            return result;
          }
          uint64_t v198 = 0;
          uint64_t v128 = v351;
          do
          {
            if ((v135 & 0xC000000000000001) != 0) {
              id v199 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v199 = *(id *)(v135 + 8 * v198 + 32);
            }
            uint64_t v200 = v199;
            id v201 = [v199 integerValue];

            v351 = v128;
            unint64_t v203 = *((void *)v128 + 2);
            unint64_t v202 = *((void *)v128 + 3);
            if (v203 >= v202 >> 1)
            {
              sub_100040730(v202 > 1, v203 + 1, 1);
              uint64_t v128 = v351;
            }
            ++v198;
            *((void *)v128 + 2) = v203 + 1;
            *(void *)&v128[8 * v203 + 32] = v201;
            uint64_t v36 = v325;
          }
          while (v196 != v198);
          id v194 = (id)swift_bridgeObjectRelease();
          uint64_t v61 = v342;
          uint64_t v116 = v344;
          uint64_t v143 = v320;
          uint64_t v98 = (char *)v349;
          goto LABEL_80;
        }
LABEL_78:
        swift_bridgeObjectRetain();
        uint64_t v196 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v196) {
          goto LABEL_79;
        }
        goto LABEL_69;
      }
      (*(void (**)(char *, uint64_t))(v101 + 8))(v133, v102);
      uint64_t v132 = &qword_10052CF00;
    }
    sub_10000FBD8(v130, v132);
    unint64_t v135 = 0;
    goto LABEL_23;
  }
  uint64_t v105 = v319;
  int64_t v106 = *((void *)v319 + 2);
  long long v107 = (char *)_swiftEmptyArrayStorage;
  if (v106)
  {
    v351 = (char *)_swiftEmptyArrayStorage;
    sub_100040E5C(0, v106, 0);
    uint64_t v108 = (uint64_t)&v105[(*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80)];
    uint64_t v109 = *(void *)(v345 + 72);
    uint64_t v110 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v345 + 56);
    do
    {
      sub_1003C1DB8(v108, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v111 = &v95[*(int *)(v346 + 48)];
      uint64_t v112 = *(int *)(v346 + 64);
      sub_1003C1DB8((uint64_t)v73, (uint64_t)v95, (uint64_t (*)(void))type metadata accessor for CVDetection);
      (*v110)(v111, 1, 1, v343);
      *(_DWORD *)&v95[v112] = 0;
      sub_1003B4A5C((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v113 = v351;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040E5C(0, *((void *)v113 + 2) + 1, 1);
        uint64_t v113 = v351;
      }
      unint64_t v115 = *((void *)v113 + 2);
      unint64_t v114 = *((void *)v113 + 3);
      uint64_t v116 = v344;
      if (v115 >= v114 >> 1)
      {
        sub_100040E5C(v114 > 1, v115 + 1, 1);
        uint64_t v113 = v351;
      }
      *((void *)v113 + 2) = v115 + 1;
      sub_10000FC34((uint64_t)v95, (uint64_t)&v113[((*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80))+ *(void *)(v340 + 72) * v115], &qword_10051A098);
      v108 += v109;
      --v106;
    }
    while (v106);
    v341 = 0;
    uint64_t v36 = v325;
    long long v107 = v113;
  }
  else
  {
    v341 = 0;
    uint64_t v116 = v344;
  }
LABEL_91:
  int64_t v224 = *((void *)v107 + 2);
  uint64_t v350 = (uint64_t)v107;
  int64_t v348 = v224;
  if (v224)
  {
    uint64_t v225 = (uint64_t)&v107[(*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80)];
    int64_t v349 = *(void *)(v340 + 72);
    v347 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v345 + 48);
    swift_bridgeObjectRetain();
    unint64_t v226 = _swiftEmptyArrayStorage;
    uint64_t v227 = (uint64_t)v336;
    uint64_t v228 = (uint64_t)v339;
    do
    {
      sub_10000FB74(v225, v227, &qword_10051A098);
      uint64_t v229 = *(int *)(v346 + 48);
      uint64_t v230 = v228 + v229;
      uint64_t v231 = *(int *)(v346 + 64);
      uint64_t v232 = v227 + v229;
      sub_1003C1DB8(v227, v228, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FB74(v232, v230, &qword_10051CB10);
      *(_DWORD *)(v228 + v231) = *(_DWORD *)(v227 + v231);
      uint64_t v233 = v338;
      sub_10000FC34(v230, v338, &qword_10051CB10);
      sub_1003B4A5C(v228, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FBD8(v227, &qword_10051A098);
      if ((*v347)(v233, 1, v343) == 1)
      {
        sub_10000FBD8(v233, &qword_10051CB10);
      }
      else
      {
        uint64_t v234 = v233;
        uint64_t v235 = v326;
        sub_1003C1D08(v234, v326, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003C1D08(v235, v337, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v226 = (void *)sub_100328C90(0, v226[2] + 1, 1, (unint64_t)v226);
        }
        unint64_t v237 = v226[2];
        unint64_t v236 = v226[3];
        if (v237 >= v236 >> 1) {
          unint64_t v226 = (void *)sub_100328C90(v236 > 1, v237 + 1, 1, (unint64_t)v226);
        }
        v226[2] = v237 + 1;
        sub_1003C1D08(v337, (uint64_t)v226+ ((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80))+ *(void *)(v345 + 72) * v237, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      v225 += v349;
      --v224;
    }
    while (v224);
    uint64_t v238 = v350;
    swift_bridgeObjectRelease();
    uint64_t v36 = v325;
  }
  else
  {
    unint64_t v226 = _swiftEmptyArrayStorage;
    uint64_t v238 = (uint64_t)v107;
  }
  uint64_t v239 = sub_10033178C((uint64_t)v226);
  swift_bridgeObjectRelease();
  uint64_t v240 = swift_bridgeObjectRetain();
  v341 = sub_1003C0CBC(v240, v239);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v351 = (char *)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  uint64_t v241 = (uint64_t)v328;
  uint64_t result = v238;
  if (v348)
  {
    unint64_t v242 = 0;
    unint64_t v243 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v345 + 48);
    while (v242 < *(void *)(result + 16))
    {
      unint64_t v244 = (*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
      uint64_t v245 = *(void *)(v340 + 72);
      sub_10000FB74(result + v244 + v245 * v242, v241, &qword_10051A098);
      if ((*v243)(v241 + *(int *)(v346 + 48), 1, v343) == 1)
      {
        sub_10000FBD8(v241, &qword_10051A098);
      }
      else
      {
        sub_10000FC34(v241, v331, &qword_10051A098);
        uint64_t v246 = v351;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040E5C(0, *((void *)v246 + 2) + 1, 1);
          uint64_t v246 = v351;
        }
        unint64_t v248 = *((void *)v246 + 2);
        unint64_t v247 = *((void *)v246 + 3);
        if (v248 >= v247 >> 1)
        {
          sub_100040E5C(v247 > 1, v248 + 1, 1);
          uint64_t v246 = v351;
        }
        *((void *)v246 + 2) = v248 + 1;
        sub_10000FC34(v331, (uint64_t)&v246[v244 + v248 * v245], &qword_10051A098);
        uint64_t v241 = (uint64_t)v328;
      }
      ++v242;
      uint64_t result = v350;
      if (v348 == v242) {
        goto LABEL_114;
      }
    }
    __break(1u);
    goto LABEL_144;
  }
LABEL_114:
  swift_bridgeObjectRelease();
  uint64_t v249 = (uint64_t)v351;
  int64_t v250 = *((void *)v351 + 2);
  if (v250)
  {
    v351 = (char *)_swiftEmptyArrayStorage;
    sub_100040E8C(0, v250, 0);
    unint64_t v251 = (*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
    uint64_t v338 = v249;
    uint64_t v252 = v249 + v251;
    v342 = *(char **)(v340 + 72);
    v347 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v345 + 48);
    while (1)
    {
      int64_t v349 = v250;
      sub_10000FB74(v252, v116, &qword_10051A098);
      uint64_t v253 = v36;
      uint64_t v254 = v346;
      uint64_t v255 = *(int *)(v346 + 48);
      uint64_t v256 = v334;
      uint64_t v257 = v334 + v255;
      uint64_t v258 = *(int *)(v346 + 64);
      uint64_t v259 = v344 + v255;
      sub_1003C1DB8(v344, v334, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FB74(v259, v257, &qword_10051CB10);
      int v260 = *(_DWORD *)(v344 + v258);
      *(_DWORD *)(v256 + v258) = v260;
      uint64_t v261 = v256;
      uint64_t v116 = v344;
      sub_1003C1D08(v261, v253, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v262 = v335 + *(int *)(v254 + 48);
      uint64_t v263 = *(int *)(v254 + 64);
      uint64_t v264 = v335;
      sub_1003C1DB8(v116, v335, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FB74(v259, v262, &qword_10051CB10);
      *(_DWORD *)(v264 + v263) = v260;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v347)(v262, 1, v343);
      if (result == 1) {
        goto LABEL_146;
      }
      sub_1003C1D08(v262, v253 + *(int *)(v333 + 48), (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003B4A5C(v264, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FBD8(v257, &qword_10051CB10);
      sub_10000FBD8(v116, &qword_10051A098);
      uint64_t v265 = v351;
      uint64_t v36 = v253;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040E8C(0, *((void *)v265 + 2) + 1, 1);
        uint64_t v265 = v351;
      }
      int64_t v266 = v349;
      unint64_t v268 = *((void *)v265 + 2);
      unint64_t v267 = *((void *)v265 + 3);
      if (v268 >= v267 >> 1)
      {
        sub_100040E8C(v267 > 1, v268 + 1, 1);
        uint64_t v265 = v351;
      }
      *((void *)v265 + 2) = v268 + 1;
      sub_10000FC34(v36, (uint64_t)&v265[((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80))+ *(void *)(v332 + 72) * v268], &qword_100524EB0);
      v252 += (uint64_t)v342;
      int64_t v250 = v266 - 1;
      if (!v250)
      {
        int64_t v349 = (int64_t)v265;
        swift_release();
        goto LABEL_124;
      }
    }
  }
  swift_release();
  int64_t v349 = (int64_t)_swiftEmptyArrayStorage;
LABEL_124:
  v351 = (char *)_swiftEmptyArrayStorage;
  uint64_t v269 = (uint64_t)v327;
  uint64_t result = v350;
  int64_t v270 = v348;
  if (v348)
  {
    unint64_t v271 = 0;
    uint64_t v272 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v345 + 48);
    while (v271 < *(void *)(result + 16))
    {
      unint64_t v273 = (*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80);
      uint64_t v274 = *(void *)(v340 + 72);
      sub_10000FB74(result + v273 + v274 * v271, v269, &qword_10051A098);
      if ((*v272)(v269 + *(int *)(v346 + 48), 1, v343) == 1)
      {
        sub_10000FC34(v269, v329, &qword_10051A098);
        v275 = v351;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040E5C(0, *((void *)v275 + 2) + 1, 1);
          v275 = v351;
        }
        unint64_t v277 = *((void *)v275 + 2);
        unint64_t v276 = *((void *)v275 + 3);
        if (v277 >= v276 >> 1)
        {
          sub_100040E5C(v276 > 1, v277 + 1, 1);
          v275 = v351;
        }
        *((void *)v275 + 2) = v277 + 1;
        sub_10000FC34(v329, (uint64_t)&v275[v273 + v277 * v274], &qword_10051A098);
        uint64_t v269 = (uint64_t)v327;
      }
      else
      {
        sub_10000FBD8(v269, &qword_10051A098);
      }
      ++v271;
      uint64_t result = v350;
      if (v270 == v271) {
        goto LABEL_135;
      }
    }
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_135:
  swift_bridgeObjectRelease();
  v278 = v351;
  int64_t v279 = *((void *)v351 + 2);
  if (v279)
  {
    v351 = (char *)_swiftEmptyArrayStorage;
    sub_100040D64(0, v279, 0);
    uint64_t v280 = *(unsigned __int8 *)(v340 + 80);
    int64_t v348 = (int64_t)v278;
    uint64_t v281 = (uint64_t)&v278[(v280 + 32) & ~v280];
    uint64_t v350 = *(void *)(v340 + 72);
    uint64_t v282 = v351;
    uint64_t v283 = (uint64_t)v310;
    uint64_t v284 = (uint64_t)v339;
    uint64_t v285 = (uint64_t)v330;
    do
    {
      sub_10000FB74(v281, v284, &qword_10051A098);
      uint64_t v286 = *(int *)(v346 + 48);
      uint64_t v287 = v285 + v286;
      uint64_t v288 = *(int *)(v346 + 64);
      uint64_t v289 = v284 + v286;
      sub_1003C1DB8(v284, v285, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FB74(v289, v287, &qword_10051CB10);
      *(_DWORD *)(v285 + v288) = *(_DWORD *)(v284 + v288);
      sub_1003C1D08(v285, v283, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000FBD8(v287, &qword_10051CB10);
      sub_10000FBD8(v284, &qword_10051A098);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040D64(0, *((void *)v282 + 2) + 1, 1);
        uint64_t v282 = v351;
      }
      unint64_t v291 = *((void *)v282 + 2);
      unint64_t v290 = *((void *)v282 + 3);
      if (v291 >= v290 >> 1)
      {
        sub_100040D64(v290 > 1, v291 + 1, 1);
        uint64_t v282 = v351;
      }
      *((void *)v282 + 2) = v291 + 1;
      sub_1003C1D08(v283, (uint64_t)&v282[((*(unsigned __int8 *)(v345 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v345 + 80))+ *(void *)(v345 + 72) * v291], (uint64_t (*)(void))type metadata accessor for CVDetection);
      v281 += v350;
      --v279;
    }
    while (v279);
  }
  swift_release();
  return v349;
}

uint64_t sub_1003C5BF8(char *a1, uint64_t a2, int a3)
{
  int v25 = a3;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v13 = &v22[-v12];
  if (qword_1005180E8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for OSSignposter();
  sub_10000F378(v14, (uint64_t)qword_10052C9D8);
  float v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v23 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_7;
  }
  if ((v25 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
LABEL_7:

      return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v13, v7);
    }
    goto LABEL_12;
  }
  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a1 >> 11 == 27)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (a1 >> 16 > 0x10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  a1 = sub_10018C6C4();
LABEL_12:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v17 = v24;
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v24 + 88))(v6, v4) == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v18 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v6, v4);
    uint64_t v18 = "";
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v10, v13, v7);
  uint64_t v19 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v19 = 0;
  os_signpost_id_t v20 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, (os_signpost_type_t)v23, v20, a1, v18, v19, 2u);
  swift_slowDealloc();

  uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v21(v13, v7);
  return ((uint64_t (*)(unsigned char *, uint64_t))v21)(v10, v7);
}

void *sub_1003C5F54(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  id v109 = a3;
  uint64_t v106 = a1;
  uint64_t v6 = sub_10000F214(&qword_10052CED8);
  __chkstk_darwin(v6 - 8);
  uint64_t v110 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for CVTrackSnapshot(0);
  uint64_t v105 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for CVDetection();
  uint64_t v10 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v104 = (uint64_t)&v99 - v14;
  uint64_t v112 = type metadata accessor for DetectionResult(0);
  __chkstk_darwin(v112);
  uint64_t v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v99 - v18;
  uint64_t v20 = type metadata accessor for OSSignpostID();
  uint64_t v117 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v113 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v111 = (char *)&v99 - v23;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v99 - v25;
  if (qword_1005180E8 != -1) {
    swift_once();
  }
  uint64_t v108 = type metadata accessor for OSSignposter();
  uint64_t v27 = sub_10000F378(v108, (uint64_t)qword_10052C9D8);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  sub_1003C1DB8(a2, (uint64_t)v19, type metadata accessor for DetectionResult);
  uint64_t v116 = a2;
  sub_1003C1DB8(a2, (uint64_t)v16, type metadata accessor for DetectionResult);
  uint64_t v28 = v106;
  swift_bridgeObjectRetain_n();
  uint64_t v107 = v27;
  uint64_t v29 = OSSignposter.logHandle.getter();
  int v30 = static os_signpost_type_t.begin.getter();
  char v31 = OS_os_log.signpostsEnabled.getter();
  uint64_t v118 = v20;
  uint64_t v119 = v26;
  if (v31)
  {
    int v100 = v30;
    os_log_t v101 = v29;
    uint64_t v102 = v16;
    uint64_t v32 = *(void (**)(void, void, void))(v117 + 16);
    unint64_t v114 = (v117 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    unint64_t v115 = v32;
    v32(v111, v26, v20);
    uint64_t v33 = swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    v122[0] = v99;
    *(_DWORD *)uint64_t v33 = 136315650;
    uint64_t v34 = v104;
    sub_1003C1DB8((uint64_t)v19, v104, (uint64_t (*)(void))type metadata accessor for CVDetection);
    unint64_t v35 = 0xE600000000000000;
    uint64_t v36 = 0x7463656A626FLL;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        unint64_t v35 = 0xE500000000000000;
        uint64_t v36 = 0x6573726170;
        break;
      case 2u:
        unint64_t v35 = 0xE400000000000000;
        uint64_t v36 = 1954047348;
        break;
      case 3u:
        unint64_t v35 = 0xE700000000000000;
        uint64_t v36 = 0x65646F63726162;
        break;
      case 4u:
        unint64_t v35 = 0xE700000000000000;
        uint64_t v36 = 0x70696C43707061;
        break;
      case 5u:
        unint64_t v35 = 0xED00007478655467;
        uint64_t v36 = 0x6E696D6165727473;
        break;
      default:
        break;
    }
    sub_1003B4A5C(v34, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v121 = sub_1003806B0(v36, v35, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B4A5C((uint64_t)v19, type metadata accessor for DetectionResult);
    *(_WORD *)(v33 + 12) = 2048;
    uint64_t v39 = v28;
    uint64_t v40 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    uint64_t v121 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2048;
    uint64_t v41 = *(void *)(*(void *)&v102[*(int *)(v112 + 20)] + 16);
    sub_1003B4A5C((uint64_t)v102, type metadata accessor for DetectionResult);
    uint64_t v121 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v42 = v111;
    os_signpost_id_t v43 = OSSignpostID.rawValue.getter();
    os_log_t v44 = v101;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, (os_signpost_type_t)v100, v43, "Tamale.TrackManager.matchSelectedTracks", "%s size: %ld x %ld", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v20 = v118;
    (*(void (**)(char *, uint64_t))(v117 + 8))(v42, v118);
    unint64_t v38 = v114;
    uint64_t v37 = v115;
  }
  else
  {
    sub_1003B4A5C((uint64_t)v16, type metadata accessor for DetectionResult);

    swift_bridgeObjectRelease();
    sub_1003B4A5C((uint64_t)v19, type metadata accessor for DetectionResult);
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(void, void, void))(v117 + 16);
    unint64_t v38 = (v117 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v39 = v28;
  }
  uint64_t v45 = v116;
  unint64_t v114 = v38;
  unint64_t v115 = v37;
  v37(v113, v119, v20);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v106 = OSSignpostIntervalState.init(id:isOpen:)();
  v122[0] = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v46 = swift_bridgeObjectRetain();
  sub_1003C139C(v46, (uint64_t)sub_1003AF584, 0, (uint64_t)v122, (uint64_t (*)(void, void, void, void))sub_1003BE154);
  uint64_t v48 = v47;
  uint64_t v113 = 0;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v39 + 16);
  uint64_t v116 = v48;
  unint64_t v50 = *(void *)(v48 + 16);
  uint64_t v51 = v49 - v50;
  uint64_t v111 = (char *)v50;
  if (v49 != v50)
  {
    uint64_t v104 = v49;
    if (qword_100517EA8 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    uint64_t v53 = sub_10000F378(v52, (uint64_t)qword_10055E310);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v103 = v53;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 134217984;
      v122[0] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "matchSelectedTracks: duplicates found in estimates. Removed %ld .", v56, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v57 = v104;
    v122[0] = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v58 = swift_bridgeObjectRetain();
    uint64_t v59 = v113;
    sub_1003C139C(v58, (uint64_t)sub_1003AF5D4, 0, (uint64_t)v122, (uint64_t (*)(void, void, void, void))sub_1003BDDA8);
    uint64_t v61 = v60;
    uint64_t v113 = v59;
    swift_bridgeObjectRelease();
    uint64_t v62 = *(void *)(v61 + 16);
    if (v57 == v62
      && (uint64_t v63 = swift_bridgeObjectRetain(),
          uint64_t v64 = sub_100331A8C(v63),
          swift_bridgeObjectRelease(),
          uint64_t v65 = *(void *)(v64 + 16),
          swift_bridgeObjectRelease(),
          v57 == v65))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.info.getter();
      int v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 134218496;
        v122[0] = v104;
        LODWORD(v104) = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v69 + 12) = 2048;
        swift_bridgeObjectRelease();
        v122[0] = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 22) = 2048;
        uint64_t v103 = v69 + 24;
        uint64_t v70 = swift_bridgeObjectRetain();
        uint64_t v71 = sub_100331A8C(v70);
        swift_bridgeObjectRelease();
        uint64_t v72 = *(void *)(v71 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v122[0] = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v104, "matchSelectedTracks: duplicates found in tracks! original %ld, deduped %ld, set %ld", (uint8_t *)v69, 0x20u);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
    unint64_t v50 = (unint64_t)v111;
  }
  uint64_t v112 = *(void *)(v45 + *(int *)(v112 + 20));
  int64_t v73 = _swiftEmptyArrayStorage;
  uint64_t v74 = v116;
  if (v50)
  {
    v122[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_100040D64(0, v50, 0);
    uint64_t v75 = v74 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
    uint64_t v76 = *(void *)(v105 + 72);
    int64_t v73 = (void *)v122[0];
    unint64_t v77 = v50;
    do
    {
      sub_1003C1DB8(v75, (uint64_t)v9, type metadata accessor for CVTrackSnapshot);
      sub_1003C1DB8((uint64_t)&v9[*(int *)(v120 + 24)], (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1003B4A5C((uint64_t)v9, type metadata accessor for CVTrackSnapshot);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040D64(0, v73[2] + 1, 1);
        int64_t v73 = (void *)v122[0];
      }
      unint64_t v79 = v73[2];
      unint64_t v78 = v73[3];
      if (v79 >= v78 >> 1)
      {
        sub_100040D64(v78 > 1, v79 + 1, 1);
        int64_t v73 = (void *)v122[0];
      }
      v73[2] = v79 + 1;
      sub_1003C1D08((uint64_t)v12, (uint64_t)v73+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v79, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v75 += v76;
      --v77;
    }
    while (v77);
    uint64_t v74 = v116;
    unint64_t v50 = (unint64_t)v111;
  }
  if (v50 >= v73[2]) {
    unint64_t v80 = v73[2];
  }
  else {
    unint64_t v80 = v50;
  }
  uint64_t v81 = (char *)v112;
  if (v80)
  {
    sub_10000F214(&qword_100525108);
    uint64_t v82 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v82 = &_swiftEmptyDictionarySingleton;
  }
  v122[0] = (uint64_t)v82;
  swift_bridgeObjectRetain();
  uint64_t v83 = swift_bridgeObjectRetain();
  uint64_t v84 = v113;
  sub_1003BF854(v83, v74, 1, v122);
  if (v84)
  {
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1003C6E00);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v85 = v122[0];
  uint64_t v86 = swift_retain();
  uint64_t v87 = (char *)sub_1001EA330(v86);
  swift_release();
  uint64_t v88 = sub_10000F214(&qword_10052CEE0);
  uint64_t v89 = (uint64_t)v110;
  uint64_t v90 = &v110[*(int *)(v88 + 48)];
  (*(void (**)(char *, uint64_t))(*(void *)(v108 - 8) + 16))(v110, v107);
  v115(v90, v119, v118);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v89, 0, 1, v88);
  id v91 = v109;
  if (v109 == (id)1)
  {
    swift_bridgeObjectRetain();
    uint64_t v92 = _swiftEmptyArrayStorage;
  }
  else
  {
    id v93 = v109;
    uint64_t v92 = (void *)sub_1003C3328(v87, v81, v91, v89, a4);
    uint64_t v95 = v94;
    uint64_t v81 = v96;
    sub_10010DE60(v91);
    swift_release();
    uint64_t v87 = v95;
  }
  sub_10000FBD8(v89, &qword_10052CED8);
  uint64_t v97 = sub_1003AF600((uint64_t)v92, (uint64_t)v87, (uint64_t)v81, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1003C5BF8("Tamale.TrackManager.matchSelectedTracks", 39, 2);
  swift_release();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v119, v118);
  return v97;
}

void sub_1003C6E18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  sub_1003A4F64(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(float *)(v4 + 48));
}

uint64_t sub_1003C6E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1003AF858(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t sub_1003C6E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1003A775C(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t sub_1003C6E38(uint64_t a1)
{
  return sub_1003A7888(a1, v1);
}

uint64_t sub_1003C6E40()
{
  uint64_t v1 = *(void *)(type metadata accessor for StreamingBarcodeDetectorResult(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for CVDetection() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  swift_release();
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v0 + v2, v6);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = v0 + v5;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7(v0 + v5, v6);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      v7(v0 + v5, v6);
      uint64_t v9 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v8 + v9[13];
      uint64_t v11 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
      uint64_t v13 = (uint64_t *)(v8 + v9[14]);
      unint64_t v14 = v13[1];
      if (v14 >> 60 != 15) {
        sub_100038B34(*v13, v14);
      }
      if (*(void *)(v8 + v9[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      v7(v0 + v5, v6);
      uint64_t v15 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      v7(v0 + v5, v6);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      v7(v0 + v5, v6);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_deallocObject();
}

void sub_1003C721C(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for StreamingBarcodeDetectorResult(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for CVDetection() - 8);
  uint64_t v9 = v2[2];
  uint64_t v10 = (void (*)(char *))v2[3];
  uint64_t v11 = v2[4];
  uint64_t v12 = (uint64_t)v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  sub_1001663AC(a1, a2, v9, v10, v11, (uint64_t)v2 + v6, v12);
}

uint64_t sub_1003C7308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003C7318()
{
  return swift_release();
}

uint64_t sub_1003C7324(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CVDetection() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_1003A7B50(a1, v5, v6, v7, v8);
}

uint64_t sub_1003C7424()
{
  uint64_t v1 = *(void *)(type metadata accessor for CVDetection() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v3 = v0 + v2;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v5 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v2, v5);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v2, v6);
      uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v3 + v7[13];
      uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      uint64_t v11 = (uint64_t *)(v3 + v7[14]);
      unint64_t v12 = v11[1];
      if (v12 >> 60 != 15) {
        sub_100038B34(*v11, v12);
      }
      if (*(void *)(v3 + v7[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v0 + v2, v13);
      uint64_t v14 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v0 + v2, v15);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_deallocObject();
}

uint64_t sub_1003C77F0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000F878;
  v3[2] = v2;
  return _swift_task_switch(sub_1003A84D4, v2, 0);
}

ValueMetadata *_s13ConfigurationVMa_0()
{
  return &_s13ConfigurationVN_0;
}

uint64_t sub_1003C78AC(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10052D008);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003C851C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1003C7A14()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1003C7A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003C8284(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003C7A6C(uint64_t a1)
{
  unint64_t v2 = sub_1003C851C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C7AA8(uint64_t a1)
{
  unint64_t v2 = sub_1003C851C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1003C7AE4(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1003C8370(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1003C7B10(void *a1)
{
  return sub_1003C78AC(a1);
}

BOOL sub_1003C7B2C(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t sub_1003C7B5C()
{
  unint64_t result = qword_10052CF78;
  if (!qword_10052CF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052CF78);
  }
  return result;
}

unint64_t sub_1003C7BB0(uint64_t a1)
{
  unint64_t result = sub_1003C7BD8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003C7BD8()
{
  unint64_t result = qword_10052CFA8;
  if (!qword_10052CFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052CFA8);
  }
  return result;
}

unint64_t sub_1003C7C30(uint64_t a1)
{
  unint64_t result = sub_1003C7C58();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003C7C58()
{
  unint64_t result = qword_10052CFD8;
  if (!qword_10052CFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052CFD8);
  }
  return result;
}

uint64_t sub_1003C7CAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1003C7CC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = sub_10000F214(&qword_10051C788);
  float v4 = (int *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)v38 - v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)v38 - v10);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v38 - v13;
  v38[0] = (uint64_t)v38 - v13;
  long long v41 = *v1;
  uint64_t v42 = *((void *)v1 + 2);
  sub_10000F214(&qword_10052CFE8);
  Binding.projectedValue.getter();
  uint64_t v15 = v43;
  uint64_t v16 = v44;
  uint64_t v17 = v45;
  swift_getKeyPath();
  uint64_t v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  long long v18 = v41;
  int v19 = v42;
  int v20 = *((_DWORD *)v1 + 6);
  LODWORD(v17) = *((_DWORD *)v1 + 7);
  *uint64_t v11 = swift_getKeyPath();
  v38[1] = sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = (uint64_t *)((char *)v11 + v4[17]);
  uint64_t *v21 = swift_getKeyPath();
  sub_10000F214(&qword_10051C890);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = (char *)v11 + v4[18];
  *(_OWORD *)uint64_t v22 = v18;
  *((_DWORD *)v22 + 4) = v19;
  *(_DWORD *)((char *)v11 + v4[19]) = v20;
  uint64_t v23 = (uint64_t *)((char *)v11 + v4[20]);
  *uint64_t v23 = 0xD000000000000017;
  v23[1] = 0x800000010042CFB0;
  *(uint64_t *)((char *)v11 + v4[21]) = 0x3F80000000000000;
  uint64_t v24 = (uint64_t *)((char *)v11 + v4[22]);
  *uint64_t v24 = nullsub_2;
  v24[1] = 0;
  sub_1003C8154((uint64_t)v11, (uint64_t)v14);
  long long v41 = *v2;
  uint64_t v42 = *((void *)v2 + 2);
  Binding.projectedValue.getter();
  uint64_t v26 = v43;
  uint64_t v25 = v44;
  uint64_t v27 = v45;
  swift_getKeyPath();
  uint64_t v43 = v26;
  uint64_t v44 = v25;
  uint64_t v45 = v27;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  long long v28 = v41;
  LODWORD(v27) = v42;
  *uint64_t v8 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = (uint64_t *)((char *)v8 + v4[17]);
  uint64_t *v29 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  int v30 = (char *)v8 + v4[18];
  *(_OWORD *)int v30 = v28;
  *((_DWORD *)v30 + 4) = v27;
  *(_DWORD *)((char *)v8 + v4[19]) = v17;
  char v31 = (uint64_t *)((char *)v8 + v4[20]);
  void *v31 = 0xD000000000000011;
  v31[1] = 0x800000010042CFD0;
  *(uint64_t *)((char *)v8 + v4[21]) = 0x3F80000000000000;
  uint64_t v32 = (uint64_t *)((char *)v8 + v4[22]);
  *uint64_t v32 = nullsub_2;
  v32[1] = 0;
  sub_1003C8154((uint64_t)v8, (uint64_t)v11);
  uint64_t v33 = v38[0];
  sub_1003C81BC(v38[0], (uint64_t)v8);
  uint64_t v34 = v39;
  sub_1003C81BC((uint64_t)v11, v39);
  uint64_t v35 = v40;
  sub_1003C81BC((uint64_t)v8, v40);
  uint64_t v36 = sub_10000F214(&qword_10052CFF0);
  sub_1003C81BC(v34, v35 + *(int *)(v36 + 48));
  sub_1003C8224((uint64_t)v11);
  sub_1003C8224(v33);
  sub_1003C8224(v34);
  return sub_1003C8224((uint64_t)v8);
}

unint64_t sub_1003C80C0(void *a1)
{
  a1[1] = sub_1000DE964();
  a1[2] = sub_1000DECAC();
  unint64_t result = sub_1003C80F8();
  a1[3] = result;
  return result;
}

unint64_t sub_1003C80F8()
{
  unint64_t result = qword_10052CFE0;
  if (!qword_10052CFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052CFE0);
  }
  return result;
}

uint64_t sub_1003C8154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051C788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C81BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051C788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C8224(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051C788);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003C8284(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001CLL && a2 == 0x800000010042CFF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000010042D010)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

float sub_1003C8370(void *a1)
{
  uint64_t v4 = sub_10000F214(&qword_10052CFF8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_1003C851C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v10[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    float v2 = v8;
    v10[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1003C851C()
{
  unint64_t result = qword_10052D000;
  if (!qword_10052D000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D000);
  }
  return result;
}

unsigned char *_s13ConfigurationV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C863CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s13ConfigurationV10CodingKeysOMa()
{
  return &_s13ConfigurationV10CodingKeysON;
}

uint64_t initializeWithCopy for TrackManagerConfigurationForm(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TrackManagerConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

_OWORD *assignWithTake for TrackManagerConfigurationForm(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for TrackManagerConfigurationForm()
{
  return &type metadata for TrackManagerConfigurationForm;
}

unint64_t sub_1003C8790()
{
  unint64_t result = qword_10052D010;
  if (!qword_10052D010)
  {
    sub_10000F69C(&qword_10052D018);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D010);
  }
  return result;
}

unint64_t sub_1003C87F0()
{
  unint64_t result = qword_10052D020;
  if (!qword_10052D020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D020);
  }
  return result;
}

unint64_t sub_1003C8848()
{
  unint64_t result = qword_10052D028;
  if (!qword_10052D028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D028);
  }
  return result;
}

unint64_t sub_1003C88A0()
{
  unint64_t result = qword_10052D030;
  if (!qword_10052D030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D030);
  }
  return result;
}

Class sub_1003C88F4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10000F734(0, (unint64_t *)&qword_100518A40);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1003C8990@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C8AF8(&OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime, a1);
}

uint64_t sub_1003C89A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000FB74(a1, (uint64_t)v6, &qword_10051A2D0);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v6, &qword_10051A2D0);
}

uint64_t sub_1003C8AE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C8AF8(&OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime, a1);
}

uint64_t sub_1003C8AF8@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  swift_getKeyPath();
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v2 + *a1;
  swift_beginAccess();
  return sub_10000FB74(v5, a2, &qword_10051A2D0);
}

uint64_t sub_1003C8BCC@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = v5 + *a2;
  swift_beginAccess();
  return sub_10000FB74(v6, a3, &qword_10051A2D0);
}

uint64_t sub_1003C8CA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000FB74(a1, (uint64_t)v6, &qword_10051A2D0);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v6, &qword_10051A2D0);
}

uint64_t sub_1003C8DE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + *a3;
  swift_beginAccess();
  sub_1003CDAD0(a2, v4);
  return swift_endAccess();
}

uint64_t sub_1003C8E4C()
{
  return sub_1003C8F54();
}

uint64_t sub_1003C8E60()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003C8F40()
{
  return sub_1003C8F54();
}

uint64_t sub_1003C8F54()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003C9010@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = (void *)(v5 + *a2);
  swift_beginAccess();
  *a3 = *v6;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003C90E0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003C91C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(a1 + *a3);
  swift_beginAccess();
  *uint64_t v4 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003C922C()
{
  swift_getKeyPath();
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount);
}

uint64_t sub_1003C92D4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount);
  return result;
}

uint64_t sub_1003C9384()
{
  return swift_release();
}

uint64_t sub_1003C9450()
{
  uint64_t v1 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  swift_getKeyPath();
  uint64_t v14 = v0;
  uint64_t v15 = v3;
  uint64_t v18 = v0;
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v3, &qword_10051A2D0);
  v5(v3, 1, 1, v4);
  swift_getKeyPath();
  uint64_t v12 = v0;
  uint64_t v13 = v3;
  uint64_t v18 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v3, &qword_10051A2D0);
  swift_getKeyPath();
  uint64_t v18 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = v0;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__suggestedActions);
  swift_beginAccess();
  void *v6 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v17 = v0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v17 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v17 = v0;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = (void *)(v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__performedActionCounts);
  swift_beginAccess();
  *uint64_t v7 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  uint64_t v16 = v0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  uint64_t v10 = v0;
  uint64_t v11 = 0;
  uint64_t v16 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_1003C9800(uint64_t a1)
{
  *(void *)(v1 + 16) = 0xD00000000000002ALL;
  *(void *)(v1 + 24) = 0x800000010042D140;
  uint64_t v3 = v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime, 1, 1, v4);
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__suggestedActions) = &_swiftEmptySetSingleton;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__performedActionCounts) = sub_10031AE98((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount) = 0;
  ObservationRegistrar.init()();
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics_alwaysSuggestedActions) = a1;
  sub_1003C991C();
  return v1;
}

uint64_t sub_1003C991C()
{
  uint64_t v1 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v13 - v5;
  swift_getKeyPath();
  uint64_t v14 = v0;
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime;
  swift_beginAccess();
  sub_10000FB74(v7, (uint64_t)v6, &qword_10051A2D0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  uint64_t result = sub_10000FBD8((uint64_t)v6, &qword_10051A2D0);
  if (v10 == 1)
  {
    Date.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v3, 0, 1, v8);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v13[-2] = v0;
    v13[-1] = v3;
    void v13[2] = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return sub_10000FBD8((uint64_t)v3, &qword_10051A2D0);
  }
  return result;
}

uint64_t sub_1003C9B94()
{
  uint64_t v1 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v13 - v5;
  swift_getKeyPath();
  uint64_t v14 = v0;
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime;
  swift_beginAccess();
  sub_10000FB74(v7, (uint64_t)v6, &qword_10051A2D0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  uint64_t result = sub_10000FBD8((uint64_t)v6, &qword_10051A2D0);
  if (v10 == 1)
  {
    Date.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v3, 0, 1, v8);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v13[-2] = v0;
    v13[-1] = v3;
    void v13[2] = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return sub_10000FBD8((uint64_t)v3, &qword_10051A2D0);
  }
  return result;
}

BOOL sub_1003C9E0C()
{
  uint64_t v1 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v14 - v5;
  swift_getKeyPath();
  uint64_t v15 = v0;
  sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime;
  swift_beginAccess();
  sub_10000FB74(v7, (uint64_t)v6, &qword_10051A2D0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
  int v10 = v9(v6, 1, v8);
  sub_10000FBD8((uint64_t)v6, &qword_10051A2D0);
  if (v10 == 1) {
    return 0;
  }
  swift_getKeyPath();
  v14[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime;
  swift_beginAccess();
  sub_10000FB74(v12, (uint64_t)v3, &qword_10051A2D0);
  BOOL v11 = v9(v3, 1, v8) == 1;
  sub_10000FBD8((uint64_t)v3, &qword_10051A2D0);
  return v11;
}

uint64_t sub_1003CA054(Swift::Int a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t result = sub_1003C9E0C();
  if (result)
  {
    swift_getKeyPath();
    v20[3] = v2;
    sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__suggestedActions);
    swift_beginAccess();
    uint64_t v8 = *v7;
    swift_bridgeObjectRetain();
    char v9 = sub_1003DF9A0(a1, v8);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      uint64_t result = sub_1003DF9A0(a1, *(void *)(v3 + OBJC_IVAR____TtC6Tamale16SessionAnalytics_alwaysSuggestedActions));
      if ((result & 1) == 0)
      {
        if (qword_100517E08 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_10000F378(v10, (uint64_t)qword_10055E130);
        BOOL v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          os_log_type_t type = v12;
          uint64_t v13 = swift_slowAlloc();
          v20[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136315394;
          unint64_t v14 = sub_100062F74(a1);
          uint64_t v19 = sub_1003806B0(v14, v15, v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v13 + 12) = 2080;
          if (a2) {
            uint64_t v16 = 0xD00000000000001ALL;
          }
          else {
            uint64_t v16 = 0x7261657070416E6FLL;
          }
          if (a2) {
            unint64_t v17 = 0x8000000100424770;
          }
          else {
            unint64_t v17 = 0xE800000000000000;
          }
          uint64_t v19 = sub_1003806B0(v16, v17, v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v11, type, "SessionAnalytics: did suggest action %s for reason %s", (uint8_t *)v13, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        swift_getKeyPath();
        v20[0] = v3;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v20[0] = v3;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        swift_beginAccess();
        sub_1001F94FC(&v19, a1);
        swift_endAccess();
        v20[0] = v3;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        return swift_release();
      }
    }
  }
  return result;
}

void sub_1003CA3E8(char a1, char a2)
{
  uint64_t v3 = v2;
  if (sub_1003C9E0C())
  {
    if (qword_100517E08 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000F378(v6, (uint64_t)qword_10055E130);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      unint64_t v10 = sub_100062F74(a1);
      sub_1003806B0(v10, v11, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      unint64_t v12 = 0xEC00000072656E69;
      uint64_t v13 = 0x61746E6F436E6950;
      switch(a2)
      {
        case 1:
          unint64_t v12 = 0xE700000000000000;
          uint64_t v13 = 0x72657474756853;
          break;
        case 2:
          unint64_t v12 = 0xED00006C6F72746ELL;
          uint64_t v13 = 0x6F436172656D6143;
          break;
        case 3:
          unint64_t v12 = 0xE900000000000072;
          goto LABEL_10;
        case 4:
          unint64_t v12 = 0xED0000756E654D72;
LABEL_10:
          uint64_t v13 = 0x61426E6F69746341;
          break;
        case 5:
          unint64_t v12 = 0xEF6E6F7474754264;
          uint64_t v13 = 0x6574616369646544;
          break;
        case 6:
          unint64_t v12 = 0x8000000100424520;
          uint64_t v13 = 0xD000000000000010;
          break;
        default:
          break;
      }
      sub_1003806B0(v13, v12, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SessionAnalytics: did perform %s from %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    char KeyPath = swift_getKeyPath();
    v31[0] = v3;
    sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v31[0] = v3;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    unint64_t v15 = (void *)(v3 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__performedActionCounts);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v17 = (void *)*v15;
    int v30 = (void *)*v15;
    void *v15 = 0x8000000000000000;
    unint64_t v19 = sub_10032AD3C(a1);
    uint64_t v20 = v17[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
      goto LABEL_25;
    }
    char KeyPath = v18;
    if (v17[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_1001EDA58(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = v30;
      unint64_t v23 = sub_10032AD3C(a1);
      if ((KeyPath & 1) != (v24 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x1003CA890);
      }
      unint64_t v19 = v23;
    }
    while (1)
    {
      void *v15 = v17;
      swift_bridgeObjectRelease();
      uint64_t v25 = (void *)*v15;
      swift_bridgeObjectRetain();
      if ((KeyPath & 1) == 0) {
        sub_1001F44C0(v19, a1, 0, v25);
      }
      uint64_t v26 = v25[7];
      uint64_t v27 = *(void *)(v26 + 8 * v19);
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (!v28) {
        break;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      sub_1001F5FE0();
      unint64_t v17 = v30;
    }
    *(void *)(v26 + 8 * v19) = v29;
    swift_endAccess();
    swift_bridgeObjectRelease();
    v31[0] = v3;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    sub_100063CD0(a1);
  }
}

uint64_t sub_1003CA8AC()
{
  uint64_t v1 = v0;
  uint64_t result = sub_1003C9E0C();
  if (result)
  {
    if (qword_100517E08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000F378(v3, (uint64_t)qword_10055E130);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "SessionAnalytics: did encounter error", v6, 2u);
      swift_slowDealloc();
    }

    swift_getKeyPath();
    sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    uint64_t result = swift_release();
    uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount);
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v9 = v7 + 1;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v1 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount) = v9;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      return swift_release();
    }
  }
  return result;
}

char *sub_1003CAA84()
{
  uint64_t v1 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v115 = (uint64_t)&v110 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  os_log_type_t v5 = (char *)&v110 - v4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t i = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v110 - v10;
  unint64_t v116 = sub_10031AD7C((uint64_t)_swiftEmptyArrayStorage);
  swift_getKeyPath();
  unint64_t v12 = (char *)v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics___observationRegistrar;
  uint64_t v125 = v0;
  uint64_t v13 = sub_1003CDE10(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v14 = (uint64_t)v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime;
  swift_beginAccess();
  uint64_t v15 = v14;
  uint64_t v16 = v6;
  sub_10000FB74(v15, (uint64_t)v5, &qword_10051A2D0);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v18 = v17(v5, 1, v16);
  uint64_t v117 = v12;
  uint64_t v118 = v13;
  if (v18 == 1)
  {
    sub_10000FBD8((uint64_t)v5, &qword_10051A2D0);
    unint64_t v19 = (char *)v0;
    unint64_t v20 = v116;
    goto LABEL_17;
  }
  uint64_t v113 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v113(v11, v5, v16);
  swift_getKeyPath();
  uint64_t v21 = v16;
  long long v123 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = (uint64_t)v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime;
  swift_beginAccess();
  uint64_t v23 = v22;
  uint64_t v24 = v21;
  uint64_t v25 = v115;
  sub_10000FB74(v23, v115, &qword_10051A2D0);
  int v26 = v17((char *)v25, 1, v21);
  unint64_t v19 = (char *)v0;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v24);
    sub_10000FBD8(v25, &qword_10051A2D0);
    unint64_t v20 = v116;
    goto LABEL_17;
  }
  uint64_t v27 = v7;
  v113(i, (char *)v25, v24);
  Date.timeIntervalSince(_:)();
  double v29 = v28;
  double v30 = 0.0;
  if (v29 > 0.0)
  {
    double v31 = 1.0;
    if (v29 <= 1.0 || (double v32 = 4096.0, v31 = v29, v29 < 4096.0))
    {
      if ((~*(void *)&v31 & 0x7FF0000000000000) != 0)
      {
        double v32 = v31;
      }
      else
      {
        double v32 = 4096.0;
        if ((*(void *)&v31 & 0xFFFFFFFFFFFFFLL) == 0) {
          double v32 = v31;
        }
      }
    }
    double v33 = log2(v32);
    double v30 = exp2(ceil(v33));
    if ((~*(void *)&v30 & 0x7FF0000000000000) != 0)
    {
      if (v30 <= -9.22337204e18) {
        goto LABEL_104;
      }
      if (v30 < 9.22337204e18) {
        goto LABEL_16;
      }
LABEL_105:
      __break(1u);
    }
    __break(1u);
LABEL_107:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_108;
  }
LABEL_16:
  uint64_t v34 = v24;
  uint64_t v35 = (uint64_t)v30;
  id v36 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v29];
  unint64_t v37 = v116;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  long long v123 = (void *)v37;
  sub_1002F4A84((uint64_t)v36, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  uint64_t v39 = v123;
  swift_bridgeObjectRelease();
  id v40 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v35];
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  long long v123 = v39;
  sub_1002F4A84((uint64_t)v40, 0x6E6F697461727564, 0xED000065676E6152, v41);
  unint64_t v20 = (unint64_t)v123;
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v27 + 8);
  v42(i, v34);
  v42(v11, v34);
LABEL_17:
  swift_getKeyPath();
  long long v123 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v43 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)&v19[OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount]];
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  long long v123 = (void *)v20;
  sub_1002F4A84((uint64_t)v43, 0x756F43726F727265, 0xEA0000000000746ELL, v44);
  uint64_t v45 = v123;
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  long long v123 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v46 = (uint64_t *)&v19[OBJC_IVAR____TtC6Tamale16SessionAnalytics__suggestedActions];
  swift_beginAccess();
  uint64_t v110 = v46;
  uint64_t v124 = *v46;
  swift_bridgeObjectRetain();
  uint64_t v47 = swift_bridgeObjectRetain();
  sub_1001E6D00(v47);
  swift_getKeyPath();
  uint64_t v122 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v48 = &v19[OBJC_IVAR____TtC6Tamale16SessionAnalytics__performedActionCounts];
  swift_beginAccess();
  unint64_t v116 = (unint64_t)v48;
  uint64_t v49 = swift_bridgeObjectRetain();
  sub_1001E6E5C(v49);
  uint64_t v50 = 0;
  uint64_t v115 = v124;
  uint64_t v51 = 1 << *(unsigned char *)(v124 + 32);
  uint64_t v52 = -1;
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  uint64_t v53 = *(void *)(v124 + 56);
  uint64_t v112 = v124 + 56;
  unint64_t v54 = v52 & v53;
  uint64_t v113 = (void (*)(char *, char *, uint64_t))((unint64_t)(v51 + 63) >> 6);
  unint64_t v111 = (unint64_t)"arize";
  for (i = v19; ; unint64_t v19 = i)
  {
    if (v54)
    {
      unint64_t v56 = __clz(__rbit64(v54));
      v54 &= v54 - 1;
      unint64_t v57 = v56 | (v50 << 6);
      goto LABEL_38;
    }
    uint64_t v58 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      goto LABEL_99;
    }
    if (v58 >= (uint64_t)v113) {
      break;
    }
    unint64_t v59 = *(void *)(v112 + 8 * v58);
    ++v50;
    if (!v59)
    {
      uint64_t v50 = v58 + 1;
      if (v58 + 1 >= (uint64_t)v113) {
        break;
      }
      unint64_t v59 = *(void *)(v112 + 8 * v50);
      if (!v59)
      {
        uint64_t v50 = v58 + 2;
        if (v58 + 2 >= (uint64_t)v113) {
          break;
        }
        unint64_t v59 = *(void *)(v112 + 8 * v50);
        if (!v59)
        {
          uint64_t v60 = v58 + 3;
          if (v60 >= (uint64_t)v113) {
            break;
          }
          unint64_t v59 = *(void *)(v112 + 8 * v60);
          if (!v59)
          {
            while (1)
            {
              uint64_t v50 = v60 + 1;
              if (__OFADD__(v60, 1)) {
                goto LABEL_101;
              }
              if (v50 >= (uint64_t)v113) {
                goto LABEL_69;
              }
              unint64_t v59 = *(void *)(v112 + 8 * v50);
              ++v60;
              if (v59) {
                goto LABEL_37;
              }
            }
          }
          uint64_t v50 = v60;
        }
      }
    }
LABEL_37:
    unint64_t v54 = (v59 - 1) & v59;
    unint64_t v57 = __clz(__rbit64(v59)) + (v50 << 6);
LABEL_38:
    uint64_t v61 = *(unsigned __int8 *)(*(void *)(v115 + 48) + v57);
    swift_getKeyPath();
    uint64_t v120 = v19;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v62 = *(void *)v116;
    if (*(void *)(*(void *)v116 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v63 = sub_10032AD3C(v61);
      if (v64) {
        uint64_t v65 = *(void *)(*(void *)(v62 + 56) + 8 * v63);
      }
      else {
        uint64_t v65 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = 0;
    }
    unint64_t v66 = 0xEC00000070756B6FLL;
    unint64_t v67 = 0x6F4C6C6175736956;
    switch(v61)
    {
      case 1:
        unint64_t v66 = 0xEA00000000007075;
        unint64_t v67 = 0x6B6F6F4C7370614DLL;
        break;
      case 2:
        unint64_t v67 = 0x697463417370614DLL;
        unint64_t v66 = 0xEA00000000006E6FLL;
        break;
      case 3:
        unint64_t v66 = 0xE600000000000000;
        unint64_t v67 = 0x65646F435251;
        break;
      case 4:
        unint64_t v66 = 0xEB0000000065646FLL;
        unint64_t v67 = 0x4370696C43707041;
        break;
      case 5:
        unint64_t v66 = 0xEC000000726F7463;
        unint64_t v67 = 0x6574654461746144;
        break;
      case 6:
        unint64_t v67 = 0x7A6972616D6D7553;
        goto LABEL_57;
      case 7:
        unint64_t v66 = 0xE900000000000064;
        unint64_t v67 = 0x756F6C4164616552;
        break;
      case 8:
        unint64_t v66 = 0xED0000746E657645;
        unint64_t v67 = 0x7261646E656C6143;
        break;
      case 9:
        unint64_t v67 = 0xD000000000000014;
        unint64_t v66 = v111 | 0x8000000000000000;
        break;
      case 10:
        unint64_t v66 = 0xE300000000000000;
        unint64_t v67 = 7041857;
        break;
      case 11:
        unint64_t v66 = 0xEB00000000686372;
        unint64_t v67 = 0x6165536567616D49;
        break;
      case 12:
        unint64_t v67 = 0x74616C736E617254;
LABEL_57:
        unint64_t v66 = 0xE900000000000065;
        break;
      case 13:
        unint64_t v66 = 0xEF6E6F697463416FLL;
        unint64_t v67 = 0x4E72657474756853;
        break;
      case 14:
        unint64_t v66 = 0xEB00000000646569;
        unint64_t v67 = 0x6669636570736E55;
        break;
      default:
        break;
    }
    uint64_t v120 = (void *)v67;
    unint64_t v121 = v66;
    v68._uint64_t countAndFlagsBits = 0x746E756F43;
    v68._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v68);
    uint64_t v69 = (uint64_t)v120;
    uint64_t v70 = v121;
    id v71 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v65];
    char v72 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v120 = v45;
    unint64_t v74 = sub_10032AC58(v69, v70);
    uint64_t v75 = v45[2];
    BOOL v76 = (v73 & 1) == 0;
    uint64_t v77 = v75 + v76;
    if (__OFADD__(v75, v76))
    {
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
    char v78 = v73;
    if (v45[3] >= v77)
    {
      if ((v72 & 1) == 0) {
        sub_1001F4A2C();
      }
    }
    else
    {
      sub_1001EAF88(v77, v72);
      unint64_t v79 = sub_10032AC58(v69, v70);
      if ((v78 & 1) != (v80 & 1)) {
        goto LABEL_107;
      }
      unint64_t v74 = v79;
    }
    uint64_t v45 = v120;
    if (v78)
    {
      uint64_t v55 = v120[7];

      *(void *)(v55 + 8 * v74) = v71;
    }
    else
    {
      v120[(v74 >> 6) + 8] |= 1 << v74;
      uint64_t v81 = (uint64_t *)(v45[6] + 16 * v74);
      *uint64_t v81 = v69;
      v81[1] = v70;
      *(void *)(v45[7] + 8 * v74) = v71;
      uint64_t v82 = v45[2];
      BOOL v83 = __OFADD__(v82, 1);
      uint64_t v84 = v82 + 1;
      if (v83) {
        goto LABEL_98;
      }
      void v45[2] = v84;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_69:
  swift_release();
  uint64_t v120 = &_swiftEmptySetSingleton;
  swift_getKeyPath();
  uint64_t v119 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v85 = *(void *)v116;
  uint64_t v86 = *(void *)v116 + 64;
  uint64_t v87 = 1 << *(unsigned char *)(*(void *)v116 + 32);
  uint64_t v88 = -1;
  if (v87 < 64) {
    uint64_t v88 = ~(-1 << v87);
  }
  unint64_t v89 = v88 & *(void *)(*(void *)v116 + 64);
  int64_t v90 = (unint64_t)(v87 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v91 = 0;
  int64_t v92 = 0;
  while (1)
  {
    if (v89)
    {
      unint64_t v93 = __clz(__rbit64(v89));
      v89 &= v89 - 1;
      unint64_t v94 = v93 | (v92 << 6);
      goto LABEL_73;
    }
    int64_t v96 = v92 + 1;
    if (__OFADD__(v92, 1)) {
      goto LABEL_100;
    }
    if (v96 >= v90) {
      break;
    }
    unint64_t v97 = *(void *)(v86 + 8 * v96);
    ++v92;
    if (!v97)
    {
      int64_t v92 = v96 + 1;
      if (v96 + 1 >= v90) {
        break;
      }
      unint64_t v97 = *(void *)(v86 + 8 * v92);
      if (!v97)
      {
        int64_t v92 = v96 + 2;
        if (v96 + 2 >= v90) {
          break;
        }
        unint64_t v97 = *(void *)(v86 + 8 * v92);
        if (!v97)
        {
          int64_t v98 = v96 + 3;
          if (v98 >= v90) {
            break;
          }
          unint64_t v97 = *(void *)(v86 + 8 * v98);
          if (!v97)
          {
            while (1)
            {
              int64_t v92 = v98 + 1;
              if (__OFADD__(v98, 1)) {
                break;
              }
              if (v92 >= v90) {
                goto LABEL_89;
              }
              unint64_t v97 = *(void *)(v86 + 8 * v92);
              ++v98;
              if (v97) {
                goto LABEL_88;
              }
            }
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
            goto LABEL_105;
          }
          int64_t v92 = v98;
        }
      }
    }
LABEL_88:
    unint64_t v89 = (v97 - 1) & v97;
    unint64_t v94 = __clz(__rbit64(v97)) + (v92 << 6);
LABEL_73:
    uint64_t v95 = *(void *)(*(void *)(v85 + 56) + 8 * v94);
    sub_1001F94FC(&v119, *(unsigned __int8 *)(*(void *)(v85 + 48) + v94));
    BOOL v83 = __OFADD__(v91, v95);
    v91 += v95;
    if (v83) {
      goto LABEL_97;
    }
  }
LABEL_89:
  swift_release();
  if ((v91 & 0x8000000000000000) != 0)
  {
LABEL_108:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1003CB9F0);
  }
  sub_1003CC080(0x40uLL, v91);
  if (v99 < 0) {
    goto LABEL_103;
  }
  id v100 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v99];
  char v101 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v119 = (char *)v45;
  sub_1002F4A84((uint64_t)v100, 0xD000000000000014, 0x800000010042D0E0, v101);
  uint64_t v102 = v119;
  swift_bridgeObjectRelease();
  if (v120[2])
  {
    id v103 = sub_1003CD634((uint64_t)v120);
    swift_bridgeObjectRelease();
    char v104 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v119 = v102;
    sub_1002F4A84((uint64_t)v103, 0xD000000000000010, 0x800000010042D100, v104);
    uint64_t v102 = v119;
  }
  swift_bridgeObjectRelease();
  uint64_t v105 = v110;
  swift_getKeyPath();
  uint64_t v119 = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(*v105 + 16))
  {
    swift_getKeyPath();
    uint64_t v119 = v19;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v106 = swift_bridgeObjectRetain();
    id v107 = sub_1003CD634(v106);
    swift_bridgeObjectRelease();
    char v108 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v119 = v102;
    sub_1002F4A84((uint64_t)v107, 0xD000000000000010, 0x800000010042D120, v108);
    uint64_t v102 = v119;
    swift_bridgeObjectRelease();
  }
  return v102;
}

void sub_1003CBA2C()
{
  sub_1003C9B94();
  uint64_t v0 = sub_1003CAA84();
  if (*((void *)v0 + 2))
  {
    if (qword_100517E08 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000F378(v1, (uint64_t)qword_10055E130);
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      sub_10000F734(0, (unint64_t *)&qword_100518A40);
      swift_bridgeObjectRetain();
      uint64_t v5 = Dictionary.description.getter();
      unint64_t v7 = v6;
      swift_bridgeObjectRelease();
      sub_1003806B0(v5, v7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SessionAnalytics: publishing %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    NSString v11 = String._bridgeToObjectiveC()();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v0;
    aBlock[4] = (uint64_t)sub_1003CC060;
    aBlock[5] = v12;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1003C88F4;
    void aBlock[3] = (uint64_t)&unk_1004F7BA8;
    uint64_t v13 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v13);

    sub_1003C9450();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100517E08 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000F378(v8, (uint64_t)qword_10055E130);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "SessionAnalytics: No event map to publish.", v10, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1003CBDD4()
{
  swift_bridgeObjectRelease();
  sub_10000FBD8(v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime, &qword_10051A2D0);
  sub_10000FBD8(v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime, &qword_10051A2D0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale16SessionAnalytics___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1003CBEDC()
{
  return type metadata accessor for SessionAnalytics();
}

uint64_t type metadata accessor for SessionAnalytics()
{
  uint64_t result = qword_10052D090;
  if (!qword_10052D090) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1003CBF30()
{
  sub_100065AC0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1003CC028()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1003CC060()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003CC068(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003CC078()
{
  return swift_release();
}

void sub_1003CC080(unint64_t a1, unint64_t a2)
{
  if (a2)
  {
    double v2 = (double)a1;
    if (a2 == 1)
    {
      double v3 = 1.0;
      if (a1 < 2) {
        goto LABEL_8;
      }
    }
    else
    {
      double v3 = (double)a2;
      if (v2 <= (double)a2) {
        goto LABEL_8;
      }
    }
    if ((*(void *)&v3 & 0xFFFFFFFFFFFFFLL) == 0) {
      double v2 = v3;
    }
    if ((~*(void *)&v3 & 0x7FF0000000000000) != 0) {
      double v2 = v3;
    }
LABEL_8:
    double v4 = log2(v2);
    double v5 = exp2(ceil(v4));
    if ((~*(void *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 <= -1.0)
      {
        __break(1u);
      }
      else if (v5 < 1.84467441e19)
      {
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1003CC130(char *a1, char *a2)
{
  return sub_1000C3458(*a1, *a2);
}

Swift::Int sub_1003CC13C()
{
  return Hasher._finalize()();
}

uint64_t sub_1003CC1C4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003CC238()
{
  return Hasher._finalize()();
}

uint64_t sub_1003CC2BC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E5F58, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1003CC31C(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x7261657070416E6FLL;
  if (*v1) {
    unint64_t v2 = 0xD00000000000001ALL;
  }
  unint64_t v3 = 0x8000000100424770;
  if (!*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1003CC360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v11 = sub_10000F214(&qword_10052D2A8);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10052D2B0);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  int v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  *(unsigned char *)(v19 + 32) = a4;
  *(void *)(v19 + 40) = a5;
  uint64_t v20 = sub_10000F214(&qword_10052D2B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v14, a1, v20);
  uint64_t v21 = (uint64_t (**)())&v14[*(int *)(v12 + 44)];
  uint64_t *v21 = sub_1003CDD24;
  v21[1] = (uint64_t (*)())v19;
  void v21[2] = 0;
  void v21[3] = 0;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  *(unsigned char *)(v22 + 32) = a4;
  *(void *)(v22 + 40) = a5;
  sub_10000FB74((uint64_t)v14, (uint64_t)v18, &qword_10052D2A8);
  uint64_t v23 = &v18[*(int *)(v16 + 44)];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 2) = sub_1003CDD54;
  *((void *)v23 + 3) = v22;
  swift_retain_n();
  swift_retain_n();
  sub_10000FBD8((uint64_t)v14, &qword_10052D2A8);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v24 + 24) = a3;
  *(unsigned char *)(v24 + 32) = a4;
  *(void *)(v24 + 40) = a5;
  uint64_t v25 = v29;
  sub_10000FB74((uint64_t)v18, v29, &qword_10052D2B0);
  int v26 = (void (**)(char))(v25 + *(int *)(sub_10000F214(&qword_10052D2C0) + 36));
  *int v26 = sub_1003CDDAC;
  v26[1] = (void (*)(char))v24;
  swift_retain();
  swift_retain();
  return sub_10000FBD8((uint64_t)v18, &qword_10052D2B0);
}

void sub_1003CC5DC(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v26 - v19;
  if (a1)
  {
    if (a1 != 1)
    {
      char v21 = a4 & 1;
      LOBYTE(aBlock) = a4 & 1;
      uint64_t v35 = a5;
      LOBYTE(v33) = 1;
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.setter();
      sub_10000F734(0, (unint64_t *)&qword_10051A950);
      uint64_t v26 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v15 + 8);
      v27(v17, v14);
      uint64_t v22 = swift_allocObject();
      uint64_t v23 = v29;
      *(void *)(v22 + 16) = v28;
      *(void *)(v22 + 24) = v23;
      *(unsigned char *)(v22 + 32) = v21;
      *(void *)(v22 + 40) = a5;
      unint64_t v38 = sub_1003CDE00;
      uint64_t v39 = v22;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v35 = 1107296256;
      id v36 = sub_1002EDB98;
      unint64_t v37 = &unk_1004F7CF0;
      uint64_t v24 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      double v33 = _swiftEmptyArrayStorage;
      sub_1003CDE10((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000F214(&qword_10051A960);
      sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v25 = (void *)v26;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
      v27(v20, v14);
      swift_release();
    }
  }
  else
  {
    LOBYTE(aBlock) = a4 & 1;
    uint64_t v35 = a5;
    LOBYTE(v33) = 0;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
  }
}

uint64_t sub_1003CCA30(uint64_t (*a1)(uint64_t))
{
  sub_10000F214(&qword_100522EA0);
  uint64_t result = State.wrappedValue.getter();
  if (v3 == 1)
  {
    State.wrappedValue.setter();
    return a1(1);
  }
  return result;
}

uint64_t sub_1003CCAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003CC360(a1, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), a2);
}

Swift::Int sub_1003CCAE4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100045F8C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1003CCB50(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1003CCB50(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_1003CD23C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      unint64_t v94 = v11;
      char v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          unint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_1003CD30C((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v97 = sub_100045F20((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          id v100 = &v97[16 * v96 + 32];
          *(void *)id v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          unint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      void v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    char v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    char v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    char v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1000456E8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1000456E8((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    id v43 = &v11[16 * v41 + 32];
    *(void *)id v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          unint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            unint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        Swift::String v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        int64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_1003CD30C((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      double v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        unint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)unint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}