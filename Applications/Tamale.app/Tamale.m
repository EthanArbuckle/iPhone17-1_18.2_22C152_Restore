id sub_100007544(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, void *, char *, unsigned char *);
  id v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *i;
  void *v11;
  id v12;
  char v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  unsigned char v19[128];
  uint64_t vars8;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = v3;
    v6 = (char *)[v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(void *)v16;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v5);
          }
          v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          v14 = 0;
          if (v4[2](v4, v11, &i[v8], &v14))
          {
            v12 = v11;
            goto LABEL_15;
          }
          if (v14) {
            goto LABEL_12;
          }
        }
        v7 = (char *)[v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
        v12 = 0;
        v8 += (uint64_t)i;
        if (v7) {
          continue;
        }
        break;
      }
    }
    else
    {
LABEL_12:
      v12 = 0;
    }
LABEL_15:
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_100007714(id a1)
{
  qword_10052EF18 = objc_alloc_init(TamaleMapsUIHelper);

  _objc_release_x1();
}

BOOL sub_10000789C(id a1, GEOModule *a2, unint64_t a3, BOOL *a4)
{
  return [(GEOModule *)a2 type] == 39;
}

float sub_100007A14(float a1, uint64_t a2, uint64_t a3, float *a4)
{
  float result = a1 * 6.0;
  *a4 = result;
  a4[1] = result;
  return result;
}

float sub_100007A24()
{
  uint64_t arguments_buffer = vfx_script_get_arguments_buffer();
  v1 = *(float **)(arguments_buffer + 24);
  float result = **(float **)(arguments_buffer + 16) * 6.0;
  float *v1 = result;
  v1[1] = result;
  return result;
}

int32x4_t sub_100007A50(uint64_t a1, uint64_t a2, int32x4_t *a3, int32x4_t *a4)
{
  *a3 = vdupq_n_s32(0xBE4CCCCD);
  int32x4_t result = vdupq_n_s32(0x3E4CCCCDu);
  *a4 = result;
  return result;
}

int32x4_t sub_100007A74()
{
  uint64_t arguments_buffer = vfx_script_get_arguments_buffer();
  v1 = *(int32x4_t **)(arguments_buffer + 24);
  *(int32x4_t *)*(void *)(arguments_buffer + 16) = vdupq_n_s32(0xBE4CCCCD);
  int32x4_t result = vdupq_n_s32(0x3E4CCCCDu);
  int32x4_t *v1 = result;
  return result;
}

double sub_100007AB0(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  simd_float4 v20 = _simd_cos_f4((simd_float4)0);
  _Q0 = (float32x4_t)_simd_sin_f4((simd_float4)0);
  _Q7 = v20;
  float v8 = vmuls_lane_f32(v20.f32[1], (float32x4_t)v20, 2);
  float v9 = vmuls_lane_f32(_Q0.f32[1], _Q0, 2);
  *(float *)&long long v10 = vmlas_n_f32(-(float)(v20.f32[0] * v9), v8, _Q0.f32[0]);
  _S4 = vmuls_lane_f32(v20.f32[0], *(float32x2_t *)_Q0.f32, 1);
  __asm { FMLA            S5, S4, V7.S[2] }
  _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
  __asm { FMLA            S6, S4, V0.S[2] }
  DWORD1(v10) = _S5;
  *((void *)&v10 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(vmlas_n_f32(v9 * _Q0.f32[0], v8, v20.f32[0])), _S6);
  double result = 0.0;
  *a3 = xmmword_10043B3F0;
  *a4 = v10;
  return result;
}

double sub_100007B54()
{
  uint64_t arguments_buffer = vfx_script_get_arguments_buffer();
  v1 = *(_OWORD **)(arguments_buffer + 16);
  v2 = *(_OWORD **)(arguments_buffer + 24);
  simd_float4 v17 = _simd_cos_f4((simd_float4)0);
  _Q0 = (float32x4_t)_simd_sin_f4((simd_float4)0);
  _Q7 = v17;
  float v5 = vmuls_lane_f32(v17.f32[1], (float32x4_t)v17, 2);
  float v6 = vmuls_lane_f32(_Q0.f32[1], _Q0, 2);
  *(float *)&long long v7 = vmlas_n_f32(-(float)(v17.f32[0] * v6), v5, _Q0.f32[0]);
  _S4 = vmuls_lane_f32(v17.f32[0], *(float32x2_t *)_Q0.f32, 1);
  __asm { FMLA            S5, S4, V7.S[2] }
  _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
  __asm { FMLA            S6, S4, V0.S[2] }
  DWORD1(v7) = _S5;
  *((void *)&v7 + 1) = __PAIR64__(COERCE_UNSIGNED_INT(vmlas_n_f32(v6 * _Q0.f32[0], v5, v17.f32[0])), _S6);
  double result = 0.0;
  _OWORD *v1 = xmmword_10043B3F0;
  _OWORD *v2 = v7;
  return result;
}

uint64_t sub_100007BF8()
{
  return vfx_script_color_ramp_destroy();
}

uint64_t sub_100007D40()
{
  return vfx_script_color_ramp_destroy();
}

uint64_t sub_100007E90(double a1, float32x4_t a2, float32x4_t a3, float a4, float a5, uint64_t a6, int a7, int a8, unsigned int a9, uint64_t a10, int a11, _OWORD *a12, float *a13, unsigned char *a14, void *a15, float *a16, float *a17)
{
  float32x4_t v24 = vsubq_f32(a2, a3);
  float32x4_t v25 = vmulq_f32(v24, v24);
  float v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  vfx_script_clock_delta_time();
  float v28 = (float)((float)(v27 * -10.0) + 1.0) * a4;
  if (v26 <= a4) {
    float v29 = v28;
  }
  else {
    float v29 = v26;
  }
  uint64_t v30 = a8 ^ a9;
  if (!v30) {
    LOBYTE(a9) = a8;
  }
  uint64_t v31 = v30 + a10;
  uint64_t result = vfx_script_clock_delta_time();
  float v34 = fmaxf(a5 + (float)(v33 * -5.0), 0.0);
  if (!a11) {
    float v34 = 1.0;
  }
  unsigned int v35 = 277803737
      * (((747796405 * a7 + 2112654314) >> (((747796405 * a7 + 2112654314) >> 28) + 4)) ^ (747796405 * a7 + 2112654314));
  *a12 = *(unint64_t *)&a1;
  *a13 = v29;
  *a14 = a9;
  *a15 = v31;
  *a16 = v34;
  *a17 = COERCE_FLOAT((v35 >> 31) ^ (v35 >> 9) | 0x3F800000) + -1.0;
  return result;
}

uint64_t sub_100007FF8()
{
  uint64_t arguments_buffer = vfx_script_get_arguments_buffer();
  v1 = *(unsigned char **)(arguments_buffer + 104);
  float v26 = *(float **)(arguments_buffer + 96);
  float v27 = *(_OWORD **)(arguments_buffer + 88);
  v2 = *(void **)(arguments_buffer + 112);
  v3 = *(float **)(arguments_buffer + 120);
  v4 = *(float **)(arguments_buffer + 128);
  int v5 = **(_DWORD **)(arguments_buffer + 8);
  *(void *)&long long v6 = **(void **)(arguments_buffer + 16);
  long long v25 = v6;
  float v7 = **(float **)(arguments_buffer + 40);
  BOOL v8 = **(unsigned char **)(arguments_buffer + 48) != 0;
  BOOL v9 = **(unsigned char **)(arguments_buffer + 56) != 0;
  uint64_t v10 = **(void **)(arguments_buffer + 64);
  float v11 = **(float **)(arguments_buffer + 72);
  float32x4_t v12 = vsubq_f32(*(float32x4_t *)*(void *)(arguments_buffer + 24), *(float32x4_t *)*(void *)(arguments_buffer + 32));
  float32x4_t v13 = vmulq_f32(v12, v12);
  int v14 = **(unsigned __int8 **)(arguments_buffer + 80);
  float v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  vfx_script_clock_delta_time();
  float v17 = v7 * (float)((float)(v16 * -10.0) + 1.0);
  if (v15 <= v7) {
    float v18 = v17;
  }
  else {
    float v18 = v15;
  }
  uint64_t v19 = v8 ^ v9;
  if (v19) {
    LOBYTE(v8) = v9;
  }
  uint64_t v20 = v10 + v19;
  uint64_t result = vfx_script_clock_delta_time();
  float v23 = fmaxf(v11 + (float)(v22 * -5.0), 0.0);
  if (!v14) {
    float v23 = 1.0;
  }
  unsigned int v24 = 277803737
      * (((747796405 * v5 + 2112654314) >> (((747796405 * v5 + 2112654314) >> 28) + 4)) ^ (747796405 * v5 + 2112654314));
  *float v27 = v25;
  *float v26 = v18;
  unsigned char *v1 = v8;
  void *v2 = v20;
  float *v3 = v23;
  float *v4 = COERCE_FLOAT((v24 >> 31) ^ (v24 >> 9) | 0x3F800000) + -1.0;
  return result;
}

void sub_100008198(uint64_t a1, uint64_t a2, int a3, float *a4)
{
  float v4 = 80.0;
  if (!a3) {
    float v4 = 0.0;
  }
  *a4 = v4;
}

uint64_t sub_1000081B4()
{
  uint64_t result = vfx_script_get_arguments_buffer();
  float v1 = 80.0;
  if (!**(unsigned char **)(result + 16)) {
    float v1 = 0.0;
  }
  **(float **)(result + 24) = v1;
  return result;
}

void sub_1000081EC(float a1, float a2, uint64_t a3, uint64_t a4, float *a5, float *a6)
{
  *a5 = a1;
  a5[1] = a1;
  *a6 = a2;
  a6[1] = a2;
}

float sub_1000081F8()
{
  uint64_t arguments_buffer = vfx_script_get_arguments_buffer();
  float v1 = *(float **)(arguments_buffer + 16);
  v2 = *(float **)(arguments_buffer + 32);
  v3 = *(_DWORD **)(arguments_buffer + 40);
  float result = *v1;
  int v5 = **(_DWORD **)(arguments_buffer + 24);
  float *v2 = *v1;
  v2[1] = result;
  _DWORD *v3 = v5;
  v3[1] = v5;
  return result;
}

double sub_100008228(__n128 a1, uint64_t a2, uint64_t a3, __n128 *a4, _OWORD *a5)
{
  a1.n128_u32[3] = 1.0;
  *a4 = a1;
  double result = 0.0;
  *a5 = 0u;
  return result;
}

uint64_t sub_100008240()
{
  return vfx_script_get_arguments_buffer();
}

int32x4_t sub_1000082D0(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, float32x4_t *a7, int32x4_t *a8)
{
  *(float *)v10.i32 = fmodf((float)((float)a6 / 200.0) + a1, 1.0);
  int32x2_t v20 = v10;
  vfx_script_clock_time();
  *(float *)&double v11 = v11;
  fmodf(*(float *)v20.i32 + (float)(*(float *)&v11 * 0.3), 1.0);
  vfx_script_texture_sample1d();
  __asm { FMOV            V1.4S, #1.0 }
  *a7 = vmlaq_n_f32(v17, vsubq_f32(_Q1, v17), a2);
  int32x4_t result = vdupq_lane_s32(v20, 0);
  *a8 = result;
  return result;
}

uint64_t sub_100008380()
{
  return vfx_script_get_arguments_buffer();
}

int8x16_t sub_1000084B8(float32x4_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int8x16_t *a6)
{
  vfx_script_clock_delta_time();
  *(float *)v10.i32 = v9 * 5.0;
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t v16 = (int8x16_t)vminnmq_f32(vmaxnmq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v10, 0), a1), (float32x4_t)0), _Q2);
  int8x16_t v17 = (int8x16_t)vmulq_n_f32(a1, (float)(v9 * -10.0) + 1.0);
  if ((a4 & ~a5) != 0) {
    unsigned int v18 = -1;
  }
  else {
    unsigned int v18 = 0;
  }
  int8x16_t result = vbslq_s8((int8x16_t)vdupq_n_s32(v18), v16, v17);
  *a6 = result;
  return result;
}

uint64_t sub_100008544()
{
  return vfx_script_get_arguments_buffer();
}

float32x4_t sub_100008654(float32x4_t a1, float a2, uint64_t a3, uint64_t a4, float32x4_t *a5)
{
  float32x4_t result = vmulq_n_f32(a1, a2);
  *a5 = result;
  return result;
}

__n128 sub_100008660()
{
  vfx_script_get_iteration_range();
  vfx_script_get_arguments_buffer();
  return result;
}

float sub_1000086D8(float a1, float a2, float32x4_t a3, float32x4_t a4, float a5, float a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, float32x4_t *a12)
{
  vfx_script_clock_time();
  *(float *)&double v17 = v17;
  fmodf(a1 + (float)((float)(*(float *)&v17 * 0.3) + a2), 1.0);
  vfx_script_texture_sample1d();
  float32x4_t v19 = vsubq_f32(a3, a4);
  float32x4_t v20 = vmulq_f32(v19, v19);
  float v21 = fminf(fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0])* 4.0, 0.0), 1.0);
  if (a5 > 0.3) {
    float v21 = 1.0;
  }
  __asm { FMOV            V2.4S, #-1.0 }
  float32x4_t v27 = vaddq_f32(v18, _Q2);
  __asm { FMOV            V2.4S, #1.0 }
  float32x4_t v35 = vmlaq_n_f32(_Q2, v27, fminf(fmaxf(v21 - a6, 0.0), 1.0));
  vfx_script_texture_sample1d();
  float result = a7 * v29;
  float32x4_t v31 = vmulq_n_f32(v35, result);
  v31.f32[3] = result;
  *a12 = v31;
  return result;
}

uint64_t sub_1000087F0()
{
  return vfx_script_get_arguments_buffer();
}

char **__vfx_get_script_table_wand()
{
  return &off_100517C50;
}

int main(int argc, const char **argv, const char **envp)
{
  int v3 = static CommandLine.argc.getter();
  float v4 = (char **)static CommandLine.unsafeArgv.getter();
  type metadata accessor for TamaleApp();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  long long v6 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v6 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for TamaleAppDelegate();
  float v7 = (objc_class *)swift_getObjCClassFromMetadata();
  BOOL v8 = NSStringFromClass(v7);
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    BOOL v8 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v3, v4, v6, v8);

  return 0;
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

__n128 initializeWithTake for GeoLookup.GeoLookupResultDebugInfo(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void *_s13ConfigurationVwCP(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _s13ConfigurationVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for CMVideoDimensions(uint64_t a1)
{
}

__n128 initializeWithTake for TamaleDismissAction(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for Corners(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for VMasonryGrid(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VMasonryGrid(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for GEOMapRect(uint64_t a1)
{
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
}

void type metadata accessor for CLAccuracyAuthorization(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for VKCQuickActionType(uint64_t a1)
{
}

void type metadata accessor for BCSParsedDataType(uint64_t a1)
{
}

void type metadata accessor for CGImagePropertyOrientation(uint64_t a1)
{
}

void type metadata accessor for VKDataDetectorTypes(uint64_t a1)
{
}

void sub_100008CDC(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100008CE4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100008CF8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_100008D0C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100008D38@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100008D5C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100008D70@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100008D84(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100008D98(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100008DAC(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100008DC0()
{
  return *v0 == 0;
}

uint64_t sub_100008DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100008DE8(void *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_100008DFC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_100008E0C(uint64_t a1, uint64_t a2)
{
  return sub_10000A0D8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100008E30(uint64_t a1, uint64_t a2)
{
  return sub_10000A0D8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100008E54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_100008E84(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100008E90()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100008EDC()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100008F34()
{
  return sub_100009544();
}

uint64_t sub_100008F4C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100008FC4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100009044@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *sub_100009088@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_10000909C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000090CC(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000090E0(void *result)
{
  *v1 &= *result;
  return result;
}

void sub_1000090F4(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL sub_1000090FC(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100009110@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL sub_100009120(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100009134()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000917C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000091A8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000091EC()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009234()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100009260()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000092A4()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1000092F0()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100009348()
{
  return sub_100009544();
}

uint64_t sub_100009360()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1000093CC()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100009418()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100009470()
{
  return sub_100009544();
}

uint64_t sub_100009488()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1000094D4()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10000952C()
{
  return sub_100009544();
}

Swift::Int sub_100009544()
{
  return Hasher._finalize()();
}

uint64_t sub_1000095A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000A274(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1000095E8()
{
  return sub_100009678(&qword_100518398, type metadata accessor for VKDataDetectorTypes);
}

uint64_t sub_100009630()
{
  return sub_100009678((unint64_t *)&unk_1005183A0, type metadata accessor for VKDataDetectorTypes);
}

uint64_t sub_100009678(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000096C0()
{
  return sub_100009678((unint64_t *)&unk_100529AB0, type metadata accessor for VKDataDetectorTypes);
}

uint64_t sub_100009708()
{
  return sub_100009678(&qword_1005183B0, type metadata accessor for VKDataDetectorTypes);
}

uint64_t sub_100009750()
{
  return sub_100009678(&qword_1005183B8, type metadata accessor for CGImagePropertyOrientation);
}

uint64_t sub_100009798()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

void *sub_100009804@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_100009810@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10000981C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100009828(uint64_t a1)
{
  uint64_t v2 = sub_100009678((unint64_t *)&qword_1005185F8, type metadata accessor for CIImageRepresentationOption);
  uint64_t v3 = sub_100009678(&qword_100518600, type metadata accessor for CIImageRepresentationOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000098E4()
{
  return sub_100009678(&qword_1005183C0, type metadata accessor for CVBuffer);
}

uint64_t sub_10000992C()
{
  return sub_100009678(&qword_1005183C8, type metadata accessor for CVBuffer);
}

uint64_t sub_100009974()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1000099E0()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100009A4C()
{
  return sub_100009678(&qword_1005183D0, type metadata accessor for CGImage);
}

uint64_t sub_100009A94()
{
  return sub_100009678(&qword_1005183D8, type metadata accessor for CGImage);
}

uint64_t sub_100009ADC()
{
  return sub_100009678(&qword_1005183E0, type metadata accessor for CGColor);
}

uint64_t sub_100009B24()
{
  return sub_100009678(&qword_1005183E8, type metadata accessor for CGColor);
}

uint64_t sub_100009B6C(uint64_t a1)
{
  uint64_t v2 = sub_100009678(&qword_100518550, type metadata accessor for CIImageOption);
  uint64_t v3 = sub_100009678(&qword_100518558, type metadata accessor for CIImageOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009C28(uint64_t a1)
{
  uint64_t v2 = sub_100009678(&qword_100518580, type metadata accessor for ObjectType);
  uint64_t v3 = sub_100009678(&qword_100518588, type metadata accessor for ObjectType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009CE4(uint64_t a1)
{
  uint64_t v2 = sub_100009678(&qword_100518608, type metadata accessor for TCTextCompositionAssistantOptionKey);
  uint64_t v3 = sub_100009678(&qword_100518610, type metadata accessor for TCTextCompositionAssistantOptionKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009DA0(uint64_t a1)
{
  uint64_t v2 = sub_100009678(&qword_100518560, type metadata accessor for GEOPOICategory);
  uint64_t v3 = sub_100009678(&qword_100518568, type metadata accessor for GEOPOICategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009E5C(uint64_t a1)
{
  uint64_t v2 = sub_100009678(&qword_100518570, type metadata accessor for DeviceType);
  uint64_t v3 = sub_100009678(&qword_100518578, type metadata accessor for DeviceType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009F18(uint64_t a1)
{
  uint64_t v2 = sub_100009678((unint64_t *)&qword_100518638, type metadata accessor for Key);
  uint64_t v3 = sub_100009678(&qword_100518640, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009FD4@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000A01C(uint64_t a1)
{
  uint64_t v2 = sub_100009678(&qword_100518590, type metadata accessor for VNImageOption);
  uint64_t v3 = sub_100009678(&qword_100518598, type metadata accessor for VNImageOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A0D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10000A11C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000A170()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000A1E4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10000A274(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for CFBoolean(uint64_t a1)
{
}

void type metadata accessor for CIImageOption(uint64_t a1)
{
}

void type metadata accessor for GEOPOICategory(uint64_t a1)
{
}

void type metadata accessor for DeviceType(uint64_t a1)
{
}

void type metadata accessor for ObjectType(uint64_t a1)
{
}

__n128 initializeWithTake for TextDetectorResult.Line(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000A324(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000A344(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void type metadata accessor for FTBoxWithConfidence(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

void type metadata accessor for VNSizeRangeAspectRatioHandling(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
}

void type metadata accessor for RenderingMode(uint64_t a1)
{
}

uint64_t sub_10000A418(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000A438(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for GEOMapSize(uint64_t a1)
{
}

void type metadata accessor for GEOPosition2d(uint64_t a1)
{
}

uint64_t sub_10000A488()
{
  return sub_100009678(&qword_1005184C8, type metadata accessor for VNImageOption);
}

uint64_t sub_10000A4D0()
{
  return sub_100009678(&qword_1005184D0, type metadata accessor for VNImageOption);
}

uint64_t sub_10000A518()
{
  return sub_100009678(&qword_1005184D8, type metadata accessor for ObjectType);
}

uint64_t sub_10000A560()
{
  return sub_100009678(&qword_1005184E0, type metadata accessor for ObjectType);
}

uint64_t sub_10000A5A8()
{
  return sub_100009678(&qword_1005184E8, type metadata accessor for ObjectType);
}

uint64_t sub_10000A5F0()
{
  return sub_100009678(&qword_1005184F0, type metadata accessor for DeviceType);
}

uint64_t sub_10000A638()
{
  return sub_100009678(&qword_1005184F8, type metadata accessor for DeviceType);
}

uint64_t sub_10000A680()
{
  return sub_100009678(&qword_100518500, type metadata accessor for DeviceType);
}

uint64_t sub_10000A6C8()
{
  return sub_100009678(&qword_100518508, type metadata accessor for GEOPOICategory);
}

uint64_t sub_10000A710()
{
  return sub_100009678(&qword_100518510, type metadata accessor for GEOPOICategory);
}

uint64_t sub_10000A758()
{
  return sub_100009678(&qword_100518518, type metadata accessor for GEOPOICategory);
}

uint64_t sub_10000A7A0()
{
  return sub_100009678(&qword_100518520, type metadata accessor for CIImageOption);
}

uint64_t sub_10000A7E8()
{
  return sub_100009678(&qword_100518528, type metadata accessor for CIImageOption);
}

uint64_t sub_10000A830()
{
  return sub_100009678(&qword_100518530, type metadata accessor for CIImageOption);
}

uint64_t sub_10000A878()
{
  return sub_100009678(&qword_100518538, type metadata accessor for CFString);
}

uint64_t sub_10000A8C0()
{
  return sub_100009678(&qword_100518540, type metadata accessor for CFString);
}

uint64_t sub_10000A908()
{
  return sub_100009678(&qword_100518548, type metadata accessor for VNImageOption);
}

void type metadata accessor for CIImageRepresentationOption(uint64_t a1)
{
}

void type metadata accessor for TCTextCompositionAssistantOptionKey(uint64_t a1)
{
}

void type metadata accessor for MKLocalizedHoursState(uint64_t a1)
{
}

void type metadata accessor for GEOError(uint64_t a1)
{
}

uint64_t sub_10000A9A0()
{
  return sub_100009678(&qword_1005185C0, type metadata accessor for MKLocalizedHoursState);
}

uint64_t sub_10000A9E8()
{
  return sub_100009678(&qword_1005185C8, type metadata accessor for TCTextCompositionAssistantOptionKey);
}

uint64_t sub_10000AA30()
{
  return sub_100009678(&qword_1005185D0, type metadata accessor for TCTextCompositionAssistantOptionKey);
}

uint64_t sub_10000AA78()
{
  return sub_100009678(&qword_1005185D8, type metadata accessor for CIImageRepresentationOption);
}

uint64_t sub_10000AAC0()
{
  return sub_100009678(&qword_1005185E0, type metadata accessor for CIImageRepresentationOption);
}

uint64_t sub_10000AB08()
{
  return sub_100009678(&qword_1005185E8, type metadata accessor for CIImageRepresentationOption);
}

uint64_t sub_10000AB50()
{
  return sub_100009678(&qword_1005185F0, type metadata accessor for TCTextCompositionAssistantOptionKey);
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t sub_10000ABAC()
{
  return sub_100009678(&qword_100518620, type metadata accessor for Key);
}

uint64_t sub_10000ABF4()
{
  return sub_100009678(&qword_100518628, type metadata accessor for Key);
}

uint64_t sub_10000AC3C()
{
  return sub_100009678(&qword_100518630, type metadata accessor for Key);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

void sub_10000AC98(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000AD30()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t sub_10000AE84(void *a1)
{
  id v2 = [a1 _createQuickActionInfos];
  sub_10000F734(0, &qword_100518AA0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (qword_100517E60 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000F378(v4, (uint64_t)qword_10055E238);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  unint64_t v7 = v3 >> 62;
  if (!os_log_type_enabled((os_log_t)v5, v6))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  uint64_t v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v1 = 134217984;
  if (v7) {
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v5, v6, "# actionInfos: %ld", v1, 0xCu);
    swift_slowDealloc();
LABEL_8:

    if (v7)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v5) {
        goto LABEL_23;
      }
    }
    if (v5 >= 1) {
      break;
    }
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = 0;
  unint64_t v10 = v3 & 0xC000000000000001;
  uint64_t v24 = v5;
  do
  {
    if (v10) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v3 + 8 * v9 + 32);
    }
    id v12 = v11;
    float32x4_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315650;
      id v16 = [v12 text];
      if (v16)
      {
        double v17 = v16;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;
      }
      else
      {
        unint64_t v20 = 0xE300000000000000;
        uint64_t v18 = 4271950;
      }
      *(void *)(v15 + 4) = sub_1003806B0(v18, v20, &v25);
      swift_bridgeObjectRelease();

      *(_WORD *)(v15 + 12) = 2080;
      [v12 quickActionType];
      *(void *)(v15 + 14) = sub_1003806B0(0x6E776F6E6B6E75, 0xE700000000000000, &v25);
      swift_bridgeObjectRelease();

      *(_WORD *)(v15 + 22) = 2080;
      uint64_t v21 = VKDataDetectorTypes.debugDescription.getter((Swift::UInt)[v12 dataDetectorTypes]);
      *(void *)(v15 + 24) = sub_1003806B0(v21, v22, &v25);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "actionInfo - text: %s, type: %s, dataDetectorTypes: %s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v5 = v24;
      unint64_t v10 = v3 & 0xC000000000000001;
    }
    else
    {
    }
    ++v9;
  }
  while (v5 != v9);
LABEL_23:
  swift_bridgeObjectRelease();
  if (swift_weakLoadStrong())
  {
    sub_10000B3E4(v3);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000B3E4(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517E60 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000F378(v7, (uint64_t)qword_10055E238);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 134217984;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v15[1] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "onVisionKitActionInfosUpdated: %ld", v10, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
  float32x4_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v2;
  v13[5] = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100064D5C((uint64_t)v6, (uint64_t)&unk_100518AB0, (uint64_t)v13);
  return swift_release();
}

id sub_10000B72C()
{
  return sub_10000B9D4(type metadata accessor for LiveTextImageAnalysisViewDelegate);
}

uint64_t type metadata accessor for LiveTextImageAnalysisViewDelegate()
{
  return self;
}

id sub_10000B9BC()
{
  return sub_10000B9D4(type metadata accessor for HitTestUIView);
}

id sub_10000B9D4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  [super dealloc];
}

uint64_t type metadata accessor for HitTestUIView()
{
  return self;
}

uint64_t sub_10000BA44(uint64_t a1)
{
  v2[89] = v1;
  v2[88] = a1;
  uint64_t v3 = type metadata accessor for IndexSet();
  v2[90] = v3;
  v2[91] = *(void *)(v3 - 8);
  v2[92] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[93] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[94] = v5;
  v2[95] = v4;
  return _swift_task_switch(sub_10000BB40, v5, v4);
}

uint64_t sub_10000BB40()
{
  sub_10000FB74(*(void *)(v0 + 704), v0 + 320, &qword_100518A70);
  if (!*(void *)(v0 + 320))
  {
    uint64_t v13 = *(void *)(v0 + 712);
    uint64_t v14 = *(void *)(v0 + 704);
    swift_release();
    sub_10000FBD8(v0 + 320, &qword_100518A70);
    [*(id *)(v13 + 32) setActiveInteractionTypes:0];
    uint64_t v15 = (uint64_t *)(*(void *)(v13 + 16) + OBJC_IVAR____TtC6Tamale13HitTestUIView_isPointInside);
    uint64_t v16 = *v15;
    *uint64_t v15 = 0;
    v15[1] = 0;
    sub_10000F478(v16);
    swift_beginAccess();
    sub_10000F488(v14, v13 + 40);
    swift_endAccess();
LABEL_13:
    swift_task_dealloc();
    double v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  uint64_t v1 = *(void *)(v0 + 712);
  long long v2 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 480) = v2;
  *(_OWORD *)(v0 + 496) = *(_OWORD *)(v0 + 352);
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v0 + 768) = v3;
  id v4 = [v3 view];
  *(void *)(v0 + 776) = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v4;
  id v6 = [v4 window];
  *(void *)(v0 + 784) = v6;
  if (!v6)
  {

LABEL_11:
    swift_release();
LABEL_12:
    sub_10000EB6C((id *)(v0 + 464));
    goto LABEL_13;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v0 + 712);
  sub_10000F4F0(v0 + 464, v0 + 224);
  uint64_t v9 = v8 + 40;
  swift_beginAccess();
  unint64_t v10 = (void *)(v0 + 128);
  sub_10000FB74(v0 + 224, v0 + 80, &qword_100518A70);
  sub_10000FB74(v9, v0 + 128, &qword_100518A70);
  if (!*(void *)(v0 + 80))
  {
    sub_10000FBD8(v0 + 224, &qword_100518A70);
    if (!*v10)
    {
      sub_10000FBD8(v0 + 80, &qword_100518A70);
LABEL_18:
      swift_release();

      goto LABEL_12;
    }
    goto LABEL_20;
  }
  sub_10000FB74(v0 + 80, v0 + 272, &qword_100518A70);
  if (!*v10)
  {
    sub_10000FBD8(v0 + 224, &qword_100518A70);
    sub_10000EB6C((id *)(v0 + 272));
LABEL_20:
    uint64_t v28 = v9;
    sub_10000FBD8(v0 + 80, &qword_100518A78);
    goto LABEL_21;
  }
  uint64_t v28 = v9;
  long long v11 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)v10;
  *(_OWORD *)(v0 + 192) = v11;
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 160);
  sub_10000F734(0, (unint64_t *)&qword_100518A40);
  char v12 = static NSObject.== infix(_:_:)();
  sub_10000EB6C((id *)(v0 + 176));
  sub_10000FBD8(v0 + 224, &qword_100518A70);
  sub_10000EB6C((id *)(v0 + 272));
  sub_10000FBD8(v0 + 80, &qword_100518A70);
  if (v12) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v19 = *(void *)(v0 + 712);
  sub_10000F4F0(v0 + 464, v0 + 368);
  sub_10000FC34(v0 + 368, v0 + 416, &qword_100518A70);
  swift_beginAccess();
  sub_10000F5DC(v0 + 416, v28, &qword_100518A70);
  swift_endAccess();
  [v3 setAnalysis:*(void *)(v0 + 464)];
  [v3 setActiveInteractionTypes:3];
  uint64_t v20 = *(void *)(v19 + 24);
  sub_10000F578(v0 + 472, v0 + 512);
  uint64_t v21 = v20 + OBJC_IVAR____TtC6Tamale33LiveTextImageAnalysisViewDelegate_frame;
  swift_beginAccess();
  sub_10000F5DC(v0 + 512, v21, &qword_100518A80);
  swift_endAccess();
  uint64_t v22 = *(void *)(v0 + 496);
  uint64_t v23 = *(void *)(v0 + 504);
  sub_10000F3B0((void *)(v0 + 472), v22);
  CGImageRef v24 = sub_100398EE0(v22, v23);
  if (v24)
  {
    CGImageRef v25 = v24;
    id v26 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v24 scale:3 orientation:1.0];
    float32x4_t v27 = *(void **)(v20 + OBJC_IVAR____TtC6Tamale33LiveTextImageAnalysisViewDelegate_contentImage);
    *(void *)(v20 + OBJC_IVAR____TtC6Tamale33LiveTextImageAnalysisViewDelegate_contentImage) = v26;
  }
  [v3 updateContentsRect:v28];
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_10000C08C;
  *(void *)(v0 + 584) = swift_continuation_init();
  *(void *)(v0 + 552) = _NSConcreteStackBlock;
  *(void *)(v0 + 560) = 0x40000000;
  *(void *)(v0 + 568) = sub_1003088DC;
  *(void *)(v0 + 576) = &unk_1004E6BD8;
  [v3 beginImageSubjectAnalysisIfNecessaryWithCompletion:v0 + 552];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10000C08C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 760);
  uint64_t v2 = *(void *)(*(void *)v0 + 752);
  return _swift_task_switch(sub_10000C194, v2, v1);
}

uint64_t sub_10000C194()
{
  uint64_t v28 = v0;
  swift_release();
  if (qword_100517E60 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E238);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 768);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    id v6 = [v4 text];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v8 = 4271950;
    }
    *(void *)(v0 + 696) = sub_1003806B0(v8, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LiveTextViewModel text: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  long long v11 = *(void **)(v0 + 784);
  id v26 = *(void **)(v0 + 776);
  char v12 = *(void **)(v0 + 768);
  uint64_t v13 = *(void *)(v0 + 736);
  uint64_t v14 = *(void *)(v0 + 728);
  uint64_t v15 = *(void *)(v0 + 720);
  uint64_t v16 = *(void *)(v0 + 712);
  *(void *)(v0 + 688) = &_swiftEmptyArrayStorage;
  sub_10000F9FC(&qword_100518A88, (void (*)(uint64_t))&type metadata accessor for IndexSet);
  sub_10000F214(&qword_100518A90);
  sub_10000F640();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  IndexSet._bridgeToObjectiveC()(v17);
  uint64_t v19 = v18;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  [v12 highlightSubjectAtIndexSet:v19 showCallout:0 showBurst:0 burstPoint:1 animated:0.0];

  [v12 setWantsAutomaticContentsRectCalculation:0];
  uint64_t v20 = *(void *)(v16 + 16);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (id (**)(double, double))(v20 + OBJC_IVAR____TtC6Tamale13HitTestUIView_isPointInside);
  uint64_t v23 = *(void *)(v20 + OBJC_IVAR____TtC6Tamale13HitTestUIView_isPointInside);
  *uint64_t v22 = sub_10000F71C;
  v22[1] = (id (*)(double, double))v21;
  swift_retain();
  sub_10000F478(v23);

  sub_10000EB6C((id *)(v0 + 464));
  swift_release();
  swift_task_dealloc();
  CGImageRef v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

id sub_10000C54C(double a1, double a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  id v5 = [*(id *)(Strong + 32) interactableItemExistsAtPoint:a1, a2];
  swift_release();
  return v5;
}

uint64_t sub_10000C5D8()
{
  sub_10000FBD8((uint64_t)(v0 + 5), &qword_100518A70);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LiveTextViewModel()
{
  return self;
}

uint64_t sub_10000C654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  type metadata accessor for MainActor();
  v4[8] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[9] = v6;
  v4[10] = v5;
  return _swift_task_switch(sub_10000C6EC, v6, v5);
}

uint64_t sub_10000C6EC()
{
  if (qword_100517F30 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for LoggingSignposter(0);
  sub_10000F378(v2, (uint64_t)qword_10055E3B0);
  sub_10018B270((unint64_t)"VisionKitImageTextAnalysis", 26, 2u, 1, v0 + 2);
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[11] = (uint64_t)v3;
  void *v3 = v0;
  v3[1] = sub_10000C7F0;
  return sub_10000BA44(v1 + 8);
}

uint64_t sub_10000C7F0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_10000C910, v3, v2);
}

uint64_t sub_10000C910()
{
  uint64_t v1 = v0[7];
  swift_release();
  sub_10000F3B0(v0 + 2, v0[5]);
  uint64_t v2 = sub_10018BBE8();
  (*(void (**)(uint64_t))(v1 + 64))(v2);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10000C9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  sub_10000F214(&qword_100518AB8);
  v5[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ActionBarItem(0);
  v5[19] = v6;
  v5[20] = *(void *)(v6 - 8);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[23] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000CAD4;
  return sub_10000CFBC();
}

uint64_t sub_10000CAD4(char a1)
{
  *(unsigned char *)(*(void *)v1 + 225) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10000CBD4, 0, 0);
}

uint64_t sub_10000CBD4()
{
  uint64_t v26 = v0;
  *(unsigned char *)(v0 + 224) = *(unsigned char *)(v0 + 225);
  unint64_t v1 = *(void *)(v0 + 136);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v8 = &_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v3 = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v23 = *(void *)(v0 + 136) + 32;
  unint64_t v24 = v1 & 0xC000000000000001;
  uint64_t v8 = &_swiftEmptyArrayStorage;
  do
  {
    if (v24) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v23 + 8 * v6);
    }
    unint64_t v10 = v9;
    uint64_t v12 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 152);
    id v25 = v9;
    sub_10000D8B4(&v25, (unsigned char *)(v0 + 224), v12);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v12, 1, v11) == 1)
    {
      sub_10000FBD8(*(void *)(v0 + 144), &qword_100518AB8);
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 168);
      uint64_t v13 = *(void *)(v0 + 176);
      sub_10000FB0C(*(void *)(v0 + 144), v13, type metadata accessor for ActionBarItem);
      sub_10000FB0C(v13, v14, type metadata accessor for ActionBarItem);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (void *)sub_1003289A4(0, v8[2] + 1, 1, (unint64_t)v8);
      }
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1) {
        uint64_t v8 = (void *)sub_1003289A4(v15 > 1, v16 + 1, 1, (unint64_t)v8);
      }
      uint64_t v17 = *(void *)(v0 + 168);
      v8[2] = v16 + 1;
      sub_10000FB0C(v17, (uint64_t)v8+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, type metadata accessor for ActionBarItem);
    }
    ++v6;
  }
  while (v2 != v6);
LABEL_18:
  *(void *)(v0 + 192) = v8;
  uint64_t v18 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  sub_10000EFA4(v18 + 16, v0 + 16);
  type metadata accessor for MainActor();
  *(void *)(v0 + 200) = static MainActor.shared.getter();
  uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v21 = v20;
  uint64_t v3 = (uint64_t)sub_10000CE90;
  uint64_t v4 = v19;
  uint64_t v5 = v21;
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10000CE90()
{
  swift_release();
  uint64_t v1 = v0[15];
  v0[26] = v0[14];
  v0[27] = v1;
  swift_retain();
  sub_10000F448((uint64_t)(v0 + 2));
  return _swift_task_switch(sub_10000CF10, 0, 0);
}

uint64_t sub_10000CF10()
{
  (*(void (**)(void))(v0 + 208))(*(void *)(v0 + 192));
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10000CFBC()
{
  v1[16] = v0;
  sub_10000F214(&qword_100518AD8);
  v1[17] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CVDetection();
  v1[24] = v3;
  v1[25] = *(void *)(v3 - 8);
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return _swift_task_switch(sub_10000D140, 0, 0);
}

uint64_t sub_10000D140()
{
  sub_10000EFA4(*(void *)(v0 + 128) + 16, v0 + 16);
  type metadata accessor for MainActor();
  *(void *)(v0 + 224) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10000D1E4, v2, v1);
}

uint64_t sub_10000D1E4()
{
  swift_release();
  uint64_t v1 = (int *)v0[12];
  v0[29] = v0[13];
  swift_retain();
  sub_10000F448((uint64_t)(v0 + 2));
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[30] = v2;
  void *v2 = v0;
  v2[1] = sub_10000D2DC;
  return v4();
}

uint64_t sub_10000D2DC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10000D3FC, 0, 0);
}

uint64_t sub_10000D3FC()
{
  uint64_t v1 = v0[31];
  if (!v1)
  {
LABEL_29:
    uint64_t v39 = 0;
LABEL_30:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v40 = (uint64_t (*)(uint64_t))v0[1];
    return v40(v39);
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_28;
  }
  uint64_t v3 = v0[25];
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v41 = v0[19];
  uint64_t v42 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = v0[26];
    uint64_t v6 = v0[27];
    sub_10000FA44(v4, v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_10000FA44(v6, v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v9 = v0[26];
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = v0[22];
      uint64_t v11 = v0[17];
      sub_10000FB0C(v9, v10, type metadata accessor for TextDetectorResult);
      sub_10000FB0C(v10, v11, type metadata accessor for TextDetectorResult);
      uint64_t v12 = 0;
    }
    else
    {
      sub_10000FAAC(v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v12 = 1;
    }
    uint64_t v13 = v0[27];
    uint64_t v15 = v0[17];
    uint64_t v14 = v0[18];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v15, v12, 1, v14);
    sub_10000FAAC(v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v15, 1, v14) == 1)
    {
      sub_10000FBD8(v0[17], &qword_100518AD8);
    }
    else
    {
      uint64_t v16 = v0[23];
      uint64_t v17 = v0[21];
      sub_10000FB0C(v0[17], v16, type metadata accessor for TextDetectorResult);
      sub_10000FB0C(v16, v17, type metadata accessor for TextDetectorResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = (void *)sub_100328970(0, v5[2] + 1, 1, (unint64_t)v5);
      }
      unint64_t v19 = v5[2];
      unint64_t v18 = v5[3];
      if (v19 >= v18 >> 1) {
        uint64_t v5 = (void *)sub_100328970(v18 > 1, v19 + 1, 1, (unint64_t)v5);
      }
      uint64_t v20 = v0[21];
      v5[2] = v19 + 1;
      sub_10000FB0C(v20, (uint64_t)v5+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v19, type metadata accessor for TextDetectorResult);
    }
    v4 += v42;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease_n();
  uint64_t v21 = v5[2];
  if (!v21)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  uint64_t v43 = v0[18];
  uint64_t v22 = self;
  uint64_t v23 = (char *)v5 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  uint64_t v24 = *(void *)(v41 + 72);
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  while (1)
  {
    uint64_t v26 = v0[20];
    sub_10000FA44((uint64_t)&v23[v25 * v24], v26, type metadata accessor for TextDetectorResult);
    id v27 = [v22 mainScreen];
    [v27 bounds];
    double v29 = v28;
    double v31 = v30;

    BOOL v32 = sub_100377D90(v26, v29, v31, 0.5);
    uint64_t result = v0[20];
    if (!v32)
    {
      uint64_t v34 = *(void *)(result + *(int *)(v43 + 44));
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        if (*(float *)(v34 + 32) >= 0.0)
        {
LABEL_27:
          sub_10000FAAC(result, type metadata accessor for TextDetectorResult);
          swift_bridgeObjectRelease_n();
          uint64_t v39 = 1;
          goto LABEL_30;
        }
        if (v35 != 1) {
          break;
        }
      }
    }
LABEL_17:
    ++v25;
    sub_10000FAAC(result, type metadata accessor for TextDetectorResult);
    if (v25 == v21)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
  }
  v36 = (float *)(v34 + 72);
  uint64_t v37 = 1;
  while (1)
  {
    uint64_t v38 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (*v36 >= 0.0) {
      goto LABEL_27;
    }
    v36 += 10;
    ++v37;
    if (v38 == v35) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

id sub_10000D8B4@<X0>(id *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *a1;
  if (((unint64_t)[*a1 dataDetectorTypes] & 0xC00) == 0)
  {
    id v10 = [v9 text];
    if (!v10) {
      goto LABEL_3;
    }
    uint64_t v13 = v10;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    switch((unint64_t)[v9 quickActionType])
    {
      case 0uLL:
        if (*a2 != 1) {
          goto LABEL_41;
        }
        id v21 = [v9 image];
        UUID.init()();
        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 0, 1, v22);
        uint64_t v23 = swift_allocObject();
        swift_weakInit();
        uint64_t v24 = swift_allocObject();
        swift_weakInit();
        uint64_t v25 = (int *)type metadata accessor for ActionBarItem(0);
        uint64_t v26 = v25[16];
        *(void *)a3 = v56;
        *(void *)(a3 + 8) = v15;
        *(void *)(a3 + 16) = 0x74616C736E617274;
        *(void *)(a3 + 24) = 0xE900000000000065;
        *(unsigned char *)(a3 + 32) = 12;
        *(void *)(a3 + 40) = v21;
        *(void *)(a3 + 48) = 2;
        *(_WORD *)(a3 + 56) = 0;
        *(unsigned char *)(a3 + v25[15]) = 0;
        id v27 = (uint64_t (**)())(a3 + v25[12]);
        *id v27 = sub_100048CB8;
        v27[1] = 0;
        double v28 = (void (**)())(a3 + v25[13]);
        *double v28 = sub_10000F96C;
        v28[1] = (void (*)())v23;
        double v29 = (void (**)())(a3 + v25[14]);
        *double v29 = sub_10000F98C;
        v29[1] = (void (*)())v24;
        *(void *)(a3 + v26) = 0;
        sub_10000FC34((uint64_t)v8, a3 + v25[11], (uint64_t *)&unk_100524ED0);
        return (id)(*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v25 - 1) + 56))(a3, 0, 1, v25);
      case 1uLL:
      case 3uLL:
        swift_bridgeObjectRelease();
        break;
      case 2uLL:
        uint64_t v30 = (uint64_t)[v9 dataDetectorTypes];
        if (v30 > 1023)
        {
          if (v30 != 1024 && v30 != 0x400000 && v30 != 2048) {
            goto LABEL_24;
          }
        }
        else if ((unint64_t)(v30 - 16) > 0x30 || ((1 << (v30 - 16)) & 0x1000000010001) == 0)
        {
          goto LABEL_24;
        }
        if (qword_100517D50 != -1) {
          swift_once();
        }
        uint64_t v31 = qword_10055E068;
        swift_getKeyPath();
        uint64_t v58 = v31;
        sub_10000F9FC(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if ((*(unsigned char *)(v31 + 24) & 1) == 0)
        {
LABEL_41:
          uint64_t v49 = type metadata accessor for ActionBarItem(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(a3, 1, 1, v49);
          return (id)swift_bridgeObjectRelease();
        }
LABEL_24:
        if (([v9 dataDetectorTypes] & 1) == 0) {
          goto LABEL_33;
        }
        if (qword_100517D50 == -1)
        {
          sub_100058408();
          if ((v32 & 1) == 0) {
            goto LABEL_33;
          }
        }
        else
        {
          swift_once();
          sub_100058408();
          if ((v53 & 1) == 0) {
            goto LABEL_33;
          }
        }
        if ((sub_1003CEEB4() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          if (qword_100517E60 != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for Logger();
          sub_10000F378(v50, (uint64_t)qword_10055E238);
          unint64_t v18 = Logger.logObject.getter();
          os_log_type_t v51 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v18, v51))
          {
            v52 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v52 = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, v51, "Hiding phone number action because it doesn't look like a valid number", v52, 2u);
            goto LABEL_42;
          }
LABEL_43:

          break;
        }
        if (qword_100517E60 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10000F378(v33, (uint64_t)qword_10055E238);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Showing phone number action because it looks like a valid number", v36, 2u);
          swift_slowDealloc();
        }

LABEL_33:
        uint64_t v37 = sub_10031A1F0((uint64_t)[v9 dataDetectorTypes]);
        uint64_t v39 = 6650213;
        if (v38) {
          uint64_t v39 = v37;
        }
        uint64_t v55 = v39;
        if (v38) {
          unint64_t v40 = v38;
        }
        else {
          unint64_t v40 = 0xE300000000000000;
        }
        id v41 = [v9 menuImage];
        if (!v41) {
          id v41 = [v9 image];
        }
        uint64_t v42 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v8, 1, 1, v42);
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = v9;
        uint64_t v44 = (int *)type metadata accessor for ActionBarItem(0);
        uint64_t v45 = v44[16];
        *(void *)a3 = v56;
        *(void *)(a3 + 8) = v15;
        *(void *)(a3 + 16) = v55;
        *(void *)(a3 + 24) = v40;
        *(unsigned char *)(a3 + 32) = 5;
        *(void *)(a3 + 40) = v41;
        *(void *)(a3 + 48) = 2;
        *(_WORD *)(a3 + 56) = 0;
        *(unsigned char *)(a3 + v44[15]) = 0;
        v46 = (uint64_t (**)())(a3 + v44[12]);
        *v46 = sub_100048CB8;
        v46[1] = 0;
        v47 = (id (**)())(a3 + v44[13]);
        *v47 = sub_10000F9E4;
        v47[1] = (id (*)())v43;
        v48 = (void *)(a3 + v44[14]);
        void *v48 = 0;
        v48[1] = 0;
        *(void *)(a3 + v45) = 0;
        sub_10000FC34((uint64_t)v8, a3 + v44[11], (uint64_t *)&unk_100524ED0);
        (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v44 - 1) + 56))(a3, 0, 1, v44);
        return v9;
      case 4uLL:
        goto LABEL_41;
      default:
        swift_bridgeObjectRelease();
        if (qword_100517E60 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_10000F378(v16, (uint64_t)qword_10055E238);
        id v17 = v9;
        unint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 136315138;
          [v17 quickActionType];
          uint64_t v57 = sub_1003806B0(0x6E776F6E6B6E75, 0xE700000000000000, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not action bar item for unknown quickActionType: %s", v20, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
LABEL_42:
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_43;
    }
  }
  id v10 = 0;
LABEL_3:
  uint64_t v11 = type metadata accessor for ActionBarItem((uint64_t)v10);
  return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 1, 1, v11);
}

void sub_10000E2E8(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_10000EFA4(Strong + 16, (uint64_t)v6);
    swift_release();
    uint64_t v4 = v6[0];
    swift_retain();
    sub_10000F448((uint64_t)v6);
    id v5 = *(id *)(v4 + 32);
    swift_release();
    [v5 set_isShowingTranslationOverlay:a2 & 1];
  }
}

uint64_t sub_10000E394()
{
  sub_10000F448(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LiveTextView.Coordinator()
{
  return self;
}

uint64_t destroy for LiveTextImageAnalysisInput(id *a1)
{
  uint64_t v1 = (uint64_t)(a1 + 1);

  return _s6Tamale17AnyLocalizedErrorVwxx_0(v1);
}

uint64_t _s6Tamale17AnyLocalizedErrorVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t initializeWithCopy for LiveTextImageAnalysisInput(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v3;
  v8(v4, v5, v7);
  return a1;
}

void **assignWithCopy for LiveTextImageAnalysisInput(void **a1, void **a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 1);
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  long long v6 = (uint64_t *)(a1 + 1);
  id v7 = v3;

  sub_10000E558(v6, v4);
  return a1;
}

uint64_t *sub_10000E558(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for LiveTextImageAnalysisInput(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LiveTextImageAnalysisInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveTextImageAnalysisInput(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveTextImageAnalysisInput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveTextImageAnalysisInput()
{
  return &type metadata for LiveTextImageAnalysisInput;
}

uint64_t destroy for LiveTextView(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 16);
  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LiveTextView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 8) = v6;
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v7;
    uint64_t v8 = v7;
    int v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
    id v10 = v6;
    v9(a1 + 16, a2 + 16, v8);
  }
  else
  {
    long long v11 = v5[1];
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v11;
    *(_OWORD *)(a1 + 40) = v5[2];
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LiveTextView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  long long v7 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  if (v5)
  {
    if (v6)
    {
      *(void *)(a1 + 8) = v6;
      id v8 = v6;

      sub_10000E558((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
    }
    else
    {
      sub_10000EB6C((id *)(a1 + 8));
      long long v13 = *(_OWORD *)(a2 + 24);
      long long v12 = *(_OWORD *)(a2 + 40);
      _OWORD *v4 = *v7;
      *(_OWORD *)(a1 + 24) = v13;
      *(_OWORD *)(a1 + 40) = v12;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = v6;
    uint64_t v9 = *(void *)(a2 + 40);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    id v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
    id v11 = v6;
    v10(a1 + 16, a2 + 16, v9);
  }
  else
  {
    long long v14 = *v7;
    long long v15 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v15;
    _OWORD *v4 = v14;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v16;
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v17;
  swift_retain();
  swift_release();
  uint64_t v18 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v18;
  swift_retain();
  swift_release();
  return a1;
}

id *sub_10000EB6C(id *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);

  _s6Tamale17AnyLocalizedErrorVwxx_0(v2);
  return a1;
}

__n128 initializeWithTake for LiveTextView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for LiveTextView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4) {
    goto LABEL_5;
  }
  if (!v5)
  {
    sub_10000EB6C((id *)(a1 + 8));
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_6;
  }
  *(void *)(a1 + 8) = v5;

  _s6Tamale17AnyLocalizedErrorVwxx_0(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveTextView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveTextView()
{
  return &type metadata for LiveTextView;
}

void *sub_10000ED48()
{
  return &protocol witness table for Never;
}

id sub_10000ED54()
{
  uint64_t v0 = (void *)sub_10000EFDC();

  return v0;
}

uint64_t sub_10000ED80()
{
  return sub_10000F0CC();
}

__n128 sub_10000ED90@<Q0>(uint64_t *a1@<X8>)
{
  sub_10000EFA4(v1, (uint64_t)v7);
  type metadata accessor for LiveTextView.Coordinator();
  uint64_t v3 = swift_allocObject();
  long long v4 = v7[5];
  *(_OWORD *)(v3 + 80) = v7[4];
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 112) = v7[6];
  long long v5 = v7[1];
  *(_OWORD *)(v3 + 16) = v7[0];
  *(_OWORD *)(v3 + 32) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(v3 + 48) = v7[2];
  *(__n128 *)(v3 + 64) = result;
  *a1 = v3;
  return result;
}

uint64_t sub_10000EDFC()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_10000EE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10000F3F4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10000EEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10000F3F4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10000EF08()
{
  return static View._viewListCount(inputs:)();
}

void sub_10000EF24()
{
}

unint64_t sub_10000EF50()
{
  unint64_t result = qword_100518A38;
  if (!qword_100518A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518A38);
  }
  return result;
}

uint64_t sub_10000EFA4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000EFDC()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(*(void *)v0 + 32);
  [v2 setWantsAutomaticContentsRectCalculation:0];
  uint64_t v3 = *(void **)(v1 + 24);
  [v2 setDelegate:v3];
  long long v4 = *(void **)(v1 + 16);
  [v4 addInteraction:v2];
  *((unsigned char *)v4 + OBJC_IVAR____TtC6Tamale13HitTestUIView_shouldPassthroughUserInput) = v0[56];
  [v2 setActiveInteractionTypes:1];
  id v5 = v3;
  sub_10000F214(&qword_100518A60);
  UIViewRepresentableContext.coordinator.getter();
  swift_weakAssign();

  swift_release();
  return *(void *)(v1 + 16);
}

uint64_t sub_10000F0CC()
{
  uint64_t v1 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(*(void *)(*(void *)v0 + 16) + OBJC_IVAR____TtC6Tamale13HitTestUIView_shouldPassthroughUserInput) = v0[56];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  sub_10000EFA4((uint64_t)v0, (uint64_t)v11);
  type metadata accessor for MainActor();
  uint64_t v5 = static MainActor.shared.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = &protocol witness table for MainActor;
  long long v7 = v11[5];
  *(_OWORD *)(v6 + 96) = v11[4];
  *(_OWORD *)(v6 + 112) = v7;
  *(_OWORD *)(v6 + 128) = v11[6];
  long long v8 = v11[1];
  *(_OWORD *)(v6 + 32) = v11[0];
  *(_OWORD *)(v6 + 48) = v8;
  long long v9 = v11[3];
  *(_OWORD *)(v6 + 64) = v11[2];
  *(_OWORD *)(v6 + 80) = v9;
  sub_100064D5C((uint64_t)v3, (uint64_t)&unk_100518A58, v6);
  return swift_release();
}

uint64_t sub_10000F214(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000F258()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {

    _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 48);
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10000F2C4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000FC9C;
  return sub_10000C654(a1, v4, v5, v1 + 32);
}

uint64_t sub_10000F378(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *sub_10000F3B0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10000F3F4()
{
  unint64_t result = qword_100518A68;
  if (!qword_100518A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518A68);
  }
  return result;
}

uint64_t sub_10000F448(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000F478(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10000F488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100518A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)a2 = *(void *)a1;
  uint64_t v4 = a2 + 8;
  uint64_t v5 = a1 + 8;
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v3;
  v8(v4, v5, v7);
  return a2;
}

uint64_t sub_10000F578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000F5DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000F214(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_10000F640()
{
  unint64_t result = qword_100518A98;
  if (!qword_100518A98)
  {
    sub_10000F69C(&qword_100518A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518A98);
  }
  return result;
}

uint64_t sub_10000F69C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000F6E4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

id sub_10000F71C(double a1, double a2)
{
  return sub_10000C54C(a1, a2);
}

uint64_t sub_10000F724(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10000F734(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000F770()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10000F7B8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000F878;
  return sub_10000C9A4(a1, v4, v5, v7, v6);
}

uint64_t sub_10000F878()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10000F96C()
{
  sub_10000E2E8(v0, 1);
}

void sub_10000F98C()
{
  sub_10000E2E8(v0, 0);
}

uint64_t sub_10000F9AC()
{
  return swift_deallocObject();
}

id sub_10000F9E4()
{
  return [*(id *)(v0 + 16) performDefaultAction];
}

uint64_t sub_10000F9FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000FA44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000FAAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000FB0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000FB74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000F214(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000FBD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000F214(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000FC34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000F214(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000FCA0()
{
  return swift_retain();
}

uint64_t destroy for FeatureOnboardingOverlay(uint64_t a1)
{
  sub_10000FD10();
  swift_release();
  if (*(void *)(a1 + 40)) {
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t sub_10000FD10()
{
  return swift_release();
}

uint64_t initializeWithCopy for FeatureOnboardingOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  sub_10000FCA0();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = a2[5];
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  uint64_t v8 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v8;
  swift_retain();
  if (v7)
  {
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  }
  uint64_t v10 = a2[8];
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = a2[9];
  uint64_t v12 = a2[10];
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FeatureOnboardingOverlay(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  sub_10000FCA0();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10000FD10();
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = a2[5];
  if (!*(void *)(a1 + 40))
  {
    if (v8)
    {
      uint64_t v10 = a2[6];
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v10;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    goto LABEL_8;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = a2[6];
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  swift_retain();
  swift_release();
LABEL_8:
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for FeatureOnboardingOverlay(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for FeatureOnboardingOverlay(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_10000FD10();
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v5;
      *(void *)(a1 + 48) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  swift_release();
LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureOnboardingOverlay(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureOnboardingOverlay(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureOnboardingOverlay()
{
  return &type metadata for FeatureOnboardingOverlay;
}

uint64_t sub_10001009C()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_1000100B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000100D0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100010118()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100010144()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100010188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = type metadata accessor for ScrollBounceBehavior();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  __chkstk_darwin(v2);
  os_log_type_t v35 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000F214(&qword_100518AF0);
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_100518AF8);
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000F214(&qword_100518B00);
  __chkstk_darwin(v36);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100518B08);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100518B10);
  __chkstk_darwin(v13 - 8);
  uint64_t v34 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_10000F214(&qword_100518B18);
  __chkstk_darwin(v38);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000F214(&qword_100518B20);
  __chkstk_darwin(v37);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v1;
  static Axis.Set.vertical.getter();
  sub_10000F214(&qword_100518B28);
  sub_100013AA8(&qword_100518B30, &qword_100518B28);
  os_log_type_t v19 = v35;
  ScrollView.init(_:showsIndicators:content:)();
  static ScrollBounceBehavior.basedOnSize.getter();
  unsigned __int8 v20 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v20) {
    Axis.Set.init(rawValue:)();
  }
  sub_100013AA8(&qword_100518B38, &qword_100518AF0);
  uint64_t v21 = v41;
  View.scrollBounceBehavior(_:axes:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v44);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v21);
  uint64_t v22 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = v40;
  uint64_t v25 = v42;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v9, v7, v42);
  uint64_t v26 = (uint64_t *)&v9[*(int *)(v36 + 36)];
  *uint64_t v26 = KeyPath;
  v26[1] = v22;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
  uint64_t v27 = static Alignment.center.getter();
  sub_100224E88(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v12, 0.0, 1, INFINITY, 0, v27, v28);
  sub_10000FBD8((uint64_t)v9, &qword_100518B00);
  uint64_t v29 = v34;
  sub_10000FB74((uint64_t)v12, v34, &qword_100518B08);
  sub_10000FBD8((uint64_t)v12, &qword_100518B08);
  uint64_t v30 = static SafeAreaRegions.all.getter();
  LOBYTE(v22) = static Edge.Set.all.getter();
  sub_10000FB74(v29, (uint64_t)v16, &qword_100518B10);
  uint64_t v31 = &v16[*(int *)(v38 + 36)];
  *(void *)uint64_t v31 = v30;
  v31[8] = v22;
  sub_10000FBD8(v29, &qword_100518B10);
  sub_10000FB74((uint64_t)v16, (uint64_t)v18, &qword_100518B18);
  char v32 = (uint64_t (**)())&v18[*(int *)(v37 + 36)];
  *char v32 = sub_100010C54;
  v32[1] = 0;
  v32[2] = 0;
  v32[3] = 0;
  sub_10000FBD8((uint64_t)v16, &qword_100518B18);
  return sub_10000FC34((uint64_t)v18, v45, &qword_100518B20);
}

uint64_t sub_100010790@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = static Alignment.center.getter();
  a2[1] = v4;
  uint64_t v5 = sub_10000F214(&qword_100518B40);
  return sub_1000107D8(a1, (char *)a2 + *(int *)(v5 + 44));
}

uint64_t sub_1000107D8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v45 = a2;
  uint64_t v2 = sub_10000F214(&qword_100518B48);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000F214(&qword_100518B50);
  __chkstk_darwin(v40);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_100518B58);
  uint64_t v7 = __chkstk_darwin(v42);
  uint64_t v44 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = sub_10000F214(&qword_100518B60);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v43 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v40 - v16;
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v40 - v18;
  *(void *)&long long v46 = 0;
  BYTE8(v46) = 1;
  unsigned __int8 v20 = static Axis.Set.horizontal.getter();
  unsigned __int8 v21 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v20) {
    Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v21) {
    Axis.Set.init(rawValue:)();
  }
  static Alignment.center.getter();
  View.containerRelativeFrame(_:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v17, v11);
  *(void *)uint64_t v4 = static HorizontalAlignment.center.getter();
  *((void *)v4 + 1) = 0x4050000000000000;
  v4[16] = 0;
  uint64_t v22 = sub_10000F214(&qword_100518B68);
  sub_100010D34(v41, (uint64_t)&v4[*(int *)(v22 + 44)]);
  char v23 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_10000FB74((uint64_t)v4, (uint64_t)v6, &qword_100518B48);
  char v32 = &v6[*(int *)(v40 + 36)];
  *char v32 = v23;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_10000FBD8((uint64_t)v4, &qword_100518B48);
  static Edge.Set.vertical.getter();
  long long v46 = 0u;
  long long v47 = 0u;
  char v48 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  sub_10000FC34((uint64_t)v6, (uint64_t)v10, &qword_100518B50);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v34 = v43;
  v33(v43, v19, v11);
  uint64_t v35 = v44;
  sub_10000FB74((uint64_t)v10, v44, &qword_100518B58);
  uint64_t v36 = v45;
  v33(v45, v34, v11);
  uint64_t v37 = sub_10000F214(&qword_100518B70);
  sub_10000FB74(v35, (uint64_t)&v36[*(int *)(v37 + 48)], &qword_100518B58);
  sub_10000FBD8((uint64_t)v10, &qword_100518B58);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v12 + 8);
  v38(v19, v11);
  sub_10000FBD8(v35, &qword_100518B58);
  return ((uint64_t (*)(char *, uint64_t))v38)(v34, v11);
}

uint64_t sub_100010C54()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v5, 0, sizeof(v5));
  AccessibilityNotification.ScreenChanged.init(_:)();
  _AccessibilityNotifications.post()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100010D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v179 = a2;
  uint64_t v3 = sub_10000F214(&qword_100518B78);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v178 = (uint64_t)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v177 = (uint64_t *)((char *)&v140 - v6);
  uint64_t v175 = sub_10000F214(&qword_100518B80);
  __chkstk_darwin(v175);
  uint64_t v8 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OpenURLAction();
  uint64_t v163 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v162 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for Font.Leading();
  uint64_t v150 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  v144 = (char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000F214(&qword_100518B88);
  __chkstk_darwin(v142);
  uint64_t v145 = (uint64_t)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_10000F214(&qword_100518B90);
  __chkstk_darwin(v149);
  uint64_t v146 = (uint64_t)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_10000F214(&qword_100518B98);
  uint64_t v153 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  v148 = (char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000F214(&qword_100518BA0);
  __chkstk_darwin(v143);
  v152 = (char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000F214(&qword_100518BA8);
  __chkstk_darwin(v147);
  uint64_t v155 = (uint64_t)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10000F214(&qword_100518BB0);
  __chkstk_darwin(v156);
  uint64_t v157 = (uint64_t)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_100518BB8);
  __chkstk_darwin(v18 - 8);
  v159 = (char *)&v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000F214(&qword_100518BC0);
  uint64_t v20 = __chkstk_darwin(v158);
  v160 = (char *)&v140 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v161 = (uint64_t)&v140 - v22;
  uint64_t v173 = sub_10000F214(&qword_100518BC8);
  __chkstk_darwin(v173);
  uint64_t v174 = (uint64_t)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v24 - 8);
  uint64_t v25 = sub_10000F214((uint64_t *)&unk_100522E10);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = sub_10000F214(&qword_100518BD0);
  __chkstk_darwin(v164);
  uint64_t v29 = (char *)&v140 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = sub_10000F214(&qword_100518BD8);
  uint64_t v166 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v31 = (char *)&v140 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000F214(&qword_100518BE0);
  __chkstk_darwin(v165);
  uint64_t v33 = (char *)&v140 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000F214(&qword_100518BE8);
  __chkstk_darwin(v168);
  uint64_t v35 = (char *)&v140 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = sub_10000F214(&qword_100518BF0);
  uint64_t v36 = __chkstk_darwin(v169);
  uint64_t v180 = (uint64_t)&v140 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v170 = (uint64_t)&v140 - v38;
  uint64_t v39 = sub_10000F214(&qword_100518BF8);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  v172 = (char *)&v140 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v171 = (uint64_t)&v140 - v42;
  uint64_t v176 = a1;
  if (*(unsigned char *)(a1 + 17))
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v43._countAndFlagsBits = 0x20676E6970706154;
    v43._object = (void *)0xE800000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v43);
    Image.init(_internalSystemName:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v44._countAndFlagsBits = 0x100000000000004ELL;
    v44._object = (void *)0x8000000100424A30;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v44);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v45 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v47 = v46;
    v141 = v8;
    uint64_t v181 = v45;
    uint64_t v182 = v46;
    uint64_t v140 = v9;
    char v49 = v48 & 1;
    char v183 = v48 & 1;
    uint64_t v184 = v50;
    View.accessibilityIdentifier(_:)();
    sub_100012FAC(v45, v47, v49);
    swift_bridgeObjectRelease();
    uint64_t v51 = static Font.title3.getter();
    uint64_t KeyPath = swift_getKeyPath();
    sub_10000FB74((uint64_t)v27, (uint64_t)v29, (uint64_t *)&unk_100522E10);
    char v53 = (uint64_t *)&v29[*(int *)(v164 + 36)];
    *char v53 = KeyPath;
    v53[1] = v51;
    sub_10000FBD8((uint64_t)v27, (uint64_t *)&unk_100522E10);
    static Font.Weight.regular.getter();
    sub_100012FC4();
    View.fontWeight(_:)();
    sub_10000FBD8((uint64_t)v29, &qword_100518BD0);
    uint64_t v54 = swift_getKeyPath();
    uint64_t v55 = v166;
    uint64_t v56 = v167;
    (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v33, v31, v167);
    uint64_t v57 = &v33[*(int *)(v165 + 36)];
    *(void *)uint64_t v57 = v54;
    v57[8] = 1;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v56);
    uint64_t v58 = static Color.white.getter();
    sub_10000FB74((uint64_t)v33, (uint64_t)v35, &qword_100518BE0);
    *(void *)&v35[*(int *)(v168 + 36)] = v58;
    sub_10000FBD8((uint64_t)v33, &qword_100518BE0);
    LocalizedStringKey.init(stringLiteral:)();
    sub_100013140();
    uint64_t v59 = v180;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000FBD8((uint64_t)v35, &qword_100518BE8);
    uint64_t v60 = v59;
    uint64_t v61 = v170;
    sub_10000FC34(v60, v170, &qword_100518BF0);
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v62 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v64 = v63;
    uint64_t v181 = v62;
    uint64_t v182 = v63;
    char v66 = v65 & 1;
    char v183 = v65 & 1;
    uint64_t v184 = v67;
    View.accessibilityIdentifier(_:)();
    sub_100012FAC(v62, v64, v66);
    swift_bridgeObjectRelease();
    uint64_t v68 = static Color.white.getter();
    uint64_t v69 = swift_getKeyPath();
    uint64_t v70 = v145;
    sub_10000FB74((uint64_t)v27, v145, (uint64_t *)&unk_100522E10);
    v71 = (uint64_t *)(v70 + *(int *)(v142 + 36));
    uint64_t *v71 = v69;
    v71[1] = v68;
    sub_10000FBD8((uint64_t)v27, (uint64_t *)&unk_100522E10);
    static Font.subheadline.getter();
    uint64_t v72 = v150;
    v73 = v144;
    uint64_t v74 = v151;
    (*(void (**)(char *, void, uint64_t))(v150 + 104))(v144, enum case for Font.Leading.tight(_:), v151);
    uint64_t v75 = Font.leading(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
    uint64_t v76 = swift_getKeyPath();
    uint64_t v77 = v146;
    sub_10000FB74(v70, v146, &qword_100518B88);
    v78 = (uint64_t *)(v77 + *(int *)(v149 + 36));
    uint64_t *v78 = v76;
    v78[1] = v75;
    sub_10000FBD8(v70, &qword_100518B88);
    static Font.Weight.medium.getter();
    sub_1000132BC();
    v79 = v148;
    View.fontWeight(_:)();
    sub_10000FBD8(v77, &qword_100518B90);
    uint64_t v80 = swift_getKeyPath();
    uint64_t v81 = v153;
    uint64_t v82 = (uint64_t)v152;
    uint64_t v83 = v154;
    (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v152, v79, v154);
    uint64_t v84 = v82 + *(int *)(v143 + 36);
    *(void *)uint64_t v84 = v80;
    *(unsigned char *)(v84 + 8) = 1;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v83);
    static Color.white.getter();
    uint64_t v85 = Color.opacity(_:)();
    swift_release();
    uint64_t v86 = v155;
    sub_10000FB74(v82, v155, &qword_100518BA0);
    *(void *)(v86 + *(int *)(v147 + 36)) = v85;
    sub_10000FBD8(v82, &qword_100518BA0);
    LOBYTE(v80) = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v94 = v93;
    uint64_t v95 = v157;
    sub_10000FB74(v86, v157, &qword_100518BA8);
    uint64_t v96 = v95 + *(int *)(v156 + 36);
    *(unsigned char *)uint64_t v96 = v80;
    *(void *)(v96 + 8) = v88;
    *(void *)(v96 + 16) = v90;
    *(void *)(v96 + 24) = v92;
    *(void *)(v96 + 32) = v94;
    *(unsigned char *)(v96 + 40) = 0;
    sub_10000FBD8(v86, &qword_100518BA8);
    LocalizedStringKey.init(stringLiteral:)();
    sub_100013DD4(&qword_100518C78, &qword_100518BB0, (void (*)(void))sub_1000133FC);
    uint64_t v97 = (uint64_t)v159;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000FBD8(v95, &qword_100518BB0);
    uint64_t v98 = swift_getKeyPath();
    uint64_t v99 = swift_allocObject();
    uint64_t v100 = v176;
    long long v101 = *(_OWORD *)(v176 + 48);
    *(_OWORD *)(v99 + 48) = *(_OWORD *)(v176 + 32);
    *(_OWORD *)(v99 + 64) = v101;
    *(_OWORD *)(v99 + 80) = *(_OWORD *)(v100 + 64);
    *(void *)(v99 + 96) = *(void *)(v100 + 80);
    long long v102 = *(_OWORD *)(v100 + 16);
    *(_OWORD *)(v99 + 16) = *(_OWORD *)v100;
    *(_OWORD *)(v99 + 32) = v102;
    sub_100013634(v100);
    v103 = v162;
    OpenURLAction.init(handler:)();
    uint64_t v104 = (uint64_t)v160;
    v105 = (uint64_t *)&v160[*(int *)(v158 + 36)];
    uint64_t v106 = sub_10000F214(&qword_100518C90);
    uint64_t v107 = v163;
    uint64_t v108 = v140;
    (*(void (**)(char *, char *, uint64_t))(v163 + 16))((char *)v105 + *(int *)(v106 + 28), v103, v140);
    uint64_t *v105 = v98;
    sub_10000FB74(v97, v104, &qword_100518BB8);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v103, v108);
    sub_10000FBD8(v97, &qword_100518BB8);
    uint64_t v109 = v161;
    sub_10000FC34(v104, v161, &qword_100518BC0);
    uint64_t v110 = v180;
    sub_10000FB74(v61, v180, &qword_100518BF0);
    sub_10000FB74(v109, v104, &qword_100518BC0);
    uint64_t v111 = (uint64_t)v141;
    sub_10000FB74(v110, (uint64_t)v141, &qword_100518BF0);
    uint64_t v112 = sub_10000F214(&qword_100518C98);
    sub_10000FB74(v104, v111 + *(int *)(v112 + 48), &qword_100518BC0);
    sub_10000FBD8(v104, &qword_100518BC0);
    sub_10000FBD8(v110, &qword_100518BF0);
    sub_10000FB74(v111, v174, &qword_100518B80);
    swift_storeEnumTagMultiPayload();
    sub_1000136AC(&qword_100518CA0, &qword_100518BF0, (void (*)(void))sub_100013140, (void (*)(void))sub_1000130E0);
    sub_100013AA8(&qword_100518CA8, &qword_100518B80);
    uint64_t v113 = (uint64_t)v172;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v111, &qword_100518B80);
    sub_10000FBD8(v109, &qword_100518BC0);
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v114._countAndFlagsBits = 0x20676E6970706154;
    v114._object = (void *)0xE800000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v114);
    Image.init(_internalSystemName:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v115._countAndFlagsBits = 0x100000000000004DLL;
    v115._object = (void *)0x8000000100424C20;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v115);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v116 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v118 = v117;
    uint64_t v181 = v116;
    uint64_t v182 = v117;
    char v120 = v119 & 1;
    char v183 = v119 & 1;
    uint64_t v184 = v121;
    View.accessibilityIdentifier(_:)();
    sub_100012FAC(v116, v118, v120);
    swift_bridgeObjectRelease();
    uint64_t v122 = static Font.title3.getter();
    uint64_t v123 = swift_getKeyPath();
    sub_10000FB74((uint64_t)v27, (uint64_t)v29, (uint64_t *)&unk_100522E10);
    v124 = (uint64_t *)&v29[*(int *)(v164 + 36)];
    uint64_t *v124 = v123;
    v124[1] = v122;
    sub_10000FBD8((uint64_t)v27, (uint64_t *)&unk_100522E10);
    static Font.Weight.regular.getter();
    sub_100012FC4();
    View.fontWeight(_:)();
    sub_10000FBD8((uint64_t)v29, &qword_100518BD0);
    uint64_t v125 = swift_getKeyPath();
    uint64_t v126 = v166;
    uint64_t v127 = v167;
    (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v33, v31, v167);
    v128 = &v33[*(int *)(v165 + 36)];
    *(void *)v128 = v125;
    v128[8] = 1;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v31, v127);
    uint64_t v129 = static Color.white.getter();
    sub_10000FB74((uint64_t)v33, (uint64_t)v35, &qword_100518BE0);
    *(void *)&v35[*(int *)(v168 + 36)] = v129;
    sub_10000FBD8((uint64_t)v33, &qword_100518BE0);
    LocalizedStringKey.init(stringLiteral:)();
    sub_100013140();
    uint64_t v130 = v180;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000FBD8((uint64_t)v35, &qword_100518BE8);
    uint64_t v61 = v170;
    sub_10000FC34(v130, v170, &qword_100518BF0);
    sub_10000FB74(v61, v174, &qword_100518BF0);
    swift_storeEnumTagMultiPayload();
    sub_1000136AC(&qword_100518CA0, &qword_100518BF0, (void (*)(void))sub_100013140, (void (*)(void))sub_1000130E0);
    sub_100013AA8(&qword_100518CA8, &qword_100518B80);
    uint64_t v113 = (uint64_t)v172;
    _ConditionalContent<>.init(storage:)();
    uint64_t v100 = v176;
  }
  sub_10000FBD8(v61, &qword_100518BF0);
  uint64_t v131 = sub_10000F214(&qword_100518C00);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v113, 0, 1, v131);
  uint64_t v132 = v171;
  sub_10000FC34(v113, v171, &qword_100518BF8);
  uint64_t v133 = static HorizontalAlignment.center.getter();
  uint64_t v134 = (uint64_t)v177;
  uint64_t *v177 = v133;
  *(void *)(v134 + 8) = 0x4000000000000000;
  *(unsigned char *)(v134 + 16) = 0;
  uint64_t v135 = sub_10000F214(&qword_100518C08);
  sub_100012588(v100, v134 + *(int *)(v135 + 44));
  sub_10000FB74(v132, v113, &qword_100518BF8);
  uint64_t v136 = v178;
  sub_10000FB74(v134, v178, &qword_100518B78);
  uint64_t v137 = v179;
  sub_10000FB74(v113, v179, &qword_100518BF8);
  uint64_t v138 = sub_10000F214(&qword_100518C10);
  sub_10000FB74(v136, v137 + *(int *)(v138 + 48), &qword_100518B78);
  sub_10000FBD8(v134, &qword_100518B78);
  sub_10000FBD8(v132, &qword_100518BF8);
  sub_10000FBD8(v136, &qword_100518B78);
  return sub_10000FBD8(v113, &qword_100518BF8);
}

uint64_t sub_100012404(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenURLAction();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.openURL.setter();
}

uint64_t sub_1000124CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10000FCA0();
  uint64_t v6 = (void (*)(uint64_t, char *))sub_10027C858(v3, v4, v5);
  sub_10000FD10();
  char v9 = 1;
  v6(a1, &v9);
  uint64_t v7 = swift_release();

  return static OpenURLAction.Result.handled.getter(v7);
}

uint64_t sub_100012588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = sub_10000F214(&qword_100518CB0);
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  uint64_t v45 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000F214(&qword_100518CB8);
  __chkstk_darwin(v46);
  uint64_t v47 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100518CC0);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  Swift::String v44 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100518CC8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v57 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v54 = (uint64_t)&v43 - v11;
  uint64_t v51 = sub_10000F214(&qword_100518CD0);
  char v53 = *(void (***)(char *, uint64_t))(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000F214(&qword_100518CD8);
  uint64_t v14 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_100518CE0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_100518CE8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (void (**)(char *, uint64_t))((char *)&v43 - v24);
  uint64_t v50 = a1;
  swift_retain();
  sub_10000F214(&qword_100518CF0);
  sub_100013734();
  Button.init(action:label:)();
  sub_100013AA8(&qword_100518D08, &qword_100518CD0);
  sub_1000137D4();
  uint64_t v26 = v51;
  View.buttonStyle<A>(_:)();
  v53[1](v13, v26);
  LODWORD(a1) = static HierarchicalShapeStyle.primary.getter();
  uint64_t v27 = v52;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v16, v52);
  *(_DWORD *)&v19[*(int *)(v17 + 36)] = a1;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v27);
  sub_100013828();
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8((uint64_t)v19, &qword_100518CE0);
  char v53 = v25;
  sub_10000FC34((uint64_t)v23, (uint64_t)v25, &qword_100518CE8);
  uint64_t v28 = *(void *)(v50 + 40);
  uint64_t v29 = 1;
  if (v28)
  {
    swift_retain_n();
    sub_10000F214(&qword_100518D38);
    sub_10001393C();
    uint64_t v30 = v45;
    Button.init(action:label:)();
    char v31 = static Edge.Set.horizontal.getter();
    uint64_t v33 = (uint64_t)v47;
    uint64_t v32 = v48;
    uint64_t v34 = v49;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v47, v30, v49);
    uint64_t v35 = v33 + *(int *)(v46 + 36);
    *(unsigned char *)uint64_t v35 = v31;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(unsigned char *)(v35 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v34);
    sub_100013A08();
    uint64_t v36 = (uint64_t)v44;
    View.accessibilityIdentifier(_:)();
    sub_10000F478(v28);
    sub_10000FBD8(v33, &qword_100518CB8);
    uint64_t v37 = v54;
    sub_10000FC34(v36, v54, &qword_100518CC0);
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v37 = v54;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v37, v29, 1, v56);
  uint64_t v38 = (uint64_t)v53;
  sub_10000FB74((uint64_t)v53, (uint64_t)v23, &qword_100518CE8);
  uint64_t v39 = v57;
  sub_10000FB74(v37, v57, &qword_100518CC8);
  uint64_t v40 = v58;
  sub_10000FB74((uint64_t)v23, v58, &qword_100518CE8);
  uint64_t v41 = sub_10000F214(&qword_100518D30);
  sub_10000FB74(v39, v40 + *(int *)(v41 + 48), &qword_100518CC8);
  sub_10000FBD8(v37, &qword_100518CC8);
  sub_10000FBD8(v38, &qword_100518CE8);
  sub_10000FBD8(v39, &qword_100518CC8);
  return sub_10000FBD8((uint64_t)v23, &qword_100518CE8);
}

uint64_t sub_100012CB0@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title3.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_100012FAC(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Font.Weight.semibold.getter();
  uint64_t v12 = Text.fontWeight(_:)();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  sub_100012FAC(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(unsigned char *)(a1 + 16) = v16 & 1;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

double sub_100012E04@<D0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title3.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  swift_release();
  sub_100012FAC(v2, v4, v6);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v4) = static Edge.Set.all.getter();
  static Color.white.getter();
  uint64_t v15 = Color.opacity(_:)();
  swift_release();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = KeyPath;
  *(void *)(a1 + 40) = 1;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 104) = v15;
  return result;
}

uint64_t sub_100012F50@<X0>(uint64_t a1@<X8>)
{
  return sub_100010188(a1);
}

uint64_t sub_100012F9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100010790(*(void *)(v1 + 16), a1);
}

uint64_t sub_100012FAC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_100012FC4()
{
  unint64_t result = qword_100518C18;
  if (!qword_100518C18)
  {
    sub_10000F69C(&qword_100518BD0);
    sub_100013064();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518C18);
  }
  return result;
}

unint64_t sub_100013064()
{
  unint64_t result = qword_1005232A0;
  if (!qword_1005232A0)
  {
    sub_10000F69C((uint64_t *)&unk_100522E10);
    sub_1000130E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005232A0);
  }
  return result;
}

unint64_t sub_1000130E0()
{
  unint64_t result = qword_100519780;
  if (!qword_100519780)
  {
    type metadata accessor for AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519780);
  }
  return result;
}

unint64_t sub_100013140()
{
  unint64_t result = qword_100518C28;
  if (!qword_100518C28)
  {
    sub_10000F69C(&qword_100518BE8);
    sub_1000134C8(&qword_100518C30, &qword_100518BE0, &qword_100518BD0, (void (*)(void))sub_100012FC4);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518C28);
  }
  return result;
}

uint64_t sub_10001320C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100013238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100013264()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_100013290()
{
  return EnvironmentValues.tintColor.setter();
}

unint64_t sub_1000132BC()
{
  unint64_t result = qword_100518C58;
  if (!qword_100518C58)
  {
    sub_10000F69C(&qword_100518B90);
    sub_10001335C();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518C58);
  }
  return result;
}

unint64_t sub_10001335C()
{
  unint64_t result = qword_100518C60;
  if (!qword_100518C60)
  {
    sub_10000F69C(&qword_100518B88);
    sub_100013064();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518C60);
  }
  return result;
}

unint64_t sub_1000133FC()
{
  unint64_t result = qword_100518C80;
  if (!qword_100518C80)
  {
    sub_10000F69C(&qword_100518BA8);
    sub_1000134C8(&qword_100518C88, &qword_100518BA0, &qword_100518B90, (void (*)(void))sub_1000132BC);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518C80);
  }
  return result;
}

uint64_t sub_1000134C8(unint64_t *a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_10000F69C(a3);
    a4();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C38, &qword_100518C40);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000135A0()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_1000135C8()
{
  sub_10000FD10();
  swift_release();
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10001362C(uint64_t a1)
{
  return sub_1000124CC(a1, v1 + 16);
}

uint64_t sub_100013634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_10000FCA0();
  swift_retain();
  sub_10000F724(v2);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000136AC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100013734()
{
  unint64_t result = qword_100518CF8;
  if (!qword_100518CF8)
  {
    sub_10000F69C(&qword_100518CF0);
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518CF8);
  }
  return result;
}

unint64_t sub_1000137D4()
{
  unint64_t result = qword_100518D10;
  if (!qword_100518D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D10);
  }
  return result;
}

unint64_t sub_100013828()
{
  unint64_t result = qword_100518D18;
  if (!qword_100518D18)
  {
    sub_10000F69C(&qword_100518CE0);
    sub_10000F69C(&qword_100518CD0);
    sub_100013AA8(&qword_100518D08, &qword_100518CD0);
    sub_1000137D4();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518D20, &qword_100518D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D18);
  }
  return result;
}

unint64_t sub_10001393C()
{
  unint64_t result = qword_100518D40;
  if (!qword_100518D40)
  {
    sub_10000F69C(&qword_100518D38);
    sub_100013DD4((unint64_t *)&qword_100518D48, &qword_100518D50, (void (*)(void))sub_100013734);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D40);
  }
  return result;
}

unint64_t sub_100013A08()
{
  unint64_t result = qword_100518D58;
  if (!qword_100518D58)
  {
    sub_10000F69C(&qword_100518CB8);
    sub_100013AA8(&qword_100518D60, &qword_100518CB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D58);
  }
  return result;
}

uint64_t sub_100013AA8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for ActionAnalytics.ActionType(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FeatureOnboardingOverlayExperience(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FeatureOnboardingOverlayExperience(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100013C5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_100013C84(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100013C90(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureOnboardingOverlayExperience()
{
  return &type metadata for FeatureOnboardingOverlayExperience;
}

uint64_t sub_100013CAC()
{
  return sub_100013DD4(&qword_100518D68, &qword_100518B20, (void (*)(void))sub_100013CF0);
}

unint64_t sub_100013CF0()
{
  unint64_t result = qword_100518D70;
  if (!qword_100518D70)
  {
    sub_10000F69C(&qword_100518B18);
    sub_1000136AC(&qword_100518D78, &qword_100518B10, (void (*)(void))sub_100013DA4, (void (*)(void))sub_100013F50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D70);
  }
  return result;
}

uint64_t sub_100013DA4()
{
  return sub_100013DD4(&qword_100518D80, &qword_100518B08, (void (*)(void))sub_100013E50);
}

uint64_t sub_100013DD4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100013E50()
{
  unint64_t result = qword_100518D88;
  if (!qword_100518D88)
  {
    sub_10000F69C(&qword_100518B00);
    sub_10000F69C(&qword_100518AF0);
    sub_100013AA8(&qword_100518B38, &qword_100518AF0);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D88);
  }
  return result;
}

unint64_t sub_100013F50()
{
  unint64_t result = qword_100518D90;
  if (!qword_100518D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D90);
  }
  return result;
}

unint64_t sub_100013FA8()
{
  unint64_t result = qword_100518D98;
  if (!qword_100518D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518D98);
  }
  return result;
}

uint64_t sub_100013FFC@<X0>(uint64_t a1@<X8>)
{
  int v2 = (int *)type metadata accessor for AppConfiguration();
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 0;
  sub_1000D0E9C(a1 + v2[5]);
  *(unsigned char *)(a1 + v2[6]) = 0;
  int v3 = (uint64_t *)(a1 + v2[7]);
  uint64_t *v3 = sub_100371C40();
  v3[1] = v4;
  uint64_t v5 = v2[8];
  if (qword_100517FF0 != -1) {
    swift_once();
  }
  unsigned int v6 = (unsigned char *)(a1 + v5);
  *unsigned int v6 = byte_10055E433;
  v6[1] = 0;
  *(_WORD *)(a1 + v2[10]) = 0;
  uint64_t v7 = a1 + v2[12];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v8 = swift_allocObject();
  ObservationRegistrar.init()();
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  unsigned __int8 v11 = [v9 BOOLForKey:v10];

  swift_setDeallocating();
  uint64_t v12 = v8 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v13 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t result = swift_deallocClassInstance();
  *(unsigned char *)uint64_t v7 = v11;
  *(_WORD *)(v7 + 1) = 0;
  uint64_t v15 = (void *)(a1 + v2[13]);
  *uint64_t v15 = 0;
  v15[1] = 0xE000000000000000;
  return result;
}

uint64_t type metadata accessor for AppConfiguration()
{
  uint64_t result = qword_100518DF8;
  if (!qword_100518DF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100014230(char a1)
{
  unint64_t result = 0xD00000000000001FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000021;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 9:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100014340(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_100014354()
{
  return sub_100014230(*v0);
}

uint64_t sub_10001435C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100017864(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100014384()
{
  return 0;
}

void sub_100014390(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10001439C(uint64_t a1)
{
  unint64_t v2 = sub_100016E18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000143D8(uint64_t a1)
{
  unint64_t v2 = sub_100016E18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100014414(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_100518EC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100016E18();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = v3[1];
  char v10 = v3[2];
  char v11 = v3[3];
  char v12 = v3[4];
  char v13 = v3[5];
  LOBYTE(v30) = *v3;
  BYTE1(v30) = v9;
  BYTE2(v30) = v10;
  BYTE3(v30) = v11;
  BYTE4(v30) = v12;
  BYTE5(v30) = v13;
  char v32 = 0;
  sub_100017284();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for AppConfiguration();
    LOBYTE(v30) = 1;
    type metadata accessor for CameraControllerConfiguration(0);
    sub_1000172D8(&qword_10051E160, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v30) = v3[v14[6]];
    char v32 = 2;
    sub_100017320();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v15 = (uint64_t *)&v3[v14[7]];
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v30 = v17;
    uint64_t v31 = v16;
    char v32 = 3;
    sub_100017374();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = &v3[v14[8]];
    char v19 = *v18;
    LOBYTE(v18) = v18[1];
    LOBYTE(v30) = v19;
    BYTE1(v30) = (_BYTE)v18;
    char v32 = 4;
    sub_1000173C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v30) = 5;
    sub_10001741C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v20 = &v3[v14[10]];
    char v21 = *v20;
    LOBYTE(v20) = v20[1];
    LOBYTE(v30) = v21;
    BYTE1(v30) = (_BYTE)v20;
    char v32 = 6;
    sub_100017470();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v30) = 7;
    sub_1000174C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v22 = &v3[v14[12]];
    char v23 = *v22;
    char v24 = v22[1];
    LOBYTE(v22) = v22[2];
    LOBYTE(v30) = v23;
    BYTE1(v30) = v24;
    BYTE2(v30) = (_BYTE)v22;
    char v32 = 8;
    sub_100017518();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v25 = (uint64_t *)&v3[v14[13]];
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v30 = v27;
    uint64_t v31 = v26;
    char v32 = 9;
    sub_10001756C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100014844@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v59 = a2;
  uint64_t v2 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v2);
  uint64_t v64 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100518E68);
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  __chkstk_darwin(v4);
  uint64_t v68 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for AppConfiguration();
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_WORD *)v9 + 2) = 0;
  *(_DWORD *)char v9 = 0;
  uint64_t v10 = (uint64_t)&v9[*(int *)(v7 + 20)];
  *(_WORD *)uint64_t v10 = 257;
  *(_OWORD *)(v10 + 8) = xmmword_10043CDE0;
  *(_DWORD *)(v10 + 24) = 1028443341;
  *(_WORD *)(v10 + 28) = 0;
  uint64_t v11 = v10 + v2[10];
  uint64_t v12 = type metadata accessor for URL();
  char v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  *(unsigned char *)(v10 + v2[11]) = 0;
  uint64_t v14 = v10 + v2[12];
  if (qword_100517DF8 != -1) {
    swift_once();
  }
  char v15 = byte_10055E110;
  *(void *)uint64_t v14 = qword_10055E108;
  *(unsigned char *)(v14 + 8) = v15;
  *(void *)(v10 + v2[13]) = 0x38D1B7173E19999ALL;
  *(unsigned char *)(v10 + v2[14]) = 0;
  *(unsigned char *)(v10 + v2[15]) = 1;
  *(unsigned char *)(v10 + v2[16]) = 4;
  *(unsigned char *)(v10 + v2[17]) = 0;
  v13(v10 + v2[18], 1, 1, v12);
  *(unsigned char *)(v10 + v2[19]) = 1;
  *(unsigned char *)(v10 + v2[20]) = 0;
  *(unsigned char *)(v10 + v2[21]) = 1;
  v13(v10 + v2[22], 1, 1, v12);
  uint64_t v63 = v6[6];
  v9[v63] = 0;
  uint64_t v16 = (uint64_t *)&v9[v6[7]];
  *uint64_t v16 = sub_100371C40();
  v16[1] = v17;
  uint64_t v62 = v16;
  uint64_t v18 = &v9[v6[8]];
  if (qword_100517FF0 != -1) {
    swift_once();
  }
  *uint64_t v18 = byte_10055E433;
  v18[1] = 0;
  uint64_t v60 = &v9[v6[10]];
  uint64_t v61 = v18;
  *(_WORD *)uint64_t v60 = 0;
  char v19 = &v9[v6[12]];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v20 = swift_allocObject();
  ObservationRegistrar.init()();
  id v21 = [self standardUserDefaults];
  NSString v22 = String._bridgeToObjectiveC()();
  unsigned __int8 v23 = [v21 BOOLForKey:v22];

  swift_setDeallocating();
  uint64_t v24 = v20 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v25 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
  swift_deallocClassInstance();
  *char v19 = v23;
  *(_WORD *)(v19 + 1) = 0;
  uint64_t v26 = v6[13];
  uint64_t v69 = v9;
  uint64_t v27 = &v9[v26];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0xE000000000000000;
  uint64_t v28 = v70;
  sub_10000F3B0(v70, v70[3]);
  sub_100016E18();
  uint64_t v29 = v67;
  uint64_t v30 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29)
  {
    uint64_t v33 = v69;
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v28);
    uint64_t v56 = (uint64_t)v33;
  }
  else
  {
    uint64_t v58 = v27;
    uint64_t v67 = v19;
    char v73 = 0;
    sub_100016EC8();
    uint64_t v31 = v66;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v32 = v30;
    char v35 = BYTE1(v71);
    char v36 = BYTE2(v71);
    char v37 = BYTE3(v71);
    char v38 = BYTE4(v71);
    char v39 = BYTE5(v71);
    uint64_t v40 = v69;
    *uint64_t v69 = v71;
    v40[1] = v35;
    v40[2] = v36;
    v40[3] = v37;
    v40[4] = v38;
    v40[5] = v39;
    LOBYTE(v71) = 1;
    sub_1000172D8(&qword_100518E80, (void (*)(uint64_t))type metadata accessor for CameraControllerConfiguration);
    uint64_t v41 = (uint64_t)v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100016F1C(v41, v10);
    char v73 = 2;
    sub_100016F80();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v40[v63] = v71;
    char v73 = 3;
    sub_100016FD4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v42 = v71;
    uint64_t v43 = v72;
    Swift::String v44 = v62;
    swift_bridgeObjectRelease();
    *Swift::String v44 = v42;
    v44[1] = v43;
    char v73 = 4;
    sub_100017028();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v45 = BYTE1(v71);
    uint64_t v46 = v61;
    *uint64_t v61 = v71;
    v46[1] = v45;
    LOBYTE(v71) = 5;
    sub_10001707C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v73 = 6;
    sub_1000170D0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v47 = BYTE1(v71);
    uint64_t v48 = v60;
    *uint64_t v60 = v71;
    v48[1] = v47;
    LOBYTE(v71) = 7;
    sub_100017124();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v73 = 8;
    sub_100017178();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v49 = BYTE1(v71);
    char v50 = BYTE2(v71);
    uint64_t v51 = v67;
    *uint64_t v67 = v71;
    v51[1] = v49;
    v51[2] = v50;
    char v73 = 9;
    sub_1000171CC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v32, v31);
    uint64_t v52 = v71;
    uint64_t v53 = v72;
    uint64_t v54 = v58;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v54 = v52;
    *((void *)v54 + 1) = v53;
    uint64_t v55 = v69;
    sub_100017220((uint64_t)v69, v59);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v70);
    uint64_t v56 = (uint64_t)v55;
  }
  return sub_100016E6C(v56);
}

uint64_t sub_100015108@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100014844(a1, a2);
}

uint64_t sub_100015120(void *a1)
{
  return sub_100014414(a1);
}

uint64_t sub_10001513C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result = 0;
  if (*a1 == *a2
    && ((a1[1] ^ a2[1]) & 1) == 0
    && ((a1[2] ^ a2[2]) & 1) == 0
    && ((a1[3] ^ a2[3]) & 1) == 0
    && ((a1[4] ^ a2[4]) & 1) == 0
    && a1[5] == a2[5])
  {
    uint64_t v5 = (int *)type metadata accessor for AppConfiguration();
    if (sub_1000DA788((double *)&a1[v5[5]], (double *)&a2[v5[5]]) && a1[v5[6]] == a2[v5[6]])
    {
      uint64_t v6 = v5[7];
      uint64_t v7 = *(void *)&a1[v6];
      uint64_t v8 = *(void *)&a1[v6 + 8];
      char v9 = &a2[v6];
      BOOL v10 = v7 == *(void *)v9 && v8 == *((void *)v9 + 1);
      if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v11 & 1) != 0))
      {
        uint64_t result = 0;
        uint64_t v12 = v5[8];
        char v13 = &a1[v12];
        int v14 = a1[v12];
        char v15 = &a2[v12];
        if (v14 == *v15 && ((v13[1] ^ v15[1]) & 1) == 0)
        {
          uint64_t result = 0;
          uint64_t v16 = v5[10];
          uint64_t v17 = &a1[v16];
          int v18 = a1[v16];
          char v19 = &a2[v16];
          if (v18 == *v19 && ((v17[1] ^ v19[1]) & 1) == 0)
          {
            uint64_t result = 0;
            uint64_t v20 = v5[12];
            id v21 = &a1[v20];
            int v22 = a1[v20];
            unsigned __int8 v23 = &a2[v20];
            if (v22 == *v23 && ((v21[1] ^ v23[1]) & 1) == 0 && ((v21[2] ^ v23[2]) & 1) == 0)
            {
              uint64_t v24 = v5[13];
              uint64_t v25 = *(void *)&a1[v24];
              uint64_t v26 = *(void *)&a1[v24 + 8];
              uint64_t v27 = &a2[v24];
              if (v25 == *(void *)v27 && v26 == *((void *)v27 + 1))
              {
                return 1;
              }
              else
              {
                return _stringCompareWithSmolCheck(_:_:expecting:)();
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *sub_100015328(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(unsigned char *)uint64_t v8 = *((unsigned char *)a2 + v7);
    *(unsigned char *)(v8 + 1) = *((unsigned char *)a2 + v7 + 1);
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + v7 + 8);
    *(_DWORD *)(v8 + 24) = *(_DWORD *)((char *)a2 + v7 + 24);
    *(_WORD *)(v8 + 28) = *(_WORD *)((char *)a2 + v7 + 28);
    BOOL v10 = (int *)type metadata accessor for CameraControllerConfiguration(0);
    uint64_t v11 = v10[10];
    uint64_t v12 = (void *)(v8 + v11);
    char v13 = (const void *)(v9 + v11);
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    if (v43(v13, 1, v14))
    {
      uint64_t v16 = sub_10000F214(&qword_10051E070);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    *(unsigned char *)(v8 + v10[11]) = *(unsigned char *)(v9 + v10[11]);
    uint64_t v18 = v10[12];
    uint64_t v19 = v8 + v18;
    uint64_t v20 = v9 + v18;
    *(void *)uint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
    *(void *)(v8 + v10[13]) = *(void *)(v9 + v10[13]);
    *(unsigned char *)(v8 + v10[14]) = *(unsigned char *)(v9 + v10[14]);
    *(unsigned char *)(v8 + v10[15]) = *(unsigned char *)(v9 + v10[15]);
    *(unsigned char *)(v8 + v10[16]) = *(unsigned char *)(v9 + v10[16]);
    *(unsigned char *)(v8 + v10[17]) = *(unsigned char *)(v9 + v10[17]);
    uint64_t v21 = v10[18];
    int v22 = (void *)(v8 + v21);
    unsigned __int8 v23 = (const void *)(v9 + v21);
    if (v43((const void *)(v9 + v21), 1, v14))
    {
      uint64_t v24 = sub_10000F214(&qword_10051E070);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v25 = v15;
    }
    else
    {
      uint64_t v26 = v23;
      uint64_t v25 = v15;
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v22, v26, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, v14);
    }
    *(unsigned char *)(v8 + v10[19]) = *(unsigned char *)(v9 + v10[19]);
    *(unsigned char *)(v8 + v10[20]) = *(unsigned char *)(v9 + v10[20]);
    *(unsigned char *)(v8 + v10[21]) = *(unsigned char *)(v9 + v10[21]);
    uint64_t v27 = v10[22];
    uint64_t v28 = (void *)(v8 + v27);
    uint64_t v29 = (const void *)(v9 + v27);
    if (v43((const void *)(v9 + v27), 1, v14))
    {
      uint64_t v30 = sub_10000F214(&qword_10051E070);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v28, v29, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v14);
    }
    uint64_t v31 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    char v32 = (void *)((char *)v4 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = v33[1];
    *char v32 = *v33;
    v32[1] = v34;
    *(_WORD *)((char *)v4 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    *(_WORD *)((char *)v4 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
    uint64_t v35 = a3[12];
    uint64_t v36 = a3[13];
    char v37 = (char *)v4 + v35;
    uint64_t v38 = (uint64_t)a2 + v35;
    *(_WORD *)char v37 = *(_WORD *)v38;
    v37[2] = *(unsigned char *)(v38 + 2);
    char v39 = (void *)((char *)v4 + v36);
    uint64_t v40 = (uint64_t *)((char *)a2 + v36);
    uint64_t v41 = v40[1];
    *char v39 = *v40;
    v39[1] = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100015740(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v4 = v2 + v3[10];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + v3[18];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v9 = v2 + v3[22];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000158C0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v5 = a3[5];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(unsigned char *)uint64_t v6 = *(unsigned char *)(a2 + v5);
  *(unsigned char *)(v6 + 1) = *(unsigned char *)(a2 + v5 + 1);
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + v5 + 8);
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(a2 + v5 + 24);
  *(_WORD *)(v6 + 28) = *(_WORD *)(a2 + v5 + 28);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v8[10];
  BOOL v10 = (void *)(v6 + v9);
  uint64_t v11 = (const void *)(v7 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v40(v11, 1, v12))
  {
    uint64_t v14 = sub_10000F214(&qword_10051E070);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(unsigned char *)(v6 + v8[11]) = *(unsigned char *)(v7 + v8[11]);
  uint64_t v15 = v8[12];
  uint64_t v16 = v6 + v15;
  uint64_t v17 = v7 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)(v6 + v8[13]) = *(void *)(v7 + v8[13]);
  *(unsigned char *)(v6 + v8[14]) = *(unsigned char *)(v7 + v8[14]);
  *(unsigned char *)(v6 + v8[15]) = *(unsigned char *)(v7 + v8[15]);
  *(unsigned char *)(v6 + v8[16]) = *(unsigned char *)(v7 + v8[16]);
  *(unsigned char *)(v6 + v8[17]) = *(unsigned char *)(v7 + v8[17]);
  uint64_t v18 = v8[18];
  uint64_t v19 = (void *)(v6 + v18);
  uint64_t v20 = (const void *)(v7 + v18);
  if (v40((const void *)(v7 + v18), 1, v12))
  {
    uint64_t v21 = sub_10000F214(&qword_10051E070);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v13;
  }
  else
  {
    unsigned __int8 v23 = v20;
    uint64_t v22 = v13;
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v19, v23, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
  }
  *(unsigned char *)(v6 + v8[19]) = *(unsigned char *)(v7 + v8[19]);
  *(unsigned char *)(v6 + v8[20]) = *(unsigned char *)(v7 + v8[20]);
  *(unsigned char *)(v6 + v8[21]) = *(unsigned char *)(v7 + v8[21]);
  uint64_t v24 = v8[22];
  uint64_t v25 = (void *)(v6 + v24);
  uint64_t v26 = (const void *)(v7 + v24);
  if (v40((const void *)(v7 + v24), 1, v12))
  {
    uint64_t v27 = sub_10000F214(&qword_10051E070);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v25, v26, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v12);
  }
  uint64_t v28 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  *(_WORD *)(a1 + a3[10]) = *(_WORD *)(a2 + a3[10]);
  uint64_t v32 = a3[12];
  uint64_t v33 = a3[13];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(_WORD *)uint64_t v34 = *(_WORD *)v35;
  *(unsigned char *)(v34 + 2) = *(unsigned char *)(v35 + 2);
  uint64_t v36 = (void *)(a1 + v33);
  char v37 = (void *)(a2 + v33);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_100015C80(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = a3[5];
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  *uint64_t v5 = a2[v4];
  v5[1] = a2[v4 + 1];
  *((void *)v5 + 1) = *(void *)&a2[v4 + 8];
  *((void *)v5 + 2) = *(void *)&a2[v4 + 16];
  *((_DWORD *)v5 + 6) = *(_DWORD *)&a2[v4 + 24];
  v5[28] = a2[v4 + 28];
  v5[29] = a2[v4 + 29];
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v7[10];
  uint64_t v9 = &v5[v8];
  BOOL v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v11 - 8);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v53 + 48);
  int v13 = v12(v9, 1, v11);
  uint64_t v54 = v12;
  int v14 = v12(v10, 1, v11);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))(v9, v10, v11);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_10000F214(&qword_10051E070);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 24))(v9, v10, v11);
LABEL_7:
  v5[v7[11]] = v6[v7[11]];
  uint64_t v16 = v7[12];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = v7[13];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  v5[v7[14]] = v6[v7[14]];
  v5[v7[15]] = v6[v7[15]];
  v5[v7[16]] = v6[v7[16]];
  v5[v7[17]] = v6[v7[17]];
  uint64_t v23 = v7[18];
  uint64_t v24 = &v5[v23];
  uint64_t v25 = &v6[v23];
  int v26 = v54(&v5[v23], 1, v11);
  int v27 = v54(v25, 1, v11);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))(v24, v25, v11);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v24, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v24, v11);
LABEL_12:
    uint64_t v28 = sub_10000F214(&qword_10051E070);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 24))(v24, v25, v11);
LABEL_13:
  v5[v7[19]] = v6[v7[19]];
  v5[v7[20]] = v6[v7[20]];
  v5[v7[21]] = v6[v7[21]];
  uint64_t v29 = v7[22];
  uint64_t v30 = &v5[v29];
  uint64_t v31 = &v6[v29];
  int v32 = v54(&v5[v29], 1, v11);
  int v33 = v54(v31, 1, v11);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 24))(v30, v31, v11);
      goto LABEL_19;
    }
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v30, v11);
    goto LABEL_18;
  }
  if (v33)
  {
LABEL_18:
    uint64_t v34 = sub_10000F214(&qword_10051E070);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 16))(v30, v31, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v11);
LABEL_19:
  a1[a3[6]] = a2[a3[6]];
  uint64_t v35 = a3[7];
  uint64_t v36 = &a1[v35];
  char v37 = &a2[v35];
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[8];
  char v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *char v39 = *v40;
  v39[1] = v40[1];
  uint64_t v41 = a3[10];
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  uint64_t v44 = a3[12];
  char v45 = &a1[v44];
  uint64_t v46 = &a2[v44];
  *char v45 = *v46;
  v45[1] = v46[1];
  v45[2] = v46[2];
  uint64_t v47 = a3[13];
  uint64_t v48 = &a1[v47];
  char v49 = &a2[v47];
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100016200(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  uint64_t v5 = a3[5];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(unsigned char *)uint64_t v6 = *(unsigned char *)(a2 + v5);
  *(unsigned char *)(v6 + 1) = *(unsigned char *)(a2 + v5 + 1);
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + v5 + 8);
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(a2 + v5 + 24);
  *(_WORD *)(v6 + 28) = *(_WORD *)(a2 + v5 + 28);
  uint64_t v8 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = v8[10];
  BOOL v10 = (void *)(v6 + v9);
  uint64_t v11 = (const void *)(v7 + v9);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v34(v11, 1, v12))
  {
    uint64_t v14 = sub_10000F214(&qword_10051E070);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(unsigned char *)(v6 + v8[11]) = *(unsigned char *)(v7 + v8[11]);
  uint64_t v15 = v8[12];
  uint64_t v16 = v6 + v15;
  uint64_t v17 = v7 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)(v6 + v8[13]) = *(void *)(v7 + v8[13]);
  *(unsigned char *)(v6 + v8[14]) = *(unsigned char *)(v7 + v8[14]);
  *(unsigned char *)(v6 + v8[15]) = *(unsigned char *)(v7 + v8[15]);
  *(unsigned char *)(v6 + v8[16]) = *(unsigned char *)(v7 + v8[16]);
  *(unsigned char *)(v6 + v8[17]) = *(unsigned char *)(v7 + v8[17]);
  uint64_t v18 = v8[18];
  uint64_t v19 = (void *)(v6 + v18);
  uint64_t v20 = (const void *)(v7 + v18);
  if (v34((const void *)(v7 + v18), 1, v12))
  {
    uint64_t v21 = sub_10000F214(&qword_10051E070);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v13;
  }
  else
  {
    uint64_t v23 = v20;
    uint64_t v22 = v13;
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v19, v23, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
  }
  *(unsigned char *)(v6 + v8[19]) = *(unsigned char *)(v7 + v8[19]);
  *(unsigned char *)(v6 + v8[20]) = *(unsigned char *)(v7 + v8[20]);
  *(unsigned char *)(v6 + v8[21]) = *(unsigned char *)(v7 + v8[21]);
  uint64_t v24 = v8[22];
  uint64_t v25 = (void *)(v6 + v24);
  int v26 = (const void *)(v7 + v24);
  if (v34((const void *)(v7 + v24), 1, v12))
  {
    uint64_t v27 = sub_10000F214(&qword_10051E070);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v25, v26, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v12);
  }
  uint64_t v28 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v28) = *(_OWORD *)(a2 + v28);
  *(_WORD *)(a1 + a3[8]) = *(_WORD *)(a2 + a3[8]);
  *(_WORD *)(a1 + a3[10]) = *(_WORD *)(a2 + a3[10]);
  uint64_t v29 = a3[12];
  uint64_t v30 = a3[13];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_WORD *)uint64_t v31 = *(_WORD *)v32;
  *(unsigned char *)(v31 + 2) = *(unsigned char *)(v32 + 2);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  return a1;
}

unsigned char *sub_1000165A4(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = a3[5];
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  *uint64_t v5 = a2[v4];
  v5[1] = a2[v4 + 1];
  *(_OWORD *)(v5 + 8) = *(_OWORD *)&a2[v4 + 8];
  *((_DWORD *)v5 + 6) = *(_DWORD *)&a2[v4 + 24];
  v5[28] = a2[v4 + 28];
  v5[29] = a2[v4 + 29];
  uint64_t v7 = (int *)type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v8 = v7[10];
  uint64_t v9 = &v5[v8];
  BOOL v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v11 - 8);
  uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v53 + 48);
  int v13 = v12(v9, 1, v11);
  uint64_t v54 = v12;
  int v14 = v12(v10, 1, v11);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v9, v10, v11);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_10000F214(&qword_10051E070);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 40))(v9, v10, v11);
LABEL_7:
  v5[v7[11]] = v6[v7[11]];
  uint64_t v16 = v7[12];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)&v5[v7[13]] = *(void *)&v6[v7[13]];
  v5[v7[14]] = v6[v7[14]];
  v5[v7[15]] = v6[v7[15]];
  v5[v7[16]] = v6[v7[16]];
  v5[v7[17]] = v6[v7[17]];
  uint64_t v19 = v7[18];
  uint64_t v20 = &v5[v19];
  uint64_t v21 = &v6[v19];
  int v22 = v54(&v5[v19], 1, v11);
  int v23 = v54(v21, 1, v11);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v20, v21, v11);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v20, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v20, v11);
LABEL_12:
    uint64_t v24 = sub_10000F214(&qword_10051E070);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 40))(v20, v21, v11);
LABEL_13:
  v5[v7[19]] = v6[v7[19]];
  v5[v7[20]] = v6[v7[20]];
  v5[v7[21]] = v6[v7[21]];
  uint64_t v25 = v7[22];
  int v26 = &v5[v25];
  uint64_t v27 = &v6[v25];
  int v28 = v54(&v5[v25], 1, v11);
  int v29 = v54(v27, 1, v11);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 40))(v26, v27, v11);
      goto LABEL_19;
    }
    (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v26, v11);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    uint64_t v30 = sub_10000F214(&qword_10051E070);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v26, v27, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v26, 0, 1, v11);
LABEL_19:
  uint64_t v31 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v32 = &a1[v31];
  int v33 = (uint64_t *)&a2[v31];
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *uint64_t v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[8];
  char v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *char v37 = *v38;
  v37[1] = v38[1];
  uint64_t v39 = a3[10];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  uint64_t v42 = a3[12];
  uint64_t v43 = a3[13];
  uint64_t v44 = &a1[v42];
  char v45 = &a2[v42];
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  v44[2] = v45[2];
  uint64_t v46 = &a1[v43];
  uint64_t v47 = (uint64_t *)&a2[v43];
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100016AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100016AF8);
}

uint64_t sub_100016AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100016BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016BD4);
}

uint64_t sub_100016BD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CameraControllerConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100016C98()
{
  uint64_t result = type metadata accessor for CameraControllerConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100016D6C(void *a1)
{
  a1[1] = sub_1000172D8(&qword_100518E50, (void (*)(uint64_t))type metadata accessor for AppConfiguration);
  a1[2] = sub_1000172D8(&qword_100518E58, (void (*)(uint64_t))type metadata accessor for AppConfiguration);
  uint64_t result = sub_1000172D8(&qword_100518E60, (void (*)(uint64_t))type metadata accessor for AppConfiguration);
  a1[3] = result;
  return result;
}

unint64_t sub_100016E18()
{
  unint64_t result = qword_100518E70;
  if (!qword_100518E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518E70);
  }
  return result;
}

uint64_t sub_100016E6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100016EC8()
{
  unint64_t result = qword_100518E78;
  if (!qword_100518E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518E78);
  }
  return result;
}

uint64_t sub_100016F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100016F80()
{
  unint64_t result = qword_100522AA0;
  if (!qword_100522AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100522AA0);
  }
  return result;
}

unint64_t sub_100016FD4()
{
  unint64_t result = qword_100518E88;
  if (!qword_100518E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518E88);
  }
  return result;
}

unint64_t sub_100017028()
{
  unint64_t result = qword_100518E90;
  if (!qword_100518E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518E90);
  }
  return result;
}

unint64_t sub_10001707C()
{
  unint64_t result = qword_100518E98;
  if (!qword_100518E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518E98);
  }
  return result;
}

unint64_t sub_1000170D0()
{
  unint64_t result = qword_100518EA0;
  if (!qword_100518EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EA0);
  }
  return result;
}

unint64_t sub_100017124()
{
  unint64_t result = qword_100518EA8;
  if (!qword_100518EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EA8);
  }
  return result;
}

unint64_t sub_100017178()
{
  unint64_t result = qword_100518EB0;
  if (!qword_100518EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EB0);
  }
  return result;
}

unint64_t sub_1000171CC()
{
  unint64_t result = qword_100518EB8;
  if (!qword_100518EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EB8);
  }
  return result;
}

uint64_t sub_100017220(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100017284()
{
  unint64_t result = qword_100518EC8;
  if (!qword_100518EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EC8);
  }
  return result;
}

uint64_t sub_1000172D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100017320()
{
  unint64_t result = qword_100518ED0;
  if (!qword_100518ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518ED0);
  }
  return result;
}

unint64_t sub_100017374()
{
  unint64_t result = qword_100518ED8;
  if (!qword_100518ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518ED8);
  }
  return result;
}

unint64_t sub_1000173C8()
{
  unint64_t result = qword_100518EE0;
  if (!qword_100518EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EE0);
  }
  return result;
}

unint64_t sub_10001741C()
{
  unint64_t result = qword_100518EE8;
  if (!qword_100518EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EE8);
  }
  return result;
}

unint64_t sub_100017470()
{
  unint64_t result = qword_100518EF0;
  if (!qword_100518EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EF0);
  }
  return result;
}

unint64_t sub_1000174C4()
{
  unint64_t result = qword_100518EF8;
  if (!qword_100518EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518EF8);
  }
  return result;
}

unint64_t sub_100017518()
{
  unint64_t result = qword_100518F00;
  if (!qword_100518F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518F00);
  }
  return result;
}

unint64_t sub_10001756C()
{
  unint64_t result = qword_100518F08;
  if (!qword_100518F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518F08);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001771CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

unsigned char *sub_100017744(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppConfiguration.CodingKeys()
{
  return &type metadata for AppConfiguration.CodingKeys;
}

unint64_t sub_100017760()
{
  unint64_t result = qword_100518F10;
  if (!qword_100518F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518F10);
  }
  return result;
}

unint64_t sub_1000177B8()
{
  unint64_t result = qword_100518F18;
  if (!qword_100518F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518F18);
  }
  return result;
}

unint64_t sub_100017810()
{
  unint64_t result = qword_100518F20;
  if (!qword_100518F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100518F20);
  }
  return result;
}

uint64_t sub_100017864(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001FLL && a2 == 0x8000000100424D60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100424D80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000100424DA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100424DD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100424DF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100424E10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100424E30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100424E50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100424E70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100424E90)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

void *sub_100017C0C(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    unsigned int v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    uint64_t v12 = type metadata accessor for VisualIntelligenceLookupResult(0);
    uint64_t v13 = *(int *)(v12 + 44);
    __dst = (char *)v4 + v13;
    char v37 = (int *)v12;
    int v33 = (char *)a2 + v13;
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v34 = *(void *)(v14 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v33, 1, v14))
    {
      uint64_t v16 = sub_10000F214(&qword_10051E070);
      memcpy(__dst, v33, *(void *)(*(void *)(v16 - 8) + 64));
      uint64_t v17 = v34;
    }
    else
    {
      uint64_t v17 = v34;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v33, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v19 = v37[12];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (v15((char *)a2 + v19, 1, v14))
    {
      uint64_t v22 = sub_10000F214(&qword_10051E070);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v21, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v14);
    }
    *(void *)((char *)v4 + v37[13]) = *(uint64_t *)((char *)a2 + v37[13]);
    *(void *)((char *)v4 + v37[14]) = *(uint64_t *)((char *)a2 + v37[14]);
    uint64_t v23 = a3[5];
    uint64_t v24 = a3[6];
    uint64_t v25 = (char *)v4 + v23;
    int v26 = (char *)a2 + v23;
    *uint64_t v25 = *v26;
    uint64_t v27 = *(void **)((char *)a2 + v24);
    *((void *)v25 + 1) = *((void *)v26 + 1);
    *(void *)((char *)v4 + v24) = v27;
    uint64_t v28 = a3[7];
    __dsta = (char *)v4 + v28;
    uint64_t v38 = (uint64_t)a2 + v28;
    uint64_t v29 = type metadata accessor for SmartDialogAnimationSettings();
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v31 = v27;
    v30(__dsta, v38, v29);
    *(void *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  swift_retain();
  return v4;
}

uint64_t sub_100017F64(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v5 = a1 + *(int *)(v4 + 44);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + *(int *)(v4 + 48);
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v10 = a1 + *(int *)(a2 + 28);
  uint64_t v11 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return swift_release();
}

uint64_t sub_100018124(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v11 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v12 = *(int *)(v11 + 44);
  __dst = (void *)(a1 + v12);
  uint64_t v35 = (int *)v11;
  id v31 = (const void *)(a2 + v12);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v31, 1, v13))
  {
    uint64_t v15 = sub_10000F214(&qword_10051E070);
    memcpy(__dst, v31, *(void *)(*(void *)(v15 - 8) + 64));
    uint64_t v16 = v32;
  }
  else
  {
    uint64_t v16 = v32;
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v31, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v17 = v35[12];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  if (v14((const void *)(a2 + v17), 1, v13))
  {
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v18, v19, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v13);
  }
  *(void *)(a1 + v35[13]) = *(void *)(a2 + v35[13]);
  *(void *)(a1 + v35[14]) = *(void *)(a2 + v35[14]);
  uint64_t v21 = a3[5];
  uint64_t v22 = a3[6];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  uint64_t v25 = *(void **)(a2 + v22);
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  *(void *)(a1 + v22) = v25;
  uint64_t v26 = a3[7];
  __dsta = (void *)(a1 + v26);
  uint64_t v36 = a2 + v26;
  uint64_t v27 = type metadata accessor for SmartDialogAnimationSettings();
  uint64_t v28 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v29 = v25;
  v28(__dsta, v36, v27);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  return a1;
}

uint64_t sub_100018430(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v5 = (int *)type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v6 = v5[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000F214(&qword_10051E070);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[12];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)(a1 + v5[13]) = *(void *)(a2 + v5[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v5[14]) = *(void *)(a2 + v5[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[5];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(unsigned char *)uint64_t v22 = *(unsigned char *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_retain();
  swift_release();
  uint64_t v24 = a3[6];
  uint64_t v25 = *(void **)(a2 + v24);
  uint64_t v26 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = v25;
  id v27 = v25;

  uint64_t v28 = a3[7];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10001886C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v9 = (int *)type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v10 = v9[11];
  uint64_t v11 = (void *)(a1 + v10);
  int v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = v9[12];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  if (v15((const void *)(a2 + v17), 1, v13))
  {
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v18, v19, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
  }
  *(void *)(a1 + v9[13]) = *(void *)(a2 + v9[13]);
  *(void *)(a1 + v9[14]) = *(void *)(a2 + v9[14]);
  uint64_t v21 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v22 = a3[7];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100018AD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v11 = (int *)type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v12 = v11[11];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v11[12];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  int v24 = v17((void *)(a1 + v21), 1, v15);
  int v25 = v17(v23, 1, v15);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v22, v23, v15);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v26 = sub_10000F214(&qword_10051E070);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v22, v23, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
LABEL_13:
  *(void *)(a1 + v11[13]) = *(void *)(a2 + v11[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v11[14]) = *(void *)(a2 + v11[14]);
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[5];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(unsigned char *)uint64_t v28 = *(unsigned char *)v29;
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  swift_release();
  uint64_t v30 = a3[6];
  uint64_t v31 = *(void **)(a1 + v30);
  *(void *)(a1 + v30) = *(void *)(a2 + v30);

  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 40))(v33, v34, v35);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_100018E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018EA4);
}

uint64_t sub_100018EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for SmartDialogAnimationSettings();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100018FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018FE4);
}

uint64_t sub_100018FE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for SmartDialogAnimationSettings();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for VisualLookupSiriView()
{
  uint64_t result = qword_100518F80;
  if (!qword_100518F80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001915C()
{
  uint64_t result = type metadata accessor for VisualIntelligenceLookupResult(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SmartDialogAnimationSettings();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100019248()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_100019264()
{
  double result = 16.0;
  xmmword_10055DFF0 = xmmword_10043D050;
  *(_OWORD *)&qword_10055E000 = xmmword_10043D050;
  return result;
}

__n128 sub_10001927C()
{
  __asm { FMOV            V0.2D, #6.0 }
  xmmword_10055E010 = (__int128)result;
  *(__n128 *)&qword_10055E020 = result;
  return result;
}

void sub_100019290(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_100519118);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100519120);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (unint64_t)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for VisualIntelligenceLookupResult(0) + 56));
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_32;
    }
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    id v12 = *(id *)(v10 + 32);
  }
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  id v14 = [v13 results];

  if (!v14) {
    goto LABEL_39;
  }
  sub_10000F734(0, &qword_100519110);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v10 >> 62))
  {
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v24) {
    goto LABEL_32;
  }
LABEL_9:
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_36:
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_16;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      type metadata accessor for VisualResponseProvider();
      type metadata accessor for VisualLookupSiriView();
      unint64_t v25 = v30;
      static VisualResponseProvider.view(for:context:)();
      swift_release();
      uint64_t v26 = v31;
      (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v5, v25, v6);
      swift_storeEnumTagMultiPayload();
      swift_getOpaqueTypeConformance2();
      _ConditionalContent<>.init(storage:)();

      (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v25, v6);
      return;
    }
    id v15 = *(id *)(v10 + 32);
  }
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  id v17 = [v16 inlineCard];

  if (!v17)
  {
LABEL_33:
    swift_storeEnumTagMultiPayload();
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return;
  }
  id v18 = [v17 cardSections];
  if (!v18)
  {

    goto LABEL_33;
  }
  int v19 = v18;
  id v28 = v17;
  uint64_t v29 = v1;
  unint64_t v30 = v9;
  uint64_t v31 = v7;
  sub_10000F734(0, &qword_100519680);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v32 = _swiftEmptyArrayStorage;
  if (v9 >> 62) {
    goto LABEL_36;
  }
  uint64_t v20 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v20) {
    goto LABEL_37;
  }
LABEL_16:
  v27[1] = v3;
  v27[2] = a1;
  if (v20 >= 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v9 + 8 * i + 32);
      }
      uint64_t v23 = v22;
      if ([v22 shouldShowInSmartDialog])
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    goto LABEL_37;
  }
  __break(1u);
LABEL_39:
  __break(1u);
}

void sub_1000197A4(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_100519108);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v6);
  uint64_t v8 = (_OWORD *)((char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Material();
  uint64_t v77 = *(void *)(v9 - 8);
  uint64_t v78 = v9;
  __chkstk_darwin(v9);
  uint64_t v75 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for VisualLookupCardView(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v72 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_10000F214(&qword_1005190C8);
  __chkstk_darwin(v70);
  uint64_t v73 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000F214(&qword_1005190B8);
  __chkstk_darwin(v71);
  uint64_t v76 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_1005190A8);
  uint64_t v15 = __chkstk_darwin(v79);
  uint64_t v74 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v18 = (char *)&v63 - v17;
  uint64_t v19 = v1;
  unint64_t v20 = *(void *)(v1 + *(int *)(type metadata accessor for VisualIntelligenceLookupResult(0) + 56));
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v21) {
      goto LABEL_32;
    }
  }
  uint64_t v69 = v18;
  if ((v20 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    id v22 = *(id *)(v20 + 32);
  }
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  id v24 = [v23 results];

  if (!v24) {
    goto LABEL_42;
  }
  sub_10000F734(0, &qword_100519110);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v35) {
    goto LABEL_32;
  }
LABEL_9:
  if ((v20 & 0xC000000000000001) != 0)
  {
    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_36:
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v68 = a1;
      if (v30) {
        goto LABEL_16;
      }
      goto LABEL_37;
    }
    id v25 = *(id *)(v20 + 32);
  }
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  id v27 = [v26 inlineCard];

  if (!v27)
  {
LABEL_33:
    swift_storeEnumTagMultiPayload();
    sub_10001B3B8(&qword_1005190A0, &qword_1005190A8, (void (*)(void))sub_10001B45C);
    _ConditionalContent<>.init(storage:)();
    return;
  }
  id v28 = [v27 cardSections];
  if (!v28)
  {

    goto LABEL_33;
  }
  uint64_t v29 = v28;
  id v66 = v27;
  unint64_t v67 = v6;
  sub_10000F734(0, &qword_100519680);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v82 = _swiftEmptyArrayStorage;
  if (v6 >> 62) {
    goto LABEL_36;
  }
  uint64_t v30 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v68 = a1;
  if (v30)
  {
LABEL_16:
    uint64_t v64 = v8;
    *(void *)&long long v65 = v3;
    if (v30 >= 1)
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v32 = *(id *)(v6 + 8 * i + 32);
        }
        uint64_t v33 = v32;
        if ([v32 shouldShowInSmartDialog])
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v82;
      uint64_t v8 = v64;
      goto LABEL_38;
    }
    __break(1u);
LABEL_42:
    __break(1u);
    return;
  }
LABEL_37:
  swift_bridgeObjectRelease();
  uint64_t v34 = _swiftEmptyArrayStorage;
LABEL_38:
  uint64_t v36 = (char *)(v19 + *(int *)(type metadata accessor for VisualLookupSiriView() + 20));
  char v37 = *v36;
  uint64_t v38 = *((void *)v36 + 1);
  char v80 = v37;
  uint64_t v81 = v38;
  sub_10000F214(&qword_100522EA0);
  State.projectedValue.getter();
  uint64_t v39 = v72;
  sub_10001BAD0((uint64_t)v34, (uint64_t)v82, v83, v84, v72);
  if (qword_100517D28 != -1) {
    swift_once();
  }
  long long v65 = xmmword_10055E010;
  uint64_t v40 = qword_10055E020;
  uint64_t v41 = unk_10055E028;
  char v42 = static Edge.Set.all.getter();
  uint64_t v43 = v73;
  sub_10001B684(v39, v73, type metadata accessor for VisualLookupCardView);
  uint64_t v44 = v43 + *(int *)(v70 + 36);
  *(unsigned char *)uint64_t v44 = v42;
  *(_OWORD *)(v44 + 8) = v65;
  *(void *)(v44 + 24) = v40;
  *(void *)(v44 + 32) = v41;
  *(unsigned char *)(v44 + 40) = 0;
  sub_10001B6EC(v39, type metadata accessor for VisualLookupCardView);
  char v45 = v75;
  static Material.thick.getter();
  char v46 = static Edge.Set.all.getter();
  uint64_t v47 = (uint64_t)v76;
  uint64_t v48 = v77;
  uint64_t v49 = &v76[*(int *)(v71 + 36)];
  uint64_t v50 = v78;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v49, v45, v78);
  v49[*(int *)(sub_10000F214(&qword_1005190E0) + 36)] = v46;
  sub_10000FB74(v43, v47, &qword_1005190C8);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v50);
  sub_10000FBD8(v43, &qword_1005190C8);
  uint64_t v51 = (char *)v8 + *(int *)(v67 + 20);
  uint64_t v52 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v53 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 104))(v51, v52, v53);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v8 = _Q0;
  uint64_t v59 = (uint64_t)v74;
  uint64_t v60 = (uint64_t)&v74[*(int *)(v79 + 36)];
  sub_10001B684((uint64_t)v8, v60, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v60 + *(int *)(sub_10000F214(&qword_100519008) + 36)) = 256;
  sub_10000FB74(v47, v59, &qword_1005190B8);
  sub_10001B6EC((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000FBD8(v47, &qword_1005190B8);
  uint64_t v61 = v59;
  uint64_t v62 = (uint64_t)v69;
  sub_10000FC34(v61, (uint64_t)v69, &qword_1005190A8);
  sub_10000FB74(v62, (uint64_t)v5, &qword_1005190A8);
  swift_storeEnumTagMultiPayload();
  sub_10001B3B8(&qword_1005190A0, &qword_1005190A8, (void (*)(void))sub_10001B45C);
  _ConditionalContent<>.init(storage:)();

  sub_10000FBD8(v62, &qword_1005190A8);
}

uint64_t sub_10001A0D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v49 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for VisualLookupSiriView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v3);
  uint64_t v7 = type metadata accessor for SmartDialogAnimationSettings();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[1] = v10;
  uint64_t v46 = sub_10000F214(&qword_100518FC8);
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v40 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000F214(&qword_100518FD0) - 8;
  __chkstk_darwin(v42);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000F214(&qword_100518FD8) - 8;
  __chkstk_darwin(v43);
  uint64_t v41 = (uint64_t)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_100518FE0);
  __chkstk_darwin(v47);
  char v45 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v1 + *(int *)(v4 + 36), v7);
  uint64_t v51 = *(void *)(v1 + *(int *)(v4 + 40));
  sub_10000F214(&qword_100518FE8);
  sub_100013AA8(&qword_100518FF0, &qword_100518FE8);
  v39[0] = Publisher.eraseToAnyPublisher()();
  sub_10001B684(v1, (uint64_t)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for VisualLookupSiriView);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  id v18 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001AD48((uint64_t)v18, v17 + v16);
  sub_10000F214(&qword_100518FF8);
  sub_100013AA8(&qword_100519000, &qword_100518FF8);
  uint64_t v19 = v40;
  SmartDialog.init(animationSettings:animationTrigger:header:body:)();
  sub_10001B684(v1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for VisualLookupSiriView);
  uint64_t v20 = swift_allocObject();
  sub_10001AD48((uint64_t)v18, v20 + v16);
  uint64_t v21 = v44;
  uint64_t v22 = v46;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v13, v19, v46);
  uint64_t v23 = (uint64_t (**)())&v13[*(int *)(v42 + 44)];
  *uint64_t v23 = sub_10001B068;
  v23[1] = (uint64_t (*)())v20;
  v23[2] = 0;
  v23[3] = 0;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v22);
  uint64_t v24 = static Color.clear.getter();
  LOBYTE(v20) = static Edge.Set.all.getter();
  uint64_t v25 = v41;
  sub_10000FB74((uint64_t)v13, v41, &qword_100518FD0);
  uint64_t v26 = v25 + *(int *)(v43 + 44);
  *(void *)uint64_t v26 = v24;
  *(unsigned char *)(v26 + 8) = v20;
  sub_10000FBD8((uint64_t)v13, &qword_100518FD0);
  id v27 = v48;
  id v28 = &v48[*(int *)(v49 + 28)];
  uint64_t v29 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v30 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  __asm { FMOV            V0.2D, #12.0 }
  *id v27 = _Q0;
  uint64_t v36 = (uint64_t)v45;
  uint64_t v37 = (uint64_t)&v45[*(int *)(v47 + 36)];
  sub_10001B684((uint64_t)v27, v37, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v37 + *(int *)(sub_10000F214(&qword_100519008) + 36)) = 256;
  sub_10000FB74(v25, v36, &qword_100518FD8);
  sub_10001B6EC((uint64_t)v27, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10000FBD8(v25, &qword_100518FD8);
  sub_10001B3B8(&qword_100519010, &qword_100518FE0, (void (*)(void))sub_10001B0C8);
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8(v36, &qword_100518FE0);
}

uint64_t sub_10001A774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v44 = sub_10000F214(&qword_100519050);
  __chkstk_darwin(v44);
  uint64_t v41 = (uint64_t)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000F214(&qword_100519058);
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_100519060);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_100519068);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v39 - v11;
  uint64_t v12 = sub_10000F214(&qword_100519070);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_100519078);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_100519080);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v39 - v22;
  uint64_t v43 = a1;
  sub_100019290((uint64_t)v14);
  if (qword_100517D20 != -1) {
    swift_once();
  }
  long long v39 = xmmword_10055DFF0;
  uint64_t v25 = qword_10055E000;
  uint64_t v24 = unk_10055E008;
  char v26 = static Edge.Set.all.getter();
  sub_10000FB74((uint64_t)v14, (uint64_t)v17, &qword_100519070);
  id v27 = &v17[*(int *)(v15 + 36)];
  *id v27 = v26;
  *(_OWORD *)(v27 + 8) = v39;
  *((void *)v27 + 3) = v25;
  *((void *)v27 + 4) = v24;
  v27[40] = 0;
  sub_10000FBD8((uint64_t)v14, &qword_100519070);
  sub_10001B208();
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8((uint64_t)v17, &qword_100519078);
  sub_10000FC34((uint64_t)v21, (uint64_t)v23, &qword_100519080);
  uint64_t v28 = v41;
  sub_1000197A4(v41);
  sub_10001B318();
  uint64_t v29 = v40;
  View.smartDialogAnimatable()();
  sub_10000FBD8(v28, &qword_100519050);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v32 = v46;
  uint64_t v31 = v47;
  uint64_t v33 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v42, v29, v47);
  uint64_t v34 = v33 + *(int *)(v45 + 36);
  *(void *)uint64_t v34 = KeyPath;
  *(unsigned char *)(v34 + 8) = 0;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
  sub_10001B5B0();
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v33, &qword_100519060);
  uint64_t v35 = v48;
  sub_10000FC34((uint64_t)v10, v48, &qword_100519068);
  sub_10000FB74((uint64_t)v23, (uint64_t)v21, &qword_100519080);
  sub_10000FB74(v35, (uint64_t)v10, &qword_100519068);
  uint64_t v36 = v49;
  sub_10000FB74((uint64_t)v21, v49, &qword_100519080);
  uint64_t v37 = sub_10000F214(&qword_100519100);
  sub_10000FB74((uint64_t)v10, v36 + *(int *)(v37 + 48), &qword_100519068);
  sub_10000FBD8(v35, &qword_100519068);
  sub_10000FBD8((uint64_t)v23, &qword_100519080);
  sub_10000FBD8((uint64_t)v10, &qword_100519068);
  return sub_10000FBD8((uint64_t)v21, &qword_100519080);
}

uint64_t sub_10001ACC4()
{
  return Subject<>.send()();
}

uint64_t sub_10001AD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualLookupSiriView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001ADAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for VisualLookupSiriView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10001A774(v4, a1);
}

uint64_t sub_10001AE20()
{
  uint64_t v1 = type metadata accessor for VisualLookupSiriView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v4 = v2 + *(int *)(v3 + 44);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = v2 + *(int *)(v3 + 48);
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v9 = v2 + *(int *)(v1 + 28);
  uint64_t v10 = type metadata accessor for SmartDialogAnimationSettings();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10001B068()
{
  type metadata accessor for VisualLookupSiriView();

  return sub_10001ACC4();
}

unint64_t sub_10001B0C8()
{
  unint64_t result = qword_100519018;
  if (!qword_100519018)
  {
    sub_10000F69C(&qword_100518FD8);
    sub_10001B168();
    sub_100013AA8(&qword_100519030, &qword_100519038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519018);
  }
  return result;
}

unint64_t sub_10001B168()
{
  unint64_t result = qword_100519020;
  if (!qword_100519020)
  {
    sub_10000F69C(&qword_100518FD0);
    sub_100013AA8(&qword_100519028, &qword_100518FC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519020);
  }
  return result;
}

unint64_t sub_10001B208()
{
  unint64_t result = qword_100519088;
  if (!qword_100519088)
  {
    sub_10000F69C(&qword_100519078);
    sub_10001B284();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519088);
  }
  return result;
}

unint64_t sub_10001B284()
{
  unint64_t result = qword_100519090;
  if (!qword_100519090)
  {
    sub_10000F69C(&qword_100519070);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519090);
  }
  return result;
}

unint64_t sub_10001B318()
{
  unint64_t result = qword_100519098;
  if (!qword_100519098)
  {
    sub_10000F69C(&qword_100519050);
    sub_10001B3B8(&qword_1005190A0, &qword_1005190A8, (void (*)(void))sub_10001B45C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519098);
  }
  return result;
}

uint64_t sub_10001B3B8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    sub_100013AA8(&qword_100519040, &qword_100519008);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001B45C()
{
  unint64_t result = qword_1005190B0;
  if (!qword_1005190B0)
  {
    sub_10000F69C(&qword_1005190B8);
    sub_10001B4FC();
    sub_100013AA8(&qword_1005190D8, &qword_1005190E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005190B0);
  }
  return result;
}

unint64_t sub_10001B4FC()
{
  unint64_t result = qword_1005190C0;
  if (!qword_1005190C0)
  {
    sub_10000F69C(&qword_1005190C8);
    sub_10001B820(&qword_1005190D0, (void (*)(uint64_t))type metadata accessor for VisualLookupCardView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005190C0);
  }
  return result;
}

unint64_t sub_10001B5B0()
{
  unint64_t result = qword_1005190E8;
  if (!qword_1005190E8)
  {
    sub_10000F69C(&qword_100519060);
    sub_10000F69C(&qword_100519050);
    sub_10001B318();
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005190E8);
  }
  return result;
}

uint64_t sub_10001B684(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001B6EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10001B750()
{
  unint64_t result = qword_100519128;
  if (!qword_100519128)
  {
    sub_10000F69C(&qword_100519130);
    sub_10001B3B8(&qword_100519010, &qword_100518FE0, (void (*)(void))sub_10001B0C8);
    sub_10001B820((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519128);
  }
  return result;
}

uint64_t sub_10001B820(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001B868()
{
  swift_getKeyPath();
  sub_10001BA78();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10001B8D8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t sub_10001B8E0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale13LaunchOptions___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10001B980()
{
  return type metadata accessor for LaunchOptions();
}

uint64_t type metadata accessor for LaunchOptions()
{
  uint64_t result = qword_100519168;
  if (!qword_100519168) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001B9D4()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10001BA78()
{
  unint64_t result = qword_100519238;
  if (!qword_100519238)
  {
    type metadata accessor for LaunchOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519238);
  }
  return result;
}

void sub_10001BAD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v26 = a4;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  v23[1] = a1;
  uint64_t v6 = sub_10000F214(&qword_100519590);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v23 - v10;
  *(void *)a5 = swift_getKeyPath();
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  uint64_t v12 = (int *)type metadata accessor for VisualLookupCardView(0);
  uint64_t v13 = type metadata accessor for IdentifiableURL();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v11, 1, 1, v13);
  sub_10000FB74((uint64_t)v11, (uint64_t)v9, &qword_100519590);
  State.init(wrappedValue:)();
  sub_10000FBD8((uint64_t)v11, &qword_100519590);
  v14(v11, 1, 1, v13);
  sub_10000FB74((uint64_t)v11, (uint64_t)v9, &qword_100519590);
  State.init(wrappedValue:)();
  sub_10000FBD8((uint64_t)v11, &qword_100519590);
  uint64_t v15 = a5 + v12[9];
  *(void *)uint64_t v15 = sub_10001BD90;
  *(void *)(v15 + 8) = 0;
  *(unsigned char *)(v15 + 16) = 0;
  uint64_t v16 = a5 + v12[10];
  *(void *)uint64_t v16 = sub_10001BEF0;
  *(void *)(v16 + 8) = 0;
  *(unsigned char *)(v16 + 16) = 0;
  uint64_t v17 = (void *)(a5 + v12[11]);
  uint64_t v27 = 0x4061800000000000;
  State.init(wrappedValue:)();
  uint64_t v18 = v29;
  *uint64_t v17 = v28;
  v17[1] = v18;
  id v19 = [objc_allocWithZone((Class)SFCard) init];
  *(void *)(a5 + 24) = v19;
  id v20 = v19;
  [v20 setType:1];
  sub_10000F734(0, &qword_100519680);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v20 setCardSections:isa];

  uint64_t v22 = v25;
  *(void *)(a5 + 32) = v24;
  *(void *)(a5 + 40) = v22;
  *(unsigned char *)(a5 + 48) = v26;
}

uint64_t sub_10001BD90()
{
  uint64_t v0 = sub_10000F214(&qword_100519678);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ObservableSize(0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v4 + OBJC_IVAR____TtC6Tamale14ObservableSize__size;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 1;
  sub_10000F214((uint64_t *)&unk_100519288);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v3, v0);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v10 = 1;
  swift_retain();
  static Published.subscript.setter();
  return v4;
}

uint64_t sub_10001BEF0()
{
  type metadata accessor for ObservableDrillIn(0);
  uint64_t v0 = swift_allocObject();
  sub_10000F214((uint64_t *)&unk_100519380);
  Published.init(initialValue:)();
  return v0;
}

uint64_t sub_10001BF5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v86 = a1;
  uint64_t v84 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v84);
  uint64_t v81 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for VisualLookupCardView(0);
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v73 = *(void *)(v74 + 64);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3 - 8);
  uint64_t v85 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v90 = (uint64_t)&v65 - v7;
  uint64_t v88 = (uint64_t (*)(void))type metadata accessor for SearchCardView(0);
  __chkstk_darwin(v88);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000F214(&qword_100519740);
  __chkstk_darwin(v75);
  uint64_t v91 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_100519748);
  uint64_t v80 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v89 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000F214(&qword_100519750);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v76 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_100519758);
  __chkstk_darwin(v13 - 8);
  uint64_t v78 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000F214(&qword_100519760);
  __chkstk_darwin(v93);
  uint64_t v92 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void **)(v1 + 24);
  uint64_t v71 = type metadata accessor for ObservableSize(0);
  uint64_t v68 = (uint64_t (*)(void))sub_10001F694(&qword_100519768, (void (*)(uint64_t))type metadata accessor for ObservableSize);
  id v67 = v16;
  uint64_t v66 = StateObject.wrappedValue.getter();
  uint64_t v72 = v4;
  type metadata accessor for ObservableDrillIn(0);
  sub_10001F694(&qword_100519770, (void (*)(uint64_t))type metadata accessor for ObservableDrillIn);
  uint64_t v17 = StateObject.wrappedValue.getter();
  uint64_t v18 = *(void *)(v1 + 40);
  char v19 = *(unsigned char *)(v1 + 48);
  uint64_t v94 = *(char **)(v1 + 32);
  uint64_t v95 = v18;
  LOBYTE(v96) = v19;
  uint64_t v77 = sub_10000F214(&qword_100519660);
  Binding.projectedValue.getter();
  long long v20 = v103;
  LOBYTE(v16) = v104;
  uint64_t v70 = v1 + *(int *)(v4 + 40);
  uint64_t v87 = v1;
  uint64_t v69 = sub_10000F214(&qword_100519688);
  State.projectedValue.getter();
  uint64_t v21 = v66;
  *(void *)uint64_t v9 = v67;
  *((void *)v9 + 1) = v21;
  *((void *)v9 + 2) = v17;
  *(_OWORD *)(v9 + 24) = v20;
  v9[40] = (char)v16;
  sub_10001F694(&qword_100519640, (void (*)(uint64_t))type metadata accessor for SearchCardView);
  View.accessibilityIdentifier(_:)();
  sub_10001F634((uint64_t)v9, type metadata accessor for SearchCardView);
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v88 = type metadata accessor for VisualLookupCardView;
  uint64_t v22 = v90;
  sub_1000214F8(v1, v90, type metadata accessor for VisualLookupCardView);
  uint64_t v23 = *(unsigned __int8 *)(v74 + 80);
  uint64_t v24 = (v23 + 16) & ~v23;
  v73 += v24;
  uint64_t v71 = v23 | 7;
  uint64_t v25 = swift_allocObject();
  uint64_t v74 = v24;
  uint64_t v68 = type metadata accessor for VisualLookupCardView;
  sub_100021D80(v22, v25 + v24, type metadata accessor for VisualLookupCardView);
  uint64_t v26 = sub_10000F214((uint64_t *)&unk_100519288);
  unint64_t v27 = sub_1000215E4();
  unint64_t v28 = sub_1000216C0();
  uint64_t v29 = v75;
  uint64_t v30 = (uint64_t)v91;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8(v30, &qword_100519740);
  uint64_t v31 = (uint64_t)v81;
  State.wrappedValue.getter();
  uint64_t v32 = v90;
  sub_1000214F8(v87, v90, v88);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v32;
  uint64_t v35 = v68;
  sub_100021D80(v32, v33 + v24, v68);
  *(void *)&long long v103 = v29;
  *((void *)&v103 + 1) = v26;
  *(void *)&long long v104 = v27;
  *((void *)&v104 + 1) = v28;
  swift_getOpaqueTypeConformance2();
  sub_100021A1C();
  uint64_t v36 = v76;
  uint64_t v37 = v79;
  uint64_t v38 = v89;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8(v31, &qword_100519590);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v37);
  uint64_t v39 = static Alignment.center.getter();
  uint64_t v40 = v78;
  double v42 = sub_100224EE4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v78, 0.0, 1, 0.0, 1, v39, v41);
  (*(void (**)(char *, uint64_t, double))(v82 + 8))(v36, v83, v42);
  uint64_t v43 = v87;
  uint64_t v44 = (uint64_t *)(v87 + *(int *)(v72 + 52));
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  *(void *)&long long v103 = v45;
  *((void *)&v103 + 1) = v46;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v47 = v92;
  sub_10000FB74(v40, v92, &qword_100519758);
  uint64_t v48 = (_OWORD *)(v47 + *(int *)(v93 + 36));
  long long v49 = v104;
  _OWORD *v48 = v103;
  v48[1] = v49;
  v48[2] = v105;
  sub_10000FBD8(v40, &qword_100519758);
  uint64_t v50 = *(void *)(v43 + 40);
  char v51 = *(unsigned char *)(v43 + 48);
  uint64_t v100 = *(void *)(v43 + 32);
  uint64_t v101 = v50;
  char v102 = v51;
  Binding.projectedValue.getter();
  uint64_t v89 = v94;
  LODWORD(v91) = v96;
  uint64_t v52 = v88;
  sub_1000214F8(v43, v34, v88);
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v74;
  sub_100021D80(v34, v53 + v74, v35);
  uint64_t v55 = v85;
  sub_1000214F8(v43, v85, v52);
  uint64_t v56 = swift_allocObject();
  sub_100021D80(v55, v56 + v54, v35);
  sub_10000F214(&qword_1005197B0);
  sub_100021B50();
  uint64_t v57 = type metadata accessor for VisualLookupDrillInView();
  uint64_t v58 = type metadata accessor for IdentifiableURL();
  uint64_t v59 = type metadata accessor for InAppWebPresentationView(255);
  uint64_t v60 = sub_10001F694(&qword_1005197C8, (void (*)(uint64_t))type metadata accessor for VisualLookupDrillInView);
  uint64_t v61 = sub_10001F694(&qword_1005197D0, (void (*)(uint64_t))type metadata accessor for IdentifiableURL);
  uint64_t v62 = sub_10001F694(&qword_1005197D8, (void (*)(uint64_t))type metadata accessor for InAppWebPresentationView);
  uint64_t v94 = (char *)v57;
  uint64_t v95 = v58;
  uint64_t v96 = v59;
  uint64_t v97 = v60;
  uint64_t v98 = v61;
  uint64_t v99 = v62;
  swift_getOpaqueTypeConformance2();
  uint64_t v63 = v92;
  View.fullScreenCover<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_10000FBD8(v63, &qword_100519760);
}

uint64_t sub_10001CB90(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    __chkstk_darwin(result);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10001CC34()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10001CCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v24[-v9];
  __chkstk_darwin(v11);
  uint64_t v13 = &v24[-v12];
  uint64_t v14 = type metadata accessor for IdentifiableURL();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000FB74(a2, (uint64_t)v13, &qword_100519590);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1) {
    return sub_10000FBD8((uint64_t)v13, &qword_100519590);
  }
  sub_100021D80((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
  int v19 = MKBGetDeviceLockState();
  if (v19 && v19 != 3)
  {
    uint64_t v20 = *(void *)a3;
    uint64_t v21 = *(void *)(a3 + 8);
    char v22 = *(unsigned char *)(a3 + 16);
    sub_10000FCA0();
    uint64_t v23 = (void (*)(unsigned char *, char *))sub_10027C858(v20, v21, v22);
    sub_10000FD10();
    char v25 = 1;
    v23(v17, &v25);
    swift_release();
  }
  else
  {
    sub_1000214F8((uint64_t)v17, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
    type metadata accessor for VisualLookupCardView(0);
    sub_10000FB74((uint64_t)v10, (uint64_t)v7, &qword_100519590);
    sub_10000F214(&qword_100519688);
    State.wrappedValue.setter();
    sub_10000FBD8((uint64_t)v10, &qword_100519590);
  }
  return sub_10001F634((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
}

uint64_t sub_10001CF90()
{
  uint64_t v0 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v9 - v4;
  type metadata accessor for VisualLookupCardView(0);
  type metadata accessor for ObservableDrillIn(0);
  sub_10001F694(&qword_100519770, (void (*)(uint64_t))type metadata accessor for ObservableDrillIn);
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  v9[1] = 0;
  static Published.subscript.setter();
  uint64_t v6 = type metadata accessor for IdentifiableURL();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  sub_10000FB74((uint64_t)v5, (uint64_t)v2, &qword_100519590);
  sub_10000F214(&qword_100519688);
  State.wrappedValue.setter();
  sub_10000FBD8((uint64_t)v5, &qword_100519590);
  v7(v5, 1, 1, v6);
  sub_10000FB74((uint64_t)v5, (uint64_t)v2, &qword_100519590);
  State.wrappedValue.setter();
  return sub_10000FBD8((uint64_t)v5, &qword_100519590);
}

uint64_t sub_10001D1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for VisualLookupCardView(0);
  uint64_t v18 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v18 + 64);
  __chkstk_darwin(v3);
  uint64_t v5 = sub_10000F214(&qword_100519588);
  __chkstk_darwin(v5 - 8);
  uint64_t v17 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for VisualLookupDrillInView();
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ObservableDrillIn(0);
  sub_10001F694(&qword_100519770, (void (*)(uint64_t))type metadata accessor for ObservableDrillIn);
  uint64_t v10 = StateObject.wrappedValue.getter();
  *uint64_t v9 = swift_getKeyPath();
  sub_10000F214((uint64_t *)&unk_1005197E0);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (uint64_t *)((char *)v9 + *(int *)(v7 + 20));
  uint64_t v20 = 0;
  State.init(wrappedValue:)();
  uint64_t v12 = v22;
  *uint64_t v11 = v21;
  v11[1] = v12;
  *(uint64_t *)((char *)v9 + *(int *)(v7 + 24)) = v10;
  sub_10000F214(&qword_100519688);
  uint64_t v13 = (uint64_t)v17;
  State.projectedValue.getter();
  sub_1000214F8(a1, (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for VisualLookupCardView);
  unint64_t v14 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v15 = swift_allocObject();
  sub_100021D80((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for VisualLookupCardView);
  type metadata accessor for IdentifiableURL();
  type metadata accessor for InAppWebPresentationView(0);
  sub_10001F694(&qword_1005197C8, (void (*)(uint64_t))type metadata accessor for VisualLookupDrillInView);
  sub_10001F694(&qword_1005197D0, (void (*)(uint64_t))type metadata accessor for IdentifiableURL);
  sub_10001F694(&qword_1005197D8, (void (*)(uint64_t))type metadata accessor for InAppWebPresentationView);
  View.sheet<A, B>(item:onDismiss:content:)();
  swift_release();
  sub_10000FBD8(v13, &qword_100519588);
  return sub_10001F634((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for VisualLookupDrillInView);
}

uint64_t sub_10001D5BC()
{
  uint64_t v0 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t v6 = type metadata accessor for IdentifiableURL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for VisualLookupCardView(0);
  sub_10000FB74((uint64_t)v5, (uint64_t)v2, &qword_100519590);
  sub_10000F214(&qword_100519688);
  State.wrappedValue.setter();
  return sub_10000FBD8((uint64_t)v5, &qword_100519590);
}

uint64_t sub_10001D6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_10001D744()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10001D7C0()
{
  return sub_10001D8D8(&OBJC_IVAR____TtC6Tamale14ObservableSize__size, &qword_100519678);
}

uint64_t sub_10001D7D4()
{
  return type metadata accessor for ObservableSize(0);
}

uint64_t type metadata accessor for ObservableSize(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100519270);
}

void sub_10001D7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10001D810@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableSize(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001D850()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10001D8C4()
{
  return sub_10001D8D8(&OBJC_IVAR____TtC6Tamale17ObservableDrillIn__searchViewDrillIn, &qword_100519670);
}

uint64_t sub_10001D8D8(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2 + *a1;
  uint64_t v4 = sub_10000F214(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10001D974()
{
  return type metadata accessor for ObservableDrillIn(0);
}

uint64_t type metadata accessor for ObservableDrillIn(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100519368);
}

void sub_10001D99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10001D9B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  sub_10002147C(319, a4, a5, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v5 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10001DA5C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableDrillIn(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id sub_10001DA9C()
{
  sub_10000F214(&qword_100519648);
  UIViewControllerRepresentableContext.coordinator.getter();
  uint64_t v1 = v8;
  id v2 = [self cardViewControllerForCard:*v0 feedbackDelegate:v8];
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = v2;
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {

LABEL_6:
    id v5 = [objc_allocWithZone((Class)SearchUICardViewController) init];
    goto LABEL_7;
  }
  id v5 = v4;
  id result = [v4 view];
  if (result)
  {
    uint64_t v7 = result;
    [result _setOverrideVibrancyTrait:1];

    [v5 setDelegate:v8];
    [v5 setCommandDelegate:v8];
    [v5 setRowSelectionAppearanceEnabled:0];
    UIViewControllerRepresentableContext.coordinator.getter();

    uint64_t v1 = v8;
    swift_unknownObjectWeakAssign();
LABEL_7:

    return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001DC88(void *a1)
{
  uint64_t v3 = type metadata accessor for SearchCardView(0);
  __chkstk_darwin(v3 - 8);
  id v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = v1 + OBJC_IVAR____TtCV6Tamale14SearchCardView11Coordinator_parent;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  id v8 = v15;
  if (!v15)
  {
    if (a1)
    {
      self;
      uint64_t v11 = swift_dynamicCastObjCClass();
      if (v11)
      {
        uint64_t v12 = (void *)v11;
        swift_getKeyPath();
        swift_getKeyPath();
        id v15 = v12;
        id v13 = a1;
        swift_retain();
        static Published.subscript.setter();
      }
    }
    goto LABEL_4;
  }
  if (a1)
  {
    [v15 pushViewController:a1 animated:1];

LABEL_4:
    sub_1000214F8(v6, (uint64_t)v5, type metadata accessor for SearchCardView);
    uint64_t v9 = *((void *)v5 + 4);
    char v10 = v5[40];
    id v15 = (id)*((void *)v5 + 3);
    uint64_t v16 = v9;
    char v17 = v10;
    v14[7] = 1;
    sub_10000F214(&qword_100519660);
    Binding.wrappedValue.setter();
    return sub_10001F634((uint64_t)v5, type metadata accessor for SearchCardView);
  }
  __break(1u);
  return result;
}

void sub_10001DF38(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_100519590);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v8 = type metadata accessor for SearchCardView(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      id v30 = a1;
      id v20 = [v19 punchout];
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = [v20 urls];
        if (!v22)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_13:

          sub_10000FBD8((uint64_t)v13, &qword_10051E070);
          return;
        }
        uint64_t v23 = v22;
        uint64_t v29 = v21;
        uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v24 + 16))
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v13, v24 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
        }
        swift_bridgeObjectRelease();
        int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
        uint64_t v21 = v29;
        if (v26 == 1) {
          goto LABEL_13;
        }
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
        sub_1000214F8(v31 + OBJC_IVAR____TtCV6Tamale14SearchCardView11Coordinator_parent, (uint64_t)v10, type metadata accessor for SearchCardView);
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v7, v17, v14);
        uint64_t v27 = type metadata accessor for IdentifiableURL();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v7, 0, 1, v27);
        sub_10000FB74((uint64_t)v7, (uint64_t)v4, &qword_100519590);
        sub_10000F214(&qword_100519588);
        Binding.wrappedValue.setter();
        sub_10000FBD8((uint64_t)v7, &qword_100519590);

        sub_10001F634((uint64_t)v10, type metadata accessor for SearchCardView);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      }
      else
      {
        id v25 = v30;
      }
    }
  }
}

id sub_10001E45C()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_10001E4F4()
{
  return type metadata accessor for SearchCardView.Coordinator(0);
}

uint64_t type metadata accessor for SearchCardView.Coordinator(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_100519578);
}

uint64_t sub_10001E51C()
{
  uint64_t result = type metadata accessor for SearchCardView(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for SearchCardView(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_1005195F0);
}

char *sub_10001E5D4(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    uint64_t v7 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v7;
    a1[40] = *((unsigned char *)a2 + 40);
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(void *)uint64_t v9 = *(char **)((char *)a2 + v8);
    *((void *)v9 + 1) = v11;
    uint64_t v12 = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = *(int *)(sub_10000F214(&qword_100519588) + 32);
    uint64_t v14 = &v9[v13];
    uint64_t v15 = (const void *)(v10 + v13);
    uint64_t v16 = type metadata accessor for IdentifiableURL();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_10000F214(&qword_100519590);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = type metadata accessor for URL();
      (*(void (**)(char *, const void *, uint64_t))(*(void *)(v19 - 8) + 16))(v14, v15, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return a1;
}

uint64_t sub_10001E7C8(id *a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 32);
  swift_release();
  swift_release();
  uint64_t v5 = &v4[*(int *)(sub_10000F214(&qword_100519588) + 32)];
  uint64_t v6 = type metadata accessor for IdentifiableURL();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(v5, v8);
  }
  return result;
}

uint64_t sub_10001E8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  id v11 = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v12 = *(int *)(sub_10000F214(&qword_100519588) + 32);
  uint64_t v13 = (char *)v8 + v12;
  uint64_t v14 = (const void *)(v9 + v12);
  uint64_t v15 = type metadata accessor for IdentifiableURL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10000F214(&qword_100519590);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(char *, const void *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v14, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_10001EA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_retain();
  swift_release();
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_retain();
  swift_release();
  uint64_t v12 = *(int *)(sub_10000F214(&qword_100519588) + 32);
  uint64_t v13 = (void *)(v10 + v12);
  uint64_t v14 = (void *)(v11 + v12);
  uint64_t v15 = type metadata accessor for IdentifiableURL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v23 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 24))(v13, v14, v23);
      return a1;
    }
    sub_10001F634((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_10000F214(&qword_100519590);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  uint64_t v20 = type metadata accessor for URL();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t sub_10001ECF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = a2 + v4;
  uint64_t v7 = *(void *)(a2 + v4 + 8);
  *uint64_t v5 = *(void *)(a2 + v4);
  v5[1] = v7;
  uint64_t v8 = *(int *)(sub_10000F214(&qword_100519588) + 32);
  uint64_t v9 = (char *)v5 + v8;
  uint64_t v10 = (const void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for IdentifiableURL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10000F214(&qword_100519590);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_10001EE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_release();
  *(void *)(v8 + 8) = v9[1];
  swift_release();
  uint64_t v10 = *(int *)(sub_10000F214(&qword_100519588) + 32);
  uint64_t v11 = (void *)(v8 + v10);
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = type metadata accessor for IdentifiableURL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v21 = type metadata accessor for URL();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v11, v12, v21);
      return a1;
    }
    sub_10001F634((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = sub_10000F214(&qword_100519590);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_10001F0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001F0BC);
}

uint64_t sub_10001F0BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_100519588);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10001F170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001F184);
}

void *sub_10001F184(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_100519588);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10001F230()
{
  sub_10002147C(319, (unint64_t *)&unk_100519600, &qword_100519590, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10001F314@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __chkstk_darwin(a1 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000214F8(v2, (uint64_t)v5, type metadata accessor for SearchCardView);
  uint64_t v6 = (objc_class *)type metadata accessor for SearchCardView.Coordinator(0);
  id v7 = objc_allocWithZone(v6);
  swift_unknownObjectWeakInit();
  sub_1000214F8((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtCV6Tamale14SearchCardView11Coordinator_parent, type metadata accessor for SearchCardView);
  v10.receiver = v7;
  v10.super_class = v6;
  [super init];
  uint64_t result = sub_10001F634((uint64_t)v5, type metadata accessor for SearchCardView);
  *a2 = v8;
  return result;
}

uint64_t sub_10001F424()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_10001F460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001F694((unint64_t *)&unk_100519650, (void (*)(uint64_t))type metadata accessor for SearchCardView);

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10001F4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001F694((unint64_t *)&unk_100519650, (void (*)(uint64_t))type metadata accessor for SearchCardView);

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10001F588()
{
}

uint64_t sub_10001F5E0()
{
  return sub_10001F694(&qword_100519640, (void (*)(uint64_t))type metadata accessor for SearchCardView);
}

void *sub_10001F628()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10001F634(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001F694(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_10001F6DC@<D0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_10001F764()
{
  return static Published.subscript.setter();
}

uint64_t sub_10001F7E8@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10001F868(void **a1)
{
  unint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

void sub_10001F8E0(void *a1)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (a1)
  {
    if (!Strong) {
      return;
    }
    id v5 = Strong;
    sub_10000F734(0, &qword_100519668);
    id v3 = a1;
    char v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) == 0) {
      return;
    }
LABEL_9:
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    return;
  }
  if (!Strong) {
    goto LABEL_9;
  }
}

uint64_t sub_10001FA10(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v30 - v10;
  if (!a1) {
    goto LABEL_12;
  }
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = (void *)v12;
  id v14 = a1;
  id v15 = [v13 punchout];
  if (!v15)
  {

LABEL_12:
    char v20 = 0;
    return v20 & 1;
  }
  int v16 = v15;
  id v17 = [v15 urls];
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_11:

    sub_10000FBD8((uint64_t)v4, &qword_10051E070);
    goto LABEL_12;
  }
  uint64_t v18 = v17;
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v19 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  uint64_t v22 = URL.scheme.getter();
  if (v23)
  {
    if (v22 == 0x7370747468 && v23 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
LABEL_20:

      id v25 = *(void (**)(char *, uint64_t))(v6 + 8);
      v25(v8, v5);
      v25(v11, v5);
      char v20 = 1;
      return v20 & 1;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
    if (v24) {
      goto LABEL_20;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  }
  uint64_t v26 = URL.scheme.getter();
  if (!v27)
  {

    uint64_t v28 = *(void (**)(char *, uint64_t))(v6 + 8);
    v28(v8, v5);
    v28(v11, v5);
    goto LABEL_12;
  }
  if (v26 == 1886680168 && v27 == 0xE400000000000000) {
    char v20 = 1;
  }
  else {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v8, v5);
  v29(v11, v5);
  swift_bridgeObjectRelease();
  return v20 & 1;
}

uint64_t type metadata accessor for VisualLookupCardView(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_1005196E8);
}

uint64_t sub_10001FEBC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001FEF4(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_10000FCA0();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v11 = (void *)a2[3];
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v12 = a3[7];
    __dst = (char *)(a1 + v12);
    uint64_t v13 = (char *)a2 + v12;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v14 = type metadata accessor for IdentifiableURL();
    uint64_t v15 = *(void *)(v14 - 8);
    int v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    id v17 = v11;
    swift_retain();
    swift_retain();
    uint64_t v18 = v13;
    uint64_t v48 = v16;
    uint64_t v47 = v15;
    if (v16(v13, 1, v14))
    {
      uint64_t v19 = sub_10000F214(&qword_100519590);
      char v20 = __dst;
      memcpy(__dst, v13, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v22 = type metadata accessor for URL();
      char v20 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, v13, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v23 = v14;
    uint64_t v24 = sub_10000F214(&qword_100519688);
    *(void *)&v20[*(int *)(v24 + 28)] = *(void *)&v18[*(int *)(v24 + 28)];
    uint64_t v25 = a3[8];
    uint64_t v26 = (char *)(a1 + v25);
    uint64_t v27 = (char *)a2 + v25;
    swift_retain();
    if (v48(v27, 1, v23))
    {
      uint64_t v28 = sub_10000F214(&qword_100519590);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v26, v27, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v26, 0, 1, v23);
    }
    *(void *)&v26[*(int *)(v24 + 28)] = *(void *)&v27[*(int *)(v24 + 28)];
    uint64_t v30 = a3[9];
    uint64_t v31 = a1 + v30;
    uint64_t v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    char v35 = *((unsigned char *)v32 + 16);
    swift_retain();
    sub_10002025C();
    *(void *)uint64_t v31 = v33;
    *(void *)(v31 + 8) = v34;
    *(unsigned char *)(v31 + 16) = v35;
    uint64_t v36 = a3[10];
    uint64_t v37 = a1 + v36;
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    char v41 = *((unsigned char *)v38 + 16);
    sub_10002025C();
    *(void *)uint64_t v37 = v39;
    *(void *)(v37 + 8) = v40;
    *(unsigned char *)(v37 + 16) = v41;
    uint64_t v42 = a3[11];
    uint64_t v43 = (void *)(a1 + v42);
    uint64_t v44 = (uint64_t *)((char *)a2 + v42);
    uint64_t v45 = v44[1];
    *uint64_t v43 = *v44;
    v43[1] = v45;
  }
  swift_retain();
  return a1;
}

uint64_t sub_10002025C()
{
  return swift_retain();
}

uint64_t sub_100020264(uint64_t a1, uint64_t a2)
{
  sub_10000FD10();

  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for IdentifiableURL();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
  }
  sub_10000F214(&qword_100519688);
  swift_release();
  uint64_t v8 = a1 + *(int *)(a2 + 32);
  if (!v6(v8, 1, v5))
  {
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  swift_release();
  sub_100020414();
  sub_100020414();

  return swift_release();
}

uint64_t sub_100020414()
{
  return swift_release();
}

uint64_t sub_10002041C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10000FCA0();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = (void *)a2[3];
  uint64_t v10 = a2[4];
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = a2[5];
  uint64_t v11 = a3[7];
  __dst = (char *)(a1 + v11);
  uint64_t v44 = a3;
  uint64_t v12 = (char *)a2 + v11;
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v13 = type metadata accessor for IdentifiableURL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  id v16 = v9;
  swift_retain();
  swift_retain();
  if (v15(v12, 1, v13))
  {
    uint64_t v17 = sub_10000F214(&qword_100519590);
    uint64_t v18 = __dst;
    memcpy(__dst, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v18 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, v12, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v20 = sub_10000F214(&qword_100519688);
  *(void *)&v18[*(int *)(v20 + 28)] = *(void *)&v12[*(int *)(v20 + 28)];
  uint64_t v21 = v44[8];
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = (char *)a2 + v21;
  swift_retain();
  if (v15(v23, 1, v13))
  {
    uint64_t v24 = sub_10000F214(&qword_100519590);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v22, v23, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
  }
  *(void *)&v22[*(int *)(v20 + 28)] = *(void *)&v23[*(int *)(v20 + 28)];
  uint64_t v26 = v44[9];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = (uint64_t *)((char *)a2 + v26);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  char v31 = *((unsigned char *)v28 + 16);
  swift_retain();
  sub_10002025C();
  *(void *)uint64_t v27 = v29;
  *(void *)(v27 + 8) = v30;
  *(unsigned char *)(v27 + 16) = v31;
  uint64_t v32 = v44[10];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = (uint64_t *)((char *)a2 + v32);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  char v37 = *((unsigned char *)v34 + 16);
  sub_10002025C();
  *(void *)uint64_t v33 = v35;
  *(void *)(v33 + 8) = v36;
  *(unsigned char *)(v33 + 16) = v37;
  uint64_t v38 = v44[11];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)((char *)a2 + v38);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  swift_retain();
  return a1;
}

uint64_t sub_100020718(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10000FCA0();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10000FD10();
  uint64_t v9 = (void *)a2[3];
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  id v11 = v9;

  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for IdentifiableURL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  uint64_t v48 = v16;
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_10001F634((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
LABEL_6:
    uint64_t v21 = sub_10000F214(&qword_100519590);
    memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v46 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 24))(v13, v14, v46);
LABEL_7:
  uint64_t v22 = sub_10000F214(&qword_100519688);
  *(void *)&v13[*(int *)(v22 + 28)] = *(void *)&v14[*(int *)(v22 + 28)];
  swift_retain();
  swift_release();
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)a2 + v23;
  int v26 = v17((char *)(a1 + v23), 1, v15);
  int v27 = v17(v25, 1, v15);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v47 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 24))(v24, v25, v47);
      goto LABEL_13;
    }
    sub_10001F634((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v29 = sub_10000F214(&qword_100519590);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v28 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v24, v25, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v24, 0, 1, v15);
LABEL_13:
  *(void *)&v24[*(int *)(v22 + 28)] = *(void *)&v25[*(int *)(v22 + 28)];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[9];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (uint64_t *)((char *)a2 + v30);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  char v35 = *((unsigned char *)v32 + 16);
  sub_10002025C();
  *(void *)uint64_t v31 = v33;
  *(void *)(v31 + 8) = v34;
  *(unsigned char *)(v31 + 16) = v35;
  sub_100020414();
  uint64_t v36 = a3[10];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = (uint64_t *)((char *)a2 + v36);
  uint64_t v39 = *v38;
  uint64_t v40 = v38[1];
  char v41 = *((unsigned char *)v38 + 16);
  sub_10002025C();
  *(void *)uint64_t v37 = v39;
  *(void *)(v37 + 8) = v40;
  *(unsigned char *)(v37 + 16) = v41;
  sub_100020414();
  uint64_t v42 = a3[11];
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (uint64_t *)((char *)a2 + v42);
  *uint64_t v43 = *v44;
  v43[1] = v44[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100020B7C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)(a1 + v6);
  char v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for IdentifiableURL();
  uint64_t v10 = *(void *)(v9 - 8);
  id v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000F214(&qword_100519590);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = sub_10000F214(&qword_100519688);
  *(void *)&v7[*(int *)(v14 + 28)] = *(void *)&v8[*(int *)(v14 + 28)];
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  if (v11((char *)(a2 + v15), 1, v9))
  {
    uint64_t v18 = sub_10000F214(&qword_100519590);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  }
  *(void *)&v16[*(int *)(v14 + 28)] = *(void *)&v17[*(int *)(v14 + 28)];
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  uint64_t v24 = a1 + v21;
  uint64_t v25 = a2 + v21;
  *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100020E04(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10000FD10();
  uint64_t v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for IdentifiableURL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  uint64_t v40 = v12;
  if (v14)
  {
    if (!v15)
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_10001F634((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
LABEL_6:
    uint64_t v17 = sub_10000F214(&qword_100519590);
    memcpy(v9, v10, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v38 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 40))(v9, v10, v38);
LABEL_7:
  uint64_t v18 = sub_10000F214(&qword_100519688);
  *(void *)&v9[*(int *)(v18 + 28)] = *(void *)&v10[*(int *)(v18 + 28)];
  swift_release();
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  int v22 = v13((char *)(a1 + v19), 1, v11);
  int v23 = v13(v21, 1, v11);
  if (!v22)
  {
    if (!v23)
    {
      uint64_t v39 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 40))(v20, v21, v39);
      goto LABEL_13;
    }
    sub_10001F634((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for IdentifiableURL);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_10000F214(&qword_100519590);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v24 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v20, v21, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v20, 0, 1, v11);
LABEL_13:
  *(void *)&v20[*(int *)(v18 + 28)] = *(void *)&v21[*(int *)(v18 + 28)];
  swift_release();
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  char v29 = *(unsigned char *)(v28 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(unsigned char *)(v27 + 16) = v29;
  sub_100020414();
  uint64_t v30 = a3[10];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  char v33 = *(unsigned char *)(v32 + 16);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(unsigned char *)(v31 + 16) = v33;
  sub_100020414();
  uint64_t v34 = a3[11];
  char v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *char v35 = *v36;
  v35[1] = v36[1];
  swift_release();
  return a1;
}

uint64_t sub_100021210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021224);
}

uint64_t sub_100021224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_100519688);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000212D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000212EC);
}

uint64_t sub_1000212EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_100519688);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100021398()
{
  sub_10002147C(319, (unint64_t *)&qword_1005196F8, &qword_100519590, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10002147C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = sub_10000F69C(a3);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1000214DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000214F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100021564(uint64_t a1, uint64_t a2)
{
  type metadata accessor for VisualLookupCardView(0);

  return sub_10001CB90(a1, a2);
}

unint64_t sub_1000215E4()
{
  unint64_t result = qword_100519778;
  if (!qword_100519778)
  {
    sub_10000F69C(&qword_100519740);
    sub_10001F694(&qword_100519640, (void (*)(uint64_t))type metadata accessor for SearchCardView);
    sub_10001F694((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519778);
  }
  return result;
}

unint64_t sub_1000216C0()
{
  unint64_t result = qword_100519788;
  if (!qword_100519788)
  {
    sub_10000F69C((uint64_t *)&unk_100519288);
    sub_10001F694(&qword_100519790, type metadata accessor for CGSize);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519788);
  }
  return result;
}

uint64_t sub_100021768()
{
  uint64_t v1 = type metadata accessor for VisualLookupCardView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  sub_10000FD10();

  swift_release();
  swift_release();
  uint64_t v4 = v3 + *(int *)(v1 + 28);
  uint64_t v5 = type metadata accessor for IdentifiableURL();
  char v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
  }
  sub_10000F214(&qword_100519688);
  swift_release();
  uint64_t v8 = v3 + *(int *)(v1 + 32);
  if (!v6(v8, 1, v5))
  {
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  swift_release();
  sub_100020414();
  sub_100020414();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10002199C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for VisualLookupCardView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10001CCB0(a1, a2, v6);
}

unint64_t sub_100021A1C()
{
  unint64_t result = qword_100519798;
  if (!qword_100519798)
  {
    sub_10000F69C(&qword_100519590);
    sub_10001F694(&qword_1005197A0, (void (*)(uint64_t))type metadata accessor for IdentifiableURL);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519798);
  }
  return result;
}

uint64_t sub_100021AC4()
{
  return sub_100021D0C((uint64_t (*)(uint64_t))sub_10001CF90);
}

uint64_t sub_100021AE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for VisualLookupCardView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10001D1C0(v4, a1);
}

unint64_t sub_100021B50()
{
  unint64_t result = qword_1005197B8;
  if (!qword_1005197B8)
  {
    sub_10000F69C(&qword_100519760);
    sub_100021BCC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005197B8);
  }
  return result;
}

unint64_t sub_100021BCC()
{
  unint64_t result = qword_1005197C0;
  if (!qword_1005197C0)
  {
    sub_10000F69C(&qword_100519758);
    sub_10000F69C(&qword_100519748);
    sub_10000F69C(&qword_100519590);
    sub_10000F69C(&qword_100519740);
    sub_10000F69C((uint64_t *)&unk_100519288);
    sub_1000215E4();
    sub_1000216C0();
    swift_getOpaqueTypeConformance2();
    sub_100021A1C();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005197C0);
  }
  return result;
}

uint64_t sub_100021CF4()
{
  return sub_100021D0C((uint64_t (*)(uint64_t))sub_10001D5BC);
}

uint64_t sub_100021D0C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for VisualLookupCardView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_100021D80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100021DE8()
{
  return sub_10001CC34();
}

uint64_t sub_100021E08()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for EventClassifier()
{
  return &type metadata for EventClassifier;
}

uint64_t sub_100021F9C()
{
  uint64_t result = sub_1000C2C68();
  byte_10055E040 = 1;
  return result;
}

uint64_t sub_100021FC0(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  type metadata accessor for CVDetection();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for BundleClassification.ClassificationType(0);
  v2[13] = swift_task_alloc();
  sub_10000F214(&qword_100518AD8);
  v2[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TextDetectorResult.DataDetector(0);
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  return _swift_task_switch(sub_1000221B8, 0, 0);
}

uint64_t sub_1000221B8()
{
  uint64_t v99 = v0;
  uint64_t v2 = sub_10019CAAC();
  uint64_t v3 = _swiftEmptyArrayStorage;
  v98[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v92 = v2[2];
  if (v92)
  {
    unint64_t v4 = 0;
    uint64_t v90 = v0[20];
    uint64_t v91 = v0[21];
    uint64_t v89 = v0[16];
    while (v4 < v2[2])
    {
      uint64_t v5 = v0[26];
      unint64_t v6 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      uint64_t v7 = *(void *)(v91 + 72);
      sub_100023890((uint64_t)v2 + v6 + v7 * v4, v5, type metadata accessor for TextDetectorResult);
      uint64_t v8 = *(void *)(v5 + *(int *)(v90 + 48));
      uint64_t v9 = *(void *)(v8 + 16);
      if (!v9) {
        goto LABEL_3;
      }
      uint64_t v93 = v7;
      unint64_t v95 = v6;
      uint64_t v10 = v2;
      uint64_t v11 = v3;
      uint64_t v12 = v8 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
      swift_bridgeObjectRetain();
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(v89 + 72);
      do
      {
        int v15 = (void *)v0[19];
        sub_100023890(v12, (uint64_t)v15, type metadata accessor for TextDetectorResult.DataDetector);
        v13 |= *v15;
        sub_1000239B8((uint64_t)v15, type metadata accessor for TextDetectorResult.DataDetector);
        v12 += v14;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      uint64_t v3 = v11;
      uint64_t v2 = v10;
      if ((v13 & 4) != 0)
      {
        sub_1000238F8(v0[26], v0[25], type metadata accessor for TextDetectorResult);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10004080C(0, v11[2] + 1, 1);
          uint64_t v3 = (void *)v98[0];
        }
        unint64_t v17 = v3[2];
        unint64_t v16 = v3[3];
        if (v17 >= v16 >> 1)
        {
          sub_10004080C(v16 > 1, v17 + 1, 1);
          uint64_t v3 = (void *)v98[0];
        }
        uint64_t v18 = v0[25];
        v3[2] = v17 + 1;
        sub_1000238F8(v18, (uint64_t)v3 + v95 + v17 * v93, type metadata accessor for TextDetectorResult);
      }
      else
      {
LABEL_3:
        sub_1000239B8(v0[26], type metadata accessor for TextDetectorResult);
      }
      if (++v4 == v92) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v19 = v3[2];
    if (!v19)
    {
      swift_release();
      if (qword_100517E40 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_10000F378(v52, (uint64_t)qword_10055E1D8);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "No calendar events found in bundle during classification", v55, 2u);
        swift_slowDealloc();
      }

      sub_100022E84();
      swift_allocError();
      *uint64_t v56 = 0xD000000000000018;
      v56[1] = 0x80000001004250D0;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v57 = (uint64_t (*)(void))v0[1];
      goto LABEL_53;
    }
    uint64_t v20 = *(unsigned __int8 *)(v0[21] + 80);
    uint64_t v21 = (uint64_t)v3 + ((v20 + 32) & ~v20);
    sub_100023890(v21, v0[23], type metadata accessor for TextDetectorResult);
    swift_retain();
    if (v19 != 1)
    {
      uint64_t v59 = v0[20];
      uint64_t v58 = v0[21];
      unint64_t v60 = 1;
      while (v60 < v3[2])
      {
        uint64_t v62 = v0[22];
        uint64_t v61 = v0[23];
        sub_100023890(v21 + *(void *)(v58 + 72) * v60, v62, type metadata accessor for TextDetectorResult);
        if (*(float *)(v61 + *(int *)(v59 + 20)) >= *(float *)(v62 + *(int *)(v59 + 20)))
        {
          sub_1000239B8(v0[22], type metadata accessor for TextDetectorResult);
        }
        else
        {
          uint64_t v63 = v3;
          uint64_t v65 = v0[22];
          uint64_t v64 = v0[23];
          sub_1000239B8(v64, type metadata accessor for TextDetectorResult);
          uint64_t v66 = v65;
          uint64_t v3 = v63;
          sub_1000238F8(v66, v64, type metadata accessor for TextDetectorResult);
        }
        if (v19 == ++v60) {
          goto LABEL_17;
        }
      }
      goto LABEL_58;
    }
LABEL_17:
    uint64_t v22 = v0[23];
    uint64_t v24 = v0[20];
    uint64_t v23 = v0[21];
    uint64_t v25 = v0[14];
    swift_release();
    sub_1000238F8(v22, v25, type metadata accessor for TextDetectorResult);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v24);
    swift_release();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v27 = v0[24];
    uint64_t v28 = v0[20];
    sub_1000238F8(v0[14], v27, type metadata accessor for TextDetectorResult);
    float v1 = *(float *)(v27 + *(int *)(v28 + 20));
    uint64_t v29 = *(void *)(v27 + *(int *)(v28 + 48));
    uint64_t v30 = _swiftEmptyArrayStorage;
    v98[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v31 = *(void *)(v29 + 16);
    swift_bridgeObjectRetain();
    if (!v31)
    {
LABEL_29:
      swift_bridgeObjectRelease();
      int64_t v41 = v30[2];
      if (v41)
      {
        uint64_t v42 = v0[16];
        uint64_t v97 = v0[15];
        v98[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000407B0(0, v41, 0);
        uint64_t v43 = (uint64_t)v30
            + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
        uint64_t v94 = *(void *)(v42 + 72);
        uint64_t v44 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v45 = v0[19];
          sub_100023890(v43, v45, type metadata accessor for TextDetectorResult.DataDetector);
          uint64_t v46 = (uint64_t *)(v45 + *(int *)(v97 + 24));
          uint64_t v48 = *v46;
          uint64_t v47 = v46[1];
          swift_bridgeObjectRetain();
          sub_1000239B8(v45, type metadata accessor for TextDetectorResult.DataDetector);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000407B0(0, v44[2] + 1, 1);
            uint64_t v44 = (void *)v98[0];
          }
          unint64_t v50 = v44[2];
          unint64_t v49 = v44[3];
          if (v50 >= v49 >> 1)
          {
            sub_1000407B0(v49 > 1, v50 + 1, 1);
            uint64_t v44 = (void *)v98[0];
          }
          v44[2] = v50 + 1;
          char v51 = &v44[2 * v50];
          v51[4] = v48;
          v51[5] = v47;
          v43 += v94;
          --v41;
        }
        while (v41);
      }
      swift_release();
      if (qword_100517E40 == -1) {
        goto LABEL_49;
      }
      goto LABEL_59;
    }
    unint64_t v32 = 0;
    uint64_t v33 = v0[16];
    uint64_t v96 = v31;
    while (v32 < *(void *)(v29 + 16))
    {
      uint64_t v34 = (unsigned char *)v0[18];
      unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v36 = *(void *)(v33 + 72);
      sub_100023890(v29 + v35 + v36 * v32, (uint64_t)v34, type metadata accessor for TextDetectorResult.DataDetector);
      uint64_t v37 = v0[18];
      if ((*v34 & 4) != 0)
      {
        sub_1000238F8(v37, v0[17], type metadata accessor for TextDetectorResult.DataDetector);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000407D0(0, v30[2] + 1, 1);
          uint64_t v30 = (void *)v98[0];
        }
        unint64_t v39 = v30[2];
        unint64_t v38 = v30[3];
        if (v39 >= v38 >> 1)
        {
          sub_1000407D0(v38 > 1, v39 + 1, 1);
          uint64_t v30 = (void *)v98[0];
        }
        uint64_t v40 = v0[17];
        v30[2] = v39 + 1;
        sub_1000238F8(v40, (uint64_t)v30 + v35 + v39 * v36, type metadata accessor for TextDetectorResult.DataDetector);
        uint64_t v31 = v96;
      }
      else
      {
        sub_1000239B8(v37, type metadata accessor for TextDetectorResult.DataDetector);
      }
      if (v31 == ++v32) {
        goto LABEL_29;
      }
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  swift_once();
LABEL_49:
  uint64_t v67 = type metadata accessor for Logger();
  sub_10000F378(v67, (uint64_t)qword_10055E1D8);
  swift_bridgeObjectRetain();
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    v98[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v70 = 136315394;
    uint64_t v71 = self;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v73 = [v71 localizedStringByJoiningStrings:isa];

    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;

    v0[7] = sub_1003806B0(v74, v76, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v70 + 12) = 2080;
    sub_10000F214(&qword_10051F350);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_10043D4F0;
    *(void *)(v77 + 56) = &type metadata for Float;
    *(void *)(v77 + 64) = &protocol witness table for Float;
    *(float *)(v77 + 32) = v1;
    uint64_t v78 = String.init(format:_:)();
    v0[8] = sub_1003806B0(v78, v79, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Event classified: \"%s\" confidence %s", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v80 = v0[24];
  uint64_t v81 = v0[13];
  uint64_t v82 = v0[11];
  uint64_t v83 = v0[9];
  swift_storeEnumTagMultiPayload();
  double v84 = v1;
  sub_10019D408(v82);
  sub_1003FEC34(v0 + 2);
  uint64_t v86 = v0[5];
  uint64_t v85 = v0[6];
  sub_10000F3B0(v0 + 2, v86);
  double v87 = (*(double (**)(uint64_t, uint64_t))(v85 + 88))(v86, v85);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v0 + 2));
  sub_1000239B8(v82, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1000239B8(v80, type metadata accessor for TextDetectorResult);
  sub_1000238F8(v81, v83, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v88 = type metadata accessor for BundleClassification(0);
  *(double *)(v83 + *(int *)(v88 + 20)) = v84;
  *(double *)(v83 + *(int *)(v88 + 24)) = v87;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v57 = (uint64_t (*)(void))v0[1];
LABEL_53:
  return v57();
}

uint64_t sub_100022DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  return sub_100021FC0(a1, a2);
}

unint64_t sub_100022E84()
{
  unint64_t result = qword_100519860;
  if (!qword_100519860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519860);
  }
  return result;
}

uint64_t sub_100022ED8(void (*a1)(char *, unint64_t, uint64_t))
{
  uint64_t v78 = a1;
  uint64_t v67 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v67);
  uint64_t v68 = (uint64_t)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for VisualDomain();
  uint64_t v70 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  id v73 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v74 = (char *)&v65 - v4;
  uint64_t v66 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v66);
  uint64_t v69 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for CVDetection();
  __chkstk_darwin(v71);
  uint64_t v72 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v76 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v76);
  unint64_t v77 = (unint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GenerativeModelsAvailability.Availability();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517FF0 != -1) {
    swift_once();
  }
  if (byte_10055E433 != 1) {
    return 0;
  }
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifiers:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  GenerativeModelsAvailability.availability.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for GenerativeModelsAvailability.Availability.available(_:), v8);
  char v23 = static GenerativeModelsAvailability.Availability.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v11, v8);
  v24(v14, v8);
  if ((v23 & 1) == 0)
  {
    if (qword_100517E40 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10000F378(v27, (uint64_t)qword_10055E1D8);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "GMS is not available for event classification.", v30, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v25 = v77;
  sub_100023890((uint64_t)v78, v77, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
    return 0;
  }
  sub_1000239B8(v25, type metadata accessor for CVBundle.BundleType);
  uint64_t v31 = v72;
  sub_10019C820(v72);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v33 = v31;
      uint64_t v31 = v69;
      sub_1000238F8(v33, v69, type metadata accessor for ParseDetectorResult);
      uint64_t v34 = *(void *)(v31 + *(int *)(v66 + 28));
      swift_bridgeObjectRetain();
      unint64_t v35 = v74;
      static VisualDomain.book.getter();
      uint64_t v36 = *(void *)(v34 + 16);
      if (v36)
      {
        uint64_t v37 = v70;
        unint64_t v76 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        unint64_t v38 = v34 + v76;
        unint64_t v39 = v73;
        uint64_t v40 = v34;
        uint64_t v41 = v75;
        uint64_t v78 = *(void (**)(char *, unint64_t, uint64_t))(v70 + 16);
        v78(v73, v38, v75);
        unint64_t v42 = sub_100023960();
        swift_bridgeObjectRetain();
        unint64_t v77 = v42;
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v46 = *(void (**)(char *, uint64_t))(v37 + 8);
        uint64_t v45 = v37 + 8;
        uint64_t v44 = v46;
        v46(v39, v41);
        if (v43)
        {
          swift_bridgeObjectRelease();
LABEL_40:
          v44(v35, v75);
          swift_bridgeObjectRelease();
          char v51 = type metadata accessor for ParseDetectorResult;
          uint64_t v52 = v31;
          goto LABEL_41;
        }
        uint64_t v72 = v40;
        if (v36 != 1)
        {
          uint64_t v71 = v45 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v56 = *(void *)(v70 + 72);
          uint64_t v54 = v75;
          unint64_t v57 = v72 + v56 + v76;
          uint64_t v58 = 1;
          while (1)
          {
            uint64_t v59 = v73;
            v78(v73, v57, v54);
            uint64_t v60 = v58 + 1;
            if (__OFADD__(v58, 1)) {
              break;
            }
            char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v62 = v59;
            char v63 = v61;
            v44(v62, v54);
            if (v63)
            {
              swift_bridgeObjectRelease();
              uint64_t v31 = v69;
              unint64_t v35 = v74;
              goto LABEL_40;
            }
            ++v58;
            v57 += v56;
            uint64_t v54 = v75;
            if (v60 == v36)
            {
              swift_bridgeObjectRelease();
              uint64_t v31 = v69;
              unint64_t v35 = v74;
              goto LABEL_28;
            }
          }
          __break(1u);
          goto LABEL_45;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v44 = *(void (**)(char *, uint64_t))(v70 + 8);
      }
      uint64_t v54 = v75;
LABEL_28:
      v44(v35, v54);
      swift_bridgeObjectRelease();
      uint64_t v53 = type metadata accessor for ParseDetectorResult;
    }
    else
    {
      uint64_t v53 = (uint64_t (*)(void))type metadata accessor for CVDetection;
    }
    sub_1000239B8(v31, v53);
    return 0;
  }
  uint64_t v47 = v68;
  sub_1000238F8(v31, v68, type metadata accessor for ObjectDetectorResult);
  uint64_t v48 = (uint64_t *)(v47 + *(int *)(v67 + 28));
  uint64_t v49 = *v48;
  uint64_t v50 = v48[1];
  if (*v48 == 1852270963 && v50 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v49 == 0x746E656D75636F64 && v50 == 0xE800000000000000)
  {
    char v51 = type metadata accessor for ObjectDetectorResult;
    uint64_t v52 = v47;
LABEL_41:
    sub_1000239B8(v52, v51);
    goto LABEL_42;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1000239B8(v47, type metadata accessor for ObjectDetectorResult);
  uint64_t result = 0;
  if (v64)
  {
LABEL_42:
    if (qword_100517D30 == -1) {
      return byte_10055E040;
    }
LABEL_45:
    swift_once();
    return byte_10055E040;
  }
  return result;
}

uint64_t sub_100023890(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000238F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100023960()
{
  unint64_t result = qword_100519868;
  if (!qword_100519868)
  {
    type metadata accessor for VisualDomain();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519868);
  }
  return result;
}

uint64_t sub_1000239B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for SummarizeClassifier()
{
  return &type metadata for SummarizeClassifier;
}

uint64_t sub_100023A28(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  type metadata accessor for CVDetection();
  v2[12] = swift_task_alloc();
  v2[13] = type metadata accessor for BundleClassification.ClassificationType(0);
  v2[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for TextDetectorResult(0);
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_100023B44, 0, 0);
}

uint64_t sub_100023B44()
{
  uint64_t v1 = sub_10019CAAC();
  int64_t v2 = v1[2];
  if (!v2)
  {
    swift_bridgeObjectRelease();
    sub_100022E84();
    swift_allocError();
    unint64_t v30 = 0xD000000000000015;
    uint64_t v31 = "No text results found";
LABEL_26:
    *os_log_type_t v29 = v30;
    v29[1] = (unint64_t)(v31 - 32) | 0x8000000000000000;
    goto LABEL_27;
  }
  uint64_t v50 = v0 + 8;
  uint64_t v3 = v0[16];
  uint64_t v55 = v0[15];
  sub_1000407B0(0, v2, 0);
  uint64_t v4 = 0;
  int64_t v51 = v2;
  uint64_t v54 = (char *)v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v52 = v0;
  uint64_t v53 = *(void *)(v3 + 72);
  do
  {
    uint64_t v5 = v0[17];
    uint64_t v56 = v4;
    sub_100025568((uint64_t)&v54[v4 * v53], v5, type metadata accessor for TextDetectorResult);
    uint64_t v6 = *(void *)(v5 + *(int *)(v55 + 44));
    int64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      sub_1000407B0(0, v7, 0);
      uint64_t v8 = 0;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      uint64_t v10 = 2 * v9;
      do
      {
        uint64_t v12 = *(void *)(v6 + v8 + 40);
        uint64_t v11 = *(void *)(v6 + v8 + 48);
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        int64_t v14 = v9 + 1;
        swift_bridgeObjectRetain();
        if (v9 >= v13 >> 1) {
          sub_1000407B0(v13 > 1, v14, 1);
        }
        _swiftEmptyArrayStorage[2] = v14;
        uint64_t v15 = &_swiftEmptyArrayStorage[v10];
        v15[4] = v12;
        v15[5] = v11;
        v10 += 2;
        v8 += 40;
        ++v9;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      int64_t v2 = v51;
      uint64_t v0 = v52;
    }
    uint64_t v16 = v0[17];
    v0[7] = _swiftEmptyArrayStorage;
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    sub_1000255D0(v16, type metadata accessor for TextDetectorResult);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000407B0(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    uint64_t v20 = v56;
    unint64_t v22 = _swiftEmptyArrayStorage[2];
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1)
    {
      sub_1000407B0(v21 > 1, v22 + 1, 1);
      uint64_t v20 = v56;
    }
    uint64_t v4 = v20 + 1;
    _swiftEmptyArrayStorage[2] = v22 + 1;
    char v23 = &_swiftEmptyArrayStorage[2 * v22];
    v23[4] = v17;
    v23[5] = v19;
  }
  while (v4 != v2);
  swift_bridgeObjectRelease();
  uint64_t v24 = (void *)_swiftEmptyArrayStorage[2];
  if (!v24)
  {
LABEL_25:
    swift_release();
    sub_100022E84();
    swift_allocError();
    unint64_t v30 = 0xD00000000000002ELL;
    uint64_t v31 = "No single text detector result was long enough";
    goto LABEL_26;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v25 <= 100)
  {
    if (v24 != (void *)1)
    {
      unint64_t v32 = &_swiftEmptyArrayStorage[7];
      uint64_t v33 = 1;
      while (1)
      {
        uint64_t v34 = (void *)(v33 + 1);
        if (__OFADD__(v33, 1)) {
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v35 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v35 > 100) {
          goto LABEL_16;
        }
        v32 += 2;
        ++v33;
        if (v34 == v24) {
          goto LABEL_24;
        }
      }
      __break(1u);
      goto LABEL_37;
    }
LABEL_24:
    swift_release();
    uint64_t v0 = v52;
    goto LABEL_25;
  }
LABEL_16:
  swift_release();
  *uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v28 = v27;
  swift_release();
  if (!sub_100024F64(v26, v28))
  {
    uint64_t v34 = v52;
    if (qword_100517E88 == -1)
    {
LABEL_32:
      uint64_t v38 = type metadata accessor for Logger();
      sub_10000F378(v38, (uint64_t)qword_10055E2B0);
      swift_bridgeObjectRetain();
      unint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 134217984;
        uint64_t v42 = String.count.getter();
        swift_bridgeObjectRelease();
        v52[9] = v42;
        uint64_t v34 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Detected summarizable text of length: %ld", v41, 0xCu);
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v43 = v34[14];
      uint64_t v44 = v34[12];
      uint64_t v45 = v34[10];
      swift_storeEnumTagMultiPayload();
      sub_10019D408(v44);
      sub_1003FEC34(v34 + 2);
      uint64_t v46 = v34[5];
      uint64_t v47 = v34[6];
      sub_10000F3B0(v34 + 2, v46);
      double v48 = (*(double (**)(uint64_t, uint64_t))(v47 + 88))(v46, v47);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)(v34 + 2));
      sub_1000255D0(v44, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100025500(v43, v45, type metadata accessor for BundleClassification.ClassificationType);
      uint64_t v49 = type metadata accessor for BundleClassification(0);
      *(void *)(v45 + *(int *)(v49 + 20)) = 0x3FF0000000000000;
      *(double *)(v45 + *(int *)(v49 + 24)) = v48;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = (uint64_t (*)(void))v34[1];
      goto LABEL_28;
    }
LABEL_37:
    swift_once();
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  uint64_t v0 = v52;
LABEL_27:
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
LABEL_28:
  return v36();
}

uint64_t sub_1000241D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  return sub_100023A28(a1, a2);
}

unint64_t sub_100024278()
{
  unint64_t result = qword_10051CA40;
  if (!qword_10051CA40)
  {
    sub_10000F69C((uint64_t *)&unk_100522CD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CA40);
  }
  return result;
}

uint64_t sub_1000242D4(char *a1)
{
  Swift::String v114 = a1;
  uint64_t v99 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v99);
  uint64_t v100 = (uint64_t)&v99 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for VisualDomain();
  uint64_t v102 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  long long v103 = (char *)&v99 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v106 = (char *)&v99 - v4;
  __chkstk_darwin(v5);
  uint64_t v109 = (char *)&v99 - v6;
  __chkstk_darwin(v7);
  uint64_t v110 = (char *)&v99 - v8;
  uint64_t v104 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v104);
  uint64_t v101 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v105 = (uint64_t)&v99 - v11;
  uint64_t v107 = type metadata accessor for CVDetection();
  __chkstk_darwin(v107);
  uint64_t v108 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v112);
  unint64_t v113 = (unint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for GenerativeModelsAvailability.Availability();
  Swift::String v115 = *(void (***)(char *, void, uint64_t))(v14 - 8);
  uint64_t v116 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v99 - v18;
  uint64_t v20 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  char v23 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for GenerativeModelsAvailability();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[self sharedConnection];
  if (!result) {
    goto LABEL_64;
  }
  os_log_type_t v29 = (void *)result;
  unsigned int v30 = [(id)result isVisualIntelligenceSummaryAllowed];

  if (!v30)
  {
    if (qword_100517E88 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10000F378(v37, (uint64_t)qword_10055E2B0);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v38, v39)) {
      goto LABEL_15;
    }
    os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v40 = 0;
    uint64_t v41 = "Summarization is not available with this managed configuration";
    goto LABEL_14;
  }
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifiers:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  GenerativeModelsAvailability.availability.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  unint64_t v32 = v115;
  uint64_t v31 = v116;
  v115[13](v16, enum case for GenerativeModelsAvailability.Availability.available(_:), v116);
  char v33 = static GenerativeModelsAvailability.Availability.== infix(_:_:)();
  uint64_t v34 = (void (*)(char *, uint64_t))v32[1];
  v34(v16, v31);
  v34(v19, v31);
  if ((v33 & 1) == 0)
  {
    if (qword_100517E88 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10000F378(v42, (uint64_t)qword_10055E2B0);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v38, v39)) {
      goto LABEL_15;
    }
    os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v40 = 0;
    uint64_t v41 = "GMS is not available for summarization.";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v38, v39, v41, v40, 2u);
    swift_slowDealloc();
LABEL_15:

    return 0;
  }
  uint64_t v35 = v113;
  sub_100025568((uint64_t)v114, v113, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v36 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
    return 0;
  }
  sub_1000255D0(v35, type metadata accessor for CVBundle.BundleType);
  uint64_t v44 = v108;
  sub_10019C820(v108);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v64 = v100;
    sub_100025500(v44, v100, type metadata accessor for ObjectDetectorResult);
    uint64_t v65 = (uint64_t *)(v64 + *(int *)(v99 + 28));
    uint64_t v66 = *v65;
    uint64_t v67 = v65[1];
    if (*v65 == 1852270963 && v67 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v66 == 0x746E656D75636F64 && v67 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v68 = type metadata accessor for ObjectDetectorResult;
      uint64_t v69 = v64;
LABEL_46:
      sub_1000255D0(v69, v68);
      return 1;
    }
    uint64_t v70 = type metadata accessor for ObjectDetectorResult;
    uint64_t v71 = v64;
LABEL_31:
    sub_1000255D0(v71, v70);
    return 0;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v70 = (uint64_t (*)(void))type metadata accessor for CVDetection;
    uint64_t v71 = v44;
    goto LABEL_31;
  }
  uint64_t v46 = v105;
  sub_100025500(v44, v105, type metadata accessor for ParseDetectorResult);
  uint64_t v47 = v104;
  unint64_t v48 = *(void *)(v46 + *(int *)(v104 + 28));
  swift_bridgeObjectRetain();
  uint64_t v49 = v110;
  static VisualDomain.book.getter();
  uint64_t v50 = *(void *)(v48 + 16);
  if (!v50)
  {
    char v61 = 0;
    uint64_t v60 = *(char **)(v102 + 8);
    uint64_t v63 = (v102 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v62 = v111;
    ((void (*)(char *, uint64_t))v60)(v49, v111);
    goto LABEL_44;
  }
  uint64_t v51 = v102;
  unint64_t v52 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
  unint64_t v53 = v48 + v52;
  uint64_t v54 = v109;
  unint64_t v55 = v48;
  uint64_t v56 = v111;
  Swift::String v115 = *(void (***)(char *, void, uint64_t))(v102 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v115)(v109, v53, v111);
  sub_100023960();
  swift_bridgeObjectRetain();
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v58 = *(char **)(v51 + 8);
  uint64_t v116 = (v51 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v59 = v54;
  uint64_t v60 = v58;
  ((void (*)(char *, uint64_t))v58)(v59, v56);
  if (v57)
  {
    swift_bridgeObjectRelease();
    char v61 = 1;
    uint64_t v62 = v111;
    uint64_t v63 = v116;
    goto LABEL_35;
  }
  unint64_t v113 = v55;
  if (v50 == 1)
  {
    swift_bridgeObjectRelease();
    char v61 = 0;
    uint64_t v62 = v111;
    uint64_t v63 = v116;
LABEL_35:
    uint64_t v47 = v104;
    uint64_t v46 = v105;
LABEL_43:
    ((void (*)(char *, uint64_t))v60)(v49, v62);
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v80 = v101;
    sub_100025568(v46, v101, type metadata accessor for ParseDetectorResult);
    uint64_t v81 = v106;
    if (v61)
    {
      sub_1000255D0(v80, type metadata accessor for ParseDetectorResult);
      uint64_t v69 = v46;
      uint64_t v68 = type metadata accessor for ParseDetectorResult;
      goto LABEL_46;
    }
    uint64_t v82 = *(char **)(v80 + *(int *)(v47 + 28));
    swift_bridgeObjectRetain();
    static VisualDomain.album.getter();
    uint64_t v83 = *((void *)v82 + 2);
    if (v83)
    {
      double v84 = *(void (***)(char *, void, uint64_t))(v102 + 16);
      unint64_t v113 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      Swift::String v115 = v84;
      uint64_t v116 = v63;
      uint64_t v85 = v103;
      ((void (*)(char *, char *, uint64_t))v84)(v103, &v82[v113], v62);
      sub_100023960();
      swift_bridgeObjectRetain();
      Swift::String v114 = v82;
      uint64_t v86 = v60;
      uint64_t v87 = v62;
      char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v89 = v87;
      uint64_t v60 = v86;
      ((void (*)(char *, uint64_t))v86)(v85, v89);
      if (v88)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = 1;
LABEL_61:
        ((void (*)(char *, uint64_t))v60)(v81, v111);
        swift_bridgeObjectRelease();
        sub_1000255D0(v80, type metadata accessor for ParseDetectorResult);
        sub_1000255D0(v46, type metadata accessor for ParseDetectorResult);
        return v43;
      }
      if (v83 != 1)
      {
        uint64_t v90 = *(void *)(v102 + 72);
        uint64_t v91 = &v114[v90 + v113];
        uint64_t v92 = 1;
        uint64_t v93 = v111;
        while (1)
        {
          uint64_t v94 = v103;
          uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v115)(v103, v91, v93);
          uint64_t v95 = v92 + 1;
          if (__OFADD__(v92, 1)) {
            goto LABEL_63;
          }
          char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v97 = v94;
          char v98 = v96;
          ((void (*)(char *, uint64_t))v86)(v97, v93);
          if (v98) {
            break;
          }
          ++v92;
          v91 += v90;
          if (v95 == v83)
          {
            swift_bridgeObjectRelease();
            uint64_t v43 = 0;
LABEL_60:
            uint64_t v46 = v105;
            uint64_t v81 = v106;
            uint64_t v80 = v101;
            uint64_t v60 = v86;
            goto LABEL_61;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v43 = 1;
        goto LABEL_60;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v43 = 0;
    goto LABEL_61;
  }
  Swift::String v114 = v60;
  uint64_t v72 = *(void *)(v102 + 72);
  unint64_t v73 = v113 + v72 + v52;
  uint64_t v74 = 1;
  uint64_t v62 = v111;
  while (1)
  {
    uint64_t v75 = v109;
    uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v115)(v109, v73, v62);
    uint64_t v76 = v74 + 1;
    if (__OFADD__(v74, 1)) {
      break;
    }
    char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v78 = v75;
    char v79 = v77;
    ((void (*)(char *, uint64_t))v114)(v78, v62);
    if (v79)
    {
      swift_bridgeObjectRelease();
      char v61 = 1;
      uint64_t v62 = v111;
      goto LABEL_42;
    }
    ++v74;
    v73 += v72;
    uint64_t v62 = v111;
    if (v76 == v50)
    {
      swift_bridgeObjectRelease();
      char v61 = 0;
LABEL_42:
      uint64_t v47 = v104;
      uint64_t v46 = v105;
      uint64_t v49 = v110;
      uint64_t v60 = v114;
      uint64_t v63 = v116;
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_100024F64(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100335A80()[2];
  swift_bridgeObjectRelease();
  if (v4 < 0x65)
  {
    if (qword_100517E88 != -1) {
      swift_once();
    }
    unint64_t v14 = 0x1000000000000021;
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000F378(v15, (uint64_t)qword_10055E2B0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    uint64_t v18 = "Not enough tokens to summarize…";
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_16;
    }
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    unint64_t v20 = 0x8000000100425140;
    uint64_t v21 = 0x1000000000000021;
    goto LABEL_15;
  }
  type metadata accessor for SummarizationClient();
  swift_allocObject();
  uint64_t v5 = SummarizationClient.init()();
  char v6 = sub_1000894F0(a1, a2, v5);
  swift_release();
  if ((v6 & 1) == 0)
  {
    if (qword_100517E88 != -1) {
      swift_once();
    }
    unint64_t v14 = 0xD000000000000045;
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000F378(v22, (uint64_t)qword_10055E2B0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    uint64_t v18 = "SummarizationClient has determined that this text is not summarizable";
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_16;
    }
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    unint64_t v20 = 0x8000000100425170;
    uint64_t v21 = 0xD000000000000045;
LABEL_15:
    uint64_t v34 = sub_1003806B0(v21, v20, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_16:

    sub_100022E84();
    uint64_t result = swift_allocError();
    *uint64_t v24 = v14;
    v24[1] = (unint64_t)(v18 - 32) | 0x8000000000000000;
    return result;
  }
  id v7 = [objc_allocWithZone((Class)NLLanguageRecognizer) init];
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 processString:v8];

  id v9 = [v7 dominantLanguage];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (v11 == 28261 && v13 == (void *)0xE200000000000000) {
      goto LABEL_19;
    }
  }
  else
  {

    uint64_t v13 = (void *)0xE300000000000000;
    uint64_t v11 = 4271950;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  v33[0] = 0;
  v33[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(75);
  v25._countAndFlagsBits = 0xD000000000000048;
  v25._object = (void *)0x80000001004251C0;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v11;
  v26._object = v13;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  if (qword_100517E88 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10000F378(v28, (uint64_t)qword_10055E2B0);
  swift_bridgeObjectRetain_n();
  os_log_type_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_1003806B0(0, 0xE000000000000000, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100022E84();
  uint64_t result = swift_allocError();
  *unint64_t v32 = 0;
  v32[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_100025500(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100025568(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000255D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100025630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

void sub_100025638()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
    {
      sub_100027A88();
      if (v2 <= 0x3F)
      {
        sub_100027AE0();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_1000257A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v59 = *(void *)(a3 + 16);
  uint64_t v57 = *(void *)(v59 - 8);
  int v4 = *(_DWORD *)(v57 + 80);
  uint64_t v58 = *(void *)(a3 + 24);
  int v5 = *(_DWORD *)(*(void *)(v58 - 8) + 80);
  uint64_t v55 = *(void *)(v57 + 64) + v5;
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v6 = *(void *)(v56 + 64);
  uint64_t v7 = type metadata accessor for ColorScheme();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  int v8 = *(_DWORD *)(v51 + 80);
  uint64_t v9 = v8 & 0xF8 | 7;
  uint64_t v54 = v6 + v9;
  unint64_t v10 = *(void *)(v51 + 64);
  if (v10 <= 8) {
    unint64_t v10 = 8;
  }
  unint64_t v53 = v10;
  unint64_t v60 = v10 + 8;
  unint64_t v11 = (((v10
         + 8
         + ((v6
           + v9
           + ((v55 + ((v4 + 4) & ~(unint64_t)v4)) & ~(unint64_t)v5)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = *(_DWORD *)(v13 + 80);
  uint64_t v61 = v13;
  uint64_t v62 = v12;
  uint64_t v15 = v14 & 0xF8 | 7;
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v16 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v13 + 64) + 1;
  }
  unint64_t v17 = v5 | (unint64_t)v4 | v8 & 0xF8 | (unint64_t)v15;
  int v18 = (v5 | v4 | v8 | v14) & 0x100000;
  if (v17 != 7 || v18 != 0 || (v16 & 0xFFFFFFFFFFFFFFF8) + ((v15 + v11 + 16) & ~v15) + 17 > 0x18)
  {
    uint64_t v21 = *a2;
    *(void *)a1 = *a2;
    uint64_t v22 = v21 + ((v17 + 16) & ~v17);
  }
  else
  {
    size_t v23 = v16;
    uint64_t v24 = ~v9;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    *(unsigned char *)(a1 + 3) = *((unsigned char *)a2 + 3);
    uint64_t v25 = (uint64_t)a2 + v4;
    unint64_t v26 = (a1 + v4 + 4) & ~(unint64_t)v4;
    unint64_t v27 = (v25 + 4) & ~(unint64_t)v4;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v57 + 16))(v26, v27, v59);
    unint64_t v28 = (v26 + v55) & ~(unint64_t)v5;
    unint64_t v29 = (v27 + v55) & ~(unint64_t)v5;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 16))(v28, v29, v58);
    os_log_type_t v30 = (void *)((v28 + v54) & v24);
    uint64_t v31 = (unsigned __int8 *)((v29 + v54) & v24);
    unsigned int v32 = v31[v53];
    unsigned int v33 = v32 - 2;
    uint64_t v22 = a1;
    if (v32 < 2)
    {
      uint64_t v35 = v61;
    }
    else
    {
      if (v53 <= 3) {
        uint64_t v34 = v53;
      }
      else {
        uint64_t v34 = 4;
      }
      uint64_t v35 = v61;
      switch(v34)
      {
        case 1:
          int v36 = *v31;
          goto LABEL_25;
        case 2:
          int v36 = *(unsigned __int16 *)v31;
          goto LABEL_25;
        case 3:
          int v36 = *(unsigned __int16 *)v31 | (v31[2] << 16);
          goto LABEL_25;
        case 4:
          int v36 = *(_DWORD *)v31;
LABEL_25:
          int v37 = (v36 | (v33 << (8 * v53))) + 2;
          unsigned int v32 = v36 + 2;
          if (v53 < 4) {
            unsigned int v32 = v37;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v38 = ~v15;
    if (v32 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v51 + 16))(v30, v31, v52);
      char v39 = 1;
    }
    else
    {
      *os_log_type_t v30 = *(void *)v31;
      swift_retain();
      char v39 = 0;
    }
    *((unsigned char *)v30 + v53) = v39;
    unint64_t v40 = ((unint64_t)v30 + v60) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (unint64_t)&v31[v60] & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v40 = *(unsigned char *)v41;
    *(void *)(v40 + 8) = *(void *)(v41 + 8);
    unint64_t v42 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v43 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v42 = *(unsigned char *)v43;
    *(void *)(v42 + 8) = *(void *)(v43 + 8);
    uint64_t v44 = (void *)((v42 + v15 + 16) & v38);
    uint64_t v45 = (const void *)((v43 + v15 + 16) & v38);
    uint64_t v46 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
    swift_retain();
    swift_retain();
    if (v46(v45, 1, v62))
    {
      size_t v47 = v23;
      memcpy(v44, v45, v23);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v44, v45, v62);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v44, 0, 1, v62);
      size_t v47 = v23;
    }
    *((unsigned char *)v44 + v47) = *((unsigned char *)v45 + v47);
    unint64_t v48 = ((unint64_t)v44 + v47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = ((unint64_t)v45 + v47) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v48 + 8) = *(void *)(v49 + 8);
    *(unsigned char *)(v48 + 16) = *(unsigned char *)(v49 + 16);
  }
  swift_retain();
  return v22;
}

uint64_t sub_100025CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v9 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v9);
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v11 = type metadata accessor for ColorScheme();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  int v14 = (unsigned __int8 *)((v9 + v10 + v13) & ~v13);
  if (*(void *)(v12 + 64) <= 8uLL) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = *(void *)(v12 + 64);
  }
  unsigned int v16 = v14[v15];
  unsigned int v17 = v16 - 2;
  if (v16 >= 2)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *v14;
        goto LABEL_13;
      case 2:
        int v19 = *(unsigned __int16 *)v14;
        goto LABEL_13;
      case 3:
        int v19 = *(unsigned __int16 *)v14 | (v14[2] << 16);
        goto LABEL_13;
      case 4:
        int v19 = *(_DWORD *)v14;
LABEL_13:
        int v20 = (v19 | (v17 << (8 * v15))) + 2;
        unsigned int v16 = v19 + 2;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(v14, v11);
  }
  else {
    swift_release();
  }
  swift_release();
  unint64_t v21 = (((unint64_t)&v14[v15 + 8] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v22 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80) & 0xF8 | 7;
  uint64_t v25 = (v21 + v24 + 16) & ~v24;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v22)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v22);
  }

  return swift_release();
}

unsigned char *sub_100025F64(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 4] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 4] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48);
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v15, v16);
  uint64_t v17 = *(void *)(v12 + 48);
  uint64_t v18 = type metadata accessor for ColorScheme();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80) & 0xF8 | 7;
  unint64_t v21 = (void *)((v17 + v20 + v15) & ~v20);
  uint64_t v22 = (unsigned __int8 *)((v17 + v20 + v16) & ~v20);
  if (*(void *)(v19 + 64) <= 8uLL) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = *(void *)(v19 + 64);
  }
  unsigned int v24 = v22[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *v22;
        goto LABEL_13;
      case 2:
        int v27 = *(unsigned __int16 *)v22;
        goto LABEL_13;
      case 3:
        int v27 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        goto LABEL_13;
      case 4:
        int v27 = *(_DWORD *)v22;
LABEL_13:
        int v28 = (v27 | (v25 << (8 * v23))) + 2;
        unsigned int v24 = v27 + 2;
        if (v23 < 4) {
          unsigned int v24 = v28;
        }
        break;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v19 + 16))(v21, v22, v18);
    char v29 = 1;
  }
  else
  {
    *unint64_t v21 = *(void *)v22;
    swift_retain();
    char v29 = 0;
  }
  *((unsigned char *)v21 + v23) = v29;
  unint64_t v30 = ((unint64_t)v21 + v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (unint64_t)&v22[v23 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v30 = *(unsigned char *)v31;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  unint64_t v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v32 = *(unsigned char *)v33;
  *(void *)(v32 + 8) = *(void *)(v33 + 8);
  uint64_t v34 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(_DWORD *)(v35 + 80) & 0xF8;
  uint64_t v37 = v36 + 23;
  unint64_t v38 = v36 + 23 + v32;
  unint64_t v39 = ~v36 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (char *)(v38 & v39);
  unint64_t v41 = (char *)((v37 + v33) & v39);
  unint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  swift_retain();
  swift_retain();
  if (v42(v41, 1, v34))
  {
    int v43 = *(_DWORD *)(v35 + 84);
    uint64_t v44 = *(void *)(v35 + 64);
    if (v43) {
      size_t v45 = *(void *)(v35 + 64);
    }
    else {
      size_t v45 = v44 + 1;
    }
    memcpy(v40, v41, v45);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v40, v41, v34);
    size_t v47 = *(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56);
    uint64_t v46 = v35 + 56;
    v47(v40, 0, 1, v34);
    int v43 = *(_DWORD *)(v46 + 28);
    uint64_t v44 = *(void *)(v46 + 8);
  }
  if (v43) {
    uint64_t v48 = v44;
  }
  else {
    uint64_t v48 = v44 + 1;
  }
  unint64_t v49 = (unint64_t)&v40[v48];
  unint64_t v50 = (unint64_t)&v41[v48];
  *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
  v49 &= 0xFFFFFFFFFFFFFFF8;
  v50 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v49 + 8) = *(void *)(v50 + 8);
  *(unsigned char *)(v49 + 16) = *(unsigned char *)(v50 + 16);
  swift_retain();
  return a1;
}

unsigned char *sub_100026320(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 4] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 4] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = *(void *)(v6 + 40) + v12;
  uint64_t v14 = (v13 + v8) & ~v12;
  uint64_t v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v14, v15);
  uint64_t v16 = *(void *)(v11 + 40);
  uint64_t v17 = type metadata accessor for ColorScheme();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  uint64_t v20 = v16 + v19;
  uint64_t v21 = (v16 + v19 + v14) & ~v19;
  uint64_t v22 = (v20 + v15) & ~v19;
  if (*(void *)(v18 + 64) <= 8uLL) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = *(void *)(v18 + 64);
  }
  if (v21 != v22)
  {
    uint64_t v24 = v17;
    unsigned int v25 = *(unsigned __int8 *)(v21 + v23);
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *(unsigned __int8 *)v21;
          goto LABEL_14;
        case 2:
          int v28 = *(unsigned __int16 *)v21;
          goto LABEL_14;
        case 3:
          int v28 = *(unsigned __int16 *)v21 | (*(unsigned __int8 *)(v21 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v28 = *(_DWORD *)v21;
LABEL_14:
          int v29 = (v28 | (v26 << (8 * v23))) + 2;
          unsigned int v25 = v28 + 2;
          if (v23 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v25 == 1) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    }
    else {
      swift_release();
    }
    unsigned int v30 = *(unsigned __int8 *)(v22 + v23);
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v32 = v23;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *(unsigned __int8 *)v22;
          goto LABEL_28;
        case 2:
          int v33 = *(unsigned __int16 *)v22;
          goto LABEL_28;
        case 3:
          int v33 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(v22 + 2) << 16);
          goto LABEL_28;
        case 4:
          int v33 = *(_DWORD *)v22;
LABEL_28:
          int v34 = (v33 | (v31 << (8 * v23))) + 2;
          unsigned int v30 = v33 + 2;
          if (v23 < 4) {
            unsigned int v30 = v34;
          }
          break;
        default:
          break;
      }
    }
    if (v30 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21, v22, v24);
      *(unsigned char *)(v21 + v23) = 1;
    }
    else
    {
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + v23) = 0;
      swift_retain();
    }
  }
  unint64_t v35 = ((v21 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = ((v22 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v35 = *(unsigned char *)v36;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  swift_retain();
  swift_release();
  unint64_t v37 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v37 = *(unsigned char *)v38;
  *(void *)(v37 + 8) = *(void *)(v38 + 8);
  swift_retain();
  swift_release();
  uint64_t v39 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(_DWORD *)(v40 + 80) & 0xF8;
  uint64_t v42 = v41 + 23;
  unint64_t v43 = v41 + 23 + v37;
  unint64_t v44 = ~v41 & 0xFFFFFFFFFFFFFFF8;
  size_t v45 = (char *)(v43 & v44);
  uint64_t v46 = (char *)((v42 + v38) & v44);
  size_t v47 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
  int v48 = v47(v43 & v44, 1, v39);
  int v49 = v47((unint64_t)v46, 1, v39);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v45, v46, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v45, 0, 1, v39);
      goto LABEL_44;
    }
    int v50 = *(_DWORD *)(v40 + 84);
    size_t v51 = *(void *)(v40 + 64);
  }
  else
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v45, v46, v39);
      goto LABEL_44;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v39);
    int v50 = *(_DWORD *)(v40 + 84);
    size_t v51 = *(void *)(v40 + 64);
  }
  if (v50) {
    size_t v52 = v51;
  }
  else {
    size_t v52 = v51 + 1;
  }
  memcpy(v45, v46, v52);
LABEL_44:
  if (*(_DWORD *)(v40 + 84)) {
    uint64_t v53 = *(void *)(v40 + 64);
  }
  else {
    uint64_t v53 = *(void *)(v40 + 64) + 1;
  }
  unint64_t v54 = (unint64_t)&v45[v53];
  unint64_t v55 = (unint64_t)&v46[v53];
  *(unsigned char *)unint64_t v54 = *(unsigned char *)v55;
  unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = v55 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v54 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v55 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v56 + 16) = *(unsigned char *)(v57 + 16);
  return a1;
}

unsigned char *sub_100026834(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 4] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 4] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v15, v16);
  uint64_t v17 = *(void *)(v12 + 32);
  uint64_t v18 = type metadata accessor for ColorScheme();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80) & 0xF8 | 7;
  uint64_t v21 = (void *)((v17 + v20 + v15) & ~v20);
  uint64_t v22 = (unsigned __int8 *)((v17 + v20 + v16) & ~v20);
  if (*(void *)(v19 + 64) <= 8uLL) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = *(void *)(v19 + 64);
  }
  unsigned int v24 = v22[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *v22;
        goto LABEL_13;
      case 2:
        int v27 = *(unsigned __int16 *)v22;
        goto LABEL_13;
      case 3:
        int v27 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        goto LABEL_13;
      case 4:
        int v27 = *(_DWORD *)v22;
LABEL_13:
        int v28 = (v27 | (v25 << (8 * v23))) + 2;
        unsigned int v24 = v27 + 2;
        if (v23 < 4) {
          unsigned int v24 = v28;
        }
        break;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v19 + 32))(v21, v22, v18);
    char v29 = 1;
  }
  else
  {
    char v29 = 0;
    *uint64_t v21 = *(void *)v22;
  }
  *((unsigned char *)v21 + v23) = v29;
  unsigned int v30 = (_OWORD *)(((unint64_t)v21 + v23 + 8) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v31 = (_OWORD *)((unint64_t)&v22[v23 + 8] & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v30 = *v31;
  uint64_t v32 = (_OWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v33 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  uint64_t v34 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(_DWORD *)(v35 + 80) & 0xF8;
  uint64_t v37 = v36 + 23;
  unint64_t v38 = (unint64_t)v32 + v36 + 23;
  unint64_t v39 = ~v36 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = (char *)(v38 & v39);
  uint64_t v41 = (char *)(((unint64_t)v33 + v37) & v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v41, 1, v34))
  {
    int v42 = *(_DWORD *)(v35 + 84);
    size_t v43 = *(void *)(v35 + 64);
    if (v42) {
      size_t v44 = v43;
    }
    else {
      size_t v44 = v43 + 1;
    }
    memcpy(v40, v41, v44);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v40, v41, v34);
    uint64_t v46 = *(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56);
    uint64_t v45 = v35 + 56;
    v46(v40, 0, 1, v34);
    int v42 = *(_DWORD *)(v45 + 28);
    size_t v43 = *(void *)(v45 + 8);
  }
  if (v42) {
    size_t v47 = v43;
  }
  else {
    size_t v47 = v43 + 1;
  }
  unint64_t v48 = (unint64_t)&v40[v47];
  unint64_t v49 = (unint64_t)&v41[v47];
  *(unsigned char *)unint64_t v48 = *(unsigned char *)v49;
  v48 &= 0xFFFFFFFFFFFFFFF8;
  v49 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v48 + 8) = *(void *)(v49 + 8);
  *(unsigned char *)(v48 + 16) = *(unsigned char *)(v49 + 16);
  return a1;
}

unsigned char *sub_100026BB0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 4] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 4] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = *(void *)(v6 + 24) + v12;
  uint64_t v14 = (v13 + v8) & ~v12;
  uint64_t v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v11 + 24);
  uint64_t v17 = type metadata accessor for ColorScheme();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  uint64_t v20 = v16 + v19;
  uint64_t v21 = (v16 + v19 + v14) & ~v19;
  uint64_t v22 = (v20 + v15) & ~v19;
  if (*(void *)(v18 + 64) <= 8uLL) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = *(void *)(v18 + 64);
  }
  if (v21 != v22)
  {
    uint64_t v24 = v17;
    unsigned int v25 = *(unsigned __int8 *)(v21 + v23);
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *(unsigned __int8 *)v21;
          goto LABEL_14;
        case 2:
          int v28 = *(unsigned __int16 *)v21;
          goto LABEL_14;
        case 3:
          int v28 = *(unsigned __int16 *)v21 | (*(unsigned __int8 *)(v21 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v28 = *(_DWORD *)v21;
LABEL_14:
          int v29 = (v28 | (v26 << (8 * v23))) + 2;
          unsigned int v25 = v28 + 2;
          if (v23 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v25 == 1) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    }
    else {
      swift_release();
    }
    unsigned int v30 = *(unsigned __int8 *)(v22 + v23);
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v32 = v23;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *(unsigned __int8 *)v22;
          goto LABEL_28;
        case 2:
          int v33 = *(unsigned __int16 *)v22;
          goto LABEL_28;
        case 3:
          int v33 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(v22 + 2) << 16);
          goto LABEL_28;
        case 4:
          int v33 = *(_DWORD *)v22;
LABEL_28:
          int v34 = (v33 | (v31 << (8 * v23))) + 2;
          unsigned int v30 = v33 + 2;
          if (v23 < 4) {
            unsigned int v30 = v34;
          }
          break;
        default:
          break;
      }
    }
    if (v30 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v21, v22, v24);
      char v35 = 1;
    }
    else
    {
      char v35 = 0;
      *(void *)uint64_t v21 = *(void *)v22;
    }
    *(unsigned char *)(v21 + v23) = v35;
  }
  unint64_t v36 = ((v21 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = ((v22 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v36 = *(unsigned char *)v37;
  *(void *)(v36 + 8) = *(void *)(v37 + 8);
  swift_release();
  unint64_t v38 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v38 = *(unsigned char *)v39;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  swift_release();
  uint64_t v40 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(_DWORD *)(v41 + 80) & 0xF8;
  uint64_t v43 = v42 + 23;
  unint64_t v44 = v42 + 23 + v38;
  unint64_t v45 = ~v42 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = (char *)(v44 & v45);
  size_t v47 = (char *)((v43 + v39) & v45);
  unint64_t v48 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48);
  int v49 = v48(v44 & v45, 1, v40);
  int v50 = v48((unint64_t)v47, 1, v40);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v46, v47, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v46, 0, 1, v40);
      goto LABEL_45;
    }
    int v51 = *(_DWORD *)(v41 + 84);
    size_t v52 = *(void *)(v41 + 64);
  }
  else
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v46, v47, v40);
      goto LABEL_45;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v46, v40);
    int v51 = *(_DWORD *)(v41 + 84);
    size_t v52 = *(void *)(v41 + 64);
  }
  if (v51) {
    size_t v53 = v52;
  }
  else {
    size_t v53 = v52 + 1;
  }
  memcpy(v46, v47, v53);
LABEL_45:
  if (*(_DWORD *)(v41 + 84)) {
    uint64_t v54 = *(void *)(v41 + 64);
  }
  else {
    uint64_t v54 = *(void *)(v41 + 64) + 1;
  }
  unint64_t v55 = (unint64_t)&v46[v54];
  unint64_t v56 = (unint64_t)&v47[v54];
  *(unsigned char *)unint64_t v55 = *(unsigned char *)v56;
  unint64_t v57 = v55 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = v56 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v55 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v56 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(unsigned char *)(v57 + 16) = *(unsigned char *)(v58 + 16);
  return a1;
}

uint64_t sub_1000270A8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v44 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v43 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v43 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v5 <= v7) {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for ColorScheme() - 8);
  if (*(void *)(v9 + 64) <= 8uLL) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(void *)(type metadata accessor for AccessibilityTechnologies() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= 0x7FFFFFFE) {
    unsigned int v14 = 2147483646;
  }
  if (v8 > v14) {
    unsigned int v14 = v8;
  }
  uint64_t v15 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = *(void *)(v4 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = *(void *)(v6 + 64);
  int v19 = *(_DWORD *)(v11 + 80);
  uint64_t v20 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = v20 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v22 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v23 = v10 + 8;
  uint64_t v24 = v19 & 0xF8;
  unint64_t v25 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = v24 + 23;
  if (a2 <= v14) {
    goto LABEL_37;
  }
  unint64_t v27 = (v21 & 0xFFFFFFFFFFFFFFF8)
      + ((v26
        + ((((v23 + ((v18 + v22 + ((v16 + v17 + ((v15 + 4) & ~v15)) & ~v17)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & v25)
      + 17;
  char v28 = 8 * v27;
  if (v27 > 3) {
    goto LABEL_19;
  }
  unsigned int v31 = ((a2 - v14 + ~(-1 << v28)) >> v28) + 1;
  if (HIWORD(v31))
  {
    int v29 = *(_DWORD *)((char *)a1 + v27);
    if (v29) {
      goto LABEL_27;
    }
  }
  else
  {
    if (v31 <= 0xFF)
    {
      if (v31 < 2) {
        goto LABEL_37;
      }
LABEL_19:
      int v29 = *((unsigned __int8 *)a1 + v27);
      if (!*((unsigned char *)a1 + v27)) {
        goto LABEL_37;
      }
LABEL_27:
      int v32 = (v29 - 1) << v28;
      if (v27 <= 3)
      {
        int v33 = v27;
      }
      else
      {
        int v32 = 0;
        int v33 = 4;
      }
      switch(v33)
      {
        case 2:
          int v34 = *a1;
          break;
        case 3:
          int v34 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v34 = *(_DWORD *)a1;
          break;
        default:
          int v34 = *(unsigned __int8 *)a1;
          break;
      }
      return v14 + (v34 | v32) + 1;
    }
    int v29 = *(unsigned __int16 *)((char *)a1 + v27);
    if (*(unsigned __int16 *)((char *)a1 + v27)) {
      goto LABEL_27;
    }
  }
LABEL_37:
  uint64_t v35 = ((unint64_t)a1 + v15 + 4) & ~v15;
  if (v5 == v14)
  {
    unint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v37 = v5;
    uint64_t v38 = v44;
    return v36(v35, v37, v38);
  }
  uint64_t v35 = (v35 + v16 + v17) & ~v17;
  if (v7 == v14)
  {
    unint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v37 = v7;
    uint64_t v38 = v43;
    return v36(v35, v37, v38);
  }
  unint64_t v39 = (v23 + ((v35 + v18 + v22) & ~v22)) & 0xFFFFFFFFFFFFFFF8;
  if (v14 > 0x7FFFFFFE)
  {
    unsigned int v42 = (*(uint64_t (**)(unint64_t))(v12 + 48))((v26 + ((v39 + 23) & 0xFFFFFFFFFFFFFFF8)) & v25);
    if (v42 >= 2) {
      return v42 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v40 = *(void *)(v39 + 8);
    if (v40 >= 0xFFFFFFFF) {
      LODWORD(v40) = -1;
    }
    int v41 = v40 - 1;
    if (v41 < 0) {
      int v41 = -1;
    }
    return (v41 + 1);
  }
}

void sub_1000274F0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v43 = *(void *)(a4 + 24);
  uint64_t v44 = *(void *)(a4 + 16);
  uint64_t v4 = *(void *)(v44 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(v43 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v5 <= v7) {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for ColorScheme() - 8);
  if (*(void *)(v9 + 64) <= 8uLL) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(type metadata accessor for AccessibilityTechnologies() - 8);
  int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = *(void *)(v4 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = *(void *)(v6 + 64);
  int v18 = *(_DWORD *)(v12 + 80);
  size_t v19 = *(void *)(v12 + 64);
  if (v13) {
    unsigned int v20 = v13 - 1;
  }
  else {
    unsigned int v20 = 0;
  }
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = v20;
  }
  if (v8 <= v21) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = v8;
  }
  uint64_t v23 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  unint64_t v24 = ~(unint64_t)(v18 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (v18 & 0xF8) + 23;
  if (!v13) {
    ++v19;
  }
  size_t v26 = (v19 & 0xFFFFFFFFFFFFFFF8)
      + ((v25
        + ((((v10 + 8 + ((v17 + v23 + ((v15 + v16 + ((v14 + 4) & ~v14)) & ~v16)) & ~v23)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & v24)
      + 17;
  if (a3 > v22)
  {
    if (v26 <= 3)
    {
      unsigned int v27 = ((a3 - v22 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
      if (HIWORD(v27))
      {
        int v11 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v27 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  if (v22 < a2)
  {
    unsigned int v28 = ~v22 + a2;
    if (v26 < 4)
    {
      int v29 = (v28 >> (8 * v26)) + 1;
      bzero(a1, v26);
      *a1 = v28 & ~(-1 << (8 * v26));
    }
    else
    {
      bzero(a1, v26);
      *(_DWORD *)a1 = v28;
      int v29 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v26] = v29;
        return;
      case 2:
        *(_WORD *)&a1[v26] = v29;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v26] = v29;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v26] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v26] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x100027A38);
    case 4:
      *(_DWORD *)&a1[v26] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (!a2) {
        return;
      }
LABEL_37:
      uint64_t v30 = (unint64_t)&a1[v14 + 4] & ~v14;
      if (v5 == v22)
      {
        unsigned int v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v5;
        uint64_t v34 = v44;
LABEL_41:
        v31(v30, v32, v33, v34);
        return;
      }
      uint64_t v30 = (v30 + v15 + v16) & ~v16;
      if (v7 == v22)
      {
        unsigned int v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v7;
        uint64_t v34 = v43;
        goto LABEL_41;
      }
      unint64_t v35 = (v10 + 8 + ((v30 + v17 + v23) & ~v23)) & 0xFFFFFFFFFFFFFFF8;
      if (v22 > 0x7FFFFFFE)
      {
        unint64_t v36 = (unsigned char *)((v25 + ((v35 + 23) & 0xFFFFFFFFFFFFFFF8)) & v24);
        if (v21 >= a2)
        {
          if (v20 >= a2)
          {
            unsigned int v42 = *(void (**)(unsigned char *, void))(v12 + 56);
            v42(v36, a2 + 1);
          }
          else
          {
            if (v19 <= 3) {
              int v40 = ~(-1 << (8 * v19));
            }
            else {
              int v40 = -1;
            }
            if (v19)
            {
              int v39 = v40 & (~v20 + a2);
              if (v19 <= 3) {
                int v41 = v19;
              }
              else {
                int v41 = 4;
              }
              bzero(v36, v19);
              switch(v41)
              {
                case 2:
                  *(_WORD *)unint64_t v36 = v39;
                  break;
                case 3:
                  *(_WORD *)unint64_t v36 = v39;
                  v36[2] = BYTE2(v39);
                  break;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_55;
              }
            }
          }
        }
        else
        {
          int v37 = v19 & 0xFFFFFFF8;
          size_t v38 = (v19 & 0xFFFFFFF8) + 17;
          if (v38 >= 4) {
            int v39 = ~v21 + a2;
          }
          else {
            int v39 = (~(_BYTE)v21 + a2);
          }
          bzero(v36, v38);
          if (v37 == -16) {
LABEL_55:
          }
            unsigned char *v36 = v39;
          else {
LABEL_66:
          }
            *(_DWORD *)unint64_t v36 = v39;
        }
      }
      else
      {
        *(void *)(v35 + 8) = a2;
      }
      return;
  }
}

uint64_t type metadata accessor for MorphingContainer()
{
  return swift_getGenericMetadata();
}

void sub_100027A88()
{
  if (!qword_100522D60)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100522D60);
    }
  }
}

void sub_100027AE0()
{
  if (!qword_100519900)
  {
    unint64_t v0 = type metadata accessor for AccessibilityFocusState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100519900);
    }
  }
}

uint64_t sub_100027B40()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100027B84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((a3 & 1) == 0) {
    EdgeInsets.init(_all:)();
  }
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v10;
  v13[4] = v11;
  char v14 = a3 & 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100027CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v207 = a2;
  uint64_t v3 = type metadata accessor for ContentShapeKinds();
  uint64_t v205 = *(void *)(v3 - 8);
  uint64_t v206 = v3;
  __chkstk_darwin(v3);
  v204 = (char *)v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = *(void *)(a1 - 8);
  uint64_t v203 = *(void *)(v202 + 64);
  __chkstk_darwin(v5);
  v201 = (char *)v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = type metadata accessor for ColorScheme();
  uint64_t v197 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  v196 = (char *)v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v195 = (uint64_t)v148 - v9;
  uint64_t v200 = sub_10000F214(&qword_100519908);
  __chkstk_darwin(v200);
  uint64_t v198 = (uint64_t)v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Spring();
  uint64_t v192 = *(void *)(v11 - 8);
  uint64_t v193 = v11;
  __chkstk_darwin(v11);
  v191 = (char *)v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v221);
  v194 = (__n128 *)((char *)v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v219 = (__n128 *)((char *)v148 - v15);
  uint64_t v16 = type metadata accessor for Material();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v189 = v16;
  uint64_t v190 = v17;
  __chkstk_darwin(v16);
  v188 = (char *)v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1;
  uint64_t v220 = a1;
  uint64_t v218 = *(void *)(a1 + 16);
  sub_10000F69C(&qword_100518C50);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100523150);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v217 = *(void *)(v19 + 32);
  uint64_t v21 = v217;
  uint64_t v22 = sub_100013AA8(&qword_100518C48, &qword_100518C50);
  uint64_t v287 = v21;
  uint64_t v288 = v22;
  v215 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = sub_100013AA8(&qword_100518C20, &qword_100523150);
  uint64_t v285 = WitnessTable;
  uint64_t v286 = v24;
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v26 = sub_10002D4E4();
  uint64_t v281 = v20;
  v282 = &type metadata for PillLabelStyle;
  uint64_t v283 = v25;
  v284 = (void *)v26;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v27 = type metadata accessor for ModifiedContent();
  type metadata accessor for PlaceholderContentView();
  uint64_t v223 = type metadata accessor for ModifiedContent();
  uint64_t v224 = type metadata accessor for ModifiedContent();
  uint64_t v281 = v20;
  v282 = &type metadata for PillLabelStyle;
  uint64_t v283 = v25;
  v284 = (void *)v26;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v280 = &protocol witness table for _OpacityEffect;
  uint64_t v278 = swift_getWitnessTable();
  uint64_t v276 = swift_getWitnessTable();
  v277 = &protocol witness table for _PaddingLayout;
  uint64_t v274 = swift_getWitnessTable();
  v275 = &protocol witness table for _PaddingLayout;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v272 = swift_getWitnessTable();
  v273 = &protocol witness table for _BlurEffect;
  uint64_t v270 = swift_getWitnessTable();
  v271 = &protocol witness table for _ScaleEffect;
  int v29 = (ValueMetadata *)v224;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v281 = v27;
  v282 = v29;
  uint64_t v283 = v28;
  v284 = (void *)v30;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for AccessibilityAttachmentModifier();
  v216 = (char *)type metadata accessor for ModifiedContent();
  uint64_t v31 = v220;
  uint64_t v224 = *(void *)(v220 + 24);
  type metadata accessor for SafeAreaPaddingModifier();
  type metadata accessor for ModifiedContent();
  sub_10000F69C((uint64_t *)&unk_10051D370);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100519918);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100519920);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v223 = *(void *)(v31 + 40);
  uint64_t v33 = v223;
  uint64_t v34 = sub_10002F7BC(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
  uint64_t v268 = v33;
  uint64_t v269 = v34;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  uint64_t v266 = v35;
  uint64_t v267 = v36;
  uint64_t v37 = swift_getWitnessTable();
  v213 = (char *)&protocol conformance descriptor for _BackgroundModifier<A>;
  uint64_t v38 = sub_100013AA8(&qword_100519938, &qword_100519918);
  uint64_t v264 = v37;
  uint64_t v265 = v38;
  uint64_t v39 = swift_getWitnessTable();
  v212 = &protocol conformance descriptor for _OverlayModifier<A>;
  uint64_t v40 = sub_100013AA8(&qword_100519940, &qword_100519920);
  uint64_t v262 = v39;
  uint64_t v263 = v40;
  uint64_t v260 = swift_getWitnessTable();
  v261 = &protocol witness table for _FlexFrameLayout;
  uint64_t v258 = swift_getWitnessTable();
  v259 = &protocol witness table for _SafeAreaIgnoringLayout;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v281 = v32;
  v282 = (ValueMetadata *)v41;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  uint64_t v161 = type metadata accessor for TupleView();
  uint64_t v160 = swift_getWitnessTable();
  v208 = (void *)type metadata accessor for ZStack();
  uint64_t v167 = *(v208 - 1);
  __chkstk_darwin(v208);
  uint64_t v158 = (char *)v148 - v42;
  sub_10000F69C(&qword_1005190E0);
  uint64_t v209 = type metadata accessor for ModifiedContent();
  uint64_t v170 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  uint64_t v156 = (char *)v148 - v43;
  sub_10000F69C(&qword_100519948);
  uint64_t v210 = type metadata accessor for ModifiedContent();
  uint64_t v172 = *(void *)(v210 - 8);
  __chkstk_darwin(v210);
  uint64_t v157 = (char *)v148 - v44;
  sub_10000F69C(&qword_100519008);
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v175 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  v211 = (char *)v148 - v46;
  sub_10000F69C(&qword_100519950);
  uint64_t v149 = v45;
  uint64_t v47 = type metadata accessor for ModifiedContent();
  uint64_t v178 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v163 = (char *)v148 - v48;
  sub_10000F69C(&qword_100519958);
  uint64_t v152 = v47;
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v177 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v169 = (char *)v148 - v50;
  uint64_t v153 = v49;
  uint64_t v51 = type metadata accessor for ModifiedContent();
  uint64_t v185 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v166 = (char *)v148 - v52;
  sub_10000F69C(&qword_100519960);
  uint64_t v155 = v51;
  uint64_t v53 = type metadata accessor for ModifiedContent();
  uint64_t v186 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  v214 = (char *)v148 - v54;
  sub_10000F69C(&qword_100519968);
  uint64_t v162 = v53;
  uint64_t v55 = type metadata accessor for ModifiedContent();
  uint64_t v187 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  v216 = (char *)v148 - v56;
  uint64_t v57 = swift_getWitnessTable();
  v148[0] = v57;
  uint64_t v58 = sub_100013AA8(&qword_1005190D8, &qword_1005190E0);
  uint64_t v256 = v57;
  uint64_t v257 = v58;
  uint64_t v59 = swift_getWitnessTable();
  v148[1] = v59;
  uint64_t v60 = sub_100013AA8(&qword_100519970, &qword_100519948);
  uint64_t v254 = v59;
  uint64_t v255 = v60;
  uint64_t v61 = swift_getWitnessTable();
  v148[2] = v61;
  uint64_t v62 = sub_100013AA8(&qword_100519040, &qword_100519008);
  uint64_t v252 = v61;
  uint64_t v253 = v62;
  uint64_t v63 = swift_getWitnessTable();
  v148[3] = v63;
  uint64_t v64 = sub_100013AA8(&qword_100519978, &qword_100519950);
  uint64_t v250 = v63;
  uint64_t v251 = v64;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v150 = v65;
  uint64_t v66 = sub_100013AA8(&qword_100519980, &qword_100519958);
  uint64_t v248 = v65;
  uint64_t v249 = v66;
  uint64_t v151 = swift_getWitnessTable();
  uint64_t v246 = v151;
  uint64_t v247 = v60;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v154 = v67;
  uint64_t v68 = sub_100013AA8(&qword_100519988, &qword_100519960);
  uint64_t v244 = v67;
  uint64_t v245 = v68;
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v159 = v69;
  uint64_t v70 = sub_100013AA8(&qword_100519990, &qword_100519968);
  uint64_t v242 = v69;
  uint64_t v243 = v70;
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v281 = v55;
  v282 = (ValueMetadata *)&type metadata for Bool;
  uint64_t v164 = v55;
  uint64_t v283 = v71;
  v284 = &protocol witness table for Bool;
  uint64_t v72 = v71;
  uint64_t v165 = v71;
  uint64_t v179 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v174 = OpaqueTypeMetadata2;
  uint64_t v181 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v213 = (char *)v148 - v74;
  uint64_t v281 = v55;
  v282 = (ValueMetadata *)&type metadata for Bool;
  uint64_t v283 = v72;
  v284 = &protocol witness table for Bool;
  uint64_t v75 = swift_getOpaqueTypeConformance2();
  uint64_t v173 = v75;
  v212 = (void *)sub_10002D538();
  uint64_t v281 = OpaqueTypeMetadata2;
  v282 = &type metadata for MorphingContainerMode;
  uint64_t v283 = v75;
  v284 = v212;
  uint64_t v176 = swift_getOpaqueTypeMetadata2();
  uint64_t v183 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v168 = (char *)v148 - v76;
  sub_10000F69C(&qword_1005199A0);
  uint64_t v182 = type metadata accessor for ModifiedContent();
  uint64_t v184 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  uint64_t v171 = (char *)v148 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78);
  uint64_t v180 = (char *)v148 - v79;
  uint64_t v80 = v218;
  uint64_t v235 = v218;
  uint64_t v236 = v224;
  uint64_t v81 = v217;
  uint64_t v237 = v217;
  uint64_t v238 = v223;
  v239 = v222;
  static Alignment.center.getter();
  uint64_t v82 = v158;
  ZStack.init(alignment:content:)();
  uint64_t v83 = v188;
  static Material.thick.getter();
  static Edge.Set.all.getter();
  double v84 = v156;
  uint64_t v85 = v208;
  uint64_t v86 = v189;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  (*(void (**)(char *, uint64_t))(v190 + 8))(v83, v86);
  (*(void (**)(char *, void *))(v167 + 8))(v82, v85);
  uint64_t v87 = v219;
  sub_10002C00C(v219);
  v208 = (void *)sub_10002F7BC(&qword_1005199A8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  char v88 = v157;
  uint64_t v89 = v209;
  View.containerShape<A>(_:)();
  sub_10002D5A4((uint64_t)v87);
  (*(void (**)(char *, uint64_t))(v170 + 8))(v84, v89);
  sub_10002C00C(v87);
  uint64_t v209 = sub_10002F7BC(&qword_1005199B0, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  uint64_t v90 = v210;
  View.clipShape<A>(_:style:)();
  sub_10002D5A4((uint64_t)v87);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v88, v90);
  uint64_t v91 = v80;
  uint64_t v230 = v80;
  uint64_t v92 = v224;
  uint64_t v231 = v224;
  uint64_t v232 = v81;
  uint64_t v93 = v223;
  uint64_t v233 = v223;
  uint64_t v94 = v222;
  v234 = v222;
  static Alignment.center.getter();
  sub_10000F214(&qword_1005199B8);
  sub_10002E698(&qword_1005199C0, &qword_1005199B8, (void (*)(void))sub_10002D610);
  uint64_t v95 = v163;
  uint64_t v96 = v149;
  uint64_t v97 = v211;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v175 + 8))(v97, v96);
  uint64_t v225 = v91;
  uint64_t v226 = v92;
  uint64_t v227 = v217;
  uint64_t v228 = v93;
  v229 = v94;
  char v98 = v94;
  static Alignment.center.getter();
  sub_10000F214(&qword_1005199E8);
  sub_10002D700();
  uint64_t v99 = v169;
  uint64_t v100 = v152;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v178 + 8))(v95, v100);
  uint64_t v101 = v219;
  sub_10002C00C(v219);
  uint64_t v102 = v166;
  uint64_t v103 = v153;
  View.containerShape<A>(_:)();
  sub_10002D5A4((uint64_t)v101);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v99, v103);
  uint64_t v104 = v191;
  Spring.init(response:dampingRatio:)();
  static Animation.spring(_:blendDuration:)();
  (*(void (**)(char *, uint64_t))(v192 + 8))(v104, v193);
  Animation.speed(_:)();
  swift_release();
  LOBYTE(v281) = v98[3];
  uint64_t v105 = v155;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v185 + 8))(v102, v105);
  uint64_t v106 = v194;
  sub_10002C00C(v194);
  static Color.black.getter();
  uint64_t v107 = v195;
  sub_10027CA80(v195);
  uint64_t v109 = v196;
  uint64_t v108 = v197;
  uint64_t v110 = v199;
  (*(void (**)(char *, void, uint64_t))(v197 + 104))(v196, enum case for ColorScheme.dark(_:), v199);
  static ColorScheme.== infix(_:_:)();
  uint64_t v111 = *(void (**)(char *, uint64_t))(v108 + 8);
  v111(v109, v110);
  v111((char *)v107, v110);
  uint64_t v112 = Color.opacity(_:)();
  swift_release();
  uint64_t v113 = v198;
  sub_10002DFC8((uint64_t)v106, v198);
  uint64_t v114 = v113 + *(int *)(v200 + 36);
  *(void *)uint64_t v114 = v112;
  *(_OWORD *)(v114 + 8) = xmmword_10043D5B0;
  *(void *)(v114 + 24) = 0x4020000000000000;
  sub_10002D5A4((uint64_t)v106);
  static Alignment.center.getter();
  sub_100013AA8(&qword_100519A08, &qword_100519908);
  uint64_t v115 = v162;
  uint64_t v116 = v214;
  View.background<A>(_:alignment:)();
  sub_10000FBD8(v113, &qword_100519908);
  (*(void (**)(char *, uint64_t))(v186 + 8))(v116, v115);
  LOBYTE(v281) = *v98;
  uint64_t v117 = v201;
  uint64_t v118 = v202;
  v214 = *(char **)(v202 + 16);
  uint64_t v119 = v220;
  ((void (*)(char *, unsigned char *, uint64_t))v214)(v201, v98, v220);
  uint64_t v120 = *(unsigned __int8 *)(v118 + 80);
  uint64_t v121 = (v120 + 48) & ~v120;
  v211 = (char *)(v121 + v203);
  uint64_t v210 = v120 | 7;
  uint64_t v122 = (void *)swift_allocObject();
  uint64_t v123 = v224;
  v122[2] = v218;
  v122[3] = v123;
  uint64_t v124 = v217;
  uint64_t v125 = v223;
  v122[4] = v217;
  v122[5] = v125;
  v208 = *(void **)(v118 + 32);
  uint64_t v126 = v119;
  ((void (*)(char *, char *, uint64_t))v208)((char *)v122 + v121, v117, v119);
  uint64_t v127 = v164;
  v128 = v216;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v187 + 8))(v128, v127);
  LOBYTE(v281) = v222[3];
  ((void (*)(char *))v214)(v117);
  uint64_t v129 = (void *)swift_allocObject();
  uint64_t v130 = v224;
  v129[2] = v218;
  v129[3] = v130;
  uint64_t v131 = v223;
  v129[4] = v124;
  v129[5] = v131;
  ((void (*)(char *, char *, uint64_t))v208)((char *)v129 + v121, v117, v126);
  uint64_t v132 = v168;
  uint64_t v134 = v173;
  uint64_t v133 = v174;
  uint64_t v135 = v212;
  uint64_t v136 = v213;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v181 + 8))(v136, v133);
  uint64_t v137 = v204;
  static ContentShapeKinds.accessibility.getter();
  uint64_t v138 = v219;
  sub_10002C00C(v219);
  uint64_t v281 = v133;
  v282 = &type metadata for MorphingContainerMode;
  uint64_t v283 = v134;
  v284 = v135;
  uint64_t v139 = swift_getOpaqueTypeConformance2();
  uint64_t v140 = v171;
  uint64_t v141 = v176;
  View.contentShape<A>(_:_:eoFill:)();
  sub_10002D5A4((uint64_t)v138);
  (*(void (**)(char *, uint64_t))(v205 + 8))(v137, v206);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v132, v141);
  uint64_t v142 = sub_100013AA8(&qword_100519A18, &qword_1005199A0);
  uint64_t v240 = v139;
  uint64_t v241 = v142;
  uint64_t v143 = v182;
  uint64_t v144 = swift_getWitnessTable();
  uint64_t v145 = v180;
  sub_100224E4C(v140, v143, v144);
  uint64_t v146 = *(void (**)(char *, uint64_t))(v184 + 8);
  v146(v140, v143);
  sub_100224E4C(v145, v143, v144);
  return ((uint64_t (*)(char *, uint64_t))v146)(v145, v143);
}

uint64_t sub_100029868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v209 = a4;
  uint64_t v210 = a3;
  uint64_t v208 = a2;
  uint64_t v206 = a1;
  uint64_t v193 = a6;
  type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v148 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v147 = (char *)v142 - v8;
  sub_10000F69C((uint64_t *)&unk_10051D370);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v151 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v150 = (char *)v142 - v10;
  sub_10000F69C(&qword_100519918);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v160 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v158 = (char *)v142 - v12;
  sub_10000F69C(&qword_100519920);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v162 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v159 = (char *)v142 - v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v165 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v163 = (char *)v142 - v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v168 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v167 = (char *)v142 - v18;
  uint64_t v19 = sub_10002F7BC(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
  unint64_t v245 = a5;
  uint64_t v246 = v19;
  unint64_t v207 = a5;
  uint64_t v149 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  v142[1] = WitnessTable;
  uint64_t v243 = WitnessTable;
  uint64_t v244 = v21;
  uint64_t v152 = v9;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = sub_100013AA8(&qword_100519938, &qword_100519918);
  v142[2] = v22;
  uint64_t v241 = v22;
  uint64_t v242 = v23;
  uint64_t v161 = v11;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = sub_100013AA8(&qword_100519940, &qword_100519920);
  v142[3] = v24;
  uint64_t v239 = v24;
  uint64_t v240 = v25;
  uint64_t v164 = v13;
  uint64_t v143 = swift_getWitnessTable();
  uint64_t v237 = v143;
  uint64_t v238 = &protocol witness table for _FlexFrameLayout;
  uint64_t v166 = v15;
  uint64_t v146 = swift_getWitnessTable();
  uint64_t v235 = v146;
  uint64_t v236 = &protocol witness table for _SafeAreaIgnoringLayout;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v204 = v17;
  uint64_t v231 = v17;
  uint64_t v232 = (ValueMetadata *)v26;
  uint64_t v203 = (ValueMetadata *)v26;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v156 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v154 = (char *)v142 - v28;
  uint64_t v157 = v29;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v189 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v153 = (char *)v142 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v155 = (char *)v142 - v33;
  uint64_t v231 = v208;
  uint64_t v232 = v210;
  uint64_t v34 = v209;
  uint64_t v233 = v209;
  unint64_t v234 = a5;
  uint64_t v35 = type metadata accessor for MorphingContainer();
  uint64_t v194 = *(void *)(v35 - 8);
  uint64_t v195 = v35;
  __chkstk_darwin(v35);
  uint64_t v144 = v36;
  uint64_t v145 = (char *)v142 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v187 = (char *)v142 - v38;
  uint64_t v192 = v30;
  uint64_t v39 = type metadata accessor for Optional();
  uint64_t v190 = *(void *)(v39 - 8);
  uint64_t v191 = v39;
  __chkstk_darwin(v39);
  uint64_t v202 = (char *)v142 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v201 = (uint64_t)v142 - v42;
  sub_10000F69C(&qword_100518C50);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100523150);
  uint64_t v43 = type metadata accessor for ModifiedContent();
  uint64_t v44 = sub_100013AA8(&qword_100518C48, &qword_100518C50);
  v230[19] = v34;
  v230[20] = v44;
  uint64_t v198 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = sub_100013AA8(&qword_100518C20, &qword_100523150);
  v230[17] = v45;
  v230[18] = v46;
  uint64_t v47 = swift_getWitnessTable();
  unint64_t v48 = sub_10002D4E4();
  uint64_t v231 = v43;
  uint64_t v232 = &type metadata for PillLabelStyle;
  uint64_t v233 = v47;
  unint64_t v234 = v48;
  swift_getOpaqueTypeMetadata2();
  uint64_t v171 = type metadata accessor for ModifiedContent();
  uint64_t v49 = type metadata accessor for Group();
  uint64_t v185 = *(void **)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v183 = (char *)v142 - v50;
  uint64_t v173 = v49;
  uint64_t v51 = type metadata accessor for ModifiedContent();
  uint64_t v184 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v182 = (char *)v142 - v52;
  uint64_t v178 = v51;
  uint64_t v197 = (void *)type metadata accessor for ModifiedContent();
  uint64_t v186 = (void (*)(char *, uint64_t, uint64_t))*(v197 - 1);
  __chkstk_darwin(v197);
  uint64_t v181 = (char *)v142 - v53;
  type metadata accessor for PlaceholderContentView();
  type metadata accessor for ModifiedContent();
  uint64_t v196 = type metadata accessor for ModifiedContent();
  uint64_t v231 = v43;
  uint64_t v232 = &type metadata for PillLabelStyle;
  uint64_t v233 = v47;
  unint64_t v234 = v48;
  v230[15] = swift_getOpaqueTypeConformance2();
  v230[16] = &protocol witness table for _OpacityEffect;
  v230[14] = swift_getWitnessTable();
  uint64_t v172 = swift_getWitnessTable();
  v230[12] = v172;
  v230[13] = &protocol witness table for _PaddingLayout;
  uint64_t v177 = swift_getWitnessTable();
  v230[10] = v177;
  v230[11] = &protocol witness table for _PaddingLayout;
  uint64_t v54 = v197;
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v176 = v55;
  v230[8] = swift_getWitnessTable();
  v230[9] = &protocol witness table for _BlurEffect;
  v230[6] = swift_getWitnessTable();
  v230[7] = &protocol witness table for _ScaleEffect;
  uint64_t v56 = (ValueMetadata *)v196;
  uint64_t v175 = swift_getWitnessTable();
  uint64_t v231 = (uint64_t)v54;
  uint64_t v232 = v56;
  uint64_t v233 = v55;
  unint64_t v234 = v175;
  uint64_t v179 = &opaque type descriptor for <<opaque return type of View.animation<A>(_:body:)>>;
  uint64_t v174 = swift_getOpaqueTypeMetadata2();
  uint64_t v180 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v170 = (char *)v142 - v57;
  type metadata accessor for AccessibilityAttachmentModifier();
  uint64_t v58 = type metadata accessor for ModifiedContent();
  uint64_t v199 = *(void *)(v58 - 8);
  uint64_t v200 = v58;
  __chkstk_darwin(v58);
  v188 = (char *)v142 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  uint64_t v169 = (char *)v142 - v61;
  __chkstk_darwin(v62);
  uint64_t v205 = (char *)v142 - v63;
  uint64_t v64 = v208;
  uint64_t v216 = v208;
  uint64_t v65 = v210;
  uint64_t v217 = v210;
  uint64_t v66 = v209;
  uint64_t v218 = v209;
  unint64_t v67 = v207;
  unint64_t v219 = v207;
  uint64_t v68 = v206;
  uint64_t v220 = v206;
  uint64_t v69 = v183;
  Group<A>.init(content:)();
  static Edge.Set.horizontal.getter();
  uint64_t v70 = v182;
  uint64_t v71 = v173;
  View.padding(_:_:)();
  ((void (*)(char *, uint64_t))v185[1])(v69, v71);
  static Edge.Set.vertical.getter();
  uint64_t v72 = v181;
  uint64_t v73 = v178;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v184 + 8))(v70, v73);
  static Animation.easeInOut.getter();
  uint64_t v211 = v64;
  v212 = v65;
  uint64_t v213 = v66;
  unint64_t v214 = v67;
  uint64_t v215 = v68;
  uint64_t v74 = swift_checkMetadataState();
  uint64_t v75 = v170;
  uint64_t v76 = v197;
  uint64_t v78 = v175;
  uint64_t v77 = v176;
  View.animation<A>(_:body:)();
  swift_release();
  (*((void (**)(char *, void *))v186 + 1))(v72, v76);
  uint64_t v231 = (uint64_t)v76;
  uint64_t v232 = (ValueMetadata *)v74;
  uint64_t v233 = v77;
  unint64_t v234 = v78;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v80 = v169;
  uint64_t v81 = v174;
  View.accessibilityHidden(_:isEnabled:)();
  uint64_t v82 = v194;
  (*(void (**)(char *, uint64_t))(v180 + 8))(v75, v81);
  uint64_t v83 = sub_10002F7BC((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
  v230[4] = OpaqueTypeConformance2;
  v230[5] = v83;
  uint64_t v84 = v200;
  uint64_t v196 = swift_getWitnessTable();
  sub_100224E4C(v80, v84, v196);
  uint64_t v85 = v80;
  uint64_t v86 = v195;
  uint64_t v87 = v187;
  uint64_t v197 = *(void **)(v199 + 8);
  uint64_t v198 = (void *)(v199 + 8);
  ((void (*)(char *, uint64_t))v197)(v85, v84);
  uint64_t v88 = v68;
  LODWORD(v84) = *(unsigned __int8 *)(v68 + 3);
  uint64_t v89 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
  v89(v87, v88, v86);
  if (v84 == 2)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v87, v86);
  }
  else
  {
    int v90 = v87[3];
    (*(void (**)(char *, uint64_t))(v82 + 8))(v87, v86);
    if (v90 != 3)
    {
      uint64_t v132 = (uint64_t)v202;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v202, 1, 1, v192);
      uint64_t v231 = v204;
      uint64_t v232 = v203;
      v230[2] = swift_getOpaqueTypeConformance2();
      v230[3] = &protocol witness table for _AppearanceActionModifier;
      swift_getWitnessTable();
      sub_100059E30(v132, v201);
      uint64_t v129 = v190;
      uint64_t v130 = *(ValueMetadata **)(v190 + 8);
      uint64_t v131 = v132;
      goto LABEL_9;
    }
  }
  uint64_t v186 = v89;
  uint64_t v187 = (char *)(v82 + 16);
  uint64_t v91 = static Edge.Set.all.getter();
  uint64_t v92 = v147;
  sub_100027B84(v91, 0x4020000000000000, 0);
  static AnyTransition.blur(radius:)();
  sub_10002E634();
  AnyTransition.init<A>(_:)();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  static AnyTransition.opacity.getter();
  AnyTransition.combined(with:)();
  swift_release();
  swift_release();
  uint64_t v93 = v149;
  uint64_t v94 = v150;
  View.transition(_:)();
  swift_release();
  uint64_t v95 = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v92, v93);
  uint64_t v185 = v142;
  __chkstk_darwin(v95);
  static Alignment.center.getter();
  sub_10000F214(&qword_100519A38);
  sub_10002E698(&qword_100519A40, &qword_100519A38, (void (*)(void))sub_10002E718);
  uint64_t v96 = v158;
  uint64_t v97 = v152;
  View.background<A>(alignment:content:)();
  uint64_t v98 = (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v94, v97);
  __chkstk_darwin(v98);
  uint64_t v99 = v206;
  static Alignment.center.getter();
  sub_10000F214(&qword_100519A58);
  uint64_t v100 = sub_10000F69C(&qword_100519A60);
  unint64_t v101 = sub_10002E7F4();
  uint64_t v231 = v100;
  uint64_t v232 = (ValueMetadata *)v101;
  swift_getOpaqueTypeConformance2();
  uint64_t v102 = v159;
  uint64_t v103 = v161;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v96, v103);
  uint64_t v104 = v99;
  static Alignment.center.getter();
  uint64_t v105 = v164;
  uint64_t v106 = v163;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v162 + 8))(v102, v105);
  if (*(unsigned char *)(v104 + 3) == 3) {
    static Edge.Set.all.getter();
  }
  else {
    Edge.Set.init(rawValue:)();
  }
  uint64_t v107 = v166;
  uint64_t v108 = v167;
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v165 + 8))(v106, v107);
  uint64_t v109 = v195;
  uint64_t v110 = v206;
  sub_10000F214(&qword_100519A10);
  AccessibilityFocusState.projectedValue.getter();
  uint64_t v111 = v154;
  uint64_t v112 = v204;
  uint64_t v113 = v203;
  View.accessibilityFocused(_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v168 + 8))(v108, v112);
  uint64_t v114 = v145;
  v186(v145, v110, v109);
  uint64_t v115 = v194;
  unint64_t v116 = (*(unsigned __int8 *)(v194 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
  uint64_t v117 = (char *)swift_allocObject();
  uint64_t v118 = v210;
  *((void *)v117 + 2) = v208;
  *((void *)v117 + 3) = v118;
  unint64_t v119 = v207;
  *((void *)v117 + 4) = v209;
  *((void *)v117 + 5) = v119;
  (*(void (**)(char *, char *, uint64_t))(v115 + 32))(&v117[v116], v114, v109);
  uint64_t v231 = v112;
  uint64_t v232 = v113;
  uint64_t v120 = swift_getOpaqueTypeConformance2();
  uint64_t v121 = v153;
  uint64_t v122 = v157;
  View.onAppear(perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v111, v122);
  uint64_t v221 = v120;
  v222 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v123 = v192;
  uint64_t v124 = swift_getWitnessTable();
  uint64_t v125 = v155;
  sub_100224E4C(v121, v123, v124);
  uint64_t v126 = v189;
  uint64_t v127 = *(void (**)(char *, uint64_t))(v189 + 8);
  v127(v121, v123);
  uint64_t v128 = (uint64_t)v202;
  sub_100224E4C(v125, v123, v124);
  v127(v125, v123);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v128, 0, 1, v123);
  sub_100059E30(v128, v201);
  uint64_t v129 = v190;
  uint64_t v130 = *(ValueMetadata **)(v190 + 8);
  uint64_t v131 = v128;
LABEL_9:
  uint64_t v133 = v191;
  uint64_t v210 = v130;
  ((void (*)(uint64_t, uint64_t))v130)(v131, v191);
  uint64_t v134 = v200;
  uint64_t v135 = v188;
  (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v188, v205, v200);
  uint64_t v231 = (uint64_t)v135;
  uint64_t v137 = v201;
  uint64_t v136 = (ValueMetadata *)v202;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v202, v201, v133);
  uint64_t v232 = v136;
  v230[0] = v134;
  v230[1] = v133;
  uint64_t v228 = v196;
  uint64_t v226 = v204;
  uint64_t v227 = v203;
  uint64_t v224 = swift_getOpaqueTypeConformance2();
  uint64_t v225 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v223 = swift_getWitnessTable();
  uint64_t v229 = swift_getWitnessTable();
  sub_100059B74((uint64_t)&v231, 2uLL, (uint64_t)v230);
  uint64_t v138 = v137;
  uint64_t v139 = v210;
  ((void (*)(uint64_t, uint64_t))v210)(v138, v133);
  uint64_t v140 = (uint64_t (*)(char *, uint64_t))v197;
  ((void (*)(char *, uint64_t))v197)(v205, v134);
  ((void (*)(ValueMetadata *, uint64_t))v139)(v136, v133);
  return v140(v135, v134);
}

uint64_t sub_10002B094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v43 = a5;
  uint64_t v41 = a3;
  v36[0] = a1;
  uint64_t v51 = a6;
  sub_10000F69C(&qword_100518C50);
  uint64_t v8 = a2;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v46 = (char *)v36 - v10;
  sub_10000F69C(&qword_100523150);
  uint64_t v40 = v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v47 = (char *)v36 - v12;
  uint64_t v13 = sub_100013AA8(&qword_100518C48, &qword_100518C50);
  uint64_t v60 = a4;
  uint64_t v61 = v13;
  unint64_t v48 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  v36[1] = WitnessTable;
  uint64_t v15 = sub_100013AA8(&qword_100518C20, &qword_100523150);
  uint64_t v58 = WitnessTable;
  uint64_t v59 = v15;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v38 = v16;
  unint64_t v37 = sub_10002D4E4();
  uint64_t v54 = v11;
  uint64_t v55 = &type metadata for PillLabelStyle;
  uint64_t v56 = v16;
  unint64_t v57 = v37;
  uint64_t v42 = &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v44 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v18 = (char *)v36 - v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v36 - v23;
  uint64_t v54 = v8;
  uint64_t v55 = v41;
  uint64_t v56 = a4;
  unint64_t v57 = v43;
  type metadata accessor for MorphingContainer();
  id v25 = [self systemDarkGrayColor];
  uint64_t v54 = Color.init(uiColor:)();
  uint64_t v26 = v46;
  View.foregroundStyle<A>(_:)();
  swift_release();
  static Font.body.getter();
  static Font.Weight.medium.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v27 = v47;
  uint64_t v28 = v40;
  View.font(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v28);
  uint64_t v29 = v38;
  unint64_t v30 = v37;
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v11);
  uint64_t v54 = v11;
  uint64_t v55 = &type metadata for PillLabelStyle;
  uint64_t v56 = v29;
  unint64_t v57 = v30;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v32 = OpaqueTypeMetadata2;
  View.opacity(_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v32);
  uint64_t v52 = OpaqueTypeConformance2;
  uint64_t v53 = &protocol witness table for _OpacityEffect;
  uint64_t v33 = swift_getWitnessTable();
  sub_100224E4C(v21, v19, v33);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v45 + 8);
  v34(v21, v19);
  sub_100224E4C(v24, v19, v33);
  return ((uint64_t (*)(char *, uint64_t))v34)(v24, v19);
}

uint64_t sub_10002B660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  v21[1] = a1;
  v21[2] = a3;
  sub_10000F69C(&qword_100518C50);
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_100523150);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  v21[13] = a2;
  v21[14] = sub_100013AA8(&qword_100518C48, &qword_100518C50);
  v21[0] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  v21[11] = swift_getWitnessTable();
  v21[12] = sub_100013AA8(&qword_100518C20, &qword_100523150);
  v21[7] = v4;
  v21[8] = &type metadata for PillLabelStyle;
  v21[9] = swift_getWitnessTable();
  v21[10] = sub_10002D4E4();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PlaceholderContentView();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v21 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v21 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.blur(radius:opaque:)();
  static UnitPoint.center.getter();
  v21[5] = WitnessTable;
  v21[6] = &protocol witness table for _BlurEffect;
  uint64_t v17 = swift_getWitnessTable();
  View.scaleEffect(_:anchor:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21[3] = v17;
  v21[4] = &protocol witness table for _ScaleEffect;
  uint64_t v18 = swift_getWitnessTable();
  sub_100224E4C(v12, v9, v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  sub_100224E4C(v15, v9, v18);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

_UNKNOWN **sub_10002BA84@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ColorScheme();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v22 - v15;
  v22[0] = a1;
  v22[1] = a2;
  v22[2] = a3;
  v22[3] = a4;
  type metadata accessor for MorphingContainer();
  sub_10027CA80((uint64_t)v16);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for ColorScheme.dark(_:), v10);
  char v17 = static ColorScheme.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  v18(v16, v10);
  uint64_t result = sub_10002BC4C();
  double v20 = 0.55;
  if (v17) {
    double v20 = 0.3;
  }
  double v21 = 0.6;
  *(void *)a5 = result;
  if ((v17 & 1) == 0) {
    double v21 = 1.0;
  }
  *(double *)(a5 + 8) = v21;
  *(double *)(a5 + 16) = v20;
  *(unsigned char *)(a5 + 24) = 0;
  return result;
}

_UNKNOWN **sub_10002BC4C()
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (*(unsigned char *)(v0 + 2) == 1)
  {
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
    if (v3) {
      return &off_1004E4C58;
    }
  }
  return (_UNKNOWN **)v1;
}

uint64_t sub_10002BCCC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v34 = a5;
  uint64_t v33 = type metadata accessor for ColorRenderingMode();
  uint64_t v9 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (__n128 *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000F214(&qword_100519A78);
  __chkstk_darwin(v15 - 8);
  char v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_100519A60);
  __chkstk_darwin(v18);
  double v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v35 = a1;
  *((void *)&v35 + 1) = a2;
  *(void *)&long long v36 = a3;
  *((void *)&v36 + 1) = a4;
  type metadata accessor for MorphingContainer();
  sub_10002C00C(v14);
  static Color.white.getter();
  uint64_t v21 = Color.opacity(_:)();
  swift_release();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  sub_10002DFC8((uint64_t)v14, (uint64_t)v17);
  uint64_t v22 = &v17[*(int *)(sub_10000F214(&qword_100519A80) + 36)];
  long long v23 = v36;
  *(_OWORD *)uint64_t v22 = v35;
  *((_OWORD *)v22 + 1) = v23;
  *((void *)v22 + 4) = v37;
  uint64_t v24 = sub_10000F214(&qword_100519A88);
  *(void *)&v17[*(int *)(v24 + 52)] = v21;
  *(_WORD *)&v17[*(int *)(v24 + 56)] = 256;
  uint64_t v25 = static Alignment.center.getter();
  uint64_t v27 = v26;
  uint64_t v28 = (uint64_t *)&v17[*(int *)(sub_10000F214(&qword_100519A90) + 36)];
  *uint64_t v28 = v25;
  v28[1] = v27;
  sub_10002D5A4((uint64_t)v14);
  sub_10000FB74((uint64_t)v17, (uint64_t)v20, &qword_100519A78);
  uint64_t v29 = &v20[*(int *)(v18 + 36)];
  *(void *)uint64_t v29 = 0x4000000000000000;
  v29[8] = 0;
  sub_10000FBD8((uint64_t)v17, &qword_100519A78);
  sub_10002E7F4();
  uint64_t v30 = v33;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ColorRenderingMode.nonLinear(_:), v33);
  View.drawingGroup(opaque:colorMode:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);
  return sub_10000FBD8((uint64_t)v20, &qword_100519A60);
}

__n128 sub_10002C00C@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v3 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v4 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104))(v2, v3, v4);
  __asm { FMOV            V0.2D, #28.0 }
  *a1 = result;
  return result;
}

uint64_t sub_10002C094@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ColorRenderingMode.nonLinear(_:);
  uint64_t v3 = type metadata accessor for ColorRenderingMode();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10002C108(uint64_t a1, void **a2, uint64_t a3, uint64_t (*a4)(uint64_t a1), void *a5)
{
  long long v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v39 = a1;
  uint64_t v43 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = a2;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v13 = type metadata accessor for MorphingContainer();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = type metadata accessor for DispatchTime();
  uint64_t v41 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  double v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  long long v23 = (char *)&v33 - v22;
  sub_10002E8B0();
  uint64_t v38 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v18 + 8);
  v40(v20, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v39, v13);
  unint64_t v24 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = (char *)swift_allocObject();
  uint64_t v26 = v35;
  *((void *)v25 + 2) = v34;
  *((void *)v25 + 3) = v26;
  uint64_t v27 = v37;
  *((void *)v25 + 4) = v36;
  *((void *)v25 + 5) = v27;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v25[v24], v16, v13);
  uint64_t v52 = sub_10002EB54;
  uint64_t v53 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_1002EDB98;
  uint64_t v51 = &unk_1004E7138;
  uint64_t v28 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_10002F7BC((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = (void *)v38;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
  v40(v23, v41);
  return swift_release();
}

uint64_t sub_10002C5BC()
{
  return AccessibilityFocusState.wrappedValue.setter();
}

uint64_t sub_10002C620@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = type metadata accessor for MorphingContainer();
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!a1[3])
  {
    if (*a1)
    {
      uint64_t v5 = &off_1004E4C80;
    }
    else if (a1[1])
    {
      uint64_t v5 = &off_1004E4CA8;
    }
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = 0x3FD999999999999ALL;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

_UNKNOWN **sub_10002C6AC()
{
  uint64_t result = (_UNKNOWN **)&_swiftEmptyArrayStorage;
  if (!v0[3])
  {
    if (*v0)
    {
      return &off_1004E4C80;
    }
    else if (v0[1])
    {
      return &off_1004E4CA8;
    }
  }
  return result;
}

uint64_t sub_10002C6EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v43 = a5;
  uint64_t v42 = sub_10000F214(&qword_100519008) - 8;
  __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v9 - 8);
  uint64_t v40 = (__n128 *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for ColorScheme();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = sub_10000F214(&qword_1005199E8);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (double *)((char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v46 = v39;
  uint64_t v47 = a4;
  uint64_t v22 = type metadata accessor for MorphingContainer();
  long long v23 = sub_10002CA60(v22);
  sub_10027CA80((uint64_t)v17);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for ColorScheme.light(_:), v11);
  LOBYTE(a1) = static ColorScheme.== infix(_:_:)();
  unint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v14, v11);
  v24(v17, v11);
  if (a1) {
    double v25 = 1.0;
  }
  else {
    double v25 = 0.3;
  }
  char v26 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v40;
  sub_10002C00C(v40);
  uint64_t v36 = v41;
  sub_10002DFC8((uint64_t)v35, v41);
  *(_WORD *)(v36 + *(int *)(v42 + 44)) = 256;
  sub_10000FB74(v36, (uint64_t)v21 + *(int *)(v19 + 44), &qword_100519008);
  *(void *)uint64_t v21 = v23;
  v21[1] = v25;
  *((unsigned char *)v21 + 16) = 0;
  *((unsigned char *)v21 + 24) = v26;
  *((void *)v21 + 4) = v28;
  *((void *)v21 + 5) = v30;
  *((void *)v21 + 6) = v32;
  *((void *)v21 + 7) = v34;
  *((unsigned char *)v21 + 64) = 0;
  swift_bridgeObjectRetain();
  sub_10000FBD8(v36, &qword_100519008);
  sub_10002D5A4((uint64_t)v35);
  swift_bridgeObjectRelease();
  return sub_10000FC34((uint64_t)v21, v43, &qword_1005199E8);
}

void *sub_10002CA60(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  double v4 = __chkstk_darwin(a1);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v1[3])
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    if (v1[2] == 1)
    {
      uint64_t v8 = &v1[*(int *)(a1 + 76)];
      unsigned __int8 v9 = *v8;
      uint64_t v10 = *((void *)v8 + 1);
      unsigned char v14[8] = v9;
      uint64_t v15 = v10;
      sub_10000F214(&qword_100522EA0);
      State.wrappedValue.getter();
      if (v16) {
        return &off_1004E4CF8;
      }
    }
  }
  else
  {
    int v11 = *v1;
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, double))(v3 + 16))(v6, v1, a1, v4);
    if (v11 == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, a1);
      return &off_1004E4CD0;
    }
    else
    {
      int v12 = v6[1];
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, a1);
      if (v12) {
        return &off_1004E4CD0;
      }
      else {
        return _swiftEmptyArrayStorage;
      }
    }
  }
  return v7;
}

uint64_t sub_10002CBF0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10002CC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a7;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v11 = type metadata accessor for MorphingContainer();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  type metadata accessor for MainActor();
  uint64_t v19 = static MainActor.shared.getter();
  unint64_t v20 = (*(unsigned __int8 *)(v12 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v19;
  *((void *)v21 + 3) = &protocol witness table for MainActor;
  *((void *)v21 + 4) = a4;
  *((void *)v21 + 5) = a5;
  uint64_t v22 = v25;
  *((void *)v21 + 6) = a6;
  *((void *)v21 + 7) = v22;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v21[v20], v14, v11);
  sub_100064D5C((uint64_t)v17, (uint64_t)&unk_100519A28, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_10002CE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = type metadata accessor for ContinuousClock();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v8[10] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[11] = v11;
  v8[12] = v10;
  return _swift_task_switch(sub_10002CF78, v11, v10);
}

uint64_t sub_10002CF78()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v8 = *(_OWORD *)(v0 + 40);
  long long v9 = *(_OWORD *)(v0 + 24);
  static Animation.linear(duration:)();
  uint64_t v2 = swift_task_alloc();
  *(_OWORD *)(v2 + 16) = v9;
  *(_OWORD *)(v2 + 32) = v8;
  *(void *)(v2 + 48) = v1;
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = static Duration.seconds(_:)();
  uint64_t v5 = v4;
  ContinuousClock.init()();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1005282F0 + dword_1005282F0);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10002D0E0;
  return v10(v3, v5, 0, 0, 1);
}

uint64_t sub_10002D0E0()
{
  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[9];
  uint64_t v4 = v2[8];
  uint64_t v5 = v2[7];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = v2[11];
    uint64_t v7 = v2[12];
    long long v8 = sub_10002D368;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = v2[11];
    uint64_t v7 = v2[12];
    long long v8 = sub_10002D278;
  }
  return _swift_task_switch(v8, v6, v7);
}

uint64_t sub_10002D278()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 40);
  long long v6 = *(_OWORD *)(v0 + 24);
  swift_release();
  static Animation.linear(duration:)();
  uint64_t v2 = swift_task_alloc();
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v5;
  *(void *)(v2 + 48) = v1;
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10002D368()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 40);
  long long v6 = *(_OWORD *)(v0 + 24);
  swift_release();
  static Animation.linear(duration:)();
  uint64_t v2 = swift_task_alloc();
  *(_OWORD *)(v2 + 16) = v6;
  *(_OWORD *)(v2 + 32) = v5;
  *(void *)(v2 + 48) = v1;
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10002D458()
{
  return State.wrappedValue.setter();
}

unint64_t sub_10002D4E4()
{
  unint64_t result = qword_100519910;
  if (!qword_100519910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519910);
  }
  return result;
}

unint64_t sub_10002D538()
{
  unint64_t result = qword_100519998;
  if (!qword_100519998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519998);
  }
  return result;
}

uint64_t sub_10002D58C()
{
  return sub_10002E7DC((uint64_t (*)(void, void, void, void, void))sub_100029868);
}

uint64_t sub_10002D5A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002D600@<X0>(uint64_t a1@<X8>)
{
  return sub_10002C620(*(unsigned char **)(v1 + 48), a1);
}

uint64_t sub_10002D610()
{
  return sub_10002E748(&qword_1005199C8, &qword_1005199D0, (void (*)(void))sub_10002D640);
}

unint64_t sub_10002D640()
{
  unint64_t result = qword_1005199D8;
  if (!qword_1005199D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005199D8);
  }
  return result;
}

unint64_t sub_10002D694()
{
  unint64_t result = qword_1005199E0;
  if (!qword_1005199E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005199E0);
  }
  return result;
}

uint64_t sub_10002D6E8()
{
  return sub_10002E7DC((uint64_t (*)(void, void, void, void, void))sub_10002C6EC);
}

unint64_t sub_10002D700()
{
  unint64_t result = qword_1005199F0;
  if (!qword_1005199F0)
  {
    sub_10000F69C(&qword_1005199E8);
    sub_10002D7A0();
    sub_100013AA8(&qword_100519040, &qword_100519008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005199F0);
  }
  return result;
}

unint64_t sub_10002D7A0()
{
  unint64_t result = qword_1005199F8;
  if (!qword_1005199F8)
  {
    sub_10000F69C(&qword_100519A00);
    sub_10002E698(&qword_1005199C0, &qword_1005199B8, (void (*)(void))sub_10002D610);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1005199F8);
  }
  return result;
}

uint64_t sub_10002D840@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  v31[1] = a1;
  uint64_t v35 = a2;
  uint64_t v34 = type metadata accessor for LabelStyleConfiguration.Title();
  uint64_t v37 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)v31 - v4;
  uint64_t v32 = type metadata accessor for SymbolVariants();
  uint64_t v5 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LabelStyleConfiguration.Icon();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_100519AA0);
  uint64_t v13 = *(void **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v31 - v17;
  LabelStyleConfiguration.icon.getter();
  static SymbolVariants.fill.getter();
  sub_10002F7BC(&qword_100519AA8, (void (*)(uint64_t))&type metadata accessor for LabelStyleConfiguration.Icon);
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v32);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v19 = (void (*)(char *, char *, uint64_t))v13[4];
  v31[0] = v18;
  v19(v18, v15, v12);
  unint64_t v20 = v36;
  LabelStyleConfiguration.title.getter();
  uint64_t v21 = (void (*)(char *, char *, uint64_t))v13[2];
  v21(v15, v18, v12);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  long long v23 = v33;
  uint64_t v24 = v20;
  uint64_t v25 = v34;
  v22(v33, v24, v34);
  uint64_t v26 = v35;
  v21(v35, v15, v12);
  uint64_t v27 = sub_10000F214(&qword_100519AB0);
  v22(&v26[*(int *)(v27 + 48)], v23, v25);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v37 + 8);
  v28(v36, v25);
  uint64_t v29 = (uint64_t (*)(char *, uint64_t))v13[1];
  v29((char *)v31[0], v12);
  v28(v23, v25);
  return v29(v15, v12);
}

uint64_t sub_10002DC64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = static VerticalAlignment.firstTextBaseline.getter();
  *(void *)(a2 + 8) = 0x4010000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v4 = sub_10000F214(&qword_100519A98);
  return sub_10002D840(a1, (char *)(a2 + *(int *)(v4 + 44)));
}

uint64_t sub_10002DCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10002F970();

  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10002DD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_10002F970();

  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_10002DDBC()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10002DDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long double v5 = sin(*v2 * 3.14159265) * 0.16;
  uint64_t v6 = sub_10000F214(&qword_100519AF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  uint64_t result = sub_10000F214(&qword_100519AF8);
  *(long double *)(a2 + *(int *)(result + 36)) = v5;
  return result;
}

double sub_10002DE80@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double sub_10002DE8C(double *a1)
{
  double result = *a1;
  void *v1 = *(void *)a1;
  return result;
}

uint64_t (*SendableTransfer.wrappedValue.modify())()
{
  return nullsub_2;
}

uint64_t sub_10002DEBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_100519AB8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (TransitionPhase.isIdentity.getter()) {
    double v8 = 1.0;
  }
  else {
    double v8 = 0.0;
  }
  uint64_t v9 = sub_10000F214(&qword_100519AC0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, a1, v9);
  *(double *)&v7[*(int *)(v5 + 44)] = v8;
  return sub_10000FC34((uint64_t)v7, a2, &qword_100519AB8);
}

uint64_t sub_10002DFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E030(uint64_t a1, uint64_t a2)
{
  return sub_10002E064(a1, a2, (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002CBF0);
}

uint64_t sub_10002E04C(uint64_t a1, uint64_t a2)
{
  return sub_10002E064(a1, a2, (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002CC68);
}

uint64_t sub_10002E064(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = *(void *)(type metadata accessor for MorphingContainer() - 8);
  uint64_t v11 = (char *)v3 + ((*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));

  return a3(a1, a2, v11, v6, v7, v8, v9);
}

uint64_t sub_10002E12C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  long long v10 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (int *)type metadata accessor for MorphingContainer();
  unint64_t v3 = (*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + v2[16], v1);
  (*(void (**)(unint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3 + v2[17]);
  unint64_t v4 = v0 + v3 + v2[18];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v3 + v2[21];
  uint64_t v7 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_10002E394(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  v2[2] = v4;
  v2[3] = v5;
  v2[4] = v6;
  v2[5] = v7;
  uint64_t v8 = *(void *)(type metadata accessor for MorphingContainer() - 8);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = (uint64_t)v1 + ((*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  unint64_t v12 = (void *)swift_task_alloc();
  v2[6] = v12;
  *unint64_t v12 = v2;
  v12[1] = sub_10002E4B8;
  return sub_10002CE7C(a1, v9, v10, v11, v4, v5, v6, v7);
}

uint64_t sub_10002E4B8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10002E5AC()
{
  return sub_10002E5E4();
}

uint64_t sub_10002E5C8()
{
  return sub_10002E5E4();
}

uint64_t sub_10002E5E4()
{
  return sub_10002D458();
}

uint64_t sub_10002E60C()
{
  return sub_10002E7DC((uint64_t (*)(void, void, void, void, void))sub_10002B094);
}

uint64_t sub_10002E624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002B660(a1, *(void *)(v2 + 32), a2);
}

unint64_t sub_10002E634()
{
  unint64_t result = qword_100519A30;
  if (!qword_100519A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519A30);
  }
  return result;
}

_UNKNOWN **sub_10002E688@<X0>(uint64_t a1@<X8>)
{
  return sub_10002BA84(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10002E698(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    sub_10002D694();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002E718()
{
  return sub_10002E748(&qword_100519A48, &qword_100519A50, (void (*)(void))sub_10002D610);
}

uint64_t sub_10002E748(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002E7C4()
{
  return sub_10002E7DC((uint64_t (*)(void, void, void, void, void))sub_10002BCCC);
}

uint64_t sub_10002E7DC(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_10002E7F4()
{
  unint64_t result = qword_100519A68;
  if (!qword_100519A68)
  {
    sub_10000F69C(&qword_100519A60);
    sub_100013AA8(&qword_100519A70, &qword_100519A78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519A68);
  }
  return result;
}

uint64_t sub_10002E898()
{
  return sub_10002EB6C((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002C108);
}

unint64_t sub_10002E8B0()
{
  unint64_t result = qword_10051A950;
  if (!qword_10051A950)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10051A950);
  }
  return result;
}

uint64_t sub_10002E8F4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v10 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (int *)type metadata accessor for MorphingContainer();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[16], v1);
  (*(void (**)(uint64_t))(*(void *)(v10 - 8) + 8))(v3 + v2[17]);
  uint64_t v4 = v3 + v2[18];
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v6 = v3 + v2[21];
  uint64_t v7 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  sub_10000F214(&qword_100519A10);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_10002EB54()
{
  return sub_10002EB6C((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002C5BC);
}

uint64_t sub_10002EB6C(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for MorphingContainer() - 8);
  uint64_t v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t sub_10002EC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002EC2C()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for BrightnessTransition()
{
  return &type metadata for BrightnessTransition;
}

ValueMetadata *type metadata accessor for PillLabelStyle()
{
  return &type metadata for PillLabelStyle;
}

uint64_t getEnumTagSinglePayload for MorphingContainerMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MorphingContainerMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002EDB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MorphingContainerMode()
{
  return &type metadata for MorphingContainerMode;
}

uint64_t sub_10002EDE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_10002F784()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002F7A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002F7BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BrightnessTransition.Modifier()
{
  return &type metadata for BrightnessTransition.Modifier;
}

uint64_t sub_10002F814()
{
  return sub_100013AA8(&qword_100519AC8, &qword_100519AD0);
}

unint64_t sub_10002F854()
{
  unint64_t result = qword_100519AD8;
  if (!qword_100519AD8)
  {
    sub_10000F69C(&qword_100519AB8);
    sub_100013AA8(&qword_100519AE0, &qword_100519AC0);
    sub_10002F8F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519AD8);
  }
  return result;
}

unint64_t sub_10002F8F4()
{
  unint64_t result = qword_100519AE8;
  if (!qword_100519AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519AE8);
  }
  return result;
}

void *sub_10002F948()
{
  return &protocol witness table for Double;
}

uint64_t sub_10002F954()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10002F970()
{
  unint64_t result = qword_100519B00;
  if (!qword_100519B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519B00);
  }
  return result;
}

unint64_t sub_10002F9C8()
{
  unint64_t result = qword_100519B08;
  if (!qword_100519B08)
  {
    sub_10000F69C(&qword_100519AF8);
    sub_100013AA8(&qword_100519B10, &qword_100519AF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519B08);
  }
  return result;
}

uint64_t *sub_10002FA68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    unint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10002FBA8(uint64_t a1)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10002FC5C(void *a1, void *a2, uint64_t a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  unint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *unint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10002FD4C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  unint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10002FE7C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *sub_10002FF58(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100030070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100030084);
}

uint64_t sub_100030084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10003014C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030160);
}

uint64_t sub_100030160(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for EmptyResultsView()
{
  uint64_t result = qword_100519B90;
  if (!qword_100519B90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100030270()
{
  sub_100027A88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100030310()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10003032C()
{
  double result = 12.0;
  xmmword_100519B18 = xmmword_10043D870;
  *(_OWORD *)&qword_100519B28 = xmmword_10043D870;
  return result;
}

uint64_t sub_100030344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v85 = type metadata accessor for ColorScheme();
  uint64_t v82 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v79 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v76 - v5;
  uint64_t v6 = sub_10000F214(&qword_100519BE8);
  __chkstk_darwin(v6 - 8);
  uint64_t v78 = (uint64_t *)((char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = sub_10000F214(&qword_100519BF0);
  __chkstk_darwin(v77);
  uint64_t v83 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100519BF8);
  uint64_t v95 = *(void *)(v9 - 8);
  uint64_t v96 = v9;
  __chkstk_darwin(v9);
  uint64_t v81 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v80 = (uint64_t)&v76 - v12;
  uint64_t v13 = sub_10000F214(&qword_100519C00);
  __chkstk_darwin(v13 - 8);
  uint64_t v97 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v94 = (char *)&v76 - v16;
  uint64_t v17 = sub_10000F214(&qword_100519C08);
  uint64_t v91 = *(void *)(v17 - 8);
  uint64_t v92 = v17;
  __chkstk_darwin(v17);
  uint64_t v87 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_10000F214(&qword_100519C10);
  __chkstk_darwin(v89);
  int v90 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v99 = (uint64_t)&v76 - v21;
  uint64_t v88 = type metadata accessor for EmptyResultsView();
  uint64_t v22 = *(int *)(v88 + 20);
  uint64_t v93 = a1;
  long long v23 = (void *)(a1 + v22);
  uint64_t v24 = v23[1];
  *(void *)&long long v126 = *v23;
  *((void *)&v126 + 1) = v24;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v25 = Text.init<A>(_:)();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  static Font.title3.getter();
  uint64_t v30 = Text.font(_:)();
  uint64_t v32 = v31;
  char v34 = v33;
  uint64_t v36 = v35;
  swift_release();
  sub_100012FAC(v25, v27, v29);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v110 = v30;
  uint64_t v111 = v32;
  char v112 = v34 & 1;
  uint64_t v113 = v36;
  uint64_t v114 = KeyPath;
  char v115 = 0;
  static Alignment.leading.getter();
  sub_100224F40(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v126, 0.0, 1, 0.0, 1);
  sub_100012FAC(v30, v32, v34 & 1);
  swift_release();
  uint64_t v38 = v87;
  swift_bridgeObjectRelease();
  long long v122 = v132;
  long long v123 = v133;
  long long v124 = v134;
  long long v125 = v135[0];
  long long v118 = v128;
  long long v119 = v129;
  long long v120 = v130;
  long long v121 = v131;
  long long v116 = v126;
  long long v117 = v127;
  uint64_t v39 = swift_getKeyPath();
  long long v132 = v122;
  long long v133 = v123;
  long long v134 = v124;
  v135[0] = v125;
  long long v128 = v118;
  long long v129 = v119;
  long long v130 = v120;
  long long v131 = v121;
  long long v126 = v116;
  long long v127 = v117;
  *(void *)&v135[1] = v39;
  BYTE8(v135[1]) = 0;
  long long v108 = v124;
  v109[0] = v125;
  *(_OWORD *)((char *)v109 + 9) = *(_OWORD *)((char *)v135 + 9);
  long long v104 = v120;
  long long v105 = v121;
  long long v106 = v122;
  long long v107 = v123;
  long long v100 = v116;
  long long v101 = v117;
  long long v102 = v118;
  long long v103 = v119;
  sub_10000F214(&qword_100519C18);
  sub_1000317FC();
  View.smartDialogAnimatable()();
  sub_100031938((uint64_t)&v126);
  if (qword_100517D38 != -1) {
    swift_once();
  }
  long long v86 = xmmword_100519B18;
  uint64_t v40 = qword_100519B28;
  uint64_t v41 = unk_100519B30;
  char v42 = static Edge.Set.all.getter();
  uint64_t v44 = (uint64_t)v90;
  uint64_t v43 = v91;
  uint64_t v45 = v92;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, v38, v92);
  uint64_t v46 = v44 + *(int *)(v89 + 36);
  *(unsigned char *)uint64_t v46 = v42;
  *(_OWORD *)(v46 + 8) = v86;
  *(void *)(v46 + 24) = v40;
  *(void *)(v46 + 32) = v41;
  *(unsigned char *)(v46 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v45);
  uint64_t v47 = v99;
  sub_10000FC34(v44, v99, &qword_100519C10);
  uint64_t v48 = (uint64_t)v94;
  uint64_t v49 = (uint64_t *)(v93 + *(int *)(v88 + 24));
  unint64_t v50 = v49[1];
  uint64_t v51 = v96;
  if (!v50) {
    goto LABEL_12;
  }
  uint64_t v52 = *v49;
  uint64_t v53 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000) == 0) {
    uint64_t v53 = v52 & 0xFFFFFFFFFFFFLL;
  }
  if (v53)
  {
    if (qword_100517F58 != -1) {
      swift_once();
    }
    uint64_t v54 = 1;
    if (byte_10055E408 == 1)
    {
      uint64_t v55 = static HorizontalAlignment.leading.getter();
      uint64_t v56 = (uint64_t)v78;
      uint64_t *v78 = v55;
      *(void *)(v56 + 8) = 0x4010000000000000;
      *(unsigned char *)(v56 + 16) = 0;
      uint64_t v57 = sub_10000F214(&qword_100519C50);
      sub_100030C88(v52, v50, v56 + *(int *)(v57 + 44));
      char v58 = static Edge.Set.all.getter();
      uint64_t v59 = v83;
      sub_10000FB74(v56, v83, &qword_100519BE8);
      uint64_t v60 = v59 + *(int *)(v77 + 36);
      *(unsigned char *)uint64_t v60 = v58;
      *(_OWORD *)(v60 + 8) = 0u;
      *(_OWORD *)(v60 + 24) = 0u;
      *(unsigned char *)(v60 + 40) = 1;
      uint64_t v61 = v56;
      uint64_t v62 = v82;
      sub_10000FBD8(v61, &qword_100519BE8);
      sub_10027CA80((uint64_t)v84);
      uint64_t v63 = v79;
      uint64_t v64 = v85;
      (*(void (**)(char *, void, uint64_t))(v62 + 104))(v79, enum case for ColorScheme.light(_:), v85);
      char v65 = static ColorScheme.== infix(_:_:)();
      uint64_t v66 = *(void (**)(char *, uint64_t))(v62 + 8);
      v66(v63, v64);
      if (v65) {
        static Color.black.getter();
      }
      else {
        static Color.white.getter();
      }
      uint64_t v67 = Color.opacity(_:)();
      swift_release();
      v66(v84, v85);
      uint64_t v68 = v83;
      uint64_t v69 = v81;
      sub_10000FB74(v83, v81, &qword_100519BF0);
      uint64_t v70 = v69 + *(int *)(v51 + 36);
      *(void *)uint64_t v70 = v67;
      *(_WORD *)(v70 + 8) = 256;
      sub_10000FBD8(v68, &qword_100519BF0);
      uint64_t v71 = v80;
      sub_10000FC34(v69, v80, &qword_100519BF8);
      sub_10000FC34(v71, v48, &qword_100519BF8);
      uint64_t v54 = 0;
      uint64_t v47 = v99;
    }
  }
  else
  {
LABEL_12:
    uint64_t v54 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v48, v54, 1, v51);
  sub_10000FB74(v47, v44, &qword_100519C10);
  uint64_t v72 = v97;
  sub_10000FB74(v48, v97, &qword_100519C00);
  uint64_t v73 = v98;
  sub_10000FB74(v44, v98, &qword_100519C10);
  uint64_t v74 = sub_10000F214(&qword_100519C48);
  sub_10000FB74(v72, v73 + *(int *)(v74 + 48), &qword_100519C00);
  sub_10000FBD8(v48, &qword_100519C00);
  sub_10000FBD8(v47, &qword_100519C10);
  sub_10000FBD8(v72, &qword_100519C00);
  return sub_10000FBD8(v44, &qword_100519C10);
}

uint64_t sub_100030C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v84 = a1;
  *((void *)&v84 + 1) = a2;
  uint64_t v89 = a3;
  uint64_t v3 = sub_10000F214(&qword_100519C58);
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  __chkstk_darwin(v3);
  long long v86 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v85 = (char *)&v75 - v6;
  uint64_t v7 = sub_10000F214(&qword_100519C60);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_100519C68);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_10000F214(&qword_100519C70);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000F214(&qword_100519C78);
  __chkstk_darwin(v76);
  uint64_t v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100519C80);
  uint64_t v80 = *(void *)(v19 - 8);
  uint64_t v81 = v19;
  __chkstk_darwin(v19);
  uint64_t v77 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_100519C88);
  __chkstk_darwin(v79);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_100519C90);
  uint64_t v82 = *(void *)(v23 - 8);
  uint64_t v83 = v23;
  __chkstk_darwin(v23);
  uint64_t v78 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000F214(&qword_100519C98);
  __chkstk_darwin(v25 - 8);
  uint64_t v91 = (uint64_t)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v90 = (uint64_t)&v75 - v28;
  uint64_t v29 = enum case for Text.Case.uppercase(_:);
  uint64_t v30 = type metadata accessor for Text.Case();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v16, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v16, 0, 1, v30);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v16, (uint64_t)v13 + *(int *)(v11 + 36), &qword_100519C70);
  *uint64_t v13 = KeyPath;
  sub_10000FB74((uint64_t)v13, (uint64_t)&v18[*(int *)(v76 + 36)], &qword_100519C68);
  *(_OWORD *)uint64_t v18 = xmmword_10043D880;
  v18[16] = 0;
  *((void *)v18 + 3) = _swiftEmptyArrayStorage;
  sub_10000FBD8((uint64_t)v13, &qword_100519C68);
  sub_10000FBD8((uint64_t)v16, &qword_100519C70);
  uint64_t v33 = enum case for Font.Design.rounded(_:);
  uint64_t v34 = type metadata accessor for Font.Design();
  uint64_t v35 = *(void *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v9, v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v9, 0, 1, v34);
  sub_10003199C(&qword_100519CA0, &qword_100519C78, &qword_100519CA8, &qword_100519C68);
  uint64_t v36 = v77;
  View.fontDesign(_:)();
  sub_10000FBD8((uint64_t)v9, &qword_100519C60);
  sub_10000FBD8((uint64_t)v18, &qword_100519C78);
  static Font.caption.getter();
  static Font.Weight.semibold.getter();
  uint64_t v37 = Font.weight(_:)();
  swift_release();
  uint64_t v38 = swift_getKeyPath();
  uint64_t v40 = v80;
  uint64_t v39 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v22, v36, v81);
  uint64_t v41 = (uint64_t *)&v22[*(int *)(v79 + 36)];
  *uint64_t v41 = v38;
  v41[1] = v37;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v36, v39);
  sub_100031A40();
  char v42 = v78;
  View.smartDialogAnimatable()();
  sub_10000FBD8((uint64_t)v22, &qword_100519C88);
  uint64_t v43 = static Alignment.leading.getter();
  uint64_t v44 = v91;
  double v46 = sub_10022511C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v91, 0.0, 1, 0.0, 1, v43, v45);
  (*(void (**)(char *, uint64_t, double))(v82 + 8))(v42, v83, v46);
  sub_10000FC34(v44, v90, &qword_100519C98);
  v92[0] = v84;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v47 = Text.init<A>(_:)();
  uint64_t v49 = v48;
  LOBYTE(v13) = v50 & 1;
  static Font.subheadline.getter();
  uint64_t v51 = Text.font(_:)();
  uint64_t v53 = v52;
  LOBYTE(v11) = v54;
  swift_release();
  sub_100012FAC(v47, v49, (char)v13);
  swift_bridgeObjectRelease();
  id v55 = [self secondaryLabelColor];
  *(void *)&v92[0] = Color.init(uiColor:)();
  uint64_t v56 = Text.foregroundStyle<A>(_:)();
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  LOBYTE(v13) = v61 & 1;
  sub_100012FAC(v51, v53, v11 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v62 = swift_getKeyPath();
  uint64_t v95 = v56;
  uint64_t v96 = v58;
  char v97 = (char)v13;
  uint64_t v98 = v60;
  uint64_t v99 = v62;
  uint64_t v100 = 5;
  char v101 = 0;
  static Alignment.leading.getter();
  sub_100225178(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v92, 0.0, 1, 0.0, 1);
  sub_100012FAC(v56, v58, (char)v13);
  swift_release();
  swift_bridgeObjectRelease();
  v102[8] = v92[8];
  v102[9] = v92[9];
  v102[4] = v92[4];
  v102[5] = v92[5];
  v102[6] = v92[6];
  v102[7] = v92[7];
  v102[0] = v92[0];
  v102[1] = v92[1];
  v102[2] = v92[2];
  v102[3] = v92[3];
  uint64_t v103 = v93;
  __int16 v94 = 256;
  sub_10000F214(&qword_100519CB8);
  sub_100031B44();
  uint64_t v63 = v85;
  View.smartDialogAnimatable()();
  sub_100031C5C((uint64_t)v102);
  uint64_t v65 = v90;
  uint64_t v64 = v91;
  sub_10000FB74(v90, v91, &qword_100519C98);
  uint64_t v67 = v86;
  uint64_t v66 = v87;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
  uint64_t v69 = v88;
  v68(v86, v63, v88);
  uint64_t v70 = v64;
  uint64_t v71 = v89;
  sub_10000FB74(v70, v89, &qword_100519C98);
  uint64_t v72 = sub_10000F214(&qword_100519CD8);
  v68((char *)(v71 + *(int *)(v72 + 48)), v67, v69);
  uint64_t v73 = *(void (**)(char *, uint64_t))(v66 + 8);
  v73(v63, v69);
  sub_10000FBD8(v65, &qword_100519C98);
  v73(v67, v69);
  return sub_10000FBD8(v91, &qword_100519C98);
}

uint64_t sub_100031670@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Spring();
  __chkstk_darwin(v3 - 8);
  *a1 = static Alignment.center.getter();
  a1[1] = v4;
  uint64_t v5 = (char *)a1 + *(int *)(sub_10000F214(&qword_100519BD0) + 44);
  *(void *)uint64_t v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4020000000000000;
  v5[16] = 0;
  uint64_t v6 = sub_10000F214(&qword_100519BD8);
  sub_100030344(v1, (uint64_t)&v5[*(int *)(v6 + 44)]);
  uint64_t v7 = (char *)a1 + *(int *)(sub_10000F214(&qword_100519BE0) + 36);
  Spring.init(response:dampingRatio:)();
  SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
  uint64_t v8 = *(int *)(type metadata accessor for ContainerSmartDialogViewModifier() + 20);
  sub_10000F214(&qword_100518FE8);
  swift_allocObject();
  uint64_t result = PassthroughSubject.init()();
  *(void *)&v7[v8] = result;
  return result;
}

unint64_t sub_1000317A0()
{
  unint64_t result = qword_10051E2F0;
  if (!qword_10051E2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E2F0);
  }
  return result;
}

unint64_t sub_1000317FC()
{
  unint64_t result = qword_100519C20;
  if (!qword_100519C20)
  {
    sub_10000F69C(&qword_100519C18);
    sub_10003189C();
    sub_100013AA8(&qword_100518C38, &qword_100518C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519C20);
  }
  return result;
}

unint64_t sub_10003189C()
{
  unint64_t result = qword_100519C28;
  if (!qword_100519C28)
  {
    sub_10000F69C(&qword_100519C30);
    sub_10003199C((unint64_t *)&qword_100519C38, &qword_100519C40, &qword_100518C38, &qword_100518C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519C28);
  }
  return result;
}

uint64_t sub_100031938(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003199C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_100013AA8(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100031A40()
{
  unint64_t result = qword_100519CB0;
  if (!qword_100519CB0)
  {
    sub_10000F69C(&qword_100519C88);
    sub_10000F69C(&qword_100519C78);
    sub_10003199C(&qword_100519CA0, &qword_100519C78, &qword_100519CA8, &qword_100519C68);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519CB0);
  }
  return result;
}

unint64_t sub_100031B44()
{
  unint64_t result = qword_100519CC0;
  if (!qword_100519CC0)
  {
    sub_10000F69C(&qword_100519CB8);
    sub_100031BC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519CC0);
  }
  return result;
}

unint64_t sub_100031BC0()
{
  unint64_t result = qword_100519CC8;
  if (!qword_100519CC8)
  {
    sub_10000F69C(&qword_100519CD0);
    sub_10003199C((unint64_t *)&qword_100518CF8, &qword_100518CF0, &qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519CC8);
  }
  return result;
}

uint64_t sub_100031C5C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100031CB0()
{
  unint64_t result = qword_100519CE0;
  if (!qword_100519CE0)
  {
    sub_10000F69C(&qword_100519BE0);
    sub_100013AA8(&qword_100519CE8, &qword_100519CF0);
    sub_100031D50();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519CE0);
  }
  return result;
}

unint64_t sub_100031D50()
{
  unint64_t result = qword_100519CF8;
  if (!qword_100519CF8)
  {
    type metadata accessor for ContainerSmartDialogViewModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519CF8);
  }
  return result;
}

uint64_t initializeWithCopy for AnyLocalizedError(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyLocalizedError(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for AnyLocalizedError(uint64_t a1, uint64_t a2)
{
  _s6Tamale17AnyLocalizedErrorVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyLocalizedError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyLocalizedError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyLocalizedError()
{
  return &type metadata for AnyLocalizedError;
}

uint64_t sub_100031F08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v7 = a1;
  swift_errorRetain();
  sub_10000F214(&qword_10051F3B0);
  sub_10000F214(&qword_100519D08);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    sub_1000321A8(v5, (uint64_t)v8);
    return sub_1000321A8(v8, (uint64_t)a2);
  }
  else
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    sub_1000320F4((uint64_t)v5);
    uint64_t v4 = _convertErrorToNSError(_:)();
    a2[3] = (uint64_t)&type metadata for NSErrorWrapper;
    a2[4] = sub_100032154();
    uint64_t result = swift_errorRelease();
    *a2 = v4;
  }
  return result;
}

uint64_t sub_100031FE0(uint64_t a1, uint64_t a2)
{
  return sub_100032040(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of LocalizedError.errorDescription.getter);
}

uint64_t sub_100031FF8(uint64_t a1, uint64_t a2)
{
  return sub_100032040(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of LocalizedError.failureReason.getter);
}

uint64_t sub_100032010(uint64_t a1, uint64_t a2)
{
  return sub_100032040(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of LocalizedError.recoverySuggestion.getter);
}

uint64_t sub_100032028(uint64_t a1, uint64_t a2)
{
  return sub_100032040(a1, a2, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of LocalizedError.helpAnchor.getter);
}

uint64_t sub_100032040(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  sub_10000F3B0(v3, v5);
  return a3(v5, v6);
}

unint64_t sub_1000320A0()
{
  unint64_t result = qword_100519D00;
  if (!qword_100519D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519D00);
  }
  return result;
}

uint64_t sub_1000320F4(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100519D10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100032154()
{
  unint64_t result = qword_100519D18;
  if (!qword_100519D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519D18);
  }
  return result;
}

uint64_t sub_1000321A8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

ValueMetadata *type metadata accessor for NSErrorWrapper()
{
  return &type metadata for NSErrorWrapper;
}

uint64_t sub_1000321D0()
{
  id v1 = [*v0 localizedDescription];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100032228(uint64_t a1, uint64_t a2)
{
  return sub_10003224C(a1, a2, (SEL *)&selRef_localizedFailureReason);
}

uint64_t sub_100032234(uint64_t a1, uint64_t a2)
{
  return sub_10003224C(a1, a2, (SEL *)&selRef_localizedRecoverySuggestion);
}

uint64_t sub_100032240(uint64_t a1, uint64_t a2)
{
  return sub_10003224C(a1, a2, (SEL *)&selRef_helpAnchor);
}

uint64_t sub_10003224C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

unint64_t sub_1000322B4()
{
  unint64_t result = qword_100519D20;
  if (!qword_100519D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519D20);
  }
  return result;
}

void static OS_dispatch_queue.executeOnMain<A>(_:)(void (*a1)(void))
{
  if ([self isMainThread])
  {
    a1();
  }
  else
  {
    sub_10002E8B0();
    uint64_t v2 = (void *)static OS_dispatch_queue.main.getter();
    __chkstk_darwin(v2);
    OS_dispatch_queue.sync<A>(execute:)();
  }
}

uint64_t sub_1000323E8()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

void sub_100032418(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v48 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v41 = (uint64_t)&v38 - v9;
  uint64_t v47 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v49 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v45 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = (os_unfair_lock_s *)(a1[4] + 16);
  swift_retain();
  os_unfair_lock_lock(v17);
  os_unfair_lock_unlock(v17);
  double v46 = a1 + 2;
  swift_beginAccess();
  os_unfair_lock_lock(v17);
  uint64_t v18 = *(void *)(a1[2] + 16);
  os_unfair_lock_unlock(v17);
  if (v18)
  {
    unint64_t v19 = 0;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v44 = v16;
    uint64_t v39 = v6;
    char v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v40 = v5;
    while (1)
    {
      os_unfair_lock_lock(v17);
      uint64_t v22 = a1[2];
      unint64_t v23 = *(void *)(v22 + 16);
      uint64_t v24 = a1[5];
      if (v23 == v24)
      {
        uint64_t v25 = a1[3];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_30;
        }
        if (!v23) {
          goto LABEL_31;
        }
        uint64_t v28 = v27 % (uint64_t)v23;
      }
      else
      {
        uint64_t v28 = 0;
      }
      BOOL v26 = __OFADD__(v28, v19);
      uint64_t v29 = v28 + v19;
      if (v26) {
        break;
      }
      if (!v24) {
        goto LABEL_27;
      }
      if (v24 == -1 && v29 == 0x8000000000000000) {
        goto LABEL_32;
      }
      unint64_t v30 = v29 % v24;
      if (v30 >= v23) {
        goto LABEL_28;
      }
      uint64_t v31 = (uint64_t)v44;
      sub_100040050(v22+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v30, (uint64_t)v44, type metadata accessor for CVTrackedDetection.HistoryEntry);
      os_unfair_lock_unlock(v17);
      swift_retain();
      os_unfair_lock_lock(v17);
      os_unfair_lock_unlock(v17);
      os_unfair_lock_lock(v17);
      unint64_t v32 = *(void *)(a1[2] + 16);
      os_unfair_lock_unlock(v17);
      swift_release();
      if (v19 >= v32) {
        goto LABEL_29;
      }
      sub_10003FF7C(v31, (uint64_t)v13, type metadata accessor for CVTrackedDetection.HistoryEntry);
      uint64_t v33 = v45;
      sub_100040050((uint64_t)v13, v45, type metadata accessor for CVTrackedDetection.HistoryEntry);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_10003D8EC(v33, type metadata accessor for CVTrackedDetection.HistoryEntry);
        uint64_t v34 = 1;
      }
      else
      {
        sub_10003FF7C(v33, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v34 = 0;
      }
      (*v43)(v4, v34, 1, v5);
      sub_10003D8EC((uint64_t)v13, type metadata accessor for CVTrackedDetection.HistoryEntry);
      if ((*v42)(v4, 1, v5) == 1)
      {
        sub_10000FBD8((uint64_t)v4, &qword_10051CB10);
      }
      else
      {
        uint64_t v35 = v41;
        sub_10003FF7C((uint64_t)v4, v41, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10003FF7C(v35, v48, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = (void *)sub_100328C90(0, v20[2] + 1, 1, (unint64_t)v20);
        }
        unint64_t v37 = v20[2];
        unint64_t v36 = v20[3];
        if (v37 >= v36 >> 1) {
          uint64_t v20 = (void *)sub_100328C90(v36 > 1, v37 + 1, 1, (unint64_t)v20);
        }
        v20[2] = v37 + 1;
        sub_10003FF7C(v48, (uint64_t)v20+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v37, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v5 = v40;
      }
      ++v19;
      os_unfair_lock_lock(v17);
      uint64_t v21 = *(void *)(*v46 + 16);
      os_unfair_lock_unlock(v17);
      if (v19 == v21) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_release();
  }
}

void sub_1000329BC(void *a1)
{
  uint64_t v2 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - v7;
  uint64_t v9 = (os_unfair_lock_s *)(a1[4] + 16);
  swift_retain();
  os_unfair_lock_lock(v9);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = a1 + 2;
  swift_beginAccess();
  os_unfair_lock_lock(v9);
  uint64_t v11 = *(void *)(a1[2] + 16);
  os_unfair_lock_unlock(v9);
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v38 = a1 + 2;
    while (1)
    {
      os_unfair_lock_lock(v9);
      uint64_t v17 = a1[2];
      unint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = a1[5];
      if (v18 == v19)
      {
        uint64_t v20 = a1[3];
        BOOL v21 = __OFADD__(v20, 1);
        uint64_t v22 = v20 + 1;
        if (v21) {
          goto LABEL_26;
        }
        if (!v18) {
          goto LABEL_27;
        }
        uint64_t v23 = v22 % (uint64_t)v18;
      }
      else
      {
        uint64_t v23 = 0;
      }
      BOOL v21 = __OFADD__(v23, v12);
      uint64_t v24 = v23 + v12;
      if (v21) {
        break;
      }
      if (!v19) {
        goto LABEL_23;
      }
      if (v19 == -1 && v24 == 0x8000000000000000) {
        goto LABEL_28;
      }
      unint64_t v25 = v24 % v19;
      if (v25 >= v18) {
        goto LABEL_24;
      }
      sub_100040050(v17+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v25, (uint64_t)v8, type metadata accessor for CVTrackedDetection.HistoryEntry);
      os_unfair_lock_unlock(v9);
      swift_retain();
      os_unfair_lock_lock(v9);
      os_unfair_lock_unlock(v9);
      os_unfair_lock_lock(v9);
      unint64_t v26 = *(void *)(a1[2] + 16);
      os_unfair_lock_unlock(v9);
      swift_release();
      if (v12 >= v26) {
        goto LABEL_25;
      }
      sub_10003FF7C((uint64_t)v8, (uint64_t)v5, type metadata accessor for CVTrackedDetection.HistoryEntry);
      sub_1000347F4((uint64_t)v41);
      uint64_t v27 = v41[0];
      uint64_t v28 = v41[1];
      uint64_t v29 = v41[2];
      uint64_t v30 = v41[3];
      uint64_t v31 = v41[4];
      uint64_t v32 = v41[5];
      uint64_t v33 = v41[6];
      uint64_t v34 = v41[7];
      uint64_t v43 = v41[8];
      uint64_t v40 = v41[9];
      uint64_t v39 = v41[10];
      sub_10003D8EC((uint64_t)v5, type metadata accessor for CVTrackedDetection.HistoryEntry);
      sub_100046C44((uint64_t)v41, (uint64_t)v42);
      if ((v42[88] & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = sub_100328B64(0, v13[2] + 1, 1, v13);
        }
        unint64_t v36 = v13[2];
        unint64_t v35 = v13[3];
        if (v36 >= v35 >> 1) {
          uint64_t v13 = sub_100328B64((void *)(v35 > 1), v36 + 1, 1, v13);
        }
        v13[2] = v36 + 1;
        uint64_t v14 = &v13[11 * v36];
        v14[4] = v27;
        v14[5] = v28;
        v14[6] = v29;
        v14[7] = v30;
        unsigned char v14[8] = v31;
        v14[9] = v32;
        v14[10] = v33;
        v14[11] = v34;
        uint64_t v15 = v40;
        v14[12] = v43;
        v14[13] = v15;
        v14[14] = v39;
        uint64_t v10 = v38;
      }
      ++v12;
      os_unfair_lock_lock(v9);
      uint64_t v16 = *(void *)(*v10 + 16);
      os_unfair_lock_unlock(v9);
      if (v12 == v16) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
LABEL_21:
    swift_release();
  }
}

float sub_100032DCC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v110 = (uint64_t)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v109 = (uint64_t)&v107 - v6;
  uint64_t v7 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v108 = (uint64_t)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v107 = (uint64_t)&v107 - v10;
  uint64_t v11 = type metadata accessor for CVDetection();
  __chkstk_darwin(v11);
  uint64_t v115 = (uint64_t)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v114 = (uint64_t)&v107 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v107 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v107 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v107 - v22;
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v107 - v25;
  uint64_t v27 = sub_10000F214(&qword_100524EB0);
  uint64_t v28 = v27 - 8;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v111);
  uint64_t v113 = (char *)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v112 = (uint64_t)&v107 - v33;
  uint64_t v34 = (uint64_t)&v30[*(int *)(v28 + 56)];
  uint64_t v116 = v1;
  sub_100040050(v1, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v117 = a1;
  sub_100040050(a1, v34, (uint64_t (*)(void))type metadata accessor for CVDetection);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100040050((uint64_t)v30, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v35 = v107;
        sub_10003FF7C((uint64_t)v20, v107, type metadata accessor for ParseDetectorResult);
        uint64_t v36 = v34;
        uint64_t v37 = v108;
        sub_10003FF7C(v36, v108, type metadata accessor for ParseDetectorResult);
        float v38 = sub_1003DE7D4(v37);
        uint64_t v39 = type metadata accessor for ParseDetectorResult;
        goto LABEL_6;
      }
      uint64_t v69 = type metadata accessor for ParseDetectorResult;
      uint64_t v70 = (uint64_t)v20;
      goto LABEL_20;
    case 2u:
      sub_100040050((uint64_t)v30, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v69 = type metadata accessor for TextDetectorResult;
        uint64_t v70 = (uint64_t)v17;
        goto LABEL_20;
      }
      uint64_t v35 = v109;
      sub_10003FF7C((uint64_t)v17, v109, type metadata accessor for TextDetectorResult);
      uint64_t v40 = v34;
      uint64_t v37 = v110;
      sub_10003FF7C(v40, v110, type metadata accessor for TextDetectorResult);
      float v38 = sub_10031A734(v37);
      uint64_t v39 = type metadata accessor for TextDetectorResult;
LABEL_6:
      uint64_t v41 = v39;
      sub_10003D8EC(v37, v39);
      sub_10003D8EC(v35, v41);
      sub_10003D8EC((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
      break;
    case 3u:
      sub_100040050((uint64_t)v30, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        unint64_t v26 = v23;
LABEL_10:
        uint64_t v42 = (uint64_t)v113;
        uint64_t v43 = v112;
        uint64_t v44 = v111;
        sub_10003FF7C((uint64_t)v26, v112, type metadata accessor for StreamingBarcodeDetectorResult);
        sub_10003FF7C(v34, v42, type metadata accessor for StreamingBarcodeDetectorResult);
        sub_10003D8EC((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v45 = *(int *)(v44 + 28);
        uint64_t v46 = *(void *)(v43 + v45);
        uint64_t v47 = *(void *)(v43 + v45 + 8);
        uint64_t v48 = (void *)(v42 + v45);
        if (v46 == *v48 && v47 == v48[1] || (float v38 = 0.0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          uint64_t v49 = (long long *)(v43 + *(int *)(v44 + 24));
          long long v50 = v49[1];
          long long v122 = *v49;
          long long v123 = v50;
          long long v51 = v49[3];
          long long v124 = v49[2];
          long long v125 = v51;
          double v52 = sub_1003FD844();
          CGFloat v54 = v53;
          double v56 = v55;
          double v58 = v57;
          uint64_t v59 = (long long *)(v42 + *(int *)(v44 + 24));
          long long v60 = v59[3];
          v121[2] = v59[2];
          v121[3] = v60;
          long long v61 = *v59;
          v121[1] = v59[1];
          v121[0] = v61;
          v130.origin.x = sub_1003FD844();
          v130.origin.y = v62;
          double v64 = v63;
          double v66 = v65;
          v126.origin.x = v52;
          v126.origin.y = v54;
          v126.size.double width = v56;
          v126.size.double height = v58;
          v130.size.double width = v64;
          v130.size.double height = v66;
          CGRect v127 = CGRectIntersection(v126, v130);
          double width = v127.size.width;
          double height = v127.size.height;
          float v38 = 0.0;
          if (!CGRectIsNull(v127)) {
            float v38 = width * height / (v56 * v58 + v64 * v66 - width * height);
          }
        }
        sub_10003D8EC(v42, type metadata accessor for StreamingBarcodeDetectorResult);
        sub_10003D8EC(v43, type metadata accessor for StreamingBarcodeDetectorResult);
      }
      else
      {
        uint64_t v69 = type metadata accessor for StreamingBarcodeDetectorResult;
        uint64_t v70 = (uint64_t)v23;
LABEL_20:
        sub_10003D8EC(v70, v69);
LABEL_21:
        uint64_t v71 = v114;
        sub_1003FD108(v114);
        uint64_t v72 = v115;
        sub_1003FD108(v115);
        char v73 = sub_100402834(v71, v72);
        sub_10003D8EC(v72, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10003D8EC(v71, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if (v73)
        {
          sub_1003FEC34((uint64_t *)&v122);
          uint64_t v74 = *((void *)&v123 + 1);
          uint64_t v75 = v124;
          sub_10000F3B0(&v122, *((uint64_t *)&v123 + 1));
          (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v75 + 64))(v121, v74, v75);
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v122);
          double v76 = sub_1003FD844();
          CGFloat v78 = v77;
          double v80 = v79;
          double v82 = v81;
          sub_1003FEC34(v118);
          uint64_t v83 = v119;
          uint64_t v84 = v120;
          sub_10000F3B0(v118, v119);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v84 + 64))(&v122, v83, v84);
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v118);
          v131.origin.x = sub_1003FD844();
          v131.origin.y = v85;
          double v87 = v86;
          double v89 = v88;
          v128.origin.x = v76;
          v128.origin.y = v78;
          v128.size.double width = v80;
          v128.size.double height = v82;
          v131.size.double width = v87;
          v131.size.double height = v89;
          CGRect v129 = CGRectIntersection(v128, v131);
          double v90 = v129.size.width;
          double v91 = v129.size.height;
          float v92 = 0.0;
          if (!CGRectIsNull(v129))
          {
            float v93 = v90 * v91 / (v80 * v82 + v87 * v89 - v90 * v91);
            float v92 = v93 * 0.9;
          }
          sub_1003FEC34(v118);
          uint64_t v94 = v119;
          uint64_t v95 = v120;
          sub_10000F3B0(v118, v119);
          uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 72))(v94, v95);
          uint64_t v98 = v97;
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v118);
          sub_1003FEC34(v118);
          uint64_t v99 = v119;
          uint64_t v100 = v120;
          sub_10000F3B0(v118, v119);
          uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 72))(v99, v100);
          uint64_t v103 = v102;
          _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v118);
          if (v96 == v101 && v98 == v103)
          {
            swift_bridgeObjectRelease_n();
            float v104 = 0.1;
          }
          else
          {
            char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            float v104 = 0.1;
            if ((v105 & 1) == 0) {
              float v104 = 0.0;
            }
          }
          float v38 = v92 + v104;
          sub_10000FBD8((uint64_t)v30, &qword_100524EB0);
        }
        else
        {
          sub_10000FBD8((uint64_t)v30, &qword_100524EB0);
          float v38 = 0.0;
        }
      }
      break;
    case 4u:
      sub_100040050((uint64_t)v30, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_10;
      }
      uint64_t v69 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v70 = (uint64_t)v26;
      goto LABEL_20;
    default:
      goto LABEL_21;
  }
  return v38;
}

uint64_t sub_100033838(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10051A040);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10004648C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = 0;
  type metadata accessor for UUID();
  sub_10003E7C0(&qword_10051A048, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for CVTrackSnapshot(0);
    char v17 = 1;
    type metadata accessor for CVDetection();
    sub_10003E7C0(&qword_10051A050, (void (*)(uint64_t))type metadata accessor for CVDetection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = *(unsigned char *)(v3 + *(int *)(v9 + 28));
    char v14 = 3;
    sub_100046534();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v13 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100033B14()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003E7C0((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (int *)type metadata accessor for CVTrackSnapshot(0);
  sub_1003FFF94((uint64_t)v5);
  sub_1003FFF94((uint64_t)v5);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v1[7]));
  if ((*(void *)(v0 + v1[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + v1[8]);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(_DWORD *)(v0 + v1[9]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = *(_DWORD *)(v0 + v1[9]);
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100033C14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v29 = type metadata accessor for CVDetection();
  __chkstk_darwin(v29);
  unint64_t v26 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v30 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000F214(&qword_10051A018);
  uint64_t v27 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v11);
  char v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10004648C();
  uint64_t v31 = v10;
  uint64_t v14 = (uint64_t)v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  uint64_t v33 = a1;
  uint64_t v15 = (uint64_t)v13;
  uint64_t v16 = v28;
  char v40 = 0;
  sub_10003E7C0(&qword_10051A028, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v17 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  char v18 = v30;
  uint64_t v30 = (char *)v7;
  v17(v15, v18, v7);
  char v39 = 1;
  sub_10003E7C0(&qword_10051A030, (void (*)(uint64_t))type metadata accessor for CVDetection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = (int *)v11;
  sub_10003FF7C((uint64_t)v6, v15 + *(int *)(v11 + 20), (uint64_t (*)(void))type metadata accessor for CVDetection);
  char v38 = 2;
  uint64_t v20 = (uint64_t)v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10003FF7C(v20, v15 + v19[6], (uint64_t (*)(void))type metadata accessor for CVDetection);
  char v36 = 3;
  sub_1000464E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v15 + v19[7]) = v37;
  char v35 = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v15 + v19[8]) = v22;
  char v34 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  int v24 = v23;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v32);
  *(_DWORD *)(v15 + v19[9]) = v24;
  sub_100040050(v15, v25, type metadata accessor for CVTrackSnapshot);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v33);
  return sub_10003D8EC(v15, type metadata accessor for CVTrackSnapshot);
}

uint64_t sub_1000341EC()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x654474736574616CLL;
      break;
    case 2:
      uint64_t result = 0x734574736574616CLL;
      break;
    case 3:
      uint64_t result = 0x6C6379436566696CLL;
      break;
    case 4:
      uint64_t result = 0x69546E696769726FLL;
      break;
    case 5:
      uint64_t result = 0x65726F6373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000342D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100046588(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000342FC(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100034308(uint64_t a1)
{
  unint64_t v2 = sub_10004648C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100034344(uint64_t a1)
{
  unint64_t v2 = sub_10004648C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10003438C(uint64_t a1, int *a2)
{
  type metadata accessor for UUID();
  sub_10003E7C0((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  sub_1003FFF94(a1);
  sub_1003FFF94(a1);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[7]));
  if ((*(void *)(v2 + a2[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v2 + a2[8]);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(_DWORD *)(v2 + a2[9]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v6 = *(_DWORD *)(v2 + a2[9]);
  }
  else {
    Swift::UInt32 v6 = 0;
  }
  Hasher._combine(_:)(v6);
}

Swift::Int sub_10003446C(uint64_t a1, int *a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10003E7C0((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  sub_1003FFF94((uint64_t)v7);
  sub_1003FFF94((uint64_t)v7);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[7]));
  if ((*(void *)(v2 + a2[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v2 + a2[8]);
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(_DWORD *)(v2 + a2[9]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v5 = *(_DWORD *)(v2 + a2[9]);
  }
  else {
    Swift::UInt32 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_100034560@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100033C14(a1, a2);
}

uint64_t sub_100034578(void *a1)
{
  return sub_100033838(a1);
}

uint64_t sub_100034590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  Swift::UInt64 v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_1000345F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100040050(v2 + *(int *)(a1 + 20), a2, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

uint64_t sub_100034630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100040050(v2 + *(int *)(a1 + 24), a2, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

double sub_100034668()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CVDetection();
  __chkstk_darwin(v2 - 8);
  Swift::UInt64 v4 = (char *)&v13[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100040050(v1, (uint64_t)v7, type metadata accessor for CVTrackedDetection.HistoryEntry);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return *(double *)v7;
  }
  sub_10003FF7C((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1003FEC34(v13);
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  sub_10000F3B0(v13, v14);
  double v8 = (*(double (**)(uint64_t, uint64_t))(v10 + 88))(v9, v10);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v13);
  sub_10003D8EC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return v8;
}

uint64_t sub_1000347F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100040050(v2, (uint64_t)v9, type metadata accessor for CVTrackedDetection.HistoryEntry);
  uint64_t result = swift_getEnumCaseMultiPayload();
  int v11 = result;
  if (result == 1)
  {
    long long v12 = 0uLL;
    CGFloat MidX = 0.0;
    CGFloat MidY = 0.0;
    double v15 = 0.0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  else
  {
    sub_10003FF7C((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
    sub_1003FEC34(v48);
    uint64_t v19 = v49;
    uint64_t v20 = v50;
    sub_10000F3B0(v48, v49);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 64))(v42, v19, v20);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v48);
    v52.origin.CGFloat x = sub_1003FD844();
    CGFloat x = v52.origin.x;
    CGFloat y = v52.origin.y;
    CGFloat width = v52.size.width;
    CGFloat height = v52.size.height;
    CGFloat MidX = CGRectGetMidX(v52);
    v53.origin.CGFloat x = x;
    v53.origin.CGFloat y = y;
    v53.size.CGFloat width = width;
    v53.size.CGFloat height = height;
    CGFloat MidY = CGRectGetMidY(v53);
    sub_1003FEC34(v48);
    uint64_t v25 = v49;
    uint64_t v26 = v50;
    sub_10000F3B0(v48, v49);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v26 + 64))(v43, v25, v26);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v48);
    long long v38 = v43[0];
    sub_1003FEC34(v48);
    uint64_t v27 = v49;
    uint64_t v28 = v50;
    sub_10000F3B0(v48, v49);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v28 + 64))(&v44, v27, v28);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v48);
    long long v37 = v45;
    sub_1003FEC34(v48);
    uint64_t v29 = v49;
    uint64_t v30 = v50;
    sub_10000F3B0(v48, v49);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v30 + 64))(v46, v29, v30);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v48);
    long long v36 = v47;
    sub_1003FEC34(v39);
    uint64_t v31 = v40;
    uint64_t v32 = v41;
    sub_10000F3B0(v39, v40);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v32 + 64))(v48, v31, v32);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v39);
    long long v35 = v51;
    sub_1003FEC34(v39);
    uint64_t v33 = v40;
    uint64_t v34 = v41;
    sub_10000F3B0(v39, v40);
    double v15 = (*(double (**)(uint64_t, uint64_t))(v34 + 88))(v33, v34);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v39);
    uint64_t result = sub_10003D8EC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
    long long v18 = v35;
    long long v17 = v36;
    long long v16 = v37;
    long long v12 = v38;
  }
  *(CGFloat *)a1 = MidX;
  *(CGFloat *)(a1 + 8) = MidY;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = v18;
  *(double *)(a1 + 80) = v15;
  *(unsigned char *)(a1 + 88) = v11 == 1;
  return result;
}

Swift::Int sub_100034BB8()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt64 v5 = v0[4];
  Swift::UInt64 v6 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Swift::UInt64 v8 = v0[7];
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v1;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Swift::UInt64 v10 = v0[8];
  Swift::UInt64 v11 = v0[9];
  Hasher._combine(_:)(v9);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v3;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v4;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v5;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v6;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v7;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v8;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v10;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  Swift::UInt64 v19 = v0[10];
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v11;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v19;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  return Hasher._finalize()();
}

void sub_100034CE0()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Swift::UInt64 v4 = v0[4];
  Swift::UInt64 v5 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Swift::UInt64 v6 = v0[7];
  Swift::UInt64 v9 = v0[8];
  Swift::UInt64 v8 = v0[9];
  Swift::UInt64 v21 = v0[10];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *v0;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v1;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v2;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v3;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v4;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v5;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v7;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v6;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v9;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = v8;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v21 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v21;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
}

Swift::Int sub_100034DD0()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt64 v6 = v0[4];
  Swift::UInt64 v5 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Swift::UInt64 v8 = v0[7];
  Swift::UInt64 v9 = v0[8];
  Swift::UInt64 v22 = v0[9];
  Swift::UInt64 v23 = v0[10];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v1;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v2;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v3;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v4;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v6;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v5;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v7;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = v8;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v9;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = v22;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v23;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  return Hasher._finalize()();
}

BOOL sub_100034EF8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10004606C((uint64_t)v7, (uint64_t)v9);
}

double sub_100034F64()
{
  return *(double *)(v0 + 80);
}

uint64_t sub_100034F6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v24);
  long long v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::UInt64 v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC6Tamale18CVTrackedDetection_historyBuffer;
  sub_10000F214(&qword_10051A0A0);
  uint64_t v11 = swift_allocObject();
  sub_10000F214(&qword_10051A0A8);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)(v11 + 48) = v12;
  *(void *)(v2 + v10) = sub_10003FE74((uint64_t)_swiftEmptyArrayStorage, 0, 10, (uint64_t (*)(void))sub_100328B30);
  uint64_t v13 = OBJC_IVAR____TtC6Tamale18CVTrackedDetection_predictions;
  sub_10000F214(&qword_10051A0B0);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)(v14 + 48) = v15;
  *(void *)(v2 + v13) = sub_10003FE74((uint64_t)_swiftEmptyArrayStorage, 0, 40, (uint64_t (*)(void))sub_100328B64);
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v2 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id, v9, v6);
  sub_1003FEC34((uint64_t *)&v25);
  uint64_t v16 = *((void *)&v26 + 1);
  uint64_t v17 = v27;
  sub_10000F3B0(&v25, *((uint64_t *)&v26 + 1));
  double v18 = (*(double (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v25);
  *(double *)(v2 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp) = v18;
  sub_1000CE0AC(1, (uint64_t)&v25, 0.0, 0.05, 10.0);
  type metadata accessor for SPRTTrigger();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 24) = 0xFFF0000000000000;
  long long v20 = v26;
  *(_OWORD *)(v19 + 32) = v25;
  *(_OWORD *)(v19 + 48) = v20;
  *(unsigned char *)(v19 + 64) = 2;
  *(float *)(v19 + 16) = *((float *)&v25 + 3) + (float)((float)(*((float *)&v25 + 2) - *((float *)&v25 + 3)) * 0.5);
  *(void *)(v2 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger) = v19;
  uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_historyBuffer);
  sub_100040050(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_storeEnumTagMultiPayload();
  Swift::UInt64 v22 = (os_unfair_lock_s *)(*(void *)(v21 + 48) + 16);
  os_unfair_lock_lock(v22);
  sub_100381C5C((uint64_t)v5, v21);
  os_unfair_lock_unlock(v22);
  sub_10003D8EC(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10003D8EC((uint64_t)v5, type metadata accessor for CVTrackedDetection.HistoryEntry);
  return v2;
}

void sub_1000352F0(uint64_t a1@<X8>)
{
  long long v3 = (os_unfair_lock_s *)(*(void *)(v1 + 32) + 16);
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + 16;
  swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_unlock(v3);
  if (v5)
  {
    os_unfair_lock_lock(v3);
    uint64_t v6 = *(void *)(*(void *)v4 + 16);
    os_unfair_lock_unlock(v3);
    unint64_t v7 = v6 - 1;
    os_unfair_lock_lock(v3);
    os_unfair_lock_unlock(v3);
    os_unfair_lock_lock(v3);
    unint64_t v8 = *(void *)(*(void *)v4 + 16);
    os_unfair_lock_unlock(v3);
    if (v7 >= v8)
    {
      __break(1u);
    }
    else
    {
      sub_10003FB08(v7, a1);
      uint64_t v9 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

void sub_100035434(uint64_t a1@<X8>)
{
  long long v3 = (os_unfair_lock_s *)(*(void *)(v1 + 32) + 16);
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + 16;
  swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_unlock(v3);
  if (v5)
  {
    os_unfair_lock_lock(v3);
    uint64_t v6 = *(void *)(*(void *)v4 + 16);
    os_unfair_lock_unlock(v3);
    unint64_t v7 = v6 - 1;
    os_unfair_lock_lock(v3);
    os_unfair_lock_unlock(v3);
    os_unfair_lock_lock(v3);
    unint64_t v8 = *(void *)(*(void *)v4 + 16);
    os_unfair_lock_unlock(v3);
    if (v7 >= v8)
    {
      __break(1u);
    }
    else
    {
      sub_10003FC60(v7, (uint64_t)v12);
      uint64_t v9 = v13;
      long long v10 = v12[1];
      *(_OWORD *)a1 = v12[0];
      *(_OWORD *)(a1 + 16) = v10;
      long long v11 = v12[3];
      *(_OWORD *)(a1 + 32) = v12[2];
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v12[4];
      *(void *)(a1 + 80) = v9;
      *(unsigned char *)(a1 + 88) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(unsigned char *)(a1 + 88) = 1;
  }
}

uint64_t sub_100035548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v62 = sub_10000F214(&qword_100519F80);
  __chkstk_darwin(v62);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100519F88);
  __chkstk_darwin(v5 - 8);
  double v57 = (os_unfair_lock_s *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  uint64_t v64 = v8;
  __chkstk_darwin(v7);
  uint64_t v59 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v56 - v11;
  __chkstk_darwin(v13);
  uint64_t v67 = (uint64_t)&v56 - v14;
  __chkstk_darwin(v15);
  uint64_t v61 = (uint64_t)&v56 - v16;
  __chkstk_darwin(v17);
  uint64_t v58 = (uint64_t)&v56 - v18;
  uint64_t v19 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_historyBuffer);
  long long v20 = (os_unfair_lock_s *)(v19[4] + 16);
  swift_retain();
  os_unfair_lock_lock(v20);
  uint64_t v21 = v19 + 2;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v19[2] + 16);
  os_unfair_lock_unlock(v20);
  os_unfair_lock_lock(v20);
  os_unfair_lock_unlock(v20);
  long long v60 = v19;
  if (v22)
  {
    uint64_t v23 = v19[5];
    if (v23)
    {
      uint64_t v56 = a1;
      while (1)
      {
        os_unfair_lock_lock(v20);
        os_unfair_lock_unlock(v20);
        os_unfair_lock_lock(v20);
        uint64_t v24 = *(void *)(*v21 + 16);
        os_unfair_lock_unlock(v20);
        if (v22 > v24) {
          break;
        }
        os_unfair_lock_lock(v20);
        unint64_t v25 = *(void *)(*v21 + 16);
        if (v25 == v23)
        {
          uint64_t v26 = v60[3];
          BOOL v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_36;
          }
          uint64_t v29 = v28 % v23;
        }
        else
        {
          uint64_t v29 = 0;
        }
        BOOL v27 = __OFADD__(v29, --v22);
        uint64_t v30 = v29 + v22;
        if (v27) {
          goto LABEL_34;
        }
        if (v23 == -1 && v30 == 0x8000000000000000) {
          goto LABEL_37;
        }
        unint64_t v31 = v30 % v23;
        if (v31 >= v25) {
          goto LABEL_35;
        }
        uint64_t v32 = v61;
        sub_100040050(*v21+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(void *)(v64 + 72) * v31, v61, type metadata accessor for CVTrackedDetection.HistoryEntry);
        os_unfair_lock_unlock(v20);
        sub_10003FF7C(v32, v67, type metadata accessor for CVTrackedDetection.HistoryEntry);
        if (qword_100517FB0 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for UUID();
        uint64_t v34 = sub_10000F378(v33, (uint64_t)qword_100529170);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v12, v34, v33);
        if (qword_100517FB8 != -1) {
          swift_once();
        }
        uint64_t v35 = qword_100529198;
        uint64_t v65 = *((void *)&xmmword_100529188 + 1);
        uint64_t v66 = xmmword_100529188;
        uint64_t v36 = qword_1005291A0;
        long long v38 = xmmword_1005291A8;
        uint64_t v37 = qword_1005291B8;
        uint64_t v39 = qword_1005291C0;
        if (qword_100517FC0 != -1) {
          swift_once();
        }
        uint64_t v40 = qword_1005291C8;
        if (qword_100517FC8 != -1) {
          swift_once();
        }
        uint64_t v41 = qword_1005291D0;
        uint64_t v42 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v12[v42[5]] = -1082130432;
        uint64_t v43 = &v12[v42[6]];
        uint64_t v44 = v65;
        *(void *)uint64_t v43 = v66;
        *((void *)v43 + 1) = v44;
        *((void *)v43 + 2) = v35;
        *((void *)v43 + 3) = v36;
        *((_OWORD *)v43 + 2) = v38;
        *((void *)v43 + 6) = v37;
        *((void *)v43 + 7) = v39;
        long long v45 = &v12[v42[7]];
        *(void *)long long v45 = 0x7974706D65;
        *((void *)v45 + 1) = 0xE500000000000000;
        *(void *)&v12[v42[8]] = v40;
        *(void *)&v12[v42[9]] = v41;
        type metadata accessor for CVDetection();
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        uint64_t v46 = (uint64_t)&v4[*(int *)(v62 + 48)];
        sub_100040050(v67, (uint64_t)v4, type metadata accessor for CVTrackedDetection.HistoryEntry);
        sub_100040050((uint64_t)v12, v46, type metadata accessor for CVTrackedDetection.HistoryEntry);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        int v48 = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 1)
        {
          if (v48 == 1) {
            goto LABEL_29;
          }
        }
        else if (v48 != 1)
        {
          sub_10003D8EC(v46, type metadata accessor for CVTrackedDetection.HistoryEntry);
LABEL_29:
          sub_10003D8EC((uint64_t)v4, type metadata accessor for CVTrackedDetection.HistoryEntry);
          sub_10003D8EC((uint64_t)v12, type metadata accessor for CVTrackedDetection.HistoryEntry);
          sub_10003D8EC(v67, type metadata accessor for CVTrackedDetection.HistoryEntry);
          long long v20 = v57;
          sub_10003FB08(v22, (uint64_t)v57);
          uint64_t v49 = 0;
          a1 = v56;
          goto LABEL_30;
        }
        sub_10000FBD8((uint64_t)v4, &qword_100519F80);
        sub_10003D8EC((uint64_t)v12, type metadata accessor for CVTrackedDetection.HistoryEntry);
        sub_10003D8EC(v67, type metadata accessor for CVTrackedDetection.HistoryEntry);
        os_unfair_lock_lock(v20);
        os_unfair_lock_unlock(v20);
        if (!v22)
        {
          uint64_t v49 = 1;
          a1 = v56;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v49 = 1;
LABEL_28:
  long long v20 = v57;
LABEL_30:
  uint64_t v51 = v63;
  uint64_t v50 = v64;
  (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v20, v49, 1, v63);
  swift_release();
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t, uint64_t))(v50 + 48))(v20, 1, v51) == 1)
  {
LABEL_39:
    sub_10000FBD8((uint64_t)v20, &qword_100519F88);
    goto LABEL_41;
  }
  uint64_t v52 = v58;
  sub_10003FF7C((uint64_t)v20, v58, type metadata accessor for CVTrackedDetection.HistoryEntry);
  uint64_t v53 = v52;
  uint64_t v54 = v59;
  sub_10003FF7C(v53, v59, type metadata accessor for CVTrackedDetection.HistoryEntry);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return sub_10003FF7C(v54, a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  sub_10003D8EC(v54, type metadata accessor for CVTrackedDetection.HistoryEntry);
LABEL_41:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100035D50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15[-1] - v6;
  uint64_t v8 = (void *)swift_retain();
  sub_100032418(v8);
  swift_release();
  sub_100035F48((uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100035434((uint64_t)&v18);
  swift_release();
  if (v20) {
    return sub_10003FF7C((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  double v9 = v19;
  sub_100035548((uint64_t)v4);
  sub_1003FEC34(v15);
  uint64_t v10 = v16;
  uint64_t v11 = v17;
  sub_10000F3B0(v15, v16);
  double v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v15);
  sub_10003D8EC((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if (v12 >= v9) {
    return sub_10003FF7C((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  sub_1003FE418((uint64_t)&v18, a1);
  return sub_10003D8EC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

uint64_t sub_100035F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v1 = type metadata accessor for CVDetection();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v50 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v50 - v9;
  __chkstk_darwin(v11);
  uint64_t v51 = (uint64_t)&v50 - v12;
  __chkstk_darwin(v13);
  uint64_t v52 = (uint64_t)&v50 - v14;
  uint64_t v15 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v50 - v19;
  uint64_t v23 = *(void *)(v20 + 16);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v2 + 56))((char *)&v50 - v19, 1, 1, v1, v21);
    __break(1u);
    JUMPOUT(0x100036888);
  }
  unint64_t v24 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v55 = v20;
  uint64_t v25 = v20 + v24;
  sub_100040050(v20 + v24, (uint64_t)&v50 - v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v56 = v2;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v22, 0, 1, v1);
  uint64_t v53 = v22;
  sub_1000400B8((uint64_t)v22, (uint64_t)v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v29 = sub_100040334(v55);
    uint64_t v30 = sub_10003EB84((uint64_t)v29, type metadata accessor for ParseDetectorResult, (void (*)(BOOL, uint64_t, uint64_t))sub_100040868, type metadata accessor for ParseDetectorResult);
    swift_bridgeObjectRelease();
    sub_100040184(v30, v54);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload == 2)
  {
    BOOL v27 = sub_100040334(v55);
    uint64_t v28 = sub_10003EB84((uint64_t)v27, type metadata accessor for TextDetectorResult, (void (*)(BOOL, uint64_t, uint64_t))sub_10004080C, type metadata accessor for TextDetectorResult);
    swift_bridgeObjectRelease();
    sub_10003EF90((uint64_t)v28, v54);
LABEL_6:
    swift_bridgeObjectRelease();
    sub_10003D8EC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
    return sub_10000FBD8((uint64_t)v53, &qword_10051CB10);
  }
  sub_10003D8EC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v31 = v51;
  sub_100040050(v25, v51, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_bridgeObjectRetain();
  uint64_t v32 = v23 - 1;
  if (v32)
  {
    uint64_t v56 = *(void *)(v56 + 72);
    uint64_t v35 = v55 + v56 + v24;
    do
    {
      sub_100040050(v35, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100040050(v31, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v58 = type metadata accessor for ParseDetectorResult(0);
          uint64_t v36 = sub_10003E7C0(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          uint64_t v37 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v58 = type metadata accessor for TextDetectorResult(0);
          uint64_t v36 = sub_10003E7C0((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          uint64_t v37 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          uint64_t v58 = type metadata accessor for StreamingBarcodeDetectorResult(0);
          uint64_t v36 = sub_10003E7C0(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          uint64_t v37 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v58 = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v36 = sub_10003E7C0((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          uint64_t v37 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v58 = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v36 = sub_10003E7C0(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          uint64_t v37 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      long long v38 = v37;
      uint64_t v59 = v36;
      uint64_t v39 = sub_100040120(v57);
      sub_10003FF7C((uint64_t)v7, (uint64_t)v39, v38);
      uint64_t v41 = v58;
      uint64_t v40 = v59;
      sub_10000F3B0(v57, v58);
      double v42 = (*(double (**)(uint64_t, uint64_t))(v40 + 88))(v41, v40);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v57);
      sub_100040050((uint64_t)v10, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v58 = type metadata accessor for ParseDetectorResult(0);
          uint64_t v43 = sub_10003E7C0(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          uint64_t v44 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v58 = type metadata accessor for TextDetectorResult(0);
          uint64_t v43 = sub_10003E7C0((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          uint64_t v44 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          uint64_t v58 = type metadata accessor for StreamingBarcodeDetectorResult(0);
          uint64_t v43 = sub_10003E7C0(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          uint64_t v44 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v58 = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v43 = sub_10003E7C0((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          uint64_t v44 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v58 = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v43 = sub_10003E7C0(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          uint64_t v44 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      long long v45 = v44;
      uint64_t v59 = v43;
      uint64_t v46 = sub_100040120(v57);
      sub_10003FF7C((uint64_t)v4, (uint64_t)v46, v45);
      uint64_t v47 = v58;
      uint64_t v48 = v59;
      sub_10000F3B0(v57, v58);
      double v49 = (*(double (**)(uint64_t, uint64_t))(v48 + 88))(v47, v48);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v57);
      if (v42 >= v49)
      {
        sub_10003D8EC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      else
      {
        sub_10003D8EC(v31, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10003FF7C((uint64_t)v10, v31, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      v35 += v56;
      --v32;
    }
    while (v32);
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = v52;
  sub_10003FF7C(v31, v52, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_10003FF7C(v33, v54, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return sub_10000FBD8((uint64_t)v53, &qword_10051CB10);
}

void *sub_1000368B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DetectionRequest.Originator(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100519FE0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100519FE8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVDetection();
  __chkstk_darwin(v11 - 8);
  uint64_t v51 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v48 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v48 - v17;
  sub_100035D50((uint64_t)&v48 - v17);
  sub_1003FEC34(v52);
  uint64_t v20 = v53;
  uint64_t v19 = v54;
  sub_10000F3B0(v52, v53);
  (*(void (**)(uint64_t, uint64_t))(v19 + 112))(v20, v19);
  uint64_t v21 = sub_10000F214(&qword_1005297A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v7, 1, v21) == 1)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v52);
    sub_10000FBD8((uint64_t)v7, &qword_100519FE0);
    uint64_t v22 = sub_10000F214(&qword_100519FF0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v10, 1, 1, v22);
  }
  else
  {
    uint64_t v23 = &v7[*(int *)(v21 + 48)];
    long long v50 = *(_OWORD *)v23;
    uint64_t v24 = *((void *)v23 + 2);
    uint64_t v25 = *((void *)v23 + 3);
    uint64_t v26 = sub_10000F214(&qword_100519FF0);
    BOOL v27 = &v10[*(int *)(v26 + 48)];
    sub_10003FF7C((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(_OWORD *)BOOL v27 = v50;
    *((void *)v27 + 2) = v24;
    *((void *)v27 + 3) = v25;
    uint64_t v28 = *(void *)(v26 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v10, 0, 1, v26);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v52);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v26) != 1)
    {
      uint64_t v30 = &v10[*(int *)(v26 + 48)];
      long long v50 = *(_OWORD *)v30;
      uint64_t v31 = *((void *)v30 + 2);
      uint64_t v32 = *((void *)v30 + 3);
      double v49 = type metadata accessor for CVDetection;
      sub_10003FF7C((uint64_t)v10, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10000F214(&qword_100529640);
      uint64_t v33 = (int *)(type metadata accessor for DetectionRequest(0) - 8);
      unint64_t v34 = (*(unsigned __int8 *)(*(void *)v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v33 + 80);
      uint64_t v29 = (void *)swift_allocObject();
      *((_OWORD *)v29 + 1) = xmmword_10043D4F0;
      uint64_t v35 = (uint64_t)v29 + v34;
      sub_100040050((uint64_t)v15, v51, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v36 = v1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
      uint64_t v37 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v4, v36, v37);
      long long v38 = (int *)type metadata accessor for CVTrackSnapshot(0);
      sub_100035548((uint64_t)&v4[v38[5]]);
      sub_100035D50((uint64_t)&v4[v38[6]]);
      uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_lifeCycleTrigger);
      uint64_t v48 = v15;
      char v40 = *(unsigned char *)(v39 + 64);
      uint64_t v41 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_originTimestamp);
      float v42 = sub_1000CD790();
      v4[v38[7]] = v40;
      *(void *)&v4[v38[8]] = v41;
      *(float *)&v4[v38[9]] = v42;
      swift_storeEnumTagMultiPayload();
      sub_1003FEC34(v52);
      uint64_t v43 = v53;
      uint64_t v44 = v54;
      sub_10000F3B0(v52, v53);
      double v45 = (*(double (**)(uint64_t, uint64_t))(v44 + 88))(v43, v44);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v52);
      sub_10003FF7C(v51, v35, (uint64_t (*)(void))v49);
      sub_10003FF7C((uint64_t)v4, v35 + v33[7], type metadata accessor for DetectionRequest.Originator);
      uint64_t v46 = v35 + v33[8];
      *(_OWORD *)uint64_t v46 = v50;
      *(void *)(v46 + 16) = v31;
      *(void *)(v46 + 24) = v32;
      *(double *)(v35 + v33[9]) = v45;
      sub_10003D8EC((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for CVDetection);
      goto LABEL_6;
    }
  }
  sub_10000FBD8((uint64_t)v10, &qword_100519FE8);
  uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_6:
  sub_10003D8EC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return v29;
}

uint64_t sub_100036ED0@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_predictions);
  swift_retain();
  uint64_t v12 = (void *)swift_retain();
  unint64_t v13 = 0;
  sub_1000329BC(v12);
  uint64_t v15 = v14;
  swift_release();
  int64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = (os_unfair_lock_s *)(*(void *)(v11 + 32) + 16);
  os_unfair_lock_lock(v17);
  swift_beginAccess();
  uint64_t v18 = *(void *)(*(void *)(v11 + 16) + 16);
  os_unfair_lock_unlock(v17);
  uint64_t v21 = v16 + v18;
  if (__OFADD__(v16, v18))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    double v72 = v20;
    sub_100040848(v19 > 1, v13, 1);
    double v20 = v72;
    double v49 = v100;
    unint64_t v19 = v100[3];
    unint64_t v50 = v19 >> 1;
    goto LABEL_22;
  }
  int64_t v16 = (int64_t)_swiftEmptyArrayStorage;
  v102[0] = (uint64_t)sub_100328B64(0, v21 & ~(v21 >> 63), 0, _swiftEmptyArrayStorage);
  uint64_t v22 = swift_retain();
  sub_10019EE3C(v22);
  sub_10019ECE4(v15);
  swift_release();
  swift_bridgeObjectRetain();
  sub_100043978(v102);
  swift_bridgeObjectRelease();
  v102[0] = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v23 = swift_retain();
  uint64_t v24 = sub_10004687C(v23, (void (*)(uint64_t *__return_ptr, void *))sub_100037504, 0, v102);
  swift_release();
  unint64_t v13 = v102[0];
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    uint64_t result = swift_bridgeObjectRelease();
    double v34 = 0.0;
    char v35 = 1;
    double v36 = 0.0;
    double v37 = 0.0;
    double v38 = 0.0;
    *(double *)&uint64_t v39 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    double v40 = 0.0;
    *(double *)&uint64_t v41 = 0.0;
    double v5 = 0.0;
    double v42 = 0.0;
LABEL_32:
    *(double *)a1 = v34;
    *(double *)(a1 + 8) = v36;
    *(double *)(a1 + 16) = v37;
    *(double *)(a1 + 24) = v38;
    *(double *)(a1 + 32) = *(double *)&v39;
    *(double *)(a1 + 40) = v7;
    *(double *)(a1 + 48) = v8;
    *(double *)(a1 + 56) = v40;
    *(double *)(a1 + 64) = *(double *)&v41;
    *(double *)(a1 + 72) = v5;
    *(double *)(a1 + 80) = v42;
    *(unsigned char *)(a1 + 88) = v35;
    return result;
  }
  uint64_t v26 = 0;
  uint64_t v27 = v24 + 88 * v25;
  while (1)
  {
    double v6 = *(double *)(v27 + 24);
    if (v6 <= a2) {
      break;
    }
    ++v26;
    v27 -= 88;
    if (v25 == v26)
    {
      double v93 = 0.0;
      double v8 = 0.0;
      double v4 = 0.0;
      double v28 = 0.0;
      double v7 = 0.0;
      *(double *)&uint64_t v29 = 0.0;
      *(double *)&uint64_t v30 = 0.0;
      double v20 = 0.0;
      double v95 = 0.0;
      double v5 = 0.0;
      *(double *)&uint64_t v31 = 0.0;
      double v32 = 0.0;
      goto LABEL_9;
    }
  }
  double v8 = *(double *)(v27 - 48);
  double v93 = *(double *)(v27 - 56);
  double v4 = *(double *)(v27 - 40);
  double v28 = *(double *)(v27 - 32);
  double v7 = *(double *)(v27 - 24);
  uint64_t v29 = *(uint64_t *)(v27 - 16);
  uint64_t v30 = *(uint64_t *)(v27 - 8);
  double v20 = *(double *)v27;
  double v95 = *(double *)v27;
  double v5 = *(double *)(v27 + 8);
  uint64_t v31 = *(uint64_t *)(v27 + 16);
  double v32 = *(double *)(v27 + 24);
LABEL_9:
  unint64_t v19 = 0;
  uint64_t v43 = v24 + 56;
  uint64_t v96 = v29;
  double v98 = v28;
  uint64_t v92 = v31;
  double v94 = v32;
  while (1)
  {
    unint64_t v44 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    double v3 = *(double *)(v43 + 56);
    if (v3 >= a2) {
      break;
    }
    ++v19;
    v43 += 88;
    if (v44 == v25)
    {
      uint64_t v45 = v30;
      uint64_t result = swift_bridgeObjectRelease();
      double v83 = 0.0;
      double v84 = 0.0;
      double v82 = 0.0;
      *(double *)&uint64_t v90 = 0.0;
      double v91 = 0.0;
      double v88 = 0.0;
      double v89 = 0.0;
      *(double *)&uint64_t v86 = 0.0;
      double v87 = 0.0;
      double v85 = 0.0;
      double v46 = 0.0;
      goto LABEL_15;
    }
  }
  uint64_t v45 = v30;
  double v83 = *(double *)(v43 - 16);
  double v84 = *(double *)(v43 - 24);
  double v82 = *(double *)(v43 - 8);
  uint64_t v90 = *(uint64_t *)(v43 + 8);
  double v91 = *(double *)v43;
  double v88 = *(double *)(v43 + 24);
  double v89 = *(double *)(v43 + 16);
  uint64_t v86 = *(uint64_t *)(v43 + 40);
  double v87 = *(double *)(v43 + 32);
  double v85 = *(double *)(v43 + 48);
  uint64_t result = swift_bridgeObjectRelease();
  double v46 = v3;
LABEL_15:
  double v36 = v8;
  *(double *)&uint64_t v41 = v5;
  *(double *)&uint64_t v39 = v7;
  double v37 = v4;
  double v38 = v98;
  double v42 = v94;
  if (v6 > a2)
  {
    char v35 = 1;
    double v5 = *(double *)&v92;
    double v34 = v93;
    double v8 = *(double *)&v45;
    double v40 = v95;
    double v7 = *(double *)&v96;
    goto LABEL_32;
  }
  double v5 = *(double *)&v92;
  double v34 = v93;
  *(double *)uint64_t v102 = v93;
  *(double *)&v102[1] = v8;
  *(double *)&v102[2] = v4;
  *(double *)&v102[3] = v98;
  double v40 = v95;
  double v7 = *(double *)&v96;
  v102[4] = v39;
  v102[5] = v96;
  double v8 = *(double *)&v45;
  v102[6] = v45;
  *(double *)&v102[7] = v95;
  v102[8] = v41;
  v102[9] = v92;
  *(double *)&_OWORD v102[10] = v94;
  if (v3 < a2)
  {
    char v35 = 0;
    goto LABEL_32;
  }
  double v80 = v37;
  double v76 = *(double *)&v39;
  double v77 = *(double *)&v41;
  double v78 = v36;
  *(double *)uint64_t v101 = v84;
  *(double *)&v101[1] = v83;
  *(double *)&v101[2] = v82;
  *(double *)&v101[3] = v91;
  v101[4] = v90;
  *(double *)&v101[5] = v89;
  *(double *)&v101[6] = v88;
  *(double *)&v101[7] = v87;
  v101[8] = v86;
  *(double *)&v101[9] = v85;
  *(double *)&v101[10] = v46;
  double v79 = v46;
  uint64_t result = sub_10004606C((uint64_t)v101, (uint64_t)v102);
  if (result)
  {
    char v35 = 0;
    double v34 = v84;
    double v36 = v83;
    double v37 = v82;
    uint64_t v39 = v90;
    double v38 = v91;
    double v8 = v88;
    double v7 = v89;
    uint64_t v41 = v86;
    double v40 = v87;
    double v5 = v85;
    double v42 = v79;
    goto LABEL_32;
  }
  double v47 = (a2 - v94) / (v79 - v94);
  double v6 = (v84 - v93) * v47;
  double v48 = (v83 - v78) * v47;
  uint64_t v100 = _swiftEmptyArrayStorage;
  sub_100040848(0, 4, 0);
  double v20 = v48;
  double v49 = _swiftEmptyArrayStorage;
  double v3 = v6 + v80;
  double v4 = v48 + v98;
  int64_t v16 = _swiftEmptyArrayStorage[2];
  unint64_t v19 = _swiftEmptyArrayStorage[3];
  unint64_t v50 = v19 >> 1;
  unint64_t v13 = v16 + 1;
  if (v19 >> 1 <= v16) {
    goto LABEL_35;
  }
LABEL_22:
  double v51 = v77;
  v49[2] = v13;
  uint64_t v52 = (double *)&v49[2 * v16];
  v52[4] = v3;
  v52[5] = v4;
  double v53 = v20 + v7;
  int64_t v54 = v16 + 2;
  if (v50 <= v13)
  {
    double v73 = v20;
    sub_100040848(v19 > 1, v54, 1);
    double v20 = v73;
    double v51 = v77;
    double v49 = v100;
  }
  v49[2] = v54;
  uint64_t v55 = (double *)&v49[2 * v13];
  v55[4] = v6 + v76;
  v55[5] = v53;
  double v56 = v6 + v51;
  double v57 = v20 + v5;
  unint64_t v59 = v49[2];
  unint64_t v58 = v49[3];
  unint64_t v60 = v59 + 1;
  if (v59 >= v58 >> 1)
  {
    double v74 = v20;
    sub_100040848(v58 > 1, v59 + 1, 1);
    double v20 = v74;
  }
  uint64_t v61 = (double *)v100;
  v100[2] = v60;
  uint64_t v62 = (double *)&v100[2 * v59];
  v62[4] = v56;
  v62[5] = v57;
  double v63 = v20 + v95;
  unint64_t v64 = v100[3];
  int64_t v65 = v59 + 2;
  if (v60 >= v64 >> 1)
  {
    double v75 = v20;
    sub_100040848(v64 > 1, v65, 1);
    double v20 = v75;
    uint64_t v61 = (double *)v100;
  }
  *((void *)v61 + 2) = v65;
  uint64_t v66 = &v61[2 * v60];
  v66[4] = v6 + v8;
  v66[5] = v63;
  unint64_t v67 = *((void *)v61 + 2);
  if (!v67)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v67 == 1)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v67 >= 4)
  {
    double v34 = v6 + v93;
    double v68 = v20 + v78;
    double v81 = v61[4];
    uint64_t v69 = *((uint64_t *)v61 + 6);
    uint64_t v70 = *((uint64_t *)v61 + 8);
    double v97 = v61[7];
    double v99 = v61[5];
    double v8 = v61[10];
    double v40 = v61[11];
    double v71 = v61[9];
    uint64_t result = swift_release();
    double v37 = v81;
    uint64_t v39 = v69;
    uint64_t v41 = v70;
    double v5 = v71;
    double v7 = v97;
    double v38 = v99;
    double v36 = v68;
    char v35 = 0;
    double v42 = a2;
    goto LABEL_32;
  }
LABEL_38:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

double sub_100037504@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 80);
  *a2 = result;
  return result;
}

uint64_t sub_100037510(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v3);
  double v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003FEC34(v13);
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  sub_10000F3B0(v13, v14);
  double v8 = (*(double (**)(uint64_t, uint64_t))(v7 + 88))(v6, v7);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v13);
  sub_1000CD800(0.7, v8);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_historyBuffer);
  sub_100040050(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(v9 + 48) + 16);
  os_unfair_lock_lock(v10);
  sub_100381C74((uint64_t)v5, v9);
  os_unfair_lock_unlock(v10);
  return sub_10003D8EC((uint64_t)v5, type metadata accessor for CVTrackedDetection.HistoryEntry);
}

uint64_t sub_100037690()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100037760()
{
  return type metadata accessor for CVTrackedDetection(0);
}

uint64_t type metadata accessor for CVTrackedDetection(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100519D68);
}

uint64_t sub_100037788()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_100037838(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (void *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = type metadata accessor for UUID();
    double v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, v3, v7);
    uint64_t v9 = v6[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)v3 + v9;
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v178 = v3;
        uint64_t v176 = v6;
        uint64_t v173 = v8;
        v8(v10, v11, v7);
        uint64_t v24 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v10[v24[5]] = *(_DWORD *)&v11[v24[5]];
        uint64_t v25 = v24[6];
        uint64_t v26 = &v10[v25];
        uint64_t v27 = &v11[v25];
        long long v28 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v28;
        long long v29 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v29;
        *(void *)&v10[v24[7]] = *(void *)&v11[v24[7]];
        *(void *)&v10[v24[8]] = *(void *)&v11[v24[8]];
        *(void *)&v10[v24[9]] = *(void *)&v11[v24[9]];
        v10[v24[10]] = v11[v24[10]];
        uint64_t v30 = v24[11];
        uint64_t v31 = &v10[v30];
        double v32 = &v11[v30];
        uint64_t v33 = *((void *)v32 + 1);
        *(void *)uint64_t v31 = *(void *)v32;
        *((void *)v31 + 1) = v33;
        uint64_t v34 = v24[12];
        char v35 = &v10[v34];
        double v36 = &v11[v34];
        uint64_t v37 = *((void *)v36 + 1);
        *(void *)char v35 = *(void *)v36;
        *((void *)v35 + 1) = v37;
        uint64_t v38 = v24[13];
        __dst = &v10[v38];
        uint64_t v170 = &v11[v38];
        uint64_t v39 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v169(v170, 1, v39))
        {
          uint64_t v41 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v170, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dst, v170, v39);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
        }
        uint64_t v78 = v24[14];
        double v79 = &v10[v78];
        double v80 = &v11[v78];
        unint64_t v81 = *((void *)v80 + 1);
        uint64_t v6 = v176;
        uint64_t v3 = v178;
        if (v81 >> 60 == 15)
        {
          *(_OWORD *)double v79 = *(_OWORD *)v80;
        }
        else
        {
          uint64_t v82 = *(void *)v80;
          sub_100038528(*(void *)v80, *((void *)v80 + 1));
          *(void *)double v79 = v82;
          *((void *)v79 + 1) = v81;
        }
        double v8 = v173;
        uint64_t v83 = v24[15];
        double v84 = &v10[v83];
        double v85 = &v11[v83];
        if (*(void *)v85)
        {
          uint64_t v86 = *((void *)v85 + 1);
          uint64_t v87 = *((void *)v85 + 2);
          *(void *)double v84 = *(void *)v85;
          *((void *)v84 + 1) = v86;
          *((void *)v84 + 2) = v87;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)double v84 = *(_OWORD *)v85;
          *((void *)v84 + 2) = *((void *)v85 + 2);
        }
        break;
      case 2u:
        v8(v10, v11, v7);
        double v42 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v10[v42[5]] = *(_DWORD *)&v11[v42[5]];
        uint64_t v43 = v42[6];
        unint64_t v44 = &v10[v43];
        uint64_t v45 = &v11[v43];
        long long v46 = *((_OWORD *)v45 + 3);
        *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
        *((_OWORD *)v44 + 3) = v46;
        long long v47 = *((_OWORD *)v45 + 1);
        *(_OWORD *)unint64_t v44 = *(_OWORD *)v45;
        *((_OWORD *)v44 + 1) = v47;
        uint64_t v48 = v42[7];
        double v49 = &v10[v48];
        unint64_t v50 = &v11[v48];
        uint64_t v52 = *(void *)v50;
        uint64_t v51 = *((void *)v50 + 1);
        *(void *)double v49 = v52;
        *((void *)v49 + 1) = v51;
        *(void *)&v10[v42[8]] = *(void *)&v11[v42[8]];
        *(void *)&v10[v42[9]] = *(void *)&v11[v42[9]];
        *(void *)&v10[v42[10]] = *(void *)&v11[v42[10]];
        uint64_t v174 = v8;
        *(void *)&v10[v42[11]] = *(void *)&v11[v42[11]];
        *(void *)&v10[v42[12]] = *(void *)&v11[v42[12]];
        uint64_t v53 = v42[13];
        int64_t v54 = *(void **)&v11[v53];
        *(void *)&v10[v53] = v54;
        v10[v42[14]] = v11[v42[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v55 = v54;
        double v8 = v174;
        break;
      case 3u:
      case 4u:
        v8(v10, v11, v7);
        double v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v10[v56[5]] = *(_DWORD *)&v11[v56[5]];
        uint64_t v57 = v56[6];
        unint64_t v58 = &v10[v57];
        unint64_t v59 = &v11[v57];
        long long v60 = *((_OWORD *)v59 + 3);
        *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
        *((_OWORD *)v58 + 3) = v60;
        long long v61 = *((_OWORD *)v59 + 1);
        *(_OWORD *)unint64_t v58 = *(_OWORD *)v59;
        *((_OWORD *)v58 + 1) = v61;
        uint64_t v62 = v56[7];
        double v63 = &v10[v62];
        unint64_t v64 = &v11[v62];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        *(void *)double v63 = v66;
        *((void *)v63 + 1) = v65;
        *(void *)&v10[v56[8]] = *(void *)&v11[v56[8]];
        *(void *)&v10[v56[9]] = *(void *)&v11[v56[9]];
        *(void *)&v10[v56[10]] = *(void *)&v11[v56[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v8(v10, v11, v7);
        unint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v10[v67[5]] = *(_DWORD *)&v11[v67[5]];
        uint64_t v68 = v67[6];
        uint64_t v69 = &v10[v68];
        uint64_t v70 = &v11[v68];
        long long v71 = *((_OWORD *)v70 + 3);
        *((_OWORD *)v69 + 2) = *((_OWORD *)v70 + 2);
        *((_OWORD *)v69 + 3) = v71;
        long long v72 = *((_OWORD *)v70 + 1);
        *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
        *((_OWORD *)v69 + 1) = v72;
        uint64_t v73 = v67[7];
        double v74 = &v10[v73];
        double v75 = &v11[v73];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        *(void *)double v74 = v77;
        *((void *)v74 + 1) = v76;
        *(void *)&v10[v67[8]] = *(void *)&v11[v67[8]];
        *(void *)&v10[v67[9]] = *(void *)&v11[v67[9]];
        swift_bridgeObjectRetain();
        break;
      default:
        v8(v10, v11, v7);
        uint64_t v12 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v10[v12[5]] = *(_DWORD *)&v11[v12[5]];
        uint64_t v13 = v12[6];
        uint64_t v14 = &v10[v13];
        uint64_t v15 = &v11[v13];
        long long v16 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v16;
        long long v17 = *((_OWORD *)v15 + 1);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v17;
        uint64_t v18 = v12[7];
        unint64_t v19 = &v10[v18];
        double v20 = &v11[v18];
        uint64_t v22 = *(void *)v20;
        uint64_t v21 = *((void *)v20 + 1);
        *(void *)unint64_t v19 = v22;
        *((void *)v19 + 1) = v21;
        *(void *)&v10[v12[8]] = *(void *)&v11[v12[8]];
        *(void *)&v10[v12[9]] = *(void *)&v11[v12[9]];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v88 = v6[6];
    double v89 = (char *)a1 + v88;
    uint64_t v90 = (char *)v3 + v88;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v177 = v6;
        v8(v89, v90, v7);
        uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v89[v102[5]] = *(_DWORD *)&v90[v102[5]];
        uint64_t v103 = v102[6];
        float v104 = &v89[v103];
        char v105 = &v90[v103];
        long long v106 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v106;
        long long v107 = *((_OWORD *)v105 + 1);
        *(_OWORD *)float v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v107;
        *(void *)&v89[v102[7]] = *(void *)&v90[v102[7]];
        *(void *)&v89[v102[8]] = *(void *)&v90[v102[8]];
        *(void *)&v89[v102[9]] = *(void *)&v90[v102[9]];
        v89[v102[10]] = v90[v102[10]];
        uint64_t v108 = v102[11];
        uint64_t v109 = &v89[v108];
        uint64_t v110 = &v90[v108];
        uint64_t v111 = *((void *)v110 + 1);
        *(void *)uint64_t v109 = *(void *)v110;
        *((void *)v109 + 1) = v111;
        uint64_t v112 = v102[12];
        uint64_t v113 = &v89[v112];
        uint64_t v114 = &v90[v112];
        uint64_t v115 = *((void *)v114 + 1);
        *(void *)uint64_t v113 = *(void *)v114;
        *((void *)v113 + 1) = v115;
        uint64_t v116 = v102[13];
        uint64_t v175 = &v89[v116];
        __dsta = &v90[v116];
        uint64_t v117 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v118 = *(void *)(v117 - 8);
        uint64_t v119 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v119(__dsta, 1, v117))
        {
          uint64_t v120 = sub_10000F214(&qword_100524BD0);
          memcpy(v175, __dsta, *(void *)(*(void *)(v120 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v175, __dsta, v117);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(v175, 0, 1, v117);
        }
        uint64_t v157 = v102[14];
        uint64_t v158 = &v89[v157];
        uint64_t v159 = &v90[v157];
        unint64_t v160 = *((void *)v159 + 1);
        uint64_t v6 = v177;
        if (v160 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
        }
        else
        {
          uint64_t v161 = *(void *)v159;
          sub_100038528(*(void *)v159, *((void *)v159 + 1));
          *(void *)uint64_t v158 = v161;
          *((void *)v158 + 1) = v160;
        }
        uint64_t v162 = v102[15];
        uint64_t v163 = &v89[v162];
        uint64_t v164 = &v90[v162];
        if (*(void *)v164)
        {
          uint64_t v165 = *((void *)v164 + 1);
          uint64_t v166 = *((void *)v164 + 2);
          *(void *)uint64_t v163 = *(void *)v164;
          *((void *)v163 + 1) = v165;
          *((void *)v163 + 2) = v166;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
          *((void *)v163 + 2) = *((void *)v164 + 2);
        }
        break;
      case 2u:
        v8(v89, v90, v7);
        long long v121 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v89[v121[5]] = *(_DWORD *)&v90[v121[5]];
        uint64_t v122 = v121[6];
        long long v123 = &v89[v122];
        long long v124 = &v90[v122];
        long long v125 = *((_OWORD *)v124 + 3);
        *((_OWORD *)v123 + 2) = *((_OWORD *)v124 + 2);
        *((_OWORD *)v123 + 3) = v125;
        long long v126 = *((_OWORD *)v124 + 1);
        *(_OWORD *)long long v123 = *(_OWORD *)v124;
        *((_OWORD *)v123 + 1) = v126;
        uint64_t v127 = v121[7];
        CGRect v128 = &v89[v127];
        CGRect v129 = &v90[v127];
        uint64_t v131 = *(void *)v129;
        uint64_t v130 = *((void *)v129 + 1);
        *(void *)CGRect v128 = v131;
        *((void *)v128 + 1) = v130;
        *(void *)&v89[v121[8]] = *(void *)&v90[v121[8]];
        *(void *)&v89[v121[9]] = *(void *)&v90[v121[9]];
        *(void *)&v89[v121[10]] = *(void *)&v90[v121[10]];
        *(void *)&v89[v121[11]] = *(void *)&v90[v121[11]];
        *(void *)&v89[v121[12]] = *(void *)&v90[v121[12]];
        uint64_t v132 = v121[13];
        long long v133 = *(void **)&v90[v132];
        *(void *)&v89[v132] = v133;
        v89[v121[14]] = v90[v121[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v134 = v133;
        break;
      case 3u:
      case 4u:
        v8(v89, v90, v7);
        uint64_t v135 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v89[v135[5]] = *(_DWORD *)&v90[v135[5]];
        uint64_t v136 = v135[6];
        uint64_t v137 = &v89[v136];
        uint64_t v138 = &v90[v136];
        long long v139 = *((_OWORD *)v138 + 3);
        *((_OWORD *)v137 + 2) = *((_OWORD *)v138 + 2);
        *((_OWORD *)v137 + 3) = v139;
        long long v140 = *((_OWORD *)v138 + 1);
        *(_OWORD *)uint64_t v137 = *(_OWORD *)v138;
        *((_OWORD *)v137 + 1) = v140;
        uint64_t v141 = v135[7];
        uint64_t v142 = &v89[v141];
        uint64_t v143 = &v90[v141];
        uint64_t v145 = *(void *)v143;
        uint64_t v144 = *((void *)v143 + 1);
        *(void *)uint64_t v142 = v145;
        *((void *)v142 + 1) = v144;
        *(void *)&v89[v135[8]] = *(void *)&v90[v135[8]];
        *(void *)&v89[v135[9]] = *(void *)&v90[v135[9]];
        *(void *)&v89[v135[10]] = *(void *)&v90[v135[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v8(v89, v90, v7);
        uint64_t v146 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v89[v146[5]] = *(_DWORD *)&v90[v146[5]];
        uint64_t v147 = v146[6];
        uint64_t v148 = &v89[v147];
        uint64_t v149 = &v90[v147];
        long long v150 = *((_OWORD *)v149 + 3);
        *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
        *((_OWORD *)v148 + 3) = v150;
        long long v151 = *((_OWORD *)v149 + 1);
        *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
        *((_OWORD *)v148 + 1) = v151;
        uint64_t v152 = v146[7];
        uint64_t v153 = &v89[v152];
        uint64_t v154 = &v90[v152];
        uint64_t v156 = *(void *)v154;
        uint64_t v155 = *((void *)v154 + 1);
        *(void *)uint64_t v153 = v156;
        *((void *)v153 + 1) = v155;
        *(void *)&v89[v146[8]] = *(void *)&v90[v146[8]];
        *(void *)&v89[v146[9]] = *(void *)&v90[v146[9]];
        swift_bridgeObjectRetain();
        break;
      default:
        v8(v89, v90, v7);
        double v91 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v89[v91[5]] = *(_DWORD *)&v90[v91[5]];
        uint64_t v92 = v91[6];
        double v93 = &v89[v92];
        double v94 = &v90[v92];
        long long v95 = *((_OWORD *)v94 + 3);
        *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
        *((_OWORD *)v93 + 3) = v95;
        long long v96 = *((_OWORD *)v94 + 1);
        *(_OWORD *)double v93 = *(_OWORD *)v94;
        *((_OWORD *)v93 + 1) = v96;
        uint64_t v97 = v91[7];
        double v98 = &v89[v97];
        double v99 = &v90[v97];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        *(void *)double v98 = v101;
        *((void *)v98 + 1) = v100;
        *(void *)&v89[v91[8]] = *(void *)&v90[v91[8]];
        *(void *)&v89[v91[9]] = *(void *)&v90[v91[9]];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v167 = v6[8];
    *((unsigned char *)a1 + v6[7]) = *((unsigned char *)v3 + v6[7]);
    *(void *)((char *)a1 + v167) = *(void *)((char *)v3 + v167);
    *(_DWORD *)((char *)a1 + v6[9]) = *(_DWORD *)((char *)v3 + v6[9]);
  }
  return a1;
}

uint64_t sub_100038528(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void sub_100038580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v5(v6, v4);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_12;
    case 1u:
      v5(v6, v4);
      uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v6 + v7[13];
      uint64_t v9 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v22 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v9);
      }
      uint64_t v10 = (uint64_t *)(v6 + v7[14]);
      unint64_t v11 = v10[1];
      if (v11 >> 60 != 15) {
        sub_100038B34(*v10, v11);
      }
      if (*(void *)(v6 + v7[15]))
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      v5(v6, v4);
      uint64_t v12 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 3u:
    case 4u:
      v5(v6, v4);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 5u:
      v5(v6, v4);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v13 = a1 + *(int *)(a2 + 24);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v5(v13, v4);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_30;
    case 1u:
      v5(v13, v4);
      uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v13 + v14[13];
      uint64_t v16 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v17 = *(void *)(v16 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      }
      uint64_t v18 = (uint64_t *)(v13 + v14[14]);
      unint64_t v19 = v18[1];
      if (v19 >> 60 != 15) {
        sub_100038B34(*v18, v19);
      }
      if (!*(void *)(v13 + v14[15])) {
        return;
      }
      swift_bridgeObjectRelease();
LABEL_22:
      swift_release();
      return;
    case 2u:
      v5(v13, v4);
      uint64_t v20 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void **)(v13 + *(int *)(v20 + 52));

      return;
    case 3u:
    case 4u:
      v5(v13, v4);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    case 5u:
      v5(v13, v4);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_30:
      swift_bridgeObjectRelease();
      return;
    default:
      return;
  }
}

uint64_t sub_100038B34(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100038B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v178 = a3;
      uint64_t v171 = a1;
      uint64_t v173 = a2;
      uint64_t v175 = v7;
      v7(v9, v10, v6);
      uint64_t v22 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(v9 + v22[5]) = *(_DWORD *)(v10 + v22[5]);
      uint64_t v23 = v22[6];
      uint64_t v24 = (_OWORD *)(v9 + v23);
      uint64_t v25 = (_OWORD *)(v10 + v23);
      long long v26 = v25[3];
      v24[2] = v25[2];
      v24[3] = v26;
      long long v27 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v27;
      *(void *)(v9 + v22[7]) = *(void *)(v10 + v22[7]);
      *(void *)(v9 + v22[8]) = *(void *)(v10 + v22[8]);
      *(void *)(v9 + v22[9]) = *(void *)(v10 + v22[9]);
      *(unsigned char *)(v9 + v22[10]) = *(unsigned char *)(v10 + v22[10]);
      uint64_t v28 = v22[11];
      long long v29 = (void *)(v9 + v28);
      uint64_t v30 = (void *)(v10 + v28);
      uint64_t v31 = v30[1];
      *long long v29 = *v30;
      v29[1] = v31;
      uint64_t v32 = v22[12];
      uint64_t v33 = (void *)(v9 + v32);
      uint64_t v34 = (void *)(v10 + v32);
      uint64_t v35 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v35;
      uint64_t v36 = v22[13];
      __dst = (void *)(v9 + v36);
      uint64_t v169 = (const void *)(v10 + v36);
      uint64_t v37 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v39(v169, 1, v37))
      {
        uint64_t v40 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v169, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(__dst, v169, v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
      }
      uint64_t v77 = v22[14];
      uint64_t v78 = v9 + v77;
      double v79 = (uint64_t *)(v10 + v77);
      unint64_t v80 = v79[1];
      uint64_t v7 = v175;
      a3 = v178;
      if (v80 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
      }
      else
      {
        uint64_t v81 = *v79;
        sub_100038528(*v79, v79[1]);
        *(void *)uint64_t v78 = v81;
        *(void *)(v78 + 8) = v80;
      }
      a1 = v171;
      a2 = v173;
      uint64_t v82 = v22[15];
      uint64_t v83 = (void *)(v9 + v82);
      double v84 = (void *)(v10 + v82);
      if (*v84)
      {
        uint64_t v85 = v84[1];
        uint64_t v86 = v84[2];
        *uint64_t v83 = *v84;
        v83[1] = v85;
        v83[2] = v86;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
        v83[2] = v84[2];
      }
      break;
    case 2u:
      v7(v9, v10, v6);
      uint64_t v41 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v9 + v41[5]) = *(_DWORD *)(v10 + v41[5]);
      uint64_t v42 = v41[6];
      uint64_t v43 = (_OWORD *)(v9 + v42);
      unint64_t v44 = (_OWORD *)(v10 + v42);
      long long v45 = v44[3];
      v43[2] = v44[2];
      v43[3] = v45;
      long long v46 = v44[1];
      *uint64_t v43 = *v44;
      v43[1] = v46;
      uint64_t v47 = v41[7];
      uint64_t v48 = (void *)(v9 + v47);
      double v49 = (uint64_t *)(v10 + v47);
      uint64_t v51 = *v49;
      uint64_t v50 = v49[1];
      void *v48 = v51;
      v48[1] = v50;
      *(void *)(v9 + v41[8]) = *(void *)(v10 + v41[8]);
      *(void *)(v9 + v41[9]) = *(void *)(v10 + v41[9]);
      *(void *)(v9 + v41[10]) = *(void *)(v10 + v41[10]);
      uint64_t v176 = v7;
      *(void *)(v9 + v41[11]) = *(void *)(v10 + v41[11]);
      *(void *)(v9 + v41[12]) = *(void *)(v10 + v41[12]);
      uint64_t v52 = v41[13];
      uint64_t v53 = *(void **)(v10 + v52);
      *(void *)(v9 + v52) = v53;
      *(unsigned char *)(v9 + v41[14]) = *(unsigned char *)(v10 + v41[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v54 = v53;
      uint64_t v7 = v176;
      break;
    case 3u:
    case 4u:
      v7(v9, v10, v6);
      id v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(v9 + v55[5]) = *(_DWORD *)(v10 + v55[5]);
      uint64_t v56 = v55[6];
      uint64_t v57 = (_OWORD *)(v9 + v56);
      unint64_t v58 = (_OWORD *)(v10 + v56);
      long long v59 = v58[3];
      v57[2] = v58[2];
      uint64_t v57[3] = v59;
      long long v60 = v58[1];
      *uint64_t v57 = *v58;
      v57[1] = v60;
      uint64_t v61 = v55[7];
      uint64_t v62 = (void *)(v9 + v61);
      double v63 = (uint64_t *)(v10 + v61);
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      *uint64_t v62 = v65;
      v62[1] = v64;
      *(void *)(v9 + v55[8]) = *(void *)(v10 + v55[8]);
      *(void *)(v9 + v55[9]) = *(void *)(v10 + v55[9]);
      *(void *)(v9 + v55[10]) = *(void *)(v10 + v55[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      v7(v9, v10, v6);
      uint64_t v66 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(v9 + v66[5]) = *(_DWORD *)(v10 + v66[5]);
      uint64_t v67 = v66[6];
      uint64_t v68 = (_OWORD *)(v9 + v67);
      uint64_t v69 = (_OWORD *)(v10 + v67);
      long long v70 = v69[3];
      v68[2] = v69[2];
      v68[3] = v70;
      long long v71 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v71;
      uint64_t v72 = v66[7];
      uint64_t v73 = (void *)(v9 + v72);
      double v74 = (uint64_t *)(v10 + v72);
      uint64_t v76 = *v74;
      uint64_t v75 = v74[1];
      void *v73 = v76;
      v73[1] = v75;
      *(void *)(v9 + v66[8]) = *(void *)(v10 + v66[8]);
      *(void *)(v9 + v66[9]) = *(void *)(v10 + v66[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      v7(v9, v10, v6);
      unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
      uint64_t v12 = v11[6];
      uint64_t v13 = (_OWORD *)(v9 + v12);
      uint64_t v14 = (_OWORD *)(v10 + v12);
      long long v15 = v14[3];
      v13[2] = v14[2];
      uint64_t v13[3] = v15;
      long long v16 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v16;
      uint64_t v17 = v11[7];
      uint64_t v18 = (void *)(v9 + v17);
      unint64_t v19 = (uint64_t *)(v10 + v17);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      *uint64_t v18 = v21;
      v18[1] = v20;
      *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
      *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v87 = a3[6];
  uint64_t v88 = a1 + v87;
  uint64_t v89 = a2 + v87;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v179 = a3;
      uint64_t v172 = a1;
      uint64_t v174 = a2;
      v7(v88, v89, v6);
      uint64_t v101 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(v88 + v101[5]) = *(_DWORD *)(v89 + v101[5]);
      uint64_t v102 = v101[6];
      uint64_t v103 = (_OWORD *)(v88 + v102);
      float v104 = (_OWORD *)(v89 + v102);
      long long v105 = v104[3];
      v103[2] = v104[2];
      v103[3] = v105;
      long long v106 = v104[1];
      _OWORD *v103 = *v104;
      v103[1] = v106;
      *(void *)(v88 + v101[7]) = *(void *)(v89 + v101[7]);
      *(void *)(v88 + v101[8]) = *(void *)(v89 + v101[8]);
      *(void *)(v88 + v101[9]) = *(void *)(v89 + v101[9]);
      *(unsigned char *)(v88 + v101[10]) = *(unsigned char *)(v89 + v101[10]);
      uint64_t v107 = v101[11];
      uint64_t v108 = (void *)(v88 + v107);
      uint64_t v109 = (void *)(v89 + v107);
      uint64_t v110 = v109[1];
      *uint64_t v108 = *v109;
      v108[1] = v110;
      uint64_t v111 = v101[12];
      uint64_t v112 = (void *)(v88 + v111);
      uint64_t v113 = (void *)(v89 + v111);
      uint64_t v114 = v113[1];
      *uint64_t v112 = *v113;
      v112[1] = v114;
      uint64_t v115 = v101[13];
      uint64_t v177 = (void *)(v88 + v115);
      uint64_t v116 = (const void *)(v89 + v115);
      uint64_t v117 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v118 = *(void *)(v117 - 8);
      uint64_t v119 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v118 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v119(v116, 1, v117))
      {
        uint64_t v120 = sub_10000F214(&qword_100524BD0);
        memcpy(v177, v116, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v118 + 16))(v177, v116, v117);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v118 + 56))(v177, 0, 1, v117);
      }
      uint64_t v157 = v101[14];
      uint64_t v158 = v88 + v157;
      uint64_t v159 = (uint64_t *)(v89 + v157);
      unint64_t v160 = v159[1];
      a2 = v174;
      a3 = v179;
      if (v160 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
      }
      else
      {
        uint64_t v161 = *v159;
        sub_100038528(*v159, v159[1]);
        *(void *)uint64_t v158 = v161;
        *(void *)(v158 + 8) = v160;
      }
      a1 = v172;
      uint64_t v162 = v101[15];
      uint64_t v163 = (void *)(v88 + v162);
      uint64_t v164 = (void *)(v89 + v162);
      if (*v164)
      {
        uint64_t v165 = v164[1];
        uint64_t v166 = v164[2];
        *uint64_t v163 = *v164;
        v163[1] = v165;
        v163[2] = v166;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
        v163[2] = v164[2];
      }
      break;
    case 2u:
      v7(v88, v89, v6);
      long long v121 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v88 + v121[5]) = *(_DWORD *)(v89 + v121[5]);
      uint64_t v122 = v121[6];
      long long v123 = (_OWORD *)(v88 + v122);
      long long v124 = (_OWORD *)(v89 + v122);
      long long v125 = v124[3];
      v123[2] = v124[2];
      v123[3] = v125;
      long long v126 = v124[1];
      *long long v123 = *v124;
      v123[1] = v126;
      uint64_t v127 = v121[7];
      CGRect v128 = (void *)(v88 + v127);
      CGRect v129 = (uint64_t *)(v89 + v127);
      uint64_t v131 = *v129;
      uint64_t v130 = v129[1];
      void *v128 = v131;
      v128[1] = v130;
      *(void *)(v88 + v121[8]) = *(void *)(v89 + v121[8]);
      *(void *)(v88 + v121[9]) = *(void *)(v89 + v121[9]);
      *(void *)(v88 + v121[10]) = *(void *)(v89 + v121[10]);
      *(void *)(v88 + v121[11]) = *(void *)(v89 + v121[11]);
      *(void *)(v88 + v121[12]) = *(void *)(v89 + v121[12]);
      uint64_t v132 = v121[13];
      long long v133 = *(void **)(v89 + v132);
      *(void *)(v88 + v132) = v133;
      *(unsigned char *)(v88 + v121[14]) = *(unsigned char *)(v89 + v121[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v134 = v133;
      break;
    case 3u:
    case 4u:
      v7(v88, v89, v6);
      uint64_t v135 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(v88 + v135[5]) = *(_DWORD *)(v89 + v135[5]);
      uint64_t v136 = v135[6];
      uint64_t v137 = (_OWORD *)(v88 + v136);
      uint64_t v138 = (_OWORD *)(v89 + v136);
      long long v139 = v138[3];
      v137[2] = v138[2];
      v137[3] = v139;
      long long v140 = v138[1];
      *uint64_t v137 = *v138;
      v137[1] = v140;
      uint64_t v141 = v135[7];
      uint64_t v142 = (void *)(v88 + v141);
      uint64_t v143 = (uint64_t *)(v89 + v141);
      uint64_t v145 = *v143;
      uint64_t v144 = v143[1];
      *uint64_t v142 = v145;
      v142[1] = v144;
      *(void *)(v88 + v135[8]) = *(void *)(v89 + v135[8]);
      *(void *)(v88 + v135[9]) = *(void *)(v89 + v135[9]);
      *(void *)(v88 + v135[10]) = *(void *)(v89 + v135[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      v7(v88, v89, v6);
      uint64_t v146 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(v88 + v146[5]) = *(_DWORD *)(v89 + v146[5]);
      uint64_t v147 = v146[6];
      uint64_t v148 = (_OWORD *)(v88 + v147);
      uint64_t v149 = (_OWORD *)(v89 + v147);
      long long v150 = v149[3];
      v148[2] = v149[2];
      v148[3] = v150;
      long long v151 = v149[1];
      _OWORD *v148 = *v149;
      v148[1] = v151;
      uint64_t v152 = v146[7];
      uint64_t v153 = (void *)(v88 + v152);
      uint64_t v154 = (uint64_t *)(v89 + v152);
      uint64_t v156 = *v154;
      uint64_t v155 = v154[1];
      *uint64_t v153 = v156;
      v153[1] = v155;
      *(void *)(v88 + v146[8]) = *(void *)(v89 + v146[8]);
      *(void *)(v88 + v146[9]) = *(void *)(v89 + v146[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      v7(v88, v89, v6);
      uint64_t v90 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(v88 + v90[5]) = *(_DWORD *)(v89 + v90[5]);
      uint64_t v91 = v90[6];
      uint64_t v92 = (_OWORD *)(v88 + v91);
      double v93 = (_OWORD *)(v89 + v91);
      long long v94 = v93[3];
      v92[2] = v93[2];
      v92[3] = v94;
      long long v95 = v93[1];
      *uint64_t v92 = *v93;
      v92[1] = v95;
      uint64_t v96 = v90[7];
      uint64_t v97 = (void *)(v88 + v96);
      double v98 = (uint64_t *)(v89 + v96);
      uint64_t v100 = *v98;
      uint64_t v99 = v98[1];
      *uint64_t v97 = v100;
      v97[1] = v99;
      *(void *)(v88 + v90[8]) = *(void *)(v89 + v90[8]);
      *(void *)(v88 + v90[9]) = *(void *)(v89 + v90[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v167 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v167) = *(void *)(a2 + v167);
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100039824(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    sub_10003D8EC(a1 + v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v162 = a3;
        uint64_t v159 = v7;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
        uint64_t v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v9 + v21[5]) = *(_DWORD *)(v10 + v21[5]);
        uint64_t v22 = v21[6];
        uint64_t v23 = (_OWORD *)(v9 + v22);
        uint64_t v24 = (_OWORD *)(v10 + v22);
        long long v26 = v24[2];
        long long v25 = v24[3];
        long long v27 = v24[1];
        *uint64_t v23 = *v24;
        v23[1] = v27;
        void v23[2] = v26;
        v23[3] = v25;
        *(void *)(v9 + v21[7]) = *(void *)(v10 + v21[7]);
        *(void *)(v9 + v21[8]) = *(void *)(v10 + v21[8]);
        *(void *)(v9 + v21[9]) = *(void *)(v10 + v21[9]);
        *(unsigned char *)(v9 + v21[10]) = *(unsigned char *)(v10 + v21[10]);
        uint64_t v28 = v21[11];
        long long v29 = (void *)(v9 + v28);
        uint64_t v30 = (void *)(v10 + v28);
        *long long v29 = *v30;
        v29[1] = v30[1];
        uint64_t v31 = v21[12];
        uint64_t v32 = (void *)(v9 + v31);
        uint64_t v33 = (void *)(v10 + v31);
        *uint64_t v32 = *v33;
        v32[1] = v33[1];
        uint64_t v34 = v21[13];
        __dst = (void *)(v9 + v34);
        uint64_t v156 = (const void *)(v10 + v34);
        uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v154 = *(void *)(v35 - 8);
        uint64_t v155 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v154 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v155(v156, 1, v35))
        {
          uint64_t v36 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v156, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v154 + 16))(__dst, v156, v35);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v154 + 56))(__dst, 0, 1, v35);
        }
        uint64_t v70 = v21[14];
        uint64_t v71 = v9 + v70;
        uint64_t v72 = (uint64_t *)(v10 + v70);
        unint64_t v73 = v72[1];
        uint64_t v7 = v159;
        if (v73 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
        }
        else
        {
          uint64_t v74 = *v72;
          sub_100038528(*v72, v72[1]);
          *(void *)uint64_t v71 = v74;
          *(void *)(v71 + 8) = v73;
        }
        a3 = v162;
        uint64_t v75 = v21[15];
        uint64_t v76 = (void *)(v9 + v75);
        uint64_t v77 = (void *)(v10 + v75);
        if (*v77)
        {
          *uint64_t v76 = *v77;
          uint64_t v78 = v77[2];
          v76[1] = v77[1];
          v76[2] = v78;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v79 = *(_OWORD *)v77;
          v76[2] = v77[2];
          *(_OWORD *)uint64_t v76 = v79;
        }
        break;
      case 2u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
        uint64_t v37 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v9 + v37[5]) = *(_DWORD *)(v10 + v37[5]);
        uint64_t v38 = v37[6];
        uint64_t v39 = (_OWORD *)(v9 + v38);
        uint64_t v40 = (_OWORD *)(v10 + v38);
        long long v42 = v40[2];
        long long v41 = v40[3];
        long long v43 = v40[1];
        *uint64_t v39 = *v40;
        v39[1] = v43;
        void v39[2] = v42;
        uint64_t v39[3] = v41;
        uint64_t v44 = v37[7];
        long long v45 = (void *)(v9 + v44);
        long long v46 = (void *)(v10 + v44);
        *long long v45 = *v46;
        v45[1] = v46[1];
        *(void *)(v9 + v37[8]) = *(void *)(v10 + v37[8]);
        *(void *)(v9 + v37[9]) = *(void *)(v10 + v37[9]);
        *(void *)(v9 + v37[10]) = *(void *)(v10 + v37[10]);
        *(void *)(v9 + v37[11]) = *(void *)(v10 + v37[11]);
        *(void *)(v9 + v37[12]) = *(void *)(v10 + v37[12]);
        uint64_t v47 = v37[13];
        uint64_t v48 = *(void **)(v10 + v47);
        *(void *)(v9 + v47) = v48;
        *(unsigned char *)(v9 + v37[14]) = *(unsigned char *)(v10 + v37[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v49 = v48;
        break;
      case 3u:
      case 4u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
        uint64_t v50 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v9 + v50[5]) = *(_DWORD *)(v10 + v50[5]);
        uint64_t v51 = v50[6];
        uint64_t v52 = (_OWORD *)(v9 + v51);
        uint64_t v53 = (_OWORD *)(v10 + v51);
        long long v55 = v53[2];
        long long v54 = v53[3];
        long long v56 = v53[1];
        _OWORD *v52 = *v53;
        v52[1] = v56;
        v52[2] = v55;
        uint64_t v52[3] = v54;
        uint64_t v57 = v50[7];
        unint64_t v58 = (void *)(v9 + v57);
        long long v59 = (void *)(v10 + v57);
        *unint64_t v58 = *v59;
        v58[1] = v59[1];
        *(void *)(v9 + v50[8]) = *(void *)(v10 + v50[8]);
        *(void *)(v9 + v50[9]) = *(void *)(v10 + v50[9]);
        *(void *)(v9 + v50[10]) = *(void *)(v10 + v50[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
        long long v60 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v9 + v60[5]) = *(_DWORD *)(v10 + v60[5]);
        uint64_t v61 = v60[6];
        uint64_t v62 = (_OWORD *)(v9 + v61);
        double v63 = (_OWORD *)(v10 + v61);
        long long v65 = v63[2];
        long long v64 = v63[3];
        long long v66 = v63[1];
        *uint64_t v62 = *v63;
        v62[1] = v66;
        v62[2] = v65;
        v62[3] = v64;
        uint64_t v67 = v60[7];
        uint64_t v68 = (void *)(v9 + v67);
        uint64_t v69 = (void *)(v10 + v67);
        *uint64_t v68 = *v69;
        v68[1] = v69[1];
        *(void *)(v9 + v60[8]) = *(void *)(v10 + v60[8]);
        *(void *)(v9 + v60[9]) = *(void *)(v10 + v60[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
        unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
        uint64_t v12 = v11[6];
        uint64_t v13 = (_OWORD *)(v9 + v12);
        uint64_t v14 = (_OWORD *)(v10 + v12);
        long long v16 = v14[2];
        long long v15 = v14[3];
        long long v17 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v17;
        v13[2] = v16;
        uint64_t v13[3] = v15;
        uint64_t v18 = v11[7];
        unint64_t v19 = (void *)(v9 + v18);
        uint64_t v20 = (void *)(v10 + v18);
        *unint64_t v19 = *v20;
        v19[1] = v20[1];
        *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
        *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v80 = a3[6];
    uint64_t v81 = a1 + v80;
    uint64_t v82 = a2 + v80;
    sub_10003D8EC(a1 + v80, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v81, v82, v6);
        double v93 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v81 + v93[5]) = *(_DWORD *)(v82 + v93[5]);
        uint64_t v94 = v93[6];
        long long v95 = (_OWORD *)(v81 + v94);
        uint64_t v96 = (_OWORD *)(v82 + v94);
        long long v98 = v96[2];
        long long v97 = v96[3];
        long long v99 = v96[1];
        *long long v95 = *v96;
        v95[1] = v99;
        v95[2] = v98;
        v95[3] = v97;
        *(void *)(v81 + v93[7]) = *(void *)(v82 + v93[7]);
        *(void *)(v81 + v93[8]) = *(void *)(v82 + v93[8]);
        *(void *)(v81 + v93[9]) = *(void *)(v82 + v93[9]);
        *(unsigned char *)(v81 + v93[10]) = *(unsigned char *)(v82 + v93[10]);
        uint64_t v100 = v93[11];
        uint64_t v101 = (void *)(v81 + v100);
        uint64_t v102 = (void *)(v82 + v100);
        *uint64_t v101 = *v102;
        v101[1] = v102[1];
        uint64_t v103 = v93[12];
        float v104 = (void *)(v81 + v103);
        long long v105 = (void *)(v82 + v103);
        *float v104 = *v105;
        v104[1] = v105[1];
        uint64_t v106 = v93[13];
        __dsta = (void *)(v81 + v106);
        uint64_t v158 = (const void *)(v82 + v106);
        uint64_t v107 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v108 = *(void *)(v107 - 8);
        uint64_t v157 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v108 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v157(v158, 1, v107))
        {
          uint64_t v109 = sub_10000F214(&qword_100524BD0);
          memcpy(__dsta, v158, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v108 + 16))(__dsta, v158, v107);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56))(__dsta, 0, 1, v107);
        }
        uint64_t v143 = v93[14];
        uint64_t v144 = v81 + v143;
        uint64_t v145 = (uint64_t *)(v82 + v143);
        unint64_t v146 = v145[1];
        if (v146 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
        }
        else
        {
          uint64_t v147 = *v145;
          sub_100038528(*v145, v145[1]);
          *(void *)uint64_t v144 = v147;
          *(void *)(v144 + 8) = v146;
        }
        uint64_t v148 = v93[15];
        uint64_t v149 = (void *)(v81 + v148);
        long long v150 = (void *)(v82 + v148);
        if (*v150)
        {
          *uint64_t v149 = *v150;
          uint64_t v151 = v150[2];
          v149[1] = v150[1];
          v149[2] = v151;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v152 = *(_OWORD *)v150;
          v149[2] = v150[2];
          *(_OWORD *)uint64_t v149 = v152;
        }
        break;
      case 2u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v81, v82, v6);
        uint64_t v110 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v81 + v110[5]) = *(_DWORD *)(v82 + v110[5]);
        uint64_t v111 = v110[6];
        uint64_t v112 = (_OWORD *)(v81 + v111);
        uint64_t v113 = (_OWORD *)(v82 + v111);
        long long v115 = v113[2];
        long long v114 = v113[3];
        long long v116 = v113[1];
        *uint64_t v112 = *v113;
        v112[1] = v116;
        v112[2] = v115;
        v112[3] = v114;
        uint64_t v117 = v110[7];
        uint64_t v118 = (void *)(v81 + v117);
        uint64_t v119 = (void *)(v82 + v117);
        *uint64_t v118 = *v119;
        v118[1] = v119[1];
        *(void *)(v81 + v110[8]) = *(void *)(v82 + v110[8]);
        *(void *)(v81 + v110[9]) = *(void *)(v82 + v110[9]);
        *(void *)(v81 + v110[10]) = *(void *)(v82 + v110[10]);
        *(void *)(v81 + v110[11]) = *(void *)(v82 + v110[11]);
        *(void *)(v81 + v110[12]) = *(void *)(v82 + v110[12]);
        uint64_t v120 = v110[13];
        long long v121 = *(void **)(v82 + v120);
        *(void *)(v81 + v120) = v121;
        *(unsigned char *)(v81 + v110[14]) = *(unsigned char *)(v82 + v110[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v122 = v121;
        break;
      case 3u:
      case 4u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v81, v82, v6);
        long long v123 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v81 + v123[5]) = *(_DWORD *)(v82 + v123[5]);
        uint64_t v124 = v123[6];
        long long v125 = (_OWORD *)(v81 + v124);
        long long v126 = (_OWORD *)(v82 + v124);
        long long v128 = v126[2];
        long long v127 = v126[3];
        long long v129 = v126[1];
        *long long v125 = *v126;
        v125[1] = v129;
        v125[2] = v128;
        v125[3] = v127;
        uint64_t v130 = v123[7];
        uint64_t v131 = (void *)(v81 + v130);
        uint64_t v132 = (void *)(v82 + v130);
        *uint64_t v131 = *v132;
        v131[1] = v132[1];
        *(void *)(v81 + v123[8]) = *(void *)(v82 + v123[8]);
        *(void *)(v81 + v123[9]) = *(void *)(v82 + v123[9]);
        *(void *)(v81 + v123[10]) = *(void *)(v82 + v123[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v81, v82, v6);
        long long v133 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v81 + v133[5]) = *(_DWORD *)(v82 + v133[5]);
        uint64_t v134 = v133[6];
        uint64_t v135 = (_OWORD *)(v81 + v134);
        uint64_t v136 = (_OWORD *)(v82 + v134);
        long long v138 = v136[2];
        long long v137 = v136[3];
        long long v139 = v136[1];
        *uint64_t v135 = *v136;
        v135[1] = v139;
        v135[2] = v138;
        _OWORD v135[3] = v137;
        uint64_t v140 = v133[7];
        uint64_t v141 = (void *)(v81 + v140);
        uint64_t v142 = (void *)(v82 + v140);
        void *v141 = *v142;
        v141[1] = v142[1];
        *(void *)(v81 + v133[8]) = *(void *)(v82 + v133[8]);
        *(void *)(v81 + v133[9]) = *(void *)(v82 + v133[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v81, v82, v6);
        uint64_t v83 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v81 + v83[5]) = *(_DWORD *)(v82 + v83[5]);
        uint64_t v84 = v83[6];
        uint64_t v85 = (_OWORD *)(v81 + v84);
        uint64_t v86 = (_OWORD *)(v82 + v84);
        long long v88 = v86[2];
        long long v87 = v86[3];
        long long v89 = v86[1];
        *uint64_t v85 = *v86;
        v85[1] = v89;
        v85[2] = v88;
        v85[3] = v87;
        uint64_t v90 = v83[7];
        uint64_t v91 = (void *)(v81 + v90);
        uint64_t v92 = (void *)(v82 + v90);
        *uint64_t v91 = *v92;
        v91[1] = v92[1];
        *(void *)(v81 + v83[8]) = *(void *)(v82 + v83[8]);
        *(void *)(v81 + v83[9]) = *(void *)(v82 + v83[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10003A5DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  type metadata accessor for CVDetection();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v95 = a3;
      double v93 = v7;
      v7(v9, v10, v6);
      long long v17 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(v9 + v17[5]) = *(_DWORD *)(v10 + v17[5]);
      uint64_t v18 = v17[6];
      unint64_t v19 = (_OWORD *)(v9 + v18);
      uint64_t v20 = (_OWORD *)(v10 + v18);
      long long v21 = v20[3];
      v19[2] = v20[2];
      v19[3] = v21;
      long long v22 = v20[1];
      *unint64_t v19 = *v20;
      v19[1] = v22;
      *(void *)(v9 + v17[7]) = *(void *)(v10 + v17[7]);
      *(void *)(v9 + v17[8]) = *(void *)(v10 + v17[8]);
      *(void *)(v9 + v17[9]) = *(void *)(v10 + v17[9]);
      *(unsigned char *)(v9 + v17[10]) = *(unsigned char *)(v10 + v17[10]);
      *(_OWORD *)(v9 + v17[11]) = *(_OWORD *)(v10 + v17[11]);
      *(_OWORD *)(v9 + v17[12]) = *(_OWORD *)(v10 + v17[12]);
      uint64_t v23 = v17[13];
      uint64_t v94 = (void *)(v9 + v23);
      uint64_t v24 = (const void *)(v10 + v23);
      uint64_t v25 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_10000F214(&qword_100524BD0);
        memcpy(v94, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v94, v24, v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v94, 0, 1, v25);
      }
      *(_OWORD *)(v9 + v17[14]) = *(_OWORD *)(v10 + v17[14]);
      uint64_t v85 = v17[15];
      uint64_t v86 = v9 + v85;
      uint64_t v87 = v10 + v85;
      *(void *)(v86 + 16) = *(void *)(v87 + 16);
      *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
      a3 = v95;
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = v93;
      goto LABEL_9;
    case 2u:
      v7(v9, v10, v6);
      uint64_t v28 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(v9 + v28[5]) = *(_DWORD *)(v10 + v28[5]);
      uint64_t v29 = v28[6];
      uint64_t v30 = (_OWORD *)(v9 + v29);
      uint64_t v31 = (_OWORD *)(v10 + v29);
      long long v32 = v31[3];
      v30[2] = v31[2];
      v30[3] = v32;
      long long v33 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v33;
      *(_OWORD *)(v9 + v28[7]) = *(_OWORD *)(v10 + v28[7]);
      *(void *)(v9 + v28[8]) = *(void *)(v10 + v28[8]);
      *(void *)(v9 + v28[9]) = *(void *)(v10 + v28[9]);
      *(void *)(v9 + v28[10]) = *(void *)(v10 + v28[10]);
      *(void *)(v9 + v28[11]) = *(void *)(v10 + v28[11]);
      *(void *)(v9 + v28[12]) = *(void *)(v10 + v28[12]);
      *(void *)(v9 + v28[13]) = *(void *)(v10 + v28[13]);
      *(unsigned char *)(v9 + v28[14]) = *(unsigned char *)(v10 + v28[14]);
      goto LABEL_8;
    case 3u:
    case 4u:
      v7(v9, v10, v6);
      uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(v9 + v34[5]) = *(_DWORD *)(v10 + v34[5]);
      uint64_t v35 = v34[6];
      uint64_t v36 = (_OWORD *)(v9 + v35);
      uint64_t v37 = (_OWORD *)(v10 + v35);
      long long v38 = v37[3];
      void v36[2] = v37[2];
      v36[3] = v38;
      long long v39 = v37[1];
      _OWORD *v36 = *v37;
      v36[1] = v39;
      *(_OWORD *)(v9 + v34[7]) = *(_OWORD *)(v10 + v34[7]);
      *(void *)(v9 + v34[8]) = *(void *)(v10 + v34[8]);
      *(void *)(v9 + v34[9]) = *(void *)(v10 + v34[9]);
      *(void *)(v9 + v34[10]) = *(void *)(v10 + v34[10]);
      goto LABEL_8;
    case 5u:
      v7(v9, v10, v6);
      uint64_t v40 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(v9 + v40[5]) = *(_DWORD *)(v10 + v40[5]);
      uint64_t v41 = v40[6];
      long long v42 = (_OWORD *)(v9 + v41);
      long long v43 = (_OWORD *)(v10 + v41);
      long long v44 = v43[3];
      v42[2] = v43[2];
      v42[3] = v44;
      long long v45 = v43[1];
      *long long v42 = *v43;
      v42[1] = v45;
      *(_OWORD *)(v9 + v40[7]) = *(_OWORD *)(v10 + v40[7]);
      *(void *)(v9 + v40[8]) = *(void *)(v10 + v40[8]);
      *(void *)(v9 + v40[9]) = *(void *)(v10 + v40[9]);
      goto LABEL_8;
    default:
      v7(v9, v10, v6);
      unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
      uint64_t v12 = v11[6];
      uint64_t v13 = (_OWORD *)(v9 + v12);
      uint64_t v14 = (_OWORD *)(v10 + v12);
      long long v15 = v14[3];
      v13[2] = v14[2];
      uint64_t v13[3] = v15;
      long long v16 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v16;
      *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
      *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
      *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
LABEL_8:
      swift_storeEnumTagMultiPayload();
LABEL_9:
      uint64_t v46 = a3[6];
      uint64_t v47 = a1 + v46;
      uint64_t v48 = a2 + v46;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v96 = a3;
          v7(v47, v48, v6);
          long long v55 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)(v47 + v55[5]) = *(_DWORD *)(v48 + v55[5]);
          uint64_t v56 = v55[6];
          uint64_t v57 = (_OWORD *)(v47 + v56);
          unint64_t v58 = (_OWORD *)(v48 + v56);
          long long v59 = v58[3];
          v57[2] = v58[2];
          uint64_t v57[3] = v59;
          long long v60 = v58[1];
          *uint64_t v57 = *v58;
          v57[1] = v60;
          *(void *)(v47 + v55[7]) = *(void *)(v48 + v55[7]);
          *(void *)(v47 + v55[8]) = *(void *)(v48 + v55[8]);
          *(void *)(v47 + v55[9]) = *(void *)(v48 + v55[9]);
          *(unsigned char *)(v47 + v55[10]) = *(unsigned char *)(v48 + v55[10]);
          *(_OWORD *)(v47 + v55[11]) = *(_OWORD *)(v48 + v55[11]);
          *(_OWORD *)(v47 + v55[12]) = *(_OWORD *)(v48 + v55[12]);
          uint64_t v61 = v55[13];
          uint64_t v62 = (void *)(v47 + v61);
          double v63 = (const void *)(v48 + v61);
          uint64_t v64 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v65 = *(void *)(v64 - 8);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            uint64_t v66 = sub_10000F214(&qword_100524BD0);
            memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v65 + 32))(v62, v63, v64);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          }
          a3 = v96;
          *(_OWORD *)(v47 + v55[14]) = *(_OWORD *)(v48 + v55[14]);
          uint64_t v88 = v55[15];
          uint64_t v89 = v47 + v88;
          uint64_t v90 = v48 + v88;
          *(void *)(v89 + 16) = *(void *)(v90 + 16);
          *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
          break;
        case 2u:
          v7(v47, v48, v6);
          uint64_t v67 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)(v47 + v67[5]) = *(_DWORD *)(v48 + v67[5]);
          uint64_t v68 = v67[6];
          uint64_t v69 = (_OWORD *)(v47 + v68);
          uint64_t v70 = (_OWORD *)(v48 + v68);
          long long v71 = v70[3];
          v69[2] = v70[2];
          v69[3] = v71;
          long long v72 = v70[1];
          *uint64_t v69 = *v70;
          v69[1] = v72;
          *(_OWORD *)(v47 + v67[7]) = *(_OWORD *)(v48 + v67[7]);
          *(void *)(v47 + v67[8]) = *(void *)(v48 + v67[8]);
          *(void *)(v47 + v67[9]) = *(void *)(v48 + v67[9]);
          *(void *)(v47 + v67[10]) = *(void *)(v48 + v67[10]);
          *(void *)(v47 + v67[11]) = *(void *)(v48 + v67[11]);
          *(void *)(v47 + v67[12]) = *(void *)(v48 + v67[12]);
          *(void *)(v47 + v67[13]) = *(void *)(v48 + v67[13]);
          *(unsigned char *)(v47 + v67[14]) = *(unsigned char *)(v48 + v67[14]);
          break;
        case 3u:
        case 4u:
          v7(v47, v48, v6);
          unint64_t v73 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)(v47 + v73[5]) = *(_DWORD *)(v48 + v73[5]);
          uint64_t v74 = v73[6];
          uint64_t v75 = (_OWORD *)(v47 + v74);
          uint64_t v76 = (_OWORD *)(v48 + v74);
          long long v77 = v76[3];
          v75[2] = v76[2];
          v75[3] = v77;
          long long v78 = v76[1];
          *uint64_t v75 = *v76;
          v75[1] = v78;
          *(_OWORD *)(v47 + v73[7]) = *(_OWORD *)(v48 + v73[7]);
          *(void *)(v47 + v73[8]) = *(void *)(v48 + v73[8]);
          *(void *)(v47 + v73[9]) = *(void *)(v48 + v73[9]);
          *(void *)(v47 + v73[10]) = *(void *)(v48 + v73[10]);
          break;
        case 5u:
          v7(v47, v48, v6);
          long long v79 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)(v47 + v79[5]) = *(_DWORD *)(v48 + v79[5]);
          uint64_t v80 = v79[6];
          uint64_t v81 = (_OWORD *)(v47 + v80);
          uint64_t v82 = (_OWORD *)(v48 + v80);
          long long v83 = v82[3];
          v81[2] = v82[2];
          v81[3] = v83;
          long long v84 = v82[1];
          *uint64_t v81 = *v82;
          v81[1] = v84;
          *(_OWORD *)(v47 + v79[7]) = *(_OWORD *)(v48 + v79[7]);
          *(void *)(v47 + v79[8]) = *(void *)(v48 + v79[8]);
          *(void *)(v47 + v79[9]) = *(void *)(v48 + v79[9]);
          break;
        default:
          v7(v47, v48, v6);
          id v49 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)(v47 + v49[5]) = *(_DWORD *)(v48 + v49[5]);
          uint64_t v50 = v49[6];
          uint64_t v51 = (_OWORD *)(v47 + v50);
          uint64_t v52 = (_OWORD *)(v48 + v50);
          long long v53 = v52[3];
          v51[2] = v52[2];
          v51[3] = v53;
          long long v54 = v52[1];
          *uint64_t v51 = *v52;
          v51[1] = v54;
          *(_OWORD *)(v47 + v49[7]) = *(_OWORD *)(v48 + v49[7]);
          *(void *)(v47 + v49[8]) = *(void *)(v48 + v49[8]);
          *(void *)(v47 + v49[9]) = *(void *)(v48 + v49[9]);
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v91 = a3[8];
      *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
      *(void *)(a1 + v91) = *(void *)(a2 + v91);
      *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
      return a1;
  }
}

uint64_t sub_10003B028(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    sub_10003D8EC(a1 + v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        double v93 = a3;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
        long long v17 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v9 + v17[5]) = *(_DWORD *)(v10 + v17[5]);
        uint64_t v18 = v17[6];
        unint64_t v19 = (_OWORD *)(v9 + v18);
        uint64_t v20 = (_OWORD *)(v10 + v18);
        long long v21 = v20[3];
        v19[2] = v20[2];
        v19[3] = v21;
        long long v22 = v20[1];
        *unint64_t v19 = *v20;
        v19[1] = v22;
        *(void *)(v9 + v17[7]) = *(void *)(v10 + v17[7]);
        *(void *)(v9 + v17[8]) = *(void *)(v10 + v17[8]);
        *(void *)(v9 + v17[9]) = *(void *)(v10 + v17[9]);
        *(unsigned char *)(v9 + v17[10]) = *(unsigned char *)(v10 + v17[10]);
        *(_OWORD *)(v9 + v17[11]) = *(_OWORD *)(v10 + v17[11]);
        *(_OWORD *)(v9 + v17[12]) = *(_OWORD *)(v10 + v17[12]);
        uint64_t v23 = v17[13];
        uint64_t v94 = (void *)(v9 + v23);
        uint64_t v24 = (const void *)(v10 + v23);
        uint64_t v25 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = sub_10000F214(&qword_100524BD0);
          memcpy(v94, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v94, v24, v25);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v94, 0, 1, v25);
        }
        a3 = v93;
        *(_OWORD *)(v9 + v17[14]) = *(_OWORD *)(v10 + v17[14]);
        uint64_t v46 = v17[15];
        uint64_t v47 = v9 + v46;
        uint64_t v48 = v10 + v46;
        *(void *)(v47 + 16) = *(void *)(v48 + 16);
        *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        break;
      case 2u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
        uint64_t v28 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v9 + v28[5]) = *(_DWORD *)(v10 + v28[5]);
        uint64_t v29 = v28[6];
        uint64_t v30 = (_OWORD *)(v9 + v29);
        uint64_t v31 = (_OWORD *)(v10 + v29);
        long long v32 = v31[3];
        v30[2] = v31[2];
        v30[3] = v32;
        long long v33 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v33;
        *(_OWORD *)(v9 + v28[7]) = *(_OWORD *)(v10 + v28[7]);
        *(void *)(v9 + v28[8]) = *(void *)(v10 + v28[8]);
        *(void *)(v9 + v28[9]) = *(void *)(v10 + v28[9]);
        *(void *)(v9 + v28[10]) = *(void *)(v10 + v28[10]);
        *(void *)(v9 + v28[11]) = *(void *)(v10 + v28[11]);
        *(void *)(v9 + v28[12]) = *(void *)(v10 + v28[12]);
        *(void *)(v9 + v28[13]) = *(void *)(v10 + v28[13]);
        *(unsigned char *)(v9 + v28[14]) = *(unsigned char *)(v10 + v28[14]);
        break;
      case 3u:
      case 4u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
        uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v9 + v34[5]) = *(_DWORD *)(v10 + v34[5]);
        uint64_t v35 = v34[6];
        uint64_t v36 = (_OWORD *)(v9 + v35);
        uint64_t v37 = (_OWORD *)(v10 + v35);
        long long v38 = v37[3];
        void v36[2] = v37[2];
        v36[3] = v38;
        long long v39 = v37[1];
        _OWORD *v36 = *v37;
        v36[1] = v39;
        *(_OWORD *)(v9 + v34[7]) = *(_OWORD *)(v10 + v34[7]);
        *(void *)(v9 + v34[8]) = *(void *)(v10 + v34[8]);
        *(void *)(v9 + v34[9]) = *(void *)(v10 + v34[9]);
        *(void *)(v9 + v34[10]) = *(void *)(v10 + v34[10]);
        break;
      case 5u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
        uint64_t v40 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v9 + v40[5]) = *(_DWORD *)(v10 + v40[5]);
        uint64_t v41 = v40[6];
        long long v42 = (_OWORD *)(v9 + v41);
        long long v43 = (_OWORD *)(v10 + v41);
        long long v44 = v43[3];
        v42[2] = v43[2];
        v42[3] = v44;
        long long v45 = v43[1];
        *long long v42 = *v43;
        v42[1] = v45;
        *(_OWORD *)(v9 + v40[7]) = *(_OWORD *)(v10 + v40[7]);
        *(void *)(v9 + v40[8]) = *(void *)(v10 + v40[8]);
        *(void *)(v9 + v40[9]) = *(void *)(v10 + v40[9]);
        break;
      default:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
        unint64_t v11 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v9 + v11[5]) = *(_DWORD *)(v10 + v11[5]);
        uint64_t v12 = v11[6];
        uint64_t v13 = (_OWORD *)(v9 + v12);
        uint64_t v14 = (_OWORD *)(v10 + v12);
        long long v15 = v14[3];
        v13[2] = v14[2];
        uint64_t v13[3] = v15;
        long long v16 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v16;
        *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
        *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
        *(void *)(v9 + v11[9]) = *(void *)(v10 + v11[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = a3[6];
    uint64_t v50 = a1 + v49;
    uint64_t v51 = a2 + v49;
    sub_10003D8EC(a1 + v49, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v50, v51, v6);
        unint64_t v58 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(v50 + v58[5]) = *(_DWORD *)(v51 + v58[5]);
        uint64_t v59 = v58[6];
        long long v60 = (_OWORD *)(v50 + v59);
        uint64_t v61 = (_OWORD *)(v51 + v59);
        long long v62 = v61[3];
        v60[2] = v61[2];
        v60[3] = v62;
        long long v63 = v61[1];
        *long long v60 = *v61;
        v60[1] = v63;
        *(void *)(v50 + v58[7]) = *(void *)(v51 + v58[7]);
        *(void *)(v50 + v58[8]) = *(void *)(v51 + v58[8]);
        *(void *)(v50 + v58[9]) = *(void *)(v51 + v58[9]);
        *(unsigned char *)(v50 + v58[10]) = *(unsigned char *)(v51 + v58[10]);
        *(_OWORD *)(v50 + v58[11]) = *(_OWORD *)(v51 + v58[11]);
        *(_OWORD *)(v50 + v58[12]) = *(_OWORD *)(v51 + v58[12]);
        uint64_t v64 = v58[13];
        uint64_t v65 = (void *)(v50 + v64);
        uint64_t v66 = (const void *)(v51 + v64);
        uint64_t v67 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v68 = *(void *)(v67 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          uint64_t v69 = sub_10000F214(&qword_100524BD0);
          memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v65, v66, v67);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
        *(_OWORD *)(v50 + v58[14]) = *(_OWORD *)(v51 + v58[14]);
        uint64_t v88 = v58[15];
        uint64_t v89 = v50 + v88;
        uint64_t v90 = v51 + v88;
        *(void *)(v89 + 16) = *(void *)(v90 + 16);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        break;
      case 2u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v50, v51, v6);
        uint64_t v70 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(v50 + v70[5]) = *(_DWORD *)(v51 + v70[5]);
        uint64_t v71 = v70[6];
        long long v72 = (_OWORD *)(v50 + v71);
        unint64_t v73 = (_OWORD *)(v51 + v71);
        long long v74 = v73[3];
        v72[2] = v73[2];
        v72[3] = v74;
        long long v75 = v73[1];
        *long long v72 = *v73;
        v72[1] = v75;
        *(_OWORD *)(v50 + v70[7]) = *(_OWORD *)(v51 + v70[7]);
        *(void *)(v50 + v70[8]) = *(void *)(v51 + v70[8]);
        *(void *)(v50 + v70[9]) = *(void *)(v51 + v70[9]);
        *(void *)(v50 + v70[10]) = *(void *)(v51 + v70[10]);
        *(void *)(v50 + v70[11]) = *(void *)(v51 + v70[11]);
        *(void *)(v50 + v70[12]) = *(void *)(v51 + v70[12]);
        *(void *)(v50 + v70[13]) = *(void *)(v51 + v70[13]);
        *(unsigned char *)(v50 + v70[14]) = *(unsigned char *)(v51 + v70[14]);
        break;
      case 3u:
      case 4u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v50, v51, v6);
        uint64_t v76 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(v50 + v76[5]) = *(_DWORD *)(v51 + v76[5]);
        uint64_t v77 = v76[6];
        long long v78 = (_OWORD *)(v50 + v77);
        long long v79 = (_OWORD *)(v51 + v77);
        long long v80 = v79[3];
        v78[2] = v79[2];
        v78[3] = v80;
        long long v81 = v79[1];
        _OWORD *v78 = *v79;
        v78[1] = v81;
        *(_OWORD *)(v50 + v76[7]) = *(_OWORD *)(v51 + v76[7]);
        *(void *)(v50 + v76[8]) = *(void *)(v51 + v76[8]);
        *(void *)(v50 + v76[9]) = *(void *)(v51 + v76[9]);
        *(void *)(v50 + v76[10]) = *(void *)(v51 + v76[10]);
        break;
      case 5u:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v50, v51, v6);
        uint64_t v82 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(v50 + v82[5]) = *(_DWORD *)(v51 + v82[5]);
        uint64_t v83 = v82[6];
        long long v84 = (_OWORD *)(v50 + v83);
        uint64_t v85 = (_OWORD *)(v51 + v83);
        long long v86 = v85[3];
        v84[2] = v85[2];
        v84[3] = v86;
        long long v87 = v85[1];
        *long long v84 = *v85;
        v84[1] = v87;
        *(_OWORD *)(v50 + v82[7]) = *(_OWORD *)(v51 + v82[7]);
        *(void *)(v50 + v82[8]) = *(void *)(v51 + v82[8]);
        *(void *)(v50 + v82[9]) = *(void *)(v51 + v82[9]);
        break;
      default:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v50, v51, v6);
        uint64_t v52 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(v50 + v52[5]) = *(_DWORD *)(v51 + v52[5]);
        uint64_t v53 = v52[6];
        long long v54 = (_OWORD *)(v50 + v53);
        long long v55 = (_OWORD *)(v51 + v53);
        long long v56 = v55[3];
        v54[2] = v55[2];
        v54[3] = v56;
        long long v57 = v55[1];
        *long long v54 = *v55;
        v54[1] = v57;
        *(_OWORD *)(v50 + v52[7]) = *(_OWORD *)(v51 + v52[7]);
        *(void *)(v50 + v52[8]) = *(void *)(v51 + v52[8]);
        *(void *)(v50 + v52[9]) = *(void *)(v51 + v52[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v91 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v91) = *(void *)(a2 + v91);
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10003BB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003BB38);
}

uint64_t sub_10003BB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for CVDetection();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
      if (v14 >= 3) {
        return v14 - 2;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10003BC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003BC5C);
}

uint64_t sub_10003BC5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for CVDetection();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CVTrackSnapshot(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100519E68);
}

uint64_t sub_10003BD8C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CVDetection();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CVTrackedDetection.Prediction(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CVTrackedDetection.Prediction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CVTrackedDetection.Prediction()
{
  return &type metadata for CVTrackedDetection.Prediction;
}

uint64_t *sub_10003BEEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v20 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
          long long v21 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)((char *)a1 + v21[5]) = *(_DWORD *)((char *)a2 + v21[5]);
          uint64_t v22 = v21[6];
          uint64_t v23 = (_OWORD *)((char *)a1 + v22);
          uint64_t v24 = (_OWORD *)((char *)a2 + v22);
          long long v25 = v24[3];
          void v23[2] = v24[2];
          v23[3] = v25;
          long long v26 = v24[1];
          *uint64_t v23 = *v24;
          v23[1] = v26;
          *(uint64_t *)((char *)a1 + v21[7]) = *(uint64_t *)((char *)a2 + v21[7]);
          *(uint64_t *)((char *)a1 + v21[8]) = *(uint64_t *)((char *)a2 + v21[8]);
          *(uint64_t *)((char *)a1 + v21[9]) = *(uint64_t *)((char *)a2 + v21[9]);
          *((unsigned char *)a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
          uint64_t v27 = v21[11];
          uint64_t v28 = (uint64_t *)((char *)a1 + v27);
          uint64_t v29 = (uint64_t *)((char *)a2 + v27);
          uint64_t v30 = v29[1];
          *uint64_t v28 = *v29;
          v28[1] = v30;
          uint64_t v31 = v21[12];
          long long v32 = (uint64_t *)((char *)a1 + v31);
          long long v33 = (uint64_t *)((char *)a2 + v31);
          uint64_t v34 = v33[1];
          *long long v32 = *v33;
          v32[1] = v34;
          uint64_t v35 = v21[13];
          __dst = (char *)a1 + v35;
          uint64_t v91 = (char *)a2 + v35;
          uint64_t v36 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v37 = *(void *)(v36 - 8);
          long long v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v38(v91, 1, v36))
          {
            uint64_t v39 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v91, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v91, v36);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
          }
          uint64_t v79 = v21[14];
          long long v80 = (char *)a1 + v79;
          long long v81 = (char *)a2 + v79;
          unint64_t v82 = *((void *)v81 + 1);
          if (v82 >> 60 == 15)
          {
            *(_OWORD *)long long v80 = *(_OWORD *)v81;
          }
          else
          {
            uint64_t v83 = *(void *)v81;
            sub_100038528(*(void *)v81, *((void *)v81 + 1));
            *(void *)long long v80 = v83;
            *((void *)v80 + 1) = v82;
          }
          uint64_t v84 = v21[15];
          uint64_t v85 = (uint64_t *)((char *)a1 + v84);
          long long v86 = (uint64_t *)((char *)a2 + v84);
          if (*v86)
          {
            uint64_t v87 = v86[1];
            uint64_t v88 = v86[2];
            *uint64_t v85 = *v86;
            v85[1] = v87;
            v85[2] = v88;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
            v85[2] = v86[2];
          }
          break;
        case 2u:
          uint64_t v40 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
          uint64_t v41 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v41[5]) = *(_DWORD *)((char *)a2 + v41[5]);
          uint64_t v42 = v41[6];
          long long v43 = (_OWORD *)((char *)a1 + v42);
          long long v44 = (_OWORD *)((char *)a2 + v42);
          long long v45 = v44[3];
          v43[2] = v44[2];
          v43[3] = v45;
          long long v46 = v44[1];
          *long long v43 = *v44;
          v43[1] = v46;
          uint64_t v47 = v41[7];
          uint64_t v48 = (uint64_t *)((char *)a1 + v47);
          uint64_t v49 = (uint64_t *)((char *)a2 + v47);
          uint64_t v51 = *v49;
          uint64_t v50 = v49[1];
          void *v48 = v51;
          v48[1] = v50;
          *(uint64_t *)((char *)a1 + v41[8]) = *(uint64_t *)((char *)a2 + v41[8]);
          *(uint64_t *)((char *)a1 + v41[9]) = *(uint64_t *)((char *)a2 + v41[9]);
          *(uint64_t *)((char *)a1 + v41[10]) = *(uint64_t *)((char *)a2 + v41[10]);
          *(uint64_t *)((char *)a1 + v41[11]) = *(uint64_t *)((char *)a2 + v41[11]);
          *(uint64_t *)((char *)a1 + v41[12]) = *(uint64_t *)((char *)a2 + v41[12]);
          uint64_t v52 = v41[13];
          uint64_t v53 = *(void **)((char *)a2 + v52);
          *(uint64_t *)((char *)a1 + v52) = (uint64_t)v53;
          *((unsigned char *)a1 + v41[14]) = *((unsigned char *)a2 + v41[14]);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v54 = v53;
          break;
        case 3u:
        case 4u:
          uint64_t v55 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
          long long v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)((char *)a1 + v56[5]) = *(_DWORD *)((char *)a2 + v56[5]);
          uint64_t v57 = v56[6];
          unint64_t v58 = (_OWORD *)((char *)a1 + v57);
          uint64_t v59 = (_OWORD *)((char *)a2 + v57);
          long long v60 = v59[3];
          v58[2] = v59[2];
          v58[3] = v60;
          long long v61 = v59[1];
          *unint64_t v58 = *v59;
          v58[1] = v61;
          uint64_t v62 = v56[7];
          long long v63 = (uint64_t *)((char *)a1 + v62);
          uint64_t v64 = (uint64_t *)((char *)a2 + v62);
          uint64_t v66 = *v64;
          uint64_t v65 = v64[1];
          *long long v63 = v66;
          v63[1] = v65;
          *(uint64_t *)((char *)a1 + v56[8]) = *(uint64_t *)((char *)a2 + v56[8]);
          *(uint64_t *)((char *)a1 + v56[9]) = *(uint64_t *)((char *)a2 + v56[9]);
          *(uint64_t *)((char *)a1 + v56[10]) = *(uint64_t *)((char *)a2 + v56[10]);
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          uint64_t v67 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
          uint64_t v68 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)((char *)a1 + v68[5]) = *(_DWORD *)((char *)a2 + v68[5]);
          uint64_t v69 = v68[6];
          uint64_t v70 = (_OWORD *)((char *)a1 + v69);
          uint64_t v71 = (_OWORD *)((char *)a2 + v69);
          long long v72 = v71[3];
          v70[2] = v71[2];
          v70[3] = v72;
          long long v73 = v71[1];
          *uint64_t v70 = *v71;
          v70[1] = v73;
          uint64_t v74 = v68[7];
          long long v75 = (uint64_t *)((char *)a1 + v74);
          uint64_t v76 = (uint64_t *)((char *)a2 + v74);
          uint64_t v78 = *v76;
          uint64_t v77 = v76[1];
          *long long v75 = v78;
          v75[1] = v77;
          *(uint64_t *)((char *)a1 + v68[8]) = *(uint64_t *)((char *)a2 + v68[8]);
          *(uint64_t *)((char *)a1 + v68[9]) = *(uint64_t *)((char *)a2 + v68[9]);
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v8 = type metadata accessor for UUID();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          uint64_t v9 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)((char *)a1 + v9[5]) = *(_DWORD *)((char *)a2 + v9[5]);
          uint64_t v10 = v9[6];
          uint64_t v11 = (_OWORD *)((char *)a1 + v10);
          uint64_t v12 = (_OWORD *)((char *)a2 + v10);
          long long v13 = v12[3];
          v11[2] = v12[2];
          v11[3] = v13;
          long long v14 = v12[1];
          *uint64_t v11 = *v12;
          v11[1] = v14;
          uint64_t v15 = v9[7];
          long long v16 = (uint64_t *)((char *)a1 + v15);
          long long v17 = (uint64_t *)((char *)a2 + v15);
          uint64_t v19 = *v17;
          uint64_t v18 = v17[1];
          *long long v16 = v19;
          v16[1] = v18;
          *(uint64_t *)((char *)a1 + v9[8]) = *(uint64_t *)((char *)a2 + v9[8]);
          *(uint64_t *)((char *)a1 + v9[9]) = *(uint64_t *)((char *)a2 + v9[9]);
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_10003C674(uint64_t a1)
{
  if (!swift_getEnumCaseMultiPayload())
  {
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v3 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_19;
      case 1u:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
        int v5 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = a1 + v5[13];
        uint64_t v7 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v8 = *(void *)(v7 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
          (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
        }
        uint64_t v9 = (uint64_t *)(a1 + v5[14]);
        unint64_t v10 = v9[1];
        if (v10 >> 60 != 15) {
          sub_100038B34(*v9, v10);
        }
        if (!*(void *)(a1 + v5[15])) {
          return;
        }
        swift_bridgeObjectRelease();
LABEL_12:
        swift_release();
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
        uint64_t v12 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v13 = *(void **)(a1 + *(int *)(v12 + 52));

        return;
      case 3u:
      case 4u:
        uint64_t v2 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      case 5u:
        uint64_t v14 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_19:
        swift_bridgeObjectRelease();
        return;
      default:
        return;
    }
  }
}

char *sub_10003CA08(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&a1[v19[5]] = *(_DWORD *)&a2[v19[5]];
        uint64_t v20 = v19[6];
        long long v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        long long v23 = *((_OWORD *)v22 + 3);
        *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
        *((_OWORD *)v21 + 3) = v23;
        long long v24 = *((_OWORD *)v22 + 1);
        *(_OWORD *)long long v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v24;
        *(void *)&a1[v19[7]] = *(void *)&a2[v19[7]];
        *(void *)&a1[v19[8]] = *(void *)&a2[v19[8]];
        *(void *)&a1[v19[9]] = *(void *)&a2[v19[9]];
        a1[v19[10]] = a2[v19[10]];
        uint64_t v25 = v19[11];
        long long v26 = &a1[v25];
        uint64_t v27 = &a2[v25];
        uint64_t v28 = *((void *)v27 + 1);
        *(void *)long long v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        uint64_t v29 = v19[12];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        uint64_t v32 = *((void *)v31 + 1);
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = v32;
        uint64_t v33 = v19[13];
        __dst = &a1[v33];
        uint64_t v88 = &a2[v33];
        uint64_t v34 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36(v88, 1, v34))
        {
          uint64_t v37 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v88, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v88, v34);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        uint64_t v77 = v19[14];
        uint64_t v78 = &a1[v77];
        uint64_t v79 = &a2[v77];
        unint64_t v80 = *((void *)v79 + 1);
        if (v80 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
        }
        else
        {
          uint64_t v81 = *(void *)v79;
          sub_100038528(*(void *)v79, *((void *)v79 + 1));
          *(void *)uint64_t v78 = v81;
          *((void *)v78 + 1) = v80;
        }
        uint64_t v82 = v19[15];
        uint64_t v83 = &a1[v82];
        uint64_t v84 = &a2[v82];
        if (*(void *)v84)
        {
          uint64_t v85 = *((void *)v84 + 1);
          uint64_t v86 = *((void *)v84 + 2);
          *(void *)uint64_t v83 = *(void *)v84;
          *((void *)v83 + 1) = v85;
          *((void *)v83 + 2) = v86;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
          *((void *)v83 + 2) = *((void *)v84 + 2);
        }
        break;
      case 2u:
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&a1[v39[5]] = *(_DWORD *)&a2[v39[5]];
        uint64_t v40 = v39[6];
        uint64_t v41 = &a1[v40];
        uint64_t v42 = &a2[v40];
        long long v43 = *((_OWORD *)v42 + 3);
        *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
        *((_OWORD *)v41 + 3) = v43;
        long long v44 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v44;
        uint64_t v45 = v39[7];
        long long v46 = &a1[v45];
        uint64_t v47 = &a2[v45];
        uint64_t v49 = *(void *)v47;
        uint64_t v48 = *((void *)v47 + 1);
        *(void *)long long v46 = v49;
        *((void *)v46 + 1) = v48;
        *(void *)&a1[v39[8]] = *(void *)&a2[v39[8]];
        *(void *)&a1[v39[9]] = *(void *)&a2[v39[9]];
        *(void *)&a1[v39[10]] = *(void *)&a2[v39[10]];
        *(void *)&a1[v39[11]] = *(void *)&a2[v39[11]];
        *(void *)&a1[v39[12]] = *(void *)&a2[v39[12]];
        uint64_t v50 = v39[13];
        uint64_t v51 = *(void **)&a2[v50];
        *(void *)&a1[v50] = v51;
        a1[v39[14]] = a2[v39[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v52 = v51;
        break;
      case 3u:
      case 4u:
        uint64_t v53 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(a1, a2, v53);
        id v54 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&a1[v54[5]] = *(_DWORD *)&a2[v54[5]];
        uint64_t v55 = v54[6];
        long long v56 = &a1[v55];
        uint64_t v57 = &a2[v55];
        long long v58 = *((_OWORD *)v57 + 3);
        *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
        *((_OWORD *)v56 + 3) = v58;
        long long v59 = *((_OWORD *)v57 + 1);
        *(_OWORD *)long long v56 = *(_OWORD *)v57;
        *((_OWORD *)v56 + 1) = v59;
        uint64_t v60 = v54[7];
        long long v61 = &a1[v60];
        uint64_t v62 = &a2[v60];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        *(void *)long long v61 = v64;
        *((void *)v61 + 1) = v63;
        *(void *)&a1[v54[8]] = *(void *)&a2[v54[8]];
        *(void *)&a1[v54[9]] = *(void *)&a2[v54[9]];
        *(void *)&a1[v54[10]] = *(void *)&a2[v54[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v65 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(a1, a2, v65);
        uint64_t v66 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&a1[v66[5]] = *(_DWORD *)&a2[v66[5]];
        uint64_t v67 = v66[6];
        uint64_t v68 = &a1[v67];
        uint64_t v69 = &a2[v67];
        long long v70 = *((_OWORD *)v69 + 3);
        *((_OWORD *)v68 + 2) = *((_OWORD *)v69 + 2);
        *((_OWORD *)v68 + 3) = v70;
        long long v71 = *((_OWORD *)v69 + 1);
        *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
        *((_OWORD *)v68 + 1) = v71;
        uint64_t v72 = v66[7];
        long long v73 = &a1[v72];
        uint64_t v74 = &a2[v72];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        *(void *)long long v73 = v76;
        *((void *)v73 + 1) = v75;
        *(void *)&a1[v66[8]] = *(void *)&a2[v66[8]];
        *(void *)&a1[v66[9]] = *(void *)&a2[v66[9]];
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&a1[v7[5]] = *(_DWORD *)&a2[v7[5]];
        uint64_t v8 = v7[6];
        uint64_t v9 = &a1[v8];
        unint64_t v10 = &a2[v8];
        long long v11 = *((_OWORD *)v10 + 3);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
        *((_OWORD *)v9 + 3) = v11;
        long long v12 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *((_OWORD *)v9 + 1) = v12;
        uint64_t v13 = v7[7];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v17 = *(void *)v15;
        uint64_t v16 = *((void *)v15 + 1);
        *(void *)uint64_t v14 = v17;
        *((void *)v14 + 1) = v16;
        *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
        *(void *)&a1[v7[9]] = *(void *)&a2[v7[9]];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_10003D14C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10003D8EC((uint64_t)a1, type metadata accessor for CVTrackedDetection.HistoryEntry);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v17 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
          uint64_t v18 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&a1[v18[5]] = *(_DWORD *)&a2[v18[5]];
          uint64_t v19 = v18[6];
          uint64_t v20 = &a1[v19];
          long long v21 = &a2[v19];
          long long v23 = *((_OWORD *)v21 + 2);
          long long v22 = *((_OWORD *)v21 + 3);
          long long v24 = *((_OWORD *)v21 + 1);
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
          *((_OWORD *)v20 + 1) = v24;
          *((_OWORD *)v20 + 2) = v23;
          *((_OWORD *)v20 + 3) = v22;
          *(void *)&a1[v18[7]] = *(void *)&a2[v18[7]];
          *(void *)&a1[v18[8]] = *(void *)&a2[v18[8]];
          *(void *)&a1[v18[9]] = *(void *)&a2[v18[9]];
          a1[v18[10]] = a2[v18[10]];
          uint64_t v25 = v18[11];
          long long v26 = &a1[v25];
          uint64_t v27 = &a2[v25];
          *(void *)long long v26 = *(void *)v27;
          *((void *)v26 + 1) = *((void *)v27 + 1);
          uint64_t v28 = v18[12];
          uint64_t v29 = &a1[v28];
          uint64_t v30 = &a2[v28];
          *(void *)uint64_t v29 = *(void *)v30;
          *((void *)v29 + 1) = *((void *)v30 + 1);
          uint64_t v31 = v18[13];
          __dst = &a1[v31];
          uint64_t v84 = &a2[v31];
          uint64_t v32 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v34(v84, 1, v32))
          {
            uint64_t v35 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v84, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v84, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
          }
          uint64_t v72 = v18[14];
          long long v73 = &a1[v72];
          uint64_t v74 = &a2[v72];
          unint64_t v75 = *((void *)v74 + 1);
          if (v75 >> 60 == 15)
          {
            *(_OWORD *)long long v73 = *(_OWORD *)v74;
          }
          else
          {
            uint64_t v76 = *(void *)v74;
            sub_100038528(*(void *)v74, *((void *)v74 + 1));
            *(void *)long long v73 = v76;
            *((void *)v73 + 1) = v75;
          }
          uint64_t v77 = v18[15];
          uint64_t v78 = &a1[v77];
          uint64_t v79 = &a2[v77];
          if (*(void *)v79)
          {
            *(void *)uint64_t v78 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 2);
            *((void *)v78 + 1) = *((void *)v79 + 1);
            *((void *)v78 + 2) = v80;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v81 = *(_OWORD *)v79;
            *((void *)v78 + 2) = *((void *)v79 + 2);
            *(_OWORD *)uint64_t v78 = v81;
          }
          break;
        case 2u:
          uint64_t v36 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
          uint64_t v37 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&a1[v37[5]] = *(_DWORD *)&a2[v37[5]];
          uint64_t v38 = v37[6];
          uint64_t v39 = &a1[v38];
          uint64_t v40 = &a2[v38];
          long long v42 = *((_OWORD *)v40 + 2);
          long long v41 = *((_OWORD *)v40 + 3);
          long long v43 = *((_OWORD *)v40 + 1);
          *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
          *((_OWORD *)v39 + 1) = v43;
          *((_OWORD *)v39 + 2) = v42;
          *((_OWORD *)v39 + 3) = v41;
          uint64_t v44 = v37[7];
          uint64_t v45 = &a1[v44];
          long long v46 = &a2[v44];
          *(void *)uint64_t v45 = *(void *)v46;
          *((void *)v45 + 1) = *((void *)v46 + 1);
          *(void *)&a1[v37[8]] = *(void *)&a2[v37[8]];
          *(void *)&a1[v37[9]] = *(void *)&a2[v37[9]];
          *(void *)&a1[v37[10]] = *(void *)&a2[v37[10]];
          *(void *)&a1[v37[11]] = *(void *)&a2[v37[11]];
          *(void *)&a1[v37[12]] = *(void *)&a2[v37[12]];
          uint64_t v47 = v37[13];
          uint64_t v48 = *(void **)&a2[v47];
          *(void *)&a1[v47] = v48;
          a1[v37[14]] = a2[v37[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v49 = v48;
          break;
        case 3u:
        case 4u:
          uint64_t v50 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(a1, a2, v50);
          uint64_t v51 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&a1[v51[5]] = *(_DWORD *)&a2[v51[5]];
          uint64_t v52 = v51[6];
          uint64_t v53 = &a1[v52];
          id v54 = &a2[v52];
          long long v56 = *((_OWORD *)v54 + 2);
          long long v55 = *((_OWORD *)v54 + 3);
          long long v57 = *((_OWORD *)v54 + 1);
          *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
          *((_OWORD *)v53 + 1) = v57;
          *((_OWORD *)v53 + 2) = v56;
          *((_OWORD *)v53 + 3) = v55;
          uint64_t v58 = v51[7];
          long long v59 = &a1[v58];
          uint64_t v60 = &a2[v58];
          *(void *)long long v59 = *(void *)v60;
          *((void *)v59 + 1) = *((void *)v60 + 1);
          *(void *)&a1[v51[8]] = *(void *)&a2[v51[8]];
          *(void *)&a1[v51[9]] = *(void *)&a2[v51[9]];
          *(void *)&a1[v51[10]] = *(void *)&a2[v51[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          uint64_t v61 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
          uint64_t v62 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&a1[v62[5]] = *(_DWORD *)&a2[v62[5]];
          uint64_t v63 = v62[6];
          uint64_t v64 = &a1[v63];
          uint64_t v65 = &a2[v63];
          long long v67 = *((_OWORD *)v65 + 2);
          long long v66 = *((_OWORD *)v65 + 3);
          long long v68 = *((_OWORD *)v65 + 1);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
          *((_OWORD *)v64 + 1) = v68;
          *((_OWORD *)v64 + 2) = v67;
          *((_OWORD *)v64 + 3) = v66;
          uint64_t v69 = v62[7];
          long long v70 = &a1[v69];
          long long v71 = &a2[v69];
          *(void *)long long v70 = *(void *)v71;
          *((void *)v70 + 1) = *((void *)v71 + 1);
          *(void *)&a1[v62[8]] = *(void *)&a2[v62[8]];
          *(void *)&a1[v62[9]] = *(void *)&a2[v62[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v6 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&a1[v7[5]] = *(_DWORD *)&a2[v7[5]];
          uint64_t v8 = v7[6];
          uint64_t v9 = &a1[v8];
          unint64_t v10 = &a2[v8];
          long long v12 = *((_OWORD *)v10 + 2);
          long long v11 = *((_OWORD *)v10 + 3);
          long long v13 = *((_OWORD *)v10 + 1);
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
          *((_OWORD *)v9 + 1) = v13;
          *((_OWORD *)v9 + 2) = v12;
          *((_OWORD *)v9 + 3) = v11;
          uint64_t v14 = v7[7];
          uint64_t v15 = &a1[v14];
          uint64_t v16 = &a2[v14];
          *(void *)uint64_t v15 = *(void *)v16;
          *((void *)v15 + 1) = *((void *)v16 + 1);
          *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
          *(void *)&a1[v7[9]] = *(void *)&a2[v7[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10003D8EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CVTrackedDetection.HistoryEntry(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_100519F20);
}

char *sub_10003D96C(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&a1[v14[5]] = *(_DWORD *)&a2[v14[5]];
        uint64_t v15 = v14[6];
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        long long v18 = *((_OWORD *)v17 + 3);
        *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
        *((_OWORD *)v16 + 3) = v18;
        long long v19 = *((_OWORD *)v17 + 1);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *((_OWORD *)v16 + 1) = v19;
        *(void *)&a1[v14[7]] = *(void *)&a2[v14[7]];
        *(void *)&a1[v14[8]] = *(void *)&a2[v14[8]];
        *(void *)&a1[v14[9]] = *(void *)&a2[v14[9]];
        a1[v14[10]] = a2[v14[10]];
        *(_OWORD *)&a1[v14[11]] = *(_OWORD *)&a2[v14[11]];
        *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
        uint64_t v20 = v14[13];
        long long v21 = &a1[v20];
        long long v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = sub_10000F214(&qword_100524BD0);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        *(_OWORD *)&a1[v14[14]] = *(_OWORD *)&a2[v14[14]];
        uint64_t v47 = v14[15];
        uint64_t v48 = &a1[v47];
        id v49 = &a2[v47];
        *((void *)v48 + 2) = *((void *)v49 + 2);
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        break;
      case 2u:
        uint64_t v26 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
        uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&a1[v27[5]] = *(_DWORD *)&a2[v27[5]];
        uint64_t v28 = v27[6];
        uint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        long long v31 = *((_OWORD *)v30 + 3);
        *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
        *((_OWORD *)v29 + 3) = v31;
        long long v32 = *((_OWORD *)v30 + 1);
        *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
        *((_OWORD *)v29 + 1) = v32;
        *(_OWORD *)&a1[v27[7]] = *(_OWORD *)&a2[v27[7]];
        *(void *)&a1[v27[8]] = *(void *)&a2[v27[8]];
        *(void *)&a1[v27[9]] = *(void *)&a2[v27[9]];
        *(void *)&a1[v27[10]] = *(void *)&a2[v27[10]];
        *(void *)&a1[v27[11]] = *(void *)&a2[v27[11]];
        *(void *)&a1[v27[12]] = *(void *)&a2[v27[12]];
        *(void *)&a1[v27[13]] = *(void *)&a2[v27[13]];
        a1[v27[14]] = a2[v27[14]];
        break;
      case 3u:
      case 4u:
        uint64_t v33 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
        uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&a1[v34[5]] = *(_DWORD *)&a2[v34[5]];
        uint64_t v35 = v34[6];
        uint64_t v36 = &a1[v35];
        uint64_t v37 = &a2[v35];
        long long v38 = *((_OWORD *)v37 + 3);
        *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
        *((_OWORD *)v36 + 3) = v38;
        long long v39 = *((_OWORD *)v37 + 1);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
        *((_OWORD *)v36 + 1) = v39;
        *(_OWORD *)&a1[v34[7]] = *(_OWORD *)&a2[v34[7]];
        *(void *)&a1[v34[8]] = *(void *)&a2[v34[8]];
        *(void *)&a1[v34[9]] = *(void *)&a2[v34[9]];
        *(void *)&a1[v34[10]] = *(void *)&a2[v34[10]];
        break;
      case 5u:
        uint64_t v40 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
        long long v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&a1[v41[5]] = *(_DWORD *)&a2[v41[5]];
        uint64_t v42 = v41[6];
        long long v43 = &a1[v42];
        uint64_t v44 = &a2[v42];
        long long v45 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v45;
        long long v46 = *((_OWORD *)v44 + 1);
        *(_OWORD *)long long v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v46;
        *(_OWORD *)&a1[v41[7]] = *(_OWORD *)&a2[v41[7]];
        *(void *)&a1[v41[8]] = *(void *)&a2[v41[8]];
        *(void *)&a1[v41[9]] = *(void *)&a2[v41[9]];
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&a1[v7[5]] = *(_DWORD *)&a2[v7[5]];
        uint64_t v8 = v7[6];
        uint64_t v9 = &a1[v8];
        unint64_t v10 = &a2[v8];
        long long v11 = *((_OWORD *)v10 + 3);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
        *((_OWORD *)v9 + 3) = v11;
        long long v12 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *((_OWORD *)v9 + 1) = v12;
        *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
        *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
        *(void *)&a1[v7[9]] = *(void *)&a2[v7[9]];
        break;
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_10003DF8C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10003D8EC((uint64_t)a1, type metadata accessor for CVTrackedDetection.HistoryEntry);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v13 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          uint64_t v14 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&a1[v14[5]] = *(_DWORD *)&a2[v14[5]];
          uint64_t v15 = v14[6];
          uint64_t v16 = &a1[v15];
          uint64_t v17 = &a2[v15];
          long long v18 = *((_OWORD *)v17 + 3);
          *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
          *((_OWORD *)v16 + 3) = v18;
          long long v19 = *((_OWORD *)v17 + 1);
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
          *((_OWORD *)v16 + 1) = v19;
          *(void *)&a1[v14[7]] = *(void *)&a2[v14[7]];
          *(void *)&a1[v14[8]] = *(void *)&a2[v14[8]];
          *(void *)&a1[v14[9]] = *(void *)&a2[v14[9]];
          a1[v14[10]] = a2[v14[10]];
          *(_OWORD *)&a1[v14[11]] = *(_OWORD *)&a2[v14[11]];
          *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
          uint64_t v20 = v14[13];
          long long v21 = &a1[v20];
          long long v22 = &a2[v20];
          uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v24 = *(void *)(v23 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
          {
            uint64_t v25 = sub_10000F214(&qword_100524BD0);
            memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
          }
          *(_OWORD *)&a1[v14[14]] = *(_OWORD *)&a2[v14[14]];
          uint64_t v47 = v14[15];
          uint64_t v48 = &a1[v47];
          id v49 = &a2[v47];
          *((void *)v48 + 2) = *((void *)v49 + 2);
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
          break;
        case 2u:
          uint64_t v26 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
          uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&a1[v27[5]] = *(_DWORD *)&a2[v27[5]];
          uint64_t v28 = v27[6];
          uint64_t v29 = &a1[v28];
          uint64_t v30 = &a2[v28];
          long long v31 = *((_OWORD *)v30 + 3);
          *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
          *((_OWORD *)v29 + 3) = v31;
          long long v32 = *((_OWORD *)v30 + 1);
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          *((_OWORD *)v29 + 1) = v32;
          *(_OWORD *)&a1[v27[7]] = *(_OWORD *)&a2[v27[7]];
          *(void *)&a1[v27[8]] = *(void *)&a2[v27[8]];
          *(void *)&a1[v27[9]] = *(void *)&a2[v27[9]];
          *(void *)&a1[v27[10]] = *(void *)&a2[v27[10]];
          *(void *)&a1[v27[11]] = *(void *)&a2[v27[11]];
          *(void *)&a1[v27[12]] = *(void *)&a2[v27[12]];
          *(void *)&a1[v27[13]] = *(void *)&a2[v27[13]];
          a1[v27[14]] = a2[v27[14]];
          break;
        case 3u:
        case 4u:
          uint64_t v33 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(a1, a2, v33);
          uint64_t v34 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&a1[v34[5]] = *(_DWORD *)&a2[v34[5]];
          uint64_t v35 = v34[6];
          uint64_t v36 = &a1[v35];
          uint64_t v37 = &a2[v35];
          long long v38 = *((_OWORD *)v37 + 3);
          *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
          *((_OWORD *)v36 + 3) = v38;
          long long v39 = *((_OWORD *)v37 + 1);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
          *((_OWORD *)v36 + 1) = v39;
          *(_OWORD *)&a1[v34[7]] = *(_OWORD *)&a2[v34[7]];
          *(void *)&a1[v34[8]] = *(void *)&a2[v34[8]];
          *(void *)&a1[v34[9]] = *(void *)&a2[v34[9]];
          *(void *)&a1[v34[10]] = *(void *)&a2[v34[10]];
          break;
        case 5u:
          uint64_t v40 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(a1, a2, v40);
          long long v41 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&a1[v41[5]] = *(_DWORD *)&a2[v41[5]];
          uint64_t v42 = v41[6];
          long long v43 = &a1[v42];
          uint64_t v44 = &a2[v42];
          long long v45 = *((_OWORD *)v44 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
          *((_OWORD *)v43 + 3) = v45;
          long long v46 = *((_OWORD *)v44 + 1);
          *(_OWORD *)long long v43 = *(_OWORD *)v44;
          *((_OWORD *)v43 + 1) = v46;
          *(_OWORD *)&a1[v41[7]] = *(_OWORD *)&a2[v41[7]];
          *(void *)&a1[v41[8]] = *(void *)&a2[v41[8]];
          *(void *)&a1[v41[9]] = *(void *)&a2[v41[9]];
          break;
        default:
          uint64_t v6 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
          uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&a1[v7[5]] = *(_DWORD *)&a2[v7[5]];
          uint64_t v8 = v7[6];
          uint64_t v9 = &a1[v8];
          unint64_t v10 = &a2[v8];
          long long v11 = *((_OWORD *)v10 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
          *((_OWORD *)v9 + 3) = v11;
          long long v12 = *((_OWORD *)v10 + 1);
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
          *((_OWORD *)v9 + 1) = v12;
          *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
          *(void *)&a1[v7[8]] = *(void *)&a2[v7[8]];
          *(void *)&a1[v7[9]] = *(void *)&a2[v7[9]];
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_10003E5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10003E5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10003E624()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10003E634()
{
  uint64_t result = type metadata accessor for CVDetection();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_10003E6CC()
{
  unint64_t result = qword_100519F58;
  if (!qword_100519F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519F58);
  }
  return result;
}

uint64_t sub_10003E720(uint64_t a1)
{
  uint64_t result = sub_10003E7C0(&qword_100519F60, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10003E778()
{
  return sub_10003E7C0(&qword_100519F68, (void (*)(uint64_t))type metadata accessor for CVTrackSnapshot);
}

uint64_t sub_10003E7C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003E808()
{
  return sub_10003E7C0((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
}

Swift::Int sub_10003E854()
{
  return Hasher._finalize()();
}

uint64_t sub_10003E8EC()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10003E974()
{
  return Hasher._finalize()();
}

uint64_t sub_10003EA08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC6Tamale18CVTrackedDetection_id;
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003EA80@<X0>(uint64_t a1@<X8>)
{
  return sub_100035548(a1);
}

uint64_t sub_10003EAA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100035D50(a1);
}

uint64_t sub_10003EAC8()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_10003EAE4(uint64_t a1)
{
  uint64_t result = sub_10003E7C0(&qword_100519F70, (void (*)(uint64_t))type metadata accessor for CVTrackedDetection);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10003EB3C()
{
  return sub_10003E7C0(&qword_100519F78, (void (*)(uint64_t))type metadata accessor for CVTrackedDetection);
}

void *sub_10003EB84(uint64_t a1, uint64_t (*a2)(void), void (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(void))
{
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = __chkstk_darwin(v7);
  long long v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    long long v21 = _swiftEmptyArrayStorage;
    long long v19 = a3;
    ((void (*)(void, uint64_t, void, double))a3)(0, v12, 0, v9);
    uint64_t v14 = a1 + 32;
    do
    {
      sub_10000F578(v14, (uint64_t)v20);
      sub_10000F214(&qword_100519FA0);
      swift_dynamicCast();
      uint64_t v13 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v19(0, v13[2] + 1, 1);
        uint64_t v13 = v21;
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      if (v16 >= v15 >> 1)
      {
        v19(v15 > 1, v16 + 1, 1);
        uint64_t v13 = v21;
      }
      v13[2] = v16 + 1;
      sub_10003FF7C((uint64_t)v11, (uint64_t)v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v16, a4);
      v14 += 40;
      --v12;
    }
    while (v12);
  }
  return v13;
}

uint64_t sub_10003ED5C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100040A58(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100046CAC();
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040A58(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_100040A58(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_100046CEC(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      sub_100046CAC();
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040A58(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_100040A58(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_100046CEC(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void sub_10003EF90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  __chkstk_darwin(v4);
  long long v73 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = (int *)type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v63 - v10;
  __chkstk_darwin(v12);
  *(void *)&long long v68 = (char *)&v63 - v13;
  __chkstk_darwin(v14);
  *(void *)&long long v69 = (char *)&v63 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v63 - v17;
  __chkstk_darwin(v19);
  long long v21 = (char *)&v63 - v20;
  __chkstk_darwin(v22);
  *(void *)&long long v67 = (char *)&v63 - v23;
  __chkstk_darwin(v24);
  uint64_t v72 = (uint64_t)&v63 - v26;
  uint64_t v27 = *(void *)(a1 + 16);
  if (v27)
  {
    uint64_t v65 = v25;
    uint64_t v66 = a2;
    unint64_t v28 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v29 = a1 + v28;
    sub_100040050(a1 + v28, (uint64_t)v21, type metadata accessor for TextDetectorResult);
    swift_bridgeObjectRetain();
    uint64_t v30 = v27 - 1;
    if (v27 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = v67;
      sub_10003FF7C((uint64_t)v21, v67, type metadata accessor for TextDetectorResult);
      sub_10003FF7C(v31, v72, type metadata accessor for TextDetectorResult);
      sub_100040050(v29, (uint64_t)v11, type metadata accessor for TextDetectorResult);
      swift_bridgeObjectRetain();
      uint64_t v32 = v69;
      uint64_t v33 = v68;
    }
    else
    {
      uint64_t v57 = *(void *)(v65 + 72);
      uint64_t v64 = a1 + v28;
      uint64_t v65 = a1;
      unint64_t v63 = v28;
      uint64_t v58 = a1 + v57 + v28;
      uint64_t v59 = v30;
      do
      {
        sub_100040050(v58, (uint64_t)v18, type metadata accessor for TextDetectorResult);
        if (*(float *)&v21[v6[5]] >= *(float *)&v18[v6[5]])
        {
          sub_10003D8EC((uint64_t)v18, type metadata accessor for TextDetectorResult);
        }
        else
        {
          sub_10003D8EC((uint64_t)v21, type metadata accessor for TextDetectorResult);
          sub_10003FF7C((uint64_t)v18, (uint64_t)v21, type metadata accessor for TextDetectorResult);
        }
        v58 += v57;
        --v59;
      }
      while (v59);
      uint64_t v60 = v65;
      swift_bridgeObjectRelease();
      uint64_t v61 = v67;
      sub_10003FF7C((uint64_t)v21, v67, type metadata accessor for TextDetectorResult);
      sub_10003FF7C(v61, v72, type metadata accessor for TextDetectorResult);
      sub_100040050(v64, (uint64_t)v11, type metadata accessor for TextDetectorResult);
      swift_bridgeObjectRetain();
      uint64_t v62 = v60 + v57 + v63;
      uint64_t v32 = v69;
      uint64_t v33 = v68;
      do
      {
        sub_100040050(v62, (uint64_t)v8, type metadata accessor for TextDetectorResult);
        if (*(double *)&v11[v6[9]] >= *(double *)&v8[v6[9]])
        {
          sub_10003D8EC((uint64_t)v8, type metadata accessor for TextDetectorResult);
        }
        else
        {
          sub_10003D8EC((uint64_t)v11, type metadata accessor for TextDetectorResult);
          sub_10003FF7C((uint64_t)v8, (uint64_t)v11, type metadata accessor for TextDetectorResult);
        }
        v62 += v57;
        --v30;
      }
      while (v30);
    }
    swift_bridgeObjectRelease();
    sub_10003FF7C((uint64_t)v11, v33, type metadata accessor for TextDetectorResult);
    sub_10003FF7C(v33, v32, type metadata accessor for TextDetectorResult);
    uint64_t v34 = v70;
    uint64_t v35 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v73, v32, v71);
    uint64_t v36 = v72;
    int v37 = *(_DWORD *)(v72 + v6[5]);
    uint64_t v38 = v32 + v6[6];
    long long v39 = *(_OWORD *)v38;
    long long v68 = *(_OWORD *)(v38 + 16);
    long long v69 = v39;
    long long v67 = *(_OWORD *)(v38 + 32);
    uint64_t v40 = *(void *)(v38 + 48);
    uint64_t v41 = *(void *)(v38 + 56);
    uint64_t v42 = v6[8];
    long long v43 = (uint64_t *)(v72 + v6[7]);
    uint64_t v44 = v43[1];
    uint64_t v65 = *v43;
    uint64_t v45 = *(void *)(v72 + v42);
    uint64_t v46 = *(void *)(v32 + v6[9]);
    swift_bridgeObjectRetain();
    sub_10003D8EC(v32, type metadata accessor for TextDetectorResult);
    uint64_t v47 = *(void *)(v36 + v6[10]);
    uint64_t v48 = *(void *)(v36 + v6[11]);
    uint64_t v49 = v6[13];
    LODWORD(v64) = *(unsigned __int8 *)(v36 + v6[14]);
    uint64_t v50 = *(void *)(v36 + v6[12]);
    uint64_t v51 = *(void **)(v36 + v49);
    id v52 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10003D8EC(v36, type metadata accessor for TextDetectorResult);
    uint64_t v53 = v66;
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v66, v73, v35);
    *(_DWORD *)(v53 + v6[5]) = v37;
    uint64_t v54 = v53 + v6[6];
    long long v55 = v68;
    *(_OWORD *)uint64_t v54 = v69;
    *(_OWORD *)(v54 + 16) = v55;
    *(_OWORD *)(v54 + 32) = v67;
    *(void *)(v54 + 48) = v40;
    *(void *)(v54 + 56) = v41;
    long long v56 = (void *)(v53 + v6[7]);
    *long long v56 = v65;
    v56[1] = v44;
    *(void *)(v53 + v6[8]) = v45;
    *(void *)(v53 + v6[9]) = v46;
    *(void *)(v53 + v6[10]) = v47;
    *(void *)(v53 + v6[11]) = v48;
    *(unsigned char *)(v53 + v6[14]) = v64;
    *(void *)(v53 + v6[12]) = v50;
    *(void *)(v53 + v6[13]) = v51;
    type metadata accessor for CVDetection();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
}

void sub_10003F640(uint64_t (*a1)(char *))
{
  uint64_t v25 = a1;
  uint64_t v3 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = (os_unfair_lock_s *)(v1[4] + 16);
  os_unfair_lock_lock(v9);
  uint64_t v10 = v1 + 2;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v1[2] + 16);
  os_unfair_lock_unlock(v9);
  os_unfair_lock_lock(v9);
  os_unfair_lock_unlock(v9);
  if (v11)
  {
    uint64_t v23 = v1;
    uint64_t v12 = v1[5];
    if (v12)
    {
      while (1)
      {
        os_unfair_lock_lock(v9);
        os_unfair_lock_unlock(v9);
        os_unfair_lock_lock(v9);
        uint64_t v13 = *(void *)(*v10 + 16);
        os_unfair_lock_unlock(v9);
        if (v11 > v13) {
          break;
        }
        os_unfair_lock_lock(v9);
        unint64_t v14 = *(void *)(*v10 + 16);
        if (v14 == v12)
        {
          uint64_t v15 = v23[3];
          BOOL v16 = __OFADD__(v15, 1);
          uint64_t v17 = v15 + 1;
          if (v16) {
            goto LABEL_20;
          }
          uint64_t v18 = v17 % v12;
        }
        else
        {
          uint64_t v18 = 0;
        }
        BOOL v16 = __OFADD__(v18, --v11);
        uint64_t v19 = v18 + v11;
        if (v16) {
          goto LABEL_18;
        }
        if (v12 == -1 && v19 == 0x8000000000000000) {
          goto LABEL_21;
        }
        unint64_t v20 = v19 % v12;
        if (v20 >= v14) {
          goto LABEL_19;
        }
        sub_100040050(*v10+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v20, (uint64_t)v8, type metadata accessor for CVTrackedDetection.HistoryEntry);
        os_unfair_lock_unlock(v9);
        sub_10003FF7C((uint64_t)v8, (uint64_t)v5, type metadata accessor for CVTrackedDetection.HistoryEntry);
        char v21 = v25(v5);
        sub_10003D8EC((uint64_t)v5, type metadata accessor for CVTrackedDetection.HistoryEntry);
        if (!v2 && (v21 & 1) == 0)
        {
          os_unfair_lock_lock(v9);
          os_unfair_lock_unlock(v9);
          if (v11) {
            continue;
          }
        }
        return;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
}

void sub_10003F900(uint64_t (*a1)(long long *))
{
  uint64_t v4 = (os_unfair_lock_s *)(v1[4] + 16);
  os_unfair_lock_lock(v4);
  uint64_t v5 = v1 + 2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1[2] + 16);
  os_unfair_lock_unlock(v4);
  os_unfair_lock_lock(v4);
  os_unfair_lock_unlock(v4);
  if (v6)
  {
    uint64_t v7 = v1[5];
    if (v7)
    {
      while (1)
      {
        os_unfair_lock_lock(v4);
        os_unfair_lock_unlock(v4);
        os_unfair_lock_lock(v4);
        uint64_t v8 = *(void *)(*v5 + 16);
        os_unfair_lock_unlock(v4);
        if (v6 > v8) {
          break;
        }
        os_unfair_lock_lock(v4);
        unint64_t v9 = *(void *)(*v5 + 16);
        if (v9 == v7)
        {
          uint64_t v10 = v1[3];
          BOOL v11 = __OFADD__(v10, 1);
          uint64_t v12 = v10 + 1;
          if (v11) {
            goto LABEL_20;
          }
          uint64_t v13 = v12 % v7;
        }
        else
        {
          uint64_t v13 = 0;
        }
        BOOL v11 = __OFADD__(v13, --v6);
        uint64_t v14 = v13 + v6;
        if (v11) {
          goto LABEL_18;
        }
        if (v7 == -1 && v14 == 0x8000000000000000) {
          goto LABEL_21;
        }
        unint64_t v15 = v14 % v7;
        if (v15 >= v9) {
          goto LABEL_19;
        }
        uint64_t v16 = *v5 + 88 * v15;
        uint64_t v17 = *(void *)(v16 + 48);
        long long v22 = *(_OWORD *)(v16 + 56);
        long long v23 = *(_OWORD *)(v16 + 32);
        long long v20 = *(_OWORD *)(v16 + 88);
        long long v21 = *(_OWORD *)(v16 + 72);
        long long v19 = *(_OWORD *)(v16 + 104);
        os_unfair_lock_unlock(v4);
        long long v24 = v23;
        uint64_t v25 = v17;
        long long v26 = v22;
        long long v27 = v21;
        long long v28 = v20;
        long long v29 = v19;
        char v18 = a1(&v24);
        if (!v2 && (v18 & 1) == 0)
        {
          os_unfair_lock_lock(v4);
          os_unfair_lock_unlock(v4);
          if (v6) {
            continue;
          }
        }
        return;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
  }
}

void sub_10003FB08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (os_unfair_lock_s *)(v2[4] + 16);
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  uint64_t v6 = 0;
  uint64_t v7 = v2[2];
  unint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v2[5];
  if (v8 != v9)
  {
LABEL_5:
    BOOL v11 = __OFADD__(v6, a1);
    uint64_t v13 = v6 + a1;
    if (v11)
    {
      __break(1u);
    }
    else if (v9)
    {
      if (v9 == -1 && v13 == 0x8000000000000000) {
        goto LABEL_16;
      }
      uint64_t v14 = v13 % v9;
      if (v13 % v9 < v8)
      {
        uint64_t v15 = *(void *)(type metadata accessor for CVTrackedDetection.HistoryEntry(0) - 8);
        sub_100040050(v7+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v14, a2, type metadata accessor for CVTrackedDetection.HistoryEntry);
        os_unfair_lock_unlock(v5);
        return;
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = v2[3];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8)
  {
    uint64_t v6 = v12 % (uint64_t)v8;
    goto LABEL_5;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_10003FC60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (os_unfair_lock_s *)(v2[4] + 16);
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  uint64_t v6 = 0;
  uint64_t v7 = v2[2];
  unint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = v2[5];
  if (v8 != v9)
  {
LABEL_5:
    BOOL v11 = __OFADD__(v6, a1);
    uint64_t v13 = v6 + a1;
    if (v11)
    {
      __break(1u);
    }
    else if (v9)
    {
      if (v9 == -1 && v13 == 0x8000000000000000) {
        goto LABEL_16;
      }
      unint64_t v14 = v13 % v9;
      if (v14 < v8)
      {
        uint64_t v15 = v7 + 88 * v14;
        uint64_t v16 = *(void *)(v15 + 112);
        long long v17 = *(_OWORD *)(v15 + 48);
        *(_OWORD *)a2 = *(_OWORD *)(v15 + 32);
        *(_OWORD *)(a2 + 16) = v17;
        long long v18 = *(_OWORD *)(v15 + 80);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(v15 + 64);
        *(_OWORD *)(a2 + 48) = v18;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v15 + 96);
        *(void *)(a2 + 80) = v16;
        os_unfair_lock_unlock(v5);
        return;
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = v2[3];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8)
  {
    uint64_t v6 = v12 % (uint64_t)v8;
    goto LABEL_5;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_10003FD60(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(v1[4] + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(v1[2] + 16);
  uint64_t v6 = v1[5];
  if (v5 != v6)
  {
LABEL_5:
    BOOL v8 = __OFADD__(v4, a1);
    uint64_t v10 = v4 + a1;
    if (v8)
    {
      __break(1u);
    }
    else if (v6)
    {
      if (v6 == -1 && v10 == 0x8000000000000000) {
        goto LABEL_16;
      }
      if (v10 % v6 < v5)
      {
        os_unfair_lock_unlock(v3);
        return;
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = v1[3];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
  {
    uint64_t v4 = v9 % (uint64_t)v5;
    goto LABEL_5;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

void *sub_10003FE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003FE74(a1, a2, a3, (uint64_t (*)(void))sub_100328DE4);
}

void *sub_10003FE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003FE74(a1, a2, a3, (uint64_t (*)(void))sub_100328EF4);
}

void *sub_10003FE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  v4[3] = 0;
  sub_10000F214(&qword_10051A0A8);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  v4[2] = a1;
  v4[4] = v9;
  swift_beginAccess();
  uint64_t v10 = v4[2];
  swift_bridgeObjectRetain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[2] = v10;
  if (!isUniquelyReferenced_nonNull_native || a3 > *(void *)(v10 + 24) >> 1) {
    uint64_t v10 = a4();
  }
  v4[2] = v10;
  swift_endAccess();
  v4[3] = a2;
  uint64_t v12 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease();
  if (v12 && !a2) {
    v4[3] = v12 - 1;
  }
  v4[5] = a3;
  return v4;
}

uint64_t sub_10003FF7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void (*sub_10003FFE4(void *a1, uint64_t a2))(void **a1)
{
  uint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  sub_10003FC60(a2, (uint64_t)v4);
  return sub_100040048;
}

void sub_100040048(void **a1)
{
}

uint64_t sub_100040050(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000400B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051CB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100040120(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100040184@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1;
  swift_bridgeObjectRetain();
  sub_100043890(&v12);
  BOOL v8 = v12;
  if (v12[2])
  {
    sub_100040050((uint64_t)v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v7, type metadata accessor for ParseDetectorResult);
    if (v7[*(int *)(v4 + 40)])
    {
      uint64_t v9 = (uint64_t *)&v7[*(int *)(v4 + 60)];
      sub_100043938(*v9);
      *uint64_t v9 = (uint64_t)v8;
      v9[1] = (uint64_t)sub_1003E86A8;
      void v9[2] = 0;
    }
    else
    {
      swift_release();
    }
    sub_100040050((uint64_t)v7, a2, type metadata accessor for ParseDetectorResult);
    type metadata accessor for CVDetection();
    swift_storeEnumTagMultiPayload();
    return sub_10003D8EC((uint64_t)v7, type metadata accessor for ParseDetectorResult);
  }
  else
  {
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

void *sub_100040334(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  BOOL v8 = (char *)&v20 - v7;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    long long v23 = _swiftEmptyArrayStorage;
    sub_1000408A4(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_100040050(v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_100040050((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v21 = type metadata accessor for ParseDetectorResult(0);
          uint64_t v13 = sub_10003E7C0(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          unint64_t v14 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v21 = type metadata accessor for TextDetectorResult(0);
          uint64_t v13 = sub_10003E7C0((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          unint64_t v14 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          uint64_t v21 = type metadata accessor for StreamingBarcodeDetectorResult(0);
          uint64_t v13 = sub_10003E7C0(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          unint64_t v14 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v21 = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v13 = sub_10003E7C0((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          unint64_t v14 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v21 = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v13 = sub_10003E7C0(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          unint64_t v14 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      uint64_t v15 = v14;
      uint64_t v22 = v13;
      uint64_t v16 = sub_100040120((uint64_t *)&v20);
      sub_10003FF7C((uint64_t)v5, (uint64_t)v16, v15);
      sub_10003D8EC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v10 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000408A4(0, v10[2] + 1, 1);
        uint64_t v10 = v23;
      }
      unint64_t v18 = v10[2];
      unint64_t v17 = v10[3];
      if (v18 >= v17 >> 1)
      {
        sub_1000408A4(v17 > 1, v18 + 1, 1);
        uint64_t v10 = v23;
      }
      v10[2] = v18 + 1;
      sub_1000321A8(&v20, (uint64_t)&v10[5 * v18 + 4]);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_100040730(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000421DC(a1, a2, a3, *v3, &qword_100525080);
  os_unfair_lock_s *v3 = (char *)result;
  return result;
}

uint64_t sub_100040758(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000421DC(a1, a2, a3, *v3, &qword_100519FF8);
  os_unfair_lock_s *v3 = (char *)result;
  return result;
}

uint64_t sub_100040780(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042AA0(a1, a2, a3, (void *)*v3, &qword_10051A128, &qword_10051A130);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000407B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100040F48(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000407D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A0C0, type metadata accessor for TextDetectorResult.DataDetector);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10004080C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_100519FA8, type metadata accessor for TextDetectorResult);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040848(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041300(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040868(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_100519FB8, type metadata accessor for ParseDetectorResult);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000408A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041460(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000408C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041604(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000408E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041788(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040904(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042AA0(a1, a2, a3, (void *)*v3, &qword_100519FC8, &qword_100519FD0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040934(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041930(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040954(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041AA8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040974(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041C08(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040994(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041D68(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000409B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100041ED4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000409D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042040(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000409F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000421DC(a1, a2, a3, *v3, &qword_10051A138);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040A1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A108, type metadata accessor for DetectionResult);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040A58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000424BC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040A78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004262C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040A98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004278C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040AB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042914(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040AD8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042AA0(a1, a2, a3, (void *)*v3, &qword_10051A150, &qword_10051A158);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040B08(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042C30(a1, a2, a3, *v3, &qword_10051A000);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040B30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042C30(a1, a2, a3, *v3, &qword_100522CE0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040B58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000421DC(a1, a2, a3, *v3, &qword_10051A0D8);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040B80(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042D8C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040BA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042F10(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040BC0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_100525590, type metadata accessor for ActionBarItem);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040BFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A070, type metadata accessor for CVBundle);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040C38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_100529830, type metadata accessor for CVTrackSnapshot);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040C74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_1005299A0, type metadata accessor for BundleClassification);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040CB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A080, (uint64_t (*)(void))&type metadata accessor for UUID);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040CEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A0D0, type metadata accessor for IdentifiableCGRect);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040D28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A0B8, type metadata accessor for DetectionRequest.Originator);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040D64(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_100525100, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040DA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_100529640, type metadata accessor for DetectionRequest);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040DDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004309C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040DFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100043208(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040E1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100043358(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040E3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100042338(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040E5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100043650(a1, a2, a3, (void *)*v3, &qword_10051A090, &qword_10051A098);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040E8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100043650(a1, a2, a3, (void *)*v3, &qword_10051A088, &qword_100524EB0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040EBC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000434E4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100040EDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000410B4(a1, a2, a3, (void *)*v3, &qword_10051A078, type metadata accessor for VisualIntelligenceLookupResult);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040F18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100043650(a1, a2, a3, (void *)*v3, &qword_10051A068, &qword_10051A060);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100040F48(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051F3E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000410B4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000F214(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  long long v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041300(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100521060);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041460(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100519FC0);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_10000F214(&qword_100519FA0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041604(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100529810);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[88 * v8] || v12 >= &v13[88 * v8])
  {
    memcpy(v12, v13, 88 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041788(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A178);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 176 * v8) {
      memmove(v10 + 4, a4 + 4, 176 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 176 * v8 || v12 >= v13 + 176 * v8)
  {
    sub_10000F214(&qword_10051A180);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041930(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A170);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041AA8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100529820);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041C08(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100519FD8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041D68(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100529A30);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100041ED4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A100);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042040(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A0E8);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    sub_10000F214(&qword_10051A0F0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000421DC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000F214(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)&_swiftEmptyArrayStorage;
  }
  size_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042338(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A008);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000424BC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214((uint64_t *)&unk_10051D350);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004262C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A198);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004278C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A0F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042914(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A140);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000F214(&qword_10051A148);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042AA0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000F214(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    uint64_t v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_10000F214(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042C30(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000F214(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042D8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100529A20);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[136 * v8] || v12 >= &v13[136 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100042F10(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A168);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_10000F214(&qword_10051F5E0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004309C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A160);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100043208(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A188);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100043358(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214((uint64_t *)&unk_1005298D0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000F214(&qword_10051A0C8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000434E4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_10051A010);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100043650(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000F214(a5);
  uint64_t v13 = *(void *)(sub_10000F214(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_10000F214(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  long long v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100043890(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ParseDetectorResult(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100045F34(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1000439E4(v5);
  *a1 = v3;
}

uint64_t sub_100043938(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

Swift::Int sub_100043978(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100045F78(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000444A8(v5);
  *a1 = v2;
  return result;
}

void sub_1000439E4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v140 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v134 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v131 = (uint64_t)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v141 = (uint64_t)&v126 - v6;
  __chkstk_darwin(v7);
  uint64_t v137 = (uint64_t)&v126 - v8;
  __chkstk_darwin(v9);
  uint64_t v136 = (uint64_t)&v126 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if (v11 < 0) {
      goto LABEL_138;
    }
    if (v11) {
      sub_100044C68(0, v11, 1, a1);
    }
    return;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_146;
  }
  Swift::Int v128 = v12;
  if (v11 < 2)
  {
    size_t v17 = (char *)_swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    long long v127 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      unint64_t v19 = _swiftEmptyArrayStorage[2];
LABEL_104:
      uint64_t v119 = v17;
      if (v19 >= 2)
      {
        uint64_t v120 = *a1;
        do
        {
          unint64_t v121 = v19 - 2;
          if (v19 < 2) {
            goto LABEL_133;
          }
          if (!v120) {
            goto LABEL_145;
          }
          uint64_t v122 = *(void *)&v119[16 * v121 + 32];
          uint64_t v123 = *(void *)&v119[16 * v19 + 24];
          sub_100044F30(v120 + *(void *)(v134 + 72) * v122, v120 + *(void *)(v134 + 72) * *(void *)&v119[16 * v19 + 16], v120 + *(void *)(v134 + 72) * v123, v133);
          if (v2) {
            break;
          }
          if (v123 < v122) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100045F20((uint64_t)v119);
          }
          if (v121 >= *((void *)v119 + 2)) {
            goto LABEL_135;
          }
          uint64_t v124 = &v119[16 * v121 + 32];
          *(void *)uint64_t v124 = v122;
          *((void *)v124 + 1) = v123;
          unint64_t v125 = *((void *)v119 + 2);
          if (v19 > v125) {
            goto LABEL_136;
          }
          memmove(&v119[16 * v19 + 16], &v119[16 * v19 + 32], 16 * (v125 - v19));
          *((void *)v119 + 2) = v125 - 1;
          unint64_t v19 = v125 - 1;
        }
        while (v125 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v127[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    long long v127 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  size_t v17 = (char *)_swiftEmptyArrayStorage;
  long long v138 = a1;
  while (1)
  {
    Swift::Int v20 = v18;
    Swift::Int v21 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v31 = v18 + 1;
      goto LABEL_24;
    }
    uint64_t v135 = *a1;
    uint64_t v142 = *(void *)(v134 + 72);
    uint64_t v22 = v142;
    uint64_t v23 = v136;
    sub_100040050(v135 + v142 * v21, v136, type metadata accessor for ParseDetectorResult);
    uint64_t v24 = v135 + v22 * v20;
    uint64_t v25 = v137;
    sub_100040050(v24, v137, type metadata accessor for ParseDetectorResult);
    uint64_t v26 = *(int *)(v140 + 36);
    double v27 = *(double *)(v25 + v26);
    double v28 = *(double *)(v23 + v26);
    uint64_t v29 = v25;
    uint64_t v30 = v135;
    sub_10003D8EC(v29, type metadata accessor for ParseDetectorResult);
    sub_10003D8EC(v23, type metadata accessor for ParseDetectorResult);
    Swift::Int v31 = v20 + 2;
    if (v20 + 2 >= v11)
    {
LABEL_21:
      if (v27 >= v28) {
        goto LABEL_24;
      }
LABEL_42:
      if (v31 < v20) {
        goto LABEL_139;
      }
      if (v20 < v31)
      {
        long long v129 = v17;
        Swift::Int v130 = v11;
        uint64_t v55 = 0;
        Swift::Int v56 = v20;
        uint64_t v57 = v142;
        uint64_t v58 = v142 * (v31 - 1);
        uint64_t v59 = v31 * v142;
        Swift::Int v60 = v56;
        uint64_t v61 = v56 * v142;
        do
        {
          if (v60 != v31 + v55 - 1)
          {
            Swift::Int v63 = v31;
            uint64_t v64 = v135;
            if (!v135) {
              goto LABEL_144;
            }
            unint64_t v65 = v135 + v61;
            Swift::Int v139 = v135 + v58;
            sub_10003FF7C(v135 + v61, v131, type metadata accessor for ParseDetectorResult);
            if (v61 < v58 || v65 >= v64 + v59)
            {
              uint64_t v62 = v139;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              uint64_t v62 = v139;
              if (v61 != v58) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            sub_10003FF7C(v131, v62, type metadata accessor for ParseDetectorResult);
            Swift::Int v31 = v63;
            uint64_t v57 = v142;
          }
          ++v60;
          --v55;
          v58 -= v57;
          v59 -= v57;
          v61 += v57;
        }
        while (v60 < v31 + v55);
        a1 = v138;
        size_t v17 = v129;
        Swift::Int v11 = v130;
        Swift::Int v20 = v132;
      }
      goto LABEL_24;
    }
    uint64_t v126 = v2;
    long long v129 = v17;
    Swift::Int v139 = v142 * v21;
    uint64_t v32 = v142 * v31;
    while (1)
    {
      Swift::Int v33 = v11;
      Swift::Int v34 = v31;
      uint64_t v35 = v136;
      sub_100040050(v30 + v32, v136, type metadata accessor for ParseDetectorResult);
      uint64_t v36 = v137;
      sub_100040050(v30 + v139, v137, type metadata accessor for ParseDetectorResult);
      BOOL v37 = *(double *)(v36 + *(int *)(v140 + 36)) >= *(double *)(v35 + *(int *)(v140 + 36));
      sub_10003D8EC(v36, type metadata accessor for ParseDetectorResult);
      sub_10003D8EC(v35, type metadata accessor for ParseDetectorResult);
      if (v27 < v28 == v37) {
        break;
      }
      ++v31;
      v30 += v142;
      Swift::Int v11 = v33;
      if (v33 == v34 + 1)
      {
        Swift::Int v31 = v33;
        a1 = v138;
        size_t v17 = v129;
        uint64_t v2 = v126;
        Swift::Int v20 = v132;
        goto LABEL_21;
      }
    }
    a1 = v138;
    size_t v17 = v129;
    uint64_t v2 = v126;
    Swift::Int v20 = v132;
    Swift::Int v11 = v33;
    if (v27 < v28) {
      goto LABEL_42;
    }
LABEL_24:
    if (v31 >= v11) {
      goto LABEL_56;
    }
    if (__OFSUB__(v31, v20)) {
      goto LABEL_137;
    }
    if (v31 - v20 >= v128) {
      goto LABEL_56;
    }
    if (__OFADD__(v20, v128)) {
      goto LABEL_140;
    }
    Swift::Int v38 = v20 + v128 >= v11 ? v11 : v20 + v128;
    if (v38 < v20) {
      break;
    }
    if (v31 != v38)
    {
      long long v129 = v17;
      Swift::Int v130 = v38;
      uint64_t v126 = v2;
      uint64_t v39 = *(void *)(v134 + 72);
      uint64_t v142 = v39 * (v31 - 1);
      uint64_t v135 = v39;
      Swift::Int v40 = v31 * v39;
      do
      {
        uint64_t v42 = 0;
        Swift::Int v43 = v20;
        Swift::Int v139 = v31;
        while (1)
        {
          uint64_t v44 = *a1;
          Swift::Int v45 = v40;
          uint64_t v46 = v40 + v42 + *a1;
          uint64_t v47 = v136;
          sub_100040050(v46, v136, type metadata accessor for ParseDetectorResult);
          uint64_t v48 = v142 + v42 + v44;
          uint64_t v49 = v137;
          sub_100040050(v48, v137, type metadata accessor for ParseDetectorResult);
          uint64_t v50 = *(int *)(v140 + 36);
          double v51 = *(double *)(v49 + v50);
          double v52 = *(double *)(v47 + v50);
          sub_10003D8EC(v49, type metadata accessor for ParseDetectorResult);
          sub_10003D8EC(v47, type metadata accessor for ParseDetectorResult);
          if (v51 >= v52) {
            break;
          }
          uint64_t v53 = *a1;
          if (!*a1) {
            goto LABEL_142;
          }
          Swift::Int v40 = v45;
          uint64_t v54 = v53 + v142 + v42;
          sub_10003FF7C(v53 + v45 + v42, v141, type metadata accessor for ParseDetectorResult);
          swift_arrayInitWithTakeFrontToBack();
          sub_10003FF7C(v141, v54, type metadata accessor for ParseDetectorResult);
          v42 -= v135;
          ++v43;
          a1 = v138;
          Swift::Int v41 = v139;
          if (v139 == v43) {
            goto LABEL_35;
          }
        }
        Swift::Int v41 = v139;
        Swift::Int v40 = v45;
LABEL_35:
        Swift::Int v31 = v41 + 1;
        v142 += v135;
        v40 += v135;
        Swift::Int v20 = v132;
      }
      while (v31 != v130);
      Swift::Int v31 = v130;
      uint64_t v2 = v126;
      size_t v17 = v129;
    }
LABEL_56:
    if (v31 < v20) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      size_t v17 = sub_1000456E8(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v68 = *((void *)v17 + 2);
    unint64_t v67 = *((void *)v17 + 3);
    unint64_t v19 = v68 + 1;
    if (v68 >= v67 >> 1) {
      size_t v17 = sub_1000456E8((char *)(v67 > 1), v68 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v19;
    long long v69 = v17 + 32;
    uint64_t v70 = &v17[16 * v68 + 32];
    Swift::Int v71 = v139;
    *(void *)uint64_t v70 = v20;
    *((void *)v70 + 1) = v71;
    if (v68)
    {
      while (1)
      {
        unint64_t v72 = v19 - 1;
        if (v19 >= 4)
        {
          uint64_t v77 = &v69[16 * v19];
          uint64_t v78 = *((void *)v77 - 8);
          uint64_t v79 = *((void *)v77 - 7);
          BOOL v83 = __OFSUB__(v79, v78);
          uint64_t v80 = v79 - v78;
          if (v83) {
            goto LABEL_121;
          }
          uint64_t v82 = *((void *)v77 - 6);
          uint64_t v81 = *((void *)v77 - 5);
          BOOL v83 = __OFSUB__(v81, v82);
          uint64_t v75 = v81 - v82;
          char v76 = v83;
          if (v83) {
            goto LABEL_122;
          }
          unint64_t v84 = v19 - 2;
          uint64_t v85 = &v69[16 * v19 - 32];
          uint64_t v87 = *(void *)v85;
          uint64_t v86 = *((void *)v85 + 1);
          BOOL v83 = __OFSUB__(v86, v87);
          uint64_t v88 = v86 - v87;
          if (v83) {
            goto LABEL_124;
          }
          BOOL v83 = __OFADD__(v75, v88);
          uint64_t v89 = v75 + v88;
          if (v83) {
            goto LABEL_127;
          }
          if (v89 >= v80)
          {
            uint64_t v107 = &v69[16 * v72];
            uint64_t v109 = *(void *)v107;
            uint64_t v108 = *((void *)v107 + 1);
            BOOL v83 = __OFSUB__(v108, v109);
            uint64_t v110 = v108 - v109;
            if (v83) {
              goto LABEL_131;
            }
            BOOL v100 = v75 < v110;
            goto LABEL_93;
          }
        }
        else
        {
          if (v19 != 3)
          {
            uint64_t v101 = *((void *)v17 + 4);
            uint64_t v102 = *((void *)v17 + 5);
            BOOL v83 = __OFSUB__(v102, v101);
            uint64_t v94 = v102 - v101;
            char v95 = v83;
            goto LABEL_87;
          }
          uint64_t v74 = *((void *)v17 + 4);
          uint64_t v73 = *((void *)v17 + 5);
          BOOL v83 = __OFSUB__(v73, v74);
          uint64_t v75 = v73 - v74;
          char v76 = v83;
        }
        if (v76) {
          goto LABEL_123;
        }
        unint64_t v84 = v19 - 2;
        uint64_t v90 = &v69[16 * v19 - 32];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v93 = __OFSUB__(v91, v92);
        uint64_t v94 = v91 - v92;
        char v95 = v93;
        if (v93) {
          goto LABEL_126;
        }
        uint64_t v96 = &v69[16 * v72];
        uint64_t v98 = *(void *)v96;
        uint64_t v97 = *((void *)v96 + 1);
        BOOL v83 = __OFSUB__(v97, v98);
        uint64_t v99 = v97 - v98;
        if (v83) {
          goto LABEL_129;
        }
        if (__OFADD__(v94, v99)) {
          goto LABEL_130;
        }
        if (v94 + v99 >= v75)
        {
          BOOL v100 = v75 < v99;
LABEL_93:
          if (v100) {
            unint64_t v72 = v84;
          }
          goto LABEL_95;
        }
LABEL_87:
        if (v95) {
          goto LABEL_125;
        }
        uint64_t v103 = &v69[16 * v72];
        uint64_t v105 = *(void *)v103;
        uint64_t v104 = *((void *)v103 + 1);
        BOOL v83 = __OFSUB__(v104, v105);
        uint64_t v106 = v104 - v105;
        if (v83) {
          goto LABEL_128;
        }
        if (v106 < v94) {
          goto LABEL_14;
        }
LABEL_95:
        unint64_t v111 = v72 - 1;
        if (v72 - 1 >= v19)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        uint64_t v112 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        uint64_t v113 = v17;
        long long v114 = &v69[16 * v111];
        uint64_t v115 = *(void *)v114;
        long long v116 = &v69[16 * v72];
        uint64_t v117 = *((void *)v116 + 1);
        sub_100044F30(v112 + *(void *)(v134 + 72) * *(void *)v114, v112 + *(void *)(v134 + 72) * *(void *)v116, v112 + *(void *)(v134 + 72) * v117, v133);
        if (v2) {
          goto LABEL_115;
        }
        if (v117 < v115) {
          goto LABEL_118;
        }
        if (v72 > *((void *)v113 + 2)) {
          goto LABEL_119;
        }
        *(void *)long long v114 = v115;
        *(void *)&v69[16 * v111 + 8] = v117;
        unint64_t v118 = *((void *)v113 + 2);
        if (v72 >= v118) {
          goto LABEL_120;
        }
        size_t v17 = v113;
        unint64_t v19 = v118 - 1;
        memmove(&v69[16 * v72], v116 + 16, 16 * (v118 - 1 - v72));
        *((void *)v113 + 2) = v118 - 1;
        a1 = v138;
        if (v118 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v19 = 1;
LABEL_14:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11) {
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int sub_1000444A8(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v90 = *a1;
      uint64_t v91 = *a1 + 80;
      uint64_t v92 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v94 = *(double *)(v90 + 88 * i + 80);
        uint64_t v95 = v92;
        uint64_t v96 = v91;
        do
        {
          if (v94 >= *(double *)v96) {
            break;
          }
          if (!v90) {
            goto LABEL_142;
          }
          uint64_t v97 = (_OWORD *)(v96 + 8);
          long long v98 = *(_OWORD *)(v96 + 8);
          long long v99 = *(_OWORD *)(v96 + 24);
          long long v100 = *(_OWORD *)(v96 + 40);
          long long v101 = *(_OWORD *)(v96 + 56);
          long long v102 = *(_OWORD *)(v96 + 72);
          long long v103 = *(_OWORD *)(v96 - 32);
          *(_OWORD *)(v96 + 40) = *(_OWORD *)(v96 - 48);
          *(_OWORD *)(v96 + 56) = v103;
          *(_OWORD *)(v96 + 72) = *(_OWORD *)(v96 - 16);
          *(void *)(v96 + 88) = *(void *)v96;
          long long v104 = *(_OWORD *)(v96 - 80);
          long long v105 = *(_OWORD *)(v96 - 64);
          *(_OWORD *)(v96 - 80) = v98;
          *(_OWORD *)(v96 - 64) = v99;
          *(_OWORD *)(v96 - 48) = v100;
          *(_OWORD *)(v96 - 32) = v101;
          *(_OWORD *)(v96 - 16) = v102;
          *(double *)uint64_t v96 = v94;
          v96 -= 88;
          *uint64_t v97 = v104;
          v97[1] = v105;
        }
        while (!__CFADD__(v95++, 1));
        v91 += 88;
        --v92;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_147;
  }
  Swift::Int v119 = result;
  long long v116 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v126 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      Swift::Int v11 = (char *)_swiftEmptyArrayStorage;
LABEL_104:
      uint64_t v107 = v11;
      unint64_t v118 = v8;
      if (v12 >= 2)
      {
        uint64_t v108 = *v116;
        do
        {
          unint64_t v109 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_133;
          }
          if (!v108) {
            goto LABEL_146;
          }
          uint64_t v110 = v107;
          uint64_t v111 = *(void *)&v107[16 * v109 + 32];
          uint64_t v112 = *(void *)&v107[16 * v12 + 24];
          sub_100045428((double *)(v108 + 88 * v111), (double *)(v108 + 88 * *(void *)&v107[16 * v12 + 16]), v108 + 88 * v112, v126);
          if (v1) {
            break;
          }
          if (v112 < v111) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v110 = sub_100045F20((uint64_t)v110);
          }
          if (v109 >= *((void *)v110 + 2)) {
            goto LABEL_135;
          }
          uint64_t v113 = &v110[16 * v109 + 32];
          *(void *)uint64_t v113 = v111;
          *((void *)v113 + 1) = v112;
          unint64_t v114 = *((void *)v110 + 2);
          if (v12 > v114) {
            goto LABEL_136;
          }
          memmove(&v110[16 * v12 + 16], &v110[16 * v12 + 32], 16 * (v114 - v12));
          uint64_t v107 = v110;
          *((void *)v110 + 2) = v114 - 1;
          unint64_t v12 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      v118[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v118 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    unint64_t v118 = (void *)v7;
    uint64_t v126 = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v117 = *a1 + 256;
  uint64_t v115 = *a1 - 8;
  Swift::Int v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v120 = v3;
  uint64_t v127 = v10;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      double v14 = *(double *)(v10 + 88 * v9 + 80);
      double v15 = *(double *)(v10 + 88 * v13 + 80);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = (double *)(v117 + 88 * v13);
        double v17 = v14;
        while (1)
        {
          double v18 = v17;
          double v17 = *v16;
          if (v14 < v15 == *v16 >= v18) {
            break;
          }
          ++v9;
          v16 += 11;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_139;
        }
        if (v13 < v9)
        {
          uint64_t v19 = 88 * v9;
          Swift::Int v20 = v9;
          Swift::Int v21 = v13;
          uint64_t v22 = 88 * v13;
          do
          {
            if (v21 != --v20)
            {
              if (!v10) {
                goto LABEL_145;
              }
              uint64_t v23 = v10 + v19;
              uint64_t v24 = *(void *)(v10 + v22 + 80);
              long long v125 = *(_OWORD *)(v10 + v22);
              long long v123 = *(_OWORD *)(v10 + v22 + 32);
              long long v124 = *(_OWORD *)(v10 + v22 + 16);
              long long v121 = *(_OWORD *)(v10 + v22 + 64);
              long long v122 = *(_OWORD *)(v10 + v22 + 48);
              memmove((void *)(v10 + v22), (const void *)(v10 + v19 - 88), 0x58uLL);
              uint64_t v10 = v127;
              *(_OWORD *)(v23 - 88) = v125;
              *(_OWORD *)(v23 - 72) = v124;
              *(_OWORD *)(v23 - 56) = v123;
              *(_OWORD *)(v23 - 40) = v122;
              *(_OWORD *)(v23 - 24) = v121;
              *(void *)(v23 - 8) = v24;
            }
            ++v21;
            v19 -= 88;
            v22 += 88;
          }
          while (v21 < v20);
          Swift::Int v3 = v120;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_137;
    }
    if (v9 - v13 >= v119) {
      goto LABEL_47;
    }
    Swift::Int v25 = v13 + v119;
    if (__OFADD__(v13, v119)) {
      goto LABEL_140;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v13) {
      break;
    }
    if (v9 != v25)
    {
      uint64_t v26 = v115 + 88 * v9;
      do
      {
        double v27 = *(double *)(v10 + 88 * v9 + 80);
        Swift::Int v28 = v13;
        uint64_t v29 = v26;
        do
        {
          if (v27 >= *(double *)v29) {
            break;
          }
          if (!v10) {
            goto LABEL_143;
          }
          uint64_t v30 = (_OWORD *)(v29 + 8);
          long long v31 = *(_OWORD *)(v29 + 8);
          long long v32 = *(_OWORD *)(v29 + 24);
          long long v33 = *(_OWORD *)(v29 + 40);
          long long v34 = *(_OWORD *)(v29 + 56);
          long long v35 = *(_OWORD *)(v29 + 72);
          long long v36 = *(_OWORD *)(v29 - 32);
          *(_OWORD *)(v29 + 40) = *(_OWORD *)(v29 - 48);
          *(_OWORD *)(v29 + 56) = v36;
          *(_OWORD *)(v29 + 72) = *(_OWORD *)(v29 - 16);
          *(void *)(v29 + 88) = *(void *)v29;
          long long v37 = *(_OWORD *)(v29 - 80);
          long long v38 = *(_OWORD *)(v29 - 64);
          *(_OWORD *)(v29 - 80) = v31;
          *(_OWORD *)(v29 - 64) = v32;
          *(_OWORD *)(v29 - 48) = v33;
          *(_OWORD *)(v29 - 32) = v34;
          *(_OWORD *)(v29 - 16) = v35;
          *(double *)uint64_t v29 = v27;
          v29 -= 88;
          ++v28;
          *uint64_t v30 = v37;
          v30[1] = v38;
        }
        while (v9 != v28);
        ++v9;
        v26 += 88;
      }
      while (v9 != v25);
      Swift::Int v9 = v25;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_132;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v11 = sub_1000456E8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v40 = *((void *)v11 + 2);
    unint64_t v39 = *((void *)v11 + 3);
    unint64_t v12 = v40 + 1;
    uint64_t v10 = v127;
    if (v40 >= v39 >> 1)
    {
      uint64_t v89 = sub_1000456E8((char *)(v39 > 1), v40 + 1, 1, v11);
      uint64_t v10 = v127;
      Swift::Int v11 = v89;
    }
    *((void *)v11 + 2) = v12;
    Swift::Int v41 = v11 + 32;
    uint64_t v42 = &v11[16 * v40 + 32];
    *(void *)uint64_t v42 = v13;
    *((void *)v42 + 1) = v9;
    if (v40)
    {
      while (1)
      {
        unint64_t v43 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v48 = &v41[16 * v12];
          uint64_t v49 = *((void *)v48 - 8);
          uint64_t v50 = *((void *)v48 - 7);
          BOOL v54 = __OFSUB__(v50, v49);
          uint64_t v51 = v50 - v49;
          if (v54) {
            goto LABEL_121;
          }
          uint64_t v53 = *((void *)v48 - 6);
          uint64_t v52 = *((void *)v48 - 5);
          BOOL v54 = __OFSUB__(v52, v53);
          uint64_t v46 = v52 - v53;
          char v47 = v54;
          if (v54) {
            goto LABEL_122;
          }
          unint64_t v55 = v12 - 2;
          Swift::Int v56 = &v41[16 * v12 - 32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v54 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v54) {
            goto LABEL_124;
          }
          BOOL v54 = __OFADD__(v46, v59);
          uint64_t v60 = v46 + v59;
          if (v54) {
            goto LABEL_127;
          }
          if (v60 >= v51)
          {
            uint64_t v78 = &v41[16 * v43];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v54 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v54) {
              goto LABEL_131;
            }
            BOOL v71 = v46 < v81;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v72 = *((void *)v11 + 4);
            uint64_t v73 = *((void *)v11 + 5);
            BOOL v54 = __OFSUB__(v73, v72);
            uint64_t v65 = v73 - v72;
            char v66 = v54;
            goto LABEL_78;
          }
          uint64_t v45 = *((void *)v11 + 4);
          uint64_t v44 = *((void *)v11 + 5);
          BOOL v54 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          char v47 = v54;
        }
        if (v47) {
          goto LABEL_123;
        }
        unint64_t v55 = v12 - 2;
        uint64_t v61 = &v41[16 * v12 - 32];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v64 = __OFSUB__(v62, v63);
        uint64_t v65 = v62 - v63;
        char v66 = v64;
        if (v64) {
          goto LABEL_126;
        }
        unint64_t v67 = &v41[16 * v43];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v54 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v54) {
          goto LABEL_129;
        }
        if (__OFADD__(v65, v70)) {
          goto LABEL_130;
        }
        if (v65 + v70 >= v46)
        {
          BOOL v71 = v46 < v70;
LABEL_84:
          if (v71) {
            unint64_t v43 = v55;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v66) {
          goto LABEL_125;
        }
        uint64_t v74 = &v41[16 * v43];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v54 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v54) {
          goto LABEL_128;
        }
        if (v77 < v65) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v82 = v43 - 1;
        if (v43 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10) {
          goto LABEL_144;
        }
        BOOL v83 = v11;
        unint64_t v84 = &v41[16 * v82];
        uint64_t v85 = *(void *)v84;
        uint64_t v86 = &v41[16 * v43];
        uint64_t v87 = *((void *)v86 + 1);
        sub_100045428((double *)(v10 + 88 * *(void *)v84), (double *)(v10 + 88 * *(void *)v86), v10 + 88 * v87, v126);
        if (v1) {
          goto LABEL_94;
        }
        if (v87 < v85) {
          goto LABEL_118;
        }
        if (v43 > *((void *)v83 + 2)) {
          goto LABEL_119;
        }
        *(void *)unint64_t v84 = v85;
        *(void *)&v41[16 * v82 + 8] = v87;
        unint64_t v88 = *((void *)v83 + 2);
        if (v43 >= v88) {
          goto LABEL_120;
        }
        Swift::Int v11 = v83;
        unint64_t v12 = v88 - 1;
        memmove(&v41[16 * v43], v86 + 16, 16 * (v88 - 1 - v43));
        *((void *)v83 + 2) = v88 - 1;
        uint64_t v10 = v127;
        if (v88 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v120;
    if (v9 >= v120)
    {
      uint64_t v8 = v118;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100044C68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = a1;
  uint64_t v30 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v30);
  uint64_t v31 = (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - v9;
  __chkstk_darwin(v11);
  double v14 = (char *)&v25 - v13;
  uint64_t v29 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v33 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v32 = v15 * v29;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v27;
    while (1)
    {
      uint64_t v18 = *a4;
      uint64_t v19 = a4;
      sub_100040050(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for ParseDetectorResult);
      sub_100040050(v33 + v16 + v18, (uint64_t)v10, type metadata accessor for ParseDetectorResult);
      uint64_t v20 = *(int *)(v30 + 36);
      double v21 = *(double *)&v10[v20];
      double v22 = *(double *)&v14[v20];
      sub_10003D8EC((uint64_t)v10, type metadata accessor for ParseDetectorResult);
      sub_10003D8EC((uint64_t)v14, type metadata accessor for ParseDetectorResult);
      if (v21 >= v22)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v26) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v23 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v24 = v23 + v33 + v16;
      sub_10003FF7C(v23 + v32 + v16, v31, type metadata accessor for ParseDetectorResult);
      swift_arrayInitWithTakeFrontToBack();
      sub_10003FF7C(v31, v24, type metadata accessor for ParseDetectorResult);
      v16 -= v28;
      ++v17;
      a4 = v19;
      if (v29 == v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_100044F30(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v42 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v42);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_69;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_70;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v45 = a1;
  unint64_t v44 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v30 = a4 + v19;
      unint64_t v43 = a4 + v19;
      unint64_t v45 = a2;
      unint64_t v41 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        do
        {
          unint64_t v32 = a3 - v14;
          sub_100040050(v30 - v14, (uint64_t)v12, type metadata accessor for ParseDetectorResult);
          unint64_t v33 = a2 - v14;
          sub_100040050(a2 - v14, (uint64_t)v9, type metadata accessor for ParseDetectorResult);
          uint64_t v34 = *(int *)(v42 + 36);
          double v35 = *(double *)&v9[v34];
          double v36 = *(double *)&v12[v34];
          sub_10003D8EC((uint64_t)v9, type metadata accessor for ParseDetectorResult);
          sub_10003D8EC((uint64_t)v12, type metadata accessor for ParseDetectorResult);
          if (v35 >= v36)
          {
            unint64_t v37 = v43;
            v43 -= v14;
            if (a3 < v37 || v32 >= v37)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v37)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v33 = a2;
          }
          else
          {
            if (a3 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v45 -= v14;
          }
          unint64_t v30 = v43;
          if (v43 <= a4) {
            break;
          }
          a2 = v33;
          a3 -= v14;
        }
        while (v33 > v41);
      }
      goto LABEL_67;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v20 = a4 + v18;
    unint64_t v43 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_100040050(a2, (uint64_t)v12, type metadata accessor for ParseDetectorResult);
        sub_100040050(a4, (uint64_t)v9, type metadata accessor for ParseDetectorResult);
        uint64_t v22 = *(int *)(v42 + 36);
        double v23 = *(double *)&v9[v22];
        double v24 = *(double *)&v12[v22];
        sub_10003D8EC((uint64_t)v9, type metadata accessor for ParseDetectorResult);
        sub_10003D8EC((uint64_t)v12, type metadata accessor for ParseDetectorResult);
        unint64_t v25 = v45;
        if (v23 >= v24)
        {
          unint64_t v28 = v44 + v14;
          if (v45 < v44 || v45 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v45 != v44)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v44 = v28;
          unint64_t v26 = a2;
        }
        else
        {
          unint64_t v26 = a2 + v14;
          if (v45 < a2 || v45 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v45 == a2)
          {
            unint64_t v25 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v45 = v25 + v14;
        a4 = v44;
        if (v44 >= v20) {
          break;
        }
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_67:
    sub_100045C98(&v45, &v44, (uint64_t *)&v43, type metadata accessor for ParseDetectorResult);
    return 1;
  }
LABEL_71:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100045428(double *__dst, double *__src, unint64_t a3, double *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 88;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 88;
  double v23 = __dst;
  uint64_t v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -87)
    {
      if (a4 != __src || &__src[11 * v11] <= a4) {
        memmove(a4, __src, 88 * v11);
      }
      uint64_t v16 = &v4[11 * v11];
      double v21 = (char *)v16;
      double v23 = v6;
      if (v7 < v6 && v10 >= 88)
      {
        uint64_t v17 = (double *)(a3 - 88);
        do
        {
          uint64_t v18 = v17 + 11;
          if (*(v16 - 1) >= *(v6 - 1))
          {
            double v21 = (char *)(v16 - 11);
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              memmove(v17, v16 - 11, 0x58uLL);
            }
            uint64_t v19 = v6;
            v16 -= 11;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v19 = v6 - 11;
            if (v18 != v6 || v17 >= v6) {
              memmove(v17, v6 - 11, 0x58uLL);
            }
            double v23 = v6 - 11;
            if (v19 <= v7) {
              break;
            }
          }
          v17 -= 11;
          uint64_t v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_1000457E4((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -87)
  {
    if (a4 != __dst || &__dst[11 * v9] <= a4) {
      memmove(a4, __dst, 88 * v9);
    }
    uint64_t v12 = &v4[11 * v9];
    double v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 88)
    {
      uint64_t v13 = v4;
      while (1)
      {
        if (v6[10] >= v13[10])
        {
          uint64_t v4 = v13 + 11;
          int64_t v15 = v13;
          uint64_t v14 = v6;
          if (v7 == v13)
          {
            v13 += 11;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 11;
          }
        }
        else
        {
          uint64_t v14 = v6 + 11;
          int64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        memmove(v7, v15, 0x58uLL);
LABEL_18:
        v7 += 11;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v22 = v4;
        double v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000456E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000F214(&qword_100519FB0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000457E4(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -88)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 88;
    if (result != v3 || result >= &v3[88 * v6])
    {
      return (char *)memmove(result, v3, 88 * v6);
    }
  }
  return result;
}

char *sub_1000458B8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_100045974(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 63;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -64)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 6;
    if (result != v3 || result >= &v3[64 * v7])
    {
      return (char *)memmove(result, v3, v7 << 6);
    }
  }
  return result;
}

char *sub_100045A30(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_100045AFC(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_100045BB8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = 40 * (v4 / 40);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

uint64_t sub_100045C80(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100045C98(a1, a2, a3, type metadata accessor for BundleClassification.ClassificationType);
}

uint64_t sub_100045C98(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_100045DDC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_10000F214(&qword_10051A060);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_100045F20(uint64_t a1)
{
  return sub_1000456E8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045F34(void *a1)
{
  return sub_1000410B4(0, a1[2], 0, a1, &qword_100519FB8, type metadata accessor for ParseDetectorResult);
}

uint64_t sub_100045F78(uint64_t a1)
{
  return sub_100041604(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045F8C(uint64_t a1)
{
  return sub_100040F48(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045FA0(uint64_t a1)
{
  return sub_100041D68(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045FB4(uint64_t a1)
{
  return sub_100042338(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045FC8(uint64_t a1)
{
  return sub_100041C08(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045FDC(uint64_t a1)
{
  return sub_100041930(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100045FF0(void *a1)
{
  return sub_1000410B4(0, a1[2], 0, a1, &qword_10051A190, type metadata accessor for BundleClassification.ClassificationType);
}

uint64_t sub_100046034(void *a1)
{
  return sub_100043650(0, a1[2], 0, a1, &qword_10051A068, &qword_10051A060);
}

BOOL sub_10004606C(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  double v3 = *(double *)(a1 + 16);
  BOOL result = 0;
  if (v3 == *(double *)(a2 + 16)
    && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a2 + 40)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 56) == *(double *)(a2 + 56)&& *(double *)(a1 + 64) == *(double *)(a2 + 64)&& *(double *)(a1 + 72) == *(double *)(a2 + 72))
  {
    return *(double *)(a1 + 80) == *(double *)(a2 + 80);
  }
  return result;
}

uint64_t sub_100046124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CVTrackedDetection.HistoryEntry(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = sub_10000F214(&qword_100519F80);
  __chkstk_darwin(v13 - 8);
  int64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (double *)&v15[*(int *)(v16 + 56)];
  sub_100040050(a1, (uint64_t)v15, type metadata accessor for CVTrackedDetection.HistoryEntry);
  sub_100040050(a2, (uint64_t)v17, type metadata accessor for CVTrackedDetection.HistoryEntry);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100040050((uint64_t)v15, (uint64_t)v9, type metadata accessor for CVTrackedDetection.HistoryEntry);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v18 = *v9 == *v17;
LABEL_8:
      sub_10003D8EC((uint64_t)v15, type metadata accessor for CVTrackedDetection.HistoryEntry);
      return v18 & 1;
    }
  }
  else
  {
    sub_100040050((uint64_t)v15, (uint64_t)v12, type metadata accessor for CVTrackedDetection.HistoryEntry);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_10003FF7C((uint64_t)v17, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
      char v18 = sub_1003FD840(v12, v6);
      sub_10003D8EC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10003D8EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
      goto LABEL_8;
    }
    sub_10003D8EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  sub_10000FBD8((uint64_t)v15, &qword_100519F80);
  char v18 = 0;
  return v18 & 1;
}

BOOL sub_1000463E0(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = (int *)type metadata accessor for CVTrackSnapshot(0), (sub_1003FD840(a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (sub_1003FD840(a1 + v4[6], a2 + v4[6]) & 1) != 0
    && *(unsigned __int8 *)(a1 + v4[7]) == *(unsigned __int8 *)(a2 + v4[7])
    && *(double *)(a1 + v4[8]) == *(double *)(a2 + v4[8]))
  {
    return *(float *)(a1 + v4[9]) == *(float *)(a2 + v4[9]);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_10004648C()
{
  unint64_t result = qword_10051A020;
  if (!qword_10051A020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A020);
  }
  return result;
}

unint64_t sub_1000464E0()
{
  unint64_t result = qword_10051A038;
  if (!qword_10051A038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A038);
  }
  return result;
}

unint64_t sub_100046534()
{
  unint64_t result = qword_10051A058;
  if (!qword_10051A058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A058);
  }
  return result;
}

uint64_t sub_100046588(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654474736574616CLL && a2 == 0xEF6E6F6974636574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x734574736574616CLL && a2 == 0xEE006574616D6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6379436566696CLL && a2 == 0xEE00657461745365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69546E696769726FLL && a2 == 0xEF706D617473656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10004687C(uint64_t result, void (*a2)(uint64_t *__return_ptr, void *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v5 = 0;
  uint64_t v27 = result + 32;
  char v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v29 = v6;
    if (v5 <= v4) {
      unint64_t v7 = v4;
    }
    else {
      unint64_t v7 = v5;
    }
    while (1)
    {
      if (v5 == v7)
      {
        __break(1u);
        return result;
      }
      uint64_t v8 = (uint64_t *)(v27 + 88 * v5);
      uint64_t v9 = v8[1];
      uint64_t v10 = v8[2];
      uint64_t v11 = v8[3];
      uint64_t v12 = v8[4];
      uint64_t v13 = v8[5];
      uint64_t v14 = v8[6];
      uint64_t v15 = v8[7];
      uint64_t v16 = v8[9];
      uint64_t v17 = v8[10];
      ++v5;
      uint64_t v32 = v8[8];
      uint64_t v33 = *v8;
      v38[0] = *v8;
      v38[1] = v9;
      v38[2] = v10;
      v38[3] = v11;
      v38[4] = v12;
      v38[5] = v13;
      v38[6] = v14;
      v38[7] = v15;
      v38[8] = v32;
      v38[9] = v16;
      uint64_t v30 = v17;
      uint64_t v31 = v16;
      v38[10] = v17;
      a2(&v37, v38);
      uint64_t v18 = *a4;
      v35[0] = v37;
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      if (!*(void *)(v18 + 16)) {
        break;
      }
      Swift::Int v19 = AnyHashable._rawHashValue(seed:)(*(void *)(v18 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v18 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
        break;
      }
      uint64_t v22 = ~v20;
      while (1)
      {
        sub_100046B94(*(void *)(v18 + 48) + 40 * v21, (uint64_t)v35);
        char v23 = static AnyHashable.== infix(_:_:)();
        sub_100046BF0((uint64_t)v35);
        if (v23) {
          break;
        }
        unint64_t v21 = (v21 + 1) & v22;
        if (((*(void *)(v18 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t result = sub_100046BF0((uint64_t)v36);
      if (v5 == v4) {
        return (uint64_t)v29;
      }
    }
LABEL_15:
    swift_bridgeObjectRelease();
    sub_100046BF0((uint64_t)v36);
    AnyHashable.init<A>(_:)();
    sub_1003BE664((uint64_t)v36, (uint64_t)v35);
    AnyHashable.base.getter();
    sub_100046BF0((uint64_t)v36);
    swift_dynamicCast();
    char v6 = v29;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v39 = v29;
    if ((result & 1) == 0)
    {
      unint64_t result = sub_1000408C4(0, v29[2] + 1, 1);
      char v6 = v39;
    }
    unint64_t v25 = v6[2];
    unint64_t v24 = v6[3];
    if (v25 >= v24 >> 1)
    {
      unint64_t result = sub_1000408C4(v24 > 1, v25 + 1, 1);
      char v6 = v39;
    }
    v6[2] = v25 + 1;
    unint64_t v26 = &v6[11 * v25];
    v26[4] = v33;
    v26[5] = v9;
    v26[6] = v10;
    v26[7] = v11;
    v26[8] = v12;
    v26[9] = v13;
    v26[10] = v14;
    v26[11] = v15;
    v26[12] = v32;
    v26[13] = v31;
    v26[14] = v30;
  }
  while (v5 != v4);
  return (uint64_t)v6;
}

uint64_t sub_100046B94(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100046BF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100046C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100046CAC()
{
  unint64_t result = qword_100518A40;
  if (!qword_100518A40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100518A40);
  }
  return result;
}

_OWORD *sub_100046CEC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t getEnumTagSinglePayload for CVTrackSnapshot.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CVTrackSnapshot.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100046E58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVTrackSnapshot.CodingKeys()
{
  return &type metadata for CVTrackSnapshot.CodingKeys;
}

unint64_t sub_100046E94()
{
  unint64_t result = qword_10051A110;
  if (!qword_10051A110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A110);
  }
  return result;
}

unint64_t sub_100046EEC()
{
  unint64_t result = qword_10051A118;
  if (!qword_10051A118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A118);
  }
  return result;
}

unint64_t sub_100046F44()
{
  unint64_t result = qword_10051A120;
  if (!qword_10051A120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A120);
  }
  return result;
}

unint64_t sub_100046F9C()
{
  unint64_t result = qword_10051A1A0;
  if (!qword_10051A1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1A0);
  }
  return result;
}

unint64_t sub_100046FF4()
{
  unint64_t result = qword_10051A1A8;
  if (!qword_10051A1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1A8);
  }
  return result;
}

unint64_t sub_10004704C()
{
  unint64_t result = qword_10051A1B0;
  if (!qword_10051A1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1B0);
  }
  return result;
}

unint64_t sub_1000470A4()
{
  unint64_t result = qword_10051A1B8;
  if (!qword_10051A1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1B8);
  }
  return result;
}

void *sub_1000470F8()
{
  return &protocol witness table for String;
}

unint64_t sub_100047108()
{
  unint64_t result = qword_10051A1C0;
  if (!qword_10051A1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1C0);
  }
  return result;
}

unint64_t sub_100047164()
{
  unint64_t result = qword_10051A1C8;
  if (!qword_10051A1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1C8);
  }
  return result;
}

unint64_t sub_1000471BC()
{
  unint64_t result = qword_10051A1D0;
  if (!qword_10051A1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1D0);
  }
  return result;
}

unint64_t sub_100047214()
{
  unint64_t result = qword_10051A1D8;
  if (!qword_10051A1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1D8);
  }
  return result;
}

unint64_t sub_10004726C()
{
  unint64_t result = qword_10051A1E0;
  if (!qword_10051A1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1E0);
  }
  return result;
}

void *sub_1000472C0()
{
  return &protocol witness table for String;
}

uint64_t sub_1000472CC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000472DC()
{
  sub_1000490B0();

  return static AssistantSchemaEntity.typeDisplayRepresentation.getter();
}

uint64_t sub_100047328()
{
  return sub_100013AA8(&qword_10051A1E8, &qword_10051A1F0);
}

uint64_t sub_100047364(uint64_t a1)
{
  unint64_t v2 = sub_100047108();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000473B4()
{
  unint64_t result = qword_10051A1F8;
  if (!qword_10051A1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A1F8);
  }
  return result;
}

uint64_t sub_100047408()
{
  uint64_t v1 = type metadata accessor for TypeDisplayRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 16);
  unsigned int v6 = *(void **)(v0 + 24);
  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  sub_1000490B0();
  static AssistantSchemaEntity.typeDisplayRepresentation.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v7._countAndFlagsBits = 58;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v5;
  v8._object = v6;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return DisplayRepresentation.init(stringLiteral:)();
}

uint64_t sub_100047558(uint64_t a1)
{
  unint64_t v2 = sub_10004726C();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000475A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000475C0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 104) = a1;
  uint64_t v4 = type metadata accessor for UTType();
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = *(void *)(v4 - 8);
  *(void *)(v2 + 128) = swift_task_alloc();
  sub_10000F214(&qword_10051E070);
  *(void *)(v2 + 136) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  *(void *)(v2 + 144) = v5;
  *(void *)(v2 + 152) = *(void *)(v5 - 8);
  *(void *)(v2 + 160) = swift_task_alloc();
  *(void *)(v2 + 168) = swift_task_alloc();
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v2 + 64) = v6;
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(a2 + 64);
  *(void *)(v2 + 96) = *(void *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 32) = v7;
  return _swift_task_switch(sub_100047740, 0, 0);
}

uint64_t sub_100047740()
{
  static UTType.jpeg.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[22] = v1;
  void *v1 = v0;
  v1[1] = sub_1000477E4;
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  return sub_100047B18(v2, (uint64_t)(v0 + 2), v3);
}

uint64_t sub_1000477E4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  uint64_t v3 = *(void *)(*(void *)v1 + 120);
  uint64_t v4 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100047A90;
  }
  else {
    uint64_t v5 = sub_100047954;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100047954()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v0[20];
    uint64_t v5 = v0[21];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v5, v1);
    SentTransferredFile.init(_:allowAccessingOriginalFile:)();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  return result;
}

uint64_t sub_100047A90()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100047B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  sub_10000F214(&qword_10051E070);
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_100047C1C, 0, 0);
}

uint64_t sub_100047C1C()
{
  uint64_t v37 = v0;
  uint64_t v2 = (void (*)(char *, uint64_t))v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  type metadata accessor for FileWriter();
  uint64_t inited = swift_initStackObject();
  strcpy((char *)(inited + 16), "frame-entity");
  *(unsigned char *)(inited + 29) = 0;
  *(_WORD *)(inited + 30) = -5120;
  sub_1003DD6E0(*(uint8_t **)v3, *(char **)(v3 + 8), v2, v1);
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v7 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
    sub_10000FBD8(v7, &qword_10051E070);
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000F378(v8, (uint64_t)qword_10055E118);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "error writing file", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[11];
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[7];
    swift_release();

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, 1, 1, v12);
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v17(v0[14], v7, v5);
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v19 = v0[13];
    uint64_t v18 = v0[14];
    uint64_t v20 = v0[11];
    uint64_t v21 = v0[12];
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000F378(v22, (uint64_t)qword_10055E118);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, v18, v20);
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v27 = v0[12];
    uint64_t v26 = v0[13];
    uint64_t v28 = v0[11];
    if (v25)
    {
      log = v23;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      sub_100049058();
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = sub_1003806B0(v30, v31, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, log, v24, "FrameEntity written file to %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      (*(void (**)(void, void))(v27 + 8))(v0[13], v0[11]);
      swift_release();
    }
    uint64_t v32 = v0[11];
    uint64_t v33 = v0[12];
    uint64_t v34 = v0[7];
    v17(v34, v0[14], v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v32);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100048098()
{
  uint64_t v0 = type metadata accessor for UTType();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.jpeg.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 1;
}

uint64_t sub_10004815C()
{
  uint64_t v0 = type metadata accessor for UTType();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_10000F214(&qword_10051A2A8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.jpeg.getter();
  FileRepresentation.init(exportedContentType:shouldAllowToOpenInPlace:exporting:)();
  sub_100013AA8(&qword_10051A2B8, &qword_10051A2A8);
  TransferRepresentation.exportingCondition(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

unint64_t sub_100048304()
{
  sub_10000F214(&qword_10051A290);
  sub_10000F214(&qword_10051A298);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10043D4F0;
  DisplayRepresentation.init(stringLiteral:)();
  unint64_t result = sub_10031AB78(v0);
  qword_10055E058 = result;
  return result;
}

Swift::Bool __swiftcall ScanwaveViewController._canShowWhileLocked()()
{
  return 1;
}

unint64_t sub_1000483D8()
{
  unint64_t result = qword_10051A200;
  if (!qword_10051A200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A200);
  }
  return result;
}

Swift::Int sub_10004842C()
{
  return Hasher._finalize()();
}

uint64_t sub_100048478()
{
  return String.hash(into:)();
}

Swift::Int sub_100048488()
{
  return Hasher._finalize()();
}

uint64_t sub_1000484D0@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E4D60, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100048524(void *a1@<X8>)
{
  *a1 = 1734701162;
  a1[1] = 0xE400000000000000;
}

unint64_t sub_10004853C()
{
  unint64_t result = qword_10051A208;
  if (!qword_10051A208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A208);
  }
  return result;
}

unint64_t sub_100048594()
{
  unint64_t result = qword_10051A210;
  if (!qword_10051A210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A210);
  }
  return result;
}

unint64_t sub_1000485EC()
{
  unint64_t result = qword_10051A218;
  if (!qword_10051A218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A218);
  }
  return result;
}

void *sub_100048640()
{
  return &protocol witness table for String;
}

unint64_t sub_100048650()
{
  unint64_t result = qword_10051A220;
  if (!qword_10051A220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A220);
  }
  return result;
}

unint64_t sub_1000486A8()
{
  unint64_t result = qword_10051A228;
  if (!qword_10051A228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A228);
  }
  return result;
}

unint64_t sub_100048700()
{
  unint64_t result = qword_10051A230;
  if (!qword_10051A230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A230);
  }
  return result;
}

unint64_t sub_100048758()
{
  unint64_t result = qword_10051A238;
  if (!qword_10051A238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A238);
  }
  return result;
}

uint64_t sub_1000487AC(uint64_t a1)
{
  unint64_t v2 = sub_100049004();

  return static AssistantSchemaEnum.typeDisplayRepresentation.getter(a1, v2);
}

uint64_t sub_1000487F8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100048848()
{
  unint64_t result = qword_10051A240;
  if (!qword_10051A240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A240);
  }
  return result;
}

uint64_t sub_10004889C(uint64_t a1)
{
  unint64_t v2 = sub_100048848();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000488EC()
{
  unint64_t result = qword_10051A248;
  if (!qword_10051A248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A248);
  }
  return result;
}

unint64_t sub_100048944()
{
  unint64_t result = qword_10051A250;
  if (!qword_10051A250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A250);
  }
  return result;
}

unint64_t sub_10004899C()
{
  unint64_t result = qword_10051A258;
  if (!qword_10051A258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A258);
  }
  return result;
}

uint64_t sub_1000489F0()
{
  if (qword_100517D40 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100048A4C(uint64_t a1)
{
  unint64_t v2 = sub_100048758();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100048A98()
{
  return sub_100013AA8(&qword_10051A260, &qword_10051A268);
}

void sub_100048AD4(void *a1@<X8>)
{
  *a1 = &off_1004E4D98;
}

unint64_t sub_100048AE8()
{
  unint64_t result = qword_10051A270;
  if (!qword_10051A270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A270);
  }
  return result;
}

unint64_t sub_100048B44()
{
  unint64_t result = qword_10051A278;
  if (!qword_10051A278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A278);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AssetType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100048C90);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100048CB8()
{
  return 0;
}

ValueMetadata *type metadata accessor for AssetType()
{
  return &type metadata for AssetType;
}

uint64_t destroy for FrameEntity(uint64_t a1)
{
  sub_100038B34(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t *initializeWithCopy for FrameEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100038528(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for FrameEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100038528(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100038B34(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FrameEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100038B34(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FrameEntity()
{
  return &type metadata for FrameEntity;
}

uint64_t sub_100048FC8()
{
  return sub_100013AA8(&qword_10051A280, &qword_10051A288);
}

unint64_t sub_100049004()
{
  unint64_t result = qword_10051A2A0;
  if (!qword_10051A2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A2A0);
  }
  return result;
}

unint64_t sub_100049058()
{
  unint64_t result = qword_10051E350;
  if (!qword_10051E350)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051E350);
  }
  return result;
}

unint64_t sub_1000490B0()
{
  unint64_t result = qword_10051A2C8;
  if (!qword_10051A2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A2C8);
  }
  return result;
}

uint64_t sub_100049104@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v49 = a2;
  uint64_t v50 = a1;
  BOOL v54 = a3;
  uint64_t v3 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v45 - v6;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_10051A2D8);
  uint64_t v11 = EntityProperty<>.init()();
  sub_10000F214(&qword_10051A2E0);
  uint64_t v56 = v11;
  swift_retain();
  uint64_t v48 = EntityProperty<>.init()();
  sub_10000F214(&qword_10051A2E8);
  swift_retain();
  uint64_t v12 = EntityProperty<>.init()();
  sub_10000F214(&qword_10051A2F0);
  sub_100048848();
  swift_retain();
  uint64_t v47 = EntityProperty<>.init()();
  sub_10000F214(&qword_10051A2F8);
  swift_retain();
  uint64_t v13 = EntityProperty<>.init()();
  swift_retain();
  uint64_t v14 = EntityProperty<>.init()();
  swift_retain();
  uint64_t v15 = EntityProperty<>.init()();
  swift_retain();
  UUID.init()();
  uint64_t v53 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  char v62 = 0;
  swift_bridgeObjectRetain();
  unint64_t v19 = v49;
  uint64_t v18 = v50;
  sub_100038528(v50, v49);
  sub_100038528(v18, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v20 = v48;
  swift_retain();
  swift_retain();
  uint64_t v21 = v47;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v55 = v15;
  swift_retain();
  EntityProperty.wrappedValue.setter();
  sub_100038B34(v18, v19);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v22 = v21;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v57 = v17;
  swift_bridgeObjectRelease();
  sub_100038528(v18, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v23 = (uint64_t)v51;
  static Date.now.getter();
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  sub_100049978(v23, v52);
  EntityProperty.wrappedValue.setter();
  sub_10000FBD8(v23, &qword_10051A2D0);
  sub_100038B34(v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v61 = 0;
  sub_100038528(v18, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  sub_100038B34(v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  char v60 = 0;
  sub_100038528(v18, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v45 = v13;
  swift_retain();
  uint64_t v25 = v14;
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  sub_100038B34(v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  char v59 = 0;
  uint64_t v26 = v18;
  uint64_t v27 = v18;
  unint64_t v28 = v19;
  sub_100038528(v26, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v29 = v45;
  swift_retain();
  uint64_t v46 = v25;
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  unint64_t v30 = v28;
  sub_100038B34(v27, v28);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  char v58 = 0;
  sub_100038528(v27, v28);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v31 = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v32 = v46;
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  uint64_t v33 = v27;
  sub_100038B34(v27, v30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v34 = v56;
  swift_release();
  swift_bridgeObjectRelease();
  sub_100038B34(v27, v30);
  swift_release();
  uint64_t v35 = v32;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v36 = v31;
  swift_release();
  swift_release();
  uint64_t v37 = v57;
  swift_bridgeObjectRelease();
  uint64_t v38 = v33;
  sub_100038528(v33, v30);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v39 = v12;
  swift_retain();
  uint64_t v40 = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v41 = v55;
  swift_retain();
  sub_100038B34(v38, v30);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v44 = v53;
  unint64_t v43 = v54;
  *BOOL v54 = v38;
  v43[1] = v30;
  v43[2] = v44;
  v43[3] = v37;
  _OWORD v43[4] = v34;
  v43[5] = v36;
  v43[6] = v39;
  v43[7] = v40;
  v43[8] = v29;
  v43[9] = v35;
  v43[10] = v41;
  return result;
}

uint64_t sub_100049978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000499E0()
{
  sub_10004ECF4(v0, (uint64_t)v5);
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  sub_10004ECF4(v0, (uint64_t)v6);
  uint64_t v3 = v6[0];
  switch(v7)
  {
    case 1:
    case 2:
      uint64_t v3 = v6[2];
      swift_bridgeObjectRetain();
      break;
    case 3:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v3 = String.init(localized:table:bundle:locale:comment:)();
      break;
    default:
      swift_bridgeObjectRetain();
      break;
  }
  return v3;
}

uint64_t sub_100049C54(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10004ECF4(v1, (uint64_t)v17);
  uint64_t v4 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000F214(&qword_10051A310);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = (uint64_t)&v9[*(int *)(v10 + 56)];
  sub_10000FB74(a1, (uint64_t)v9, &qword_10051A308);
  sub_10004ECF4(v2, v11);
  uint64_t v12 = type metadata accessor for ResultLookupState();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v9, 1, v12) == 1)
  {
    sub_100050964((uint64_t)v2, (void (*)(void, void, void, void, void))sub_10004E998);
LABEL_29:
    uint64_t v13 = 0;
    uint64_t v14 = &qword_10051A310;
  }
  else
  {
    sub_10000FB74((uint64_t)v9, (uint64_t)v6, &qword_10051A308);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_100050964((uint64_t)v2, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        sub_10004ECF4(v2, (uint64_t)&v18);
        uint64_t v13 = 0;
        uint64_t v14 = &qword_10051A310;
        if (v20 == 3)
        {
          int8x16_t v15 = vorrq_s8(v18, v19);
          if (!*(void *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL))) {
            goto LABEL_27;
          }
        }
        break;
      case 2u:
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20 == 3 && v18.i64[0] == 1) {
          goto LABEL_25;
        }
        goto LABEL_28;
      case 3u:
        sub_100050964((uint64_t)v2, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20) {
          goto LABEL_29;
        }
        goto LABEL_27;
      case 4u:
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20 != 1) {
          goto LABEL_28;
        }
        goto LABEL_15;
      case 5u:
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20 != 2) {
          goto LABEL_28;
        }
LABEL_15:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_26;
      case 6u:
        sub_100050964((uint64_t)v2, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20 != 3) {
          goto LABEL_29;
        }
        uint64_t v13 = 0;
        uint64_t v14 = &qword_10051A310;
        if (v18.i64[0] != 2) {
          break;
        }
        goto LABEL_21;
      case 7u:
        sub_100050964((uint64_t)v2, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20 != 3) {
          goto LABEL_29;
        }
        uint64_t v13 = 0;
        uint64_t v14 = &qword_10051A310;
        if (v18.i64[0] != 3) {
          break;
        }
LABEL_21:
        if (v19.i64[0] | v19.i64[1] | v18.i64[1]) {
          break;
        }
        goto LABEL_27;
      case 8u:
        sub_10004ECF4(v2, (uint64_t)&v18);
        if (v20 != 3 || v18.i64[0] != 4) {
          goto LABEL_28;
        }
LABEL_25:
        if (v19.i64[0] | v19.i64[1] | v18.i64[1])
        {
LABEL_28:
          sub_100050964((uint64_t)v2, (void (*)(void, void, void, void, void))sub_10004E998);
          sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
          goto LABEL_29;
        }
LABEL_26:
        sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
LABEL_27:
        sub_10004EA10(*(void *)v11, *(void *)(v11 + 8), *(void *)(v11 + 16), *(void *)(v11 + 24), *(unsigned char *)(v11 + 32));
        uint64_t v13 = 1;
        uint64_t v14 = &qword_10051A308;
        break;
      default:
        goto LABEL_28;
    }
  }
  sub_10000FBD8((uint64_t)v9, v14);
  return v13;
}

void *sub_10004A124()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TextDetectorResult.DataDetector(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for TextDetectorResult(0);
  uint64_t v7 = v6;
  if (*(unsigned char *)(v1 + *(int *)(v6 + 56)) == 1 && (uint64_t v8 = *(void *)(v1 + *(int *)(v6 + 48)), *(void *)(v8 + 16)))
  {
    sub_10005072C(v8 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t)v5, type metadata accessor for TextDetectorResult.DataDetector);
    uint64_t v9 = sub_10031A1F0(*v5);
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0x646E696677656976;
    }
    if (v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = 0xEA00000000007265;
    }
    uint64_t v13 = (uint64_t *)((char *)v5 + *(int *)(v2 + 24));
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100328CC4(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = sub_100328CC4((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    v16[2] = v18 + 1;
    int8x16_t v19 = &v16[5 * v18];
    v19[4] = v11;
    v19[5] = v12;
    v19[6] = v15;
    v19[7] = v14;
    *((unsigned char *)v19 + 64) = 2;
    sub_100050A0C((uint64_t)v5, type metadata accessor for TextDetectorResult.DataDetector);
  }
  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t v42 = v7;
  uint64_t v20 = *(void *)(v1 + *(int *)(v7 + 44));
  int64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = _swiftEmptyArrayStorage;
  if (v21)
  {
    uint64_t v41 = v1;
    unint64_t v43 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000407B0(0, v21, 0);
    uint64_t v22 = v43;
    uint64_t v23 = (uint64_t *)(v20 + 48);
    do
    {
      uint64_t v24 = *(v23 - 1);
      uint64_t v25 = *v23;
      unint64_t v43 = v22;
      unint64_t v27 = v22[2];
      unint64_t v26 = v22[3];
      swift_bridgeObjectRetain();
      if (v27 >= v26 >> 1)
      {
        sub_1000407B0(v26 > 1, v27 + 1, 1);
        uint64_t v22 = v43;
      }
      v22[2] = v27 + 1;
      unint64_t v28 = &v22[2 * v27];
      v28[4] = v24;
      v28[5] = v25;
      v23 += 5;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    uint64_t v1 = v41;
  }
  unint64_t v43 = v22;
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100024278();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_100335A80();
  swift_bridgeObjectRelease();
  unint64_t v30 = v29[2];
  if (v30 >= 5)
  {
    uint64_t v31 = *(void *)(v1 + *(int *)(v42 + 40));
    char v32 = sub_10004E808((uint64_t)&off_1004E4A30, v31);
    swift_bridgeObjectRelease();
    if (v30 >= 0x12 && (v32 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_100328CC4(0, v16[2] + 1, 1, v16);
      }
      unint64_t v34 = v16[2];
      unint64_t v33 = v16[3];
      if (v34 >= v33 >> 1) {
        uint64_t v16 = sub_100328CC4((void *)(v33 > 1), v34 + 1, 1, v16);
      }
      v16[2] = v34 + 1;
      uint64_t v35 = &v16[5 * v34];
      v35[4] = 2;
      void v35[5] = 0;
      v35[6] = 0;
      v35[7] = 0;
      *((unsigned char *)v35 + 64) = 3;
    }
    if ((sub_10004E808((uint64_t)&off_1004E4A90, v31) & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_100328CC4(0, v16[2] + 1, 1, v16);
      }
      unint64_t v37 = v16[2];
      unint64_t v36 = v16[3];
      if (v37 >= v36 >> 1) {
        uint64_t v16 = sub_100328CC4((void *)(v36 > 1), v37 + 1, 1, v16);
      }
      v16[2] = v37 + 1;
      uint64_t v38 = &v16[5 * v37];
      v38[4] = 3;
      v38[5] = 0;
      v38[6] = 0;
      v38[7] = 0;
      *((unsigned char *)v38 + 64) = 3;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t sub_10004A56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v207 = a5;
  uint64_t v209 = a4;
  uint64_t v210 = a3;
  uint64_t v198 = a2;
  uint64_t v245 = a1;
  uint64_t v249 = a6;
  sub_10004ECF4(v6, (uint64_t)v255);
  uint64_t v228 = v256;
  uint64_t v229 = v257;
  uint64_t v213 = type metadata accessor for EventLookupResultView(0);
  __chkstk_darwin(v213);
  uint64_t v197 = (uint64_t)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v196 = (uint64_t)&v192 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = sub_10000F214(&qword_10051A330);
  __chkstk_darwin(v208);
  uint64_t v212 = (uint64_t)&v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = (void *)sub_10000F214(&qword_10051A338);
  __chkstk_darwin(v233);
  unint64_t v214 = (char *)&v192 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AloudResultView = type metadata accessor for ReadAloudResultView();
  __chkstk_darwin(AloudResultView);
  uint64_t v194 = (uint64_t *)((char *)&v192 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v195 = (uint64_t)&v192 - v14;
  uint64_t v230 = sub_10000F214(&qword_10051A340);
  __chkstk_darwin(v230);
  uint64_t v232 = (uint64_t)&v192 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = sub_10000F214(&qword_10051A348);
  __chkstk_darwin(v219);
  uint64_t v221 = (uint64_t *)((char *)&v192 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v231 = (void *)sub_10000F214(&qword_10051A350);
  __chkstk_darwin(v231);
  v222 = (char *)&v192 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = sub_10000F214(&qword_10051A358);
  __chkstk_darwin(v243);
  uint64_t KeyPath = (uint64_t)&v192 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = type metadata accessor for DataDetectorResultView(0);
  __chkstk_darwin(v220);
  uint64_t v202 = (uint64_t *)((char *)&v192 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  uint64_t v206 = (uint64_t)&v192 - v21;
  uint64_t v22 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v22 - 8);
  uint64_t v200 = (uint64_t)&v192 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v205 = (uint64_t)&v192 - v25;
  uint64_t v226 = type metadata accessor for BarCodeResultView(0);
  __chkstk_darwin(v226);
  uint64_t v201 = (uint64_t *)((char *)&v192 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  uint64_t v204 = (uint64_t)&v192 - v28;
  uint64_t v29 = type metadata accessor for BarCodeLookupState(0);
  __chkstk_darwin(v29 - 8);
  uint64_t v199 = (uint64_t)&v192 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v203 = (uint64_t)&v192 - v32;
  uint64_t v223 = sub_10000F214(&qword_10051A360);
  __chkstk_darwin(v223);
  uint64_t v224 = (uint64_t *)((char *)&v192 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v238 = sub_10000F214(&qword_10051A368);
  __chkstk_darwin(v238);
  uint64_t v225 = (char *)&v192 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ResultView = type metadata accessor for GeoLocateResultView(0);
  __chkstk_darwin(ResultView);
  uint64_t v193 = (uint64_t)&v192 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for GeoLocateState(0);
  __chkstk_darwin(State - 8);
  uint64_t v192 = (uint64_t)&v192 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = sub_10000F214(&qword_10051A370);
  __chkstk_darwin(v246);
  uint64_t v248 = (uint64_t)&v192 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = sub_10000F214(&qword_10051A378);
  __chkstk_darwin(v240);
  uint64_t v242 = (uint64_t)&v192 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = sub_10000F214(&qword_10051A380);
  __chkstk_darwin(v235);
  uint64_t v237 = (uint64_t)&v192 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = sub_10000F214(&qword_10051A388);
  __chkstk_darwin(v215);
  uint64_t v216 = (uint64_t *)((char *)&v192 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v236 = sub_10000F214(&qword_10051A390);
  __chkstk_darwin(v236);
  uint64_t v217 = (char *)&v192 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v241 = sub_10000F214(&qword_10051A398);
  __chkstk_darwin(v241);
  uint64_t v239 = (uint64_t)&v192 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v247 = sub_10000F214(&qword_10051A3A0);
  __chkstk_darwin(v247);
  uint64_t v244 = (char *)&v192 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for ResultLookupState();
  __chkstk_darwin(v45);
  uint64_t v227 = (uint64_t)&v192 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  unint64_t v49 = (uint64_t *)((char *)&v192 - v48);
  __chkstk_darwin(v50);
  uint64_t v52 = (uint64_t *)((char *)&v192 - v51);
  __chkstk_darwin(v53);
  uint64_t v55 = (char *)&v192 - v54;
  __chkstk_darwin(v56);
  char v58 = (char *)&v192 - v57;
  __chkstk_darwin(v59);
  uint64_t v61 = (void **)((char *)&v192 - v60);
  __chkstk_darwin(v62);
  BOOL v64 = (char *)&v192 - v63;
  __chkstk_darwin(v65);
  unint64_t v67 = (uint64_t *)((char *)&v192 - v66);
  uint64_t v68 = sub_10000F214(&qword_10051A3A8);
  __chkstk_darwin(v68 - 8);
  uint64_t v70 = (char *)&v192 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = (uint64_t)&v70[*(int *)(v71 + 56)];
  sub_10005072C(v245, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  uint64_t v245 = v72;
  sub_10004ECF4(v251, v72);
  uint64_t v250 = v70;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v73 = (uint64_t)v250;
      sub_10005072C((uint64_t)v250, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v74 = *v67;
      uint64_t v75 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 == 3)
      {
        int8x16_t v76 = vorrq_s8(v258, v259);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v76.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)))
        {
          uint64_t v252 = 0x4060400000000000;
          uint64_t v77 = v210;
          swift_retain();
          uint64_t v78 = v209;
          swift_retain();
          State.init(wrappedValue:)();
          uint64_t v79 = v253;
          uint64_t v80 = v254;
          uint64_t v81 = v216;
          void *v216 = v74;
          v81[1] = v77;
          v81[2] = v78;
          *((unsigned char *)v81 + 24) = v207 & 1;
          v81[4] = v79;
          v81[5] = v80;
          swift_storeEnumTagMultiPayload();
          sub_10005010C();
          sub_100050500(&qword_10051A3D0, (void (*)(uint64_t))type metadata accessor for GeoLocateResultView);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v82 = (uint64_t)v217;
          _ConditionalContent<>.init(storage:)();
          sub_10000FB74(v82, v237, &qword_10051A390);
          swift_storeEnumTagMultiPayload();
          sub_100050060();
          sub_100050160();
          uint64_t v83 = v239;
          _ConditionalContent<>.init(storage:)();
          sub_10000FBD8(v82, &qword_10051A390);
          sub_10000FB74(v83, v242, &qword_10051A398);
          swift_storeEnumTagMultiPayload();
          sub_100050024();
          sub_100050260();
          uint64_t v84 = (uint64_t)v244;
          _ConditionalContent<>.init(storage:)();
          sub_10000FBD8(v83, &qword_10051A398);
          sub_10000FB74(v84, v248, &qword_10051A3A0);
          swift_storeEnumTagMultiPayload();
          sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
          _ConditionalContent<>.init(storage:)();
          sub_10000FBD8(v84, &qword_10051A3A0);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
      }
      sub_100050964((uint64_t)v75, (void (*)(void, void, void, void, void))sub_10004E998);
      swift_bridgeObjectRelease();
      goto LABEL_41;
    case 2u:
      uint64_t v73 = (uint64_t)v250;
      sub_10005072C((uint64_t)v250, (uint64_t)v64, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v85 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 == 3 && v258.i64[0] == 1 && !(v259.i64[0] | v259.i64[1] | v258.i64[1]))
      {
        uint64_t v86 = v192;
        sub_1000509A4((uint64_t)v64, v192, type metadata accessor for GeoLocateState);
        uint64_t v87 = v193;
        sub_10005072C(v86, v193, type metadata accessor for GeoLocateState);
        sub_10005072C(v87, (uint64_t)v216, type metadata accessor for GeoLocateResultView);
        swift_storeEnumTagMultiPayload();
        sub_10005010C();
        sub_100050500(&qword_10051A3D0, (void (*)(uint64_t))type metadata accessor for GeoLocateResultView);
        uint64_t v88 = (uint64_t)v217;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v88, v237, &qword_10051A390);
        swift_storeEnumTagMultiPayload();
        sub_100050060();
        sub_100050160();
        uint64_t v89 = v239;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v88, &qword_10051A390);
        sub_10000FB74(v89, v242, &qword_10051A398);
        swift_storeEnumTagMultiPayload();
        sub_100050024();
        sub_100050260();
        uint64_t v90 = (uint64_t)v244;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v89, &qword_10051A398);
        sub_10000FB74(v90, v248, &qword_10051A3A0);
        swift_storeEnumTagMultiPayload();
        sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v90, &qword_10051A3A0);
        sub_100050A0C(v87, type metadata accessor for GeoLocateResultView);
        uint64_t v91 = type metadata accessor for GeoLocateState;
        goto LABEL_30;
      }
      sub_100050964((uint64_t)v85, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v179 = type metadata accessor for GeoLocateState;
      uint64_t v180 = (uint64_t)v64;
      goto LABEL_40;
    case 3u:
      sub_10005072C((uint64_t)v250, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v92 = *v61;
      BOOL v93 = v61[1];
      uint64_t v95 = (uint64_t)v61[2];
      unint64_t v94 = (unint64_t)v61[3];
      uint64_t v97 = v61[4];
      uint64_t v96 = v61[5];
      long long v99 = v61[6];
      long long v98 = v61[7];
      long long v100 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260)
      {
        sub_100050964((uint64_t)v100, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_10004FF38(v92, v93, v95, v94);
        goto LABEL_35;
      }
      char v181 = *(unsigned char *)(v198 + *(int *)(type metadata accessor for AppConfiguration() + 24));
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v182 = (uint64_t)v99;
      uint64_t v183 = v224;
      *uint64_t v224 = KeyPath;
      v183[1] = 0;
      *((unsigned char *)v183 + 16) = 0;
      *((unsigned char *)v183 + 17) = v181;
      uint64_t v233 = v92;
      v183[3] = v92;
      v183[4] = v93;
      v183[5] = v95;
      v183[6] = v94;
      v183[7] = v97;
      v183[8] = v96;
      v183[9] = v182;
      v183[10] = v98;
      uint64_t v184 = v182;
      swift_storeEnumTagMultiPayload();
      sub_100050964((uint64_t)v100, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v185 = v233;
      uint64_t v231 = v93;
      uint64_t v232 = v95;
      uint64_t v230 = v184;
      sub_100050624(v233, v93, v95, v94);
      sub_100050714(KeyPath, 0, 0);
      sub_100050624(v185, v93, v95, v94);
      sub_10005020C();
      sub_100050500(&qword_10051A3E8, (void (*)(uint64_t))type metadata accessor for BarCodeResultView);
      uint64_t v186 = (uint64_t)v225;
      _ConditionalContent<>.init(storage:)();
      sub_10000FB74(v186, v237, &qword_10051A368);
      swift_storeEnumTagMultiPayload();
      sub_100050060();
      sub_100050160();
      uint64_t v187 = v239;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v186, &qword_10051A368);
      sub_10000FB74(v187, v242, &qword_10051A398);
      swift_storeEnumTagMultiPayload();
      sub_100050024();
      sub_100050260();
      uint64_t v188 = (uint64_t)v244;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v187, &qword_10051A398);
      sub_10000FB74(v188, v248, &qword_10051A3A0);
      swift_storeEnumTagMultiPayload();
      sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
      _ConditionalContent<>.init(storage:)();
      uint64_t v189 = v233;
      uint64_t v190 = v231;
      uint64_t v191 = v232;
      sub_10004FF38(v233, v231, v232, v94);
      sub_10000FBD8(v188, &qword_10051A3A0);
      sub_100050720(KeyPath, 0, 0);
      sub_10004FF38(v189, v190, v191, v94);
      goto LABEL_44;
    case 4u:
      uint64_t v73 = (uint64_t)v250;
      sub_10005072C((uint64_t)v250, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      long long v101 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 == 1)
      {
        uint64_t v102 = (uint64_t)v58;
        uint64_t v86 = v203;
        sub_1000509A4(v102, v203, type metadata accessor for BarCodeLookupState);
        uint64_t v103 = v199;
        sub_10005072C(v86, v199, type metadata accessor for BarCodeLookupState);
        uint64_t v104 = swift_getKeyPath();
        uint64_t v105 = (uint64_t)v201;
        uint64_t *v201 = v104;
        *(void *)(v105 + 8) = 0;
        *(unsigned char *)(v105 + 16) = 0;
        *(void *)(v105 + 24) = swift_getKeyPath();
        *(void *)(v105 + 32) = 0;
        *(unsigned char *)(v105 + 40) = 0;
        *(void *)(v105 + 48) = swift_getKeyPath();
        *(void *)(v105 + 56) = 0;
        *(unsigned char *)(v105 + 64) = 0;
        uint64_t v106 = v226;
        sub_1000509A4(v103, v105 + *(int *)(v226 + 28), type metadata accessor for BarCodeLookupState);
        uint64_t v107 = v105 + *(int *)(v106 + 32);
        LOBYTE(v252) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        State.init(wrappedValue:)();
        uint64_t v108 = v254;
        *(unsigned char *)uint64_t v107 = v253;
        *(void *)(v107 + 8) = v108;
        uint64_t v109 = v204;
        sub_1000509A4(v105, v204, type metadata accessor for BarCodeResultView);
        sub_10005072C(v109, (uint64_t)v224, type metadata accessor for BarCodeResultView);
        swift_storeEnumTagMultiPayload();
        sub_10005020C();
        sub_100050500(&qword_10051A3E8, (void (*)(uint64_t))type metadata accessor for BarCodeResultView);
        uint64_t v110 = (uint64_t)v225;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v110, v237, &qword_10051A368);
        swift_storeEnumTagMultiPayload();
        sub_100050060();
        sub_100050160();
        uint64_t v111 = v239;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v110, &qword_10051A368);
        sub_10000FB74(v111, v242, &qword_10051A398);
        swift_storeEnumTagMultiPayload();
        sub_100050024();
        sub_100050260();
        uint64_t v112 = (uint64_t)v244;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v111, &qword_10051A398);
        sub_10000FB74(v112, v248, &qword_10051A3A0);
        swift_storeEnumTagMultiPayload();
        sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v112, &qword_10051A3A0);
        sub_100050A0C(v109, type metadata accessor for BarCodeResultView);
        uint64_t v91 = type metadata accessor for BarCodeLookupState;
        goto LABEL_30;
      }
      sub_100050964((uint64_t)v101, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v179 = type metadata accessor for BarCodeLookupState;
      uint64_t v180 = (uint64_t)v58;
      goto LABEL_40;
    case 5u:
      uint64_t v73 = (uint64_t)v250;
      sub_10005072C((uint64_t)v250, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v113 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 == 2)
      {
        uint64_t v86 = v205;
        sub_1000509A4((uint64_t)v55, v205, type metadata accessor for DataDetectorState);
        uint64_t v114 = v200;
        sub_10005072C(v86, v200, type metadata accessor for DataDetectorState);
        uint64_t v115 = swift_getKeyPath();
        uint64_t v116 = (uint64_t)v202;
        *uint64_t v202 = v115;
        *(void *)(v116 + 8) = 0;
        *(unsigned char *)(v116 + 16) = 0;
        *(void *)(v116 + 24) = swift_getKeyPath();
        *(void *)(v116 + 32) = 0;
        *(unsigned char *)(v116 + 40) = 0;
        uint64_t v117 = v220;
        sub_1000509A4(v114, v116 + *(int *)(v220 + 24), type metadata accessor for DataDetectorState);
        uint64_t v118 = v116 + *(int *)(v117 + 28);
        LOBYTE(v252) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        State.init(wrappedValue:)();
        uint64_t v119 = v254;
        *(unsigned char *)uint64_t v118 = v253;
        *(void *)(v118 + 8) = v119;
        uint64_t v120 = v206;
        sub_1000509A4(v116, v206, type metadata accessor for DataDetectorResultView);
        sub_10005072C(v120, (uint64_t)v221, type metadata accessor for DataDetectorResultView);
        swift_storeEnumTagMultiPayload();
        sub_100050500(&qword_10051A400, (void (*)(uint64_t))type metadata accessor for DataDetectorResultView);
        sub_1000503D0();
        uint64_t v121 = (uint64_t)v222;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v121, v232, &qword_10051A350);
        swift_storeEnumTagMultiPayload();
        sub_100050324();
        sub_100050424();
        uint64_t v122 = KeyPath;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v121, &qword_10051A350);
        sub_10000FB74(v122, v242, &qword_10051A358);
        swift_storeEnumTagMultiPayload();
        sub_100050024();
        sub_100050260();
        uint64_t v123 = (uint64_t)v244;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v122, &qword_10051A358);
        sub_10000FB74(v123, v248, &qword_10051A3A0);
        swift_storeEnumTagMultiPayload();
        sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v123, &qword_10051A3A0);
        sub_100050A0C(v120, type metadata accessor for DataDetectorResultView);
        uint64_t v91 = type metadata accessor for DataDetectorState;
        goto LABEL_30;
      }
      sub_100050964((uint64_t)v113, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v179 = type metadata accessor for DataDetectorState;
      uint64_t v180 = (uint64_t)v55;
      goto LABEL_40;
    case 6u:
      uint64_t v73 = (uint64_t)v250;
      sub_10005072C((uint64_t)v250, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v125 = *v52;
      uint64_t v124 = v52[1];
      uint64_t v127 = v52[2];
      uint64_t v126 = v52[3];
      uint64_t v129 = v52[4];
      Swift::Int v128 = (long long *)v52[5];
      uint64_t v130 = v52[6];
      uint64_t v131 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 == 3 && v258.i64[0] == 2 && !(v259.i64[0] | v259.i64[1] | v258.i64[1]))
      {
        LOBYTE(v252) = 0;
        State.init(wrappedValue:)();
        char v132 = v253;
        uint64_t v133 = v254;
        uint64_t v134 = v221;
        *uint64_t v221 = v125;
        v134[1] = v124;
        v134[2] = v127;
        v134[3] = v126;
        v134[4] = v129;
        v134[5] = (uint64_t)v128;
        v134[6] = v130;
        *((unsigned char *)v134 + 56) = v132;
        v134[8] = v133;
        uint64_t v239 = v129;
        swift_storeEnumTagMultiPayload();
        sub_1000505BC(v125, v124);
        sub_100050500(&qword_10051A400, (void (*)(uint64_t))type metadata accessor for DataDetectorResultView);
        sub_1000503D0();
        swift_retain();
        uint64_t v251 = v128;
        uint64_t v135 = (uint64_t)v222;
        _ConditionalContent<>.init(storage:)();
        uint64_t v238 = v130;
        sub_10000FB74(v135, v232, &qword_10051A350);
        swift_storeEnumTagMultiPayload();
        sub_100050324();
        sub_100050424();
        uint64_t v136 = KeyPath;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v135, &qword_10051A350);
        sub_10000FB74(v136, v242, &qword_10051A358);
        swift_storeEnumTagMultiPayload();
        sub_100050024();
        sub_100050260();
        uint64_t v137 = (uint64_t)v244;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v136, &qword_10051A358);
        sub_10000FB74(v137, v248, &qword_10051A3A0);
        swift_storeEnumTagMultiPayload();
        sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v137, &qword_10051A3A0);
        sub_10004FEE8(v125, v124);
        swift_release();
        goto LABEL_44;
      }
      sub_100050964((uint64_t)v131, (void (*)(void, void, void, void, void))sub_10004E998);
      sub_10004FEE8(v125, v124);
      goto LABEL_41;
    case 7u:
      sub_10005072C((uint64_t)v250, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v138 = *v49;
      uint64_t v139 = v49[1];
      uint64_t v141 = v49[2];
      uint64_t v140 = v49[3];
      uint64_t v143 = v49[4];
      uint64_t v142 = v49[5];
      uint64_t v144 = (void *)v49[6];
      uint64_t v145 = v49[7];
      uint64_t v146 = v49[8];
      uint64_t v147 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 != 3 || v258.i64[0] != 3 || v259.i64[0] | v259.i64[1] | v258.i64[1])
      {
        sub_100050964((uint64_t)v147, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_10004FE7C(v138, v139, v141, v140, v143, v142, v144);
LABEL_35:
        uint64_t v73 = (uint64_t)v250;
        goto LABEL_41;
      }
      uint64_t v148 = swift_getKeyPath();
      uint64_t v149 = (uint64_t)v194;
      uint64_t *v194 = v148;
      sub_10000F214(&qword_100522BF0);
      swift_storeEnumTagMultiPayload();
      uint64_t v150 = v142;
      uint64_t v151 = (int *)AloudResultView;
      long long v152 = (uint64_t *)(v149 + *(int *)(AloudResultView + 20));
      uint64_t *v152 = v138;
      v152[1] = v139;
      v152[2] = v141;
      v152[3] = v140;
      uint64_t v153 = v140;
      uint64_t v154 = v141;
      uint64_t v155 = v139;
      uint64_t v156 = v138;
      v152[4] = v143;
      v152[5] = v150;
      v152[6] = (uint64_t)v144;
      v152[7] = v145;
      v152[8] = v146;
      uint64_t v157 = v151[6];
      uint64_t v238 = v153;
      uint64_t v239 = v150;
      uint64_t v251 = (long long *)v144;
      sub_100050550(v156, v155, v154, v153, v143, v150, v144);
      uint64_t v237 = v145;
      uint64_t v236 = v146;
      if (qword_100517F48 != -1) {
        swift_once();
      }
      *(void *)(v149 + v157) = qword_10055E3F8;
      uint64_t v158 = v149 + v151[7];
      LOBYTE(v252) = 0;
      swift_retain();
      State.init(wrappedValue:)();
      uint64_t v159 = v254;
      *(unsigned char *)uint64_t v158 = v253;
      *(void *)(v158 + 8) = v159;
      uint64_t v160 = v149 + v151[8];
      LOBYTE(v252) = 0;
      State.init(wrappedValue:)();
      uint64_t v161 = v254;
      *(unsigned char *)uint64_t v160 = v253;
      *(void *)(v160 + 8) = v161;
      uint64_t v162 = v195;
      sub_1000509A4(v149, v195, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      sub_10005072C(v162, v212, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
      swift_storeEnumTagMultiPayload();
      sub_100050500(&qword_10051A418, (void (*)(uint64_t))type metadata accessor for ReadAloudResultView);
      sub_100050500(&qword_10051A420, (void (*)(uint64_t))type metadata accessor for EventLookupResultView);
      uint64_t v163 = (uint64_t)v214;
      _ConditionalContent<>.init(storage:)();
      sub_10000FB74(v163, v232, &qword_10051A338);
      swift_storeEnumTagMultiPayload();
      sub_100050324();
      sub_100050424();
      uint64_t v164 = KeyPath;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v163, &qword_10051A338);
      sub_10000FB74(v164, v242, &qword_10051A358);
      swift_storeEnumTagMultiPayload();
      sub_100050024();
      sub_100050260();
      uint64_t v165 = (uint64_t)v244;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v164, &qword_10051A358);
      sub_10000FB74(v165, v248, &qword_10051A3A0);
      swift_storeEnumTagMultiPayload();
      sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
      _ConditionalContent<>.init(storage:)();
      sub_10004FE7C(v156, v155, v154, v238, v143, v239, v251);
      sub_10000FBD8(v165, &qword_10051A3A0);
      sub_100050A0C(v162, (uint64_t (*)(void))type metadata accessor for ReadAloudResultView);
LABEL_44:
      sub_10004EA10(*(void *)v245, *(void *)(v245 + 8), *(void *)(v245 + 16), *(void *)(v245 + 24), *(unsigned char *)(v245 + 32));
      uint64_t result = sub_100050A0C((uint64_t)v250, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      break;
    case 8u:
      uint64_t v73 = (uint64_t)v250;
      uint64_t v166 = v227;
      sub_10005072C((uint64_t)v250, v227, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v167 = v251;
      sub_10004ECF4(v251, (uint64_t)&v258);
      if (v260 == 3 && v258.i64[0] == 4 && !(v259.i64[0] | v259.i64[1] | v258.i64[1]))
      {
        uint64_t v86 = v196;
        sub_1000509A4(v166, v196, type metadata accessor for EventLookupState);
        uint64_t v168 = v197;
        sub_10005072C(v86, v197, type metadata accessor for EventLookupState);
        uint64_t v169 = v213;
        uint64_t v170 = v168 + *(int *)(v213 + 20);
        LOBYTE(v252) = 0;
        State.init(wrappedValue:)();
        uint64_t v171 = v254;
        *(unsigned char *)uint64_t v170 = v253;
        *(void *)(v170 + 8) = v171;
        uint64_t v172 = v168 + *(int *)(v169 + 24);
        LOBYTE(v252) = 0;
        State.init(wrappedValue:)();
        uint64_t v173 = v254;
        *(unsigned char *)uint64_t v172 = v253;
        *(void *)(v172 + 8) = v173;
        uint64_t v174 = *(int *)(v169 + 28);
        *(void *)(v168 + v174) = [objc_allocWithZone((Class)EKEventStore) init];
        sub_10005072C(v168, v212, type metadata accessor for EventLookupResultView);
        swift_storeEnumTagMultiPayload();
        sub_100050500(&qword_10051A418, (void (*)(uint64_t))type metadata accessor for ReadAloudResultView);
        sub_100050500(&qword_10051A420, (void (*)(uint64_t))type metadata accessor for EventLookupResultView);
        uint64_t v175 = (uint64_t)v214;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v175, v232, &qword_10051A338);
        swift_storeEnumTagMultiPayload();
        sub_100050324();
        sub_100050424();
        uint64_t v176 = KeyPath;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v175, &qword_10051A338);
        sub_10000FB74(v176, v242, &qword_10051A358);
        swift_storeEnumTagMultiPayload();
        sub_100050024();
        sub_100050260();
        uint64_t v177 = (uint64_t)v244;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v176, &qword_10051A358);
        sub_10000FB74(v177, v248, &qword_10051A3A0);
        swift_storeEnumTagMultiPayload();
        sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v177, &qword_10051A3A0);
        sub_100050A0C(v168, type metadata accessor for EventLookupResultView);
        uint64_t v91 = type metadata accessor for EventLookupState;
LABEL_30:
        sub_100050A0C(v86, v91);
LABEL_31:
        sub_10004EA10(*(void *)v245, *(void *)(v245 + 8), *(void *)(v245 + 16), *(void *)(v245 + 24), *(unsigned char *)(v245 + 32));
        uint64_t result = sub_100050A0C(v73, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      }
      else
      {
        sub_100050964((uint64_t)v167, (void (*)(void, void, void, void, void))sub_10004E998);
        uint64_t v179 = type metadata accessor for EventLookupState;
        uint64_t v180 = v166;
LABEL_40:
        sub_100050A0C(v180, v179);
LABEL_41:
        swift_storeEnumTagMultiPayload();
        sub_10005029C(&qword_10051A3B0, &qword_10051A3A0, (void (*)(void))sub_100050024, (void (*)(void))sub_100050260);
        _ConditionalContent<>.init(storage:)();
        uint64_t result = sub_10000FBD8(v73, &qword_10051A3A8);
      }
      break;
    default:
      sub_100050964((uint64_t)v251, (void (*)(void, void, void, void, void))sub_10004E998);
      goto LABEL_35;
  }
  return result;
}

unint64_t sub_10004D0C4(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v70 = a1;
  sub_10004ECF4(v1, (uint64_t)v71);
  uint64_t v68 = v72;
  uint64_t v67 = v73;
  uint64_t v3 = type metadata accessor for EventLookupState(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v62 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v64 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BarCodeLookupState(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v63 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t State = type metadata accessor for GeoLocateState(0);
  __chkstk_darwin(State - 8);
  uint64_t v61 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ResultLookupState();
  __chkstk_darwin(v11);
  uint64_t v66 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v61 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v61 - v17;
  __chkstk_darwin(v19);
  uint64_t v65 = (uint64_t)&v61 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v61 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v61 - v25;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v61 - v28;
  __chkstk_darwin(v30);
  uint64_t v32 = (uint64_t *)((char *)&v61 - v31);
  uint64_t v33 = sub_10000F214(&qword_10051A3A8);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v61 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (uint64_t)&v35[*(int *)(v36 + 56)];
  sub_10005072C((uint64_t)v70, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  uint64_t v69 = v37;
  uint64_t v70 = v2;
  sub_10004ECF4(v2, v37);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10005072C((uint64_t)v35, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v38 = *v32;
      uint64_t v39 = v70;
      sub_10004ECF4(v70, (uint64_t)&v79);
      if (v81 == 3)
      {
        int8x16_t v40 = vorrq_s8(v79, v80);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)))
        {
          unint64_t v41 = sub_1003996A4(v38);
          swift_bridgeObjectRelease();
          uint64_t v42 = (uint64_t)v35;
          goto LABEL_42;
        }
      }
      sub_100050964((uint64_t)v39, (void (*)(void, void, void, void, void))sub_10004E998);
      swift_bridgeObjectRelease();
      goto LABEL_34;
    case 2u:
      uint64_t v43 = (uint64_t)v35;
      sub_10005072C((uint64_t)v35, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v44 = v70;
      sub_10004ECF4(v70, (uint64_t)&v79);
      if (v81 == 3 && v79.i64[0] == 1 && !(v80.i64[0] | v80.i64[1] | v79.i64[1]))
      {
        uint64_t v45 = v61;
        sub_1000509A4((uint64_t)v29, v61, type metadata accessor for GeoLocateState);
        unint64_t v41 = sub_100114910(v45);
        uint64_t v46 = type metadata accessor for GeoLocateState;
        goto LABEL_28;
      }
      sub_100050964((uint64_t)v44, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v57 = type metadata accessor for GeoLocateState;
      uint64_t v58 = (uint64_t)v29;
      goto LABEL_38;
    case 3u:
      uint64_t v43 = (uint64_t)v35;
      sub_10005072C((uint64_t)v35, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      sub_1000508CC((uint64_t)v26, (uint64_t)&v79);
      uint64_t v47 = v70;
      sub_10004ECF4(v70, (uint64_t)&v74);
      if (v78)
      {
        sub_100050964((uint64_t)v47, (void (*)(void, void, void, void, void))sub_10004E998);
        sub_100050928((uint64_t)&v79);
        goto LABEL_39;
      }
      swift_bridgeObjectRetain();
      unint64_t v41 = sub_100173034((uint64_t)&v79);
      sub_100050928((uint64_t)&v79);
      sub_100050964((uint64_t)v47, (void (*)(void, void, void, void, void))sub_10004EA10);
      goto LABEL_41;
    case 4u:
      uint64_t v43 = (uint64_t)v35;
      sub_10005072C((uint64_t)v35, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v48 = v70;
      sub_10004ECF4(v70, (uint64_t)&v79);
      if (v81 == 1)
      {
        uint64_t v45 = v63;
        sub_1000509A4((uint64_t)v23, v63, type metadata accessor for BarCodeLookupState);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v41 = sub_100190470(v45);
        uint64_t v46 = type metadata accessor for BarCodeLookupState;
        goto LABEL_28;
      }
      sub_100050964((uint64_t)v48, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v57 = type metadata accessor for BarCodeLookupState;
      uint64_t v58 = (uint64_t)v23;
      goto LABEL_38;
    case 5u:
      uint64_t v43 = (uint64_t)v35;
      uint64_t v49 = v65;
      sub_10005072C((uint64_t)v35, v65, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v50 = v70;
      sub_10004ECF4(v70, (uint64_t)&v79);
      if (v81 == 2)
      {
        uint64_t v51 = v49;
        uint64_t v45 = v64;
        sub_1000509A4(v51, v64, type metadata accessor for DataDetectorState);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100408BC4(v45);
        unint64_t v41 = v52;
        uint64_t v46 = type metadata accessor for DataDetectorState;
        goto LABEL_28;
      }
      sub_100050964((uint64_t)v50, (void (*)(void, void, void, void, void))sub_10004E998);
      uint64_t v59 = type metadata accessor for DataDetectorState;
      goto LABEL_37;
    case 6u:
      uint64_t v43 = (uint64_t)v35;
      sub_10005072C((uint64_t)v35, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      sub_100050838((uint64_t)v18, (uint64_t)&v79);
      uint64_t v53 = v70;
      sub_10004ECF4(v70, (uint64_t)&v74);
      if (v78 == 3 && v74 == 2 && !(v76 | v77 | v75))
      {
        unint64_t v41 = sub_10039FEEC((uint64_t)&v79);
        sub_100050894(v79.i64);
        goto LABEL_41;
      }
      sub_100050964((uint64_t)v53, (void (*)(void, void, void, void, void))sub_10004E998);
      sub_100050894(v79.i64);
      goto LABEL_39;
    case 7u:
      uint64_t v43 = (uint64_t)v35;
      sub_10005072C((uint64_t)v35, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      sub_100050794((uint64_t)v15, (uint64_t)&v79);
      uint64_t v54 = v70;
      sub_10004ECF4(v70, (uint64_t)&v74);
      if (v78 == 3 && v74 == 3 && !(v76 | v77 | v75))
      {
        unint64_t v41 = sub_100213260((uint64_t)&v79);
        sub_1000507F0((uint64_t)&v79);
        goto LABEL_41;
      }
      sub_100050964((uint64_t)v54, (void (*)(void, void, void, void, void))sub_10004E998);
      sub_1000507F0((uint64_t)&v79);
      goto LABEL_39;
    case 8u:
      uint64_t v43 = (uint64_t)v35;
      uint64_t v49 = v66;
      sub_10005072C((uint64_t)v35, v66, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      uint64_t v55 = v70;
      sub_10004ECF4(v70, (uint64_t)&v79);
      if (v81 == 3 && v79.i64[0] == 4 && !(v80.i64[0] | v80.i64[1] | v79.i64[1]))
      {
        uint64_t v56 = v49;
        uint64_t v45 = v62;
        sub_1000509A4(v56, v62, type metadata accessor for EventLookupState);
        unint64_t v41 = sub_10021F9F0(v45);
        uint64_t v46 = type metadata accessor for EventLookupState;
LABEL_28:
        sub_100050A0C(v45, v46);
        sub_10004EA10(*(void *)v69, *(void *)(v69 + 8), *(void *)(v69 + 16), *(void *)(v69 + 24), *(unsigned char *)(v69 + 32));
LABEL_41:
        uint64_t v42 = v43;
LABEL_42:
        sub_100050A0C(v42, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      }
      else
      {
        sub_100050964((uint64_t)v55, (void (*)(void, void, void, void, void))sub_10004E998);
        uint64_t v59 = type metadata accessor for EventLookupState;
LABEL_37:
        uint64_t v57 = v59;
        uint64_t v58 = v49;
LABEL_38:
        sub_100050A0C(v58, v57);
LABEL_39:
        sub_10000FBD8(v43, &qword_10051A3A8);
        return 0;
      }
      return v41;
    default:
      sub_100050964((uint64_t)v70, (void (*)(void, void, void, void, void))sub_10004E998);
LABEL_34:
      uint64_t v43 = (uint64_t)v35;
      goto LABEL_39;
  }
}

uint64_t sub_10004DB4C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_100524EB0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CVDetection();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v32 - v15;
  sub_10004ECF4(v2, (uint64_t)&v35);
  if (v39 < 2u) {
    return 1;
  }
  if (v39 == 3)
  {
    if (v37 | v38 | v35 | v36)
    {
      if (v35 != 4 || v37 | v38 | v36) {
        return 0;
      }
    }
    else
    {
      sub_10000FB74(a1, (uint64_t)v9, &qword_10051CB10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
      {
        sub_1000509A4((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if (qword_100517FB0 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for UUID();
        uint64_t v19 = sub_10000F378(v18, (uint64_t)qword_100529170);
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v19, v18);
        if (qword_100517FB8 != -1) {
          swift_once();
        }
        uint64_t v20 = qword_100529198;
        uint64_t v33 = *((void *)&xmmword_100529188 + 1);
        uint64_t v34 = xmmword_100529188;
        uint64_t v21 = qword_1005291A0;
        long long v23 = xmmword_1005291A8;
        uint64_t v22 = qword_1005291B8;
        uint64_t v24 = qword_1005291C0;
        if (qword_100517FC0 != -1) {
          swift_once();
        }
        uint64_t v25 = qword_1005291C8;
        if (qword_100517FC8 != -1) {
          swift_once();
        }
        uint64_t v26 = qword_1005291D0;
        uint64_t v27 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v13[v27[5]] = -1082130432;
        uint64_t v28 = &v13[v27[6]];
        uint64_t v29 = v33;
        *(void *)uint64_t v28 = v34;
        *((void *)v28 + 1) = v29;
        *((void *)v28 + 2) = v20;
        *((void *)v28 + 3) = v21;
        *((_OWORD *)v28 + 2) = v23;
        *((void *)v28 + 6) = v22;
        *((void *)v28 + 7) = v24;
        uint64_t v30 = &v13[v27[7]];
        *(void *)uint64_t v30 = 0x7974706D65;
        *((void *)v30 + 1) = 0xE500000000000000;
        *(void *)&v13[v27[8]] = v25;
        *(void *)&v13[v27[9]] = v26;
        swift_storeEnumTagMultiPayload();
        uint64_t v31 = (uint64_t)&v6[*(int *)(v4 + 48)];
        sub_10005072C((uint64_t)v16, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_10005072C((uint64_t)v13, v31, (uint64_t (*)(void))type metadata accessor for CVDetection);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            if (swift_getEnumCaseMultiPayload() != 1) {
              goto LABEL_20;
            }
            goto LABEL_30;
          case 2u:
            if (swift_getEnumCaseMultiPayload() == 2) {
              goto LABEL_30;
            }
            goto LABEL_20;
          case 3u:
            if (swift_getEnumCaseMultiPayload() == 3) {
              goto LABEL_30;
            }
            goto LABEL_20;
          case 4u:
            if (swift_getEnumCaseMultiPayload() == 4) {
              goto LABEL_30;
            }
            goto LABEL_20;
          case 5u:
            if (swift_getEnumCaseMultiPayload() == 5) {
              goto LABEL_30;
            }
            goto LABEL_20;
          default:
            if (swift_getEnumCaseMultiPayload())
            {
LABEL_20:
              sub_10000FBD8((uint64_t)v6, &qword_100524EB0);
              sub_100050A0C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
              sub_100050A0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
              return 1;
            }
LABEL_30:
            sub_100050A0C(v31, (uint64_t (*)(void))type metadata accessor for CVDetection);
            sub_100050A0C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CVDetection);
            sub_100050A0C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
            sub_100050A0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
            break;
        }
        return 0;
      }
      sub_10000FBD8((uint64_t)v9, &qword_10051CB10);
    }
    return 1;
  }
  return 0;
}

void sub_10004E0E4()
{
  sub_10004ECF4(v0, (uint64_t)&v6);
  switch(v10)
  {
    case 1:
      Swift::UInt v1 = 3;
      goto LABEL_5;
    case 2:
      Swift::UInt v1 = 4;
LABEL_5:
      Hasher._combine(_:)(v1);
      String.hash(into:)();
      String.hash(into:)();
      break;
    case 3:
      if (v8 | v9 | v6 | v7)
      {
        uint64_t v2 = v8 | v9 | v7;
        if (v6 == 1 && v2 == 0)
        {
          Swift::UInt v5 = 1;
        }
        else if (v6 == 2 && v2 == 0)
        {
          Swift::UInt v5 = 5;
        }
        else if (v6 != 3 || v2)
        {
          if (v6 != 4 || v2) {
            Swift::UInt v5 = 8;
          }
          else {
            Swift::UInt v5 = 7;
          }
        }
        else
        {
          Swift::UInt v5 = 6;
        }
      }
      else
      {
        Swift::UInt v5 = 0;
      }
      Hasher._combine(_:)(v5);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      break;
  }
}

uint64_t sub_10004E244(long long *a1, long long *a2)
{
  sub_10004ECF4(a1, (uint64_t)v4);
  sub_10004ECF4(a2, (uint64_t)v5);
  return sub_10004ED30(v4, v5) & 1;
}

Swift::Int sub_10004E290()
{
  sub_10004ECF4(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  sub_10004E0E4();
  return Hasher._finalize()();
}

void sub_10004E2E0()
{
  sub_10004ECF4(v0, (uint64_t)v1);
  sub_10004E0E4();
}

Swift::Int sub_10004E320()
{
  sub_10004ECF4(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  sub_10004E0E4();
  return Hasher._finalize()();
}

uint64_t sub_10004E374@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unsigned __int8 v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  return sub_10004E998(v2, v3, v4, v5, v6);
}

void *sub_10004E390()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005072C(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      sub_1000509A4((uint64_t)v7, (uint64_t)v4, type metadata accessor for TextDetectorResult);
      uint64_t v11 = sub_10004A124();
      uint64_t v18 = type metadata accessor for TextDetectorResult;
      uint64_t v19 = (uint64_t)v4;
      goto LABEL_8;
    case 3u:
    case 4u:
      sub_1000509A4((uint64_t)v7, (uint64_t)v10, type metadata accessor for StreamingBarcodeDetectorResult);
      unint64_t v12 = *(void *)&v10[*(int *)(v8 + 40)];
      if (v12 >> 62 == 1)
      {
        uint64_t v13 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v15 = *(void *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        uint64_t v14 = *(void *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        sub_10000F214(&qword_10051A170);
        uint64_t v11 = (void *)swift_allocObject();
        *((_OWORD *)v11 + 1) = xmmword_10043D4F0;
        uint64_t v16 = *(void *)(v13 + 40);
        uint64_t v17 = *(void *)(v13 + 48);
        v11[4] = v15;
        v11[5] = v14;
        v11[6] = v16;
        _OWORD v11[7] = v17;
        *((unsigned char *)v11 + 64) = 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v11 = _swiftEmptyArrayStorage;
      }
      uint64_t v18 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v19 = (uint64_t)v10;
LABEL_8:
      sub_100050A0C(v19, v18);
      break;
    default:
      sub_100050A0C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v11 = _swiftEmptyArrayStorage;
      break;
  }
  return v11;
}

void *sub_10004E62C()
{
  return &_swiftEmptyArrayStorage;
}

void *sub_10004E638()
{
  return sub_10004E390();
}

uint64_t sub_10004E660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a1, a3);
  void v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  uint64_t v10 = v3;
  return sub_1001C1D38((uint64_t)sub_10004ED0C, (uint64_t)v9, v7);
}

uint64_t sub_10004E6DC(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10004ECF4(a1, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v10 = type metadata accessor for CVDetection();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  char v11 = sub_10004DB4C((uint64_t)v9);
  sub_10000FBD8((uint64_t)v9, &qword_10051CB10);
  return v11 & 1;
}

uint64_t sub_10004E808(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v22 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v2; ++i)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v6 = (uint64_t *)(v22 + 16 * i);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(a2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_22:
          swift_bridgeObjectRelease();
          uint64_t v20 = 0;
          goto LABEL_23;
        }
        uint64_t v15 = ~v10;
        for (unint64_t j = v11 + 1; ; unint64_t j = v17 + 1)
        {
          uint64_t v17 = j & v15;
          if (((*(void *)(v4 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0) {
            break;
          }
          uint64_t v18 = (void *)(v12 + 16 * v17);
          BOOL v19 = *v18 == v8 && v18[1] == v7;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_22;
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v20 = 1;
LABEL_23:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_10004E998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (!a5)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PinAction(uint64_t a1)
{
  return sub_10004EA10(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_10004EA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PinAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10004E998(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PinAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10004E998(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_10004EA10(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for GeoLookupResultBusiness.Ratings(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PinAction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_10004EA10(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PinAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10004EC3C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10004EC54(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PinAction()
{
  return &type metadata for PinAction;
}

uint64_t sub_10004EC80()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10004ECA0()
{
  unint64_t result = qword_10051A300;
  if (!qword_10051A300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A300);
  }
  return result;
}

uint64_t sub_10004ECF4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10004ED0C(long long *a1)
{
  return sub_10004E6DC(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_10004ED30(long long *a1, long long *a2)
{
  sub_10004ECF4(a1, (uint64_t)&v24);
  uint64_t v3 = v24;
  switch(v28)
  {
    case 1:
      uint64_t v7 = v25;
      uint64_t v6 = v26;
      uint64_t v8 = v27;
      sub_10004ECF4(a2, (uint64_t)&v21);
      if (v23 == 1) {
        goto LABEL_11;
      }
      goto LABEL_56;
    case 2:
      uint64_t v7 = v25;
      uint64_t v6 = v26;
      uint64_t v8 = v27;
      sub_10004ECF4(a2, (uint64_t)&v21);
      if (v23 != 2) {
        goto LABEL_56;
      }
LABEL_11:
      int8x16_t v9 = v22;
      if (v3 != v21.i64[0] || v7 != v21.i64[1])
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v12 = 0;
        if ((v11 & 1) == 0) {
          return v12 & 1;
        }
      }
      if (v6 == v9.i64[0] && v8 == v9.i64[1]) {
        goto LABEL_55;
      }
LABEL_20:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v12 & 1;
    case 3:
      if (!(v26 | v27 | v24 | v25))
      {
        sub_10004ECF4(a2, (uint64_t)&v21);
        int8x16_t v17 = vorrq_s8(v21, v22);
        int8x8_t v18 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
        if (v23 != 3 || *(void *)&v18 != 0) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      uint64_t v14 = v26 | v27 | v25;
      if (v24 == 1 && v14 == 0)
      {
        sub_10004ECF4(a2, (uint64_t)&v21);
        if (v23 != 3 || v21.i64[0] != 1) {
          goto LABEL_56;
        }
      }
      else if (v24 == 2 && v14 == 0)
      {
        sub_10004ECF4(a2, (uint64_t)&v21);
        if (v23 != 3 || v21.i64[0] != 2) {
          goto LABEL_56;
        }
      }
      else if (v24 != 3 || v14)
      {
        if (v24 != 4 || v14)
        {
          sub_10004ECF4(a2, (uint64_t)&v21);
          if (v23 != 3 || v21.i64[0] != 5) {
            goto LABEL_56;
          }
        }
        else
        {
          sub_10004ECF4(a2, (uint64_t)&v21);
          if (v23 != 3 || v21.i64[0] != 4) {
            goto LABEL_56;
          }
        }
      }
      else
      {
        sub_10004ECF4(a2, (uint64_t)&v21);
        if (v23 != 3 || v21.i64[0] != 3) {
          goto LABEL_56;
        }
      }
      if (!(v22.i64[0] | v22.i64[1] | v21.i64[1]))
      {
LABEL_55:
        char v12 = 1;
        return v12 & 1;
      }
LABEL_56:
      char v12 = 0;
      return v12 & 1;
    default:
      uint64_t v4 = v25;
      sub_10004ECF4(a2, (uint64_t)&v21);
      if (v23) {
        goto LABEL_56;
      }
      if (v3 != v21.i64[0] || v4 != v21.i64[1]) {
        goto LABEL_20;
      }
      goto LABEL_55;
  }
}

unint64_t sub_10004EFE4()
{
  unint64_t result = qword_10051A318;
  if (!qword_10051A318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A318);
  }
  return result;
}

uint64_t sub_10004F038(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A308);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResultLookupState();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v11 = (uint64_t *)((char *)&v29 - v10);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - v13;
  __chkstk_darwin(v15);
  int8x16_t v17 = (char *)&v29 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v29 - v19;
  __chkstk_darwin(v21);
  char v23 = (char *)&v29 - v22;
  sub_10000FB74(a1, (uint64_t)v4, &qword_10051A308);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000FBD8((uint64_t)v4, &qword_10051A308);
  }
  else
  {
    sub_1000509A4((uint64_t)v4, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    sub_1000509A4((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
        sub_10005072C((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        unint64_t v24 = *((void *)v17 + 3);
        sub_10004FF38(*(void **)v17, *((void **)v17 + 1), *((void *)v17 + 2), v24);
        if (v24 >> 62 != 2) {
          goto LABEL_12;
        }
        goto LABEL_14;
      case 6u:
        sub_10005072C((uint64_t)v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        uint64_t v25 = v11[1];
        if (!v25) {
          goto LABEL_12;
        }
        sub_10004FEE8(*v11, v25);
        goto LABEL_14;
      case 7u:
        sub_10005072C((uint64_t)v20, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        uint64_t v26 = *((void *)v8 + 1);
        if (!v26) {
          goto LABEL_12;
        }
        sub_10004FE7C(*(void *)v8, v26, *((void *)v8 + 2), *((void *)v8 + 3), *((void *)v8 + 4), *((void *)v8 + 5), *((void **)v8 + 6));
        goto LABEL_14;
      case 8u:
        sub_10005072C((uint64_t)v20, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        uint64_t v27 = sub_10000F214(&qword_10051A428);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v14, 1, v27) == 1)
        {
          sub_100050A0C((uint64_t)v14, type metadata accessor for EventLookupState);
LABEL_12:
          sub_100050A0C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
          return 1;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100050A0C((uint64_t)v14, type metadata accessor for EventLookupItem);
LABEL_14:
        sub_100050A0C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
        break;
      default:
        goto LABEL_14;
    }
  }
  return 0;
}

void *sub_10004F488(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v74 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v77 = (uint64_t)&v71 - v8;
  uint64_t v75 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v75);
  uint64_t v71 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v73 = (char *)&v71 - v11;
  uint64_t v12 = type metadata accessor for CVDetection();
  __chkstk_darwin(v12);
  uint64_t v72 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v71 - v15;
  __chkstk_darwin(v17);
  uint64_t v76 = (char *)&v71 - v18;
  uint64_t v19 = type metadata accessor for BarCodeLookupState(0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v71 - v23;
  uint64_t v25 = type metadata accessor for Locale();
  __chkstk_darwin(v25 - 8);
  uint64_t v26 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v26 - 8);
  uint64_t v27 = type metadata accessor for ResultLookupState();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005072C(a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRelease();
      return &off_1004E4DC0;
    case 2u:
      sub_100050A0C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      return &off_1004E4E08;
    case 3u:
      uint64_t v31 = *(void *)v29;
      uint64_t v32 = *((void *)v29 + 2);
      unint64_t v33 = *((void *)v29 + 3);
      uint64_t v76 = (char *)*((void *)v29 + 1);
      uint64_t v77 = v32;
      uint64_t v34 = *((void *)v29 + 4);
      uint64_t v35 = *((void *)v29 + 6);
      unint64_t v36 = v33 >> 62;
      uint64_t v37 = (void *)v31;
      if (v33 >> 62)
      {
        uint64_t v37 = (void *)*((void *)v29 + 4);
        if (v36 != 1) {
          uint64_t v37 = (void *)*((void *)v29 + 4);
        }
      }
      if (v37[2])
      {
        uint64_t v74 = *((void *)v29 + 5);
        unsigned __int8 v39 = (void *)v37[4];
        uint64_t v38 = v37[5];
        int8x16_t v40 = (void *)v37[6];
        uint64_t v41 = v31;
        if (v36)
        {
          uint64_t v41 = v34;
          if (v36 != 1) {
            uint64_t v41 = v34;
          }
        }
        uint64_t v75 = v35;
        if (*(void *)(v41 + 16) == 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          id v42 = v39;
          unint64_t v43 = (unint64_t)v40;
        }
        else
        {
          uint64_t v78 = 0x203A656279614DLL;
          unint64_t v79 = 0xE700000000000000;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          id v68 = v39;
          v69._countAndFlagsBits = v38;
          v69._object = v40;
          String.append(_:)(v69);
          swift_bridgeObjectRelease();
          uint64_t v38 = v78;
          unint64_t v43 = v79;
        }
        sub_10000F214(&qword_10051A170);
        uint64_t v30 = (void *)swift_allocObject();
        *((_OWORD *)v30 + 1) = xmmword_10043D4F0;
        v30[4] = v38;
        v30[5] = v43;
        v30[6] = 0;
        v30[7] = 0;
        *((unsigned char *)v30 + 64) = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v64 = (void *)v31;
        uint64_t v65 = v76;
        uint64_t v66 = v77;
        unint64_t v67 = v33;
      }
      else
      {
        sub_10000F214(&qword_10051A170);
        uint64_t v30 = (void *)swift_allocObject();
        *((_OWORD *)v30 + 1) = xmmword_10043D4F0;
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        v30[4] = String.init(localized:table:bundle:locale:comment:)();
        v30[5] = v63;
        v30[6] = 0;
        v30[7] = 0;
        *((unsigned char *)v30 + 64) = 0;
        uint64_t v64 = (void *)v31;
        uint64_t v65 = v76;
        uint64_t v66 = v77;
        unint64_t v67 = v33;
      }
      sub_10004FF38(v64, v65, v66, v67);
      return v30;
    case 4u:
      uint64_t v48 = (uint64_t)v29;
      uint64_t v49 = v24;
      sub_1000509A4(v48, (uint64_t)v24, type metadata accessor for BarCodeLookupState);
      sub_10005072C((uint64_t)v24, (uint64_t)v21, type metadata accessor for BarCodeLookupState);

      swift_bridgeObjectRelease();
      uint64_t v50 = (uint64_t)v76;
      sub_1000509A4((uint64_t)v21, (uint64_t)v76, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10005072C(v50, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v51 = (uint64_t)v16;
        uint64_t v52 = (uint64_t)v73;
      }
      else
      {
        sub_100050A0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v56 = v72;
        sub_10005072C(v50, v72, (uint64_t (*)(void))type metadata accessor for CVDetection);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
          sub_100050A0C(v50, (uint64_t (*)(void))type metadata accessor for CVDetection);
          sub_100050A0C((uint64_t)v24, type metadata accessor for BarCodeLookupState);
          uint64_t v47 = v56;
          uint64_t v46 = (uint64_t (*)(void))type metadata accessor for CVDetection;
          goto LABEL_15;
        }
        uint64_t v51 = v56;
        uint64_t v52 = (uint64_t)v71;
      }
      sub_1000509A4(v51, v52, type metadata accessor for StreamingBarcodeDetectorResult);
      unint64_t v57 = *(void *)(v52 + *(int *)(v75 + 40));
      if (v57 >> 62 == 1)
      {
        uint64_t v58 = v57 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v60 = *(void *)((v57 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        uint64_t v59 = *(void *)((v57 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        sub_10000F214(&qword_10051A170);
        uint64_t v30 = (void *)swift_allocObject();
        *((_OWORD *)v30 + 1) = xmmword_10043D4F0;
        uint64_t v61 = *(void *)(v58 + 40);
        uint64_t v62 = *(void *)(v58 + 48);
        v30[4] = v60;
        v30[5] = v59;
        v30[6] = v61;
        v30[7] = v62;
        *((unsigned char *)v30 + 64) = 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v30 = _swiftEmptyArrayStorage;
      }
      sub_100050A0C(v52, type metadata accessor for StreamingBarcodeDetectorResult);
      sub_100050A0C(v50, (uint64_t (*)(void))type metadata accessor for CVDetection);
      uint64_t v54 = type metadata accessor for BarCodeLookupState;
      uint64_t v55 = (uint64_t)v49;
      goto LABEL_30;
    case 5u:
      uint64_t v44 = v77;
      sub_1000509A4((uint64_t)v29, v77, type metadata accessor for DataDetectorState);
      sub_10005072C(v44, (uint64_t)v6, type metadata accessor for DataDetectorState);
      uint64_t v45 = sub_10000F214(&qword_10051A320);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v6, 1, v45) == 1)
      {
        uint64_t v46 = type metadata accessor for DataDetectorState;
        uint64_t v47 = v44;
LABEL_15:
        sub_100050A0C(v47, v46);
        return _swiftEmptyArrayStorage;
      }
      else
      {

        uint64_t v53 = v74;
        sub_1000509A4((uint64_t)v6, v74, type metadata accessor for TextDetectorResult);
        uint64_t v30 = sub_10004A124();
        sub_100050A0C(v53, type metadata accessor for TextDetectorResult);
        uint64_t v54 = type metadata accessor for DataDetectorState;
        uint64_t v55 = v44;
LABEL_30:
        sub_100050A0C(v55, v54);
      }
      return v30;
    case 6u:
      sub_10004FEE8(*(void *)v29, *((void *)v29 + 1));
      return &off_1004E4E50;
    case 7u:
      sub_10004FE7C(*(void *)v29, *((void *)v29 + 1), *((void *)v29 + 2), *((void *)v29 + 3), *((void *)v29 + 4), *((void *)v29 + 5), *((void **)v29 + 6));
      return &off_1004E4E98;
    case 8u:
      sub_100050A0C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ResultLookupState);
      return &off_1004E4EE0;
    default:
      uint64_t v46 = (uint64_t (*)(void))type metadata accessor for ResultLookupState;
      uint64_t v47 = (uint64_t)v29;
      goto LABEL_15;
  }
}

uint64_t sub_10004FE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10004FEE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_10004FF38(void *result, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 62;
  if (a4 >> 62)
  {
    if (v4 == 2)
    {
      sub_10004FFD4(result, a2, a3, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v4 != 1) {
        return result;
      }
      sub_10004FFD4(result, a2, a3, a4);
    }
  }

  return (void *)swift_bridgeObjectRelease();
}

void sub_10004FFD4(void *a1, void *a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 - 1 >= 2)
  {
    if (a4) {
      return;
    }

    a1 = a2;
  }
}

uint64_t sub_100050024()
{
  return sub_10005029C(&qword_10051A3B8, &qword_10051A398, (void (*)(void))sub_100050060, (void (*)(void))sub_100050160);
}

unint64_t sub_100050060()
{
  unint64_t result = qword_10051A3C0;
  if (!qword_10051A3C0)
  {
    sub_10000F69C(&qword_10051A390);
    sub_10005010C();
    sub_100050500(&qword_10051A3D0, (void (*)(uint64_t))type metadata accessor for GeoLocateResultView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A3C0);
  }
  return result;
}

unint64_t sub_10005010C()
{
  unint64_t result = qword_10051A3C8;
  if (!qword_10051A3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A3C8);
  }
  return result;
}

unint64_t sub_100050160()
{
  unint64_t result = qword_10051A3D8;
  if (!qword_10051A3D8)
  {
    sub_10000F69C(&qword_10051A368);
    sub_10005020C();
    sub_100050500(&qword_10051A3E8, (void (*)(uint64_t))type metadata accessor for BarCodeResultView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A3D8);
  }
  return result;
}

unint64_t sub_10005020C()
{
  unint64_t result = qword_10051A3E0;
  if (!qword_10051A3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A3E0);
  }
  return result;
}

uint64_t sub_100050260()
{
  return sub_10005029C(&qword_10051A3F0, &qword_10051A358, (void (*)(void))sub_100050324, (void (*)(void))sub_100050424);
}

uint64_t sub_10005029C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100050324()
{
  unint64_t result = qword_10051A3F8;
  if (!qword_10051A3F8)
  {
    sub_10000F69C(&qword_10051A350);
    sub_100050500(&qword_10051A400, (void (*)(uint64_t))type metadata accessor for DataDetectorResultView);
    sub_1000503D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A3F8);
  }
  return result;
}

unint64_t sub_1000503D0()
{
  unint64_t result = qword_10051A408;
  if (!qword_10051A408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A408);
  }
  return result;
}

unint64_t sub_100050424()
{
  unint64_t result = qword_10051A410;
  if (!qword_10051A410)
  {
    sub_10000F69C(&qword_10051A338);
    sub_100050500(&qword_10051A418, (void (*)(uint64_t))type metadata accessor for ReadAloudResultView);
    sub_100050500(&qword_10051A420, (void (*)(uint64_t))type metadata accessor for EventLookupResultView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051A410);
  }
  return result;
}

uint64_t sub_100050500(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100050550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = a7;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000505BC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_100050624(void *result, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 62;
  if (a4 >> 62)
  {
    if (v4 == 2)
    {
      sub_1000506C4(result, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v4 != 1) {
        return result;
      }
      sub_1000506C4(result, a2, a3, a4);
    }
  }

  return (void *)swift_bridgeObjectRetain();
}

id sub_1000506C4(id result, void *a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 - 1 >= 2)
  {
    if (a4) {
      return result;
    }
    id v5 = result;
    uint64_t result = a2;
  }
  return result;
}

uint64_t sub_100050714(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return sub_10000F724(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_100050720(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return sub_10000F478(result);
  }
  else {
    return swift_release();
  }
}

uint64_t sub_10005072C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100050794(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000507F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100050838(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_100050894(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000508CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100050928(uint64_t a1)
{
  return a1;
}

uint64_t sub_100050964(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000509A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100050A0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100050A6C()
{
  type metadata accessor for LocationsHandler(0);
  swift_allocObject();
  uint64_t result = sub_100051AC8();
  qword_10055E060 = result;
  return result;
}

void *sub_100050AAC()
{
  return sub_100050C70((uint64_t)&unk_10043E848, &OBJC_IVAR____TtC6Tamale16LocationsHandler__heading);
}

id sub_100050AC0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale16LocationsHandler__heading);
  *a2 = v4;

  return v4;
}

void sub_100050B80(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

void *sub_100050C5C()
{
  return sub_100050C70((uint64_t)&unk_10043E870, &OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
}

void *sub_100050C70(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v2 + *a2);
  id v5 = v4;
  return v4;
}

void sub_100050D18(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
  *(void *)(a1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation) = a2;
  id v3 = a2;
}

uint64_t sub_100050D54()
{
  return sub_100051070((uint64_t)&unk_10043E898, &OBJC_IVAR____TtC6Tamale16LocationsHandler__isStationary);
}

uint64_t sub_100050D68()
{
  return swift_release();
}

uint64_t sub_100050E38()
{
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__count);
}

uint64_t sub_100050EE0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale16LocationsHandler__count);
  return result;
}

uint64_t sub_100050F90()
{
  return swift_release();
}

uint64_t sub_10005105C()
{
  return sub_100051070((uint64_t)&unk_10043E820, &OBJC_IVAR____TtC6Tamale16LocationsHandler__updatesStarted);
}

uint64_t sub_100051070(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_100051110@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_1000511C4()
{
  return swift_release();
}

uint64_t sub_100051294@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocationAccessRequestDate;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100051390@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocationAccessRequestDate;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10005148C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(v4);
  id v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = *a2;
  swift_getKeyPath();
  uint64_t v12 = v9;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100051614(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocationAccessRequestDate;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

void sub_1000516B0()
{
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity) == 1)
  {
    type metadata accessor for CLBackgroundActivitySession();
    swift_allocObject();
    *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_background) = CLBackgroundActivitySession.init()();
LABEL_5:
    swift_release();
    goto LABEL_6;
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_background))
  {
    swift_retain();
    CLBackgroundActivitySession.invalidate()();
    goto LABEL_5;
  }
LABEL_6:
  id v2 = [self standardUserDefaults];
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = *(unsigned __int8 *)(v0 + v1);
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setBool:v3 forKey:v4];
}

uint64_t sub_100051868()
{
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity);
}

uint64_t sub_100051910@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity);
  return result;
}

uint64_t sub_1000519C0()
{
  return swift_release();
}

void sub_100051A90(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity) = a2;
  sub_1000516B0();
}

uint64_t sub_100051AC8()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  NSString v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC6Tamale16LocationsHandler_logger;
  if (qword_100517E68 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = sub_10000F378(v6, (uint64_t)qword_10055E250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v0 + v5, v7, v6);
  *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_background) = 0;
  uint64_t v8 = OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher;
  *(void *)(v0 + v8) = [objc_allocWithZone((Class)type metadata accessor for CLHeadingUpdatePublisher(0)) init];
  *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__heading) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__isStationary) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__count) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__updatesStarted) = 0;
  static Date.distantPast.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocationAccessRequestDate, v4, v1);
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  LOBYTE(v8) = [v9 BOOLForKey:v10];

  *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity) = v8;
  ObservationRegistrar.init()();
  id v11 = [objc_allocWithZone((Class)CLLocationManager) init];
  *(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager) = v11;
  [v11 setHeadingOrientation:1];
  [v11 setDelegate:*(void *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher)];
  return v0;
}

void sub_100051D68()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  NSString v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = __chkstk_darwin(v5);
  id v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v10 = *(void **)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager);
  if (objc_msgSend(v10, "authorizationStatus", v7))
  {
    if ([v10 authorizationStatus] == 4
      && [v10 accuracyAuthorization] == (id)1)
    {
      v18[0] = String._bridgeToObjectiveC()();
      [v10 requestTemporaryFullAccuracyAuthorizationWithPurposeKey:v18[0]];
      id v11 = (void *)v18[0];
    }
  }
  else
  {
    v18[0] = v2;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "📍 The user had not yet provided location access. We are requesting access now.", v14, 2u);
      swift_slowDealloc();
    }

    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_100056E40;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004E77D8;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v18[1] = _swiftEmptyArrayStorage;
    sub_100056A14((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000F214(&qword_10051A960);
    sub_100056E60();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v18[0] + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    swift_release();
    swift_release();
  }
}

void sub_100052178()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    Date.init()();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v9[-2] = v5;
    v9[-1] = v3;
    v9[1] = v5;
    sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    swift_release();
  }
  swift_beginAccess();
  uint64_t v7 = swift_weakLoadStrong();
  if (v7)
  {
    id v8 = *(id *)(v7 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager);
    swift_release();
    [v8 requestWhenInUseAuthorization];
  }
}

void sub_10005239C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  double v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = [*(id *)(v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager) authorizationStatus:v3];
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v19, v7);
  if (v6 >= 3)
  {
    if (v8)
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v7, "📍 Starting location updates!", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = type metadata accessor for TaskPriority();
    os_log_type_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    v13(v5, 1, 1, v12);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v14 = static MainActor.shared.getter();
    uint64_t v15 = (void *)swift_allocObject();
    void v15[2] = v14;
    uint64_t v15[3] = &protocol witness table for MainActor;
    v15[4] = v1;
    sub_100064D5C((uint64_t)v5, (uint64_t)&unk_10051A8D0, (uint64_t)v15);
    swift_release();
    v13(v5, 1, 1, v12);
    swift_retain();
    uint64_t v16 = static MainActor.shared.getter();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v16;
    v17[3] = &protocol witness table for MainActor;
    v17[4] = v1;
    sub_1000D0B80((uint64_t)v5, (uint64_t)&unk_10051A8E0, (uint64_t)v17);
    swift_release();
  }
  else
  {
    if (v8)
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v7, "Not starting location updates because the user has not granted access", v9, 2u);
      swift_slowDealloc();
    }
    NSString v10 = v19;
  }
}

uint64_t sub_100052654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  uint64_t v5 = type metadata accessor for CLLocationUpdate();
  v4[18] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[19] = v6;
  v4[20] = *(void *)(v6 + 64);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  sub_10000F214(&qword_10051A908);
  v4[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CLLocationUpdate.Updates.Iterator();
  v4[24] = v7;
  v4[25] = *(void *)(v7 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CLLocationUpdate.LiveConfiguration();
  v4[27] = v8;
  v4[28] = *(void *)(v8 - 8);
  v4[29] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CLLocationUpdate.Updates();
  v4[30] = v9;
  v4[31] = *(void *)(v9 - 8);
  v4[32] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = type metadata accessor for MainActor();
  v4[36] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[37] = v11;
  v4[38] = v10;
  return _swift_task_switch(sub_1000528E8, v11, v10);
}

uint64_t sub_1000528E8()
{
  unint64_t v33 = v0;
  uint64_t v1 = v0[17];
  swift_getKeyPath();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 1;
  v0[13] = v1;
  v0[39] = OBJC_IVAR____TtC6Tamale16LocationsHandler___observationRegistrar;
  v0[40] = sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  id v31 = *(id *)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager);
  id v3 = [v31 location];
  uint64_t v4 = &unk_10051A000;
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v0[34];
    uint64_t v7 = v0[17];
    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
    swift_retain();
    id v9 = v5;
    uint64_t v10 = static MainActor.shared.getter();
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v7;
    v11[5] = v9;
    sub_100064D5C(v6, (uint64_t)&unk_10051A940, (uint64_t)v11);
    swift_release();
    id v12 = v9;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      v0[16] = v12;
      id v16 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v5;

      uint64_t v4 = (void *)&unk_10051A000;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "first location set: %@", v15, 0xCu);
      sub_10000F214(&qword_10051A948);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  v0[41] = v4[134];
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    v0[14] = [v31 accuracyAuthorization];
    type metadata accessor for CLAccuracyAuthorization(0);
    uint64_t v20 = String.init<A>(describing:)();
    v0[15] = sub_1003806B0(v20, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Accuracy auth: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v23 = v0[28];
  uint64_t v22 = v0[29];
  uint64_t v24 = v0[27];
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for CLLocationUpdate.LiveConfiguration.default(_:), v24);
  static CLLocationUpdate.liveUpdates(_:)();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  CLLocationUpdate.Updates.makeAsyncIterator()();
  v0[42] = OBJC_IVAR____TtC6Tamale16LocationsHandler__updatesStarted;
  v0[43] = static MainActor.shared.getter();
  uint64_t v25 = sub_100056A14((unint64_t *)&unk_10051A910, (void (*)(uint64_t))&type metadata accessor for CLLocationUpdate.Updates.Iterator);
  uint64_t v26 = (void *)swift_task_alloc();
  v0[44] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_100052E80;
  uint64_t v27 = v0[23];
  uint64_t v28 = v0[24];
  return dispatch thunk of AsyncIteratorProtocol.next()(v27, v28, v25);
}

uint64_t sub_100052E80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 344);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_100053640;
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_100053018;
  }
  return _swift_task_switch(v7, v4, v6);
}

uint64_t sub_100053018()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 304);
  return _swift_task_switch(sub_10005307C, v1, v2);
}

uint64_t sub_10005307C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[31];
    uint64_t v4 = v0[32];
    uint64_t v6 = v0[30];
    uint64_t v8 = v0[25];
    uint64_t v7 = v0[26];
    uint64_t v9 = v0[24];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = (uint64_t (*)(void))v0[1];
    return v41();
  }
  uint64_t v10 = v0[42];
  uint64_t v11 = v0[17];
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  v12((char *)v0[22], v1, v2);
  swift_getKeyPath();
  v0[12] = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if ((*(unsigned char *)(v11 + v10) & 1) == 0)
  {
    swift_release();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Location updates bailed", v32, 2u);
      swift_slowDealloc();
    }
    uint64_t v33 = v0[31];
    uint64_t v52 = v0[32];
    uint64_t v34 = v0[30];
    uint64_t v36 = v0[25];
    uint64_t v35 = v0[26];
    uint64_t v37 = v0[24];
    uint64_t v38 = v0[22];
    uint64_t v40 = v0[18];
    uint64_t v39 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v52, v34);
    goto LABEL_11;
  }
  uint64_t v13 = CLLocationUpdate.location.getter();
  if (v13)
  {
    os_log_type_t v14 = (void *)v13;
    uint64_t v15 = v0[33];
    uint64_t v16 = v0[21];
    uint64_t v51 = v16;
    uint64_t v17 = v0[19];
    uint64_t v18 = v0[18];
    uint64_t v49 = v0[22];
    uint64_t v50 = v18;
    uint64_t v48 = v0[17];
    uint64_t v19 = type metadata accessor for TaskPriority();
    uint64_t v20 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v15, 1, 1, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v49, v18);
    swift_retain();
    id v21 = v14;
    uint64_t v22 = static MainActor.shared.getter();
    unint64_t v23 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v24 = (char *)swift_allocObject();
    *((void *)v24 + 2) = v22;
    *((void *)v24 + 3) = &protocol witness table for MainActor;
    *((void *)v24 + 4) = v48;
    *((void *)v24 + 5) = v21;
    v12(&v24[v23], v51, v50);
    int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19);
    uint64_t v26 = v0[33];
    if (v25 == 1)
    {
      sub_10000FBD8(v0[33], &qword_10051A8C0);
      if (*((void *)v24 + 2))
      {
LABEL_7:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v29 = v28;
        swift_unknownObjectRelease();
LABEL_16:
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = &unk_10051A928;
        *(void *)(v43 + 24) = v24;
        if (v29 | v27)
        {
          v0[2] = 0;
          v0[3] = 0;
          v0[4] = v27;
          v0[5] = v29;
        }
        swift_task_create();

        swift_release();
        goto LABEL_19;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v26, v19);
      if (*((void *)v24 + 2)) {
        goto LABEL_7;
      }
    }
    uint64_t v27 = 0;
    uint64_t v29 = 0;
    goto LABEL_16;
  }
LABEL_19:
  (*(void (**)(void, void))(v0[19] + 8))(v0[22], v0[18]);
  v0[43] = static MainActor.shared.getter();
  uint64_t v44 = sub_100056A14((unint64_t *)&unk_10051A910, (void (*)(uint64_t))&type metadata accessor for CLLocationUpdate.Updates.Iterator);
  uint64_t v45 = (void *)swift_task_alloc();
  v0[44] = v45;
  *uint64_t v45 = v0;
  v45[1] = sub_100052E80;
  uint64_t v46 = v0[23];
  uint64_t v47 = v0[24];
  return dispatch thunk of AsyncIteratorProtocol.next()(v46, v47, v44);
}

uint64_t sub_100053640()
{
  v0[10] = v0[45];
  sub_10000F214(&qword_10051F3B0);
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[38];
  return _swift_task_switch(sub_1000536D4, v1, v2);
}

uint64_t sub_1000536D4()
{
  uint64_t v15 = v0;
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v5 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v6 = v0[24];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    v0[11] = sub_1003806B0(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not start location updates %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100053958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000539F0, v7, v6);
}

uint64_t sub_1000539F0()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  id v4 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  swift_release();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100053B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  void v6[3] = a4;
  type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100053BC8, v8, v7);
}

uint64_t sub_100053BC8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = (void *)v0[4];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  id v4 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  swift_release();
  swift_task_dealloc();
  char v5 = CLLocationUpdate.stationary.getter();
  swift_getKeyPath();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v2;
  *(unsigned char *)(v6 + 24) = v5 & 1;
  v0[2] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  swift_getKeyPath();
  v0[2] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v0[2] = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC6Tamale16LocationsHandler__count);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v0[3];
    *(void *)(v2 + OBJC_IVAR____TtC6Tamale16LocationsHandler__count) = v10;
    v0[2] = v11;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    id v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  return result;
}

uint64_t sub_100053E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  sub_10000F214(&qword_10051A8C0);
  v4[10] = swift_task_alloc();
  uint64_t v5 = sub_10000F214(&qword_10051A8E8);
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = sub_10000F214(&qword_10051A848);
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for MainActor();
  v4[18] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[19] = v8;
  v4[20] = v7;
  return _swift_task_switch(sub_100053FC0, v8, v7);
}

uint64_t sub_100053FC0()
{
  if ([self headingAvailable])
  {
    uint64_t v1 = v0[16];
    uint64_t v2 = *(void **)(v0[9] + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager);
    v0[21] = v2;
    [v2 startUpdatingHeading];
    sub_1000555C4(v1);
    AsyncStream.makeAsyncIterator()();
    uint64_t v3 = OBJC_IVAR____TtC6Tamale16LocationsHandler__updatesStarted;
    v0[22] = OBJC_IVAR____TtC6Tamale16LocationsHandler___observationRegistrar;
    v0[23] = v3;
    uint64_t v4 = static MainActor.shared.getter();
    v0[24] = v4;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[25] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000541EC;
    uint64_t v6 = v0[11];
    return AsyncStream.Iterator.next(isolation:)(v0 + 6, v4, &protocol witness table for MainActor, v6);
  }
  else
  {
    swift_release();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      BOOL v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Heading not available on this system", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1000541EC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = *(void *)(v1 + 152);
  return _swift_task_switch(sub_100054330, v3, v2);
}

uint64_t sub_100054330()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    uint64_t v3 = *(void *)(v0 + 72);
    swift_getKeyPath();
    *(void *)(v0 + 64) = v3;
    sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(unsigned char *)(v3 + v2))
    {
      uint64_t v5 = *(void *)(v0 + 72);
      uint64_t v4 = *(void *)(v0 + 80);
      uint64_t v6 = type metadata accessor for TaskPriority();
      uint64_t v7 = *(void *)(v6 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v4, 1, 1, v6);
      swift_retain();
      id v8 = v1;
      uint64_t v9 = static MainActor.shared.getter();
      uint64_t v10 = (void *)swift_allocObject();
      void v10[2] = v9;
      v10[3] = &protocol witness table for MainActor;
      v10[4] = v5;
      v10[5] = v8;
      int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
      uint64_t v12 = *(void *)(v0 + 80);
      if (v11 == 1)
      {
        sub_10000FBD8(*(void *)(v0 + 80), &qword_10051A8C0);
        if (v9)
        {
LABEL_5:
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v15 = v14;
          swift_unknownObjectRelease();
LABEL_11:
          uint64_t v23 = swift_allocObject();
          *(void *)(v23 + 16) = &unk_10051A8F8;
          *(void *)(v23 + 24) = v10;
          if (v15 | v13)
          {
            *(void *)(v0 + 16) = 0;
            *(void *)(v0 + 24) = 0;
            *(void *)(v0 + 32) = v13;
            *(void *)(v0 + 40) = v15;
          }
          swift_task_create();

          swift_release();
          uint64_t v31 = static MainActor.shared.getter();
          *(void *)(v0 + 192) = v31;
          uint64_t v32 = (void *)swift_task_alloc();
          *(void *)(v0 + 200) = v32;
          *uint64_t v32 = v0;
          v32[1] = sub_1000541EC;
          uint64_t v33 = *(void *)(v0 + 88);
          return AsyncStream.Iterator.next(isolation:)(v0 + 48, v31, &protocol witness table for MainActor, v33);
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
        if (v10[2]) {
          goto LABEL_5;
        }
      }
      uint64_t v13 = 0;
      uint64_t v15 = 0;
      goto LABEL_11;
    }
    swift_release();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v20 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v21 = *(void *)(v0 + 88);
    if (v18)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Location updates bailed", v22, 2u);
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    swift_release();
  }
  uint64_t v25 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v26 = *(void *)(v0 + 112);
  uint64_t v27 = *(void *)(v0 + 72);
  [*(id *)(v0 + 168) stopUpdatingHeading];
  swift_getKeyPath();
  uint64_t v28 = swift_task_alloc();
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = 0;
  *(void *)(v0 + 56) = v27;
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_100054888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100054920, v7, v6);
}

uint64_t sub_100054920()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  v0[2] = v2;
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  id v4 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  swift_release();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100054A5C()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "📍 Stopping location updates, if applicable.", v2, 2u);
    swift_slowDealloc();
  }

  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void sub_100054BC0(double a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A8B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A898);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051A858);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher);
  if (*(unsigned char *)(v14
                + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_isSimulating) == 1)
  {
    uint64_t v15 = v14
        + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_headingContinuation;
    swift_beginAccess();
    sub_10000FB74(v15, (uint64_t)v9, &qword_10051A898);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_10000FBD8((uint64_t)v9, &qword_10051A898);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      id v16 = [objc_allocWithZone((Class)CLHeading) initWithHeading:a1 accuracy:20.0];
      if (v16)
      {
        id v17 = v16;
        AsyncStream.Continuation.yield(_:)();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
}

uint64_t sub_100054E64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v28[-v7];
  type metadata accessor for UserDefaultsUtility();
  uint64_t v9 = swift_allocObject();
  ObservationRegistrar.init()();
  id v10 = [self standardUserDefaults];
  NSString v11 = String._bridgeToObjectiveC()();
  unsigned int v12 = [v10 BOOLForKey:v11];

  swift_setDeallocating();
  uint64_t v13 = v9 + OBJC_IVAR____TtC6Tamale19UserDefaultsUtility___observationRegistrar;
  uint64_t v14 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_deallocClassInstance();
  unsigned int v15 = [*(id *)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler_manager) authorizationStatus];
  Date.init()();
  swift_getKeyPath();
  uint64_t v30 = v1;
  sub_100056A14(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocationAccessRequestDate;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v16, v2);
  Date.timeIntervalSince(_:)();
  double v18 = v17;
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v19(v5, v2);
  v19(v8, v2);
  if (fabs(v18) < 60.0) {
    return 0;
  }
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 67109376;
    BOOL v29 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 8) = 1024;
    BOOL v29 = v15 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking location prompting criterion… | Onboarded: %{BOOL}d | Existing Authorization: %{BOOL}d", (uint8_t *)v22, 0xEu);
    swift_slowDealloc();
  }

  unsigned int v23 = v15 ? 0 : v12;
  if (v23 != 1) {
    return 0;
  }
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Passed prompting criterion. We should prompt for location.", v26, 2u);
    swift_slowDealloc();
  }

  return 1;
}

uint64_t sub_1000552CC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocationAccessRequestDate;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC6Tamale16LocationsHandler___observationRegistrar;
  uint64_t v6 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_100055408()
{
  sub_1000552CC();

  return swift_deallocClassInstance();
}

uint64_t sub_100055460()
{
  return type metadata accessor for LocationsHandler(0);
}

uint64_t type metadata accessor for LocationsHandler(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051A4B8);
}

uint64_t sub_100055488()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ObservationRegistrar();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_1000555C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000F214(&qword_10051A880);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A888);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unsigned int v12 = (char *)v18 - v11;
  uint64_t v13 = v1
      + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher____lazy_storage___liveHeadingUpdates;
  swift_beginAccess();
  sub_10000FB74(v13, (uint64_t)v12, &qword_10051A888);
  uint64_t v14 = sub_10000F214(&qword_10051A848);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v12, v14);
  }
  uint64_t v16 = sub_10000FBD8((uint64_t)v12, &qword_10051A888);
  v18[1] = v18;
  __chkstk_darwin(v16);
  v18[-2] = v1;
  sub_10000F734(0, &qword_10051A890);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v9, a1, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  swift_beginAccess();
  sub_10000F5DC((uint64_t)v9, v13, &qword_10051A888);
  return swift_endAccess();
}

uint64_t sub_1000558C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A898);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A858);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  uint64_t v9 = a2 + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_headingContinuation;
  swift_beginAccess();
  sub_10000F5DC((uint64_t)v6, v9, &qword_10051A898);
  return swift_endAccess();
}

uint64_t sub_100055A7C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A870);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v8 = [a1 authorizationStatus:v5];
  id v9 = [a1 accuracyAuthorization];
  uint64_t v10 = v1 + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_authorizationInfo;
  *(_DWORD *)uint64_t v10 = v8;
  *(void *)(v10 + 8) = v9;
  v12[3] = [a1 authorizationStatus];
  sub_10000F214(&qword_10051A878);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

id sub_100055C28()
{
  uint64_t v1 = sub_10000F214(&qword_10051A8A0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051A878);
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000F214(&qword_10051A8A8);
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v0[OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher____lazy_storage___liveHeadingUpdates];
  uint64_t v12 = sub_10000F214(&qword_10051A848);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v0[OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_isSimulating] = 0;
  uint64_t v13 = &v0[OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_authorizationInfo];
  *(_DWORD *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  uint64_t v14 = &v0[OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_headingContinuation];
  uint64_t v15 = sub_10000F214(&qword_10051A858);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = &v0[OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_authorizationStateUpdates];
  double v17 = &v0[OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_authorizationStateContinuation];
  type metadata accessor for CLAuthorizationStatus(0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v1);
  double v18 = v0;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v10, v22);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v17, v7, v24);

  updated = (objc_class *)type metadata accessor for CLHeadingUpdatePublisher(0);
  v25.receiver = v18;
  v25.super_class = updated;
  return [super init];
}

id sub_100055F9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLHeadingUpdatePublisher(0);
  return [super dealloc];
}

uint64_t sub_1000560C0()
{
  return type metadata accessor for CLHeadingUpdatePublisher(0);
}

uint64_t type metadata accessor for CLHeadingUpdatePublisher(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10051A830);
}

void sub_1000560E8()
{
  sub_100056294(319, &qword_10051A840, &qword_10051A848);
  if (v0 <= 0x3F)
  {
    sub_100056294(319, &qword_10051A850, &qword_10051A858);
    if (v1 <= 0x3F)
    {
      sub_1000562E4(319, &qword_10051A860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
      if (v2 <= 0x3F)
      {
        sub_1000562E4(319, &qword_10051A868, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_100056294(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_10000F69C(a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1000562E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for CLAuthorizationStatus(255);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_100056344(uint64_t a1)
{
  return sub_1000558C8(a1, *(void *)(v1 + 16));
}

void sub_10005634C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051A8B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051A898);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051A858);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v1
                 + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_isSimulating) & 1) == 0)
  {
    uint64_t v14 = v1 + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_headingContinuation;
    swift_beginAccess();
    sub_10000FB74(v14, (uint64_t)v9, &qword_10051A898);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_10000FBD8((uint64_t)v9, &qword_10051A898);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
      [a1 copy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000F734(0, &qword_10051A890);
      if (swift_dynamicCast())
      {
        v15[1] = v15[0];
        AsyncStream.Continuation.yield(_:)();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
}

uint64_t sub_100056628()
{
  return sub_100051614(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100056644@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100051110(a1, &OBJC_IVAR____TtC6Tamale16LocationsHandler__updatesStarted, a2);
}

void sub_100056670()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale16LocationsHandler__updatesStarted) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005668C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_100052654(a1, v4, v5, v6);
}

uint64_t sub_100056744()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100056784(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000F878;
  return sub_100053E34(a1, v4, v5, v6);
}

void sub_100056840()
{
}

uint64_t sub_100056864(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000F878;
  return sub_100054888(a1, v4, v5, v7, v6);
}

uint64_t sub_100056924()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10005695C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10051B1D0 + dword_10051B1D0);
  return v6(a1, v4);
}

uint64_t sub_100056A14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100056A5C()
{
  uint64_t v1 = type metadata accessor for CLLocationUpdate();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_100056B38(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CLLocationUpdate() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000FC9C;
  return sub_100053B2C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_100056C3C()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100056C84(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000FC9C;
  return sub_100053958(a1, v4, v5, v7, v6);
}

void sub_100056D4C()
{
}

void sub_100056D6C(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = *(void **)(v2 + *a1);
  *(void *)(v2 + *a1) = v3;
  id v5 = v3;
}

uint64_t sub_100056DA8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100051110(a1, &OBJC_IVAR____TtC6Tamale16LocationsHandler__isStationary, a2);
}

void sub_100056DD4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale16LocationsHandler__isStationary) = *(unsigned char *)(v0 + 24);
}

void sub_100056DF4()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale16LocationsHandler__count) = *(void *)(v0 + 24);
}

uint64_t sub_100056E08()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

void sub_100056E40()
{
}

uint64_t sub_100056E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100056E58()
{
  return swift_release();
}

unint64_t sub_100056E60()
{
  unint64_t result = qword_10051FB40;
  if (!qword_10051FB40)
  {
    sub_10000F69C(&qword_10051A960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FB40);
  }
  return result;
}

void sub_100056EC4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale16LocationsHandler__backgroundActivity) = *(unsigned char *)(v0 + 24);
  sub_1000516B0();
}

uint64_t sub_100056F08()
{
  return sub_100056628();
}

void sub_100056F20()
{
}

void sub_100056F38()
{
}

uint64_t sub_100056F50()
{
  type metadata accessor for ConnectivityUtility();
  swift_allocObject();
  uint64_t result = sub_1000575D8();
  qword_10055E068 = result;
  return result;
}

uint64_t sub_100056F90()
{
  swift_getKeyPath();
  sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_100057030@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 24);
  return result;
}

uint64_t sub_1000570D8()
{
  return swift_release();
}

uint64_t sub_1000571A8()
{
  swift_getKeyPath();
  sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t sub_100057248@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 25);
  return result;
}

uint64_t sub_1000572F0()
{
  return swift_release();
}

uint64_t sub_1000573C0()
{
  swift_getKeyPath();
  sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t sub_100057460@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 26);
  return result;
}

uint64_t sub_100057508()
{
  return swift_release();
}

uint64_t sub_1000575D8()
{
  type metadata accessor for NWPathMonitor();
  swift_allocObject();
  *(void *)(v0 + 16) = NWPathMonitor.init()();
  *(_WORD *)(v0 + 24) = 1;
  *(unsigned char *)(v0 + 26) = 2;
  ObservationRegistrar.init()();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_retain();
  NWPathMonitor.pathUpdateHandler.setter();
  swift_release();
  swift_release();
  sub_10000F734(0, (unint64_t *)&qword_10051A950);
  swift_retain();
  uint64_t v1 = (void *)static OS_dispatch_queue.main.getter();
  NWPathMonitor.start(queue:)();
  swift_release();

  return v0;
}

uint64_t sub_1000576EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWInterface.InterfaceType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = &v47[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v58 = type metadata accessor for NWPath.Status();
  uint64_t v6 = *(void *)(v58 - 8);
  uint64_t v7 = __chkstk_darwin(v58);
  uint64_t v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v57 = &v47[-v11];
  __chkstk_darwin(v10);
  uint64_t v56 = &v47[-v12];
  uint64_t v13 = type metadata accessor for NWPath();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v47[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v49 = v5;
    uint64_t v50 = v3;
    uint64_t v55 = result;
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v51 = v2;
    uint64_t v52 = v9;
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000F378(v18, (uint64_t)qword_10055E2E0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v53 = v6;
    uint64_t v54 = a1;
    if (v21)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = NWPath.debugDescription.getter();
      uint64_t v59 = sub_1003806B0(v23, v24, &v60);
      uint64_t v6 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Connectivity status changed to status: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
    }

    objc_super v25 = v56;
    NWPath.status.getter();
    uint64_t v26 = *(void (**)(unsigned char *))(v6 + 104);
    uint64_t v27 = v57;
    uint64_t v28 = v58;
    int v48 = enum case for NWPath.Status.unsatisfied(_:);
    v26(v57);
    sub_100058390(&qword_10051AB00, (void (*)(uint64_t))&type metadata accessor for NWPath.Status);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(unsigned char **)(v6 + 8);
    ((void (*)(unsigned char *, uint64_t))v30)(v27, v28);
    uint64_t v56 = v30;
    unint64_t v57 = (unsigned char *)(v6 + 8);
    ((void (*)(unsigned char *, uint64_t))v30)(v25, v28);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v32 = v55;
    *(void *)&v47[-16] = v55;
    v47[-8] = (v29 & 1) == 0;
    uint64_t v60 = v32;
    sub_100058390(&qword_100518AD0, (void (*)(uint64_t))type metadata accessor for ConnectivityUtility);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v34 = v49;
    uint64_t v33 = v50;
    uint64_t v35 = v51;
    (*(void (**)(unsigned char *, void, uint64_t))(v50 + 104))(v49, enum case for NWInterface.InterfaceType.cellular(_:), v51);
    char v36 = NWPath.usesInterfaceType(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v34, v35);
    uint64_t v37 = swift_getKeyPath();
    __chkstk_darwin(v37);
    *(void *)&v47[-16] = v32;
    v47[-8] = v36 & 1;
    uint64_t v60 = v32;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v38 = v52;
    NWPath.status.getter();
    int v39 = (*(uint64_t (**)(unsigned char *, uint64_t))(v53 + 88))(v38, v58);
    if (v39 == enum case for NWPath.Status.satisfied(_:))
    {
      uint64_t v40 = swift_getKeyPath();
      __chkstk_darwin(v40);
      *(void *)&v47[-16] = v32;
      v47[-8] = 0;
      uint64_t v60 = v32;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
LABEL_11:
      swift_release();
      return swift_release();
    }
    int v41 = v39;
    if (v39 == v48)
    {
      uint64_t v42 = swift_getKeyPath();
      __chkstk_darwin(v42);
      uint64_t v43 = v55;
      *(void *)&v47[-16] = v55;
      v47[-8] = 2;
      uint64_t v60 = v43;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      goto LABEL_11;
    }
    int v44 = enum case for NWPath.Status.requiresConnection(_:);
    uint64_t v45 = swift_getKeyPath();
    __chkstk_darwin(v45);
    uint64_t v46 = v55;
    *(void *)&v47[-16] = v55;
    if (v41 == v44)
    {
      v47[-8] = 1;
      uint64_t v60 = v46;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      return swift_release();
    }
    else
    {
      v47[-8] = 2;
      uint64_t v60 = v46;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      return ((uint64_t (*)(unsigned char *, uint64_t))v56)(v52, v58);
    }
  }
  return result;
}

uint64_t sub_100057F9C()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale19ConnectivityUtility___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100058044()
{
  return type metadata accessor for ConnectivityUtility();
}

uint64_t type metadata accessor for ConnectivityUtility()
{
  uint64_t result = qword_10051A998;
  if (!qword_10051A998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100058098()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectivityUtility.ConnectionStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConnectivityUtility.ConnectionStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000582A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectivityUtility.ConnectionStatus()
{
  return &type metadata for ConnectivityUtility.ConnectionStatus;
}

unint64_t sub_1000582E4()
{
  unint64_t result = qword_10051AAF8;
  if (!qword_10051AAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AAF8);
  }
  return result;
}

uint64_t sub_100058338()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100058370(uint64_t a1)
{
  return sub_1000576EC(a1);
}

void sub_100058380()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 24) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100058390(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000583E0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 25) = *(unsigned char *)(v0 + 24);
}

void sub_1000583F8()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 26) = *(unsigned char *)(v0 + 24);
}

void sub_100058408()
{
  id v0 = [objc_allocWithZone((Class)CTTelephonyNetworkInfo) init];
  id v1 = [v0 serviceSubscriberCellularProviders];
  if (!v1)
  {

    return;
  }
  int v2 = v1;
  uint64_t v30 = v0;
  sub_10000F734(0, &qword_10051AB08);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v4 = 0;
  uint64_t v5 = v3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_24:
    id v15 = *(id *)(*(void *)(v3 + 56) + 8 * v11);
    id v16 = [v15 mobileCountryCode];
    if (v16)
    {
      double v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      swift_bridgeObjectRelease();
      uint64_t v21 = HIBYTE(v20) & 0xF;
      if ((v20 & 0x2000000000000000) == 0) {
        uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
      }
      BOOL v22 = v21 == 0;
    }
    else
    {
      BOOL v22 = 1;
    }
    id v23 = [v15 mobileNetworkCode];
    if (v23)
    {
      unint64_t v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      swift_bridgeObjectRelease();
      uint64_t v28 = HIBYTE(v27) & 0xF;
      if ((v27 & 0x2000000000000000) == 0) {
        uint64_t v28 = v25 & 0xFFFFFFFFFFFFLL;
      }
      if (v28) {
        char v29 = v22;
      }
      else {
        char v29 = 1;
      }
      if ((v29 & 1) == 0)
      {
LABEL_36:

        swift_release();
        return;
      }
    }
    else
    {
    }
  }
  int64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v12 >= v9) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 1;
  if (v12 + 1 >= v9) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 2;
  if (v12 + 2 >= v9) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 3;
  if (v12 + 3 >= v9) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_24;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
}

void sub_1000586B8()
{
}

void sub_1000586D0()
{
}

void sub_1000586E8()
{
}

_WORD *initializeBufferWithCopyOfBuffer for LoggingConfiguration(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LoggingConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PinActionBarConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005887CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PinActionBarConfiguration()
{
  return &type metadata for PinActionBarConfiguration;
}

uint64_t sub_1000588B4(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051AB90);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000592C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100058A20()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0xD00000000000001FLL;
  }
}

uint64_t sub_100058A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005902C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100058A8C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100058A98(uint64_t a1)
{
  unint64_t v2 = sub_1000592C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058AD4(uint64_t a1)
{
  unint64_t v2 = sub_1000592C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100058B10@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005911C(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_100058B48(void *a1)
{
  return sub_1000588B4(a1);
}

BOOL sub_100058B78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

unint64_t sub_100058BA4()
{
  unint64_t result = qword_10051AB10;
  if (!qword_10051AB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AB10);
  }
  return result;
}

unint64_t sub_100058BF8(uint64_t a1)
{
  unint64_t result = sub_100058C20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100058C20()
{
  unint64_t result = qword_10051AB40;
  if (!qword_10051AB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AB40);
  }
  return result;
}

unint64_t sub_100058C78(uint64_t a1)
{
  unint64_t result = sub_100058CA0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100058CA0()
{
  unint64_t result = qword_10051AB70;
  if (!qword_10051AB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AB70);
  }
  return result;
}

uint64_t sub_100058CF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100058D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int16 v4 = HIWORD(a3);
  char v6 = a3 & 1;
  char v12 = a3 & 1;
  sub_10000F214(&qword_10051AB98);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *(void *)a4 = 0xD000000000000022;
  *(void *)(a4 + 8) = 0x8000000100425670;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  *(unsigned char *)(a4 + 32) = v12;
  *(unsigned char *)(a4 + 33) = v4 & 1;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0xD000000000000014;
  *(void *)(a4 + 64) = 0x80000001004256A0;
  *(void *)(a4 + 72) = a1;
  *(void *)(a4 + 80) = a2;
  *(unsigned char *)(a4 + 88) = v6;
  *(unsigned char *)(a4 + 89) = HIBYTE(v4) & 1;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000F478(0);
}

uint64_t sub_100058F58@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  if (*(unsigned char *)(v1 + 18)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned char *)(v1 + 19)) {
    int v5 = 0x1000000;
  }
  else {
    int v5 = 0;
  }
  return sub_100058D10(*(void *)v1, *(void *)(v1 + 8), v3 | v4 | v5, a1);
}

unint64_t sub_100058FA0(void *a1)
{
  a1[1] = sub_1000170D0();
  a1[2] = sub_100017470();
  unint64_t result = sub_100058FD8();
  a1[3] = result;
  return result;
}

unint64_t sub_100058FD8()
{
  unint64_t result = qword_10051AB78;
  if (!qword_10051AB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AB78);
  }
  return result;
}

uint64_t sub_10005902C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001FLL && a2 == 0x80000001004256C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001004256E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10005911C(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051AB80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_1000592C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  v11[15] = 0;
  char v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[14] = 1;
  char v8 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  if (v8) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  return v10 & 0xFFFFFFFE | v7 & 1;
}

unint64_t sub_1000592C8()
{
  unint64_t result = qword_10051AB88;
  if (!qword_10051AB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AB88);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PinActionBarConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000593E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PinActionBarConfiguration.CodingKeys()
{
  return &type metadata for PinActionBarConfiguration.CodingKeys;
}

uint64_t destroy for PinActionBarConfigurationForm()
{
  swift_release();

  return swift_release();
}

uint64_t _s6Tamale29PinActionBarConfigurationFormVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PinActionBarConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

__n128 initializeWithTake for PinActionBarConfigurationForm(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PinActionBarConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinActionBarConfigurationForm(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinActionBarConfigurationForm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PinActionBarConfigurationForm()
{
  return &type metadata for PinActionBarConfigurationForm;
}

unint64_t sub_100059630()
{
  unint64_t result = qword_10051ABA0;
  if (!qword_10051ABA0)
  {
    sub_10000F69C(&qword_10051ABA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ABA0);
  }
  return result;
}

unint64_t sub_100059690()
{
  unint64_t result = qword_10051ABB0;
  if (!qword_10051ABB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ABB0);
  }
  return result;
}

unint64_t sub_1000596E8()
{
  unint64_t result = qword_10051ABB8;
  if (!qword_10051ABB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ABB8);
  }
  return result;
}

unint64_t sub_100059740()
{
  unint64_t result = qword_10051ABC0[0];
  if (!qword_10051ABC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10051ABC0);
  }
  return result;
}

uint64_t sub_100059794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 88);
}

uint64_t sub_10005979C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100059800(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v4 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000598BC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 sub_1000599A4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000599D0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t sub_100059A70(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100059AB8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MenuSplitView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100059B28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100059B74(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  long long v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      int v10 = (long long *)(v5 + 2);
      unint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *unint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        id v16 = &v8[8 * v9];
        double v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)id v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  unint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t sub_100059D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  double v5 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100059E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_100059E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  double v6 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100059F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10051ADC0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051ADC8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Color.white.getter();
  uint64_t v12 = Color.opacity(_:)();
  swift_release();
  uint64_t v13 = sub_10000F214(&qword_10051ADD0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v7, a1, v13);
  *(void *)&v7[*(int *)(v5 + 44)] = v12;
  LOBYTE(a1) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  sub_10000FB74((uint64_t)v7, (uint64_t)v11, &qword_10051ADC0);
  unint64_t v22 = &v11[*(int *)(v9 + 44)];
  *unint64_t v22 = a1;
  *((void *)v22 + 1) = v15;
  *((void *)v22 + 2) = v17;
  *((void *)v22 + 3) = v19;
  *((void *)v22 + 4) = v21;
  v22[40] = 0;
  sub_10000FBD8((uint64_t)v7, &qword_10051ADC0);
  uint64_t v23 = static Alignment.center.getter();
  uint64_t v25 = v24;
  uint64_t v26 = (uint64_t *)(a2 + *(int *)(sub_10000F214(&qword_10051ADD8) + 36));
  *uint64_t v26 = static Alignment.center.getter();
  v26[1] = v27;
  uint64_t v28 = sub_10000F214(&qword_10051ADE0);
  sub_10005A1B4((uint64_t)v26 + *(int *)(v28 + 44));
  char v29 = (uint64_t *)((char *)v26 + *(int *)(sub_10000F214(&qword_10051ADE8) + 36));
  *char v29 = v23;
  v29[1] = v25;
  return sub_10000FC34((uint64_t)v11, a2, &qword_10051ADC8);
}

uint64_t sub_10005A1B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Material();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051ADF0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v16 - v11;
  sub_100062D8C();
  Material.init<A>(provider:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  *(_WORD *)&v9[*(int *)(v7 + 64)] = 256;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_10000FC34((uint64_t)v9, (uint64_t)v12, &qword_10051ADF0);
  static Color.black.getter();
  uint64_t v13 = Color.opacity(_:)();
  swift_release();
  sub_10000FB74((uint64_t)v12, (uint64_t)v9, &qword_10051ADF0);
  sub_10000FB74((uint64_t)v9, a1, &qword_10051ADF0);
  uint64_t v14 = a1 + *(int *)(sub_10000F214(&qword_10051AE00) + 48);
  *(void *)uint64_t v14 = v13;
  *(_WORD *)(v14 + 8) = 256;
  swift_retain();
  sub_10000FBD8((uint64_t)v12, &qword_10051ADF0);
  swift_release();
  return sub_10000FBD8((uint64_t)v9, &qword_10051ADF0);
}

uint64_t sub_10005A3D4()
{
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  return v1;
}

uint64_t sub_10005A424@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v121 = a2;
  uint64_t v120 = type metadata accessor for AccessibilityActionKind();
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v118 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for LongPressGesture();
  uint64_t v103 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v96 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_10000F214(&qword_10051AC70);
  uint64_t v105 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  long long v100 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for TapGesture();
  uint64_t v125 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v89 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_10000F214(&qword_10051AD00);
  uint64_t v126 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_10000F214(&qword_10051ACF8);
  __chkstk_darwin(v122);
  uint64_t v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_10000F214(&qword_10051ACF0);
  uint64_t v98 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v123 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000F214(&qword_10051AD30);
  uint64_t v101 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  unint64_t v94 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_10000F214(&qword_10051ACE0);
  __chkstk_darwin(v92);
  uint64_t v95 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_10000F214(&qword_10051AD38);
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v90 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_10000F214(&qword_10051ACD0);
  __chkstk_darwin(v109);
  uint64_t v106 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_10000F214(&qword_10051AD40);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v110 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000F214(&qword_10051AC98);
  __chkstk_darwin(v113);
  uint64_t v114 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[2];
  uint64_t v21 = a1[3];
  uint64_t v132 = v20;
  uint64_t v133 = v21;
  uint64_t v128 = v20;
  uint64_t v127 = v21;
  uint64_t v22 = a1[5];
  uint64_t v131 = a1[4];
  uint64_t v134 = v131;
  uint64_t v135 = v22;
  uint64_t v130 = v22;
  uint64_t v23 = a1[7];
  uint64_t v129 = a1[6];
  uint64_t v136 = v129;
  uint64_t v137 = v23;
  uint64_t v24 = a1[9];
  uint64_t v138 = a1[8];
  uint64_t v25 = v138;
  uint64_t v139 = v24;
  uint64_t v140 = v3;
  sub_10000F214(&qword_10051AD48);
  sub_100061EA4();
  uint64_t v88 = v12;
  Button.init(action:label:)();
  static Edge.Set.all.getter();
  long long v144 = 0u;
  long long v145 = 0u;
  char v146 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  uint64_t v26 = v89;
  TapGesture.init(count:)();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v20;
  *(void *)(v27 + 24) = v21;
  *(void *)(v27 + 32) = v131;
  *(void *)(v27 + 40) = v22;
  uint64_t v28 = v129;
  *(void *)(v27 + 48) = v129;
  *(void *)(v27 + 56) = v23;
  *(void *)(v27 + 64) = v25;
  *(void *)(v27 + 72) = v24;
  long long v29 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v27 + 144) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v27 + 160) = v29;
  *(void *)(v27 + 176) = *(void *)(v3 + 96);
  long long v30 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v27 + 80) = *(_OWORD *)v3;
  *(_OWORD *)(v27 + 96) = v30;
  long long v31 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v27 + 112) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v27 + 128) = v31;
  sub_100061D9C(v3);
  uint64_t v32 = v91;
  uint64_t v33 = v124;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v125 + 8))(v26, v33);
  static GestureMask.all.getter();
  unint64_t v86 = sub_100061C98();
  uint64_t v89 = (char *)&protocol conformance descriptor for _EndedGesture<A>;
  uint64_t v87 = sub_100013AA8(&qword_10051AD20, &qword_10051AD00);
  uint64_t v34 = v93;
  uint64_t v35 = (uint64_t)v88;
  View.highPriorityGesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v126 + 8))(v32, v34);
  sub_10000FBD8(v35, &qword_10051ACF8);
  char v36 = v96;
  LongPressGesture.init(minimumDuration:maximumDistance:)();
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v127;
  *(void *)(v37 + 16) = v128;
  *(void *)(v37 + 24) = v38;
  uint64_t v39 = v130;
  *(void *)(v37 + 32) = v131;
  *(void *)(v37 + 40) = v39;
  *(void *)(v37 + 48) = v28;
  *(void *)(v37 + 56) = v23;
  uint64_t v126 = v23;
  uint64_t v124 = v25;
  *(void *)(v37 + 64) = v25;
  *(void *)(v37 + 72) = v24;
  uint64_t v40 = v92;
  uint64_t v125 = v24;
  int v41 = v90;
  long long v42 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v37 + 144) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v37 + 160) = v42;
  *(void *)(v37 + 176) = *(void *)(v3 + 96);
  long long v43 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v37 + 80) = *(_OWORD *)v3;
  *(_OWORD *)(v37 + 96) = v43;
  long long v44 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v37 + 112) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v37 + 128) = v44;
  sub_100061D9C(v3);
  sub_100061E24(&qword_10051AD28, (void (*)(uint64_t))&type metadata accessor for LongPressGesture);
  uint64_t v45 = v100;
  uint64_t v46 = v102;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v36, v46);
  static GestureMask.all.getter();
  *(void *)&long long v141 = v122;
  *((void *)&v141 + 1) = v34;
  unint64_t v142 = v86;
  uint64_t v143 = v87;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v48 = sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
  uint64_t v49 = v94;
  uint64_t v50 = v97;
  uint64_t v51 = v104;
  uint64_t v52 = v123;
  View.simultaneousGesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v45, v51);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v52, v50);
  *(void *)&long long v141 = v50;
  *((void *)&v141 + 1) = v51;
  unint64_t v142 = OpaqueTypeConformance2;
  uint64_t v143 = v48;
  swift_getOpaqueTypeConformance2();
  uint64_t v53 = (uint64_t)v95;
  uint64_t v54 = v99;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v49, v54);
  unint64_t v55 = sub_100061AF0();
  View.accessibilityShowsLargeContentViewer()();
  sub_10000FBD8(v53, &qword_10051ACE0);
  long long v141 = *(_OWORD *)(v3 + 16);
  LOBYTE(v142) = *(unsigned char *)(v3 + 32);
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  LocalizedStringKey.init(stringLiteral:)();
  *(void *)&long long v141 = v40;
  *((void *)&v141 + 1) = v55;
  swift_getOpaqueTypeConformance2();
  uint64_t v56 = (uint64_t)v106;
  uint64_t v57 = v108;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v41, v57);
  uint64_t v58 = v115;
  static AccessibilityChildBehavior.combine.getter();
  unint64_t v59 = sub_100061A10();
  uint64_t v60 = v110;
  uint64_t v61 = v109;
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v58, v117);
  sub_10000FBD8(v56, &qword_10051ACD0);
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = v128;
  uint64_t v64 = v127;
  *(void *)(v62 + 16) = v128;
  *(void *)(v62 + 24) = v64;
  uint64_t v65 = v130;
  *(void *)(v62 + 32) = v131;
  *(void *)(v62 + 40) = v65;
  uint64_t v66 = v126;
  *(void *)(v62 + 48) = v129;
  *(void *)(v62 + 56) = v66;
  uint64_t v67 = v125;
  *(void *)(v62 + 64) = v124;
  *(void *)(v62 + 72) = v67;
  long long v68 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v62 + 144) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v62 + 160) = v68;
  *(void *)(v62 + 176) = *(void *)(v3 + 96);
  long long v69 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v62 + 80) = *(_OWORD *)v3;
  *(_OWORD *)(v62 + 96) = v69;
  long long v70 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v62 + 112) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v62 + 128) = v70;
  sub_100061D9C(v3);
  uint64_t v71 = v118;
  static AccessibilityActionKind.default.getter();
  *(void *)&long long v141 = v61;
  *((void *)&v141 + 1) = v59;
  swift_getOpaqueTypeConformance2();
  uint64_t v72 = (uint64_t)v114;
  uint64_t v73 = v112;
  View.accessibilityAction(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v119 + 8))(v71, v120);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v60, v73);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v76 = v75;
  LOBYTE(v60) = v77 & 1;
  uint64_t v78 = swift_allocObject();
  *(void *)(v78 + 16) = v63;
  *(void *)(v78 + 24) = v64;
  uint64_t v79 = v130;
  *(void *)(v78 + 32) = v131;
  *(void *)(v78 + 40) = v79;
  uint64_t v80 = v126;
  *(void *)(v78 + 48) = v129;
  *(void *)(v78 + 56) = v80;
  uint64_t v81 = v125;
  *(void *)(v78 + 64) = v124;
  *(void *)(v78 + 72) = v81;
  long long v82 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v78 + 144) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v78 + 160) = v82;
  *(void *)(v78 + 176) = *(void *)(v3 + 96);
  long long v83 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v78 + 80) = *(_OWORD *)v3;
  *(_OWORD *)(v78 + 96) = v83;
  long long v84 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v78 + 112) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v78 + 128) = v84;
  sub_100061D9C(v3);
  ModifiedContent<>.accessibilityAction(named:_:)();
  swift_release();
  sub_100012FAC(v74, v76, (char)v60);
  swift_bridgeObjectRelease();
  return sub_10000FBD8(v72, &qword_10051AC98);
}

double sub_10005B4A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v39 = a9;
  uint64_t v38 = type metadata accessor for Image.ResizingMode();
  uint64_t v37 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v47 = a2;
  *((void *)&v47 + 1) = a3;
  *(void *)&long long v48 = a4;
  *((void *)&v48 + 1) = a5;
  *(void *)&long long v49 = a6;
  *((void *)&v49 + 1) = a7;
  *(void *)&long long v50 = a8;
  *((void *)&v50 + 1) = a10;
  type metadata accessor for MenuSplitView();
  long long v47 = *(_OWORD *)(a1 + 16);
  LOBYTE(v48) = *(unsigned char *)(a1 + 32);
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  if (v40 == 1)
  {
    Image.init(systemName:)();
    uint64_t v20 = v37;
    uint64_t v21 = v38;
    (*(void (**)(char *, void, uint64_t))(v37 + 104))(v19, enum case for Image.ResizingMode.stretch(_:), v38);
    uint64_t v22 = Image.resizable(capInsets:resizingMode:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v21);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v40 = v22;
    long long v41 = xmmword_10043ED80;
    uint64_t v42 = v53;
    *(void *)&long long v43 = v54;
    *((void *)&v43 + 1) = v55;
    uint64_t v44 = v56;
    long long v45 = v57;
    char v46 = 0;
  }
  else
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v23 = v53;
    uint64_t v24 = v54;
    uint64_t v25 = v55;
    uint64_t v26 = v56;
    long long v27 = v57;
    uint64_t v28 = static Color.clear.getter();
    uint64_t v40 = v23;
    *(void *)&long long v41 = v24;
    *((void *)&v41 + 1) = v25;
    uint64_t v42 = v26;
    long long v43 = v27;
    long long v45 = 0uLL;
    uint64_t v44 = v28;
    char v46 = 1;
  }
  sub_10000F214(&qword_10051AD60);
  sub_10000F214(&qword_10051AD88);
  sub_100061F20();
  sub_100062090();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v47;
  long long v30 = v48;
  long long v31 = v49;
  long long v32 = v50;
  uint64_t v33 = v51;
  char v34 = v52;
  uint64_t v35 = v39;
  *uint64_t v39 = v47;
  v35[1] = v30;
  v35[2] = v31;
  v35[3] = v32;
  *((void *)v35 + 8) = v33;
  *((unsigned char *)v35 + 72) = v34;
  return result;
}

void sub_10005B7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)&long long v17 = a3;
  *((void *)&v17 + 1) = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  uint64_t v22 = a9;
  uint64_t v23 = a10;
  type metadata accessor for MenuSplitView();
  long long v17 = *(_OWORD *)(a2 + 16);
  LOBYTE(v18) = *(unsigned char *)(a2 + 32);
  sub_10000F214(&qword_100519660);
  uint64_t v11 = Binding.wrappedValue.getter();
  if (v24 == 1)
  {
    uint64_t v16 = (uint64_t)&v16;
    __chkstk_darwin(v11);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
  }
  else
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000F378(v12, (uint64_t)qword_10055E2E0);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Debug gear not visible; not toggling", v15, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10005B9C0()
{
  id v0 = [objc_allocWithZone((Class)UIImpactFeedbackGenerator) initWithStyle:1];
  [v0 impactOccurred];

  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_10005BAA4()
{
  return swift_release();
}

uint64_t sub_10005BBBC()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10005BC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  uint64_t v20 = a9;
  type metadata accessor for MenuSplitView();
  long long v14 = *(_OWORD *)(a1 + 16);
  LOBYTE(v15) = *(unsigned char *)(a1 + 32);
  sub_10000F214(&qword_100519660);
  uint64_t result = Binding.wrappedValue.getter();
  if (v21 == 1)
  {
    id v11 = [objc_allocWithZone((Class)UIImpactFeedbackGenerator) initWithStyle:1];
    [v11 impactOccurred];

    uint64_t v13 = (uint64_t)&v13;
    __chkstk_darwin(v12);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10005BDA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100062328((uint64_t)&v2);
  swift_retain();
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  Binding.wrappedValue.setter();
  sub_100062354((uint64_t)&v2);
  return swift_release();
}

uint64_t sub_10005BE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v40 = type metadata accessor for ScrollDismissesKeyboardMode();
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v37 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InsetListStyle();
  uint64_t v36 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v34 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(a1 + 16);
  long long v30 = *(void **)(a1 + 48);
  long long v50 = &type metadata for Never;
  uint64_t v51 = v29;
  char v52 = &protocol witness table for Never;
  uint64_t v53 = v30;
  uint64_t v6 = type metadata accessor for List();
  uint64_t v33 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v26 - v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v50 = (void *)v6;
  uint64_t v51 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v31 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v12 = (char *)v26 - v11;
  long long v50 = (void *)v6;
  uint64_t v51 = WitnessTable;
  v26[0] = swift_getOpaqueTypeConformance2();
  long long v50 = (void *)OpaqueTypeMetadata2;
  uint64_t v51 = v4;
  uint64_t v13 = v4;
  char v52 = (void *)v26[0];
  uint64_t v53 = &protocol witness table for InsetListStyle;
  v26[1] = &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>;
  uint64_t v14 = swift_getOpaqueTypeMetadata2();
  uint64_t v28 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v26 - v15;
  uint64_t v27 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v18 = (char *)v26 - v17;
  uint64_t v41 = v29;
  long long v42 = *(_OWORD *)(a1 + 24);
  uint64_t v43 = *(void *)(a1 + 40);
  uint64_t v44 = v30;
  long long v45 = *(_OWORD *)(a1 + 56);
  uint64_t v46 = *(void *)(a1 + 72);
  uint64_t v47 = v35;
  List<>.init(content:)();
  View.scrollContentBackground(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  uint64_t v19 = v34;
  InsetListStyle.init()();
  uint64_t v20 = v13;
  char v21 = (void *)v26[0];
  View.listStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v20);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, OpaqueTypeMetadata2);
  static Edge.Set.bottom.getter();
  long long v50 = (void *)OpaqueTypeMetadata2;
  uint64_t v51 = v20;
  char v52 = v21;
  uint64_t v53 = &protocol witness table for InsetListStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v14);
  uint64_t v23 = v37;
  static ScrollDismissesKeyboardMode.interactively.getter();
  uint64_t v48 = OpaqueTypeConformance2;
  long long v49 = &protocol witness table for _PaddingLayout;
  uint64_t v24 = v27;
  swift_getWitnessTable();
  View.scrollDismissesKeyboard(_:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v18, v24);
}

uint64_t sub_10005C480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(void))(v12 + 40))();
  sub_100224E4C(v11, a2, a6);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, a2);
  sub_100224E4C(v14, a2, a6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a2);
}

uint64_t sub_10005C5B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for NavigationPath();
  uint64_t v4 = a1[4];
  uint64_t v28 = a1[3];
  uint64_t v29 = v3;
  uint64_t v31 = v4;
  uint64_t v24 = sub_10000F69C(&qword_1005230F0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v30 = a1[8];
  uint64_t v61 = v30;
  uint64_t v62 = sub_100013AA8(&qword_10051AC48, &qword_1005230F0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  swift_getWitnessTable();
  type metadata accessor for _BackgroundModifier();
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v22 = sub_10000F69C(&qword_10051AC50);
  uint64_t v5 = a1[6];
  uint64_t v26 = a1[2];
  uint64_t v27 = v5;
  type metadata accessor for List();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for InsetListStyle();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v57 = OpaqueTypeConformance2;
  uint64_t v58 = &protocol witness table for InsetListStyle;
  uint64_t v53 = swift_getOpaqueTypeConformance2();
  unsigned __int8 v54 = &protocol witness table for _PaddingLayout;
  v21[2] = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v55 = v7;
  uint64_t v56 = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_1005190E0);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v23 = &protocol conformance descriptor for TupleView<A>;
  swift_getWitnessTable();
  type metadata accessor for HStack();
  sub_10000F69C((uint64_t *)&unk_10051D370);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  v21[5] = &protocol conformance descriptor for HStack<A>;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  uint64_t v50 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for _OverlayModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v21[4] = type metadata accessor for ModifiedContent();
  v21[3] = sub_10000F69C(&qword_10051AC58);
  v21[1] = sub_10000F69C(&qword_10051AC60);
  uint64_t v24 = a1[5];
  sub_10000F69C(&qword_10051AC68);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = sub_10000F69C(&qword_10051AC70);
  uint64_t v22 = a1[9];
  uint64_t v48 = v22;
  uint64_t v49 = sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
  uint64_t v47 = swift_getWitnessTable();
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = &protocol witness table for _PaddingLayout;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = &protocol witness table for _PaddingLayout;
  uint64_t v55 = v8;
  uint64_t v56 = v9;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v58 = (void *)sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getWitnessTable();
  type metadata accessor for _OverlayModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for NavigationStack();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v21 - v15;
  uint64_t v34 = v26;
  uint64_t v35 = v28;
  uint64_t v36 = v31;
  uint64_t v37 = v24;
  uint64_t v17 = a1[7];
  uint64_t v38 = v27;
  uint64_t v39 = v17;
  uint64_t v40 = v30;
  uint64_t v41 = v22;
  uint64_t v42 = v32;
  NavigationStack.init<>(root:)();
  uint64_t v18 = swift_getWitnessTable();
  sub_100224E4C(v13, v10, v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  sub_100224E4C(v16, v10, v18);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v10);
}

uint64_t sub_10005CE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v27 = a8;
  uint64_t v28 = a4;
  uint64_t v29 = a1;
  uint64_t v30 = a7;
  uint64_t v25 = a6;
  uint64_t v26 = a3;
  uint64_t v31 = a9;
  uint64_t v32 = a5;
  uint64_t v24 = a2;
  v23[5] = a10;
  sub_10000F69C(&qword_1005230F0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v60 = a8;
  uint64_t v61 = sub_100013AA8(&qword_10051AC48, &qword_1005230F0);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v59 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  swift_getWitnessTable();
  type metadata accessor for _BackgroundModifier();
  v23[6] = type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_10051AC50);
  type metadata accessor for List();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for InsetListStyle();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v53 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_1005190E0);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  v23[4] = &protocol conformance descriptor for TupleView<A>;
  swift_getWitnessTable();
  type metadata accessor for HStack();
  sub_10000F69C((uint64_t *)&unk_10051D370);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  void v23[2] = &protocol conformance descriptor for HStack<A>;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  uint64_t v49 = swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for _OverlayModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v23[3] = type metadata accessor for ModifiedContent();
  v23[1] = sub_10000F69C(&qword_10051AC58);
  v23[0] = sub_10000F69C(&qword_10051AC60);
  sub_10000F69C(&qword_10051AC68);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = sub_10000F69C(&qword_10051AC70);
  uint64_t v47 = a10;
  uint64_t v48 = sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = &protocol witness table for _PaddingLayout;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v43 = &protocol witness table for _PaddingLayout;
  uint64_t v54 = v11;
  uint64_t v55 = v12;
  uint64_t v56 = swift_getWitnessTable();
  uint64_t v57 = sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  swift_getWitnessTable();
  type metadata accessor for _OverlayModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for ZStack();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v23 - v18;
  uint64_t v33 = v24;
  uint64_t v34 = v26;
  uint64_t v35 = v28;
  uint64_t v36 = v32;
  uint64_t v37 = v25;
  uint64_t v38 = v30;
  uint64_t v39 = v27;
  uint64_t v40 = a10;
  uint64_t v41 = v29;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  uint64_t v20 = swift_getWitnessTable();
  sub_100224E4C(v16, v13, v20);
  char v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v16, v13);
  sub_100224E4C(v19, v13, v20);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v13);
}

uint64_t sub_10005D630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v130 = a4;
  uint64_t v131 = a8;
  uint64_t v123 = a5;
  uint64_t v124 = a7;
  uint64_t v132 = a2;
  uint64_t v133 = a6;
  uint64_t v121 = a3;
  uint64_t v104 = a1;
  uint64_t v115 = a9;
  uint64_t v122 = a10;
  uint64_t v106 = sub_10000F69C(&qword_10051AC58);
  sub_10000F69C(&qword_10051AC60);
  sub_10000F69C(&qword_10051AC68);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = sub_10000F69C(&qword_10051AC70);
  uint64_t v174 = a10;
  uint64_t v175 = sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v171 = swift_getWitnessTable();
  uint64_t v172 = &protocol witness table for _PaddingLayout;
  uint64_t v126 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v169 = swift_getWitnessTable();
  uint64_t v170 = &protocol witness table for _PaddingLayout;
  uint64_t v165 = (void *)v10;
  uint64_t v166 = v11;
  uint64_t v167 = (void *)swift_getWitnessTable();
  uint64_t v168 = (void *)sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v110 = type metadata accessor for HStack();
  uint64_t v129 = (char *)&protocol conformance descriptor for HStack<A>;
  uint64_t v109 = swift_getWitnessTable();
  uint64_t v111 = type metadata accessor for _OverlayModifier();
  uint64_t v107 = type metadata accessor for ModifiedContent();
  uint64_t v114 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v105 = (char *)&v90 - v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v112 = v13;
  uint64_t v113 = v14;
  __chkstk_darwin(v13);
  uint64_t v125 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v108 = (char *)&v90 - v17;
  uint64_t v95 = sub_10000F69C(&qword_10051AC50);
  uint64_t v165 = &type metadata for Never;
  uint64_t v166 = v132;
  uint64_t v167 = &protocol witness table for Never;
  uint64_t v168 = v133;
  uint64_t v18 = type metadata accessor for List();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v165 = (void *)v18;
  uint64_t v166 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v21 = type metadata accessor for InsetListStyle();
  uint64_t v165 = (void *)v18;
  uint64_t v166 = v19;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v165 = (void *)OpaqueTypeMetadata2;
  uint64_t v166 = v21;
  uint64_t v167 = (void *)OpaqueTypeConformance2;
  uint64_t v168 = &protocol witness table for InsetListStyle;
  swift_getOpaqueTypeMetadata2();
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v165 = (void *)OpaqueTypeMetadata2;
  uint64_t v166 = v21;
  uint64_t v167 = (void *)OpaqueTypeConformance2;
  uint64_t v168 = &protocol witness table for InsetListStyle;
  v164[22] = swift_getOpaqueTypeConformance2();
  v164[23] = &protocol witness table for _PaddingLayout;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v165 = (void *)v23;
  uint64_t v166 = v24;
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_1005190E0);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  sub_10000F69C((uint64_t *)&unk_10051D370);
  type metadata accessor for ModifiedContent();
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  v164[20] = v26;
  v164[21] = v27;
  v164[19] = swift_getWitnessTable();
  uint64_t v98 = v25;
  uint64_t v97 = swift_getWitnessTable();
  uint64_t v99 = type metadata accessor for _OverlayModifier();
  uint64_t v93 = type metadata accessor for ModifiedContent();
  uint64_t v102 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v92 = (char *)&v90 - v28;
  sub_10000F69C(&qword_1005230F0);
  uint64_t v96 = type metadata accessor for ModifiedContent();
  uint64_t v103 = *(void (***)(char *, uint64_t))(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v91 = (char *)&v90 - v29;
  uint64_t v117 = type metadata accessor for ModifiedContent();
  uint64_t v119 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v128 = (char *)&v90 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v120 = (char *)&v90 - v32;
  uint64_t v33 = v121;
  uint64_t v101 = *(uint64_t (**)(char *, uint64_t))(v121 - 8);
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v90 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v130;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v90 = sub_100013AA8(&qword_10051AC48, &qword_1005230F0);
  uint64_t v38 = v131;
  v164[17] = v131;
  v164[18] = v90;
  v164[15] = swift_getWitnessTable();
  v164[16] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v94 = swift_getWitnessTable();
  uint64_t v100 = type metadata accessor for _BackgroundModifier();
  uint64_t v39 = v33;
  uint64_t v116 = type metadata accessor for ModifiedContent();
  uint64_t v118 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v127 = (char *)&v90 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v42 = __chkstk_darwin(v41);
  uint64_t v129 = (char *)&v90 - v43;
  uint64_t v44 = v104;
  uint64_t v45 = v36;
  (*(void (**)(double))(v104 + 56))(v42);
  uint64_t v46 = v132;
  uint64_t v152 = v132;
  uint64_t v153 = v39;
  uint64_t v154 = v37;
  uint64_t v48 = v123;
  uint64_t v47 = v124;
  uint64_t v155 = v123;
  uint64_t v156 = v133;
  uint64_t v157 = v124;
  uint64_t v158 = v38;
  uint64_t v49 = v122;
  uint64_t v159 = v122;
  uint64_t v160 = v44;
  static Alignment.center.getter();
  uint64_t v50 = v127;
  View.background<A>(alignment:content:)();
  uint64_t v51 = v45;
  uint64_t v52 = v39;
  (*((void (**)(char *, uint64_t))v101 + 1))(v51, v39);
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = v47;
  v164[13] = v47;
  v164[14] = v53;
  uint64_t v55 = v116;
  uint64_t v94 = swift_getWitnessTable();
  sub_100224E4C(v50, v55, v94);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t))(v118 + 8);
  uint64_t v100 = v118 + 8;
  uint64_t v101 = v56;
  v56(v50, v55);
  uint64_t v57 = static Color.clear.getter();
  uint64_t v58 = static SafeAreaRegions.all.getter();
  char v59 = static Edge.Set.all.getter();
  uint64_t v165 = (void *)v57;
  LOWORD(v166) = 256;
  uint64_t v167 = (void *)v58;
  LOBYTE(v168) = v59;
  uint64_t v143 = v46;
  uint64_t v144 = v52;
  uint64_t v145 = v130;
  uint64_t v146 = v48;
  uint64_t v147 = v133;
  uint64_t v148 = v54;
  uint64_t v149 = v131;
  uint64_t v150 = v49;
  uint64_t v151 = v44;
  static Alignment.center.getter();
  unint64_t v60 = sub_100061790();
  uint64_t v61 = v92;
  View.overlay<A>(alignment:content:)();
  swift_release();
  uint64_t v62 = swift_getWitnessTable();
  v164[11] = v60;
  v164[12] = v62;
  uint64_t v63 = v93;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v65 = v91;
  View.clipped(antialiased:)();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v61, v63);
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  v164[9] = v64;
  v164[10] = v90;
  uint64_t v66 = v96;
  uint64_t v67 = swift_getWitnessTable();
  long long v68 = v128;
  View.ignoresSafeArea(_:edges:)();
  v103[1](v65, v66);
  v164[7] = v67;
  v164[8] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v69 = v117;
  uint64_t v99 = swift_getWitnessTable();
  sub_100224E4C(v68, v69, v99);
  long long v70 = *(void (***)(char *, uint64_t))(v119 + 8);
  uint64_t v102 = v119 + 8;
  uint64_t v103 = v70;
  ((void (*)(char *, uint64_t))v70)(v68, v69);
  uint64_t v165 = (void *)static Color.clear.getter();
  LOWORD(v166) = 256;
  static Alignment.topLeading.getter();
  uint64_t v134 = v132;
  uint64_t v135 = v121;
  uint64_t v136 = v130;
  uint64_t v137 = v123;
  uint64_t v138 = v133;
  uint64_t v139 = v124;
  uint64_t v140 = v131;
  uint64_t v141 = v122;
  uint64_t v142 = v44;
  uint64_t v71 = sub_100013AA8(&qword_10051AC90, &qword_10051AC58);
  uint64_t v72 = v105;
  View.overlay<A>(alignment:content:)();
  swift_release();
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  uint64_t v73 = swift_getWitnessTable();
  v164[5] = v71;
  v164[6] = v73;
  uint64_t v74 = v107;
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v76 = v125;
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v114 + 8))(v72, v74);
  v164[3] = v75;
  v164[4] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v77 = v112;
  uint64_t v132 = swift_getWitnessTable();
  uint64_t v78 = v108;
  sub_100224E4C(v76, v77, v132);
  uint64_t v79 = v113;
  uint64_t v133 = *(void (**)(void, void))(v113 + 8);
  v133(v76, v77);
  uint64_t v80 = v127;
  uint64_t v81 = v116;
  (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v127, v129, v116);
  uint64_t v165 = v80;
  long long v82 = v120;
  long long v83 = v128;
  uint64_t v84 = v117;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v128, v120, v117);
  uint64_t v166 = (uint64_t)v83;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v78, v77);
  uint64_t v167 = v76;
  v164[0] = v81;
  v164[1] = v84;
  v164[2] = v77;
  uint64_t v161 = v94;
  uint64_t v162 = v99;
  uint64_t v163 = v132;
  sub_100059B74((uint64_t)&v165, 3uLL, (uint64_t)v164);
  uint64_t v85 = (void (*)(char *, uint64_t))v133;
  v133(v78, v77);
  unint64_t v86 = v82;
  uint64_t v87 = v103;
  ((void (*)(char *, uint64_t))v103)(v86, v84);
  uint64_t v88 = v101;
  v101(v129, v81);
  v85(v125, v77);
  ((void (*)(char *, uint64_t))v87)(v128, v84);
  return v88(v127, v81);
}

uint64_t sub_10005E63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v26 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F69C(&qword_1005230F0);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(double))(a1 + 72))(v17);
  View.clipped(antialiased:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, a2);
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  uint64_t v20 = sub_100013AA8(&qword_10051AC48, &qword_1005230F0);
  uint64_t v31 = a3;
  uint64_t v32 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  uint64_t v29 = WitnessTable;
  uint64_t v30 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v22 = swift_getWitnessTable();
  sub_100224E4C(v15, v12, v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v15, v12);
  sub_100224E4C(v19, v12, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v12);
}

uint64_t sub_10005E97C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v57 = a8;
  uint64_t v56 = a7;
  uint64_t v54 = a5;
  uint64_t v53 = a4;
  uint64_t v52 = a3;
  char v59 = a1;
  uint64_t v61 = a9;
  uint64_t v51 = a2;
  uint64_t v55 = a6;
  type metadata accessor for List();
  swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for InsetListStyle();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v74 = OpaqueTypeConformance2;
  uint64_t v75 = &protocol witness table for InsetListStyle;
  uint64_t v71 = swift_getOpaqueTypeConformance2();
  uint64_t v72 = &protocol witness table for _PaddingLayout;
  *(void *)&long long v73 = v10;
  *((void *)&v73 + 1) = swift_getWitnessTable();
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  sub_10000F69C(&qword_1005190E0);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for HStack();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - v13;
  sub_10000F69C((uint64_t *)&unk_10051D370);
  uint64_t v62 = v11;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v49 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v50 = (char *)&v47 - v18;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  unint64_t v60 = (char *)&v47 - v24;
  uint64_t v25 = v59;
  long long v73 = *v59;
  sub_10000F214(&qword_100522EA0);
  uint64_t v26 = State.wrappedValue.getter();
  if (v70 == 1)
  {
    uint64_t v48 = v12;
    __chkstk_darwin(v26);
    uint64_t v27 = v52;
    *(&v47 - 10) = v51;
    *(&v47 - 9) = v27;
    uint64_t v28 = v54;
    *(&v47 - 8) = v53;
    *(&v47 - 7) = v28;
    uint64_t v29 = v56;
    *(&v47 - 6) = v55;
    *(&v47 - 5) = v29;
    *(&v47 - 4) = v57;
    *(&v47 - 3) = v30;
    *(&v47 - 2) = (uint64_t)v25;
    static VerticalAlignment.center.getter();
    HStack.init(alignment:spacing:content:)();
    static AnyTransition.slide.getter();
    static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
    AnyTransition.animation(_:)();
    swift_release();
    swift_release();
    static AnyTransition.move(edge:)();
    static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
    AnyTransition.animation(_:)();
    swift_release();
    swift_release();
    static AnyTransition.asymmetric(insertion:removal:)();
    swift_release();
    swift_release();
    uint64_t v31 = v62;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v33 = v49;
    View.transition(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v31);
    uint64_t v34 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    uint64_t v63 = WitnessTable;
    uint64_t v64 = v34;
    uint64_t v35 = swift_getWitnessTable();
    uint64_t v36 = v50;
    sub_100224E4C(v33, v15, v35);
    uint64_t v37 = v58;
    uint64_t v38 = *(void (**)(char *, uint64_t))(v58 + 8);
    v38(v33, v15);
    sub_100224E4C(v36, v15, v35);
    v38(v36, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v22, 0, 1, v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v22, 1, 1, v15);
    uint64_t v39 = swift_getWitnessTable();
    uint64_t v40 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    uint64_t v68 = v39;
    uint64_t v69 = v40;
    swift_getWitnessTable();
  }
  uint64_t v41 = v60;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v60, v22, v19);
  double v42 = *(void (**)(char *, uint64_t))(v20 + 8);
  v42(v22, v19);
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
  uint64_t v66 = v43;
  uint64_t v67 = v44;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v45 = swift_getWitnessTable();
  sub_100224E4C(v41, v19, v45);
  return ((uint64_t (*)(char *, uint64_t))v42)(v41, v19);
}

uint64_t sub_10005F23C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v74 = a8;
  uint64_t v73 = a7;
  uint64_t v67 = a6;
  uint64_t v71 = a5;
  char v70 = a4;
  uint64_t v68 = a3;
  uint64_t v66 = a2;
  uint64_t v72 = a1;
  uint64_t v65 = a9;
  uint64_t v69 = a10;
  uint64_t v63 = type metadata accessor for Material();
  uint64_t v64 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v62 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = &type metadata for Never;
  uint64_t v80 = a2;
  uint64_t v81 = &protocol witness table for Never;
  long long v82 = a6;
  uint64_t v13 = type metadata accessor for List();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v79 = (void *)v13;
  uint64_t v80 = (void *)WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v16 = type metadata accessor for InsetListStyle();
  uint64_t v79 = (void *)v13;
  uint64_t v80 = (void *)WitnessTable;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v79 = (void *)OpaqueTypeMetadata2;
  uint64_t v80 = (void *)v16;
  uint64_t v81 = (void *)OpaqueTypeConformance2;
  long long v82 = &protocol witness table for InsetListStyle;
  swift_getOpaqueTypeMetadata2();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v79 = (void *)OpaqueTypeMetadata2;
  uint64_t v80 = (void *)v16;
  uint64_t v81 = (void *)OpaqueTypeConformance2;
  long long v82 = &protocol witness table for InsetListStyle;
  uint64_t v87 = swift_getOpaqueTypeConformance2();
  uint64_t v88 = &protocol witness table for _PaddingLayout;
  char v59 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v79 = (void *)v18;
  uint64_t v80 = (void *)v55;
  uint64_t v54 = &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>;
  uint64_t v19 = swift_getOpaqueTypeMetadata2();
  uint64_t v56 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v54 - v20;
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v57 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v54 - v23;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v60 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v54 - v26;
  sub_10000F69C(&qword_1005190E0);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v54 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v58 = (char *)&v54 - v32;
  uint64_t v79 = v66;
  uint64_t v80 = v68;
  uint64_t v81 = v70;
  long long v82 = v71;
  long long v83 = v67;
  uint64_t v84 = v73;
  uint64_t v85 = v74;
  uint64_t v86 = v69;
  uint64_t v33 = type metadata accessor for MenuSplitView();
  sub_10005BE5C(v33, (uint64_t)v21);
  static Edge.Set.top.getter();
  uint64_t v79 = (void *)v18;
  uint64_t v80 = (void *)v55;
  uint64_t v34 = swift_getOpaqueTypeConformance2();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v21, v19);
  static Alignment.center.getter();
  v78[6] = v34;
  v78[7] = &protocol witness table for _PaddingLayout;
  uint64_t v53 = swift_getWitnessTable();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v24, v22);
  uint64_t v35 = v62;
  static Material.regular.getter();
  static Edge.Set.all.getter();
  v78[4] = v53;
  v78[5] = &protocol witness table for _FlexFrameLayout;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v63;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v35, v37);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v27, v25);
  uint64_t v38 = sub_100013AA8(&qword_1005190D8, &qword_1005190E0);
  v78[2] = v36;
  v78[3] = v38;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = v58;
  sub_100224E4C(v30, v28, v39);
  uint64_t v41 = v61;
  double v42 = *(void (**)(char *, uint64_t))(v61 + 8);
  v42(v30, v28);
  uint64_t v43 = swift_allocObject();
  uint64_t v44 = v68;
  *(void *)(v43 + 16) = v66;
  *(void *)(v43 + 24) = v44;
  uint64_t v45 = v71;
  *(void *)(v43 + 32) = v70;
  *(void *)(v43 + 40) = v45;
  uint64_t v46 = v73;
  *(void *)(v43 + 48) = v67;
  *(void *)(v43 + 56) = v46;
  uint64_t v47 = v69;
  *(void *)(v43 + 64) = v74;
  *(void *)(v43 + 72) = v47;
  uint64_t v48 = v72;
  long long v49 = *(_OWORD *)(v72 + 80);
  *(_OWORD *)(v43 + 144) = *(_OWORD *)(v72 + 64);
  *(_OWORD *)(v43 + 160) = v49;
  *(void *)(v43 + 176) = *(void *)(v48 + 96);
  long long v50 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)(v43 + 80) = *(_OWORD *)v48;
  *(_OWORD *)(v43 + 96) = v50;
  long long v51 = *(_OWORD *)(v48 + 48);
  *(_OWORD *)(v43 + 112) = *(_OWORD *)(v48 + 32);
  *(_OWORD *)(v43 + 128) = v51;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v30, v40, v28);
  v78[0] = sub_10006251C;
  v78[1] = v43;
  uint64_t v79 = v30;
  uint64_t v80 = v78;
  sub_100061D9C(v48);
  swift_retain();
  v77[0] = v28;
  v77[1] = &type metadata for TappableSpacer;
  uint64_t v75 = v39;
  unint64_t v76 = sub_100062574();
  sub_100059B74((uint64_t)&v79, 2uLL, (uint64_t)v77);
  swift_release();
  v42(v40, v28);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v42)(v30, v28);
}

uint64_t sub_10005FB0C()
{
  return swift_release();
}

uint64_t sub_10005FB8C()
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
}

uint64_t sub_10005FC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v29 = a8;
  uint64_t v28 = a7;
  uint64_t v27 = a6;
  uint64_t v25 = a4;
  uint64_t v24 = a3;
  uint64_t v23 = a2;
  uint64_t v26 = a1;
  uint64_t v30 = a9;
  sub_10000F69C(&qword_10051AC60);
  sub_10000F69C(&qword_10051AC68);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Group();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = sub_10000F69C(&qword_10051AC70);
  uint64_t v49 = a10;
  uint64_t v50 = sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v47 = &protocol witness table for _PaddingLayout;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = &protocol witness table for _PaddingLayout;
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v43 = sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for HStack();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v23 - v18;
  uint64_t v31 = v23;
  uint64_t v32 = v24;
  uint64_t v33 = v25;
  uint64_t v34 = a5;
  uint64_t v35 = v27;
  uint64_t v36 = v28;
  uint64_t v37 = v29;
  uint64_t v38 = a10;
  uint64_t v39 = v26;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  uint64_t v20 = swift_getWitnessTable();
  sub_100224E4C(v16, v13, v20);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v16, v13);
  sub_100224E4C(v19, v13, v20);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v13);
}

uint64_t sub_100060014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v150 = a8;
  uint64_t v149 = a7;
  uint64_t v143 = a6;
  uint64_t v141 = a4;
  uint64_t v139 = a3;
  uint64_t v148 = a2;
  uint64_t v145 = a1;
  uint64_t v147 = a9;
  uint64_t v135 = type metadata accessor for LongPressGesture();
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v132 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051AC70);
  uint64_t v133 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v131 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F69C(&qword_10051AC68);
  uint64_t v142 = a5;
  uint64_t v14 = type metadata accessor for _ConditionalContent();
  uint64_t v15 = type metadata accessor for Group();
  uint64_t v124 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v122 = (char *)&v115 - v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v123 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v121 = (char *)&v115 - v18;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v130 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v129 = (char *)&v115 - v20;
  uint64_t v21 = sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
  uint64_t v140 = a10;
  v172[8] = a10;
  v172[9] = v21;
  uint64_t v120 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  v172[7] = WitnessTable;
  uint64_t v126 = v15;
  uint64_t v118 = swift_getWitnessTable();
  v172[5] = v118;
  v172[6] = &protocol witness table for _PaddingLayout;
  uint64_t v125 = v17;
  uint64_t v119 = swift_getWitnessTable();
  v172[3] = v119;
  v172[4] = &protocol witness table for _PaddingLayout;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
  uint64_t v146 = v19;
  uint64_t v157 = v19;
  uint64_t v153 = v12;
  uint64_t v158 = v12;
  uint64_t v152 = v22;
  uint64_t v159 = v22;
  uint64_t v160 = v23;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v25 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v127 = (char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v128 = (char *)&v115 - v28;
  uint64_t v155 = type metadata accessor for Optional();
  uint64_t v137 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v156 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v115 - v31;
  uint64_t v33 = sub_10000F214(&qword_10051AC98);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v115 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000F214(&qword_10051ACA0);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v115 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000F214(&qword_10051ACA8);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v115 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000F214(&qword_10051AC60);
  __chkstk_darwin(v136);
  uint64_t v138 = (uint64_t)&v115 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v154 = (uint64_t)&v115 - v45;
  if (qword_100517FF8 != -1) {
    swift_once();
  }
  uint64_t v151 = v23;
  uint64_t v144 = v32;
  if (byte_10055E434 == 1)
  {
    uint64_t v157 = v148;
    uint64_t v158 = v139;
    uint64_t v159 = v141;
    uint64_t v160 = v142;
    uint64_t v161 = v143;
    uint64_t v162 = v149;
    uint64_t v163 = v150;
    uint64_t v164 = v140;
    uint64_t v46 = (void *)type metadata accessor for MenuSplitView();
    sub_10005A424(v46, (uint64_t)v35);
    char v47 = static Edge.Set.leading.getter();
    EdgeInsets.init(_all:)();
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    sub_10000FB74((uint64_t)v35, (uint64_t)v38, &qword_10051AC98);
    uint64_t v56 = &v38[*(int *)(v36 + 36)];
    *uint64_t v56 = v47;
    *((void *)v56 + 1) = v49;
    *((void *)v56 + 2) = v51;
    *((void *)v56 + 3) = v53;
    *((void *)v56 + 4) = v55;
    v56[40] = 0;
    sub_10000FBD8((uint64_t)v35, &qword_10051AC98);
    char v57 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    sub_10000FB74((uint64_t)v38, (uint64_t)v42, &qword_10051ACA0);
    uint64_t v66 = &v42[*(int *)(v39 + 36)];
    *uint64_t v66 = v57;
    *((void *)v66 + 1) = v59;
    *((void *)v66 + 2) = v61;
    *((void *)v66 + 3) = v63;
    *((void *)v66 + 4) = v65;
    v66[40] = 0;
    sub_10000FBD8((uint64_t)v38, &qword_10051ACA0);
    uint64_t v68 = v154;
    sub_10000FC34((uint64_t)v42, v154, &qword_10051ACA8);
    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
    uint64_t v68 = v154;
  }
  uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v68, v67, 1, v39);
  if (qword_100517F58 != -1) {
    uint64_t v69 = swift_once();
  }
  if (byte_10055E408 == 1)
  {
    __chkstk_darwin(v69);
    uint64_t v116 = v25;
    uint64_t v70 = v139;
    *(&v115 - 10) = v148;
    *(&v115 - 9) = v70;
    uint64_t v71 = v141;
    uint64_t v72 = v142;
    *(&v115 - 8) = v141;
    *(&v115 - 7) = v72;
    uint64_t v73 = v143;
    uint64_t v74 = v149;
    *(&v115 - 6) = v143;
    *(&v115 - 5) = v74;
    uint64_t v115 = OpaqueTypeMetadata2;
    uint64_t v75 = v140;
    *(&v115 - 4) = v150;
    *(&v115 - 3) = v75;
    uint64_t v76 = v145;
    *(&v115 - 2) = v145;
    uint64_t v77 = v122;
    Group<A>.init(content:)();
    static Edge.Set.trailing.getter();
    uint64_t v78 = v121;
    uint64_t v79 = v126;
    View.padding(_:_:)();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v77, v79);
    static Edge.Set.top.getter();
    uint64_t v80 = v129;
    uint64_t v81 = v125;
    View.padding(_:_:)();
    (*(void (**)(char *, uint64_t))(v123 + 8))(v78, v81);
    long long v82 = v132;
    LongPressGesture.init(minimumDuration:maximumDistance:)();
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = v148;
    *(void *)(v83 + 24) = v70;
    uint64_t v84 = v155;
    *(void *)(v83 + 32) = v71;
    *(void *)(v83 + 40) = v72;
    uint64_t v85 = v149;
    *(void *)(v83 + 48) = v73;
    *(void *)(v83 + 56) = v85;
    *(void *)(v83 + 64) = v150;
    *(void *)(v83 + 72) = v75;
    uint64_t v86 = v156;
    long long v87 = *(_OWORD *)(v76 + 80);
    *(_OWORD *)(v83 + 144) = *(_OWORD *)(v76 + 64);
    *(_OWORD *)(v83 + 160) = v87;
    *(void *)(v83 + 176) = *(void *)(v76 + 96);
    long long v88 = *(_OWORD *)(v76 + 16);
    *(_OWORD *)(v83 + 80) = *(_OWORD *)v76;
    *(_OWORD *)(v83 + 96) = v88;
    long long v89 = *(_OWORD *)(v76 + 48);
    *(_OWORD *)(v83 + 112) = *(_OWORD *)(v76 + 32);
    *(_OWORD *)(v83 + 128) = v89;
    sub_100061D9C(v76);
    sub_100061E24(&qword_10051AD28, (void (*)(uint64_t))&type metadata accessor for LongPressGesture);
    uint64_t v90 = v131;
    uint64_t v91 = v135;
    Gesture.onEnded(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v82, v91);
    static GestureMask.all.getter();
    uint64_t v92 = v127;
    uint64_t v93 = v146;
    uint64_t v94 = v153;
    uint64_t v95 = v152;
    uint64_t v96 = v151;
    View.simultaneousGesture<A>(_:including:)();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v90, v94);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v80, v93);
    uint64_t v157 = v93;
    uint64_t v158 = v94;
    uint64_t v159 = v95;
    uint64_t v160 = v96;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v98 = v128;
    uint64_t v99 = v115;
    sub_100224E4C(v92, v115, OpaqueTypeConformance2);
    uint64_t v100 = v116;
    uint64_t v101 = *(void (**)(char *, uint64_t))(v116 + 8);
    v101(v92, v99);
    sub_100224E4C(v98, v99, OpaqueTypeConformance2);
    v101(v98, v99);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v86, 0, 1, v99);
    uint64_t v102 = v137;
    uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
    uint64_t v104 = v144;
    v103(v144, v86, v84);
    uint64_t v105 = *(void (**)(char *, uint64_t))(v102 + 8);
    v105(v86, v84);
  }
  else
  {
    uint64_t v106 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    uint64_t v107 = v156;
    v106(v156, 1, 1, OpaqueTypeMetadata2);
    uint64_t v108 = v137;
    uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
    uint64_t v104 = v144;
    uint64_t v109 = v155;
    v103(v144, v107, v155);
    uint64_t v105 = *(void (**)(char *, uint64_t))(v108 + 8);
    v105(v107, v109);
    uint64_t v93 = v146;
  }
  uint64_t v110 = v154;
  uint64_t v111 = v138;
  sub_10000FB74(v154, v138, &qword_10051AC60);
  uint64_t v170 = 0;
  char v171 = 1;
  v172[0] = v111;
  v172[1] = &v170;
  uint64_t v112 = v156;
  uint64_t v113 = v155;
  v103(v156, v104, v155);
  v172[2] = v112;
  v169[0] = v136;
  v169[1] = &type metadata for Spacer;
  v169[2] = v113;
  unint64_t v166 = sub_100061860();
  uint64_t v167 = &protocol witness table for Spacer;
  uint64_t v157 = v93;
  uint64_t v158 = v153;
  uint64_t v159 = v152;
  uint64_t v160 = v151;
  uint64_t v165 = swift_getOpaqueTypeConformance2();
  uint64_t v168 = swift_getWitnessTable();
  sub_100059B74((uint64_t)v172, 3uLL, (uint64_t)v169);
  v105(v104, v113);
  sub_10000FBD8(v110, &qword_10051AC60);
  v105(v112, v113);
  return sub_10000FBD8(v111, &qword_10051AC60);
}

uint64_t sub_10006105C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  *((void *)&v33 + 1) = a3;
  uint64_t v34 = a4;
  *(void *)&long long v33 = a2;
  uint64_t v12 = sub_10000F214(&qword_10051AC68);
  uint64_t v32 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a5 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v22 = type metadata accessor for _ConditionalContent();
  uint64_t v37 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v31 - v23;
  long long v42 = v33;
  uint64_t v43 = v34;
  uint64_t v44 = a5;
  uint64_t v45 = v35;
  uint64_t v46 = v36;
  uint64_t v47 = v38;
  uint64_t v48 = a10;
  uint64_t v38 = a10;
  type metadata accessor for MenuSplitView();
  long long v42 = *(_OWORD *)(a1 + 16);
  LOBYTE(v43) = *(unsigned char *)(a1 + 32);
  sub_10000F214(&qword_100519660);
  uint64_t v25 = Binding.wrappedValue.getter();
  if (v49 == 1)
  {
    (*(void (**)(uint64_t))(a1 + 88))(v25);
    uint64_t v26 = v38;
    sub_100224E4C(v18, a5, v38);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v15 + 8);
    v27(v18, a5);
    sub_100224E4C(v21, a5, v26);
    sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
    sub_100059D38((uint64_t)v18, a5);
    v27(v18, a5);
    v27(v21, a5);
  }
  else
  {
    sub_10000F214(&qword_10051ADA8);
    sub_1000623EC();
    Button.init(action:label:)();
    sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
    uint64_t v26 = v38;
    sub_100059E9C((uint64_t)v14, a5, v12);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  }
  uint64_t v28 = sub_100013AA8(&qword_10051AC78, &qword_10051AC68);
  uint64_t v40 = v26;
  uint64_t v41 = v28;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100224E4C(v24, v22, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v24, v22);
}

uint64_t sub_1000614A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SafeAreaPaddingModifier();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v6 = v17;
  char v7 = v18;
  uint64_t v8 = v19;
  char v9 = v20;
  uint64_t v10 = v21;
  uint64_t v16 = v22;
  uint64_t v11 = static Color.clear.getter();
  static Edge.Set.all.getter();
  long long v23 = 0u;
  long long v24 = 0u;
  char v25 = 1;
  SafeAreaPaddingModifier.init(edges:insets:)();
  uint64_t v12 = sub_10000F214(&qword_10051ADA8);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1 + *(int *)(v12 + 36), v5, v2);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  uint64_t v13 = v16;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v11;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unsigned char *sub_10006162C(unsigned char *result, uint64_t a2)
{
  if (*result == 1)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    sub_100062328((uint64_t)&v2);
    swift_retain();
    sub_10000F214(&qword_100519660);
    Binding.wrappedValue.getter();
    Binding.wrappedValue.setter();
    sub_100062354((uint64_t)&v2);
    return (unsigned char *)swift_release();
  }
  return result;
}

uint64_t sub_1000616E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005C5B4(a1, a2);
}

uint64_t sub_100061730()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005CE18);
}

uint64_t sub_100061748()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005D630);
}

uint64_t sub_100061760()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005E63C);
}

uint64_t sub_100061778()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005E97C);
}

unint64_t sub_100061790()
{
  unint64_t result = qword_10051AC88;
  if (!qword_10051AC88)
  {
    sub_10000F69C(&qword_10051AC50);
    sub_100013AA8(&qword_10051AC90, &qword_10051AC58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AC88);
  }
  return result;
}

uint64_t sub_100061830()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005FC08);
}

uint64_t sub_100061848()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_100060014);
}

unint64_t sub_100061860()
{
  unint64_t result = qword_10051ACB0;
  if (!qword_10051ACB0)
  {
    sub_10000F69C(&qword_10051AC60);
    sub_10006215C(&qword_10051ACB8, &qword_10051ACA8, (void (*)(void))sub_100061900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ACB0);
  }
  return result;
}

uint64_t sub_100061900()
{
  return sub_10006215C(&qword_10051ACC0, &qword_10051ACA0, (void (*)(void))sub_100061930);
}

unint64_t sub_100061930()
{
  unint64_t result = qword_10051ACC8;
  if (!qword_10051ACC8)
  {
    sub_10000F69C(&qword_10051AC98);
    sub_10000F69C(&qword_10051ACD0);
    sub_100061A10();
    swift_getOpaqueTypeConformance2();
    sub_100061E24((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ACC8);
  }
  return result;
}

unint64_t sub_100061A10()
{
  unint64_t result = qword_10051ACD8;
  if (!qword_10051ACD8)
  {
    sub_10000F69C(&qword_10051ACD0);
    sub_10000F69C(&qword_10051ACE0);
    sub_100061AF0();
    swift_getOpaqueTypeConformance2();
    sub_100061E24((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ACD8);
  }
  return result;
}

unint64_t sub_100061AF0()
{
  unint64_t result = qword_10051ACE8;
  if (!qword_10051ACE8)
  {
    sub_10000F69C(&qword_10051ACE0);
    sub_10000F69C(&qword_10051ACF0);
    sub_10000F69C(&qword_10051AC70);
    sub_10000F69C(&qword_10051ACF8);
    sub_10000F69C(&qword_10051AD00);
    sub_100061C98();
    sub_100013AA8(&qword_10051AD20, &qword_10051AD00);
    swift_getOpaqueTypeConformance2();
    sub_100013AA8(&qword_10051AC80, &qword_10051AC70);
    swift_getOpaqueTypeConformance2();
    sub_100061E24((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ACE8);
  }
  return result;
}

unint64_t sub_100061C98()
{
  unint64_t result = qword_10051AD08;
  if (!qword_10051AD08)
  {
    sub_10000F69C(&qword_10051ACF8);
    sub_100013AA8(&qword_10051AD10, &qword_10051AD18);
    sub_100061E24(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD08);
  }
  return result;
}

uint64_t sub_100061D68()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10006105C);
}

uint64_t sub_100061D84(uint64_t a1)
{
  return sub_100062284(a1, (uint64_t (*)(uint64_t, void *, void, void, void, void, void, void, void, void))sub_10006162C);
}

uint64_t sub_100061D9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100061E24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_100061E6C@<D0>(_OWORD *a1@<X8>)
{
  return sub_10005B4A0(v1[10], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], a1, v1[9]);
}

unint64_t sub_100061EA4()
{
  unint64_t result = qword_10051AD50;
  if (!qword_10051AD50)
  {
    sub_10000F69C(&qword_10051AD48);
    sub_100061F20();
    sub_100062090();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD50);
  }
  return result;
}

unint64_t sub_100061F20()
{
  unint64_t result = qword_10051AD58;
  if (!qword_10051AD58)
  {
    sub_10000F69C(&qword_10051AD60);
    sub_10006215C((unint64_t *)&qword_10051AD68, (uint64_t *)&unk_1005230D0, (void (*)(void))sub_100061FC8);
    sub_10006203C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD58);
  }
  return result;
}

unint64_t sub_100061FC8()
{
  unint64_t result = qword_10051AD70;
  if (!qword_10051AD70)
  {
    sub_10000F69C((uint64_t *)&unk_1005230E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD70);
  }
  return result;
}

unint64_t sub_10006203C()
{
  unint64_t result = qword_10051AD78;
  if (!qword_10051AD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD78);
  }
  return result;
}

unint64_t sub_100062090()
{
  unint64_t result = qword_10051AD80;
  if (!qword_10051AD80)
  {
    sub_10000F69C(&qword_10051AD88);
    sub_10006215C(&qword_10051AD90, &qword_10051AD98, (void (*)(void))sub_1000621D8);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AD80);
  }
  return result;
}

uint64_t sub_10006215C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000621D8()
{
  unint64_t result = qword_10051ADA0;
  if (!qword_10051ADA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ADA0);
  }
  return result;
}

void sub_100062230(uint64_t a1)
{
  sub_10005B7D4(a1, (uint64_t)(v1 + 10), v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_10006226C(uint64_t a1)
{
  return sub_100062284(a1, (uint64_t (*)(uint64_t, void *, void, void, void, void, void, void, void, void))sub_10005B9C0);
}

uint64_t sub_100062284(uint64_t a1, uint64_t (*a2)(uint64_t, void *, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2 + 10, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9]);
}

uint64_t sub_1000622C8()
{
  return sub_100062534((uint64_t (*)(void *, void, void, void, void, void, void, void, void))sub_10005BAA4);
}

uint64_t sub_1000622E4()
{
  return sub_100062534((uint64_t (*)(void *, void, void, void, void, void, void, void, void))sub_10005BC40);
}

uint64_t sub_1000622FC()
{
  return sub_100062380((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005BDA8);
}

uint64_t sub_100062328(uint64_t a1)
{
  return a1;
}

uint64_t sub_100062354(uint64_t a1)
{
  return a1;
}

uint64_t sub_100062380(uint64_t (*a1)(void, void, void, void, void, void, void, void, void))
{
  return a1(v1[10], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1000623C0()
{
  return sub_100062380((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005BBBC);
}

unint64_t sub_1000623EC()
{
  unint64_t result = qword_10051ADB0;
  if (!qword_10051ADB0)
  {
    sub_10000F69C(&qword_10051ADA8);
    sub_100062090();
    sub_100061E24(&qword_100519928, (void (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ADB0);
  }
  return result;
}

uint64_t sub_100062498()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005F23C);
}

uint64_t sub_1000624B4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10006251C()
{
  return sub_100062534((uint64_t (*)(void *, void, void, void, void, void, void, void, void))sub_10005FB0C);
}

uint64_t sub_100062534(uint64_t (*a1)(void *, void, void, void, void, void, void, void, void))
{
  return a1(v1 + 10, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

unint64_t sub_100062574()
{
  unint64_t result = qword_10051ADB8;
  if (!qword_10051ADB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ADB8);
  }
  return result;
}

uint64_t sub_1000625C8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100062620()
{
  return sub_100062638((uint64_t (*)(void, void, void, void, void, void, void, void, void))sub_10005C480);
}

uint64_t sub_100062638(uint64_t (*a1)(void, void, void, void, void, void, void, void, void))
{
  return a1(v1[10], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

ValueMetadata *type metadata accessor for MenuSplitViewControlLabelModifier()
{
  return &type metadata for MenuSplitViewControlLabelModifier;
}

uint64_t sub_100062688()
{
  return swift_getWitnessTable();
}

uint64_t sub_100062D70()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100062D8C()
{
  unint64_t result = qword_10051ADF8;
  if (!qword_10051ADF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051ADF8);
  }
  return result;
}

unint64_t sub_100062DE4()
{
  unint64_t result = qword_10051AE08;
  if (!qword_10051AE08)
  {
    sub_10000F69C(&qword_10051ADD8);
    sub_10006215C(&qword_10051AE10, &qword_10051ADC8, (void (*)(void))sub_100062EB0);
    sub_100013AA8(&qword_10051AE28, &qword_10051ADE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AE08);
  }
  return result;
}

unint64_t sub_100062EB0()
{
  unint64_t result = qword_10051AE18;
  if (!qword_10051AE18)
  {
    sub_10000F69C(&qword_10051ADC0);
    sub_100013AA8(&qword_10051AE20, &qword_10051ADD0);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AE18);
  }
  return result;
}

unint64_t sub_100062F74(char a1)
{
  unint64_t result = 0x6F4C6C6175736956;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6B6F6F4C7370614DLL;
      break;
    case 2:
      unint64_t result = 0x697463417370614DLL;
      break;
    case 3:
      unint64_t result = 0x65646F435251;
      break;
    case 4:
      unint64_t result = 0x4370696C43707041;
      break;
    case 5:
      unint64_t result = 0x6574654461746144;
      break;
    case 6:
      unint64_t result = 0x7A6972616D6D7553;
      break;
    case 7:
      unint64_t result = 0x756F6C4164616552;
      break;
    case 8:
      unint64_t result = 0x7261646E656C6143;
      break;
    case 9:
      unint64_t result = 0xD000000000000014;
      break;
    case 10:
      unint64_t result = 7041857;
      break;
    case 11:
      unint64_t result = 0x6165536567616D49;
      break;
    case 12:
      unint64_t result = 0x74616C736E617254;
      break;
    case 13:
      unint64_t result = 0x4E72657474756853;
      break;
    case 14:
      unint64_t result = 0x6669636570736E55;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100063188@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100063BE4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000631B8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100062F74(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000631E4(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100062F74(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100062F74(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100063270()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100062F74(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000632D4()
{
  sub_100062F74(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100063328()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100062F74(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100063388()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000633E8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100063438(char a1)
{
  unint64_t result = 0x61746E6F436E6950;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x72657474756853;
      break;
    case 2:
      unint64_t result = 0x6F436172656D6143;
      break;
    case 3:
    case 4:
      unint64_t result = 0x61426E6F69746341;
      break;
    case 5:
      unint64_t result = 0x6574616369646544;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100063544@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100063C84(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100063574@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100063438(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000635A0(unsigned __int8 *a1, char *a2)
{
  return sub_1000C3C6C(*a1, *a2);
}

Swift::Int sub_1000635AC()
{
  return sub_1000C457C();
}

uint64_t sub_1000635B8()
{
  return sub_1000C411C();
}

Swift::Int sub_1000635C0()
{
  return sub_1000C457C();
}

uint64_t sub_1000635C8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100063628()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100063678()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActionAnalytics()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ActionAnalytics.ActionType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ActionAnalytics.ActionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100063808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionAnalytics.ActionType()
{
  return &type metadata for ActionAnalytics.ActionType;
}

unint64_t sub_100063844()
{
  unint64_t result = qword_10051AEC8;
  if (!qword_10051AEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AEC8);
  }
  return result;
}

uint64_t sub_100063898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v25 = a3;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for CVDetection();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v25 - v18;
  sub_10004ECF4(v4, (uint64_t)&v26);
  uint64_t result = 1;
  switch(v30)
  {
    case 1:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
      uint64_t v21 = *(void *)(a2 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, a2) == 1)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        uint64_t result = 3;
      }
      else
      {
        (*(void (**)(uint64_t))(v25 + 32))(a2);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v10, a2);
        sub_10006426C((uint64_t)v16, (uint64_t)v19);
        sub_10006426C((uint64_t)v19, (uint64_t)v13);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 4)
        {
          sub_1000642D0((uint64_t)v13);
          uint64_t result = 4;
        }
        else if (EnumCaseMultiPayload == 3)
        {
          sub_1000642D0((uint64_t)v13);
          uint64_t result = 3;
        }
        else
        {
          sub_1000642D0((uint64_t)v13);
          uint64_t result = 14;
        }
      }
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      if (v28 | v29 | v26 | v27)
      {
        uint64_t v22 = v28 | v29 | v27;
        if (v26 != 1 || v22)
        {
          if (v26 != 2 || v22)
          {
            if (v26 != 3 || v22)
            {
              if (v22) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v26 == 4;
              }
              if (v24) {
                uint64_t result = 8;
              }
              else {
                uint64_t result = 10;
              }
            }
            else
            {
              uint64_t result = 7;
            }
          }
          else
          {
            uint64_t result = 6;
          }
        }
        else
        {
          uint64_t result = 14;
        }
      }
      else
      {
        uint64_t result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100063BE4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E4F28, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15;
  }
  else {
    return v3;
  }
}

unint64_t sub_100063C30()
{
  unint64_t result = qword_10051AED0;
  if (!qword_10051AED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AED0);
  }
  return result;
}

unint64_t sub_100063C84(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E50B0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void sub_100063CD0(char a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10031AD7C((uint64_t)_swiftEmptyArrayStorage);
  sub_100062F74(a1);
  id v3 = objc_allocWithZone((Class)NSString);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithString:v4];

  uint64_t v6 = *(void *)(v2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v6;
  *(void *)(v2 + 16) = 0x8000000000000000;
  sub_1002F4A84((uint64_t)v5, 0x6E6F69746361, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = aBlock[0];
  *(void *)(v2 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  id v9 = objc_allocWithZone((Class)NSString);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithString:v10];

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v8;
  *(void *)(v2 + 16) = 0x8000000000000000;
  sub_1002F4A84((uint64_t)v11, 0x656372756F73, 0xE600000000000000, v12);
  *(void *)(v2 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  if (qword_100517E08 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000F378(v13, (uint64_t)qword_10055E130);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_beginAccess();
    sub_100046CAC();
    swift_bridgeObjectRetain();
    uint64_t v17 = Dictionary.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    sub_1003806B0(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "ActionAnalytics: publishing %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  NSString v20 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_10006421C;
  aBlock[5] = v2;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1003C88F4;
  aBlock[3] = (uint64_t)&unk_1004E7C90;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
  swift_release();
}

uint64_t sub_1000641E4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10006421C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100064254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100064264()
{
  return swift_release();
}

uint64_t sub_10006426C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CVDetection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000642D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionAnalytics.ActionSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ActionAnalytics.ActionSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100064488);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionAnalytics.ActionSource()
{
  return &type metadata for ActionAnalytics.ActionSource;
}

unint64_t sub_1000644C4()
{
  unint64_t result = qword_10051AED8;
  if (!qword_10051AED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AED8);
  }
  return result;
}

unint64_t sub_100064518()
{
  unint64_t result = qword_10051AEE0;
  if (!qword_10051AEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051AEE0);
  }
  return result;
}

uint64_t sub_100064574()
{
  type metadata accessor for PPTHelper();
  uint64_t v0 = swift_allocObject();
  char v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC6Tamale9PPTHelper___finishLaunchTest);
  uint64_t *v1 = swift_getKeyPath();
  sub_10000F214(&qword_10051AFE0);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale9PPTHelper_armed) = 1;
  qword_10055E070 = v0;
  return result;
}

void sub_1000645F8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC6Tamale9PPTHelper_armed;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale9PPTHelper_armed) == 1)
  {
    uint64_t v17 = v7;
    sub_10002E8B0();
    uint64_t v16 = static OS_dispatch_queue.main.getter();
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_100064C1C;
    aBlock[5] = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002EDB98;
    aBlock[3] = &unk_1004E7D70;
    char v12 = _Block_copy(aBlock);
    uint64_t v15 = v0;
    uint64_t v13 = v12;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v18 = _swiftEmptyArrayStorage;
    sub_100064C3C();
    sub_10000F214(&qword_10051A960);
    sub_100056E60();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v14 = (void *)v16;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v17);
    swift_release();
    swift_release();
    *(unsigned char *)(v15 + v10) = 0;
  }
}

uint64_t sub_1000648AC()
{
  uint64_t v0 = sub_10000F214(&qword_10051AFE8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for FinishLaunchTestAction();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100064C94(result + OBJC_IVAR____TtC6Tamale9PPTHelper___finishLaunchTest, (uint64_t)v2);
    sub_10027CABC((uint64_t)v6);
    swift_release();
    sub_100064CFC((uint64_t)v2);
    FinishLaunchTestAction.callAsFunction()();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_100064A18()
{
  sub_100064CFC(v0 + OBJC_IVAR____TtC6Tamale9PPTHelper___finishLaunchTest);

  return swift_deallocClassInstance();
}

uint64_t sub_100064A7C()
{
  return type metadata accessor for PPTHelper();
}

uint64_t type metadata accessor for PPTHelper()
{
  uint64_t result = qword_10051AF20;
  if (!qword_10051AF20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100064AD0()
{
  sub_100064B68();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100064B68()
{
  if (!qword_10051AF30)
  {
    type metadata accessor for FinishLaunchTestAction();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051AF30);
    }
  }
}

uint64_t sub_100064BC0()
{
  return EnvironmentValues.finishLaunchTest.getter();
}

uint64_t sub_100064BE4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100064C1C()
{
  return sub_1000648AC();
}

uint64_t sub_100064C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100064C34()
{
  return swift_release();
}

unint64_t sub_100064C3C()
{
  unint64_t result = qword_10051FB30;
  if (!qword_10051FB30)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FB30);
  }
  return result;
}

uint64_t sub_100064C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051AFE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064CFC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051AFE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100064D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064DB0(a1, a2, a3);
}

uint64_t sub_100064D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064DB0(a1, a2, a3);
}

uint64_t sub_100064DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000FBD8(a1, &qword_10051A8C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100064F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064FA4(a1, a2, a3, (uint64_t)&unk_1004E7FC8, &qword_10051B2C8);
}

uint64_t sub_100064F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064FA4(a1, a2, a3, (uint64_t)&unk_1004E7F00, (uint64_t *)&unk_10051B200);
}

uint64_t sub_100064FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000FBD8(a1, &qword_10051A8C0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  sub_10000F214(a5);
  return swift_task_create();
}

uint64_t sub_100065154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100064FA4(a1, a2, a3, (uint64_t)&unk_1004E7FA0, &qword_10051B2B0);
}

uint64_t sub_10006517C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000683BC((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_100065224()
{
  return swift_release();
}

uint64_t sub_10006534C(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = sub_100067834(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)((char *)v2 + qword_10055E088) - 8) + 8))(a1);
  return v5;
}

uint64_t sub_10006545C()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(sub_1000654F0, v2, v1);
}

uint64_t sub_1000654F0()
{
  if (qword_100517EC0 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10055E358;
  *(void *)(v0 + 40) = qword_10055E358;
  return _swift_task_switch(sub_100065588, v1, 0);
}

uint64_t sub_100065588()
{
  sub_1000F3094();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  return _swift_task_switch(sub_1000655EC, v1, v2);
}

uint64_t sub_1000655EC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10006570C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC6Tamale13SceneDelegate_window] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions];
  type metadata accessor for LaunchOptions();
  *(unsigned char *)(swift_allocObject() + 16) = 0;
  uint64_t v3 = v0;
  ObservationRegistrar.init()();
  State.init(wrappedValue:)();
  uint64_t v4 = v16;
  *(void *)uint64_t v2 = v15;
  *((void *)v2 + 1) = v4;
  uint64_t v5 = &v3[OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder];
  type metadata accessor for SiriRequestStateResponder();
  *(unsigned char *)(swift_allocObject() + 16) = 2;
  ObservationRegistrar.init()();
  State.init(wrappedValue:)();
  uint64_t v6 = v16;
  *(void *)uint64_t v5 = v15;
  *((void *)v5 + 1) = v6;
  uint64_t v7 = &v3[OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics];
  uint64_t v8 = sub_100331718((uint64_t)&off_1004E5178);
  type metadata accessor for SessionAnalytics();
  swift_allocObject();
  uint64_t v14 = sub_1003C9800(v8);
  State.init(wrappedValue:)();
  uint64_t v9 = v16;
  *(void *)uint64_t v7 = v15;
  *((void *)v7 + 1) = v9;
  uint64_t v10 = &v3[OBJC_IVAR____TtC6Tamale13SceneDelegate_timeOfLastBackground];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(void *)&v3[OBJC_IVAR____TtC6Tamale13SceneDelegate_contextRetentionWindow] = 0x403E000000000000;

  v13.receiver = v3;
  v13.super_class = ObjectType;
  return [super init];
}

uint64_t sub_1000659B8()
{
  return type metadata accessor for SceneDelegate();
}

uint64_t type metadata accessor for SceneDelegate()
{
  uint64_t result = qword_10051B0F8;
  if (!qword_10051B0F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100065A0C()
{
  sub_100065AC0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100065AC0()
{
  if (!qword_10051B108)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051B108);
    }
  }
}

uint64_t type metadata accessor for SecureWindow()
{
  return self;
}

uint64_t sub_100065CB8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100065CFC()
{
  return 1;
}

uint64_t sub_100065D04()
{
  return 1;
}

void *sub_100065D0C(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100065D50(a1, a2);
}

void *sub_100065D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_10055E088);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = __chkstk_darwin(a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v12 - v7, v6);
  uint64_t v8 = (void *)UIHostingController.init(coder:rootView:)();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v10 = v8;
  v9(a2, v4);
  if (v8) {

  }
  return v8;
}

id sub_100065E88(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  [super initWithCoder:a1];

  return v3;
}

id sub_100065EDC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100065E88(a3);
}

uint64_t type metadata accessor for SecureHostingController()
{
  return sub_1000684BC();
}

uint64_t sub_100065F1C()
{
  return sub_100065F94("### siriWillPresentResults received", (uint64_t)&unk_1004E7EB0, (uint64_t)&unk_10051B1E0);
}

uint64_t sub_100065F44()
{
  return sub_100065F94("### siriWillProcessRequest received", (uint64_t)&unk_1004E7E60, (uint64_t)&unk_10051B1C8);
}

uint64_t sub_100065F6C()
{
  return sub_100065F94("### siriDidDeactivate received", (uint64_t)&unk_1004E7ED8, (uint64_t)&unk_10051B1E8);
}

uint64_t sub_100065F94(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  uint64_t v7 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000F378(v10, (uint64_t)qword_10055E2E0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    objc_super v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a1, v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = *(void *)(v6 + OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder + 8);
  v20[1] = *(void *)(v6 + OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder);
  v20[2] = v14;
  sub_10000F214(&qword_10051B1C0);
  State.wrappedValue.getter();
  uint64_t v15 = v20[3];
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v17 = static MainActor.shared.getter();
  unint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v17;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = v15;
  sub_100064DB0((uint64_t)v9, a3, (uint64_t)v18);
  swift_release();
  return swift_release();
}

void sub_1000661D0()
{
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000F378(v0, (uint64_t)qword_10055E2E0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "### siriDidActivate was deprecated", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000662B8()
{
  return sub_100065F94("### siriDidDeactivate received", (uint64_t)&unk_1004E7ED8, (uint64_t)&unk_10051B1E8);
}

uint64_t sub_100066300()
{
  return sub_100065F94("### siriWillPresentResults received", (uint64_t)&unk_1004E7EB0, (uint64_t)&unk_10051B1E0);
}

uint64_t sub_100066348()
{
  return sub_100065F94("### siriWillProcessRequest received", (uint64_t)&unk_1004E7E60, (uint64_t)&unk_10051B1C8);
}

uint64_t sub_100066394(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_10037FAA4(a1, v4, v5, v6);
}

uint64_t sub_100066448(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  unsigned char *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100066458(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100066534;
  return v6(a1);
}

uint64_t sub_100066534()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  os_log_type_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100066630(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_10037F6D4(a1, v4, v5, v6);
}

uint64_t sub_1000666E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_10037FEF4(a1, v4, v5, v6);
}

uint64_t sub_10006679C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_10006687C;
  return v5(v2 + 32);
}

uint64_t sub_10006687C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_DWORD **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  _DWORD *v2 = *(_DWORD *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100066990(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = sub_10006865C;
  return v5(v2 + 16);
}

uint64_t sub_100066A70(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_100066B50;
  return v5(v2 + 32);
}

uint64_t sub_100066B50()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  unsigned char *v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100066C64()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100066C9C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10051B1F0 + dword_10051B1F0);
  return v6(a1, v4);
}

uint64_t sub_100066D54(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = sub_100066E34;
  return v5(v2 + 16);
}

uint64_t sub_100066E34()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  void *v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100066F64(void *a1)
{
  uint64_t v72 = a1;
  uint64_t v2 = type metadata accessor for ContentView();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051B240);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051B248);
  uint64_t v63 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000F214(&qword_10051B250);
  uint64_t v12 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051B258);
  uint64_t v69 = *(void *)(v14 - 8);
  uint64_t v70 = v14;
  __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051B260);
  uint64_t v67 = *(void *)(v16 - 8);
  uint64_t v68 = v16;
  __chkstk_darwin(v16);
  uint64_t v64 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10051B268);
  __chkstk_darwin(v18 - 8);
  uint64_t v59 = (uint64_t)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v58 = (uint64_t)&v57 - v21;
  __chkstk_darwin(v22);
  uint64_t v71 = (char *)&v57 - v23;
  uint64_t v62 = (uint64_t *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics);
  uint64_t v24 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics + 8);
  uint64_t v73 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics);
  uint64_t v74 = v24;
  uint64_t v61 = sub_10000F214(&qword_10051B218);
  State.wrappedValue.getter();
  sub_1003C991C();
  uint64_t result = swift_release();
  if (qword_100517FD8 != -1) {
    uint64_t result = swift_once();
  }
  if (byte_10055E430 == 1)
  {
    sub_100227934((uint64_t)v4);
    uint64_t v26 = sub_1000683BC(&qword_10051B270, (void (*)(uint64_t))type metadata accessor for ContentView);
    uint64_t v57 = v12;
    uint64_t v27 = v26;
    View.statusBar(hidden:)();
    sub_100068360((uint64_t)v4);
    uint64_t v73 = v2;
    uint64_t v74 = v27;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    View.allowsSecureDrawing()();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v29 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions + 8);
    uint64_t v73 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions);
    uint64_t v74 = v29;
    sub_10000F214((uint64_t *)&unk_10051B220);
    State.wrappedValue.getter();
    uint64_t v30 = type metadata accessor for LaunchOptions();
    uint64_t v73 = v5;
    uint64_t v74 = OpaqueTypeConformance2;
    uint64_t v31 = swift_getOpaqueTypeConformance2();
    uint64_t v32 = sub_1000683BC((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
    long long v33 = v60;
    View.environment<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v11, v9);
    uint64_t v63 = v1;
    uint64_t v34 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder + 8);
    uint64_t v73 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder);
    uint64_t v74 = v34;
    sub_10000F214(&qword_10051B1C0);
    State.wrappedValue.getter();
    uint64_t v35 = type metadata accessor for SiriRequestStateResponder();
    uint64_t v73 = v9;
    uint64_t v74 = v30;
    uint64_t v75 = v31;
    uint64_t v76 = v32;
    uint64_t v36 = swift_getOpaqueTypeConformance2();
    uint64_t v37 = sub_1000683BC((unint64_t *)&qword_10051B278, (void (*)(uint64_t))type metadata accessor for SiriRequestStateResponder);
    uint64_t v39 = v65;
    uint64_t v38 = v66;
    View.environment<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v39);
    uint64_t v40 = v62[1];
    uint64_t v73 = *v62;
    uint64_t v74 = v40;
    State.wrappedValue.getter();
    type metadata accessor for SessionAnalytics();
    uint64_t v73 = v39;
    uint64_t v74 = v35;
    uint64_t v75 = v36;
    uint64_t v76 = v37;
    swift_getOpaqueTypeConformance2();
    sub_1000683BC(&qword_10051B280, (void (*)(uint64_t))type metadata accessor for SessionAnalytics);
    uint64_t v41 = v64;
    uint64_t v42 = v70;
    View.environment<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v38, v42);
    uint64_t v44 = v67;
    uint64_t v43 = v68;
    uint64_t v45 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v71, v41, v68);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v43);
    self;
    uint64_t v46 = v72;
    uint64_t v47 = swift_dynamicCastObjCClass();
    if (v47)
    {
      uint64_t v48 = v47;
      id v49 = objc_allocWithZone((Class)type metadata accessor for SecureWindow());
      id v50 = v46;
      id v51 = [v49 initWithWindowScene:v48];
      uint64_t v52 = v58;
      sub_10000FB74(v45, v58, &qword_10051B268);
      objc_allocWithZone((Class)sub_10000F214(&qword_10051B288));
      sub_10000FB74(v52, v59, &qword_10051B268);
      id v53 = v51;
      uint64_t v54 = (void *)UIHostingController.init(rootView:)();
      sub_10000FBD8(v52, &qword_10051B268);
      [v53 setRootViewController:v54];

      uint64_t v55 = *(void **)(v63 + OBJC_IVAR____TtC6Tamale13SceneDelegate_window);
      *(void *)(v63 + OBJC_IVAR____TtC6Tamale13SceneDelegate_window) = v53;
      id v56 = v53;

      [v56 makeKeyAndVisible];
    }
    return sub_10000FBD8(v45, &qword_10051B268);
  }
  return result;
}

uint64_t sub_100067834(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return UIHostingController.init(rootView:)();
}

uint64_t sub_10006791C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v31 - v13;
  uint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics + 8);
  uint64_t v36 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics);
  uint64_t v37 = v15;
  sub_10000F214(&qword_10051B218);
  State.wrappedValue.getter();
  sub_1003C991C();
  swift_release();
  uint64_t v16 = v0 + OBJC_IVAR____TtC6Tamale13SceneDelegate_timeOfLastBackground;
  swift_beginAccess();
  sub_10000FB74(v16, (uint64_t)v7, &qword_10051A2D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000FBD8((uint64_t)v7, &qword_10051A2D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    double v18 = v17;
    uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v11, v8);
    if (v18 > 30.0)
    {
      uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions + 8);
      uint64_t v33 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions);
      uint64_t v34 = v20;
      sub_10000F214((uint64_t *)&unk_10051B220);
      State.wrappedValue.getter();
      uint64_t v21 = v35;
      uint64_t KeyPath = swift_getKeyPath();
      v31[1] = v31;
      __chkstk_darwin(KeyPath);
      uint64_t v32 = v4;
      v31[-2] = v21;
      LOBYTE(v31[-1]) = 1;
      uint64_t v33 = v21;
      sub_1000683BC((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      uint64_t v23 = type metadata accessor for TaskPriority();
      uint64_t v24 = (uint64_t)v32;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v32, 1, 1, v23);
      type metadata accessor for MainActor();
      uint64_t v25 = static MainActor.shared.getter();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = &protocol witness table for MainActor;
      sub_100064DB0(v24, (uint64_t)&unk_10051B238, v26);
      swift_release();
    }
    v19(v14, v8);
  }
  uint64_t result = MKBGetDeviceLockState();
  if (result)
  {
    if (result != 3)
    {
      uint64_t v28 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions + 8);
      uint64_t v33 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions);
      uint64_t v34 = v28;
      sub_10000F214((uint64_t *)&unk_10051B220);
      State.wrappedValue.getter();
      uint64_t v29 = v35;
      uint64_t v30 = swift_getKeyPath();
      __chkstk_darwin(v30);
      v31[-2] = v29;
      LOBYTE(v31[-1]) = 1;
      uint64_t v33 = v29;
      sub_1000683BC((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100067E8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A2D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder + 8);
  uint64_t v22 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale13SceneDelegate__siriRequestStateResponder);
  uint64_t v23 = v8;
  sub_10000F214(&qword_10051B1C0);
  State.wrappedValue.getter();
  uint64_t v9 = v24;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v11 = static MainActor.shared.getter();
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v11;
  v12[3] = &protocol witness table for MainActor;
  _DWORD v12[4] = v9;
  sub_100064DB0((uint64_t)v7, (uint64_t)&unk_10051B210, (uint64_t)v12);
  swift_release();
  swift_release();
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics + 8);
  uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__sessionAnalytics);
  uint64_t v23 = v13;
  sub_10000F214(&qword_10051B218);
  State.wrappedValue.getter();
  sub_1003CBA2C();
  swift_release();
  static Date.now.getter();
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 0, 1, v14);
  uint64_t v15 = v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate_timeOfLastBackground;
  swift_beginAccess();
  sub_1000681EC((uint64_t)v4, v15);
  swift_endAccess();
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions + 8);
  uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC6Tamale13SceneDelegate__launchOptions);
  uint64_t v23 = v16;
  sub_10000F214((uint64_t *)&unk_10051B220);
  State.wrappedValue.getter();
  uint64_t v17 = v24;
  swift_getKeyPath();
  uint64_t v20 = v17;
  char v21 = 0;
  uint64_t v22 = v17;
  sub_1000683BC((unint64_t *)&qword_100519238, (void (*)(uint64_t))type metadata accessor for LaunchOptions);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1000681EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006825C()
{
  return sub_10001B8D8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10006827C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1000682B4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10000F878;
  return sub_10006545C();
}

uint64_t sub_100068360(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContentView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000683BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100068404(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10051B290 + dword_10051B290);
  return v6(a1, v4);
}

uint64_t sub_1000684BC()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000684EC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10051B2A0 + dword_10051B2A0);
  return v6(a1, v4);
}

uint64_t sub_1000685A4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000FC9C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10051B2B8 + dword_10051B2B8);
  return v6(a1, v4);
}

uint64_t sub_100068670()
{
  return sub_10006825C();
}

id sub_1000686CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EmptySceneDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for EmptySceneDelegate()
{
  return self;
}

id sub_10006877C()
{
  return sub_1000688BC(type metadata accessor for TamaleApp);
}

uint64_t type metadata accessor for TamaleApp()
{
  return self;
}

id sub_100068860(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return [super init];
}

id sub_1000688A4()
{
  return sub_1000688BC(type metadata accessor for TamaleAppDelegate);
}

id sub_1000688BC(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  [super dealloc];
}

uint64_t type metadata accessor for TamaleAppDelegate()
{
  return self;
}

id sub_100068918(void *a1)
{
  objc_super v2 = &selRef_headingAvailable;
  id v3 = [a1 role];
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000F378(v4, (uint64_t)qword_10055E2E0);
  id v5 = v3;
  id v6 = a1;
  id v7 = v5;
  id v8 = v6;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1003806B0(v12, v13, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    id v14 = [v8 persistentIdentifier];
    id v15 = v7;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    uint64_t v19 = v16;
    id v7 = v15;
    objc_super v2 = &selRef_headingAvailable;
    sub_1003806B0(v19, v18, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Connecting new scene session. role=%s; id=%s",
      (uint8_t *)v11,
      0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v20 = [v8 v2[17]];
  id v21 = objc_allocWithZone((Class)UISceneConfiguration);
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 initWithName:v22 sessionRole:v20];

  id v24 = [self processInfo];
  id v25 = [v24 environment];

  uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v26 + 16) && (unint64_t v27 = sub_10032AC58(0xD000000000000017, 0x80000001004259C0), (v28 & 1) != 0))
  {
    uint64_t v29 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v27);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v31 == 1702195828 && v30 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      type metadata accessor for SceneDelegate();
      goto LABEL_19;
    }
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_18;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;
  if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v36) {
    goto LABEL_18;
  }
  type metadata accessor for EmptySceneDelegate();
LABEL_19:
  [v23 setDelegateClass:swift_getObjCClassFromMetadata()];

  return v23;
}

ValueMetadata *type metadata accessor for MapsResultsClassifier()
{
  return &type metadata for MapsResultsClassifier;
}

id sub_100068DA0()
{
  id result = [objc_allocWithZone((Class)_MKLocationShifter) init];
  qword_10051B410 = (uint64_t)result;
  return result;
}

uint64_t sub_100068DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[57] = a2;
  v3[58] = a3;
  v3[56] = a1;
  type metadata accessor for CVDetection();
  v3[59] = swift_task_alloc();
  type metadata accessor for CVTrackSnapshot(0);
  v3[60] = swift_task_alloc();
  v3[61] = type metadata accessor for CVBundle.BundleType(0);
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  v3[64] = swift_task_alloc();
  v3[65] = swift_task_alloc();
  v3[66] = swift_task_alloc();
  v3[67] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[68] = v4;
  v3[69] = *(void *)(v4 - 8);
  v3[70] = swift_task_alloc();
  v3[71] = swift_task_alloc();
  v3[72] = swift_task_alloc();
  v3[73] = swift_task_alloc();
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  v3[76] = swift_task_alloc();
  v3[77] = swift_task_alloc();
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  v3[80] = swift_task_alloc();
  v3[81] = swift_task_alloc();
  type metadata accessor for CVBundle(0);
  v3[82] = swift_task_alloc();
  v3[83] = swift_task_alloc();
  v3[84] = swift_task_alloc();
  v3[85] = swift_task_alloc();
  v3[86] = swift_task_alloc();
  v3[87] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v3[88] = swift_task_alloc();
  v3[89] = type metadata accessor for BundleClassification.ClassificationType(0);
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  v3[92] = swift_task_alloc();
  v3[93] = swift_task_alloc();
  return _swift_task_switch(sub_1000690DC, 0, 0);
}

uint64_t sub_1000690DC()
{
  uint64_t v1 = sub_10006D1A0(*(void *)(v0 + 456));
  *(void *)(v0 + 752) = v1;
  *(unsigned char *)(v0 + 249) = v2;
  if (v1 == 1)
  {
    sub_100022E84();
    swift_allocError();
    void *v3 = 0xD000000000000014;
    v3[1] = 0x8000000100425A10;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000693DC;
    return _swift_task_switch(sub_10006DF98, 0, 0);
  }
}

uint64_t sub_1000693DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 768) = a1;
  *(void *)(v5 + 776) = a2;
  *(void *)(v5 + 784) = a3;
  *(unsigned char *)(v5 + 250) = a4;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000694E8, 0, 0);
}

uint64_t sub_1000694E8()
{
  if (*(unsigned __int8 *)(v0 + 250) != 255)
  {
    sub_10006F048(*(void *)(v0 + 464), *(void *)(v0 + 744), type metadata accessor for BundleClassification.ClassificationType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    char v2 = *(void **)(v0 + 744);
    if (EnumCaseMultiPayload)
    {
      sub_10006F170((uint64_t)v2, type metadata accessor for BundleClassification.ClassificationType);
      id v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      id v3 = (void *)*v2;
    }
    *(void *)(v0 + 792) = v3;
    if (qword_100517EC0 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void *)(v0 + 784);
    id v14 = *(void **)(v0 + 776);
    id v15 = *(void **)(v0 + 768);
    uint64_t v16 = *(void *)(v0 + 704);
    uint64_t v17 = qword_10055E358;
    unsigned __int8 v18 = *(unsigned char *)(v0 + 250);
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v16, 1, 1, v19);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v15;
    *(void *)(v20 + 48) = v14;
    *(void *)(v20 + 56) = v13;
    *(unsigned char *)(v20 + 64) = v18;
    *(void *)(v20 + 72) = 0x4061800000000000;
    swift_retain();
    sub_10006EF80(v15, v14, v13, v18);
    sub_100064D5C(v16, (uint64_t)&unk_10051B430, v20);
    swift_release();
    if (qword_100517F38 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for LoggingSignposter(0);
    sub_10000F378(v21, (uint64_t)qword_10055E3C8);
    sub_10018B270((unint64_t)"MapsResultsClassifier.rank", 26, 2u, 1, (uint64_t *)(v0 + 80));
    NSString v22 = sub_10019DD30();
    *(void *)(v0 + 800) = v22;
    id v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v23;
    *id v23 = v0;
    v23[1] = sub_100069B74;
    uint64_t v24 = *(void *)(v0 + 784);
    uint64_t v25 = *(void *)(v0 + 776);
    uint64_t v26 = *(void *)(v0 + 768);
    uint64_t v27 = *(void *)(v0 + 752);
    char v28 = *(unsigned char *)(v0 + 250);
    char v29 = *(unsigned char *)(v0 + 249);
    return sub_1000FA1C0(v27, v29, (uint64_t)v22, v26, v25, v24, v28, 140.0);
  }
  sub_10006EE34(*(void *)(v0 + 752));
  if (qword_100517E68 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000F378(v4, (uint64_t)qword_10055E250);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No location available for MapsResultsClassifier. Requesting location access…", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 456);

  uint64_t v9 = sub_10006D1A0(v8);
  if (v9 != 1)
  {
    uint64_t v10 = v9;
    sub_10031B7B8((uint64_t)_swiftEmptyArrayStorage);
    if (v10)
    {
      sub_10006EE34(v10);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 832) = type metadata accessor for MainActor();
      *(void *)(v0 + 840) = static MainActor.shared.getter();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      return _swift_task_switch(sub_10006C3E4, v12, v11);
    }
    swift_bridgeObjectRelease();
  }
  sub_100022E84();
  swift_allocError();
  *uint64_t v30 = 0x7461636F6C206F4ELL;
  v30[1] = 0xEB000000006E6F69;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100069B74(uint64_t a1)
{
  id v3 = (void *)*v2;
  v3[102] = a1;
  v3[103] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v4 = v3[94];
    swift_bridgeObjectRelease();
    sub_10006EE34(v4);
    uint64_t v5 = sub_10006C8E4;
  }
  else
  {
    uint64_t v5 = sub_100069CD0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100069CD0()
{
  uint64_t v298 = v0;
  uint64_t v1 = v0 + 80;
  uint64_t v2 = *(void *)(v0 + 816);
  sub_10000F3B0((void *)(v0 + 80), *(void *)(v0 + 104));
  sub_10018BBE8();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v0 + 792);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    if (v15)
    {
      if (qword_100517E50 != -1) {
        swift_once();
      }
      uint64_t v16 = *(void *)(v0 + 656);
      uint64_t v17 = *(void *)(v0 + 456);
      uint64_t v18 = type metadata accessor for Logger();
      sub_10000F378(v18, (uint64_t)qword_10055E208);
      sub_10006F048(v17, v16, type metadata accessor for CVBundle);
      swift_bridgeObjectRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v19, v20))
      {
        os_log_type_t v288 = v20;
        v296 = v19;
        uint64_t v21 = *(void *)(v0 + 656);
        uint64_t v22 = *(void *)(v0 + 496);
        uint64_t v23 = swift_slowAlloc();
        v297[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        sub_10006F048(v21, v22, type metadata accessor for CVBundle.BundleType);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v25 = *(void *)(v0 + 560);
        uint64_t v26 = *(void *)(v0 + 552);
        uint64_t v27 = *(void *)(v0 + 544);
        uint64_t v28 = *(void *)(v0 + 496);
        if (EnumCaseMultiPayload == 1)
        {
          char v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
          v29(v25, v28, v27);
        }
        else
        {
          uint64_t v81 = *(void *)(v0 + 480);
          sub_10006F0C0(v28, v81, type metadata accessor for CVTrackSnapshot);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v81, v27);
          sub_10006F170(v81, type metadata accessor for CVTrackSnapshot);
          char v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
        }
        uint64_t v82 = *(void *)(v0 + 752);
        id v270 = *(id *)(v0 + 656);
        uint64_t v83 = *(void *)(v0 + 568);
        uint64_t v84 = *(void *)(v0 + 552);
        uint64_t v85 = *(void *)(v0 + 544);
        char v86 = *(unsigned char *)(v0 + 249);
        v29(v83, *(void *)(v0 + 560), v85);
        sub_10006F128(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v89 = v88;
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
        *(void *)(v0 + 424) = sub_1003806B0(v87, v89, v297);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006F170((uint64_t)v270, type metadata accessor for CVBundle);
        *(_WORD *)(v23 + 12) = 2080;
        *(void *)(v0 + 272) = v82;
        *(unsigned char *)(v0 + 280) = v86;
        swift_bridgeObjectRetain();
        uint64_t v90 = String.init<A>(describing:)();
        *(void *)(v0 + 440) = sub_1003806B0(v90, v91, v297);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006EE34(v82);
        sub_10006EE34(v82);
        _os_log_impl((void *)&_mh_execute_header, v296, v288, "[%s / %s] classified with zero results", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v1 = v0 + 80;
      }
      else
      {
        uint64_t v79 = *(void *)(v0 + 752);
        sub_10006F170(*(void *)(v0 + 656), type metadata accessor for CVBundle);
        sub_10006EE34(v79);
        sub_10006EE34(v79);
      }
    }
    else
    {
      sub_10006EE34(*(void *)(v0 + 752));
    }
    sub_100022E84();
    swift_allocError();
    strcpy(v92, "Zero results");
    v92[13] = 0;
    *((_WORD *)v92 + 7) = -5120;
    swift_willThrow();
    goto LABEL_51;
  }
  uint64_t v5 = sub_10006DCFC(*(void *)(v0 + 816));
  swift_bridgeObjectRelease();
  uint64_t v6 = 3;
  if (v5[2] < 3uLL) {
    uint64_t v6 = v5[2];
  }
  int64_t v7 = *(void *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    if (v7)
    {
      if (qword_100517E50 != -1) {
        swift_once();
      }
      uint64_t v30 = *(void *)(v0 + 664);
      uint64_t v31 = *(void *)(v0 + 456);
      uint64_t v32 = type metadata accessor for Logger();
      sub_10000F378(v32, (uint64_t)qword_10055E208);
      sub_10006F048(v31, v30, type metadata accessor for CVBundle);
      swift_bridgeObjectRetain();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        os_log_type_t v284 = v34;
        v289 = v33;
        uint64_t v35 = *(void *)(v0 + 664);
        uint64_t v36 = *(void *)(v0 + 504);
        uint64_t v37 = swift_slowAlloc();
        v297[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315394;
        sub_10006F048(v35, v36, type metadata accessor for CVBundle.BundleType);
        int v38 = swift_getEnumCaseMultiPayload();
        uint64_t v39 = *(void *)(v0 + 576);
        uint64_t v40 = *(void *)(v0 + 552);
        uint64_t v41 = *(void *)(v0 + 544);
        uint64_t v42 = *(void *)(v0 + 504);
        if (v38 == 1)
        {
          uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
          v43(v39, v42, v41);
        }
        else
        {
          uint64_t v93 = *(void *)(v0 + 480);
          sub_10006F0C0(v42, v93, type metadata accessor for CVTrackSnapshot);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v93, v41);
          sub_10006F170(v93, type metadata accessor for CVTrackSnapshot);
          uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
        }
        uint64_t v94 = *(void *)(v0 + 752);
        uint64_t v95 = *(void *)(v0 + 584);
        uint64_t v96 = *(void *)(v0 + 552);
        uint64_t v97 = *(void *)(v0 + 544);
        uint64_t v264 = *(void *)(v0 + 664);
        char v98 = *(unsigned char *)(v0 + 249);
        v43(v95, *(void *)(v0 + 576), v97);
        sub_10006F128(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v101 = v100;
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
        *(void *)(v0 + 400) = sub_1003806B0(v99, v101, v297);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006F170(v264, type metadata accessor for CVBundle);
        *(_WORD *)(v37 + 12) = 2080;
        *(void *)(v0 + 240) = v94;
        *(unsigned char *)(v0 + 248) = v98;
        swift_bridgeObjectRetain();
        uint64_t v102 = String.init<A>(describing:)();
        *(void *)(v0 + 416) = sub_1003806B0(v102, v103, v297);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006EE34(v94);
        sub_10006EE34(v94);
        _os_log_impl((void *)&_mh_execute_header, v289, v284, "[%s / %s] classified with zero results", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v1 = v0 + 80;
      }
      else
      {
        uint64_t v80 = *(void *)(v0 + 752);
        sub_10006F170(*(void *)(v0 + 664), type metadata accessor for CVBundle);
        sub_10006EE34(v80);
        sub_10006EE34(v80);
      }
    }
    else
    {
      sub_10006EE34(*(void *)(v0 + 752));
    }
    sub_100022E84();
    swift_allocError();
    *uint64_t v104 = 0xD000000000000015;
    v104[1] = 0x8000000100425A50;
    swift_willThrow();
    swift_bridgeObjectRelease();
LABEL_51:
    uint64_t v105 = *(void *)(v0 + 784);
    uint64_t v106 = *(void **)(v0 + 776);
    uint64_t v107 = *(void **)(v0 + 768);
    unsigned __int8 v108 = *(unsigned char *)(v0 + 250);
    _s6Tamale17AnyLocalizedErrorVwxx_0(v1);
    swift_willThrow();
    sub_10006EF94(v107, v106, v105, v108);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v109 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_84;
  }
  uint64_t v256 = (uint64_t *)(v0 + 160);
  uint64_t v258 = (uint64_t)(v5 + 4);
  unint64_t v292 = v6;
  unint64_t v260 = (2 * v6) | 1;
  uint64_t v287 = *(void *)(v4 + 16);
  uint64_t v295 = (uint64_t)v5;
  if (v7)
  {
    uint64_t v8 = *(void *)(v0 + 792);
    v297[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000409F4(0, v7, 0);
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v10 = (id *)(v8 + 32);
    int64_t v11 = v7;
    do
    {
      id v12 = [*v10 muid];
      v297[0] = (uint64_t)v9;
      unint64_t v14 = v9[2];
      unint64_t v13 = v9[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000409F4(v13 > 1, v14 + 1, 1);
        uint64_t v9 = (void *)v297[0];
      }
      void v9[2] = v14 + 1;
      v9[v14 + 4] = v12;
      v10 += 8;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v5 = (void *)v295;
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v262 = (void **)(v0 + 16);
  v297[0] = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v44 = v292;
  sub_1000409F4(0, v292, 0);
  uint64_t v45 = 4;
  uint64_t v46 = _swiftEmptyArrayStorage;
  do
  {
    id v47 = [(id)v5[v45] muid];
    v297[0] = (uint64_t)v46;
    unint64_t v49 = v46[2];
    unint64_t v48 = v46[3];
    if (v49 >= v48 >> 1)
    {
      sub_1000409F4(v48 > 1, v49 + 1, 1);
      uint64_t v46 = (void *)v297[0];
    }
    v46[2] = v49 + 1;
    v46[v49 + 4] = v47;
    v45 += 8;
    --v44;
    uint64_t v5 = (void *)v295;
  }
  while (v44);
  BOOL v50 = sub_1003E3610(v9, v46);
  swift_release();
  swift_bridgeObjectRelease();
  if (!v50)
  {
    if (v292 >= 2)
    {
      uint64_t v63 = *(_OWORD **)(v0 + 792);
      if (*(void *)(v4 + 16))
      {
        long long v64 = v63[5];
        long long v66 = v63[2];
        long long v65 = v63[3];
        uint64_t v67 = (void **)(v0 + 16);
        *(_OWORD *)(v0 + 48) = v63[4];
        *(_OWORD *)(v0 + 64) = v64;
        *(_OWORD *)uint64_t v262 = v66;
        *(_OWORD *)(v0 + 32) = v65;
        uint64_t v68 = *v262;
        uint64_t v69 = *(void **)(v295 + 32);
        double v70 = *(double *)(v295 + 56);
        sub_10006EFB8(v262);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v269 = v69;
        swift_bridgeObjectRetain();
        uint64_t v71 = *(void *)(v295 + 88);
        uint64_t v254 = *(void *)(v295 + 72);
        uint64_t v255 = *(void *)(v295 + 80);
        double v72 = *(double *)(v295 + 56);
        uint64_t v73 = *(void **)(v295 + 32);
        uint64_t v74 = *(void **)(v295 + 48);
        uint64_t v252 = *(void *)(v295 + 40);
        uint64_t v253 = *(void *)(v295 + 64);
        swift_bridgeObjectRetain();
        id v75 = v73;
        uint64_t v76 = v74;
        id v77 = v75;
        swift_bridgeObjectRetain();
        id v78 = [v77 muid];
        if (v78 == [v68 muid]) {
          goto LABEL_55;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v71 = *(void *)(v295 + 152);
        uint64_t v254 = *(void *)(v295 + 136);
        uint64_t v255 = *(void *)(v295 + 144);
        double v72 = *(double *)(v295 + 120);
        uint64_t v110 = *(void **)(v295 + 96);
        uint64_t v111 = *(void **)(v295 + 112);
        uint64_t v252 = *(void *)(v295 + 104);
        uint64_t v253 = *(void *)(v295 + 128);
        swift_bridgeObjectRetain();
        id v112 = v110;
        uint64_t v76 = v111;
        id v77 = v112;
        swift_bridgeObjectRetain();
        id v113 = [v77 muid];
        if (v113 == [v68 muid]) {
          goto LABEL_55;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v292 != 2)
        {
          uint64_t v71 = *(void *)(v295 + 216);
          uint64_t v254 = *(void *)(v295 + 200);
          uint64_t v255 = *(void *)(v295 + 208);
          double v72 = *(double *)(v295 + 184);
          uint64_t v114 = *(void **)(v295 + 160);
          uint64_t v115 = *(void **)(v295 + 176);
          uint64_t v252 = *(void *)(v295 + 168);
          uint64_t v253 = *(void *)(v295 + 192);
          swift_bridgeObjectRetain();
          id v116 = v114;
          uint64_t v76 = v115;
          id v77 = v116;
          swift_bridgeObjectRetain();
          id v117 = [v77 muid];
          if (v117 == [v68 muid])
          {
LABEL_55:
            swift_bridgeObjectRelease();
            if (v287 == 1)
            {
              id v118 = [v269 muid];
              id v119 = [v68 muid];
              swift_bridgeObjectRelease();
              if (v118 == v119 && vabdd_f64(v72, v70) <= 0.1 && v70 < 0.7)
              {
                if (qword_100517E50 != -1) {
                  swift_once();
                }
                uint64_t v250 = v77;
                uint64_t v120 = *(void *)(v0 + 752);
                uint64_t v121 = *(void *)(v0 + 696);
                uint64_t v122 = *(void *)(v0 + 456);
                uint64_t v123 = type metadata accessor for Logger();
                sub_10000F378(v123, (uint64_t)qword_10055E208);
                sub_10006F048(v122, v121, type metadata accessor for CVBundle);
                sub_10006EFA8(v120);
                uint64_t v124 = Logger.logObject.getter();
                os_log_type_t v125 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v124, v125))
                {
                  os_log_type_t v278 = v125;
                  uint64_t v126 = *(void *)(v0 + 696);
                  uint64_t v127 = *(void *)(v0 + 536);
                  uint64_t v128 = swift_slowAlloc();
                  v297[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v128 = 136315394;
                  sub_10006F048(v126, v127, type metadata accessor for CVBundle.BundleType);
                  int v129 = swift_getEnumCaseMultiPayload();
                  uint64_t v130 = *(void *)(v0 + 640);
                  uint64_t v131 = *(void *)(v0 + 552);
                  uint64_t v132 = *(void *)(v0 + 544);
                  uint64_t v133 = *(void *)(v0 + 536);
                  uint64_t v281 = v124;
                  if (v129 == 1)
                  {
                    uint64_t v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32);
                    v134(v130, v133, v132);
                  }
                  else
                  {
                    uint64_t v239 = *(void *)(v0 + 480);
                    sub_10006F0C0(v133, v239, type metadata accessor for CVTrackSnapshot);
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 16))(v130, v239, v132);
                    sub_10006F170(v239, type metadata accessor for CVTrackSnapshot);
                    uint64_t v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32);
                  }
                  uint64_t v273 = *(void *)(v0 + 784);
                  uint64_t v268 = *(void **)(v0 + 776);
                  uint64_t v263 = *(void **)(v0 + 768);
                  uint64_t v240 = *(void *)(v0 + 752);
                  uint64_t v241 = *(void *)(v0 + 648);
                  uint64_t v242 = *(void *)(v0 + 552);
                  uint64_t v243 = *(void *)(v0 + 544);
                  uint64_t v259 = *(void *)(v0 + 696);
                  char v244 = *(unsigned char *)(v0 + 249);
                  unsigned __int8 v261 = *(unsigned char *)(v0 + 250);
                  v134(v241, *(void *)(v0 + 640), v243);
                  sub_10006F128(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
                  uint64_t v245 = dispatch thunk of CustomStringConvertible.description.getter();
                  unint64_t v247 = v246;
                  (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v241, v243);
                  *(void *)(v0 + 368) = sub_1003806B0(v245, v247, v297);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006F170(v259, type metadata accessor for CVBundle);
                  *(_WORD *)(v128 + 12) = 2080;
                  *(void *)(v0 + 288) = v240;
                  *(unsigned char *)(v0 + 296) = v244;
                  sub_10006EFA8(v240);
                  uint64_t v248 = String.init<A>(describing:)();
                  *(void *)(v0 + 384) = sub_1003806B0(v248, v249, v297);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006EE34(v240);
                  sub_10006EE34(v240);
                  _os_log_impl((void *)&_mh_execute_header, v281, v278, "[%s / %s] Existing classification had only one result, which is the top result in new multi-result set, with sufficient score. Preserving existing classification", (uint8_t *)v128, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                  sub_10006F000(v262);
                  sub_10006EF94(v263, v268, v273, v261);

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v186 = *(void *)(v0 + 784);
                  uint64_t v187 = *(void **)(v0 + 776);
                  uint64_t v188 = *(void **)(v0 + 768);
                  uint64_t v189 = *(void *)(v0 + 752);
                  uint64_t v190 = *(void *)(v0 + 696);
                  unsigned __int8 v191 = *(unsigned char *)(v0 + 250);
                  swift_bridgeObjectRelease();
                  sub_10006F000(v262);
                  sub_10006F170(v190, type metadata accessor for CVBundle);
                  sub_10006EE34(v189);
                  sub_10006EE34(v189);
                  sub_10006EF94(v188, v187, v186, v191);

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                sub_10006F048(*(void *)(v0 + 464), *(void *)(v0 + 448), type metadata accessor for BundleClassification);
                goto LABEL_83;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              if (v287 && vabdd_f64(v72, v70) <= 0.1)
              {
                uint64_t v286 = v76;
                if (qword_100517E50 != -1) {
                  swift_once();
                }
                uint64_t v294 = v71;
                uint64_t v170 = *(void *)(v0 + 752);
                uint64_t v171 = *(void *)(v0 + 688);
                uint64_t v172 = *(void *)(v0 + 456);
                uint64_t v173 = type metadata accessor for Logger();
                sub_10000F378(v173, (uint64_t)qword_10055E208);
                sub_10006F048(v172, v171, type metadata accessor for CVBundle);
                sub_10006EFA8(v170);
                sub_10006EFA8(v170);
                uint64_t v174 = Logger.logObject.getter();
                os_log_type_t v175 = static os_log_type_t.debug.getter();
                uint64_t v251 = v77;
                if (os_log_type_enabled(v174, v175))
                {
                  os_log_type_t v274 = v175;
                  uint64_t v176 = *(void *)(v0 + 688);
                  uint64_t v177 = *(void *)(v0 + 528);
                  uint64_t v178 = swift_slowAlloc();
                  v297[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v178 = 136315394;
                  sub_10006F048(v176, v177, type metadata accessor for CVBundle.BundleType);
                  int v179 = swift_getEnumCaseMultiPayload();
                  uint64_t v180 = *(void *)(v0 + 624);
                  uint64_t v181 = *(void *)(v0 + 552);
                  uint64_t v182 = *(void *)(v0 + 544);
                  uint64_t v183 = *(void *)(v0 + 528);
                  v282 = v174;
                  if (v179 == 1)
                  {
                    uint64_t v184 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 32);
                    v184(v180, v183, v182);
                  }
                  else
                  {
                    uint64_t v192 = *(void *)(v0 + 480);
                    sub_10006F0C0(v183, v192, type metadata accessor for CVTrackSnapshot);
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 16))(v180, v192, v182);
                    sub_10006F170(v192, type metadata accessor for CVTrackSnapshot);
                    uint64_t v184 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 32);
                  }
                  uint64_t v193 = *(void *)(v0 + 752);
                  uint64_t v194 = *(void *)(v0 + 632);
                  uint64_t v195 = *(void *)(v0 + 552);
                  uint64_t v196 = *(void *)(v0 + 544);
                  uint64_t v266 = *(void *)(v0 + 688);
                  char v197 = *(unsigned char *)(v0 + 249);
                  v184(v194, *(void *)(v0 + 624), v196);
                  sub_10006F128(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
                  uint64_t v198 = dispatch thunk of CustomStringConvertible.description.getter();
                  unint64_t v200 = v199;
                  (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v194, v196);
                  *(void *)(v0 + 344) = sub_1003806B0(v198, v200, v297);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006F170(v266, type metadata accessor for CVBundle);
                  *(_WORD *)(v178 + 12) = 2080;
                  *(void *)(v0 + 320) = v193;
                  *(unsigned char *)(v0 + 328) = v197;
                  sub_10006EFA8(v193);
                  uint64_t v201 = String.init<A>(describing:)();
                  *(void *)(v0 + 360) = sub_1003806B0(v201, v202, v297);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006EE34(v193);
                  sub_10006EE34(v193);
                  _os_log_impl((void *)&_mh_execute_header, v282, v274, "[%s / %s] New classification has different top result, but previous top result is still contained in result set with sufficient score. Reordering results to preserve existing top result", (uint8_t *)v178, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v5 = (void *)v295;
                  uint64_t v67 = (void **)(v0 + 16);
                }
                else
                {
                  uint64_t v185 = *(void *)(v0 + 752);
                  sub_10006F170(*(void *)(v0 + 688), type metadata accessor for CVBundle);
                  sub_10006EE34(v185);
                  sub_10006EE34(v185);
                }
                uint64_t v275 = *(void *)(v0 + 752);
                uint64_t v203 = *(void *)(v0 + 680);
                uint64_t v204 = *(void *)(v0 + 456);
                sub_10000F214(&qword_100529A30);
                uint64_t v205 = swift_allocObject();
                *(_OWORD *)(v205 + 16) = xmmword_10043D4F0;
                *(void *)(v205 + 32) = v251;
                *(void *)(v205 + 40) = v252;
                *(void *)(v205 + 48) = v286;
                *(double *)(v205 + 56) = v72;
                *(void *)(v205 + 64) = v253;
                *(void *)(v205 + 72) = v254;
                *(void *)(v205 + 80) = v255;
                *(void *)(v205 + 88) = v294;
                sub_10006EFB8(v67);
                swift_bridgeObjectRetain();
                id v283 = v251;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                sub_10006CF90(v258, 0, v260, v67);
                uint64_t v207 = v206;
                sub_10006F000(v67);
                swift_bridgeObjectRelease();
                v297[0] = v205;
                sub_10019F398(v207);
                uint64_t v208 = v297[0];
                sub_10006F048(v204, v203, type metadata accessor for CVBundle);
                swift_bridgeObjectRetain();
                sub_10006EFA8(v275);
                swift_bridgeObjectRetain();
                uint64_t v209 = Logger.logObject.getter();
                os_log_type_t v210 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v209, v210))
                {
                  os_log_type_t v276 = v210;
                  v279 = v209;
                  uint64_t v211 = *(void *)(v0 + 680);
                  uint64_t v212 = *(void *)(v0 + 520);
                  uint64_t v213 = swift_slowAlloc();
                  v297[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v213 = 136315650;
                  sub_10006F048(v211, v212, type metadata accessor for CVBundle.BundleType);
                  int v214 = swift_getEnumCaseMultiPayload();
                  uint64_t v215 = *(void *)(v0 + 608);
                  uint64_t v216 = *(void *)(v0 + 552);
                  uint64_t v217 = *(void *)(v0 + 544);
                  uint64_t v218 = *(void *)(v0 + 520);
                  uint64_t v267 = v208;
                  if (v214 == 1)
                  {
                    uint64_t v219 = *(void (**)(uint64_t, uint64_t, uint64_t))(v216 + 32);
                    v219(v215, v218, v217);
                  }
                  else
                  {
                    uint64_t v222 = *(void *)(v0 + 480);
                    sub_10006F0C0(v218, v222, type metadata accessor for CVTrackSnapshot);
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v216 + 16))(v215, v222, v217);
                    sub_10006F170(v222, type metadata accessor for CVTrackSnapshot);
                    uint64_t v219 = *(void (**)(uint64_t, uint64_t, uint64_t))(v216 + 32);
                  }
                  uint64_t v223 = *(void *)(v0 + 752);
                  uint64_t v224 = *(void *)(v0 + 616);
                  uint64_t v225 = *(void *)(v0 + 552);
                  uint64_t v226 = *(void *)(v0 + 544);
                  uint64_t v265 = *(void *)(v0 + 680);
                  char v227 = *(unsigned char *)(v0 + 249);
                  v219(v224, *(void *)(v0 + 608), v226);
                  sub_10006F128(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
                  uint64_t v228 = dispatch thunk of CustomStringConvertible.description.getter();
                  unint64_t v230 = v229;
                  (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v224, v226);
                  *(void *)(v0 + 376) = sub_1003806B0(v228, v230, v297);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006F170(v265, type metadata accessor for CVBundle);
                  *(_WORD *)(v213 + 12) = 2080;
                  *(void *)(v0 + 304) = v223;
                  *(unsigned char *)(v0 + 312) = v227;
                  sub_10006EFA8(v223);
                  uint64_t v231 = String.init<A>(describing:)();
                  *(void *)(v0 + 352) = sub_1003806B0(v231, v232, v297);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006EE34(v223);
                  sub_10006EE34(v223);
                  *(_WORD *)(v213 + 22) = 2048;
                  uint64_t v208 = v267;
                  uint64_t v233 = *(void *)(v267 + 16);
                  swift_bridgeObjectRelease();
                  *(void *)(v0 + 336) = v233;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v279, v276, "[%s / %s] classified with %ld results", (uint8_t *)v213, 0x20u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v5 = (void *)v295;
                }
                else
                {
                  uint64_t v220 = *(void *)(v0 + 752);
                  uint64_t v221 = *(void *)(v0 + 680);
                  swift_bridgeObjectRelease();
                  sub_10006F170(v221, type metadata accessor for CVBundle);
                  sub_10006EE34(v220);
                  sub_10006EE34(v220);
                  swift_bridgeObjectRelease();
                }
                v277 = *(void **)(v0 + 776);
                uint64_t v280 = *(void *)(v0 + 784);
                uint64_t v272 = *(void **)(v0 + 768);
                unint64_t v234 = *(uint64_t **)(v0 + 736);
                uint64_t v235 = *(void *)(v0 + 472);
                uint64_t v57 = *(void *)(v0 + 448);
                unsigned __int8 v236 = *(unsigned char *)(v0 + 250);
                uint64_t *v234 = v208;
                swift_storeEnumTagMultiPayload();
                uint64_t v59 = v5[7];
                sub_10019D408(v235);
                sub_1003FEC34(v256);
                uint64_t v237 = *(void *)(v0 + 184);
                uint64_t v238 = *(void *)(v0 + 192);
                sub_10000F3B0(v256, v237);
                double v166 = (*(double (**)(uint64_t, uint64_t))(v238 + 88))(v237, v238);
                _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v256);
                sub_10006F000(v262);
                sub_10006EF94(v272, v277, v280, v236);

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_10006F170(v235, (uint64_t (*)(void))type metadata accessor for CVDetection);
                uint64_t v167 = (uint64_t)v234;
                goto LABEL_82;
              }
            }
            sub_10006F000(v262);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            goto LABEL_67;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        sub_10006F000(v262);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
LABEL_67:
    swift_bridgeObjectRelease();
    if (qword_100517E50 != -1) {
      swift_once();
    }
    uint64_t v135 = *(void *)(v0 + 752);
    uint64_t v136 = *(void *)(v0 + 672);
    uint64_t v137 = *(void *)(v0 + 456);
    uint64_t v138 = type metadata accessor for Logger();
    sub_10000F378(v138, (uint64_t)qword_10055E208);
    sub_10006F048(v137, v136, type metadata accessor for CVBundle);
    swift_bridgeObjectRetain_n();
    sub_10006EFA8(v135);
    uint64_t v139 = Logger.logObject.getter();
    os_log_type_t v140 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v139, v140))
    {
      uint64_t v141 = *(void *)(v0 + 672);
      uint64_t v142 = *(void *)(v0 + 512);
      uint64_t v143 = swift_slowAlloc();
      v297[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v143 = 136315650;
      sub_10006F048(v141, v142, type metadata accessor for CVBundle.BundleType);
      int v144 = swift_getEnumCaseMultiPayload();
      uint64_t v145 = *(void *)(v0 + 592);
      uint64_t v146 = *(void *)(v0 + 552);
      uint64_t v147 = *(void *)(v0 + 544);
      uint64_t v148 = *(void *)(v0 + 512);
      v291 = v139;
      os_log_type_t v271 = v140;
      if (v144 == 1)
      {
        uint64_t v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 32);
        v149(v145, v148, v147);
      }
      else
      {
        uint64_t v152 = *(void *)(v0 + 480);
        sub_10006F0C0(v148, v152, type metadata accessor for CVTrackSnapshot);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v145, v152, v147);
        sub_10006F170(v152, type metadata accessor for CVTrackSnapshot);
        uint64_t v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 32);
      }
      uint64_t v153 = *(void *)(v0 + 752);
      uint64_t v154 = *(void *)(v0 + 600);
      uint64_t v155 = *(void *)(v0 + 552);
      uint64_t v156 = *(void *)(v0 + 544);
      uint64_t v257 = *(void *)(v0 + 672);
      char v157 = *(unsigned char *)(v0 + 249);
      v149(v154, *(void *)(v0 + 592), v156);
      sub_10006F128(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v158 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v160 = v159;
      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v154, v156);
      *(void *)(v0 + 432) = sub_1003806B0(v158, v160, v297);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006F170(v257, type metadata accessor for CVBundle);
      *(_WORD *)(v143 + 12) = 2080;
      *(void *)(v0 + 256) = v153;
      *(unsigned char *)(v0 + 264) = v157;
      sub_10006EFA8(v153);
      uint64_t v161 = String.init<A>(describing:)();
      *(void *)(v0 + 408) = sub_1003806B0(v161, v162, v297);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006EE34(v153);
      sub_10006EE34(v153);
      *(_WORD *)(v143 + 22) = 2048;
      uint64_t v5 = (void *)v295;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 392) = v292;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v291, v271, "[%s / %s] classified with %ld results", (uint8_t *)v143, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v150 = *(void *)(v0 + 752);
      uint64_t v151 = *(void *)(v0 + 672);
      swift_bridgeObjectRelease();
      sub_10006F170(v151, type metadata accessor for CVBundle);
      sub_10006EE34(v150);
      sub_10006EE34(v150);
      swift_bridgeObjectRelease();
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    uint64_t v163 = (void *)swift_dynamicCastClass();
    if (!v163)
    {
      swift_bridgeObjectRelease();
      uint64_t v163 = _swiftEmptyArrayStorage;
    }
    uint64_t v164 = v163[2];
    swift_release();
    if (v164 == v292)
    {
      uint64_t v165 = (void *)swift_dynamicCastClass();
      if (!v165)
      {
        swift_bridgeObjectRelease();
        uint64_t v165 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v165 = sub_1001E9B94((uint64_t)v5, v258, 0, v260);
    }
    uint64_t v293 = *(void *)(v0 + 784);
    uint64_t v285 = *(void **)(v0 + 768);
    v290 = *(void **)(v0 + 776);
    uint64_t v55 = *(void **)(v0 + 728);
    uint64_t v56 = *(void *)(v0 + 472);
    uint64_t v57 = *(void *)(v0 + 448);
    unsigned __int8 v58 = *(unsigned char *)(v0 + 250);
    swift_bridgeObjectRelease();
    *uint64_t v55 = v165;
    swift_storeEnumTagMultiPayload();
    uint64_t v59 = v5[7];
    sub_10019D408(v56);
    uint64_t v60 = (void *)(v0 + 120);
    sub_1003FEC34((uint64_t *)(v0 + 120));
    uint64_t v61 = *(void *)(v0 + 144);
    uint64_t v62 = *(void *)(v0 + 152);
    goto LABEL_81;
  }
  uint64_t v51 = *(void *)(v0 + 752);
  swift_bridgeObjectRelease();
  sub_10006EE34(v51);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v52 = (void *)swift_dynamicCastClass();
  if (!v52)
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = _swiftEmptyArrayStorage;
  }
  uint64_t v53 = v52[2];
  swift_release();
  if (v53 == v292)
  {
    uint64_t v54 = (void *)swift_dynamicCastClass();
    if (!v54)
    {
      swift_bridgeObjectRelease();
      uint64_t v54 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_1001E9B94(v295, v258, 0, v260);
  }
  uint64_t v293 = *(void *)(v0 + 784);
  uint64_t v285 = *(void **)(v0 + 768);
  v290 = *(void **)(v0 + 776);
  uint64_t v55 = *(void **)(v0 + 720);
  uint64_t v56 = *(void *)(v0 + 472);
  uint64_t v57 = *(void *)(v0 + 448);
  unsigned __int8 v58 = *(unsigned char *)(v0 + 250);
  swift_bridgeObjectRelease();
  *uint64_t v55 = v54;
  swift_storeEnumTagMultiPayload();
  uint64_t v59 = *(void *)(v295 + 56);
  sub_10019D408(v56);
  uint64_t v60 = (void *)(v0 + 200);
  sub_1003FEC34((uint64_t *)(v0 + 200));
  uint64_t v61 = *(void *)(v0 + 224);
  uint64_t v62 = *(void *)(v0 + 232);
LABEL_81:
  sub_10000F3B0(v60, v61);
  double v166 = (*(double (**)(uint64_t, uint64_t))(v62 + 88))(v61, v62);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v60);
  sub_10006EF94(v285, v290, v293, v58);
  swift_bridgeObjectRelease();
  sub_10006F170(v56, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v167 = (uint64_t)v55;
LABEL_82:
  sub_10006F0C0(v167, v57, type metadata accessor for BundleClassification.ClassificationType);
  uint64_t v168 = type metadata accessor for BundleClassification(0);
  *(void *)(v57 + *(int *)(v168 + 20)) = v59;
  *(double *)(v57 + *(int *)(v168 + 24)) = v166;
LABEL_83:
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v109 = *(uint64_t (**)(void))(v0 + 8);
LABEL_84:
  return v109();
}

uint64_t sub_10006C3E4()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  return _swift_task_switch(sub_10006C47C, 0, 0);
}

uint64_t sub_10006C47C()
{
  *(void *)(v0 + 848) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006C508, v2, v1);
}

uint64_t sub_10006C508()
{
  swift_release();
  *(void *)(v0 + 856) = qword_10055E060;
  return _swift_task_switch(sub_10006C57C, 0, 0);
}

uint64_t sub_10006C57C()
{
  *(void *)(v0 + 864) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006C608, v2, v1);
}

uint64_t sub_10006C608()
{
  swift_release();
  if (sub_100054E64()) {
    sub_100051D68();
  }
  return _swift_task_switch(sub_10006C684, 0, 0);
}

uint64_t sub_10006C684()
{
  sub_100022E84();
  swift_allocError();
  void *v1 = 0x7461636F6C206F4ELL;
  v1[1] = 0xEB000000006E6F69;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10006C8E4()
{
  uint64_t v1 = *(void *)(v0 + 784);
  uint64_t v2 = *(void **)(v0 + 776);
  uint64_t v3 = *(void **)(v0 + 768);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 250);
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 80);
  swift_willThrow();
  sub_10006EF94(v3, v2, v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10006CB34(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(*(void *)(v2 + 64) + 40);
  id v4 = a2;
  sub_10000FC34((uint64_t)&v6, v3, &qword_10051B440);
  return swift_continuation_resume();
}

uint64_t sub_10006CB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10000F878;
  return sub_100068DD4(a1, a2, a3);
}

uint64_t sub_10006CC4C(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_10006CDA4((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_10006CDA4((uint64_t)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_10006CDA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = (unint64_t *)result;
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
LABEL_4:
  uint64_t v20 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v13 >= v10) {
      return sub_100205134(v19, a2, v20, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return sub_100205134(v19, a2, v20, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return sub_100205134(v19, a2, v20, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_21:
    if (*(float *)(*(void *)(a3 + 56) + 4 * v12) >= 0.6)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v12);
      id result = *v16;
      if (*v16 != 0x6E776F6E6B6E75 || v16[1] != 0xE700000000000000)
      {
        id result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          *(unint64_t *)((char *)v19 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
          uint64_t v4 = v20 + 1;
          if (!__OFADD__(v20, 1)) {
            goto LABEL_4;
          }
          __break(1u);
          return sub_100205134(v19, a2, v20, a3);
        }
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return sub_100205134(v19, a2, v20, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return sub_100205134(v19, a2, v20, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_10006CF90(uint64_t a1, uint64_t a2, unint64_t a3, id *a4)
{
  int64_t v4 = a3 >> 1;
  if (a3 >> 1 != a2)
  {
    uint64_t v5 = a1 + 32;
    uint64_t v25 = v4 - 1;
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = a2;
    uint64_t v26 = a1 + 32;
    unint64_t v31 = a3 >> 1;
    uint64_t v32 = a2;
    do
    {
      uint64_t v27 = v6;
      uint64_t v28 = v7;
      uint64_t v8 = (uint64_t *)(v5 + (v7 << 6));
      uint64_t v9 = v7;
      while (1)
      {
        if (v7 < a2 || v9 >= v4)
        {
          __break(1u);
          return;
        }
        int64_t v10 = (void *)*(v8 - 4);
        uint64_t v11 = *(v8 - 2);
        uint64_t v12 = *(v8 - 1);
        uint64_t v13 = v8[1];
        uint64_t v29 = *v8;
        uint64_t v30 = *(v8 - 3);
        uint64_t v14 = v9 + 1;
        uint64_t v15 = v8[2];
        uint64_t v16 = v8[3];
        swift_bridgeObjectRetain();
        id v17 = v10;
        swift_bridgeObjectRetain();
        id v18 = [v17 muid];
        if (v18 != [*a4 muid]) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v8 += 8;
        ++v9;
        int64_t v4 = v31;
        a2 = v32;
        uint64_t v7 = v28;
        if (v31 == v14) {
          return;
        }
      }
      uint64_t v6 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040994(0, v27[2] + 1, 1);
        uint64_t v6 = v27;
      }
      uint64_t v19 = v9 + 1;
      id v20 = v17;
      unint64_t v22 = v6[2];
      unint64_t v21 = v6[3];
      unint64_t v23 = v22 + 1;
      if (v22 >= v21 >> 1)
      {
        sub_100040994(v21 > 1, v22 + 1, 1);
        unint64_t v23 = v22 + 1;
        id v20 = v17;
        uint64_t v19 = v9 + 1;
        uint64_t v6 = v27;
      }
      v6[2] = v23;
      uint64_t v24 = &v6[8 * v22];
      v24[4] = v20;
      v24[5] = v30;
      v24[6] = v11;
      v24[7] = v12;
      v24[8] = v29;
      v24[9] = v13;
      uint64_t v7 = v19;
      v24[10] = v15;
      v24[11] = v16;
      uint64_t v5 = v26;
      int64_t v4 = v31;
      a2 = v32;
    }
    while (v25 != v9);
  }
}

uint64_t sub_10006D1A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v2);
  int64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v62 = (uint64_t)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for VisualDomain();
  uint64_t v64 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v55 - v11;
  uint64_t v63 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v63);
  uint64_t v65 = (uint64_t)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CVDetection();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006F048(a1, (uint64_t)v19, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    return 0;
  }
  sub_10006F170((uint64_t)v19, type metadata accessor for CVBundle.BundleType);
  sub_10019C820((uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_10006F0C0((uint64_t)v16, (uint64_t)v4, type metadata accessor for ObjectDetectorResult);
    uint64_t v33 = &v4[*(int *)(v2 + 28)];
    if (*(void *)v33 != 1852270963 || *((void *)v33 + 1) != 0xE400000000000000)
    {
      int v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_10006F170((uint64_t)v4, type metadata accessor for ObjectDetectorResult);
      return ~v35 & 1;
    }
    sub_10006F170((uint64_t)v4, type metadata accessor for ObjectDetectorResult);
    return 0;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v36 = (uint64_t (*)(void))type metadata accessor for CVDetection;
    uint64_t v37 = (uint64_t)v16;
LABEL_24:
    sub_10006F170(v37, v36);
    return 1;
  }
  uint64_t v23 = v65;
  sub_10006F0C0((uint64_t)v16, v65, type metadata accessor for ParseDetectorResult);
  uint64_t v24 = v63;
  uint64_t v25 = *(void *)(v23 + *(int *)(v63 + 28));
  swift_bridgeObjectRetain();
  static VisualDomain.storefront.getter();
  uint64_t v60 = *(void *)(v25 + 16);
  if (!v60)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v7);
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v36 = type metadata accessor for ParseDetectorResult;
    uint64_t v37 = v23;
    goto LABEL_24;
  }
  uint64_t v57 = a1;
  uint64_t v26 = v64;
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v59 = *(void (**)(char *, unint64_t, uint64_t))(v64 + 16);
  v59(v9, v25 + v27, v7);
  uint64_t v28 = sub_10006F128((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
  swift_bridgeObjectRetain();
  uint64_t v58 = v28;
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v30 = v26 + 8;
  uint64_t v61 = v31;
  v31(v9, v7);
  if ((v29 & 1) == 0)
  {
    uint64_t v56 = v25;
    if (v60 != 1)
    {
      v55[1] = v30 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v38 = *(void *)(v64 + 72);
      uint64_t v39 = v56 + v38 + v27;
      uint64_t v40 = 1;
      while (1)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v9, v39, v7);
        uint64_t v42 = v40 + 1;
        if (__OFADD__(v40, 1)) {
          break;
        }
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        v61(v9, v7);
        if (v43)
        {
          swift_bridgeObjectRelease();
          uint64_t v32 = v65;
          uint64_t v24 = v63;
          goto LABEL_28;
        }
        ++v40;
        v39 += v38;
        if (v42 == v60) {
          goto LABEL_22;
        }
      }
      __break(1u);
      goto LABEL_44;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v23 = v65;
    v61(v12, v7);
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v65;
LABEL_28:
  v61(v12, v7);
  swift_bridgeObjectRelease();
  uint64_t v44 = v62;
  sub_10006F1D0(v32 + *(int *)(v24 + 52), v62);
  uint64_t v45 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
  {
    sub_10000FBD8(v44, &qword_100524BD0);
    unint64_t v21 = sub_10031B7B8((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v47 = VisualUnderstanding.ImageRegion.getBrandDistribution()();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
    unint64_t v21 = sub_10006CC4C(v47);
    swift_bridgeObjectRelease();
  }
  if (sub_10019D694() >= 0.22) {
    goto LABEL_41;
  }
  uint64_t result = (uint64_t)[self sharedConfiguration];
  if (result)
  {
    unint64_t v48 = (void *)result;
    NSString v49 = String._bridgeToObjectiveC()();
    id v50 = [v48 defaultForKey:v49 defaultValue:0];

    if (v50)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v67, 0, sizeof(v67));
    }
    sub_10000FC34((uint64_t)v67, (uint64_t)v68, &qword_10051B448);
    uint64_t v32 = v65;
    if (v69)
    {
      sub_10006F238();
      if (swift_dynamicCast())
      {
        id v51 = v66;
        [v66 floatValue];
        float v53 = v52;
        float v54 = sub_10019D694();

        sub_10006F170(v32, type metadata accessor for ParseDetectorResult);
        if (v54 >= v53) {
          return v21;
        }
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    else
    {
      sub_10000FBD8((uint64_t)v68, &qword_10051B448);
    }
LABEL_41:
    sub_10006F170(v32, type metadata accessor for ParseDetectorResult);
    return v21;
  }
LABEL_44:
  __break(1u);
  return result;
}

id sub_10006DAA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v2 - 8);
  int64_t v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CVDetection();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006D1A0(a1);
  sub_10006EE34(v8);
  if (v8 == 1) {
    return 0;
  }
  sub_10019D408((uint64_t)v7);
  sub_1003FEC34(v17);
  uint64_t v10 = v18;
  uint64_t v11 = v19;
  sub_10000F3B0(v17, v18);
  double v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v17);
  sub_10006F170((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
  double v13 = v12 - sub_10019D9E0();
  sub_10006F048(a1, (uint64_t)v4, type metadata accessor for CVBundle);
  if (v13 >= 2.0)
  {
    sub_10006F170((uint64_t)v4, type metadata accessor for CVBundle);
  }
  else
  {
    id v9 = (id)sub_10019DD30()[2];
    swift_bridgeObjectRelease();
    sub_10006F170((uint64_t)v4, type metadata accessor for CVBundle);
    if (!v9) {
      return v9;
    }
  }
  if (qword_100517EC0 != -1) {
    swift_once();
  }
  id result = [self sharedConfiguration];
  if (result)
  {
    uint64_t v15 = result;
    id v9 = [result currentCountrySupportsFeature:11];

    return v9;
  }
  __break(1u);
  return result;
}

void *sub_10006DCFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v2 = v27 + 48;
    uint64_t v26 = v1;
    do
    {
      double v6 = *(double *)(v2 + 8);
      if (v6 >= 0.7)
      {
        uint64_t v7 = *(void **)(v2 - 16);
        uint64_t v8 = *(void *)(v2 - 8);
        uint64_t v9 = *(void *)v2;
        long long v28 = *(_OWORD *)(v2 + 16);
        uint64_t v10 = *(void *)(v2 + 32);
        uint64_t v11 = *(void *)(v2 + 40);
        swift_bridgeObjectRetain();
        id v12 = v7;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100040994(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v4 = _swiftEmptyArrayStorage[2];
        unint64_t v3 = _swiftEmptyArrayStorage[3];
        if (v4 >= v3 >> 1) {
          sub_100040994(v3 > 1, v4 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v4 + 1;
        uint64_t v5 = (double *)&_swiftEmptyArrayStorage[8 * v4];
        *((void *)v5 + 4) = v12;
        *((void *)v5 + 5) = v8;
        *((void *)v5 + 6) = v9;
        v5[7] = v6;
        *((_OWORD *)v5 + 4) = v28;
        *((void *)v5 + 10) = v10;
        *((void *)v5 + 11) = v11;
      }
      v2 += 64;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (!_swiftEmptyArrayStorage[2])
    {
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v13 = v27 + 48;
      uint64_t v14 = v26;
      do
      {
        double v18 = *(double *)(v13 + 8);
        if (v18 >= 0.3)
        {
          uint64_t v19 = *(void **)(v13 - 16);
          uint64_t v20 = *(void *)(v13 - 8);
          uint64_t v21 = *(void *)v13;
          long long v29 = *(_OWORD *)(v13 + 16);
          uint64_t v22 = *(void *)(v13 + 32);
          uint64_t v23 = *(void *)(v13 + 40);
          swift_bridgeObjectRetain();
          id v24 = v19;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_100040994(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v16 = _swiftEmptyArrayStorage[2];
          unint64_t v15 = _swiftEmptyArrayStorage[3];
          if (v16 >= v15 >> 1) {
            sub_100040994(v15 > 1, v16 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v16 + 1;
          uint64_t v17 = (double *)&_swiftEmptyArrayStorage[8 * v16];
          *((void *)v17 + 4) = v24;
          *((void *)v17 + 5) = v20;
          *((void *)v17 + 6) = v21;
          v17[7] = v18;
          *((_OWORD *)v17 + 4) = v29;
          *((void *)v17 + 10) = v22;
          *((void *)v17 + 11) = v23;
        }
        v13 += 64;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
  }
  else if (!_swiftEmptyArrayStorage[2])
  {
    swift_release();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10006DF7C()
{
  return _swift_task_switch(sub_10006DF98, 0, 0);
}

uint64_t sub_10006DF98()
{
  *(void *)(v0 + 128) = type metadata accessor for MainActor();
  *(void *)(v0 + 136) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006E030, v2, v1);
}

uint64_t sub_10006E030()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  return _swift_task_switch(sub_10006E0C8, 0, 0);
}

uint64_t sub_10006E0C8()
{
  *(void *)(v0 + 144) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006E154, v2, v1);
}

uint64_t sub_10006E154()
{
  swift_release();
  *(void *)(v0 + 152) = qword_10055E060;
  return _swift_task_switch(sub_10006E1C8, 0, 0);
}

uint64_t sub_10006E1C8()
{
  *(void *)(v0 + 160) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006E254, v2, v1);
}

uint64_t sub_10006E254()
{
  uint64_t v1 = v0[19];
  swift_release();
  swift_getKeyPath();
  v0[10] = v1;
  v0[21] = sub_10006F128(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
  v0[22] = v2;
  id v3 = v2;
  return _swift_task_switch(sub_10006E350, 0, 0);
}

uint64_t sub_10006E350()
{
  if (v0[22])
  {
    v0[23] = static MainActor.shared.getter();
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10006E424, v2, v1);
  }
  else
  {
    id v3 = (uint64_t (*)(void, void, void, uint64_t))v0[1];
    return v3(0, 0, 0, 255);
  }
}

uint64_t sub_10006E424()
{
  swift_release();
  return _swift_task_switch(sub_10006E48C, 0, 0);
}

uint64_t sub_10006E48C()
{
  *(void *)(v0 + 192) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006E518, v2, v1);
}

uint64_t sub_10006E518()
{
  swift_release();
  *(void *)(v0 + 200) = qword_10055E060;
  return _swift_task_switch(sub_10006E58C, 0, 0);
}

uint64_t sub_10006E58C()
{
  *(void *)(v0 + 208) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006E618, v2, v1);
}

uint64_t sub_10006E618()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_release();
  *(void *)(v0 + 216) = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler_headingUpdatePublisher)
                                    + OBJC_IVAR____TtC6TamaleP33_C9ADE6EF0154732DC4BAAB5D2D72EB8C24CLHeadingUpdatePublisher_authorizationInfo
                                    + 8);
  return _swift_task_switch(sub_10006E6A0, 0, 0);
}

uint64_t sub_10006E6A0()
{
  uint64_t v1 = (void *)v0[22];
  if (v0[27])
  {

    uint64_t v2 = (uint64_t (*)(void, void, void, uint64_t))v0[1];
    return v2(0, 0, 0, 255);
  }
  else if ([self isLocationShiftRequiredForLocation:v1])
  {
    uint64_t v4 = v0 + 15;
    if (qword_100517D60 != -1)
    {
      swift_once();
      uint64_t v4 = v0 + 15;
    }
    uint64_t v5 = (void *)v0[22];
    double v6 = (void *)qword_10051B410;
    v0[2] = v0;
    v0[7] = v4;
    v0[3] = sub_10006E8CC;
    uint64_t v7 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10006CB34;
    v0[13] = &unk_1004E8040;
    v0[14] = v7;
    [v6 shiftLocation:v5 withCompletionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v8 = (void *)v0[22];
    v0[28] = v8;
    id v9 = v8;
    v0[29] = static MainActor.shared.getter();
    uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10006EA94, v11, v10);
  }
}

uint64_t sub_10006E8CC()
{
  return _swift_task_switch(sub_10006E9AC, 0, 0);
}

uint64_t sub_10006E9AC()
{
  uint64_t v1 = *(void *)(v0 + 120);

  if (v1)
  {
    *(void *)(v0 + 224) = v1;
    *(void *)(v0 + 232) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10006EA94, v3, v2);
  }
  else
  {

    uint64_t v4 = *(uint64_t (**)(void, void, void, uint64_t))(v0 + 8);
    return v4(0, 0, 0, 255);
  }
}

uint64_t sub_10006EA94()
{
  swift_release();
  return _swift_task_switch(sub_10006EAFC, 0, 0);
}

uint64_t sub_10006EAFC()
{
  *(void *)(v0 + 240) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006EB88, v2, v1);
}

uint64_t sub_10006EB88()
{
  swift_release();
  *(void *)(v0 + 248) = qword_10055E060;
  return _swift_task_switch(sub_10006EBFC, 0, 0);
}

uint64_t sub_10006EBFC()
{
  *(void *)(v0 + 256) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006EC88, v2, v1);
}

uint64_t sub_10006EC88()
{
  uint64_t v1 = v0[31];
  swift_release();
  swift_getKeyPath();
  v0[10] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__heading);
  v0[33] = v2;
  id v3 = v2;
  return _swift_task_switch(sub_10006ED4C, 0, 0);
}

uint64_t sub_10006ED4C()
{
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 176);
  if (v1)
  {
    [*(id *)(v0 + 264) trueHeading];
    double v4 = v3 * 3.14159265 / 180.0;
    [v1 headingAccuracy];
    double v6 = v5;

    double v7 = v4;
    double v8 = v6 * 3.14159265 / 180.0;
    uint64_t v9 = 2;
  }
  else
  {

    double v7 = 0.0;
    double v8 = 0.0;
    uint64_t v9 = 1;
  }
  uint64_t v10 = *(void *)(v0 + 224);
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, void, uint64_t))(v0 + 8);
  return v11(v10, *(void *)&v7, *(void *)&v8, v9);
}

uint64_t sub_10006EE34(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10006EE44()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10004FFD4(*(void **)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t sub_10006EE94(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  double v10 = *(double *)(v1 + 72);
  char v11 = *(unsigned char *)(v1 + 64);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000F878;
  return sub_1000F2E34(v10, a1, v4, v5, v6, v7, v8, v9, v11);
}

id sub_10006EF80(id result, void *a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 0xFF) {
    return sub_1000506C4(result, a2, a3, a4);
  }
  return result;
}

void sub_10006EF94(void *a1, void *a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 0xFF) {
    sub_10004FFD4(a1, a2, a3, a4);
  }
}

uint64_t sub_10006EFA8(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void **sub_10006EFB8(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_10006F000(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006F048(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006F0C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006F128(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006F170(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10006F1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_100524BD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006F238()
{
  unint64_t result = qword_10051B450;
  if (!qword_10051B450)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10051B450);
  }
  return result;
}

uint64_t sub_10006F278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_10006F2E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10006F348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006F3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006F410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006F474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10006F4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F4EC);
}

uint64_t sub_10006F4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10006F558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F56C);
}

uint64_t sub_10006F56C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for IdentifiableURL()
{
  uint64_t result = qword_10051B4B0;
  if (!qword_10051B4B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006F628()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10006F6B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

unint64_t sub_10006F724()
{
  unint64_t result = qword_10051F670;
  if (!qword_10051F670)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051F670);
  }
  return result;
}

double sub_10006F77C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v3 = self;
  id v4 = v1;
  if ([v3 isMainThread])
  {
    id v5 = [v4 frontmostAudioOrVideoCall];

    swift_release();
    if (v5)
    {
LABEL_3:
      *(void *)(a1 + 24) = sub_10000F734(0, &qword_10051B4F0);
      *(void *)(a1 + 32) = &off_1004F8658;
      *(void *)a1 = v5;
      return result;
    }
  }
  else
  {
    sub_10000F734(0, (unint64_t *)&qword_10051A950);
    uint64_t v7 = (void *)static OS_dispatch_queue.main.getter();
    __chkstk_darwin(v7);
    sub_10000F214(&qword_10051B4E8);
    OS_dispatch_queue.sync<A>(execute:)();

    swift_release();
    id v5 = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_10006F910@<D0>(uint64_t a1@<X8>)
{
  return sub_10006F77C(a1);
}

uint64_t sub_10006F934()
{
  return swift_deallocObject();
}

id sub_10006F96C@<X0>(void *a1@<X8>)
{
  id result = [*(id *)(v1 + 16) frontmostAudioOrVideoCall];
  *a1 = result;
  return result;
}

void *sub_10006F9A8@<X0>(void *a1@<X8>)
{
  id result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

unint64_t sub_10006F9F4()
{
  unint64_t result = qword_10051B4F8;
  if (!qword_10051B4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B4F8);
  }
  return result;
}

unint64_t sub_10006FA48(char a1)
{
  unint64_t result = 0x6E756F42776F6873;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x736E6950776F6873;
      break;
    case 2:
      unint64_t result = 0x69746552776F6873;
      break;
    case 3:
      unint64_t result = 0x74786554776F6873;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10006FB34(void *a1, uint64_t a2)
{
  char v3 = BYTE5(a2);
  uint64_t v5 = sub_10000F214(&qword_10051B588);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10007A6C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = v3;
    char v11 = 5;
    sub_10007A76C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10006FD54()
{
  return sub_10006FA48(*v0);
}

uint64_t sub_10006FD5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007A170(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006FD84(uint64_t a1)
{
  unint64_t v2 = sub_10007A6C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006FDC0(uint64_t a1)
{
  unint64_t v2 = sub_10007A6C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

int8x8_t sub_10006FDFC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_10007A424(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = v4 & 1;
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(v4);
    int16x8_t v7 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_10043F3E0), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_10043F3D0));
    *(int8x8_t *)v7.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v7), (int8x8_t)0x1000100010001);
    int8x8_t result = vmovn_s16(v7);
    *(_DWORD *)(a2 + 1) = result.i32[0];
    *(unsigned char *)(a2 + 5) = BYTE5(v4);
  }
  return result;
}

uint64_t sub_10006FE68(void *a1)
{
  uint64_t v2 = &_mh_execute_header;
  if (!v1[4]) {
    uint64_t v2 = 0;
  }
  unint64_t v3 = (unint64_t)v2 | ((unint64_t)v1[5] << 40);
  uint64_t v4 = 0x1000000;
  if (!v1[3]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000;
  if (!v1[2]) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v4 | v5;
  uint64_t v7 = 256;
  if (!v1[1]) {
    uint64_t v7 = 0;
  }
  return sub_10006FB34(a1, v3 | v6 | v7 | *v1);
}

BOOL sub_10006FEDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  int v5 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a2;
  int v8 = a2[1];
  int v9 = a2[2];
  int v10 = a2[3];
  int v11 = a2[4];
  uint64_t v12 = a2[5];
  if (a1[4]) {
    char v13 = &_mh_execute_header;
  }
  else {
    char v13 = 0;
  }
  unint64_t v14 = (unint64_t)v13 | (v6 << 40);
  BOOL v15 = v5 == 0;
  uint64_t v16 = 0x1000000;
  if (v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = 0x1000000;
  }
  BOOL v15 = v4 == 0;
  uint64_t v18 = 0x10000;
  if (v15) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = 0x10000;
  }
  uint64_t v20 = v17 | v19;
  BOOL v15 = v3 == 0;
  uint64_t v21 = 256;
  if (v15) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = 256;
  }
  unint64_t v23 = v14 | v20 | v22 | v2;
  if (v11) {
    id v24 = &_mh_execute_header;
  }
  else {
    id v24 = 0;
  }
  unint64_t v25 = (unint64_t)v24 | (v12 << 40);
  if (!v10) {
    uint64_t v16 = 0;
  }
  if (!v9) {
    uint64_t v18 = 0;
  }
  uint64_t v26 = v16 | v18;
  if (!v8) {
    uint64_t v21 = 0;
  }
  return sub_10007A104(v23, v25 | v26 | v21 | v7);
}

uint64_t sub_10006FF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    Path.move(to:)();
    uint64_t v4 = v2 - 1;
    if (v4)
    {
      uint64_t v5 = a2 + 56;
      do
      {
        Path.addLine(to:)();
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10007004C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  uint64_t v9 = v8;
  uint64_t v18 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (unsigned __int8 *)&MinX - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = a3 - a5 * 0.5;
  double v22 = a4 - a6 * 0.5;
  char v23 = *(unsigned char *)(v8 + 8);
  uint64_t v24 = swift_retain();
  uint64_t v25 = sub_10027CDAC(v24, v23);
  swift_release();
  swift_getKeyPath();
  uint64_t v61 = v25;
  sub_10008209C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v26 = v25 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
  swift_beginAccess();
  sub_100081408(v26, (uint64_t)v20, type metadata accessor for CameraControllerConfiguration);
  swift_release();
  LODWORD(v26) = *v20;
  uint64_t v27 = sub_1000814B0((uint64_t)v20, type metadata accessor for CameraControllerConfiguration);
  if (v26 != 1)
  {
    __chkstk_darwin(v27);
    *(&MinX - 4) = v21;
    *(&MinX - 3) = v22;
    *(&MinX - 2) = a5;
    *(&MinX - 1) = a6;
    uint64_t result = Path.init(_:)();
    uint64_t v50 = v61;
    uint64_t v51 = v62;
    uint64_t v52 = v63;
    uint64_t v53 = v64;
    char v54 = v65;
    goto LABEL_11;
  }
  double v59 = a7;
  double v60 = a8;
  v66.origin.CGFloat x = v21;
  v66.origin.CGFloat y = v22;
  v66.size.CGFloat width = a5;
  v66.size.CGFloat height = a6;
  CGFloat MinX = CGRectGetMinX(v66);
  v67.origin.CGFloat x = v21;
  v67.origin.CGFloat y = v22;
  v67.size.CGFloat width = a5;
  v67.size.CGFloat height = a6;
  CGFloat MinY = CGRectGetMinY(v67);
  v68.origin.CGFloat x = v21;
  v68.origin.CGFloat y = v22;
  v68.size.CGFloat width = a5;
  v68.size.CGFloat height = a6;
  CGFloat MaxX = CGRectGetMaxX(v68);
  v69.origin.CGFloat x = v21;
  v69.origin.CGFloat y = v22;
  v69.size.CGFloat width = a5;
  v69.size.CGFloat height = a6;
  CGFloat v57 = CGRectGetMinY(v69);
  v70.origin.CGFloat x = v21;
  v70.origin.CGFloat y = v22;
  v70.size.CGFloat width = a5;
  v70.size.CGFloat height = a6;
  CGFloat v29 = CGRectGetMinX(v70);
  v71.origin.CGFloat x = v21;
  v71.origin.CGFloat y = v22;
  v71.size.CGFloat width = a5;
  v71.size.CGFloat height = a6;
  CGFloat MaxY = CGRectGetMaxY(v71);
  v72.origin.CGFloat x = v21;
  v72.origin.CGFloat y = v22;
  v72.size.CGFloat width = a5;
  v72.size.CGFloat height = a6;
  CGFloat v31 = CGRectGetMaxX(v72);
  v73.origin.CGFloat x = v21;
  CGFloat v32 = MinY;
  v73.origin.CGFloat y = v22;
  v73.size.CGFloat width = a5;
  CGFloat v33 = MinX;
  v73.size.CGFloat height = a6;
  CGFloat v34 = CGRectGetMaxY(v73);
  sub_10000F214(&qword_100521060);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043F3F0;
  *(CGFloat *)(inited + 32) = v33;
  *(CGFloat *)(inited + 40) = MinY;
  CGFloat v36 = v57;
  *(CGFloat *)(inited + 48) = MaxX;
  *(CGFloat *)(inited + 56) = v36;
  *(CGFloat *)(inited + 64) = v31;
  *(CGFloat *)(inited + 72) = v34;
  *(CGFloat *)(inited + 80) = v29;
  *(CGFloat *)(inited + 88) = MaxY;
  swift_bridgeObjectRetain();
  uint64_t v37 = (void *)inited;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v37 = sub_10032923C(0, 5, 1, (void *)inited);
  }
  unint64_t v39 = v37[2];
  unint64_t v38 = v37[3];
  if (v39 >= v38 >> 1) {
    uint64_t v37 = sub_10032923C((void *)(v38 > 1), v39 + 1, 1, v37);
  }
  double v40 = v60;
  double v41 = v59;
  v37[2] = v39 + 1;
  uint64_t v42 = (CGFloat *)&v37[2 * v39];
  v42[4] = v33;
  v42[5] = v32;
  if (!v39)
  {
    __break(1u);
    goto LABEL_13;
  }
  long long v43 = *((_OWORD *)v37 + 2);
  *((_OWORD *)v37 + 2) = *((_OWORD *)v37 + 3);
  *((_OWORD *)v37 + 3) = v43;
  if (v39 < 3)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  if (v39 == 3) {
    goto LABEL_14;
  }
  long long v44 = *((_OWORD *)v37 + 5);
  *((_OWORD *)v37 + 5) = *((_OWORD *)v37 + 6);
  *((_OWORD *)v37 + 6) = v44;
  uint64_t v61 = inited;
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = sub_10019F4EC(v45);
  uint64_t v47 = v61;
  __chkstk_darwin(v46);
  *((_OWORD *)&MinX - 3) = *(_OWORD *)(a1 + 16);
  *((void *)&MinX - 4) = v9;
  *(&MinX - 3) = v41;
  *(&MinX - 2) = v40;
  unint64_t v48 = sub_1002ED050((void (*)(long long *__return_ptr, long long *))sub_1000802E4, (uint64_t)(&MinX - 8), v47);
  swift_bridgeObjectRelease();
  uint64_t v49 = swift_bridgeObjectRelease();
  __chkstk_darwin(v49);
  *((void *)&MinX - 4) = v48;
  *(&MinX - 3) = v41;
  *(&MinX - 2) = v40;
  Path.init(_:)();
  uint64_t v50 = v61;
  uint64_t v51 = v62;
  uint64_t v52 = v63;
  uint64_t v53 = v64;
  char v54 = v65;
  uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
  *(void *)a2 = v50;
  *(void *)(a2 + 8) = v51;
  *(void *)(a2 + 16) = v52;
  *(void *)(a2 + 24) = v53;
  *(unsigned char *)(a2 + 32) = v54;
  return result;
}

uint64_t sub_100070578(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ColorRenderingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(v8 + 16) = v9;
  *(void *)(v8 + 24) = v10;
  long long v11 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v8 + 80) = v11;
  *(void *)(v8 + 96) = *(void *)(v2 + 64);
  long long v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v2;
  *(_OWORD *)(v8 + 48) = v12;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  uint64_t v17 = v2;
  (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v7, enum case for ColorRenderingMode.nonLinear(_:), v4);
  sub_1000800F0(v2);
  sub_10000F214(&qword_10051B720);
  sub_10008017C();
  return Canvas.init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)();
}

uint64_t sub_100070708(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v175 = a3;
  uint64_t v176 = a4;
  uint64_t v200 = a1;
  uint64_t v9 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v152 = (unsigned __int8 *)v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v151 = (uint64_t)v148 - v12;
  uint64_t v13 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v159 = (uint64_t)v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v173);
  uint64_t v185 = (char *)v148 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for UUID();
  uint64_t v195 = *(char **)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v198 = (char *)v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v171 = (char *)v148 - v18;
  uint64_t v19 = sub_10000F214(&qword_10051B778);
  __chkstk_darwin(v19 - 8);
  uint64_t v170 = (char *)v148 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for GraphicsContext.ResolvedSymbol();
  uint64_t v193 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v158 = (char *)v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v191);
  uint64_t v190 = (uint64_t)v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v189);
  uint64_t v188 = (uint64_t)v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for CVDetection();
  uint64_t v154 = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  uint64_t v201 = (uint64_t)v148 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v148 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)v148 - v29;
  __chkstk_darwin(v31);
  uint64_t v168 = (uint64_t)v148 - v32;
  uint64_t v197 = type metadata accessor for GraphicsContext.Shading();
  uint64_t v33 = *(void *)(v197 - 8);
  __chkstk_darwin(v197);
  int v35 = (char *)v148 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v174 = (char *)v148 - v37;
  uint64_t v38 = type metadata accessor for CVBundle(0);
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38 - 8);
  uint64_t v186 = (uint64_t)v148 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *a2;
  int v42 = *((unsigned __int8 *)a2 + 8);
  uint64_t v43 = swift_retain();
  int v149 = v42;
  uint64_t v44 = sub_10027CDAC(v43, v42);
  uint64_t v150 = v41;
  swift_release();
  swift_getKeyPath();
  v213[0] = v44;
  v148[1] = sub_10008209C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v45 = *(void *)(v44 + OBJC_IVAR____TtC6Tamale16CameraController__bundles);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v184 = *(void *)(v45 + 16);
  uint64_t v177 = a2;
  double v199 = a5;
  uint64_t v153 = v33;
  if (v184)
  {
    unint64_t v46 = 0;
    uint64_t v181 = 0;
    int v180 = *((unsigned __int8 *)a2 + 48);
    int v179 = *((unsigned __int8 *)a2 + 49);
    uint64_t v178 = v45 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    double v166 = (long long *)&v209;
    uint64_t v167 = &v207;
    uint64_t v196 = (char **)(v33 + 8);
    char v157 = (void (**)(char *, uint64_t, uint64_t))(v195 + 16);
    uint64_t v164 = (void (**)(char *, uint64_t, uint64_t))(v195 + 32);
    uint64_t v165 = &v208;
    unint64_t v162 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48);
    uint64_t v163 = (void (**)(char *, uint64_t))(v195 + 8);
    uint64_t v155 = (void (**)(char *, uint64_t))(v193 + 8);
    uint64_t v156 = (void (**)(char *, uint64_t, uint64_t))(v193 + 32);
    long long v161 = xmmword_10043F400;
    double v192 = a6;
    uint64_t v48 = (uint64_t)v185;
    uint64_t v47 = v186;
    uint64_t v49 = v198;
    double v50 = a6;
    uint64_t v182 = v45;
    uint64_t v183 = v39;
    double v194 = 0.75 / (a5 / a6);
    do
    {
      if (v46 >= *(void *)(v45 + 16))
      {
        __break(1u);
        JUMPOUT(0x100071CA4);
      }
      a6 = v50;
      uint64_t v51 = *(void *)(v39 + 72);
      unint64_t v187 = v46;
      sub_100081408(v178 + v51 * v46, v47, type metadata accessor for CVBundle);
      if (v180)
      {
        sub_10019E198((uint64_t)&v206);
        sub_10000F214(&qword_100521060);
        uint64_t inited = (_OWORD *)swift_initStackObject();
        long long v53 = v206;
        inited[1] = v161;
        inited[2] = v53;
        long long v54 = *v166;
        inited[3] = *(_OWORD *)v167;
        inited[4] = v54;
        inited[5] = *(_OWORD *)v165;
        inited[6] = v53;
        __chkstk_darwin(inited);
        uint64_t v55 = v176;
        v148[-6] = v175;
        v148[-5] = v55;
        v148[-4] = v177;
        double v56 = v199;
        v148[-3] = *(void *)&v199;
        *(double *)&v148[-2] = a6;
        uint64_t v57 = v181;
        uint64_t v58 = sub_1002ED050((void (*)(long long *__return_ptr, long long *))sub_1000802E4, (uint64_t)&v148[-8], (uint64_t)inited);
        uint64_t v181 = v57;
        uint64_t v59 = swift_setDeallocating();
        uint64_t v47 = v186;
        __chkstk_darwin(v59);
        v148[-4] = v58;
        *(double *)&v148[-3] = v56;
        *(double *)&v148[-2] = a6;
        Path.init(_:)();
        swift_bridgeObjectRelease();
        uint64_t v60 = v168;
        sub_10019D408(v168);
        sub_10016122C();
        sub_1000814B0(v60, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v61 = v174;
        static GraphicsContext.Shading.color(_:)();
        swift_release();
        GraphicsContext.stroke(_:with:lineWidth:)();
        uint64_t v195 = *v196;
        ((void (*)(char *, uint64_t))v195)(v61, v197);
        uint64_t v62 = sub_10019DD30()[2];
        swift_bridgeObjectRelease();
        if (v62)
        {
          uint64_t v63 = sub_10019DD30();
          uint64_t v64 = v63[2];
          if (v64)
          {
            uint64_t v65 = *(unsigned __int8 *)(v154 + 80);
            unint64_t v160 = v63;
            uint64_t v66 = (uint64_t)v63 + ((v65 + 32) & ~v65);
            uint64_t v193 = *(void *)(v154 + 72);
            while (2)
            {
              sub_100081408(v66, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
              sub_100081408((uint64_t)v30, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CVDetection);
              switch(swift_getEnumCaseMultiPayload())
              {
                case 1u:
                  uint64_t v204 = type metadata accessor for ParseDetectorResult(0);
                  uint64_t v69 = sub_10008209C(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
                  CGRect v70 = type metadata accessor for ParseDetectorResult;
                  break;
                case 2u:
                  uint64_t v204 = v191;
                  uint64_t v69 = sub_10008209C((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
                  CGRect v70 = type metadata accessor for TextDetectorResult;
                  break;
                case 3u:
                case 4u:
                  uint64_t v204 = type metadata accessor for StreamingBarcodeDetectorResult(0);
                  uint64_t v69 = sub_10008209C(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
                  CGRect v70 = type metadata accessor for StreamingBarcodeDetectorResult;
                  break;
                case 5u:
                  uint64_t v204 = type metadata accessor for StreamingTextDetectorResult(0);
                  uint64_t v69 = sub_10008209C((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
                  CGRect v70 = type metadata accessor for StreamingTextDetectorResult;
                  break;
                default:
                  uint64_t v204 = v189;
                  uint64_t v69 = sub_10008209C(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
                  CGRect v70 = type metadata accessor for ObjectDetectorResult;
                  break;
              }
              CGRect v71 = v70;
              uint64_t v205 = v69;
              CGRect v72 = sub_100040120(v203);
              sub_100080A20((uint64_t)v27, (uint64_t)v72, v71);
              uint64_t v73 = v204;
              uint64_t v74 = v205;
              sub_10000F3B0(v203, v204);
              (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v74 + 64))(v211, v73, v74);
              _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v203);
              double v75 = *(double *)v211;
              uint64_t v76 = v211[1];
              double v77 = *(double *)&v211[2];
              uint64_t v78 = v211[3];
              double v79 = *(double *)&v211[6];
              uint64_t v80 = v211[7];
              double v81 = *(double *)&v211[4];
              uint64_t v82 = v211[5];
              v203[0] = (uint64_t)_swiftEmptyArrayStorage;
              uint64_t v83 = sub_100040848(0, 5, 0);
              uint64_t v84 = v203[0];
              unint64_t v86 = *(void *)(v203[0] + 16);
              unint64_t v85 = *(void *)(v203[0] + 24);
              unint64_t v87 = v85 >> 1;
              unint64_t v88 = v86 + 1;
              if (v85 >> 1 <= v86)
              {
                uint64_t v83 = sub_100040848(v85 > 1, v86 + 1, 1);
                uint64_t v84 = v203[0];
                unint64_t v85 = *(void *)(v203[0] + 24);
                unint64_t v87 = v85 >> 1;
              }
              double v89 = v194;
              double v90 = -0.5;
              double v91 = 0.5;
              double v92 = v194 * (v75 + -0.5) + 0.5;
              *(void *)(v84 + 16) = v88;
              uint64_t v93 = v84 + 16 * v86;
              *(double *)(v93 + 32) = v92;
              *(void *)(v93 + 40) = v76;
              v203[0] = v84;
              int64_t v94 = v86 + 2;
              if (v87 <= v88)
              {
                uint64_t v83 = sub_100040848(v85 > 1, v94, 1);
                double v91 = 0.5;
                double v90 = -0.5;
                double v89 = v194;
                uint64_t v84 = v203[0];
              }
              *(void *)(v84 + 16) = v94;
              uint64_t v95 = v84 + 16 * v88;
              *(double *)(v95 + 32) = v89 * (v77 + v90) + v91;
              *(void *)(v95 + 40) = v78;
              v203[0] = v84;
              unint64_t v97 = *(void *)(v84 + 16);
              unint64_t v96 = *(void *)(v84 + 24);
              unint64_t v98 = v96 >> 1;
              unint64_t v99 = v97 + 1;
              if (v96 >> 1 <= v97)
              {
                uint64_t v83 = sub_100040848(v96 > 1, v97 + 1, 1);
                double v91 = 0.5;
                double v90 = -0.5;
                double v89 = v194;
                uint64_t v84 = v203[0];
                unint64_t v96 = *(void *)(v203[0] + 24);
                unint64_t v98 = v96 >> 1;
              }
              double v100 = v199;
              *(void *)(v84 + 16) = v99;
              uint64_t v101 = v84 + 16 * v97;
              *(double *)(v101 + 32) = v89 * (v79 + v90) + v91;
              *(void *)(v101 + 40) = v80;
              v203[0] = v84;
              int64_t v102 = v97 + 2;
              if (v98 <= v99)
              {
                uint64_t v83 = sub_100040848(v96 > 1, v102, 1);
                double v91 = 0.5;
                double v90 = -0.5;
                double v89 = v194;
                uint64_t v84 = v203[0];
              }
              *(void *)(v84 + 16) = v102;
              uint64_t v103 = v84 + 16 * v99;
              *(double *)(v103 + 32) = v89 * (v81 + v90) + v91;
              *(void *)(v103 + 40) = v82;
              v203[0] = v84;
              unint64_t v105 = *(void *)(v84 + 16);
              unint64_t v104 = *(void *)(v84 + 24);
              if (v105 >= v104 >> 1)
              {
                uint64_t v83 = sub_100040848(v104 > 1, v105 + 1, 1);
                uint64_t v84 = v203[0];
              }
              *(void *)(v84 + 16) = v105 + 1;
              uint64_t v106 = v84 + 16 * v105;
              *(double *)(v106 + 32) = v92;
              *(void *)(v106 + 40) = v76;
              __chkstk_darwin(v83);
              v148[-4] = v84;
              *(double *)&v148[-3] = v100;
              *(double *)&v148[-2] = v107;
              a6 = v107;
              Path.init(_:)();
              swift_release();
              sub_100081408((uint64_t)v30, v201, (uint64_t (*)(void))type metadata accessor for CVDetection);
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              uint64_t v49 = v198;
              switch(EnumCaseMultiPayload)
              {
                case 1:
                  static Color.indigo.getter();
                  goto LABEL_11;
                case 2:
                  uint64_t v113 = v190;
                  sub_100080A20(v201, v190, type metadata accessor for TextDetectorResult);
                  if (*(unsigned char *)(v113 + *(int *)(v191 + 56)))
                  {
                    static Color.mint.getter();
                  }
                  else if (*(void *)(*(void *)(v113 + *(int *)(v191 + 48)) + 16))
                  {
                    static Color.yellow.getter();
                  }
                  else
                  {
                    static Color.orange.getter();
                  }
                  CGRect v67 = type metadata accessor for TextDetectorResult;
                  uint64_t v68 = v190;
                  goto LABEL_12;
                case 3:
                case 4:
                  sub_1000814B0(v201, (uint64_t (*)(void))type metadata accessor for CVDetection);
                  static Color.green.getter();
                  goto LABEL_13;
                case 5:
                  static Color.purple.getter();
LABEL_11:
                  CGRect v67 = (uint64_t (*)(void))type metadata accessor for CVDetection;
                  uint64_t v68 = v201;
                  goto LABEL_12;
                default:
                  uint64_t v109 = v188;
                  sub_100080A20(v201, v188, type metadata accessor for ObjectDetectorResult);
                  uint64_t v110 = (uint64_t *)(v109 + *(int *)(v189 + 28));
                  uint64_t v111 = *v110;
                  uint64_t v112 = v110[1];
                  swift_bridgeObjectRetain();
                  switch(sub_100160B94(v111, v112))
                  {
                    case 1u:
                      static Color.yellow.getter();
                      break;
                    case 2u:
                      static Color.red.getter();
                      break;
                    case 3u:
                      static Color.indigo.getter();
                      break;
                    case 4u:
                    case 6u:
                      static Color.gray.getter();
                      break;
                    case 5u:
                      static Color.green.getter();
                      break;
                    case 7u:
                      static Color.blue.getter();
                      break;
                    case 8u:
                      static Color.brown.getter();
                      break;
                    case 9u:
                      static Color.pink.getter();
                      break;
                    default:
                      static Color.mint.getter();
                      break;
                  }
                  CGRect v67 = type metadata accessor for ObjectDetectorResult;
                  uint64_t v68 = v188;
LABEL_12:
                  sub_1000814B0(v68, v67);
LABEL_13:
                  static GraphicsContext.Shading.color(_:)();
                  swift_release();
                  GraphicsContext.stroke(_:with:lineWidth:)();
                  sub_100080294((uint64_t)v212);
                  ((void (*)(char *, uint64_t))v195)(v35, v197);
                  sub_1000814B0((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CVDetection);
                  v66 += v193;
                  if (--v64) {
                    continue;
                  }
                  goto LABEL_50;
              }
            }
          }
LABEL_50:
          swift_bridgeObjectRelease();
          uint64_t v47 = v186;
        }
        sub_100080294((uint64_t)&v210);
        uint64_t v48 = (uint64_t)v185;
      }
      sub_10019E198((uint64_t)v213);
      v214.origin.CGFloat x = sub_1003FD844();
      CGFloat x = v214.origin.x;
      CGFloat y = v214.origin.y;
      CGFloat width = v214.size.width;
      CGFloat height = v214.size.height;
      CGRectGetMidX(v214);
      v215.origin.CGFloat x = x;
      v215.origin.CGFloat y = y;
      v215.size.CGFloat width = width;
      v215.size.CGFloat height = height;
      CGRectGetMidY(v215);
      if (v179)
      {
        sub_100081408(v47, v48, type metadata accessor for CVBundle.BundleType);
        int v118 = swift_getEnumCaseMultiPayload();
        id v119 = v164;
        if (v118 == 1)
        {
          uint64_t v120 = *v164;
          uint64_t v121 = v49;
          uint64_t v122 = v48;
          uint64_t v123 = v49;
          uint64_t v124 = v172;
          (*v164)(v121, v122, v172);
        }
        else
        {
          uint64_t v125 = v159;
          sub_100080A20(v48, v159, type metadata accessor for CVTrackSnapshot);
          uint64_t v126 = v49;
          uint64_t v123 = v49;
          uint64_t v124 = v172;
          (*v157)(v126, v125, v172);
          sub_1000814B0(v125, type metadata accessor for CVTrackSnapshot);
          uint64_t v120 = *v119;
        }
        uint64_t v127 = v171;
        v120(v171, (uint64_t)v123, v124);
        sub_10008209C((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v128 = (uint64_t)v170;
        GraphicsContext.resolveSymbol<A>(id:)();
        (*v163)(v127, v124);
        uint64_t v129 = v169;
        if ((*v162)(v128, 1, v169) == 1)
        {
          uint64_t v47 = v186;
          sub_1000814B0(v186, type metadata accessor for CVBundle);
          sub_10000FBD8(v128, &qword_10051B778);
        }
        else
        {
          uint64_t v130 = v158;
          (*v156)(v158, v128, v129);
          static UnitPoint.center.getter();
          GraphicsContext.draw(_:at:anchor:)();
          (*v155)(v130, v129);
          uint64_t v47 = v186;
          sub_1000814B0(v186, type metadata accessor for CVBundle);
        }
        uint64_t v49 = v198;
        uint64_t v48 = (uint64_t)v185;
      }
      else
      {
        sub_1000814B0(v47, type metadata accessor for CVBundle);
      }
      unint64_t v46 = v187 + 1;
      uint64_t v39 = v183;
      uint64_t v45 = v182;
      double v50 = a6;
    }
    while (v187 + 1 != v184);
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v132 = v153;
  if (*((unsigned char *)v177 + 50))
  {
    uint64_t v133 = swift_retain();
    char v134 = v149;
    uint64_t v135 = sub_10027CDAC(v133, v149);
    swift_release();
    swift_getKeyPath();
    v203[0] = v135;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v136 = v135 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
    swift_beginAccess();
    uint64_t v137 = v136;
    uint64_t v138 = v151;
    sub_100081408(v137, v151, type metadata accessor for CameraControllerConfiguration);
    swift_release();
    double v139 = *(double *)(v138 + 8);
    double v140 = *(double *)(v138 + 16);
    sub_1000814B0(v138, type metadata accessor for CameraControllerConfiguration);
    uint64_t v141 = swift_retain();
    uint64_t v142 = sub_10027CDAC(v141, v134);
    swift_release();
    swift_getKeyPath();
    v203[0] = v142;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v143 = v142 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
    swift_beginAccess();
    int v144 = v152;
    sub_100081408(v143, (uint64_t)v152, type metadata accessor for CameraControllerConfiguration);
    swift_release();
    LODWORD(v143) = *v144;
    sub_1000814B0((uint64_t)v144, type metadata accessor for CameraControllerConfiguration);
    if (v143) {
      double v145 = 0.16;
    }
    else {
      double v145 = 0.2;
    }
    uint64_t v146 = type metadata accessor for AnnotatedVideoView();
    sub_10007004C(v146, (uint64_t)v203, v139, v140, 0.2, v145, v199, a6);
    static Color.green.getter();
    uint64_t v147 = v174;
    static GraphicsContext.Shading.color(_:)();
    swift_release();
    GraphicsContext.stroke(_:with:lineWidth:)();
    sub_100080294((uint64_t)v203);
    return (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v147, v197);
  }
  return result;
}

uint64_t sub_100071CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a1 + 8);
  uint64_t v7 = swift_retain();
  sub_10027CDAC(v7, v6);
  swift_release();
  swift_getKeyPath();
  sub_10008209C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v8 + 80) = v9;
  *(void *)(v8 + 96) = *(void *)(a1 + 64);
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 48) = v10;
  sub_1000800F0(a1);
  sub_10000F214(&qword_10051B740);
  type metadata accessor for UUID();
  sub_10000F214(&qword_10051B738);
  sub_100013AA8(&qword_10051B748, &qword_10051B740);
  sub_100013AA8(&qword_10051B730, &qword_10051B738);
  sub_10008209C(&qword_10051B750, (void (*)(uint64_t))type metadata accessor for CVBundle);
  return ForEach<>.init(_:content:)();
}

uint64_t sub_100071F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v80 = a3;
  uint64_t v81 = a2;
  uint64_t v4 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v68 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v74);
  double v75 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  __chkstk_darwin(v7);
  CGRect v71 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  double v79 = (char *)&v66 - v10;
  uint64_t v11 = type metadata accessor for CVBundle(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v66 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000F214(&qword_10051B758);
  __chkstk_darwin(v82);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_10051B768);
  __chkstk_darwin(v19 - 8);
  uint64_t v67 = (uint64_t)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v66 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v66 - v25;
  uint64_t v27 = type metadata accessor for CVDetection();
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_10000F214(&qword_10051B770);
  __chkstk_darwin(v85);
  uint64_t v69 = (char *)&v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000F214(&qword_10051B738);
  __chkstk_darwin(v77);
  uint64_t v78 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = v29;
  sub_10019D408((uint64_t)v29);
  uint64_t v70 = a1;
  sub_100081408(a1, (uint64_t)v26, type metadata accessor for CVBundle);
  uint64_t v83 = (char *)v12;
  uint64_t v84 = v11;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v33 = 1;
  v32(v26, 0, 1, v11);
  LOBYTE(v11) = *(unsigned char *)(v81 + 8);
  uint64_t v34 = swift_retain();
  uint64_t v35 = sub_10027CDAC(v34, v11);
  swift_release();
  swift_getKeyPath();
  uint64_t v86 = v35;
  sub_10008209C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v36 = v35 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v36, (uint64_t)v18, &qword_10051B760);
  uint64_t v37 = sub_10000F214(&qword_10051A060);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v18, 1, v37))
  {
    sub_100081408((uint64_t)v18, (uint64_t)v23, type metadata accessor for CVBundle);
    uint64_t v33 = 0;
  }
  sub_10000FBD8((uint64_t)v18, &qword_10051B760);
  uint64_t v38 = v33;
  uint64_t v39 = v84;
  v32(v23, v38, 1, v84);
  swift_release();
  uint64_t v40 = (uint64_t)&v15[*(int *)(v82 + 48)];
  sub_10000FB74((uint64_t)v26, (uint64_t)v15, &qword_10051B768);
  sub_10000FB74((uint64_t)v23, v40, &qword_10051B768);
  uint64_t v41 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v83 + 6);
  uint64_t v42 = (uint64_t)v26;
  if (v41((uint64_t)v15, 1, v39) == 1)
  {
    sub_10000FBD8((uint64_t)v23, &qword_10051B768);
    sub_10000FBD8((uint64_t)v26, &qword_10051B768);
    if (v41(v40, 1, v39) == 1)
    {
      sub_10000FBD8((uint64_t)v15, &qword_10051B768);
      char v43 = 1;
      uint64_t v45 = v72;
      uint64_t v44 = v73;
      uint64_t v47 = v70;
      unint64_t v46 = v71;
      uint64_t v48 = (uint64_t)v75;
      uint64_t v49 = (uint64_t)v76;
      uint64_t v50 = (uint64_t)v69;
      goto LABEL_17;
    }
    uint64_t v53 = (uint64_t)v15;
    long long v54 = &qword_10051B758;
    uint64_t v45 = v72;
    uint64_t v44 = v73;
    uint64_t v47 = v70;
    unint64_t v46 = v71;
    uint64_t v48 = (uint64_t)v75;
    uint64_t v50 = (uint64_t)v69;
    goto LABEL_15;
  }
  uint64_t v83 = v23;
  uint64_t v51 = v67;
  sub_10000FB74((uint64_t)v15, v67, &qword_10051B768);
  if (v41(v40, 1, v39) == 1)
  {
    uint64_t v52 = v42;
    uint64_t v53 = (uint64_t)v15;
    long long v54 = &qword_10051B758;
LABEL_14:
    uint64_t v45 = v72;
    uint64_t v44 = v73;
    uint64_t v47 = v70;
    unint64_t v46 = v71;
    uint64_t v50 = (uint64_t)v69;
    sub_10000FBD8((uint64_t)v83, &qword_10051B768);
    sub_10000FBD8(v52, &qword_10051B768);
    sub_1000814B0(v51, type metadata accessor for CVBundle);
    uint64_t v48 = (uint64_t)v75;
LABEL_15:
    sub_10000FBD8(v53, v54);
    uint64_t v49 = (uint64_t)v76;
    goto LABEL_16;
  }
  uint64_t v55 = v66;
  sub_100080A20(v40, v66, type metadata accessor for CVBundle);
  if ((sub_1001B4C38(v51, v55) & 1) == 0
    || !sub_1003E09E8(*(void *)(v51 + *(int *)(v39 + 20)), *(void *)(v55 + *(int *)(v39 + 20))))
  {
    uint64_t v52 = v42;
    uint64_t v53 = (uint64_t)v15;
    sub_1000814B0(v55, type metadata accessor for CVBundle);
    long long v54 = &qword_10051B768;
    goto LABEL_14;
  }
  BOOL v56 = sub_1003E1070(*(void *)(v51 + *(int *)(v39 + 24)));
  sub_1000814B0(v55, type metadata accessor for CVBundle);
  sub_10000FBD8((uint64_t)v83, &qword_10051B768);
  sub_10000FBD8(v42, &qword_10051B768);
  sub_1000814B0(v51, type metadata accessor for CVBundle);
  sub_10000FBD8((uint64_t)v15, &qword_10051B768);
  uint64_t v45 = v72;
  uint64_t v44 = v73;
  uint64_t v47 = v70;
  unint64_t v46 = v71;
  uint64_t v48 = (uint64_t)v75;
  uint64_t v49 = (uint64_t)v76;
  uint64_t v50 = (uint64_t)v69;
  if (v56)
  {
    char v43 = 1;
    goto LABEL_17;
  }
LABEL_16:
  char v43 = 0;
LABEL_17:
  *(void *)uint64_t v50 = swift_getKeyPath();
  *(unsigned char *)(v50 + 8) = 0;
  uint64_t v57 = v85;
  sub_100080A20(v49, v50 + *(int *)(v85 + 36), (uint64_t (*)(void))type metadata accessor for CVDetection);
  *(unsigned char *)(v50 + *(int *)(v57 + 40)) = v43;
  uint64_t v58 = v50 + *(int *)(v57 + 44);
  *(void *)uint64_t v58 = 0;
  *(unsigned char *)(v58 + 8) = 1;
  sub_100081408(v47, v48, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    v59(v46, v48, v44);
  }
  else
  {
    uint64_t v60 = v68;
    sub_100080A20(v48, v68, type metadata accessor for CVTrackSnapshot);
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v60, v44);
    sub_1000814B0(v60, type metadata accessor for CVTrackSnapshot);
    uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
  }
  uint64_t v62 = v77;
  uint64_t v61 = (uint64_t)v78;
  uint64_t v64 = v79;
  uint64_t v63 = v80;
  v59(v79, (uint64_t)v46, v44);
  sub_10000FB74(v50, v61, &qword_10051B770);
  v59((char *)(v61 + *(int *)(v62 + 52)), (uint64_t)v64, v44);
  sub_10000FBD8(v50, &qword_10051B770);
  return sub_10000FC34(v61, v63, &qword_10051B738);
}

uint64_t sub_100072918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v28 = a2;
  uint64_t v25 = sub_10000F69C(&qword_10051B6F8);
  uint64_t v5 = *(void *)(a1 + 16);
  sub_10000F69C(&qword_10051B700);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for _OverlayModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v23[-v11];
  int v24 = *(unsigned __int8 *)(v3 + 54);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(v13 + 16) = v5;
  *(void *)(v13 + 24) = v14;
  long long v15 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v13 + 80) = v15;
  *(void *)(v13 + 96) = *(void *)(v3 + 64);
  long long v16 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v13 + 48) = v16;
  type metadata accessor for CameraController();
  sub_1000800F0(v3);
  sub_10008209C((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v34 = Environment.init<A>(_:)();
  char v35 = v17 & 1;
  uint64_t v36 = sub_1000800E4;
  uint64_t v37 = v13;
  char v38 = v24;
  uint64_t v29 = v5;
  uint64_t v30 = v14;
  uint64_t v31 = v3;
  static Alignment.center.getter();
  uint64_t v18 = sub_100013AA8(&qword_10051B710, &qword_10051B6F8);
  View.overlay<A>(alignment:content:)();
  swift_release();
  swift_release();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v32 = v18;
  uint64_t v33 = v19;
  uint64_t v20 = swift_getWitnessTable();
  sub_100224E4C(v9, v6, v20);
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v21(v9, v6);
  sub_100224E4C(v12, v6, v20);
  return ((uint64_t (*)(unsigned char *, uint64_t))v21)(v12, v6);
}

uint64_t sub_100072C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = sub_10000F214(&qword_10051B780);
  __chkstk_darwin(v61);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000F214(&qword_10051B788);
  __chkstk_darwin(v57);
  uint64_t v11 = (uint64_t *)((char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for ColorScheme();
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000F214(&qword_10051B790);
  __chkstk_darwin(v56);
  long long v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_10000F214(&qword_10051B798);
  __chkstk_darwin(v60);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v51 - v20;
  if (qword_100517F58 != -1)
  {
    uint64_t v55 = (char *)&v51 - v20;
    swift_once();
    uint64_t v21 = v55;
  }
  if (byte_10055E408 == 1)
  {
    uint64_t v55 = v21;
    uint64_t v22 = static Alignment.center.getter();
    uint64_t v52 = v23;
    uint64_t v53 = v22;
    sub_100073438(a1, (uint64_t)v62);
    v64[13] = v62[12];
    v64[14] = v63[0];
    *(_OWORD *)((char *)&v64[14] + 9) = *(_OWORD *)((char *)v63 + 9);
    v64[9] = v62[8];
    v64[10] = v62[9];
    v64[12] = v62[11];
    v64[11] = v62[10];
    v64[5] = v62[4];
    v64[6] = v62[5];
    v64[8] = v62[7];
    v64[7] = v62[6];
    v64[1] = v62[0];
    v64[2] = v62[1];
    v64[4] = v62[3];
    v64[3] = v62[2];
    uint64_t v24 = swift_allocObject();
    uint64_t v54 = a4;
    uint64_t v25 = v24;
    *(void *)(v24 + 16) = a2;
    *(void *)(v24 + 24) = a3;
    long long v26 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v24 + 80) = v26;
    *(void *)(v24 + 96) = *(void *)(a1 + 64);
    long long v27 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v24 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v24 + 48) = v27;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = a2;
    *(void *)(v28 + 24) = a3;
    long long v29 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v28 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v28 + 80) = v29;
    *(void *)(v28 + 96) = *(void *)(a1 + 64);
    long long v30 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v28 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v28 + 48) = v30;
    *(void *)&v64[0] = v53;
    *((void *)&v64[0] + 1) = v52;
    *(void *)&v64[16] = sub_100080648;
    *((void *)&v64[16] + 1) = v25;
    v64[17] = 0uLL;
    *(void *)&v64[18] = sub_100080658;
    *((void *)&v64[18] + 1) = v28;
    memcpy(v67, v64, sizeof(v67));
    sub_1000800F0(a1);
    sub_1000800F0(a1);
    static Alignment.center.getter();
    sub_100225360(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v66, 0.0, 1, INFINITY, 0);
    sub_1000807B8((uint64_t)v64);
    memcpy(v65, v66, sizeof(v65));
    char v31 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    memcpy(v66, v65, 0x1A0uLL);
    LOBYTE(v66[26]) = v31;
    *((void *)&v66[26] + 1) = v33;
    *(void *)&v66[27] = v35;
    *((void *)&v66[27] + 1) = v37;
    *(void *)&v66[28] = v39;
    BYTE8(v66[28]) = 0;
    uint64_t v41 = v58;
    uint64_t v40 = v59;
    (*(void (**)(char *, void, uint64_t))(v58 + 104))(v14, enum case for ColorScheme.dark(_:), v59);
    uint64_t KeyPath = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v11 + *(int *)(v57 + 28), v14, v40);
    *uint64_t v11 = KeyPath;
    sub_10000FB74((uint64_t)v11, (uint64_t)&v16[*(int *)(v56 + 36)], &qword_10051B788);
    memcpy(v16, v66, 0x1C9uLL);
    sub_10008068C((uint64_t)v66);
    sub_10000FBD8((uint64_t)v11, &qword_10051B788);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v40);
    sub_1000807B8((uint64_t)v65);
    uint64_t v43 = static SafeAreaRegions.all.getter();
    char v44 = static Edge.Set.all.getter();
    sub_10000FB74((uint64_t)v16, (uint64_t)v18, &qword_10051B790);
    uint64_t v45 = &v18[*(int *)(v60 + 36)];
    *(void *)uint64_t v45 = v43;
    v45[8] = v44;
    sub_10000FBD8((uint64_t)v16, &qword_10051B790);
    uint64_t v46 = (uint64_t)v55;
    sub_10000FC34((uint64_t)v18, (uint64_t)v55, &qword_10051B798);
    sub_10000FB74(v46, (uint64_t)v9, &qword_10051B798);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10051B7A8);
    sub_100081068(&qword_10051B7B0, &qword_10051B798, (void (*)(void))sub_1000803D8);
    sub_100080F2C(&qword_10051B820, &qword_10051B7A8);
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8(v46, &qword_10051B798);
  }
  else
  {
    *(void *)&v66[0] = static Color.black.getter();
    sub_100080384();
    uint64_t v48 = Color.init<A>(_:)();
    uint64_t v49 = static SafeAreaRegions.all.getter();
    char v50 = static Edge.Set.all.getter();
    *(void *)uint64_t v9 = v48;
    *((void *)v9 + 1) = v49;
    v9[16] = v50;
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10051B7A8);
    sub_100081068(&qword_10051B7B0, &qword_10051B798, (void (*)(void))sub_1000803D8);
    sub_100080F2C(&qword_10051B820, &qword_10051B7A8);
    return _ConditionalContent<>.init(storage:)();
  }
}

double sub_100073438@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  sub_1000735D4((uint64_t)v11);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v8) {
    double v5 = 1.0;
  }
  else {
    double v5 = 0.0;
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 16);
  State.wrappedValue.getter();
  *(_OWORD *)&v10[135] = v11[8];
  *(_OWORD *)&v10[151] = v11[9];
  *(_OWORD *)&v10[167] = v12[0];
  *(_OWORD *)&v10[176] = *(_OWORD *)((char *)v12 + 9);
  *(_OWORD *)&v10[71] = v11[4];
  *(_OWORD *)&v10[87] = v11[5];
  *(_OWORD *)&v10[103] = v11[6];
  *(_OWORD *)&v10[119] = v11[7];
  *(_OWORD *)&v10[7] = v11[0];
  *(_OWORD *)&v10[23] = v11[1];
  *(_OWORD *)&v10[39] = v11[2];
  *(_OWORD *)&v10[55] = v11[3];
  uint64_t v6 = static Animation.linear(duration:)();
  State.wrappedValue.getter();
  *(_OWORD *)(a2 + 145) = *(_OWORD *)&v10[128];
  *(_OWORD *)(a2 + 161) = *(_OWORD *)&v10[144];
  *(_OWORD *)(a2 + 177) = *(_OWORD *)&v10[160];
  *(_OWORD *)(a2 + 193) = *(_OWORD *)&v10[176];
  *(_OWORD *)(a2 + 81) = *(_OWORD *)&v10[64];
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v10[80];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a2 + 129) = *(_OWORD *)&v10[112];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)v10;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v10[16];
  double result = *(double *)&v10[32];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v10[32];
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0x4020000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 65) = *(_OWORD *)&v10[48];
  *(double *)(a2 + 216) = v5;
  *(void *)(a2 + 224) = v6;
  *(unsigned char *)(a2 + 232) = v9;
  return result;
}

uint64_t sub_1000735D4@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.headline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  sub_100012FAC(v2, v4, v6);
  swift_bridgeObjectRelease();
  static HierarchicalShapeStyle.primary.getter();
  uint64_t v12 = Text.foregroundStyle<A>(_:)();
  uint64_t v56 = v13;
  uint64_t v57 = v12;
  uint64_t v58 = v14;
  char v52 = v15 & 1;
  sub_100012FAC(v7, v9, v11 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  static Font.subheadline.getter();
  uint64_t v21 = Text.font(_:)();
  uint64_t v23 = v22;
  char v25 = v24;
  swift_release();
  sub_100012FAC(v16, v18, v20);
  swift_bridgeObjectRelease();
  static HierarchicalShapeStyle.secondary.getter();
  uint64_t v49 = Text.foregroundStyle<A>(_:)();
  uint64_t v50 = v26;
  uint64_t v51 = v27;
  char v47 = v28 & 1;
  sub_100012FAC(v21, v23, v25 & 1);
  swift_bridgeObjectRelease();
  uint64_t v48 = swift_getKeyPath();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v29 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  static Font.subheadline.getter();
  uint64_t v34 = Text.font(_:)();
  uint64_t v36 = v35;
  LOBYTE(v23) = v37;
  swift_release();
  sub_100012FAC(v29, v31, v33);
  swift_bridgeObjectRelease();
  *(_DWORD *)uint64_t v65 = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v38 = Text.foregroundStyle<A>(_:)();
  uint64_t v44 = v39;
  uint64_t v45 = v38;
  uint64_t v55 = v40;
  LOBYTE(v29) = v41 & 1;
  char v46 = v41 & 1;
  sub_100012FAC(v34, v36, v23 & 1);
  swift_bridgeObjectRelease();
  uint64_t v54 = swift_getKeyPath();
  char v42 = static Edge.Set.top.getter();
  *(_DWORD *)(a1 + 17) = *(_DWORD *)v65;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)&v65[3];
  *(_DWORD *)(a1 + 41) = *(_DWORD *)v64;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)&v64[3];
  *(_DWORD *)(a1 + 65) = *(_DWORD *)v63;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v62[3];
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v62;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a1 + 113) = *(_DWORD *)v61;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)&v60[3];
  *(_DWORD *)(a1 + 137) = *(_DWORD *)v60;
  *(_DWORD *)(a1 + 148) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a1 + 145) = *(_DWORD *)v59;
  *(void *)a1 = v57;
  *(void *)(a1 + 8) = v56;
  *(unsigned char *)(a1 + 16) = v52;
  *(void *)(a1 + 24) = v58;
  *(void *)(a1 + 32) = KeyPath;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v49;
  *(void *)(a1 + 56) = v50;
  *(unsigned char *)(a1 + 64) = v47;
  *(void *)(a1 + 72) = v51;
  *(void *)(a1 + 80) = v48;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = v45;
  *(void *)(a1 + 104) = v44;
  *(unsigned char *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v55;
  *(void *)(a1 + 128) = v54;
  *(unsigned char *)(a1 + 136) = 1;
  *(unsigned char *)(a1 + 144) = v42;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 184) = 1;
  sub_1000807A8(v57, v56, v52);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000807A8(v49, v50, v47);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000807A8(v45, v44, v46);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100012FAC(v45, v44, v46);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100012FAC(v49, v50, v47);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100012FAC(v57, v56, v52);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100073B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v25 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v24 - v15;
  long long aBlock = *(_OWORD *)(a1 + 32);
  LOBYTE(v31) = 1;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  long long aBlock = *(_OWORD *)(a1 + 16);
  LOBYTE(v31) = 0;
  State.wrappedValue.setter();
  sub_10002E8B0();
  uint64_t v17 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  char v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v27;
  *(void *)(v18 + 16) = v26;
  *(void *)(v18 + 24) = v19;
  long long v20 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v18 + 80) = v20;
  *(void *)(v18 + 96) = *(void *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v18 + 48) = v21;
  uint64_t v35 = sub_100080994;
  uint64_t v36 = v18;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  char v33 = sub_1002EDB98;
  uint64_t v34 = &unk_1004E8480;
  uint64_t v22 = _Block_copy(&aBlock);
  sub_1000800F0(a1);
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_10008209C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  v24(v16, v25);
  return swift_release();
}

void sub_100073F34(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v26 - v18;
  if (a1)
  {
    if (a1 != 1)
    {
      long long aBlock = *(_OWORD *)(a2 + 32);
      LOBYTE(v33) = 1;
      sub_10000F214(&qword_100522EA0);
      uint64_t v28 = v7;
      State.wrappedValue.setter();
      long long aBlock = *(_OWORD *)(a2 + 16);
      LOBYTE(v33) = 0;
      State.wrappedValue.setter();
      sub_10002E8B0();
      uint64_t v26 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v14 + 8);
      v27(v16, v13);
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = v30;
      *(void *)(v20 + 16) = v29;
      *(void *)(v20 + 24) = v21;
      long long v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v20 + 64) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v20 + 80) = v22;
      *(void *)(v20 + 96) = *(void *)(a2 + 64);
      long long v23 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v20 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v20 + 48) = v23;
      char v37 = sub_1000808D4;
      uint64_t v38 = v20;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v35 = sub_1002EDB98;
      uint64_t v36 = &unk_1004E8430;
      char v24 = _Block_copy(&aBlock);
      sub_1000800F0(a2);
      static DispatchQoS.unspecified.getter();
      char v33 = _swiftEmptyArrayStorage;
      sub_10008209C((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000F214(&qword_10051A960);
      sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v25 = (void *)v26;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v6);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
      v27(v19, v13);
      swift_release();
    }
  }
  else
  {
    long long aBlock = *(_OWORD *)(a2 + 32);
    LOBYTE(v33) = 0;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
    long long aBlock = *(_OWORD *)(a2 + 16);
    LOBYTE(v33) = 0;
    State.wrappedValue.setter();
  }
}

uint64_t sub_1000743B4()
{
  return swift_release();
}

uint64_t sub_100074418()
{
  sub_10000F214(&qword_100522EA0);
  uint64_t result = State.wrappedValue.getter();
  if (v1 == 1) {
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_10007449C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000F69C(&qword_10051B700);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ZStack();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v16[-v11];
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a1;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100224E4C(v9, v6, WitnessTable);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  sub_100224E4C(v12, v6, WitnessTable);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v12, v6);
}

uint64_t sub_10007468C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v7 = sub_10000F214(&qword_10051B700);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v28 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t v26 = a1;
  (*(void (**)(double))(a1 + 56))(v18);
  sub_100224E4C(v16, a2, a3);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v16, a2);
  uint64_t v21 = type metadata accessor for AnnotatedVideoView();
  sub_100070578(v21);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, a2);
  v33[0] = v16;
  long long v22 = v28;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v28, v12, v7);
  v33[1] = v22;
  v32[0] = a2;
  v32[1] = v7;
  uint64_t v30 = a3;
  uint64_t v31 = sub_100013AA8(&qword_10051B718, &qword_10051B700);
  sub_100059B74((uint64_t)v33, 2uLL, (uint64_t)v32);
  long long v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v12, v7);
  char v24 = (uint64_t (*)(char *, uint64_t))v27;
  v27(v20, a2);
  v23(v22, v7);
  return v24(v16, a2);
}

uint64_t sub_10007495C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100072918(a1, a2);
}

void *sub_1000749A0@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1000749C0(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1000749CC(void *a1@<X8>)
{
  *a1 = &off_1004E51A0;
}

uint64_t sub_1000749DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v27 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = sub_10000F214(&qword_10051BA10);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051BA00);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000F214(&qword_10051B9D8);
  __chkstk_darwin(v28);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
  *(void *)(v13 + 8) = 0x4028000000000000;
  *(unsigned char *)(v13 + 16) = 0;
  sub_10000F214(&qword_10051BA18);
  sub_100074D1C(a2, a1);
  LOBYTE(a1) = static Edge.Set.all.getter();
  sub_10000FB74(v13, (uint64_t)v17, &qword_10051BA10);
  uint64_t v20 = &v17[*(int *)(v15 + 44)];
  *uint64_t v20 = a1;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  unsigned char v20[40] = 1;
  sub_10000FBD8(v13, &qword_10051BA10);
  sub_10027CA80((uint64_t)v10);
  uint64_t v21 = v27;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.light(_:), v27);
  LOBYTE(v13) = static ColorScheme.== infix(_:_:)();
  long long v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v7, v21);
  v22(v10, v21);
  if (v13) {
    static Color.white.getter();
  }
  else {
    static Color.black.getter();
  }
  uint64_t v23 = Color.opacity(_:)();
  swift_release();
  sub_10000FB74((uint64_t)v17, (uint64_t)v19, &qword_10051BA00);
  char v24 = &v19[*(int *)(v28 + 36)];
  *(void *)char v24 = v23;
  *((_WORD *)v24 + 4) = 256;
  sub_10000FBD8((uint64_t)v17, &qword_10051BA00);
  return sub_10000FC34((uint64_t)v19, v29, &qword_10051B9D8);
}

uint64_t sub_100074D1C(uint64_t a1, uint64_t a2)
{
  char v3 = (char *)(a1 + *(int *)(type metadata accessor for BundleTextDetailView() + 28));
  char v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  LOBYTE(v9[0]) = v4;
  v9[1] = v5;
  sub_10000F214(&qword_10051BA20);
  State.wrappedValue.getter();
  uint64_t v6 = *(int *)(type metadata accessor for TextDetectorResult(0) + 44);
  uint64_t v7 = *(void *)(a2 + v6);
  if (v10 == 1)
  {
    v9[0] = *(void *)(a2 + v6);
    swift_bridgeObjectRetain_n();
    sub_1000795AC(v9);
    swift_bridgeObjectRelease();
    uint64_t v7 = v9[0];
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v9[0] = v7;
  swift_getKeyPath();
  sub_10000F214(&qword_100529720);
  sub_10000F214(&qword_10051BA28);
  sub_100013AA8(&qword_10051BA30, &qword_100529720);
  sub_1000812D4();
  sub_100081328();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100074E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10051BA50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v7;
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0x4010000000000000;
  v6[16] = 0;
  uint64_t v8 = sub_10000F214(&qword_10051BA58);
  sub_100074F74((uint64_t)v10, &v6[*(int *)(v8 + 44)]);
  sub_10000FB74((uint64_t)v6, a2, &qword_10051BA50);
  return sub_10000FBD8((uint64_t)v6, &qword_10051BA50);
}

uint64_t sub_100074F74@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051BA60);
  __chkstk_darwin(v3 - 8);
  uint64_t v48 = (uint64_t *)((char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000F214(&qword_10051BA68);
  __chkstk_darwin(v5 - 8);
  uint64_t v49 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v50 = (uint64_t)&v46 - v8;
  uint64_t v47 = a1;
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)&long long v62 = *(void *)(a1 + 8);
  *((void *)&v62 + 1) = v9;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.subheadline.getter();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  LOBYTE(a1) = v18;
  swift_release();
  sub_100012FAC(v10, v12, v14);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v19 = Text.fontWeight(_:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  LOBYTE(v10) = v24 & 1;
  sub_100012FAC(v15, v17, a1 & 1);
  swift_bridgeObjectRelease();
  uint64_t v25 = static Alignment.leading.getter();
  sub_10022551C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v62, 0.0, 1, 0.0, 1, v25, v26, v19, v21, v10, v23);
  sub_100012FAC(v19, v21, v10);
  swift_bridgeObjectRelease();
  long long v58 = v68;
  long long v59 = v69;
  long long v60 = v70;
  long long v54 = v64;
  long long v55 = v65;
  long long v56 = v66;
  long long v57 = v67;
  long long v52 = v62;
  long long v53 = v63;
  uint64_t v27 = static VerticalAlignment.center.getter();
  uint64_t v28 = (uint64_t)v48;
  uint64_t *v48 = v27;
  *(void *)(v28 + 8) = 0;
  *(unsigned char *)(v28 + 16) = 1;
  uint64_t v29 = sub_10000F214(&qword_10051BA70);
  sub_100075370(v47, v28 + *(int *)(v29 + 44));
  uint64_t v30 = static Alignment.center.getter();
  uint64_t v31 = v49;
  sub_100225710(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v49, 0.0, 1, 0.0, 1, v30, v32);
  sub_10000FBD8(v28, &qword_10051BA60);
  uint64_t v33 = v50;
  sub_10000FC34(v31, v50, &qword_10051BA68);
  sub_10000FB74(v33, v31, &qword_10051BA68);
  long long v34 = v59;
  v61[6] = v58;
  unsigned char v61[7] = v59;
  long long v35 = v60;
  v61[8] = v60;
  long long v36 = v54;
  long long v37 = v55;
  v61[2] = v54;
  v61[3] = v55;
  long long v39 = v56;
  long long v38 = v57;
  v61[4] = v56;
  v61[5] = v57;
  long long v41 = v52;
  long long v40 = v53;
  v61[0] = v52;
  v61[1] = v53;
  char v42 = v51;
  v51[6] = v58;
  v42[7] = v34;
  void v42[8] = v35;
  v42[2] = v36;
  v42[3] = v37;
  v42[4] = v39;
  v42[5] = v38;
  *char v42 = v41;
  v42[1] = v40;
  uint64_t v43 = v42;
  uint64_t v44 = sub_10000F214(&qword_10051BA78);
  sub_10000FB74(v31, (uint64_t)v43 + *(int *)(v44 + 48), &qword_10051BA68);
  sub_100081470((uint64_t)v61);
  sub_10000FBD8(v33, &qword_10051BA68);
  sub_10000FBD8(v31, &qword_10051BA68);
  long long v68 = v58;
  long long v69 = v59;
  long long v70 = v60;
  long long v64 = v54;
  long long v65 = v55;
  long long v66 = v56;
  long long v67 = v57;
  long long v62 = v52;
  long long v63 = v53;
  return sub_1000813C8((uint64_t)&v62);
}

uint64_t sub_100075370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v154 = a2;
  uint64_t v3 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v151 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000F214(&qword_10051BA80) - 8;
  __chkstk_darwin(v158);
  uint64_t v156 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Capsule();
  __chkstk_darwin(v6 - 8);
  uint64_t v155 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_100519C60);
  __chkstk_darwin(v8 - 8);
  char v157 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_10000F214(&qword_10051BA88) - 8;
  __chkstk_darwin(v160);
  uint64_t v153 = (uint64_t)&v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v152 = (char *)&v137 - v12;
  __chkstk_darwin(v13);
  uint64_t v159 = (_OWORD *)((char *)&v137 - v14);
  __chkstk_darwin(v15);
  uint64_t v161 = (uint64_t)&v137 - v16;
  double v139 = (int *)a1;
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  *(void *)&long long v184 = v17;
  *((void *)&v184 + 1) = v18;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  static Font.footnote.getter();
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  char v28 = v27;
  swift_release();
  sub_100012FAC(v19, v21, v23);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v29 = Text.fontWeight(_:)();
  uint64_t v31 = v30;
  uint64_t v144 = v32;
  char v34 = v33 & 1;
  sub_100012FAC(v24, v26, v28 & 1);
  swift_bridgeObjectRelease();
  uint64_t v35 = enum case for Font.Design.rounded(_:);
  unsigned int v149 = enum case for Font.Design.rounded(_:);
  uint64_t v36 = type metadata accessor for Font.Design();
  uint64_t v145 = v36;
  uint64_t v37 = *(void *)(v36 - 8);
  long long v38 = *(void (**)(char *, void, uint64_t))(v37 + 104);
  uint64_t v148 = v37 + 104;
  uint64_t v150 = v38;
  long long v39 = v157;
  v38(v157, v35, v36);
  long long v40 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56);
  uint64_t v146 = v37 + 56;
  uint64_t v147 = v40;
  v40((uint64_t)v39, 0, 1, v36);
  uint64_t v41 = (uint64_t)v39;
  uint64_t v42 = Text.fontDesign(_:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  LOBYTE(v39) = v47 & 1;
  sub_100012FAC(v29, v31, v34);
  swift_bridgeObjectRelease();
  sub_10000FBD8(v41, &qword_100519C60);
  LOBYTE(v29) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  LOBYTE(v31) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  char v183 = (char)v39;
  char v180 = 0;
  char v177 = 0;
  int v64 = static HierarchicalShapeStyle.secondary.getter();
  *(void *)&long long v184 = v42;
  *((void *)&v184 + 1) = v44;
  LOBYTE(v185) = v183;
  *(_DWORD *)((char *)&v185 + 1) = *(_DWORD *)v182;
  DWORD1(v185) = *(_DWORD *)&v182[3];
  *((void *)&v185 + 1) = v46;
  LOBYTE(v186) = v29;
  *(_DWORD *)((char *)&v186 + 1) = *(_DWORD *)v181;
  DWORD1(v186) = *(_DWORD *)&v181[3];
  *((void *)&v186 + 1) = v49;
  *(void *)&long long v187 = v51;
  *((void *)&v187 + 1) = v53;
  *(void *)&long long v188 = v55;
  BYTE8(v188) = v180;
  HIDWORD(v188) = *(_DWORD *)&v179[3];
  *(_DWORD *)((char *)&v188 + 9) = *(_DWORD *)v179;
  LOBYTE(v189) = v31;
  DWORD1(v189) = *(_DWORD *)&v178[3];
  *(_DWORD *)((char *)&v189 + 1) = *(_DWORD *)v178;
  *((void *)&v189 + 1) = v57;
  *(void *)&long long v190 = v59;
  *((void *)&v190 + 1) = v61;
  *(void *)&long long v191 = v63;
  BYTE8(v191) = v177;
  HIDWORD(v191) = v64;
  LODWORD(v29) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v65 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v143 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v142 = type metadata accessor for RoundedCornerStyle();
  uint64_t v66 = *(void *)(v142 - 8);
  uint64_t v141 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 104);
  uint64_t v144 = v66 + 104;
  uint64_t v67 = (uint64_t)v155;
  v141(v155, v65, v142);
  uint64_t v68 = v158;
  long long v69 = v156;
  uint64_t v70 = (uint64_t)&v156[*(int *)(v158 + 60)];
  double v140 = &type metadata accessor for Capsule;
  sub_100081408(v67, v70, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *long long v69 = v29;
  v69[1] = 1053609165;
  *(_WORD *)((char *)v69 + *(int *)(v68 + 64)) = 256;
  CGRect v71 = v159;
  sub_10000FB74((uint64_t)v69, (uint64_t)v159 + *(int *)(v160 + 44), &qword_10051BA80);
  long long v72 = v189;
  v71[4] = v188;
  v71[5] = v72;
  long long v73 = v191;
  v71[6] = v190;
  v71[7] = v73;
  long long v74 = v185;
  _OWORD *v71 = v184;
  v71[1] = v74;
  long long v75 = v187;
  v71[2] = v186;
  v71[3] = v75;
  sub_100081470((uint64_t)&v184);
  sub_10000FBD8((uint64_t)v69, &qword_10051BA80);
  uint64_t v138 = &type metadata accessor for Capsule;
  sub_1000814B0(v67, (uint64_t (*)(void))&type metadata accessor for Capsule);
  sub_100012FAC(v42, v44, (char)v39);
  swift_bridgeObjectRelease();
  sub_10000FC34((uint64_t)v71, v161, &qword_10051BA88);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v76);
  sub_10000F214(&qword_10051F350);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_10043D4F0;
  int v78 = *v139;
  *(void *)(v77 + 56) = &type metadata for Float;
  *(void *)(v77 + 64) = &protocol witness table for Float;
  *(_DWORD *)(v77 + 32) = v78;
  v79._countAndFlagsBits = String.init(format:_:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v79);
  swift_bridgeObjectRelease();
  v80._countAndFlagsBits = 0x656469666E6F4320;
  v80._object = (void *)0xEB0000000065636ELL;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v81 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v83 = v82;
  char v85 = v84 & 1;
  static Font.footnote.getter();
  uint64_t v86 = Text.font(_:)();
  uint64_t v88 = v87;
  LOBYTE(v42) = v89;
  swift_release();
  LOBYTE(v67) = v42 & 1;
  sub_100012FAC(v81, v83, v85);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v90 = Text.fontWeight(_:)();
  uint64_t v92 = v91;
  LOBYTE(v39) = v93 & 1;
  sub_100012FAC(v86, v88, v67);
  swift_bridgeObjectRelease();
  uint64_t v94 = (uint64_t)v157;
  uint64_t v95 = v145;
  v150(v157, v149, v145);
  v147(v94, 0, 1, v95);
  uint64_t v96 = Text.fontDesign(_:)();
  uint64_t v98 = v97;
  uint64_t v100 = v99;
  char v102 = v101 & 1;
  sub_100012FAC(v90, v92, (char)v39);
  swift_bridgeObjectRelease();
  sub_10000FBD8(v94, &qword_100519C60);
  LOBYTE(v92) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v104 = v103;
  uint64_t v106 = v105;
  uint64_t v108 = v107;
  uint64_t v110 = v109;
  LOBYTE(v83) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v112 = v111;
  uint64_t v114 = v113;
  uint64_t v116 = v115;
  uint64_t v118 = v117;
  char v168 = v102;
  char v165 = 0;
  char v162 = 0;
  int v119 = static HierarchicalShapeStyle.secondary.getter();
  *(void *)&long long v169 = v96;
  *((void *)&v169 + 1) = v98;
  LOBYTE(v170) = v168;
  *(_DWORD *)((char *)&v170 + 1) = *(_DWORD *)v167;
  DWORD1(v170) = *(_DWORD *)&v167[3];
  *((void *)&v170 + 1) = v100;
  LOBYTE(v171) = v92;
  *(_DWORD *)((char *)&v171 + 1) = *(_DWORD *)v166;
  DWORD1(v171) = *(_DWORD *)&v166[3];
  *((void *)&v171 + 1) = v104;
  *(void *)&long long v172 = v106;
  *((void *)&v172 + 1) = v108;
  *(void *)&long long v173 = v110;
  BYTE8(v173) = v165;
  HIDWORD(v173) = *(_DWORD *)&v164[3];
  *(_DWORD *)((char *)&v173 + 9) = *(_DWORD *)v164;
  LOBYTE(v174) = v83;
  DWORD1(v174) = *(_DWORD *)&v163[3];
  *(_DWORD *)((char *)&v174 + 1) = *(_DWORD *)v163;
  *((void *)&v174 + 1) = v112;
  *(void *)&long long v175 = v114;
  *((void *)&v175 + 1) = v116;
  *(void *)&long long v176 = v118;
  BYTE8(v176) = v162;
  HIDWORD(v176) = v119;
  LODWORD(v92) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v120 = (uint64_t)v155;
  v141(v155, v143, v142);
  uint64_t v121 = v158;
  uint64_t v122 = v156;
  sub_100081408(v120, (uint64_t)&v156[*(int *)(v158 + 60)], (uint64_t (*)(void))v140);
  uint64_t v123 = (uint64_t)v122;
  *uint64_t v122 = v92;
  v122[1] = 1053609165;
  *(_WORD *)((char *)v122 + *(int *)(v121 + 64)) = 256;
  uint64_t v124 = v152;
  uint64_t v125 = v123;
  sub_10000FB74(v123, (uint64_t)&v152[*(int *)(v160 + 44)], &qword_10051BA80);
  long long v126 = v174;
  v124[4] = v173;
  v124[5] = v126;
  long long v127 = v176;
  v124[6] = v175;
  v124[7] = v127;
  long long v128 = v170;
  _OWORD *v124 = v169;
  v124[1] = v128;
  long long v129 = v172;
  v124[2] = v171;
  v124[3] = v129;
  sub_100081470((uint64_t)&v169);
  sub_10000FBD8(v125, &qword_10051BA80);
  sub_1000814B0(v120, (uint64_t (*)(void))v138);
  sub_100012FAC(v96, v98, v102);
  swift_bridgeObjectRelease();
  uint64_t v130 = (uint64_t)v159;
  sub_10000FC34((uint64_t)v124, (uint64_t)v159, &qword_10051BA88);
  uint64_t v131 = v161;
  sub_10000FB74(v161, (uint64_t)v124, &qword_10051BA88);
  uint64_t v132 = v153;
  sub_10000FB74(v130, v153, &qword_10051BA88);
  uint64_t v133 = v154;
  sub_10000FB74((uint64_t)v124, v154, &qword_10051BA88);
  uint64_t v134 = sub_10000F214(&qword_10051BA90);
  sub_10000FB74(v132, v133 + *(int *)(v134 + 48), &qword_10051BA88);
  uint64_t v135 = v133 + *(int *)(v134 + 64);
  *(void *)uint64_t v135 = 0;
  *(unsigned char *)(v135 + 8) = 1;
  sub_10000FBD8(v130, &qword_10051BA88);
  sub_10000FBD8(v131, &qword_10051BA88);
  sub_10000FBD8(v132, &qword_10051BA88);
  return sub_10000FBD8((uint64_t)v124, &qword_10051BA88);
}

uint64_t sub_100075EB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v103 = a1;
  uint64_t v2 = type metadata accessor for BundleTextDetailView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v99 = v2;
  uint64_t v100 = v3;
  __chkstk_darwin(v2);
  uint64_t v101 = v4;
  uint64_t v102 = (uint64_t)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for RoundedCornerStyle();
  uint64_t v5 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  char v85 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v83);
  Swift::String v80 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Material();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v82 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051B828);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051B830);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051B838);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_10051B840);
  __chkstk_darwin(v20 - 8);
  uint64_t v81 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_10051B848);
  __chkstk_darwin(v87);
  char v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000F214(&qword_10051B850);
  __chkstk_darwin(v91);
  uint64_t v89 = (uint64_t)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000F214(&qword_10051B858);
  uint64_t v96 = *(void *)(v25 - 8);
  uint64_t v97 = v25;
  __chkstk_darwin(v25);
  char v93 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000F214(&qword_10051B860);
  __chkstk_darwin(v90);
  uint64_t v94 = (char *)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_10000F214(&qword_10051B868);
  __chkstk_darwin(v98);
  uint64_t v95 = (uint64_t)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000F214(&qword_10051B870);
  __chkstk_darwin(v29 - 8);
  uint64_t v92 = (char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v11 = static HorizontalAlignment.center.getter();
  *((void *)v11 + 1) = 0;
  unsigned char v11[16] = 1;
  uint64_t v31 = sub_10000F214(&qword_10051B878);
  sub_100076948(v1, (uint64_t)&v11[*(int *)(v31 + 44)]);
  char v32 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10000FB74((uint64_t)v11, (uint64_t)v15, &qword_10051B828);
  uint64_t v41 = &v15[*(int *)(v13 + 44)];
  *uint64_t v41 = v32;
  *((void *)v41 + 1) = v34;
  *((void *)v41 + 2) = v36;
  *((void *)v41 + 3) = v38;
  *((void *)v41 + 4) = v40;
  v41[40] = 0;
  uint64_t v42 = (uint64_t)v11;
  uint64_t v43 = v1;
  sub_10000FBD8(v42, &qword_10051B828);
  uint64_t v44 = v82;
  static Material.thin.getter();
  uint64_t v45 = v85;
  uint64_t v46 = v88;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v85, enum case for RoundedCornerStyle.continuous(_:), v88);
  char v47 = v80;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v80[*(int *)(v83 + 28)], v45, v46);
  __asm { FMOV            V0.2D, #24.0 }
  *char v47 = _Q0;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v45, v46);
  uint64_t v53 = &v19[*(int *)(v17 + 44)];
  uint64_t v54 = v84;
  uint64_t v55 = v44;
  uint64_t v56 = v86;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v53, v44, v86);
  uint64_t v57 = sub_10000F214(&qword_10051B880);
  sub_100081408((uint64_t)v47, (uint64_t)&v53[*(int *)(v57 + 52)], (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v53[*(int *)(v57 + 56)] = 256;
  uint64_t v58 = v99;
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_10051B830);
  uint64_t v59 = (uint64_t)v47;
  uint64_t v60 = (uint64_t)v81;
  sub_1000814B0(v59, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  sub_10000FBD8((uint64_t)v15, &qword_10051B830);
  sub_10000FB74((uint64_t)v19, v60, &qword_10051B838);
  sub_10000FBD8((uint64_t)v19, &qword_10051B838);
  uint64_t v61 = v43 + *(int *)(v58 + 32);
  char v62 = *(unsigned char *)v61;
  uint64_t v63 = *(void *)(v61 + 8);
  char v104 = v62;
  uint64_t v105 = v63;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v106)
  {
    double v64 = 0.2;
  }
  else if (*(unsigned char *)(v43 + *(int *)(v58 + 24)))
  {
    double v64 = 0.8;
  }
  else
  {
    double v64 = 1.0;
  }
  sub_10000FB74(v60, (uint64_t)v23, &qword_10051B840);
  *(double *)&v23[*(int *)(v87 + 36)] = v64;
  sub_10000FBD8(v60, &qword_10051B840);
  uint64_t v65 = v89;
  sub_10000FB74((uint64_t)v23, v89, &qword_10051B848);
  *(unsigned char *)(v65 + *(int *)(v91 + 36)) = 0;
  sub_10000FBD8((uint64_t)v23, &qword_10051B848);
  uint64_t v66 = v43;
  uint64_t v67 = v102;
  sub_100081408(v66, v102, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  unint64_t v68 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  uint64_t v69 = swift_allocObject();
  sub_100080A20(v67, v69 + v68, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  sub_100080AE8();
  uint64_t v70 = v93;
  View.onTapGesture(count:perform:)();
  swift_release();
  sub_10000FBD8(v65, &qword_10051B850);
  static Color.black.getter();
  uint64_t v71 = Color.opacity(_:)();
  swift_release();
  uint64_t v73 = v96;
  uint64_t v72 = v97;
  uint64_t v74 = (uint64_t)v94;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v94, v70, v97);
  uint64_t v75 = v74 + *(int *)(v90 + 36);
  *(void *)uint64_t v75 = v71;
  *(_OWORD *)(v75 + 8) = xmmword_10043F410;
  *(void *)(v75 + 24) = 0x4010000000000000;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v72);
  LOBYTE(v72) = static Edge.Set.all.getter();
  uint64_t v76 = v95;
  sub_10000FB74(v74, v95, &qword_10051B860);
  uint64_t v77 = v76 + *(int *)(v98 + 36);
  *(unsigned char *)uint64_t v77 = v72;
  *(_OWORD *)(v77 + 8) = 0u;
  *(_OWORD *)(v77 + 24) = 0u;
  *(unsigned char *)(v77 + 40) = 1;
  sub_10000FBD8(v74, &qword_10051B860);
  sub_100081068(&qword_10051B8C8, &qword_10051B868, (void (*)(void))sub_100080D24);
  uint64_t v78 = (uint64_t)v92;
  View.accessibilityIdentifier(_:)();
  sub_10000FBD8(v76, &qword_10051B868);
  return sub_10000FC34(v78, v103, &qword_10051B870);
}

uint64_t sub_100076948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v124 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051B8D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v115 = (uint64_t *)((char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000F214(&qword_10051B8E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v114 = (uint64_t)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_10000F214(&qword_10051B8E8);
  __chkstk_darwin(v112);
  uint64_t v113 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000F214(&qword_10051B8F0);
  __chkstk_darwin(v121);
  uint64_t v111 = (uint64_t)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v116 = (uint64_t)&v106 - v10;
  uint64_t v119 = sub_10000F214(&qword_10051B8F8);
  __chkstk_darwin(v119);
  uint64_t v120 = (uint64_t)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ColorScheme();
  uint64_t v108 = *(void *)(v12 - 8);
  uint64_t v109 = v12;
  __chkstk_darwin(v12);
  uint64_t v107 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v106 = (uint64_t)&v106 - v15;
  uint64_t v16 = sub_10000F214(&qword_10051B900);
  __chkstk_darwin(v16 - 8);
  uint64_t v123 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v117 = (char *)&v106 - v19;
  uint64_t v20 = sub_10000F214(&qword_10051B908);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_10051B910);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051B918);
  uint64_t v28 = v27 - 8;
  __chkstk_darwin(v27);
  uint64_t v122 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  char v32 = (char *)&v106 - v31;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v106 - v34;
  uint64_t v110 = type metadata accessor for BundleTextDetailView();
  uint64_t v36 = sub_10019CAAC();
  *(void *)uint64_t v22 = static VerticalAlignment.center.getter();
  *((void *)v22 + 1) = 0;
  v22[16] = 1;
  uint64_t v37 = (uint64_t)&v22[*(int *)(sub_10000F214(&qword_10051B920) + 44)];
  uint64_t v118 = a1;
  sub_100077458(a1, (uint64_t)v36, v37);
  LOBYTE(a1) = static Edge.Set.horizontal.getter();
  sub_10000FB74((uint64_t)v22, (uint64_t)v26, &qword_10051B908);
  uint64_t v38 = *(int *)(v24 + 44);
  uint64_t v39 = (uint64_t)v35;
  uint64_t v40 = &v26[v38];
  *uint64_t v40 = a1;
  *(_OWORD *)(v40 + 8) = 0u;
  *(_OWORD *)(v40 + 24) = 0u;
  v40[40] = 1;
  sub_10000FBD8((uint64_t)v22, &qword_10051B908);
  LOBYTE(v35) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_10000FB74((uint64_t)v26, (uint64_t)v32, &qword_10051B910);
  uint64_t v49 = &v32[*(int *)(v28 + 44)];
  *uint64_t v49 = (char)v35;
  *((void *)v49 + 1) = v42;
  *((void *)v49 + 2) = v44;
  *((void *)v49 + 3) = v46;
  *((void *)v49 + 4) = v48;
  v49[40] = 0;
  sub_10000FBD8((uint64_t)v26, &qword_10051B910);
  sub_10000FC34((uint64_t)v32, v39, &qword_10051B918);
  uint64_t v50 = v36[2];
  swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v51 = static Alignment.center.getter();
    uint64_t v52 = (uint64_t)v115;
    *uint64_t v115 = v51;
    *(void *)(v52 + 8) = v53;
    uint64_t v54 = sub_10000F214(&qword_10051B928);
    uint64_t v55 = v118;
    sub_1000781B4(v118, v52 + *(int *)(v54 + 44));
    if (*(unsigned char *)(v55 + *(int *)(v110 + 24))) {
      double v56 = 1440.0;
    }
    else {
      double v56 = 480.0;
    }
    uint64_t v57 = static Alignment.center.getter();
    uint64_t v58 = v114;
    sub_100225AFC(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v114, 0.0, 1, v56, 0, v57, v59);
    sub_10000FBD8(v52, &qword_10051B8D8);
    uint64_t v60 = v113;
    sub_10000FB74(v58, v113, &qword_10051B8E0);
    *(_WORD *)(v60 + *(int *)(v112 + 36)) = 256;
    sub_10000FBD8(v58, &qword_10051B8E0);
    uint64_t v61 = v111;
    sub_10000FB74(v60, v111, &qword_10051B8E8);
    *(_WORD *)(v61 + *(int *)(v121 + 36)) = 256;
    sub_10000FBD8(v60, &qword_10051B8E8);
    uint64_t v62 = v116;
    sub_10000FC34(v61, v116, &qword_10051B8F0);
    sub_10000FB74(v62, v120, &qword_10051B8F0);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10051B930);
    sub_100080DF0();
    sub_100080F9C();
    uint64_t v63 = (uint64_t)v117;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v62, &qword_10051B8F0);
    uint64_t v65 = (uint64_t)v123;
    uint64_t v64 = v124;
    uint64_t v66 = (uint64_t)v122;
  }
  else
  {
    uint64_t v116 = v39;
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v67 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v69 = v68;
    char v71 = v70 & 1;
    static Font.subheadline.getter();
    uint64_t v72 = Text.font(_:)();
    uint64_t v74 = v73;
    char v76 = v75;
    uint64_t v115 = v77;
    swift_release();
    char v78 = v76 & 1;
    sub_100012FAC(v67, v69, v71);
    swift_bridgeObjectRelease();
    static Font.Weight.medium.getter();
    uint64_t v79 = Text.fontWeight(_:)();
    uint64_t v81 = v80;
    char v83 = v82 & 1;
    sub_100012FAC(v72, v74, v78);
    swift_bridgeObjectRelease();
    LODWORD(v126) = static HierarchicalShapeStyle.secondary.getter();
    uint64_t v84 = Text.foregroundStyle<A>(_:)();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    LOBYTE(v74) = v89 & 1;
    sub_100012FAC(v79, v81, v83);
    swift_bridgeObjectRelease();
    char v90 = static Edge.Set.all.getter();
    uint64_t v138 = v84;
    uint64_t v139 = v86;
    char v140 = v74;
    uint64_t v141 = v88;
    char v142 = v90;
    long long v143 = 0u;
    long long v144 = 0u;
    char v145 = 1;
    static Alignment.center.getter();
    sub_10022593C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v125, 0.0, 1, 0.0, 1);
    sub_100012FAC(v84, v86, v74);
    swift_bridgeObjectRelease();
    long long v134 = v125[8];
    long long v135 = v125[9];
    long long v136 = v125[10];
    long long v137 = v125[11];
    long long v130 = v125[4];
    long long v131 = v125[5];
    long long v132 = v125[6];
    long long v133 = v125[7];
    long long v126 = v125[0];
    long long v127 = v125[1];
    long long v128 = v125[2];
    long long v129 = v125[3];
    uint64_t v91 = v106;
    sub_10027CA80(v106);
    char v93 = v107;
    uint64_t v92 = v108;
    uint64_t v94 = v109;
    (*(void (**)(char *, void, uint64_t))(v108 + 104))(v107, enum case for ColorScheme.light(_:), v109);
    LOBYTE(v79) = static ColorScheme.== infix(_:_:)();
    uint64_t v95 = *(void (**)(char *, uint64_t))(v92 + 8);
    v95(v93, v94);
    v95((char *)v91, v94);
    uint64_t v64 = v124;
    uint64_t v96 = v120;
    uint64_t v63 = (uint64_t)v117;
    if (v79) {
      static Color.white.getter();
    }
    else {
      static Color.black.getter();
    }
    uint64_t v97 = Color.opacity(_:)();
    swift_release();
    long long v98 = v135;
    *(_OWORD *)(v96 + 128) = v134;
    *(_OWORD *)(v96 + 144) = v98;
    long long v99 = v137;
    *(_OWORD *)(v96 + 160) = v136;
    *(_OWORD *)(v96 + 176) = v99;
    long long v100 = v131;
    *(_OWORD *)(v96 + 64) = v130;
    *(_OWORD *)(v96 + 80) = v100;
    long long v101 = v133;
    *(_OWORD *)(v96 + 96) = v132;
    *(_OWORD *)(v96 + 112) = v101;
    long long v102 = v127;
    *(_OWORD *)uint64_t v96 = v126;
    *(_OWORD *)(v96 + 16) = v102;
    long long v103 = v129;
    *(_OWORD *)(v96 + 32) = v128;
    *(_OWORD *)(v96 + 48) = v103;
    *(void *)(v96 + 192) = v97;
    *(_WORD *)(v96 + 200) = 256;
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10051B930);
    sub_100080DF0();
    sub_100080F9C();
    _ConditionalContent<>.init(storage:)();
    uint64_t v66 = (uint64_t)v122;
    uint64_t v65 = (uint64_t)v123;
    uint64_t v39 = v116;
  }
  sub_10000FB74(v39, v66, &qword_10051B918);
  sub_10000FB74(v63, v65, &qword_10051B900);
  sub_10000FB74(v66, v64, &qword_10051B918);
  uint64_t v104 = sub_10000F214(&qword_10051B998);
  sub_10000FB74(v65, v64 + *(int *)(v104 + 48), &qword_10051B900);
  sub_10000FBD8(v63, &qword_10051B900);
  sub_10000FBD8(v39, &qword_10051B918);
  sub_10000FBD8(v65, &qword_10051B900);
  return sub_10000FBD8(v66, &qword_10051B918);
}

uint64_t sub_100077458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v99 = a2;
  uint64_t v101 = a1;
  uint64_t v113 = a3;
  uint64_t v98 = type metadata accessor for SegmentedPickerStyle();
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_10000F214(&qword_10051BA98);
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v91 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000F214(&qword_10051BAA0);
  uint64_t v92 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  char v90 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000F214(&qword_10051BAA8);
  __chkstk_darwin(v88);
  char v89 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000F214(&qword_10051BAB0);
  uint64_t v111 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v87 = (uint64_t)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v86 = (uint64_t)&v86 - v9;
  uint64_t v10 = sub_10000F214(&qword_10051BAB8);
  __chkstk_darwin(v10 - 8);
  uint64_t v112 = (uint64_t)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v106 = (char *)&v86 - v13;
  uint64_t v107 = type metadata accessor for DynamicTypeSize();
  uint64_t v105 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  long long v103 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051BAC0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v109 = v15;
  uint64_t v110 = v16;
  __chkstk_darwin(v15);
  long long v102 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_10000F214(&qword_10051BAC8);
  uint64_t v108 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v104 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v117 = (char *)&v86 - v20;
  uint64_t v21 = type metadata accessor for CVDetection();
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_10051B770);
  uint64_t v25 = (int *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v86 - v29;
  uint64_t v31 = type metadata accessor for BundleTextDetailView();
  sub_10019D408((uint64_t)v23);
  *(void *)uint64_t v27 = swift_getKeyPath();
  v27[8] = 0;
  sub_100080A20((uint64_t)v23, (uint64_t)&v27[v25[11]], (uint64_t (*)(void))type metadata accessor for CVDetection);
  v27[v25[12]] = 1;
  char v32 = &v27[v25[13]];
  *(void *)char v32 = 0x4038000000000000;
  v32[8] = 0;
  uint64_t v115 = v30;
  uint64_t v116 = v27;
  sub_10000FC34((uint64_t)v27, (uint64_t)v30, &qword_10051B770);
  uint64_t v120 = (void *)sub_10019E630();
  uint64_t v121 = v33;
  sub_1000317A0();
  uint64_t v34 = Text.init<A>(_:)();
  uint64_t v36 = v35;
  LOBYTE(v25) = v37 & 1;
  static Font.title3.getter();
  uint64_t v38 = (void *)Text.font(_:)();
  uint64_t v40 = v39;
  char v42 = v41;
  uint64_t v44 = v43;
  swift_release();
  uint64_t v45 = v36;
  uint64_t v46 = v100;
  sub_100012FAC(v34, v45, (char)v25);
  swift_bridgeObjectRelease();
  uint64_t v120 = v38;
  uint64_t v121 = v40;
  char v122 = v42 & 1;
  uint64_t v123 = v44;
  uint64_t v47 = v105;
  uint64_t v48 = v103;
  uint64_t v50 = (uint64_t)v106;
  uint64_t v49 = v107;
  (*(void (**)(char *, void, uint64_t))(v105 + 104))(v103, enum case for DynamicTypeSize.large(_:), v107);
  uint64_t v51 = v102;
  View.dynamicTypeSize(_:)();
  uint64_t v52 = v49;
  uint64_t v53 = v31;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v52);
  sub_100012FAC((uint64_t)v120, (uint64_t)v121, v122);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v120 = &type metadata for Text;
  uint64_t v121 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2();
  uint64_t v54 = v104;
  uint64_t v55 = v109;
  View.fontWeight(_:)();
  uint64_t v56 = v101;
  (*(void (**)(char *, uint64_t))(v110 + 8))(v51, v55);
  uint64_t v57 = v108;
  uint64_t v58 = v54;
  uint64_t v59 = v46;
  (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v117, v54, v46);
  uint64_t v60 = 1;
  if ((*(unsigned char *)(v56 + *(int *)(v53 + 24)) & 1) == 0)
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v61 = (char *)(v56 + *(int *)(v53 + 28));
    char v62 = *v61;
    uint64_t v63 = *((void *)v61 + 1);
    char v118 = v62;
    uint64_t v119 = v63;
    sub_10000F214(&qword_10051BA20);
    State.projectedValue.getter();
    sub_10000F214(&qword_10051BAD0);
    sub_100081C64();
    sub_100081CB8();
    uint64_t v64 = v91;
    Picker<>.init(_:selection:content:)();
    uint64_t v65 = v96;
    SegmentedPickerStyle.init()();
    sub_100013AA8(&qword_10051BB28, &qword_10051BA98);
    uint64_t v66 = v90;
    uint64_t v67 = v95;
    uint64_t v68 = v98;
    View.pickerStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v65, v68);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v64, v67);
    if (*(void *)(v99 + 16)) {
      double v69 = 1.0;
    }
    else {
      double v69 = 0.0;
    }
    uint64_t v70 = v92;
    uint64_t v71 = (uint64_t)v89;
    uint64_t v72 = v94;
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v66, v94);
    *(double *)(v71 + *(int *)(v88 + 36)) = v69;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v66, v72);
    uint64_t v73 = v87;
    sub_10000FB74(v71, v87, &qword_10051BAA8);
    *(_WORD *)(v73 + *(int *)(v114 + 36)) = 257;
    sub_10000FBD8(v71, &qword_10051BAA8);
    uint64_t v74 = v73;
    uint64_t v75 = v86;
    sub_10000FC34(v74, v86, &qword_10051BAB0);
    sub_10000FC34(v75, v50, &qword_10051BAB0);
    uint64_t v60 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v50, v60, 1, v114);
  uint64_t v76 = (uint64_t)v116;
  sub_10000FB74((uint64_t)v115, (uint64_t)v116, &qword_10051B770);
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  char v78 = v58;
  uint64_t v79 = v117;
  v77(v58, v117, v59);
  uint64_t v80 = v112;
  sub_10000FB74(v50, v112, &qword_10051BAB8);
  uint64_t v81 = v113;
  sub_10000FB74(v76, v113, &qword_10051B770);
  char v82 = (int *)sub_10000F214(&qword_10051BB30);
  v77((char *)(v81 + v82[12]), v78, v59);
  uint64_t v83 = v81 + v82[16];
  *(void *)uint64_t v83 = 0;
  *(unsigned char *)(v83 + 8) = 1;
  sub_10000FB74(v80, v81 + v82[20], &qword_10051BAB8);
  sub_10000FBD8(v50, &qword_10051BAB8);
  uint64_t v84 = *(void (**)(char *, uint64_t))(v57 + 8);
  v84(v79, v59);
  sub_10000FBD8((uint64_t)v115, &qword_10051B770);
  sub_10000FBD8(v80, &qword_10051BAB8);
  v84(v78, v59);
  return sub_10000FBD8((uint64_t)v116, &qword_10051B770);
}

uint64_t sub_10007805C()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100078144@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  uint64_t result = Image.init(_internalSystemName:)();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = v3;
  return result;
}

uint64_t sub_1000781B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for BundleTextDetailView();
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v21 + 64);
  __chkstk_darwin(v3);
  uint64_t v23 = sub_10000F214(&qword_10051B9A0);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)&KeyPath - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&KeyPath - v8;
  uint64_t v22 = sub_10000F214(&qword_10051B9A8);
  __chkstk_darwin(v22);
  uint64_t v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051B9B0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(int *)(v3 + 24)))
  {
    *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
    *((void *)v6 + 1) = 0;
    v6[16] = 1;
    sub_10000F214(&qword_10051B9C8);
    uint64_t v25 = sub_10019CAAC();
    uint64_t KeyPath = swift_getKeyPath();
    sub_100081408(a1, (uint64_t)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
    unint64_t v17 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v18 = swift_allocObject();
    sub_100080A20((uint64_t)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
    sub_10000F214(&qword_10051B9D0);
    sub_10000F214(&qword_10051B9D8);
    sub_100013AA8(&qword_10051B9E0, &qword_10051B9D0);
    sub_10008209C(&qword_10051B9E8, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
    sub_100081194();
    ForEach<>.init(_:id:content:)();
    sub_10000FC34((uint64_t)v6, (uint64_t)v9, &qword_10051B9A0);
    sub_10000FB74((uint64_t)v9, (uint64_t)v11, &qword_10051B9A0);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_10051B9C0, &qword_10051B9B0);
    sub_100013AA8(&qword_10051B9B8, &qword_10051B9A0);
    _ConditionalContent<>.init(storage:)();
    return sub_10000FBD8((uint64_t)v9, &qword_10051B9A0);
  }
  else
  {
    __chkstk_darwin(v14);
    static Axis.Set.vertical.getter();
    sub_100013AA8(&qword_10051B9B8, &qword_10051B9A0);
    ScrollView.init(_:showsIndicators:content:)();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v16, v12);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_10051B9C0, &qword_10051B9B0);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t sub_100078704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BundleTextDetailView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  *(void *)a2 = static HorizontalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  sub_10000F214(&qword_10051B9C8);
  v10[1] = sub_10019CAAC();
  swift_getKeyPath();
  sub_100081408(a1, (uint64_t)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  sub_100080A20((uint64_t)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, (uint64_t (*)(void))type metadata accessor for BundleTextDetailView);
  sub_10000F214(&qword_10051B9D0);
  sub_10000F214(&qword_10051B9D8);
  sub_100013AA8(&qword_10051B9E0, &qword_10051B9D0);
  sub_10008209C(&qword_10051B9E8, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
  sub_100081194();
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_10007892C()
{
  return swift_release();
}

uint64_t sub_100078998()
{
  return swift_release();
}

unint64_t sub_100078A50(uint64_t a1)
{
  unint64_t result = sub_100078A78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100078A78()
{
  unint64_t result = qword_10051B528;
  if (!qword_10051B528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B528);
  }
  return result;
}

unint64_t sub_100078ACC(void *a1)
{
  a1[1] = sub_100016EC8();
  a1[2] = sub_100017284();
  unint64_t result = sub_100078B04();
  a1[3] = result;
  return result;
}

unint64_t sub_100078B04()
{
  unint64_t result = qword_10051B530;
  if (!qword_10051B530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B530);
  }
  return result;
}

unint64_t sub_100078B5C(uint64_t a1)
{
  unint64_t result = sub_100078B84();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100078B84()
{
  unint64_t result = qword_10051B560;
  if (!qword_10051B560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B560);
  }
  return result;
}

uint64_t sub_100078BD8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100078BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  __int16 v7 = HIWORD(a3);
  char v10 = a3 & 1;
  char v15 = a3 & 1;
  __int16 v8 = a4;
  unsigned int v9 = HIBYTE(a4);
  sub_10000F214(&qword_10051B568);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *(void *)a5 = 0xD000000000000013;
  *(void *)(a5 + 8) = 0x8000000100425AC0;
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  *(unsigned char *)(a5 + 32) = v15;
  *(unsigned char *)(a5 + 33) = v7 & 1;
  *(_DWORD *)(a5 + 34) = v16;
  *(_WORD *)(a5 + 38) = v17;
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0x6E695020776F6853;
  *(void *)(a5 + 64) = 0xE900000000000073;
  *(void *)(a5 + 72) = a1;
  *(void *)(a5 + 80) = a2;
  *(unsigned char *)(a5 + 88) = v10;
  *(unsigned char *)(a5 + 89) = HIBYTE(v7) & 1;
  *(_WORD *)(a5 + 94) = WORD2(a1);
  *(_DWORD *)(a5 + 90) = a1;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = 0;
  strcpy((char *)(a5 + 112), "Show Reticule");
  *(_WORD *)(a5 + 126) = -4864;
  *(void *)(a5 + 128) = a1;
  *(void *)(a5 + 136) = a2;
  *(unsigned char *)(a5 + 144) = v10;
  *(unsigned char *)(a5 + 145) = v8 & 1;
  *(_DWORD *)(a5 + 146) = v24;
  *(_WORD *)(a5 + 150) = v25;
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = 0;
  *(void *)(a5 + 168) = 0xD000000000000013;
  *(void *)(a5 + 176) = 0x8000000100425AE0;
  *(void *)(a5 + 184) = a1;
  *(void *)(a5 + 192) = a2;
  *(unsigned char *)(a5 + 200) = v10;
  *(unsigned char *)(a5 + 201) = HIBYTE(v8) & 1;
  *(_WORD *)(a5 + 206) = v23;
  *(_DWORD *)(a5 + 202) = v22;
  *(void *)(a5 + 208) = 0;
  *(void *)(a5 + 216) = 0;
  *(void *)(a5 + 224) = 0x78655420776F6853;
  *(void *)(a5 + 232) = 0xE900000000000074;
  *(void *)(a5 + 240) = a1;
  *(void *)(a5 + 248) = a2;
  *(unsigned char *)(a5 + 256) = v10;
  *(unsigned char *)(a5 + 257) = HIBYTE(v8) & 1;
  *(_DWORD *)(a5 + 258) = v20;
  *(_WORD *)(a5 + 262) = v21;
  *(void *)(a5 + 264) = 0;
  *(void *)(a5 + 272) = 0;
  *(void *)(a5 + 280) = 0xD000000000000016;
  *(void *)(a5 + 288) = 0x8000000100425B00;
  *(void *)(a5 + 296) = a1;
  *(void *)(a5 + 304) = a2;
  *(unsigned char *)(a5 + 312) = v10;
  *(unsigned char *)(a5 + 313) = v9;
  *(_DWORD *)(a5 + 314) = v18;
  *(_WORD *)(a5 + 318) = v19;
  *(void *)(a5 + 320) = &off_1004E51F0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000F478(0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000F478(0);
}

uint64_t sub_1000794A0@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 17)) {
    uint64_t v2 = 256;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  if (*(unsigned char *)(v1 + 18)) {
    uint64_t v4 = 0x10000;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!*(unsigned char *)(v1 + 19)) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v3 | v4 | v5;
  __int16 v7 = &_mh_execute_header;
  if (!*(unsigned char *)(v1 + 20)) {
    __int16 v7 = 0;
  }
  unint64_t v8 = v6 | (unint64_t)v7;
  uint64_t v9 = 0x1000000000000;
  if (!*(unsigned char *)(v1 + 22)) {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v8 | ((unint64_t)*(unsigned __int8 *)(v1 + 21) << 40);
  uint64_t v11 = 0x100000000000000;
  if (!*(unsigned char *)(v1 + 23)) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v10 | v9 | v11;
  if (*(unsigned char *)(v1 + 25)) {
    int v13 = 256;
  }
  else {
    int v13 = 0;
  }
  int v14 = v13 | *(unsigned __int8 *)(v1 + 24);
  if (*(unsigned char *)(v1 + 26)) {
    int v15 = 0x10000;
  }
  else {
    int v15 = 0;
  }
  return sub_100078BF4(*(void *)v1, *(void *)(v1 + 8), v12, v14 | v15 | (*(unsigned __int8 *)(v1 + 27) << 24), a1);
}

uint64_t sub_100079558@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100079584()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

Swift::Int sub_1000795AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100045FB4(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_100079618(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100079618(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v93 = *a1;
      uint64_t v94 = *a1 + 72;
      uint64_t v95 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        float v97 = *(float *)(v93 + 40 * i);
        uint64_t v98 = v95;
        uint64_t v99 = (float *)v94;
        do
        {
          uint64_t v100 = v99 - 18;
          if (*(v99 - 18) >= v97) {
            break;
          }
          if (!v93) {
            goto LABEL_141;
          }
          uint64_t v101 = *((void *)v99 - 5);
          *((void *)v99 - 5) = *(void *)v99;
          v99 -= 10;
          uint64_t v102 = *((void *)v99 + 2);
          Swift::Int result = *((void *)v99 + 3);
          uint64_t v103 = *((void *)v99 + 4);
          long long v104 = *((_OWORD *)v100 + 1);
          *(_OWORD *)(v100 + 10) = *(_OWORD *)v100;
          *(_OWORD *)(v100 + 14) = v104;
          *((void *)v100 + 9) = v101;
          *(v99 - 8) = v97;
          *((void *)v99 - 3) = v102;
          *((void *)v99 - 2) = result;
          *((void *)v99 - 1) = v103;
        }
        while (!__CFADD__(v98++, 1));
        v94 += 40;
        --v95;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  uint64_t v122 = v1;
  uint64_t v115 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v106 = v12;
      uint64_t v117 = v9;
      if (v13 >= 2)
      {
        uint64_t v107 = *v115;
        do
        {
          unint64_t v108 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v107) {
            goto LABEL_145;
          }
          uint64_t v109 = v106;
          uint64_t v110 = *(void *)&v106[16 * v108 + 32];
          uint64_t v111 = *(void *)&v106[16 * v13 + 24];
          sub_100079D64((float *)(v107 + 40 * v110), (float *)(v107 + 40 * *(void *)&v106[16 * v13 + 16]), v107 + 40 * v111, __dst);
          if (v122) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v109 = sub_100045F20((uint64_t)v109);
          }
          if (v108 >= *((void *)v109 + 2)) {
            goto LABEL_134;
          }
          uint64_t v112 = &v109[16 * v108 + 32];
          *(void *)uint64_t v112 = v110;
          *((void *)v112 + 1) = v111;
          unint64_t v113 = *((void *)v109 + 2);
          if (v13 > v113) {
            goto LABEL_135;
          }
          memmove(&v109[16 * v13 + 16], &v109[16 * v13 + 32], 16 * (v113 - v13));
          uint64_t v106 = v109;
          *((void *)v109 + 2) = v113 - 1;
          unint64_t v13 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v117[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v117 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v117 = (void *)v8;
    __dst = (float *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v116 = *a1 + 80;
  uint64_t v114 = *a1 + 32;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v118 = v6;
  Swift::Int v119 = v3;
  uint64_t v120 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      float v15 = *(float *)(v11 + 40 * v10);
      float v16 = *(float *)(v11 + 40 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        __int16 v17 = (float *)(v116 + 40 * v14);
        float v18 = v15;
        while (1)
        {
          float v19 = v18;
          float v18 = *v17;
          if (v16 < v15 == v19 >= *v17) {
            break;
          }
          ++v10;
          v17 += 10;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v16 < v15)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v20 = 40 * v10;
          uint64_t v21 = 40 * v14;
          Swift::Int v22 = v10;
          Swift::Int v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v24 = v11 + v21;
              int v25 = *(_DWORD *)(v11 + v21);
              uint64_t v26 = v11 + v20;
              long long v27 = *(_OWORD *)(v11 + v21 + 8);
              uint64_t v28 = *(void *)(v11 + v21 + 24);
              uint64_t v29 = *(void *)(v11 + v21 + 32);
              uint64_t v30 = *(void *)(v11 + v20 - 8);
              long long v31 = *(_OWORD *)(v11 + v20 - 24);
              *(_OWORD *)uint64_t v24 = *(_OWORD *)(v11 + v20 - 40);
              *(_OWORD *)(v24 + 16) = v31;
              *(void *)(v24 + 32) = v30;
              *(_DWORD *)(v26 - 40) = v25;
              *(_OWORD *)(v26 - 32) = v27;
              *(void *)(v26 - 16) = v28;
              *(void *)(v26 - 8) = v29;
            }
            ++v23;
            v20 -= 40;
            v21 += 40;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v32 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v32 >= v3) {
      Swift::Int v32 = v3;
    }
    if (v32 < v14) {
      break;
    }
    if (v10 != v32)
    {
      uint64_t v33 = (float *)(v114 + 40 * v10);
      do
      {
        float v34 = *(float *)(v11 + 40 * v10);
        Swift::Int v35 = v14;
        uint64_t v36 = v33;
        do
        {
          char v37 = v36 - 18;
          if (*(v36 - 18) >= v34) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v38 = *((void *)v36 - 5);
          *((void *)v36 - 5) = *(void *)v36;
          v36 -= 10;
          uint64_t v39 = *((void *)v36 + 2);
          uint64_t v40 = *((void *)v36 + 3);
          uint64_t v41 = *((void *)v36 + 4);
          long long v42 = *((_OWORD *)v37 + 1);
          *(_OWORD *)(v37 + 10) = *(_OWORD *)v37;
          *(_OWORD *)(v37 + 14) = v42;
          *((void *)v37 + 9) = v38;
          *(v36 - 8) = v34;
          *((void *)v36 - 3) = v39;
          *((void *)v36 - 2) = v40;
          *((void *)v36 - 1) = v41;
          ++v35;
        }
        while (v10 != v35);
        ++v10;
        v33 += 10;
      }
      while (v10 != v32);
      Swift::Int v10 = v32;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_1000456E8(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v44 = *((void *)v12 + 2);
    unint64_t v43 = *((void *)v12 + 3);
    unint64_t v13 = v44 + 1;
    uint64_t v11 = v120;
    if (v44 >= v43 >> 1)
    {
      uint64_t v11 = v120;
      uint64_t v12 = sub_1000456E8((char *)(v43 > 1), v44 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v13;
    uint64_t v45 = v12 + 32;
    uint64_t v46 = &v12[16 * v44 + 32];
    *(void *)uint64_t v46 = v14;
    *((void *)v46 + 1) = v10;
    if (v44)
    {
      while (1)
      {
        unint64_t v47 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v52 = &v45[16 * v13];
          uint64_t v53 = *((void *)v52 - 8);
          uint64_t v54 = *((void *)v52 - 7);
          BOOL v58 = __OFSUB__(v54, v53);
          uint64_t v55 = v54 - v53;
          if (v58) {
            goto LABEL_120;
          }
          uint64_t v57 = *((void *)v52 - 6);
          uint64_t v56 = *((void *)v52 - 5);
          BOOL v58 = __OFSUB__(v56, v57);
          uint64_t v50 = v56 - v57;
          char v51 = v58;
          if (v58) {
            goto LABEL_121;
          }
          unint64_t v59 = v13 - 2;
          uint64_t v60 = &v45[16 * v13 - 32];
          uint64_t v62 = *(void *)v60;
          uint64_t v61 = *((void *)v60 + 1);
          BOOL v58 = __OFSUB__(v61, v62);
          uint64_t v63 = v61 - v62;
          if (v58) {
            goto LABEL_123;
          }
          BOOL v58 = __OFADD__(v50, v63);
          uint64_t v64 = v50 + v63;
          if (v58) {
            goto LABEL_126;
          }
          if (v64 >= v55)
          {
            char v82 = &v45[16 * v47];
            uint64_t v84 = *(void *)v82;
            uint64_t v83 = *((void *)v82 + 1);
            BOOL v58 = __OFSUB__(v83, v84);
            uint64_t v85 = v83 - v84;
            if (v58) {
              goto LABEL_130;
            }
            BOOL v75 = v50 < v85;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v76 = *((void *)v12 + 4);
            uint64_t v77 = *((void *)v12 + 5);
            BOOL v58 = __OFSUB__(v77, v76);
            uint64_t v69 = v77 - v76;
            char v70 = v58;
            goto LABEL_77;
          }
          uint64_t v49 = *((void *)v12 + 4);
          uint64_t v48 = *((void *)v12 + 5);
          BOOL v58 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          char v51 = v58;
        }
        if (v51) {
          goto LABEL_122;
        }
        unint64_t v59 = v13 - 2;
        uint64_t v65 = &v45[16 * v13 - 32];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v68 = __OFSUB__(v66, v67);
        uint64_t v69 = v66 - v67;
        char v70 = v68;
        if (v68) {
          goto LABEL_125;
        }
        uint64_t v71 = &v45[16 * v47];
        uint64_t v73 = *(void *)v71;
        uint64_t v72 = *((void *)v71 + 1);
        BOOL v58 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v58) {
          goto LABEL_128;
        }
        if (__OFADD__(v69, v74)) {
          goto LABEL_129;
        }
        if (v69 + v74 >= v50)
        {
          BOOL v75 = v50 < v74;
LABEL_83:
          if (v75) {
            unint64_t v47 = v59;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v70) {
          goto LABEL_124;
        }
        char v78 = &v45[16 * v47];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        BOOL v58 = __OFSUB__(v79, v80);
        uint64_t v81 = v79 - v80;
        if (v58) {
          goto LABEL_127;
        }
        if (v81 < v69) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v86 = v47 - 1;
        if (v47 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v87 = v12;
        uint64_t v88 = &v45[16 * v86];
        uint64_t v89 = *(void *)v88;
        char v90 = &v45[16 * v47];
        uint64_t v91 = *((void *)v90 + 1);
        sub_100079D64((float *)(v11 + 40 * *(void *)v88), (float *)(v11 + 40 * *(void *)v90), v11 + 40 * v91, __dst);
        if (v122) {
          goto LABEL_93;
        }
        if (v91 < v89) {
          goto LABEL_117;
        }
        if (v47 > *((void *)v87 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v88 = v89;
        *(void *)&v45[16 * v86 + 8] = v91;
        unint64_t v92 = *((void *)v87 + 2);
        if (v47 >= v92) {
          goto LABEL_119;
        }
        uint64_t v12 = v87;
        unint64_t v13 = v92 - 1;
        memmove(&v45[16 * v47], v90 + 16, 16 * (v92 - 1 - v47));
        *((void *)v87 + 2) = v92 - 1;
        uint64_t v11 = v120;
        if (v92 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v118;
    Swift::Int v3 = v119;
    if (v10 >= v119)
    {
      uint64_t v9 = v117;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100079D64(float *__src, float *a2, unint64_t a3, float *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = ((char *)a2 - (char *)__src) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v30 = __src;
  uint64_t v29 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[10 * v11] <= __dst) {
        memmove(__dst, a2, 40 * v11);
      }
      float v18 = (char *)&v4[10 * v11];
      uint64_t v28 = v18;
      uint64_t v30 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        unint64_t v19 = a3 - 40;
        uint64_t v20 = v6;
        while (1)
        {
          uint64_t v21 = (float *)(v19 + 40);
          float v22 = *(v20 - 10);
          v20 -= 10;
          if (v22 >= *((float *)v18 - 10))
          {
            uint64_t v28 = v18 - 40;
            if (v21 < (float *)v18 || v19 >= (unint64_t)v18 || v21 != (float *)v18)
            {
              long long v25 = *(_OWORD *)(v18 - 40);
              long long v26 = *(_OWORD *)(v18 - 24);
              *(void *)(v19 + 32) = *((void *)v18 - 1);
              *(_OWORD *)unint64_t v19 = v25;
              *(_OWORD *)(v19 + 16) = v26;
            }
            uint64_t v20 = v6;
            v18 -= 40;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v21 != v6 || v19 >= (unint64_t)v6)
            {
              long long v23 = *(_OWORD *)v20;
              long long v24 = *((_OWORD *)v20 + 1);
              *(void *)(v19 + 32) = *((void *)v20 + 4);
              *(_OWORD *)unint64_t v19 = v23;
              *(_OWORD *)(v19 + 16) = v24;
            }
            uint64_t v30 = v20;
            if (v20 <= v7) {
              goto LABEL_38;
            }
          }
          v19 -= 40;
          Swift::Int v6 = v20;
          if (v18 <= (char *)v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[10 * v9] <= __dst) {
      memmove(__dst, __src, 40 * v9);
    }
    uint64_t v12 = &v4[10 * v9];
    uint64_t v28 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        if (*v4 >= *v6)
        {
          if (v7 != v4)
          {
            long long v16 = *(_OWORD *)v4;
            long long v17 = *((_OWORD *)v4 + 1);
            *((void *)v7 + 4) = *((void *)v4 + 4);
            *(_OWORD *)uint64_t v7 = v16;
            *((_OWORD *)v7 + 1) = v17;
          }
          v4 += 10;
          uint64_t v29 = v4;
          unint64_t v13 = v6;
        }
        else
        {
          unint64_t v13 = v6 + 10;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            long long v14 = *(_OWORD *)v6;
            long long v15 = *((_OWORD *)v6 + 1);
            *((void *)v7 + 4) = *((void *)v6 + 4);
            *(_OWORD *)uint64_t v7 = v14;
            *((_OWORD *)v7 + 1) = v15;
          }
        }
        v7 += 10;
        if (v4 >= v12) {
          break;
        }
        Swift::Int v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      uint64_t v30 = v7;
    }
LABEL_38:
    sub_100045A30((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007A018()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10007A03C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  double v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.colorScheme.setter();
}

BOOL sub_10007A104(unint64_t a1, unint64_t a2)
{
  BOOL v2 = (BYTE4(a1) & 1) == (BYTE4(a2) & 1) && ((a2 ^ a1) & 0xFF0000000000) == 0;
  BOOL v3 = ((a1 >> 24) & 1) == ((a2 >> 24) & 1) && v2;
  BOOL v4 = ((a1 >> 16) & 1) == ((a2 >> 16) & 1) && v3;
  BOOL v5 = ((a1 >> 8) & 1) == ((a2 >> 8) & 1) && v4;
  return ((a1 ^ a2) & 1) == 0 && v5;
}

uint64_t sub_10007A170(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E756F42776F6873 && a2 == 0xEF786F42676E6964;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6950776F6873 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69746552776F6873 && a2 == 0xEC000000656C7563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74786554776F6873 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100425B20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100425B40)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_10007A424(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051B570);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10007A6C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  char v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v26 = 1;
  char v8 = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 2;
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v24 = 3;
  int v20 = KeyedDecodingContainer.decode(_:forKey:)();
  char v23 = 4;
  int v19 = KeyedDecodingContainer.decode(_:forKey:)();
  char v21 = 5;
  sub_10007A718();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v11 = v22;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  uint64_t v12 = &_mh_execute_header;
  if ((v19 & 1) == 0) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = (unint64_t)v12 | (v11 << 40);
  uint64_t v14 = 0x1000000;
  if ((v20 & 1) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0x10000;
  if ((v9 & 1) == 0) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v14 | v15;
  uint64_t v17 = 256;
  if ((v8 & 1) == 0) {
    uint64_t v17 = 0;
  }
  return (v13 | v16 | v17) & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
}

unint64_t sub_10007A6C4()
{
  unint64_t result = qword_10051B578;
  if (!qword_10051B578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B578);
  }
  return result;
}

unint64_t sub_10007A718()
{
  unint64_t result = qword_10051B580;
  if (!qword_10051B580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B580);
  }
  return result;
}

unint64_t sub_10007A76C()
{
  unint64_t result = qword_10051B590;
  if (!qword_10051B590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B590);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnnotatedVideoViewConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007A88CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotatedVideoViewConfiguration.CodingKeys()
{
  return &type metadata for AnnotatedVideoViewConfiguration.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for AnnotatedVideoViewConfiguration(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AnnotatedVideoViewConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[6]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotatedVideoViewConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotatedVideoViewConfiguration()
{
  return &type metadata for AnnotatedVideoViewConfiguration;
}

uint64_t initializeWithCopy for AnnotatedVideoViewConfigurationForm(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 22) = *(_DWORD *)(a2 + 22);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnnotatedVideoViewConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 23);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  return a1;
}

__n128 initializeWithTake for AnnotatedVideoViewConfigurationForm(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AnnotatedVideoViewConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 23);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnnotatedVideoViewConfigurationForm(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotatedVideoViewConfigurationForm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotatedVideoViewConfigurationForm()
{
  return &type metadata for AnnotatedVideoViewConfigurationForm;
}

uint64_t sub_10007ABE8()
{
  return sub_100013AA8(&qword_10051B598, &qword_10051B5A0);
}

unint64_t sub_10007AC28()
{
  unint64_t result = qword_10051B5A8;
  if (!qword_10051B5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B5A8);
  }
  return result;
}

unint64_t sub_10007AC80()
{
  unint64_t result = qword_10051B5B0;
  if (!qword_10051B5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B5B0);
  }
  return result;
}

unint64_t sub_10007ACD8()
{
  unint64_t result = qword_10051B5B8[0];
  if (!qword_10051B5B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10051B5B8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BundleTextDetailView.SortMechanism(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007ADF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleTextDetailView.SortMechanism()
{
  return &type metadata for BundleTextDetailView.SortMechanism;
}

uint64_t sub_10007AE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10007AE38()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10007AE84(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10007AF1C(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for ACMEKeyboardView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10007B020(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 54);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t sub_10007B0D8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10007B120(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AnnotatedVideoView()
{
  return sub_1000684BC();
}

void *sub_10007B188(void *a1, void *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    char v4 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      void *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v10, v11, v13);
    if (EnumCaseMultiPayload != 1)
    {
      long long v187 = v14;
      uint64_t v15 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v16 = v15[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      type metadata accessor for CVDetection();
      long long v185 = v15;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v187(v17, v18, v13);
          uint64_t v30 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v17[v30[5]] = *(_DWORD *)&v18[v30[5]];
          uint64_t v31 = v30[6];
          Swift::Int v32 = &v17[v31];
          uint64_t v33 = &v18[v31];
          long long v34 = *((_OWORD *)v33 + 3);
          *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
          *((_OWORD *)v32 + 3) = v34;
          long long v35 = *((_OWORD *)v33 + 1);
          *(_OWORD *)Swift::Int v32 = *(_OWORD *)v33;
          *((_OWORD *)v32 + 1) = v35;
          *(void *)&v17[v30[7]] = *(void *)&v18[v30[7]];
          *(void *)&v17[v30[8]] = *(void *)&v18[v30[8]];
          *(void *)&v17[v30[9]] = *(void *)&v18[v30[9]];
          v17[v30[10]] = v18[v30[10]];
          uint64_t v36 = v30[11];
          char v37 = &v17[v36];
          uint64_t v38 = &v18[v36];
          uint64_t v173 = *((void *)v38 + 1);
          *(void *)char v37 = *(void *)v38;
          *((void *)v37 + 1) = v173;
          uint64_t v39 = v30[12];
          uint64_t v40 = &v17[v39];
          uint64_t v41 = &v18[v39];
          uint64_t v172 = *((void *)v41 + 1);
          *(void *)uint64_t v40 = *(void *)v41;
          *((void *)v40 + 1) = v172;
          uint64_t v42 = v30[13];
          long long v176 = v30;
          uint64_t v178 = &v17[v42];
          uint64_t v181 = &v18[v42];
          uint64_t v43 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v170 = *(void *)(v43 - 8);
          long long v171 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v171(v181, 1, v43))
          {
            uint64_t v44 = sub_10000F214(&qword_100524BD0);
            memcpy(v178, v181, *(void *)(*(void *)(v44 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v178, v181, v43);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v178, 0, 1, v43);
          }
          uint64_t v80 = v176[14];
          uint64_t v81 = (uint64_t *)&v17[v80];
          char v82 = (uint64_t *)&v18[v80];
          unint64_t v83 = v82[1];
          if (v83 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
          }
          else
          {
            int v179 = v81;
            uint64_t v183 = *v82;
            sub_100038528(*v82, v83);
            *int v179 = v183;
            v179[1] = v83;
          }
          uint64_t v84 = v176[15];
          uint64_t v85 = &v17[v84];
          unint64_t v86 = &v18[v84];
          if (*(void *)v86)
          {
            uint64_t v87 = *((void *)v86 + 1);
            uint64_t v88 = *((void *)v86 + 2);
            *(void *)uint64_t v85 = *(void *)v86;
            *((void *)v85 + 1) = v87;
            *((void *)v85 + 2) = v88;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
            *((void *)v85 + 2) = *((void *)v86 + 2);
          }
          uint64_t v15 = v185;
          break;
        case 2u:
          v187(v17, v18, v13);
          uint64_t v45 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v17[v45[5]] = *(_DWORD *)&v18[v45[5]];
          uint64_t v46 = v45[6];
          unint64_t v47 = &v17[v46];
          uint64_t v48 = &v18[v46];
          long long v49 = *((_OWORD *)v48 + 3);
          *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
          *((_OWORD *)v47 + 3) = v49;
          long long v50 = *((_OWORD *)v48 + 1);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v48;
          *((_OWORD *)v47 + 1) = v50;
          uint64_t v51 = v45[7];
          uint64_t v52 = &v17[v51];
          uint64_t v53 = &v18[v51];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          *(void *)uint64_t v52 = v55;
          *((void *)v52 + 1) = v54;
          *(void *)&v17[v45[8]] = *(void *)&v18[v45[8]];
          *(void *)&v17[v45[9]] = *(void *)&v18[v45[9]];
          *(void *)&v17[v45[10]] = *(void *)&v18[v45[10]];
          *(void *)&v17[v45[11]] = *(void *)&v18[v45[11]];
          *(void *)&v17[v45[12]] = *(void *)&v18[v45[12]];
          uint64_t v56 = v45[13];
          uint64_t v182 = *(void **)&v18[v56];
          *(void *)&v17[v56] = v182;
          v17[v45[14]] = v18[v45[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v57 = v182;
          break;
        case 3u:
        case 4u:
          v187(v17, v18, v13);
          BOOL v58 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v17[v58[5]] = *(_DWORD *)&v18[v58[5]];
          uint64_t v59 = v58[6];
          uint64_t v60 = &v17[v59];
          uint64_t v61 = &v18[v59];
          long long v62 = *((_OWORD *)v61 + 3);
          *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
          *((_OWORD *)v60 + 3) = v62;
          long long v63 = *((_OWORD *)v61 + 1);
          *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
          *((_OWORD *)v60 + 1) = v63;
          uint64_t v64 = v58[7];
          uint64_t v65 = &v17[v64];
          uint64_t v66 = &v18[v64];
          uint64_t v68 = *(void *)v66;
          uint64_t v67 = *((void *)v66 + 1);
          *(void *)uint64_t v65 = v68;
          *((void *)v65 + 1) = v67;
          *(void *)&v17[v58[8]] = *(void *)&v18[v58[8]];
          *(void *)&v17[v58[9]] = *(void *)&v18[v58[9]];
          *(void *)&v17[v58[10]] = *(void *)&v18[v58[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v187(v17, v18, v13);
          uint64_t v69 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v17[v69[5]] = *(_DWORD *)&v18[v69[5]];
          uint64_t v70 = v69[6];
          uint64_t v71 = &v17[v70];
          uint64_t v72 = &v18[v70];
          long long v73 = *((_OWORD *)v72 + 3);
          *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
          *((_OWORD *)v71 + 3) = v73;
          long long v74 = *((_OWORD *)v72 + 1);
          *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
          *((_OWORD *)v71 + 1) = v74;
          uint64_t v75 = v69[7];
          uint64_t v76 = &v17[v75];
          uint64_t v77 = &v18[v75];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          *(void *)uint64_t v76 = v79;
          *((void *)v76 + 1) = v78;
          *(void *)&v17[v69[8]] = *(void *)&v18[v69[8]];
          *(void *)&v17[v69[9]] = *(void *)&v18[v69[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v187(v17, v18, v13);
          int v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v17[v19[5]] = *(_DWORD *)&v18[v19[5]];
          uint64_t v20 = v19[6];
          char v21 = &v17[v20];
          unsigned __int8 v22 = &v18[v20];
          long long v23 = *((_OWORD *)v22 + 3);
          *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
          *((_OWORD *)v21 + 3) = v23;
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)char v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v24;
          uint64_t v25 = v19[7];
          char v26 = &v17[v25];
          char v27 = &v18[v25];
          uint64_t v29 = *(void *)v27;
          uint64_t v28 = *((void *)v27 + 1);
          *(void *)char v26 = v29;
          *((void *)v26 + 1) = v28;
          *(void *)&v17[v19[8]] = *(void *)&v18[v19[8]];
          *(void *)&v17[v19[9]] = *(void *)&v18[v19[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v89 = v15[6];
      char v90 = &v10[v89];
      uint64_t v91 = &v11[v89];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v187(v90, v91, v13);
          uint64_t v103 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v90[v103[5]] = *(_DWORD *)&v91[v103[5]];
          uint64_t v104 = v103[6];
          uint64_t v105 = &v90[v104];
          uint64_t v106 = &v91[v104];
          long long v107 = *((_OWORD *)v106 + 3);
          *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
          *((_OWORD *)v105 + 3) = v107;
          long long v108 = *((_OWORD *)v106 + 1);
          *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
          *((_OWORD *)v105 + 1) = v108;
          *(void *)&v90[v103[7]] = *(void *)&v91[v103[7]];
          *(void *)&v90[v103[8]] = *(void *)&v91[v103[8]];
          *(void *)&v90[v103[9]] = *(void *)&v91[v103[9]];
          v90[v103[10]] = v91[v103[10]];
          uint64_t v109 = v103[11];
          uint64_t v110 = &v90[v109];
          uint64_t v111 = &v91[v109];
          uint64_t v180 = *((void *)v111 + 1);
          long long v184 = v103;
          *(void *)uint64_t v110 = *(void *)v111;
          *((void *)v110 + 1) = v180;
          uint64_t v112 = v103[12];
          unint64_t v113 = &v90[v112];
          uint64_t v114 = &v91[v112];
          uint64_t v177 = *((void *)v114 + 1);
          *(void *)unint64_t v113 = *(void *)v114;
          *((void *)v113 + 1) = v177;
          uint64_t v115 = v103[13];
          long long v186 = &v90[v115];
          long long v188 = &v91[v115];
          uint64_t v116 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v174 = *(void *)(v116 - 8);
          long long v175 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v175(v188, 1, v116))
          {
            uint64_t v117 = sub_10000F214(&qword_100524BD0);
            memcpy(v186, v188, *(void *)(*(void *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v186, v188, v116);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(v186, 0, 1, v116);
          }
          uint64_t v153 = v184[14];
          uint64_t v154 = &v90[v153];
          uint64_t v155 = (uint64_t *)&v91[v153];
          unint64_t v156 = v155[1];
          if (v156 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
          }
          else
          {
            uint64_t v190 = *v155;
            sub_100038528(*v155, v156);
            *(void *)uint64_t v154 = v190;
            *((void *)v154 + 1) = v156;
          }
          uint64_t v157 = v184[15];
          uint64_t v158 = &v90[v157];
          uint64_t v159 = &v91[v157];
          if (*(void *)v159)
          {
            uint64_t v160 = *((void *)v159 + 1);
            uint64_t v161 = *((void *)v159 + 2);
            *(void *)uint64_t v158 = *(void *)v159;
            *((void *)v158 + 1) = v160;
            *((void *)v158 + 2) = v161;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
            *((void *)v158 + 2) = *((void *)v159 + 2);
          }
          uint64_t v15 = v185;
          break;
        case 2u:
          v187(v90, v91, v13);
          Swift::Int v118 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v90[v118[5]] = *(_DWORD *)&v91[v118[5]];
          uint64_t v119 = v118[6];
          uint64_t v120 = &v90[v119];
          uint64_t v121 = &v91[v119];
          long long v122 = *((_OWORD *)v121 + 3);
          *((_OWORD *)v120 + 2) = *((_OWORD *)v121 + 2);
          *((_OWORD *)v120 + 3) = v122;
          long long v123 = *((_OWORD *)v121 + 1);
          *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
          *((_OWORD *)v120 + 1) = v123;
          uint64_t v124 = v118[7];
          uint64_t v125 = &v90[v124];
          long long v126 = &v91[v124];
          uint64_t v128 = *(void *)v126;
          uint64_t v127 = *((void *)v126 + 1);
          *(void *)uint64_t v125 = v128;
          *((void *)v125 + 1) = v127;
          *(void *)&v90[v118[8]] = *(void *)&v91[v118[8]];
          *(void *)&v90[v118[9]] = *(void *)&v91[v118[9]];
          *(void *)&v90[v118[10]] = *(void *)&v91[v118[10]];
          *(void *)&v90[v118[11]] = *(void *)&v91[v118[11]];
          *(void *)&v90[v118[12]] = *(void *)&v91[v118[12]];
          uint64_t v129 = v118[13];
          long long v189 = *(void **)&v91[v129];
          *(void *)&v90[v129] = v189;
          v90[v118[14]] = v91[v118[14]];
          swift_bridgeObjectRetain();
          uint64_t v15 = v185;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v130 = v189;
          break;
        case 3u:
        case 4u:
          v187(v90, v91, v13);
          long long v131 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v90[v131[5]] = *(_DWORD *)&v91[v131[5]];
          uint64_t v132 = v131[6];
          long long v133 = &v90[v132];
          long long v134 = &v91[v132];
          long long v135 = *((_OWORD *)v134 + 3);
          *((_OWORD *)v133 + 2) = *((_OWORD *)v134 + 2);
          *((_OWORD *)v133 + 3) = v135;
          long long v136 = *((_OWORD *)v134 + 1);
          *(_OWORD *)long long v133 = *(_OWORD *)v134;
          *((_OWORD *)v133 + 1) = v136;
          uint64_t v137 = v131[7];
          uint64_t v138 = &v90[v137];
          uint64_t v139 = &v91[v137];
          uint64_t v141 = *(void *)v139;
          uint64_t v140 = *((void *)v139 + 1);
          *(void *)uint64_t v138 = v141;
          *((void *)v138 + 1) = v140;
          *(void *)&v90[v131[8]] = *(void *)&v91[v131[8]];
          *(void *)&v90[v131[9]] = *(void *)&v91[v131[9]];
          *(void *)&v90[v131[10]] = *(void *)&v91[v131[10]];
          swift_bridgeObjectRetain();
          uint64_t v15 = v185;
          swift_retain();
          break;
        case 5u:
          v187(v90, v91, v13);
          char v142 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v90[v142[5]] = *(_DWORD *)&v91[v142[5]];
          uint64_t v143 = v142[6];
          long long v144 = &v90[v143];
          char v145 = &v91[v143];
          long long v146 = *((_OWORD *)v145 + 3);
          *((_OWORD *)v144 + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)v144 + 3) = v146;
          long long v147 = *((_OWORD *)v145 + 1);
          *(_OWORD *)long long v144 = *(_OWORD *)v145;
          *((_OWORD *)v144 + 1) = v147;
          uint64_t v148 = v142[7];
          unsigned int v149 = &v90[v148];
          uint64_t v150 = &v91[v148];
          uint64_t v152 = *(void *)v150;
          uint64_t v151 = *((void *)v150 + 1);
          *(void *)unsigned int v149 = v152;
          *((void *)v149 + 1) = v151;
          *(void *)&v90[v142[8]] = *(void *)&v91[v142[8]];
          *(void *)&v90[v142[9]] = *(void *)&v91[v142[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v187(v90, v91, v13);
          unint64_t v92 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v90[v92[5]] = *(_DWORD *)&v91[v92[5]];
          uint64_t v93 = v92[6];
          uint64_t v94 = &v90[v93];
          uint64_t v95 = &v91[v93];
          long long v96 = *((_OWORD *)v95 + 3);
          *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
          *((_OWORD *)v94 + 3) = v96;
          long long v97 = *((_OWORD *)v95 + 1);
          *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
          *((_OWORD *)v94 + 1) = v97;
          uint64_t v98 = v92[7];
          uint64_t v99 = &v90[v98];
          uint64_t v100 = &v91[v98];
          uint64_t v102 = *(void *)v100;
          uint64_t v101 = *((void *)v100 + 1);
          *(void *)uint64_t v99 = v102;
          *((void *)v99 + 1) = v101;
          *(void *)&v90[v92[8]] = *(void *)&v91[v92[8]];
          *(void *)&v90[v92[9]] = *(void *)&v91[v92[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      v10[v15[7]] = v11[v15[7]];
      *(void *)&v10[v15[8]] = *(void *)&v11[v15[8]];
      *(_DWORD *)&v10[v15[9]] = *(_DWORD *)&v11[v15[9]];
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v162 = type metadata accessor for CVBundle(0);
    *(void *)&v10[*(int *)(v162 + 20)] = *(void *)&v11[*(int *)(v162 + 20)];
    *(void *)&v10[*(int *)(v162 + 24)] = *(void *)&v11[*(int *)(v162 + 24)];
    uint64_t v163 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v164 = (char *)v4 + v163;
    char v165 = (char *)a2 + v163;
    *uint64_t v164 = *v165;
    *((void *)v164 + 1) = *((void *)v165 + 1);
    uint64_t v166 = a3[8];
    uint64_t v167 = (char *)v4 + v166;
    char v168 = (char *)a2 + v166;
    *uint64_t v167 = *v168;
    *((void *)v167 + 1) = *((void *)v168 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10007C04C(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v5, v7);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v9 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v10 = v5 + *(int *)(v9 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8(v10, v7);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_16;
      case 1u:
        uint64_t v31 = v9;
        v8(v10, v7);
        uint64_t v11 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = v10 + v11[13];
        uint64_t v13 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v29 = *(void *)(v13 - 8);
        uint64_t v30 = v12;
        uint64_t v14 = v12;
        uint64_t v15 = v13;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v14, 1, v13)) {
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v15);
        }
        uint64_t v16 = (uint64_t *)(v10 + v11[14]);
        unint64_t v17 = v16[1];
        if (v17 >> 60 != 15) {
          sub_100038B34(*v16, v17);
        }
        uint64_t v18 = (void *)(v10 + v11[15]);
        uint64_t v9 = v31;
        if (*v18)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v8(v10, v7);
        uint64_t v19 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v8(v10, v7);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v8(v10, v7);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_16:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v20 = v5 + *(int *)(v9 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8(v20, v7);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_28;
      case 1u:
        v8(v20, v7);
        char v21 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = v20 + v21[13];
        uint64_t v23 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v24 = *(void *)(v23 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23)) {
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
        }
        uint64_t v25 = (uint64_t *)(v20 + v21[14]);
        unint64_t v26 = v25[1];
        if (v26 >> 60 != 15) {
          sub_100038B34(*v25, v26);
        }
        if (*(void *)(v20 + v21[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v8(v20, v7);
        uint64_t v27 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v8(v20, v7);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v8(v20, v7);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_28:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  type metadata accessor for CVBundle(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *sub_10007C67C(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v8, v9, v11);
  if (EnumCaseMultiPayload != 1)
  {
    long long v187 = v12;
    uint64_t v13 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v14 = v13[5];
    uint64_t v15 = &v8[v14];
    uint64_t v16 = &v9[v14];
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v182 = a3;
        long long v184 = v13;
        v187(v15, v16, v11);
        uint64_t v28 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v15[v28[5]] = *(_DWORD *)&v16[v28[5]];
        uint64_t v29 = v28[6];
        uint64_t v30 = &v15[v29];
        uint64_t v31 = &v16[v29];
        long long v32 = *((_OWORD *)v31 + 3);
        *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
        *((_OWORD *)v30 + 3) = v32;
        long long v33 = *((_OWORD *)v31 + 1);
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
        *((_OWORD *)v30 + 1) = v33;
        *(void *)&v15[v28[7]] = *(void *)&v16[v28[7]];
        *(void *)&v15[v28[8]] = *(void *)&v16[v28[8]];
        *(void *)&v15[v28[9]] = *(void *)&v16[v28[9]];
        v15[v28[10]] = v16[v28[10]];
        uint64_t v34 = v28[11];
        long long v35 = &v15[v34];
        uint64_t v36 = &v16[v34];
        uint64_t v173 = *((void *)v36 + 1);
        *(void *)long long v35 = *(void *)v36;
        *((void *)v35 + 1) = v173;
        uint64_t v37 = v28[12];
        uint64_t v38 = &v15[v37];
        uint64_t v39 = &v16[v37];
        uint64_t v172 = *((void *)v39 + 1);
        *(void *)uint64_t v38 = *(void *)v39;
        *((void *)v38 + 1) = v172;
        uint64_t v40 = v28[13];
        long long v176 = &v15[v40];
        uint64_t v178 = &v16[v40];
        uint64_t v41 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v170 = *(void *)(v41 - 8);
        long long v171 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v171(v178, 1, v41))
        {
          uint64_t v42 = sub_10000F214(&qword_100524BD0);
          memcpy(v176, v178, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v176, v178, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(v176, 0, 1, v41);
        }
        uint64_t v78 = v28[14];
        uint64_t v79 = &v15[v78];
        uint64_t v80 = (uint64_t *)&v16[v78];
        unint64_t v81 = v80[1];
        if (v81 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
        }
        else
        {
          uint64_t v180 = *v80;
          sub_100038528(*v80, v81);
          *(void *)uint64_t v79 = v180;
          *((void *)v79 + 1) = v81;
        }
        a3 = v182;
        uint64_t v82 = v28[15];
        unint64_t v83 = &v15[v82];
        uint64_t v84 = &v16[v82];
        if (*(void *)v84)
        {
          uint64_t v85 = *((void *)v84 + 1);
          uint64_t v86 = *((void *)v84 + 2);
          *(void *)unint64_t v83 = *(void *)v84;
          *((void *)v83 + 1) = v85;
          *((void *)v83 + 2) = v86;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)unint64_t v83 = *(_OWORD *)v84;
          *((void *)v83 + 2) = *((void *)v84 + 2);
        }
        uint64_t v13 = v184;
        break;
      case 2u:
        v187(v15, v16, v11);
        uint64_t v43 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v15[v43[5]] = *(_DWORD *)&v16[v43[5]];
        uint64_t v44 = v43[6];
        uint64_t v45 = &v15[v44];
        uint64_t v46 = &v16[v44];
        long long v47 = *((_OWORD *)v46 + 3);
        *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
        *((_OWORD *)v45 + 3) = v47;
        long long v48 = *((_OWORD *)v46 + 1);
        *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
        *((_OWORD *)v45 + 1) = v48;
        uint64_t v49 = v43[7];
        long long v50 = &v15[v49];
        uint64_t v51 = &v16[v49];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        *(void *)long long v50 = v53;
        *((void *)v50 + 1) = v52;
        *(void *)&v15[v43[8]] = *(void *)&v16[v43[8]];
        *(void *)&v15[v43[9]] = *(void *)&v16[v43[9]];
        *(void *)&v15[v43[10]] = *(void *)&v16[v43[10]];
        *(void *)&v15[v43[11]] = *(void *)&v16[v43[11]];
        *(void *)&v15[v43[12]] = *(void *)&v16[v43[12]];
        uint64_t v54 = v43[13];
        int v179 = *(void **)&v16[v54];
        *(void *)&v15[v54] = v179;
        v15[v43[14]] = v16[v43[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v55 = v179;
        break;
      case 3u:
      case 4u:
        v187(v15, v16, v11);
        uint64_t v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v15[v56[5]] = *(_DWORD *)&v16[v56[5]];
        uint64_t v57 = v56[6];
        BOOL v58 = &v15[v57];
        uint64_t v59 = &v16[v57];
        long long v60 = *((_OWORD *)v59 + 3);
        *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
        *((_OWORD *)v58 + 3) = v60;
        long long v61 = *((_OWORD *)v59 + 1);
        *(_OWORD *)BOOL v58 = *(_OWORD *)v59;
        *((_OWORD *)v58 + 1) = v61;
        uint64_t v62 = v56[7];
        long long v63 = &v15[v62];
        uint64_t v64 = &v16[v62];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        *(void *)long long v63 = v66;
        *((void *)v63 + 1) = v65;
        *(void *)&v15[v56[8]] = *(void *)&v16[v56[8]];
        *(void *)&v15[v56[9]] = *(void *)&v16[v56[9]];
        *(void *)&v15[v56[10]] = *(void *)&v16[v56[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v187(v15, v16, v11);
        uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v15[v67[5]] = *(_DWORD *)&v16[v67[5]];
        uint64_t v68 = v67[6];
        uint64_t v69 = &v15[v68];
        uint64_t v70 = &v16[v68];
        long long v71 = *((_OWORD *)v70 + 3);
        *((_OWORD *)v69 + 2) = *((_OWORD *)v70 + 2);
        *((_OWORD *)v69 + 3) = v71;
        long long v72 = *((_OWORD *)v70 + 1);
        *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
        *((_OWORD *)v69 + 1) = v72;
        uint64_t v73 = v67[7];
        long long v74 = &v15[v73];
        uint64_t v75 = &v16[v73];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        *(void *)long long v74 = v77;
        *((void *)v74 + 1) = v76;
        *(void *)&v15[v67[8]] = *(void *)&v16[v67[8]];
        *(void *)&v15[v67[9]] = *(void *)&v16[v67[9]];
        swift_bridgeObjectRetain();
        break;
      default:
        v187(v15, v16, v11);
        unint64_t v17 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v15[v17[5]] = *(_DWORD *)&v16[v17[5]];
        uint64_t v18 = v17[6];
        uint64_t v19 = &v15[v18];
        uint64_t v20 = &v16[v18];
        long long v21 = *((_OWORD *)v20 + 3);
        *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
        *((_OWORD *)v19 + 3) = v21;
        long long v22 = *((_OWORD *)v20 + 1);
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
        *((_OWORD *)v19 + 1) = v22;
        uint64_t v23 = v17[7];
        uint64_t v24 = &v15[v23];
        uint64_t v25 = &v16[v23];
        uint64_t v27 = *(void *)v25;
        uint64_t v26 = *((void *)v25 + 1);
        *(void *)uint64_t v24 = v27;
        *((void *)v24 + 1) = v26;
        *(void *)&v15[v17[8]] = *(void *)&v16[v17[8]];
        *(void *)&v15[v17[9]] = *(void *)&v16[v17[9]];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v87 = v13[6];
    uint64_t v88 = &v8[v87];
    uint64_t v89 = &v9[v87];
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v183 = a3;
        long long v185 = v13;
        v187(v88, v89, v11);
        uint64_t v101 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v88[v101[5]] = *(_DWORD *)&v89[v101[5]];
        uint64_t v102 = v101[6];
        uint64_t v103 = &v88[v102];
        uint64_t v104 = &v89[v102];
        long long v105 = *((_OWORD *)v104 + 3);
        *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
        *((_OWORD *)v103 + 3) = v105;
        long long v106 = *((_OWORD *)v104 + 1);
        *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
        *((_OWORD *)v103 + 1) = v106;
        *(void *)&v88[v101[7]] = *(void *)&v89[v101[7]];
        *(void *)&v88[v101[8]] = *(void *)&v89[v101[8]];
        *(void *)&v88[v101[9]] = *(void *)&v89[v101[9]];
        v88[v101[10]] = v89[v101[10]];
        uint64_t v107 = v101[11];
        long long v108 = &v88[v107];
        uint64_t v109 = &v89[v107];
        uint64_t v181 = *((void *)v109 + 1);
        *(void *)long long v108 = *(void *)v109;
        *((void *)v108 + 1) = v181;
        uint64_t v110 = v101[12];
        uint64_t v111 = &v88[v110];
        uint64_t v112 = &v89[v110];
        uint64_t v177 = *((void *)v112 + 1);
        *(void *)uint64_t v111 = *(void *)v112;
        *((void *)v111 + 1) = v177;
        uint64_t v113 = v101[13];
        __dst = &v88[v113];
        long long v188 = &v89[v113];
        uint64_t v114 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v174 = *(void *)(v114 - 8);
        long long v175 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v175(v188, 1, v114))
        {
          uint64_t v115 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v188, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v174 + 16))(__dst, v188, v114);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(__dst, 0, 1, v114);
        }
        uint64_t v160 = v101[14];
        uint64_t v161 = &v88[v160];
        uint64_t v162 = &v89[v160];
        unint64_t v163 = *((void *)v162 + 1);
        if (v163 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
        }
        else
        {
          uint64_t v164 = *(void *)v162;
          sub_100038528(*(void *)v162, *((void *)v162 + 1));
          *(void *)uint64_t v161 = v164;
          *((void *)v161 + 1) = v163;
        }
        a3 = v183;
        uint64_t v165 = v101[15];
        uint64_t v166 = &v88[v165];
        uint64_t v167 = &v89[v165];
        if (*(void *)v167)
        {
          uint64_t v168 = *((void *)v167 + 1);
          uint64_t v169 = *((void *)v167 + 2);
          *(void *)uint64_t v166 = *(void *)v167;
          *((void *)v166 + 1) = v168;
          *((void *)v166 + 2) = v169;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
          *((void *)v166 + 2) = *((void *)v167 + 2);
        }
        uint64_t v13 = v185;
        swift_storeEnumTagMultiPayload();
        goto LABEL_28;
      case 2u:
        v187(v88, v89, v11);
        uint64_t v116 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v88[v116[5]] = *(_DWORD *)&v89[v116[5]];
        uint64_t v117 = v116[6];
        Swift::Int v118 = &v88[v117];
        uint64_t v119 = &v89[v117];
        long long v120 = *((_OWORD *)v119 + 3);
        *((_OWORD *)v118 + 2) = *((_OWORD *)v119 + 2);
        *((_OWORD *)v118 + 3) = v120;
        long long v121 = *((_OWORD *)v119 + 1);
        *(_OWORD *)Swift::Int v118 = *(_OWORD *)v119;
        *((_OWORD *)v118 + 1) = v121;
        uint64_t v122 = v116[7];
        long long v123 = &v88[v122];
        uint64_t v124 = &v89[v122];
        uint64_t v126 = *(void *)v124;
        uint64_t v125 = *((void *)v124 + 1);
        *(void *)long long v123 = v126;
        *((void *)v123 + 1) = v125;
        *(void *)&v88[v116[8]] = *(void *)&v89[v116[8]];
        *(void *)&v88[v116[9]] = *(void *)&v89[v116[9]];
        *(void *)&v88[v116[10]] = *(void *)&v89[v116[10]];
        *(void *)&v88[v116[11]] = *(void *)&v89[v116[11]];
        *(void *)&v88[v116[12]] = *(void *)&v89[v116[12]];
        uint64_t v127 = v116[13];
        uint64_t v128 = *(void **)&v89[v127];
        *(void *)&v88[v127] = v128;
        v88[v116[14]] = v89[v116[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v129 = v128;
        goto LABEL_27;
      case 3u:
      case 4u:
        v187(v88, v89, v11);
        id v130 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v88[v130[5]] = *(_DWORD *)&v89[v130[5]];
        uint64_t v131 = v130[6];
        uint64_t v132 = &v88[v131];
        long long v133 = &v89[v131];
        long long v134 = *((_OWORD *)v133 + 3);
        *((_OWORD *)v132 + 2) = *((_OWORD *)v133 + 2);
        *((_OWORD *)v132 + 3) = v134;
        long long v135 = *((_OWORD *)v133 + 1);
        *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
        *((_OWORD *)v132 + 1) = v135;
        uint64_t v136 = v130[7];
        uint64_t v137 = &v88[v136];
        uint64_t v138 = &v89[v136];
        uint64_t v140 = *(void *)v138;
        uint64_t v139 = *((void *)v138 + 1);
        *(void *)uint64_t v137 = v140;
        *((void *)v137 + 1) = v139;
        *(void *)&v88[v130[8]] = *(void *)&v89[v130[8]];
        *(void *)&v88[v130[9]] = *(void *)&v89[v130[9]];
        *(void *)&v88[v130[10]] = *(void *)&v89[v130[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_27;
      case 5u:
        v187(v88, v89, v11);
        uint64_t v141 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v88[v141[5]] = *(_DWORD *)&v89[v141[5]];
        uint64_t v142 = v141[6];
        uint64_t v143 = &v88[v142];
        long long v144 = &v89[v142];
        long long v145 = *((_OWORD *)v144 + 3);
        *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
        *((_OWORD *)v143 + 3) = v145;
        long long v146 = *((_OWORD *)v144 + 1);
        *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
        *((_OWORD *)v143 + 1) = v146;
        uint64_t v147 = v141[7];
        uint64_t v148 = &v88[v147];
        unsigned int v149 = &v89[v147];
        uint64_t v151 = *(void *)v149;
        uint64_t v150 = *((void *)v149 + 1);
        *(void *)uint64_t v148 = v151;
        *((void *)v148 + 1) = v150;
        *(void *)&v88[v141[8]] = *(void *)&v89[v141[8]];
        *(void *)&v88[v141[9]] = *(void *)&v89[v141[9]];
        swift_bridgeObjectRetain();
        goto LABEL_27;
      default:
        v187(v88, v89, v11);
        char v90 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v88[v90[5]] = *(_DWORD *)&v89[v90[5]];
        uint64_t v91 = v90[6];
        unint64_t v92 = &v88[v91];
        uint64_t v93 = &v89[v91];
        long long v94 = *((_OWORD *)v93 + 3);
        *((_OWORD *)v92 + 2) = *((_OWORD *)v93 + 2);
        *((_OWORD *)v92 + 3) = v94;
        long long v95 = *((_OWORD *)v93 + 1);
        *(_OWORD *)unint64_t v92 = *(_OWORD *)v93;
        *((_OWORD *)v92 + 1) = v95;
        uint64_t v96 = v90[7];
        long long v97 = &v88[v96];
        uint64_t v98 = &v89[v96];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        *(void *)long long v97 = v100;
        *((void *)v97 + 1) = v99;
        *(void *)&v88[v90[8]] = *(void *)&v89[v90[8]];
        *(void *)&v88[v90[9]] = *(void *)&v89[v90[9]];
        swift_bridgeObjectRetain();
LABEL_27:
        swift_storeEnumTagMultiPayload();
LABEL_28:
        v8[v13[7]] = v9[v13[7]];
        *(void *)&v8[v13[8]] = *(void *)&v9[v13[8]];
        *(_DWORD *)&v8[v13[9]] = *(_DWORD *)&v9[v13[9]];
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v152 = type metadata accessor for CVBundle(0);
  *(void *)&v8[*(int *)(v152 + 20)] = *(void *)&v9[*(int *)(v152 + 20)];
  *(void *)&v8[*(int *)(v152 + 24)] = *(void *)&v9[*(int *)(v152 + 24)];
  uint64_t v153 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v154 = (char *)a1 + v153;
  uint64_t v155 = (char *)a2 + v153;
  *uint64_t v154 = *v155;
  *((void *)v154 + 1) = *((void *)v155 + 1);
  uint64_t v156 = a3[8];
  uint64_t v157 = (char *)a1 + v156;
  uint64_t v158 = (char *)a2 + v156;
  *uint64_t v157 = *v158;
  *((void *)v157 + 1) = *((void *)v158 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_10007D524(void *a1, void *a2, int *a3)
{
  if (a1 == a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
  }
  else
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    uint64_t v8 = (char *)a1 + v10;
    uint64_t v9 = (char *)a2 + v10;
    sub_1000814B0((uint64_t)a1 + v10, type metadata accessor for CVBundle.BundleType);
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v8, v9, v12);
    if (EnumCaseMultiPayload != 1)
    {
      long long v176 = v13;
      uint64_t v14 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = &v8[v15];
      unint64_t v17 = &v9[v15];
      type metadata accessor for CVDetection();
      uint64_t v174 = v14;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v176(v16, v17, v12);
          uint64_t v28 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v16[v28[5]] = *(_DWORD *)&v17[v28[5]];
          uint64_t v29 = v28[6];
          uint64_t v30 = &v16[v29];
          uint64_t v31 = &v17[v29];
          long long v33 = *((_OWORD *)v31 + 2);
          long long v32 = *((_OWORD *)v31 + 3);
          long long v34 = *((_OWORD *)v31 + 1);
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          *((_OWORD *)v30 + 1) = v34;
          *((_OWORD *)v30 + 2) = v33;
          *((_OWORD *)v30 + 3) = v32;
          *(void *)&v16[v28[7]] = *(void *)&v17[v28[7]];
          *(void *)&v16[v28[8]] = *(void *)&v17[v28[8]];
          *(void *)&v16[v28[9]] = *(void *)&v17[v28[9]];
          v16[v28[10]] = v17[v28[10]];
          uint64_t v35 = v28[11];
          uint64_t v36 = &v16[v35];
          uint64_t v37 = &v17[v35];
          *(void *)uint64_t v36 = *(void *)v37;
          *((void *)v36 + 1) = *((void *)v37 + 1);
          uint64_t v38 = v28[12];
          uint64_t v39 = &v16[v38];
          uint64_t v40 = &v17[v38];
          *(void *)uint64_t v39 = *(void *)v40;
          *((void *)v39 + 1) = *((void *)v40 + 1);
          uint64_t v41 = v28[13];
          uint64_t v167 = v28;
          uint64_t v168 = &v16[v41];
          uint64_t v170 = &v17[v41];
          uint64_t v42 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v163 = *(void *)(v42 - 8);
          uint64_t v164 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v164(v170, 1, v42))
          {
            uint64_t v43 = sub_10000F214(&qword_100524BD0);
            memcpy(v168, v170, *(void *)(*(void *)(v43 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v168, v170, v42);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v168, 0, 1, v42);
          }
          uint64_t v76 = v167[14];
          uint64_t v77 = (uint64_t *)&v16[v76];
          uint64_t v78 = (uint64_t *)&v17[v76];
          unint64_t v79 = v78[1];
          if (v79 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
          }
          else
          {
            uint64_t v169 = v77;
            uint64_t v172 = *v78;
            sub_100038528(*v78, v79);
            *uint64_t v169 = v172;
            v169[1] = v79;
          }
          uint64_t v80 = v167[15];
          unint64_t v81 = &v16[v80];
          uint64_t v82 = &v17[v80];
          if (*(void *)v82)
          {
            *(void *)unint64_t v81 = *(void *)v82;
            uint64_t v83 = *((void *)v82 + 2);
            *((void *)v81 + 1) = *((void *)v82 + 1);
            *((void *)v81 + 2) = v83;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v84 = *(_OWORD *)v82;
            *((void *)v81 + 2) = *((void *)v82 + 2);
            *(_OWORD *)unint64_t v81 = v84;
          }
          uint64_t v14 = v174;
          break;
        case 2u:
          v176(v16, v17, v12);
          uint64_t v44 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v16[v44[5]] = *(_DWORD *)&v17[v44[5]];
          uint64_t v45 = v44[6];
          uint64_t v46 = &v16[v45];
          long long v47 = &v17[v45];
          long long v49 = *((_OWORD *)v47 + 2);
          long long v48 = *((_OWORD *)v47 + 3);
          long long v50 = *((_OWORD *)v47 + 1);
          *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
          *((_OWORD *)v46 + 1) = v50;
          *((_OWORD *)v46 + 2) = v49;
          *((_OWORD *)v46 + 3) = v48;
          uint64_t v51 = v44[7];
          uint64_t v52 = &v16[v51];
          uint64_t v53 = &v17[v51];
          *(void *)uint64_t v52 = *(void *)v53;
          *((void *)v52 + 1) = *((void *)v53 + 1);
          *(void *)&v16[v44[8]] = *(void *)&v17[v44[8]];
          *(void *)&v16[v44[9]] = *(void *)&v17[v44[9]];
          *(void *)&v16[v44[10]] = *(void *)&v17[v44[10]];
          *(void *)&v16[v44[11]] = *(void *)&v17[v44[11]];
          *(void *)&v16[v44[12]] = *(void *)&v17[v44[12]];
          uint64_t v54 = v44[13];
          long long v171 = *(void **)&v17[v54];
          *(void *)&v16[v54] = v171;
          v16[v44[14]] = v17[v44[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v55 = v171;
          break;
        case 3u:
        case 4u:
          v176(v16, v17, v12);
          uint64_t v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v16[v56[5]] = *(_DWORD *)&v17[v56[5]];
          uint64_t v57 = v56[6];
          BOOL v58 = &v16[v57];
          uint64_t v59 = &v17[v57];
          long long v61 = *((_OWORD *)v59 + 2);
          long long v60 = *((_OWORD *)v59 + 3);
          long long v62 = *((_OWORD *)v59 + 1);
          *(_OWORD *)BOOL v58 = *(_OWORD *)v59;
          *((_OWORD *)v58 + 1) = v62;
          *((_OWORD *)v58 + 2) = v61;
          *((_OWORD *)v58 + 3) = v60;
          uint64_t v63 = v56[7];
          uint64_t v64 = &v16[v63];
          uint64_t v65 = &v17[v63];
          *(void *)uint64_t v64 = *(void *)v65;
          *((void *)v64 + 1) = *((void *)v65 + 1);
          *(void *)&v16[v56[8]] = *(void *)&v17[v56[8]];
          *(void *)&v16[v56[9]] = *(void *)&v17[v56[9]];
          *(void *)&v16[v56[10]] = *(void *)&v17[v56[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v176(v16, v17, v12);
          uint64_t v66 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v16[v66[5]] = *(_DWORD *)&v17[v66[5]];
          uint64_t v67 = v66[6];
          uint64_t v68 = &v16[v67];
          uint64_t v69 = &v17[v67];
          long long v71 = *((_OWORD *)v69 + 2);
          long long v70 = *((_OWORD *)v69 + 3);
          long long v72 = *((_OWORD *)v69 + 1);
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
          *((_OWORD *)v68 + 1) = v72;
          *((_OWORD *)v68 + 2) = v71;
          *((_OWORD *)v68 + 3) = v70;
          uint64_t v73 = v66[7];
          long long v74 = &v16[v73];
          uint64_t v75 = &v17[v73];
          *(void *)long long v74 = *(void *)v75;
          *((void *)v74 + 1) = *((void *)v75 + 1);
          *(void *)&v16[v66[8]] = *(void *)&v17[v66[8]];
          *(void *)&v16[v66[9]] = *(void *)&v17[v66[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v176(v16, v17, v12);
          uint64_t v18 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v16[v18[5]] = *(_DWORD *)&v17[v18[5]];
          uint64_t v19 = v18[6];
          uint64_t v20 = &v16[v19];
          long long v21 = &v17[v19];
          long long v23 = *((_OWORD *)v21 + 2);
          long long v22 = *((_OWORD *)v21 + 3);
          long long v24 = *((_OWORD *)v21 + 1);
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
          *((_OWORD *)v20 + 1) = v24;
          *((_OWORD *)v20 + 2) = v23;
          *((_OWORD *)v20 + 3) = v22;
          uint64_t v25 = v18[7];
          uint64_t v26 = &v16[v25];
          uint64_t v27 = &v17[v25];
          *(void *)uint64_t v26 = *(void *)v27;
          *((void *)v26 + 1) = *((void *)v27 + 1);
          *(void *)&v16[v18[8]] = *(void *)&v17[v18[8]];
          *(void *)&v16[v18[9]] = *(void *)&v17[v18[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = v14[6];
      uint64_t v86 = &v8[v85];
      uint64_t v87 = &v9[v85];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v176(v86, v87, v12);
          uint64_t v98 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v86[v98[5]] = *(_DWORD *)&v87[v98[5]];
          uint64_t v99 = v98[6];
          uint64_t v100 = &v86[v99];
          uint64_t v101 = &v87[v99];
          long long v103 = *((_OWORD *)v101 + 2);
          long long v102 = *((_OWORD *)v101 + 3);
          long long v104 = *((_OWORD *)v101 + 1);
          *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
          *((_OWORD *)v100 + 1) = v104;
          *((_OWORD *)v100 + 2) = v103;
          *((_OWORD *)v100 + 3) = v102;
          *(void *)&v86[v98[7]] = *(void *)&v87[v98[7]];
          *(void *)&v86[v98[8]] = *(void *)&v87[v98[8]];
          *(void *)&v86[v98[9]] = *(void *)&v87[v98[9]];
          v86[v98[10]] = v87[v98[10]];
          uint64_t v105 = v98[11];
          long long v106 = &v86[v105];
          uint64_t v107 = &v87[v105];
          *(void *)long long v106 = *(void *)v107;
          uint64_t v173 = v98;
          *((void *)v106 + 1) = *((void *)v107 + 1);
          uint64_t v108 = v98[12];
          uint64_t v109 = &v86[v108];
          uint64_t v110 = &v87[v108];
          *(void *)uint64_t v109 = *(void *)v110;
          *((void *)v109 + 1) = *((void *)v110 + 1);
          uint64_t v111 = v98[13];
          long long v175 = &v86[v111];
          uint64_t v177 = &v87[v111];
          uint64_t v112 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v165 = *(void *)(v112 - 8);
          uint64_t v166 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v166(v177, 1, v112))
          {
            uint64_t v113 = sub_10000F214(&qword_100524BD0);
            memcpy(v175, v177, *(void *)(*(void *)(v113 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v175, v177, v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v165 + 56))(v175, 0, 1, v112);
          }
          uint64_t v146 = v173[14];
          uint64_t v147 = &v86[v146];
          uint64_t v148 = (uint64_t *)&v87[v146];
          unint64_t v149 = v148[1];
          if (v149 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
          }
          else
          {
            uint64_t v179 = *v148;
            sub_100038528(*v148, v149);
            *(void *)uint64_t v147 = v179;
            *((void *)v147 + 1) = v149;
          }
          uint64_t v150 = v173[15];
          uint64_t v151 = &v86[v150];
          uint64_t v152 = &v87[v150];
          if (*(void *)v152)
          {
            *(void *)uint64_t v151 = *(void *)v152;
            uint64_t v153 = *((void *)v152 + 2);
            *((void *)v151 + 1) = *((void *)v152 + 1);
            *((void *)v151 + 2) = v153;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v154 = *(_OWORD *)v152;
            *((void *)v151 + 2) = *((void *)v152 + 2);
            *(_OWORD *)uint64_t v151 = v154;
          }
          uint64_t v14 = v174;
          break;
        case 2u:
          v176(v86, v87, v12);
          uint64_t v114 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v86[v114[5]] = *(_DWORD *)&v87[v114[5]];
          uint64_t v115 = v114[6];
          uint64_t v116 = &v86[v115];
          uint64_t v117 = &v87[v115];
          long long v119 = *((_OWORD *)v117 + 2);
          long long v118 = *((_OWORD *)v117 + 3);
          long long v120 = *((_OWORD *)v117 + 1);
          *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
          *((_OWORD *)v116 + 1) = v120;
          *((_OWORD *)v116 + 2) = v119;
          *((_OWORD *)v116 + 3) = v118;
          uint64_t v121 = v114[7];
          uint64_t v122 = &v86[v121];
          long long v123 = &v87[v121];
          *(void *)uint64_t v122 = *(void *)v123;
          *((void *)v122 + 1) = *((void *)v123 + 1);
          *(void *)&v86[v114[8]] = *(void *)&v87[v114[8]];
          *(void *)&v86[v114[9]] = *(void *)&v87[v114[9]];
          *(void *)&v86[v114[10]] = *(void *)&v87[v114[10]];
          *(void *)&v86[v114[11]] = *(void *)&v87[v114[11]];
          *(void *)&v86[v114[12]] = *(void *)&v87[v114[12]];
          uint64_t v124 = v114[13];
          uint64_t v178 = *(void **)&v87[v124];
          *(void *)&v86[v124] = v178;
          v86[v114[14]] = v87[v114[14]];
          swift_bridgeObjectRetain();
          uint64_t v14 = v174;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v125 = v178;
          break;
        case 3u:
        case 4u:
          v176(v86, v87, v12);
          uint64_t v126 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v86[v126[5]] = *(_DWORD *)&v87[v126[5]];
          uint64_t v127 = v126[6];
          uint64_t v128 = &v86[v127];
          id v129 = &v87[v127];
          long long v131 = *((_OWORD *)v129 + 2);
          long long v130 = *((_OWORD *)v129 + 3);
          long long v132 = *((_OWORD *)v129 + 1);
          *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
          *((_OWORD *)v128 + 1) = v132;
          *((_OWORD *)v128 + 2) = v131;
          *((_OWORD *)v128 + 3) = v130;
          uint64_t v133 = v126[7];
          long long v134 = &v86[v133];
          long long v135 = &v87[v133];
          *(void *)long long v134 = *(void *)v135;
          *((void *)v134 + 1) = *((void *)v135 + 1);
          *(void *)&v86[v126[8]] = *(void *)&v87[v126[8]];
          *(void *)&v86[v126[9]] = *(void *)&v87[v126[9]];
          *(void *)&v86[v126[10]] = *(void *)&v87[v126[10]];
          swift_bridgeObjectRetain();
          uint64_t v14 = v174;
          swift_retain();
          break;
        case 5u:
          v176(v86, v87, v12);
          uint64_t v136 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v86[v136[5]] = *(_DWORD *)&v87[v136[5]];
          uint64_t v137 = v136[6];
          uint64_t v138 = &v86[v137];
          uint64_t v139 = &v87[v137];
          long long v141 = *((_OWORD *)v139 + 2);
          long long v140 = *((_OWORD *)v139 + 3);
          long long v142 = *((_OWORD *)v139 + 1);
          *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
          *((_OWORD *)v138 + 1) = v142;
          *((_OWORD *)v138 + 2) = v141;
          *((_OWORD *)v138 + 3) = v140;
          uint64_t v143 = v136[7];
          long long v144 = &v86[v143];
          long long v145 = &v87[v143];
          *(void *)long long v144 = *(void *)v145;
          *((void *)v144 + 1) = *((void *)v145 + 1);
          *(void *)&v86[v136[8]] = *(void *)&v87[v136[8]];
          *(void *)&v86[v136[9]] = *(void *)&v87[v136[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v176(v86, v87, v12);
          uint64_t v88 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v86[v88[5]] = *(_DWORD *)&v87[v88[5]];
          uint64_t v89 = v88[6];
          char v90 = &v86[v89];
          uint64_t v91 = &v87[v89];
          long long v93 = *((_OWORD *)v91 + 2);
          long long v92 = *((_OWORD *)v91 + 3);
          long long v94 = *((_OWORD *)v91 + 1);
          *(_OWORD *)char v90 = *(_OWORD *)v91;
          *((_OWORD *)v90 + 1) = v94;
          *((_OWORD *)v90 + 2) = v93;
          *((_OWORD *)v90 + 3) = v92;
          uint64_t v95 = v88[7];
          uint64_t v96 = &v86[v95];
          long long v97 = &v87[v95];
          *(void *)uint64_t v96 = *(void *)v97;
          *((void *)v96 + 1) = *((void *)v97 + 1);
          *(void *)&v86[v88[8]] = *(void *)&v87[v88[8]];
          *(void *)&v86[v88[9]] = *(void *)&v87[v88[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      v8[v14[7]] = v9[v14[7]];
      *(void *)&v8[v14[8]] = *(void *)&v9[v14[8]];
      *(_DWORD *)&v8[v14[9]] = *(_DWORD *)&v9[v14[9]];
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v155 = type metadata accessor for CVBundle(0);
  *(void *)&v8[*(int *)(v155 + 20)] = *(void *)&v9[*(int *)(v155 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v8[*(int *)(v155 + 24)] = *(void *)&v9[*(int *)(v155 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v156 = a3[7];
  uint64_t v157 = (char *)a1 + v156;
  uint64_t v158 = (char *)a2 + v156;
  *uint64_t v157 = *v158;
  *((void *)v157 + 1) = *((void *)v158 + 1);
  swift_retain();
  swift_release();
  uint64_t v159 = a3[8];
  uint64_t v160 = (char *)a1 + v159;
  uint64_t v161 = (char *)a2 + v159;
  char *v160 = *v161;
  *((void *)v160 + 1) = *((void *)v161 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_10007E478(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v9, v10, v12);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v105 = a3;
    uint64_t v14 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v15 = v14[5];
    uint64_t v16 = &v9[v15];
    unint64_t v17 = &v10[v15];
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v103 = v14;
        v13(v16, v17, v12);
        long long v24 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v16[v24[5]] = *(_DWORD *)&v17[v24[5]];
        uint64_t v25 = v24[6];
        uint64_t v26 = &v16[v25];
        uint64_t v27 = &v17[v25];
        long long v28 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v28;
        long long v29 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v29;
        *(void *)&v16[v24[7]] = *(void *)&v17[v24[7]];
        *(void *)&v16[v24[8]] = *(void *)&v17[v24[8]];
        *(void *)&v16[v24[9]] = *(void *)&v17[v24[9]];
        v16[v24[10]] = v17[v24[10]];
        *(_OWORD *)&v16[v24[11]] = *(_OWORD *)&v17[v24[11]];
        *(_OWORD *)&v16[v24[12]] = *(_OWORD *)&v17[v24[12]];
        uint64_t v30 = v24[13];
        uint64_t v100 = &v16[v30];
        __dst = &v17[v30];
        uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v98 = *(void *)(v31 - 8);
        uint64_t v99 = v31;
        if ((*(unsigned int (**)(char *, uint64_t))(v98 + 48))(__dst, 1))
        {
          uint64_t v32 = sub_10000F214(&qword_100524BD0);
          memcpy(v100, __dst, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v100, __dst, v99);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v100, 0, 1, v99);
        }
        *(_OWORD *)&v16[v24[14]] = *(_OWORD *)&v17[v24[14]];
        uint64_t v92 = v24[15];
        long long v93 = &v16[v92];
        long long v94 = &v17[v92];
        *((void *)v93 + 2) = *((void *)v94 + 2);
        *(_OWORD *)long long v93 = *(_OWORD *)v94;
        swift_storeEnumTagMultiPayload();
        uint64_t v14 = v103;
        goto LABEL_13;
      case 2u:
        v13(v16, v17, v12);
        long long v33 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v16[v33[5]] = *(_DWORD *)&v17[v33[5]];
        uint64_t v34 = v33[6];
        uint64_t v35 = &v16[v34];
        uint64_t v36 = &v17[v34];
        long long v37 = *((_OWORD *)v36 + 3);
        *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
        *((_OWORD *)v35 + 3) = v37;
        long long v38 = *((_OWORD *)v36 + 1);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v38;
        *(_OWORD *)&v16[v33[7]] = *(_OWORD *)&v17[v33[7]];
        *(void *)&v16[v33[8]] = *(void *)&v17[v33[8]];
        *(void *)&v16[v33[9]] = *(void *)&v17[v33[9]];
        *(void *)&v16[v33[10]] = *(void *)&v17[v33[10]];
        *(void *)&v16[v33[11]] = *(void *)&v17[v33[11]];
        *(void *)&v16[v33[12]] = *(void *)&v17[v33[12]];
        *(void *)&v16[v33[13]] = *(void *)&v17[v33[13]];
        v16[v33[14]] = v17[v33[14]];
        goto LABEL_12;
      case 3u:
      case 4u:
        v13(v16, v17, v12);
        uint64_t v39 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v16[v39[5]] = *(_DWORD *)&v17[v39[5]];
        uint64_t v40 = v39[6];
        uint64_t v41 = &v16[v40];
        uint64_t v42 = &v17[v40];
        long long v43 = *((_OWORD *)v42 + 3);
        *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
        *((_OWORD *)v41 + 3) = v43;
        long long v44 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v44;
        *(_OWORD *)&v16[v39[7]] = *(_OWORD *)&v17[v39[7]];
        *(void *)&v16[v39[8]] = *(void *)&v17[v39[8]];
        *(void *)&v16[v39[9]] = *(void *)&v17[v39[9]];
        *(void *)&v16[v39[10]] = *(void *)&v17[v39[10]];
        goto LABEL_12;
      case 5u:
        v13(v16, v17, v12);
        uint64_t v45 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v16[v45[5]] = *(_DWORD *)&v17[v45[5]];
        uint64_t v46 = v45[6];
        long long v47 = &v16[v46];
        long long v48 = &v17[v46];
        long long v49 = *((_OWORD *)v48 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
        *((_OWORD *)v47 + 3) = v49;
        long long v50 = *((_OWORD *)v48 + 1);
        *(_OWORD *)long long v47 = *(_OWORD *)v48;
        *((_OWORD *)v47 + 1) = v50;
        *(_OWORD *)&v16[v45[7]] = *(_OWORD *)&v17[v45[7]];
        *(void *)&v16[v45[8]] = *(void *)&v17[v45[8]];
        *(void *)&v16[v45[9]] = *(void *)&v17[v45[9]];
        goto LABEL_12;
      default:
        v13(v16, v17, v12);
        uint64_t v18 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v16[v18[5]] = *(_DWORD *)&v17[v18[5]];
        uint64_t v19 = v18[6];
        uint64_t v20 = &v16[v19];
        long long v21 = &v17[v19];
        long long v22 = *((_OWORD *)v21 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
        *((_OWORD *)v20 + 3) = v22;
        long long v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        *((_OWORD *)v20 + 1) = v23;
        *(_OWORD *)&v16[v18[7]] = *(_OWORD *)&v17[v18[7]];
        *(void *)&v16[v18[8]] = *(void *)&v17[v18[8]];
        *(void *)&v16[v18[9]] = *(void *)&v17[v18[9]];
LABEL_12:
        swift_storeEnumTagMultiPayload();
LABEL_13:
        uint64_t v51 = v14[6];
        uint64_t v52 = &v9[v51];
        uint64_t v53 = &v10[v51];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v104 = v14;
            v13(v52, v53, v12);
            long long v60 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v52[v60[5]] = *(_DWORD *)&v53[v60[5]];
            uint64_t v61 = v60[6];
            long long v62 = &v52[v61];
            uint64_t v63 = &v53[v61];
            long long v64 = *((_OWORD *)v63 + 3);
            *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
            *((_OWORD *)v62 + 3) = v64;
            long long v65 = *((_OWORD *)v63 + 1);
            *(_OWORD *)long long v62 = *(_OWORD *)v63;
            *((_OWORD *)v62 + 1) = v65;
            *(void *)&v52[v60[7]] = *(void *)&v53[v60[7]];
            *(void *)&v52[v60[8]] = *(void *)&v53[v60[8]];
            *(void *)&v52[v60[9]] = *(void *)&v53[v60[9]];
            v52[v60[10]] = v53[v60[10]];
            *(_OWORD *)&v52[v60[11]] = *(_OWORD *)&v53[v60[11]];
            *(_OWORD *)&v52[v60[12]] = *(_OWORD *)&v53[v60[12]];
            uint64_t v66 = v60[13];
            __dsta = &v52[v66];
            uint64_t v67 = &v53[v66];
            uint64_t v68 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v69 = *(void *)(v68 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
            {
              uint64_t v70 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v67, *(void *)(*(void *)(v70 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v69 + 32))(__dsta, v67, v68);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(__dsta, 0, 1, v68);
            }
            *(_OWORD *)&v52[v60[14]] = *(_OWORD *)&v53[v60[14]];
            uint64_t v95 = v60[15];
            uint64_t v96 = &v52[v95];
            long long v97 = &v53[v95];
            *((void *)v96 + 2) = *((void *)v97 + 2);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
            swift_storeEnumTagMultiPayload();
            a3 = v105;
            uint64_t v14 = v104;
            goto LABEL_21;
          case 2u:
            v13(v52, v53, v12);
            long long v71 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v52[v71[5]] = *(_DWORD *)&v53[v71[5]];
            uint64_t v72 = v71[6];
            uint64_t v73 = &v52[v72];
            long long v74 = &v53[v72];
            long long v75 = *((_OWORD *)v74 + 3);
            *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
            *((_OWORD *)v73 + 3) = v75;
            long long v76 = *((_OWORD *)v74 + 1);
            *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
            *((_OWORD *)v73 + 1) = v76;
            *(_OWORD *)&v52[v71[7]] = *(_OWORD *)&v53[v71[7]];
            *(void *)&v52[v71[8]] = *(void *)&v53[v71[8]];
            *(void *)&v52[v71[9]] = *(void *)&v53[v71[9]];
            *(void *)&v52[v71[10]] = *(void *)&v53[v71[10]];
            *(void *)&v52[v71[11]] = *(void *)&v53[v71[11]];
            *(void *)&v52[v71[12]] = *(void *)&v53[v71[12]];
            *(void *)&v52[v71[13]] = *(void *)&v53[v71[13]];
            v52[v71[14]] = v53[v71[14]];
            goto LABEL_20;
          case 3u:
          case 4u:
            v13(v52, v53, v12);
            uint64_t v77 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v52[v77[5]] = *(_DWORD *)&v53[v77[5]];
            uint64_t v78 = v77[6];
            unint64_t v79 = &v52[v78];
            uint64_t v80 = &v53[v78];
            long long v81 = *((_OWORD *)v80 + 3);
            *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
            *((_OWORD *)v79 + 3) = v81;
            long long v82 = *((_OWORD *)v80 + 1);
            *(_OWORD *)unint64_t v79 = *(_OWORD *)v80;
            *((_OWORD *)v79 + 1) = v82;
            *(_OWORD *)&v52[v77[7]] = *(_OWORD *)&v53[v77[7]];
            *(void *)&v52[v77[8]] = *(void *)&v53[v77[8]];
            *(void *)&v52[v77[9]] = *(void *)&v53[v77[9]];
            *(void *)&v52[v77[10]] = *(void *)&v53[v77[10]];
            goto LABEL_20;
          case 5u:
            v13(v52, v53, v12);
            uint64_t v83 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v52[v83[5]] = *(_DWORD *)&v53[v83[5]];
            uint64_t v84 = v83[6];
            uint64_t v85 = &v52[v84];
            uint64_t v86 = &v53[v84];
            long long v87 = *((_OWORD *)v86 + 3);
            *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
            *((_OWORD *)v85 + 3) = v87;
            long long v88 = *((_OWORD *)v86 + 1);
            *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
            *((_OWORD *)v85 + 1) = v88;
            *(_OWORD *)&v52[v83[7]] = *(_OWORD *)&v53[v83[7]];
            *(void *)&v52[v83[8]] = *(void *)&v53[v83[8]];
            *(void *)&v52[v83[9]] = *(void *)&v53[v83[9]];
            goto LABEL_20;
          default:
            v13(v52, v53, v12);
            uint64_t v54 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v52[v54[5]] = *(_DWORD *)&v53[v54[5]];
            uint64_t v55 = v54[6];
            uint64_t v56 = &v52[v55];
            uint64_t v57 = &v53[v55];
            long long v58 = *((_OWORD *)v57 + 3);
            *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
            *((_OWORD *)v56 + 3) = v58;
            long long v59 = *((_OWORD *)v57 + 1);
            *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
            *((_OWORD *)v56 + 1) = v59;
            *(_OWORD *)&v52[v54[7]] = *(_OWORD *)&v53[v54[7]];
            *(void *)&v52[v54[8]] = *(void *)&v53[v54[8]];
            *(void *)&v52[v54[9]] = *(void *)&v53[v54[9]];
LABEL_20:
            swift_storeEnumTagMultiPayload();
            a3 = v105;
LABEL_21:
            v9[v14[7]] = v10[v14[7]];
            *(void *)&v9[v14[8]] = *(void *)&v10[v14[8]];
            *(_DWORD *)&v9[v14[9]] = *(_DWORD *)&v10[v14[9]];
            break;
        }
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v89 = type metadata accessor for CVBundle(0);
  *(void *)&v9[*(int *)(v89 + 20)] = *(void *)&v10[*(int *)(v89 + 20)];
  *(void *)&v9[*(int *)(v89 + 24)] = *(void *)&v10[*(int *)(v89 + 24)];
  uint64_t v90 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v90] = *(_OWORD *)&a2[v90];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

char *sub_10007F010(char *a1, char *a2, int *a3)
{
  if (a1 == a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
  }
  else
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v11 = a3[5];
    uint64_t v9 = &a1[v11];
    uint64_t v10 = &a2[v11];
    sub_1000814B0((uint64_t)&a1[v11], type metadata accessor for CVBundle.BundleType);
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v9, v10, v13);
    if (EnumCaseMultiPayload != 1)
    {
      __dst = v14;
      uint64_t v15 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v16 = v15[5];
      unint64_t v17 = &v9[v16];
      uint64_t v18 = &v10[v16];
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v108 = v15;
          __dst(v17, v18, v13);
          uint64_t v25 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v17[v25[5]] = *(_DWORD *)&v18[v25[5]];
          uint64_t v26 = v25[6];
          uint64_t v27 = &v17[v26];
          long long v28 = &v18[v26];
          long long v29 = *((_OWORD *)v28 + 3);
          *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
          *((_OWORD *)v27 + 3) = v29;
          long long v30 = *((_OWORD *)v28 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
          *((_OWORD *)v27 + 1) = v30;
          *(void *)&v17[v25[7]] = *(void *)&v18[v25[7]];
          *(void *)&v17[v25[8]] = *(void *)&v18[v25[8]];
          *(void *)&v17[v25[9]] = *(void *)&v18[v25[9]];
          v17[v25[10]] = v18[v25[10]];
          *(_OWORD *)&v17[v25[11]] = *(_OWORD *)&v18[v25[11]];
          *(_OWORD *)&v17[v25[12]] = *(_OWORD *)&v18[v25[12]];
          uint64_t v31 = v25[13];
          uint64_t v105 = &v17[v31];
          __src = &v18[v31];
          uint64_t v32 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v103 = *(void *)(v32 - 8);
          uint64_t v104 = v32;
          if ((*(unsigned int (**)(char *, uint64_t))(v103 + 48))(__src, 1))
          {
            uint64_t v33 = sub_10000F214(&qword_100524BD0);
            memcpy(v105, __src, *(void *)(*(void *)(v33 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v105, __src, v104);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(v105, 0, 1, v104);
          }
          *(_OWORD *)&v17[v25[14]] = *(_OWORD *)&v18[v25[14]];
          uint64_t v97 = v25[15];
          uint64_t v98 = &v17[v97];
          uint64_t v99 = &v18[v97];
          *((void *)v98 + 2) = *((void *)v99 + 2);
          *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
          swift_storeEnumTagMultiPayload();
          uint64_t v15 = v108;
          goto LABEL_15;
        case 2u:
          __dst(v17, v18, v13);
          uint64_t v34 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v17[v34[5]] = *(_DWORD *)&v18[v34[5]];
          uint64_t v35 = v34[6];
          uint64_t v36 = &v17[v35];
          long long v37 = &v18[v35];
          long long v38 = *((_OWORD *)v37 + 3);
          *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
          *((_OWORD *)v36 + 3) = v38;
          long long v39 = *((_OWORD *)v37 + 1);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
          *((_OWORD *)v36 + 1) = v39;
          *(_OWORD *)&v17[v34[7]] = *(_OWORD *)&v18[v34[7]];
          *(void *)&v17[v34[8]] = *(void *)&v18[v34[8]];
          *(void *)&v17[v34[9]] = *(void *)&v18[v34[9]];
          *(void *)&v17[v34[10]] = *(void *)&v18[v34[10]];
          *(void *)&v17[v34[11]] = *(void *)&v18[v34[11]];
          *(void *)&v17[v34[12]] = *(void *)&v18[v34[12]];
          *(void *)&v17[v34[13]] = *(void *)&v18[v34[13]];
          v17[v34[14]] = v18[v34[14]];
          goto LABEL_14;
        case 3u:
        case 4u:
          __dst(v17, v18, v13);
          uint64_t v40 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v17[v40[5]] = *(_DWORD *)&v18[v40[5]];
          uint64_t v41 = v40[6];
          uint64_t v42 = &v17[v41];
          long long v43 = &v18[v41];
          long long v44 = *((_OWORD *)v43 + 3);
          *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
          *((_OWORD *)v42 + 3) = v44;
          long long v45 = *((_OWORD *)v43 + 1);
          *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
          *((_OWORD *)v42 + 1) = v45;
          *(_OWORD *)&v17[v40[7]] = *(_OWORD *)&v18[v40[7]];
          *(void *)&v17[v40[8]] = *(void *)&v18[v40[8]];
          *(void *)&v17[v40[9]] = *(void *)&v18[v40[9]];
          *(void *)&v17[v40[10]] = *(void *)&v18[v40[10]];
          goto LABEL_14;
        case 5u:
          __dst(v17, v18, v13);
          uint64_t v46 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v17[v46[5]] = *(_DWORD *)&v18[v46[5]];
          uint64_t v47 = v46[6];
          long long v48 = &v17[v47];
          long long v49 = &v18[v47];
          long long v50 = *((_OWORD *)v49 + 3);
          *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
          *((_OWORD *)v48 + 3) = v50;
          long long v51 = *((_OWORD *)v49 + 1);
          *(_OWORD *)long long v48 = *(_OWORD *)v49;
          *((_OWORD *)v48 + 1) = v51;
          *(_OWORD *)&v17[v46[7]] = *(_OWORD *)&v18[v46[7]];
          *(void *)&v17[v46[8]] = *(void *)&v18[v46[8]];
          *(void *)&v17[v46[9]] = *(void *)&v18[v46[9]];
          goto LABEL_14;
        default:
          __dst(v17, v18, v13);
          uint64_t v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v17[v19[5]] = *(_DWORD *)&v18[v19[5]];
          uint64_t v20 = v19[6];
          long long v21 = &v17[v20];
          long long v22 = &v18[v20];
          long long v23 = *((_OWORD *)v22 + 3);
          *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
          *((_OWORD *)v21 + 3) = v23;
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)long long v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v24;
          *(_OWORD *)&v17[v19[7]] = *(_OWORD *)&v18[v19[7]];
          *(void *)&v17[v19[8]] = *(void *)&v18[v19[8]];
          *(void *)&v17[v19[9]] = *(void *)&v18[v19[9]];
LABEL_14:
          swift_storeEnumTagMultiPayload();
LABEL_15:
          uint64_t v52 = v15[6];
          uint64_t v53 = &v9[v52];
          uint64_t v54 = &v10[v52];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v109 = v15;
              __dst(v53, v54, v13);
              uint64_t v61 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v53[v61[5]] = *(_DWORD *)&v54[v61[5]];
              uint64_t v62 = v61[6];
              uint64_t v63 = &v53[v62];
              long long v64 = &v54[v62];
              long long v65 = *((_OWORD *)v64 + 3);
              *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
              *((_OWORD *)v63 + 3) = v65;
              long long v66 = *((_OWORD *)v64 + 1);
              *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
              *((_OWORD *)v63 + 1) = v66;
              *(void *)&v53[v61[7]] = *(void *)&v54[v61[7]];
              *(void *)&v53[v61[8]] = *(void *)&v54[v61[8]];
              *(void *)&v53[v61[9]] = *(void *)&v54[v61[9]];
              v53[v61[10]] = v54[v61[10]];
              *(_OWORD *)&v53[v61[11]] = *(_OWORD *)&v54[v61[11]];
              *(_OWORD *)&v53[v61[12]] = *(_OWORD *)&v54[v61[12]];
              uint64_t v67 = v61[13];
              __dsta = &v53[v67];
              uint64_t v68 = &v54[v67];
              uint64_t v69 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v106 = *(void *)(v69 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v68, 1, v69))
              {
                uint64_t v70 = sub_10000F214(&qword_100524BD0);
                memcpy(__dsta, v68, *(void *)(*(void *)(v70 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v106 + 32))(__dsta, v68, v69);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(__dsta, 0, 1, v69);
              }
              *(_OWORD *)&v53[v61[14]] = *(_OWORD *)&v54[v61[14]];
              uint64_t v100 = v61[15];
              uint64_t v101 = &v53[v100];
              long long v102 = &v54[v100];
              *((void *)v101 + 2) = *((void *)v102 + 2);
              *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
              swift_storeEnumTagMultiPayload();
              uint64_t v15 = v109;
              goto LABEL_23;
            case 2u:
              __dst(v53, v54, v13);
              long long v71 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v53[v71[5]] = *(_DWORD *)&v54[v71[5]];
              uint64_t v72 = v71[6];
              uint64_t v73 = &v53[v72];
              long long v74 = &v54[v72];
              long long v75 = *((_OWORD *)v74 + 3);
              *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
              *((_OWORD *)v73 + 3) = v75;
              long long v76 = *((_OWORD *)v74 + 1);
              *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
              *((_OWORD *)v73 + 1) = v76;
              *(_OWORD *)&v53[v71[7]] = *(_OWORD *)&v54[v71[7]];
              *(void *)&v53[v71[8]] = *(void *)&v54[v71[8]];
              *(void *)&v53[v71[9]] = *(void *)&v54[v71[9]];
              *(void *)&v53[v71[10]] = *(void *)&v54[v71[10]];
              *(void *)&v53[v71[11]] = *(void *)&v54[v71[11]];
              *(void *)&v53[v71[12]] = *(void *)&v54[v71[12]];
              *(void *)&v53[v71[13]] = *(void *)&v54[v71[13]];
              v53[v71[14]] = v54[v71[14]];
              goto LABEL_22;
            case 3u:
            case 4u:
              __dst(v53, v54, v13);
              uint64_t v77 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v53[v77[5]] = *(_DWORD *)&v54[v77[5]];
              uint64_t v78 = v77[6];
              unint64_t v79 = &v53[v78];
              uint64_t v80 = &v54[v78];
              long long v81 = *((_OWORD *)v80 + 3);
              *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
              *((_OWORD *)v79 + 3) = v81;
              long long v82 = *((_OWORD *)v80 + 1);
              *(_OWORD *)unint64_t v79 = *(_OWORD *)v80;
              *((_OWORD *)v79 + 1) = v82;
              *(_OWORD *)&v53[v77[7]] = *(_OWORD *)&v54[v77[7]];
              *(void *)&v53[v77[8]] = *(void *)&v54[v77[8]];
              *(void *)&v53[v77[9]] = *(void *)&v54[v77[9]];
              *(void *)&v53[v77[10]] = *(void *)&v54[v77[10]];
              goto LABEL_22;
            case 5u:
              __dst(v53, v54, v13);
              uint64_t v83 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v53[v83[5]] = *(_DWORD *)&v54[v83[5]];
              uint64_t v84 = v83[6];
              uint64_t v85 = &v53[v84];
              uint64_t v86 = &v54[v84];
              long long v87 = *((_OWORD *)v86 + 3);
              *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
              *((_OWORD *)v85 + 3) = v87;
              long long v88 = *((_OWORD *)v86 + 1);
              *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
              *((_OWORD *)v85 + 1) = v88;
              *(_OWORD *)&v53[v83[7]] = *(_OWORD *)&v54[v83[7]];
              *(void *)&v53[v83[8]] = *(void *)&v54[v83[8]];
              *(void *)&v53[v83[9]] = *(void *)&v54[v83[9]];
              goto LABEL_22;
            default:
              __dst(v53, v54, v13);
              uint64_t v55 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v53[v55[5]] = *(_DWORD *)&v54[v55[5]];
              uint64_t v56 = v55[6];
              uint64_t v57 = &v53[v56];
              long long v58 = &v54[v56];
              long long v59 = *((_OWORD *)v58 + 3);
              *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
              *((_OWORD *)v57 + 3) = v59;
              long long v60 = *((_OWORD *)v58 + 1);
              *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
              *((_OWORD *)v57 + 1) = v60;
              *(_OWORD *)&v53[v55[7]] = *(_OWORD *)&v54[v55[7]];
              *(void *)&v53[v55[8]] = *(void *)&v54[v55[8]];
              *(void *)&v53[v55[9]] = *(void *)&v54[v55[9]];
LABEL_22:
              swift_storeEnumTagMultiPayload();
LABEL_23:
              v9[v15[7]] = v10[v15[7]];
              *(void *)&v9[v15[8]] = *(void *)&v10[v15[8]];
              *(_DWORD *)&v9[v15[9]] = *(_DWORD *)&v10[v15[9]];
              break;
          }
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v89 = type metadata accessor for CVBundle(0);
  *(void *)&v9[*(int *)(v89 + 20)] = *(void *)&v10[*(int *)(v89 + 20)];
  swift_bridgeObjectRelease();
  *(void *)&v9[*(int *)(v89 + 24)] = *(void *)&v10[*(int *)(v89 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = &a2[v90];
  *uint64_t v91 = *v92;
  *((void *)v91 + 1) = *((void *)v92 + 1);
  swift_release();
  uint64_t v93 = a3[8];
  long long v94 = &a1[v93];
  uint64_t v95 = &a2[v93];
  *long long v94 = *v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_release();
  return a1;
}

uint64_t sub_10007FC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007FC70);
}

uint64_t sub_10007FC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for CVBundle(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_10007FD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007FDAC);
}

uint64_t sub_10007FDAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for CVBundle(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BundleTextDetailView()
{
  uint64_t result = qword_10051B698;
  if (!qword_10051B698) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10007FF10()
{
  sub_100027A88();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CVBundle(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10007FFEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100080008()
{
  return sub_100013AA8(&qword_10051B6E0, &qword_10051B6E8);
}

unint64_t sub_100080048()
{
  unint64_t result = qword_10051B6F0;
  if (!qword_10051B6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B6F0);
  }
  return result;
}

uint64_t sub_10008009C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000800E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100072C98(v1 + 32, *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000800F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100080148()
{
  return sub_10007449C(v0[4], v0[2], v0[3]);
}

uint64_t sub_100080154@<X0>(uint64_t a1@<X8>)
{
  return sub_10007468C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100080164(uint64_t a1, double a2, double a3)
{
  return sub_100070708(a1, v3 + 4, v3[2], v3[3], a2, a3);
}

uint64_t sub_100080170()
{
  return sub_100071CFC(v0[4], v0[2], v0[3]);
}

unint64_t sub_10008017C()
{
  unint64_t result = qword_10051B728;
  if (!qword_10051B728)
  {
    sub_10000F69C(&qword_10051B720);
    sub_100013AA8(&qword_10051B730, &qword_10051B738);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B728);
  }
  return result;
}

uint64_t sub_100080220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100071F28(a1, v2 + 32, a2);
}

uint64_t sub_100080234@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100080264()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_100080294(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000802CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

double sub_1000802E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100080354(a1, a2);
}

uint64_t sub_1000802FC(uint64_t a1)
{
  return sub_10006FF88(a1, *(void *)(v1 + 16));
}

uint64_t sub_100080308()
{
  return Path.addEllipse(in:transform:)();
}

double sub_100080354@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  double result = 0.75 / (*(double *)(v2 + 40) / *(double *)(v2 + 48)) * (*(double *)a1 + -0.5) + 0.5;
  *(double *)a2 = result;
  *(void *)(a2 + 8) = v3;
  return result;
}

unint64_t sub_100080384()
{
  unint64_t result = qword_10051B7A0;
  if (!qword_10051B7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B7A0);
  }
  return result;
}

unint64_t sub_1000803D8()
{
  unint64_t result = qword_10051B7B8;
  if (!qword_10051B7B8)
  {
    sub_10000F69C(&qword_10051B790);
    sub_100081068(&qword_10051B7C0, &qword_10051B7C8, (void (*)(void))sub_1000804A4);
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B7B8);
  }
  return result;
}

uint64_t sub_1000804A4()
{
  return sub_100081068(&qword_10051B7D0, &qword_10051B7D8, (void (*)(void))sub_1000804D4);
}

unint64_t sub_1000804D4()
{
  unint64_t result = qword_10051B7E0;
  if (!qword_10051B7E0)
  {
    sub_10000F69C(&qword_10051B7E8);
    sub_100080550();
    sub_1000805F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B7E0);
  }
  return result;
}

unint64_t sub_100080550()
{
  unint64_t result = qword_10051B7F0;
  if (!qword_10051B7F0)
  {
    sub_10000F69C(&qword_10051B7F8);
    sub_100013AA8(&qword_10051B800, &qword_10051B808);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B7F0);
  }
  return result;
}

unint64_t sub_1000805F0()
{
  unint64_t result = qword_10051B810;
  if (!qword_10051B810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B810);
  }
  return result;
}

uint64_t sub_100080648()
{
  return sub_100073B14(v0 + 32, *(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100080658(char a1)
{
  sub_100073F34(a1, v1 + 32, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100080664()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10008068C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  char v4 = *(unsigned char *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  char v8 = *(unsigned char *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)(a1 + 272);
  sub_1000807A8(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000807A8(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000807A8(v5, v6, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000F724(v9);
  sub_10000F724(v10);
  swift_retain();
  return a1;
}

uint64_t sub_1000807A8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000807B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  char v4 = *(unsigned char *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  char v8 = *(unsigned char *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)(a1 + 272);
  sub_100012FAC(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_release();
  swift_bridgeObjectRelease();
  sub_100012FAC(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100012FAC(v5, v6, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000F478(v9);
  sub_10000F478(v10);
  swift_release();
  return a1;
}

uint64_t sub_1000808D4()
{
  return sub_1000743B4();
}

uint64_t sub_100080908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100080918()
{
  return swift_release();
}

uint64_t sub_100080920()
{
  return sub_100074418();
}

uint64_t sub_100080944()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100080994()
{
  return sub_1000743B4();
}

uint64_t sub_1000809C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000809F4()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_100080A20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100080A88()
{
  type metadata accessor for BundleTextDetailView();

  return sub_10007892C();
}

unint64_t sub_100080AE8()
{
  unint64_t result = qword_10051B888;
  if (!qword_10051B888)
  {
    sub_10000F69C(&qword_10051B850);
    sub_100081068(&qword_10051B890, &qword_10051B848, (void (*)(void))sub_100080BB4);
    sub_100013AA8((unint64_t *)&qword_10051B8C0, &qword_100522F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B888);
  }
  return result;
}

uint64_t sub_100080BB4()
{
  return sub_100081068(&qword_10051B898, &qword_10051B840, (void (*)(void))sub_100080BE4);
}

unint64_t sub_100080BE4()
{
  unint64_t result = qword_10051B8A0;
  if (!qword_10051B8A0)
  {
    sub_10000F69C(&qword_10051B838);
    sub_100080C84();
    sub_100013AA8(&qword_10051B8B8, &qword_10051B880);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B8A0);
  }
  return result;
}

unint64_t sub_100080C84()
{
  unint64_t result = qword_10051B8A8;
  if (!qword_10051B8A8)
  {
    sub_10000F69C(&qword_10051B830);
    sub_100013AA8(&qword_10051B8B0, &qword_10051B828);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B8A8);
  }
  return result;
}

unint64_t sub_100080D24()
{
  unint64_t result = qword_10051B8D0;
  if (!qword_10051B8D0)
  {
    sub_10000F69C(&qword_10051B860);
    sub_10000F69C(&qword_10051B850);
    sub_100080AE8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B8D0);
  }
  return result;
}

uint64_t sub_100080DD4()
{
  return sub_100078998();
}

unint64_t sub_100080DF0()
{
  unint64_t result = qword_10051B938;
  if (!qword_10051B938)
  {
    sub_10000F69C(&qword_10051B930);
    sub_100080E90();
    sub_100013AA8(&qword_10051B960, &qword_10051B968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B938);
  }
  return result;
}

unint64_t sub_100080E90()
{
  unint64_t result = qword_10051B940;
  if (!qword_10051B940)
  {
    sub_10000F69C(&qword_10051B948);
    sub_100080F2C((unint64_t *)&qword_10051B950, &qword_10051B958);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B940);
  }
  return result;
}

uint64_t sub_100080F2C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100080F9C()
{
  unint64_t result = qword_10051B970;
  if (!qword_10051B970)
  {
    sub_10000F69C(&qword_10051B8F0);
    sub_100081068(&qword_10051B978, &qword_10051B8E8, (void (*)(void))sub_1000810E4);
    sub_100013AA8(&qword_10051B990, (uint64_t *)&unk_100523040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B970);
  }
  return result;
}

uint64_t sub_100081068(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000810E4()
{
  unint64_t result = qword_10051B980;
  if (!qword_10051B980)
  {
    sub_10000F69C(&qword_10051B8E0);
    sub_100013AA8(&qword_10051B988, &qword_10051B8D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B980);
  }
  return result;
}

uint64_t sub_100081184@<X0>(uint64_t a1@<X8>)
{
  return sub_100078704(*(void *)(v1 + 16), a1);
}

unint64_t sub_100081194()
{
  unint64_t result = qword_10051B9F0;
  if (!qword_10051B9F0)
  {
    sub_10000F69C(&qword_10051B9D8);
    sub_100081234();
    sub_100013AA8(&qword_10051B960, &qword_10051B968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B9F0);
  }
  return result;
}

unint64_t sub_100081234()
{
  unint64_t result = qword_10051B9F8;
  if (!qword_10051B9F8)
  {
    sub_10000F69C(&qword_10051BA00);
    sub_100013AA8(&qword_10051BA08, &qword_10051BA10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051B9F8);
  }
  return result;
}

unint64_t sub_1000812D4()
{
  unint64_t result = qword_10051BA38;
  if (!qword_10051BA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BA38);
  }
  return result;
}

unint64_t sub_100081328()
{
  unint64_t result = qword_10051BA40;
  if (!qword_10051BA40)
  {
    sub_10000F69C(&qword_10051BA28);
    sub_100013AA8(&qword_10051BA48, &qword_10051BA50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BA40);
  }
  return result;
}

uint64_t sub_1000813C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100081408(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100081470(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000814B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100081514()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BundleTextDetailView();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v1 + v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v1 + v4 + *(int *)(v2 + 20);
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v6, v8);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v10 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v11 = v6 + *(int *)(v10 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v9(v11, v8);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_16;
      case 1u:
        uint64_t v32 = v10;
        v9(v11, v8);
        uint64_t v12 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v11 + v12[13];
        uint64_t v14 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v30 = *(void *)(v14 - 8);
        uint64_t v31 = v13;
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v15, 1, v14)) {
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v16);
        }
        unint64_t v17 = (uint64_t *)(v11 + v12[14]);
        unint64_t v18 = v17[1];
        if (v18 >> 60 != 15) {
          sub_100038B34(*v17, v18);
        }
        uint64_t v19 = (void *)(v11 + v12[15]);
        uint64_t v10 = v32;
        if (*v19)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v9(v11, v8);
        uint64_t v20 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v9(v11, v8);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v9(v11, v8);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_16:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v21 = v6 + *(int *)(v10 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v9(v21, v8);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_28;
      case 1u:
        v9(v21, v8);
        long long v22 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v21 + v22[13];
        uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v25 = *(void *)(v24 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
        }
        uint64_t v26 = (uint64_t *)(v21 + v22[14]);
        unint64_t v27 = v26[1];
        if (v27 >> 60 != 15) {
          sub_100038B34(*v26, v27);
        }
        if (*(void *)(v21 + v22[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v9(v21, v8);
        uint64_t v28 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v9(v21, v8);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v9(v21, v8);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_28:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  type metadata accessor for CVBundle(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100081BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for BundleTextDetailView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000749DC(a1, v6, a2);
}

unint64_t sub_100081C64()
{
  unint64_t result = qword_10051BAD8;
  if (!qword_10051BAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BAD8);
  }
  return result;
}

unint64_t sub_100081CB8()
{
  unint64_t result = qword_10051BAE0;
  if (!qword_10051BAE0)
  {
    sub_10000F69C(&qword_10051BAD0);
    sub_100081D2C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BAE0);
  }
  return result;
}

unint64_t sub_100081D2C()
{
  unint64_t result = qword_10051BAE8;
  if (!qword_10051BAE8)
  {
    sub_10000F69C(&qword_10051BAF0);
    sub_100081DCC();
    sub_100013AA8(&qword_10051BB18, &qword_10051BB20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BAE8);
  }
  return result;
}

unint64_t sub_100081DCC()
{
  unint64_t result = qword_10051BAF8;
  if (!qword_10051BAF8)
  {
    sub_10000F69C(&qword_10051BB00);
    sub_100013AA8(&qword_10051BB08, &qword_10051BB10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BAF8);
  }
  return result;
}

uint64_t sub_100081E6C()
{
  return swift_getWitnessTable();
}

unint64_t sub_100081FC4()
{
  unint64_t result = qword_10051BB40;
  if (!qword_10051BB40)
  {
    sub_10000F69C(&qword_10051B870);
    sub_100081068(&qword_10051B8C8, &qword_10051B868, (void (*)(void))sub_100080D24);
    sub_10008209C((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BB40);
  }
  return result;
}

uint64_t sub_10008209C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000820F0()
{
  return sub_100080920();
}

ValueMetadata *type metadata accessor for ImageSearchCardButtonStyle()
{
  return &type metadata for ImageSearchCardButtonStyle;
}

void *sub_100082118(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = type metadata accessor for Lens_Item(0);
    *(void *)&v10[*(int *)(v13 + 20)] = *(void *)&v11[*(int *)(v13 + 20)];
    uint64_t v14 = a3[7];
    *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  }
  swift_retain();
  return a1;
}

void *sub_1000822A4(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for Lens_Item(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  swift_retain();
  return a1;
}

void *sub_1000823E0(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for Lens_Item(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

char *sub_100082544(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for Lens_Item(0);
  *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
  uint64_t v13 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v13] = a2[v13];
  return a1;
}

char *sub_100082684(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    uint64_t v6 = sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for Lens_Item(0);
  *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
  swift_release();
  uint64_t v13 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v13] = a2[v13];
  return a1;
}

uint64_t sub_1000827E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000827F8);
}

uint64_t sub_1000827FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082810);
}

uint64_t type metadata accessor for ImageSearchCardView(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10051BBB0);
}

void sub_100082834()
{
  sub_100082914();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Lens_Item(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100082914()
{
  if (!qword_10051BBC0)
  {
    type metadata accessor for ContentSizeCategory();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051BBC0);
    }
  }
}

uint64_t sub_10008296C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100082988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051BC10);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051BC18);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v40 = (uint64_t)&v40 - v11;
  uint64_t v12 = type metadata accessor for Lens_Item(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ImageSearchCardImageView(0);
  uint64_t v16 = (int *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v40 - v20;
  long long v22 = (int *)type metadata accessor for ImageSearchCardView(0);
  sub_100086FAC(a1 + v22[5], (uint64_t)v14, type metadata accessor for Lens_Item);
  uint64_t v23 = v22[7];
  uint64_t v24 = *(void *)(a1 + v22[6]);
  char v25 = *(unsigned char *)(a1 + v23);
  *unint64_t v18 = swift_getKeyPath();
  sub_10000F214(&qword_10051BB48);
  swift_storeEnumTagMultiPayload();
  sub_100086F44((uint64_t)v14, (uint64_t)v18 + v16[7], type metadata accessor for Lens_Item);
  *(uint64_t *)((char *)v18 + v16[8]) = v24;
  *((unsigned char *)v18 + v16[9]) = v25;
  *(uint64_t *)((char *)v18 + v16[10]) = 0x4030000000000000;
  *((unsigned char *)v18 + v16[11]) = 1;
  sub_100086F44((uint64_t)v18, (uint64_t)v21, type metadata accessor for ImageSearchCardImageView);
  *(void *)int v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0x4014000000000000;
  v5[16] = 0;
  uint64_t v26 = sub_10000F214(&qword_10051BC20);
  sub_100082D70(a1, (uint64_t)&v5[*(int *)(v26 + 44)]);
  LOBYTE(v14) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  sub_10000FB74((uint64_t)v5, (uint64_t)v9, &qword_10051BC10);
  uint64_t v35 = &v9[*(int *)(v7 + 44)];
  *uint64_t v35 = (char)v14;
  *((void *)v35 + 1) = v28;
  *((void *)v35 + 2) = v30;
  *((void *)v35 + 3) = v32;
  *((void *)v35 + 4) = v34;
  v35[40] = 0;
  sub_10000FBD8((uint64_t)v5, &qword_10051BC10);
  uint64_t v36 = v40;
  sub_10000FC34((uint64_t)v9, v40, &qword_10051BC18);
  sub_100086FAC((uint64_t)v21, (uint64_t)v18, type metadata accessor for ImageSearchCardImageView);
  sub_10000FB74(v36, (uint64_t)v9, &qword_10051BC18);
  uint64_t v37 = v41;
  sub_100086FAC((uint64_t)v18, v41, type metadata accessor for ImageSearchCardImageView);
  uint64_t v38 = sub_10000F214(&qword_10051BC28);
  sub_10000FB74((uint64_t)v9, v37 + *(int *)(v38 + 48), &qword_10051BC18);
  sub_10000FBD8(v36, &qword_10051BC18);
  sub_100087B30((uint64_t)v21, type metadata accessor for ImageSearchCardImageView);
  sub_10000FBD8((uint64_t)v9, &qword_10051BC18);
  return sub_100087B30((uint64_t)v18, type metadata accessor for ImageSearchCardImageView);
}

uint64_t sub_100082D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v3 = type metadata accessor for Font.Leading();
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3;
  __chkstk_darwin(v3);
  long long v59 = (char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for ContentSizeCategory();
  uint64_t v5 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v7 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051BC30);
  __chkstk_darwin(v8 - 8);
  uint64_t v66 = (uint64_t)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v64 = (char *)&KeyPath - v11;
  __chkstk_darwin(v12);
  uint64_t v65 = (uint64_t)&KeyPath - v13;
  uint64_t v14 = sub_10000F214(&qword_10051BC38);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051BC40);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v63 = (uint64_t)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  long long v22 = (char *)&KeyPath - v21;
  __chkstk_darwin(v23);
  char v25 = (char *)&KeyPath - v24;
  uint64_t v60 = (uint64_t)&KeyPath - v24;
  *(void *)uint64_t v16 = static VerticalAlignment.center.getter();
  *((void *)v16 + 1) = 0x4018000000000000;
  unsigned char v16[16] = 0;
  uint64_t v26 = sub_10000F214(&qword_10051BC48);
  sub_1000834AC(a1, (uint64_t)&v16[*(int *)(v26 + 44)]);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10000FB74((uint64_t)v16, (uint64_t)v22, &qword_10051BC38);
  uint64_t v27 = &v22[*(int *)(v18 + 44)];
  long long v28 = v102;
  *((_OWORD *)v27 + 4) = v101;
  *((_OWORD *)v27 + 5) = v28;
  *((_OWORD *)v27 + 6) = v103;
  long long v29 = v98;
  *(_OWORD *)uint64_t v27 = v97;
  *((_OWORD *)v27 + 1) = v29;
  long long v30 = v100;
  *((_OWORD *)v27 + 2) = v99;
  *((_OWORD *)v27 + 3) = v30;
  sub_10000FBD8((uint64_t)v16, &qword_10051BC38);
  sub_10000FC34((uint64_t)v22, (uint64_t)v25, &qword_10051BC40);
  uint64_t v31 = a1 + *(int *)(type metadata accessor for ImageSearchCardView(0) + 20);
  uint64_t v32 = *(void *)(v31 + *(int *)(type metadata accessor for Lens_Item(0) + 20));
  swift_beginAccess();
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v34 = *(void *)(v32 + 24);
  *(void *)&long long v68 = v33;
  *((void *)&v68 + 1) = v34;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v35 = Text.init<A>(_:)();
  uint64_t v37 = v36;
  uint64_t v57 = v38;
  char v40 = v39 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  sub_10027CDC8((uint64_t)v7);
  LOBYTE(a1) = ContentSizeCategory.isAccessibilityCategory.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v58);
  uint64_t v41 = 2;
  if (a1) {
    uint64_t v41 = 5;
  }
  uint64_t v58 = v41;
  uint64_t v42 = swift_getKeyPath();
  static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  Font.weight(_:)();
  swift_release();
  uint64_t v44 = v61;
  uint64_t v43 = v62;
  long long v45 = v59;
  (*(void (**)(char *, void, uint64_t))(v61 + 104))(v59, enum case for Font.Leading.tight(_:), v62);
  uint64_t v46 = Font.leading(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
  uint64_t v47 = swift_getKeyPath();
  uint64_t v104 = v35;
  uint64_t v105 = v37;
  char v106 = v40;
  uint64_t v107 = v57;
  uint64_t v108 = KeyPath;
  char v109 = 0;
  uint64_t v110 = v42;
  uint64_t v111 = v58;
  char v112 = 0;
  uint64_t v113 = v47;
  uint64_t v114 = v46;
  static Alignment.leading.getter();
  sub_100225B58(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v84, 0.0, 1, 0.0, 1);
  sub_100012FAC(v35, v37, v40);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v82[10] = v94;
  v82[11] = v95;
  v82[6] = v90;
  v82[7] = v91;
  v82[8] = v92;
  v82[9] = v93;
  v82[2] = v86;
  v82[3] = v87;
  v82[4] = v88;
  v82[5] = v89;
  v82[0] = v84;
  v82[1] = v85;
  long long v78 = v94;
  long long v79 = v95;
  long long v74 = v90;
  long long v75 = v91;
  long long v76 = v92;
  long long v77 = v93;
  long long v70 = v86;
  long long v71 = v87;
  long long v72 = v88;
  long long v73 = v89;
  uint64_t v83 = v96;
  uint64_t v80 = v96;
  long long v68 = v84;
  long long v69 = v85;
  __int16 v81 = 256;
  sub_10000F214(&qword_10051BC50);
  sub_100088DB8(&qword_10051BC58, &qword_10051BC50, (void (*)(void))sub_1000875FC);
  uint64_t v48 = (uint64_t)v64;
  View.accessibilityIdentifier(_:)();
  sub_10008780C((uint64_t)v82);
  uint64_t v49 = v65;
  sub_10000FC34(v48, v65, &qword_10051BC30);
  uint64_t v50 = v60;
  uint64_t v51 = v63;
  sub_10000FB74(v60, v63, &qword_10051BC40);
  uint64_t v52 = v66;
  sub_10000FB74(v49, v66, &qword_10051BC30);
  uint64_t v53 = v67;
  sub_10000FB74(v51, v67, &qword_10051BC40);
  uint64_t v54 = sub_10000F214(&qword_10051BC90);
  sub_10000FB74(v52, v53 + *(int *)(v54 + 48), &qword_10051BC30);
  sub_10000FBD8(v49, &qword_10051BC30);
  sub_10000FBD8(v50, &qword_10051BC40);
  sub_10000FBD8(v52, &qword_10051BC30);
  return sub_10000FBD8(v51, &qword_10051BC40);
}

uint64_t sub_1000834AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051BC98);
  __chkstk_darwin(v3 - 8);
  uint64_t v72 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v71 = (char *)&v63 - v6;
  uint64_t v7 = sub_10000F214(&qword_10051BCA0);
  __chkstk_darwin(v7 - 8);
  uint64_t v67 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000F214(&qword_10051BCA8);
  __chkstk_darwin(v68);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10000F214(&qword_10051BCB0);
  uint64_t v11 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_10051BCB8);
  __chkstk_darwin(v20 - 8);
  uint64_t v70 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v74 = (uint64_t)&v63 - v23;
  uint64_t v24 = a1;
  uint64_t v25 = a1 + *(int *)(type metadata accessor for ImageSearchCardView(0) + 20);
  uint64_t v26 = *(int *)(type metadata accessor for Lens_Item(0) + 20);
  uint64_t v65 = v25;
  uint64_t v64 = v26;
  uint64_t v27 = *(void *)(v25 + v26);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10000FBD8((uint64_t)v15, &qword_10051E070);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v74, 1, 1, v69);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    uint64_t v28 = v67;
    sub_100083CD4(v24, (uint64_t)v19, v67);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    sub_10000FB74(v28, (uint64_t)v10, &qword_10051BCA0);
    long long v29 = &v10[*(int *)(v68 + 36)];
    long long v30 = v84;
    long long v31 = v85;
    *(_OWORD *)long long v29 = v83;
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v31;
    sub_10000FBD8(v28, &qword_10051BCA0);
    sub_100087884();
    uint64_t v32 = (uint64_t)v66;
    View.accessibilityIdentifier(_:)();
    sub_10000FBD8((uint64_t)v10, &qword_10051BCA8);
    uint64_t v33 = v74;
    sub_10000FC34(v32, v74, &qword_10051BCB0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v33, 0, 1, v69);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v27 = *(void *)(v65 + v64);
  }
  uint64_t v34 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__domainName);
  swift_beginAccess();
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v75 = v35;
  uint64_t v76 = v36;
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v37 = Text.init<A>(_:)();
  uint64_t v39 = v38;
  char v41 = v40 & 1;
  static Font.subheadline.getter();
  uint64_t v42 = Text.font(_:)();
  uint64_t v44 = v43;
  char v46 = v45;
  swift_release();
  sub_100012FAC(v37, v39, v41);
  swift_bridgeObjectRelease();
  LODWORD(v75) = static HierarchicalShapeStyle.primary.getter();
  HIDWORD(v75) = 1053609165;
  sub_10000F214(&qword_10051BCC0);
  sub_100013AA8(&qword_10051BCC8, &qword_10051BCC0);
  uint64_t v47 = Text.foregroundStyle<A>(_:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  char v53 = v52 & 1;
  sub_100012FAC(v42, v44, v46 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v75 = v47;
  uint64_t v76 = v49;
  char v77 = v53;
  uint64_t v78 = v51;
  uint64_t v79 = KeyPath;
  uint64_t v80 = 1;
  char v81 = 0;
  __int16 v82 = 256;
  sub_10000F214(&qword_10051BCD0);
  sub_100088DB8(&qword_10051BCD8, &qword_10051BCD0, (void (*)(void))sub_100013734);
  uint64_t v55 = (uint64_t)v71;
  View.accessibilityIdentifier(_:)();
  sub_100012FAC(v47, v49, v53);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v56 = v74;
  uint64_t v57 = v70;
  sub_10000FB74(v74, v70, &qword_10051BCB8);
  uint64_t v58 = v72;
  sub_10000FB74(v55, v72, &qword_10051BC98);
  uint64_t v59 = v73;
  sub_10000FB74(v57, v73, &qword_10051BCB8);
  uint64_t v60 = sub_10000F214(&qword_10051BCE0);
  sub_10000FB74(v58, v59 + *(int *)(v60 + 48), &qword_10051BC98);
  uint64_t v61 = v59 + *(int *)(v60 + 64);
  *(void *)uint64_t v61 = 0;
  *(unsigned char *)(v61 + 8) = 0;
  sub_10000FBD8(v55, &qword_10051BC98);
  sub_10000FBD8(v56, &qword_10051BCB8);
  sub_10000FBD8(v58, &qword_10051BC98);
  return sub_10000FBD8(v57, &qword_10051BCB8);
}

uint64_t sub_100083CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v64 = a3;
  uint64_t v56 = sub_10000F214(&qword_100519008);
  __chkstk_darwin(v56);
  uint64_t v59 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v55);
  uint64_t v57 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Image.ResizingMode();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000F214(&qword_10051BD10);
  __chkstk_darwin(v63);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v58 = (uint64_t)&v51 - v12;
  uint64_t v61 = sub_10000F214(&qword_10051BD28);
  __chkstk_darwin(v61);
  uint64_t v62 = (uint64_t)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = sub_10000F214(&qword_10051BD20);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = a1 + *(int *)(type metadata accessor for ImageSearchCardView(0) + 20);
  uint64_t v28 = (uint64_t *)(*(void *)(v27 + *(int *)(type metadata accessor for Lens_Item(0) + 20))
                  + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__faviconBytes);
  swift_beginAccess();
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  switch(v30 >> 62)
  {
    case 1uLL:
      if ((int)v29 != v29 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 2uLL:
      if (*(void *)(v29 + 16) != *(void *)(v29 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_9;
    default:
      if ((v30 & 0xFF000000000000) == 0) {
        goto LABEL_9;
      }
LABEL_7:
      sub_100038528(v29, v30);
      if (Image.init(data:)())
      {
        uint64_t v32 = v53;
        uint64_t v31 = v54;
        (*(void (**)(char *, void, uint64_t))(v53 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v54);
        uint64_t v33 = Image.resizable(capInsets:resizingMode:)();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v31);
        static Alignment.center.getter();
        _FrameLayout.init(width:height:alignment:)();
        uint64_t v60 = v65;
        LODWORD(v54) = v66;
        uint64_t v34 = v67;
        char v35 = v68;
        uint64_t v53 = v69;
        uint64_t v52 = v70;
        uint64_t v36 = v57;
        uint64_t v37 = &v57[*(int *)(v55 + 20)];
        uint64_t v38 = enum case for RoundedCornerStyle.continuous(_:);
        uint64_t v39 = type metadata accessor for RoundedCornerStyle();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104))(v37, v38, v39);
        __asm { FMOV            V0.2D, #2.0 }
        _OWORD *v36 = _Q0;
        uint64_t v45 = v59;
        sub_100086FAC((uint64_t)v36, v59, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
        *(_WORD *)(v45 + *(int *)(v56 + 36)) = 256;
        sub_10000FB74(v45, (uint64_t)&v10[*(int *)(v63 + 36)], &qword_100519008);
        *(void *)uint64_t v10 = v33;
        *((void *)v10 + 1) = 0;
        *((_WORD *)v10 + 8) = 1;
        *((void *)v10 + 3) = v60;
        v10[32] = v54;
        *((void *)v10 + 5) = v34;
        v10[48] = v35;
        uint64_t v46 = v52;
        *((void *)v10 + 7) = v53;
        *((void *)v10 + 8) = v46;
        swift_retain();
        sub_10000FBD8(v45, &qword_100519008);
        sub_100087B30((uint64_t)v36, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
        swift_release();
        uint64_t v47 = v58;
        sub_10000FC34((uint64_t)v10, v58, &qword_10051BD10);
        sub_10000FB74(v47, v62, &qword_10051BD10);
        swift_storeEnumTagMultiPayload();
        sub_1000879C4();
        sub_100013AA8(&qword_10051BD18, &qword_10051BD20);
        _ConditionalContent<>.init(storage:)();
        swift_release();
        return sub_10000FBD8(v47, &qword_10051BD10);
      }
      else
      {
LABEL_9:
        uint64_t v49 = type metadata accessor for URL();
        uint64_t v50 = *(void *)(v49 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v19, v60, v49);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v19, 0, 1, v49);
        sub_10000FB74((uint64_t)v19, (uint64_t)v16, &qword_10051E070);
        sub_10000F214(&qword_10051BD30);
        sub_100087A90();
        AsyncImage.init(url:scale:transaction:content:)();
        sub_10000FBD8((uint64_t)v19, &qword_10051E070);
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v23, v20);
        (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v62, v26, v20);
        swift_storeEnumTagMultiPayload();
        sub_1000879C4();
        sub_100013AA8(&qword_10051BD18, &qword_10051BD20);
        _ConditionalContent<>.init(storage:)();
        return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v20);
      }
  }
}

uint64_t sub_1000844F0()
{
  uint64_t v1 = sub_10000F214(&qword_10051BBF8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v3 = static HorizontalAlignment.center.getter();
  *((void *)v3 + 1) = 0x4020000000000000;
  v3[16] = 0;
  uint64_t v4 = sub_10000F214(&qword_10051BC00);
  sub_100082988(v0, (uint64_t)&v3[*(int *)(v4 + 44)]);
  sub_100013AA8(&qword_10051BC08, &qword_10051BBF8);
  View.accessibilityIdentifier(_:)();
  return sub_10000FBD8((uint64_t)v3, &qword_10051BBF8);
}

uint64_t sub_100084600@<X0>(uint64_t a1@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v2 = sub_10000F214(&qword_10051BE50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051BE58);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000F214(&qword_10051BE60);
  __chkstk_darwin(v52);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051BE68);
  __chkstk_darwin(v10 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000F214(&qword_10051BE70);
  __chkstk_darwin(v53);
  uint64_t v58 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10000F214(&qword_10051BE78);
  __chkstk_darwin(v54);
  uint64_t v56 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v55 = (uint64_t)&v52 - v15;
  uint64_t v16 = sub_10000F214(&qword_10051BE80);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Lens_ImageThumbnail(0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(int *)(type metadata accessor for ImageSearchCardImageView(0) + 20);
  uint64_t v59 = v1;
  uint64_t v24 = *(void *)(v1 + v23 + *(int *)(type metadata accessor for Lens_Item(0) + 20))
      + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__imageThumbnail;
  swift_beginAccess();
  sub_10000FB74(v24, (uint64_t)v18, &qword_10051BE80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0xE000000000000000;
    *((_OWORD *)v22 + 1) = xmmword_10043FAF0;
    *((void *)v22 + 4) = 0;
    *((void *)v22 + 5) = 0xE000000000000000;
    *((void *)v22 + 6) = 0;
    *((void *)v22 + 7) = 0;
    *((void *)v22 + 8) = 0xE000000000000000;
    UnknownStorage.init()();
    sub_10000FBD8((uint64_t)v18, &qword_10051BE80);
  }
  else
  {
    sub_100086F44((uint64_t)v18, (uint64_t)v22, type metadata accessor for Lens_ImageThumbnail);
  }
  double v25 = (double)*((int *)v22 + 12);
  double v26 = (double)*((int *)v22 + 13);
  double v27 = v25 / v26;
  double v28 = 1.6;
  if (v25 / v26 <= 1.6) {
    double v28 = v25 / v26;
  }
  if (v27 > 0.8) {
    double v29 = v28;
  }
  else {
    double v29 = 0.8;
  }
  sub_100084C34((uint64_t)v4);
  uint64_t v30 = static Alignment.center.getter();
  sub_100225D2C(0.0, 1, v25, 0, 0.0, 1, 0.0, 1, (uint64_t)v7, v26, 0, 0.0, 1, v30, v31);
  sub_10000FBD8((uint64_t)v4, &qword_10051BE50);
  sub_10000FB74((uint64_t)v7, (uint64_t)v9, &qword_10051BE58);
  uint64_t v32 = &v9[*(int *)(v52 + 36)];
  *(void *)uint64_t v32 = 0;
  v32[8] = 1;
  v32[9] = v27 != v29;
  if (v27 == v29) {
    double v33 = 0.0;
  }
  else {
    double v33 = 300.0;
  }
  sub_10000FBD8((uint64_t)v7, &qword_10051BE58);
  uint64_t v34 = static Alignment.center.getter();
  uint64_t v35 = v57;
  sub_100225D88(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v57, 0.0, 1, v33, v27 == v29, v34, v36);
  sub_10000FBD8((uint64_t)v9, &qword_10051BE60);
  uint64_t v37 = static Alignment.center.getter();
  uint64_t v39 = v38;
  uint64_t v41 = (uint64_t)v58;
  uint64_t v40 = v59;
  uint64_t v42 = (uint64_t)&v58[*(int *)(v53 + 36)];
  sub_1000851FC(v59, v42);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(sub_10000F214(&qword_10051BE88) + 36));
  *uint64_t v43 = v37;
  v43[1] = v39;
  sub_10000FC34(v35, v41, &qword_10051BE68);
  uint64_t v44 = static Alignment.center.getter();
  uint64_t v46 = v45;
  uint64_t v47 = (uint64_t)v56;
  uint64_t v48 = (uint64_t *)&v56[*(int *)(v54 + 36)];
  uint64_t v49 = sub_10000F214(&qword_10051BE90);
  sub_100086228(v40, (uint64_t)v48 + *(int *)(v49 + 36));
  uint64_t *v48 = v44;
  v48[1] = v46;
  sub_10000FC34(v41, v47, &qword_10051BE70);
  uint64_t v50 = v55;
  sub_10000FC34(v47, v55, &qword_10051BE78);
  sub_10000FC34(v50, v60, &qword_10051BE78);
  return sub_100087B30((uint64_t)v22, type metadata accessor for Lens_ImageThumbnail);
}

uint64_t sub_100084C34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = type metadata accessor for Image.ResizingMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000F214(&qword_10051BF08);
  __chkstk_darwin(v25);
  uint64_t v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v26 = sub_10000F214(&qword_10051BF10);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - v16;
  if (sub_1003709A0())
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v1);
    uint64_t v18 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    *uint64_t v6 = v18;
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_10051BF30, &qword_10051BF10);
    swift_retain_n();
    _ConditionalContent<>.init(storage:)();
    swift_release_n();
    return swift_release();
  }
  else
  {
    URL.init(string:)();
    sub_10000FB74((uint64_t)v12, (uint64_t)v9, &qword_10051E070);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = sub_1000850B0;
    v20[3] = 0;
    void v20[4] = sub_1000851C4;
    v20[5] = 0;
    sub_10000F214(&qword_10051BF18);
    sub_100088B78();
    AsyncImage.init(url:scale:transaction:content:)();
    sub_10000FBD8((uint64_t)v12, &qword_10051E070);
    uint64_t v21 = v24;
    uint64_t v22 = v14;
    uint64_t v23 = v26;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v17, v22, v26);
    (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(v6, v17, v23);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_10051BF30, &qword_10051BF10);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v17, v23);
  }
}

uint64_t sub_1000850B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v3 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v2, v4);
  uint64_t v7 = Image.resizable(capInsets:resizingMode:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v7;
  return result;
}

uint64_t sub_1000851C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static HierarchicalShapeStyle.secondary.getter();
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = 1053609165;
  *(_WORD *)(a1 + 8) = 256;
  return result;
}

uint64_t sub_1000851FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v117 = sub_10000F214(&qword_10051B880);
  __chkstk_darwin(v117);
  uint64_t v122 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v115);
  long long v120 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for Material();
  uint64_t v119 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v116 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Lens_ShoppableBadge(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = sub_10000F214(&qword_10051BEE0);
  __chkstk_darwin(v114);
  long long v118 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051BEE8);
  __chkstk_darwin(v12 - 8);
  uint64_t v125 = (uint64_t)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10051BEF0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v124 = (uint64_t)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v123 = (uint64_t)&v112 - v18;
  uint64_t v19 = sub_10000F214(&qword_10051BEF8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v112 - v23;
  uint64_t v25 = type metadata accessor for ImageSearchCardImageView(0);
  if (*(unsigned char *)(a1 + *(int *)(v25 + 36)) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v14);
  }
  uint64_t v26 = a1;
  uint64_t v27 = a1 + *(int *)(v25 + 20);
  uint64_t v113 = v26;
  uint64_t v28 = *(void *)(v27 + *(int *)(type metadata accessor for Lens_Item(0) + 20));
  uint64_t v127 = v14;
  uint64_t v29 = v28 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  swift_beginAccess();
  uint64_t v126 = v15;
  sub_10000FB74(v29, (uint64_t)v24, &qword_10051BEF8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v29) = v30(v24, 1, v7);
  uint64_t v15 = v126;
  sub_10000FBD8((uint64_t)v24, &qword_10051BEF8);
  _ZF = v29 == 1;
  uint64_t v14 = v127;
  if (_ZF) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v14);
  }
  uint64_t v33 = v28 + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  swift_beginAccess();
  sub_10000FB74(v33, (uint64_t)v21, &qword_10051BEF8);
  int v34 = v30(v21, 1, v7);
  uint64_t v112 = a2;
  if (v34 == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    void v10[2] = 0;
    v10[3] = 0xE000000000000000;
    v10[4] = 0;
    v10[5] = 0;
    v10[6] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_10000FBD8((uint64_t)v21, &qword_10051BEF8);
  }
  else
  {
    sub_100086F44((uint64_t)v21, (uint64_t)v10, type metadata accessor for Lens_ShoppableBadge);
  }
  NSDecimal.init(_:)(v35, v10[4]);
  NSDecimal.init(integerLiteral:)(v36, 1000000);
  unint64_t v37 = static NSDecimal./ infix(_:_:)();
  int v38 = v37;
  __int16 v40 = v39;
  __int16 v42 = v41;
  unint64_t v43 = HIDWORD(v37);
  unint64_t v44 = HIWORD(v37);
  unint64_t v45 = v39 >> 16;
  unint64_t v46 = HIDWORD(v39);
  unint64_t v47 = HIWORD(v39);
  unsigned int v48 = HIWORD(v41);
  sub_100087B30((uint64_t)v10, type metadata accessor for Lens_ShoppableBadge);
  LODWORD(v129) = v38;
  WORD2(v129) = v43;
  WORD3(v129) = v44;
  WORD4(v129) = v40;
  WORD5(v129) = v45;
  WORD6(v129) = v46;
  HIWORD(v129) = v47;
  LOWORD(v130) = v42;
  WORD1(v130) = v48;
  sub_100085CF4((unsigned int *)&v129, v113, (uint64_t)&v128);
  long long v129 = v128;
  sub_1000317A0();
  uint64_t v49 = Text.init<A>(_:)();
  uint64_t v51 = v50;
  LOBYTE(v42) = v52 & 1;
  static Font.caption2.getter();
  uint64_t v53 = Text.font(_:)();
  uint64_t v55 = v54;
  LOBYTE(v47) = v56;
  swift_release();
  sub_100012FAC(v49, v51, v42);
  swift_bridgeObjectRelease();
  static Font.Weight.medium.getter();
  uint64_t v57 = Text.fontWeight(_:)();
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v113 = v60;
  LOBYTE(v49) = v62 & 1;
  sub_100012FAC(v53, v55, v47 & 1);
  swift_bridgeObjectRelease();
  LOBYTE(v43) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  LOBYTE(v40) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  *(void *)&long long v129 = v57;
  *((void *)&v129 + 1) = v59;
  LOBYTE(v130) = v49;
  *((void *)&v130 + 1) = v61;
  LOBYTE(v131) = v43;
  *((void *)&v131 + 1) = v64;
  *(void *)&long long v132 = v66;
  *((void *)&v132 + 1) = v68;
  *(void *)&long long v133 = v70;
  BYTE8(v133) = 0;
  LOBYTE(v134) = v40;
  *((void *)&v134 + 1) = v71;
  *(void *)long long v135 = v72;
  *(void *)&v135[8] = v73;
  *(void *)&v135[16] = v74;
  v135[24] = 0;
  uint64_t v75 = v116;
  static Material.regular.getter();
  uint64_t v76 = v120;
  char v77 = &v120[*(int *)(v115 + 20)];
  uint64_t v78 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v79 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 104))(v77, v78, v79);
  __asm { FMOV            V0.2D, #6.0 }
  *uint64_t v76 = _Q0;
  uint64_t v84 = v119;
  uint64_t v85 = (uint64_t)v122;
  uint64_t v86 = v121;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v122, v75, v121);
  uint64_t v87 = v117;
  sub_100086FAC((uint64_t)v76, v85 + *(int *)(v117 + 52), (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v85 + *(int *)(v87 + 56)) = 256;
  long long v88 = v118;
  sub_10000FB74(v85, (uint64_t)&v118[*(int *)(v114 + 36)], &qword_10051B880);
  long long v89 = v134;
  v88[4] = v133;
  v88[5] = v89;
  v88[6] = *(_OWORD *)v135;
  *(_OWORD *)((char *)v88 + 105) = *(_OWORD *)&v135[9];
  long long v90 = v130;
  *long long v88 = v129;
  v88[1] = v90;
  long long v91 = v132;
  v88[2] = v131;
  v88[3] = v91;
  sub_100081470((uint64_t)&v129);
  sub_10000FBD8(v85, &qword_10051B880);
  sub_100087B30((uint64_t)v76, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v75, v86);
  sub_100012FAC(v57, v59, v49);
  swift_bridgeObjectRelease();
  uint64_t v92 = static Alignment.bottomTrailing.getter();
  uint64_t v93 = v125;
  sub_100225DE4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v125, 0.0, 1, INFINITY, 0, v92, v94);
  sub_10000FBD8((uint64_t)v88, &qword_10051BEE0);
  LOBYTE(v57) = static Edge.Set.trailing.getter();
  char v95 = static Edge.Set.bottom.getter();
  char v96 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v57) {
    char v96 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  char v97 = Edge.Set.init(rawValue:)();
  uint64_t v98 = v112;
  uint64_t v99 = v127;
  uint64_t v100 = v126;
  if (v97 != v95) {
    char v96 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v102 = v101;
  uint64_t v104 = v103;
  uint64_t v106 = v105;
  uint64_t v108 = v107;
  uint64_t v109 = v124;
  sub_10000FB74(v93, v124, &qword_10051BEE8);
  uint64_t v110 = v109 + *(int *)(v99 + 36);
  *(unsigned char *)uint64_t v110 = v96;
  *(void *)(v110 + 8) = v102;
  *(void *)(v110 + 16) = v104;
  *(void *)(v110 + 24) = v106;
  *(void *)(v110 + 32) = v108;
  *(unsigned char *)(v110 + 40) = 0;
  sub_10000FBD8(v93, &qword_10051BEE8);
  uint64_t v111 = v123;
  sub_10000FC34(v109, v123, &qword_10051BEF0);
  sub_10000FC34(v111, v98, &qword_10051BEF0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v98, 0, 1, v99);
}

uint64_t sub_100085CF4@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v47 = a3;
  uint64_t v4 = type metadata accessor for NumberFormatStyleConfiguration.Precision();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin(v4);
  unint64_t v44 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  unsigned int v41 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10051BEF8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Lens_ShoppableBadge(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle.Currency();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v33 - v20;
  __chkstk_darwin(v22);
  __int16 v40 = (char *)&v33 - v23;
  uint64_t v39 = *a1;
  uint64_t v36 = *((unsigned __int16 *)a1 + 2);
  uint64_t v35 = *((unsigned __int16 *)a1 + 3);
  uint64_t v38 = *((void *)a1 + 1);
  unsigned int v37 = a1[4];
  uint64_t v24 = v34 + *(int *)(type metadata accessor for ImageSearchCardImageView(0) + 20);
  uint64_t v25 = *(void *)(v24 + *(int *)(type metadata accessor for Lens_Item(0) + 20))
      + OBJC_IVAR____TtCV6Tamale9Lens_ItemP33_C430B055151DC7398ADCB849C6FDA0C513_StorageClass__shoppableBadge;
  swift_beginAccess();
  sub_10000FB74(v25, (uint64_t)v10, &qword_10051BEF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    *uint64_t v14 = 0;
    v14[1] = 0xE000000000000000;
    v14[2] = 0;
    v14[3] = 0xE000000000000000;
    v14[4] = 0;
    v14[5] = 0;
    v14[6] = 0xE000000000000000;
    UnknownStorage.init()();
    sub_10000FBD8((uint64_t)v10, &qword_10051BEF8);
  }
  else
  {
    sub_100086F44((uint64_t)v10, (uint64_t)v14, type metadata accessor for Lens_ShoppableBadge);
  }
  swift_bridgeObjectRetain();
  sub_100087B30((uint64_t)v14, type metadata accessor for Lens_ShoppableBadge);
  static FormatStyle<>.currency(code:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v41;
  uint64_t v26 = v42;
  uint64_t v28 = v43;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, enum case for FloatingPointRoundingRule.toNearestOrEven(_:), v43);
  NSDecimal.FormatStyle.Currency.rounded(rule:increment:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  v29(v18, v15);
  uint64_t v30 = v44;
  static NumberFormatStyleConfiguration.Precision.fractionLength(_:)();
  uint64_t v31 = v40;
  NSDecimal.FormatStyle.Currency.precision(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v46);
  v29(v21, v15);
  sub_100088AB4(&qword_10051BF00, (void (*)(uint64_t))&type metadata accessor for NSDecimal.FormatStyle.Currency);
  NSDecimal.formatted<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v29)(v31, v15);
}

uint64_t sub_100086228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v67 = sub_10000F214(&qword_10051BE98);
  __chkstk_darwin(v67);
  uint64_t v69 = (uint64_t)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v68);
  uint64_t v5 = (uint64_t *)((char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = sub_10000F214(&qword_10051BEA0);
  __chkstk_darwin(v63);
  uint64_t v65 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10000F214(&qword_10051BEA8);
  __chkstk_darwin(v59);
  uint64_t v60 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_10051BEB0);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UnevenRoundedRectangle();
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = sub_10000F214(&qword_10051BEB8);
  __chkstk_darwin(v66);
  char v62 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ContentSizeCategory();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ImageSearchCardImageView(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v21 = *(unsigned __int8 *)(a1 + *(int *)(v20 + 28));
  sub_100086FAC(a1, (uint64_t)v19, type metadata accessor for ImageSearchCardImageView);
  if (v21 != 1)
  {
    sub_100087B30((uint64_t)v19, type metadata accessor for ImageSearchCardImageView);
    goto LABEL_7;
  }
  sub_10027CDC8((uint64_t)v16);
  char v22 = ContentSizeCategory.isAccessibilityCategory.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_100087B30((uint64_t)v19, type metadata accessor for ImageSearchCardImageView);
  if (v22)
  {
LABEL_7:
    uint64_t v37 = *(void *)(a1 + *(int *)(v17 + 32));
    uint64_t v38 = (char *)v5 + *(int *)(v68 + 20);
    uint64_t v39 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v40 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v38, v39, v40);
    *uint64_t v5 = v37;
    v5[1] = v37;
    sub_100086FAC((uint64_t)v5, v69, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    swift_storeEnumTagMultiPayload();
    sub_100088964();
    sub_100088AB4(&qword_10051BED8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    _ConditionalContent<>.init(storage:)();
    return sub_100087B30((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  }
  uint64_t v23 = *(void *)(a1 + *(int *)(v17 + 24));
  if (v23 == 1)
  {
    RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v50 = (char *)v11 + *(int *)(v9 + 20);
    uint64_t v51 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v52 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 104))(v50, v51, v52);
    *uint64_t v11 = v43;
    v11[1] = v45;
    v11[2] = v47;
    v11[3] = v49;
    sub_100086FAC((uint64_t)v11, v60, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
    swift_storeEnumTagMultiPayload();
    sub_100088AB4(&qword_10051BED0, (void (*)(uint64_t))&type metadata accessor for UnevenRoundedRectangle);
    uint64_t v36 = (uint64_t)v61;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v36, v65, &qword_10051BEB0);
    swift_storeEnumTagMultiPayload();
    sub_100088A10();
    sub_100088AB4(&qword_10051BED8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    uint64_t v24 = (uint64_t)v62;
  }
  else
  {
    uint64_t v24 = (uint64_t)v62;
    if (v23)
    {
      uint64_t v55 = *(void *)(a1 + *(int *)(v17 + 32));
      char v56 = (char *)v5 + *(int *)(v68 + 20);
      uint64_t v57 = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v58 = type metadata accessor for RoundedCornerStyle();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 104))(v56, v57, v58);
      *uint64_t v5 = v55;
      v5[1] = v55;
      sub_100086FAC((uint64_t)v5, v65, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
      swift_storeEnumTagMultiPayload();
      sub_100088A10();
      sub_100088AB4(&qword_10051BED8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
      _ConditionalContent<>.init(storage:)();
      uint64_t v53 = &type metadata accessor for RoundedRectangle;
      uint64_t v54 = (uint64_t)v5;
      goto LABEL_11;
    }
    RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v33 = (char *)v11 + *(int *)(v9 + 20);
    uint64_t v34 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v35 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v33, v34, v35);
    *uint64_t v11 = v26;
    v11[1] = v28;
    v11[2] = v30;
    v11[3] = v32;
    sub_100086FAC((uint64_t)v11, v60, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
    swift_storeEnumTagMultiPayload();
    sub_100088AB4(&qword_10051BED0, (void (*)(uint64_t))&type metadata accessor for UnevenRoundedRectangle);
    uint64_t v36 = (uint64_t)v61;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v36, v65, &qword_10051BEB0);
    swift_storeEnumTagMultiPayload();
    sub_100088A10();
    sub_100088AB4(&qword_10051BED8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  }
  _ConditionalContent<>.init(storage:)();
  sub_10000FBD8(v36, &qword_10051BEB0);
  uint64_t v53 = &type metadata accessor for UnevenRoundedRectangle;
  uint64_t v54 = (uint64_t)v11;
LABEL_11:
  sub_100087B30(v54, (uint64_t (*)(void))v53);
  sub_10000FB74(v24, v69, &qword_10051BEB8);
  swift_storeEnumTagMultiPayload();
  sub_100088964();
  sub_100088AB4(&qword_10051BED8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
  _ConditionalContent<>.init(storage:)();
  return sub_10000FBD8(v24, &qword_10051BEB8);
}

uint64_t sub_100086C14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v1 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051BD58);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051BD60);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051BD68);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v17 = 0.7;
  }
  else {
    double v17 = 1.0;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v4, v1);
  *(double *)&v8[*(int *)(v6 + 44)] = v17;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v18 = 0.98;
  }
  else {
    double v18 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  sub_10000FB74((uint64_t)v8, (uint64_t)v12, &qword_10051BD58);
  uint64_t v23 = &v12[*(int *)(v10 + 44)];
  *(double *)uint64_t v23 = v18;
  *((double *)v23 + 1) = v18;
  *((void *)v23 + 2) = v20;
  *((void *)v23 + 3) = v22;
  sub_10000FBD8((uint64_t)v8, &qword_10051BD58);
  uint64_t v24 = static Animation.spring(response:dampingFraction:blendDuration:)();
  char v25 = ButtonStyleConfiguration.isPressed.getter();
  sub_10000FB74((uint64_t)v12, (uint64_t)v16, &qword_10051BD60);
  uint64_t v26 = &v16[*(int *)(v14 + 44)];
  *(void *)uint64_t v26 = v24;
  v26[8] = v25 & 1;
  sub_10000FBD8((uint64_t)v12, &qword_10051BD60);
  return sub_10000FC34((uint64_t)v16, v29, &qword_10051BD68);
}

uint64_t sub_100086F00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for ImageSearchCardImageView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10051BDC8);
}

uint64_t sub_100086F44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100086FAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100087014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v1 = sub_10000F214(&qword_10051BD48);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_10051BD50);
  __chkstk_darwin(v45);
  uint64_t v46 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000F214(&qword_100519008);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v7);
  uint64_t v9 = (_OWORD *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for Image.ResizingMode();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10000F214(&qword_10051BD10);
  __chkstk_darwin(v44);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (AsyncImagePhase.image.getter())
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for Image.ResizingMode.stretch(_:), v10);
    uint64_t v16 = Image.resizable(capInsets:resizingMode:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v17 = v48;
    char v18 = v49;
    uint64_t v42 = v1;
    uint64_t v19 = v50;
    int v41 = v51;
    uint64_t v39 = v53;
    uint64_t v40 = v52;
    uint64_t v20 = (char *)v9 + *(int *)(v7 + 20);
    uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v22 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
    __asm { FMOV            V0.2D, #2.0 }
    *uint64_t v9 = _Q0;
    sub_100086FAC((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    uint64_t v28 = v44;
    *(_WORD *)&v6[*(int *)(v43 + 36)] = 256;
    sub_10000FB74((uint64_t)v6, (uint64_t)&v15[*(int *)(v28 + 36)], &qword_100519008);
    *(void *)uint64_t v15 = v16;
    *((void *)v15 + 1) = 0;
    *((_WORD *)v15 + 8) = 1;
    *((void *)v15 + 3) = v17;
    v15[32] = v18;
    *((void *)v15 + 5) = v19;
    v15[48] = v41;
    uint64_t v29 = v39;
    *((void *)v15 + 7) = v40;
    *((void *)v15 + 8) = v29;
    swift_retain();
    sub_10000FBD8((uint64_t)v6, &qword_100519008);
    sub_100087B30((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    swift_release();
    uint64_t v30 = &qword_10051BD10;
    sub_10000FB74((uint64_t)v15, v46, &qword_10051BD10);
    swift_storeEnumTagMultiPayload();
    sub_1000879C4();
    sub_100013AA8(&qword_10051BD40, &qword_10051BD48);
    _ConditionalContent<>.init(storage:)();
    swift_release();
    uint64_t v31 = (uint64_t)v15;
  }
  else
  {
    uint64_t v32 = (char *)v9 + *(int *)(v7 + 20);
    uint64_t v33 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v34 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(v32, v33, v34);
    __asm { FMOV            V0.2D, #2.0 }
    *uint64_t v9 = _Q0;
    LODWORD(v32) = static HierarchicalShapeStyle.secondary.getter();
    sub_100086FAC((uint64_t)v9, (uint64_t)v3, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    uint64_t v36 = &v3[*(int *)(v1 + 52)];
    *(_DWORD *)uint64_t v36 = v32;
    *((_DWORD *)v36 + 1) = 1053609165;
    *(_WORD *)&v3[*(int *)(v1 + 56)] = 256;
    sub_100087B30((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    uint64_t v30 = &qword_10051BD48;
    sub_10000FB74((uint64_t)v3, v46, &qword_10051BD48);
    swift_storeEnumTagMultiPayload();
    sub_1000879C4();
    sub_100013AA8(&qword_10051BD40, &qword_10051BD48);
    _ConditionalContent<>.init(storage:)();
    uint64_t v31 = (uint64_t)v3;
  }
  return sub_10000FBD8(v31, v30);
}

uint64_t sub_1000875FC()
{
  return sub_100088DB8(&qword_10051BC60, &qword_10051BC68, (void (*)(void))sub_10008762C);
}

unint64_t sub_10008762C()
{
  unint64_t result = qword_10051BC70;
  if (!qword_10051BC70)
  {
    sub_10000F69C(&qword_10051BC78);
    sub_1000876CC();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BC70);
  }
  return result;
}

unint64_t sub_1000876CC()
{
  unint64_t result = qword_10051BC80;
  if (!qword_10051BC80)
  {
    sub_10000F69C(&qword_10051BC88);
    sub_10008776C();
    sub_100013AA8(&qword_100518D00, &qword_100523200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BC80);
  }
  return result;
}

unint64_t sub_10008776C()
{
  unint64_t result = qword_100519C38;
  if (!qword_100519C38)
  {
    sub_10000F69C(&qword_100519C40);
    sub_100013AA8(&qword_100518C38, &qword_100518C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100519C38);
  }
  return result;
}

uint64_t sub_10008780C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100087884()
{
  unint64_t result = qword_10051BCE8;
  if (!qword_10051BCE8)
  {
    sub_10000F69C(&qword_10051BCA8);
    sub_100088ED4(&qword_10051BCF0, &qword_10051BCA0, (void (*)(void))sub_100087924);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BCE8);
  }
  return result;
}

unint64_t sub_100087924()
{
  unint64_t result = qword_10051BCF8;
  if (!qword_10051BCF8)
  {
    sub_10000F69C(&qword_10051BD00);
    sub_1000879C4();
    sub_100013AA8(&qword_10051BD18, &qword_10051BD20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BCF8);
  }
  return result;
}

unint64_t sub_1000879C4()
{
  unint64_t result = qword_10051BD08;
  if (!qword_10051BD08)
  {
    sub_10000F69C(&qword_10051BD10);
    sub_100088DB8((unint64_t *)&qword_10051AD68, (uint64_t *)&unk_1005230D0, (void (*)(void))sub_100061FC8);
    sub_100013AA8(&qword_100519040, &qword_100519008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BD08);
  }
  return result;
}

unint64_t sub_100087A90()
{
  unint64_t result = qword_10051BD38;
  if (!qword_10051BD38)
  {
    sub_10000F69C(&qword_10051BD30);
    sub_1000879C4();
    sub_100013AA8(&qword_10051BD40, &qword_10051BD48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BD38);
  }
  return result;
}

uint64_t sub_100087B30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_100087B90(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = type metadata accessor for Lens_Item(0);
    *(void *)&v10[*(int *)(v13 + 20)] = *(void *)&v11[*(int *)(v13 + 20)];
    uint64_t v14 = a3[7];
    *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[9];
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  }
  swift_retain();
  return a1;
}

uint64_t sub_100087D2C(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  type metadata accessor for Lens_Item(0);

  return swift_release();
}

void *sub_100087E14(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for Lens_Item(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  swift_retain();
  return a1;
}

void *sub_100087F64(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for Lens_Item(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

char *sub_1000880E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ContentSizeCategory();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for Lens_Item(0);
  *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
  uint64_t v13 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v14] = a2[v14];
  return a1;
}

char *sub_100088234(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000FBD8((uint64_t)a1, &qword_10051BB48);
    uint64_t v6 = sub_10000F214(&qword_10051BB48);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ContentSizeCategory();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for Lens_Item(0);
  *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
  swift_release();
  uint64_t v13 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v14] = a2[v14];
  return a1;
}

uint64_t sub_1000883A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000883BC);
}

uint64_t sub_1000883C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051BB50);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Lens_Item(0);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1000884E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000884FC);
}

uint64_t sub_100088500(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F214(&qword_10051BB50);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Lens_Item(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100088614()
{
  sub_100082914();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Lens_Item(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1000886FC()
{
  unint64_t result = qword_10051BE10;
  if (!qword_10051BE10)
  {
    sub_10000F69C(&qword_10051BE18);
    sub_100013AA8(&qword_10051BC08, &qword_10051BBF8);
    sub_100088AB4((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BE10);
  }
  return result;
}

unint64_t sub_1000887D0()
{
  unint64_t result = qword_10051BE20;
  if (!qword_10051BE20)
  {
    sub_10000F69C(&qword_10051BD68);
    sub_100088DB8(&qword_10051BE28, &qword_10051BD60, (void (*)(void))sub_10008889C);
    sub_100013AA8(&qword_10051BE40, &qword_10051BE48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BE20);
  }
  return result;
}

unint64_t sub_10008889C()
{
  unint64_t result = qword_10051BE30;
  if (!qword_10051BE30)
  {
    sub_10000F69C(&qword_10051BD58);
    sub_100088AB4((unint64_t *)&qword_10051BE38, (void (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BE30);
  }
  return result;
}

uint64_t sub_100088948()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100088964()
{
  unint64_t result = qword_10051BEC0;
  if (!qword_10051BEC0)
  {
    sub_10000F69C(&qword_10051BEB8);
    sub_100088A10();
    sub_100088AB4(&qword_10051BED8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BEC0);
  }
  return result;
}

unint64_t sub_100088A10()
{
  unint64_t result = qword_10051BEC8;
  if (!qword_10051BEC8)
  {
    sub_10000F69C(&qword_10051BEB0);
    sub_100088AB4(&qword_10051BED0, (void (*)(uint64_t))&type metadata accessor for UnevenRoundedRectangle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BEC8);
  }
  return result;
}

uint64_t sub_100088AB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100088AFC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100088B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10017FA9C(a1, *(void (**)(uint64_t *__return_ptr))(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *__return_ptr))(v2 + 32));
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 10) = v6 & 1;
  return result;
}

unint64_t sub_100088B78()
{
  unint64_t result = qword_10051BF20;
  if (!qword_10051BF20)
  {
    sub_10000F69C(&qword_10051BF18);
    sub_100013AA8(&qword_10051BF28, (uint64_t *)&unk_100523160);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BF20);
  }
  return result;
}

unint64_t sub_100088C1C()
{
  unint64_t result = qword_10051BF38;
  if (!qword_10051BF38)
  {
    sub_10000F69C(&qword_10051BE78);
    sub_100088CBC();
    sub_100013AA8(&qword_10051BF80, &qword_10051BE90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BF38);
  }
  return result;
}

unint64_t sub_100088CBC()
{
  unint64_t result = qword_10051BF40;
  if (!qword_10051BF40)
  {
    sub_10000F69C(&qword_10051BE70);
    sub_100088DB8(&qword_10051BF48, &qword_10051BE68, (void (*)(void))sub_100088D88);
    sub_100013AA8(&qword_10051BF78, &qword_10051BE88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BF40);
  }
  return result;
}

uint64_t sub_100088D88()
{
  return sub_100088DB8(&qword_10051BF50, &qword_10051BE60, (void (*)(void))sub_100088E34);
}

uint64_t sub_100088DB8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100088E34()
{
  unint64_t result = qword_10051BF58;
  if (!qword_10051BF58)
  {
    sub_10000F69C(&qword_10051BE58);
    sub_100088ED4(&qword_10051BF60, &qword_10051BE50, (void (*)(void))sub_100088F4C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BF58);
  }
  return result;
}

uint64_t sub_100088ED4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100088F4C()
{
  unint64_t result = qword_10051BF68;
  if (!qword_10051BF68)
  {
    sub_10000F69C(&qword_10051BF70);
    sub_100013AA8(&qword_10051BF30, &qword_10051BF10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BF68);
  }
  return result;
}

void sub_100088FEC(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  uint64_t v3 = a1;

  int64_t Width = CVPixelBufferGetWidth(v3);
  int64_t Height = CVPixelBufferGetHeight(v3);
  char v6 = *(void **)(v1 + 56);
  if (v6
    && (objc_msgSend(*(id *)(v1 + 56), "prepareForEngineType:inputColorROI:", 4, 0.0, 0.0, (double)Width, (double)Height), (uint64_t v7 = (__CVBuffer *)objc_msgSend(v6, "prevDisparity")) != 0))
  {
    uint64_t v8 = v7;
    *(void *)(v1 + 24) = CVPixelBufferGetWidth(v7);
    *(unsigned char *)(v1 + 32) = 0;
    size_t v9 = CVPixelBufferGetHeight(v8);

    char v10 = 0;
  }
  else
  {
    size_t v9 = 0;
    *(void *)(v1 + 24) = 0;
    char v10 = 1;
    *(unsigned char *)(v1 + 32) = 1;
  }
  *(void *)(v1 + 40) = v9;
  *(unsigned char *)(v1 + 48) = v10;
}

CVPixelBufferRef sub_1000890C0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1 || (*(unsigned char *)(v0 + 32) & 1) != 0 || (*(unsigned char *)(v0 + 48) & 1) != 0) {
    return 0;
  }
  size_t v2 = *(void *)(v0 + 24);
  size_t v3 = *(void *)(v0 + 40);
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v4 = v1;
  CVPixelBufferCreate(kCFAllocatorDefault, v2, v3, 0x66646973u, 0, &pixelBufferOut);
  CVPixelBufferRef v5 = pixelBufferOut;
  if (pixelBufferOut)
  {
    CVPixelBufferRef v10 = pixelBufferOut;
    char v6 = *(void **)(v0 + 56);
    if (v6)
    {
      uint64_t v7 = pixelBufferOut;
      id v8 = [v6 computeDepthWithColor:v4 outDisparity:&v10];

      uint64_t v4 = v7;
      if (!v8) {
        return v5;
      }
    }
    else
    {
    }
    return 0;
  }

  return v5;
}

uint64_t sub_1000891DC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MonocularDepth()
{
  return self;
}

CVPixelBufferRef sub_100089240(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  char v6 = v5;
  CVPixelBufferGetWidth(v5);
  CVPixelBufferGetHeight(v5);
  CVPixelBufferRef pixelBufferOut = 0;
  v31.origin.CGFloat x = a2;
  v31.origin.CGFloat y = a3;
  v31.size.CGFloat width = a4;
  v31.size.CGFloat height = a5;
  double Width = CGRectGetWidth(v31);
  if ((~*(void *)&Width & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (Width <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v32.origin.CGFloat x = a2;
  v32.origin.CGFloat y = a3;
  v32.size.CGFloat width = a4;
  v32.size.CGFloat height = a5;
  double Height = CGRectGetHeight(v32);
  if ((~*(void *)&Height & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (Height <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  if (Height >= 9.22337204e18) {
    goto LABEL_18;
  }
  size_t v14 = (uint64_t)Height;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
  CVReturn v16 = CVPixelBufferCreate(kCFAllocatorDefault, (uint64_t)Width, v14, PixelFormatType, 0, &pixelBufferOut);
  CVPixelBufferRef v17 = pixelBufferOut;
  if (v16)
  {
    CVPixelBufferRef v18 = pixelBufferOut;
    CVPixelBufferRef v17 = 0;
LABEL_11:

    return v17;
  }
  if (pixelBufferOut)
  {
    CGAffineTransformMakeTranslation(&v29, -a2, -a3);
    long long v27 = *(_OWORD *)&v29.c;
    long long v28 = *(_OWORD *)&v29.a;
    tCGFloat x = v29.tx;
    tCGFloat y = v29.ty;
    id v21 = objc_allocWithZone((Class)CIImage);
    uint64_t v22 = v17;
    id v23 = [v21 initWithCVPixelBuffer:v6];
    id v24 = [v23 imageByCroppingToRect:a2, a3, a4, a5];

    *(_OWORD *)&v29.a = v28;
    *(_OWORD *)&v29.c = v27;
    v29.tCGFloat x = tx;
    v29.tCGFloat y = ty;
    CVPixelBufferRef v18 = (CVPixelBufferRef)[v24 imageByApplyingTransform:&v29];

    v33.origin.CGFloat x = a2;
    v33.origin.CGFloat y = a3;
    v33.size.CGFloat width = a4;
    v33.size.CGFloat height = a5;
    double v25 = CGRectGetWidth(v33);
    v34.origin.CGFloat x = a2;
    v34.origin.CGFloat y = a3;
    v34.size.CGFloat width = a4;
    v34.size.CGFloat height = a5;
    [a1 render:v18 toCVPixelBuffer:v22 bounds:0.0, 0.0, v25, CGRectGetHeight(v34)];

    goto LABEL_11;
  }
  return v17;
}

uint64_t sub_1000894F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[2] = a2;
  v21[3] = a3;
  v21[1] = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051C098);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions.Source();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = __chkstk_darwin(v14);
  CVPixelBufferRef v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v11 + 104))(v13, enum case for SummarizationClient.TextAssistantSummarizationOptions.Source.visualIntelligenceCamera(_:), v10, v16);
  uint64_t v19 = type metadata accessor for ClientProcessInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
  SummarizationClient.TextAssistantSummarizationOptions.init(source:originatingProcess:)();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOBYTE(v6) = SummarizationClient.isTextEligibleForSummarization(_:options:requestIdentifier:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  swift_bridgeObjectRelease();
  return v6 & 1;
}

void sub_10008997C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + 16) & 1);
  if (!*(void *)(v0 + 32))
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 48)) {
      goto LABEL_3;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 48)) {
    goto LABEL_7;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

unint64_t sub_100089A74(char a1)
{
  unint64_t result = 0x746E65746E6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100089B14(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10051C0D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F3B0(a1, a1[3]);
  sub_10008B500();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100089CC4()
{
  return sub_100089A74(*v0);
}

uint64_t sub_100089CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008B088(a1, a2);
  *a3 = result;
  return result;
}

void sub_100089CF4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100089D00(uint64_t a1)
{
  unint64_t v2 = sub_10008B500();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100089D3C(uint64_t a1)
{
  unint64_t v2 = sub_10008B500();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100089D78@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008B230(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100089DC8(void *a1)
{
  return sub_100089B14(a1);
}

Swift::Int sub_100089DE0()
{
  return Hasher._finalize()();
}

Swift::Int sub_100089E24()
{
  return Hasher._finalize()();
}

uint64_t sub_100089E60(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_10008AF9C((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_100089EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  type metadata accessor for Locale();
  v4[16] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue();
  v4[17] = swift_task_alloc();
  sub_10000F214(&qword_10051C0A8);
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SummarySafetyClassification();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[23] = v6;
  v4[24] = *(void *)(v6 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v7 = sub_10000F214(&qword_10051C0B0);
  v4[26] = v7;
  v4[27] = *(void *)(v7 - 8);
  v4[28] = swift_task_alloc();
  sub_10000F214(&qword_10051C098);
  v4[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions.Source();
  v4[30] = v8;
  v4[31] = *(void *)(v8 - 8);
  v4[32] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions();
  v4[33] = v9;
  v4[34] = *(void *)(v9 - 8);
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_10008A1BC, 0, 0);
}

uint64_t sub_10008A1BC()
{
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[23];
  (*(void (**)(void, void, void))(v0[31] + 104))(v0[32], enum case for SummarizationClient.TextAssistantSummarizationOptions.Source.visualIntelligenceCamera(_:), v0[30]);
  uint64_t v5 = type metadata accessor for ClientProcessInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  SummarizationClient.TextAssistantSummarizationOptions.init(source:originatingProcess:)();
  UUID.init()();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  v0[36] = v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[37] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10008A330;
  uint64_t v10 = v0[35];
  uint64_t v11 = v0[28];
  uint64_t v12 = v0[14];
  uint64_t v13 = v0[13];
  return SummarizationClient.summarize(_:options:requestIdentifier:)(v11, v13, v12, v10, v6, v8);
}

uint64_t sub_10008A330()
{
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10008A944;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10008A44C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008A44C()
{
  uint64_t v47 = v0;
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  SummarizationClient.TextAssistantSummary.safetyClassification.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10008AC78(v0[18]);
    if (qword_100517E88 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000F378(v4, (uint64_t)qword_10055E2B0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Summarization had an empty safety classification.", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[34];
    uint64_t v8 = v0[35];
    uint64_t v10 = v0[33];
    uint64_t v12 = v0[27];
    uint64_t v11 = v0[28];
    uint64_t v13 = v0[26];

    SummarizationClient.TextAssistantSummary.content.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    char v41 = 0;
    uint64_t v43 = v0[6];
    uint64_t v45 = v0[5];
  }
  else
  {
    (*(void (**)(void, void, void))(v0[20] + 32))(v0[22], v0[18], v0[19]);
    if (qword_100517E88 != -1) {
      swift_once();
    }
    uint64_t v15 = v0[21];
    uint64_t v14 = v0[22];
    uint64_t v17 = v0[19];
    uint64_t v16 = v0[20];
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000F378(v18, (uint64_t)qword_10055E2B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v23 = v0[20];
    uint64_t v22 = v0[21];
    if (v21)
    {
      uint64_t v44 = v0[19];
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)id v24 = 136315138;
      char v25 = SummarySafetyClassification.isSafe.getter();
      BOOL v26 = (v25 & 1) == 0;
      if (v25) {
        uint64_t v27 = 1701208435;
      }
      else {
        uint64_t v27 = 0x656661736E75;
      }
      if (v26) {
        unint64_t v28 = 0xE600000000000000;
      }
      else {
        unint64_t v28 = 0xE400000000000000;
      }
      v0[11] = sub_1003806B0(v27, v28, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v42(v22, v44);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Summarization had a %s safety classification.", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v42(v0[21], v0[19]);
    }

    uint64_t v29 = v0[34];
    uint64_t v40 = v0[35];
    uint64_t v30 = v0[33];
    uint64_t v31 = v0[27];
    uint64_t v32 = v0[28];
    uint64_t v33 = v0[26];
    uint64_t v34 = v0[22];
    uint64_t v35 = v0[19];
    SummarizationClient.TextAssistantSummary.content.getter();
    uint64_t v43 = v0[8];
    uint64_t v45 = v0[7];
    char v36 = SummarySafetyClassification.isSafe.getter();
    v42(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v40, v30);
    char v41 = v36 ^ 1;
  }
  uint64_t v37 = v0[12];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v37 = v45;
  *(void *)(v37 + 8) = v43;
  *(unsigned char *)(v37 + 16) = v41 & 1;
  *(_OWORD *)(v37 + 24) = 0u;
  *(_OWORD *)(v37 + 40) = 0u;
  uint64_t v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

uint64_t sub_10008A944()
{
  swift_bridgeObjectRelease();
  if (qword_100517E88 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E2B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[10] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error summarizing text with error: %@", v4, 0xCu);
    sub_10000F214(&qword_10051A948);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = v0[34];
  uint64_t v7 = v0[35];
  uint64_t v9 = v0[33];
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v10 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v19 = v11;
  uint64_t v20 = v10;
  swift_getErrorValue();
  uint64_t v12 = Error.localizedDescription.getter();
  uint64_t v17 = v13;
  uint64_t v18 = v12;
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v14 = v0[12];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v14 = 0;
  *(void *)(v14 + 8) = 0xE000000000000000;
  *(unsigned char *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = v20;
  *(void *)(v14 + 32) = v19;
  *(void *)(v14 + 40) = v18;
  *(void *)(v14 + 48) = v17;
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10008AC78(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051C0A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TextSummarizer()
{
  return &type metadata for TextSummarizer;
}

uint64_t destroy for TextSummarizationResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextSummarizationResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextSummarizationResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TextSummarizationResult(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TextSummarizationResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextSummarizationResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextSummarizationResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSummarizationResult()
{
  return &type metadata for TextSummarizationResult;
}

unint64_t sub_10008AF48()
{
  unint64_t result = qword_10051C0B8;
  if (!qword_10051C0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C0B8);
  }
  return result;
}

uint64_t sub_10008AF9C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16))) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a2 + 32);
    if (!v7)
    {
      if (v8) {
        return 0;
      }
      goto LABEL_16;
    }
    if (!v8) {
      return 0;
    }
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && v7 == v8
      || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v9 & 1) != 0))
    {
LABEL_16:
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a2 + 48);
      if (v10)
      {
        if (!v11
          || (*(void *)(a1 + 40) != *(void *)(a2 + 40) || v10 != v11)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          return 0;
        }
      }
      else if (v11)
      {
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_10008B088(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100425DB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100425DD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100425DF0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10008B230@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_10051C0C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_10008B500();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v26 = 1;
  swift_bridgeObjectRetain();
  int v23 = KeyedDecodingContainer.decode(_:forKey:)();
  char v25 = 2;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v22 = v12;
  char v24 = 3;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  v23 &= 1u;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v20 = v13;
  v16(v8, v5);
  swift_bridgeObjectRetain();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v17 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v23;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v15;
  return result;
}

unint64_t sub_10008B500()
{
  unint64_t result = qword_10051C0C8;
  if (!qword_10051C0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C0C8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TextSummarizationResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008B620);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSummarizationResult.CodingKeys()
{
  return &type metadata for TextSummarizationResult.CodingKeys;
}

unint64_t sub_10008B65C()
{
  unint64_t result = qword_10051C0D8;
  if (!qword_10051C0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C0D8);
  }
  return result;
}

unint64_t sub_10008B6B4()
{
  unint64_t result = qword_10051C0E0;
  if (!qword_10051C0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C0E0);
  }
  return result;
}

unint64_t sub_10008B70C()
{
  unint64_t result = qword_10051C0E8;
  if (!qword_10051C0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C0E8);
  }
  return result;
}

uint64_t destroy for ConfigToggle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 40))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ConfigToggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for ConfigToggle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 40);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 40);
  if (!v4)
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v5;
      *(void *)(a1 + 48) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConfigToggle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (!v5)
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v4;
      *(void *)(a1 + 48) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ConfigToggle()
{
  return &type metadata for ConfigToggle;
}

uint64_t sub_10008BA00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008BA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v33 = a1;
  uint64_t v3 = sub_10000F214(&qword_10051C0F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_10051C0F8);
  __chkstk_darwin(v34);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051C100);
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin(v9);
  uint64_t v30 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051C108);
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  __chkstk_darwin(v11);
  char v27 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 16);
  uint64_t v13 = *(void **)(v1 + 24);
  char v15 = *(unsigned char *)(v1 + 32);
  uint64_t v35 = v1;
  swift_retain();
  swift_retain();
  Toggle.init(isOn:label:)();
  uint64_t v36 = v14;
  uint64_t v37 = v13;
  LOBYTE(v38) = v15;
  sub_10000F214(&qword_100519660);
  Binding.wrappedValue.getter();
  if ((v40 ^ *(unsigned __int8 *)(v1 + 33))) {
    uint64_t v16 = static Color.red.getter();
  }
  else {
    uint64_t v16 = static Color.primary.getter();
  }
  uint64_t v17 = v16;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  *(void *)&v8[*(int *)(v34 + 36)] = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v36 = v14;
  uint64_t v37 = v13;
  LOBYTE(v38) = v15;
  Binding.wrappedValue.getter();
  LOBYTE(v36) = v40;
  uint64_t v18 = swift_allocObject();
  long long v19 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(v2 + 32);
  *(void *)(v18 + 64) = *(void *)(v2 + 48);
  sub_10008C154(v2);
  unint64_t v20 = sub_10008C1B4();
  uint64_t v21 = v30;
  uint64_t v22 = v34;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  uint64_t v23 = sub_10008C278((uint64_t)v8);
  __chkstk_darwin(v23);
  *(&v27 - 2) = (char *)v2;
  sub_10000F214(&qword_10051C120);
  uint64_t v36 = v22;
  uint64_t v37 = &type metadata for Bool;
  unint64_t v38 = v20;
  uint64_t v39 = &protocol witness table for Bool;
  swift_getOpaqueTypeConformance2();
  sub_100013AA8(&qword_10051E300, &qword_10051C120);
  char v24 = v27;
  uint64_t v25 = v32;
  View.swipeActions<A>(edge:allowsFullSwipe:content:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v25);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v33, v24, v29);
}

uint64_t sub_10008BEE0(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051C128);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.cancel.getter();
  uint64_t v5 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v6 + 64) = *(void *)(a1 + 48);
  sub_10008C154(a1);
  sub_10000F214((uint64_t *)&unk_10051E360);
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  return Button.init(role:action:label:)();
}

uint64_t sub_10008C05C()
{
  LocalizedStringKey.init(stringLiteral:)();

  return Label<>.init(_:systemImage:)();
}

uint64_t sub_10008C0B8@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BA1C(a1);
}

uint64_t sub_10008C0FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = v2[1];
  *(void *)a1 = *v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008C120(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 56);
  if (v3) {
    return v3(*a2);
  }
  return result;
}

uint64_t sub_10008C154(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000F724(v2);
  return a1;
}

unint64_t sub_10008C1B4()
{
  unint64_t result = qword_10051C110;
  if (!qword_10051C110)
  {
    sub_10000F69C(&qword_10051C0F8);
    sub_100013AA8(&qword_10051C118, &qword_10051C0F0);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C110);
  }
  return result;
}

uint64_t sub_10008C278(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051C0F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008C2D8()
{
  return sub_10008BEE0(*(void *)(v0 + 16));
}

uint64_t sub_10008C2E4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_10008C33C()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10008C394()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ReplayStatusContainer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ReplayStatusContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReplayStatusContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReplayStatusContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplayStatusContainer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplayStatusContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplayStatusContainer()
{
  return &type metadata for ReplayStatusContainer;
}

uint64_t sub_10008C760()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008C77C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v39 = a1;
  uint64_t v3 = type metadata accessor for Capsule();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Material();
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051C138);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051C140);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  char v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051C148);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  long long v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v11 = static VerticalAlignment.center.getter();
  *((void *)v11 + 1) = 0x4000000000000000;
  unsigned char v11[16] = 0;
  uint64_t v20 = sub_10000F214(&qword_10051C150);
  sub_10008CB40(v2, (uint64_t)&v11[*(int *)(v20 + 44)]);
  LOBYTE(v2) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_10000FB74((uint64_t)v11, (uint64_t)v15, &qword_10051C138);
  uint64_t v29 = &v15[*(int *)(v13 + 44)];
  *uint64_t v29 = v2;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_10000FBD8((uint64_t)v11, &qword_10051C138);
  static Material.thin.getter();
  uint64_t v30 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v31 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v5, v30, v31);
  uint64_t v32 = &v19[*(int *)(v17 + 44)];
  uint64_t v33 = v38;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v32, v8, v38);
  uint64_t v34 = sub_10000F214(&qword_10051C158);
  sub_10008D3F0((uint64_t)v5, (uint64_t)&v32[*(int *)(v34 + 52)]);
  *(_WORD *)&v32[*(int *)(v34 + 56)] = 256;
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_10051C140);
  sub_10008D454((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v33);
  sub_10000FBD8((uint64_t)v15, &qword_10051C140);
  LOBYTE(v32) = static Edge.Set.horizontal.getter();
  uint64_t v35 = v39;
  sub_10000FB74((uint64_t)v19, v39, &qword_10051C148);
  uint64_t v36 = v35 + *(int *)(sub_10000F214(&qword_10051C160) + 36);
  *(unsigned char *)uint64_t v36 = (_BYTE)v32;
  *(_OWORD *)(v36 + 8) = 0u;
  *(_OWORD *)(v36 + 24) = 0u;
  *(unsigned char *)(v36 + 40) = 1;
  return sub_10000FBD8((uint64_t)v19, &qword_10051C148);
}

uint64_t sub_10008CB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v73 = sub_10000F214(&qword_10051C168);
  uint64_t v75 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = (char *)v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_10000F214(&qword_10051C170);
  uint64_t v76 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051C178);
  __chkstk_darwin(v5 - 8);
  uint64_t v70 = (uint64_t)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)v63 - v8;
  __chkstk_darwin(v9);
  uint64_t v67 = (char *)v63 - v10;
  __chkstk_darwin(v11);
  uint64_t v74 = (uint64_t)v63 - v12;
  uint64_t v13 = sub_10000F214(&qword_10051C180);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10051C188);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  long long v19 = (char *)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v63 - v21;
  uint64_t v64 = (uint64_t)v63 - v21;
  uint64_t v23 = *(ValueMetadata **)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = *(void *)(a1 + 40);
  char v26 = *(unsigned char *)(a1 + 48);
  uint64_t v77 = *(void *)a1;
  uint64_t v78 = v23;
  uint64_t v79 = v24;
  long long v80 = *(_OWORD *)(a1 + 24);
  uint64_t v81 = v25;
  char v82 = v26;
  sub_10008D4B0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  View.accessibilityIdentifier(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v27 = static Edge.Set.trailing.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_10051C180);
  uint64_t v36 = &v19[*(int *)(v17 + 44)];
  uint64_t v65 = v19;
  char *v36 = v27;
  *((void *)v36 + 1) = v29;
  *((void *)v36 + 2) = v31;
  *((void *)v36 + 3) = v33;
  *((void *)v36 + 4) = v35;
  unsigned char v36[40] = 0;
  sub_10000FBD8((uint64_t)v15, &qword_10051C180);
  sub_10000FC34((uint64_t)v19, (uint64_t)v22, &qword_10051C188);
  uint64_t v37 = swift_allocObject();
  long long v38 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v37 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v37 + 64) = v38;
  *(_OWORD *)(v37 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v37 + 96) = *(void *)(a1 + 80);
  long long v39 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v37 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v37 + 32) = v39;
  sub_10008D530(a1);
  _OWORD v63[2] = sub_10000F214(&qword_10051C198);
  v63[1] = sub_10008D59C();
  unsigned __int8 v40 = v72;
  Button.init(action:label:)();
  uint64_t v41 = sub_100013AA8(&qword_10051C1B0, &qword_10051C168);
  unint64_t v42 = sub_10008D6DC();
  uint64_t v43 = v66;
  uint64_t v44 = v73;
  View.buttonStyle<A>(_:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v75 + 8);
  v75 += 8;
  v63[0] = v45;
  v45(v40, v44);
  uint64_t v77 = v44;
  uint64_t v78 = &type metadata for ReplayControlButtonStyle;
  uint64_t v79 = v41;
  *(void *)&long long v80 = v42;
  swift_getOpaqueTypeConformance2();
  uint64_t v47 = (uint64_t)v67;
  uint64_t v46 = v68;
  uint64_t v48 = v43;
  View.accessibilityIdentifier(_:)();
  char v49 = *(void (**)(char *, uint64_t))(v76 + 8);
  v76 += 8;
  v49(v48, v46);
  sub_10000FC34(v47, v74, &qword_10051C178);
  uint64_t v50 = swift_allocObject();
  long long v51 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v50 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v50 + 64) = v51;
  *(_OWORD *)(v50 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v50 + 96) = *(void *)(a1 + 80);
  long long v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v50 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v50 + 32) = v52;
  sub_10008D530(a1);
  uint64_t v53 = v72;
  Button.init(action:label:)();
  uint64_t v54 = v73;
  View.buttonStyle<A>(_:)();
  ((void (*)(char *, uint64_t))v63[0])(v53, v54);
  uint64_t v55 = (uint64_t)v69;
  View.accessibilityIdentifier(_:)();
  v49(v48, v46);
  sub_10000FC34(v55, v47, &qword_10051C178);
  uint64_t v56 = v64;
  uint64_t v57 = (uint64_t)v65;
  sub_10000FB74(v64, (uint64_t)v65, &qword_10051C188);
  uint64_t v58 = v74;
  sub_10000FB74(v74, v55, &qword_10051C178);
  uint64_t v59 = v70;
  sub_10000FB74(v47, v70, &qword_10051C178);
  uint64_t v60 = v71;
  sub_10000FB74(v57, v71, &qword_10051C188);
  uint64_t v61 = sub_10000F214(&qword_10051C1C0);
  sub_10000FB74(v55, v60 + *(int *)(v61 + 48), &qword_10051C178);
  sub_10000FB74(v59, v60 + *(int *)(v61 + 64), &qword_10051C178);
  sub_10000FBD8(v47, &qword_10051C178);
  sub_10000FBD8(v58, &qword_10051C178);
  sub_10000FBD8(v56, &qword_10051C188);
  sub_10000FBD8(v59, &qword_10051C178);
  sub_10000FBD8(v55, &qword_10051C178);
  return sub_10000FBD8(v57, &qword_10051C188);
}

uint64_t sub_10008D2FC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008D334(a1);
}

uint64_t sub_10008D318@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008D334(a1);
}

uint64_t sub_10008D334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Image.init(_internalSystemName:)();
  uint64_t v3 = static Font.headline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = static Color.secondary.getter();
  uint64_t result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = KeyPath;
  a1[2] = v3;
  a1[3] = result;
  a1[4] = v5;
  return result;
}

uint64_t sub_10008D3A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10008C77C(a1);
}

uint64_t sub_10008D3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008D454(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10008D4B0()
{
  unint64_t result = qword_10051C190;
  if (!qword_10051C190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C190);
  }
  return result;
}

uint64_t sub_10008D508()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t sub_10008D530(uint64_t a1)
{
  return a1;
}

unint64_t sub_10008D59C()
{
  unint64_t result = qword_10051C1A0;
  if (!qword_10051C1A0)
  {
    sub_10000F69C(&qword_10051C198);
    sub_10008D63C();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C1A0);
  }
  return result;
}

unint64_t sub_10008D63C()
{
  unint64_t result = qword_100523140;
  if (!qword_100523140)
  {
    sub_10000F69C(&qword_10051C1A8);
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100523140);
  }
  return result;
}

unint64_t sub_10008D6DC()
{
  unint64_t result = qword_10051C1B8;
  if (!qword_10051C1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C1B8);
  }
  return result;
}

uint64_t sub_10008D734()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10008D78C()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_10008D7B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v1 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051C1F0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051C1F8);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_10051C200) - 8;
  __chkstk_darwin(v47);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000F214(&qword_10051C208) - 8;
  __chkstk_darwin(v49);
  uint64_t v48 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  char v16 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v8, v4, v1);
  uint64_t v25 = &v8[*(int *)(v6 + 44)];
  *uint64_t v25 = v16;
  *((void *)v25 + 1) = v18;
  *((void *)v25 + 2) = v20;
  *((void *)v25 + 3) = v22;
  *((void *)v25 + 4) = v24;
  v25[40] = 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  static Color.black.getter();
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v26 = Color.opacity(_:)();
  swift_release();
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v27 = 1.3;
  }
  else {
    double v27 = 0.6;
  }
  static UnitPoint.center.getter();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = static Alignment.center.getter();
  uint64_t v34 = v33;
  sub_10000FB74((uint64_t)v8, (uint64_t)v12, &qword_10051C1F0);
  uint64_t v35 = &v12[*(int *)(v10 + 44)];
  *(void *)uint64_t v35 = v26;
  *((_WORD *)v35 + 4) = 256;
  *((double *)v35 + 2) = v27;
  *((double *)v35 + 3) = v27;
  *((void *)v35 + 4) = v29;
  *((void *)v35 + 5) = v31;
  *((void *)v35 + 6) = v32;
  *((void *)v35 + 7) = v34;
  sub_10000FBD8((uint64_t)v8, &qword_10051C1F0);
  if (ButtonStyleConfiguration.isPressed.getter()) {
    double v36 = 0.8;
  }
  else {
    double v36 = 1.0;
  }
  static UnitPoint.center.getter();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10000FB74((uint64_t)v12, (uint64_t)v14, &qword_10051C1F8);
  uint64_t v41 = &v14[*(int *)(v47 + 44)];
  *(double *)uint64_t v41 = v36;
  *((double *)v41 + 1) = v36;
  *((void *)v41 + 2) = v38;
  *((void *)v41 + 3) = v40;
  sub_10000FBD8((uint64_t)v12, &qword_10051C1F8);
  uint64_t v42 = static Animation.spring(response:dampingFraction:blendDuration:)();
  char v43 = ButtonStyleConfiguration.isPressed.getter();
  uint64_t v44 = v48;
  sub_10000FB74((uint64_t)v14, v48, &qword_10051C200);
  uint64_t v45 = v44 + *(int *)(v49 + 44);
  *(void *)uint64_t v45 = v42;
  *(unsigned char *)(v45 + 8) = v43 & 1;
  sub_10000FBD8((uint64_t)v14, &qword_10051C200);
  return sub_10000FC34(v44, v50, &qword_10051C208);
}

ValueMetadata *type metadata accessor for ReplayControlButtonStyle()
{
  return &type metadata for ReplayControlButtonStyle;
}

uint64_t sub_10008DBE4()
{
  return sub_10008DE54(&qword_10051C1C8, &qword_10051C160, (void (*)(void))sub_10008DC28);
}

unint64_t sub_10008DC28()
{
  unint64_t result = qword_10051C1D0;
  if (!qword_10051C1D0)
  {
    sub_10000F69C(&qword_10051C148);
    sub_10008DCC8();
    sub_100013AA8(&qword_10051C1E8, &qword_10051C158);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C1D0);
  }
  return result;
}

unint64_t sub_10008DCC8()
{
  unint64_t result = qword_10051C1D8;
  if (!qword_10051C1D8)
  {
    sub_10000F69C(&qword_10051C140);
    sub_100013AA8(&qword_10051C1E0, &qword_10051C138);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C1D8);
  }
  return result;
}

uint64_t sub_10008DD68()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10008DD88()
{
  unint64_t result = qword_10051C210;
  if (!qword_10051C210)
  {
    sub_10000F69C(&qword_10051C208);
    sub_10008DE54(&qword_10051C218, &qword_10051C200, (void (*)(void))sub_10008DED0);
    sub_100013AA8(&qword_10051BE40, &qword_10051BE48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C210);
  }
  return result;
}

uint64_t sub_10008DE54(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008DED0()
{
  unint64_t result = qword_10051C220;
  if (!qword_10051C220)
  {
    sub_10000F69C(&qword_10051C1F8);
    sub_10008DE54((unint64_t *)&qword_10051C228, &qword_10051C1F0, (void (*)(void))sub_10008DF9C);
    sub_100013AA8(&qword_10051C230, &qword_10051C238);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C220);
  }
  return result;
}

unint64_t sub_10008DF9C()
{
  unint64_t result = qword_10051BE38;
  if (!qword_10051BE38)
  {
    type metadata accessor for ButtonStyleConfiguration.Label();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051BE38);
  }
  return result;
}

void sub_10008DFF4()
{
  qword_10051C240 = 0x404E000000000000;
}

void sub_10008E004()
{
  qword_10051C248 = 0x4055400000000000;
}

uint64_t sub_10008E018()
{
  if (*v0) {
    return 1853321060;
  }
  else {
    return 28789;
  }
}

uint64_t sub_10008E040@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v16 = (char *)&v23 - v15;
  *(unsigned char *)a5 = a1;
  *(unsigned char *)(a5 + 1) = a2;
  *(void *)(a5 + 8) = a3;
  *(void *)(a5 + 16) = a4;
  uint64_t v24 = 0;
  State.init(wrappedValue:)();
  uint64_t v17 = v26;
  *(void *)(a5 + 24) = v25;
  *(void *)(a5 + 32) = v17;
  LOBYTE(v24) = 0;
  State.init(wrappedValue:)();
  uint64_t v18 = v26;
  *(unsigned char *)(a5 + 40) = v25;
  *(void *)(a5 + 48) = v18;
  uint64_t v24 = 0x3FF0000000000000;
  State.init(wrappedValue:)();
  uint64_t v19 = v26;
  *(void *)(a5 + 56) = v25;
  *(void *)(a5 + 64) = v19;
  uint64_t v24 = 0x3FF0000000000000;
  State.init(wrappedValue:)();
  uint64_t v20 = v26;
  *(void *)(a5 + 72) = v25;
  *(void *)(a5 + 80) = v20;
  uint64_t v24 = 0;
  State.init(wrappedValue:)();
  uint64_t v21 = v26;
  *(void *)(a5 + 88) = v25;
  *(void *)(a5 + 96) = v21;
  type metadata accessor for SwipeToDismissModifier();
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
}

uint64_t type metadata accessor for SwipeToDismissModifier()
{
  uint64_t result = qword_10051C2B0;
  if (!qword_10051C2B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_10008E2B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v5;
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v7;
    uint64_t v8 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v9;
    uint64_t v10 = *(int *)(a3 + 48);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(void *)(a1 + 96) = a2[12];
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v17(v11, v12, v13);
    uint64_t v14 = sub_10000F214(&qword_10051C250);
    *(void *)(v11 + *(int *)(v14 + 28)) = *(void *)(v12 + *(int *)(v14 + 28));
  }
  swift_retain();
  return v3;
}

uint64_t sub_10008E428(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_10000F214(&qword_10051C250);

  return swift_release();
}

uint64_t sub_10008E4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(int *)(a3 + 48);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v10, v11, v12);
  uint64_t v13 = sub_10000F214(&qword_10051C250);
  *(void *)(v10 + *(int *)(v13 + 28)) = *(void *)(v11 + *(int *)(v13 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_10008E608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 48);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = sub_10000F214(&qword_10051C250);
  *(void *)(v8 + *(int *)(v11 + 28)) = *(void *)(v9 + *(int *)(v11 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10008E774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  uint64_t v8 = sub_10000F214(&qword_10051C250);
  *(void *)(v5 + *(int *)(v8 + 28)) = *(void *)(v6 + *(int *)(v8 + 28));
  return a1;
}

uint64_t sub_10008E838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = sub_10000F214(&qword_10051C250);
  *(void *)(v7 + *(int *)(v10 + 28)) = *(void *)(v8 + *(int *)(v10 + 28));
  swift_release();
  return a1;
}

uint64_t sub_10008E96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008E980);
}

uint64_t sub_10008E980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_10051C250);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10008EA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008EA48);
}

uint64_t sub_10008EA48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_10051C250);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10008EAF4()
{
  sub_10008EBAC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10008EBAC()
{
  if (!qword_10051C2C0)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051C2C0);
    }
  }
}

uint64_t sub_10008EC04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008EC20@<X0>(char a1@<W0>, void (*a2)(uint64_t, double)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  v20[1] = a3;
  uint64_t v7 = sub_10000F214(&qword_10051C320);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051C3C8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051C388);
  double v14 = __chkstk_darwin(v13);
  char v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    a2(v4, v14);
    sub_10000FB74((uint64_t)v16, (uint64_t)v12, &qword_10051C388);
    swift_storeEnumTagMultiPayload();
    sub_100090D20(&qword_10051C380, &qword_10051C388, (void (*)(void))sub_100090E44);
    sub_100090E44();
    _ConditionalContent<>.init(storage:)();
    uint64_t v17 = (uint64_t)v16;
    uint64_t v18 = &qword_10051C388;
  }
  else
  {
    sub_10000FB74(v4, (uint64_t)v9, &qword_10051C320);
    sub_10000FB74((uint64_t)v9, (uint64_t)v12, &qword_10051C320);
    swift_storeEnumTagMultiPayload();
    sub_100090D20(&qword_10051C380, &qword_10051C388, (void (*)(void))sub_100090E44);
    sub_100090E44();
    _ConditionalContent<>.init(storage:)();
    uint64_t v17 = (uint64_t)v9;
    uint64_t v18 = &qword_10051C320;
  }
  return sub_10000FBD8(v17, v18);
}

uint64_t sub_10008EE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v79 = a1;
  uint64_t v87 = a2;
  uint64_t v65 = type metadata accessor for LocalCoordinateSpace();
  __chkstk_darwin(v65);
  uint64_t v64 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for DragGesture();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000F214((uint64_t *)&unk_10051D330);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v69 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10051C310);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SwipeToDismissModifier();
  uint64_t v78 = *(void *)(v8 - 8);
  uint64_t v77 = *(void *)(v78 + 64);
  __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051C318);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051C320);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  char v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051C328);
  __chkstk_darwin(v17 - 8);
  uint64_t v72 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_10051C330);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000F214(&qword_10051C338);
  __chkstk_darwin(v75);
  uint64_t v74 = (uint64_t)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_10051C340);
  uint64_t v80 = *(void *)(v24 - 8);
  uint64_t v81 = v24;
  __chkstk_darwin(v24);
  uint64_t v76 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000F214(&qword_10051C348);
  __chkstk_darwin(v88);
  long long v89 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051C350);
  uint64_t v83 = *(void *)(v27 - 8);
  uint64_t v84 = v27;
  __chkstk_darwin(v27);
  char v82 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v2 + 32);
  uint64_t v91 = *(void *)(v2 + 24);
  uint64_t v92 = v29;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.getter();
  uint64_t v30 = v93;
  uint64_t v31 = sub_10000F214(&qword_10051C358);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v12, v79, v31);
  uint64_t v32 = &v12[*(int *)(sub_10000F214(&qword_10051C360) + 36)];
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = v30;
  uint64_t v33 = (uint64_t)v73;
  sub_10000F214(&qword_10051C250);
  State.wrappedValue.getter();
  uint64_t v34 = *(void *)(v2 + 96);
  uint64_t v91 = *(void *)(v2 + 88);
  uint64_t v92 = v34;
  State.wrappedValue.getter();
  uint64_t v35 = v93;
  sub_10000FB74((uint64_t)v12, (uint64_t)v16, &qword_10051C318);
  double v36 = &v16[*(int *)(v14 + 44)];
  *(void *)double v36 = v35;
  v36[8] = 0;
  sub_10000FBD8((uint64_t)v12, &qword_10051C318);
  char v37 = *(unsigned char *)(v2 + 1);
  uint64_t v90 = v2;
  uint64_t v38 = v72;
  sub_10008EC20(v37, (void (*)(uint64_t, double))sub_100090B9C, v72);
  sub_10000FBD8((uint64_t)v16, &qword_10051C320);
  sub_100090BA4(v2, v33);
  unint64_t v39 = (*(unsigned __int8 *)(v78 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  uint64_t v40 = swift_allocObject();
  sub_100090C0C(v33, v40 + v39);
  sub_10000FB74(v38, (uint64_t)v22, &qword_10051C328);
  uint64_t v41 = &v22[*(int *)(v20 + 44)];
  *(void *)uint64_t v41 = sub_100090C70;
  *((void *)v41 + 1) = v40;
  *((void *)v41 + 2) = 0;
  *((void *)v41 + 3) = 0;
  sub_10000FBD8(v38, &qword_10051C328);
  sub_100090BA4(v2, v33);
  uint64_t v42 = swift_allocObject();
  sub_100090C0C(v33, v42 + v39);
  uint64_t v43 = v74;
  sub_10000FB74((uint64_t)v22, v74, &qword_10051C330);
  uint64_t v44 = (void *)(v43 + *(int *)(v75 + 36));
  *uint64_t v44 = 0;
  v44[1] = 0;
  v44[2] = sub_100090C70;
  v44[3] = v42;
  sub_10000FBD8((uint64_t)v22, &qword_10051C330);
  LOBYTE(v91) = *(unsigned char *)v3;
  sub_100090BA4(v3, v33);
  uint64_t v45 = swift_allocObject();
  sub_100090C0C(v33, v45 + v39);
  sub_100090D20(&qword_10051C368, &qword_10051C338, (void (*)(void))sub_100090CF0);
  uint64_t v46 = v76;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10000FBD8(v43, &qword_10051C338);
  uint64_t v47 = *(void *)(v3 + 64);
  uint64_t v91 = *(void *)(v3 + 56);
  uint64_t v92 = v47;
  sub_10000F214(&qword_10051D2F0);
  State.wrappedValue.getter();
  uint64_t v48 = v93;
  uint64_t v50 = v80;
  uint64_t v49 = v81;
  long long v51 = v89;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v89, v46, v81);
  *(void *)&v51[*(int *)(v88 + 36)] = v48;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v49);
  if (*(unsigned char *)v3)
  {
    static CoordinateSpaceProtocol<>.local.getter();
    long long v52 = v66;
    DragGesture.init<A>(minimumDistance:coordinateSpace:)();
    sub_100090BA4(v3, v33);
    uint64_t v53 = swift_allocObject();
    sub_100090C0C(v33, v53 + v39);
    sub_1000913E8(&qword_10051C3B8, (void (*)(uint64_t))&type metadata accessor for DragGesture);
    sub_1000913E8((unint64_t *)&unk_10051D340, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
    uint64_t v54 = v69;
    uint64_t v55 = v68;
    Gesture<>.onChanged(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v55);
    sub_100090BA4(v3, v33);
    uint64_t v56 = swift_allocObject();
    sub_100090C0C(v33, v56 + v39);
    sub_100013AA8(&qword_10051C3C0, (uint64_t *)&unk_10051D330);
    uint64_t v57 = (uint64_t)v85;
    uint64_t v58 = v71;
    Gesture.onEnded(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v54, v58);
    uint64_t v59 = sub_10000F214(&qword_10051D2E0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v57, 0, 1, v59);
  }
  else
  {
    uint64_t v60 = sub_10000F214(&qword_10051D2E0);
    uint64_t v57 = (uint64_t)v85;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v85, 1, 1, v60);
  }
  static GestureMask.all.getter();
  sub_100090EE4();
  sub_100090FDC();
  uint64_t v61 = v82;
  uint64_t v62 = (uint64_t)v89;
  View.gesture<A>(_:including:)();
  sub_10000FBD8(v57, &qword_10051C310);
  sub_10000FBD8(v62, &qword_10051C348);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 32))(v87, v61, v84);
}

uint64_t sub_10008FAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10000F214(&qword_10051D2F0);
  State.wrappedValue.getter();
  static UnitPoint.center.getter();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_10000FB74(a1, a2, &qword_10051C320);
  uint64_t result = sub_10000F214(&qword_10051C388);
  uint64_t v9 = (void *)(a2 + *(int *)(result + 36));
  *uint64_t v9 = v10;
  v9[1] = v10;
  uint64_t v9[2] = v5;
  v9[3] = v7;
  return result;
}

uint64_t sub_10008FB60()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v16 = *(void *)(v0 + 24);
  uint64_t v17 = v8;
  uint64_t v15 = 0;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.setter();
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v17 = v9;
  uint64_t v15 = 0x3FF0000000000000;
  sub_10000F214(&qword_10051D2F0);
  State.wrappedValue.setter();
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v17 = v10;
  uint64_t v15 = 0x3FF0000000000000;
  State.wrappedValue.setter();
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = v11;
  uint64_t v15 = 0;
  State.wrappedValue.setter();
  uint64_t v12 = *(void *)(v0 + 48);
  LOBYTE(v16) = *(unsigned char *)(v0 + 40);
  uint64_t v17 = v12;
  LOBYTE(v15) = 0;
  sub_10000F214(&qword_100522EA0);
  uint64_t result = State.wrappedValue.setter();
  if (*(unsigned char *)(v0 + 1) == 1)
  {
    UUID.init()();
    type metadata accessor for SwipeToDismissModifier();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    sub_10000F214(&qword_10051C250);
    State.wrappedValue.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  return result;
}

unsigned char *sub_10008FD88(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    __chkstk_darwin(result);
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    return (unsigned char *)swift_release();
  }
  return result;
}

void sub_10008FE24()
{
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v9)
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_10000F378(v0, (uint64_t)qword_10055E2E0);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ignoring card swipe change because the card is animating away", v3, 2u);
      swift_slowDealloc();
    }

    return;
  }
  DragGesture.Value.translation.getter();
  double v5 = v4 * 0.9;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.setter();
  DragGesture.Value.translation.getter();
  double v6 = fabs(v5);
  if (v7 <= 0.0)
  {
    if (qword_100517D68 != -1) {
      swift_once();
    }
    if (*(double *)&qword_10051C240 < v6) {
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_100517D70 != -1) {
      swift_once();
    }
    if (*(double *)&qword_10051C248 < v6)
    {
LABEL_15:
      State.wrappedValue.setter();
      uint64_t v8 = static Animation.spring(response:dampingFraction:blendDuration:)();
      __chkstk_darwin(v8);
      withAnimation<A>(_:_:)();
      swift_release();
    }
  }
}

uint64_t sub_1000901C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SwipeToDismissModifier();
  __chkstk_darwin(v3 - 8);
  double v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v6 = *(unsigned char *)(a2 + 1);
  sub_100090BA4(a2, (uint64_t)v5);
  if (v6)
  {
    uint64_t v7 = *((void *)v5 + 6);
    v14[0] = v5[40];
    uint64_t v15 = v7;
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.getter();
    uint64_t result = sub_100091130((uint64_t)v5);
    if (v16) {
      return result;
    }
  }
  else
  {
    sub_100091130((uint64_t)v5);
  }
  if (qword_100517E98 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000F378(v9, (uint64_t)qword_10055E2E0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not restoring card position after swipe because card is animating away", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = static Animation.spring(response:dampingFraction:blendDuration:)();
  __chkstk_darwin(v13);
  *(void *)&v14[-16] = a2;
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_1000903C4(char a1, uint64_t a2)
{
  uint64_t v3 = a1 & 1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  char v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SwipeToDismissModifier();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v34 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v11 - 8);
  uint64_t v36 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v16 = (char *)&v33 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = *(void *)(a2 + 32);
  long long aBlock = *(void ***)(a2 + 24);
  uint64_t v45 = v20;
  uint64_t v50 = 0;
  sub_10000F214(&qword_1005197A8);
  State.wrappedValue.setter();
  if (*(unsigned char *)(a2 + 1) == 1)
  {
    uint64_t v21 = static Animation.spring(response:dampingFraction:blendDuration:)();
    __chkstk_darwin(v21);
    *(&v33 - 2) = a2;
    uint64_t v22 = v43;
    withAnimation<A>(_:_:)();
    uint64_t v43 = v22;
    swift_release();
  }
  (*(void (**)(uint64_t))(a2 + 8))(v3);
  sub_10002E8B0();
  uint64_t v33 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v23 = v36;
  uint64_t v24 = (void (*)(char *, uint64_t))*((void *)v35 + 1);
  v24(v13, v36);
  uint64_t v35 = v24;
  + infix(_:_:)();
  v24(v16, v23);
  sub_100090BA4(a2, (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v25 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v26 = swift_allocObject();
  sub_100090C0C((uint64_t)v10, v26 + v25);
  uint64_t v48 = sub_100091344;
  uint64_t v49 = v26;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256;
  uint64_t v46 = sub_1002EDB98;
  uint64_t v47 = &unk_1004E8968;
  uint64_t v27 = _Block_copy(&aBlock);
  uint64_t v28 = v37;
  static DispatchQoS.unspecified.getter();
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_1000913E8((unint64_t *)&qword_10051FB30, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000F214(&qword_10051A960);
  sub_100013AA8((unint64_t *)&qword_10051FB40, &qword_10051A960);
  uint64_t v29 = v40;
  uint64_t v30 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = (void *)v33;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
  v35(v19, v23);
  return swift_release();
}

uint64_t sub_100090954()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100090A24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v11[-v7];
  uint64_t v9 = *(void *)(a1 + 48);
  unsigned char v11[16] = *(unsigned char *)(a1 + 40);
  uint64_t v12 = v9;
  v11[15] = 0;
  sub_10000F214(&qword_100522EA0);
  uint64_t result = State.wrappedValue.setter();
  if (*(unsigned char *)(a1 + 1) == 1)
  {
    UUID.init()();
    type metadata accessor for SwipeToDismissModifier();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_10000F214(&qword_10051C250);
    State.wrappedValue.setter();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return result;
}

uint64_t sub_100090B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10008FAB4(a1, a2);
}

uint64_t sub_100090BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SwipeToDismissModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100090C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SwipeToDismissModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100090C78()
{
  return sub_10008FB60();
}

uint64_t sub_100090CD8()
{
  return sub_10009135C((uint64_t (*)(uint64_t))sub_10008FD88);
}

uint64_t sub_100090CF0()
{
  return sub_100090D20(&qword_10051C370, &qword_10051C330, (void (*)(void))sub_100090D9C);
}

uint64_t sub_100090D20(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100090D9C()
{
  unint64_t result = qword_10051C378;
  if (!qword_10051C378)
  {
    sub_10000F69C(&qword_10051C328);
    sub_100090D20(&qword_10051C380, &qword_10051C388, (void (*)(void))sub_100090E44);
    sub_100090E44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C378);
  }
  return result;
}

unint64_t sub_100090E44()
{
  unint64_t result = qword_10051C390;
  if (!qword_10051C390)
  {
    sub_10000F69C(&qword_10051C320);
    sub_100013AA8(&qword_10051C398, &qword_10051C318);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C390);
  }
  return result;
}

unint64_t sub_100090EE4()
{
  unint64_t result = qword_10051C3A0;
  if (!qword_10051C3A0)
  {
    sub_10000F69C(&qword_10051C348);
    sub_10000F69C(&qword_10051C338);
    sub_100090D20(&qword_10051C368, &qword_10051C338, (void (*)(void))sub_100090CF0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C3A0);
  }
  return result;
}

unint64_t sub_100090FDC()
{
  unint64_t result = qword_10051C3A8;
  if (!qword_10051C3A8)
  {
    sub_10000F69C(&qword_10051C310);
    sub_100013AA8(&qword_10051C3B0, &qword_10051D2E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C3A8);
  }
  return result;
}

uint64_t sub_100091078(uint64_t a1)
{
  return sub_1000910AC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10008FE24);
}

uint64_t sub_100091094(uint64_t a1)
{
  return sub_1000910AC(a1, sub_1000901C4);
}

uint64_t sub_1000910AC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for SwipeToDismissModifier() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_100091130(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SwipeToDismissModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009118C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000911EC()
{
  return sub_1000903C4(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100091210()
{
  uint64_t v1 = (int *)(type metadata accessor for SwipeToDismissModifier() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[14];
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_10000F214(&qword_10051C250);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100091344()
{
  return sub_10009135C(sub_100090A24);
}

uint64_t sub_10009135C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for SwipeToDismissModifier() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1000913D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000913E0()
{
  return swift_release();
}

uint64_t sub_1000913E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100091430()
{
  return sub_100090954();
}

uint64_t sub_10009144C()
{
  return sub_10008FB60();
}

unsigned char *storeEnumTagSinglePayload for SwipeToDismissDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100091544);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SwipeToDismissDirection()
{
  return &type metadata for SwipeToDismissDirection;
}

uint64_t sub_10009157C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100091600()
{
  unint64_t result = qword_10051C3D0;
  if (!qword_10051C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C3D0);
  }
  return result;
}

uint64_t sub_100091654()
{
  return sub_1000911EC();
}

id sub_10009166C()
{
  id result = sub_100091690();
  qword_10051C3D8 = (uint64_t)result;
  unk_10051C3E0 = v1;
  return result;
}

id sub_100091690()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    id v6 = (id)MobileGestalt_copy_hwModelStr_obj();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = (void *)0xE200000000000000;
      uint64_t v8 = 16718;
    }
    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = v28;
    unint64_t v12 = v29;
    uint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    uint64_t v24 = v13 & 0xFFFFFFFFFFFFLL;
    uint64_t v25 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) != 0) {
      uint64_t v14 = HIBYTE(v12) & 0xF;
    }
    else {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      id v21 = v5;
      uint64_t v15 = 0;
      uint64_t v22 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v23 = v12 & 0xFFFFFFFFFFFFFFLL;
      char v16 = (void (**)(char *, uint64_t))(v1 + 8);
      do
      {
        if ((v12 & 0x1000000000000000) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v12 & 0x2000000000000000) != 0)
          {
            uint64_t v26 = v13;
            uint64_t v27 = v23;
          }
          else if ((v13 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          _decodeScalar(_:startingAt:)();
        }
        uint64_t v18 = v17;
        static CharacterSet.alphanumerics.getter();
        char v19 = CharacterSet.contains(_:)();
        (*v16)(v3, v0);
        if (v19) {
          String.UnicodeScalarView.append(_:)();
        }
        v15 += v18;
      }
      while (v15 < v14);

      swift_bridgeObjectRelease();
      return (id)v28;
    }
    else
    {

      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000918C8()
{
  uint64_t result = sub_1000918EC();
  qword_10051C3E8 = result;
  unk_10051C3F0 = v1;
  return result;
}

uint64_t sub_1000918EC()
{
  uint64_t v0 = sub_10000F214(&qword_10051C530);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_10051C538);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v17 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051C540);
  uint64_t v18 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_10051C548);
  sub_100013AA8(&qword_10051C550, &qword_10051C540);
  Regex.init<A>(_:)();
  id v9 = [self processInfo];
  id v10 = [v9 operatingSystemVersionString];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  uint64_t v19 = v11;
  uint64_t v20 = v13;
  sub_100094A28();
  BidirectionalCollection<>.firstMatch<A, B>(of:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000FBD8((uint64_t)v2, &qword_10051C530);
    uint64_t v14 = 16718;
  }
  else
  {
    uint64_t v15 = v17;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v17, v2, v3);
    Regex.Match.output.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v6);
  return v14;
}

uint64_t sub_100091C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v92 = a1;
  uint64_t v91 = sub_10000F214(&qword_10051C540);
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  char v96 = (char *)v76 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000F214(&qword_10051C560);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v100 = v2;
  uint64_t v101 = v3;
  __chkstk_darwin(v2);
  uint64_t v88 = (char *)v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v103 = (char *)v76 - v6;
  uint64_t v85 = sub_10000F214(&qword_10051C568);
  uint64_t v87 = *(void (***)(char *, char *, uint64_t))(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v90 = (char *)v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  long long v89 = (char *)v76 - v9;
  __chkstk_darwin(v10);
  uint64_t v99 = (char *)v76 - v11;
  __chkstk_darwin(v12);
  uint64_t v98 = (char *)v76 - v13;
  __chkstk_darwin(v14);
  char v16 = (char *)v76 - v15;
  uint64_t v17 = type metadata accessor for _RegexFactory();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v108 = v17;
  uint64_t v109 = v18;
  __chkstk_darwin(v17);
  char v95 = (char *)v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v76 - v21;
  uint64_t v23 = sub_10000F214(&qword_10051C570);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CharacterClass();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v29 = (char *)v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)v76 - v31;
  uint64_t v33 = sub_10000F214(&qword_10051C578);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v106 = v33;
  uint64_t v107 = v34;
  __chkstk_darwin(v33);
  uint64_t v84 = (char *)v76 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  char v82 = (char *)v76 - v37;
  __chkstk_darwin(v38);
  uint64_t v102 = (char *)v76 - v39;
  uint64_t v114 = 0x206E6F6973726556;
  unint64_t v115 = 0xE800000000000000;
  unint64_t v105 = sub_100094A7C();
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v83 = (uint64_t)v32;
  static RegexComponent<>.whitespace.getter();
  CharacterClass.inverted.getter();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v32, v26);
  uint64_t v77 = (void (*)(uint64_t, uint64_t))v40;
  uint64_t v78 = v27 + 8;
  uint64_t v80 = type metadata accessor for RegexRepetitionBehavior();
  uint64_t v41 = *(void *)(v80 - 8);
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v81 = v41 + 56;
  v79(v25, 1, 1, v80);
  makeFactory()();
  v76[1] = sub_100094AD0();
  char v97 = v16;
  _RegexFactory.oneOrMore<A, B>(_:_:)();
  sub_10000FBD8((uint64_t)v25, &qword_10051C570);
  v40(v29, v26);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v109 + 8);
  v109 += 8;
  uint64_t v104 = v42;
  v42(v22, v108);
  uint64_t v43 = v82;
  OneOrMore.init(_:)();
  uint64_t v94 = sub_100013AA8(&qword_10051C590, &qword_10051C578);
  uint64_t v44 = v106;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v107 + 8);
  v107 += 8;
  v45(v43, v44);
  uint64_t v112 = 0x20646C6975422820;
  unint64_t v113 = 0xE800000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  makeFactory()();
  uint64_t v46 = v83;
  static RegexComponent<>.word.getter();
  v79(v25, 1, 1, v80);
  uint64_t v47 = v95;
  makeFactory()();
  uint64_t v48 = v98;
  _RegexFactory.oneOrMore<A, B>(_:_:)();
  sub_10000FBD8((uint64_t)v25, &qword_10051C570);
  v77(v46, v26);
  uint64_t v49 = v104;
  v104(v47, v108);
  uint64_t v50 = v84;
  OneOrMore.init(_:)();
  uint64_t v51 = v106;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v86 = (uint64_t (*)(char *, uint64_t))v45;
  v45(v50, v51);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  v45(v43, v51);
  long long v52 = v87;
  uint64_t v53 = v97;
  uint64_t v54 = v85;
  v87[4](v97, v48, v85);
  uint64_t v55 = sub_10000F214(&qword_10051C548);
  uint64_t v84 = (char *)&protocol conformance descriptor for Regex<A>;
  uint64_t v56 = sub_100013AA8(&qword_10051C598, &qword_10051C568);
  char v95 = (char *)v55;
  _RegexFactory.capture<A, B>(_:)();
  char v82 = (char *)v52[1];
  ((void (*)(char *, uint64_t))v82)(v53, v54);
  v49(v22, v108);
  uint64_t v57 = v88;
  Capture.init(_:)();
  uint64_t v83 = sub_100013AA8(&qword_10051C5A0, &qword_10051C560);
  uint64_t v58 = v100;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v59 = *(void (***)(char *, char *, uint64_t))(v101 + 8);
  v101 += 8;
  uint64_t v87 = v59;
  ((void (*)(char *, uint64_t))v59)(v57, v58);
  uint64_t v110 = 41;
  unint64_t v111 = 0xE100000000000000;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v110 = v116;
  unint64_t v111 = v117;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  swift_bridgeObjectRelease();
  makeFactory()();
  uint64_t v60 = v99;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  uint64_t v61 = v89;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  uint64_t v62 = v54;
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  uint64_t v63 = (void (*)(char *, uint64_t))v82;
  ((void (*)(char *, uint64_t))v82)(v61, v54);
  v63(v60, v54);
  uint64_t v64 = v108;
  v104(v22, v108);
  uint64_t v65 = v114;
  unint64_t v66 = v115;
  uint64_t v94 = v115;
  makeFactory()();
  uint64_t v110 = v65;
  unint64_t v111 = v66;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  uint64_t v67 = v90;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  v63(v67, v62);
  v63(v61, v62);
  uint64_t v68 = v104;
  v104(v22, v64);
  swift_bridgeObjectRelease();
  makeFactory()();
  uint64_t v81 = v56;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  uint64_t v69 = v96;
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  v63(v61, v62);
  uint64_t v70 = v108;
  v68(v22, v108);
  uint64_t v72 = v112;
  unint64_t v71 = v113;
  makeFactory()();
  uint64_t v110 = v72;
  unint64_t v111 = v71;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  sub_100013AA8(&qword_10051C550, &qword_10051C540);
  uint64_t v73 = v69;
  uint64_t v74 = v91;
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  v63(v61, v62);
  v104(v22, v70);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v73, v74);
  v63(v99, v62);
  v63(v98, v62);
  v63(v97, v62);
  ((void (*)(char *, uint64_t))v87)(v103, v100);
  return v86(v102, v106);
}

uint64_t sub_1000929A0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v42._countAndFlagsBits = a1;
  v42._object = a2;
  uint64_t v45 = a5;
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 setDateFormat:v18];

  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  id v20 = [v17 stringFromDate:isa];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t v24 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v24 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    uint64_t v48 = 95;
    unint64_t v49 = 0xE100000000000000;
    v25._countAndFlagsBits = a3;
    v25._object = (void *)a4;
    String.append(_:)(v25);
    uint64_t v27 = v48;
    uint64_t v26 = (void *)v49;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v26 = (void *)0xE000000000000000;
  }
  static URL.temporaryDirectory.getter();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  if (qword_100517D80 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_10051C3E8;
  unint64_t v29 = unk_10051C3F0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v28;
  unint64_t v49 = v29;
  v30._countAndFlagsBits = 95;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  if (qword_100517D78 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_10051C3D8;
  uint64_t v31 = (void *)unk_10051C3E0;
  swift_bridgeObjectRetain();
  v33._countAndFlagsBits = v32;
  v33._object = v31;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._object = (void *)0x8000000100425F30;
  v34._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v21;
  v35._object = v23;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = v27;
  v36._object = v26;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 46;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  String.append(_:)(v42);
  uint64_t v39 = v46;
  uint64_t v38 = v47;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v9, enum case for URL.DirectoryHint.inferFromPath(_:), v47);
  sub_1000317A0();
  URL.appending<A>(path:directoryHint:)();

  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v38);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v12, v44);
}

uint64_t sub_100092E14()
{
  [*(id *)(v0 + 112) closeFile];

  sub_10000FBD8(v0 + OBJC_IVAR____TtC6Tamale12DetectionLog_logURL, &qword_10051E070);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100092E74()
{
  return type metadata accessor for DetectionLog();
}

uint64_t type metadata accessor for DetectionLog()
{
  uint64_t result = qword_10051C428;
  if (!qword_10051C428) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100092EC8()
{
  sub_1000943AC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100092F6C()
{
  type metadata accessor for DetectionLog();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale12DetectionLog_logURL;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_10055E098 = v0;
  return result;
}

uint64_t sub_100092FFC(void (*a1)(char *, char *, uint64_t))
{
  unint64_t v49 = a1;
  uint64_t v2 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v47 = (char *)&v44 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = type metadata accessor for String.Encoding();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = *(void **)(v1 + 112);
  if (v20)
  {
    uint64_t v45 = v4;
    uint64_t v46 = v15;
    id v21 = v20;
    static String.Encoding.utf8.getter();
    uint64_t v22 = String.data(using:allowLossyConversion:)();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    uint64_t v27 = v1;
    if (v24 >> 60 != 15)
    {
      uint64_t v28 = *(void **)(v1 + 112);
      if (v28)
      {
        id v29 = v28;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        [v29 writeData:isa];
        sub_100094760(v22, v24);
      }
      else
      {
        sub_100094760(v22, v24);
      }
    }
    [v21 closeFile];

    id v20 = *(void **)(v27 + 112);
    uint64_t v4 = v45;
    uint64_t v15 = v46;
  }
  else
  {
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    uint64_t v27 = v1;
  }
  uint64_t v31 = (uint64_t)v49;
  *(void *)(v27 + 112) = 0;

  sub_1000948B0(v31, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v26) == 1) {
    return sub_10000FBD8((uint64_t)v9, &qword_10051E070);
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v15, v9, v26);
  uint64_t v33 = (uint64_t)v47;
  unint64_t v49 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v49(v47, v15, v26);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v33, 0, 1, v26);
  sub_100094918(v33, (uint64_t)v4);
  uint64_t v34 = v27 + OBJC_IVAR____TtC6Tamale12DetectionLog_logURL;
  swift_beginAccess();
  sub_100094980((uint64_t)v4, v34);
  swift_endAccess();
  Swift::String v35 = self;
  id v36 = [v35 defaultManager];
  URL.path.getter();
  Swift::String v37 = v15;
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v34) = [v36 fileExistsAtPath:v38];

  if ((v34 & 1) == 0)
  {
    id v39 = [v35 defaultManager];
    URL.path.getter();
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v39 createFileAtPath:v40 contents:0 attributes:0];
  }
  sub_1000949E8();
  uint64_t v41 = (uint64_t)v48;
  v49(v48, v37, v26);
  id v42 = sub_100093514(v41);
  uint64_t v43 = *(void **)(v27 + 112);
  *(void *)(v27 + 112) = v42;

  [*(id *)(v27 + 112) seekToEndOfFile];
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v37, v26);
}

id sub_100093514(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() fileHandleForWritingToURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_10009366C()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = *(void **)(v0 + 112);
  if (v5)
  {
    id v6 = v5;
    static String.Encoding.utf8.getter();
    uint64_t v7 = String.data(using:allowLossyConversion:)();
    unint64_t v9 = v8;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void **)(v0 + 112);
      if (v10)
      {
        id v11 = v10;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        [v11 writeData:isa];
        sub_100094760(v7, v9);
      }
      else
      {
        sub_100094760(v7, v9);
      }
    }
    [v6 closeFile];

    id v5 = *(void **)(v0 + 112);
  }
  *(void *)(v0 + 112) = 0;
}

uint64_t sub_1000937F0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(double *)(v6 + 48) = a1;
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  uint64_t v7 = type metadata accessor for String.Encoding();
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = *(void *)(v7 - 8);
  *(void *)(v6 + 72) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for NormalizedRect();
  *(void *)(v6 + 80) = v8;
  *(void *)(v6 + 88) = *(void *)(v8 - 8);
  *(void *)(v6 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_100093910, 0, 0);
}

uint64_t sub_100093910()
{
  uint64_t v1 = (void *)v0[4];
  if (v1)
  {
    id v2 = (id)v0[4];
  }
  else
  {
    id v2 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:0.0 longitude:0.0];
    uint64_t v1 = 0;
  }
  v0[13] = v2;
  id v3 = v1;
  [v2 coordinate];
  VisualUnderstanding.ImageRegion.boundingBox.getter();
  _StringGuts.grow(_:)(69);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v4._countAndFlagsBits = 0xD000000000000018;
  v4._object = (void *)0x8000000100425ED0;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  Double.write<A>(to:)();
  v6._countAndFlagsBits = 0x203A7463657220;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  NormalizedRect.origin.getter();
  v7._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  NormalizedRect.origin.getter();
  v9._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  NormalizedRect.width.getter();
  v11._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8224;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  NormalizedRect.height.getter();
  v13._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000100425EF0;
  v14._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v14);
  Double.write<A>(to:)();
  v15._countAndFlagsBits = 10;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  uint64_t v16 = v0[3];
  v0[14] = v0[2];
  v0[15] = v16;
  if (qword_100517D88 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_10055E098;
  v0[16] = qword_10055E098;
  return _swift_task_switch(sub_100093BC8, v17, 0);
}

uint64_t sub_100093BC8()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 != 15)
  {
    Swift::String v7 = *(void **)(v0[16] + 112);
    if (v7)
    {
      id v8 = v7;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v8 writeData:isa];
      sub_100094760(v4, v6);
    }
    else
    {
      sub_100094760(v4, v6);
    }
  }
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100093CF8, 0, 0);
}

uint64_t sub_100093CF8()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100093D90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v5 - 8);
  Swift::String v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  Swift::String v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  v10[3] = 0;
  v10[4] = v2;
  v10[5] = a1;
  v10[6] = a2;
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    sub_10000FBD8((uint64_t)v7, &qword_10051A8C0);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v14;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &unk_10051C5B0;
  *(void *)(v15 + 24) = v10;
  if (v13 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    uint64_t v17[3] = v13;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100093FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[2] = a5;
  void v6[3] = a6;
  uint64_t v7 = type metadata accessor for String.Encoding();
  v6[4] = v7;
  v6[5] = *(void *)(v7 - 8);
  v6[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000940A0, 0, 0);
}

uint64_t sub_1000940A0()
{
  if (qword_100517D88 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10055E098;
  *(void *)(v0 + 56) = qword_10055E098;
  return _swift_task_switch(sub_100094138, v1, 0);
}

uint64_t sub_100094138()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = *(void **)(v0[7] + 112);
    if (v7)
    {
      id v8 = v7;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v8 writeData:isa];
      sub_100094760(v4, v6);
    }
    else
    {
      sub_100094760(v4, v6);
    }
  }
  swift_task_dealloc();
  Swift::String v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100094258(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v12 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = sub_10030CA28(a5, a6);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  uint64_t v17 = (double *)swift_allocObject();
  v17[2] = 0.0;
  uint64_t v17[3] = 0.0;
  *((void *)v17 + 4) = v7;
  v17[5] = v15;
  *((void *)v17 + 6) = a2;
  *((void *)v17 + 7) = a3;
  sub_10009489C(a2, a3);
  swift_retain();
  sub_100064D5C((uint64_t)v14, (uint64_t)&unk_10051C520, (uint64_t)v17);
  return swift_release();
}

void sub_1000943AC()
{
  if (!qword_10051E0E0)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051E0E0);
    }
  }
}

uint64_t sub_100094404(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = a7;
  *(double *)(v7 + 56) = a1;
  *(void *)(v7 + 48) = a5;
  uint64_t v8 = type metadata accessor for String.Encoding();
  *(void *)(v7 + 80) = v8;
  *(void *)(v7 + 88) = *(void *)(v8 - 8);
  *(void *)(v7 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_1000944CC, 0, 0);
}

uint64_t sub_1000944CC()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  _StringGuts.grow(_:)(36);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v4._object = (void *)0x8000000100425F10;
  v4._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._countAndFlagsBits = 0x536E6F69746F6D20;
  v5._object = (void *)0xEE00203A65746174;
  String.append(_:)(v5);
  v0[4] = v2;
  v0[5] = v1;
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 10;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  uint64_t v7 = v0[3];
  v0[13] = v0[2];
  v0[14] = v7;
  return _swift_task_switch(sub_10009461C, v3, 0);
}

uint64_t sub_10009461C()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = *(void **)(v0[6] + 112);
    if (v7)
    {
      id v8 = v7;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v8 writeData:isa];
      sub_100094760(v4, v6);
    }
    else
    {
      sub_100094760(v4, v6);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100094750()
{
  return v0;
}

uint64_t sub_100094760(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100038B34(a1, a2);
  }
  return a1;
}

uint64_t sub_100094774()
{
  swift_unknownObjectRelease();
  swift_release();
  if (*(void *)(v0 + 56) >= 5uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_1000947C4(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  uint64_t v9 = *((void *)v1 + 6);
  uint64_t v8 = *((void *)v1 + 7);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000F878;
  return sub_100094404(v7, a1, v4, v5, v6, v9, v8);
}

uint64_t sub_10009489C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000948B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100094918(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100094980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051E070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000949E8()
{
  unint64_t result = qword_10051C528;
  if (!qword_10051C528)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10051C528);
  }
  return result;
}

unint64_t sub_100094A28()
{
  unint64_t result = qword_10051C558;
  if (!qword_10051C558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C558);
  }
  return result;
}

unint64_t sub_100094A7C()
{
  unint64_t result = qword_10051C580;
  if (!qword_10051C580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C580);
  }
  return result;
}

unint64_t sub_100094AD0()
{
  unint64_t result = qword_10051C588;
  if (!qword_10051C588)
  {
    type metadata accessor for CharacterClass();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C588);
  }
  return result;
}

uint64_t sub_100094B28()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100094B68(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000FC9C;
  return sub_100093FE0(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100094C30()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100094C68(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000F878;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10051B1D0 + dword_10051B1D0);
  return v6(a1, v4);
}

uint64_t sub_100094D20()
{
  uint64_t v0 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriVoiceAvailabilityUtility();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = 0xE000000000000000;
  v3[5] = _swiftEmptyArrayStorage;
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v5[2] = 0;
  _OWORD v5[3] = 0;
  v5[4] = v3;
  swift_retain();
  sub_100064D5C((uint64_t)v2, (uint64_t)&unk_10051C6E0, (uint64_t)v5);
  uint64_t result = swift_release();
  qword_10055E0A0 = (uint64_t)v3;
  return result;
}

uint64_t sub_100094E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100094EFC;
  void v6[3] = a4;
  return _swift_task_switch(sub_100095184, 0, 0);
}

uint64_t sub_100094EFC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v3;
  void *v3 = v2;
  v3[1] = sub_100095064;
  v3[3] = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10009545C, 0, 0);
}

uint64_t sub_100095064()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100095164()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100095184, 0, 0);
}

uint64_t sub_100095184()
{
  uint64_t v18 = v0;
  id v1 = [self sharedPreferences];
  id v2 = [v1 outputVoice];

  if (v2 && (id v3 = [v2 languageCode], v2, v3))
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  if (qword_100517E90 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000F378(v7, (uint64_t)qword_10055E2C8);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v11 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0) {
      uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = v4;
      unint64_t v13 = v6;
    }
    else
    {
      unint64_t v13 = 0x8000000100426010;
      uint64_t v12 = 0xD000000000000014;
    }
    v0[2] = sub_1003806B0(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "The preferred Siri language is %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v14 = v0[3];
  *(void *)(v14 + 24) = v4;
  *(void *)(v14 + 32) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v15 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v15(v4, v6);
}

uint64_t sub_10009543C()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_10009545C, 0, 0);
}

uint64_t sub_10009545C()
{
  if (qword_100517E90 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000F378(v1, (uint64_t)qword_10055E2C8);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Checking for available Siri voice languages…", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 24);

  if (!*(void *)(v5 + 16))
  {
    id v6 = [objc_allocWithZone((Class)type metadata accessor for DaemonSession()) init];
    uint64_t v7 = *(void **)(v5 + 16);
    *(void *)(v5 + 16) = v6;
  }
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v8;
  uint64_t v9 = sub_10000F214((uint64_t *)&unk_100522CD0);
  *uint64_t v8 = v0;
  v8[1] = sub_10009562C;
  uint64_t v10 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000016, 0x8000000100425FF0, sub_100095DAC, v10, v9);
}

uint64_t sub_10009562C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100095728, 0, 0);
}

uint64_t sub_100095728()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void sub_100095740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051C6D0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(void **)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    id v11 = v7;
    swift_retain();
    dispatch thunk of DaemonSession.downloadedVoices(matching:reply:)();

    swift_release();
    swift_release();
  }
}

void sub_1000958D0(unint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    id v29 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_10051C6D0);
    CheckedContinuation.resume(returning:)();
    return;
  }
  uint64_t v3 = Strong;
  if (*(void *)(Strong + 16))
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (!v4)
    {
LABEL_16:
      *(void *)(v3 + 40) = v5;
      swift_bridgeObjectRelease();
      if (qword_100517E90 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10000F378(v15, (uint64_t)qword_10055E2C8);
      swift_retain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        id v29 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v19 = v3;
        uint64_t v20 = Array.description.getter();
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        uint64_t v23 = v20;
        uint64_t v3 = v19;
        sub_1003806B0(v23, v22, (uint64_t *)&v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Siri has voices for the following languages: %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      id v29 = *(void **)(v3 + 40);
      swift_bridgeObjectRetain();
      sub_10000F214(&qword_10051C6D0);
      CheckedContinuation.resume(returning:)();
      uint64_t v28 = *(void **)(v3 + 16);
      *(void *)(v3 + 16) = 0;
      swift_release();

      return;
    }
    id v29 = _swiftEmptyArrayStorage;
    sub_1000407B0(0, v4 & ~(v4 >> 63), 0);
    if ((v4 & 0x8000000000000000) == 0)
    {
      uint64_t v6 = 0;
      uint64_t v5 = v29;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(a1 + 8 * v6 + 32);
        }
        uint64_t v8 = v7;
        uint64_t v9 = dispatch thunk of SynthesisVoice.language.getter();
        uint64_t v11 = v10;

        id v29 = v5;
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        if (v13 >= v12 >> 1)
        {
          sub_1000407B0(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v29;
        }
        ++v6;
        uint64_t v5[2] = v13 + 1;
        uint64_t v14 = &v5[2 * v13];
        v14[4] = v9;
        v14[5] = v11;
      }
      while (v4 != v6);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_28;
  }
  if (qword_100517E90 != -1) {
LABEL_28:
  }
    swift_once();
  uint64_t v24 = type metadata accessor for Logger();
  sub_10000F378(v24, (uint64_t)qword_10055E2C8);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No active Siri TTS session. Returning cached language codes.", v27, 2u);
    swift_slowDealloc();
  }

  id v29 = *(void **)(v3 + 40);
  swift_bridgeObjectRetain();
  sub_10000F214(&qword_10051C6D0);
  CheckedContinuation.resume(returning:)();
  swift_release();
}

uint64_t sub_100095D40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SiriVoiceAvailabilityUtility()
{
  return self;
}

void sub_100095DAC(uint64_t a1)
{
  sub_100095740(a1, v1);
}

uint64_t sub_100095DB4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100095DEC()
{
  uint64_t v1 = sub_10000F214(&qword_10051C6D0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_100095EBC(unint64_t a1)
{
  sub_10000F214(&qword_10051C6D0);

  sub_1000958D0(a1);
}

uint64_t sub_100095F34()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100095F74(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_10000F878;
  return sub_100094E4C(a1, v4, v5, v6);
}

uint64_t sub_100096028()
{
  sub_1000985F0(319, (unint64_t *)&qword_100522D60, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
  uint64_t v1 = v0;
  if (v2 <= 0x3F)
  {
    sub_1000985F0(319, &qword_10051C768, (void (*)(uint64_t))&type metadata accessor for EnvironmentValues);
    uint64_t v1 = v3;
    if (v4 <= 0x3F)
    {
      uint64_t v1 = type metadata accessor for Binding();
      if (v5 <= 0x3F)
      {
        uint64_t v1 = swift_checkMetadataState();
        if (v6 <= 0x3F)
        {
          uint64_t v1 = type metadata accessor for ClosedRange();
          if (v7 <= 0x3F)
          {
            swift_initStructMetadata();
            return 0;
          }
        }
      }
    }
  }
  return v1;
}

void *sub_100096220(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v68 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v68 - 8);
  if (*(void *)(v6 + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v68 - 8) + 64);
  }
  uint64_t v8 = type metadata accessor for EnvironmentValues();
  int v9 = *(_DWORD *)(*(void *)(v8 - 8) + 80);
  uint64_t v10 = v9 & 0xF8 | 7;
  uint64_t v11 = v7 + v10 + 1;
  unint64_t v12 = *(void *)(*(void *)(v8 - 8) + 64);
  if (v12 <= 8) {
    unint64_t v12 = 8;
  }
  unint64_t v69 = v12;
  unint64_t v13 = v12 + 1;
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v15 | 7;
  uint64_t v17 = *(void *)(v14 + 64);
  uint64_t v18 = v17 + v15;
  uint64_t v19 = v17 + v15 + ((v15 + 16) & ~v15);
  uint64_t v20 = v17 + 7;
  uint64_t v21 = v17 + 7 + ((v17 + v15) & ~v15);
  unint64_t v22 = ((v21
        + ((v15
          + 16
          + ((v17 + 7 + ((v19 + (((v15 | 7) + v13 + (v11 & ~v10)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unsigned int v23 = v15 | *(_DWORD *)(v6 + 80) & 0xF8 | *(_DWORD *)(*(void *)(v8 - 8) + 80) & 0xF8;
  int v24 = (*(_DWORD *)(v14 + 80) | v9 | *(_DWORD *)(v6 + 80)) & 0x100000;
  if (v23 > 7 || v24 != 0 || v22 > 0x18)
  {
    uint64_t v27 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v28 = (void *)(v27 + (((v23 | 7) + 16) & ~(unint64_t)(v23 | 7)));
  }
  else
  {
    uint64_t v66 = v18;
    unsigned int v29 = a2[v7];
    unsigned int v30 = v29 - 2;
    uint64_t v63 = v20;
    if (v29 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v31 = v7;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *a2;
          if (v7 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 2:
          int v32 = *(unsigned __int16 *)a2;
          if (v7 >= 4) {
            goto LABEL_27;
          }
          goto LABEL_25;
        case 3:
          int v32 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v7 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 4:
          int v32 = *(_DWORD *)a2;
          if (v7 < 4) {
LABEL_25:
          }
            unsigned int v29 = (v32 | (v30 << (8 * v7))) + 2;
          else {
LABEL_27:
          }
            unsigned int v29 = v32 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v60 = *(void *)(v8 - 8);
    unint64_t v61 = v13;
    uint64_t v33 = v8;
    uint64_t v62 = v19;
    uint64_t v64 = v15 + 16;
    uint64_t v65 = v21;
    uint64_t v67 = *(void *)(a3 + 16);
    uint64_t v34 = ~v10;
    if (v29 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v68);
      char v35 = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      swift_retain();
      char v35 = 0;
    }
    *((unsigned char *)a1 + v7) = v35;
    id v36 = (void *)(((unint64_t)a1 + v11) & v34);
    Swift::String v37 = (unsigned __int8 *)((unint64_t)&a2[v11] & v34);
    unsigned int v38 = v37[v69];
    unsigned int v39 = v38 - 2;
    if (v38 >= 2)
    {
      if (v69 <= 3) {
        uint64_t v40 = v69;
      }
      else {
        uint64_t v40 = 4;
      }
      switch(v40)
      {
        case 1:
          int v41 = *v37;
          if (v69 < 4) {
            goto LABEL_41;
          }
          goto LABEL_43;
        case 2:
          int v41 = *(unsigned __int16 *)v37;
          if (v69 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_41;
        case 3:
          int v41 = *(unsigned __int16 *)v37 | (v37[2] << 16);
          if (v69 < 4) {
            goto LABEL_41;
          }
          goto LABEL_43;
        case 4:
          int v41 = *(_DWORD *)v37;
          if (v69 < 4) {
LABEL_41:
          }
            unsigned int v38 = (v41 | (v39 << (8 * v69))) + 2;
          else {
LABEL_43:
          }
            unsigned int v38 = v41 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v42 = ~v16;
    uint64_t v43 = ~v15;
    if (v38 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v60 + 16))(v36, v37, v33);
      char v44 = 1;
    }
    else
    {
      void *v36 = *(void *)v37;
      swift_retain();
      char v44 = 0;
    }
    *((unsigned char *)v36 + v69) = v44;
    uint64_t v45 = (void *)(((unint64_t)v36 + v61 + v16) & v42);
    uint64_t v46 = (void *)((unint64_t)&v37[v61 + v16] & v42);
    *uint64_t v45 = *v46;
    uint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v47 = *v48;
    uint64_t v49 = ((unint64_t)v47 + v15 + 8) & v43;
    uint64_t v50 = ((unint64_t)v48 + v15 + 8) & v43;
    uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    swift_retain();
    swift_retain();
    v51(v49, v50, v67);
    v51(((unint64_t)v45 + v62) & v43, ((unint64_t)v46 + v62) & v43, v67);
    long long v52 = (void *)((v63 + (((unint64_t)v45 + v62) & v43)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v53 = (void *)((v63 + (((unint64_t)v46 + v62) & v43)) & 0xFFFFFFFFFFFFFFF8);
    void *v52 = *v53;
    v52[1] = v53[1];
    unint64_t v54 = ((unint64_t)v52 + v64) & v43;
    unint64_t v55 = ((unint64_t)v53 + v64) & v43;
    swift_bridgeObjectRetain();
    v51(v54, v55, v67);
    v51((v66 + v54) & v43, (v66 + v55) & v43, v67);
    uint64_t v56 = (void *)((v65 + v55) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v57 = v56[1];
    uint64_t v58 = (void *)((v65 + v54) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v58 = *v56;
    v58[1] = v57;
    uint64_t v28 = a1;
  }
  swift_retain();
  return v28;
}

uint64_t sub_100096784(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v4 - 8) + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        if (v5 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        if (v5 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v5 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v9 = *(_DWORD *)a1;
        if (v5 < 4)
        {
LABEL_14:
          unsigned int v6 = (v9 | (v7 << (8 * v5))) + 2;
          break;
        }
LABEL_18:
        if (v9 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v6 == 1) {
LABEL_16:
  }
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  else {
LABEL_19:
  }
    swift_release();
  uint64_t v10 = type metadata accessor for EnvironmentValues();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  unint64_t v13 = (unsigned __int8 *)((unint64_t)&a1[v5 + 1 + v12] & ~v12);
  if (*(void *)(v11 + 64) <= 8uLL) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unsigned int v15 = v13[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v13;
        goto LABEL_32;
      case 2:
        int v18 = *(unsigned __int16 *)v13;
        goto LABEL_32;
      case 3:
        int v18 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_32;
      case 4:
        int v18 = *(_DWORD *)v13;
LABEL_32:
        int v19 = (v18 | (v16 << (8 * v14))) + 2;
        unsigned int v15 = v18 + 2;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(v13, v10);
  }
  else {
    swift_release();
  }
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = &v13[v14];
  uint64_t v22 = *(void *)(v20 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (unint64_t)&v21[(v23 | 7) + 1] & ~(v23 | 7);
  swift_release();
  swift_release();
  uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v22 + 8);
  v25((v23 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v23, v20);
  uint64_t v26 = *(void *)(v22 + 64);
  uint64_t v27 = (v26 + v23 + ((v23 + 16) & ~v23) + v24) & ~v23;
  v25(v27, v20);
  swift_bridgeObjectRelease();
  unint64_t v28 = (v23 + 16 + ((v26 + 7 + v27) & 0xFFFFFFFFFFFFFFF8)) & ~v23;
  v25(v28, v20);
  v25((v26 + v23 + v28) & ~v23, v20);

  return swift_release();
}

void *sub_100096B34(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    *a1 = *(void *)a2;
    swift_retain();
    char v12 = 0;
  }
  *((unsigned char *)a1 + v7) = v12;
  uint64_t v13 = type metadata accessor for EnvironmentValues();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v16 = v7 + v15 + 1;
  uint64_t v17 = (void *)(((unint64_t)a1 + v16) & ~v15);
  int v18 = (unsigned __int8 *)((unint64_t)&a2[v16] & ~v15);
  if (*(void *)(v14 + 64) <= 8uLL) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = *(void *)(v14 + 64);
  }
  unsigned int v20 = v18[v19];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v18;
        goto LABEL_32;
      case 2:
        int v23 = *(unsigned __int16 *)v18;
        goto LABEL_32;
      case 3:
        int v23 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        goto LABEL_32;
      case 4:
        int v23 = *(_DWORD *)v18;
LABEL_32:
        int v24 = (v23 | (v21 << (8 * v19))) + 2;
        unsigned int v20 = v23 + 2;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v53 = a1;
  if (v20 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v14 + 16))(v17, v18, v13);
    char v25 = 1;
  }
  else
  {
    *uint64_t v17 = *(void *)v18;
    swift_retain();
    char v25 = 0;
  }
  *((unsigned char *)v17 + v19) = v25;
  uint64_t v26 = *(void *)(a3 + 16);
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  uint64_t v29 = v27 + 16;
  uint64_t v30 = *(unsigned __int8 *)(v27 + 80);
  long long v52 = (void *)(((unint64_t)v17 + v19 + (v30 | 7) + 1) & ~(v30 | 7));
  uint64_t v31 = (void *)((unint64_t)&v18[v19 + 1 + (v30 | 7)] & ~(v30 | 7));
  void *v52 = *v31;
  int v32 = (void *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v32 = *v33;
  uint64_t v34 = ((unint64_t)v32 + v30 + 8) & ~v30;
  uint64_t v35 = ((unint64_t)v33 + v30 + 8) & ~v30;
  swift_retain();
  swift_retain();
  v28(v34, v35, v26);
  uint64_t v36 = *(void *)(v29 + 48);
  uint64_t v37 = v36 + v30;
  uint64_t v38 = v36 + v30 + ((v30 + 16) & ~v30);
  unint64_t v39 = ((unint64_t)v52 + v38) & ~v30;
  unint64_t v40 = ((unint64_t)v31 + v38) & ~v30;
  v28(v39, v40, v26);
  v36 += 7;
  int v41 = (void *)((v36 + v39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (void *)((v36 + v40) & 0xFFFFFFFFFFFFFFF8);
  *int v41 = *v42;
  v41[1] = v42[1];
  uint64_t v43 = ((unint64_t)v41 + v30 + 16) & ~v30;
  uint64_t v44 = ((unint64_t)v42 + v30 + 16) & ~v30;
  swift_bridgeObjectRetain();
  v28(v43, v44, v26);
  v28((v37 + v43) & ~v30, (v37 + v44) & ~v30, v26);
  uint64_t v45 = v36 + (v37 & ~v30);
  uint64_t v46 = v45 + v43;
  uint64_t v47 = (uint64_t *)((v45 + v44) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  uint64_t v50 = (void *)(v46 & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v50 = v49;
  v50[1] = v48;
  swift_retain();
  return v53;
}

unsigned __int8 *sub_100096F84(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_36:
      *(void *)a1 = *(void *)a2;
      a1[v8] = 0;
      swift_retain();
    }
  }
  unint64_t v17 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  uint64_t v18 = 8;
  if (v17 <= 8) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = v17;
  }
  uint64_t v20 = type metadata accessor for EnvironmentValues();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(_DWORD *)(v21 + 80) & 0xF8 | 7;
  uint64_t v23 = v19 + v22 + 1;
  unint64_t v61 = a1;
  int v24 = (unsigned __int8 *)((unint64_t)&a1[v23] & ~v22);
  char v25 = (unsigned __int8 *)((unint64_t)&a2[v23] & ~v22);
  if (*(void *)(v21 + 64) > 8uLL) {
    uint64_t v18 = *(void *)(v21 + 64);
  }
  if (v24 != v25)
  {
    uint64_t v26 = v20;
    unsigned int v27 = v24[v18];
    unsigned int v28 = v27 - 2;
    if (v27 >= 2)
    {
      if (v18 <= 3) {
        uint64_t v29 = v18;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *v24;
          goto LABEL_52;
        case 2:
          int v30 = *(unsigned __int16 *)v24;
          goto LABEL_52;
        case 3:
          int v30 = *(unsigned __int16 *)v24 | (v24[2] << 16);
          goto LABEL_52;
        case 4:
          int v30 = *(_DWORD *)v24;
LABEL_52:
          int v31 = (v30 | (v28 << (8 * v18))) + 2;
          unsigned int v27 = v30 + 2;
          if (v18 < 4) {
            unsigned int v27 = v31;
          }
          break;
        default:
          break;
      }
    }
    if (v27 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 8))(v24, v20);
    }
    else {
      swift_release();
    }
    unsigned int v32 = v25[v18];
    unsigned int v33 = v32 - 2;
    if (v32 >= 2)
    {
      if (v18 <= 3) {
        uint64_t v34 = v18;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v25;
          goto LABEL_66;
        case 2:
          int v35 = *(unsigned __int16 *)v25;
          goto LABEL_66;
        case 3:
          int v35 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          goto LABEL_66;
        case 4:
          int v35 = *(_DWORD *)v25;
LABEL_66:
          int v36 = (v35 | (v33 << (8 * v18))) + 2;
          unsigned int v32 = v35 + 2;
          if (v18 < 4) {
            unsigned int v32 = v36;
          }
          break;
        default:
          break;
      }
    }
    if (v32 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 16))(v24, v25, v26);
      v24[v18] = 1;
    }
    else
    {
      *(void *)int v24 = *(void *)v25;
      v24[v18] = 0;
      swift_retain();
    }
  }
  uint64_t v37 = *(void *)(a3 + 16);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v40 = v18 + (v39 | 7) + 1;
  int v41 = (void *)((unint64_t)&v24[v40] & ~(v39 | 7));
  uint64_t v42 = (void *)((unint64_t)&v25[v40] & ~(v39 | 7));
  *int v41 = *v42;
  swift_retain();
  swift_release();
  uint64_t v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v43 = *v44;
  swift_retain();
  swift_release();
  uint64_t v45 = *(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 24);
  v45(((unint64_t)v43 + v39 + 8) & ~v39, ((unint64_t)v44 + v39 + 8) & ~v39, v37);
  uint64_t v46 = *(void *)(v38 + 64);
  uint64_t v47 = v46 + v39;
  uint64_t v48 = v46 + v39 + ((v39 + 16) & ~v39);
  unint64_t v49 = ((unint64_t)v41 + v48) & ~v39;
  unint64_t v50 = ((unint64_t)v42 + v48) & ~v39;
  v45(v49, v50, v37);
  uint64_t v51 = v46 + 7;
  long long v52 = (void *)((v46 + 7 + v49) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v53 = (void *)((v51 + v50) & 0xFFFFFFFFFFFFFFF8);
  void *v52 = *v53;
  v52[1] = v53[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = ((unint64_t)v52 + v39 + 16) & ~v39;
  uint64_t v55 = ((unint64_t)v53 + v39 + 16) & ~v39;
  v45(v54, v55, v37);
  v45((v47 + v54) & ~v39, (v47 + v55) & ~v39, v37);
  uint64_t v56 = v51 + (v47 & ~v39);
  uint64_t v57 = (void *)((v56 + v54) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v58 = (void *)((v56 + v55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  swift_retain();
  swift_release();
  return v61;
}

void *sub_1000975D4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ColorScheme();
  if (*(void *)(*(void *)(v6 - 8) + 64) <= 8uLL) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        if (v7 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v7 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v11 = *(_DWORD *)a2;
        if (v7 < 4)
        {
LABEL_14:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_18:
        if (v11 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_16:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    char v12 = 1;
  }
  else
  {
LABEL_19:
    char v12 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v7) = v12;
  uint64_t v13 = type metadata accessor for EnvironmentValues();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v16 = v7 + v15 + 1;
  unint64_t v17 = (void *)(((unint64_t)a1 + v16) & ~v15);
  uint64_t v18 = (unsigned __int8 *)((unint64_t)&a2[v16] & ~v15);
  if (*(void *)(v14 + 64) <= 8uLL) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = *(void *)(v14 + 64);
  }
  unsigned int v20 = v18[v19];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v18;
        goto LABEL_32;
      case 2:
        int v23 = *(unsigned __int16 *)v18;
        goto LABEL_32;
      case 3:
        int v23 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        goto LABEL_32;
      case 4:
        int v23 = *(_DWORD *)v18;
LABEL_32:
        int v24 = (v23 | (v21 << (8 * v19))) + 2;
        unsigned int v20 = v23 + 2;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v14 + 32))(v17, v18, v13);
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
    *unint64_t v17 = *(void *)v18;
  }
  *((unsigned char *)v17 + v19) = v25;
  uint64_t v26 = (char *)v17 + v19 + 1;
  unsigned int v27 = &v18[v19 + 1];
  uint64_t v28 = *(void *)(a3 + 16);
  uint64_t v29 = *(void *)(v28 - 8);
  int v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 32);
  uint64_t v31 = v29 + 32;
  uint64_t v32 = *(unsigned __int8 *)(v29 + 80);
  unsigned int v33 = (void *)((unint64_t)&v26[v32 | 7] & ~(v32 | 7));
  uint64_t v34 = (void *)((unint64_t)&v27[v32 | 7] & ~(v32 | 7));
  *unsigned int v33 = *v34;
  int v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v35 = *v36;
  v30(((unint64_t)v35 + v32 + 8) & ~v32, ((unint64_t)v36 + v32 + 8) & ~v32, v28);
  uint64_t v37 = *(void *)(v31 + 32);
  uint64_t v38 = v37 + v32;
  uint64_t v39 = v37 + v32 + ((v32 + 16) & ~v32);
  unint64_t v40 = ((unint64_t)v33 + v39) & ~v32;
  unint64_t v41 = ((unint64_t)v34 + v39) & ~v32;
  v30(v40, v41, v28);
  v37 += 7;
  uint64_t v42 = (_OWORD *)((v37 + v40) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v43 = (_OWORD *)((v37 + v41) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v42 = *v43;
  uint64_t v44 = ((unint64_t)v42 + v32 + 16) & ~v32;
  uint64_t v45 = ((unint64_t)v43 + v32 + 16) & ~v32;
  v30(v44, v45, v28);
  v30((v38 + v44) & ~v32, (v38 + v45) & ~v32, v28);
  *(_OWORD *)((v37 + (v38 & ~v32) + v44) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v37 + (v38 & ~v32) + v45) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *sub_1000979E8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_15;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_15:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_19:
          if (v12 != -1) {
            goto LABEL_20;
          }
          goto LABEL_17;
        default:
          break;
      }
    }
    if (v9 == 1) {
LABEL_17:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    else {
LABEL_20:
    }
      swift_release();
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_31:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_35:
          if (v16 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v17 = 1;
    }
    else
    {
LABEL_36:
      char v17 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v17;
  }
  unint64_t v18 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  uint64_t v19 = 8;
  if (v18 <= 8) {
    uint64_t v20 = 8;
  }
  else {
    uint64_t v20 = v18;
  }
  uint64_t v21 = type metadata accessor for EnvironmentValues();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(_DWORD *)(v22 + 80) & 0xF8 | 7;
  uint64_t v24 = v20 + v23 + 1;
  uint64_t v58 = a1;
  char v25 = (unsigned __int8 *)((unint64_t)&a1[v24] & ~v23);
  uint64_t v26 = (unsigned __int8 *)((unint64_t)&a2[v24] & ~v23);
  if (*(void *)(v22 + 64) > 8uLL) {
    uint64_t v19 = *(void *)(v22 + 64);
  }
  if (v25 != v26)
  {
    uint64_t v27 = v21;
    unsigned int v28 = v25[v19];
    unsigned int v29 = v28 - 2;
    if (v28 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v30 = v19;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v25;
          goto LABEL_53;
        case 2:
          int v31 = *(unsigned __int16 *)v25;
          goto LABEL_53;
        case 3:
          int v31 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          goto LABEL_53;
        case 4:
          int v31 = *(_DWORD *)v25;
LABEL_53:
          int v32 = (v31 | (v29 << (8 * v19))) + 2;
          unsigned int v28 = v31 + 2;
          if (v19 < 4) {
            unsigned int v28 = v32;
          }
          break;
        default:
          break;
      }
    }
    if (v28 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v22 + 8))(v25, v21);
    }
    else {
      swift_release();
    }
    unsigned int v33 = v26[v19];
    unsigned int v34 = v33 - 2;
    if (v33 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v35 = v19;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v26;
          goto LABEL_67;
        case 2:
          int v36 = *(unsigned __int16 *)v26;
          goto LABEL_67;
        case 3:
          int v36 = *(unsigned __int16 *)v26 | (v26[2] << 16);
          goto LABEL_67;
        case 4:
          int v36 = *(_DWORD *)v26;
LABEL_67:
          int v37 = (v36 | (v34 << (8 * v19))) + 2;
          unsigned int v33 = v36 + 2;
          if (v19 < 4) {
            unsigned int v33 = v37;
          }
          break;
        default:
          break;
      }
    }
    if (v33 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v22 + 32))(v25, v26, v27);
      char v38 = 1;
    }
    else
    {
      char v38 = 0;
      *(void *)char v25 = *(void *)v26;
    }
    v25[v19] = v38;
  }
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = v19 + (v41 | 7) + 1;
  uint64_t v43 = (void *)((unint64_t)&v25[v42] & ~(v41 | 7));
  uint64_t v44 = (void *)((unint64_t)&v26[v42] & ~(v41 | 7));
  *uint64_t v43 = *v44;
  swift_release();
  uint64_t v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v46 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v45 = *v46;
  swift_release();
  uint64_t v47 = *(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 40);
  v47(((unint64_t)v45 + v41 + 8) & ~v41, ((unint64_t)v46 + v41 + 8) & ~v41, v39);
  uint64_t v48 = *(void *)(v40 + 64);
  uint64_t v49 = v48 + v41;
  uint64_t v50 = v48 + v41 + ((v41 + 16) & ~v41);
  unint64_t v51 = ((unint64_t)v43 + v50) & ~v41;
  unint64_t v52 = ((unint64_t)v44 + v50) & ~v41;
  v47(v51, v52, v39);
  uint64_t v53 = (void *)((v48 + 7 + v51) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (void *)((v48 + 7 + v52) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v53 = *v54;
  v53[1] = v54[1];
  swift_bridgeObjectRelease();
  uint64_t v55 = ((unint64_t)v53 + v41 + 16) & ~v41;
  uint64_t v56 = ((unint64_t)v54 + v41 + 16) & ~v41;
  v47(v55, v56, v39);
  v47((v49 + v55) & ~v41, (v49 + v56) & ~v41, v39);
  *(_OWORD *)((v48 + 7 + (v49 & ~v41) + v55) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v48 + 7 + (v49 & ~v41) + v56) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return v58;
}

uint64_t sub_100098010(int *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = *(void *)(type metadata accessor for EnvironmentValues() - 8);
  unint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  int v12 = *(_DWORD *)(v8 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = *(void *)(v10 + 64);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v12 & 0xF8 | 7;
  uint64_t v17 = v7 + v16 + 1;
  unint64_t v18 = v9 + 1;
  uint64_t v19 = v13 | 7;
  if (v15 < a2)
  {
    unint64_t v20 = ((v14
          + 7
          + ((v14 + v13) & ~v13)
          + ((v13
            + 16
            + ((v14 + 7 + ((v14 + v13 + ((v13 + 16) & ~v13) + ((v19 + v18 + (v17 & ~v16)) & ~v19)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v21 = v20 & 0xFFFFFFF8;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v15 + 1;
    }
    if (v22 >= 0x10000) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v22 < 0x100) {
      unsigned int v23 = 1;
    }
    if (v22 >= 2) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = *((unsigned __int8 *)a1 + v20);
        if (!v25) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v25 = *(unsigned __int16 *)((char *)a1 + v20);
        if (v25) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000982B0);
      case 4:
        int v25 = *(int *)((char *)a1 + v20);
        if (!v25) {
          break;
        }
LABEL_27:
        int v27 = v25 - 1;
        if (v21)
        {
          int v27 = 0;
          int v28 = *a1;
        }
        else
        {
          int v28 = 0;
        }
        return v15 + (v28 | v27) + 1;
      default:
        break;
    }
  }
  unsigned int v29 = (unint64_t *)(((((((unint64_t)a1 + v17) & ~v16) + v18 + v19) & ~v19) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 0x80000000) != 0)
  {
    int v31 = *(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 48);
    return v31(((unint64_t)v29 + v13 + 8) & ~v13);
  }
  else
  {
    unint64_t v30 = *v29;
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    return (v30 + 1);
  }
}

void sub_1000982C4(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = *(void *)(*(void *)(type metadata accessor for ColorScheme() - 8) + 64);
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = *(void *)(type metadata accessor for EnvironmentValues() - 8);
  if (*(void *)(v10 + 64) <= 8uLL) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = *(void *)(v10 + 64);
  }
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  int v14 = *(_DWORD *)(v10 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v18 = v14 & 0xF8 | 7;
  uint64_t v19 = v9 + v18 + 1;
  uint64_t v16 = *(void *)(v12 + 64);
  size_t v20 = ((v16
        + 7
        + ((v16 + v15) & ~v15)
        + ((v15
          + 16
          + ((v16 + 7 + ((v16 + v15 + ((v15 + 16) & ~v15) + (((v15 | 7) + v11 + 1 + (v19 & ~v18)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v17 >= a3)
  {
    int v23 = 0;
    int v24 = a2 - v17;
    if (a2 <= v17)
    {
LABEL_23:
      switch(v23)
      {
        case 1:
          *((unsigned char *)a1 + v20) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)((char *)a1 + v20) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v20) = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            int v27 = (void *)(((((((unint64_t)a1 + v19) & ~v18) + v11 + 1 + (v15 | 7)) & ~(v15 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v13 & 0x80000000) != 0)
            {
              unsigned int v29 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
              v29(((unint64_t)v27 + v15 + 8) & ~v15, a2);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v28 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v28 = (a2 - 1);
              }
              *int v27 = v28;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16
         + 7
         + ((v16 + v15) & ~v15)
         + ((v15
           + 16
           + ((v16
             + 7
             + ((v16
               + v15
               + ((v15 + 16) & ~v15)
               + (((v15 | 7) + v11 + 1 + (v19 & ~v18)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFF8)) & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v21 = a3 - v17 + 1;
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v23 = v22;
    }
    else {
      int v23 = 0;
    }
    int v24 = a2 - v17;
    if (a2 <= v17) {
      goto LABEL_23;
    }
  }
  if (v20) {
    int v25 = 1;
  }
  else {
    int v25 = v24;
  }
  if (v20)
  {
    int v26 = ~v17 + a2;
    bzero(a1, v20);
    *a1 = v26;
  }
  switch(v23)
  {
    case 1:
      *((unsigned char *)a1 + v20) = v25;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v20) = v25;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1000985B0);
    case 4:
      *(_DWORD *)((char *)a1 + v20) = v25;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ConfigSlider()
{
  return swift_getGenericMetadata();
}

void sub_1000985F0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100098644()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100098690(float a1)
{
  uint64_t v15 = &type metadata for Float;
  unint64_t v16 = sub_1000A3094();
  *(float *)int v14 = a1;
  sub_10000F578((uint64_t)v14, (uint64_t)v11);
  sub_10000F214(&qword_10051C8D8);
  sub_10000F214(&qword_10051C8F0);
  if (swift_dynamicCast())
  {
    sub_1000321A8(v9, (uint64_t)v12);
    sub_10000F214(&qword_10051F350);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
    sub_10000F578((uint64_t)v12, v2 + 32);
    uint64_t v3 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
    sub_10000FBD8((uint64_t)v9, &qword_10051C8F8);
    v11[0] = a1;
    sub_10000F214(&qword_10051C950);
    if (!swift_dynamicCast())
    {
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_10000FBD8((uint64_t)v12, &qword_10051C958);
      return 0x6F2074616D726F46;
    }
    sub_1000321A8(v12, (uint64_t)v14);
    unint64_t v4 = sub_10000F3B0(v14, (uint64_t)v15);
    double v5 = __chkstk_darwin(v4);
    (*(void (**)(char *, double))(v7 + 16))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v3 = String.init<A>(_:radix:uppercase:)();
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
  return v3;
}

uint64_t sub_100098904(double a1)
{
  uint64_t v15 = &type metadata for Double;
  unint64_t v16 = sub_1000A23E0();
  *(double *)int v14 = a1;
  sub_10000F578((uint64_t)v14, (uint64_t)v11);
  sub_10000F214(&qword_10051C8D8);
  sub_10000F214(&qword_10051C8F0);
  if (swift_dynamicCast())
  {
    sub_1000321A8(v9, (uint64_t)v12);
    sub_10000F214(&qword_10051F350);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
    sub_10000F578((uint64_t)v12, v2 + 32);
    uint64_t v3 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
    sub_10000FBD8((uint64_t)v9, &qword_10051C8F8);
    v11[0] = a1;
    sub_10000F214(&qword_10051C950);
    if (!swift_dynamicCast())
    {
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_10000FBD8((uint64_t)v12, &qword_10051C958);
      return 0x6F2074616D726F46;
    }
    sub_1000321A8(v12, (uint64_t)v14);
    unint64_t v4 = sub_10000F3B0(v14, (uint64_t)v15);
    double v5 = __chkstk_darwin(v4);
    (*(void (**)(char *, double))(v7 + 16))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
    uint64_t v3 = String.init<A>(_:radix:uppercase:)();
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
  return v3;
}

uint64_t sub_100098B78(uint64_t a1)
{
  v13[0] = a1;
  sub_10000F214(&qword_10051C8D8);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    unint64_t v4 = (uint64_t *)&unk_10051C8E0;
    double v5 = v14;
LABEL_6:
    sub_10000FBD8((uint64_t)v5, v4);
    v16[3] = &type metadata for UInt64;
    v16[4] = sub_1000A2FF0();
    v16[0] = a1;
    uint64_t v6 = sub_10000F3B0(v16, (uint64_t)&type metadata for UInt64);
    double v7 = __chkstk_darwin(v6);
    (*(void (**)(char *, double))(v9 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v3 = String.init<A>(_:radix:uppercase:)();
    goto LABEL_7;
  }
  sub_1000321A8(v14, (uint64_t)v16);
  sub_10000F578((uint64_t)v16, (uint64_t)v13);
  sub_10000F214(&qword_10051C8F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
    unint64_t v4 = (uint64_t *)&unk_10051C8F8;
    double v5 = v11;
    goto LABEL_6;
  }
  sub_1000321A8(v11, (uint64_t)v14);
  sub_10000F214(&qword_10051F350);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
  sub_10000F578((uint64_t)v14, v2 + 32);
  uint64_t v3 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
LABEL_7:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
  return v3;
}

uint64_t sub_100098DB4(int a1)
{
  v13[0] = a1;
  sub_10000F214(&qword_10051C8D8);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    unint64_t v4 = (uint64_t *)&unk_10051C8E0;
    double v5 = v14;
LABEL_6:
    sub_10000FBD8((uint64_t)v5, v4);
    v16[3] = &type metadata for UInt32;
    v16[4] = sub_1000A2C80();
    LODWORD(v16[0]) = a1;
    uint64_t v6 = sub_10000F3B0(v16, (uint64_t)&type metadata for UInt32);
    double v7 = __chkstk_darwin(v6);
    (*(void (**)(char *, double))(v9 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v3 = String.init<A>(_:radix:uppercase:)();
    goto LABEL_7;
  }
  sub_1000321A8(v14, (uint64_t)v16);
  sub_10000F578((uint64_t)v16, (uint64_t)v13);
  sub_10000F214(&qword_10051C8F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
    unint64_t v4 = (uint64_t *)&unk_10051C8F8;
    double v5 = v11;
    goto LABEL_6;
  }
  sub_1000321A8(v11, (uint64_t)v14);
  sub_10000F214(&qword_10051F350);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
  sub_10000F578((uint64_t)v14, v2 + 32);
  uint64_t v3 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
LABEL_7:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
  return v3;
}

uint64_t sub_100098FF0(uint64_t a1)
{
  v13[0] = a1;
  sub_10000F214(&qword_10051C8D8);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    unint64_t v4 = (uint64_t *)&unk_10051C8E0;
    double v5 = v14;
LABEL_6:
    sub_10000FBD8((uint64_t)v5, v4);
    v16[3] = &type metadata for UInt;
    v16[4] = sub_1000A29EC();
    v16[0] = a1;
    uint64_t v6 = sub_10000F3B0(v16, (uint64_t)&type metadata for UInt);
    double v7 = __chkstk_darwin(v6);
    (*(void (**)(char *, double))(v9 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v3 = String.init<A>(_:radix:uppercase:)();
    goto LABEL_7;
  }
  sub_1000321A8(v14, (uint64_t)v16);
  sub_10000F578((uint64_t)v16, (uint64_t)v13);
  sub_10000F214(&qword_10051C8F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
    unint64_t v4 = (uint64_t *)&unk_10051C8F8;
    double v5 = v11;
    goto LABEL_6;
  }
  sub_1000321A8(v11, (uint64_t)v14);
  sub_10000F214(&qword_10051F350);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
  sub_10000F578((uint64_t)v14, v2 + 32);
  uint64_t v3 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
LABEL_7:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
  return v3;
}

uint64_t sub_10009922C(uint64_t a1)
{
  v13[0] = a1;
  sub_10000F214(&qword_10051C8D8);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    unint64_t v4 = (uint64_t *)&unk_10051C8E0;
    double v5 = v14;
LABEL_6:
    sub_10000FBD8((uint64_t)v5, v4);
    v16[3] = &type metadata for Int;
    v16[4] = sub_1000A2434();
    v16[0] = a1;
    uint64_t v6 = sub_10000F3B0(v16, (uint64_t)&type metadata for Int);
    double v7 = __chkstk_darwin(v6);
    (*(void (**)(char *, double))(v9 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v3 = String.init<A>(_:radix:uppercase:)();
    goto LABEL_7;
  }
  sub_1000321A8(v14, (uint64_t)v16);
  sub_10000F578((uint64_t)v16, (uint64_t)v13);
  sub_10000F214(&qword_10051C8F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
    unint64_t v4 = (uint64_t *)&unk_10051C8F8;
    double v5 = v11;
    goto LABEL_6;
  }
  sub_1000321A8(v11, (uint64_t)v14);
  sub_10000F214(&qword_10051F350);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10043D4F0;
  sub_10000F578((uint64_t)v14, v2 + 32);
  uint64_t v3 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v14);
LABEL_7:
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v16);
  return v3;
}

uint64_t sub_100099468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v278 = a2;
  uint64_t v223 = sub_10000F214(&qword_10051C770);
  __chkstk_darwin(v223);
  uint64_t v224 = (uint64_t *)((char *)&v219 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v248 = sub_10000F214(&qword_10051C778);
  __chkstk_darwin(v248);
  uint64_t v225 = (char *)&v219 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10051C780);
  __chkstk_darwin(v6 - 8);
  unint64_t v229 = (char *)&v219 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v228 = sub_10000F214(&qword_10051C788);
  uint64_t v227 = *(void *)(v228 - 8);
  __chkstk_darwin(v228);
  uint64_t v230 = (uint64_t)&v219 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = sub_10000F214(&qword_10051C790);
  __chkstk_darwin(v244);
  uint64_t v246 = (uint64_t)&v219 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = sub_10000F214(&qword_10051C798);
  __chkstk_darwin(v231);
  unint64_t v232 = (char *)&v219 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = sub_10000F214(&qword_10051C7A0);
  __chkstk_darwin(v245);
  uint64_t v233 = (char *)&v219 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v282 = sub_10000F214(&qword_10051C7A8);
  __chkstk_darwin(v282);
  unint64_t v249 = (char *)&v219 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = sub_10000F214(&qword_10051C7B0);
  __chkstk_darwin(v243);
  unint64_t v234 = (uint64_t *)((char *)&v219 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v247 = sub_10000F214(&qword_10051C7B8);
  uint64_t v237 = *(void *)(v247 - 8);
  __chkstk_darwin(v247);
  uint64_t v235 = (char *)&v219 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unsigned __int8 v236 = (char *)&v219 - v16;
  uint64_t v17 = sub_10000F214(&qword_10051C7C0);
  __chkstk_darwin(v17 - 8);
  uint64_t v221 = (char *)&v219 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v239 = (char *)&v219 - v20;
  uint64_t v241 = sub_10000F214(&qword_10051C7C8);
  uint64_t v240 = *(void *)(v241 - 8);
  __chkstk_darwin(v241);
  uint64_t v222 = (uint64_t)&v219 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v242 = (uint64_t)&v219 - v23;
  uint64_t v24 = sub_10000F214(&qword_10051C7D0);
  __chkstk_darwin(v24 - 8);
  uint64_t v253 = (char *)&v219 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = sub_10000F214(&qword_10051C7D8);
  uint64_t v251 = *(void *)(v252 - 8);
  __chkstk_darwin(v252);
  uint64_t v254 = (uint64_t)&v219 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10051C7E0);
  __chkstk_darwin(v27 - 8);
  uint64_t v258 = (char *)&v219 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = sub_10000F214(&qword_10051C7E8);
  uint64_t v256 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  uint64_t v259 = (uint64_t)&v219 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000F214(&qword_10051C7F0);
  __chkstk_darwin(v30 - 8);
  uint64_t v262 = (char *)&v219 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v261 = sub_10000F214(&qword_10051C7F8);
  uint64_t v260 = *(void *)(v261 - 8);
  __chkstk_darwin(v261);
  uint64_t v263 = (uint64_t)&v219 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v279 = sub_10000F214(&qword_10051C800);
  __chkstk_darwin(v279);
  uint64_t v281 = (uint64_t)&v219 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v267 = sub_10000F214(&qword_10051C808);
  __chkstk_darwin(v267);
  uint64_t v270 = (uint64_t)&v219 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v265 = sub_10000F214(&qword_10051C810);
  __chkstk_darwin(v265);
  uint64_t v266 = (char *)&v219 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v268 = sub_10000F214(&qword_10051C818);
  __chkstk_darwin(v268);
  id v269 = (char *)&v219 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = sub_10000F214(&qword_10051C820);
  __chkstk_darwin(v280);
  uint64_t v272 = (char *)&v219 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v277 = sub_10000F214(&qword_10051C828);
  __chkstk_darwin(v277);
  os_log_type_t v276 = (uint64_t *)((char *)&v219 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v273 = sub_10000F214(&qword_10051C830);
  uint64_t v264 = *(void *)(v273 - 8);
  __chkstk_darwin(v273);
  uint64_t v275 = (char *)&v219 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  os_log_type_t v271 = (char *)&v219 - v41;
  uint64_t v42 = sub_10000F214(&qword_10051C838);
  __chkstk_darwin(v42 - 8);
  uint64_t v44 = (char *)&v219 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(a1 - 8);
  __chkstk_darwin(v46);
  uint64_t v220 = (char *)&v219 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  uint64_t v226 = (char *)&v219 - v49;
  __chkstk_darwin(v50);
  uint64_t v238 = (char *)&v219 - v51;
  __chkstk_darwin(v52);
  uint64_t v250 = (char *)&v219 - v53;
  __chkstk_darwin(v54);
  uint64_t v255 = (char *)&v219 - v55;
  __chkstk_darwin(v56);
  uint64_t v58 = (char *)&v219 - v57;
  __chkstk_darwin(v59);
  unint64_t v61 = (char *)&v219 - v60;
  uint64_t v62 = sub_10000F214(&qword_10051C840);
  uint64_t v63 = *(void *)(v62 - 8);
  double v64 = __chkstk_darwin(v62);
  uint64_t v66 = (char *)&v219 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v274 = *(void (**)(char *, uint64_t, uint64_t, double))(v45 + 16);
  v274(v61, v2, a1, v64);
  uint64_t v67 = a1;
  int v68 = swift_dynamicCast();
  unint64_t v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
  if (v68)
  {
    v69(v44, 0, 1, v62);
    uint64_t v219 = v66;
    sub_10000FC34((uint64_t)v44, (uint64_t)v66, &qword_10051C840);
    uint64_t v70 = static HorizontalAlignment.center.getter();
    uint64_t v71 = (uint64_t)v276;
    *os_log_type_t v276 = v70;
    *(void *)(v71 + 8) = 0;
    *(unsigned char *)(v71 + 16) = 1;
    uint64_t v72 = sub_10000F214(&qword_10051C888);
    uint64_t v73 = sub_10009EA18((uint64_t)v66, v71 + *(int *)(v72 + 44));
    __chkstk_darwin(v73);
    *(&v219 - 2) = v66;
    uint64_t v74 = sub_10000F214(&qword_10051C120);
    uint64_t v75 = sub_100013AA8(&qword_10051C870, &qword_10051C828);
    uint64_t v76 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
    uint64_t v77 = v275;
    uint64_t v78 = v277;
    View.swipeActions<A>(edge:allowsFullSwipe:content:)();
    sub_10000FBD8(v71, &qword_10051C828);
    uint64_t v79 = v264;
    uint64_t v80 = v271;
    uint64_t v81 = v273;
    (*(void (**)(char *, char *, uint64_t))(v264 + 32))(v271, v77, v273);
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v266, v80, v81);
    swift_storeEnumTagMultiPayload();
    uint64_t v283 = v78;
    unint64_t v284 = v74;
    uint64_t v285 = v75;
    uint64_t v286 = v76;
    swift_getOpaqueTypeConformance2();
    uint64_t v82 = (uint64_t)v269;
    _ConditionalContent<>.init(storage:)();
    sub_10000FB74(v82, v270, &qword_10051C818);
    swift_storeEnumTagMultiPayload();
    sub_10009BF30(&qword_10051C868, &qword_10051C818, &qword_10051C828, &qword_10051C870);
    uint64_t v83 = (uint64_t)v272;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v82, &qword_10051C818);
    sub_10000FB74(v83, v281, &qword_10051C820);
    swift_storeEnumTagMultiPayload();
    sub_10009BE9C();
    sub_10009C044();
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v83, &qword_10051C820);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
    uint64_t v84 = (uint64_t)v219;
    uint64_t v85 = &qword_10051C840;
  }
  else
  {
    uint64_t v87 = v275;
    uint64_t v86 = v276;
    v69(v44, 1, 1, v62);
    sub_10000FBD8((uint64_t)v44, &qword_10051C838);
    uint64_t v88 = v2;
    ((void (*)(char *, uint64_t, uint64_t))v274)(v58, v2, v67);
    uint64_t v89 = (uint64_t)v262;
    uint64_t v90 = v261;
    int v91 = swift_dynamicCast();
    uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v260 + 56);
    if (v91)
    {
      v92(v89, 0, 1, v90);
      uint64_t v93 = v263;
      sub_10000FC34(v89, v263, &qword_10051C7F8);
      uint64_t v94 = (uint64_t)v86;
      *uint64_t v86 = static HorizontalAlignment.center.getter();
      v86[1] = 0;
      *((unsigned char *)v86 + 16) = 1;
      uint64_t v95 = sub_10000F214(&qword_10051C888);
      sub_10009E390(v93, (uint64_t *)((char *)v86 + *(int *)(v95 + 44)));
      __chkstk_darwin(v96);
      *(&v219 - 2) = (char *)v93;
      uint64_t v97 = sub_10000F214(&qword_10051C120);
      uint64_t v98 = sub_100013AA8(&qword_10051C870, &qword_10051C828);
      uint64_t v99 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
      uint64_t v100 = v87;
      uint64_t v101 = v277;
      View.swipeActions<A>(edge:allowsFullSwipe:content:)();
      sub_10000FBD8(v94, &qword_10051C828);
      uint64_t v102 = v264;
      uint64_t v103 = v271;
      uint64_t v104 = v273;
      (*(void (**)(char *, char *, uint64_t))(v264 + 32))(v271, v100, v273);
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v266, v103, v104);
      swift_storeEnumTagMultiPayload();
      uint64_t v283 = v101;
      unint64_t v284 = v97;
      uint64_t v285 = v98;
      uint64_t v286 = v99;
      swift_getOpaqueTypeConformance2();
      uint64_t v105 = (uint64_t)v269;
      _ConditionalContent<>.init(storage:)();
      sub_10000FB74(v105, v270, &qword_10051C818);
      swift_storeEnumTagMultiPayload();
      sub_10009BF30(&qword_10051C868, &qword_10051C818, &qword_10051C828, &qword_10051C870);
      uint64_t v106 = (uint64_t)v272;
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v105, &qword_10051C818);
      sub_10000FB74(v106, v281, &qword_10051C820);
      swift_storeEnumTagMultiPayload();
      sub_10009BE9C();
      sub_10009C044();
      _ConditionalContent<>.init(storage:)();
      sub_10000FBD8(v106, &qword_10051C820);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v104);
      uint64_t v84 = v263;
      uint64_t v85 = &qword_10051C7F8;
    }
    else
    {
      v92(v89, 1, 1, v90);
      sub_10000FBD8(v89, &qword_10051C7F0);
      ((void (*)(char *, uint64_t, uint64_t))v274)(v255, v88, v67);
      uint64_t v107 = (uint64_t)v258;
      uint64_t v108 = v257;
      int v109 = swift_dynamicCast();
      uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v256 + 56);
      unint64_t v111 = v87;
      if (v109)
      {
        v110(v107, 0, 1, v108);
        uint64_t v112 = v259;
        sub_10000FC34(v107, v259, &qword_10051C7E8);
        uint64_t v113 = (uint64_t)v86;
        *uint64_t v86 = static HorizontalAlignment.center.getter();
        v86[1] = 0;
        *((unsigned char *)v86 + 16) = 1;
        uint64_t v114 = sub_10000F214(&qword_10051C888);
        uint64_t v115 = sub_10009DD50(v112, (uint64_t)v86 + *(int *)(v114 + 44));
        __chkstk_darwin(v115);
        *(&v219 - 2) = (char *)v112;
        uint64_t v116 = sub_10000F214(&qword_10051C120);
        uint64_t v117 = sub_100013AA8(&qword_10051C870, &qword_10051C828);
        uint64_t v118 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
        uint64_t v119 = v277;
        View.swipeActions<A>(edge:allowsFullSwipe:content:)();
        sub_10000FBD8(v113, &qword_10051C828);
        uint64_t v120 = v264;
        uint64_t v121 = v271;
        uint64_t v122 = v273;
        (*(void (**)(char *, char *, uint64_t))(v264 + 32))(v271, v111, v273);
        (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v266, v121, v122);
        swift_storeEnumTagMultiPayload();
        uint64_t v283 = v119;
        unint64_t v284 = v116;
        uint64_t v285 = v117;
        uint64_t v286 = v118;
        swift_getOpaqueTypeConformance2();
        uint64_t v123 = (uint64_t)v269;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v123, v270, &qword_10051C818);
        swift_storeEnumTagMultiPayload();
        sub_10009BF30(&qword_10051C868, &qword_10051C818, &qword_10051C828, &qword_10051C870);
        uint64_t v124 = (uint64_t)v272;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v123, &qword_10051C818);
        sub_10000FB74(v124, v281, &qword_10051C820);
        swift_storeEnumTagMultiPayload();
        sub_10009BE9C();
        sub_10009C044();
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v124, &qword_10051C820);
        (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v122);
        uint64_t v84 = v259;
        uint64_t v85 = &qword_10051C7E8;
      }
      else
      {
        v110(v107, 1, 1, v108);
        sub_10000FBD8(v107, &qword_10051C7E0);
        ((void (*)(char *, uint64_t, uint64_t))v274)(v250, v88, v67);
        uint64_t v125 = (uint64_t)v253;
        uint64_t v126 = v252;
        int v127 = swift_dynamicCast();
        long long v128 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v251 + 56);
        uint64_t v129 = v277;
        if (!v127)
        {
          v128(v125, 1, 1, v126);
          sub_10000FBD8(v125, &qword_10051C7D0);
          ((void (*)(char *, uint64_t, uint64_t))v274)(v238, v88, v67);
          uint64_t v145 = (uint64_t)v239;
          uint64_t v146 = v241;
          int v147 = swift_dynamicCast();
          uint64_t v148 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v240 + 56);
          if (v147)
          {
            v148(v145, 0, 1, v146);
            uint64_t v149 = v242;
            sub_10000FC34(v145, v242, &qword_10051C7C8);
            uint64_t v150 = static HorizontalAlignment.center.getter();
            uint64_t v151 = (uint64_t)v234;
            uint64_t *v234 = v150;
            *(void *)(v151 + 8) = 0;
            *(unsigned char *)(v151 + 16) = 1;
            uint64_t v152 = sub_10000F214(&qword_10051C880);
            uint64_t v153 = sub_1000A0EE4(v149, (uint64_t *)(v151 + *(int *)(v152 + 44)));
            __chkstk_darwin(v153);
            *(&v219 - 2) = (char *)v149;
            uint64_t v154 = sub_10000F214(&qword_10051C120);
            uint64_t v155 = sub_100013AA8(&qword_10051C848, &qword_10051C7B0);
            uint64_t v156 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
            uint64_t v157 = v235;
            uint64_t v158 = v243;
            View.swipeActions<A>(edge:allowsFullSwipe:content:)();
            sub_10000FBD8(v151, &qword_10051C7B0);
            uint64_t v159 = v237;
            uint64_t v160 = v236;
            uint64_t v161 = v247;
            (*(void (**)(char *, char *, uint64_t))(v237 + 32))(v236, v157, v247);
            (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v232, v160, v161);
            swift_storeEnumTagMultiPayload();
            uint64_t v283 = v158;
            unint64_t v284 = v154;
            uint64_t v285 = v155;
            uint64_t v286 = v156;
            swift_getOpaqueTypeConformance2();
            uint64_t v162 = (uint64_t)v233;
            _ConditionalContent<>.init(storage:)();
            sub_10000FB74(v162, v246, &qword_10051C7A0);
            swift_storeEnumTagMultiPayload();
            sub_10009BF30(&qword_10051C850, &qword_10051C7A0, &qword_10051C7B0, &qword_10051C848);
            sub_10009BD78();
            uint64_t v163 = (uint64_t)v249;
            _ConditionalContent<>.init(storage:)();
            sub_10000FBD8(v162, &qword_10051C7A0);
            sub_10000FB74(v163, v281, &qword_10051C7A8);
            swift_storeEnumTagMultiPayload();
            sub_10009BE9C();
            sub_10009C044();
            _ConditionalContent<>.init(storage:)();
            sub_10000FBD8(v163, &qword_10051C7A8);
            (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v161);
            uint64_t v164 = (uint64_t *)&v274;
          }
          else
          {
            v148(v145, 1, 1, v146);
            sub_10000FBD8(v145, &qword_10051C7C0);
            ((void (*)(char *, uint64_t, uint64_t))v274)(v226, v88, v67);
            uint64_t v165 = (uint64_t)v229;
            uint64_t v166 = v228;
            int v167 = swift_dynamicCast();
            uint64_t v168 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v227 + 56);
            if (v167)
            {
              v168(v165, 0, 1, v166);
              uint64_t v169 = v230;
              sub_10000FC34(v165, v230, &qword_10051C788);
              uint64_t v170 = static HorizontalAlignment.center.getter();
              uint64_t v171 = (uint64_t)v234;
              uint64_t *v234 = v170;
              *(void *)(v171 + 8) = 0;
              *(unsigned char *)(v171 + 16) = 1;
              uint64_t v172 = sub_10000F214(&qword_10051C880);
              uint64_t v173 = sub_1000A09B0(v169, (uint64_t *)(v171 + *(int *)(v172 + 44)));
              __chkstk_darwin(v173);
              *(&v219 - 2) = (char *)v169;
              uint64_t v174 = sub_10000F214(&qword_10051C120);
              uint64_t v175 = sub_100013AA8(&qword_10051C848, &qword_10051C7B0);
              uint64_t v176 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
              uint64_t v177 = v235;
              uint64_t v178 = v243;
              View.swipeActions<A>(edge:allowsFullSwipe:content:)();
              sub_10000FBD8(v171, &qword_10051C7B0);
              uint64_t v179 = v237;
              uint64_t v180 = v236;
              uint64_t v181 = v247;
              (*(void (**)(char *, char *, uint64_t))(v237 + 32))(v236, v177, v247);
              (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v232, v180, v181);
              swift_storeEnumTagMultiPayload();
              uint64_t v283 = v178;
              unint64_t v284 = v174;
              uint64_t v285 = v175;
              uint64_t v286 = v176;
              swift_getOpaqueTypeConformance2();
              uint64_t v182 = (uint64_t)v233;
              _ConditionalContent<>.init(storage:)();
              sub_10000FB74(v182, v246, &qword_10051C7A0);
              swift_storeEnumTagMultiPayload();
              sub_10009BF30(&qword_10051C850, &qword_10051C7A0, &qword_10051C7B0, &qword_10051C848);
              sub_10009BD78();
              uint64_t v183 = (uint64_t)v249;
              _ConditionalContent<>.init(storage:)();
              sub_10000FBD8(v182, &qword_10051C7A0);
              sub_10000FB74(v183, v281, &qword_10051C7A8);
              swift_storeEnumTagMultiPayload();
              sub_10009BE9C();
              sub_10009C044();
              _ConditionalContent<>.init(storage:)();
              sub_10000FBD8(v183, &qword_10051C7A8);
              (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
              uint64_t v84 = v230;
              uint64_t v85 = &qword_10051C788;
              return sub_10000FBD8(v84, v85);
            }
            v168(v165, 1, 1, v166);
            sub_10000FBD8(v165, &qword_10051C780);
            ((void (*)(char *, uint64_t, uint64_t))v274)(v220, v88, v67);
            uint64_t v184 = (uint64_t)v221;
            if (!swift_dynamicCast())
            {
              v148(v184, 1, 1, v146);
              sub_10000FBD8(v184, &qword_10051C7C0);
              uint64_t v283 = 0;
              unint64_t v284 = 0xE000000000000000;
              _StringGuts.grow(_:)(30);
              swift_bridgeObjectRelease();
              uint64_t v283 = 0xD00000000000001CLL;
              unint64_t v284 = 0x8000000100426030;
              uint64_t v201 = (uint64_t *)(v88 + *(int *)(v67 + 72));
              uint64_t v202 = *v201;
              uint64_t v203 = (void *)v201[1];
              swift_bridgeObjectRetain();
              v204._countAndFlagsBits = v202;
              v204._object = v203;
              String.append(_:)(v204);
              swift_bridgeObjectRelease();
              uint64_t v283 = static Color.red.getter();
              uint64_t v205 = Text.foregroundStyle<A>(_:)();
              uint64_t v207 = v206;
              char v209 = v208;
              uint64_t v211 = v210;
              swift_release();
              swift_bridgeObjectRelease();
              char v212 = v209 & 1;
              uint64_t v213 = v224;
              *uint64_t v224 = v205;
              v213[1] = v207;
              *((unsigned char *)v213 + 16) = v209 & 1;
              v213[3] = v211;
              swift_storeEnumTagMultiPayload();
              sub_1000807A8(v205, v207, v209 & 1);
              swift_bridgeObjectRetain();
              uint64_t v214 = sub_10000F69C(&qword_10051C120);
              uint64_t v215 = sub_100013AA8(&qword_10051C848, &qword_10051C7B0);
              uint64_t v216 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
              uint64_t v283 = v243;
              unint64_t v284 = v214;
              uint64_t v285 = v215;
              uint64_t v286 = v216;
              swift_getOpaqueTypeConformance2();
              uint64_t v217 = (uint64_t)v225;
              _ConditionalContent<>.init(storage:)();
              sub_10000FB74(v217, v246, &qword_10051C778);
              swift_storeEnumTagMultiPayload();
              sub_10009BF30(&qword_10051C850, &qword_10051C7A0, &qword_10051C7B0, &qword_10051C848);
              sub_10009BD78();
              uint64_t v218 = (uint64_t)v249;
              _ConditionalContent<>.init(storage:)();
              sub_10000FBD8(v217, &qword_10051C778);
              sub_10000FB74(v218, v281, &qword_10051C7A8);
              swift_storeEnumTagMultiPayload();
              sub_10009BE9C();
              sub_10009C044();
              _ConditionalContent<>.init(storage:)();
              sub_10000FBD8(v218, &qword_10051C7A8);
              sub_100012FAC(v205, v207, v212);
              return swift_bridgeObjectRelease();
            }
            v148(v184, 0, 1, v146);
            uint64_t v185 = v222;
            sub_10000FC34(v184, v222, &qword_10051C7C8);
            uint64_t v186 = static HorizontalAlignment.center.getter();
            uint64_t v187 = (uint64_t)v234;
            uint64_t *v234 = v186;
            *(void *)(v187 + 8) = 0;
            *(unsigned char *)(v187 + 16) = 1;
            uint64_t v188 = sub_10000F214(&qword_10051C880);
            uint64_t v189 = sub_1000A0EE4(v185, (uint64_t *)(v187 + *(int *)(v188 + 44)));
            __chkstk_darwin(v189);
            *(&v219 - 2) = (char *)v185;
            uint64_t v190 = sub_10000F214(&qword_10051C120);
            uint64_t v191 = sub_100013AA8(&qword_10051C848, &qword_10051C7B0);
            uint64_t v192 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
            uint64_t v193 = v235;
            uint64_t v194 = v243;
            View.swipeActions<A>(edge:allowsFullSwipe:content:)();
            sub_10000FBD8(v187, &qword_10051C7B0);
            uint64_t v195 = v237;
            uint64_t v196 = v236;
            uint64_t v197 = v247;
            (*(void (**)(char *, char *, uint64_t))(v237 + 32))(v236, v193, v247);
            (*(void (**)(uint64_t *, char *, uint64_t))(v195 + 16))(v224, v196, v197);
            swift_storeEnumTagMultiPayload();
            uint64_t v283 = v194;
            unint64_t v284 = v190;
            uint64_t v285 = v191;
            uint64_t v286 = v192;
            swift_getOpaqueTypeConformance2();
            uint64_t v198 = (uint64_t)v225;
            _ConditionalContent<>.init(storage:)();
            sub_10000FB74(v198, v246, &qword_10051C778);
            swift_storeEnumTagMultiPayload();
            sub_10009BF30(&qword_10051C850, &qword_10051C7A0, &qword_10051C7B0, &qword_10051C848);
            sub_10009BD78();
            uint64_t v199 = (uint64_t)v249;
            _ConditionalContent<>.init(storage:)();
            sub_10000FBD8(v198, &qword_10051C778);
            sub_10000FB74(v199, v281, &qword_10051C7A8);
            swift_storeEnumTagMultiPayload();
            sub_10009BE9C();
            sub_10009C044();
            _ConditionalContent<>.init(storage:)();
            sub_10000FBD8(v199, &qword_10051C7A8);
            (*(void (**)(char *, uint64_t))(v195 + 8))(v196, v197);
            uint64_t v164 = &v254;
          }
          uint64_t v84 = *(v164 - 32);
          uint64_t v85 = &qword_10051C7C8;
          return sub_10000FBD8(v84, v85);
        }
        uint64_t v130 = (uint64_t)v86;
        v128(v125, 0, 1, v126);
        uint64_t v131 = v254;
        sub_10000FC34(v125, v254, &qword_10051C7D8);
        *uint64_t v86 = static HorizontalAlignment.center.getter();
        v86[1] = 0;
        *((unsigned char *)v86 + 16) = 1;
        uint64_t v132 = sub_10000F214(&qword_10051C888);
        sub_10009D6C8(v131, (uint64_t *)((char *)v86 + *(int *)(v132 + 44)));
        __chkstk_darwin(v133);
        *(&v219 - 2) = (char *)v131;
        uint64_t v134 = sub_10000F214(&qword_10051C120);
        uint64_t v135 = sub_100013AA8(&qword_10051C870, &qword_10051C828);
        uint64_t v136 = sub_100013AA8(&qword_10051E300, &qword_10051C120);
        uint64_t v137 = v130;
        uint64_t v138 = v111;
        View.swipeActions<A>(edge:allowsFullSwipe:content:)();
        sub_10000FBD8(v137, &qword_10051C828);
        uint64_t v139 = v264;
        uint64_t v140 = v129;
        long long v141 = v271;
        uint64_t v142 = v273;
        (*(void (**)(char *, char *, uint64_t))(v264 + 32))(v271, v138, v273);
        (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v266, v141, v142);
        swift_storeEnumTagMultiPayload();
        uint64_t v283 = v140;
        unint64_t v284 = v134;
        uint64_t v285 = v135;
        uint64_t v286 = v136;
        swift_getOpaqueTypeConformance2();
        uint64_t v143 = (uint64_t)v269;
        _ConditionalContent<>.init(storage:)();
        sub_10000FB74(v143, v270, &qword_10051C818);
        swift_storeEnumTagMultiPayload();
        sub_10009BF30(&qword_10051C868, &qword_10051C818, &qword_10051C828, &qword_10051C870);
        uint64_t v144 = (uint64_t)v272;
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v143, &qword_10051C818);
        sub_10000FB74(v144, v281, &qword_10051C820);
        swift_storeEnumTagMultiPayload();
        sub_10009BE9C();
        sub_10009C044();
        _ConditionalContent<>.init(storage:)();
        sub_10000FBD8(v144, &qword_10051C820);
        (*(void (**)(char *, uint64_t))(v139 + 8))(v141, v142);
        uint64_t v84 = v254;
        uint64_t v85 = &qword_10051C7D8;
      }
    }
  }
  return sub_10000FBD8(v84, v85);
}

unint64_t sub_10009BD78()
{
  unint64_t result = qword_10051C858;
  if (!qword_10051C858)
  {
    sub_10000F69C(&qword_10051C778);
    sub_10000F69C(&qword_10051C7B0);
    sub_10000F69C(&qword_10051C120);
    sub_100013AA8(&qword_10051C848, &qword_10051C7B0);
    sub_100013AA8(&qword_10051E300, &qword_10051C120);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C858);
  }
  return result;
}

unint64_t sub_10009BE9C()
{
  unint64_t result = qword_10051C860;
  if (!qword_10051C860)
  {
    sub_10000F69C(&qword_10051C820);
    sub_10009BF30(&qword_10051C868, &qword_10051C818, &qword_10051C828, &qword_10051C870);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C860);
  }
  return result;
}

uint64_t sub_10009BF30(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    sub_10000F69C(a3);
    sub_10000F69C(&qword_10051C120);
    sub_100013AA8(a4, a3);
    sub_100013AA8(&qword_10051E300, &qword_10051C120);
    swift_getOpaqueTypeConformance2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009C044()
{
  unint64_t result = qword_10051C878;
  if (!qword_10051C878)
  {
    sub_10000F69C(&qword_10051C7A8);
    sub_10009BF30(&qword_10051C850, &qword_10051C7A0, &qword_10051C7B0, &qword_10051C848);
    sub_10009BD78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C878);
  }
  return result;
}

uint64_t sub_10009C0E0()
{
  uint64_t v1 = sub_10000F214(&qword_10051C7E8);
  sub_10000F214(&qword_10051C910);
  uint64_t result = Binding.wrappedValue.getter();
  unsigned int v3 = *(_DWORD *)(v0 + *(int *)(v1 + 68));
  if (v3 == v18) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v0 + *(int *)(v1 + 76));
  unsigned int v6 = *v4;
  unsigned int v5 = v4[1];
  unsigned int v7 = v5 - v6;
  if (v5 < v6)
  {
    __break(1u);
    goto LABEL_34;
  }
  unsigned int v8 = v7 / 0x64;
  unsigned int v9 = v3 - v7 / 0x64;
  if (v3 < v8)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v9 < v6)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v18 >= v6 && v18 < v9)
  {
    uint64_t v19 = 11560;
    Binding.wrappedValue.getter();
    LODWORD(result) = v3 - v17;
    if (v3 >= v17) {
      goto LABEL_31;
    }
    __break(1u);
LABEL_30:
    uint64_t v19 = 11048;
    Binding.wrappedValue.getter();
    uint64_t result = v17 - v3;
    if (v17 >= v3)
    {
LABEL_31:
      v15._countAndFlagsBits = sub_100098DB4(result);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 41;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      return v19;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  unsigned int v11 = v3 + v8;
  if (__CFADD__(v3, v8)) {
    goto LABEL_36;
  }
  if (v5 < v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v18 >= v11 && v5 >= v18) {
    goto LABEL_30;
  }
  if (v11 < v9)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v18 < v9 || v18 >= v11) {
    return 1066895586;
  }
  else {
    return 0;
  }
}

uint64_t sub_10009C290(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = sub_10000F214(a1);
  sub_10000F214(a2);
  uint64_t result = Binding.wrappedValue.getter();
  unint64_t v8 = *(void *)(v3 + *(int *)(v6 + 68));
  if (v8 == v23) {
    return 0;
  }
  unsigned int v9 = (unint64_t *)(v3 + *(int *)(v6 + 76));
  unint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  unint64_t v12 = v10 - v11;
  if (v10 < v11)
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v13 = v12 / 0x64;
  unint64_t v14 = v8 - v12 / 0x64;
  if (v8 < v13)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 < v11)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v23 >= v11 && v23 < v14)
  {
    uint64_t v24 = 11560;
    Binding.wrappedValue.getter();
    uint64_t result = v8 - v22;
    if (v8 >= v22) {
      goto LABEL_31;
    }
    __break(1u);
LABEL_30:
    uint64_t v24 = 11048;
    Binding.wrappedValue.getter();
    uint64_t result = v22 - v8;
    if (v22 >= v8)
    {
LABEL_31:
      v20._countAndFlagsBits = a3(result);
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 41;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      return v24;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  unint64_t v16 = v8 + v13;
  if (__CFADD__(v8, v13)) {
    goto LABEL_36;
  }
  if (v10 < v16)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v23 >= v16 && v10 >= v23) {
    goto LABEL_30;
  }
  if (v16 < v14)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v23 < v14 || v23 >= v16) {
    return 1066895586;
  }
  else {
    return 0;
  }
}

uint64_t sub_10009C44C()
{
  uint64_t v1 = sub_10000F214(&qword_10051C840);
  sub_10000F214(&qword_10051C898);
  uint64_t result = Binding.wrappedValue.getter();
  uint64_t v3 = *(void *)(v0 + *(int *)(v1 + 68));
  if (v3 == v18) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(v0 + *(int *)(v1 + 76));
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = v7 / 100;
  uint64_t v9 = v3 - v7 / 100;
  if (__OFSUB__(v3, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v9 < v6)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v18 >= v6 && v18 < v9)
  {
    uint64_t v19 = 11560;
    Binding.wrappedValue.getter();
    uint64_t result = v3 - v17;
    if (!__OFSUB__(v3, v17)) {
      goto LABEL_32;
    }
    __break(1u);
LABEL_31:
    uint64_t v19 = 11048;
    Binding.wrappedValue.getter();
    uint64_t result = v17 - v3;
    if (!__OFSUB__(v17, v3))
    {
LABEL_32:
      v15._countAndFlagsBits = sub_10009922C(result);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 41;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      return v19;
    }
LABEL_40:
    __break(1u);
    return result;
  }
  uint64_t v11 = v3 + v8;
  if (__OFADD__(v3, v8)) {
    goto LABEL_37;
  }
  if (v5 < v11)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v18 >= v11 && v5 >= v18) {
    goto LABEL_31;
  }
  if (v11 < v9)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v18 < v9 || v18 >= v11) {
    return 1066895586;
  }
  else {
    return 0;
  }
}

uint64_t sub_10009C60C()
{
  uint64_t v1 = type metadata accessor for EnvironmentValues();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  __chkstk_darwin(v1);
  uint64_t v34 = (uint64_t)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - v8;
  unint64_t v10 = (int *)sub_10000F214(&qword_10051C7E8);
  uint64_t v11 = v10[16];
  uint64_t v12 = *(unsigned int *)(v0 + v10[17]);
  unint64_t v13 = (unsigned int *)(v0 + v10[19]);
  uint64_t v14 = *v13;
  uint64_t v37 = v13[1];
  uint64_t v15 = v0 + v11;
  uint64_t v38 = sub_10000F214(&qword_10051C910);
  uint64_t v39 = v15;
  Binding.wrappedValue.getter();
  if (v41 == v14)
  {
    double v16 = 0.0;
    double v17 = 0.0;
    if (v14 == v12) {
      goto LABEL_20;
    }
    goto LABEL_3;
  }
  if (v12 == v14)
  {
    if (v41 == v12)
    {
      double v17 = 0.5;
      double v16 = 0.0;
      goto LABEL_20;
    }
    double v16 = 0.5;
    double v17 = 0.5;
    double v18 = 0.5;
    goto LABEL_16;
  }
  double v19 = (double)(v12 - v14);
  double v18 = (double)(v41 - v14) / v19;
  double v17 = 1.0;
  double v16 = 0.0;
  if (v18 >= 1.0)
  {
    if (v41 == v12) {
      goto LABEL_20;
    }
    double v16 = 0.5;
    double v18 = 1.0;
    goto LABEL_16;
  }
  if (v18 >= 0.0)
  {
    if (v41 == v12)
    {
LABEL_19:
      double v17 = v18;
      goto LABEL_20;
    }
    double v16 = 0.5;
    double v17 = (double)(v41 - v14) / v19;
LABEL_16:
    if (v37 == v12) {
      goto LABEL_20;
    }
    double v16 = fmin((double)(v41 - v12) / (double)(v37 - v12), 1.0);
    if (v16 < 0.0) {
      double v16 = 0.0;
    }
    goto LABEL_19;
  }
  double v17 = 0.0;
  if (v41 != v12)
  {
LABEL_3:
    double v16 = 0.5;
    double v18 = 0.0;
    goto LABEL_16;
  }
LABEL_20:
  sub_10027CA80((uint64_t)v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for ColorScheme.light(_:), v3);
  char v20 = static ColorScheme.== infix(_:_:)();
  Swift::String v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v6, v3);
  v21(v9, v3);
  if (v20) {
    uint64_t v22 = static Color.black.getter();
  }
  else {
    uint64_t v22 = static Color.white.getter();
  }
  uint64_t v23 = v22;
  uint64_t result = Binding.wrappedValue.getter();
  unsigned int v25 = *v13 - 2;
  if (*v13 < 2)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (!v12)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unsigned int v26 = v12 - 1;
  if ((int)v12 - 1 < v25)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v40 < v26 && v40 >= v25)
  {
    double v16 = 1.0 - v17;
    uint64_t v27 = v34;
    sub_10027CE00(v34);
LABEL_35:
    uint64_t v31 = sub_10009D394(v16);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v27, v36);
    return v31;
  }
  if (v12 == -1) {
    goto LABEL_44;
  }
  unsigned int v28 = v13[1];
  unsigned int v29 = v28 + 2;
  if (v28 >= 0xFFFFFFFE)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  unsigned int v30 = v12 + 1;
  if (v29 < (int)v12 + 1)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v40 >= v30 && v29 >= v40)
  {
    uint64_t v27 = v34;
    sub_10027CE00(v34);
    goto LABEL_35;
  }
  if (v30 >= v26)
  {
    if (v40 < v26 || v40 >= v30)
    {
      uint64_t v32 = static Color.purple.getter();
      swift_release();
      return v32;
    }
    return v23;
  }
LABEL_47:
  __break(1u);
  return result;
}

int *sub_10009CA64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = type metadata accessor for EnvironmentValues();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v43 = (uint64_t)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ColorScheme();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v40 - v13;
  uint64_t result = (int *)sub_10000F214(a1);
  uint64_t v16 = *(void *)(v2 + result[17]);
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  double v17 = a2;
  uint64_t v42 = v6;
  double v18 = (uint64_t *)(v2 + result[19]);
  uint64_t v19 = *v18;
  if (*v18 < 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v20 = v18[1];
  if (v20 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v40[1] = result;
  uint64_t v41 = v5;
  uint64_t v21 = result[16];
  uint64_t v45 = v2;
  uint64_t v22 = v2 + v21;
  sub_10000F214(v17);
  uint64_t v44 = v22;
  uint64_t result = (int *)Binding.wrappedValue.getter();
  if ((v46 & 0x8000000000000000) != 0)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v46 == v19)
  {
    double v23 = 0.0;
    double v24 = 0.0;
    if (v16 == v19) {
      goto LABEL_26;
    }
LABEL_7:
    double v23 = 0.5;
    double v25 = 0.0;
    if (v20 == v16) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  uint64_t v26 = v16 - v19;
  if (v16 == v19)
  {
    if (v46 == v16)
    {
      double v24 = 0.5;
      double v23 = 0.0;
      goto LABEL_26;
    }
    double v23 = 0.5;
    double v24 = 0.5;
    double v25 = 0.5;
    if (v20 == v16) {
      goto LABEL_26;
    }
LABEL_23:
    double v23 = fmin((double)(uint64_t)(v46 - v16) / (double)(v20 - v16), 1.0);
    if (v23 < 0.0) {
      double v23 = 0.0;
    }
    goto LABEL_25;
  }
  double v25 = (double)(uint64_t)(v46 - v19) / (double)v26;
  double v24 = 1.0;
  if (v25 >= 1.0)
  {
    double v23 = 0.0;
    if (v46 == v16) {
      goto LABEL_26;
    }
    double v23 = 0.5;
    double v25 = 1.0;
    if (v20 == v16) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  double v23 = 0.0;
  if (v25 >= 0.0)
  {
    if (v46 == v16)
    {
LABEL_25:
      double v24 = v25;
      goto LABEL_26;
    }
    double v23 = 0.5;
    double v24 = (double)(uint64_t)(v46 - v19) / (double)v26;
    if (v20 == v16) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  double v24 = 0.0;
  if (v46 != v16) {
    goto LABEL_7;
  }
LABEL_26:
  sub_10027CA80((uint64_t)v14);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for ColorScheme.light(_:), v8);
  char v27 = static ColorScheme.== infix(_:_:)();
  unsigned int v28 = *(void (**)(char *, uint64_t))(v9 + 8);
  v28(v11, v8);
  v28(v14, v8);
  if (v27) {
    uint64_t v29 = static Color.black.getter();
  }
  else {
    uint64_t v29 = static Color.white.getter();
  }
  uint64_t v30 = v29;
  uint64_t result = (int *)Binding.wrappedValue.getter();
  unint64_t v31 = *v18 - 2;
  if ((unint64_t)*v18 < 2) {
    goto LABEL_52;
  }
  if (!v16)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v32 = v16 - 1;
  if (v16 - 1 < v31)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v46 < v32 && v46 >= v31)
  {
    double v23 = 1.0 - v24;
    uint64_t v33 = v43;
    sub_10027CE00(v43);
LABEL_42:
    uint64_t v38 = sub_10009D394(v23);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v33, v41);
    return (int *)v38;
  }
  unint64_t v34 = v16 + 1;
  if (__OFADD__(v16, 1)) {
    goto LABEL_55;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v35 = v18[1];
  BOOL v36 = __CFADD__(v35, 2);
  unint64_t v37 = v35 + 2;
  if (v36)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v37 < v34)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v46 >= v34 && v37 >= v46)
  {
    uint64_t v33 = v43;
    sub_10027CE00(v43);
    goto LABEL_42;
  }
  if (v34 >= v32)
  {
    if (v46 < v32 || v46 >= v34)
    {
      uint64_t v39 = static Color.purple.getter();
      swift_release();
      return (int *)v39;
    }
    return (int *)v30;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_10009CF20()
{
  uint64_t v1 = type metadata accessor for EnvironmentValues();
  uint64_t v36 = *(void *)(v1 - 8);
  uint64_t v37 = v1;
  __chkstk_darwin(v1);
  uint64_t v35 = (uint64_t)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = (int *)sub_10000F214(&qword_10051C840);
  uint64_t v11 = v10[16];
  uint64_t v12 = *(void *)(v0 + v10[17]);
  uint64_t v13 = (void *)(v0 + v10[19]);
  uint64_t v14 = *v13;
  uint64_t v38 = v13[1];
  uint64_t v15 = v0 + v11;
  uint64_t v39 = sub_10000F214(&qword_10051C898);
  uint64_t v40 = v15;
  uint64_t result = Binding.wrappedValue.getter();
  if (v41 == v14)
  {
    double v17 = 0.0;
    double v18 = 0.0;
    if (v14 == v12) {
      goto LABEL_24;
    }
    goto LABEL_3;
  }
  if (v12 == v14)
  {
    if (v41 == v12)
    {
      double v18 = 0.5;
      double v17 = 0.0;
      goto LABEL_24;
    }
    double v17 = 0.5;
    double v18 = 0.5;
    double v19 = 0.5;
    goto LABEL_18;
  }
  if (__OFSUB__(v41, v14))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v20 = v12 - v14;
  if (__OFSUB__(v12, v14))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  double v19 = (double)(v41 - v14) / (double)v20;
  double v18 = 1.0;
  double v17 = 0.0;
  if (v19 >= 1.0)
  {
    if (v41 == v12) {
      goto LABEL_24;
    }
    double v17 = 0.5;
    double v19 = 1.0;
    goto LABEL_18;
  }
  if (v19 >= 0.0)
  {
    if (v41 == v12)
    {
LABEL_23:
      double v18 = v19;
      goto LABEL_24;
    }
    double v17 = 0.5;
    double v18 = (double)(v41 - v14) / (double)v20;
LABEL_18:
    if (v38 == v12) {
      goto LABEL_24;
    }
    if (__OFSUB__(v41, v12))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (__OFSUB__(v38, v12))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    double v17 = fmin((double)(v41 - v12) / (double)(v38 - v12), 1.0);
    if (v17 < 0.0) {
      double v17 = 0.0;
    }
    goto LABEL_23;
  }
  double v18 = 0.0;
  if (v41 != v12)
  {
LABEL_3:
    double v17 = 0.5;
    double v19 = 0.0;
    goto LABEL_18;
  }
LABEL_24:
  sub_10027CA80((uint64_t)v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for ColorScheme.light(_:), v3);
  char v21 = static ColorScheme.== infix(_:_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v6, v3);
  v22(v9, v3);
  if (v21) {
    uint64_t v23 = static Color.black.getter();
  }
  else {
    uint64_t v23 = static Color.white.getter();
  }
  uint64_t v24 = v23;
  uint64_t result = Binding.wrappedValue.getter();
  uint64_t v25 = *v13 - 2;
  if (__OFSUB__(*v13, 2))
  {
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v26 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v26 < v25)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v41 >= v25 && v41 < v26)
  {
    double v17 = 1.0 - v18;
    uint64_t v27 = v35;
    sub_10027CE00(v35);
LABEL_39:
    uint64_t v32 = sub_10009D394(v17);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v27, v37);
    return v32;
  }
  uint64_t v28 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_48;
  }
  uint64_t v29 = v13[1];
  BOOL v30 = __OFADD__(v29, 2);
  uint64_t v31 = v29 + 2;
  if (v30)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v31 < v28)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v41 >= v28 && v31 >= v41)
  {
    uint64_t v27 = v35;
    sub_10027CE00(v35);
    goto LABEL_39;
  }
  if (v28 >= v26)
  {
    if (v41 < v26 || v41 >= v28)
    {
      uint64_t v33 = static Color.purple.getter();
      swift_release();
      return v33;
    }
    return v24;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_10009D394(double a1)
{
  double v20 = a1;
  uint64_t v1 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Color.resolve(in:)();
  Color.Resolved.red.getter();
  float v16 = v5;
  v15[1] = v5;
  Color.Resolved.green.getter();
  float v17 = v6;
  double v18 = v6;
  Color.Resolved.blue.getter();
  float v19 = v7;
  uint64_t v8 = enum case for Color.RGBColorSpace.sRGB(_:);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 104);
  ((void (*)(char *, void, uint64_t))v9)(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
  Color.init(_:red:green:blue:opacity:)();
  Color.resolve(in:)();
  Color.Resolved.red.getter();
  Color.Resolved.green.getter();
  Color.Resolved.blue.getter();
  if (v10.n128_f32[0] >= v19) {
    double v11 = v19;
  }
  else {
    double v11 = v10.n128_f32[0];
  }
  if (v19 > v10.n128_f32[0]) {
    double v12 = v19;
  }
  else {
    double v12 = v10.n128_f32[0];
  }
  if (v11 != v12) {
    v10.n128_f64[0] = v11 + v20 / (v12 - v11);
  }
  v9(v4, v8, v1, v10);
  uint64_t v13 = Color.init(_:red:green:blue:opacity:)();
  swift_release();
  return v13;
}

void sub_10009D6C8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051C7D8);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v3);
  float v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000F214(&qword_10051C8A0);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v55 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v41 - v10;
  uint64_t v41 = static VerticalAlignment.center.getter();
  sub_10009F058(a1, &qword_10051C7D8, &qword_10051C920, sub_100098B78, sub_100098B78, (uint64_t)v70);
  uint64_t v48 = v70[0];
  uint64_t v43 = v70[1];
  int v47 = v71;
  uint64_t v50 = v72;
  uint64_t v52 = v73;
  uint64_t v51 = v74;
  int v42 = v75;
  uint64_t v54 = v76;
  uint64_t v49 = sub_10009CA64(&qword_10051C7D8, &qword_10051C920);
  sub_10000FB74(a1, (uint64_t)v7, &qword_10051C7D8);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v7, v13 + v12, &qword_10051C7D8);
  sub_10000FB74(a1, (uint64_t)v7, &qword_10051C7D8);
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v7, v15 + v12, &qword_10051C7D8);
  uint64_t v16 = Binding.init(get:set:)();
  float v17 = (unint64_t *)(a1 + *(int *)(v4 + 84));
  if ((double)*v17 > (double)v17[1])
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v18 = v60;
  uint64_t v19 = v61;
  double v20 = __chkstk_darwin(v16);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v21;
  uint64_t v65 = v22;
  double v66 = v20;
  uint64_t v64 = 0x3FF0000000000000;
  if ((*v17 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v60 = *v17;
  swift_retain();
  swift_retain();
  uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v61 = v23;
  LOBYTE(v62) = 0;
  uint64_t v63 = _swiftEmptyArrayStorage;
  if ((v17[1] & 0x8000000000000000) == 0)
  {
    uint64_t v56 = v17[1];
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = v24;
    char v58 = 0;
    uint64_t v59 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_10051C8A8);
    sub_1000A231C();
    sub_1000A23E0();
    uint64_t v25 = v53;
    Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
    swift_release();
    swift_release();
    uint64_t v26 = v45;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    uint64_t v28 = v55;
    uint64_t v29 = v46;
    v27(v55, v25, v46);
    BOOL v30 = v44;
    *uint64_t v44 = v41;
    v30[1] = 0;
    *((unsigned char *)v30 + 16) = 1;
    uint64_t v31 = v48;
    uint64_t v32 = v43;
    v30[3] = v48;
    v30[4] = v32;
    *((unsigned char *)v30 + 40) = v47;
    uint64_t v33 = v52;
    v30[6] = v50;
    v30[7] = v33;
    v30[8] = v51;
    char v34 = v42;
    *((unsigned char *)v30 + 72) = v42;
    uint64_t v35 = v49;
    v30[10] = v54;
    v30[11] = (uint64_t)v35;
    uint64_t v36 = sub_10000F214(&qword_10051C8D0);
    v27((char *)v30 + *(int *)(v36 + 48), v28, v29);
    uint64_t v37 = v31;
    LOBYTE(v31) = v47;
    sub_1000807A8(v37, v32, v47);
    swift_bridgeObjectRetain();
    uint64_t v38 = v33;
    uint64_t v39 = v51;
    sub_1000807A8(v38, v51, v34);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v26 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v40(v53, v29);
    v40(v55, v29);
    sub_100012FAC(v48, v32, v31);
    swift_bridgeObjectRelease();
    sub_100012FAC(v52, v39, v34);
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10009DD50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10051C7E8);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000F214(&qword_10051C8A0);
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  char v58 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v53 = (char *)&v45 - v11;
  uint64_t v45 = static VerticalAlignment.center.getter();
  sub_10009F7E0(a1, (uint64_t)v73);
  uint64_t v51 = v73[0];
  uint64_t v50 = v73[1];
  int v46 = v74;
  uint64_t v52 = v75;
  uint64_t v56 = v76;
  uint64_t v55 = v77;
  int v47 = v78;
  uint64_t v57 = v79;
  uint64_t v54 = sub_10009C60C();
  sub_10000FB74(a1, (uint64_t)v8, &qword_10051C7E8);
  type metadata accessor for MainActor();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v8, v14 + v13, &qword_10051C7E8);
  sub_10000FB74(a1, (uint64_t)v8, &qword_10051C7E8);
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v8, v16 + v13, &qword_10051C7E8);
  uint64_t result = Binding.init(get:set:)();
  uint64_t v18 = (unsigned int *)(a1 + *(int *)(v5 + 84));
  LODWORD(v19) = *v18;
  LODWORD(v20) = v18[1];
  if ((double)v19 > (double)v20)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = v63;
    uint64_t v22 = v64;
    double v23 = __chkstk_darwin(result);
    uint64_t v70 = v21;
    uint64_t v71 = v22;
    uint64_t v72 = v24;
    double v68 = v23;
    uint64_t v69 = v25;
    uint64_t v67 = 0x3FF0000000000000;
    uint64_t v63 = *v18;
    swift_retain();
    swift_retain();
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = v26;
    LOBYTE(v65) = 0;
    double v66 = _swiftEmptyArrayStorage;
    uint64_t v59 = v18[1];
    uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v60 = v27;
    char v61 = 0;
    uint64_t v62 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_10051C8A8);
    sub_1000A231C();
    sub_1000A23E0();
    uint64_t v28 = v53;
    Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
    swift_release();
    swift_release();
    uint64_t v29 = v48;
    BOOL v30 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    uint64_t v31 = v58;
    uint64_t v32 = v28;
    uint64_t v33 = v49;
    v30(v58, v32, v49);
    *(void *)a2 = v45;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    uint64_t v34 = v51;
    uint64_t v35 = v50;
    *(void *)(a2 + 24) = v51;
    *(void *)(a2 + 32) = v35;
    char v36 = v46;
    *(unsigned char *)(a2 + 40) = v46;
    uint64_t v37 = v56;
    *(void *)(a2 + 48) = v52;
    *(void *)(a2 + 56) = v37;
    *(void *)(a2 + 64) = v55;
    LOBYTE(v22) = v47;
    *(unsigned char *)(a2 + 72) = v47;
    uint64_t v38 = v54;
    *(void *)(a2 + 80) = v57;
    *(void *)(a2 + 88) = v38;
    uint64_t v39 = sub_10000F214(&qword_10051C8D0);
    v30((char *)(a2 + *(int *)(v39 + 48)), v31, v33);
    uint64_t v40 = v34;
    uint64_t v41 = v50;
    sub_1000807A8(v40, v50, v36);
    swift_bridgeObjectRetain();
    uint64_t v42 = v37;
    uint64_t v43 = v55;
    sub_1000807A8(v42, v55, v22);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v29 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v44(v53, v33);
    v44(v58, v33);
    sub_100012FAC(v51, v41, v36);
    swift_bridgeObjectRelease();
    sub_100012FAC(v56, v43, v22);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10009E390(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051C7F8);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000F214(&qword_10051C8A0);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v55 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v41 - v10;
  uint64_t v41 = static VerticalAlignment.center.getter();
  sub_10009F058(a1, &qword_10051C7F8, &qword_10051C900, sub_100098FF0, sub_100098FF0, (uint64_t)v70);
  uint64_t v48 = v70[0];
  uint64_t v43 = v70[1];
  int v47 = v71;
  uint64_t v50 = v72;
  uint64_t v52 = v73;
  uint64_t v51 = v74;
  int v42 = v75;
  uint64_t v54 = v76;
  uint64_t v49 = sub_10009CA64(&qword_10051C7F8, &qword_10051C900);
  sub_10000FB74(a1, (uint64_t)v7, &qword_10051C7F8);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v7, v13 + v12, &qword_10051C7F8);
  sub_10000FB74(a1, (uint64_t)v7, &qword_10051C7F8);
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v7, v15 + v12, &qword_10051C7F8);
  uint64_t v16 = Binding.init(get:set:)();
  float v17 = (unint64_t *)(a1 + *(int *)(v4 + 84));
  if ((double)*v17 > (double)v17[1])
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v18 = v60;
  uint64_t v19 = v61;
  double v20 = __chkstk_darwin(v16);
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v21;
  uint64_t v65 = v22;
  double v66 = v20;
  uint64_t v64 = 0x3FF0000000000000;
  if ((*v17 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v60 = *v17;
  swift_retain();
  swift_retain();
  uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v61 = v23;
  LOBYTE(v62) = 0;
  uint64_t v63 = _swiftEmptyArrayStorage;
  if ((v17[1] & 0x8000000000000000) == 0)
  {
    uint64_t v56 = v17[1];
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = v24;
    char v58 = 0;
    uint64_t v59 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_10051C8A8);
    sub_1000A231C();
    sub_1000A23E0();
    uint64_t v25 = v53;
    Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
    swift_release();
    swift_release();
    uint64_t v26 = v45;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
    uint64_t v28 = v55;
    uint64_t v29 = v46;
    v27(v55, v25, v46);
    BOOL v30 = v44;
    *uint64_t v44 = v41;
    v30[1] = 0;
    *((unsigned char *)v30 + 16) = 1;
    uint64_t v31 = v48;
    uint64_t v32 = v43;
    v30[3] = v48;
    v30[4] = v32;
    *((unsigned char *)v30 + 40) = v47;
    uint64_t v33 = v52;
    v30[6] = v50;
    v30[7] = v33;
    v30[8] = v51;
    char v34 = v42;
    *((unsigned char *)v30 + 72) = v42;
    uint64_t v35 = v49;
    v30[10] = v54;
    v30[11] = (uint64_t)v35;
    uint64_t v36 = sub_10000F214(&qword_10051C8D0);
    v27((char *)v30 + *(int *)(v36 + 48), v28, v29);
    uint64_t v37 = v31;
    LOBYTE(v31) = v47;
    sub_1000807A8(v37, v32, v47);
    swift_bridgeObjectRetain();
    uint64_t v38 = v33;
    uint64_t v39 = v51;
    sub_1000807A8(v38, v51, v34);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v26 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v40(v53, v29);
    v40(v55, v29);
    sub_100012FAC(v48, v32, v31);
    swift_bridgeObjectRelease();
    sub_100012FAC(v52, v39, v34);
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10009EA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10051C840);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000F214(&qword_10051C8A0);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v56 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v51 = (char *)&v43 - v11;
  uint64_t v43 = static VerticalAlignment.center.getter();
  sub_10009F35C(a1, (uint64_t)v71);
  uint64_t v49 = v71[0];
  uint64_t v48 = v71[1];
  int v44 = v72;
  uint64_t v50 = v73;
  uint64_t v54 = v74;
  uint64_t v53 = v75;
  int v45 = v76;
  uint64_t v55 = v77;
  uint64_t v52 = sub_10009CF20();
  sub_10000FB74(a1, (uint64_t)v8, &qword_10051C840);
  type metadata accessor for MainActor();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v8, v14 + v13, &qword_10051C840);
  sub_10000FB74(a1, (uint64_t)v8, &qword_10051C840);
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = &protocol witness table for MainActor;
  sub_10000FC34((uint64_t)v8, v16 + v13, &qword_10051C840);
  uint64_t result = Binding.init(get:set:)();
  uint64_t v18 = (uint64_t *)(a1 + *(int *)(v5 + 84));
  if ((double)*v18 > (double)v18[1])
  {
    __break(1u);
  }
  else
  {
    uint64_t v19 = v61;
    uint64_t v20 = v62;
    double v21 = __chkstk_darwin(result);
    uint64_t v68 = v19;
    uint64_t v69 = v20;
    uint64_t v70 = v22;
    uint64_t v66 = v23;
    double v67 = v21;
    uint64_t v65 = 0x3FF0000000000000;
    uint64_t v61 = *v18;
    swift_retain();
    swift_retain();
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = v24;
    LOBYTE(v63) = 0;
    uint64_t v64 = _swiftEmptyArrayStorage;
    uint64_t v57 = v18[1];
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v58 = v25;
    char v59 = 0;
    uint64_t v60 = _swiftEmptyArrayStorage;
    sub_10000F214(&qword_10051C8A8);
    sub_1000A231C();
    sub_1000A23E0();
    uint64_t v26 = v51;
    Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
    swift_release();
    swift_release();
    uint64_t v27 = v46;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
    uint64_t v29 = v56;
    BOOL v30 = v26;
    uint64_t v31 = v47;
    v28(v56, v30, v47);
    *(void *)a2 = v43;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    uint64_t v32 = v49;
    uint64_t v33 = v48;
    *(void *)(a2 + 24) = v49;
    *(void *)(a2 + 32) = v33;
    char v34 = v44;
    *(unsigned char *)(a2 + 40) = v44;
    uint64_t v35 = v54;
    *(void *)(a2 + 48) = v50;
    *(void *)(a2 + 56) = v35;
    *(void *)(a2 + 64) = v53;
    LOBYTE(v20) = v45;
    *(unsigned char *)(a2 + 72) = v45;
    uint64_t v36 = v52;
    *(void *)(a2 + 80) = v55;
    *(void *)(a2 + 88) = v36;
    uint64_t v37 = sub_10000F214(&qword_10051C8D0);
    v28((char *)(a2 + *(int *)(v37 + 48)), v29, v31);
    uint64_t v38 = v32;
    uint64_t v39 = v48;
    sub_1000807A8(v38, v48, v34);
    swift_bridgeObjectRetain();
    uint64_t v40 = v35;
    uint64_t v41 = v53;
    sub_1000807A8(v40, v53, v20);
    int v42 = *(void (**)(char *, uint64_t))(v27 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v42(v51, v31);
    v42(v56, v31);
    sub_100012FAC(v49, v39, v34);
    swift_bridgeObjectRelease();
    sub_100012FAC(v54, v41, v20);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10009F058@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X8>)
{
  int v44 = a5;
  uint64_t v8 = a2;
  uint64_t v40 = a2;
  uint64_t v11 = type metadata accessor for Font.TextStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + *(int *)(sub_10000F214(v8) + 72));
  uint64_t v16 = v15[1];
  uint64_t v46 = *v15;
  uint64_t v47 = v16;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  uint64_t v18 = a3;
  sub_10000F214(a3);
  Binding.wrappedValue.getter();
  v19._countAndFlagsBits = a4(v45);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  static Font.callout.getter();
  uint64_t v20 = Text.font(_:)();
  uint64_t v41 = v21;
  uint64_t v42 = v20;
  LOBYTE(v8) = v22;
  uint64_t v43 = v23;
  swift_bridgeObjectRelease();
  swift_release();
  LOBYTE(a3) = v8 & 1;
  sub_10009C290(v40, v18, v44);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Font.TextStyle.callout(_:), v11);
  static Font.custom(_:size:relativeTo:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  LOBYTE(v8) = v27;
  swift_bridgeObjectRelease();
  swift_release();
  LOBYTE(a1) = v8 & 1;
  uint64_t v28 = Text.baselineOffset(_:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  sub_100012FAC(v24, v26, a1);
  swift_bridgeObjectRelease();
  LOBYTE(v46) = (_BYTE)a3;
  uint64_t v36 = v41;
  uint64_t v35 = v42;
  sub_1000807A8(v42, v41, (char)a3);
  uint64_t v37 = v43;
  swift_bridgeObjectRetain();
  sub_1000807A8(v28, v30, v34);
  swift_bridgeObjectRetain();
  sub_100012FAC(v28, v30, v34);
  swift_bridgeObjectRelease();
  sub_100012FAC(v35, v36, v46);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a6 = v35;
  *(void *)(a6 + 8) = v36;
  *(unsigned char *)(a6 + 16) = (_BYTE)a3;
  *(void *)(a6 + 24) = v37;
  *(void *)(a6 + 32) = v28;
  *(void *)(a6 + 40) = v30;
  *(unsigned char *)(a6 + 48) = v34;
  *(void *)(a6 + 56) = v32;
  return result;
}

uint64_t sub_10009F35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Font.TextStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(sub_10000F214(&qword_10051C840) + 72));
  uint64_t v9 = v8[1];
  uint64_t v39 = *v8;
  uint64_t v40 = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  sub_10000F214(&qword_10051C898);
  Binding.wrappedValue.getter();
  v11._countAndFlagsBits = sub_10009922C(v38);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  static Font.callout.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  char v15 = v14;
  uint64_t v37 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  char v17 = v15 & 1;
  sub_10009C44C();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.callout(_:), v4);
  static Font.custom(_:size:relativeTo:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v18 = Text.font(_:)();
  uint64_t v20 = v19;
  char v22 = v21;
  swift_bridgeObjectRelease();
  swift_release();
  char v23 = v22 & 1;
  uint64_t v24 = Text.baselineOffset(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  LOBYTE(a1) = v29 & 1;
  sub_100012FAC(v18, v20, v23);
  swift_bridgeObjectRelease();
  LOBYTE(v39) = v17;
  uint64_t v31 = v35;
  uint64_t v30 = v36;
  sub_1000807A8(v36, v35, v17);
  uint64_t v32 = v37;
  swift_bridgeObjectRetain();
  sub_1000807A8(v24, v26, a1);
  swift_bridgeObjectRetain();
  sub_100012FAC(v24, v26, a1);
  swift_bridgeObjectRelease();
  sub_100012FAC(v30, v31, v39);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v31;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v26;
  *(unsigned char *)(a2 + 48) = a1;
  *(void *)(a2 + 56) = v28;
  return result;
}

__n128 sub_10009F640@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t)@<X4>, __n128 *a6@<X8>)
{
  uint64_t v21 = static VerticalAlignment.center.getter();
  sub_10009F058(a1, a2, a3, a4, a5, (uint64_t)v22);
  unint64_t v12 = v22[0];
  unint64_t v13 = v22[1];
  unsigned __int8 v14 = v23;
  __n128 v20 = v24;
  unint64_t v15 = v25;
  unsigned __int8 v16 = v26;
  unint64_t v19 = v27;
  char v17 = sub_10009CA64(a2, a3);
  a6->n128_u64[0] = v21;
  a6->n128_u64[1] = 0;
  a6[1].n128_u8[0] = 1;
  a6[1].n128_u64[1] = v12;
  a6[2].n128_u64[0] = v13;
  a6[2].n128_u8[8] = v14;
  __n128 result = v20;
  a6[3] = v20;
  a6[4].n128_u64[0] = v15;
  a6[4].n128_u8[8] = v16;
  a6[5].n128_u64[0] = v19;
  a6[5].n128_u64[1] = (unint64_t)v17;
  return result;
}

__n128 sub_10009F720@<Q0>(uint64_t a1@<X0>, void *(*a2)(void *__return_ptr, uint64_t)@<X1>, uint64_t (*a3)(void *)@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = static VerticalAlignment.center.getter();
  uint64_t v8 = a2(v19, a1);
  unint64_t v9 = v19[0];
  unint64_t v10 = v19[1];
  unsigned __int8 v11 = v20;
  __n128 v17 = v21;
  unint64_t v12 = v22;
  unsigned __int8 v13 = v23;
  unint64_t v14 = v24;
  uint64_t v15 = a3(v8);
  a4->n128_u64[0] = v7;
  a4->n128_u64[1] = 0;
  a4[1].n128_u8[0] = 1;
  a4[1].n128_u64[1] = v9;
  a4[2].n128_u64[0] = v10;
  a4[2].n128_u8[8] = v11;
  __n128 result = v17;
  a4[3] = v17;
  a4[4].n128_u64[0] = v12;
  a4[4].n128_u8[8] = v13;
  a4[5].n128_u64[0] = v14;
  a4[5].n128_u64[1] = v15;
  return result;
}

uint64_t sub_10009F7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Font.TextStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(sub_10000F214(&qword_10051C7E8) + 72));
  uint64_t v9 = v8[1];
  uint64_t v38 = *v8;
  uint64_t v39 = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  sub_10000F214(&qword_10051C910);
  Binding.wrappedValue.getter();
  v11._countAndFlagsBits = sub_100098DB4(v37);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  static Font.callout.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v34 = v13;
  uint64_t v35 = v12;
  char v15 = v14;
  uint64_t v36 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  char v17 = v15 & 1;
  sub_10009C0E0();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.callout(_:), v4);
  static Font.custom(_:size:relativeTo:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v18 = Text.font(_:)();
  uint64_t v20 = v19;
  char v22 = v21;
  swift_bridgeObjectRelease();
  swift_release();
  char v23 = v22 & 1;
  uint64_t v24 = Text.baselineOffset(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  LOBYTE(a1) = v29 & 1;
  sub_100012FAC(v18, v20, v23);
  swift_bridgeObjectRelease();
  LOBYTE(v38) = v17;
  uint64_t v31 = v34;
  uint64_t v30 = v35;
  sub_1000807A8(v35, v34, v17);
  uint64_t v32 = v36;
  swift_bridgeObjectRetain();
  sub_1000807A8(v24, v26, a1);
  swift_bridgeObjectRetain();
  sub_100012FAC(v24, v26, a1);
  swift_bridgeObjectRelease();
  sub_100012FAC(v30, v31, v38);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v31;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v26;
  *(unsigned char *)(a2 + 48) = a1;
  *(void *)(a2 + 56) = v28;
  return result;
}

uint64_t sub_10009FAC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000F214(a2);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = sub_10000F214(&qword_10051C128);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.cancel.getter();
  uint64_t v10 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  sub_10000FB74(a1, (uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  sub_10000FC34((uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, a2);
  sub_10000F214((uint64_t *)&unk_10051E360);
  sub_100013AA8(&qword_10051C130, (uint64_t *)&unk_10051E360);
  return Button.init(role:action:label:)();
}

uint64_t sub_10009FCB8()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10009FD14(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10009FD70()
{
  uint64_t v1 = sub_10000F214(&qword_10051C788);
  sub_10000F214(&qword_10051C930);
  uint64_t result = Binding.wrappedValue.getter();
  uint64_t v3 = (float *)(v0 + *(int *)(v1 + 76));
  float v4 = v3[1];
  float v5 = (float)(v4 - *v3) / 100.0;
  float v6 = v5 + v5;
  float v7 = *v3 - (float)(v5 + v5);
  float v8 = *(float *)(v0 + *(int *)(v1 + 68));
  float v9 = v8 - v5;
  if (v7 > (float)(v8 - v5))
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (v18 < v9 && v7 <= v18)
  {
    uint64_t v19 = 11560;
    Binding.wrappedValue.getter();
    float v14 = v8 - v17;
LABEL_17:
    v15._countAndFlagsBits = sub_100098690(v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    return v19;
  }
  float v11 = v8 + v5;
  float v12 = v4 + v6;
  if (v11 > v12) {
    goto LABEL_19;
  }
  if (v11 <= v18 && v18 <= v12)
  {
    uint64_t v19 = 11048;
    Binding.wrappedValue.getter();
    float v14 = v17 - v8;
    goto LABEL_17;
  }
  if (v9 > v11) {
    goto LABEL_20;
  }
  if (v9 <= v18 && v18 < v11) {
    return 0;
  }
  else {
    return 1066895586;
  }
}

uint64_t sub_10009FEF4()
{
  uint64_t v1 = sub_10000F214(&qword_10051C7C8);
  sub_10000F214(&qword_10051C960);
  uint64_t result = Binding.wrappedValue.getter();
  uint64_t v3 = (double *)(v0 + *(int *)(v1 + 76));
  double v4 = v3[1];
  double v5 = (v4 - *v3) / 100.0;
  double v6 = v5 + v5;
  double v7 = *v3 - (v5 + v5);
  double v8 = *(double *)(v0 + *(int *)(v1 + 68));
  double v9 = v8 - v5;
  if (v7 > v8 - v5)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (v18 < v9 && v7 <= v18)
  {
    uint64_t v19 = 11560;
    Binding.wrappedValue.getter();
    double v14 = v8 - v17;
LABEL_17:
    v15._countAndFlagsBits = sub_100098904(v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    return v19;
  }
  double v11 = v8 + v5;
  double v12 = v4 + v6;
  if (v11 > v12) {
    goto LABEL_19;
  }
  if (v11 <= v18 && v18 <= v12)
  {
    uint64_t v19 = 11048;
    Binding.wrappedValue.getter();
    double v14 = v17 - v8;
    goto LABEL_17;
  }
  if (v9 > v11) {
    goto LABEL_20;
  }
  if (v9 <= v18 && v18 < v11) {
    return 0;
  }
  else {
    return 1066895586;
  }
}

uint64_t sub_1000A0078()
{
  uint64_t v1 = type metadata accessor for EnvironmentValues();
  uint64_t v42 = *(void *)(v1 - 8);
  uint64_t v43 = v1;
  __chkstk_darwin(v1);
  uint64_t v41 = (uint64_t)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  double v9 = (char *)&v40 - v8;
  uint64_t v10 = (int *)sub_10000F214(&qword_10051C788);
  float v11 = *(float *)(v0 + v10[17]);
  double v12 = v11;
  uint64_t v13 = (float *)(v0 + v10[19]);
  float v14 = *v13;
  float v15 = v13[1];
  uint64_t v16 = v0 + v10[16];
  sub_10000F214(&qword_10051C930);
  Binding.wrappedValue.getter();
  double v17 = v46;
  uint64_t v44 = v16;
  if (v11 == v14)
  {
    if (v46 >= 1.0)
    {
      double v19 = 1.0;
      double v20 = 1.0;
      double v18 = 1.0;
      if (v15 == v11) {
        goto LABEL_32;
      }
      goto LABEL_26;
    }
    double v18 = v46;
    if (v46 < 0.0)
    {
      double v19 = 0.0;
      double v20 = 0.0;
      double v18 = 0.0;
      if (v15 == v11) {
        goto LABEL_32;
      }
      goto LABEL_26;
    }
LABEL_15:
    if (v15 == v11)
    {
      double v20 = 1.0;
      if (v46 >= 1.0) {
        goto LABEL_32;
      }
LABEL_20:
      if (v46 < 0.0) {
        double v20 = 0.0;
      }
      else {
        double v20 = v46;
      }
      goto LABEL_32;
    }
    double v19 = v18;
    goto LABEL_26;
  }
  double v18 = (v17 - v14) / (v12 - v14);
  double v19 = 1.0;
  if (v18 < 1.0)
  {
    if (v18 < 0.0)
    {
      if (v15 == v11)
      {
        if (v46 >= 1.0)
        {
          double v18 = 0.0;
          double v20 = 1.0;
        }
        else
        {
          double v18 = 0.0;
          if (v46 < 0.0) {
            double v20 = 0.0;
          }
          else {
            double v20 = v46;
          }
        }
        goto LABEL_32;
      }
      double v19 = 0.0;
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  if (v15 == v11)
  {
    double v18 = 1.0;
    if (v46 >= 1.0)
    {
      double v20 = 1.0;
      goto LABEL_32;
    }
    goto LABEL_20;
  }
LABEL_26:
  double v21 = (v17 - v12) / (v15 - v12);
  double v22 = 0.0;
  if (v21 >= 0.0) {
    double v22 = v21;
  }
  if (v21 >= 1.0) {
    double v20 = 1.0;
  }
  else {
    double v20 = v22;
  }
  double v18 = v19;
LABEL_32:
  sub_10027CA80((uint64_t)v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for ColorScheme.light(_:), v3);
  char v23 = static ColorScheme.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v6, v3);
  v24(v9, v3);
  if (v23) {
    uint64_t v25 = static Color.black.getter();
  }
  else {
    uint64_t v25 = static Color.white.getter();
  }
  uint64_t v26 = v25;
  float v27 = (float)(v15 - v14) / 100.0;
  uint64_t result = Binding.wrappedValue.getter();
  float v29 = *v13 - (float)(v27 + v27);
  float v30 = v11 - v27;
  if (v29 > (float)(v11 - v27))
  {
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v45 < v30 && v29 <= v45)
  {
    double v37 = sin((1.0 - v18) * 1.57079633);
    uint64_t v38 = v41;
    sub_10027CE00(v41);
LABEL_53:
    uint64_t v39 = sub_10009D394(v37);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v43);
    return v39;
  }
  float v32 = v11 + v27;
  float v33 = (float)(v27 + v27) + v13[1];
  if ((float)(v11 + v27) > v33) {
    goto LABEL_57;
  }
  if (v32 <= v45 && v45 <= v33)
  {
    double v37 = sin(v20 * 1.57079633);
    uint64_t v38 = v41;
    sub_10027CE00(v41);
    goto LABEL_53;
  }
  if (v30 <= v32)
  {
    if (v30 > v45 || v45 >= v32)
    {
      uint64_t v36 = static Color.purple.getter();
      swift_release();
      return v36;
    }
    return v26;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_1000A0534()
{
  uint64_t v1 = type metadata accessor for EnvironmentValues();
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  __chkstk_darwin(v1);
  uint64_t v38 = (uint64_t)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  double v9 = (char *)&v37 - v8;
  uint64_t v10 = (int *)sub_10000F214(&qword_10051C7C8);
  double v11 = *(double *)(v0 + v10[17]);
  double v12 = (double *)(v0 + v10[19]);
  double v13 = *v12;
  double v14 = v12[1];
  uint64_t v15 = v0 + v10[16];
  sub_10000F214(&qword_10051C960);
  uint64_t v41 = v15;
  Binding.wrappedValue.getter();
  if (v11 == v13)
  {
    double v16 = 1.0;
    if (v42 >= 1.0)
    {
      double v17 = 1.0;
      if (v14 == v11) {
        goto LABEL_30;
      }
      goto LABEL_25;
    }
    double v17 = v42;
    if (v42 < 0.0)
    {
      double v16 = 0.0;
      double v17 = 0.0;
      if (v14 == v11) {
        goto LABEL_30;
      }
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  double v17 = (v42 - v13) / (v11 - v13);
  double v16 = 1.0;
  if (v17 >= 1.0)
  {
    if (v14 == v11)
    {
      double v17 = 1.0;
      if (v42 >= 1.0) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
LABEL_25:
    double v17 = v16;
    double v18 = (v42 - v11) / (v14 - v11);
    double v19 = 0.0;
    if (v18 >= 0.0) {
      double v19 = (v42 - v11) / (v14 - v11);
    }
    if (v18 >= 1.0) {
      double v16 = 1.0;
    }
    else {
      double v16 = v19;
    }
    goto LABEL_30;
  }
  if (v17 >= 0.0)
  {
LABEL_15:
    if (v14 == v11)
    {
      if (v42 >= v16) {
        goto LABEL_30;
      }
LABEL_20:
      if (v42 < 0.0) {
        double v16 = 0.0;
      }
      else {
        double v16 = v42;
      }
      goto LABEL_30;
    }
    double v16 = v17;
    goto LABEL_25;
  }
  if (v14 != v11)
  {
    double v16 = 0.0;
    goto LABEL_25;
  }
  double v17 = 0.0;
  if (v42 < 1.0)
  {
    if (v42 < 0.0) {
      double v16 = 0.0;
    }
    else {
      double v16 = v42;
    }
  }
LABEL_30:
  sub_10027CA80((uint64_t)v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for ColorScheme.light(_:), v3);
  char v20 = static ColorScheme.== infix(_:_:)();
  double v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v6, v3);
  v21(v9, v3);
  if (v20) {
    uint64_t v22 = static Color.black.getter();
  }
  else {
    uint64_t v22 = static Color.white.getter();
  }
  uint64_t v23 = v22;
  double v24 = (v14 - v13) / 100.0;
  uint64_t result = Binding.wrappedValue.getter();
  double v26 = *v12 - (v24 + v24);
  double v27 = v11 - v24;
  if (v26 > v11 - v24)
  {
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v42 < v27 && v26 <= v42)
  {
    double v34 = sin((1.0 - v17) * 1.57079633);
    uint64_t v35 = v38;
    sub_10027CE00(v38);
LABEL_51:
    uint64_t v36 = sub_10009D394(v34);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v40);
    return v36;
  }
  double v29 = v11 + v24;
  double v30 = v24 + v24 + v12[1];
  if (v11 + v24 > v30) {
    goto LABEL_54;
  }
  if (v29 <= v42 && v42 <= v30)
  {
    double v34 = sin(v16 * 1.57079633);
    uint64_t v35 = v38;
    sub_10027CE00(v38);
    goto LABEL_51;
  }
  if (v27 <= v29)
  {
    if (v27 > v42 || v42 >= v29)
    {
      uint64_t v33 = static Color.purple.getter();
      swift_release();
      return v33;
    }
    return v23;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1000A09B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051C788);
  uint64_t v4 = v3 - 8;
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v34 + 64);
  __chkstk_darwin(v3);
  uint64_t v41 = sub_10000F214(&qword_10051C938);
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  float v46 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v43 = &v32[-v8];
  uint64_t v40 = static VerticalAlignment.center.getter();
  sub_1000A142C(a1, (uint64_t)v62);
  uint64_t v45 = v62[0];
  uint64_t v44 = v62[1];
  unsigned __int8 v9 = v63;
  int v33 = v63;
  uint64_t v35 = v64;
  uint64_t v38 = v65;
  uint64_t v37 = v66;
  int v36 = v67;
  uint64_t v39 = v68;
  uint64_t v47 = sub_1000A0078();
  sub_10000F214(&qword_10051C930);
  Binding.projectedValue.getter();
  uint64_t v10 = v54;
  uint64_t v11 = v55;
  int v12 = v56;
  double v13 = (float *)(a1 + *(int *)(v4 + 84));
  uint64_t v49 = a1;
  uint64_t v14 = *(void *)v13;
  sub_10000FB74(a1, (uint64_t)&v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], &qword_10051C788);
  unint64_t v15 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v16 = swift_allocObject();
  sub_10000FC34((uint64_t)&v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v16 + v15, &qword_10051C788);
  uint64_t v59 = v10;
  uint64_t v60 = v11;
  int v61 = v12;
  uint64_t v58 = v14;
  float v17 = *v13;
  swift_retain();
  swift_retain();
  uint64_t v54 = sub_100098690(v17);
  uint64_t v55 = v18;
  LOBYTE(v56) = 0;
  uint64_t v57 = _swiftEmptyArrayStorage;
  uint64_t v50 = sub_100098690(v13[1]);
  uint64_t v51 = v19;
  char v52 = 0;
  uint64_t v53 = _swiftEmptyArrayStorage;
  sub_1000A3094();
  char v20 = v43;
  Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
  swift_release();
  swift_release();
  uint64_t v34 = *(void *)(v42 + 16);
  double v21 = v46;
  uint64_t v22 = v41;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v34)(v46, v20, v41);
  uint64_t v23 = v48;
  uint64_t *v48 = v40;
  v23[1] = 0;
  *((unsigned char *)v23 + 16) = 1;
  uint64_t v24 = v45;
  uint64_t v25 = v44;
  v23[3] = v45;
  v23[4] = v25;
  *((unsigned char *)v23 + 40) = v9;
  uint64_t v26 = v38;
  v23[6] = v35;
  void v23[7] = v26;
  uint64_t v27 = v37;
  v23[8] = v37;
  LOBYTE(a1) = v36;
  *((unsigned char *)v23 + 72) = v36;
  uint64_t v28 = v47;
  v23[10] = v39;
  v23[11] = v28;
  uint64_t v29 = sub_10000F214(&qword_10051C948);
  ((void (*)(char *, unsigned char *, uint64_t))v34)((char *)v48 + *(int *)(v29 + 48), v21, v22);
  LOBYTE(v21) = v33;
  sub_1000807A8(v24, v25, v33);
  swift_bridgeObjectRetain();
  sub_1000807A8(v26, v27, a1);
  double v30 = *(void (**)(unsigned char *, uint64_t))(v42 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v30(v43, v22);
  v30(v46, v22);
  sub_100012FAC(v45, v44, (char)v21);
  swift_bridgeObjectRelease();
  sub_100012FAC(v26, v27, a1);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A0EE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051C7C8);
  uint64_t v4 = v3 - 8;
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v35 + 64);
  __chkstk_darwin(v3);
  uint64_t v42 = sub_10000F214(&qword_10051C938);
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v47 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v44 = &v33[-v8];
  uint64_t v41 = static VerticalAlignment.center.getter();
  sub_1000A1710(a1, (uint64_t)v64);
  uint64_t v46 = v64[0];
  uint64_t v45 = v64[1];
  unsigned __int8 v9 = v65;
  int v34 = v65;
  uint64_t v36 = v66;
  uint64_t v39 = v67;
  uint64_t v38 = v68;
  int v37 = v69;
  uint64_t v40 = v70;
  uint64_t v48 = sub_1000A0534();
  sub_10000F214(&qword_10051C960);
  Binding.projectedValue.getter();
  uint64_t v10 = v55;
  uint64_t v11 = v56;
  uint64_t v12 = v57;
  double v13 = (double *)(a1 + *(int *)(v4 + 84));
  double v14 = *v13;
  uint64_t v15 = *((void *)v13 + 1);
  uint64_t v50 = a1;
  sub_10000FB74(a1, (uint64_t)&v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], &qword_10051C7C8);
  unint64_t v16 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v17 = swift_allocObject();
  sub_10000FC34((uint64_t)&v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v17 + v16, &qword_10051C7C8);
  uint64_t v61 = v10;
  uint64_t v62 = v11;
  uint64_t v63 = v12;
  double v59 = v14;
  uint64_t v60 = v15;
  double v18 = *v13;
  swift_retain();
  swift_retain();
  uint64_t v55 = sub_100098904(v18);
  uint64_t v56 = v19;
  LOBYTE(v57) = 0;
  uint64_t v58 = _swiftEmptyArrayStorage;
  uint64_t v51 = sub_100098904(v13[1]);
  uint64_t v52 = v20;
  char v53 = 0;
  uint64_t v54 = _swiftEmptyArrayStorage;
  sub_1000A23E0();
  double v21 = v44;
  Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
  swift_release();
  swift_release();
  uint64_t v35 = *(void *)(v43 + 16);
  uint64_t v22 = v47;
  uint64_t v23 = v42;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v35)(v47, v21, v42);
  uint64_t v24 = v49;
  *uint64_t v49 = v41;
  v24[1] = 0;
  *((unsigned char *)v24 + 16) = 1;
  uint64_t v25 = v46;
  uint64_t v26 = v45;
  v24[3] = v46;
  v24[4] = v26;
  *((unsigned char *)v24 + 40) = v9;
  uint64_t v27 = v39;
  v24[6] = v36;
  v24[7] = v27;
  uint64_t v28 = v38;
  v24[8] = v38;
  LOBYTE(a1) = v37;
  *((unsigned char *)v24 + 72) = v37;
  uint64_t v29 = v48;
  v24[10] = v40;
  v24[11] = v29;
  uint64_t v30 = sub_10000F214(&qword_10051C948);
  ((void (*)(char *, unsigned char *, uint64_t))v35)((char *)v49 + *(int *)(v30 + 48), v22, v23);
  LOBYTE(v22) = v34;
  sub_1000807A8(v25, v26, v34);
  swift_bridgeObjectRetain();
  sub_1000807A8(v27, v28, a1);
  uint64_t v31 = *(void (**)(unsigned char *, uint64_t))(v43 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v31(v44, v23);
  v31(v47, v23);
  sub_100012FAC(v46, v45, (char)v22);
  swift_bridgeObjectRelease();
  sub_100012FAC(v27, v28, a1);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A142C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Font.TextStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(sub_10000F214(&qword_10051C788) + 72));
  uint64_t v9 = v8[1];
  uint64_t v38 = *v8;
  uint64_t v39 = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  sub_10000F214(&qword_10051C930);
  Binding.wrappedValue.getter();
  v11._countAndFlagsBits = sub_100098690(v37);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  static Font.callout.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v34 = v13;
  uint64_t v35 = v12;
  char v15 = v14;
  uint64_t v36 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  char v17 = v15 & 1;
  sub_10009FD70();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.callout(_:), v4);
  static Font.custom(_:size:relativeTo:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v18 = Text.font(_:)();
  uint64_t v20 = v19;
  char v22 = v21;
  swift_bridgeObjectRelease();
  swift_release();
  char v23 = v22 & 1;
  uint64_t v24 = Text.baselineOffset(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  LOBYTE(a1) = v29 & 1;
  sub_100012FAC(v18, v20, v23);
  swift_bridgeObjectRelease();
  LOBYTE(v38) = v17;
  uint64_t v31 = v34;
  uint64_t v30 = v35;
  sub_1000807A8(v35, v34, v17);
  uint64_t v32 = v36;
  swift_bridgeObjectRetain();
  sub_1000807A8(v24, v26, a1);
  swift_bridgeObjectRetain();
  sub_100012FAC(v24, v26, a1);
  swift_bridgeObjectRelease();
  sub_100012FAC(v30, v31, v38);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v31;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v26;
  *(unsigned char *)(a2 + 48) = a1;
  *(void *)(a2 + 56) = v28;
  return result;
}

uint64_t sub_1000A1710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Font.TextStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(sub_10000F214(&qword_10051C7C8) + 72));
  uint64_t v9 = v8[1];
  uint64_t v39 = *v8;
  uint64_t v40 = v9;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  sub_10000F214(&qword_10051C960);
  Binding.wrappedValue.getter();
  v11._countAndFlagsBits = sub_100098904(v38);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  static Font.callout.getter();
  uint64_t v12 = Text.font(_:)();
  uint64_t v35 = v13;
  uint64_t v36 = v12;
  char v15 = v14;
  uint64_t v37 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  char v17 = v15 & 1;
  sub_10009FEF4();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.callout(_:), v4);
  static Font.custom(_:size:relativeTo:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v18 = Text.font(_:)();
  uint64_t v20 = v19;
  char v22 = v21;
  swift_bridgeObjectRelease();
  swift_release();
  char v23 = v22 & 1;
  uint64_t v24 = Text.baselineOffset(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  LOBYTE(a1) = v29 & 1;
  sub_100012FAC(v18, v20, v23);
  swift_bridgeObjectRelease();
  LOBYTE(v39) = v17;
  uint64_t v31 = v35;
  uint64_t v30 = v36;
  sub_1000807A8(v36, v35, v17);
  uint64_t v32 = v37;
  swift_bridgeObjectRetain();
  sub_1000807A8(v24, v26, a1);
  swift_bridgeObjectRetain();
  sub_100012FAC(v24, v26, a1);
  swift_bridgeObjectRelease();
  sub_100012FAC(v30, v31, v39);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v31;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v26;
  *(unsigned char *)(a2 + 48) = a1;
  *(void *)(a2 + 56) = v28;
  return result;
}

uint64_t sub_1000A19F4()
{
  return sub_10009FAC4(*(void *)(v0 + 16), &qword_10051C7C8);
}

uint64_t sub_1000A1A48()
{
  return sub_10009FAC4(*(void *)(v0 + 16), &qword_10051C788);
}

uint64_t sub_1000A1A9C()
{
  return sub_10009FAC4(*(void *)(v0 + 16), &qword_10051C7D8);
}

uint64_t sub_1000A1AF0()
{
  return sub_10009FAC4(*(void *)(v0 + 16), &qword_10051C7E8);
}

uint64_t sub_1000A1B44()
{
  return sub_10009FAC4(*(void *)(v0 + 16), &qword_10051C7F8);
}

uint64_t sub_1000A1B98()
{
  return sub_10009FAC4(*(void *)(v0 + 16), &qword_10051C840);
}

uint64_t sub_1000A1BEC()
{
  return sub_1000A3184(&qword_10051C840);
}

uint64_t sub_1000A1BF8()
{
  return sub_1000A2860(&qword_10051C840, &qword_10051C898);
}

uint64_t sub_1000A1C0C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051C788);
  sub_10000F214(&qword_10051C930);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(void))(a1 + *(int *)(v2 + 80)))(0);
}

uint64_t sub_1000A1C8C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051C7C8);
  sub_10000F214(&qword_10051C960);
  Binding.wrappedValue.setter();
  return (*(uint64_t (**)(void))(a1 + *(int *)(v2 + 80)))(0);
}

BOOL sub_1000A1D0C(uint64_t a1, double a2)
{
  unsigned int v3 = LODWORD(a2);
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    char v7 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  LODWORD(v6) = 0;
  char v7 = 1;
  if (v4 == 2047)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    if (a2 > -1.0)
    {
      uint64_t v9 = Double.exponent.getter();
      if (v9 > 31)
      {
        LODWORD(v6) = 0;
        BOOL result = 0;
        char v7 = 1;
        goto LABEL_25;
      }
      uint64_t v10 = v9;
      uint64_t v11 = Double.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit64(v5));
      uint64_t v6 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 31)
        {
          if (v6 < -32 || v6 > 32)
          {
LABEL_9:
            LODWORD(v6) = 0;
            int v13 = 0;
            if ((v10 & 0x8000000000000000) == 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          if (v6 < 0)
          {
            if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFE0) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v6 >= 0x20) {
              goto LABEL_9;
            }
            LODWORD(v6) = v3 << v6;
          }
LABEL_21:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_23:
            int v13 = 1 << v10;
            goto LABEL_24;
          }
          int v13 = 0;
LABEL_24:
          char v7 = 0;
          LODWORD(v6) = v6 | v13;
          BOOL result = v10 >= v11;
          goto LABEL_25;
        }
        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LODWORD(v6) = 0;
          goto LABEL_21;
        }
        if ((v6 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v6 >= 0x40) {
            LODWORD(v6) = 0;
          }
          else {
            uint64_t v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }
      if ((unint64_t)v6 <= 0xFFFFFFFFFFFFFFC0) {
        LODWORD(v6) = 0;
      }
      else {
        uint64_t v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }
LABEL_25:
  *(_DWORD *)a1 = v6;
  *(unsigned char *)(a1 + 4) = v7;
  return result;
}

BOOL sub_1000A1E80(uint64_t a1, double a2)
{
  uint64_t v3 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v4 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v5 = v3 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v5)
  {
    BOOL result = 0;
    uint64_t v5 = 0;
    char v7 = 1;
    if (v3 != 2047 && a2 > -1.0)
    {
      uint64_t v8 = Double.exponent.getter();
      if (v8 <= 63)
      {
        uint64_t v9 = v8;
        uint64_t v10 = Double.significandWidth.getter();
        uint64_t v11 = v10 + __clz(__rbit64(v4));
        uint64_t v12 = v9 - v11;
        if (__OFSUB__(v9, v11))
        {
          __break(1u);
        }
        else
        {
          if (v11 > 63)
          {
            if (v12 < -64 || v12 > 64) {
              goto LABEL_12;
            }
          }
          else if (v12 < -64 || v12 > 64)
          {
            goto LABEL_12;
          }
          if ((v12 & 0x8000000000000000) == 0)
          {
            if ((unint64_t)v12 < 0x40)
            {
              unint64_t v13 = v4 << v12;
              if (v9 < 0)
              {
LABEL_17:
                uint64_t v14 = 0;
                goto LABEL_24;
              }
LABEL_23:
              uint64_t v14 = 1 << v9;
              goto LABEL_24;
            }
            goto LABEL_12;
          }
        }
        if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFC0)
        {
          unint64_t v13 = v4 >> (v11 - v9);
          if (v9 < 0) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
LABEL_12:
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        if (v9 < 0)
        {
LABEL_24:
          char v7 = 0;
          uint64_t v5 = v13 | v14;
          BOOL result = v9 >= v10;
          goto LABEL_25;
        }
        goto LABEL_23;
      }
      uint64_t v5 = 0;
      BOOL result = 0;
      char v7 = 1;
    }
  }
  else
  {
    char v7 = 0;
    BOOL result = 1;
  }
LABEL_25:
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  return result;
}

BOOL sub_1000A1FC4(uint64_t a1, double a2)
{
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v12 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047) {
    goto LABEL_28;
  }
  uint64_t v7 = Double.exponent.getter();
  if (v7 > 63) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = Double.significandWidth.getter();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit64(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      uint64_t v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v12 = 0;
    BOOL result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64) {
      goto LABEL_11;
    }
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x40)
  {
    unint64_t v14 = v5 << v12;
    if (v8 != 63) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63) {
    goto LABEL_27;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    uint64_t v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      uint64_t v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_11;
    }
    unint64_t v14 = v5 >> -(char)v12;
    if (v8 == 63) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = 0;
  }
  if (v12 < 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

double sub_1000A214C@<D0>(double *a1@<X8>)
{
  sub_10000F214(&qword_10051C7E8);
  sub_10000F214(&qword_10051C910);
  Binding.wrappedValue.getter();
  LODWORD(v2) = v4;
  double result = (double)v2;
  *a1 = result;
  return result;
}

double sub_1000A21B4@<D0>(uint64_t *a1@<X3>, uint64_t *a2@<X4>, double *a3@<X8>)
{
  sub_10000F214(a1);
  sub_10000F214(a2);
  Binding.wrappedValue.getter();
  double result = (double)v6;
  *a3 = (double)v6;
  return result;
}

double sub_1000A2218@<D0>(double *a1@<X8>)
{
  sub_10000F214(&qword_10051C840);
  sub_10000F214(&qword_10051C898);
  Binding.wrappedValue.getter();
  double result = (double)v3;
  *a1 = (double)v3;
  return result;
}

uint64_t sub_1000A2280()
{
  return sub_1000A2D20(&qword_10051C840);
}

uint64_t sub_1000A228C()
{
  return sub_1000A2B08(&qword_10051C840, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A2218);
}

uint64_t sub_1000A22AC()
{
  return sub_1000A2D20(&qword_10051C840);
}

uint64_t sub_1000A22B8(unint64_t *a1)
{
  return sub_1000A2BB8(a1, &qword_10051C840, (uint64_t (*)(uint64_t, __n128))sub_1000A2708);
}

double sub_1000A22D8@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10009F720(*(void *)(v1 + 16), (void *(*)(void *__return_ptr, uint64_t))sub_10009F35C, (uint64_t (*)(void *))sub_10009CF20, a1).n128_u64[0];
  return result;
}

unint64_t sub_1000A231C()
{
  unint64_t result = qword_10051C8B0;
  if (!qword_10051C8B0)
  {
    sub_10000F69C(&qword_10051C8A8);
    sub_100013AA8(&qword_10051C8B8, &qword_10051C8C0);
    sub_100013AA8(&qword_100518C48, &qword_100518C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C8B0);
  }
  return result;
}

unint64_t sub_1000A23E0()
{
  unint64_t result = qword_10051C8C8;
  if (!qword_10051C8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C8C8);
  }
  return result;
}

unint64_t sub_1000A2434()
{
  unint64_t result = qword_10051C8E8;
  if (!qword_10051C8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C8E8);
  }
  return result;
}

uint64_t sub_1000A2488(double a1)
{
  sub_1000A1D0C((uint64_t)v7, a1);
  if ((v7[0] & 0x100000000) != 0)
  {
    v7[0] = 0;
    v7[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v3._countAndFlagsBits = 0x656C62756F44;
    v3._object = (void *)0xE600000000000000;
    String.append(_:)(v3);
    v4._object = (void *)0x8000000100426070;
    v4._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 0x3233746E4955;
    v5._object = (void *)0xE600000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 0xD00000000000002ELL;
    v6._object = (void *)0x8000000100426090;
    String.append(_:)(v6);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v1 = v7[0];
    sub_10000F214(&qword_10051C7E8);
    LODWORD(v7[0]) = v1;
    sub_10000F214(&qword_10051C910);
    return Binding.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000A25C4(double a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6)
{
  sub_1000A1E80((uint64_t)&v16, a1);
  if (v17)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v12._countAndFlagsBits = 0x656C62756F44;
    v12._object = (void *)0xE600000000000000;
    String.append(_:)(v12);
    v13._object = (void *)0x8000000100426070;
    v13._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a5;
    v14._object = a6;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 0xD00000000000002ELL;
    v15._object = (void *)0x8000000100426090;
    String.append(_:)(v15);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v10 = v16;
    sub_10000F214(a3);
    uint64_t v16 = v10;
    sub_10000F214(a4);
    return Binding.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000A2708(double a1)
{
  sub_1000A1FC4((uint64_t)&v7, a1);
  if (v8)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v3._countAndFlagsBits = 0x656C62756F44;
    v3._object = (void *)0xE600000000000000;
    String.append(_:)(v3);
    v4._object = (void *)0x8000000100426070;
    v4._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 7630409;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 0xD00000000000002ELL;
    v6._object = (void *)0x8000000100426090;
    String.append(_:)(v6);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = v7;
    sub_10000F214(&qword_10051C840);
    uint64_t v7 = v1;
    sub_10000F214(&qword_10051C898);
    return Binding.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_1000A2840()
{
  return sub_1000A3184(&qword_10051C7F8);
}

uint64_t sub_1000A284C()
{
  return sub_1000A2860(&qword_10051C7F8, &qword_10051C900);
}

uint64_t sub_1000A2860(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(sub_10000F214(a1) - 8);
  return sub_10009FD14(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

uint64_t sub_1000A28D0()
{
  return sub_1000A2D20(&qword_10051C7F8);
}

double sub_1000A28DC@<D0>(double *a1@<X8>)
{
  return sub_1000A28F0(&qword_10051C7F8, &qword_10051C900, a1);
}

double sub_1000A28F0@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, double *a3@<X8>)
{
  return sub_1000A21B4(a1, a2, a3);
}

uint64_t sub_1000A296C()
{
  return sub_1000A2D20(&qword_10051C7F8);
}

uint64_t sub_1000A2978(double *a1)
{
  return sub_1000A2F08(a1, &qword_10051C7F8, &qword_10051C900, 1953384789, (void *)0xE400000000000000);
}

double sub_1000A2998@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10009F640(*(void *)(v1 + 16), &qword_10051C7F8, &qword_10051C900, sub_100098FF0, sub_100098FF0, a1).n128_u64[0];
  return result;
}

unint64_t sub_1000A29EC()
{
  unint64_t result = qword_10051C908;
  if (!qword_10051C908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C908);
  }
  return result;
}

uint64_t sub_1000A2A40()
{
  return sub_1000A3184(&qword_10051C7E8);
}

uint64_t sub_1000A2A4C()
{
  return sub_1000A2A6C(&qword_10051C7E8, (uint64_t (*)(uint64_t))sub_10009FCB8);
}

uint64_t sub_1000A2A6C(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(sub_10000F214(a1) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_1000A2ADC()
{
  return sub_1000A2D20(&qword_10051C7E8);
}

uint64_t sub_1000A2AE8()
{
  return sub_1000A2B08(&qword_10051C7E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A214C);
}

uint64_t sub_1000A2B08(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(sub_10000F214(a1) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5, v6);
}

uint64_t sub_1000A2B8C()
{
  return sub_1000A2D20(&qword_10051C7E8);
}

uint64_t sub_1000A2B98(unint64_t *a1)
{
  return sub_1000A2BB8(a1, &qword_10051C7E8, (uint64_t (*)(uint64_t, __n128))sub_1000A2488);
}

uint64_t sub_1000A2BB8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, __n128))
{
  uint64_t v5 = *(void *)(sub_10000F214(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v7.n128_u64[0] = *a1;

  return a3(v6, v7);
}

double sub_1000A2C3C@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10009F720(*(void *)(v1 + 16), (void *(*)(void *__return_ptr, uint64_t))sub_10009F7E0, (uint64_t (*)(void *))sub_10009C60C, a1).n128_u64[0];
  return result;
}

unint64_t sub_1000A2C80()
{
  unint64_t result = qword_10051C918;
  if (!qword_10051C918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C918);
  }
  return result;
}

uint64_t sub_1000A2CD4()
{
  return sub_1000A3184(&qword_10051C7D8);
}

uint64_t sub_1000A2CE0()
{
  return sub_1000A2860(&qword_10051C7D8, &qword_10051C920);
}

uint64_t sub_1000A2CF4()
{
  return sub_1000A2D20(&qword_10051C7D8);
}

double sub_1000A2D00@<D0>(double *a1@<X8>)
{
  return sub_1000A28F0(&qword_10051C7D8, &qword_10051C920, a1);
}

uint64_t sub_1000A2D14()
{
  return sub_1000A2D20(&qword_10051C7D8);
}

uint64_t sub_1000A2D20(uint64_t *a1)
{
  uint64_t v2 = sub_10000F214(a1);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  swift_unknownObjectRelease();
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v1 + v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v1 + v4 + *(int *)(v2 + 60);
  sub_10000F214(&qword_10051C890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000A2EE4(double *a1)
{
  return sub_1000A2F08(a1, &qword_10051C7D8, &qword_10051C920, 0x3436746E4955, (void *)0xE600000000000000);
}

uint64_t sub_1000A2F08(double *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v11 = *(void *)(sub_10000F214(a2) - 8);
  return sub_1000A25C4(*a1, v5 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), a2, a3, a4, a5);
}

double sub_1000A2F9C@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10009F640(*(void *)(v1 + 16), &qword_10051C7D8, &qword_10051C920, sub_100098B78, sub_100098B78, a1).n128_u64[0];
  return result;
}

unint64_t sub_1000A2FF0()
{
  unint64_t result = qword_10051C928;
  if (!qword_10051C928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C928);
  }
  return result;
}

uint64_t sub_1000A3044()
{
  return sub_1000A3184(&qword_10051C788);
}

uint64_t sub_1000A3050()
{
  return sub_1000A2A6C(&qword_10051C788, sub_1000A1C0C);
}

uint64_t sub_1000A3070@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A3120(&qword_10051C788, a1);
}

uint64_t sub_1000A307C()
{
  return sub_1000A3184(&qword_10051C788);
}

uint64_t sub_1000A3088(uint64_t a1)
{
  return sub_1000A334C(a1, &qword_10051C788);
}

unint64_t sub_1000A3094()
{
  unint64_t result = qword_10051C940;
  if (!qword_10051C940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C940);
  }
  return result;
}

uint64_t sub_1000A30E8()
{
  return sub_1000A3184(&qword_10051C7C8);
}

uint64_t sub_1000A30F4()
{
  return sub_1000A2A6C(&qword_10051C7C8, sub_1000A1C8C);
}

uint64_t sub_1000A3114@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A3120(&qword_10051C7C8, a1);
}

uint64_t sub_1000A3120@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = (void *)(v4 + *(int *)(sub_10000F214(a1) + 72));
  uint64_t v6 = v5[1];
  *(void *)a2 = *v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = _swiftEmptyArrayStorage;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A3178()
{
  return sub_1000A3184(&qword_10051C7C8);
}

uint64_t sub_1000A3184(uint64_t *a1)
{
  uint64_t v2 = sub_10000F214(a1);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v1 + v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v1 + v4 + *(int *)(v2 + 60);
  sub_10000F214(&qword_10051C890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for EnvironmentValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000A3340(uint64_t a1)
{
  return sub_1000A334C(a1, &qword_10051C7C8);
}

uint64_t sub_1000A334C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000F214(a2);
  return (*(uint64_t (**)(uint64_t))(v2
                                            + *(int *)(v4 + 80)
                                            + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80))))(a1);
}

unint64_t sub_1000A33C4()
{
  unint64_t result = qword_10051C968;
  if (!qword_10051C968)
  {
    sub_10000F69C((uint64_t *)&unk_10051C970);
    sub_10009BE9C();
    sub_10009C044();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051C968);
  }
  return result;
}

uint64_t sub_1000A3444(uint64_t a1)
{
  uint64_t result = sub_10020B98C(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  sub_1000A6A30(result, v3, 0, a1);
  return v5;
}

unint64_t sub_1000A34C4(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_1003366C4(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t CGImagePropertyOrientation.init(from:)(void *a1)
{
  uint64_t v3 = (uint64_t)sub_10000F3B0(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000F3B0(v5, v5[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v5);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t CGImagePropertyOrientation.encode(to:)(void *a1)
{
  sub_10000F3B0(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_1000A36F4((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v2);
}

uint64_t sub_1000A36F4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000A3744@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  sub_10000F3B0(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  sub_10000F3B0(v7, v7[3]);
  int v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v7);
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t sub_1000A3804(void *a1)
{
  sub_10000F3B0(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_1000A36F4((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v2);
}

void *sub_1000A3898()
{
  uint64_t v1 = type metadata accessor for CVDetection();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = v0[4];
  if (v4 >> 60 == 15) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = v0[3];
  sub_10000F214(&qword_100529640);
  uint64_t v7 = (int *)(type metadata accessor for DetectionRequest(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10043D4F0;
  uint64_t v9 = v5 + v8;
  sub_100038528(v6, v4);
  sub_1003E6684((uint64_t)v3);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)(v9 + v7[7]);
  *uint64_t v10 = v6;
  v10[1] = v4;
  type metadata accessor for DetectionRequest.Originator(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = v0[2];
  sub_1000A7F70((uint64_t)v3, v9, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v12 = v9 + v7[8];
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v12 + 16) = _Q0;
  *(void *)(v9 + v7[9]) = v11;
  return (void *)v5;
}

unint64_t sub_1000A3A5C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x647055656E656373;
      break;
    case 2:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 3:
      unint64_t result = 0xD000000000000020;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000A3B10(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10051CAA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000A741C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[0] = *v3;
  char v11 = 0;
  sub_10000F214(&qword_10051CA60);
  sub_1000A759C(&qword_10051CAA8, &qword_10051CAB0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[0] = v3[1];
    char v11 = 1;
    sub_10000F214(&qword_10051CA78);
    sub_1000A7470(&qword_10051CAB8, (void (*)(void))sub_1000A7630);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_10000FC34((uint64_t)(v3 + 3), (uint64_t)v13, &qword_10051CAC8);
    sub_10000FC34((uint64_t)v13, (uint64_t)v10, &qword_10051CAC8);
    char v11 = 3;
    sub_1000A7684();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_10000FC34((uint64_t)(v3 + 5), (uint64_t)v12, &qword_10051CAD8);
    sub_10000FC34((uint64_t)v12, (uint64_t)v10, &qword_10051CAD8);
    char v11 = 4;
    type metadata accessor for CGImagePropertyOrientation(0);
    sub_1000A8034((unint64_t *)&unk_10051CAE0, type metadata accessor for CGImagePropertyOrientation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000A3E40()
{
  return sub_1000A3A5C(*v0);
}

uint64_t sub_1000A3E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A76D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A3E70(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000A3E7C(uint64_t a1)
{
  unint64_t v2 = sub_1000A741C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A3EB8(uint64_t a1)
{
  unint64_t v2 = sub_1000A741C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000A3EF4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000A6F1C(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 13);
    *(_OWORD *)((char *)a2 + 29) = *(_OWORD *)((char *)v7 + 13);
  }
  return result;
}

uint64_t sub_1000A3F38(void *a1)
{
  return sub_1000A3B10(a1);
}

unint64_t sub_1000A3F74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DetectionRequest(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v54 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for CVDetection();
  __chkstk_darwin(v57);
  uint64_t v56 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v52 - v7;
  uint64_t v9 = type metadata accessor for DetectionResult(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v60 = 0xD000000000000017;
  unint64_t v61 = 0x80000001004404A0;
  uint64_t v62 = *v0;
  uint64_t v13 = v62;
  int64_t v14 = *(void *)(v62 + 16);
  if (v14)
  {
    uint64_t v52 = v0;
    uint64_t v53 = v3;
    v59._countAndFlagsBits = 0;
    v59._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x2020202020200ALL;
    v59._object = (void *)0xE700000000000000;
    uint64_t v58 = (void *)v14;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0xD00000000000001ELL;
    v16._object = (void *)0x8000000100426120;
    String.append(_:)(v16);
    uint64_t v58 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000407B0(0, v14, 0);
    uint64_t v17 = v13 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v18 = *(void *)(v10 + 72);
    uint64_t v55 = v18;
    do
    {
      sub_1000A80DC(v17, (uint64_t)v12, type metadata accessor for DetectionResult);
      sub_1000A80DC((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      unint64_t v19 = 0xE700000000000000;
      uint64_t v20 = 0x65646F63726162;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          unint64_t v19 = 0xE500000000000000;
          uint64_t v20 = 0x6573726170;
          break;
        case 2u:
          unint64_t v19 = 0xE400000000000000;
          uint64_t v20 = 1954047348;
          break;
        case 3u:
          break;
        case 4u:
          uint64_t v20 = 0x70696C43707061;
          break;
        case 5u:
          uint64_t v20 = 0x6E696D6165727473;
          unint64_t v19 = 0xED00007478655467;
          break;
        default:
          unint64_t v19 = 0xE600000000000000;
          uint64_t v20 = 0x7463656A626FLL;
          break;
      }
      sub_1000A807C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_1000A807C((uint64_t)v12, type metadata accessor for DetectionResult);
      char v21 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000407B0(0, v21[2] + 1, 1);
        uint64_t v18 = v55;
        char v21 = v58;
      }
      unint64_t v23 = v21[2];
      unint64_t v22 = v21[3];
      if (v23 >= v22 >> 1)
      {
        sub_1000407B0(v22 > 1, v23 + 1, 1);
        uint64_t v18 = v55;
        char v21 = v58;
      }
      v21[2] = v23 + 1;
      uint64_t v24 = &v21[2 * v23];
      v24[4] = v20;
      v24[5] = v19;
      v17 += v18;
      --v14;
    }
    while (v14);
    sub_1000A6A04((uint64_t)&v62);
    uint64_t v58 = v21;
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v27 = v26;
    swift_release();
    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    uint64_t v1 = v52;
    uint64_t v3 = v53;
  }
  char v29 = *(void **)(v1[1] + 16);
  if (v29)
  {
    v59._countAndFlagsBits = 0;
    v59._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x2020202020200ALL;
    v59._object = (void *)0xE700000000000000;
    uint64_t v58 = v29;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0x7055656E65637320;
    v31._object = (void *)0xED00007365746164;
    String.append(_:)(v31);
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = sub_1000A3898()[2];
  swift_bridgeObjectRelease();
  if (v32)
  {
    v59._countAndFlagsBits = 0;
    v59._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x2020202020200ALL;
    v59._object = (void *)0xE700000000000000;
    int v33 = (void *)sub_1000A3898()[2];
    swift_bridgeObjectRelease();
    uint64_t v58 = v33;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0xD00000000000001FLL;
    v35._object = (void *)0x8000000100426140;
    String.append(_:)(v35);
    uint64_t v36 = sub_1000A3898();
    int64_t v37 = v36[2];
    if (v37)
    {
      uint64_t v58 = _swiftEmptyArrayStorage;
      sub_1000407B0(0, v37, 0);
      uint64_t v38 = (uint64_t)v36 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      uint64_t v39 = *(void *)(v3 + 72);
      uint64_t v40 = (uint64_t)v54;
      do
      {
        sub_1000A80DC(v38, v40, type metadata accessor for DetectionRequest);
        sub_1000A80DC(v40, v56, (uint64_t (*)(void))type metadata accessor for CVDetection);
        unint64_t v41 = 0xE700000000000000;
        uint64_t v42 = 0x65646F63726162;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            unint64_t v41 = 0xE500000000000000;
            uint64_t v42 = 0x6573726170;
            break;
          case 2u:
            unint64_t v41 = 0xE400000000000000;
            uint64_t v42 = 1954047348;
            break;
          case 3u:
            break;
          case 4u:
            uint64_t v42 = 0x70696C43707061;
            break;
          case 5u:
            uint64_t v42 = 0x6E696D6165727473;
            unint64_t v41 = 0xED00007478655467;
            break;
          default:
            unint64_t v41 = 0xE600000000000000;
            uint64_t v42 = 0x7463656A626FLL;
            break;
        }
        sub_1000A807C(v56, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1000A807C(v40, type metadata accessor for DetectionRequest);
        uint64_t v43 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000407B0(0, v43[2] + 1, 1);
          uint64_t v40 = (uint64_t)v54;
          uint64_t v43 = v58;
        }
        unint64_t v45 = v43[2];
        unint64_t v44 = v43[3];
        if (v45 >= v44 >> 1)
        {
          sub_1000407B0(v44 > 1, v45 + 1, 1);
          uint64_t v40 = (uint64_t)v54;
          uint64_t v43 = v58;
        }
        v43[2] = v45 + 1;
        uint64_t v46 = &v43[2 * v45];
        void v46[4] = v42;
        v46[5] = v41;
        v38 += v39;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = _swiftEmptyArrayStorage;
    }
    uint64_t v58 = v43;
    sub_10000F214((uint64_t *)&unk_100522CD0);
    sub_100024278();
    uint64_t v47 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v49 = v48;
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
  }
  return v60;
}

id sub_1000A4820()
{
  uint64_t v22 = sub_10000F214((uint64_t *)&unk_10051CB40);
  uint64_t v1 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000F214((uint64_t *)&unk_10051CAF0);
  uint64_t v4 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_100525230);
  uint64_t v7 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC6Tamale26StreamingMetadataProcessor_logger;
  uint64_t v11 = qword_100517E30;
  uint64_t v12 = v0;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = &v12[v10];
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_10000F378(v14, (uint64_t)qword_10055E1A8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, v15, v14);
  sub_10000F214(&qword_10051C9C8);
  uint64_t v16 = v22;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v22);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v16);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[OBJC_IVAR____TtC6Tamale26StreamingMetadataProcessor_resultStream], v9, v20);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v12[OBJC_IVAR____TtC6Tamale26StreamingMetadataProcessor_continuation], v6, v21);

  uint64_t v17 = (objc_class *)type metadata accessor for StreamingMetadataProcessor();
  v23.receiver = v12;
  v23.super_class = v17;
  return [super init];
}

id sub_1000A4B60()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StreamingMetadataProcessor();
  [super dealloc];
}

uint64_t sub_1000A4C98()
{
  return type metadata accessor for StreamingMetadataProcessor();
}

uint64_t type metadata accessor for StreamingMetadataProcessor()
{
  uint64_t result = qword_10051C9B0;
  if (!qword_10051C9B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A4CEC()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_1000A4E28(319, &qword_10051C9C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream);
    if (v1 <= 0x3F)
    {
      sub_1000A4E28(319, &qword_10051C9D0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AsyncStream.Continuation);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1000A4E28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_10000F69C(&qword_10051C9C8);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1000A4E8C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, void **a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v32 = a7;
  int v33 = a4;
  Swift::String v34 = a5;
  Swift::String v35 = a6;
  uint64_t v13 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *a1;
  if (!*(void *)(v17 + 16))
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_1000A7FD8(v17 + 32, (uint64_t)&time);
  sub_10000F734(0, &qword_10051CB18);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  if (*(void *)(v17 + 16) < 2uLL) {
    goto LABEL_25;
  }
  uint64_t v31 = v14;
  uint64_t v18 = *(void **)&v40[0];
  sub_1000A7FD8(v17 + 64, (uint64_t)&time);
  sub_10000F734(0, &qword_10051CB20);
  if ((swift_dynamicCast() & 1) == 0)
  {

    return;
  }
  if (*(void *)(v17 + 16) < 3uLL) {
    goto LABEL_26;
  }
  id v30 = v18;
  uint64_t v19 = *(void **)&v40[0];
  sub_1000A7FD8(v17 + 96, (uint64_t)&time);
  sub_10000F214(&qword_10051CB28);
  if (swift_dynamicCast())
  {
    uint64_t v29 = a8;
    unint64_t v17 = *(void *)&v40[0];
    [v30 CMTimeValue];
    double Seconds = CMTimeGetSeconds(&time);
    sub_1001F9AFC((double *)&time.value, Seconds);
    if (*(void *)(*(void *)a2 + 16) != 1) {
      goto LABEL_29;
    }
    id v20 = v19;
    NSSet.makeIterator()();
    v28[1] = v20;

    sub_1000A8034((unint64_t *)&unk_10051CB30, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    while (v42)
    {
      sub_100046CEC(&time, v40);
      sub_1000A7FD8((uint64_t)v40, (uint64_t)v38);
      swift_dynamicCast();
      sub_1001F934C(&v39, v36, v37);
      swift_bridgeObjectRelease();
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v40);
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v13);
    if (!(v17 >> 62))
    {
      uint64_t v21 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
LABEL_12:
      uint64_t v22 = v29;
      objc_super v23 = v32;
      if (!v21)
      {
LABEL_21:

        swift_bridgeObjectRelease_n();
        uint64_t v27 = &v43;
        goto LABEL_22;
      }
      if (v21 >= 1)
      {
        uint64_t v24 = 0;
        do
        {
          if ((v17 & 0xC000000000000001) != 0) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v25 = *(id *)(v17 + 8 * v24 + 32);
          }
          uint64_t v26 = v25;
          ++v24;
          time.value = (CMTimeValue)v25;
          sub_1000A5524((void **)&time, v33, v34, v35, a3, v23, v22, Seconds);
        }
        while (v21 != v24);
        goto LABEL_21;
      }
      __break(1u);
LABEL_29:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    goto LABEL_12;
  }

  uint64_t v27 = &v44;
LABEL_22:
}

uint64_t sub_1000A5324(uint64_t a1, uint64_t *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v24 = a1 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(a1 + 56);
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v22 = v21[1];
    v25[0] = *v21;
    v25[1] = v22;
    swift_bridgeObjectRetain();
    sub_1000A5D5C(v25, a2, a3, a4, a5);
    if (v5)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v26) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v24 + 8 * v15);
    if (!v19)
    {
      int64_t v20 = v15 + 1;
      if (v15 + 1 >= v26) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v24 + 8 * v20);
      if (v19) {
        goto LABEL_14;
      }
      int64_t v20 = v15 + 2;
      if (v15 + 2 >= v26) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v24 + 8 * v20);
      if (v19) {
        goto LABEL_14;
      }
      int64_t v20 = v15 + 3;
      if (v15 + 3 >= v26) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v24 + 8 * v20);
      if (v19)
      {
LABEL_14:
        int64_t v15 = v20;
        goto LABEL_15;
      }
      int64_t v23 = v15 + 4;
      if (v15 + 4 >= v26) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v24 + 8 * v23);
      v15 += 4;
      if (!v19) {
        break;
      }
    }
LABEL_15:
    unint64_t v13 = (v19 - 1) & v19;
  }
  while (1)
  {
    int64_t v15 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v15 >= v26) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v24 + 8 * v15);
    ++v23;
    if (v19) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000A5524(void **a1, unint64_t *a2, unint64_t *a3, void **a4, uint64_t a5, uint64_t *a6, uint64_t a7, double a8)
{
  int v91 = a3;
  uint64_t v92 = a5;
  uint64_t v14 = type metadata accessor for CVDetection();
  uint64_t v93 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v90 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v89 - v17;
  uint64_t v19 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *a1;
  self;
  uint64_t v23 = swift_dynamicCastObjCClass();
  if (v23)
  {
    uint64_t v24 = (void *)v23;
    id v25 = v22;
    sub_1001623B4(v24, (uint64_t)v21);
    id v26 = [v24 descriptor];
    if (v26)
    {
      uint64_t v27 = v26;
      self;
      uint64_t v28 = swift_dynamicCastObjCClass();

      if (v28)
      {
        sub_1000A80DC((uint64_t)v21, (uint64_t)v18, type metadata accessor for StreamingBarcodeDetectorResult);
        swift_storeEnumTagMultiPayload();
        unint64_t v29 = *a2;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a2 = v29;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v29 = sub_100328C90(0, *(void *)(v29 + 16) + 1, 1, v29);
          *a2 = v29;
        }
        unint64_t v32 = *(void *)(v29 + 16);
        unint64_t v31 = *(void *)(v29 + 24);
        if (v32 >= v31 >> 1)
        {
          unint64_t v29 = sub_100328C90(v31 > 1, v32 + 1, 1, v29);
          *a2 = v29;
        }
        *(void *)(v29 + 16) = v32 + 1;
        uint64_t v33 = v29
            + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))
            + *(void *)(v93 + 72) * v32;
        uint64_t v34 = (uint64_t)v18;
LABEL_9:
        sub_1000A7F70(v34, v33, (uint64_t (*)(void))type metadata accessor for CVDetection);

        sub_1000A807C((uint64_t)v21, type metadata accessor for StreamingBarcodeDetectorResult);
        return;
      }
    }
    id v35 = [v24 basicDescriptor];
    if (v35)
    {
      Swift::Int v36 = v35;
      uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v94 = 0x5465646F63726142;
      unint64_t v95 = 0xEB00000000657079;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v37 + 16) && (unint64_t v38 = sub_10032B058((uint64_t)&v96), (v39 & 1) != 0))
      {
        sub_1000A7FD8(*(void *)(v37 + 56) + 32 * v38, (uint64_t)&v97);
      }
      else
      {
        long long v97 = 0u;
        long long v98 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_100046BF0((uint64_t)&v96);
      if (*((void *)&v98 + 1))
      {
        type metadata accessor for ObjectType(0);
        if (swift_dynamicCast())
        {
          uint64_t v63 = (void *)v96;
          uint64_t v64 = (void *)AVMetadataObjectTypeAppClipCode;
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v67 = v66;
          if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v67 == v68)
          {
            id v69 = v64;

            swift_bridgeObjectRelease_n();
LABEL_43:
            uint64_t v80 = v90;
            sub_1000A80DC((uint64_t)v21, v90, type metadata accessor for StreamingBarcodeDetectorResult);
            swift_storeEnumTagMultiPayload();
            uint64_t v81 = v91;
            unint64_t v82 = *v91;
            char v83 = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v81 = v82;
            if ((v83 & 1) == 0)
            {
              unint64_t v82 = sub_100328C90(0, *(void *)(v82 + 16) + 1, 1, v82);
              *uint64_t v81 = v82;
            }
            unint64_t v85 = *(void *)(v82 + 16);
            unint64_t v84 = *(void *)(v82 + 24);
            if (v85 >= v84 >> 1)
            {
              unint64_t v82 = sub_100328C90(v84 > 1, v85 + 1, 1, v82);
              *uint64_t v81 = v82;
            }
            *(void *)(v82 + 16) = v85 + 1;
            uint64_t v33 = v82
                + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))
                + *(void *)(v93 + 72) * v85;
            uint64_t v34 = v80;
            goto LABEL_9;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          id v79 = v64;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v78) {
            goto LABEL_43;
          }
        }
        goto LABEL_36;
      }
    }
    else
    {
      long long v97 = 0u;
      long long v98 = 0u;
    }
    sub_10000FBD8((uint64_t)&v97, &qword_10051B448);
LABEL_36:
    sub_1000A807C((uint64_t)v21, type metadata accessor for StreamingBarcodeDetectorResult);

    return;
  }
  self;
  if (!swift_dynamicCastObjCClass())
  {
    self;
    uint64_t v40 = swift_dynamicCastObjCClass();
    if (v40)
    {
      unint64_t v41 = (void *)v40;
      id v42 = v22;
      [v41 documentSceneConfidence];
      int v44 = v43;
      unint64_t v45 = *a4;
      char v46 = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v45;
      if ((v46 & 1) == 0)
      {
        unint64_t v45 = sub_10032934C(0, v45[2] + 1, 1, v45);
        *a4 = v45;
      }
      unint64_t v48 = v45[2];
      unint64_t v47 = v45[3];
      if (v48 >= v47 >> 1) {
        unint64_t v45 = sub_10032934C((void *)(v47 > 1), v48 + 1, 1, v45);
      }
      v45[2] = v48 + 1;
      uint64_t v49 = &v45[3 * v48];
      *((_DWORD *)v49 + 8) = v44;
      *((double *)v49 + 5) = a8;
      *((unsigned char *)v49 + 48) = 0;
      *a4 = v45;
      [v41 textSceneConfidence];
      int v51 = v50;
      uint64_t v52 = *a4;
      char v53 = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v52;
      if ((v53 & 1) == 0)
      {
        uint64_t v52 = sub_10032934C(0, v52[2] + 1, 1, v52);
        *a4 = v52;
      }
      unint64_t v55 = v52[2];
      unint64_t v54 = v52[3];
      if (v55 >= v54 >> 1) {
        uint64_t v52 = sub_10032934C((void *)(v54 > 1), v55 + 1, 1, v52);
      }
      v52[2] = v55 + 1;
      uint64_t v56 = &v52[3 * v55];
      *((_DWORD *)v56 + 8) = v51;
      *((double *)v56 + 5) = a8;
      *((unsigned char *)v56 + 48) = 1;
      *a4 = v52;
      [v41 qrSceneConfidence];
      if (v57 < 0.06)
      {
        Swift::Int v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1001F934C(&v96, v58, v59);
        swift_bridgeObjectRelease();
      }
      [v41 appCodeSceneConfidence];
      if (v60 >= 0.108)
      {
      }
      else
      {
        Swift::Int v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1001F934C(&v96, v61, v62);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      self;
      uint64_t v70 = swift_dynamicCastObjCClass();
      if (v70)
      {
        unsigned __int8 v71 = (void *)v70;
        id v72 = v22;
        id v73 = [v71 objectDetectionCachedResult];
        if (v73)
        {
          uint64_t v74 = v73;
          uint64_t v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v77 = v76;
        }
        else
        {
          uint64_t v75 = 0;
          unint64_t v77 = 0xF000000000000000;
        }
        uint64_t v86 = *a6;
        unint64_t v87 = a6[1];
        *a6 = v75;
        a6[1] = v77;
        sub_100094760(v86, v87);
        unsigned int v88 = [v71 objectDetectionUprightExifOrientation];

        *(_DWORD *)a7 = v88;
        *(unsigned char *)(a7 + 4) = 0;
      }
    }
  }
}

uint64_t sub_1000A5D5C(uint64_t *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CVDetection();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v15 == v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  Swift::Int v58 = a4;
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v17)
  {
LABEL_20:
    if (qword_100517F00 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for UUID();
    uint64_t v27 = sub_10000F378(v26, (uint64_t)qword_100521CC0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v12, v27, v26);
    if (qword_100517F08 != -1) {
      swift_once();
    }
    uint64_t v28 = unk_100521CE0;
    Swift::Int v58 = (void *)qword_100521CD8;
    uint64_t v29 = qword_100521CE8;
    uint64_t v30 = unk_100521CF0;
    uint64_t v31 = qword_100521CF8;
    uint64_t v32 = unk_100521D00;
    uint64_t v33 = qword_100521D08;
    uint64_t v34 = unk_100521D10;
    if (qword_100517F10 != -1) {
      swift_once();
    }
    uint64_t v35 = qword_100521D18;
    Swift::Int v36 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
    *(_DWORD *)&v12[v36[5]] = -1082130432;
    uint64_t v37 = &v12[v36[6]];
    *(void *)uint64_t v37 = v58;
    *((void *)v37 + 1) = v28;
    *((void *)v37 + 2) = v29;
    *((void *)v37 + 3) = v30;
    *((void *)v37 + 4) = v31;
    *((void *)v37 + 5) = v32;
    *((void *)v37 + 6) = v33;
    *((void *)v37 + 7) = v34;
    unint64_t v38 = &v12[v36[7]];
    *(void *)unint64_t v38 = 0x7974706D65;
    *((void *)v38 + 1) = 0xE500000000000000;
    *(void *)&v12[v36[8]] = 0;
    *(void *)&v12[v36[9]] = v35;
    *(void *)&v12[v36[10]] = 0x8000000000000000;
    swift_storeEnumTagMultiPayload();
    char v39 = (void *)*a3;
    goto LABEL_35;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v18 == v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_28:
    if (qword_100517F00 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for UUID();
    uint64_t v41 = sub_10000F378(v40, (uint64_t)qword_100521CC0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v12, v41, v40);
    if (qword_100517F08 != -1) {
      swift_once();
    }
    uint64_t v42 = unk_100521CE0;
    uint64_t v57 = qword_100521CD8;
    uint64_t v43 = qword_100521CE8;
    uint64_t v44 = unk_100521CF0;
    uint64_t v45 = qword_100521CF8;
    uint64_t v46 = unk_100521D00;
    uint64_t v47 = qword_100521D08;
    uint64_t v48 = unk_100521D10;
    if (qword_100517F10 != -1) {
      swift_once();
    }
    uint64_t v49 = qword_100521D18;
    int v50 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
    *(_DWORD *)&v12[v50[5]] = -1082130432;
    int v51 = (uint64_t *)&v12[v50[6]];
    *int v51 = v57;
    v51[1] = v42;
    v51[2] = v43;
    v51[3] = v44;
    v51[4] = v45;
    v51[5] = v46;
    v51[6] = v47;
    v51[7] = v48;
    uint64_t v52 = &v12[v50[7]];
    *(void *)uint64_t v52 = 0x7974706D65;
    *((void *)v52 + 1) = 0xE500000000000000;
    *(void *)&v12[v50[8]] = 0;
    *(void *)&v12[v50[9]] = v49;
    *(void *)&v12[v50[10]] = 0x8000000000000000;
    swift_storeEnumTagMultiPayload();
    char v39 = (void *)*v58;
LABEL_35:
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v59 = *a2;
    *a2 = 0x8000000000000000;
    unint64_t v54 = v39;
LABEL_36:
    sub_1002F4D5C((uint64_t)v54, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
    *a2 = v59;
    swift_bridgeObjectRelease();
    return sub_1000A807C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CVDetection);
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v21 == v13) {
    return swift_bridgeObjectRelease();
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v25 == v13)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v55 & 1) == 0) {
        return result;
      }
    }
    if (*(void *)(a5 + 8) >> 60 == 15)
    {
      sub_1003E6684((uint64_t)v12);
      swift_storeEnumTagMultiPayload();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v59 = *a2;
      *a2 = 0x8000000000000000;
      unint64_t v54 = _swiftEmptyArrayStorage;
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t sub_1000A6310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = sub_10000F214(&qword_10051CB10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v29 - v12;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = type metadata accessor for CVDetection();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  if (v14)
  {
    v29[1] = a1;
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    sub_1000A80DC(v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v19(v13, 0, 1, v15);
    sub_10000FBD8((uint64_t)v13, &qword_10051CB10);
    uint64_t v20 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A80DC(v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v19(v10, 0, 1, v15);
      sub_10000FBD8((uint64_t)v10, &qword_10051CB10);
      v18 += v20;
      --v14;
    }
    while (v14);
    v19(v10, 1, 1, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v13, 1, 1, v15);
    sub_10000FBD8((uint64_t)v13, &qword_10051CB10);
  }
  sub_1003FD108(a3);
  uint64_t v21 = type metadata accessor for DetectionRequest(0);
  type metadata accessor for DetectionRequest.Originator(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = a3 + *(int *)(v21 + 24);
  *(void *)uint64_t v22 = 0;
  *(void *)(v22 + 8) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v22 + 16) = _Q0;
  *(double *)(a3 + *(int *)(v21 + 28)) = a4;
  *(void *)(a3 + *(int *)(type metadata accessor for DetectionResult(0) + 20)) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t destroy for StreamingMetadataResult(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    return sub_100038B34(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for StreamingMetadataResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_100038528(*v5, v6);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v6;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t assignWithCopy for StreamingMetadataResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (uint64_t *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100038528(*v4, *(void *)(a2 + 32));
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v5;
      sub_100038B34(v8, v9);
      goto LABEL_8;
    }
    sub_1000A6840(a1 + 24);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_100038528(*v4, *(void *)(a2 + 32));
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
LABEL_8:
  int v10 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v10;
  return a1;
}

uint64_t sub_1000A6840(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for StreamingMetadataResult(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for StreamingMetadataResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (void *)(a2 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 >> 60 != 15)
  {
    unint64_t v6 = *(void *)(a2 + 32);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = *v4;
      *(void *)(a1 + 32) = v6;
      sub_100038B34(v7, v5);
      goto LABEL_6;
    }
    sub_1000A6840(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
LABEL_6:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingMetadataResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 45)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingMetadataResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 45) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingMetadataResult()
{
  return &type metadata for StreamingMetadataResult;
}

uint64_t sub_1000A6A04(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A6A30(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) != a2) {
LABEL_8:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000A6A80(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000A6AD0(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v51 = sub_10000F214(&qword_10051CB08);
  __chkstk_darwin(v51);
  uint64_t v50 = (uint64_t)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v49 = (uint64_t)v41 - v7;
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)v41 - v9;
  uint64_t v10 = type metadata accessor for DetectionResult(0);
  uint64_t v47 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (!v13) {
    return (uint64_t)v14;
  }
  v41[1] = v3;
  uint64_t v56 = _swiftEmptyArrayStorage;
  sub_100040A1C(0, v13, 0);
  uint64_t result = sub_10032E440(a1);
  uint64_t v17 = result;
  uint64_t v18 = 0;
  uint64_t v19 = a1 + 64;
  uint64_t v42 = a1 + 80;
  int64_t v43 = v13;
  uint64_t v45 = a1 + 64;
  uint64_t v46 = a1;
  uint64_t v44 = v16;
  uint64_t v20 = v51;
  while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v23 = (unint64_t)v17 >> 6;
    if ((*(void *)(v19 + 8 * ((unint64_t)v17 >> 6)) & (1 << v17)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v16) {
      goto LABEL_26;
    }
    uint64_t v54 = v18;
    uint64_t v55 = 1 << v17;
    uint64_t v24 = *(int *)(v20 + 48);
    uint64_t v25 = *(void *)(a1 + 48);
    uint64_t v26 = type metadata accessor for CVDetection();
    uint64_t v27 = (uint64_t)v12;
    uint64_t v28 = v48;
    sub_1000A80DC(v25 + *(void *)(*(void *)(v26 - 8) + 72) * v17, v48, (uint64_t (*)(void))type metadata accessor for CVDetection);
    uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8 * v17);
    *(void *)(v28 + v24) = v29;
    uint64_t v30 = v49;
    sub_1000A80DC(v28, v49, (uint64_t (*)(void))type metadata accessor for CVDetection);
    *(void *)(v30 + *(int *)(v20 + 48)) = v29;
    uint64_t v31 = v30;
    uint64_t v32 = v50;
    sub_10000FC34(v31, v50, &qword_10051CB08);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = v28;
    uint64_t v12 = (char *)v27;
    sub_10000FBD8(v33, &qword_10051CB08);
    v52(v32, *(void *)(v32 + *(int *)(v20 + 48)));
    sub_10000FBD8(v32, &qword_10051CB08);
    uint64_t v14 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100040A1C(0, v14[2] + 1, 1);
      uint64_t v14 = v56;
    }
    unint64_t v35 = v14[2];
    unint64_t v34 = v14[3];
    if (v35 >= v34 >> 1)
    {
      sub_100040A1C(v34 > 1, v35 + 1, 1);
      uint64_t v14 = v56;
    }
    long long v14[2] = v35 + 1;
    uint64_t result = sub_1000A7F70(v27, (uint64_t)v14+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * v35, type metadata accessor for DetectionResult);
    a1 = v46;
    int64_t v21 = 1 << *(unsigned char *)(v46 + 32);
    if (v17 >= v21) {
      goto LABEL_27;
    }
    uint64_t v19 = v45;
    uint64_t v36 = *(void *)(v45 + 8 * v23);
    if ((v36 & v55) == 0) {
      goto LABEL_28;
    }
    LODWORD(v16) = v44;
    if (*(_DWORD *)(v46 + 36) != v44) {
      goto LABEL_29;
    }
    unint64_t v37 = v36 & (-2 << (v17 & 0x3F));
    if (v37)
    {
      int64_t v21 = __clz(__rbit64(v37)) | v17 & 0xFFFFFFFFFFFFFFC0;
      int64_t v22 = v43;
    }
    else
    {
      unint64_t v38 = v23 + 1;
      unint64_t v39 = (unint64_t)(v21 + 63) >> 6;
      int64_t v22 = v43;
      if (v23 + 1 < v39)
      {
        unint64_t v40 = *(void *)(v45 + 8 * v38);
        if (v40)
        {
LABEL_22:
          int64_t v21 = __clz(__rbit64(v40)) + (v38 << 6);
        }
        else
        {
          while (v39 - 2 != v23)
          {
            unint64_t v40 = *(void *)(v42 + 8 * v23++);
            if (v40)
            {
              unint64_t v38 = v23 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v18 = v54 + 1;
    uint64_t v17 = v21;
    if (v54 + 1 == v22) {
      return (uint64_t)v14;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000A6F1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_10051CA50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1000A741C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  sub_10000F214(&qword_10051CA60);
  char v29 = 0;
  sub_1000A759C(&qword_10051CA68, &qword_10051CA70);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v27;
  sub_10000F214(&qword_10051CA78);
  char v29 = 1;
  sub_1000A7470(&qword_10051CA80, (void (*)(void))sub_1000A74E0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = v10;
  uint64_t v11 = v27;
  LOBYTE(v27) = 2;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v25 = v11;
  char v29 = 3;
  sub_1000A7534();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v14 = v27;
  unint64_t v15 = v28;
  type metadata accessor for CGImagePropertyOrientation(0);
  uint64_t v22 = v16;
  unint64_t v23 = v15;
  char v29 = 4;
  uint64_t v24 = v14;
  sub_1000A7588(v14, v15);
  sub_1000A8034(&qword_10051CA98, type metadata accessor for CGImagePropertyOrientation);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (BYTE4(v27)) {
    int v17 = 6;
  }
  else {
    int v17 = v27;
  }
  uint64_t v18 = v26;
  swift_bridgeObjectRetain();
  uint64_t v19 = v25;
  swift_bridgeObjectRetain();
  unint64_t v21 = v23;
  uint64_t v20 = v24;
  sub_1000A7588(v24, v23);
  sub_100094760(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100094760(v20, v21);
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 40) = v17;
  *(unsigned char *)(a2 + 44) = 0;
  return result;
}

unint64_t sub_1000A741C()
{
  unint64_t result = qword_10051CA58;
  if (!qword_10051CA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CA58);
  }
  return result;
}

uint64_t sub_1000A7470(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10051CA78);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A74E0()
{
  unint64_t result = qword_10051CA88;
  if (!qword_10051CA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CA88);
  }
  return result;
}

unint64_t sub_1000A7534()
{
  unint64_t result = qword_10051CA90;
  if (!qword_10051CA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CA90);
  }
  return result;
}

uint64_t sub_1000A7588(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100038528(a1, a2);
  }
  return a1;
}

uint64_t sub_1000A759C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10051CA60);
    sub_1000A8034(a2, (void (*)(uint64_t))type metadata accessor for DetectionResult);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A7630()
{
  unint64_t result = qword_10051CAC0;
  if (!qword_10051CAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CAC0);
  }
  return result;
}

unint64_t sub_1000A7684()
{
  unint64_t result = qword_10051CAD0;
  if (!qword_10051CAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CAD0);
  }
  return result;
}

uint64_t sub_1000A76D8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001004261E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x647055656E656373 && a2 == 0xEC00000073657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x8000000100426200 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100426230)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1000A7908(unint64_t a1)
{
  uint64_t v38 = sub_10000F214((uint64_t *)&unk_10051CAF0);
  uint64_t v3 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  char v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100520FC0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = &_swiftEmptySetSingleton;
  uint64_t v51 = &_swiftEmptySetSingleton;
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v47 = _swiftEmptyArrayStorage;
  long long v46 = xmmword_100440410;
  int v44 = 0;
  char v45 = 1;
  if (a1)
  {
    sub_10003ED5C(a1);
    v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  id v11 = sub_1000A7D78(v10.super.isa);

  if (v11)
  {
    uint64_t v36 = v7;
    uint64_t v37 = v6;
    sub_10000F214(&qword_10051CB00);
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = *(void *)(v12 + 16);
    unint64_t v35 = v9;
    if (v13)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(v12 + 8 * i + 32);
        v39[0] = v15;
        sub_1000A4E8C(v39, (uint64_t)&v51, (uint64_t)&v50, (unint64_t *)&v49, (unint64_t *)&v48, &v47, (uint64_t *)&v46, (uint64_t)&v44);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v16 = v51;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = &_swiftEmptySetSingleton;
    }
    int64_t v43 = &_swiftEmptyDictionarySingleton;
    uint64_t v17 = swift_bridgeObjectRetain();
    sub_1000A5324(v17, (uint64_t *)&v43, &v49, &v48, (uint64_t)&v46);
    swift_bridgeObjectRelease();
    unint64_t v34 = v16;
    uint64_t v18 = sub_1000A3444((uint64_t)v16);
    if ((v19 & 1) == 0)
    {
      unint64_t v20 = v18;
      __chkstk_darwin(v18);
      uint64_t v33 = v21;
      uint64_t v22 = swift_bridgeObjectRetain();
      uint64_t v23 = sub_1000A6AD0(v22, (void (*)(uint64_t, void))sub_1000A7F68, (uint64_t)(&v34 - 4));
      swift_bridgeObjectRelease();
      uint64_t v24 = v1 + OBJC_IVAR____TtC6Tamale26StreamingMetadataProcessor_continuation;
      uint64_t v25 = v3;
      uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
      uint64_t v27 = v5;
      uint64_t v28 = v38;
      v26(v5, v24, v38);
      unint64_t v29 = *((void *)&v46 + 1);
      uint64_t v30 = v46;
      v39[0] = v20;
      v39[1] = v23;
      void v39[2] = (unint64_t)v47;
      uint64_t v39[3] = v20;
      long long v40 = v46;
      int v41 = v44;
      char v42 = v45;
      swift_bridgeObjectRetain();
      sub_1000A7588(v30, v29);
      uint64_t v31 = v35;
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v28);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
      swift_bridgeObjectRelease();
      sub_100094760(v30, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1000A7D78(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  obunint64_t j = v1;
  id v3 = [obj countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(id *)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v8 = v7;
        long long v17 = 0uLL;
        uint64_t v18 = 0;
        if (v7) {
          [v7 time];
        }
        uint64_t v9 = [v8 handledMetadataObjectTypes];
        NSArray v10 = [v8 metadataObjects];
        long long v15 = v17;
        uint64_t v16 = v18;
        id v11 = +[NSValue valueWithCMTime:&v15];
        v23[0] = v11;
        v23[1] = v9;
        void v23[2] = v10;
        uint64_t v12 = +[NSArray arrayWithObjects:v23 count:3];
        [v2 addObject:v12];
      }
      id v4 = [obj countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v4);
  }

  return v2;
}

uint64_t sub_1000A7F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000A6310(a1, a2, a3, *(double *)(v3 + 16));
}

uint64_t sub_1000A7F70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A7FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000A8034(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A807C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A80DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for StreamingMetadataResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StreamingMetadataResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A82A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingMetadataResult.CodingKeys()
{
  return &type metadata for StreamingMetadataResult.CodingKeys;
}

unint64_t sub_1000A82DC()
{
  unint64_t result = qword_10051CB50;
  if (!qword_10051CB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CB50);
  }
  return result;
}

unint64_t sub_1000A8334()
{
  unint64_t result = qword_10051CB58;
  if (!qword_10051CB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CB58);
  }
  return result;
}

unint64_t sub_1000A838C()
{
  unint64_t result = qword_10051CB60;
  if (!qword_10051CB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CB60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OpenSensitiveURLOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ControlCapsuleStyling(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A854CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ControlCapsuleStyling()
{
  return &type metadata for ControlCapsuleStyling;
}

uint64_t sub_1000A8584()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A85A0()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F214(&qword_10051CD38);
  type metadata accessor for Material.Layer();
  uint64_t v4 = swift_allocObject();
  long long v6 = xmmword_10043D4F0;
  *(_OWORD *)(v4 + 16) = xmmword_10043D4F0;
  sub_10000F214(&qword_10051CD40);
  type metadata accessor for Material.Layer.Filter();
  *(_OWORD *)(swift_allocObject() + 16) = v6;
  static Material.Layer.Filter.gaussianBlur(radius:isOpaque:isDithered:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Color.RGBColorSpace.sRGB(_:), v0);
  Color.Resolved.init(colorSpace:red:green:blue:opacity:)();
  static Material.Layer.backdrop(scale:color:filters:)();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Int sub_1000A87F4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A882C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A8860@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v77 = a2;
  uint64_t v74 = a1;
  uint64_t v82 = a3;
  uint64_t v3 = type metadata accessor for Capsule();
  __chkstk_darwin(v3 - 8);
  uint64_t v81 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ColorScheme();
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  __chkstk_darwin(v5);
  char v78 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051CC30);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  NSArray v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051CC38);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10051CC40);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_10051CC48);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  long long v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_10051CC50);
  uint64_t v24 = v23 - 8;
  __chkstk_darwin(v23);
  id v73 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000F214(&qword_10051CC58) - 8;
  __chkstk_darwin(v76);
  uint64_t v75 = (char *)&v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v27 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v36 = sub_10000F214(&qword_10051CC60);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v10, v74, v36);
  uint64_t v37 = &v10[*(int *)(v8 + 44)];
  *uint64_t v37 = v27;
  *((void *)v37 + 1) = v29;
  *((void *)v37 + 2) = v31;
  *((void *)v37 + 3) = v33;
  *((void *)v37 + 4) = v35;
  v37[40] = 0;
  LOBYTE(v8) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_10000FB74((uint64_t)v10, (uint64_t)v14, &qword_10051CC30);
  long long v46 = &v14[*(int *)(v12 + 44)];
  *long long v46 = v8;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  sub_10000FBD8((uint64_t)v10, &qword_10051CC30);
  uint64_t v47 = static Alignment.center.getter();
  uint64_t v49 = v48;
  uint64_t v50 = (uint64_t *)&v18[*(int *)(v16 + 44)];
  *uint64_t v50 = static Alignment.center.getter();
  v50[1] = v51;
  uint64_t v52 = sub_10000F214(&qword_10051CC68);
  char v53 = v77;
  sub_1000A8E60(v77, (uint64_t)v50 + *(int *)(v52 + 44));
  uint64_t v54 = (uint64_t *)((char *)v50 + *(int *)(sub_10000F214(&qword_10051CC70) + 36));
  *uint64_t v54 = v47;
  v54[1] = v49;
  sub_10000FC34((uint64_t)v14, (uint64_t)v18, &qword_10051CC38);
  uint64_t v55 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v18, (uint64_t)v22, &qword_10051CC40);
  uint64_t v57 = (uint64_t *)&v22[*(int *)(v20 + 44)];
  *uint64_t v57 = KeyPath;
  v57[1] = v55;
  sub_10000FBD8((uint64_t)v18, &qword_10051CC40);
  uint64_t v59 = v78;
  uint64_t v58 = v79;
  float v60 = (unsigned int *)&enum case for ColorScheme.light(_:);
  if ((v53 & 1) == 0) {
    float v60 = (unsigned int *)&enum case for ColorScheme.dark(_:);
  }
  uint64_t v61 = v80;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, *v60, v80);
  uint64_t v62 = swift_getKeyPath();
  uint64_t v63 = *(int *)(v24 + 44);
  uint64_t v64 = (uint64_t)v73;
  uint64_t v65 = (uint64_t *)&v73[v63];
  uint64_t v66 = sub_10000F214(&qword_10051B788);
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))((char *)v65 + *(int *)(v66 + 28), v59, v61);
  *uint64_t v65 = v62;
  sub_10000FB74((uint64_t)v22, v64, &qword_10051CC48);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v61);
  sub_10000FBD8((uint64_t)v22, &qword_10051CC48);
  uint64_t v67 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v68 = type metadata accessor for RoundedCornerStyle();
  uint64_t v69 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 104))(v81, v67, v68);
  uint64_t v70 = (uint64_t)v75;
  uint64_t v71 = (uint64_t)&v75[*(int *)(v76 + 44)];
  sub_10008D3F0(v69, v71);
  *(_WORD *)(v71 + *(int *)(sub_10000F214(&qword_10051CC78) + 36)) = 256;
  sub_10000FB74(v64, v70, &qword_10051CC50);
  sub_10008D454(v69);
  sub_10000FBD8(v64, &qword_10051CC50);
  return sub_10000FC34(v70, v82, &qword_10051CC58);
}

uint64_t sub_1000A8E60@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v82 = a1;
  uint64_t v91 = a2;
  uint64_t v2 = type metadata accessor for ShadowStyle();
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v76 = v2;
  __chkstk_darwin(v2);
  id v73 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000F214(&qword_10051CC80);
  __chkstk_darwin(v71);
  int v77 = (uint64_t *)((char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = sub_10000F214(&qword_10051CC88);
  __chkstk_darwin(v72);
  char v78 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000F214(&qword_10051CC90);
  __chkstk_darwin(v90);
  uint64_t v74 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v79 = (uint64_t)&v63 - v8;
  uint64_t v85 = sub_10000F214(&qword_10051CC98);
  __chkstk_darwin(v85);
  uint64_t v88 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for ColorScheme();
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v67 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10051CCA0);
  __chkstk_darwin(v86);
  uint64_t v66 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v70 = (uint64_t)&v63 - v13;
  uint64_t v14 = sub_10000F214(&qword_10051CCA8);
  __chkstk_darwin(v14 - 8);
  uint64_t v89 = (uint64_t)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v87 = (char *)&v63 - v17;
  uint64_t v92 = type metadata accessor for Material();
  uint64_t v18 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Capsule();
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_10051CCB0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v63 - v28;
  uint64_t v30 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v81 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v31 = type metadata accessor for RoundedCornerStyle();
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104);
  v80(v23, v30, v31);
  sub_100062D8C();
  Material.init<A>(provider:)();
  sub_10008D3F0((uint64_t)v23, (uint64_t)v26);
  uint64_t v32 = &v26[*(int *)(v24 + 52)];
  uint64_t v33 = v92;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v63(v32, v20, v92);
  uint64_t v64 = v24;
  *(_WORD *)&v26[*(int *)(v24 + 56)] = 256;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v65 = v18 + 8;
  v34(v20, v33);
  sub_10008D454((uint64_t)v23);
  char v83 = v26;
  unint64_t v84 = v29;
  sub_10000FC34((uint64_t)v26, (uint64_t)v29, &qword_10051CCB0);
  v80(v23, v81, v31);
  if (v82)
  {
    static Material.regular.getter();
    uint64_t v35 = (uint64_t)v83;
    sub_10008D3F0((uint64_t)v23, (uint64_t)v83);
    uint64_t v36 = v64;
    uint64_t v37 = v34;
    uint64_t v38 = v92;
    v63((char *)(v35 + *(int *)(v64 + 52)), v20, v92);
    *(_WORD *)(v35 + *(int *)(v36 + 56)) = 256;
    v37(v20, v38);
    sub_10008D454((uint64_t)v23);
    uint64_t v39 = v68;
    uint64_t v40 = v67;
    uint64_t v41 = v69;
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for ColorScheme.light(_:), v69);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v43 = (uint64_t)v66;
    uint64_t v44 = (uint64_t *)&v66[*(int *)(v86 + 36)];
    uint64_t v45 = sub_10000F214(&qword_10051B788);
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))((char *)v44 + *(int *)(v45 + 28), v40, v41);
    *uint64_t v44 = KeyPath;
    sub_10000FB74(v35, v43, &qword_10051CCB0);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    sub_10000FBD8(v35, &qword_10051CCB0);
    uint64_t v46 = v70;
    sub_10000FC34(v43, v70, &qword_10051CCA0);
    sub_10000FB74(v46, v88, &qword_10051CCA0);
    swift_storeEnumTagMultiPayload();
    sub_1000AA438();
    sub_100013AA8(&qword_10051CCC8, &qword_10051CC90);
    uint64_t v47 = (uint64_t)v87;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v46, &qword_10051CCA0);
    uint64_t v48 = v35;
  }
  else
  {
    static Color.black.getter();
    uint64_t v49 = Color.opacity(_:)();
    swift_release();
    static Color.white.getter();
    Color.opacity(_:)();
    swift_release();
    uint64_t v50 = v73;
    static ShadowStyle.inner(color:radius:x:y:)();
    swift_release();
    uint64_t v51 = v76;
    uint64_t v52 = v77;
    uint64_t v53 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))((char *)v77 + *(int *)(v71 + 36), v50, v76);
    uint64_t *v52 = v49;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v51);
    static Color.white.getter();
    Color.opacity(_:)();
    swift_release();
    uint64_t v54 = (uint64_t)v78;
    static ShadowStyle.inner(color:radius:x:y:)();
    swift_release();
    sub_10000FC34((uint64_t)v52, v54, &qword_10051CC80);
    uint64_t v55 = v74;
    sub_10008D3F0((uint64_t)v23, v74);
    uint64_t v56 = v90;
    sub_10000FB74(v54, v55 + *(int *)(v90 + 52), &qword_10051CC88);
    *(_WORD *)(v55 + *(int *)(v56 + 56)) = 256;
    sub_10000FBD8(v54, &qword_10051CC88);
    sub_10008D454((uint64_t)v23);
    uint64_t v57 = v79;
    sub_10000FC34(v55, v79, &qword_10051CC90);
    sub_10000FB74(v57, v88, &qword_10051CC90);
    swift_storeEnumTagMultiPayload();
    sub_1000AA438();
    sub_100013AA8(&qword_10051CCC8, &qword_10051CC90);
    uint64_t v47 = (uint64_t)v87;
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v57, &qword_10051CC90);
    uint64_t v48 = (uint64_t)v83;
  }
  uint64_t v58 = (uint64_t)v84;
  sub_10000FB74((uint64_t)v84, v48, &qword_10051CCB0);
  uint64_t v59 = v89;
  sub_10000FB74(v47, v89, &qword_10051CCA8);
  uint64_t v60 = v91;
  sub_10000FB74(v48, v91, &qword_10051CCB0);
  uint64_t v61 = sub_10000F214(&qword_10051CCD0);
  sub_10000FB74(v59, v60 + *(int *)(v61 + 48), &qword_10051CCA8);
  sub_10000FBD8(v47, &qword_10051CCA8);
  sub_10000FBD8(v58, &qword_10051CCB0);
  sub_10000FBD8(v59, &qword_10051CCA8);
  return sub_10000FBD8(v48, &qword_10051CCB0);
}

uint64_t sub_1000A98E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A8860(a1, *v2, a2);
}

uint64_t sub_1000A98F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AA1E4(a1, &qword_10051CE00, &qword_10051CE08, a2, (__n128)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL));
}

uint64_t sub_1000A9914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v47 = a2;
  uint64_t v46 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10051CD48);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10051CD50);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10051CD58);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v19 = sub_10000F214(&qword_10051CD60);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v8, v45, v19);
  uint64_t v20 = (uint64_t *)&v8[*(int *)(v6 + 44)];
  *uint64_t v20 = KeyPath;
  v20[1] = v17;
  LOBYTE(v6) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_10000FB74((uint64_t)v8, (uint64_t)v12, &qword_10051CD48);
  uint64_t v29 = &v12[*(int *)(v10 + 44)];
  *uint64_t v29 = v6;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_10000FBD8((uint64_t)v8, &qword_10051CD48);
  uint64_t v30 = static Alignment.center.getter();
  uint64_t v32 = v31;
  uint64_t v33 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  *uint64_t v33 = static Alignment.center.getter();
  v33[1] = v34;
  uint64_t v35 = sub_10000F214(&qword_10051CD68);
  sub_1000A9CB0((uint64_t)v33 + *(int *)(v35 + 44));
  uint64_t v36 = (uint64_t *)((char *)v33 + *(int *)(sub_10000F214(&qword_10051CD70) + 36));
  uint64_t *v36 = v30;
  v36[1] = v32;
  sub_10000FC34((uint64_t)v12, (uint64_t)v16, &qword_10051CD50);
  uint64_t v37 = v46;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for ColorScheme.dark(_:), v46);
  uint64_t v38 = swift_getKeyPath();
  uint64_t v39 = sub_10000F214(&qword_10051CD78);
  uint64_t v40 = v47;
  uint64_t v41 = (uint64_t *)(v47 + *(int *)(v39 + 36));
  uint64_t v42 = sub_10000F214(&qword_10051B788);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)v41 + *(int *)(v42 + 28), v4, v37);
  *uint64_t v41 = v38;
  sub_10000FB74((uint64_t)v16, v40, &qword_10051CD58);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v37);
  return sub_10000FBD8((uint64_t)v16, &qword_10051CD58);
}

uint64_t sub_1000A9CB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v1 = type metadata accessor for ShadowStyle();
  uint64_t v41 = *(void *)(v1 - 8);
  uint64_t v42 = v1;
  __chkstk_darwin(v1);
  uint64_t v38 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000F214(&qword_10051CC80);
  uint64_t v4 = v3 - 8;
  __chkstk_darwin(v3);
  uint64_t v37 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000F214(&qword_10051CC88);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000F214(&qword_10051CD80) - 8;
  __chkstk_darwin(v40);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v39 = (uint64_t)&v36 - v12;
  uint64_t v13 = type metadata accessor for Material();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10051ADF0);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v36 - v22;
  sub_100062D8C();
  Material.init<A>(provider:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v16, v13);
  *(_WORD *)&v20[*(int *)(v18 + 64)] = 256;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10000FC34((uint64_t)v20, (uint64_t)v23, &qword_10051ADF0);
  static Color.black.getter();
  uint64_t v24 = Color.opacity(_:)();
  swift_release();
  static Color.white.getter();
  Color.opacity(_:)();
  swift_release();
  uint64_t v25 = v38;
  static ShadowStyle.inner(color:radius:x:y:)();
  swift_release();
  uint64_t v26 = v37;
  uint64_t v27 = (char *)v37 + *(int *)(v4 + 44);
  uint64_t v28 = v41;
  uint64_t v29 = v25;
  uint64_t v30 = v25;
  uint64_t v31 = v42;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v27, v29, v42);
  *uint64_t v26 = v24;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v31);
  static Color.white.getter();
  Color.opacity(_:)();
  swift_release();
  static ShadowStyle.inner(color:radius:x:y:)();
  swift_release();
  sub_10000FC34((uint64_t)v26, (uint64_t)v8, &qword_10051CC80);
  sub_10000FB74((uint64_t)v8, (uint64_t)v10, &qword_10051CC88);
  *(_WORD *)&v10[*(int *)(v40 + 64)] = 256;
  sub_10000FBD8((uint64_t)v8, &qword_10051CC88);
  uint64_t v32 = v39;
  sub_10000FC34((uint64_t)v10, v39, &qword_10051CD80);
  sub_10000FB74((uint64_t)v23, (uint64_t)v20, &qword_10051ADF0);
  sub_10000FB74(v32, (uint64_t)v10, &qword_10051CD80);
  uint64_t v33 = v43;
  sub_10000FB74((uint64_t)v20, v43, &qword_10051ADF0);
  uint64_t v34 = sub_10000F214(&qword_10051CD88);
  sub_10000FB74((uint64_t)v10, v33 + *(int *)(v34 + 48), &qword_10051CD80);
  sub_10000FBD8(v32, &qword_10051CD80);
  sub_10000FBD8((uint64_t)v23, &qword_10051ADF0);
  sub_10000FBD8((uint64_t)v10, &qword_10051CD80);
  return sub_10000FBD8((uint64_t)v20, &qword_10051ADF0);
}

uint64_t sub_1000AA1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AA1E4(a1, &qword_10051CD98, &qword_10051CDB0, a2, (__n128)vdupq_n_s64(0x3FEE666666666666uLL));
}

uint64_t sub_1000AA1E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  __n128 v30 = a5;
  uint64_t v7 = type metadata accessor for Capsule();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051CD90);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = static Alignment.center.getter();
  uint64_t v16 = v15;
  uint64_t v17 = a4 + *(int *)(sub_10000F214(a2) + 36);
  uint64_t v18 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v19 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v9, v18, v19);
  static Color.black.getter();
  uint64_t v20 = Color.opacity(_:)();
  swift_release();
  sub_10008D3F0((uint64_t)v9, (uint64_t)v13);
  uint64_t v21 = &v13[*(int *)(v11 + 44)];
  *(void *)uint64_t v21 = v20;
  *(_OWORD *)(v21 + 8) = xmmword_100440680;
  *((void *)v21 + 3) = 0x402E000000000000;
  sub_10008D454((uint64_t)v9);
  static UnitPoint.center.getter();
  unint64_t v23 = v22;
  unint64_t v25 = v24;
  sub_10000FB74((uint64_t)v13, v17, &qword_10051CD90);
  uint64_t v26 = (__n128 *)(v17 + *(int *)(sub_10000F214(&qword_10051CDA0) + 36));
  *uint64_t v26 = v30;
  v26[1].n128_u64[0] = v23;
  v26[1].n128_u64[1] = v25;
  sub_10000FBD8((uint64_t)v13, &qword_10051CD90);
  uint64_t v27 = (uint64_t *)(v17 + *(int *)(sub_10000F214(&qword_10051CDA8) + 36));
  *uint64_t v27 = v14;
  v27[1] = v16;
  uint64_t v28 = sub_10000F214(v31);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(a4, v32, v28);
}

unint64_t sub_1000AA438()
{
  unint64_t result = qword_10051CCB8;
  if (!qword_10051CCB8)
  {
    sub_10000F69C(&qword_10051CCA0);
    sub_100013AA8(&qword_10051CCC0, &qword_10051CCB0);
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CCB8);
  }
  return result;
}

uint64_t sub_1000AA4FC()
{
  sub_10000F214(&qword_100521040);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100440690;
  id v1 = [self replaceBuildIn];
  id v2 = [objc_allocWithZone((Class)_UIDirectionalLightConfiguration) initWithPalette:v1];

  [v2 setDuration:4.0];
  [v2 setDirection:2];
  id v3 = [self directionalLightWithConfiguration:v2];
  id v4 = [objc_allocWithZone((Class)_UIIntelligenceContentLightEffect) initWithLightSource:v3];

  *(void *)(v0 + 32) = v4;
  specialized Array._endMutation()();
  sub_10000F214(&qword_10051CCD8);
  State.init(wrappedValue:)();
  return v0;
}

ValueMetadata *type metadata accessor for ControlMaterialProvider()
{
  return &type metadata for ControlMaterialProvider;
}

ValueMetadata *type metadata accessor for CircleInsetSpreadShadowModifier()
{
  return &type metadata for CircleInsetSpreadShadowModifier;
}

uint64_t destroy for ControlCircleStyling()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *_s6Tamale20ControlCircleStylingVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ControlCircleStyling(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ControlCircleStyling(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GeoLookup.CandidateResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeoLookup.CandidateResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ControlCircleStyling()
{
  return &type metadata for ControlCircleStyling;
}

unint64_t sub_1000AA818()
{
  unint64_t result = qword_10051CCE0;
  if (!qword_10051CCE0)
  {
    sub_10000F69C(&qword_10051CC58);
    sub_1000AA8B8();
    sub_100013AA8(&qword_10051CD20, &qword_10051CC78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CCE0);
  }
  return result;
}

unint64_t sub_1000AA8B8()
{
  unint64_t result = qword_10051CCE8;
  if (!qword_10051CCE8)
  {
    sub_10000F69C(&qword_10051CC50);
    sub_1000AA958();
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CCE8);
  }
  return result;
}

unint64_t sub_1000AA958()
{
  unint64_t result = qword_10051CCF0;
  if (!qword_10051CCF0)
  {
    sub_10000F69C(&qword_10051CC48);
    sub_1000AA9F8();
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CCF0);
  }
  return result;
}

unint64_t sub_1000AA9F8()
{
  unint64_t result = qword_10051CCF8;
  if (!qword_10051CCF8)
  {
    sub_10000F69C(&qword_10051CC40);
    sub_1000AADBC(&qword_10051CD00, &qword_10051CC38, (void (*)(void))sub_1000AAABC);
    sub_100013AA8(&qword_10051CD18, &qword_10051CC70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CCF8);
  }
  return result;
}

unint64_t sub_1000AAABC()
{
  unint64_t result = qword_10051CD08;
  if (!qword_10051CD08)
  {
    sub_10000F69C(&qword_10051CC30);
    sub_100013AA8(&qword_10051CD10, &qword_10051CC60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CD08);
  }
  return result;
}

unint64_t sub_1000AAB60()
{
  unint64_t result = qword_10051CD28;
  if (!qword_10051CD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CD28);
  }
  return result;
}

uint64_t sub_1000AABB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AABD0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000AABF0()
{
  unint64_t result = qword_10051CD30;
  if (!qword_10051CD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CD30);
  }
  return result;
}

ValueMetadata *type metadata accessor for CapsuleInsetSpreadShadowModifier()
{
  return &type metadata for CapsuleInsetSpreadShadowModifier;
}

unint64_t sub_1000AAC58()
{
  unint64_t result = qword_10051CDB8;
  if (!qword_10051CDB8)
  {
    sub_10000F69C(&qword_10051CD78);
    sub_1000AACF8();
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CDB8);
  }
  return result;
}

unint64_t sub_1000AACF8()
{
  unint64_t result = qword_10051CDC0;
  if (!qword_10051CDC0)
  {
    sub_10000F69C(&qword_10051CD58);
    sub_1000AADBC(&qword_10051CDC8, &qword_10051CD50, (void (*)(void))sub_1000AAE3C);
    sub_100013AA8(&qword_10051CDE0, &qword_10051CD70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CDC0);
  }
  return result;
}

uint64_t sub_1000AADBC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AAE3C()
{
  unint64_t result = qword_10051CDD0;
  if (!qword_10051CDD0)
  {
    sub_10000F69C(&qword_10051CD48);
    sub_100013AA8(&qword_10051CDD8, &qword_10051CD60);
    sub_100013AA8(&qword_100518C68, &qword_100518C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CDD0);
  }
  return result;
}

unint64_t sub_1000AAF04()
{
  unint64_t result = qword_10051CDE8;
  if (!qword_10051CDE8)
  {
    sub_10000F69C(&qword_10051CD98);
    sub_100013AA8(&qword_10051CDF0, &qword_10051CDB0);
    sub_100013AA8(&qword_10051CDF8, &qword_10051CDA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CDE8);
  }
  return result;
}

uint64_t sub_1000AAFC8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000AAFE8()
{
  unint64_t result = qword_10051CE10;
  if (!qword_10051CE10)
  {
    sub_10000F69C(&qword_10051CE00);
    sub_100013AA8(&qword_10051CE18, &qword_10051CE08);
    sub_100013AA8(&qword_10051CDF8, &qword_10051CDA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051CE10);
  }
  return result;
}

uint64_t sub_1000AB0B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  id v4 = *(void **)(v1 + 8);
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  type metadata accessor for ScanwaveViewControllerLink();
  sub_1000AD158();
  swift_retain();
  id v8 = v3;
  id v9 = v4;
  uint64_t result = ObservedObject.init(wrappedValue:)();
  *a1 = v5;
  a1[1] = v7;
  a1[2] = result;
  a1[3] = v11;
  a1[4] = (uint64_t)v8;
  a1[5] = (uint64_t)v9;
  return result;
}

uint64_t sub_1000AB144()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051D068);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 16))
  {
    swift_beginAccess();
    swift_retain();
    sub_10000F214(&qword_10051D020);
    Published.projectedValue.getter();
    swift_endAccess();
    swift_release();
    sub_100013AA8(&qword_10051D070, &qword_10051D068);
    swift_retain();
    uint64_t v6 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(v1 + 32) = v6;
  return swift_release();
}

void sub_1000AB2E0(unsigned char *a1, uint64_t a2)
{
  if ((*a1 & 1) == 0)
  {
    uint64_t v2 = *(void **)(a2 + 24);
    if (v2)
    {
      id v3 = v2;
      dispatch thunk of ScanwaveViewController.activate()();
    }
  }
}

uint64_t sub_1000AB348()
{
  swift_release();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000AB390()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

id sub_1000AB404()
{
  uint64_t v1 = sub_10000F214(&qword_10051D078);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ScanwaveImageConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v0 + 24);
  id v9 = *(id *)(v0 + 16);
  id v10 = v8;
  ScanwaveImageConfiguration.init(image:depthImage:)();
  type metadata accessor for ScanwaveViewController();
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v7, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  dispatch thunk of ScanwaveViewController.imageConfiguration.setter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v11;
}

uint64_t sub_1000AB59C(void *a1, uint64_t a2)
{
  return sub_1000AD438(a1, a2, *(void *)(v2 + 8));
}

void *sub_1000AB5A4@<X0>(void *a1@<X8>)
{
  type metadata accessor for ScanwaveViewControllerWrapper.Coordinator();
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1000AB5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AD4F4();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000AB644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AD4F4();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000AB6A8()
{
}

Swift::Int sub_1000AB6D0()
{
  return Hasher._finalize()();
}

void sub_1000AB714()
{
}

Swift::Int sub_1000AB73C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000AB77C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale26ScanwaveViewControllerLink__action;
  uint64_t v2 = sub_10000F214(&qword_10051D020);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000AB820@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ScanwaveViewControllerLink();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void sub_1000AB860(uint64_t a1)
{
}

void sub_1000AB88C(uint64_t a1)
{
}

void sub_1000AB8B0(uint64_t a1)
{
}

void sub_1000AB8D4(uint64_t a1)
{
}

void sub_1000AB8F8(uint64_t a1)
{
}

void sub_1000AB91C(uint64_t a1)
{
}

void sub_1000AB940(uint64_t a1)
{
}

void sub_1000AB964(uint64_t a1)
{
}

void sub_1000AB988(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self imageNamed:v5];

  if (v6) {
    *a4 = v6;
  }
  else {
    __break(1u);
  }
}

id sub_1000AB9F8(void *a1, void *a2, char a3)
{
  if (!a3)
  {
    id v5 = a1;
    [v5 size];
    double v7 = v6;
    if ((~*(void *)&v6 & 0x7FF0000000000000) != 0)
    {
      if (v6 > -9.22337204e18)
      {
        if (v6 < 9.22337204e18)
        {
          [v5 size];
          if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
          {
            if (v8 > -9.22337204e18)
            {
              if (v8 < 9.22337204e18)
              {
                double v9 = (double)(uint64_t)v7 / (double)(uint64_t)v8;
                if (v9 <= 1.0)
                {
                  if (v9 >= 0.642857143)
                  {
LABEL_14:
                    if (qword_100517DC8 == -1)
                    {
LABEL_15:
                      id v10 = (void *)qword_10055E0E8;
LABEL_24:
                      id v12 = v10;
                      sub_1000ACB3C(a1, a2, 0);
                      return v12;
                    }
LABEL_43:
                    swift_once();
                    goto LABEL_15;
                  }
                }
                else if (v9 <= 1.55555556)
                {
                  goto LABEL_14;
                }
                if (qword_100517DD0 != -1) {
                  swift_once();
                }
                id v10 = (void *)qword_10055E0F0;
                goto LABEL_24;
              }
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
  if (a3 == 1)
  {
    return a2;
  }
  else
  {
    switch((unint64_t)a1)
    {
      case 1uLL:
        if (qword_100517DC0 != -1) {
          swift_once();
        }
        id v11 = (void *)qword_10055E0E0;
        break;
      case 2uLL:
        if (qword_100517DA8 != -1) {
          swift_once();
        }
        id v11 = (void *)qword_10055E0C8;
        break;
      case 3uLL:
        if (qword_100517DB0 != -1) {
          swift_once();
        }
        id v11 = (void *)qword_10055E0D0;
        break;
      default:
        if (qword_100517DB8 != -1) {
          swift_once();
        }
        id v11 = (void *)qword_10055E0D8;
        break;
    }
    return v11;
  }
}

uint64_t sub_1000ABD28(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = *(void *)(a1 - 8);
  v3[6] = v4;
  v3[7] = *(void *)(v4 + 64);
  v3[8] = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000ABE14, 0, 0);
}

uint64_t sub_1000ABE14()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for TaskPriority();
  long long v12 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v2, v4, v12);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 32) = v12;
  (*(void (**)(unint64_t, uint64_t, void))(v3 + 32))(v7 + v6, v2, v12);
  uint64_t v8 = sub_100064F54(v1, (uint64_t)&unk_10051D038, v7);
  *(void *)(v0 + 80) = v8;
  double v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v9;
  uint64_t v10 = sub_10000F214(&qword_10051B2C8);
  *double v9 = v0;
  v9[1] = sub_1000ABFD4;
  return Task<>.value.getter(v0 + 16, v8, v10);
}

uint64_t sub_1000ABFD4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000AC0D0, 0, 0);
}

uint64_t sub_1000AC0D0()
{
  uint64_t v1 = (void *)v0[2];
  if (v1)
  {
    double v2 = sub_10030CA60(v0[3], v0[4]);
    id v3 = [objc_allocWithZone((Class)UIImage) initWithCIImage:v1 scale:sub_1001C2994(v2) orientation:1.0];
  }
  else
  {
    if (qword_100517DC8 != -1) {
      swift_once();
    }
    id v3 = (id)qword_10055E0E8;
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t sub_1000AC1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  _OWORD v6[2] = a1;
  void v6[3] = a4;
  return _swift_task_switch(sub_1000AC208, 0, 0);
}

uint64_t sub_1000AC208()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  id v3 = [objc_allocWithZone((Class)CIContext) init];
  uint64_t v5 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  if (!v4)
  {
    id v6 = [objc_allocWithZone((Class)CIImage) initWithCVPixelBuffer:v5];
    uint64_t result = CVPixelBufferGetPixelFormatType(v5);
    if ((int)result > 1751410031)
    {
      if (result != 1751410032)
      {
        if (result != 1751411059) {
          goto LABEL_7;
        }
LABEL_15:
        if (v3)
        {
          id v11 = v3;
          id v12 = v6;
          id v9 = sub_1000AC470(v6, v11);
          sub_1000ACF14(v5, 0);

          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    else if (result != 1717855600)
    {
      if (result != 1717856627)
      {
LABEL_7:
        sub_1000ACF14(v5, 0);

        goto LABEL_3;
      }
      goto LABEL_15;
    }
    id v13 = [self depthToDisparityFilter];
    [v13 setInputImage:v6];
    uint64_t result = (uint64_t)[v13 outputImage];
    if (result)
    {
      if (v3)
      {
        uint64_t v14 = (void *)result;
        id v15 = (id)result;
        id v16 = v3;
        id v9 = sub_1000AC470(v14, v16);
        sub_1000ACF14(v5, 0);

        goto LABEL_10;
      }
LABEL_22:
      __break(1u);
      return result;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v4 != 255)
  {
    unsigned __int8 v8 = v4;

    sub_1000ACF14(v5, v8);
    goto LABEL_9;
  }
LABEL_3:

LABEL_9:
  id v9 = 0;
LABEL_10:
  **(void **)(v0 + 16) = v9;
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

id sub_1000AC470(void *a1, void *a2)
{
  if (a1)
  {
    unsigned __int8 v4 = self;
    id v5 = a1;
    id v6 = [v4 areaMinMaxRedFilter];
    [v6 setInputImage:v5];
    [v5 extent];
    [v6 setExtent:];
    id v7 = [v6 outputImage];
    if (v7)
    {
      unsigned __int8 v8 = v7;
      id v9 = (float *)swift_slowAlloc();
      [a2 render:v8 toBitmap:v9 rowBytes:16 format:kCIFormatRGBAf colorSpace:0.0, 0.0, 1.0, 1.0];
      float v10 = *v9;
      float v11 = v9[1];
      swift_slowDealloc();
      float v12 = v11 - v10;
      if (v12 >= 0.0039216)
      {
        id v14 = [v4 colorMatrixFilter];
        [v14 setInputImage:v5];
        double v15 = 1.0 / v12;
        id v16 = [objc_allocWithZone((Class)CIVector) initWithX:v15 Y:0.0 Z:0.0 W:0.0];
        [v14 setRVector:v16];

        id v17 = [objc_allocWithZone((Class)CIVector) initWithX:v15 Y:0.0 Z:0.0 W:0.0];
        [v14 setGVector:v17];

        id v18 = [objc_allocWithZone((Class)CIVector) initWithX:v15 Y:0.0 Z:0.0 W:0.0];
        [v14 setBVector:v18];

        id v19 = [objc_allocWithZone((Class)CIVector) initWithX:-(float)(v10 / v12) Y:-(float)(v10 / v12) Z:-(float)(v10 / v12) W:0.0];
        [v14 setBiasVector:v19];

        id v13 = [v14 outputImage];
        return v13;
      }
    }
    else
    {
    }
  }
  return 0;
}

BOOL sub_1000AC740(id a1, SEL a2)
{
  return 1;
}

uint64_t type metadata accessor for ScanwaveViewControllerWrapper.Coordinator()
{
  return self;
}

uint64_t sub_1000AC76C()
{
  return type metadata accessor for ScanwaveViewControllerLink();
}

uint64_t type metadata accessor for ScanwaveViewControllerLink()
{
  uint64_t result = qword_10051CF48;
  if (!qword_10051CF48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000AC7C0()
{
  sub_1000AC850();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000AC850()
{
  if (!qword_10051CF58)
  {
    sub_10000F69C((uint64_t *)&unk_10051CF60);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10051CF58);
    }
  }
}

BOOL sub_1000AC8AC(id a1, SEL a2)
{
  return 1;
}

unsigned char *storeEnumTagSinglePayload for ScanwaveViewControllerLink.Action(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000AC950);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScanwaveViewControllerLink.Action()
{
  return &type metadata for ScanwaveViewControllerLink.Action;
}

unint64_t sub_1000AC98C()
{
  unint64_t result = qword_10051D018;
  if (!qword_10051D018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051D018);
  }
  return result;
}

uint64_t sub_1000AC9E0@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000ACA64()
{
  return static Published.subscript.setter();
}

id sub_1000ACAE0(id result, void *a2, char a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return result;
    }
    id v4 = result;
    uint64_t result = a2;
  }
  return result;
}