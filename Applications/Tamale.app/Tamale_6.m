uint64_t sub_1003CD23C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003CD30C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            }
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)v18 = *(_OWORD *)v19;
            }
            v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_1000458B8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003CD5A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003C8BCC(a1, &OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime, a2);
}

uint64_t sub_1003CD5DC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1003C9010(a1, &OBJC_IVAR____TtC6Tamale16SessionAnalytics__suggestedActions, a2);
}

uint64_t sub_1003CD608@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1003C9010(a1, &OBJC_IVAR____TtC6Tamale16SessionAnalytics__performedActionCounts, a2);
}

id sub_1003CD634(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000407B0(0, v1, 0);
    uint64_t v3 = a1;
    v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = sub_10020B98C(a1);
    uint64_t v6 = v5;
    char v8 = v7 & 1;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v3 + 32))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        swift_release();
        __break(1u);
        JUMPOUT(0x1003CDA44);
      }
      if (((*(void *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_29;
      }
      if (*(_DWORD *)(v3 + 36) != v6) {
        goto LABEL_30;
      }
      unint64_t v9 = 0xEC00000070756B6FLL;
      unint64_t v10 = 0x6F4C6C6175736956;
      switch(*(unsigned char *)(*(void *)(v3 + 48) + v4))
      {
        case 1:
          unint64_t v9 = 0xEA00000000007075;
          unint64_t v10 = 0x6B6F6F4C7370614DLL;
          break;
        case 2:
          unint64_t v10 = 0x697463417370614DLL;
          unint64_t v9 = 0xEA00000000006E6FLL;
          break;
        case 3:
          unint64_t v9 = 0xE600000000000000;
          unint64_t v10 = 0x65646F435251;
          break;
        case 4:
          unint64_t v9 = 0xEB0000000065646FLL;
          unint64_t v10 = 0x4370696C43707041;
          break;
        case 5:
          unint64_t v9 = 0xEC000000726F7463;
          unint64_t v10 = 0x6574654461746144;
          break;
        case 6:
          unint64_t v10 = 0x7A6972616D6D7553;
          goto LABEL_20;
        case 7:
          unint64_t v9 = 0xE900000000000064;
          unint64_t v10 = 0x756F6C4164616552;
          break;
        case 8:
          unint64_t v9 = 0xED0000746E657645;
          unint64_t v10 = 0x7261646E656C6143;
          break;
        case 9:
          unint64_t v9 = 0x8000000100424480;
          unint64_t v10 = 0xD000000000000014;
          break;
        case 0xA:
          unint64_t v9 = 0xE300000000000000;
          unint64_t v10 = 7041857;
          break;
        case 0xB:
          unint64_t v9 = 0xEB00000000686372;
          unint64_t v10 = 0x6165536567616D49;
          break;
        case 0xC:
          unint64_t v10 = 0x74616C736E617254;
LABEL_20:
          unint64_t v9 = 0xE900000000000065;
          break;
        case 0xD:
          unint64_t v9 = 0xEF6E6F697463416FLL;
          unint64_t v10 = 0x4E72657474756853;
          break;
        case 0xE:
          unint64_t v9 = 0xEB00000000646569;
          unint64_t v10 = 0x6669636570736E55;
          break;
        default:
          break;
      }
      uint64_t v22 = v2;
      unint64_t v12 = v2[2];
      unint64_t v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000407B0(v11 > 1, v12 + 1, 1);
        uint64_t v3 = a1;
        v2 = v22;
      }
      v2[2] = v12 + 1;
      uint64_t v13 = &v2[2 * v12];
      v13[4] = v10;
      v13[5] = v9;
      uint64_t v14 = sub_10020BA30(v4, v6, v8 & 1, v3);
      uint64_t v4 = v14;
      uint64_t v6 = v15;
      char v8 = v16 & 1;
      --v1;
    }
    while (v1);
    sub_1000BDE84(v14, v15, v16 & 1);
  }
  uint64_t v22 = v2;
  swift_bridgeObjectRetain();
  sub_1003CCAE4((uint64_t *)&v22);
  swift_bridgeObjectRelease();
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100013AA8((unint64_t *)&qword_10051CA40, (uint64_t *)&unk_100522CD0);
  BidirectionalCollection<>.joined(separator:)();
  swift_release();
  id v17 = objc_allocWithZone((Class)NSString);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v17 initWithString:v18];

  return v19;
}

uint64_t sub_1003CDA80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003C8BCC(a1, &OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime, a2);
}

uint64_t sub_1003CDAAC()
{
  return sub_1003C8DE4(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC6Tamale16SessionAnalytics__endTime);
}

uint64_t sub_1003CDAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003CDB38()
{
  return sub_1003C91C0(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC6Tamale16SessionAnalytics__performedActionCounts);
}

uint64_t sub_1003CDB5C()
{
  return sub_1003C91C0(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC6Tamale16SessionAnalytics__suggestedActions);
}

void sub_1003CDB80()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale16SessionAnalytics__errorCount) = *(void *)(v0 + 24);
}

uint64_t sub_1003CDB94()
{
  return sub_1003C8DE4(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC6Tamale16SessionAnalytics__startTime);
}

uint64_t destroy for ScheduledTask()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SessionAnalyticsSuggestedActionObserverModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SessionAnalyticsSuggestedActionObserverModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SessionAnalyticsSuggestedActionObserverModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SessionAnalyticsSuggestedActionObserverModifier()
{
  return &type metadata for SessionAnalyticsSuggestedActionObserverModifier;
}

uint64_t sub_1003CDD04()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1003CDD24()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_1003CDD54()
{
  return State.wrappedValue.setter();
}

void sub_1003CDDAC(char a1)
{
  sub_1003CC5DC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1003CDDC0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003CDE00()
{
  return sub_1003CCA30(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1003CDE10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SessionAnalyticsSuggestedActionObserverModifier.Reason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003CDF24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionAnalyticsSuggestedActionObserverModifier.Reason()
{
  return &type metadata for SessionAnalyticsSuggestedActionObserverModifier.Reason;
}

unint64_t sub_1003CDF60()
{
  unint64_t result = qword_10052D2C8;
  if (!qword_10052D2C8)
  {
    sub_10000F69C(&qword_10052D2C0);
    sub_1003CDFDC();
    sub_1000805F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D2C8);
  }
  return result;
}

unint64_t sub_1003CDFDC()
{
  unint64_t result = qword_10052D2D0;
  if (!qword_10052D2D0)
  {
    sub_10000F69C(&qword_10052D2B0);
    sub_1003CE058();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D2D0);
  }
  return result;
}

unint64_t sub_1003CE058()
{
  unint64_t result = qword_10052D2D8;
  if (!qword_10052D2D8)
  {
    sub_10000F69C(&qword_10052D2A8);
    sub_100013AA8(&qword_10052D2E0, &qword_10052D2B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D2D8);
  }
  return result;
}

unint64_t sub_1003CE0FC()
{
  unint64_t result = qword_10052D2E8;
  if (!qword_10052D2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D2E8);
  }
  return result;
}

uint64_t sub_1003CE158()
{
  return sub_1003CDAAC();
}

uint64_t sub_1003CE170()
{
  return sub_1003CDB94();
}

void sub_1003CE188()
{
}

ValueMetadata *type metadata accessor for CallManager()
{
  return &type metadata for CallManager;
}

ValueMetadata *_s13ConfigurationVMa()
{
  return &_s13ConfigurationVN;
}

uint64_t sub_1003CE1C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  double v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.colorScheme.setter();
}

unint64_t sub_1003CE288()
{
  return 0xD000000000000028;
}

uint64_t sub_1003CE2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003CED50(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1003CE2D0(uint64_t a1)
{
  unint64_t v2 = sub_1003CE9B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003CE30C(uint64_t a1)
{
  unint64_t v2 = sub_1003CE9B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003CE348@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_10052D368);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003CE9B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  KeyedDecodingContainer.decode(_:forKey:)();
  int v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  *a2 = v10;
  return result;
}

uint64_t sub_1003CE4AC(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052D378);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003CE9B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL sub_1003CE5E0(float *a1, float *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1003CE5F4(void *a1)
{
  a1[1] = sub_1000DE814();
  a1[2] = sub_1000DEB5C();
  unint64_t result = sub_1003CE62C();
  a1[3] = result;
  return result;
}

unint64_t sub_1003CE62C()
{
  unint64_t result = qword_10052D2F0;
  if (!qword_10052D2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D2F0);
  }
  return result;
}

unint64_t sub_1003CE684()
{
  unint64_t result = qword_10052D2F8;
  if (!qword_10052D2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D2F8);
  }
  return result;
}

unint64_t sub_1003CE6D8(uint64_t a1)
{
  unint64_t result = sub_1003CE700();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003CE700()
{
  unint64_t result = qword_10052D328;
  if (!qword_10052D328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D328);
  }
  return result;
}

unint64_t sub_1003CE758(uint64_t a1)
{
  unint64_t result = sub_1003CE780();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003CE780()
{
  unint64_t result = qword_10052D358;
  if (!qword_10052D358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D358);
  }
  return result;
}

uint64_t sub_1003CE7D4()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1003CE7F0@<D0>(uint64_t *a1@<X8>, float a2@<S1>)
{
  sub_10000F214(&qword_10052D360);
  Binding.projectedValue.getter();
  swift_getKeyPath();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *a1 = swift_getKeyPath();
  sub_10000F214(&qword_100522BF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = (int *)sub_10000F214(&qword_10051C788);
  uint64_t v5 = (uint64_t *)((char *)a1 + v4[15]);
  *uint64_t v5 = swift_getKeyPath();
  sub_10000F214(&qword_10051C890);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (char *)a1 + v4[16];
  *(void *)uint64_t v6 = v10;
  *((void *)v6 + 1) = v11;
  *((_DWORD *)v6 + 4) = v12;
  *(float *)((char *)a1 + v4[17]) = a2;
  uint64_t v7 = (uint64_t *)((char *)a1 + v4[18]);
  void *v7 = 0xD000000000000015;
  v7[1] = 0x800000010042D170;
  double result = 0.0078125;
  *(uint64_t *)((char *)a1 + v4[19]) = 0x3F80000000000000;
  int v9 = (uint64_t *)((char *)a1 + v4[20]);
  *int v9 = nullsub_2;
  v9[1] = 0;
  return result;
}

double sub_1003CE980@<D0>(uint64_t *a1@<X8>)
{
  return sub_1003CE7F0(a1, *(float *)(v1 + 20));
}

uint64_t sub_1003CE98C()
{
  return EnvironmentValues.colorScheme.getter();
}

unint64_t sub_1003CE9B4()
{
  unint64_t result = qword_10052D370;
  if (!qword_10052D370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D370);
  }
  return result;
}

unsigned char *_s13ConfigurationV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003CEAA4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s13ConfigurationV10CodingKeysOMa_0()
{
  return &_s13ConfigurationV10CodingKeysON_0;
}

void *sub_1003CEAE0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BundleManagerConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for BundleManagerConfigurationForm(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for BundleManagerConfigurationForm()
{
  return &type metadata for BundleManagerConfigurationForm;
}

unint64_t sub_1003CEBEC()
{
  unint64_t result = qword_10052D380;
  if (!qword_10052D380)
  {
    sub_10000F69C(&qword_10051C788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D380);
  }
  return result;
}

unint64_t sub_1003CEC4C()
{
  unint64_t result = qword_10052D388;
  if (!qword_10052D388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D388);
  }
  return result;
}

unint64_t sub_1003CECA4()
{
  unint64_t result = qword_10052D390;
  if (!qword_10052D390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D390);
  }
  return result;
}

unint64_t sub_1003CECFC()
{
  unint64_t result = qword_10052D398;
  if (!qword_10052D398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D398);
  }
  return result;
}

uint64_t sub_1003CED50(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000028 && a2 == 0x800000010042D190)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

id sub_1003CEDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1003CEEB4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  if (DDResultIsValidPhoneNumberString())
  {

    return 1;
  }
  id v2 = objc_allocWithZone((Class)NSRegularExpression);
  id v4 = sub_1003CEDD8(0xD000000000000022, 0x800000010042D1C0, 0);
  swift_bridgeObjectRetain();
  uint64_t v5 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v4 firstMatchInString:v6 options:0 range:0 v5];

  if (v7)
  {

    return 1;
  }
  id v3 = objc_allocWithZone((Class)NSRegularExpression);
  id v8 = sub_1003CEDD8(0xD000000000000037, 0x800000010042D1F0, 0);
  swift_bridgeObjectRetain();
  uint64_t v9 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 firstMatchInString:v10 options:0 range:0 v9];

  if (v11)
  {

    return 1;
  }
  return 0;
}

void sub_1003CF308(uint8_t *a1, char *a2, void (*a3)(char *, uint64_t))
{
  v86 = a1;
  uint64_t v6 = sub_10000F214((uint64_t *)&unk_10052D440);
  __chkstk_darwin(v6 - 8);
  v82 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UTType();
  uint64_t v83 = *(void *)(v8 - 8);
  uint64_t v84 = v8;
  __chkstk_darwin(v8);
  v85 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v10 - 8);
  int v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v19 = (void (*)(char *, uint64_t))((char *)&v67 - v18);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v67 - v21;
  __chkstk_darwin(v23);
  v25 = (uint8_t *)&v67 - v24;
  uint64_t v81 = v3;
  sub_10000F3B0((void *)(v3 + OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_fileWriter), *(void *)(v3 + OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_fileWriter + 24));
  v26 = a2;
  v27 = a3;
  sub_1003DD6E0(v86, v26, a3, (uint64_t)v12);
  v77 = v22;
  v78 = v19;
  v28 = v85;
  v79 = v16;
  v86 = v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1000EE650((uint64_t)v12);
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10000F378(v29, (uint64_t)qword_10055E118);
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "error writing file", v32, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v33 = v13;
    v34 = v86;
    (*(void (**)(uint8_t *, char *, uint64_t))(v14 + 32))(v86, v12, v13);
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    uint64_t v36 = sub_10000F378(v35, (uint64_t)qword_10055E118);
    v37 = *(void (**)(char *, uint8_t *, uint64_t))(v14 + 16);
    v38 = v77;
    v37(v77, v34, v33);
    v39 = (char *)v78;
    v74 = v37;
    v37((char *)v78, v34, v33);
    uint64_t v40 = v83;
    v41 = *(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v83 + 16);
    v71 = v27;
    v72 = v41;
    v42 = v27;
    uint64_t v43 = v84;
    uint64_t v73 = v83 + 16;
    v41(v28, v42, v84);
    uint64_t v75 = v36;
    v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    v70 = v44;
    int v69 = v45;
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v80 = v33;
    uint64_t v76 = v14;
    if (v46)
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      v88[0] = v68;
      *(_DWORD *)uint64_t v47 = 136315650;
      uint64_t v48 = URL.description.getter();
      uint64_t v87 = sub_1003806B0(v48, v49, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v50 = *(void (**)(char *, uint64_t))(v14 + 8);
      v50(v38, v80);
      *(_WORD *)(v47 + 12) = 2080;
      uint64_t v51 = URL.pathExtension.getter();
      uint64_t v87 = sub_1003806B0(v51, v52, v88);
      uint64_t v43 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v78 = v50;
      v50(v39, v80);
      v53 = v86;
      *(_WORD *)(v47 + 22) = 2080;
      sub_1003CFC7C();
      v54 = v85;
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v87 = sub_1003806B0(v55, v56, v88);
      uint64_t v40 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v54, v43);
      v57 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v69, "file written successfully %s, extension: %s, uttype: %s", (uint8_t *)v47, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v33 = v80;
      swift_slowDealloc();

      uint64_t v59 = v81;
      v58 = v82;
    }
    else
    {
      v60 = *(void (**)(char *, uint64_t))(v14 + 8);
      v60(v38, v33);
      v78 = v60;
      v60(v39, v33);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v43);

      uint64_t v59 = v81;
      v58 = v82;
      v53 = v34;
    }
    sub_1003CFC3C();
    v74(v79, v53, v33);
    v72(v58, v71, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v58, 0, 1, v43);
    v61 = NSItemProvider.init(contentsOf:contentType:openInPlace:coordinated:visibility:)();
    sub_10000F214(&qword_100521040);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_100440690;
    *(void *)(v62 + 32) = v61;
    v88[0] = v62;
    specialized Array._endMutation()();
    *(void *)(v59 + OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_itemProvidersForActivityItemsConfiguration) = v88[0];
    id v63 = v61;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v59 + OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_shouldPersistContext) = 1;
    v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "itemProvider loaded", v66, 2u);
      swift_slowDealloc();
    }

    v78((char *)v53, v80);
  }
}

id sub_1003CFB98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImageDataConfiguration();
  return [super dealloc];
}

uint64_t type metadata accessor for ImageDataConfiguration()
{
  return self;
}

unint64_t sub_1003CFC3C()
{
  unint64_t result = qword_10052D450;
  if (!qword_10052D450)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10052D450);
  }
  return result;
}

unint64_t sub_1003CFC7C()
{
  unint64_t result = qword_10052D460;
  if (!qword_10052D460)
  {
    type metadata accessor for UTType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D460);
  }
  return result;
}

id sub_1003CFCD4()
{
  id result = [self defaultManager];
  qword_10055E638 = (uint64_t)result;
  return result;
}

void sub_1003CFD10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005180F0 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_10055E638;
  URL.path(percentEncoded:)(1);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v6) = [v6 fileExistsAtPath:v7];

  if (v6)
  {
    uint64_t v8 = (void *)qword_10055E638;
    URL.path(percentEncoded:)(1);
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = 0;
    LODWORD(v8) = [v8 removeItemAtPath:v9 error:&v22];

    id v10 = v22;
    if (v8)
    {
      id v11 = v10;
    }
    else
    {
      uint64_t v20 = (uint64_t)v22;
      id v12 = v22;
      uint64_t v13 = _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100517E38 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10000F378(v14, (uint64_t)qword_10055E1C0);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        id v22 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v20 = v13;
        Swift::String v18 = URL.path(percentEncoded:)(1);
        uint64_t v21 = sub_1003806B0(v18._countAndFlagsBits, (unint64_t)v18._object, (uint64_t *)&v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error removing file at %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }
      swift_errorRelease();
    }
  }
}

uint64_t sub_1003D00D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v27 - v7;
  URL.deletingLastPathComponent()();
  char v28 = 1;
  if (qword_1005180F0 != -1) {
    swift_once();
  }
  NSString v9 = (void *)qword_10055E638;
  URL.path(percentEncoded:)(1);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v11 = [v9 fileExistsAtPath:v10 isDirectory:&v28];

  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  uint64_t v13 = (void *)qword_10055E638;
  URL.path(percentEncoded:)(1);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v29 = 0;
  LODWORD(v13) = [v13 createDirectoryAtPath:v14 withIntermediateDirectories:1 attributes:0 error:&v29];

  if (v13)
  {
    uint64_t v15 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    id v16 = v29;
    return v15(v8, v2);
  }
  else
  {
    id v17 = v29;
    uint64_t v18 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100517E38 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000F378(v19, (uint64_t)qword_10055E1C0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      v27[2] = v18;
      id v29 = v23;
      *(_DWORD *)id v22 = 136315138;
      v27[1] = v22 + 4;
      Swift::String v24 = URL.path(percentEncoded:)(1);
      v27[3] = sub_1003806B0(v24._countAndFlagsBits, (unint64_t)v24._object, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v25 = *(void (**)(char *, uint64_t))(v3 + 8);
      v25(v5, v2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error creating directory at path %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();

      return ((uint64_t (*)(char *, uint64_t))v25)(v8, v2);
    }
    else
    {
      swift_errorRelease();

      v26 = *(void (**)(char *, uint64_t))(v3 + 8);
      v26(v5, v2);
      return ((uint64_t (*)(char *, uint64_t))v26)(v8, v2);
    }
  }
}

id sub_1003D04E4()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005180F0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_10055E638;
  URL.path(percentEncoded:)(1);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v6 = String.data(using:allowLossyConversion:)();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v8 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100094760(v6, v8);
  }
  id v10 = [v4 createFileAtPath:v5 contents:isa attributes:0];

  return v10;
}

void *initializeBufferWithCopyOfBuffer for ImageContextView(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  id v4 = v3;
  return a1;
}

void destroy for ImageContextView(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for ImageContextView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  NSString v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for ImageContextView(uint64_t a1, _OWORD *a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for ImageContextView()
{
  return &type metadata for ImageContextView;
}

id sub_1003D07AC(uint64_t a1)
{
  return sub_1003D08F8(a1, *v1);
}

uint64_t sub_1003D07B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003D08A4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1003D0818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003D08A4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1003D087C()
{
}

unint64_t sub_1003D08A4()
{
  unint64_t result = qword_10052D470;
  if (!qword_10052D470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D470);
  }
  return result;
}

id sub_1003D08F8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ContextResponderView();
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v4 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v3;
  id v5 = v3;

  unint64_t v6 = *(void **)(a2 + 16);
  id v7 = v5;
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    id v7 = v5;
    if (*(unsigned char *)(v8 + OBJC_IVAR____TtC6Tamale22ImageDataConfiguration_shouldPersistContext) == 1)
    {
      id v7 = v6;
      [v7 setActivityItemsConfiguration:v8];
      if (qword_100517E00 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10000F378(v9, (uint64_t)qword_10055E118);
      id v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "CustomView becomeFirstResponder", v12, 2u);
        swift_slowDealloc();
      }

      [v7 becomeFirstResponder];
    }
  }

  return v5;
}

uint64_t sub_1003D0A74()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003D0B2C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1003D1910(&qword_100526670, (void (*)(uint64_t))type metadata accessor for PromptScheduler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003D0BEC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003D0CCC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003D0D34()
{
  return swift_retain();
}

uint64_t sub_1003D0DD8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1003D1910(&qword_100526670, (void (*)(uint64_t))type metadata accessor for PromptScheduler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

uint64_t sub_1003D0E84()
{
  return swift_release();
}

uint64_t sub_1003D0F64()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10052D5D0);
  __chkstk_darwin(v2 - 8);
  id v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1003D1870();
  id v5 = [self mainRunLoop];
  uint64_t v6 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = static NSTimer.publish(every:tolerance:on:in:options:)();

  sub_1003D18B0((uint64_t)v4);
  uint64_t v14 = v7;
  type metadata accessor for NSTimer.TimerPublisher();
  sub_1003D1910(&qword_10052D5E0, (void (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher);
  uint64_t v8 = ConnectablePublisher.autoconnect()();
  swift_release();
  uint64_t v14 = v8;
  swift_allocObject();
  swift_weakInit();
  sub_10000F214(&qword_10052D5E8);
  sub_1003D1998();
  uint64_t v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_getKeyPath();
  uint64_t v12 = v1;
  uint64_t v13 = v9;
  uint64_t v14 = v1;
  sub_1003D1910(&qword_100526670, (void (*)(uint64_t))type metadata accessor for PromptScheduler);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1003D1204()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1003D1444();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003D125C()
{
  swift_getKeyPath();
  sub_1003D1910(&qword_100526670, (void (*)(uint64_t))type metadata accessor for PromptScheduler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v0 + 24))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_1003D1444()
{
  swift_getKeyPath();
  sub_1003D1910(&qword_100526670, (void (*)(uint64_t))type metadata accessor for PromptScheduler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 56;
    do
    {
      id v5 = *(void (**)(void))(v4 - 24);
      uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 - 8);
      swift_retain();
      uint64_t v7 = swift_retain();
      if (v6(v7)) {
        v5();
      }
      swift_release();
      swift_release();
      v4 += 32;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003D157C()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale15PromptScheduler___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1003D162C()
{
  return type metadata accessor for PromptScheduler();
}

uint64_t type metadata accessor for PromptScheduler()
{
  uint64_t result = qword_10052D4A8;
  if (!qword_10052D4A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003D1680()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for ScheduledTask(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ScheduledTask(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ScheduledTask(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ScheduledTask()
{
  return &type metadata for ScheduledTask;
}

uint64_t sub_1003D1834()
{
  return sub_1003D0CCC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003D1858()
{
  return sub_1003D19F4();
}

unint64_t sub_1003D1870()
{
  unint64_t result = qword_10052D5D8;
  if (!qword_10052D5D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10052D5D8);
  }
  return result;
}

uint64_t sub_1003D18B0(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052D5D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003D1910(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003D1958()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1003D1990()
{
  return sub_1003D1204();
}

unint64_t sub_1003D1998()
{
  unint64_t result = qword_10052D5F0;
  if (!qword_10052D5F0)
  {
    sub_10000F69C(&qword_10052D5E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D5F0);
  }
  return result;
}

uint64_t sub_1003D19F4()
{
  *(void *)(*(void *)(v0 + 16) + 24) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

id sub_1003D1AB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextResponderView();
  [super dealloc];
}

uint64_t type metadata accessor for ContextResponderView()
{
  return self;
}

id sub_1003D1B10()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for ContextResponderView();
  id v1 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v1 setAlpha:0.0];
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  objc_super v2 = self;
  sub_10000F214(&qword_100521040);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100444D30;
  id v4 = [v1 widthAnchor];
  id v5 = [v4 constraintEqualToConstant:0.0];

  *(void *)(v3 + 32) = v5;
  id v6 = [v1 heightAnchor];

  id v7 = [v6 constraintEqualToConstant:0.0];
  *(void *)(v3 + 40) = v7;
  specialized Array._endMutation()();
  sub_1003D1CA0();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 activateConstraints:isa];

  return v1;
}

unint64_t sub_1003D1CA0()
{
  unint64_t result = qword_10052D620;
  if (!qword_10052D620)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10052D620);
  }
  return result;
}

uint64_t sub_1003D1CE0(void *a1, int a2)
{
  int v24 = a2;
  uint64_t v3 = sub_10000F214(&qword_10052D680);
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  __chkstk_darwin(v3);
  os_log_type_t v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10052D688);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052D690);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  objc_super v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10052D698);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003D73C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v24)
  {
    if (v24 == 1)
    {
      char v26 = 1;
      sub_1003D7468();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
    }
    else
    {
      char v27 = 2;
      sub_1003D7414();
      uint64_t v15 = v21;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v23);
    }
  }
  else
  {
    char v25 = 0;
    sub_1003D74BC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1003D204C()
{
  uint64_t v1 = 1768843629;
  if (*v0 != 1) {
    uint64_t v1 = 0x647261646E617473;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t sub_1003D2098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003D6D18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003D20C0(uint64_t a1)
{
  unint64_t v2 = sub_1003D73C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003D20FC(uint64_t a1)
{
  unint64_t v2 = sub_1003D73C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003D2138(uint64_t a1)
{
  unint64_t v2 = sub_1003D7468();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003D2174(uint64_t a1)
{
  unint64_t v2 = sub_1003D7468();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003D21B0(uint64_t a1)
{
  unint64_t v2 = sub_1003D74BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003D21EC(uint64_t a1)
{
  unint64_t v2 = sub_1003D74BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003D2228(uint64_t a1)
{
  unint64_t v2 = sub_1003D7414();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003D2264(uint64_t a1)
{
  unint64_t v2 = sub_1003D7414();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1003D22A0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003D6E50(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1003D22CC(void *a1)
{
  return sub_1003D1CE0(a1, *v1);
}

void sub_1003D22E8(void *a1@<X8>)
{
  *a1 = &off_1004E5FA8;
}

ValueMetadata *type metadata accessor for BundleClassificationDebugOverlayStyle()
{
  return &type metadata for BundleClassificationDebugOverlayStyle;
}

uint64_t sub_1003D230C()
{
  uint64_t v1 = 1768843597;
  if (*v0 != 1) {
    uint64_t v1 = 0x647261646E617453;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736270;
  }
}

uint64_t sub_1003D2358()
{
  return sub_100013AA8(&qword_10052D628, &qword_10052D630);
}

unint64_t sub_1003D2398()
{
  unint64_t result = qword_10052D638;
  if (!qword_10052D638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D638);
  }
  return result;
}

uint64_t sub_1003D23EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = type metadata accessor for BundleClassificationDebugOverlay();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v36 = *(void *)(v37 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v35 = (uint64_t)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052D780);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10052D788);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000F214(&qword_10052D790);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10000F214(&qword_10052D798);
  __chkstk_darwin(v34);
  os_log_type_t v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v11 = static HorizontalAlignment.center.getter();
  *((void *)v11 + 1) = 0;
  unsigned char v11[16] = 1;
  uint64_t v22 = sub_10000F214(&qword_10052D7A0);
  sub_1003D28A0(v2, (uint64_t)&v11[*(int *)(v22 + 44)]);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for ColorScheme.dark(_:), v5);
  uint64_t KeyPath = swift_getKeyPath();
  int v24 = (uint64_t *)&v15[*(int *)(v13 + 44)];
  uint64_t v25 = sub_10000F214(&qword_10051B788);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v24 + *(int *)(v25 + 28), v8, v5);
  *int v24 = KeyPath;
  sub_10000FB74((uint64_t)v11, (uint64_t)v15, &qword_10052D780);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10000FBD8((uint64_t)v11, &qword_10052D780);
  uint64_t v26 = static SafeAreaRegions.all.getter();
  LOBYTE(v24) = static Edge.Set.all.getter();
  sub_10000FB74((uint64_t)v15, (uint64_t)v19, &qword_10052D788);
  char v27 = &v19[*(int *)(v17 + 44)];
  *(void *)char v27 = v26;
  v27[8] = (char)v24;
  sub_10000FBD8((uint64_t)v15, &qword_10052D788);
  sub_10000FB74((uint64_t)v19, (uint64_t)v21, &qword_10052D790);
  v21[*(int *)(v34 + 36)] = 0;
  sub_10000FBD8((uint64_t)v19, &qword_10052D790);
  uint64_t v28 = v33[1];
  v39 = sub_1003D4418();
  uint64_t v29 = v35;
  sub_1003DD4B0(v28, v35, (uint64_t (*)(void))type metadata accessor for BundleClassificationDebugOverlay);
  unint64_t v30 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  uint64_t v31 = swift_allocObject();
  sub_1003DD578(v29, v31 + v30, (uint64_t (*)(void))type metadata accessor for BundleClassificationDebugOverlay);
  sub_10000F214(&qword_100526A28);
  sub_1003DCECC();
  sub_1003DD088();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_10000FBD8((uint64_t)v21, &qword_10052D798);
}

uint64_t sub_1003D28A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10052D7D8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v69 = (char *)type metadata accessor for BlurReplaceTransition.Configuration();
  uint64_t v67 = *((void *)v69 - 1);
  __chkstk_darwin(v69);
  v64 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v61 - v9;
  uint64_t v74 = type metadata accessor for BlurReplaceTransition();
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v68 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for OpacityTransition();
  uint64_t v66 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v13 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_10000F214(&qword_10051D558);
  uint64_t v70 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  os_log_type_t v65 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v78 = (char *)v61 - v16;
  uint64_t v17 = sub_10000F214(&qword_10052D7E0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000F214(&qword_10052D7E8);
  uint64_t v75 = *(void *)(v20 - 8);
  uint64_t v76 = v20;
  __chkstk_darwin(v20);
  uint64_t v63 = (uint64_t)v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_10052D7F0);
  __chkstk_darwin(v79);
  uint64_t v77 = (uint64_t)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_10052D7F8);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)v61 - v27;
  uint64_t v29 = type metadata accessor for BundleClassificationDebugOverlay();
  int v30 = *(unsigned __int8 *)(a1 + *(int *)(v29 + 24));
  if (v30 == 1)
  {
    uint64_t v51 = static VerticalAlignment.center.getter();
    sub_1003D40B4(a1, (uint64_t)v80);
    *(_OWORD *)&v82[103] = v80[6];
    *(_OWORD *)&v82[87] = v80[5];
    *(_OWORD *)&v82[39] = v80[2];
    *(_OWORD *)&v82[23] = v80[1];
    *(_OWORD *)&v82[119] = v80[7];
    v82[135] = v81;
    *(_OWORD *)&v82[55] = v80[3];
    *(_OWORD *)&v82[71] = v80[4];
    *(_OWORD *)&v82[7] = v80[0];
    long long v52 = *(_OWORD *)&v82[64];
    *(_OWORD *)(v6 + 97) = *(_OWORD *)&v82[80];
    long long v53 = *(_OWORD *)&v82[112];
    *(_OWORD *)(v6 + 113) = *(_OWORD *)&v82[96];
    *(_OWORD *)(v6 + 129) = v53;
    long long v54 = *(_OWORD *)v82;
    *(_OWORD *)(v6 + 33) = *(_OWORD *)&v82[16];
    long long v55 = *(_OWORD *)&v82[48];
    *(_OWORD *)(v6 + 49) = *(_OWORD *)&v82[32];
    *(_OWORD *)(v6 + 65) = v55;
    *(_OWORD *)(v6 + 81) = v52;
    char v83 = 1;
    *(void *)uint64_t v6 = v51;
    *((void *)v6 + 1) = 0;
    v6[16] = 1;
    *(void *)(v6 + 145) = *(void *)&v82[128];
    *(_OWORD *)(v6 + 17) = v54;
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10052D810);
    sub_1003DD148();
    sub_100013AA8(&qword_10052D830, &qword_10052D810);
    _ConditionalContent<>.init(storage:)();
    uint64_t v56 = sub_10000F214(&qword_10052D800);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v28, 0, 1, v56);
  }
  else if (v30 == 2)
  {
    v61[1] = v4;
    uint64_t v62 = a2;
    uint64_t v31 = (uint64_t *)(a1 + *(int *)(v29 + 28));
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    *(void *)v82 = v33;
    *(void *)&v82[8] = v32;
    sub_10000F214(&qword_10052D7D0);
    State.wrappedValue.getter();
    uint64_t v34 = *(void *)(*(void *)&v80[0] + 16);
    swift_bridgeObjectRelease();
    uint64_t v35 = 1;
    if (v34)
    {
      *(void *)uint64_t v19 = static VerticalAlignment.center.getter();
      *((void *)v19 + 1) = 0;
      v19[16] = 1;
      uint64_t v36 = sub_10000F214(&qword_10052D838);
      sub_1003D32A0(a1, &v19[*(int *)(v36 + 44)]);
      v61[0] = v13;
      OpacityTransition.init()();
      static BlurReplaceTransition.Configuration.downUp.getter();
      uint64_t v37 = v67;
      uint64_t v38 = (uint64_t)v69;
      (*(void (**)(char *, char *, char *))(v67 + 16))(v64, v10, v69);
      v39 = v68;
      BlurReplaceTransition.init(configuration:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
      v64 = (char *)sub_1003DD3C8(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
      uint64_t v67 = sub_1003DD3C8(&qword_10051D5C0, (void (*)(uint64_t))&type metadata accessor for BlurReplaceTransition);
      int v69 = v19;
      uint64_t v40 = v78;
      uint64_t v41 = v71;
      uint64_t v42 = v74;
      uint64_t v43 = v61[0];
      Transition.combined<A>(with:)();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v39, v42);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v43, v41);
      uint64_t v44 = v70;
      uint64_t v45 = v73;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v65, v40, v73);
      *(void *)v82 = v41;
      *(void *)&v82[8] = v42;
      *(void *)&v82[16] = v64;
      *(void *)&v82[24] = v67;
      swift_getOpaqueTypeConformance2();
      uint64_t v46 = AnyTransition.init<A>(_:)();
      uint64_t v47 = (uint64_t)v69;
      uint64_t v48 = v63;
      sub_10000FB74((uint64_t)v69, v63, &qword_10052D7E0);
      uint64_t v49 = v76;
      *(void *)(v48 + *(int *)(v76 + 36)) = v46;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v78, v45);
      sub_10000FBD8(v47, &qword_10052D7E0);
      uint64_t v50 = v77;
      sub_10000FC34(v48, v77, &qword_10052D7E8);
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v49 = v76;
      uint64_t v50 = v77;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v50, v35, 1, v49);
    sub_10000FB74(v50, (uint64_t)v6, &qword_10052D7F0);
    swift_storeEnumTagMultiPayload();
    sub_10000F214(&qword_10052D810);
    sub_1003DD148();
    sub_100013AA8(&qword_10052D830, &qword_10052D810);
    _ConditionalContent<>.init(storage:)();
    sub_10000FBD8(v50, &qword_10052D7F0);
    uint64_t v58 = sub_10000F214(&qword_10052D800);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v25, 0, 1, v58);
    sub_10000FC34((uint64_t)v25, (uint64_t)v28, &qword_10052D7F8);
    a2 = v62;
  }
  else
  {
    uint64_t v57 = sub_10000F214(&qword_10052D800);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v28, 1, 1, v57);
  }
  sub_10000FB74((uint64_t)v28, (uint64_t)v25, &qword_10052D7F8);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v59 = sub_10000F214(&qword_10052D808);
  sub_10000FB74((uint64_t)v25, a2 + *(int *)(v59 + 48), &qword_10052D7F8);
  sub_10000FBD8((uint64_t)v28, &qword_10052D7F8);
  return sub_10000FBD8((uint64_t)v25, &qword_10052D7F8);
}

uint64_t sub_1003D32A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v91 = a1;
  v101 = a2;
  uint64_t v2 = type metadata accessor for Capsule();
  __chkstk_darwin(v2 - 8);
  v99 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for Material();
  uint64_t v98 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  v97 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DynamicTypeSize();
  uint64_t v93 = *(void *)(v5 - 8);
  uint64_t v94 = v5;
  __chkstk_darwin(v5);
  v92 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10052D840);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052D848);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10052D850);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000F214(&qword_10052D858);
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v84 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10052D860);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_10000F214(&qword_10052D868) - 8;
  __chkstk_darwin(v86);
  uint64_t v85 = (uint64_t)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_10000F214(&qword_10052D870) - 8;
  __chkstk_darwin(v90);
  v89 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_10000F214(&qword_10052D878) - 8;
  __chkstk_darwin(v96);
  uint64_t v25 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v95 = (uint64_t)&v83 - v27;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v28 = sub_10000F214(&qword_10052D880);
  sub_1003D3B70(v91, (uint64_t)&v9[*(int *)(v28 + 44)]);
  static Alignment.bottomLeading.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10000FB74((uint64_t)v9, (uint64_t)v13, &qword_10052D840);
  uint64_t v29 = &v13[*(int *)(v11 + 44)];
  long long v30 = v103;
  *(_OWORD *)uint64_t v29 = v102;
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v104;
  sub_10000FBD8((uint64_t)v9, &qword_10052D840);
  uint64_t v31 = static Font.caption2.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v13, (uint64_t)v16, &qword_10052D848);
  uint64_t v33 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  *uint64_t v33 = KeyPath;
  v33[1] = v31;
  sub_10000FBD8((uint64_t)v13, &qword_10052D848);
  uint64_t v35 = v92;
  uint64_t v34 = v93;
  uint64_t v36 = v94;
  (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, enum case for DynamicTypeSize.large(_:), v94);
  sub_1003DD288();
  uint64_t v37 = v84;
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  sub_10000FBD8((uint64_t)v16, &qword_10052D850);
  LOBYTE(v16) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v46 = v87;
  uint64_t v47 = v88;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v21, v37, v88);
  uint64_t v48 = &v21[*(int *)(v19 + 44)];
  *uint64_t v48 = (char)v16;
  *((void *)v48 + 1) = v39;
  *((void *)v48 + 2) = v41;
  *((void *)v48 + 3) = v43;
  *((void *)v48 + 4) = v45;
  v48[40] = 0;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v47);
  LOBYTE(v16) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v57 = v85;
  sub_10000FB74((uint64_t)v21, v85, &qword_10052D860);
  uint64_t v58 = v57 + *(int *)(v86 + 44);
  *(unsigned char *)uint64_t v58 = (_BYTE)v16;
  *(void *)(v58 + 8) = v50;
  *(void *)(v58 + 16) = v52;
  *(void *)(v58 + 24) = v54;
  *(void *)(v58 + 32) = v56;
  *(unsigned char *)(v58 + 40) = 0;
  sub_10000FBD8((uint64_t)v21, &qword_10052D860);
  uint64_t v59 = v97;
  static Material.ultraThin.getter();
  uint64_t v60 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v61 = type metadata accessor for RoundedCornerStyle();
  uint64_t v62 = (uint64_t)v99;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v99, v60, v61);
  uint64_t v63 = (uint64_t)v89;
  v64 = &v89[*(int *)(v90 + 44)];
  uint64_t v65 = v98;
  uint64_t v66 = v100;
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v64, v59, v100);
  uint64_t v67 = sub_10000F214(&qword_10051C158);
  sub_1003DD4B0(v62, (uint64_t)&v64[*(int *)(v67 + 52)], (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)&v64[*(int *)(v67 + 56)] = 256;
  sub_10000FB74(v57, v63, &qword_10052D868);
  sub_1003DD518(v62, (uint64_t (*)(void))&type metadata accessor for Capsule);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v59, v66);
  sub_10000FBD8(v57, &qword_10052D868);
  LOBYTE(v64) = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  sub_10000FB74(v63, (uint64_t)v25, &qword_10052D870);
  uint64_t v76 = &v25[*(int *)(v96 + 44)];
  *uint64_t v76 = (char)v64;
  *((void *)v76 + 1) = v69;
  *((void *)v76 + 2) = v71;
  *((void *)v76 + 3) = v73;
  *((void *)v76 + 4) = v75;
  v76[40] = 0;
  sub_10000FBD8(v63, &qword_10052D870);
  uint64_t v77 = v95;
  sub_10000FC34((uint64_t)v25, v95, &qword_10052D878);
  sub_10000FB74(v77, (uint64_t)v25, &qword_10052D878);
  v78 = v101;
  void *v101 = 0;
  *((unsigned char *)v78 + 8) = 1;
  uint64_t v79 = v78;
  uint64_t v80 = sub_10000F214(&qword_10052D8A0);
  sub_10000FB74((uint64_t)v25, (uint64_t)v79 + *(int *)(v80 + 48), &qword_10052D878);
  uint64_t v81 = (uint64_t)v79 + *(int *)(v80 + 64);
  *(void *)uint64_t v81 = 0;
  *(unsigned char *)(v81 + 8) = 1;
  sub_10000FBD8(v77, &qword_10052D878);
  return sub_10000FBD8((uint64_t)v25, &qword_10052D878);
}

uint64_t sub_1003D3B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000F214(&qword_10052D8A8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + *(int *)(type metadata accessor for BundleClassificationDebugOverlay() + 28);
  uint64_t v10 = *(void **)v8;
  uint64_t v9 = *(void **)(v8 + 8);
  v13[0] = v10;
  v13[1] = v9;
  sub_10000F214(&qword_10052D7D0);
  State.wrappedValue.getter();
  v13[0] = v13[2];
  swift_bridgeObjectRetain();
  sub_1003D4754(v13);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_10000F214(&qword_100526A28);
  sub_10000F214(&qword_10052D8B0);
  sub_100013AA8(&qword_10052D8B8, &qword_100526A28);
  sub_1003DD3C8(&qword_10052D8C0, (void (*)(uint64_t))type metadata accessor for BundleClassification.ClassificationType);
  sub_1003DD410();
  ForEach<>.init(_:id:content:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t sub_1003D3D98@<X0>(uint64_t a1@<X8>)
{
  sub_1003D3DD4();
  uint64_t v2 = Image.init(_internalSystemName:)();
  uint64_t result = static HierarchicalShapeStyle.primary.getter();
  *(void *)a1 = v2;
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003D3DD4()
{
  uint64_t v1 = v0;
  unint64_t v2 = 0xD000000000000013;
  uint64_t v3 = sub_10000F214(&qword_10052D8D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003DD4B0(v1, (uint64_t)v8, type metadata accessor for BundleClassification.ClassificationType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)&v8[*(int *)(sub_10000F214(&qword_1005297C0) + 48)];
      uint64_t v10 = *(void *)(v9 + 16);
      uint64_t v11 = type metadata accessor for VisualIntelligenceLookupResult(0);
      uint64_t v12 = *(void *)(v11 - 8);
      if (v10)
      {
        sub_1003DD4B0(v9+ ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80)), (uint64_t)v5, type metadata accessor for VisualIntelligenceLookupResult);
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v5, v13, 1, v11);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v11) == 1)
      {
        sub_10000FBD8((uint64_t)v5, &qword_10052D8D0);
        unint64_t v2 = 0x6E776F6E6B6E75;
      }
      else
      {
        unint64_t v2 = *((void *)v5 + 10);
        swift_bridgeObjectRetain();
        sub_1003DD518((uint64_t)v5, type metadata accessor for VisualIntelligenceLookupResult);
      }
      sub_1003DD518((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      break;
    case 2u:
    case 4u:
      return v2;
    case 3u:
      unint64_t v2 = 0x2E72656B61657073;
      break;
    default:
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000001ALL;
      break;
  }
  return v2;
}

uint64_t sub_1003D40B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OpacityTransition();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v39 - v9;
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for BundleClassificationDebugOverlay() + 28));
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v54 = v13;
  uint64_t v55 = v12;
  sub_10000F214(&qword_10052D7D0);
  State.wrappedValue.getter();
  uint64_t v14 = *(void *)(v53 + 16);
  swift_bridgeObjectRelease();
  if (v14)
  {
    static Color.white.getter();
    uint64_t v48 = Color.opacity(_:)();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v15 = v54;
    unsigned __int8 v16 = v55;
    uint64_t v17 = v56;
    unsigned __int8 v18 = v57;
    uint64_t v46 = v59;
    uint64_t v47 = v58;
    uint64_t v40 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v44 = v20;
    uint64_t v45 = v19;
    uint64_t v42 = v22;
    uint64_t v43 = v21;
    OpacityTransition.init()();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    sub_1003DD3C8(&qword_10051D5B8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    uint64_t v41 = AnyTransition.init<A>(_:)();
    LOBYTE(v53) = 0;
    char v52 = 1;
    unsigned __int8 v51 = v16;
    unsigned __int8 v50 = v18;
    unsigned __int8 v49 = 0;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v23 = v51;
    uint64_t v24 = v50;
    uint64_t v25 = v49;
    uint64_t v26 = 256;
    if (!v52) {
      uint64_t v26 = 0;
    }
    uint64_t v27 = v26 | v53;
    uint64_t v28 = v40;
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v27 = 0;
    uint64_t v15 = 0;
    uint64_t v23 = 0;
    uint64_t v17 = 0;
    uint64_t v24 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v28 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v25 = 0;
  }
  LOBYTE(v53) = 1;
  uint64_t v29 = v48;
  *(void *)a2 = v48;
  *(void *)(a2 + 8) = v27;
  uint64_t v30 = v29;
  uint64_t v48 = v29;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v23;
  v39[1] = v17;
  uint64_t v40 = v15;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v24;
  uint64_t v31 = v47;
  *(void *)(a2 + 48) = v47;
  uint64_t v47 = v31;
  uint64_t v33 = v45;
  uint64_t v32 = v46;
  *(void *)(a2 + 56) = v46;
  *(void *)(a2 + 64) = v28;
  uint64_t v46 = v32;
  uint64_t v34 = v43;
  uint64_t v35 = v44;
  *(void *)(a2 + 72) = v33;
  *(void *)(a2 + 80) = v35;
  uint64_t v37 = v41;
  uint64_t v36 = v42;
  *(void *)(a2 + 88) = v34;
  *(void *)(a2 + 96) = v36;
  *(void *)(a2 + 104) = v25;
  *(void *)(a2 + 112) = v37;
  *(void *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 128) = 1;
  sub_1003DD5E0(v30);
  return sub_1003DD620(v48);
}

void *sub_1003D4418()
{
  uint64_t v1 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = type metadata accessor for BundleClassification(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v0 + *(int *)(type metadata accessor for BundleClassificationDebugOverlay() + 20);
  uint64_t v12 = *(void *)(v11 + *(int *)(type metadata accessor for CVBundle(0) + 24));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v19 = &_swiftEmptySetSingleton;
  uint64_t v14 = v12 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v15 = *(void *)(v8 + 72);
  swift_bridgeObjectRetain();
  do
  {
    sub_1003DD4B0(v14, (uint64_t)v10, type metadata accessor for BundleClassification);
    if (*(double *)&v10[*(int *)(v7 + 20)] > 0.0)
    {
      sub_1003DD4B0((uint64_t)v10, (uint64_t)v3, type metadata accessor for BundleClassification.ClassificationType);
      sub_1001FAE08((uint64_t)v6, (uint64_t)v3);
      sub_1003DD518((uint64_t)v6, type metadata accessor for BundleClassification.ClassificationType);
    }
    sub_1003DD518((uint64_t)v10, type metadata accessor for BundleClassification);
    v14 += v15;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  unsigned __int8 v16 = sub_1001EA488((uint64_t)v19);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1003D4664()
{
  return swift_release();
}

uint64_t sub_1003D46D4()
{
  return State.wrappedValue.setter();
}

void sub_1003D4754(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BundleClassification.ClassificationType(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100045FF0(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1003D47FC(v5);
  *a1 = v3;
}

void sub_1003D47FC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v179 = type metadata accessor for BundleClassification.ClassificationType(0);
  uint64_t v168 = *(void *)(v179 - 8);
  __chkstk_darwin(v179);
  uint64_t v162 = (uint64_t)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v175 = (uint64_t)&v152 - v6;
  __chkstk_darwin(v7);
  uint64_t v174 = (uint64_t)&v152 - v8;
  __chkstk_darwin(v9);
  uint64_t v173 = (uint64_t)&v152 - v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v152 - v12;
  __chkstk_darwin(v14);
  uint64_t v176 = (uint64_t)&v152 - v15;
  __chkstk_darwin(v16);
  uint64_t v165 = (uint64_t)&v152 - v17;
  __chkstk_darwin(v18);
  uint64_t v164 = (uint64_t)&v152 - v19;
  __chkstk_darwin(v20);
  uint64_t v169 = (uint64_t)&v152 - v21;
  __chkstk_darwin(v22);
  uint64_t v166 = (uint64_t)&v152 - v23;
  __chkstk_darwin(v24);
  uint64_t v158 = (uint64_t)&v152 - v25;
  __chkstk_darwin(v26);
  uint64_t v157 = (uint64_t)&v152 - v27;
  __chkstk_darwin(v28);
  uint64_t v160 = (uint64_t)&v152 - v29;
  __chkstk_darwin(v30);
  uint64_t v159 = (uint64_t)&v152 - v31;
  v178 = a1;
  Swift::Int v32 = a1[1];
  Swift::Int v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if (v32 < 0) {
      goto LABEL_187;
    }
    if (v32) {
      sub_1003D5C38(0, v32, 1, v178);
    }
    return;
  }
  if (v32 >= 0) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = v32 + 1;
  }
  if (v32 < -1)
  {
LABEL_195:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1003D5BC0);
  }
  Swift::Int v155 = v33;
  if (v32 < 2)
  {
    uint64_t v38 = _swiftEmptyArrayStorage;
    unint64_t v167 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80));
    if (v32 != 1)
    {
      unint64_t v41 = _swiftEmptyArrayStorage[2];
      uint64_t v40 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_152;
    }
    v154 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v35 = v34 >> 1;
    uint64_t v36 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v36 + 16) = v35;
    uint64_t v37 = *(unsigned __int8 *)(v168 + 80);
    v154 = (void *)v36;
    unint64_t v167 = v36 + ((v37 + 32) & ~v37);
  }
  Swift::Int v39 = 0;
  uint64_t v40 = (char *)_swiftEmptyArrayStorage;
  v172 = v13;
LABEL_16:
  Swift::Int v42 = v39;
  Swift::Int v43 = v39 + 1;
  if (v39 + 1 < v32)
  {
    uint64_t v44 = *v178;
    uint64_t v45 = *(void *)(v168 + 72);
    Swift::Int v161 = v39 + 1;
    uint64_t v46 = v159;
    sub_1003DD4B0(v44 + v45 * v43, v159, type metadata accessor for BundleClassification.ClassificationType);
    uint64_t v177 = v45;
    sub_1003DD4B0(v44 + v45 * v42, v160, type metadata accessor for BundleClassification.ClassificationType);
    sub_1003DD4B0(v46, v157, type metadata accessor for BundleClassification.ClassificationType);
    unint64_t v47 = 0xE500000000000000;
    uint64_t v48 = 0x746E657665;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_10000F214(&qword_1005297C0);
        uint64_t v49 = v157;
        swift_bridgeObjectRelease();
        sub_1003DD518(v49, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        unint64_t v47 = 0xE800000000000000;
        uint64_t v48 = 0x796669746E656469;
        break;
      case 2u:
        break;
      case 3u:
        uint64_t v48 = 0x756F6C4164616572;
        unint64_t v47 = 0xE900000000000064;
        break;
      case 4u:
        unint64_t v47 = 0xE900000000000065;
        uint64_t v48 = 0x7A6972616D6D7573;
        break;
      default:
        sub_1003DD518(v157, type metadata accessor for BundleClassification.ClassificationType);
        unint64_t v47 = 0xE400000000000000;
        uint64_t v48 = 1936744813;
        break;
    }
    sub_1003DD4B0(v160, v158, type metadata accessor for BundleClassification.ClassificationType);
    unint64_t v50 = 0xE500000000000000;
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v52 = 0x746E657665;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        sub_10000F214(&qword_1005297C0);
        uint64_t v53 = v158;
        swift_bridgeObjectRelease();
        sub_1003DD518(v53, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        unint64_t v50 = 0xE800000000000000;
        uint64_t v52 = 0x796669746E656469;
        goto LABEL_28;
      case 2:
LABEL_28:
        if (v52 == v48) {
          goto LABEL_29;
        }
        goto LABEL_32;
      case 3:
        unint64_t v50 = 0xE900000000000064;
        if (v48 != 0x756F6C4164616572) {
          goto LABEL_32;
        }
        goto LABEL_29;
      case 4:
        unint64_t v50 = 0xE900000000000065;
        if (v48 != 0x7A6972616D6D7573) {
          goto LABEL_32;
        }
        goto LABEL_29;
      default:
        sub_1003DD518(v158, type metadata accessor for BundleClassification.ClassificationType);
        unint64_t v50 = 0xE400000000000000;
        if (v48 != 1936744813) {
          goto LABEL_32;
        }
LABEL_29:
        if (v50 == v47) {
          LODWORD(v171) = 0;
        }
        else {
LABEL_32:
        }
          LODWORD(v171) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1003DD518(v160, type metadata accessor for BundleClassification.ClassificationType);
        sub_1003DD518(v159, type metadata accessor for BundleClassification.ClassificationType);
        Swift::Int v43 = v42 + 2;
        uint64_t v170 = v44;
        if (v42 + 2 >= v32) {
          goto LABEL_56;
        }
        Swift::Int v163 = v42;
        v156 = v40;
        uint64_t v54 = v177 * v161;
        uint64_t v55 = v44;
        uint64_t v56 = v177 * v43;
        break;
    }
    while (2)
    {
      Swift::Int v57 = v43;
      uint64_t v58 = v166;
      sub_1003DD4B0(v55 + v56, v166, type metadata accessor for BundleClassification.ClassificationType);
      sub_1003DD4B0(v55 + v54, v169, type metadata accessor for BundleClassification.ClassificationType);
      sub_1003DD4B0(v58, v164, type metadata accessor for BundleClassification.ClassificationType);
      unint64_t v59 = 0xE500000000000000;
      uint64_t v60 = 0x746E657665;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10000F214(&qword_1005297C0);
          uint64_t v61 = v164;
          swift_bridgeObjectRelease();
          sub_1003DD518(v61, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          unint64_t v59 = 0xE800000000000000;
          uint64_t v60 = 0x796669746E656469;
          break;
        case 2u:
          break;
        case 3u:
          uint64_t v60 = 0x756F6C4164616572;
          unint64_t v59 = 0xE900000000000064;
          break;
        case 4u:
          unint64_t v59 = 0xE900000000000065;
          uint64_t v60 = 0x7A6972616D6D7573;
          break;
        default:
          sub_1003DD518(v164, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v59 = 0xE400000000000000;
          uint64_t v60 = 1936744813;
          break;
      }
      sub_1003DD4B0(v169, v165, type metadata accessor for BundleClassification.ClassificationType);
      unint64_t v62 = 0xE500000000000000;
      uint64_t v63 = swift_getEnumCaseMultiPayload();
      uint64_t v64 = 0x746E657665;
      switch(v63)
      {
        case 1:
          sub_10000F214(&qword_1005297C0);
          uint64_t v65 = v165;
          swift_bridgeObjectRelease();
          sub_1003DD518(v65, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          unint64_t v62 = 0xE800000000000000;
          uint64_t v64 = 0x796669746E656469;
          goto LABEL_46;
        case 2:
LABEL_46:
          if (v64 == v60) {
            goto LABEL_47;
          }
          goto LABEL_50;
        case 3:
          unint64_t v62 = 0xE900000000000064;
          if (v60 != 0x756F6C4164616572) {
            goto LABEL_50;
          }
          goto LABEL_47;
        case 4:
          unint64_t v62 = 0xE900000000000065;
          if (v60 != 0x7A6972616D6D7573) {
            goto LABEL_50;
          }
          goto LABEL_47;
        default:
          sub_1003DD518(v165, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v62 = 0xE400000000000000;
          if (v60 != 1936744813) {
            goto LABEL_50;
          }
LABEL_47:
          if (v62 == v59) {
            int v66 = 0;
          }
          else {
LABEL_50:
          }
            int v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1003DD518(v169, type metadata accessor for BundleClassification.ClassificationType);
          sub_1003DD518(v166, type metadata accessor for BundleClassification.ClassificationType);
          if ((v171 ^ v66))
          {
            uint64_t v13 = v172;
            uint64_t v40 = v156;
            Swift::Int v43 = v57;
            goto LABEL_55;
          }
          Swift::Int v43 = v57 + 1;
          v55 += v177;
          if (v32 != v57 + 1) {
            continue;
          }
          Swift::Int v43 = v32;
          uint64_t v13 = v172;
          uint64_t v40 = v156;
LABEL_55:
          Swift::Int v42 = v163;
          uint64_t v44 = v170;
LABEL_56:
          if (v171)
          {
            if (v43 < v42) {
              goto LABEL_188;
            }
            if (v42 < v43)
            {
              Swift::Int v161 = v32;
              v156 = v40;
              uint64_t v67 = 0;
              uint64_t v68 = v177 * (v43 - 1);
              Swift::Int v69 = v42;
              uint64_t v70 = v43 * v177;
              Swift::Int v71 = v69;
              Swift::Int v163 = v69;
              uint64_t v72 = v69 * v177;
              do
              {
                if (v71 != v43 + v67 - 1)
                {
                  if (!v44) {
                    goto LABEL_193;
                  }
                  Swift::Int v171 = v44 + v68;
                  sub_1003DD578(v44 + v72, v162, type metadata accessor for BundleClassification.ClassificationType);
                  if (v72 < v68 || v44 + v72 >= (unint64_t)(v44 + v70))
                  {
                    uint64_t v73 = v171;
                    swift_arrayInitWithTakeFrontToBack();
                  }
                  else
                  {
                    uint64_t v73 = v171;
                    if (v72 != v68) {
                      swift_arrayInitWithTakeBackToFront();
                    }
                  }
                  sub_1003DD578(v162, v73, type metadata accessor for BundleClassification.ClassificationType);
                  uint64_t v44 = v170;
                }
                ++v71;
                --v67;
                v68 -= v177;
                v70 -= v177;
                v72 += v177;
              }
              while (v71 < v43 + v67);
              uint64_t v13 = v172;
              uint64_t v40 = v156;
              Swift::Int v42 = v163;
              Swift::Int v32 = v161;
            }
          }
          break;
      }
      break;
    }
  }
  if (v43 >= v32) {
    goto LABEL_104;
  }
  if (__OFSUB__(v43, v42)) {
    goto LABEL_186;
  }
  if (v43 - v42 >= v155) {
    goto LABEL_104;
  }
  if (__OFADD__(v42, v155)) {
    goto LABEL_189;
  }
  if (v42 + v155 >= v32) {
    Swift::Int v74 = v32;
  }
  else {
    Swift::Int v74 = v42 + v155;
  }
  if (v74 < v42)
  {
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }
  if (v43 == v74) {
    goto LABEL_104;
  }
  Swift::Int v163 = v42;
  v156 = v40;
  uint64_t v153 = v2;
  uint64_t v75 = *(void *)(v168 + 72);
  uint64_t v177 = v75 * (v43 - 1);
  uint64_t v170 = v75;
  Swift::Int v76 = v43 * v75;
  Swift::Int v161 = v74;
LABEL_83:
  uint64_t v78 = 0;
  Swift::Int v79 = v163;
  Swift::Int v171 = v43;
  while (2)
  {
    uint64_t v80 = *v178;
    uint64_t v81 = v176;
    sub_1003DD4B0(v76 + v78 + *v178, v176, type metadata accessor for BundleClassification.ClassificationType);
    sub_1003DD4B0(v177 + v78 + v80, (uint64_t)v13, type metadata accessor for BundleClassification.ClassificationType);
    sub_1003DD4B0(v81, v173, type metadata accessor for BundleClassification.ClassificationType);
    unint64_t v82 = 0xE500000000000000;
    uint64_t v83 = 0x746E657665;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_10000F214(&qword_1005297C0);
        uint64_t v84 = v173;
        swift_bridgeObjectRelease();
        sub_1003DD518(v84, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        unint64_t v82 = 0xE800000000000000;
        uint64_t v83 = 0x796669746E656469;
        break;
      case 2u:
        break;
      case 3u:
        uint64_t v83 = 0x756F6C4164616572;
        unint64_t v82 = 0xE900000000000064;
        break;
      case 4u:
        unint64_t v82 = 0xE900000000000065;
        uint64_t v83 = 0x7A6972616D6D7573;
        break;
      default:
        sub_1003DD518(v173, type metadata accessor for BundleClassification.ClassificationType);
        unint64_t v82 = 0xE400000000000000;
        uint64_t v83 = 1936744813;
        break;
    }
    sub_1003DD4B0((uint64_t)v13, v174, type metadata accessor for BundleClassification.ClassificationType);
    unint64_t v85 = 0xE500000000000000;
    uint64_t v86 = swift_getEnumCaseMultiPayload();
    uint64_t v87 = 0x746E657665;
    switch(v86)
    {
      case 1:
        sub_10000F214(&qword_1005297C0);
        uint64_t v88 = v174;
        swift_bridgeObjectRelease();
        sub_1003DD518(v88, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        unint64_t v85 = 0xE800000000000000;
        uint64_t v87 = 0x796669746E656469;
        goto LABEL_96;
      case 2:
LABEL_96:
        if (v87 == v83) {
          goto LABEL_97;
        }
        goto LABEL_98;
      case 3:
        unint64_t v85 = 0xE900000000000064;
        if (v83 != 0x756F6C4164616572) {
          goto LABEL_98;
        }
        goto LABEL_97;
      case 4:
        unint64_t v85 = 0xE900000000000065;
        if (v83 != 0x7A6972616D6D7573) {
          goto LABEL_98;
        }
        goto LABEL_97;
      default:
        sub_1003DD518(v174, type metadata accessor for BundleClassification.ClassificationType);
        unint64_t v85 = 0xE400000000000000;
        if (v83 != 1936744813) {
          goto LABEL_98;
        }
LABEL_97:
        if (v85 != v82)
        {
LABEL_98:
          char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v13 = v172;
          sub_1003DD518((uint64_t)v172, type metadata accessor for BundleClassification.ClassificationType);
          sub_1003DD518(v176, type metadata accessor for BundleClassification.ClassificationType);
          if ((v89 & 1) == 0) {
            goto LABEL_81;
          }
          uint64_t v90 = *v178;
          if (!*v178) {
            goto LABEL_191;
          }
          uint64_t v91 = v90 + v177 + v78;
          sub_1003DD578(v90 + v76 + v78, v175, type metadata accessor for BundleClassification.ClassificationType);
          swift_arrayInitWithTakeFrontToBack();
          sub_1003DD578(v175, v91, type metadata accessor for BundleClassification.ClassificationType);
          Swift::Int v77 = v171;
          v78 -= v170;
          if (v171 == ++v79) {
            goto LABEL_82;
          }
          continue;
        }
        swift_bridgeObjectRelease_n();
        uint64_t v13 = v172;
        sub_1003DD518((uint64_t)v172, type metadata accessor for BundleClassification.ClassificationType);
        sub_1003DD518(v176, type metadata accessor for BundleClassification.ClassificationType);
LABEL_81:
        Swift::Int v77 = v171;
LABEL_82:
        Swift::Int v43 = v77 + 1;
        v177 += v170;
        v76 += v170;
        if (v43 != v161) {
          goto LABEL_83;
        }
        Swift::Int v43 = v161;
        uint64_t v2 = v153;
        uint64_t v40 = v156;
        Swift::Int v42 = v163;
LABEL_104:
        if (v43 < v42) {
          goto LABEL_181;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v171 = v43;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v40 = sub_1000456E8(0, *((void *)v40 + 2) + 1, 1, v40);
        }
        unint64_t v94 = *((void *)v40 + 2);
        unint64_t v93 = *((void *)v40 + 3);
        unint64_t v41 = v94 + 1;
        if (v94 >= v93 >> 1) {
          uint64_t v40 = sub_1000456E8((char *)(v93 > 1), v94 + 1, 1, v40);
        }
        *((void *)v40 + 2) = v41;
        uint64_t v95 = v40 + 32;
        uint64_t v96 = &v40[16 * v94 + 32];
        Swift::Int v97 = v171;
        *(void *)uint64_t v96 = v42;
        *((void *)v96 + 1) = v97;
        if (v94)
        {
          while (2)
          {
            unint64_t v98 = v41 - 1;
            if (v41 >= 4)
            {
              long long v103 = &v95[16 * v41];
              uint64_t v104 = *((void *)v103 - 8);
              uint64_t v105 = *((void *)v103 - 7);
              BOOL v109 = __OFSUB__(v105, v104);
              uint64_t v106 = v105 - v104;
              if (v109) {
                goto LABEL_170;
              }
              uint64_t v108 = *((void *)v103 - 6);
              uint64_t v107 = *((void *)v103 - 5);
              BOOL v109 = __OFSUB__(v107, v108);
              uint64_t v101 = v107 - v108;
              char v102 = v109;
              if (v109) {
                goto LABEL_171;
              }
              unint64_t v110 = v41 - 2;
              v111 = &v95[16 * v41 - 32];
              uint64_t v113 = *(void *)v111;
              uint64_t v112 = *((void *)v111 + 1);
              BOOL v109 = __OFSUB__(v112, v113);
              uint64_t v114 = v112 - v113;
              if (v109) {
                goto LABEL_173;
              }
              BOOL v109 = __OFADD__(v101, v114);
              uint64_t v115 = v101 + v114;
              if (v109) {
                goto LABEL_176;
              }
              if (v115 >= v106)
              {
                v133 = &v95[16 * v98];
                uint64_t v135 = *(void *)v133;
                uint64_t v134 = *((void *)v133 + 1);
                BOOL v109 = __OFSUB__(v134, v135);
                uint64_t v136 = v134 - v135;
                if (v109) {
                  goto LABEL_180;
                }
                BOOL v126 = v101 < v136;
              }
              else
              {
LABEL_123:
                if (v102) {
                  goto LABEL_172;
                }
                unint64_t v110 = v41 - 2;
                v116 = &v95[16 * v41 - 32];
                uint64_t v118 = *(void *)v116;
                uint64_t v117 = *((void *)v116 + 1);
                BOOL v119 = __OFSUB__(v117, v118);
                uint64_t v120 = v117 - v118;
                char v121 = v119;
                if (v119) {
                  goto LABEL_175;
                }
                v122 = &v95[16 * v98];
                uint64_t v124 = *(void *)v122;
                uint64_t v123 = *((void *)v122 + 1);
                BOOL v109 = __OFSUB__(v123, v124);
                uint64_t v125 = v123 - v124;
                if (v109) {
                  goto LABEL_178;
                }
                if (__OFADD__(v120, v125)) {
                  goto LABEL_179;
                }
                if (v120 + v125 < v101) {
                  goto LABEL_135;
                }
                BOOL v126 = v101 < v125;
              }
              if (v126) {
                unint64_t v98 = v110;
              }
            }
            else
            {
              if (v41 == 3)
              {
                uint64_t v100 = *((void *)v40 + 4);
                uint64_t v99 = *((void *)v40 + 5);
                BOOL v109 = __OFSUB__(v99, v100);
                uint64_t v101 = v99 - v100;
                char v102 = v109;
                goto LABEL_123;
              }
              uint64_t v127 = *((void *)v40 + 4);
              uint64_t v128 = *((void *)v40 + 5);
              BOOL v109 = __OFSUB__(v128, v127);
              uint64_t v120 = v128 - v127;
              char v121 = v109;
LABEL_135:
              if (v121) {
                goto LABEL_174;
              }
              v129 = &v95[16 * v98];
              uint64_t v131 = *(void *)v129;
              uint64_t v130 = *((void *)v129 + 1);
              BOOL v109 = __OFSUB__(v130, v131);
              uint64_t v132 = v130 - v131;
              if (v109) {
                goto LABEL_177;
              }
              if (v132 < v120) {
                goto LABEL_15;
              }
            }
            unint64_t v137 = v98 - 1;
            if (v98 - 1 >= v41)
            {
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
              goto LABEL_190;
            }
            if (!*v178) {
              goto LABEL_192;
            }
            v138 = v40;
            v139 = &v95[16 * v137];
            uint64_t v140 = *(void *)v139;
            v141 = &v95[16 * v98];
            uint64_t v142 = *((void *)v141 + 1);
            sub_1003D61F4(*v178 + *(void *)(v168 + 72) * *(void *)v139, *v178 + *(void *)(v168 + 72) * *(void *)v141, *v178 + *(void *)(v168 + 72) * v142, v167);
            if (v2) {
              goto LABEL_163;
            }
            if (v142 < v140) {
              goto LABEL_167;
            }
            if (v98 > *((void *)v138 + 2)) {
              goto LABEL_168;
            }
            *(void *)v139 = v140;
            *(void *)&v95[16 * v137 + 8] = v142;
            unint64_t v143 = *((void *)v138 + 2);
            if (v98 >= v143) {
              goto LABEL_169;
            }
            uint64_t v40 = v138;
            unint64_t v41 = v143 - 1;
            memmove(&v95[16 * v98], v141 + 16, 16 * (v143 - 1 - v98));
            *((void *)v138 + 2) = v143 - 1;
            uint64_t v13 = v172;
            if (v143 <= 2) {
              goto LABEL_15;
            }
            continue;
          }
        }
        unint64_t v41 = 1;
LABEL_15:
        Swift::Int v32 = v178[1];
        Swift::Int v39 = v171;
        if (v171 < v32) {
          goto LABEL_16;
        }
        uint64_t v38 = v154;
LABEL_152:
        v154 = v38;
        if (v41 >= 2)
        {
          uint64_t v144 = *v178;
          do
          {
            unint64_t v145 = v41 - 2;
            if (v41 < 2) {
              goto LABEL_182;
            }
            if (!v144) {
              goto LABEL_194;
            }
            v146 = v40;
            v147 = v40 + 32;
            uint64_t v148 = *(void *)&v40[16 * v145 + 32];
            uint64_t v149 = *(void *)&v40[16 * v41 + 24];
            sub_1003D61F4(v144 + *(void *)(v168 + 72) * v148, v144 + *(void *)(v168 + 72) * *(void *)&v147[16 * v41 - 16], v144 + *(void *)(v168 + 72) * v149, v167);
            if (v2) {
              break;
            }
            if (v149 < v148) {
              goto LABEL_183;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v146 = sub_100045F20((uint64_t)v146);
            }
            if (v145 >= *((void *)v146 + 2)) {
              goto LABEL_184;
            }
            v150 = &v146[16 * v145 + 32];
            *(void *)v150 = v148;
            *((void *)v150 + 1) = v149;
            unint64_t v151 = *((void *)v146 + 2);
            if (v41 > v151) {
              goto LABEL_185;
            }
            uint64_t v40 = v146;
            memmove(&v146[16 * v41 + 16], &v146[16 * v41 + 32], 16 * (v151 - v41));
            *((void *)v146 + 2) = v151 - 1;
            unint64_t v41 = v151 - 1;
          }
          while (v151 > 2);
        }
LABEL_163:
        swift_bridgeObjectRelease();
        v154[2] = 0;
        swift_bridgeObjectRelease();
        return;
    }
  }
}

void sub_1003D5C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::Int v43 = a4;
  uint64_t v36 = a1;
  uint64_t v44 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v44);
  uint64_t v42 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v41 = (uint64_t)&v34 - v8;
  __chkstk_darwin(v9);
  uint64_t v40 = (uint64_t)&v34 - v10;
  __chkstk_darwin(v11);
  uint64_t v45 = (uint64_t)&v34 - v12;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v39 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    uint64_t v17 = *(void *)(v14 + 72);
    uint64_t v18 = v17 * (v39 - 1);
    uint64_t v37 = v17;
    uint64_t v19 = v17 * v39;
    while (1)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v36;
      uint64_t v38 = v19;
      while (2)
      {
        uint64_t v22 = *v43;
        sub_1003DD4B0(v19 + v20 + *v43, (uint64_t)v16, type metadata accessor for BundleClassification.ClassificationType);
        uint64_t v23 = v18;
        sub_1003DD4B0(v18 + v20 + v22, v45, type metadata accessor for BundleClassification.ClassificationType);
        sub_1003DD4B0((uint64_t)v16, v40, type metadata accessor for BundleClassification.ClassificationType);
        unint64_t v24 = 0xE500000000000000;
        uint64_t v25 = 0x746E657665;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            sub_10000F214(&qword_1005297C0);
            uint64_t v26 = v40;
            swift_bridgeObjectRelease();
            sub_1003DD518(v26, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            unint64_t v24 = 0xE800000000000000;
            uint64_t v25 = 0x796669746E656469;
            break;
          case 2u:
            break;
          case 3u:
            uint64_t v25 = 0x756F6C4164616572;
            unint64_t v24 = 0xE900000000000064;
            break;
          case 4u:
            unint64_t v24 = 0xE900000000000065;
            uint64_t v25 = 0x7A6972616D6D7573;
            break;
          default:
            sub_1003DD518(v40, type metadata accessor for BundleClassification.ClassificationType);
            unint64_t v24 = 0xE400000000000000;
            uint64_t v25 = 1936744813;
            break;
        }
        sub_1003DD4B0(v45, v41, type metadata accessor for BundleClassification.ClassificationType);
        unint64_t v27 = 0xE500000000000000;
        uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v29 = 0x746E657665;
        switch(EnumCaseMultiPayload)
        {
          case 1:
            sub_10000F214(&qword_1005297C0);
            uint64_t v30 = v41;
            swift_bridgeObjectRelease();
            sub_1003DD518(v30, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
            unint64_t v27 = 0xE800000000000000;
            if (v25 == 0x796669746E656469) {
              goto LABEL_20;
            }
            goto LABEL_21;
          case 2:
            goto LABEL_19;
          case 3:
            uint64_t v29 = 0x756F6C4164616572;
            unint64_t v27 = 0xE900000000000064;
LABEL_19:
            if (v29 == v25) {
              goto LABEL_20;
            }
            goto LABEL_21;
          case 4:
            unint64_t v27 = 0xE900000000000065;
            if (v25 != 0x7A6972616D6D7573) {
              goto LABEL_21;
            }
            goto LABEL_20;
          default:
            sub_1003DD518(v41, type metadata accessor for BundleClassification.ClassificationType);
            unint64_t v27 = 0xE400000000000000;
            if (v25 != 1936744813) {
              goto LABEL_21;
            }
LABEL_20:
            if (v27 != v24)
            {
LABEL_21:
              char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1003DD518(v45, type metadata accessor for BundleClassification.ClassificationType);
              sub_1003DD518((uint64_t)v16, type metadata accessor for BundleClassification.ClassificationType);
              uint64_t v18 = v23;
              uint64_t v19 = v38;
              if ((v31 & 1) == 0) {
                goto LABEL_5;
              }
              uint64_t v32 = *v43;
              if (!*v43)
              {
                __break(1u);
                JUMPOUT(0x1003D61CCLL);
              }
              uint64_t v33 = v32 + v18 + v20;
              sub_1003DD578(v32 + v38 + v20, v42, type metadata accessor for BundleClassification.ClassificationType);
              swift_arrayInitWithTakeFrontToBack();
              sub_1003DD578(v42, v33, type metadata accessor for BundleClassification.ClassificationType);
              v20 -= v37;
              if (v39 == ++v21) {
                goto LABEL_5;
              }
              continue;
            }
            swift_bridgeObjectRelease_n();
            sub_1003DD518(v45, type metadata accessor for BundleClassification.ClassificationType);
            sub_1003DD518((uint64_t)v16, type metadata accessor for BundleClassification.ClassificationType);
            uint64_t v18 = v23;
            uint64_t v19 = v38;
LABEL_5:
            v18 += v37;
            v19 += v37;
            if (++v39 == v35) {
              return;
            }
            break;
        }
        break;
      }
    }
  }
}

uint64_t sub_1003D61F4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v66 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v66);
  uint64_t v63 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v62 = (uint64_t)&v60 - v10;
  __chkstk_darwin(v11);
  uint64_t v65 = (uint64_t)&v60 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v60 - v14;
  __chkstk_darwin(v16);
  unint64_t v61 = (unint64_t)&v60 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v60 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v60 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v60 - v25;
  uint64_t v64 = *(void *)(v27 + 72);
  if (!v64)
  {
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (a2 - a1 == 0x8000000000000000 && v64 == -1) {
    goto LABEL_92;
  }
  int64_t v28 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v64 == -1) {
    goto LABEL_93;
  }
  uint64_t v29 = (uint64_t)(a2 - a1) / v64;
  unint64_t v69 = a1;
  unint64_t v68 = a4;
  uint64_t v30 = v28 / v64;
  if (v29 < v28 / v64)
  {
    if ((v29 & 0x8000000000000000) == 0)
    {
      uint64_t v31 = v29 * v64;
      if (a4 < a1 || a1 + v31 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a1)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v33 = a4 + v31;
      unint64_t v67 = a4 + v31;
      if (v31 >= 1 && a2 < a3)
      {
        while (2)
        {
          sub_1003DD4B0(a2, (uint64_t)v26, type metadata accessor for BundleClassification.ClassificationType);
          sub_1003DD4B0(a4, (uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
          sub_1003DD4B0((uint64_t)v26, (uint64_t)v20, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v35 = 0xE500000000000000;
          uint64_t v36 = 0x746E657665;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              sub_10000F214(&qword_1005297C0);
              swift_bridgeObjectRelease();
              sub_1003DD518((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
              unint64_t v35 = 0xE800000000000000;
              uint64_t v36 = 0x796669746E656469;
              break;
            case 2u:
              break;
            case 3u:
              uint64_t v36 = 0x756F6C4164616572;
              unint64_t v35 = 0xE900000000000064;
              break;
            case 4u:
              unint64_t v35 = 0xE900000000000065;
              uint64_t v36 = 0x7A6972616D6D7573;
              break;
            default:
              sub_1003DD518((uint64_t)v20, type metadata accessor for BundleClassification.ClassificationType);
              unint64_t v35 = 0xE400000000000000;
              uint64_t v36 = 1936744813;
              break;
          }
          sub_1003DD4B0((uint64_t)v23, v61, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v37 = 0xE500000000000000;
          uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v39 = 0x746E657665;
          switch(EnumCaseMultiPayload)
          {
            case 1:
              sub_10000F214(&qword_1005297C0);
              uint64_t v40 = v61;
              swift_bridgeObjectRelease();
              sub_1003DD518(v40, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
              unint64_t v37 = 0xE800000000000000;
              uint64_t v39 = 0x796669746E656469;
              goto LABEL_33;
            case 2:
LABEL_33:
              if (v39 == v36) {
                goto LABEL_34;
              }
              goto LABEL_37;
            case 3:
              unint64_t v37 = 0xE900000000000064;
              if (v36 != 0x756F6C4164616572) {
                goto LABEL_37;
              }
              goto LABEL_34;
            case 4:
              unint64_t v37 = 0xE900000000000065;
              if (v36 != 0x7A6972616D6D7573) {
                goto LABEL_37;
              }
              goto LABEL_34;
            default:
              sub_1003DD518(v61, type metadata accessor for BundleClassification.ClassificationType);
              unint64_t v37 = 0xE400000000000000;
              if (v36 != 1936744813) {
                goto LABEL_37;
              }
LABEL_34:
              if (v37 == v35)
              {
                swift_bridgeObjectRelease_n();
                sub_1003DD518((uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
                sub_1003DD518((uint64_t)v26, type metadata accessor for BundleClassification.ClassificationType);
              }
              else
              {
LABEL_37:
                char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1003DD518((uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
                sub_1003DD518((uint64_t)v26, type metadata accessor for BundleClassification.ClassificationType);
                if (v41)
                {
                  unint64_t v42 = v69;
                  unint64_t v43 = a2 + v64;
                  if (v69 < a2 || v69 >= v43)
                  {
                    swift_arrayInitWithTakeFrontToBack();
                  }
                  else if (v69 == a2)
                  {
                    unint64_t v42 = a2;
                  }
                  else
                  {
                    swift_arrayInitWithTakeBackToFront();
                  }
                  goto LABEL_48;
                }
              }
              unint64_t v42 = v69;
              unint64_t v44 = v68 + v64;
              if (v69 < v68 || v69 >= v44)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v69 != v68)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v68 = v44;
              unint64_t v43 = a2;
LABEL_48:
              unint64_t v69 = v42 + v64;
              a4 = v68;
              if (v68 >= v33) {
                goto LABEL_90;
              }
              a2 = v43;
              if (v43 >= a3) {
                goto LABEL_90;
              }
              continue;
          }
        }
      }
      goto LABEL_90;
    }
LABEL_94:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1003D6CC8);
  }
  if (v30 < 0) {
    goto LABEL_94;
  }
  uint64_t v32 = v30 * v64;
  if (a4 < a2 || a2 + v32 <= a4)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a4 != a2)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  unint64_t v45 = a4 + v32;
  unint64_t v67 = a4 + v32;
  unint64_t v69 = a2;
  unint64_t v61 = a1;
  if (v32 >= 1 && a1 < a2)
  {
    uint64_t v47 = -v64;
    while (2)
    {
      sub_1003DD4B0(v45 + v47, (uint64_t)v15, type metadata accessor for BundleClassification.ClassificationType);
      unint64_t v48 = a2 + v47;
      sub_1003DD4B0(a2 + v47, v65, type metadata accessor for BundleClassification.ClassificationType);
      sub_1003DD4B0((uint64_t)v15, v62, type metadata accessor for BundleClassification.ClassificationType);
      unint64_t v49 = 0xE500000000000000;
      uint64_t v50 = 0x746E657665;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10000F214(&qword_1005297C0);
          uint64_t v51 = v62;
          swift_bridgeObjectRelease();
          sub_1003DD518(v51, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          unint64_t v49 = 0xE800000000000000;
          uint64_t v50 = 0x796669746E656469;
          break;
        case 2u:
          break;
        case 3u:
          uint64_t v50 = 0x756F6C4164616572;
          unint64_t v49 = 0xE900000000000064;
          break;
        case 4u:
          unint64_t v49 = 0xE900000000000065;
          uint64_t v50 = 0x7A6972616D6D7573;
          break;
        default:
          sub_1003DD518(v62, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v49 = 0xE400000000000000;
          uint64_t v50 = 1936744813;
          break;
      }
      sub_1003DD4B0(v65, v63, type metadata accessor for BundleClassification.ClassificationType);
      unint64_t v52 = 0xE500000000000000;
      uint64_t v53 = swift_getEnumCaseMultiPayload();
      uint64_t v54 = 0x746E657665;
      switch(v53)
      {
        case 1:
          sub_10000F214(&qword_1005297C0);
          uint64_t v55 = v63;
          swift_bridgeObjectRelease();
          sub_1003DD518(v55, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          unint64_t v52 = 0xE800000000000000;
          uint64_t v54 = 0x796669746E656469;
          goto LABEL_70;
        case 2:
LABEL_70:
          if (v54 == v50) {
            goto LABEL_71;
          }
          goto LABEL_74;
        case 3:
          unint64_t v52 = 0xE900000000000064;
          if (v50 != 0x756F6C4164616572) {
            goto LABEL_74;
          }
          goto LABEL_71;
        case 4:
          unint64_t v52 = 0xE900000000000065;
          if (v50 != 0x7A6972616D6D7573) {
            goto LABEL_74;
          }
          goto LABEL_71;
        default:
          sub_1003DD518(v63, type metadata accessor for BundleClassification.ClassificationType);
          unint64_t v52 = 0xE400000000000000;
          if (v50 != 1936744813) {
            goto LABEL_74;
          }
LABEL_71:
          if (v52 == v49) {
            char v56 = 0;
          }
          else {
LABEL_74:
          }
            char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v57 = a3 + v47;
          sub_1003DD518(v65, type metadata accessor for BundleClassification.ClassificationType);
          sub_1003DD518((uint64_t)v15, type metadata accessor for BundleClassification.ClassificationType);
          if (v56)
          {
            if (a3 < a2 || v57 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v69 += v47;
          }
          else
          {
            unint64_t v58 = v67;
            v67 += v47;
            if (a3 < v58 || v57 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v58)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v48 = a2;
          }
          unint64_t v45 = v67;
          if (v67 <= a4) {
            break;
          }
          a2 = v48;
          a3 += v47;
          if (v48 <= v61) {
            break;
          }
          continue;
      }
      break;
    }
  }
LABEL_90:
  sub_100045C80(&v69, &v68, (uint64_t *)&v67);
  return 1;
}

uint64_t sub_1003D6D18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1768843629 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x647261646E617473 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_1003D6E50(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052D640);
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000F214(&qword_10052D648);
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052D650);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052D658);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_1003D73C0();
  uint64_t v12 = (uint64_t)v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v22 = v6;
  uint64_t v13 = v29;
  uint64_t v30 = a1;
  uint64_t v14 = v11;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v11 = v18;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v11 = &type metadata for BundleClassificationDebugOverlayStyle;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v11, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
    a1 = v30;
LABEL_7:
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
    return v11;
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(v15 + 32);
  if (*(unsigned char *)(v15 + 32))
  {
    if (v11 == 1)
    {
      char v32 = 1;
      sub_1003D7468();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v16 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v27);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v16 + 8))(v14, v9);
    }
    else
    {
      char v33 = 2;
      sub_1003D7414();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v28;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v14, v9);
    }
  }
  else
  {
    char v31 = 0;
    sub_1003D74BC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v28 + 8))(v14, v9);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v30);
  return v11;
}

unint64_t sub_1003D73C0()
{
  unint64_t result = qword_10052D660;
  if (!qword_10052D660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D660);
  }
  return result;
}

unint64_t sub_1003D7414()
{
  unint64_t result = qword_10052D668;
  if (!qword_10052D668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D668);
  }
  return result;
}

unint64_t sub_1003D7468()
{
  unint64_t result = qword_10052D670;
  if (!qword_10052D670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D670);
  }
  return result;
}

unint64_t sub_1003D74BC()
{
  unint64_t result = qword_10052D678;
  if (!qword_10052D678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D678);
  }
  return result;
}

unsigned char *_s6Tamale37BundleClassificationDebugOverlayStyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003D75DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleClassificationDebugOverlayStyle.CodingKeys()
{
  return &type metadata for BundleClassificationDebugOverlayStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for BundleClassificationDebugOverlayStyle.NoneCodingKeys()
{
  return &type metadata for BundleClassificationDebugOverlayStyle.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for BundleClassificationDebugOverlayStyle.MiniCodingKeys()
{
  return &type metadata for BundleClassificationDebugOverlayStyle.MiniCodingKeys;
}

ValueMetadata *type metadata accessor for BundleClassificationDebugOverlayStyle.StandardCodingKeys()
{
  return &type metadata for BundleClassificationDebugOverlayStyle.StandardCodingKeys;
}

void *sub_1003D7644(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    unsigned int v4 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    unsigned int v6 = a3;
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      void *v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = v6[5];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v10, v11, v13);
    if (EnumCaseMultiPayload != 1)
    {
      v185 = v14;
      uint64_t v15 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v16 = v15[5];
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      type metadata accessor for CVDetection();
      v183 = v15;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v174 = v6;
          v185(v17, v18, v13);
          uint64_t v30 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v17[v30[5]] = *(_DWORD *)&v18[v30[5]];
          uint64_t v31 = v30[6];
          char v32 = &v17[v31];
          char v33 = &v18[v31];
          long long v34 = *((_OWORD *)v33 + 3);
          *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
          *((_OWORD *)v32 + 3) = v34;
          long long v35 = *((_OWORD *)v33 + 1);
          *(_OWORD *)char v32 = *(_OWORD *)v33;
          *((_OWORD *)v32 + 1) = v35;
          *(void *)&v17[v30[7]] = *(void *)&v18[v30[7]];
          *(void *)&v17[v30[8]] = *(void *)&v18[v30[8]];
          *(void *)&v17[v30[9]] = *(void *)&v18[v30[9]];
          v17[v30[10]] = v18[v30[10]];
          uint64_t v36 = v30[11];
          unint64_t v37 = &v17[v36];
          uint64_t v38 = &v18[v36];
          uint64_t v171 = *((void *)v38 + 1);
          *(void *)unint64_t v37 = *(void *)v38;
          *((void *)v37 + 1) = v171;
          uint64_t v39 = v30[12];
          uint64_t v40 = &v17[v39];
          char v41 = &v18[v39];
          uint64_t v170 = *((void *)v41 + 1);
          *(void *)uint64_t v40 = *(void *)v41;
          *((void *)v40 + 1) = v170;
          uint64_t v42 = v30[13];
          uint64_t v176 = &v17[v42];
          uint64_t v179 = &v18[v42];
          uint64_t v43 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v168 = *(void *)(v43 - 8);
          uint64_t v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v169(v179, 1, v43))
          {
            uint64_t v44 = sub_10000F214(&qword_100524BD0);
            memcpy(v176, v179, *(void *)(*(void *)(v44 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v176, v179, v43);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v176, 0, 1, v43);
          }
          uint64_t v80 = v30[14];
          uint64_t v81 = (uint64_t *)&v17[v80];
          unint64_t v82 = (uint64_t *)&v18[v80];
          unint64_t v83 = v82[1];
          unsigned int v6 = v174;
          if (v83 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
          }
          else
          {
            uint64_t v177 = v81;
            uint64_t v181 = *v82;
            sub_100038528(*v82, v83);
            *uint64_t v177 = v181;
            v177[1] = v83;
          }
          uint64_t v84 = v30[15];
          unint64_t v85 = &v17[v84];
          uint64_t v86 = &v18[v84];
          if (*(void *)v86)
          {
            uint64_t v87 = *((void *)v86 + 1);
            uint64_t v88 = *((void *)v86 + 2);
            *(void *)unint64_t v85 = *(void *)v86;
            *((void *)v85 + 1) = v87;
            *((void *)v85 + 2) = v88;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)unint64_t v85 = *(_OWORD *)v86;
            *((void *)v85 + 2) = *((void *)v86 + 2);
          }
          uint64_t v15 = v183;
          break;
        case 2u:
          v185(v17, v18, v13);
          unint64_t v45 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v17[v45[5]] = *(_DWORD *)&v18[v45[5]];
          uint64_t v46 = v45[6];
          uint64_t v47 = &v17[v46];
          unint64_t v48 = &v18[v46];
          long long v49 = *((_OWORD *)v48 + 3);
          *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
          *((_OWORD *)v47 + 3) = v49;
          long long v50 = *((_OWORD *)v48 + 1);
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
          *((_OWORD *)v47 + 1) = v50;
          uint64_t v51 = v45[7];
          unint64_t v52 = &v17[v51];
          uint64_t v53 = &v18[v51];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          *(void *)unint64_t v52 = v55;
          *((void *)v52 + 1) = v54;
          *(void *)&v17[v45[8]] = *(void *)&v18[v45[8]];
          *(void *)&v17[v45[9]] = *(void *)&v18[v45[9]];
          *(void *)&v17[v45[10]] = *(void *)&v18[v45[10]];
          *(void *)&v17[v45[11]] = *(void *)&v18[v45[11]];
          *(void *)&v17[v45[12]] = *(void *)&v18[v45[12]];
          uint64_t v56 = v45[13];
          v180 = *(void **)&v18[v56];
          *(void *)&v17[v56] = v180;
          v17[v45[14]] = v18[v45[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v57 = v180;
          break;
        case 3u:
        case 4u:
          v185(v17, v18, v13);
          unint64_t v58 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v17[v58[5]] = *(_DWORD *)&v18[v58[5]];
          uint64_t v59 = v58[6];
          uint64_t v60 = &v17[v59];
          unint64_t v61 = &v18[v59];
          long long v62 = *((_OWORD *)v61 + 3);
          *((_OWORD *)v60 + 2) = *((_OWORD *)v61 + 2);
          *((_OWORD *)v60 + 3) = v62;
          long long v63 = *((_OWORD *)v61 + 1);
          *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
          *((_OWORD *)v60 + 1) = v63;
          uint64_t v64 = v58[7];
          uint64_t v65 = &v17[v64];
          uint64_t v66 = &v18[v64];
          uint64_t v68 = *(void *)v66;
          uint64_t v67 = *((void *)v66 + 1);
          *(void *)uint64_t v65 = v68;
          *((void *)v65 + 1) = v67;
          *(void *)&v17[v58[8]] = *(void *)&v18[v58[8]];
          *(void *)&v17[v58[9]] = *(void *)&v18[v58[9]];
          *(void *)&v17[v58[10]] = *(void *)&v18[v58[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v185(v17, v18, v13);
          unint64_t v69 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v17[v69[5]] = *(_DWORD *)&v18[v69[5]];
          uint64_t v70 = v69[6];
          Swift::Int v71 = &v17[v70];
          uint64_t v72 = &v18[v70];
          long long v73 = *((_OWORD *)v72 + 3);
          *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
          *((_OWORD *)v71 + 3) = v73;
          long long v74 = *((_OWORD *)v72 + 1);
          *(_OWORD *)Swift::Int v71 = *(_OWORD *)v72;
          *((_OWORD *)v71 + 1) = v74;
          uint64_t v75 = v69[7];
          Swift::Int v76 = &v17[v75];
          Swift::Int v77 = &v18[v75];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          *(void *)Swift::Int v76 = v79;
          *((void *)v76 + 1) = v78;
          *(void *)&v17[v69[8]] = *(void *)&v18[v69[8]];
          *(void *)&v17[v69[9]] = *(void *)&v18[v69[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v185(v17, v18, v13);
          uint64_t v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v17[v19[5]] = *(_DWORD *)&v18[v19[5]];
          uint64_t v20 = v19[6];
          uint64_t v21 = &v17[v20];
          uint64_t v22 = &v18[v20];
          long long v23 = *((_OWORD *)v22 + 3);
          *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
          *((_OWORD *)v21 + 3) = v23;
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v24;
          uint64_t v25 = v19[7];
          uint64_t v26 = &v17[v25];
          uint64_t v27 = &v18[v25];
          uint64_t v29 = *(void *)v27;
          uint64_t v28 = *((void *)v27 + 1);
          *(void *)uint64_t v26 = v29;
          *((void *)v26 + 1) = v28;
          *(void *)&v17[v19[8]] = *(void *)&v18[v19[8]];
          *(void *)&v17[v19[9]] = *(void *)&v18[v19[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v89 = v15[6];
      uint64_t v90 = &v10[v89];
      uint64_t v91 = &v11[v89];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v185(v90, v91, v13);
          long long v103 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v90[v103[5]] = *(_DWORD *)&v91[v103[5]];
          uint64_t v104 = v103[6];
          uint64_t v105 = &v90[v104];
          uint64_t v106 = &v91[v104];
          long long v107 = *((_OWORD *)v106 + 3);
          *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
          *((_OWORD *)v105 + 3) = v107;
          long long v108 = *((_OWORD *)v106 + 1);
          *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
          *((_OWORD *)v105 + 1) = v108;
          *(void *)&v90[v103[7]] = *(void *)&v91[v103[7]];
          *(void *)&v90[v103[8]] = *(void *)&v91[v103[8]];
          *(void *)&v90[v103[9]] = *(void *)&v91[v103[9]];
          v90[v103[10]] = v91[v103[10]];
          uint64_t v109 = v103[11];
          unint64_t v110 = &v90[v109];
          v111 = &v91[v109];
          uint64_t v178 = *((void *)v111 + 1);
          v182 = v103;
          *(void *)unint64_t v110 = *(void *)v111;
          *((void *)v110 + 1) = v178;
          uint64_t v112 = v103[12];
          uint64_t v113 = &v90[v112];
          uint64_t v114 = &v91[v112];
          uint64_t v175 = *((void *)v114 + 1);
          *(void *)uint64_t v113 = *(void *)v114;
          *((void *)v113 + 1) = v175;
          uint64_t v115 = v103[13];
          v184 = &v90[v115];
          v186 = &v91[v115];
          uint64_t v116 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v172 = *(void *)(v116 - 8);
          uint64_t v173 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v173(v186, 1, v116))
          {
            uint64_t v117 = sub_10000F214(&qword_100524BD0);
            memcpy(v184, v186, *(void *)(*(void *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v184, v186, v116);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v172 + 56))(v184, 0, 1, v116);
          }
          uint64_t v153 = v182[14];
          v154 = &v90[v153];
          Swift::Int v155 = (uint64_t *)&v91[v153];
          unint64_t v156 = v155[1];
          if (v156 >> 60 == 15)
          {
            *(_OWORD *)v154 = *(_OWORD *)v155;
          }
          else
          {
            uint64_t v188 = *v155;
            sub_100038528(*v155, v156);
            *(void *)v154 = v188;
            *((void *)v154 + 1) = v156;
          }
          uint64_t v157 = v182[15];
          uint64_t v158 = &v90[v157];
          uint64_t v159 = &v91[v157];
          if (*(void *)v159)
          {
            uint64_t v160 = *((void *)v159 + 1);
            uint64_t v161 = *((void *)v159 + 2);
            *(void *)uint64_t v158 = *(void *)v159;
            *((void *)v158 + 1) = v160;
            *((void *)v158 + 2) = v161;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
            *((void *)v158 + 2) = *((void *)v159 + 2);
          }
          uint64_t v15 = v183;
          break;
        case 2u:
          v185(v90, v91, v13);
          uint64_t v118 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v90[v118[5]] = *(_DWORD *)&v91[v118[5]];
          uint64_t v119 = v118[6];
          uint64_t v120 = &v90[v119];
          char v121 = &v91[v119];
          long long v122 = *((_OWORD *)v121 + 3);
          *((_OWORD *)v120 + 2) = *((_OWORD *)v121 + 2);
          *((_OWORD *)v120 + 3) = v122;
          long long v123 = *((_OWORD *)v121 + 1);
          *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
          *((_OWORD *)v120 + 1) = v123;
          uint64_t v124 = v118[7];
          uint64_t v125 = &v90[v124];
          BOOL v126 = &v91[v124];
          uint64_t v128 = *(void *)v126;
          uint64_t v127 = *((void *)v126 + 1);
          *(void *)uint64_t v125 = v128;
          *((void *)v125 + 1) = v127;
          *(void *)&v90[v118[8]] = *(void *)&v91[v118[8]];
          *(void *)&v90[v118[9]] = *(void *)&v91[v118[9]];
          *(void *)&v90[v118[10]] = *(void *)&v91[v118[10]];
          *(void *)&v90[v118[11]] = *(void *)&v91[v118[11]];
          *(void *)&v90[v118[12]] = *(void *)&v91[v118[12]];
          uint64_t v129 = v118[13];
          v187 = *(void **)&v91[v129];
          *(void *)&v90[v129] = v187;
          v90[v118[14]] = v91[v118[14]];
          swift_bridgeObjectRetain();
          uint64_t v15 = v183;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v130 = v187;
          break;
        case 3u:
        case 4u:
          v185(v90, v91, v13);
          uint64_t v131 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v90[v131[5]] = *(_DWORD *)&v91[v131[5]];
          uint64_t v132 = v131[6];
          v133 = &v90[v132];
          uint64_t v134 = &v91[v132];
          long long v135 = *((_OWORD *)v134 + 3);
          *((_OWORD *)v133 + 2) = *((_OWORD *)v134 + 2);
          *((_OWORD *)v133 + 3) = v135;
          long long v136 = *((_OWORD *)v134 + 1);
          *(_OWORD *)v133 = *(_OWORD *)v134;
          *((_OWORD *)v133 + 1) = v136;
          uint64_t v137 = v131[7];
          v138 = &v90[v137];
          v139 = &v91[v137];
          uint64_t v141 = *(void *)v139;
          uint64_t v140 = *((void *)v139 + 1);
          *(void *)v138 = v141;
          *((void *)v138 + 1) = v140;
          *(void *)&v90[v131[8]] = *(void *)&v91[v131[8]];
          *(void *)&v90[v131[9]] = *(void *)&v91[v131[9]];
          *(void *)&v90[v131[10]] = *(void *)&v91[v131[10]];
          swift_bridgeObjectRetain();
          uint64_t v15 = v183;
          swift_retain();
          break;
        case 5u:
          v185(v90, v91, v13);
          uint64_t v142 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v90[v142[5]] = *(_DWORD *)&v91[v142[5]];
          uint64_t v143 = v142[6];
          uint64_t v144 = &v90[v143];
          unint64_t v145 = &v91[v143];
          long long v146 = *((_OWORD *)v145 + 3);
          *((_OWORD *)v144 + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)v144 + 3) = v146;
          long long v147 = *((_OWORD *)v145 + 1);
          *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
          *((_OWORD *)v144 + 1) = v147;
          uint64_t v148 = v142[7];
          uint64_t v149 = &v90[v148];
          v150 = &v91[v148];
          uint64_t v152 = *(void *)v150;
          uint64_t v151 = *((void *)v150 + 1);
          *(void *)uint64_t v149 = v152;
          *((void *)v149 + 1) = v151;
          *(void *)&v90[v142[8]] = *(void *)&v91[v142[8]];
          *(void *)&v90[v142[9]] = *(void *)&v91[v142[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v185(v90, v91, v13);
          v92 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v90[v92[5]] = *(_DWORD *)&v91[v92[5]];
          uint64_t v93 = v92[6];
          unint64_t v94 = &v90[v93];
          uint64_t v95 = &v91[v93];
          long long v96 = *((_OWORD *)v95 + 3);
          *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
          *((_OWORD *)v94 + 3) = v96;
          long long v97 = *((_OWORD *)v95 + 1);
          *(_OWORD *)unint64_t v94 = *(_OWORD *)v95;
          *((_OWORD *)v94 + 1) = v97;
          uint64_t v98 = v92[7];
          uint64_t v99 = &v90[v98];
          uint64_t v100 = &v91[v98];
          uint64_t v102 = *(void *)v100;
          uint64_t v101 = *((void *)v100 + 1);
          *(void *)uint64_t v99 = v102;
          *((void *)v99 + 1) = v101;
          *(void *)&v90[v92[8]] = *(void *)&v91[v92[8]];
          *(void *)&v90[v92[9]] = *(void *)&v91[v92[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      v10[v15[7]] = v11[v15[7]];
      *(void *)&v10[v15[8]] = *(void *)&v11[v15[8]];
      *(_DWORD *)&v10[v15[9]] = *(_DWORD *)&v11[v15[9]];
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v162 = type metadata accessor for CVBundle(0);
    *(void *)&v10[*(int *)(v162 + 20)] = *(void *)&v11[*(int *)(v162 + 20)];
    *(void *)&v10[*(int *)(v162 + 24)] = *(void *)&v11[*(int *)(v162 + 24)];
    uint64_t v163 = v6[7];
    *((unsigned char *)v4 + v6[6]) = *((unsigned char *)a2 + v6[6]);
    uint64_t v164 = (void *)((char *)v4 + v163);
    uint64_t v165 = (void *)((char *)a2 + v163);
    uint64_t v166 = v165[1];
    *uint64_t v164 = *v165;
    v164[1] = v166;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1003D84E8(uint64_t a1, uint64_t a2)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v5, v7);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v9 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v10 = v5 + *(int *)(v9 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8(v10, v7);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_16;
      case 1u:
        v8(v10, v7);
        uint64_t v11 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = v10 + v11[13];
        uint64_t v13 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v28 = *(void *)(v13 - 8);
        uint64_t v29 = v12;
        uint64_t v14 = v12;
        uint64_t v15 = v13;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v14, 1, v13)) {
          (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v15);
        }
        uint64_t v16 = (uint64_t *)(v10 + v11[14]);
        unint64_t v17 = v16[1];
        if (v17 >> 60 != 15) {
          sub_100038B34(*v16, v17);
        }
        if (*(void *)(v10 + v11[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v8(v10, v7);
        uint64_t v18 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v8(v10, v7);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v8(v10, v7);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_16:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v19 = v5 + *(int *)(v9 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8(v19, v7);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_28;
      case 1u:
        v8(v19, v7);
        uint64_t v20 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = v19 + v20[13];
        uint64_t v22 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v23 = *(void *)(v22 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
        }
        long long v24 = (uint64_t *)(v19 + v20[14]);
        unint64_t v25 = v24[1];
        if (v25 >> 60 != 15) {
          sub_100038B34(*v24, v25);
        }
        if (*(void *)(v19 + v20[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v8(v19, v7);
        uint64_t v26 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v8(v19, v7);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v8(v19, v7);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_28:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  type metadata accessor for CVBundle(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_1003D8B10(void *a1, void *a2, int *a3)
{
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v8, v9, v11);
  if (EnumCaseMultiPayload != 1)
  {
    v187 = v12;
    uint64_t v13 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v14 = v13[5];
    uint64_t v15 = &v8[v14];
    uint64_t v16 = &v9[v14];
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v179 = v13;
        v185 = a3;
        v187(v15, v16, v11);
        uint64_t v28 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v15[v28[5]] = *(_DWORD *)&v16[v28[5]];
        uint64_t v29 = v28[6];
        uint64_t v30 = &v15[v29];
        uint64_t v31 = &v16[v29];
        long long v32 = *((_OWORD *)v31 + 3);
        *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
        *((_OWORD *)v30 + 3) = v32;
        long long v33 = *((_OWORD *)v31 + 1);
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
        *((_OWORD *)v30 + 1) = v33;
        *(void *)&v15[v28[7]] = *(void *)&v16[v28[7]];
        *(void *)&v15[v28[8]] = *(void *)&v16[v28[8]];
        *(void *)&v15[v28[9]] = *(void *)&v16[v28[9]];
        v15[v28[10]] = v16[v28[10]];
        uint64_t v34 = v28[11];
        long long v35 = &v15[v34];
        uint64_t v36 = &v16[v34];
        uint64_t v174 = *((void *)v36 + 1);
        *(void *)long long v35 = *(void *)v36;
        *((void *)v35 + 1) = v174;
        uint64_t v37 = v28[12];
        uint64_t v38 = &v15[v37];
        uint64_t v39 = &v16[v37];
        uint64_t v173 = *((void *)v39 + 1);
        *(void *)uint64_t v38 = *(void *)v39;
        *((void *)v38 + 1) = v173;
        uint64_t v40 = v28[13];
        __dst = &v15[v40];
        __src = &v16[v40];
        uint64_t v41 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v171 = *(void *)(v41 - 8);
        uint64_t v172 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v172(__src, 1, v41))
        {
          uint64_t v42 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, __src, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v171 + 16))(__dst, __src, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(__dst, 0, 1, v41);
        }
        uint64_t v79 = v28[14];
        uint64_t v80 = &v15[v79];
        uint64_t v81 = (uint64_t *)&v16[v79];
        unint64_t v82 = v81[1];
        if (v82 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
        }
        else
        {
          __srcb = (void *)*v81;
          sub_100038528(*v81, v82);
          *(void *)uint64_t v80 = __srcb;
          *((void *)v80 + 1) = v82;
        }
        a3 = v185;
        uint64_t v83 = v28[15];
        uint64_t v84 = &v15[v83];
        unint64_t v85 = &v16[v83];
        if (*(void *)v85)
        {
          uint64_t v86 = *((void *)v85 + 1);
          uint64_t v87 = *((void *)v85 + 2);
          *(void *)uint64_t v84 = *(void *)v85;
          *((void *)v84 + 1) = v86;
          *((void *)v84 + 2) = v87;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
          *((void *)v84 + 2) = *((void *)v85 + 2);
        }
        uint64_t v13 = v179;
        break;
      case 2u:
        v187(v15, v16, v11);
        uint64_t v43 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v15[v43[5]] = *(_DWORD *)&v16[v43[5]];
        uint64_t v44 = v43[6];
        unint64_t v45 = &v15[v44];
        uint64_t v46 = &v16[v44];
        long long v47 = *((_OWORD *)v46 + 3);
        *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
        *((_OWORD *)v45 + 3) = v47;
        long long v48 = *((_OWORD *)v46 + 1);
        *(_OWORD *)unint64_t v45 = *(_OWORD *)v46;
        *((_OWORD *)v45 + 1) = v48;
        uint64_t v49 = v43[7];
        long long v50 = &v15[v49];
        uint64_t v51 = &v16[v49];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        *(void *)long long v50 = v53;
        *((void *)v50 + 1) = v52;
        *(void *)&v15[v43[8]] = *(void *)&v16[v43[8]];
        *(void *)&v15[v43[9]] = *(void *)&v16[v43[9]];
        *(void *)&v15[v43[10]] = *(void *)&v16[v43[10]];
        __srca = a2;
        *(void *)&v15[v43[11]] = *(void *)&v16[v43[11]];
        *(void *)&v15[v43[12]] = *(void *)&v16[v43[12]];
        uint64_t v54 = v43[13];
        uint64_t v55 = *(void **)&v16[v54];
        *(void *)&v15[v54] = v55;
        v15[v43[14]] = v16[v43[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v56 = v55;
        a2 = __srca;
        break;
      case 3u:
      case 4u:
        v187(v15, v16, v11);
        id v57 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v15[v57[5]] = *(_DWORD *)&v16[v57[5]];
        uint64_t v58 = v57[6];
        uint64_t v59 = &v15[v58];
        uint64_t v60 = &v16[v58];
        long long v61 = *((_OWORD *)v60 + 3);
        *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
        *((_OWORD *)v59 + 3) = v61;
        long long v62 = *((_OWORD *)v60 + 1);
        *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
        *((_OWORD *)v59 + 1) = v62;
        uint64_t v63 = v57[7];
        uint64_t v64 = &v15[v63];
        uint64_t v65 = &v16[v63];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        *(void *)uint64_t v64 = v67;
        *((void *)v64 + 1) = v66;
        *(void *)&v15[v57[8]] = *(void *)&v16[v57[8]];
        *(void *)&v15[v57[9]] = *(void *)&v16[v57[9]];
        *(void *)&v15[v57[10]] = *(void *)&v16[v57[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        v187(v15, v16, v11);
        uint64_t v68 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v15[v68[5]] = *(_DWORD *)&v16[v68[5]];
        uint64_t v69 = v68[6];
        uint64_t v70 = &v15[v69];
        Swift::Int v71 = &v16[v69];
        long long v72 = *((_OWORD *)v71 + 3);
        *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
        *((_OWORD *)v70 + 3) = v72;
        long long v73 = *((_OWORD *)v71 + 1);
        *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
        *((_OWORD *)v70 + 1) = v73;
        uint64_t v74 = v68[7];
        uint64_t v75 = &v15[v74];
        Swift::Int v76 = &v16[v74];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        *(void *)uint64_t v75 = v78;
        *((void *)v75 + 1) = v77;
        *(void *)&v15[v68[8]] = *(void *)&v16[v68[8]];
        *(void *)&v15[v68[9]] = *(void *)&v16[v68[9]];
        swift_bridgeObjectRetain();
        break;
      default:
        v187(v15, v16, v11);
        unint64_t v17 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v15[v17[5]] = *(_DWORD *)&v16[v17[5]];
        uint64_t v18 = v17[6];
        uint64_t v19 = &v15[v18];
        uint64_t v20 = &v16[v18];
        long long v21 = *((_OWORD *)v20 + 3);
        *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
        *((_OWORD *)v19 + 3) = v21;
        long long v22 = *((_OWORD *)v20 + 1);
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
        *((_OWORD *)v19 + 1) = v22;
        uint64_t v23 = v17[7];
        long long v24 = &v15[v23];
        unint64_t v25 = &v16[v23];
        uint64_t v27 = *(void *)v25;
        uint64_t v26 = *((void *)v25 + 1);
        *(void *)long long v24 = v27;
        *((void *)v24 + 1) = v26;
        *(void *)&v15[v17[8]] = *(void *)&v16[v17[8]];
        *(void *)&v15[v17[9]] = *(void *)&v16[v17[9]];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v88 = v13[6];
    uint64_t v89 = &v8[v88];
    uint64_t v90 = &v9[v88];
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v180 = v13;
        v186 = a3;
        v187(v89, v90, v11);
        uint64_t v102 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v89[v102[5]] = *(_DWORD *)&v90[v102[5]];
        uint64_t v103 = v102[6];
        uint64_t v104 = &v89[v103];
        uint64_t v105 = &v90[v103];
        long long v106 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v106;
        long long v107 = *((_OWORD *)v105 + 1);
        *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v107;
        *(void *)&v89[v102[7]] = *(void *)&v90[v102[7]];
        *(void *)&v89[v102[8]] = *(void *)&v90[v102[8]];
        *(void *)&v89[v102[9]] = *(void *)&v90[v102[9]];
        v89[v102[10]] = v90[v102[10]];
        uint64_t v108 = v102[11];
        uint64_t v109 = &v89[v108];
        unint64_t v110 = &v90[v108];
        uint64_t v111 = *((void *)v110 + 1);
        *(void *)uint64_t v109 = *(void *)v110;
        *((void *)v109 + 1) = v111;
        uint64_t v112 = v102[12];
        uint64_t v113 = &v89[v112];
        uint64_t v114 = &v90[v112];
        uint64_t v115 = *((void *)v114 + 1);
        *(void *)uint64_t v113 = *(void *)v114;
        *((void *)v113 + 1) = v115;
        uint64_t v116 = v102[13];
        uint64_t v188 = &v89[v116];
        __dsta = &v90[v116];
        uint64_t v117 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v175 = *(void *)(v117 - 8);
        uint64_t v176 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v176(__dsta, 1, v117))
        {
          uint64_t v118 = sub_10000F214(&qword_100524BD0);
          memcpy(v188, __dsta, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v188, __dsta, v117);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v175 + 56))(v188, 0, 1, v117);
        }
        uint64_t v161 = v102[14];
        uint64_t v162 = &v89[v161];
        uint64_t v163 = &v90[v161];
        unint64_t v164 = *((void *)v163 + 1);
        if (v164 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
        }
        else
        {
          uint64_t v165 = *(void *)v163;
          sub_100038528(*(void *)v163, *((void *)v163 + 1));
          *(void *)uint64_t v162 = v165;
          *((void *)v162 + 1) = v164;
        }
        a3 = v186;
        uint64_t v166 = v102[15];
        unint64_t v167 = &v89[v166];
        uint64_t v168 = &v90[v166];
        if (*(void *)v168)
        {
          uint64_t v169 = *((void *)v168 + 1);
          uint64_t v170 = *((void *)v168 + 2);
          *(void *)unint64_t v167 = *(void *)v168;
          *((void *)v167 + 1) = v169;
          *((void *)v167 + 2) = v170;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)unint64_t v167 = *(_OWORD *)v168;
          *((void *)v167 + 2) = *((void *)v168 + 2);
        }
        uint64_t v13 = v180;
        swift_storeEnumTagMultiPayload();
        goto LABEL_28;
      case 2u:
        v187(v89, v90, v11);
        uint64_t v119 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v89[v119[5]] = *(_DWORD *)&v90[v119[5]];
        uint64_t v120 = v119[6];
        char v121 = &v89[v120];
        long long v122 = &v90[v120];
        long long v123 = *((_OWORD *)v122 + 3);
        *((_OWORD *)v121 + 2) = *((_OWORD *)v122 + 2);
        *((_OWORD *)v121 + 3) = v123;
        long long v124 = *((_OWORD *)v122 + 1);
        *(_OWORD *)char v121 = *(_OWORD *)v122;
        *((_OWORD *)v121 + 1) = v124;
        uint64_t v125 = v119[7];
        BOOL v126 = &v89[v125];
        uint64_t v127 = &v90[v125];
        uint64_t v129 = *(void *)v127;
        uint64_t v128 = *((void *)v127 + 1);
        *(void *)BOOL v126 = v129;
        *((void *)v126 + 1) = v128;
        *(void *)&v89[v119[8]] = *(void *)&v90[v119[8]];
        *(void *)&v89[v119[9]] = *(void *)&v90[v119[9]];
        *(void *)&v89[v119[10]] = *(void *)&v90[v119[10]];
        *(void *)&v89[v119[11]] = *(void *)&v90[v119[11]];
        __srcc = a2;
        *(void *)&v89[v119[12]] = *(void *)&v90[v119[12]];
        uint64_t v130 = v119[13];
        uint64_t v131 = *(void **)&v90[v130];
        *(void *)&v89[v130] = v131;
        v89[v119[14]] = v90[v119[14]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v132 = v131;
        a2 = __srcc;
        goto LABEL_27;
      case 3u:
      case 4u:
        v187(v89, v90, v11);
        v133 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v89[v133[5]] = *(_DWORD *)&v90[v133[5]];
        uint64_t v134 = v133[6];
        long long v135 = &v89[v134];
        long long v136 = &v90[v134];
        long long v137 = *((_OWORD *)v136 + 3);
        *((_OWORD *)v135 + 2) = *((_OWORD *)v136 + 2);
        *((_OWORD *)v135 + 3) = v137;
        long long v138 = *((_OWORD *)v136 + 1);
        *(_OWORD *)long long v135 = *(_OWORD *)v136;
        *((_OWORD *)v135 + 1) = v138;
        uint64_t v139 = v133[7];
        uint64_t v140 = &v89[v139];
        uint64_t v141 = &v90[v139];
        uint64_t v143 = *(void *)v141;
        uint64_t v142 = *((void *)v141 + 1);
        *(void *)uint64_t v140 = v143;
        *((void *)v140 + 1) = v142;
        *(void *)&v89[v133[8]] = *(void *)&v90[v133[8]];
        *(void *)&v89[v133[9]] = *(void *)&v90[v133[9]];
        *(void *)&v89[v133[10]] = *(void *)&v90[v133[10]];
        swift_bridgeObjectRetain();
        swift_retain();
        goto LABEL_27;
      case 5u:
        v187(v89, v90, v11);
        uint64_t v144 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v89[v144[5]] = *(_DWORD *)&v90[v144[5]];
        uint64_t v145 = v144[6];
        long long v146 = &v89[v145];
        long long v147 = &v90[v145];
        long long v148 = *((_OWORD *)v147 + 3);
        *((_OWORD *)v146 + 2) = *((_OWORD *)v147 + 2);
        *((_OWORD *)v146 + 3) = v148;
        long long v149 = *((_OWORD *)v147 + 1);
        *(_OWORD *)long long v146 = *(_OWORD *)v147;
        *((_OWORD *)v146 + 1) = v149;
        uint64_t v150 = v144[7];
        uint64_t v151 = &v89[v150];
        uint64_t v152 = &v90[v150];
        uint64_t v154 = *(void *)v152;
        uint64_t v153 = *((void *)v152 + 1);
        *(void *)uint64_t v151 = v154;
        *((void *)v151 + 1) = v153;
        *(void *)&v89[v144[8]] = *(void *)&v90[v144[8]];
        *(void *)&v89[v144[9]] = *(void *)&v90[v144[9]];
        swift_bridgeObjectRetain();
        goto LABEL_27;
      default:
        v187(v89, v90, v11);
        uint64_t v91 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v89[v91[5]] = *(_DWORD *)&v90[v91[5]];
        uint64_t v92 = v91[6];
        uint64_t v93 = &v89[v92];
        unint64_t v94 = &v90[v92];
        long long v95 = *((_OWORD *)v94 + 3);
        *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
        *((_OWORD *)v93 + 3) = v95;
        long long v96 = *((_OWORD *)v94 + 1);
        *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
        *((_OWORD *)v93 + 1) = v96;
        uint64_t v97 = v91[7];
        uint64_t v98 = &v89[v97];
        uint64_t v99 = &v90[v97];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        *(void *)uint64_t v98 = v101;
        *((void *)v98 + 1) = v100;
        *(void *)&v89[v91[8]] = *(void *)&v90[v91[8]];
        *(void *)&v89[v91[9]] = *(void *)&v90[v91[9]];
        swift_bridgeObjectRetain();
LABEL_27:
        swift_storeEnumTagMultiPayload();
LABEL_28:
        v8[v13[7]] = v9[v13[7]];
        *(void *)&v8[v13[8]] = *(void *)&v9[v13[8]];
        *(_DWORD *)&v8[v13[9]] = *(_DWORD *)&v9[v13[9]];
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v155 = type metadata accessor for CVBundle(0);
  *(void *)&v8[*(int *)(v155 + 20)] = *(void *)&v9[*(int *)(v155 + 20)];
  *(void *)&v8[*(int *)(v155 + 24)] = *(void *)&v9[*(int *)(v155 + 24)];
  uint64_t v156 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v157 = (void *)((char *)a1 + v156);
  uint64_t v158 = (void *)((char *)a2 + v156);
  uint64_t v159 = v158[1];
  *uint64_t v157 = *v158;
  v157[1] = v159;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1003D99B0(void *a1, void *a2, int *a3)
{
  int v3 = a3;
  if (a1 == a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
  }
  else
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = v3[5];
    uint64_t v8 = (char *)a1 + v10;
    uint64_t v9 = (char *)a2 + v10;
    sub_1003DD518((uint64_t)a1 + v10, type metadata accessor for CVBundle.BundleType);
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v8, v9, v12);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v176 = v13;
      uint64_t v14 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = &v8[v15];
      unint64_t v17 = &v9[v15];
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v171 = v3;
          uint64_t v173 = v14;
          v176(v16, v17, v12);
          uint64_t v28 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v16[v28[5]] = *(_DWORD *)&v17[v28[5]];
          uint64_t v29 = v28[6];
          uint64_t v30 = &v16[v29];
          uint64_t v31 = &v17[v29];
          long long v33 = *((_OWORD *)v31 + 2);
          long long v32 = *((_OWORD *)v31 + 3);
          long long v34 = *((_OWORD *)v31 + 1);
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          *((_OWORD *)v30 + 1) = v34;
          *((_OWORD *)v30 + 2) = v33;
          *((_OWORD *)v30 + 3) = v32;
          *(void *)&v16[v28[7]] = *(void *)&v17[v28[7]];
          *(void *)&v16[v28[8]] = *(void *)&v17[v28[8]];
          *(void *)&v16[v28[9]] = *(void *)&v17[v28[9]];
          v16[v28[10]] = v17[v28[10]];
          uint64_t v35 = v28[11];
          uint64_t v36 = &v16[v35];
          uint64_t v37 = &v17[v35];
          *(void *)uint64_t v36 = *(void *)v37;
          uint64_t v165 = v28;
          *((void *)v36 + 1) = *((void *)v37 + 1);
          uint64_t v38 = v28[12];
          uint64_t v39 = &v16[v38];
          uint64_t v40 = &v17[v38];
          *(void *)uint64_t v39 = *(void *)v40;
          *((void *)v39 + 1) = *((void *)v40 + 1);
          uint64_t v41 = v28[13];
          unint64_t v167 = &v16[v41];
          uint64_t v168 = &v17[v41];
          uint64_t v42 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v162 = *(void *)(v42 - 8);
          uint64_t v163 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v163(v168, 1, v42))
          {
            uint64_t v43 = sub_10000F214(&qword_100524BD0);
            memcpy(v167, v168, *(void *)(*(void *)(v43 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v167, v168, v42);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(v167, 0, 1, v42);
          }
          uint64_t v76 = v165[14];
          uint64_t v77 = &v16[v76];
          uint64_t v78 = (uint64_t *)&v17[v76];
          unint64_t v79 = v78[1];
          if (v79 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
          }
          else
          {
            uint64_t v170 = *v78;
            sub_100038528(*v78, v79);
            *(void *)uint64_t v77 = v170;
            *((void *)v77 + 1) = v79;
          }
          int v3 = v171;
          uint64_t v80 = v165[15];
          uint64_t v81 = &v16[v80];
          unint64_t v82 = &v17[v80];
          if (*(void *)v82)
          {
            *(void *)uint64_t v81 = *(void *)v82;
            uint64_t v83 = *((void *)v82 + 2);
            *((void *)v81 + 1) = *((void *)v82 + 1);
            *((void *)v81 + 2) = v83;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v84 = *(_OWORD *)v82;
            *((void *)v81 + 2) = *((void *)v82 + 2);
            *(_OWORD *)uint64_t v81 = v84;
          }
          uint64_t v14 = v173;
          break;
        case 2u:
          v176(v16, v17, v12);
          uint64_t v44 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v16[v44[5]] = *(_DWORD *)&v17[v44[5]];
          uint64_t v45 = v44[6];
          uint64_t v46 = &v16[v45];
          long long v47 = &v17[v45];
          long long v49 = *((_OWORD *)v47 + 2);
          long long v48 = *((_OWORD *)v47 + 3);
          long long v50 = *((_OWORD *)v47 + 1);
          *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
          *((_OWORD *)v46 + 1) = v50;
          *((_OWORD *)v46 + 2) = v49;
          *((_OWORD *)v46 + 3) = v48;
          uint64_t v51 = v44[7];
          uint64_t v52 = &v16[v51];
          uint64_t v53 = &v17[v51];
          *(void *)uint64_t v52 = *(void *)v53;
          *((void *)v52 + 1) = *((void *)v53 + 1);
          *(void *)&v16[v44[8]] = *(void *)&v17[v44[8]];
          *(void *)&v16[v44[9]] = *(void *)&v17[v44[9]];
          *(void *)&v16[v44[10]] = *(void *)&v17[v44[10]];
          *(void *)&v16[v44[11]] = *(void *)&v17[v44[11]];
          *(void *)&v16[v44[12]] = *(void *)&v17[v44[12]];
          uint64_t v54 = v44[13];
          uint64_t v169 = *(void **)&v17[v54];
          *(void *)&v16[v54] = v169;
          v16[v44[14]] = v17[v44[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v55 = v169;
          break;
        case 3u:
        case 4u:
          v176(v16, v17, v12);
          id v56 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v16[v56[5]] = *(_DWORD *)&v17[v56[5]];
          uint64_t v57 = v56[6];
          uint64_t v58 = &v16[v57];
          uint64_t v59 = &v17[v57];
          long long v61 = *((_OWORD *)v59 + 2);
          long long v60 = *((_OWORD *)v59 + 3);
          long long v62 = *((_OWORD *)v59 + 1);
          *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
          *((_OWORD *)v58 + 1) = v62;
          *((_OWORD *)v58 + 2) = v61;
          *((_OWORD *)v58 + 3) = v60;
          uint64_t v63 = v56[7];
          uint64_t v64 = &v16[v63];
          uint64_t v65 = &v17[v63];
          *(void *)uint64_t v64 = *(void *)v65;
          *((void *)v64 + 1) = *((void *)v65 + 1);
          *(void *)&v16[v56[8]] = *(void *)&v17[v56[8]];
          *(void *)&v16[v56[9]] = *(void *)&v17[v56[9]];
          *(void *)&v16[v56[10]] = *(void *)&v17[v56[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          break;
        case 5u:
          v176(v16, v17, v12);
          uint64_t v66 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v16[v66[5]] = *(_DWORD *)&v17[v66[5]];
          uint64_t v67 = v66[6];
          uint64_t v68 = &v16[v67];
          uint64_t v69 = &v17[v67];
          long long v71 = *((_OWORD *)v69 + 2);
          long long v70 = *((_OWORD *)v69 + 3);
          long long v72 = *((_OWORD *)v69 + 1);
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
          *((_OWORD *)v68 + 1) = v72;
          *((_OWORD *)v68 + 2) = v71;
          *((_OWORD *)v68 + 3) = v70;
          uint64_t v73 = v66[7];
          uint64_t v74 = &v16[v73];
          uint64_t v75 = &v17[v73];
          *(void *)uint64_t v74 = *(void *)v75;
          *((void *)v74 + 1) = *((void *)v75 + 1);
          *(void *)&v16[v66[8]] = *(void *)&v17[v66[8]];
          *(void *)&v16[v66[9]] = *(void *)&v17[v66[9]];
          swift_bridgeObjectRetain();
          break;
        default:
          v176(v16, v17, v12);
          uint64_t v18 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v16[v18[5]] = *(_DWORD *)&v17[v18[5]];
          uint64_t v19 = v18[6];
          uint64_t v20 = &v16[v19];
          long long v21 = &v17[v19];
          long long v23 = *((_OWORD *)v21 + 2);
          long long v22 = *((_OWORD *)v21 + 3);
          long long v24 = *((_OWORD *)v21 + 1);
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
          *((_OWORD *)v20 + 1) = v24;
          *((_OWORD *)v20 + 2) = v23;
          *((_OWORD *)v20 + 3) = v22;
          uint64_t v25 = v18[7];
          uint64_t v26 = &v16[v25];
          uint64_t v27 = &v17[v25];
          *(void *)uint64_t v26 = *(void *)v27;
          *((void *)v26 + 1) = *((void *)v27 + 1);
          *(void *)&v16[v18[8]] = *(void *)&v17[v18[8]];
          *(void *)&v16[v18[9]] = *(void *)&v17[v18[9]];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = v14[6];
      uint64_t v86 = &v8[v85];
      uint64_t v87 = &v9[v85];
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v172 = v3;
          uint64_t v174 = v14;
          v176(v86, v87, v12);
          uint64_t v98 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v86[v98[5]] = *(_DWORD *)&v87[v98[5]];
          uint64_t v99 = v98[6];
          uint64_t v100 = &v86[v99];
          uint64_t v101 = &v87[v99];
          long long v103 = *((_OWORD *)v101 + 2);
          long long v102 = *((_OWORD *)v101 + 3);
          long long v104 = *((_OWORD *)v101 + 1);
          *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
          *((_OWORD *)v100 + 1) = v104;
          *((_OWORD *)v100 + 2) = v103;
          *((_OWORD *)v100 + 3) = v102;
          *(void *)&v86[v98[7]] = *(void *)&v87[v98[7]];
          *(void *)&v86[v98[8]] = *(void *)&v87[v98[8]];
          *(void *)&v86[v98[9]] = *(void *)&v87[v98[9]];
          v86[v98[10]] = v87[v98[10]];
          uint64_t v105 = v98[11];
          long long v106 = &v86[v105];
          long long v107 = &v87[v105];
          *(void *)long long v106 = *(void *)v107;
          *((void *)v106 + 1) = *((void *)v107 + 1);
          uint64_t v108 = v98[12];
          uint64_t v109 = &v86[v108];
          unint64_t v110 = &v87[v108];
          *(void *)uint64_t v109 = *(void *)v110;
          *((void *)v109 + 1) = *((void *)v110 + 1);
          uint64_t v111 = v98[13];
          __dst = &v86[v111];
          uint64_t v177 = &v87[v111];
          uint64_t v112 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v164 = *(void *)(v112 - 8);
          uint64_t v166 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v166(v177, 1, v112))
          {
            uint64_t v113 = sub_10000F214(&qword_100524BD0);
            memcpy(__dst, v177, *(void *)(*(void *)(v113 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v164 + 16))(__dst, v177, v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v164 + 56))(__dst, 0, 1, v112);
          }
          uint64_t v152 = v98[14];
          uint64_t v153 = &v86[v152];
          uint64_t v154 = &v87[v152];
          unint64_t v155 = *((void *)v154 + 1);
          if (v155 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v153 = *(_OWORD *)v154;
          }
          else
          {
            uint64_t v156 = *(void *)v154;
            sub_100038528(*(void *)v154, *((void *)v154 + 1));
            *(void *)uint64_t v153 = v156;
            *((void *)v153 + 1) = v155;
          }
          int v3 = v172;
          uint64_t v157 = v98[15];
          uint64_t v158 = &v86[v157];
          uint64_t v159 = &v87[v157];
          if (*(void *)v159)
          {
            *(void *)uint64_t v158 = *(void *)v159;
            uint64_t v160 = *((void *)v159 + 2);
            *((void *)v158 + 1) = *((void *)v159 + 1);
            *((void *)v158 + 2) = v160;
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            long long v161 = *(_OWORD *)v159;
            *((void *)v158 + 2) = *((void *)v159 + 2);
            *(_OWORD *)uint64_t v158 = v161;
          }
          uint64_t v14 = v174;
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        case 2u:
          v176(v86, v87, v12);
          uint64_t v114 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v86[v114[5]] = *(_DWORD *)&v87[v114[5]];
          uint64_t v115 = v114[6];
          uint64_t v116 = &v86[v115];
          uint64_t v117 = &v87[v115];
          long long v119 = *((_OWORD *)v117 + 2);
          long long v118 = *((_OWORD *)v117 + 3);
          long long v120 = *((_OWORD *)v117 + 1);
          *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
          *((_OWORD *)v116 + 1) = v120;
          *((_OWORD *)v116 + 2) = v119;
          *((_OWORD *)v116 + 3) = v118;
          uint64_t v121 = v114[7];
          long long v122 = &v86[v121];
          long long v123 = &v87[v121];
          *(void *)long long v122 = *(void *)v123;
          *((void *)v122 + 1) = *((void *)v123 + 1);
          *(void *)&v86[v114[8]] = *(void *)&v87[v114[8]];
          *(void *)&v86[v114[9]] = *(void *)&v87[v114[9]];
          *(void *)&v86[v114[10]] = *(void *)&v87[v114[10]];
          *(void *)&v86[v114[11]] = *(void *)&v87[v114[11]];
          *(void *)&v86[v114[12]] = *(void *)&v87[v114[12]];
          uint64_t v124 = v114[13];
          uint64_t v125 = *(void **)&v87[v124];
          *(void *)&v86[v124] = v125;
          v86[v114[14]] = v87[v114[14]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v126 = v125;
          goto LABEL_29;
        case 3u:
        case 4u:
          v176(v86, v87, v12);
          uint64_t v127 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v86[v127[5]] = *(_DWORD *)&v87[v127[5]];
          uint64_t v128 = v127[6];
          uint64_t v129 = &v86[v128];
          uint64_t v130 = &v87[v128];
          long long v132 = *((_OWORD *)v130 + 2);
          long long v131 = *((_OWORD *)v130 + 3);
          long long v133 = *((_OWORD *)v130 + 1);
          *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
          *((_OWORD *)v129 + 1) = v133;
          *((_OWORD *)v129 + 2) = v132;
          *((_OWORD *)v129 + 3) = v131;
          uint64_t v134 = v127[7];
          long long v135 = &v86[v134];
          long long v136 = &v87[v134];
          *(void *)long long v135 = *(void *)v136;
          *((void *)v135 + 1) = *((void *)v136 + 1);
          *(void *)&v86[v127[8]] = *(void *)&v87[v127[8]];
          *(void *)&v86[v127[9]] = *(void *)&v87[v127[9]];
          *(void *)&v86[v127[10]] = *(void *)&v87[v127[10]];
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_29;
        case 5u:
          v176(v86, v87, v12);
          long long v137 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v86[v137[5]] = *(_DWORD *)&v87[v137[5]];
          uint64_t v138 = v137[6];
          uint64_t v139 = &v86[v138];
          uint64_t v140 = &v87[v138];
          long long v142 = *((_OWORD *)v140 + 2);
          long long v141 = *((_OWORD *)v140 + 3);
          long long v143 = *((_OWORD *)v140 + 1);
          *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
          *((_OWORD *)v139 + 1) = v143;
          *((_OWORD *)v139 + 2) = v142;
          *((_OWORD *)v139 + 3) = v141;
          uint64_t v144 = v137[7];
          uint64_t v145 = &v86[v144];
          long long v146 = &v87[v144];
          *(void *)uint64_t v145 = *(void *)v146;
          *((void *)v145 + 1) = *((void *)v146 + 1);
          *(void *)&v86[v137[8]] = *(void *)&v87[v137[8]];
          *(void *)&v86[v137[9]] = *(void *)&v87[v137[9]];
          swift_bridgeObjectRetain();
          goto LABEL_29;
        default:
          v176(v86, v87, v12);
          uint64_t v88 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v86[v88[5]] = *(_DWORD *)&v87[v88[5]];
          uint64_t v89 = v88[6];
          uint64_t v90 = &v86[v89];
          uint64_t v91 = &v87[v89];
          long long v93 = *((_OWORD *)v91 + 2);
          long long v92 = *((_OWORD *)v91 + 3);
          long long v94 = *((_OWORD *)v91 + 1);
          *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
          *((_OWORD *)v90 + 1) = v94;
          *((_OWORD *)v90 + 2) = v93;
          *((_OWORD *)v90 + 3) = v92;
          uint64_t v95 = v88[7];
          long long v96 = &v86[v95];
          uint64_t v97 = &v87[v95];
          *(void *)long long v96 = *(void *)v97;
          *((void *)v96 + 1) = *((void *)v97 + 1);
          *(void *)&v86[v88[8]] = *(void *)&v87[v88[8]];
          *(void *)&v86[v88[9]] = *(void *)&v87[v88[9]];
          swift_bridgeObjectRetain();
LABEL_29:
          swift_storeEnumTagMultiPayload();
LABEL_30:
          v8[v14[7]] = v9[v14[7]];
          *(void *)&v8[v14[8]] = *(void *)&v9[v14[8]];
          *(_DWORD *)&v8[v14[9]] = *(_DWORD *)&v9[v14[9]];
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v147 = type metadata accessor for CVBundle(0);
  *(void *)&v8[*(int *)(v147 + 20)] = *(void *)&v9[*(int *)(v147 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v8[*(int *)(v147 + 24)] = *(void *)&v9[*(int *)(v147 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v3[6]) = *((unsigned char *)a2 + v3[6]);
  uint64_t v148 = v3[7];
  long long v149 = (char *)a1 + v148;
  uint64_t v150 = (char *)a2 + v148;
  *(void *)((char *)a1 + v148) = *(void *)((char *)a2 + v148);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v149 + 1) = *((void *)v150 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_1003DA910(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v9, v10, v12);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v105 = a3;
    uint64_t v14 = (int *)type metadata accessor for CVTrackSnapshot(0);
    uint64_t v15 = v14[5];
    uint64_t v16 = &v9[v15];
    unint64_t v17 = &v10[v15];
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v103 = v14;
        v13(v16, v17, v12);
        long long v24 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)&v16[v24[5]] = *(_DWORD *)&v17[v24[5]];
        uint64_t v25 = v24[6];
        uint64_t v26 = &v16[v25];
        uint64_t v27 = &v17[v25];
        long long v28 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v28;
        long long v29 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v29;
        *(void *)&v16[v24[7]] = *(void *)&v17[v24[7]];
        *(void *)&v16[v24[8]] = *(void *)&v17[v24[8]];
        *(void *)&v16[v24[9]] = *(void *)&v17[v24[9]];
        v16[v24[10]] = v17[v24[10]];
        *(_OWORD *)&v16[v24[11]] = *(_OWORD *)&v17[v24[11]];
        *(_OWORD *)&v16[v24[12]] = *(_OWORD *)&v17[v24[12]];
        uint64_t v30 = v24[13];
        uint64_t v100 = &v16[v30];
        __dst = &v17[v30];
        uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v98 = *(void *)(v31 - 8);
        uint64_t v99 = v31;
        if ((*(unsigned int (**)(char *, uint64_t))(v98 + 48))(__dst, 1))
        {
          uint64_t v32 = sub_10000F214(&qword_100524BD0);
          memcpy(v100, __dst, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v100, __dst, v99);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v100, 0, 1, v99);
        }
        *(_OWORD *)&v16[v24[14]] = *(_OWORD *)&v17[v24[14]];
        uint64_t v92 = v24[15];
        long long v93 = &v16[v92];
        long long v94 = &v17[v92];
        *((void *)v93 + 2) = *((void *)v94 + 2);
        *(_OWORD *)long long v93 = *(_OWORD *)v94;
        swift_storeEnumTagMultiPayload();
        uint64_t v14 = v103;
        goto LABEL_13;
      case 2u:
        v13(v16, v17, v12);
        long long v33 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)&v16[v33[5]] = *(_DWORD *)&v17[v33[5]];
        uint64_t v34 = v33[6];
        uint64_t v35 = &v16[v34];
        uint64_t v36 = &v17[v34];
        long long v37 = *((_OWORD *)v36 + 3);
        *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
        *((_OWORD *)v35 + 3) = v37;
        long long v38 = *((_OWORD *)v36 + 1);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v38;
        *(_OWORD *)&v16[v33[7]] = *(_OWORD *)&v17[v33[7]];
        *(void *)&v16[v33[8]] = *(void *)&v17[v33[8]];
        *(void *)&v16[v33[9]] = *(void *)&v17[v33[9]];
        *(void *)&v16[v33[10]] = *(void *)&v17[v33[10]];
        *(void *)&v16[v33[11]] = *(void *)&v17[v33[11]];
        *(void *)&v16[v33[12]] = *(void *)&v17[v33[12]];
        *(void *)&v16[v33[13]] = *(void *)&v17[v33[13]];
        v16[v33[14]] = v17[v33[14]];
        goto LABEL_12;
      case 3u:
      case 4u:
        v13(v16, v17, v12);
        uint64_t v39 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)&v16[v39[5]] = *(_DWORD *)&v17[v39[5]];
        uint64_t v40 = v39[6];
        uint64_t v41 = &v16[v40];
        uint64_t v42 = &v17[v40];
        long long v43 = *((_OWORD *)v42 + 3);
        *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
        *((_OWORD *)v41 + 3) = v43;
        long long v44 = *((_OWORD *)v42 + 1);
        *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v44;
        *(_OWORD *)&v16[v39[7]] = *(_OWORD *)&v17[v39[7]];
        *(void *)&v16[v39[8]] = *(void *)&v17[v39[8]];
        *(void *)&v16[v39[9]] = *(void *)&v17[v39[9]];
        *(void *)&v16[v39[10]] = *(void *)&v17[v39[10]];
        goto LABEL_12;
      case 5u:
        v13(v16, v17, v12);
        uint64_t v45 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)&v16[v45[5]] = *(_DWORD *)&v17[v45[5]];
        uint64_t v46 = v45[6];
        long long v47 = &v16[v46];
        long long v48 = &v17[v46];
        long long v49 = *((_OWORD *)v48 + 3);
        *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
        *((_OWORD *)v47 + 3) = v49;
        long long v50 = *((_OWORD *)v48 + 1);
        *(_OWORD *)long long v47 = *(_OWORD *)v48;
        *((_OWORD *)v47 + 1) = v50;
        *(_OWORD *)&v16[v45[7]] = *(_OWORD *)&v17[v45[7]];
        *(void *)&v16[v45[8]] = *(void *)&v17[v45[8]];
        *(void *)&v16[v45[9]] = *(void *)&v17[v45[9]];
        goto LABEL_12;
      default:
        v13(v16, v17, v12);
        uint64_t v18 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)&v16[v18[5]] = *(_DWORD *)&v17[v18[5]];
        uint64_t v19 = v18[6];
        uint64_t v20 = &v16[v19];
        long long v21 = &v17[v19];
        long long v22 = *((_OWORD *)v21 + 3);
        *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
        *((_OWORD *)v20 + 3) = v22;
        long long v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        *((_OWORD *)v20 + 1) = v23;
        *(_OWORD *)&v16[v18[7]] = *(_OWORD *)&v17[v18[7]];
        *(void *)&v16[v18[8]] = *(void *)&v17[v18[8]];
        *(void *)&v16[v18[9]] = *(void *)&v17[v18[9]];
LABEL_12:
        swift_storeEnumTagMultiPayload();
LABEL_13:
        uint64_t v51 = v14[6];
        uint64_t v52 = &v9[v51];
        uint64_t v53 = &v10[v51];
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v104 = v14;
            v13(v52, v53, v12);
            long long v60 = (int *)type metadata accessor for ParseDetectorResult(0);
            *(_DWORD *)&v52[v60[5]] = *(_DWORD *)&v53[v60[5]];
            uint64_t v61 = v60[6];
            long long v62 = &v52[v61];
            uint64_t v63 = &v53[v61];
            long long v64 = *((_OWORD *)v63 + 3);
            *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
            *((_OWORD *)v62 + 3) = v64;
            long long v65 = *((_OWORD *)v63 + 1);
            *(_OWORD *)long long v62 = *(_OWORD *)v63;
            *((_OWORD *)v62 + 1) = v65;
            *(void *)&v52[v60[7]] = *(void *)&v53[v60[7]];
            *(void *)&v52[v60[8]] = *(void *)&v53[v60[8]];
            *(void *)&v52[v60[9]] = *(void *)&v53[v60[9]];
            v52[v60[10]] = v53[v60[10]];
            *(_OWORD *)&v52[v60[11]] = *(_OWORD *)&v53[v60[11]];
            *(_OWORD *)&v52[v60[12]] = *(_OWORD *)&v53[v60[12]];
            uint64_t v66 = v60[13];
            __dsta = &v52[v66];
            uint64_t v67 = &v53[v66];
            uint64_t v68 = type metadata accessor for VisualUnderstanding.ImageRegion();
            uint64_t v69 = *(void *)(v68 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
            {
              uint64_t v70 = sub_10000F214(&qword_100524BD0);
              memcpy(__dsta, v67, *(void *)(*(void *)(v70 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v69 + 32))(__dsta, v67, v68);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(__dsta, 0, 1, v68);
            }
            *(_OWORD *)&v52[v60[14]] = *(_OWORD *)&v53[v60[14]];
            uint64_t v95 = v60[15];
            long long v96 = &v52[v95];
            uint64_t v97 = &v53[v95];
            *((void *)v96 + 2) = *((void *)v97 + 2);
            *(_OWORD *)long long v96 = *(_OWORD *)v97;
            swift_storeEnumTagMultiPayload();
            a3 = v105;
            uint64_t v14 = v104;
            goto LABEL_21;
          case 2u:
            v13(v52, v53, v12);
            long long v71 = (int *)type metadata accessor for TextDetectorResult(0);
            *(_DWORD *)&v52[v71[5]] = *(_DWORD *)&v53[v71[5]];
            uint64_t v72 = v71[6];
            uint64_t v73 = &v52[v72];
            uint64_t v74 = &v53[v72];
            long long v75 = *((_OWORD *)v74 + 3);
            *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
            *((_OWORD *)v73 + 3) = v75;
            long long v76 = *((_OWORD *)v74 + 1);
            *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
            *((_OWORD *)v73 + 1) = v76;
            *(_OWORD *)&v52[v71[7]] = *(_OWORD *)&v53[v71[7]];
            *(void *)&v52[v71[8]] = *(void *)&v53[v71[8]];
            *(void *)&v52[v71[9]] = *(void *)&v53[v71[9]];
            *(void *)&v52[v71[10]] = *(void *)&v53[v71[10]];
            *(void *)&v52[v71[11]] = *(void *)&v53[v71[11]];
            *(void *)&v52[v71[12]] = *(void *)&v53[v71[12]];
            *(void *)&v52[v71[13]] = *(void *)&v53[v71[13]];
            v52[v71[14]] = v53[v71[14]];
            goto LABEL_20;
          case 3u:
          case 4u:
            v13(v52, v53, v12);
            uint64_t v77 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
            *(_DWORD *)&v52[v77[5]] = *(_DWORD *)&v53[v77[5]];
            uint64_t v78 = v77[6];
            unint64_t v79 = &v52[v78];
            uint64_t v80 = &v53[v78];
            long long v81 = *((_OWORD *)v80 + 3);
            *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
            *((_OWORD *)v79 + 3) = v81;
            long long v82 = *((_OWORD *)v80 + 1);
            *(_OWORD *)unint64_t v79 = *(_OWORD *)v80;
            *((_OWORD *)v79 + 1) = v82;
            *(_OWORD *)&v52[v77[7]] = *(_OWORD *)&v53[v77[7]];
            *(void *)&v52[v77[8]] = *(void *)&v53[v77[8]];
            *(void *)&v52[v77[9]] = *(void *)&v53[v77[9]];
            *(void *)&v52[v77[10]] = *(void *)&v53[v77[10]];
            goto LABEL_20;
          case 5u:
            v13(v52, v53, v12);
            uint64_t v83 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
            *(_DWORD *)&v52[v83[5]] = *(_DWORD *)&v53[v83[5]];
            uint64_t v84 = v83[6];
            uint64_t v85 = &v52[v84];
            uint64_t v86 = &v53[v84];
            long long v87 = *((_OWORD *)v86 + 3);
            *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
            *((_OWORD *)v85 + 3) = v87;
            long long v88 = *((_OWORD *)v86 + 1);
            *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
            *((_OWORD *)v85 + 1) = v88;
            *(_OWORD *)&v52[v83[7]] = *(_OWORD *)&v53[v83[7]];
            *(void *)&v52[v83[8]] = *(void *)&v53[v83[8]];
            *(void *)&v52[v83[9]] = *(void *)&v53[v83[9]];
            goto LABEL_20;
          default:
            v13(v52, v53, v12);
            uint64_t v54 = (int *)type metadata accessor for ObjectDetectorResult(0);
            *(_DWORD *)&v52[v54[5]] = *(_DWORD *)&v53[v54[5]];
            uint64_t v55 = v54[6];
            id v56 = &v52[v55];
            uint64_t v57 = &v53[v55];
            long long v58 = *((_OWORD *)v57 + 3);
            *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
            *((_OWORD *)v56 + 3) = v58;
            long long v59 = *((_OWORD *)v57 + 1);
            *(_OWORD *)id v56 = *(_OWORD *)v57;
            *((_OWORD *)v56 + 1) = v59;
            *(_OWORD *)&v52[v54[7]] = *(_OWORD *)&v53[v54[7]];
            *(void *)&v52[v54[8]] = *(void *)&v53[v54[8]];
            *(void *)&v52[v54[9]] = *(void *)&v53[v54[9]];
LABEL_20:
            swift_storeEnumTagMultiPayload();
            a3 = v105;
LABEL_21:
            v9[v14[7]] = v10[v14[7]];
            *(void *)&v9[v14[8]] = *(void *)&v10[v14[8]];
            *(_DWORD *)&v9[v14[9]] = *(_DWORD *)&v10[v14[9]];
            break;
        }
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v89 = type metadata accessor for CVBundle(0);
  *(void *)&v9[*(int *)(v89 + 20)] = *(void *)&v10[*(int *)(v89 + 20)];
  *(void *)&v9[*(int *)(v89 + 24)] = *(void *)&v10[*(int *)(v89 + 24)];
  uint64_t v90 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v90] = *(_OWORD *)&a2[v90];
  return a1;
}

char *sub_1003DB49C(char *a1, char *a2, int *a3)
{
  if (a1 == a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
  }
  else
  {
    sub_10000FBD8((uint64_t)a1, &qword_100522BF0);
    uint64_t v6 = sub_10000F214(&qword_100522BF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v11 = a3[5];
    uint64_t v9 = &a1[v11];
    uint64_t v10 = &a2[v11];
    sub_1003DD518((uint64_t)&a1[v11], type metadata accessor for CVBundle.BundleType);
    type metadata accessor for CVBundle.BundleType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v9, v10, v13);
    if (EnumCaseMultiPayload != 1)
    {
      __dst = v14;
      uint64_t v15 = (int *)type metadata accessor for CVTrackSnapshot(0);
      uint64_t v16 = v15[5];
      unint64_t v17 = &v9[v16];
      uint64_t v18 = &v10[v16];
      type metadata accessor for CVDetection();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v105 = v15;
          __dst(v17, v18, v13);
          uint64_t v25 = (int *)type metadata accessor for ParseDetectorResult(0);
          *(_DWORD *)&v17[v25[5]] = *(_DWORD *)&v18[v25[5]];
          uint64_t v26 = v25[6];
          uint64_t v27 = &v17[v26];
          long long v28 = &v18[v26];
          long long v29 = *((_OWORD *)v28 + 3);
          *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
          *((_OWORD *)v27 + 3) = v29;
          long long v30 = *((_OWORD *)v28 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
          *((_OWORD *)v27 + 1) = v30;
          *(void *)&v17[v25[7]] = *(void *)&v18[v25[7]];
          *(void *)&v17[v25[8]] = *(void *)&v18[v25[8]];
          *(void *)&v17[v25[9]] = *(void *)&v18[v25[9]];
          v17[v25[10]] = v18[v25[10]];
          *(_OWORD *)&v17[v25[11]] = *(_OWORD *)&v18[v25[11]];
          *(_OWORD *)&v17[v25[12]] = *(_OWORD *)&v18[v25[12]];
          uint64_t v31 = v25[13];
          long long v102 = &v17[v31];
          __src = &v18[v31];
          uint64_t v32 = type metadata accessor for VisualUnderstanding.ImageRegion();
          uint64_t v100 = *(void *)(v32 - 8);
          uint64_t v101 = v32;
          if ((*(unsigned int (**)(char *, uint64_t))(v100 + 48))(__src, 1))
          {
            uint64_t v33 = sub_10000F214(&qword_100524BD0);
            memcpy(v102, __src, *(void *)(*(void *)(v33 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v102, __src, v101);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v102, 0, 1, v101);
          }
          *(_OWORD *)&v17[v25[14]] = *(_OWORD *)&v18[v25[14]];
          uint64_t v94 = v25[15];
          uint64_t v95 = &v17[v94];
          long long v96 = &v18[v94];
          *((void *)v95 + 2) = *((void *)v96 + 2);
          *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
          swift_storeEnumTagMultiPayload();
          uint64_t v15 = v105;
          goto LABEL_15;
        case 2u:
          __dst(v17, v18, v13);
          uint64_t v34 = (int *)type metadata accessor for TextDetectorResult(0);
          *(_DWORD *)&v17[v34[5]] = *(_DWORD *)&v18[v34[5]];
          uint64_t v35 = v34[6];
          uint64_t v36 = &v17[v35];
          long long v37 = &v18[v35];
          long long v38 = *((_OWORD *)v37 + 3);
          *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
          *((_OWORD *)v36 + 3) = v38;
          long long v39 = *((_OWORD *)v37 + 1);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
          *((_OWORD *)v36 + 1) = v39;
          *(_OWORD *)&v17[v34[7]] = *(_OWORD *)&v18[v34[7]];
          *(void *)&v17[v34[8]] = *(void *)&v18[v34[8]];
          *(void *)&v17[v34[9]] = *(void *)&v18[v34[9]];
          *(void *)&v17[v34[10]] = *(void *)&v18[v34[10]];
          *(void *)&v17[v34[11]] = *(void *)&v18[v34[11]];
          *(void *)&v17[v34[12]] = *(void *)&v18[v34[12]];
          *(void *)&v17[v34[13]] = *(void *)&v18[v34[13]];
          v17[v34[14]] = v18[v34[14]];
          goto LABEL_14;
        case 3u:
        case 4u:
          __dst(v17, v18, v13);
          uint64_t v40 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
          *(_DWORD *)&v17[v40[5]] = *(_DWORD *)&v18[v40[5]];
          uint64_t v41 = v40[6];
          uint64_t v42 = &v17[v41];
          long long v43 = &v18[v41];
          long long v44 = *((_OWORD *)v43 + 3);
          *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
          *((_OWORD *)v42 + 3) = v44;
          long long v45 = *((_OWORD *)v43 + 1);
          *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
          *((_OWORD *)v42 + 1) = v45;
          *(_OWORD *)&v17[v40[7]] = *(_OWORD *)&v18[v40[7]];
          *(void *)&v17[v40[8]] = *(void *)&v18[v40[8]];
          *(void *)&v17[v40[9]] = *(void *)&v18[v40[9]];
          *(void *)&v17[v40[10]] = *(void *)&v18[v40[10]];
          goto LABEL_14;
        case 5u:
          __dst(v17, v18, v13);
          uint64_t v46 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
          *(_DWORD *)&v17[v46[5]] = *(_DWORD *)&v18[v46[5]];
          uint64_t v47 = v46[6];
          long long v48 = &v17[v47];
          long long v49 = &v18[v47];
          long long v50 = *((_OWORD *)v49 + 3);
          *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
          *((_OWORD *)v48 + 3) = v50;
          long long v51 = *((_OWORD *)v49 + 1);
          *(_OWORD *)long long v48 = *(_OWORD *)v49;
          *((_OWORD *)v48 + 1) = v51;
          *(_OWORD *)&v17[v46[7]] = *(_OWORD *)&v18[v46[7]];
          *(void *)&v17[v46[8]] = *(void *)&v18[v46[8]];
          *(void *)&v17[v46[9]] = *(void *)&v18[v46[9]];
          goto LABEL_14;
        default:
          __dst(v17, v18, v13);
          uint64_t v19 = (int *)type metadata accessor for ObjectDetectorResult(0);
          *(_DWORD *)&v17[v19[5]] = *(_DWORD *)&v18[v19[5]];
          uint64_t v20 = v19[6];
          long long v21 = &v17[v20];
          long long v22 = &v18[v20];
          long long v23 = *((_OWORD *)v22 + 3);
          *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
          *((_OWORD *)v21 + 3) = v23;
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)long long v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v24;
          *(_OWORD *)&v17[v19[7]] = *(_OWORD *)&v18[v19[7]];
          *(void *)&v17[v19[8]] = *(void *)&v18[v19[8]];
          *(void *)&v17[v19[9]] = *(void *)&v18[v19[9]];
LABEL_14:
          swift_storeEnumTagMultiPayload();
LABEL_15:
          uint64_t v52 = v15[6];
          uint64_t v53 = &v9[v52];
          uint64_t v54 = &v10[v52];
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              long long v106 = v15;
              __dst(v53, v54, v13);
              uint64_t v61 = (int *)type metadata accessor for ParseDetectorResult(0);
              *(_DWORD *)&v53[v61[5]] = *(_DWORD *)&v54[v61[5]];
              uint64_t v62 = v61[6];
              uint64_t v63 = &v53[v62];
              long long v64 = &v54[v62];
              long long v65 = *((_OWORD *)v64 + 3);
              *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
              *((_OWORD *)v63 + 3) = v65;
              long long v66 = *((_OWORD *)v64 + 1);
              *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
              *((_OWORD *)v63 + 1) = v66;
              *(void *)&v53[v61[7]] = *(void *)&v54[v61[7]];
              *(void *)&v53[v61[8]] = *(void *)&v54[v61[8]];
              *(void *)&v53[v61[9]] = *(void *)&v54[v61[9]];
              v53[v61[10]] = v54[v61[10]];
              *(_OWORD *)&v53[v61[11]] = *(_OWORD *)&v54[v61[11]];
              *(_OWORD *)&v53[v61[12]] = *(_OWORD *)&v54[v61[12]];
              uint64_t v67 = v61[13];
              __dsta = &v53[v67];
              uint64_t v68 = &v54[v67];
              uint64_t v69 = type metadata accessor for VisualUnderstanding.ImageRegion();
              uint64_t v103 = *(void *)(v69 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v68, 1, v69))
              {
                uint64_t v70 = sub_10000F214(&qword_100524BD0);
                memcpy(__dsta, v68, *(void *)(*(void *)(v70 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v103 + 32))(__dsta, v68, v69);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(__dsta, 0, 1, v69);
              }
              *(_OWORD *)&v53[v61[14]] = *(_OWORD *)&v54[v61[14]];
              uint64_t v97 = v61[15];
              uint64_t v98 = &v53[v97];
              uint64_t v99 = &v54[v97];
              *((void *)v98 + 2) = *((void *)v99 + 2);
              *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
              swift_storeEnumTagMultiPayload();
              uint64_t v15 = v106;
              goto LABEL_23;
            case 2u:
              __dst(v53, v54, v13);
              long long v71 = (int *)type metadata accessor for TextDetectorResult(0);
              *(_DWORD *)&v53[v71[5]] = *(_DWORD *)&v54[v71[5]];
              uint64_t v72 = v71[6];
              uint64_t v73 = &v53[v72];
              uint64_t v74 = &v54[v72];
              long long v75 = *((_OWORD *)v74 + 3);
              *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
              *((_OWORD *)v73 + 3) = v75;
              long long v76 = *((_OWORD *)v74 + 1);
              *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
              *((_OWORD *)v73 + 1) = v76;
              *(_OWORD *)&v53[v71[7]] = *(_OWORD *)&v54[v71[7]];
              *(void *)&v53[v71[8]] = *(void *)&v54[v71[8]];
              *(void *)&v53[v71[9]] = *(void *)&v54[v71[9]];
              *(void *)&v53[v71[10]] = *(void *)&v54[v71[10]];
              *(void *)&v53[v71[11]] = *(void *)&v54[v71[11]];
              *(void *)&v53[v71[12]] = *(void *)&v54[v71[12]];
              *(void *)&v53[v71[13]] = *(void *)&v54[v71[13]];
              v53[v71[14]] = v54[v71[14]];
              goto LABEL_22;
            case 3u:
            case 4u:
              __dst(v53, v54, v13);
              uint64_t v77 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
              *(_DWORD *)&v53[v77[5]] = *(_DWORD *)&v54[v77[5]];
              uint64_t v78 = v77[6];
              unint64_t v79 = &v53[v78];
              uint64_t v80 = &v54[v78];
              long long v81 = *((_OWORD *)v80 + 3);
              *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
              *((_OWORD *)v79 + 3) = v81;
              long long v82 = *((_OWORD *)v80 + 1);
              *(_OWORD *)unint64_t v79 = *(_OWORD *)v80;
              *((_OWORD *)v79 + 1) = v82;
              *(_OWORD *)&v53[v77[7]] = *(_OWORD *)&v54[v77[7]];
              *(void *)&v53[v77[8]] = *(void *)&v54[v77[8]];
              *(void *)&v53[v77[9]] = *(void *)&v54[v77[9]];
              *(void *)&v53[v77[10]] = *(void *)&v54[v77[10]];
              goto LABEL_22;
            case 5u:
              __dst(v53, v54, v13);
              uint64_t v83 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
              *(_DWORD *)&v53[v83[5]] = *(_DWORD *)&v54[v83[5]];
              uint64_t v84 = v83[6];
              uint64_t v85 = &v53[v84];
              uint64_t v86 = &v54[v84];
              long long v87 = *((_OWORD *)v86 + 3);
              *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
              *((_OWORD *)v85 + 3) = v87;
              long long v88 = *((_OWORD *)v86 + 1);
              *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
              *((_OWORD *)v85 + 1) = v88;
              *(_OWORD *)&v53[v83[7]] = *(_OWORD *)&v54[v83[7]];
              *(void *)&v53[v83[8]] = *(void *)&v54[v83[8]];
              *(void *)&v53[v83[9]] = *(void *)&v54[v83[9]];
              goto LABEL_22;
            default:
              __dst(v53, v54, v13);
              uint64_t v55 = (int *)type metadata accessor for ObjectDetectorResult(0);
              *(_DWORD *)&v53[v55[5]] = *(_DWORD *)&v54[v55[5]];
              uint64_t v56 = v55[6];
              uint64_t v57 = &v53[v56];
              long long v58 = &v54[v56];
              long long v59 = *((_OWORD *)v58 + 3);
              *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
              *((_OWORD *)v57 + 3) = v59;
              long long v60 = *((_OWORD *)v58 + 1);
              *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
              *((_OWORD *)v57 + 1) = v60;
              *(_OWORD *)&v53[v55[7]] = *(_OWORD *)&v54[v55[7]];
              *(void *)&v53[v55[8]] = *(void *)&v54[v55[8]];
              *(void *)&v53[v55[9]] = *(void *)&v54[v55[9]];
LABEL_22:
              swift_storeEnumTagMultiPayload();
LABEL_23:
              v9[v15[7]] = v10[v15[7]];
              *(void *)&v9[v15[8]] = *(void *)&v10[v15[8]];
              *(_DWORD *)&v9[v15[9]] = *(_DWORD *)&v10[v15[9]];
              break;
          }
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v89 = type metadata accessor for CVBundle(0);
  *(void *)&v9[*(int *)(v89 + 20)] = *(void *)&v10[*(int *)(v89 + 20)];
  swift_bridgeObjectRelease();
  *(void *)&v9[*(int *)(v89 + 24)] = *(void *)&v10[*(int *)(v89 + 24)];
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = &a2[v90];
  *(void *)&a1[v90] = *(void *)v92;
  swift_bridgeObjectRelease();
  *((void *)v91 + 1) = *((void *)v92 + 1);
  swift_release();
  return a1;
}

uint64_t sub_1003DC0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DC0E0);
}

uint64_t sub_1003DC0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_100522CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for CVBundle(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1003DC1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DC20C);
}

uint64_t sub_1003DC20C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000F214(&qword_100522CF0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for CVBundle(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for BundleClassificationDebugOverlay()
{
  uint64_t result = qword_10052D6F8;
  if (!qword_10052D6F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1003DC36C()
{
  sub_100027A88();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CVBundle(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1003DC448()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1003DC468()
{
  unint64_t result = qword_10052D738;
  if (!qword_10052D738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D738);
  }
  return result;
}

unint64_t sub_1003DC4C0()
{
  unint64_t result = qword_10052D740;
  if (!qword_10052D740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D740);
  }
  return result;
}

unint64_t sub_1003DC518()
{
  unint64_t result = qword_10052D748;
  if (!qword_10052D748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D748);
  }
  return result;
}

unint64_t sub_1003DC570()
{
  unint64_t result = qword_10052D750;
  if (!qword_10052D750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D750);
  }
  return result;
}

unint64_t sub_1003DC5C8()
{
  unint64_t result = qword_10052D758;
  if (!qword_10052D758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D758);
  }
  return result;
}

unint64_t sub_1003DC620()
{
  unint64_t result = qword_10052D760;
  if (!qword_10052D760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D760);
  }
  return result;
}

unint64_t sub_1003DC678()
{
  unint64_t result = qword_10052D768;
  if (!qword_10052D768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D768);
  }
  return result;
}

unint64_t sub_1003DC6D0()
{
  unint64_t result = qword_10052D770;
  if (!qword_10052D770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D770);
  }
  return result;
}

unint64_t sub_1003DC728()
{
  unint64_t result = qword_10052D778;
  if (!qword_10052D778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D778);
  }
  return result;
}

uint64_t sub_1003DC784()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BundleClassificationDebugOverlay();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  sub_10000F214(&qword_100522BF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v1 + v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = v1 + v4 + *(int *)(v2 + 20);
  type metadata accessor for CVBundle.BundleType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v6, v8);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v10 = type metadata accessor for CVTrackSnapshot(0);
    uint64_t v11 = v6 + *(int *)(v10 + 20);
    type metadata accessor for CVDetection();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v9(v11, v8);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_16;
      case 1u:
        uint64_t v32 = v10;
        v9(v11, v8);
        uint64_t v12 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v11 + v12[13];
        uint64_t v14 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v30 = *(void *)(v14 - 8);
        uint64_t v31 = v13;
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v15, 1, v14)) {
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v16);
        }
        unint64_t v17 = (uint64_t *)(v11 + v12[14]);
        unint64_t v18 = v17[1];
        if (v18 >> 60 != 15) {
          sub_100038B34(*v17, v18);
        }
        uint64_t v19 = (void *)(v11 + v12[15]);
        uint64_t v10 = v32;
        if (*v19)
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v9(v11, v8);
        uint64_t v20 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v9(v11, v8);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v9(v11, v8);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_16:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v21 = v6 + *(int *)(v10 + 24);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v9(v21, v8);
        type metadata accessor for ObjectDetectorResult(0);
        goto LABEL_28;
      case 1u:
        v9(v21, v8);
        long long v22 = (int *)type metadata accessor for ParseDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v23 = v21 + v22[13];
        uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v25 = *(void *)(v24 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
        }
        uint64_t v26 = (uint64_t *)(v21 + v22[14]);
        unint64_t v27 = v26[1];
        if (v27 >> 60 != 15) {
          sub_100038B34(*v26, v27);
        }
        if (*(void *)(v21 + v22[15]))
        {
          swift_bridgeObjectRelease();
          swift_release();
        }
        break;
      case 2u:
        v9(v21, v8);
        uint64_t v28 = type metadata accessor for TextDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        break;
      case 3u:
      case 4u:
        v9(v21, v8);
        type metadata accessor for StreamingBarcodeDetectorResult(0);
        swift_bridgeObjectRelease();
        swift_release();
        break;
      case 5u:
        v9(v21, v8);
        type metadata accessor for StreamingTextDetectorResult(0);
LABEL_28:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  type metadata accessor for CVBundle(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003DCE4C()
{
  type metadata accessor for BundleClassificationDebugOverlay();

  return sub_1003D4664();
}

unint64_t sub_1003DCECC()
{
  unint64_t result = qword_10052D7A8;
  if (!qword_10052D7A8)
  {
    sub_10000F69C(&qword_10052D798);
    sub_1003DCF48();
    sub_10002D694();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D7A8);
  }
  return result;
}

unint64_t sub_1003DCF48()
{
  unint64_t result = qword_10052D7B0;
  if (!qword_10052D7B0)
  {
    sub_10000F69C(&qword_10052D790);
    sub_1003DCFC4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D7B0);
  }
  return result;
}

unint64_t sub_1003DCFC4()
{
  unint64_t result = qword_10052D7B8;
  if (!qword_10052D7B8)
  {
    sub_10000F69C(&qword_10052D788);
    sub_100013AA8(&qword_10052D7C0, &qword_10052D780);
    sub_100013AA8(&qword_10051B818, &qword_10051B788);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D7B8);
  }
  return result;
}

unint64_t sub_1003DD088()
{
  unint64_t result = qword_10052D7C8;
  if (!qword_10052D7C8)
  {
    sub_10000F69C(&qword_100526A28);
    sub_1003DD3C8(&qword_10052C000, (void (*)(uint64_t))type metadata accessor for BundleClassification.ClassificationType);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D7C8);
  }
  return result;
}

uint64_t sub_1003DD12C()
{
  return sub_1003D46D4();
}

unint64_t sub_1003DD148()
{
  unint64_t result = qword_10052D818;
  if (!qword_10052D818)
  {
    sub_10000F69C(&qword_10052D7F0);
    sub_1003DD1BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D818);
  }
  return result;
}

unint64_t sub_1003DD1BC()
{
  unint64_t result = qword_10052D820;
  if (!qword_10052D820)
  {
    sub_10000F69C(&qword_10052D7E8);
    sub_100013AA8(&qword_10052D828, &qword_10052D7E0);
    sub_100013AA8((unint64_t *)&qword_100519930, (uint64_t *)&unk_10051D370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D820);
  }
  return result;
}

unint64_t sub_1003DD288()
{
  unint64_t result = qword_10052D888;
  if (!qword_10052D888)
  {
    sub_10000F69C(&qword_10052D850);
    sub_1003DD328();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D888);
  }
  return result;
}

unint64_t sub_1003DD328()
{
  unint64_t result = qword_10052D890;
  if (!qword_10052D890)
  {
    sub_10000F69C(&qword_10052D848);
    sub_100013AA8(&qword_10052D898, &qword_10052D840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D890);
  }
  return result;
}

uint64_t sub_1003DD3C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003DD410()
{
  unint64_t result = qword_10052D8C8;
  if (!qword_10052D8C8)
  {
    sub_10000F69C(&qword_10052D8B0);
    sub_100013AA8(&qword_100518D20, &qword_100518D28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052D8C8);
  }
  return result;
}

uint64_t sub_1003DD4B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003DD518(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003DD578(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003DD5E0(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1003DD620(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003DD660()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1003DD6E0@<X0>(uint8_t *a1@<X0>, char *a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  long long v49 = a3;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  long long v44 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v44 - v10;
  double v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v44 - v14;
  long long v45 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v7[7];
  v45(a4, 1, 1, v6, v13);
  id v16 = [self defaultManager];
  id v17 = [v16 temporaryDirectory];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = *(void *)(v4 + 24);
  v50[0] = *(void *)(v4 + 16);
  v50[1] = v18;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = UTType.identifier.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  long long v49 = (void (*)(char *, uint64_t))v7[1];
  v49(v11, v6);
  uint64_t v21 = v48;
  Data.write(to:options:)();
  if (v21)
  {
    long long v48 = (void *)a4;
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000F378(v22, (uint64_t)qword_10055E118);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v46 = (uint8_t *)v6;
      uint64_t v26 = (uint8_t *)v25;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v47 = v15;
      uint64_t v28 = (void *)v27;
      *(_DWORD *)uint64_t v26 = 138412290;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      v50[0] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to write file %@", v26, 0xCu);
      sub_10000F214(&qword_10051A948);
      swift_arrayDestroy();
      uint64_t v15 = v47;
      swift_slowDealloc();
      uint64_t v6 = (uint64_t)v46;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v42 = (uint64_t)v48;

    swift_willThrow();
    v49(v15, v6);
    return sub_1000EE650(v42);
  }
  else
  {
    uint64_t v30 = v44;
    long long v48 = v7 + 1;
    sub_1000EE650(a4);
    uint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v7[2];
    v31(a4, v15, v6);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v45)(a4, 0, 1, v6);
    if (qword_100517E00 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10000F378(v32, (uint64_t)qword_10055E118);
    v31((uint64_t)v30, v15, v6);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = v6;
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v47 = v15;
      v50[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v46 = v36 + 4;
      sub_100049058();
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      v50[3] = sub_1003806B0(v38, v39, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = (uint64_t (*)(char *, uint64_t))v49;
      v49(v30, v35);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Wrote file to path %s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v40(v47, v35);
    }
    else
    {

      long long v43 = (uint64_t (*)(char *, uint64_t))v49;
      v49(v30, v6);
      return v43(v15, v6);
    }
  }
}

uint64_t sub_1003DDCC8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FileWriter()
{
  return self;
}

void sub_1003DDD24(uint8_t *a1, char *a2, void (*a3)(char *, uint64_t))
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UTType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100517E00 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_10000F378(v12, (uint64_t)qword_10055E118);
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v33 = v13;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = a2;
    id v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = a3;
    uint64_t v35 = v18;
    uint64_t v29 = a1;
    *(_DWORD *)id v17 = 136315138;
    uint64_t v32 = v4;
    uint64_t v19 = UTType.identifier.getter();
    uint64_t v34 = sub_1003806B0(v19, v20, &v35);
    uint64_t v4 = v32;
    a1 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "ImageContextCoordinator donateContext of type: %s", v17, 0xCu);
    swift_arrayDestroy();
    a3 = v31;
    swift_slowDealloc();
    a2 = v30;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  id v21 = *(id *)(v4 + 24);
  sub_1003CF308(a1, a2, a3);

  uint64_t v22 = *(void **)(v4 + 16);
  if (v22)
  {
    [v22 setActivityItemsConfiguration:*(void *)(v4 + 24)];
    uint64_t v23 = *(void **)(v4 + 16);
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "CustomView becomeFirstResponder", v27, 2u);
        swift_slowDealloc();
      }

      [v24 becomeFirstResponder];
    }
  }
}

uint64_t type metadata accessor for ImageContextCoordinator()
{
  return self;
}

void *sub_1003DE094(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  return sub_1003DE14C(a1, a2, a3, &qword_10052E1F0, (uint64_t (*)(void, double))type metadata accessor for GeoLookupResultBusiness.Action, type metadata accessor for GeoLookupResultBusiness.Action, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_100329C98);
}

void *sub_1003DE0F0(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  return sub_1003DE14C(a1, a2, a3, &qword_10051CB10, (uint64_t (*)(void, double))type metadata accessor for CVDetection, (uint64_t (*)(void))type metadata accessor for CVDetection, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_100328C90);
}

void *sub_1003DE14C(void (*a1)(id *), uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(void, double), uint64_t (*a6)(void), uint64_t (*a7)(BOOL, uint64_t, uint64_t, void *))
{
  unint64_t v39 = a6;
  uint64_t v10 = v7;
  uint64_t v41 = a1;
  uint64_t v34 = a4;
  uint64_t v12 = sub_10000F214(a4);
  double v13 = __chkstk_darwin(v12 - 8);
  os_log_type_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a5(0, v13);
  uint64_t v35 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v38 = (uint64_t)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v33 = (uint64_t)&v30 - v18;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v19; uint64_t v19 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v31 = a7;
    uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    unint64_t v37 = a3 & 0xC000000000000001;
    unint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v21 = 4;
    unint64_t v32 = a3;
    while (1)
    {
      a7 = (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))v19;
      id v22 = v37 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a3 + 8 * v21);
      uint64_t v23 = v22;
      uint64_t v24 = v21 - 3;
      if (__OFADD__(v21 - 4, 1)) {
        break;
      }
      id v42 = v22;
      v41(&v42);
      if (v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v20;
      }

      if ((*v36)(v15, 1, v40) == 1)
      {
        sub_10000FBD8((uint64_t)v15, v34);
      }
      else
      {
        uint64_t v25 = v33;
        os_log_type_t v26 = v39;
        sub_1003F80E4((uint64_t)v15, v33, v39);
        sub_1003F80E4(v25, v38, v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v20 = (void *)v31(0, v20[2] + 1, 1, v20);
        }
        unint64_t v28 = v20[2];
        unint64_t v27 = v20[3];
        if (v28 >= v27 >> 1) {
          unint64_t v20 = (void *)v31(v27 > 1, v28 + 1, 1, v20);
        }
        v20[2] = v28 + 1;
        sub_1003F80E4(v38, (uint64_t)v20+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v28, v39);
        a3 = v32;
      }
      ++v21;
      if (v24 == v19)
      {
        swift_bridgeObjectRelease();
        return v20;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1003DE4A4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000F214(&qword_10052E140);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v30 = (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v28 = (uint64_t)&v24 - v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v16 = *(void *)(type metadata accessor for VisualUnderstanding.ImageRegion() - 8);
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v11;
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v29 = *(void *)(v16 + 72);
  uint64_t v24 = a3;
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v26 = v10;
  uint64_t v27 = a2;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v9, 1, v10) == 1)
    {
      sub_10000FBD8((uint64_t)v9, &qword_10052E140);
    }
    else
    {
      uint64_t v20 = v28;
      sub_1003F80E4((uint64_t)v9, v28, type metadata accessor for ParseDetectorResult);
      sub_1003F80E4(v20, v30, type metadata accessor for ParseDetectorResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = (void *)sub_10032A840(0, v19[2] + 1, 1, (unint64_t)v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1) {
        uint64_t v19 = (void *)sub_10032A840(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      }
      v19[2] = v22 + 1;
      sub_1003F80E4(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, type metadata accessor for ParseDetectorResult);
      uint64_t v10 = v26;
    }
    v17 += v29;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

float sub_1003DE7D4(uint64_t a1)
{
  uint64_t v116 = a1;
  uint64_t v2 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v2 - 8);
  uint64_t v105 = (uint64_t)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v107 = (uint64_t)&v99 - v5;
  uint64_t v6 = sub_10000F214(&qword_10052E1C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v106 = (char *)&v99 - v10;
  uint64_t v11 = type metadata accessor for VisualUnderstanding.ImageRegion.Embedding();
  uint64_t v108 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v104 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v99 - v14;
  uint64_t v113 = sub_10000F214(&qword_10052E1C8);
  __chkstk_darwin(v113);
  uint64_t v115 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10000F214(&qword_10052E150);
  __chkstk_darwin(v17 - 8);
  uint64_t v114 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v99 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v99 - v23;
  uint64_t v25 = type metadata accessor for VisualDomain();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v109 = (char *)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v99 - v29;
  uint64_t v31 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v32 = *(int *)(v31 + 28);
  uint64_t v110 = v1;
  uint64_t v33 = *(void *)(v1 + v32);
  float v34 = 0.0;
  if (!*(void *)(v33 + 16)) {
    return v34;
  }
  uint64_t v35 = v31;
  uint64_t v101 = v15;
  uint64_t v100 = v8;
  uint64_t v102 = v11;
  unint64_t v36 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
  v37(v30, v33 + v36, v25);
  uint64_t v111 = v30;
  v37(v24, (unint64_t)v30, v25);
  uint64_t v112 = v26;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  uint64_t v39 = 1;
  v38(v24, 0, 1, v25);
  uint64_t v103 = (int *)v35;
  uint64_t v40 = *(void *)(v116 + *(int *)(v35 + 28));
  if (*(void *)(v40 + 16))
  {
    v37(v21, v40 + v36, v25);
    uint64_t v39 = 0;
  }
  uint64_t v41 = (uint64_t)v115;
  uint64_t v42 = (uint64_t)v114;
  v38(v21, v39, 1, v25);
  uint64_t v43 = v41 + *(int *)(v113 + 48);
  sub_10000FB74((uint64_t)v24, v41, &qword_10052E150);
  sub_10000FB74((uint64_t)v21, v43, &qword_10052E150);
  uint64_t v44 = v112;
  long long v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  if (v45(v41, 1, v25) != 1)
  {
    sub_10000FB74(v41, v42, &qword_10052E150);
    if (v45(v43, 1, v25) != 1)
    {
      uint64_t v47 = v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v109, v43, v25);
      sub_1003F3144((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v46 = *(void (**)(char *, uint64_t))(v44 + 8);
      v46(v47, v25);
      sub_10000FBD8((uint64_t)v21, &qword_10052E150);
      sub_10000FBD8((uint64_t)v24, &qword_10052E150);
      v46((char *)v42, v25);
      sub_10000FBD8(v41, &qword_10052E150);
      if (v48) {
        goto LABEL_12;
      }
LABEL_10:
      v46(v111, v25);
      return v34;
    }
    sub_10000FBD8((uint64_t)v21, &qword_10052E150);
    sub_10000FBD8((uint64_t)v24, &qword_10052E150);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v25);
LABEL_9:
    sub_10000FBD8(v41, &qword_10052E1C8);
    uint64_t v46 = *(void (**)(char *, uint64_t))(v44 + 8);
    goto LABEL_10;
  }
  sub_10000FBD8((uint64_t)v21, &qword_10052E150);
  sub_10000FBD8((uint64_t)v24, &qword_10052E150);
  if (v45(v43, 1, v25) != 1) {
    goto LABEL_9;
  }
  sub_10000FBD8(v41, &qword_10052E150);
LABEL_12:
  long long v49 = v103;
  uint64_t v50 = v110;
  long long v51 = (long long *)(v110 + v103[6]);
  long long v52 = v51[1];
  long long v121 = *v51;
  long long v122 = v52;
  long long v53 = v51[3];
  long long v123 = v51[2];
  long long v124 = v53;
  double v54 = sub_1003FD844();
  CGFloat v56 = v55;
  double v58 = v57;
  double v60 = v59;
  uint64_t v61 = (long long *)(v116 + v49[6]);
  long long v62 = v61[3];
  long long v119 = v61[2];
  long long v120 = v62;
  long long v63 = *v61;
  long long v118 = v61[1];
  long long v117 = v63;
  v127.origin.x = sub_1003FD844();
  v127.origin.y = v64;
  double v66 = v65;
  double v68 = v67;
  v125.origin.x = v54;
  v125.origin.y = v56;
  v125.size.double width = v58;
  v125.size.double height = v60;
  v127.size.double width = v66;
  v127.size.double height = v68;
  CGRect v126 = CGRectIntersection(v125, v127);
  double width = v126.size.width;
  double height = v126.size.height;
  float v71 = 0.0;
  if (!CGRectIsNull(v126)) {
    float v71 = width * height / (v58 * v60 + v66 * v68 - width * height);
  }
  uint64_t v72 = v102;
  if (*(unsigned char *)(v50 + v49[10]) != 1)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v111, v25);
    return v71;
  }
  uint64_t v73 = v107;
  sub_10000FB74(v50 + v49[13], v107, &qword_100524BD0);
  uint64_t v74 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v75 = *(void *)(v74 - 8);
  long long v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  int v77 = v76(v73, 1, v74);
  uint64_t v99 = v25;
  if (v77 == 1)
  {
    sub_10000FBD8(v73, &qword_100524BD0);
LABEL_22:
    long long v81 = v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v106, 1, 1, v72);
LABEL_23:
    (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v99);
    uint64_t v85 = (uint64_t)v81;
LABEL_24:
    sub_10000FBD8(v85, &qword_10052E1C0);
    return v71;
  }
  uint64_t v78 = VisualUnderstanding.ImageRegion.embeddings.getter();
  unint64_t v79 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  v79(v73, v74);
  if (!v78) {
    goto LABEL_22;
  }
  uint64_t v80 = (void *)v108;
  if (*(void *)(v78 + 16))
  {
    long long v81 = v106;
    (*(void (**)(char *, unint64_t, uint64_t))(v108 + 16))(v106, v78 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80)), v72);
    long long v82 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v80[7];
    uint64_t v83 = v81;
    uint64_t v84 = 0;
  }
  else
  {
    long long v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    long long v81 = v106;
    uint64_t v83 = v106;
    uint64_t v84 = 1;
  }
  uint64_t v115 = v82;
  v82(v83, v84, 1, v72);
  swift_bridgeObjectRelease();
  long long v87 = (unsigned int (*)(char *, uint64_t, uint64_t))v80[6];
  if (v87(v81, 1, v72) == 1) {
    goto LABEL_23;
  }
  long long v88 = (void (*)(char *, char *, uint64_t))v80[4];
  uint64_t v114 = (char *)(v80 + 4);
  uint64_t v113 = (uint64_t)v88;
  v88(v101, v81, v72);
  uint64_t v89 = v105;
  sub_10000FB74(v116 + v103[13], v105, &qword_100524BD0);
  if (v76(v89, 1, v74) == 1)
  {
    sub_10000FBD8(v89, &qword_100524BD0);
LABEL_34:
    uint64_t v92 = v108;
    uint64_t v93 = (uint64_t)v100;
    v115(v100, 1, 1, v72);
LABEL_35:
    (*(void (**)(char *, uint64_t))(v92 + 8))(v101, v72);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v99);
    uint64_t v85 = v93;
    goto LABEL_24;
  }
  uint64_t v90 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v87;
  uint64_t v91 = VisualUnderstanding.ImageRegion.embeddings.getter();
  v79(v89, v74);
  if (!v91) {
    goto LABEL_34;
  }
  if (*(void *)(v91 + 16))
  {
    uint64_t v92 = v108;
    uint64_t v93 = (uint64_t)v100;
    (*(void (**)(char *, unint64_t, uint64_t))(v108 + 16))(v100, v91 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80)), v72);
    uint64_t v94 = 0;
  }
  else
  {
    uint64_t v94 = 1;
    uint64_t v92 = v108;
    uint64_t v93 = (uint64_t)v100;
  }
  v115((char *)v93, v94, 1, v72);
  swift_bridgeObjectRelease();
  if (v90(v93, 1, v72) == 1) {
    goto LABEL_35;
  }
  uint64_t v95 = v104;
  ((void (*)(char *, uint64_t, uint64_t))v113)(v104, v93, v72);
  long long v96 = v101;
  unint64_t v97 = sub_1003E8590();
  uint64_t v98 = *(void (**)(char *, uint64_t))(v92 + 8);
  v98(v95, v72);
  v98(v96, v72);
  if ((v97 & 0x100000000) != 0)
  {
    (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v99);
    return v71;
  }
  (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v99);
  float v34 = 0.0;
  if (*(float *)&v97 > 0.55) {
    return (float)(v71 * 0.5) + (float)(*(float *)&v97 * 0.5);
  }
  return v34;
}

uint64_t sub_1003DF4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for VisualDomain();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1003F3144((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1003F3144((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1003DF6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1003DF7FC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (Swift::Int v3 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v4 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v5 = v3 & ~v4,
        ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0))
  {
    uint64_t v6 = ~v4;
    do
    {
      sub_100046B94(*(void *)(a2 + 48) + 40 * v5, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)();
      sub_100046BF0((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

BOOL sub_1003DF8D4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1003DF9A0(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    sub_100062F74(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xEC00000070756B6FLL;
        unint64_t v10 = 0x6F4C6C6175736956;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xEA00000000007075;
            unint64_t v10 = 0x6B6F6F4C7370614DLL;
            break;
          case 2:
            unint64_t v10 = 0x697463417370614DLL;
            unint64_t v9 = 0xEA00000000006E6FLL;
            break;
          case 3:
            unint64_t v9 = 0xE600000000000000;
            unint64_t v10 = 0x65646F435251;
            break;
          case 4:
            unint64_t v10 = 0x4370696C43707041;
            uint64_t v11 = 6644847;
            goto LABEL_20;
          case 5:
            unint64_t v10 = 0x6574654461746144;
            unint64_t v9 = 0xEC000000726F7463;
            break;
          case 6:
            unint64_t v10 = 0x7A6972616D6D7553;
            goto LABEL_17;
          case 7:
            unint64_t v9 = 0xE900000000000064;
            unint64_t v10 = 0x756F6C4164616552;
            break;
          case 8:
            unint64_t v10 = 0x7261646E656C6143;
            unint64_t v9 = 0xED0000746E657645;
            break;
          case 9:
            unint64_t v9 = 0x8000000100424480;
            unint64_t v10 = 0xD000000000000014;
            break;
          case 0xA:
            unint64_t v9 = 0xE300000000000000;
            unint64_t v10 = 7041857;
            break;
          case 0xB:
            unint64_t v10 = 0x6165536567616D49;
            uint64_t v11 = 6841202;
            goto LABEL_20;
          case 0xC:
            unint64_t v10 = 0x74616C736E617254;
LABEL_17:
            unint64_t v9 = 0xE900000000000065;
            break;
          case 0xD:
            unint64_t v10 = 0x4E72657474756853;
            unint64_t v9 = 0xEF6E6F697463416FLL;
            break;
          case 0xE:
            unint64_t v10 = 0x6669636570736E55;
            uint64_t v11 = 6579561;
LABEL_20:
            unint64_t v9 = v11 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            break;
          default:
            break;
        }
        uint64_t v12 = 0x6F4C6C6175736956;
        unint64_t v13 = 0xEC00000070756B6FLL;
        switch(v8)
        {
          case 1:
            unint64_t v13 = 0xEA00000000007075;
            if (v10 == 0x6B6F6F4C7370614DLL) {
              goto LABEL_46;
            }
            goto LABEL_47;
          case 2:
            unint64_t v13 = 0xEA00000000006E6FLL;
            if (v10 != 0x697463417370614DLL) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 3:
            unint64_t v13 = 0xE600000000000000;
            if (v10 != 0x65646F435251) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 4:
            uint64_t v14 = 0x4370696C43707041;
            uint64_t v15 = 6644847;
            goto LABEL_51;
          case 5:
            unint64_t v13 = 0xEC000000726F7463;
            if (v10 != 0x6574654461746144) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 6:
            uint64_t v16 = 0x7A6972616D6D7553;
            goto LABEL_42;
          case 7:
            unint64_t v13 = 0xE900000000000064;
            if (v10 != 0x756F6C4164616552) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 8:
            unint64_t v13 = 0xED0000746E657645;
            if (v10 != 0x7261646E656C6143) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 9:
            unint64_t v13 = 0x8000000100424480;
            if (v10 != 0xD000000000000014) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 10:
            unint64_t v13 = 0xE300000000000000;
            if (v10 != 7041857) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 11:
            uint64_t v14 = 0x6165536567616D49;
            uint64_t v15 = 6841202;
            goto LABEL_51;
          case 12:
            uint64_t v16 = 0x74616C736E617254;
LABEL_42:
            unint64_t v13 = 0xE900000000000065;
            if (v10 != v16) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 13:
            uint64_t v12 = 0x4E72657474756853;
            unint64_t v13 = 0xEF6E6F697463416FLL;
            goto LABEL_45;
          case 14:
            uint64_t v14 = 0x6669636570736E55;
            uint64_t v15 = 6579561;
LABEL_51:
            unint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v10 != v14) {
              goto LABEL_47;
            }
            goto LABEL_46;
          default:
LABEL_45:
            if (v10 != v12) {
              goto LABEL_47;
            }
LABEL_46:
            if (v9 == v13)
            {
              swift_bridgeObjectRelease_n();
              char v17 = 1;
              return v17 & 1;
            }
LABEL_47:
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v17) {
              return v17 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v17 & 1;
            }
            break;
        }
      }
    }
  }
  char v17 = 0;
  return v17 & 1;
}

uint64_t sub_1003DFF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1003F3144(&qword_10052E1D0, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1003F3144(&qword_10052E1D8, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1003E0130(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1003F3144(&qword_10052E1E0, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1003F3144(&qword_10052E1E8, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1003E0344(long long *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    sub_10004E0E4();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    uint64_t v7 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v33 = ~v5;
      uint64_t v8 = *(void *)(a2 + 48);
      while (1)
      {
        uint64_t v12 = (uint64_t *)(v8 + 40 * v6);
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v15 = v12[3];
        switch(*((unsigned char *)v12 + 32))
        {
          case 1:
            sub_10004ECF4(a1, (uint64_t)v42);
            if (v43 != 1) {
              goto LABEL_8;
            }
            uint64_t v18 = v42[0];
            uint64_t v19 = v42[1];
            uint64_t v20 = v42[2];
            uint64_t v21 = v42[3];
            goto LABEL_20;
          case 2:
            sub_10004ECF4(a1, (uint64_t)v44);
            if (v45 != 2) {
              goto LABEL_8;
            }
            uint64_t v18 = v44[0];
            uint64_t v19 = v44[1];
            uint64_t v20 = v44[2];
            uint64_t v21 = v44[3];
LABEL_20:
            BOOL v22 = v13 == v18 && v14 == v19;
            if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_8;
            }
            if (v16 != v20 || v15 != v21) {
              goto LABEL_29;
            }
            return 1;
          case 3:
            if (v16 | v14 | v13 | v15)
            {
              uint64_t v24 = v16 | v14 | v15;
              if (v13 == 1 && v24 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v38);
                if (v39 != 3 || v38[0] != 1) {
                  goto LABEL_8;
                }
                uint64_t v30 = v38[2];
                uint64_t v29 = v38[3];
                uint64_t v31 = v38[1];
              }
              else if (v13 == 2 && v24 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v46);
                if (v47 != 3 || v46[0] != 2) {
                  goto LABEL_8;
                }
                uint64_t v30 = v46[2];
                uint64_t v29 = v46[3];
                uint64_t v31 = v46[1];
              }
              else if (v13 == 3 && v24 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v48);
                if (v49 != 3 || v48[0] != 3) {
                  goto LABEL_8;
                }
                uint64_t v30 = v48[2];
                uint64_t v29 = v48[3];
                uint64_t v31 = v48[1];
              }
              else if (v13 == 4 && v24 == 0)
              {
                sub_10004ECF4(a1, (uint64_t)v50);
                if (v51 != 3 || v50[0] != 4) {
                  goto LABEL_8;
                }
                uint64_t v30 = v50[2];
                uint64_t v29 = v50[3];
                uint64_t v31 = v50[1];
              }
              else
              {
                sub_10004ECF4(a1, (uint64_t)v34);
                if (v35 != 3 || v34[0] != 5) {
                  goto LABEL_8;
                }
                uint64_t v30 = v34[2];
                uint64_t v29 = v34[3];
                uint64_t v31 = v34[1];
              }
              if (!(v30 | v29 | v31)) {
                return 1;
              }
            }
            else
            {
              sub_10004ECF4(a1, (uint64_t)v36);
              int8x16_t v9 = vorrq_s8(v36[0], v36[1]);
              int8x8_t v10 = vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
              if (v37 == 3 && *(void *)&v10 == 0) {
                return 1;
              }
            }
LABEL_8:
            unint64_t v6 = (v6 + 1) & v33;
            if (((*(void *)(v7 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return 0;
            }
            break;
          default:
            sub_10004ECF4(a1, (uint64_t)v40);
            if (v41) {
              goto LABEL_8;
            }
            if (v13 == v40[0] && v14 == v40[1]) {
              return 1;
            }
LABEL_29:
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              return 1;
            }
            goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

id sub_1003E0690@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1003F3144(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  Swift::Int v4 = *(void **)(v3 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
  *a2 = v4;

  return v4;
}

void sub_1003E0750(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1003F3144(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_1003E082C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v7 = a1[6] == a2[6] && a1[7] == a2[7] && a1[4] >> 16 == a2[4] >> 16 && a1[5] >> 16 == a2[5] >> 16;
  if (v7 || (char v8 = _stringCompareInternal(_:_:_:_:expecting:)(), result = 0, (v8 & 1) != 0))
  {
    uint64_t v10 = v2 - 1;
    if (!v10) {
      return 1;
    }
    uint64_t v11 = a2 + 11;
    for (i = a1 + 11; ; i += 4)
    {
      BOOL v13 = *(i - 1) == *(v11 - 1) && *i == *v11;
      BOOL v14 = v13 && *(i - 3) >> 16 == *(v11 - 3) >> 16;
      BOOL v15 = v14 && *(i - 2) >> 16 == *(v11 - 2) >> 16;
      if (!v15 && (_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0) {
        break;
      }
      v11 += 4;
      if (!--v10) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1003E093C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (double *)(a1 + 40);
    Swift::Int v4 = (double *)(a2 + 40);
    do
    {
      double v6 = *(v3 - 1);
      double v7 = *(v4 - 1);
      int v8 = *(unsigned __int8 *)v4;
      if (*(unsigned char *)v3)
      {
        if (*(unsigned char *)v3 == 1)
        {
          if (v8 != 1 || v6 != v7) {
            return 0;
          }
        }
        else if (v6 == 0.0)
        {
          if (v8 != 2 || *(void *)&v7 != 0) {
            return 0;
          }
        }
        else if (v8 != 2 || *(void *)&v7 != 1)
        {
          return 0;
        }
      }
      else
      {
        if (*(unsigned char *)v4) {
          BOOL v5 = 0;
        }
        else {
          BOOL v5 = v6 == v7;
        }
        if (!v5) {
          return 0;
        }
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_1003E09E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = (int *)type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v54 = (uint64_t)&v44 - v15;
  uint64_t v59 = sub_10000F214(&qword_100524190);
  __chkstk_darwin(v59);
  CGFloat v56 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v57);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  double v55 = (char *)&v44 - v21;
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v22 || a1 == a2) {
    return 1;
  }
  uint64_t v49 = v4;
  uint64_t v50 = v13;
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  uint64_t v23 = v5;
  unint64_t v24 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v25 = *(void *)(v20 + 72);
  char v45 = (void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  uint64_t v46 = v18;
  char v47 = v7;
  char v48 = (void (**)(uint64_t, uint64_t))(v23 + 8);
  uint64_t v26 = v22 - 1;
  uint64_t v51 = v11;
  uint64_t v27 = (uint64_t)v55;
  uint64_t v28 = (uint64_t)v56;
  while (1)
  {
    uint64_t v58 = v26;
    sub_1003F6CC0(v53 + v24, v27, type metadata accessor for CVBundle);
    sub_1003F6CC0(a2 + v24, (uint64_t)v18, type metadata accessor for CVBundle);
    uint64_t v29 = v28 + *(int *)(v59 + 48);
    sub_1003F6CC0(v27, v28, type metadata accessor for CVBundle.BundleType);
    sub_1003F6CC0((uint64_t)v18, v29, type metadata accessor for CVBundle.BundleType);
    if (swift_getEnumCaseMultiPayload() != 1) {
      break;
    }
    uint64_t v30 = v28;
    uint64_t v31 = (uint64_t)v50;
    sub_1003F6CC0(v30, (uint64_t)v50, type metadata accessor for CVBundle.BundleType);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*v48)(v31, v49);
      uint64_t v28 = (uint64_t)v56;
      goto LABEL_26;
    }
    uint64_t v32 = v10;
    uint64_t v33 = v8;
    float v34 = v47;
    uint64_t v35 = v49;
    (*v45)(v47, v29, v49);
    char v36 = static UUID.== infix(_:_:)();
    char v37 = *v48;
    uint64_t v38 = (uint64_t)v34;
    int v8 = v33;
    uint64_t v10 = v32;
    uint64_t v18 = v46;
    (*v48)(v38, v35);
    uint64_t v39 = v35;
    uint64_t v27 = (uint64_t)v55;
    v37(v31, v39);
    uint64_t v28 = (uint64_t)v56;
    if ((v36 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_17:
    sub_1003F6D28(v28, type metadata accessor for CVBundle.BundleType);
    uint64_t v41 = v57;
    if ((sub_1003E09E8(*(void *)(v27 + *(int *)(v57 + 20)), *(void *)&v18[*(int *)(v57 + 20)]) & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v42 = sub_1003E1070(*(void *)(v27 + *(int *)(v41 + 24)));
    sub_1003F6D28((uint64_t)v18, type metadata accessor for CVBundle);
    sub_1003F6D28(v27, type metadata accessor for CVBundle);
    uint64_t v26 = v58 - 1;
    if (v42)
    {
      v24 += v25;
      a2 = v52;
      if (v58) {
        continue;
      }
    }
    return v42;
  }
  uint64_t v40 = v54;
  sub_1003F6CC0(v28, v54, type metadata accessor for CVBundle.BundleType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1003F80E4(v29, (uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    if ((static UUID.== infix(_:_:)() & 1) == 0
      || (sub_1003FD840(v40 + v8[5], &v10[v8[5]]) & 1) == 0
      || (sub_1003FD840(v40 + v8[6], &v10[v8[6]]) & 1) == 0
      || *(unsigned __int8 *)(v40 + v8[7]) != v10[v8[7]]
      || *(double *)(v40 + v8[8]) != *(double *)&v10[v8[8]]
      || *(float *)(v40 + v8[9]) != *(float *)&v10[v8[9]])
    {
      sub_1003F6D28((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
      sub_1003F6D28(v40, type metadata accessor for CVTrackSnapshot);
LABEL_23:
      sub_1003F6D28(v28, type metadata accessor for CVBundle.BundleType);
      goto LABEL_27;
    }
    sub_1003F6D28((uint64_t)v10, type metadata accessor for CVTrackSnapshot);
    sub_1003F6D28(v40, type metadata accessor for CVTrackSnapshot);
    goto LABEL_17;
  }
  sub_1003F6D28(v40, type metadata accessor for CVTrackSnapshot);
LABEL_26:
  sub_10000FBD8(v28, &qword_100524190);
LABEL_27:
  sub_1003F6D28((uint64_t)v18, type metadata accessor for CVBundle);
  sub_1003F6D28(v27, type metadata accessor for CVBundle);
  return 0;
}

BOOL sub_1003E1070(uint64_t a1)
{
  uint64_t v95 = a1;
  uint64_t v1 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v84 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v94 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v96 = (uint64_t)&v72 - v4;
  uint64_t v88 = type metadata accessor for UUID();
  uint64_t v93 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v83 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_100525598);
  __chkstk_darwin(v6);
  int v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for VisualLookupClassifier.SearchState();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v72 - v13;
  uint64_t v15 = type metadata accessor for BundleClassification.ClassificationType(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v72 - v19);
  uint64_t v21 = sub_10000F214((uint64_t *)&unk_1005255A0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for BundleClassification(0);
  __chkstk_darwin(v24);
  __chkstk_darwin(v25);
  uint64_t v31 = (char *)&v72 - v30;
  uint64_t v32 = *(void *)(v95 + 16);
  if (v32 != *(void *)(v29 + 16)) {
    return 0;
  }
  uint64_t v78 = v20;
  uint64_t v81 = v15;
  int v77 = v11;
  long long v82 = v17;
  uint64_t v92 = v6;
  unint64_t v79 = v8;
  uint64_t v80 = v14;
  if (!v32 || v95 == v29) {
    return 1;
  }
  uint64_t v33 = v28;
  uint64_t v87 = v26;
  uint64_t v34 = 0;
  unint64_t v35 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v90 = v29 + v35;
  uint64_t v91 = v95 + v35;
  uint64_t v89 = *(void *)(v27 + 72);
  long long v76 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  uint64_t v73 = (void (**)(char *, uint64_t, uint64_t))(v93 + 32);
  uint64_t v74 = (void (**)(uint64_t, uint64_t))(v93 + 8);
  uint64_t v36 = (uint64_t)v79;
  uint64_t v37 = (uint64_t)v94;
  uint64_t v38 = v33;
  uint64_t v86 = v21;
  uint64_t v75 = v31;
  uint64_t v85 = v32;
  while (2)
  {
    uint64_t v39 = v89 * v34;
    uint64_t v95 = v34 + 1;
    sub_1003F6CC0(v91 + v89 * v34, (uint64_t)v31, type metadata accessor for BundleClassification);
    sub_1003F6CC0(v90 + v39, v38, type metadata accessor for BundleClassification);
    uint64_t v40 = (uint64_t *)&v23[*(int *)(v21 + 48)];
    sub_1003F6CC0((uint64_t)v31, (uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
    sub_1003F6CC0(v38, (uint64_t)v40, type metadata accessor for BundleClassification.ClassificationType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v42 = v92;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v43 = v38;
        uint64_t v47 = (uint64_t)v82;
        sub_1003F6CC0((uint64_t)v23, (uint64_t)v82, type metadata accessor for BundleClassification.ClassificationType);
        uint64_t v48 = *(int *)(sub_10000F214(&qword_1005297C0) + 48);
        uint64_t v94 = *(char **)(v47 + v48);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          swift_bridgeObjectRelease();
          sub_1003F6D28(v47, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
          goto LABEL_49;
        }
        break;
      case 2:
        uint64_t v43 = v38;
        if (swift_getEnumCaseMultiPayload() != 2) {
          goto LABEL_49;
        }
        goto LABEL_37;
      case 3:
        uint64_t v43 = v38;
        if (swift_getEnumCaseMultiPayload() != 3) {
          goto LABEL_49;
        }
        goto LABEL_37;
      case 4:
        uint64_t v43 = v38;
        if (swift_getEnumCaseMultiPayload() != 4) {
          goto LABEL_49;
        }
        goto LABEL_37;
      default:
        uint64_t v43 = v38;
        uint64_t v44 = v78;
        sub_1003F6CC0((uint64_t)v23, (uint64_t)v78, type metadata accessor for BundleClassification.ClassificationType);
        uint64_t v45 = *v44;
        if (swift_getEnumCaseMultiPayload())
        {
          swift_bridgeObjectRelease();
LABEL_49:
          sub_10000FBD8((uint64_t)v23, (uint64_t *)&unk_1005255A0);
          goto LABEL_50;
        }
        char v46 = sub_1003E1FA0(v45, *v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0)
        {
          sub_1003F6D28((uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
LABEL_50:
          uint64_t v38 = v43;
          goto LABEL_51;
        }
LABEL_37:
        sub_1003F6D28((uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
        uint64_t v38 = v43;
        if (*(double *)&v31[*(int *)(v87 + 20)] != *(double *)(v43 + *(int *)(v87 + 20))) {
          goto LABEL_51;
        }
        uint64_t v67 = *(int *)(v87 + 24);
        double v68 = *(double *)&v31[v67];
        double v69 = *(double *)(v43 + v67);
        sub_1003F6D28(v43, type metadata accessor for BundleClassification);
        sub_1003F6D28((uint64_t)v31, type metadata accessor for BundleClassification);
        BOOL result = v68 == v69;
        uint64_t v21 = v86;
        uint64_t v34 = v95;
        if (v68 != v69 || v95 == v85) {
          return result;
        }
        continue;
    }
    break;
  }
  uint64_t v93 = *(uint64_t *)((char *)v40 + v48);
  uint64_t v49 = (uint64_t)v80;
  sub_1003F80E4((uint64_t)v40, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  uint64_t v50 = v36 + *(int *)(v42 + 48);
  sub_1003F6CC0(v47, v36, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  sub_1003F6CC0(v49, v50, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
  uint64_t v51 = *v76;
  unsigned int v52 = (*v76)(v36, 3, v88);
  uint64_t v53 = (uint64_t)v77;
  switch(v52)
  {
    case 1u:
      BOOL v57 = v51(v50, 3, v88) == 1;
      goto LABEL_23;
    case 2u:
      BOOL v57 = v51(v50, 3, v88) == 2;
      goto LABEL_23;
    case 3u:
      BOOL v57 = v51(v50, 3, v88) == 3;
LABEL_23:
      uint64_t v38 = v43;
      if (!v57) {
        goto LABEL_55;
      }
      goto LABEL_25;
    default:
      sub_1003F6CC0(v36, (uint64_t)v77, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v54 = v88;
      if (v51(v50, 3, v88))
      {
        (*v74)(v53, v54);
        uint64_t v38 = v43;
LABEL_55:
        sub_10000FBD8(v36, &qword_100525598);
        goto LABEL_56;
      }
      double v55 = v83;
      (*v73)(v83, v50, v54);
      LODWORD(v72) = static UUID.== infix(_:_:)();
      CGFloat v56 = *v74;
      (*v74)((uint64_t)v55, v54);
      v56(v53, v54);
      uint64_t v36 = (uint64_t)v79;
      uint64_t v38 = v43;
      if ((v72 & 1) == 0)
      {
        sub_1003F6D28((uint64_t)v79, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
LABEL_56:
        sub_1003F6D28((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        sub_1003F6D28(v49, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1003F6D28((uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
        goto LABEL_51;
      }
LABEL_25:
      sub_1003F6D28(v36, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      sub_1003F6D28((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      uint64_t v59 = v93;
      uint64_t v58 = v94;
      uint64_t v60 = *((void *)v94 + 2);
      if (v60 != *(void *)(v93 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
      if (!v60)
      {
        uint64_t v43 = v38;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      if (v94 == (char *)v93)
      {
        uint64_t v43 = v38;
        swift_bridgeObjectRelease_n();
LABEL_35:
        uint64_t v31 = v75;
LABEL_36:
        sub_1003F6D28(v49, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
        goto LABEL_37;
      }
      uint64_t v72 = v38;
      unint64_t v61 = 0;
      unint64_t v62 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v63 = *(void *)(v84 + 72);
      while (1)
      {
        sub_1003F6CC0((uint64_t)&v58[v62], v96, type metadata accessor for VisualIntelligenceLookupResult);
        if (v61 >= *(void *)(v59 + 16))
        {
          __break(1u);
          JUMPOUT(0x1003E1C54);
        }
        CGFloat v64 = v23;
        uint64_t v65 = v96;
        sub_1003F6CC0(v59 + v62, v37, type metadata accessor for VisualIntelligenceLookupResult);
        char v66 = sub_1003F5DBC(v65, v37);
        sub_1003F6D28(v37, type metadata accessor for VisualIntelligenceLookupResult);
        sub_1003F6D28(v65, type metadata accessor for VisualIntelligenceLookupResult);
        if ((v66 & 1) == 0) {
          break;
        }
        ++v61;
        v62 += v63;
        uint64_t v23 = v64;
        uint64_t v59 = v93;
        uint64_t v58 = v94;
        if (v60 == v61)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v43 = v72;
          uint64_t v31 = v75;
          uint64_t v36 = (uint64_t)v79;
          uint64_t v49 = (uint64_t)v80;
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v72;
      uint64_t v23 = v64;
      uint64_t v49 = (uint64_t)v80;
LABEL_46:
      sub_1003F6D28(v49, (uint64_t (*)(void))type metadata accessor for VisualLookupClassifier.SearchState);
      sub_1003F6D28((uint64_t)v23, type metadata accessor for BundleClassification.ClassificationType);
      uint64_t v31 = v75;
LABEL_51:
      sub_1003F6D28(v38, type metadata accessor for BundleClassification);
      sub_1003F6D28((uint64_t)v31, type metadata accessor for BundleClassification);
      return 0;
  }
}

uint64_t sub_1003E1C78(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == v22) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (v5) {
    uint64_t v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_42:
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_19;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)*(id *)(a1 + 32);
LABEL_19:
  uint64_t v5 = (void *)result;
  unint64_t v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_44:
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    uint64_t v13 = v12;
    sub_10000F734(0, &qword_10052E038);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (uint64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v20 = i - 4;
        if (v23)
        {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          if (v2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v20 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          id v21 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_24:
            id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            goto LABEL_25;
          }
        }
        if (v20 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_40;
        }
        id v17 = *(id *)(a2 + 8 * i);
LABEL_25:
        uint64_t v18 = v17;
        char v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003E1EF8(uint64_t a1, uint64_t a2)
{
  return sub_1003E3254(a1, a2, type metadata accessor for Lens_Object, type metadata accessor for Lens_Object, (uint64_t (*)(char *, char *))sub_10035AD40, type metadata accessor for Lens_Object);
}

uint64_t sub_1003E1F4C(uint64_t a1, uint64_t a2)
{
  return sub_1003E3254(a1, a2, type metadata accessor for GeoLookupResultBusiness.Action, type metadata accessor for GeoLookupResultBusiness.Action, (uint64_t (*)(char *, char *))sub_1000FF100, type metadata accessor for GeoLookupResultBusiness.Action);
}

uint64_t sub_1003E1FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v32 = a2 + 32;
  uint64_t v33 = a1 + 32;
  sub_10000F734(0, (unint64_t *)&qword_100518A40);
  uint64_t v3 = 0;
  uint64_t v31 = v2;
  while (1)
  {
    uint64_t v4 = v33 + (v3 << 6);
    uint64_t v5 = *(void **)v4;
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v7 = *(void *)(v4 + 16);
    double v9 = *(double *)(v4 + 32);
    double v8 = *(double *)(v4 + 40);
    uint64_t v10 = *(void *)(v4 + 56);
    uint64_t v34 = *(void *)(v4 + 48);
    uint64_t v35 = v3;
    double v11 = *(double *)(v4 + 24);
    uint64_t v12 = v32 + (v3 << 6);
    uint64_t v13 = *(void **)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(void *)(v12 + 16);
    double v17 = *(double *)(v12 + 24);
    double v16 = *(double *)(v12 + 32);
    double v18 = *(double *)(v12 + 40);
    uint64_t v19 = *(void *)(v12 + 48);
    uint64_t v20 = *(void *)(v12 + 56);
    swift_bridgeObjectRetain();
    id v21 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = v13;
    swift_bridgeObjectRetain();
    if ((static NSObject.== infix(_:_:)() & 1) == 0
      || (v6 != v14 || v7 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      break;
    }
    if (v11 != v17) {
      break;
    }
    if (!v10)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (v20) {
        goto LABEL_49;
      }
      goto LABEL_43;
    }
    if (!v20 || v9 != v16) {
      break;
    }
    if (v34)
    {
      if ((v19 & 1) == 0) {
        break;
      }
    }
    else if ((v19 & 1) != 0 || v8 != v18)
    {
      break;
    }
    uint64_t v23 = *(void *)(v10 + 16);
    if (v23 != *(void *)(v20 + 16)) {
      break;
    }
    if (!v23)
    {
LABEL_42:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_43:
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    if (v10 != v20)
    {
      uint64_t v24 = 0;
      while (1)
      {
        double v25 = *(double *)(v10 + v24 + 32);
        double v26 = *(double *)(v20 + v24 + 32);
        int v27 = *(unsigned __int8 *)(v20 + v24 + 40);
        if (!*(unsigned char *)(v10 + v24 + 40)) {
          break;
        }
        if (*(unsigned char *)(v10 + v24 + 40) == 1)
        {
          if (v27 != 1) {
            goto LABEL_48;
          }
          goto LABEL_25;
        }
        if (v25 == 0.0)
        {
          if (v27 != 2 || *(void *)&v26 != 0) {
            goto LABEL_48;
          }
        }
        else if (v27 != 2 || *(void *)&v26 != 1)
        {
          goto LABEL_48;
        }
LABEL_26:
        v24 += 16;
        if (!--v23) {
          goto LABEL_42;
        }
      }
      if (*(unsigned char *)(v20 + v24 + 40)) {
        break;
      }
LABEL_25:
      if (v25 != v26) {
        break;
      }
      goto LABEL_26;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
LABEL_44:
    uint64_t v3 = v35 + 1;
    swift_bridgeObjectRelease();

    uint64_t result = 1;
    if (v35 + 1 == v31) {
      return result;
    }
  }
LABEL_48:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_49:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t sub_1003E2274(uint64_t a1, uint64_t a2)
{
  return sub_1003E3254(a1, a2, type metadata accessor for VisualIntelligenceLookupResult, type metadata accessor for VisualIntelligenceLookupResult, (uint64_t (*)(char *, char *))sub_1003F5DBC, type metadata accessor for VisualIntelligenceLookupResult);
}

uint64_t sub_1003E22C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 32);
    for (uint64_t i = (unsigned char *)(a2 + 40); ; i += 16)
    {
      uint64_t v6 = *v3;
      v3 += 2;
      uint64_t v5 = v6;
      uint64_t v7 = *((void *)i - 1);
      if (*i == 1)
      {
        switch(v7)
        {
          case 1:
            if (v5 != 1) {
              return 0;
            }
            goto LABEL_6;
          case 2:
            if (v5 != 2) {
              return 0;
            }
            goto LABEL_6;
          case 3:
            if (v5 != 3) {
              return 0;
            }
            goto LABEL_6;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            goto LABEL_6;
          case 5:
            if (v5 != 5) {
              return 0;
            }
            goto LABEL_6;
          default:
            if (v5) {
              return 0;
            }
            goto LABEL_6;
        }
      }
      if (v5 != v7) {
        break;
      }
LABEL_6:
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1003E23A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    for (uint64_t i = 0; ; i += 40)
    {
      uint64_t v6 = (void *)(a1 + i);
      uint64_t v7 = (void *)(a2 + i);
      if (*(float *)(a1 + i + 32) != *(float *)(a2 + i + 32)) {
        break;
      }
      uint64_t v8 = v6[7];
      uint64_t v9 = v6[8];
      uint64_t v10 = v7[7];
      uint64_t v11 = v7[8];
      BOOL v12 = v6[5] == v7[5] && v6[6] == v7[6];
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v13 = v8 == v10 && v9 == v11;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1003E2480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214((uint64_t *)&unk_100524ED0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_100521670);
  __chkstk_darwin(v45);
  BOOL v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v46 = (int *)type metadata accessor for TextDetectorResult.DataDetector(0);
  __chkstk_darwin(v46);
  uint64_t v14 = (void (***)(char *, uint64_t, uint64_t))((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  double v18 = (void (***)(char *, uint64_t, uint64_t))((char *)&v37 - v17);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 == *(void *)(a2 + 16))
  {
    if (!v19 || a1 == a2) {
      return 1;
    }
    uint64_t v38 = v7;
    unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v41 = *(void *)(v16 + 72);
    uint64_t v42 = a2;
    uint64_t v43 = a1;
    uint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v39 = (void (**)(char *, uint64_t))(v5 + 8);
    while (1)
    {
      sub_1003F6CC0(a1 + v20, (uint64_t)v18, type metadata accessor for TextDetectorResult.DataDetector);
      sub_1003F6CC0(a2 + v20, (uint64_t)v14, type metadata accessor for TextDetectorResult.DataDetector);
      if (*v18 != *v14) {
        break;
      }
      uint64_t v21 = v46[5];
      uint64_t v22 = (uint64_t)v14 + v21;
      uint64_t v23 = (uint64_t)&v12[*(int *)(v45 + 48)];
      sub_10000FB74((uint64_t)v18 + v21, (uint64_t)v12, (uint64_t *)&unk_100524ED0);
      sub_10000FB74(v22, v23, (uint64_t *)&unk_100524ED0);
      uint64_t v24 = *v44;
      if ((*v44)(v12, 1, v4) == 1)
      {
        if (v24((char *)v23, 1, v4) != 1) {
          goto LABEL_20;
        }
        sub_10000FBD8((uint64_t)v12, (uint64_t *)&unk_100524ED0);
      }
      else
      {
        sub_10000FB74((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_100524ED0);
        if (v24((char *)v23, 1, v4) == 1)
        {
          (*v39)(v10, v4);
LABEL_20:
          sub_10000FBD8((uint64_t)v12, &qword_100521670);
          break;
        }
        double v25 = v10;
        double v26 = v38;
        (*v37)(v38, v23, v4);
        sub_1003F3144(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
        int v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        int v27 = *v39;
        uint64_t v28 = v26;
        uint64_t v10 = v25;
        (*v39)(v28, v4);
        v27(v25, v4);
        sub_10000FBD8((uint64_t)v12, (uint64_t *)&unk_100524ED0);
        if ((v40 & 1) == 0) {
          break;
        }
      }
      uint64_t v29 = v46[6];
      uint64_t v30 = *(void *)((char *)v18 + v29);
      uint64_t v31 = *(void *)((char *)v18 + v29 + 8);
      uint64_t v32 = (void *)((char *)v14 + v29);
      BOOL v33 = v30 == *v32 && v31 == v32[1];
      if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v34 = v46[7];
      uint64_t v35 = (float64x2_t *)((char *)v18 + v34);
      if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v35, *(float64x2_t *)((char *)v14 + v34)), (int32x4_t)vceqq_f64(v35[1], *(float64x2_t *)((char *)v14 + v34 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v35[2], *(float64x2_t *)((char *)v14 + v34 + 32)), (int32x4_t)vceqq_f64(v35[3], *(float64x2_t *)((char *)v14 + v34 + 48))))), 7uLL))) & 1) == 0)break; {
      sub_1003F6D28((uint64_t)v14, type metadata accessor for TextDetectorResult.DataDetector);
      }
      sub_1003F6D28((uint64_t)v18, type metadata accessor for TextDetectorResult.DataDetector);
      a2 = v42;
      v20 += v41;
      --v19;
      a1 = v43;
      if (!v19) {
        return 1;
      }
    }
    sub_1003F6D28((uint64_t)v14, type metadata accessor for TextDetectorResult.DataDetector);
    sub_1003F6D28((uint64_t)v18, type metadata accessor for TextDetectorResult.DataDetector);
  }
  return 0;
}

uint64_t sub_1003E29C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Lens_Item(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v18 = 0;
    return v18 & 1;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v23 = *(void *)(v8 + 72);
    uint64_t v13 = v11 - 1;
    while (1)
    {
      sub_1003F6CC0(a1 + v12, (uint64_t)v10, type metadata accessor for Lens_Item);
      sub_1003F6CC0(a2 + v12, (uint64_t)v6, type metadata accessor for Lens_Item);
      uint64_t v14 = *(int *)(v4 + 20);
      uint64_t v15 = *(void *)&v10[v14];
      uint64_t v16 = *(void *)&v6[v14];
      if (v15 != v16)
      {
        swift_retain();
        swift_retain();
        char v17 = sub_1003555EC(v15, v16);
        swift_release();
        swift_release();
        if ((v17 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      sub_1003F3144(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_1003F6D28((uint64_t)v6, type metadata accessor for Lens_Item);
      sub_1003F6D28((uint64_t)v10, type metadata accessor for Lens_Item);
      BOOL v20 = v13-- != 0;
      if (v18)
      {
        v12 += v23;
        if (v20) {
          continue;
        }
      }
      return v18 & 1;
    }
    sub_1003F6D28((uint64_t)v6, type metadata accessor for Lens_Item);
    sub_1003F6D28((uint64_t)v10, type metadata accessor for Lens_Item);
    goto LABEL_15;
  }
  char v18 = 1;
  return v18 & 1;
}

uint64_t sub_1003E2C34(uint64_t a1, uint64_t a2)
{
  return sub_1003E3254(a1, a2, type metadata accessor for Lens_RelatedSearch, type metadata accessor for Lens_RelatedSearch, (uint64_t (*)(char *, char *))sub_10035DEDC, type metadata accessor for Lens_RelatedSearch);
}

uint64_t sub_1003E2C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Lens_SearchResult(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v20 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_29:
    char v16 = 0;
    return v16 & 1;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v21 = *(void *)(v8 + 72);
    uint64_t v13 = v11 - 1;
    while (1)
    {
      sub_1003F6CC0(a1 + v12, (uint64_t)v10, type metadata accessor for Lens_SearchResult);
      sub_1003F6CC0(a2 + v12, (uint64_t)v6, type metadata accessor for Lens_SearchResult);
      BOOL v14 = *v10 == *v6 && v10[1] == v6[1];
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v15 = v10[2] == v6[2] && v10[3] == v6[3];
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (v10[4] != v6[4] || v10[5] != v6[5]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        break;
      }
      if ((v10[6] != v6[6] || v10[7] != v6[7]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_1003F3144(&qword_10052AC48, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_1003F6D28((uint64_t)v6, type metadata accessor for Lens_SearchResult);
      sub_1003F6D28((uint64_t)v10, type metadata accessor for Lens_SearchResult);
      BOOL v18 = v13-- != 0;
      if (v16)
      {
        v12 += v21;
        if (v18) {
          continue;
        }
      }
      return v16 & 1;
    }
    sub_1003F6D28((uint64_t)v6, type metadata accessor for Lens_SearchResult);
    sub_1003F6D28((uint64_t)v10, type metadata accessor for Lens_SearchResult);
    goto LABEL_29;
  }
  char v16 = 1;
  return v16 & 1;
}

uint64_t sub_1003E2F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v14 = 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        long long v6 = *(_OWORD *)(v3 + 112);
        v18[6] = *(_OWORD *)(v3 + 96);
        v18[7] = v6;
        uint64_t v19 = *(void *)(v3 + 128);
        long long v7 = *(_OWORD *)(v3 + 48);
        v18[2] = *(_OWORD *)(v3 + 32);
        v18[3] = v7;
        long long v8 = *(_OWORD *)(v3 + 80);
        v18[4] = *(_OWORD *)(v3 + 64);
        v18[5] = v8;
        long long v9 = *(_OWORD *)(v3 + 16);
        v18[0] = *(_OWORD *)v3;
        v18[1] = v9;
        long long v10 = *(_OWORD *)(v4 + 112);
        v20[6] = *(_OWORD *)(v4 + 96);
        v20[7] = v10;
        uint64_t v21 = *(void *)(v4 + 128);
        long long v11 = *(_OWORD *)(v4 + 48);
        v20[2] = *(_OWORD *)(v4 + 32);
        v20[3] = v11;
        long long v12 = *(_OWORD *)(v4 + 80);
        v20[4] = *(_OWORD *)(v4 + 64);
        v20[5] = v12;
        long long v13 = *(_OWORD *)(v4 + 16);
        v20[0] = *(_OWORD *)v4;
        v20[1] = v13;
        sub_1001817B4((uint64_t)v18);
        sub_1001817B4((uint64_t)v20);
        char v14 = sub_1000FF5E0((uint64_t)v18, (uint64_t)v20);
        sub_10017FF68((uint64_t)v20);
        sub_10017FF68((uint64_t)v18);
        BOOL v16 = v5-- != 0;
        if ((v14 & 1) == 0) {
          break;
        }
        v3 += 136;
        v4 += 136;
      }
      while (v16);
    }
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

BOOL sub_1003E3050(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_1003E30BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    while (1)
    {
      uint64_t v6 = v4 + 32 * v3;
      uint64_t v7 = *(void *)(v6 + 24);
      uint64_t v8 = a2 + 32 + 32 * v3;
      uint64_t v9 = *(void *)(v8 + 24);
      if (v7)
      {
        if (!v9 || *(double *)v6 != *(double *)v8) {
          return 0;
        }
        uint64_t v10 = *(void *)(v8 + 16);
        if (*(void *)(v6 + 16))
        {
          if ((v10 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          uint64_t result = 0;
          if ((v10 & 1) != 0 || *(double *)(v6 + 8) != *(double *)(v8 + 8)) {
            return result;
          }
        }
        uint64_t v11 = *(void *)(v7 + 16);
        if (v11 != *(void *)(v9 + 16)) {
          return 0;
        }
        if (v11) {
          BOOL v12 = v7 == v9;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12)
        {
          long long v13 = (double *)(v7 + 40);
          char v14 = (double *)(v9 + 40);
          do
          {
            double v16 = *(v13 - 1);
            double v17 = *(v14 - 1);
            int v18 = *(unsigned __int8 *)v14;
            if (*(unsigned char *)v13)
            {
              if (*(unsigned char *)v13 == 1)
              {
                if (v18 != 1 || v16 != v17) {
                  return 0;
                }
              }
              else if (v16 == 0.0)
              {
                if (v18 != 2 || *(void *)&v17 != 0) {
                  return 0;
                }
              }
              else if (v18 != 2 || *(void *)&v17 != 1)
              {
                return 0;
              }
            }
            else
            {
              if (*(unsigned char *)v14) {
                BOOL v15 = 0;
              }
              else {
                BOOL v15 = v16 == v17;
              }
              if (!v15) {
                return 0;
              }
            }
            v13 += 2;
            v14 += 2;
            --v11;
          }
          while (v11);
        }
      }
      else if (v9)
      {
        return 0;
      }
      ++v3;
      uint64_t result = 1;
      if (v3 == v2) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t sub_1003E3200(uint64_t a1, uint64_t a2)
{
  return sub_1003E3254(a1, a2, type metadata accessor for Lens_Answer, type metadata accessor for Lens_Answer, (uint64_t (*)(char *, char *))sub_1003584F0, type metadata accessor for Lens_Answer);
}

uint64_t sub_1003E3254(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  uint64_t v11 = a3(0) - 8;
  __chkstk_darwin(v11);
  long long v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  double v17 = (char *)&v27 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v28 = a2;
      uint64_t v19 = a5;
      unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v21 = *(void *)(v15 + 72);
      uint64_t v22 = v18 - 1;
      do
      {
        sub_1003F6CC0(a1 + v20, (uint64_t)v17, a4);
        sub_1003F6CC0(v28 + v20, (uint64_t)v13, a4);
        char v23 = v19(v17, v13);
        sub_1003F6D28((uint64_t)v13, a6);
        sub_1003F6D28((uint64_t)v17, a6);
        BOOL v25 = v22-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v20 += v21;
      }
      while (v25);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_1003E33F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualDomain();
  __chkstk_darwin(v4);
  v8.n128_f64[0] = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v24 = 1;
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v13 = v6 + 16;
      uint64_t v32 = v7;
      BOOL v33 = v14;
      uint64_t v15 = (v12 + 32) & ~v12;
      uint64_t v16 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v30 = v16;
      uint64_t v31 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v11 - 1;
      uint64_t v18 = v7;
      do
      {
        uint64_t v19 = a1;
        unint64_t v20 = v10;
        uint64_t v21 = v10;
        uint64_t v22 = v33;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v20, a1 + v15, v4, v8);
        uint64_t v23 = a2;
        v22(v18, a2 + v15, v4);
        uint64_t v10 = v21;
        sub_1003F3144((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        BOOL v25 = *v31;
        (*v31)(v18, v4);
        v25(v21, v4);
        BOOL v27 = v17-- != 0;
        if ((v24 & 1) == 0) {
          break;
        }
        v15 += v30;
        a2 = v23;
        a1 = v19;
      }
      while (v27);
    }
  }
  else
  {
    char v24 = 0;
  }
  return v24 & 1;
}

BOOL sub_1003E3610(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_1003E3684(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (unsigned __int8 *)(a1 + 33);
  uint64_t v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1003E36F8()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_1000EEA28(v0, qword_10052DA58);
  sub_10000F378(v0, (uint64_t)qword_10052DA58);
  return UUID.init()();
}

void sub_1003E3744()
{
  v8.origin.x = 0.0;
  v8.origin.y = 0.0;
  v8.size.double width = 0.0;
  v8.size.double height = 0.0;
  CGFloat MinX = CGRectGetMinX(v8);
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  v9.size.double width = 0.0;
  v9.size.double height = 0.0;
  CGFloat MinY = CGRectGetMinY(v9);
  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.double width = 0.0;
  v10.size.double height = 0.0;
  CGFloat MaxX = CGRectGetMaxX(v10);
  v11.origin.x = 0.0;
  v11.origin.y = 0.0;
  v11.size.double width = 0.0;
  v11.size.double height = 0.0;
  CGFloat v3 = CGRectGetMinY(v11);
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  v12.size.double width = 0.0;
  v12.size.double height = 0.0;
  CGFloat v4 = CGRectGetMinX(v12);
  v13.origin.x = 0.0;
  v13.origin.y = 0.0;
  v13.size.double width = 0.0;
  v13.size.double height = 0.0;
  CGFloat MaxY = CGRectGetMaxY(v13);
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.double width = 0.0;
  v14.size.double height = 0.0;
  CGFloat v6 = CGRectGetMaxX(v14);
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.double width = 0.0;
  v15.size.double height = 0.0;
  CGFloat v7 = CGRectGetMaxY(v15);
  qword_10052DA70 = *(void *)&MinX;
  qword_10052DA78 = *(void *)&MinY;
  qword_10052DA80 = *(void *)&MaxX;
  qword_10052DA88 = *(void *)&v3;
  qword_10052DA90 = *(void *)&v4;
  qword_10052DA98 = *(void *)&MaxY;
  qword_10052DAA0 = *(void *)&v6;
  qword_10052DAA8 = *(void *)&v7;
}

void sub_1003E384C()
{
  qword_10052DAB0 = 0;
}

void sub_1003E3858()
{
  qword_10052DAB8 = 0xFFF0000000000000;
}

unint64_t sub_1003E3868(char a1)
{
  unint64_t result = 0x6E69616D6F64;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
    case 3:
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6D496D6574737973;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0x69616E626D756874;
      break;
    case 8:
      unint64_t result = 0x6C7255626577;
      break;
    case 9:
      unint64_t result = 0x69747265706F7270;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1003E39B8(char a1)
{
  unint64_t result = 0x6E69616D6F64;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
    case 3:
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6D496D6574737973;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0x69616E626D756874;
      break;
    case 8:
      unint64_t result = 0x6C7255626577;
      break;
    case 9:
      unint64_t result = 0x69747265706F7270;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003E3B08(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1003E3868(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1003E3868(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1003E3B94()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1003E3868(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003E3BF8()
{
  sub_1003E3868(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003E3C4C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1003E3868(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1003E3CAC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003F9854(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1003E3CDC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1003E3868(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1003E3D08()
{
  return sub_1003E39B8(*v0);
}

unint64_t sub_1003E3D10@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1003F9854(a1);
  *a2 = result;
  return result;
}

void sub_1003E3D38(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1003E3D44(uint64_t a1)
{
  unint64_t v2 = sub_1003F8234();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E3D80(uint64_t a1)
{
  unint64_t v2 = sub_1003F8234();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E3DBC(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10052E088);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003F8234();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v35) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  LOBYTE(v35) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  long long v35 = v3[2];
  LOBYTE(v34) = 2;
  sub_10000F214(&qword_10051D468);
  sub_1003F8288(&qword_10052E090);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v35 = v3[3];
  LOBYTE(v34) = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v35 = v3[4];
  LOBYTE(v34) = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = 5;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v35) = 6;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v9 = type metadata accessor for VisualIntelligenceLookupResult(0);
  LOBYTE(v35) = 7;
  sub_10000F214(&qword_10051E070);
  sub_1003F82EC(&qword_10052E098, &qword_10051E510);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = 8;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&long long v35 = *(void *)((char *)v3 + *(int *)(v9 + 52));
  LOBYTE(v34) = 9;
  sub_10000F214(&qword_10052E060);
  sub_1003F8380(&qword_10052E0A0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  unint64_t v31 = *(void *)((char *)v3 + *(int *)(v9 + 56));
  if (v31 >> 62) {
    goto LABEL_19;
  }
  uint64_t v30 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v30)
  {
    while (1)
    {
      *(void *)&long long v35 = _swiftEmptyArrayStorage;
      uint64_t v11 = v30;
      uint64_t result = sub_100040EBC(0, v11 & ~(v11 >> 63), 0);
      if (v11 < 0) {
        break;
      }
      CGRect v12 = (void *)v35;
      CGRect v13 = self;
      uint64_t v14 = 0;
      unint64_t v28 = v31 & 0xC000000000000001;
      id v29 = v13;
      uint64_t v15 = v30;
      while (v15 != v14)
      {
        BOOL v33 = v12;
        if (v28) {
          id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v16 = *(id *)(v31 + 8 * v14 + 32);
        }
        uint64_t v17 = v16;
        id v34 = 0;
        id v18 = [v29 archivedDataWithRootObject:v16 requiringSecureCoding:1 error:&v34];
        id v19 = v34;
        if (!v18)
        {
          BOOL v25 = v19;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();

          return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        CGRect v12 = v33;
        *(void *)&long long v35 = v33;
        unint64_t v23 = v33[2];
        unint64_t v22 = v33[3];
        if (v23 >= v22 >> 1)
        {
          sub_100040EBC(v22 > 1, v23 + 1, 1);
          CGRect v12 = (void *)v35;
        }
        ++v14;
        v12[2] = v23 + 1;
        char v24 = &v12[2 * v23];
        v24[4] = v32;
        v24[5] = v21;
        uint64_t v15 = v30;
        if (v30 == v14)
        {
          double v26 = v12;
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      if (!v30) {
        goto LABEL_20;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
    double v26 = _swiftEmptyArrayStorage;
LABEL_21:
    *(void *)&long long v35 = v26;
    LOBYTE(v34) = 10;
    sub_10000F214(&qword_10052E070);
    sub_1003F83E4(&qword_10052E0A8, (void (*)(void))sub_1000A7684);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003E443C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v8 = (char *)v33 - v7;
  uint64_t v9 = sub_10000F214(&qword_10052E040);
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for VisualIntelligenceLookupResult(0);
  __chkstk_darwin(v12);
  uint64_t v39 = a1;
  int v40 = (void *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F3B0(a1, a1[3]);
  sub_1003F8234();
  uint64_t v14 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v39);
  }
  uint64_t v34 = (uint64_t)v5;
  long long v35 = v8;
  uint64_t v38 = (int *)v12;
  LOBYTE(v41) = 0;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  id v16 = v40;
  *int v40 = v15;
  v16[1] = v17;
  LOBYTE(v41) = 1;
  v16[2] = KeyedDecodingContainer.decode(_:forKey:)();
  v16[3] = v18;
  sub_10000F214(&qword_10051D468);
  char v42 = 2;
  sub_1003F8288(&qword_10052E050);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v16 + 2) = v41;
  char v42 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v16 + 3) = v41;
  char v42 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v16 + 4) = v41;
  LOBYTE(v41) = 5;
  v16[10] = KeyedDecodingContainer.decode(_:forKey:)();
  v16[11] = v20;
  LOBYTE(v41) = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  *((_DWORD *)v16 + 24) = v21;
  LOBYTE(v41) = 7;
  sub_1003F82EC(&qword_10052E058, &qword_10051E4A8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_10000FC34((uint64_t)v35, (uint64_t)v16 + v38[11], &qword_10051E070);
  LOBYTE(v41) = 8;
  uint64_t v22 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  void v33[2] = 0;
  sub_10000FC34(v22, (uint64_t)v40 + v38[12], &qword_10051E070);
  sub_10000F214(&qword_10052E060);
  char v42 = 9;
  sub_1003F8380(&qword_10052E068);
  long long v35 = (char *)v9;
  unint64_t v23 = v11;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(uint64_t *)((char *)v40 + v38[13]) = v41;
  sub_10000F214(&qword_10052E070);
  char v42 = 10;
  sub_1003F83E4(&qword_10052E078, (void (*)(void))sub_1000A7534);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v24 = v41;
  BOOL v25 = _swiftEmptyArrayStorage;
  *(void *)&long long v41 = _swiftEmptyArrayStorage;
  v33[1] = v24;
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v34 = sub_10000F734(0, &qword_10052E080);
    sub_10000F734(0, &qword_10052E038);
    unint64_t v28 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v30 = *(v28 - 1);
      unint64_t v29 = *v28;
      sub_100038528(v30, *v28);
      uint64_t v31 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      sub_100038B34(v30, v29);
      if (v31)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v28 += 2;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    BOOL v25 = (void *)v41;
  }
  (*(void (**)(char *, char *))(v37 + 8))(v23, v35);
  swift_bridgeObjectRelease();
  uint64_t v32 = (uint64_t)v40;
  *(uint64_t *)((char *)v40 + v38[14]) = (uint64_t)v25;
  sub_1003F6CC0(v32, v36, type metadata accessor for VisualIntelligenceLookupResult);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v39);
  return sub_1003F6D28(v32, type metadata accessor for VisualIntelligenceLookupResult);
}

uint64_t sub_1003E4DFC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v25 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - v11;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (*(void *)(v1 + 56)) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (*(void *)(v1 + 72)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  if (!*(void *)(v1 + 56)) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 72))
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*(_DWORD *)(v1 + 96) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v13 = *(_DWORD *)(v1 + 96);
  }
  else {
    Swift::UInt32 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  uint64_t v14 = (int *)type metadata accessor for VisualIntelligenceLookupResult(0);
  sub_10000FB74(v1 + v14[11], (uint64_t)v12, &qword_10051E070);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v15(v12, 1, v4) == 1)
  {
    uint64_t v16 = v5;
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v24 = v9;
    uint64_t v18 = v25;
    v17(v25, v12, v4);
    Hasher._combine(_:)(1u);
    sub_1003F3144((unint64_t *)&qword_10051F670, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v16 = v5;
    id v19 = v18;
    uint64_t v9 = v24;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
  }
  sub_10000FB74(v1 + v14[12], (uint64_t)v9, &qword_10051E070);
  if (v15(v9, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v20 = v25;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v9, v4);
    Hasher._combine(_:)(1u);
    sub_1003F3144((unint64_t *)&qword_10051F670, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v4);
  }
  uint64_t v21 = *(void *)(v1 + v14[13]);
  swift_bridgeObjectRetain();
  sub_1003F566C(a1, v21);
  swift_bridgeObjectRelease();
  unint64_t v22 = *(void *)(v2 + v14[14]);
  swift_bridgeObjectRetain();
  sub_10032D8D0(a1, v22);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003E52B0(uint64_t a1, uint64_t a2)
{
  return sub_1003E84B8(a1, a2, (void (*)(unsigned char *))sub_1003E4DFC);
}

Swift::Int sub_1003E52CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003E851C(a1, a2, a3, (void (*)(unsigned char *))sub_1003E4DFC);
}

uint64_t sub_1003E52E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E443C(a1, a2);
}

uint64_t sub_1003E52FC(void *a1)
{
  return sub_1003E3DBC(a1);
}

uint64_t sub_1003E5314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v81 = a4;
  uint64_t v9 = type metadata accessor for ObjectKnowledge.Property();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v87 = v9;
  uint64_t v88 = v10;
  __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10052E1B8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ObjectKnowledge();
  uint64_t v82 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for VisualDomain();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a5 + 80) = a1;
  *(void *)(a5 + 88) = a2;
  *(void *)(a5 + 16) = RegionSearchResult.ResultItem.caption.getter();
  *(void *)(a5 + 24) = v22;
  RegionSearchResult.ResultItem.domain.getter();
  uint64_t v23 = VisualDomain.name.getter();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v26 = v82;
  *(void *)a5 = v23;
  *(void *)(a5 + 8) = v25;
  RegionSearchResult.ResultItem.knowledge.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v15) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000FBD8((uint64_t)v14, &qword_10052E1B8);
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_DWORD *)(a5 + 96) = 1065353216;
    uint64_t v27 = (int *)type metadata accessor for VisualIntelligenceLookupResult(0);
    uint64_t v28 = a5 + v27[11];
    uint64_t v29 = type metadata accessor for URL();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);
    v30(v28, 1, 1, v29);
    v30(a5 + v27[12], 1, 1, v29);
    uint64_t v31 = _swiftEmptyArrayStorage;
    *(void *)(a5 + v27[13]) = sub_10031C538((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v32 = type metadata accessor for RegionSearchResult.ResultItem();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a3, v32);
LABEL_34:
    *(void *)(a5 + v27[14]) = v31;
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v17, v14, v15);
  uint64_t v34 = ObjectKnowledge.shortDescription.getter();
  uint64_t v36 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0) {
    uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
  }
  if (!v36)
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = 0;
    unint64_t v35 = 0;
  }
  *(void *)(a5 + 32) = v34;
  *(void *)(a5 + 40) = v35;
  uint64_t v37 = ObjectKnowledge.detailedDescription.getter();
  uint64_t v39 = HIBYTE(v38) & 0xF;
  if ((v38 & 0x2000000000000000) == 0) {
    uint64_t v39 = v37 & 0xFFFFFFFFFFFFLL;
  }
  if (!v39)
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = 0;
    unint64_t v38 = 0;
  }
  *(void *)(a5 + 64) = v37;
  *(void *)(a5 + 72) = v38;
  uint64_t v40 = type metadata accessor for VisualIntelligenceLookupResult(0);
  ObjectKnowledge.webURL.getter();
  ObjectKnowledge.thumbnailAspectRatio.getter();
  float v42 = v41;
  float v43 = 1.0;
  if (v42 > 0.0) {
    ObjectKnowledge.thumbnailAspectRatio.getter();
  }
  *(float *)(a5 + 96) = v43;
  ObjectKnowledge.thumbnailURL.getter();
  uint64_t v44 = ObjectKnowledge.knowledgeGraphID.getter();
  uint64_t v78 = v15;
  if (v45)
  {
    uint64_t v46 = HIBYTE(v45) & 0xF;
    if ((v45 & 0x2000000000000000) == 0) {
      uint64_t v46 = v44 & 0xFFFFFFFFFFFFLL;
    }
    if (!v46)
    {
      swift_bridgeObjectRelease();
      uint64_t v44 = 0;
      unint64_t v45 = 0;
    }
  }
  long long v76 = (int *)v40;
  uint64_t v79 = a3;
  uint64_t v80 = a5;
  *(void *)(a5 + 48) = v44;
  *(void *)(a5 + 56) = v45;
  uint64_t v47 = (void *)sub_10031C538((uint64_t)_swiftEmptyArrayStorage);
  int v77 = v17;
  uint64_t v48 = ObjectKnowledge.knowledgeProperties.getter();
  uint64_t v49 = *(void *)(v48 + 16);
  uint64_t v75 = v48;
  if (!v49)
  {
LABEL_33:
    uint64_t v74 = type metadata accessor for RegionSearchResult.ResultItem();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v79, v74);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v77, v78);
    uint64_t v27 = v76;
    a5 = v80;
    uint64_t v31 = v81;
    *(void *)(v80 + v76[13]) = v47;
    goto LABEL_34;
  }
  uint64_t v50 = v87;
  uint64_t v85 = *(void (**)(char *, unint64_t, uint64_t))(v88 + 16);
  unint64_t v51 = v48 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
  v88 += 16;
  uint64_t v83 = *(void *)(v88 + 56);
  uint64_t v84 = (void (**)(char *, uint64_t))(v88 - 8);
  unsigned int v52 = v86;
  while (1)
  {
    uint64_t v89 = v49;
    v85(v52, v51, v50);
    uint64_t v54 = ObjectKnowledge.Property.name.getter();
    uint64_t v56 = v55;
    uint64_t v57 = ObjectKnowledge.Property.value.getter();
    uint64_t v59 = v58;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v90 = v47;
    unint64_t v62 = sub_10032AC58(v54, v56);
    uint64_t v63 = v47[2];
    BOOL v64 = (v61 & 1) == 0;
    uint64_t v65 = v63 + v64;
    if (__OFADD__(v63, v64)) {
      break;
    }
    char v66 = v61;
    if (v47[3] >= v65)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v47 = v90;
        if (v61) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_1001F8E6C();
        uint64_t v47 = v90;
        if (v66) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      sub_1001F3B74(v65, isUniquelyReferenced_nonNull_native);
      unint64_t v67 = sub_10032AC58(v54, v56);
      if ((v66 & 1) != (v68 & 1)) {
        goto LABEL_37;
      }
      unint64_t v62 = v67;
      uint64_t v47 = v90;
      if (v66)
      {
LABEL_20:
        uint64_t v53 = (uint64_t *)(v47[7] + 16 * v62);
        swift_bridgeObjectRelease();
        uint64_t *v53 = v57;
        v53[1] = v59;
        goto LABEL_21;
      }
    }
    v47[(v62 >> 6) + 8] |= 1 << v62;
    double v69 = (uint64_t *)(v47[6] + 16 * v62);
    *double v69 = v54;
    v69[1] = v56;
    uint64_t v70 = (uint64_t *)(v47[7] + 16 * v62);
    uint64_t *v70 = v57;
    v70[1] = v59;
    uint64_t v71 = v47[2];
    BOOL v72 = __OFADD__(v71, 1);
    uint64_t v73 = v71 + 1;
    if (v72) {
      goto LABEL_36;
    }
    v47[2] = v73;
    swift_bridgeObjectRetain();
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned int v52 = v86;
    uint64_t v50 = v87;
    (*v84)(v86, v87);
    v51 += v83;
    uint64_t v49 = v89 - 1;
    if (v89 == 1) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1003E59F4()
{
  return Hasher._finalize()();
}

uint64_t sub_1003E5A40()
{
  return String.hash(into:)();
}

Swift::Int sub_1003E5A50()
{
  return Hasher._finalize()();
}

uint64_t sub_1003E5A98@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E60F8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1003E5AEC(void *a1@<X8>)
{
  *a1 = 1701736302;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1003E5B00()
{
  return 1701736302;
}

uint64_t sub_1003E5B10@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E6130, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1003E5B68(uint64_t a1)
{
  unint64_t v2 = sub_1003FA090();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E5BA4(uint64_t a1)
{
  unint64_t v2 = sub_1003FA090();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E5BE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    return String.hash(into:)();
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    unint64_t v9 = a2 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v10 = *(void *)(v39 + 72);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      swift_retain();
      char v12 = a3(v9);
      swift_release();
      if (v12) {
        break;
      }
      ++v11;
      v9 += v10;
      if (v8 == v11)
      {
        uint64_t v11 = v8;
        break;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v11 = 0;
  }
  uint64_t v36 = a2;
  uint64_t v14 = sub_1003F5834(v11, v8, a2, a3);
  uint64_t v15 = _swiftEmptyArrayStorage;
  if (!v14)
  {
LABEL_36:
    Hasher._combine(_:)(v15[2]);
    uint64_t v32 = v15[2];
    if (v32)
    {
      BOOL v33 = v15 + 4;
      do
      {
        Swift::UInt v34 = *v33++;
        Hasher._combine(_:)(v34);
        --v32;
      }
      while (v32);
    }
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = v14;
  uint64_t v35 = a1;
  float v42 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100040730(0, v14 & ~(v14 >> 63), 0);
  uint64_t v37 = v16;
  uint64_t v17 = 0;
  if (v8)
  {
    uint64_t v18 = v36;
    uint64_t v19 = v36 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v20 = *(void *)(v39 + 72);
    while (1)
    {
      swift_retain();
      char v21 = a3(v19);
      uint64_t result = swift_release();
      if (v21) {
        break;
      }
      ++v17;
      v19 += v20;
      if (v8 == v17)
      {
        uint64_t v17 = v8;
        uint64_t v16 = v37;
        if ((v37 & 0x8000000000000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_41;
      }
    }
    uint64_t v16 = v37;
    if ((v37 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v18 = v36;
    if ((v16 & 0x8000000000000000) == 0)
    {
LABEL_19:
      uint64_t v22 = 0;
      unint64_t v40 = v18 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
      while (v22 != v16)
      {
        if (v17 < 0) {
          goto LABEL_45;
        }
        if (v17 >= v8) {
          goto LABEL_46;
        }
        uint64_t v23 = v38;
        uint64_t v24 = *(void *)(v39 + 72);
        sub_1003F6CC0(v40 + v24 * v17, v38, type metadata accessor for ParseDetectorResult);
        Hasher.init(_seed:)();
        sub_1003E7010(v41);
        Swift::Int v25 = Hasher._finalize()();
        sub_1003F6D28(v23, type metadata accessor for ParseDetectorResult);
        uint64_t v15 = v42;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100040730(0, v15[2] + 1, 1);
          uint64_t v15 = v42;
        }
        unint64_t v27 = v15[2];
        unint64_t v26 = v15[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t result = sub_100040730(v26 > 1, v27 + 1, 1);
          uint64_t v15 = v42;
        }
        v15[2] = v27 + 1;
        v15[v27 + 4] = v25;
        if (v17 == v8) {
          goto LABEL_47;
        }
        uint64_t v28 = v17 + 1;
        uint64_t v17 = v8;
        if (v28 != v8)
        {
          uint64_t v29 = v40 + v24 * v28;
          uint64_t v17 = v28;
          while (v17 < (unint64_t)v8)
          {
            swift_retain();
            char v30 = a3(v29);
            uint64_t result = swift_release();
            if (v30) {
              goto LABEL_20;
            }
            uint64_t v31 = v17 + 1;
            if (__OFADD__(v17, 1)) {
              goto LABEL_43;
            }
            ++v17;
            v29 += v24;
            if (v31 == v8)
            {
              uint64_t v17 = v8;
              goto LABEL_20;
            }
          }
          goto LABEL_42;
        }
LABEL_20:
        ++v22;
        uint64_t v16 = v37;
        if (v22 == v37) {
          goto LABEL_36;
        }
      }
      goto LABEL_44;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1003E603C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v6 = sub_10000F214(&qword_10052E258);
  uint64_t v19 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052E260);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003FA090();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (a2)
  {
    uint64_t v13 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v15 = v14;
    sub_10000F214(&qword_10052E268);
    uint64_t v16 = v20;
    *uint64_t v15 = a2;
    v15[1] = v16;
    v15[2] = v21;
    v15[3] = &type metadata for ParseDetectorResult.SearchableDetectionsContainer;
    swift_bridgeObjectRetain();
    swift_retain();
    KeyedEncodingContainer.codingPath.getter();
    EncodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, enum case for EncodingError.invalidValue(_:), v13);
    swift_willThrow();
  }
  else
  {
    sub_1003FA0E4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1003E6318(uint64_t a1)
{
  unint64_t v2 = sub_1003FA0E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E6354(uint64_t a1)
{
  unint64_t v2 = sub_1003FA0E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1003E6390(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (!(*a1 | *a2)) {
    return 1;
  }
  Swift::Int v5 = (uint64_t (*)(uint64_t))a2[1];
  uint64_t v6 = (uint64_t (*)(uint64_t))a1[1];
  Hasher.init(_seed:)();
  sub_1003E5BE0((uint64_t)v8, v2, v6);
  Swift::Int v7 = Hasher._finalize()();
  Hasher.init(_seed:)();
  sub_1003E5BE0((uint64_t)v8, v3, v5);
  return v7 == Hasher._finalize()();
}

Swift::Int sub_1003E6440()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  Hasher.init(_seed:)();
  sub_1003E5BE0((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1003E649C(uint64_t a1)
{
  return sub_1003E5BE0(a1, *(void *)v1, *(uint64_t (**)(uint64_t))(v1 + 8));
}

Swift::Int sub_1003E64A8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  Hasher.init(_seed:)();
  sub_1003E5BE0((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1003E6500@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003F98A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1003E6530(void *a1)
{
  return sub_1003E603C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1003E6550()
{
  uint64_t v1 = type metadata accessor for VisualDomain();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + *(int *)(type metadata accessor for ParseDetectorResult(0) + 28));
  if (!*(void *)(v5 + 16)) {
    return 0x6E776F6E6B6E75;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)), v1);
  uint64_t v6 = VisualDomain.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

double sub_1003E6684@<D0>(uint64_t a1@<X8>)
{
  if (qword_1005180F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = sub_10000F378(v2, (uint64_t)qword_10052DA58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
  if (qword_100518100 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10052DA80;
  uint64_t v20 = qword_10052DA78;
  uint64_t v21 = qword_10052DA70;
  uint64_t v5 = qword_10052DA88;
  uint64_t v6 = qword_10052DA90;
  uint64_t v7 = qword_10052DA98;
  uint64_t v8 = qword_10052DAA0;
  uint64_t v9 = qword_10052DAA8;
  if (qword_100518108 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_10052DAB0;
  if (qword_100518110 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_10052DAB8;
  char v12 = (int *)type metadata accessor for ParseDetectorResult(0);
  uint64_t v13 = a1 + v12[13];
  uint64_t v14 = type metadata accessor for VisualUnderstanding.ImageRegion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_DWORD *)(a1 + v12[5]) = -1082130432;
  uint64_t v15 = (uint64_t *)(a1 + v12[6]);
  *uint64_t v15 = v21;
  v15[1] = v20;
  v15[2] = v4;
  v15[3] = v5;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  v15[7] = v9;
  *(void *)(a1 + v12[7]) = _swiftEmptyArrayStorage;
  *(void *)(a1 + v12[8]) = v10;
  *(void *)(a1 + v12[9]) = v11;
  *(unsigned char *)(a1 + v12[10]) = 0;
  uint64_t v16 = a1 + v12[11];
  strcpy((char *)v16, "questionmark");
  *(unsigned char *)(v16 + 13) = 0;
  *(_WORD *)(v16 + 14) = -5120;
  uint64_t v17 = (void *)(a1 + v12[12]);
  void *v17 = 0;
  v17[1] = 0xE000000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + v12[14]) = xmmword_100440410;
  uint64_t v19 = (void *)(a1 + v12[15]);
  void *v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  return result;
}

uint64_t sub_1003E6910@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, v2, v6);
  uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
  uint64_t v8 = v7[6];
  int v9 = *(_DWORD *)(v2 + v7[5]);
  long long v10 = *(_OWORD *)(v2 + v8 + 48);
  v37[6] = *(_OWORD *)(v2 + v8 + 32);
  v37[7] = v10;
  long long v11 = *(_OWORD *)(v2 + v8 + 16);
  v37[4] = *(_OWORD *)(v2 + v8);
  v37[5] = v11;
  sub_1003FF210((uint64_t)v37, a2, *(double *)(v2 + v7[8]));
  uint64_t v12 = *(void *)(v2 + v7[7]);
  uint64_t v13 = *(void *)(v3 + v7[9]);
  char v36 = *(unsigned char *)(v3 + v7[10]);
  uint64_t v14 = (uint64_t *)(v3 + v7[11]);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = (uint64_t *)(v3 + v7[12]);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  sub_10000FB74(v3 + v7[13], a1 + v7[13], &qword_100524BD0);
  uint64_t v20 = (uint64_t *)(v3 + v7[14]);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  *(_DWORD *)(a1 + v7[5]) = v9;
  uint64_t v23 = (_OWORD *)(a1 + v7[6]);
  long long v24 = v37[3];
  v23[2] = v37[2];
  v23[3] = v24;
  long long v25 = v37[1];
  *uint64_t v23 = v37[0];
  v23[1] = v25;
  *(void *)(a1 + v7[7]) = v12;
  *(double *)(a1 + v7[8]) = a2;
  *(void *)(a1 + v7[9]) = v13;
  *(unsigned char *)(a1 + v7[10]) = v36;
  unint64_t v26 = (void *)(a1 + v7[11]);
  void *v26 = v16;
  v26[1] = v15;
  unint64_t v27 = (void *)(a1 + v7[12]);
  void *v27 = v19;
  v27[1] = v18;
  uint64_t v28 = (uint64_t *)(a1 + v7[14]);
  uint64_t *v28 = v21;
  v28[1] = v22;
  uint64_t v29 = v7[15];
  char v30 = (uint64_t *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(v3 + v29);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  uint64_t v34 = v31[2];
  uint64_t *v30 = *v31;
  v30[1] = v33;
  v30[2] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000A7588(v21, v22);

  return sub_1003F6C80(v32);
}

uint64_t sub_1003E6B00()
{
  sub_10000F214(&qword_1005297E0);
  type metadata accessor for VisualDomain();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100440F30;
  static VisualDomain.storefront.getter();
  static VisualDomain.book.getter();
  uint64_t v1 = sub_100330E90(v0);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  qword_10055E640 = v1;
  return result;
}

uint64_t sub_1003E6C00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for VisualDomain();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v8 = *(void *)(v1 + *(int *)(v7 + 28));
  if (!*(void *)(v8 + 16)) {
    goto LABEL_13;
  }
  uint64_t v9 = v7;
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
  if (qword_100518118 != -1) {
    swift_once();
  }
  if ((sub_1003DF4B0((uint64_t)v6, qword_10055E640) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_13:
    uint64_t v36 = sub_10000F214(&qword_1005297A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a1, 1, 1, v36);
  }
  uint64_t v10 = sub_10000F214(&qword_1005297A0);
  uint64_t v11 = *(int *)(v10 + 48);
  if (qword_100517FB0 != -1) {
    swift_once();
  }
  uint64_t v12 = (double *)(a1 + v11);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = sub_10000F378(v13, (uint64_t)qword_100529170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, v14, v13);
  if (qword_100517FB8 != -1) {
    swift_once();
  }
  uint64_t v15 = *((void *)&xmmword_100529188 + 1);
  uint64_t v38 = xmmword_100529188;
  uint64_t v16 = qword_100529198;
  uint64_t v17 = qword_1005291A0;
  long long v18 = xmmword_1005291A8;
  uint64_t v19 = qword_1005291B8;
  uint64_t v20 = qword_1005291C0;
  if (qword_100517FC8 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1005291D0;
  unint64_t v22 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)(a1 + v22[5]) = -1082130432;
  uint64_t v23 = a1 + v22[6];
  *(void *)uint64_t v23 = v38;
  *(void *)(v23 + 8) = v15;
  *(void *)(v23 + 16) = v16;
  *(void *)(v23 + 24) = v17;
  *(_OWORD *)(v23 + 32) = v18;
  *(void *)(v23 + 48) = v19;
  *(void *)(v23 + 56) = v20;
  long long v24 = (void *)(a1 + v22[7]);
  *long long v24 = 0x7974706D65;
  v24[1] = 0xE500000000000000;
  *(void *)(a1 + v22[8]) = 0;
  *(void *)(a1 + v22[9]) = v21;
  *(void *)(a1 + v22[10]) = &_swiftEmptySetSingleton;
  *(void *)(a1 + v22[11]) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + v22[14]) = 0;
  *(void *)(a1 + v22[12]) = _swiftEmptyArrayStorage;
  *(void *)(a1 + v22[13]) = 0;
  type metadata accessor for CVDetection();
  swift_storeEnumTagMultiPayload();
  long long v25 = (long long *)(v1 + *(int *)(v9 + 24));
  long long v26 = v25[1];
  long long v39 = *v25;
  long long v40 = v26;
  long long v27 = v25[3];
  long long v41 = v25[2];
  long long v42 = v27;
  double v28 = sub_1003FD844();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *uint64_t v12 = v28;
  *((void *)v12 + 1) = v30;
  *((void *)v12 + 2) = v32;
  *((void *)v12 + 3) = v34;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 0, 1, v10);
}

uint64_t sub_1003E7010(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  unint64_t v45 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UUID();
  sub_1003F3144((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v46 = v1;
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v7 = (int *)type metadata accessor for ParseDetectorResult(0);
  if ((*(_DWORD *)(v1 + v7[5]) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = *(_DWORD *)(v1 + v7[5]);
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  uint64_t v9 = (Swift::UInt64 *)(v1 + v7[6]);
  Swift::UInt64 v10 = v9[1];
  Swift::UInt64 v11 = v9[2];
  Swift::UInt64 v12 = v9[3];
  Swift::UInt64 v13 = v9[4];
  Swift::UInt64 v14 = v9[5];
  Swift::UInt64 v16 = v9[6];
  Swift::UInt64 v15 = v9[7];
  if ((*v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = *v9;
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = v10;
  }
  else {
    Swift::UInt64 v18 = 0;
  }
  Hasher._combine(_:)(v18);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = v11;
  }
  else {
    Swift::UInt64 v19 = 0;
  }
  Hasher._combine(_:)(v19);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = v12;
  }
  else {
    Swift::UInt64 v20 = 0;
  }
  Hasher._combine(_:)(v20);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v21 = v13;
  }
  else {
    Swift::UInt64 v21 = 0;
  }
  Hasher._combine(_:)(v21);
  if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v22 = v14;
  }
  else {
    Swift::UInt64 v22 = 0;
  }
  Hasher._combine(_:)(v22);
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v23 = v16;
  }
  else {
    Swift::UInt64 v23 = 0;
  }
  Hasher._combine(_:)(v23);
  if ((v15 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v24 = v15;
  }
  else {
    Swift::UInt64 v24 = 0;
  }
  uint64_t v25 = v46;
  Hasher._combine(_:)(v24);
  uint64_t v26 = *(void *)(v25 + v7[7]);
  Swift::UInt v27 = *(void *)(v26 + 16);
  Hasher._combine(_:)(v27);
  if (v27)
  {
    uint64_t v28 = *(void *)(type metadata accessor for VisualDomain() - 8);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v30 = *(void *)(v28 + 72);
    sub_1003F3144((unint64_t *)&unk_100525040, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
    swift_bridgeObjectRetain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v29 += v30;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  if ((*(void *)(v25 + v7[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v31 = *(void *)(v25 + v7[8]);
  }
  else {
    Swift::UInt64 v31 = 0;
  }
  Hasher._combine(_:)(v31);
  if ((*(void *)(v25 + v7[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v32 = *(void *)(v25 + v7[9]);
  }
  else {
    Swift::UInt64 v32 = 0;
  }
  Hasher._combine(_:)(v32);
  Hasher._combine(_:)(*(unsigned char *)(v25 + v7[10]));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v33 = v47;
  sub_10000FB74(v25 + v7[13], v47, &qword_100524BD0);
  uint64_t v35 = v48;
  uint64_t v34 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v33, 1, v49) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v45, v33, v34);
    Hasher._combine(_:)(1u);
    sub_1003F3144(&qword_10052E008, (void (*)(uint64_t))&type metadata accessor for VisualUnderstanding.ImageRegion);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  }
  uint64_t v37 = (uint64_t *)(v25 + v7[14]);
  unint64_t v38 = v37[1];
  if (v38 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v39 = *v37;
    Hasher._combine(_:)(1u);
    sub_100038528(v39, v38);
    Data.hash(into:)();
    sub_100094760(v39, v38);
  }
  long long v40 = (uint64_t *)(v25 + v7[15]);
  uint64_t v41 = *v40;
  long long v42 = (uint64_t (*)(uint64_t))v40[1];
  sub_1003F6C80(*v40);
  sub_1003E5BE0(a1, v41, v42);
  return sub_100043938(v41);
}

unint64_t sub_1003E750C(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656469666E6F63;
      break;
    case 2:
      unint64_t result = 0x7372656E726F63;
      break;
    case 3:
      unint64_t result = 0x736E69616D6F64;
      break;
    case 4:
      unint64_t result = 0x6E6F697461746F72;
      break;
    case 5:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 6:
      unint64_t result = 0x6261686372616573;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
    case 11:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0x6765526567616D69;
      break;
    case 10:
      unint64_t result = 0x64616F6C796170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003E7698(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10052E0E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt32 v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003F8454();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  type metadata accessor for UUID();
  sub_1003F3144(&qword_10051A048, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ParseDetectorResult(0);
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    Swift::UInt64 v10 = (long long *)(v3 + v9[6]);
    long long v11 = v10[1];
    long long v18 = *v10;
    long long v19 = v11;
    long long v12 = v10[3];
    long long v20 = v10[2];
    long long v21 = v12;
    char v17 = 2;
    sub_100167ACC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)(v3 + v9[7]);
    char v17 = 3;
    sub_10000F214(&qword_10052E0C0);
    sub_1003F84A8(&qword_10052E0F0, &qword_10052E0F8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)(v3 + v9[8]);
    char v17 = 4;
    sub_100107C48();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 9;
    type metadata accessor for VisualUnderstanding.ImageRegion();
    sub_1003F3144(&qword_10052E100, (void (*)(uint64_t))&type metadata accessor for VisualUnderstanding.ImageRegion);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v18 = *(_OWORD *)(v3 + v9[14]);
    char v17 = 10;
    sub_1000A7684();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    Swift::UInt64 v13 = (long long *)(v3 + v9[15]);
    uint64_t v14 = *((void *)v13 + 2);
    long long v18 = *v13;
    *(void *)&long long v19 = v14;
    char v17 = 11;
    sub_1003F8590();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003E7B30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v4 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v43 = sub_10000F214(&qword_10052E0B0);
  uint64_t v10 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  long long v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v13);
  Swift::UInt64 v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v42 = v16;
  uint64_t v17 = v16[15];
  unint64_t v45 = a1;
  uint64_t v46 = v15;
  long long v18 = (uint64_t *)&v15[v17];
  uint64_t *v18 = 0;
  v18[1] = 0;
  uint64_t v44 = v18;
  v18[2] = 0;
  sub_10000F3B0(a1, a1[3]);
  sub_1003F8454();
  long long v40 = v12;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v45);
    return sub_100043938(*v44);
  }
  else
  {
    unint64_t v38 = v6;
    uint64_t v19 = v10;
    LOBYTE(v47) = 0;
    sub_1003F3144(&qword_10051A028, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v20 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v46, v9, v7);
    LOBYTE(v47) = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    long long v21 = v42;
    *(_DWORD *)(v20 + v42[5]) = v22;
    char v51 = 2;
    sub_100167A78();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    Swift::UInt64 v23 = (_OWORD *)(v20 + v21[6]);
    long long v24 = v48;
    *Swift::UInt64 v23 = v47;
    v23[1] = v24;
    long long v25 = v50;
    v23[2] = v49;
    v23[3] = v25;
    sub_10000F214(&qword_10052E0C0);
    char v51 = 3;
    sub_1003F84A8(&qword_10052E0C8, &qword_10052E0D0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v20 + v21[7]) = v47;
    char v51 = 4;
    sub_100107BF4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v20 + v21[8]) = v47;
    LOBYTE(v47) = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v20 + v21[9]) = v26;
    LOBYTE(v47) = 6;
    *(unsigned char *)(v20 + v21[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v47) = 7;
    uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v28 = (uint64_t *)(v20 + v21[11]);
    uint64_t *v28 = v27;
    v28[1] = v29;
    LOBYTE(v47) = 8;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
    Swift::UInt64 v31 = (uint64_t *)(v20 + v21[12]);
    *Swift::UInt64 v31 = v30;
    v31[1] = v32;
    type metadata accessor for VisualUnderstanding.ImageRegion();
    LOBYTE(v47) = 9;
    sub_1003F3144(&qword_10052E0D8, (void (*)(uint64_t))&type metadata accessor for VisualUnderstanding.ImageRegion);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10000FC34((uint64_t)v38, (uint64_t)&v46[v42[13]], &qword_100524BD0);
    char v51 = 10;
    sub_1000A7534();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v46[v42[14]] = v47;
    char v51 = 11;
    sub_1003F853C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, void))(v19 + 8))(v40, v43);
    long long v43 = v47;
    uint64_t v33 = v48;
    uint64_t v34 = v44;
    sub_100043938(*v44);
    *(_OWORD *)uint64_t v34 = v43;
    v34[2] = v33;
    uint64_t v35 = (uint64_t)v46;
    sub_1003F6CC0((uint64_t)v46, v39, type metadata accessor for ParseDetectorResult);
    _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v45);
    return sub_1003F6D28(v35, type metadata accessor for ParseDetectorResult);
  }
}

unint64_t sub_1003E83C4()
{
  return sub_1003E750C(*v0);
}

uint64_t sub_1003E83CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003F9B94(a1, a2);
  *a3 = result;
  return result;
}

void sub_1003E83F4(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1003E8400(uint64_t a1)
{
  unint64_t v2 = sub_1003F8454();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E843C(uint64_t a1)
{
  unint64_t v2 = sub_1003F8454();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E8480()
{
  return 0x100000001;
}

Swift::Int sub_1003E84A0(uint64_t a1, uint64_t a2)
{
  return sub_1003E84B8(a1, a2, (void (*)(unsigned char *))sub_1003E7010);
}

Swift::Int sub_1003E84B8(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1003E8504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003E851C(a1, a2, a3, (void (*)(unsigned char *))sub_1003E7010);
}

Swift::Int sub_1003E851C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_1003E8560@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E7B30(a1, a2);
}

uint64_t sub_1003E8578(void *a1)
{
  return sub_1003E7698(a1);
}

unint64_t sub_1003E8590()
{
  uint64_t v0 = *(void *)(VisualUnderstanding.ImageRegion.Embedding.features.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(VisualUnderstanding.ImageRegion.Embedding.features.getter() + 16);
  swift_bridgeObjectRelease();
  if (v0 == v1)
  {
    float __C = 0.0;
    uint64_t v3 = VisualUnderstanding.ImageRegion.Embedding.features.getter();
    uint64_t v4 = VisualUnderstanding.ImageRegion.Embedding.features.getter();
    vDSP_Length v5 = *(void *)(VisualUnderstanding.ImageRegion.Embedding.features.getter() + 16);
    swift_bridgeObjectRelease();
    vDSP_dotpr((const float *)(v3 + 32), 1, (const float *)(v4 + 32), 1, &__C, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = COERCE_UNSIGNED_INT((float)(__C + 1.0) * 0.5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2 | ((unint64_t)(v0 != v1) << 32);
}

uint64_t sub_1003E86A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for ParseDetectorResult(0) + 40));
}

uint64_t sub_1003E86D8()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  id v4 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithCoordinate:isa 37.444704 -122.171103 0.0 1.0 1.0];

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_10055E648 = (uint64_t)v6;
  return result;
}

uint64_t sub_1003E87F8()
{
  type metadata accessor for VisualIntelligenceSearchService(0);
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_1003E8838();
  qword_10055E650 = v0;
  return result;
}

uint64_t sub_1003E8838()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10052E018);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052E020);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for VisualIntelligenceService.Options();
  __chkstk_darwin(v14 - 8);
  swift_defaultActor_initialize();
  uint64_t v15 = OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_logger;
  if (qword_100517E30 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_10000F378(v16, (uint64_t)qword_10055E1A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v1 + v15, v17, v16);
  uint64_t v18 = OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_searchService;
  type metadata accessor for VisualIntelligenceService();
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
  uint64_t v20 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v10, 1, 1, v20);
  uint64_t v21 = type metadata accessor for MLEngineType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
  VisualIntelligenceService.Options.init(customizedEndpoint:networkTimeoutInterval:debugParameters:mlEngineType:)();
  *(void *)(v1 + v18) = VisualIntelligenceService.__allocating_init(serviceOptions:)();
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_lastQueryDispatchTime) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_inflightSearches) = &_swiftEmptyDictionarySingleton;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_currentResults) = &_swiftEmptyDictionarySingleton;
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
  Swift::UInt64 v23 = (void *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = v1;
  swift_retain();
  sub_100064D5C((uint64_t)v4, (uint64_t)&unk_10052E030, (uint64_t)v23);
  swift_release();
  return v1;
}

uint64_t sub_1003E8C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1003E8C44, a4, 0);
}

uint64_t sub_1003E8C44()
{
  VisualIntelligenceService.warmupSearch()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003E8CB0(uint64_t a1, double a2)
{
  *(void *)(v3 + 48) = v2;
  *(double *)(v3 + 40) = a2;
  *(void *)(v3 + 32) = a1;
  uint64_t v4 = type metadata accessor for VisualUnderstanding.ImageRegion();
  *(void *)(v3 + 56) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 72) = *(void *)(v5 + 64);
  *(void *)(v3 + 80) = swift_task_alloc();
  sub_10000F214(&qword_10051A8C0);
  *(void *)(v3 + 88) = swift_task_alloc();
  sub_10000F214(&qword_100524BD0);
  *(void *)(v3 + 96) = swift_task_alloc();
  uint64_t Context = type metadata accessor for VisualQueryContext();
  *(void *)(v3 + 104) = Context;
  *(void *)(v3 + 112) = *(void *)(Context - 8);
  *(void *)(v3 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_1003E8E3C, v2, 0);
}

uint64_t sub_1003E8E3C()
{
  *(void *)(v0 + 128) = type metadata accessor for MainActor();
  *(void *)(v0 + 136) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003E8ED4, v2, v1);
}

uint64_t sub_1003E8ED4()
{
  swift_release();
  if (qword_100517D48 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 48);
  return _swift_task_switch(sub_1003E8F6C, v1, 0);
}

uint64_t sub_1003E8F6C()
{
  *(void *)(v0 + 144) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003E8FF8, v2, v1);
}

uint64_t sub_1003E8FF8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  *(void *)(v0 + 152) = qword_10055E060;
  return _swift_task_switch(sub_1003E9070, v1, 0);
}

uint64_t sub_1003E9070()
{
  *(void *)(v0 + 160) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003E90FC, v2, v1);
}

uint64_t sub_1003E90FC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[6];
  swift_release();
  swift_getKeyPath();
  v0[2] = v1;
  sub_1003F3144(&qword_10051A8B8, (void (*)(uint64_t))type metadata accessor for LocationsHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC6Tamale16LocationsHandler__lastLocation);
  v0[21] = v3;
  id v4 = v3;
  return _swift_task_switch(sub_1003E9200, v2, 0);
}

uint64_t sub_1003E9200()
{
  id v1 = (id)v0[21];
  if (!v1)
  {
    if (qword_100518120 != -1) {
      swift_once();
    }
    id v1 = (id)qword_10055E648;
  }
  v0[22] = v1;
  id v2 = v1;
  VisualQueryContext.init(applicationIdentifier:queryID:location:)();
  id v3 = v2;
  uint64_t v4 = VisualUnderstanding.imageRegions.getter();
  unint64_t v38 = v3;
  if (*(void *)(v4 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[8] + 16))(v0[12], v4 + ((*(unsigned __int8 *)(v0[8] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[8] + 80)), v0[7]);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = v0[12];
  uint64_t v8 = v0[7];
  uint64_t v7 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, v5, 1, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v8);
  if (v9 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = v0[15];
    uint64_t v18 = v0[11];
    uint64_t v17 = v0[12];
    uint64_t v19 = v0[9];
    uint64_t v20 = v0[10];
    uint64_t v22 = v0[7];
    uint64_t v21 = v0[8];
    uint64_t v34 = v17;
    uint64_t v35 = v0[6];
    uint64_t v23 = v0[5];
    uint64_t v36 = v0[4];
    uint64_t v33 = type metadata accessor for DetectionLog();
    uint64_t v24 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v18, 1, 1, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v17, v22);
    unint64_t v25 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    unint64_t v26 = (v19 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = (char *)swift_allocObject();
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 4) = v1;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(&v27[v25], v20, v22);
    *(void *)&v27[v26] = v23;
    *(void *)&v27[(v26 + 15) & 0xFFFFFFFFFFFFFFF8] = v33;
    id v28 = v38;
    sub_100064D5C(v18, (uint64_t)&unk_10052E198, (uint64_t)v27);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v34, v22);
    uint64_t v29 = sub_1003F3144(&qword_10052E188, (void (*)(uint64_t))type metadata accessor for VisualIntelligenceSearchService);
    uint64_t v30 = (void *)swift_task_alloc();
    v0[23] = v30;
    v30[2] = v35;
    v30[3] = v37;
    v30[4] = v36;
    Swift::UInt64 v31 = (void *)swift_task_alloc();
    v0[24] = v31;
    uint64_t v16 = sub_10000F214(&qword_10052C080);
    *Swift::UInt64 v31 = v0;
    v31[1] = sub_1003E95EC;
    unint64_t v12 = 0xD000000000000026;
    unint64_t v13 = 0x800000010042D570;
    uint64_t v14 = sub_1003F8E44;
    uint64_t v9 = (uint64_t)(v0 + 3);
    uint64_t v10 = v35;
    uint64_t v11 = v29;
    uint64_t v15 = v30;
  }
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_1003E95EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1003E97F4;
  }
  else {
    uint64_t v4 = sub_1003E9734;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1003E9734()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_1003E97F4()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1003E98AC(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052E1A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  double v5 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  uint64_t v8 = (void *)VisualIntelligenceService.searchCameraFrame(visualQueryContext:visualUnderstanding:completion:)();
  swift_release();
}

uint64_t sub_1003E9A18(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10052E1A8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = sub_10000F214(&qword_10052E1B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = type metadata accessor for RegionSearchResult();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v53 = a2;
    swift_errorRetain();
    sub_10000F214(&qword_10052E1A0);
    return CheckedContinuation.resume(throwing:)();
  }
  uint64_t v51 = a1;
  uint64_t v52 = a3;
  sub_10000FB74(a1, (uint64_t)v11, &qword_10052E1A8);
  uint64_t v22 = type metadata accessor for VisualSearchResult();
  uint64_t v23 = *(void *)(v22 - 8);
  long long v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v50(v11, 1, v22) == 1)
  {
    sub_10000FBD8((uint64_t)v11, &qword_10052E1A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_9:
    sub_10000FBD8((uint64_t)v17, &qword_10052E1B0);
LABEL_10:
    sub_10021027C();
    uint64_t v29 = swift_allocError();
    *(void *)uint64_t v30 = 0xD000000000000011;
    *(void *)(v30 + 8) = 0x800000010042D5A0;
    *(unsigned char *)(v30 + 16) = 1;
    uint64_t v53 = (void *)v29;
    sub_10000F214(&qword_10052E1A0);
    return CheckedContinuation.resume(throwing:)();
  }
  long long v49 = v21;
  uint64_t v24 = VisualSearchResult.regionResults.getter();
  long long v48 = *(void (**)(char *, uint64_t))(v23 + 8);
  v48(v11, v22);
  if (*(void *)(v24 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, v24 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18);
    unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    unint64_t v26 = v17;
    uint64_t v27 = 0;
  }
  else
  {
    unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    unint64_t v26 = v17;
    uint64_t v27 = 1;
  }
  long long v47 = v25;
  v25(v26, v27, 1, v18);
  swift_bridgeObjectRelease();
  id v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v28(v17, 1, v18) == 1) {
    goto LABEL_9;
  }
  uint64_t v46 = v28;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v49, v17, v18);
  sub_10000FB74(v51, (uint64_t)v8, &qword_10052E1A8);
  if (v50(v8, 1, v22) == 1)
  {
    uint64_t v32 = &qword_10052E1A8;
    uint64_t v33 = (uint64_t)v8;
LABEL_19:
    sub_10000FBD8(v33, v32);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v49, v18);
    goto LABEL_10;
  }
  uint64_t v34 = v47;
  uint64_t v35 = VisualSearchResult.regionResults.getter();
  v48(v8, v22);
  if (*(void *)(v35 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v14, v35 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18);
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = 1;
  }
  uint64_t v37 = v46;
  v34(v14, v36, 1, v18);
  swift_bridgeObjectRelease();
  if (v37(v14, 1, v18) == 1)
  {
    uint64_t v32 = &qword_10052E1B0;
    uint64_t v33 = (uint64_t)v14;
    goto LABEL_19;
  }
  unint64_t v38 = (void *)RegionSearchResult.resultSection.getter();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v19 + 8);
  v39(v14, v18);
  long long v40 = v49;
  uint64_t v41 = RegionSearchResult.glyphName.getter();
  uint64_t v43 = v42;
  uint64_t v44 = RegionSearchResult.resultItems.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v45 = sub_1003F6D88(v44, v41, v43, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v53 = v45;
  sub_10000F214(&qword_10052E1A0);
  CheckedContinuation.resume(returning:)();
  return ((uint64_t (*)(char *, uint64_t))v39)(v40, v18);
}

uint64_t sub_1003E9FDC(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_10000F214(&qword_10051A8C0);
  v3[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[16] = v5;
  v3[17] = *(void *)(v5 + 64);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  sub_10000F214(&qword_10052E178);
  v3[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for VisualUnderstanding();
  v3[23] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[24] = v7;
  v3[25] = *(void *)(v7 + 64);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  return _swift_task_switch(sub_1003EA1A4, v2, 0);
}

uint64_t sub_1003EA1A4()
{
  uint64_t v79 = v0;
  uint64_t v1 = *(char **)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  double v5 = CACurrentMediaTime();
  sub_1003EB4C8(v5);
  sub_1003EBE88(v1, v4);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6 != 1)
  {
    uint64_t v21 = *(void *)(v0 + 128);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 192) + 32);
    v22(*(char **)(v0 + 216), *(void *)(v0 + 176), *(void *)(v0 + 184));
    double v23 = *(double *)(v7 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_lastQueryDispatchTime) + 1.0;
    uint64_t v24 = *(void (**)(void, uint64_t, uint64_t))(v21 + 16);
    uint64_t v25 = *(void *)(v0 + 120);
    uint64_t v26 = *(void *)(v0 + 96);
    if (v23 <= v5)
    {
      uint64_t v70 = OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_lastQueryDispatchTime;
      BOOL v72 = v22;
      uint64_t v71 = *(void (**)(uint64_t))(v21 + 16);
      v24(*(void *)(v0 + 168), v26, v25);
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = *(void *)(v0 + 168);
      uint64_t v44 = *(void *)(v0 + 120);
      uint64_t v43 = *(void *)(v0 + 128);
      if (v41)
      {
        os_log_type_t v74 = v40;
        uint64_t v45 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315394;
        sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 72) = sub_1003806B0(v46, v47, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        double v69 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v69(v42, v44);
        *(_WORD *)(v45 + 12) = 2048;
        *(double *)(v0 + 80) = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v39, v74, "Beginning search request %s at %f", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        double v69 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v69(v42, v44);
      }
      uint64_t v75 = *(void *)(v0 + 208);
      uint64_t v77 = *(void *)(v0 + 216);
      uint64_t v49 = *(void *)(v0 + 184);
      uint64_t v73 = *(void *)(v0 + 192);
      uint64_t v50 = *(void *)(v0 + 160);
      uint64_t v68 = *(void *)(v0 + 200);
      uint64_t v51 = *(void *)(v0 + 120);
      uint64_t v53 = *(void *)(v0 + 104);
      uint64_t v52 = *(void *)(v0 + 112);
      uint64_t v65 = v52;
      uint64_t v66 = *(void *)(v0 + 128);
      uint64_t v67 = v53;
      uint64_t v64 = *(void *)(v0 + 96);
      *(double *)(v7 + v70) = v5;
      v71(v50);
      uint64_t v54 = (uint64_t *)(v53 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_inflightSearches);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v78 = *v54;
      uint64_t *v54 = 0x8000000000000000;
      sub_1002F54D8(v50, isUniquelyReferenced_nonNull_native, v5);
      uint64_t *v54 = v78;
      swift_bridgeObjectRelease();
      v69(v50, v51);
      swift_endAccess();
      uint64_t v56 = type metadata accessor for TaskPriority();
      uint64_t v48 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v52, 1, 1, v56);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v75, v77, v49);
      ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v50, v64, v51);
      uint64_t v57 = sub_1003F3144(&qword_10052E188, (void (*)(uint64_t))type metadata accessor for VisualIntelligenceSearchService);
      unint64_t v58 = (*(unsigned __int8 *)(v73 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      unint64_t v59 = (v68 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v60 = (*(unsigned __int8 *)(v66 + 80) + v59 + 8) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
      char v61 = (char *)swift_allocObject();
      *((void *)v61 + 2) = v67;
      *((void *)v61 + 3) = v57;
      *((void *)v61 + 4) = v67;
      v72(&v61[v58], v75, v49);
      *(double *)&v61[v59] = v5;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(&v61[v60], v50, v51);
      swift_retain_n();
      sub_100064D5C(v65, (uint64_t)&unk_10052E190, (uint64_t)v61);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v77, v49);
      goto LABEL_15;
    }
    v24(*(void *)(v0 + 152), v26, v25);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    BOOL v28 = os_log_type_enabled(v27, v76);
    uint64_t v29 = *(void *)(v0 + 216);
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v30 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 152);
    uint64_t v32 = *(void *)(v0 + 120);
    uint64_t v33 = *(void *)(v0 + 128);
    if (v28)
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315650;
      sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1003806B0(v35, v36, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
      *(_WORD *)(v34 + 12) = 2048;
      *(double *)(v0 + 48) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 22) = 2048;
      *(double *)(v0 + 56) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v76, "Deferring search request %s for rate limiting (it's %f, search again at %f", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v17);
      goto LABEL_12;
    }
    (*(void (**)(void, void))(v33 + 8))(*(void *)(v0 + 152), *(void *)(v0 + 120));

    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    uint64_t v38 = v29;
LABEL_11:
    v37(v38, v17);
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v11 = *(void *)(v0 + 96);
  sub_10000FBD8(*(void *)(v0 + 176), &qword_10052E178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 128);
  if (!v14)
  {

    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    uint64_t v38 = v15;
    goto LABEL_11;
  }
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  uint64_t v78 = swift_slowAlloc();
  *(_DWORD *)uint64_t v18 = 136315138;
  sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v0 + 64) = sub_1003806B0(v19, v20, &v78);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  _os_log_impl((void *)&_mh_execute_header, v12, v13, "No searchable understanding available for search request %s", v18, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_12:
  uint64_t v48 = 0;
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v62 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v62(v48);
}

uint64_t sub_1003EAB28(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[21] = a5;
  v7[22] = a7;
  uint64_t v10 = type metadata accessor for UUID();
  v7[23] = v10;
  v7[24] = *(void *)(v10 - 8);
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v7[28] = v11;
  *uint64_t v11 = v7;
  v11[1] = sub_1003EAC4C;
  return sub_1003E8CB0(a6, a1);
}

uint64_t sub_1003EAC4C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 168);
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  if (v1) {
    double v5 = sub_1003EB0C8;
  }
  else {
    double v5 = sub_1003EAD78;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1003EAD78()
{
  uint64_t v26 = v0;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[24] + 16);
  v24(v0[27], v0[22], v0[23]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v22 = v0[27];
    uint64_t v4 = v0[23];
    uint64_t v3 = v0[24];
    double v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)double v5 = 136315138;
    sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[20] = sub_1003806B0(v6, v7, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v22;
    double v23 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v23(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Search results received for %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = v0[27];
    uint64_t v10 = v0[23];
    uint64_t v11 = v0[24];

    double v23 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v23(v9, v10);
  }
  uint64_t v12 = v0[29];
  uint64_t v13 = v0[26];
  uint64_t v14 = v0[22];
  uint64_t v15 = v0[23];
  uint64_t v16 = v0[21];
  v24(v13, v14, v15);
  double v17 = CACurrentMediaTime();
  uint64_t v18 = (uint64_t *)(v16 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_currentResults);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v18;
  uint64_t *v18 = 0x8000000000000000;
  sub_1002F567C(v12, 0, v13, isUniquelyReferenced_nonNull_native, v17);
  uint64_t *v18 = v25;
  swift_bridgeObjectRelease();
  v23(v13, v15);
  swift_endAccess();
  swift_beginAccess();
  sub_1003F3D24(v14);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1003EB0C8()
{
  uint64_t v27 = v0;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[24] + 16);
  v25(v0[25], v0[22], v0[23]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[24];
    uint64_t v3 = v0[25];
    uint64_t v5 = v0[23];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[19] = sub_1003806B0(v7, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v24(v3, v5);
    *(_WORD *)(v6 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    v0[17] = sub_1003806B0(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Exception during search for %s: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v12 = v0[24];
    uint64_t v11 = v0[25];
    uint64_t v13 = v0[23];

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v24(v11, v13);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = v0[30];
  uint64_t v15 = v0[26];
  uint64_t v16 = v0[22];
  uint64_t v17 = v0[23];
  uint64_t v18 = v0[21];
  v25(v15, v16, v17);
  swift_errorRetain();
  double v19 = CACurrentMediaTime();
  unint64_t v20 = (uint64_t *)(v18 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_currentResults);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *v20;
  uint64_t *v20 = 0x8000000000000000;
  sub_1002F567C((uint64_t)_swiftEmptyArrayStorage, v14, v15, isUniquelyReferenced_nonNull_native, v19);
  uint64_t *v20 = v26;
  swift_bridgeObjectRelease();
  v24(v15, v17);
  swift_endAccess();
  swift_beginAccess();
  sub_1003F3D24(v16);
  swift_endAccess();
  swift_errorRelease();
  *(void *)(v18 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_lastQueryDispatchTime) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

void sub_1003EB4C8(double a1)
{
  os_log_type_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (char *)v2 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_currentResults;
  swift_beginAccess();
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  *(double *)&v12[2] = a1;
  v12[3] = v4;
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1003F72F4(v7, (uint64_t (*)(char *, void, uint64_t, double))sub_1003F8910, (uint64_t)v12);
  swift_bridgeObjectRelease();
  *(void *)uint64_t v5 = v8;
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)v5 + 16) != v6)
  {
    swift_retain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134218240;
      double v13 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2048;
      double v13 = *(double *)(*(void *)v5 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Pruned some old results at %f: %ld still in cache", (uint8_t *)v11, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_1003EB698(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  uint64_t v4 = type metadata accessor for UUID();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return _swift_task_switch(sub_1003EB774, v2, 0);
}

uint64_t sub_1003EB774()
{
  uint64_t v53 = v0;
  uint64_t v1 = v0[17] + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_currentResults;
  swift_beginAccess();
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v2 = v0[16];
    swift_bridgeObjectRetain();
    sub_10032ADC4(v2);
    char v4 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  uint64_t v5 = v0 + 16;
  uint64_t v6 = *(void (**)(void, void, void))(v0[19] + 16);
  v6(v0[22], v0[16], v0[18]);
  if (v4)
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0[19] + 8);
    v7(v0[22], v0[18]);
    goto LABEL_8;
  }
  uint64_t v8 = v6;
  uint64_t v9 = v0[17] + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_inflightSearches;
  swift_beginAccess();
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[19];
  if (!*(void *)(*(void *)v9 + 16))
  {
    (*(void (**)(void, void))(v12 + 8))(v0[22], v0[18]);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  sub_10032ADC4(v10);
  char v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v15(v10, v11);
  uint64_t v6 = v8;
  uint64_t v7 = v15;
  if ((v14 & 1) == 0)
  {
LABEL_20:
    sub_1003F887C();
    swift_allocError();
    swift_willThrow();
    goto LABEL_21;
  }
LABEL_8:
  double v16 = CACurrentMediaTime();
  uint64_t v17 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v18 = *v5;
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_10032ADC4(v18);
    if (v20)
    {
      uint64_t v51 = v7;
      uint64_t v21 = v0[16];
      uint64_t v22 = (uint64_t *)(*(void *)(v17 + 56) + 24 * v19);
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v25 = sub_1003F3E28(v21);
      swift_endAccess();
      sub_1003F88D0(v25);
      sub_1003EB4C8(v16);
      if (v24)
      {
        swift_errorRetain();
        swift_bridgeObjectRelease();
        swift_willThrow();
        swift_errorRelease();
LABEL_21:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        os_log_type_t v40 = (uint64_t (*)(void))v0[1];
        return v40();
      }
      v6(v0[21], v0[16], v0[18]);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = v0[21];
      uint64_t v46 = v0[18];
      if (v44)
      {
        unint64_t v47 = (uint8_t *)swift_slowAlloc();
        v52[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v47 = 136315138;
        sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[15] = sub_1003806B0(v48, v49, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v51(v45, v46);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Returning search results for %s", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v51(v45, v46);
      }
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = (uint64_t *)(v0[17] + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_inflightSearches);
  swift_beginAccess();
  uint64_t v27 = *v26;
  if (!*(void *)(v27 + 16))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v28 = *v5;
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_10032ADC4(v28);
  if ((v30 & 1) == 0)
  {
LABEL_32:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  double v31 = *(double *)(*(void *)(v27 + 56) + 8 * v29);
  swift_bridgeObjectRelease();
  if (v31 + 1.0 < v16)
  {
    ((void (*)(void, void, void, double))v6)(v0[20], v0[16], v0[18], v31 + 1.0);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v0[20];
    uint64_t v36 = v0[18];
    if (!v34)
    {

      v7(v35, v36);
      uint64_t v23 = 0;
      goto LABEL_28;
    }
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    sub_1003F3144(&qword_10051B438, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[14] = sub_1003806B0(v38, v39, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v7(v35, v36);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Search %s has been waiting longer than the retry interval for results", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v23 = 0;
LABEL_28:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = (uint64_t (*)(uint64_t))v0[1];
  return v50(v23);
}

uint64_t sub_1003EBE88@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v267 = sub_10000F214(&qword_10052E158);
  uint64_t v264 = *(void *)(v267 - 8);
  __chkstk_darwin(v267);
  uint64_t v5 = (char *)v212 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052E130);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v212 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v212 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v250 = (char *)v212 - v13;
  __chkstk_darwin(v14);
  uint64_t v241 = (uint64_t)v212 - v15;
  __chkstk_darwin(v16);
  v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v212 - v17);
  uint64_t v263 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v260 = *(void *)(v263 - 8);
  __chkstk_darwin(v263);
  unint64_t v19 = (char *)v212 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v253 = (char *)v212 - v21;
  __chkstk_darwin(v22);
  v242 = (void *)((char *)v212 - v23);
  __chkstk_darwin(v24);
  v249 = (void (*)(char *, uint64_t))((char *)v212 - v25);
  uint64_t v26 = type metadata accessor for VisualUnderstanding();
  uint64_t v268 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  v245 = (char *)v212 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v244 = (char *)v212 - v29;
  __chkstk_darwin(v30);
  v256 = (char *)v212 - v31;
  __chkstk_darwin(v32);
  v247 = (char *)v212 - v33;
  __chkstk_darwin(v34);
  *(void *)&long long v246 = (char *)v212 - v35;
  __chkstk_darwin(v36);
  v240 = (char *)v212 - v37;
  __chkstk_darwin(v38);
  *(void *)&long long v239 = (char *)v212 - v39;
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)v212 - v41;
  __chkstk_darwin(v43);
  v248 = (char *)v212 - v44;
  uint64_t v45 = type metadata accessor for ParseDetectorResult(0);
  uint64_t v266 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v257 = (uint64_t)v212 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v255 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v212 - v48);
  __chkstk_darwin(v49);
  v243 = (void (**)(char *, uint64_t, uint64_t))((char *)v212 - v50);
  __chkstk_darwin(v51);
  uint64_t v53 = (char *)v212 - v52;
  __chkstk_darwin(v54);
  v259 = (char *)v212 - v55;
  uint64_t v56 = sub_10000F214(&qword_10052E160);
  __chkstk_darwin(v56 - 8);
  __chkstk_darwin(v57);
  __chkstk_darwin(v58);
  __chkstk_darwin(v59);
  __chkstk_darwin((char *)v212 - v60);
  v261 = (void *)((char *)v212 - v61);
  __chkstk_darwin(v62);
  __chkstk_darwin(v63);
  __chkstk_darwin(v64);
  __chkstk_darwin(v65);
  v76.n128_f64[0] = __chkstk_darwin(v66);
  v265 = (int *)v45;
  uint64_t v77 = (uint64_t *)&a1[*(int *)(v45 + 60)];
  uint64_t v78 = *v77;
  if (!*v77)
  {
    uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v268 + 56);
    return v88(a2, 1, 1, v26, v76);
  }
  uint64_t v79 = a2;
  v237 = v67;
  v230 = v75;
  uint64_t v231 = v74;
  uint64_t v232 = v73;
  v238 = v19;
  v235 = v11;
  v236 = v8;
  v233 = v5;
  uint64_t v258 = v26;
  uint64_t v80 = (uint64_t (*)(char *))v77[1];
  uint64_t v81 = *(void *)(v78 + 16);
  uint64_t v82 = v78;
  uint64_t v269 = v78;
  uint64_t v270 = v81;
  v254 = (char *)v79;
  if (!v81)
  {
    sub_1003F6C80(v78);
    unint64_t v252 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v87 = 0;
    uint64_t v90 = 0;
LABEL_23:
    v262 += OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_logger;
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Using incorrect candidate search detection. Update your SDK!", v96, 2u);
      swift_slowDealloc();
    }

    if (v90 == v87)
    {
      swift_unknownObjectRetain();
      swift_retain();
LABEL_34:
      uint64_t v100 = v264;
      uint64_t v101 = v261;
      uint64_t v102 = v267;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v264 + 56))(v261, 1, 1, v267);
      swift_release();
      swift_unknownObjectRelease();
      uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
      long long v104 = v254;
      uint64_t v105 = v258;
LABEL_35:
      if (v103((uint64_t)v101, 1, v102) == 1)
      {
        swift_release_n();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000FBD8((uint64_t)v101, &qword_10052E160);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v268 + 56))(v104, 1, 1, v105);
      }
      else
      {
        uint64_t v106 = *v101;
        uint64_t v107 = (char *)v101 + *(int *)(v102 + 48);
        uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v268 + 32);
        uint64_t v109 = v256;
        v108(v256, v107, v105);
        uint64_t v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v110, v111))
        {
          uint64_t v112 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v112 = 134217984;
          uint64_t v271 = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v110, v111, "Nominating search for detection from %f", v112, 0xCu);
          swift_slowDealloc();
        }
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();

        swift_release_n();
        v108(v104, v109, v105);
        return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v268 + 56))(v104, 0, 1, v105);
      }
    }
    unint64_t v97 = v82 + v252;
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v270 = v90;
    uint64_t v82 = v90;
    uint64_t v84 = v266;
    while (1)
    {
      if (v82 >= v87) {
        goto LABEL_133;
      }
      a1 = *(char **)(v84 + 72);
      sub_1003F6CC0(v97 + (void)a1 * v82, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
      swift_retain();
      char v98 = v80(v53);
      swift_release();
      sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
      if (v98) {
        break;
      }
      uint64_t v99 = v82 + 1;
      if (__OFADD__(v82, 1)) {
        goto LABEL_134;
      }
      ++v82;
      if (v99 == v87) {
        goto LABEL_34;
      }
    }
    if (v87 == v82) {
      goto LABEL_34;
    }
    v255 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v260 + 48);
    v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v260 + 32);
    v248 = (char *)(v260 + 16);
    v250 = (char *)(v260 + 8);
    v247 = (char *)(v268 + 32);
    v259 = (char *)(v264 + 56);
    v253 = (char *)(v269 + v252);
    uint64_t v266 = v264 + 48;
    v243 = (void (**)(char *, uint64_t, uint64_t))((v264 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000);
    long long v246 = xmmword_10043D4F0;
LABEL_80:
    if (v82 < v270 || v82 >= v87) {
      goto LABEL_150;
    }
    unint64_t v252 = v97 + (void)a1 * v82;
    uint64_t v162 = v257;
    sub_1003F6CC0(v252, v257, type metadata accessor for ParseDetectorResult);
    uint64_t v163 = (uint64_t)v235;
    sub_10000FB74(v162 + v265[13], (uint64_t)v235, &qword_100524BD0);
    if ((*v255)(v163, 1, v263) == 1)
    {
      swift_unknownObjectRetain();
      swift_retain();
      sub_10000FBD8(v163, &qword_100524BD0);
    }
    else
    {
      uint64_t v164 = v263;
      (*(void (**)(char *, uint64_t, uint64_t))v251)(v238, v163, v263);
      uint64_t v165 = v162 + v265[14];
      uint64_t v166 = *(unint64_t **)(v165 + 8);
      if ((unint64_t)v166 >> 60 != 15)
      {
        v249 = *(void (**)(char *, uint64_t))v165;
        v242 = v166;
        sub_10000F214(&qword_10052E168);
        uint64_t v168 = v260;
        unint64_t v169 = (*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80);
        uint64_t v170 = swift_allocObject();
        uint64_t v241 = v170;
        *(_OWORD *)(v170 + 16) = v246;
        (*(void (**)(unint64_t, char *, uint64_t))(v168 + 16))(v170 + v169, v238, v164);
        uint64_t v171 = type metadata accessor for VisualUnderstanding.Annotation();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56))(v236, 1, 1, v171);
        swift_unknownObjectRetain();
        swift_retain();
        sub_1000A7588((uint64_t)v249, (unint64_t)v242);
        VisualUnderstanding.init(_:annotation:payload:)();
        (*(void (**)(char *, uint64_t))(v260 + 8))(v238, v263);
        uint64_t v172 = *(void (**)(char *, char *, uint64_t))v247;
        (*(void (**)(char *, char *, uint64_t))v247)(v244, v245, v258);
        uint64_t v173 = (char *)v237 + *(int *)(v267 + 48);
        uint64_t v174 = v258;
        void *v237 = *(void *)(v257 + v265[9]);
        v172(v173, v244, v174);
        uint64_t v167 = 0;
        goto LABEL_88;
      }
      v249 = *(void (**)(char *, uint64_t))v250;
      swift_unknownObjectRetain();
      swift_retain();
      v249(v238, v164);
    }
    uint64_t v167 = 1;
LABEL_88:
    uint64_t v175 = (uint64_t)v237;
    uint64_t v176 = v267;
    v249 = *(void (**)(char *, uint64_t))v259;
    ((void (*)(void *, uint64_t, uint64_t, uint64_t))v249)(v237, v167, 1, v267);
    sub_1003F6D28(v257, type metadata accessor for ParseDetectorResult);
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v266;
    LODWORD(v176) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v266)(v175, 1, v176);
    sub_10000FBD8(v175, &qword_10052E160);
    if (v176 != 1)
    {
      v206 = v249;
      sub_1003F6CC0(v252, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
      v207 = v230;
      sub_1003EE0F0((uint64_t)v53, v230);
      sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
      uint64_t v208 = v231;
      sub_10000FC34((uint64_t)v207, v231, &qword_10052E160);
      uint64_t v209 = v232;
      sub_10000FB74(v208, v232, &qword_10052E160);
      uint64_t v102 = v267;
      uint64_t result = v103(v209, 1, v267);
      if (result == 1) {
        goto LABEL_158;
      }
      uint64_t v210 = v209;
      uint64_t v211 = (uint64_t)v233;
      sub_10000FC34(v210, (uint64_t)v233, &qword_10052E158);
      sub_10000FBD8(v208, &qword_10052E160);
      uint64_t v101 = v261;
      sub_10000FC34(v211, (uint64_t)v261, &qword_10052E158);
      ((void (*)(uint64_t *, void, uint64_t, uint64_t))v206)(v101, 0, 1, v102);
      swift_release();
      swift_unknownObjectRelease();
      long long v104 = v254;
      uint64_t v105 = v258;
      goto LABEL_35;
    }
    uint64_t v84 = v82 + 1;
    if (__OFADD__(v82, 1)) {
      goto LABEL_151;
    }
    if (v84 != v87)
    {
      uint64_t v177 = (uint64_t)&v253[(void)a1 * v84];
      ++v82;
      while (v84 >= v270 && v82 < v87)
      {
        sub_1003F6CC0(v177, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
        swift_retain();
        char v178 = v80(v53);
        swift_release();
        sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
        if (v178)
        {
          if (v87 != v82) {
            goto LABEL_80;
          }
          goto LABEL_34;
        }
        uint64_t v179 = v82 + 1;
        if (__OFADD__(v82, 1)) {
          goto LABEL_140;
        }
        ++v82;
        v177 += (uint64_t)a1;
        if (v179 == v87) {
          goto LABEL_34;
        }
      }
      goto LABEL_139;
    }
    goto LABEL_34;
  }
  v229 = (char *)v212 - v72;
  unint64_t v227 = v71;
  v225 = v70;
  v228 = v69;
  uint64_t v226 = v68;
  uint64_t v83 = v266;
  unint64_t v252 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  unint64_t v234 = v78 + v252;
  uint64_t v82 = v78 + v252;
  sub_1003F6C80(v78);
  uint64_t v84 = *(void *)(v83 + 72);
  swift_bridgeObjectRetain();
  swift_retain();
  a1 = 0;
  uint64_t v85 = v82;
  while (1)
  {
    sub_1003F6CC0(v85, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
    swift_retain();
    char v86 = v80(v53);
    swift_release();
    sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
    if (v86) {
      break;
    }
    ++a1;
    v85 += v84;
    if ((char *)v270 == a1)
    {
LABEL_6:
      uint64_t v87 = v270;
      goto LABEL_12;
    }
  }
  uint64_t v87 = v270;
  if ((char *)v270 == a1) {
    goto LABEL_12;
  }
  v214 = v42;
  v224 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v260 + 48);
  v220 = (void (**)(void, void, void))(v260 + 32);
  uint64_t v217 = v260 + 16;
  v219 = (void (**)(unint64_t *, uint64_t))(v260 + 8);
  v216 = (void (**)(char *, char *, uint64_t))(v268 + 32);
  v223 = (char **)(v264 + 56);
  v222 = (char **)(v264 + 48);
  uint64_t v221 = v269 + v252;
  long long v215 = xmmword_10043D4F0;
  while (1)
  {
    if (((unint64_t)a1 & 0x8000000000000000) != 0) {
      goto LABEL_144;
    }
    uint64_t v113 = (uint64_t)v251;
    uint64_t v114 = v259;
    if ((unint64_t)a1 >= *(void *)(v269 + 16)) {
      goto LABEL_145;
    }
    sub_1003F6CC0(v234 + (void)a1 * v84, (uint64_t)v259, type metadata accessor for ParseDetectorResult);
    sub_10000FB74((uint64_t)&v114[v265[13]], v113, &qword_100524BD0);
    uint64_t v115 = v263;
    v218 = *v224;
    if (v218(v113, 1, v263) == 1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10000FBD8(v113, &qword_100524BD0);
LABEL_47:
      uint64_t v120 = 1;
      goto LABEL_49;
    }
    uint64_t v116 = v249;
    (*v220)(v249, v113, v115);
    long long v117 = &v114[v265[14]];
    unint64_t v118 = *((void *)v117 + 1);
    long long v119 = (void (*)(void, void))v116;
    if (v118 >> 60 == 15)
    {
      v213 = *v219;
      swift_bridgeObjectRetain();
      swift_retain();
      v213((unint64_t *)v116, v115);
      goto LABEL_47;
    }
    v212[0] = *(void *)v117;
    uint64_t v121 = v212[0];
    v213 = (void (*)(unint64_t *, uint64_t))v118;
    sub_10000F214(&qword_10052E168);
    uint64_t v122 = v260;
    unint64_t v123 = (*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80);
    uint64_t v124 = swift_allocObject();
    v212[1] = v124;
    *(_OWORD *)(v124 + 16) = v215;
    (*(void (**)(unint64_t, void (*)(char *, uint64_t), uint64_t))(v122 + 16))(v124 + v123, (void (*)(char *, uint64_t))v119, v263);
    uint64_t v125 = type metadata accessor for VisualUnderstanding.Annotation();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56))(v236, 1, 1, v125);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000A7588(v121, (unint64_t)v213);
    CGRect v126 = v214;
    VisualUnderstanding.init(_:annotation:payload:)();
    (*(void (**)(void, uint64_t))(v260 + 8))(v249, v263);
    CGRect v127 = *v216;
    uint64_t v128 = v126;
    uint64_t v129 = v258;
    (*v216)(v248, v128, v258);
    uint64_t v130 = &v229[*(int *)(v267 + 48)];
    *(void *)v229 = *(void *)&v259[v265[9]];
    v127(v130, v248, v129);
    uint64_t v120 = 0;
LABEL_49:
    long long v131 = *v223;
    long long v132 = v229;
    uint64_t v133 = v267;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v223)(v229, v120, 1, v267);
    sub_1003F6D28((uint64_t)v259, type metadata accessor for ParseDetectorResult);
    uint64_t v134 = (uint64_t)v132;
    uint64_t v135 = v227;
    sub_10000FC34(v134, v227, &qword_10052E160);
    swift_release();
    swift_bridgeObjectRelease();
    long long v136 = *v222;
    LODWORD(v133) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v222)(v135, 1, v133);
    uint64_t result = sub_10000FBD8(v135, &qword_10052E160);
    if (v133 != 1) {
      break;
    }
    if (a1 == (char *)v270) {
      goto LABEL_148;
    }
    if (++a1 != (char *)v270)
    {
      uint64_t v137 = v221 + v84 * (void)a1;
      while (1)
      {
        if ((unint64_t)a1 >= *(void *)(v269 + 16))
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        sub_1003F6CC0(v137, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
        swift_retain();
        char v138 = v80(v53);
        swift_release();
        sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
        if (v138) {
          break;
        }
        uint64_t v139 = a1 + 1;
        if (__OFADD__(a1, 1)) {
          goto LABEL_137;
        }
        ++a1;
        v137 += v84;
        if (v139 == (char *)v270) {
          goto LABEL_6;
        }
      }
      if ((char *)v270 != a1) {
        continue;
      }
    }
    goto LABEL_6;
  }
  v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
  v259 = v131;
  uint64_t v87 = v270;
  if (a1 == (char *)v270) {
    goto LABEL_12;
  }
  uint64_t v87 = v270;
  v248 = (char *)(v270 - 1);
  v180 = (void (*)(char *, uint64_t))(v269 + v252);
  uint64_t v181 = 1;
  v249 = (void (*)(char *, uint64_t))(v269 + v252);
  while (!__OFADD__(a1++, 1))
  {
    if (a1 == (char *)v87) {
      goto LABEL_12;
    }
    v229 = (char *)v181;
    while (1)
    {
      uint64_t v183 = (uint64_t)v180 + v84 * (void)a1;
      v184 = a1;
      while (1)
      {
        if (((unint64_t)a1 & 0x8000000000000000) != 0) {
          goto LABEL_152;
        }
        if ((unint64_t)v184 >= *(void *)(v269 + 16)) {
          goto LABEL_153;
        }
        sub_1003F6CC0(v183, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
        swift_retain();
        char v185 = v80(v53);
        swift_release();
        uint64_t result = sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
        if (v185) {
          break;
        }
        v186 = v184 + 1;
        if (__OFADD__(v184, 1)) {
          goto LABEL_154;
        }
        ++v184;
        v183 += v84;
        if (v186 == (char *)v270) {
          goto LABEL_6;
        }
      }
      if ((char *)v270 == v184)
      {
        a1 = (char *)v270;
        goto LABEL_125;
      }
      v187 = v243;
      if ((unint64_t)v184 >= *(void *)(v269 + 16)) {
        goto LABEL_157;
      }
      sub_1003F6CC0(v183, (uint64_t)v243, type metadata accessor for ParseDetectorResult);
      uint64_t v188 = v265;
      uint64_t v189 = v241;
      sub_10000FB74((uint64_t)v187 + v265[13], v241, &qword_100524BD0);
      if (v218(v189, 1, v263) == 1)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000FBD8(v189, &qword_100524BD0);
LABEL_118:
        uint64_t v192 = 1;
        goto LABEL_120;
      }
      (*v220)(v242, v189, v263);
      v190 = (uint64_t *)((char *)v187 + v188[14]);
      if ((unint64_t)v190[1] >> 60 == 15)
      {
        v191 = *v219;
        swift_bridgeObjectRetain();
        swift_retain();
        v191(v242, v263);
        goto LABEL_118;
      }
      uint64_t v193 = *v190;
      unint64_t v227 = v190[1];
      sub_10000F214(&qword_10052E168);
      uint64_t v194 = v260;
      unint64_t v195 = (*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80);
      uint64_t v196 = swift_allocObject();
      uint64_t v221 = v196;
      *(_OWORD *)(v196 + 16) = v215;
      (*(void (**)(unint64_t, unint64_t *, uint64_t))(v194 + 16))(v196 + v195, v242, v263);
      uint64_t v197 = type metadata accessor for VisualUnderstanding.Annotation();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v197 - 8) + 56))(v236, 1, 1, v197);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1000A7588(v193, v227);
      VisualUnderstanding.init(_:annotation:payload:)();
      (*(void (**)(unint64_t *, uint64_t))(v260 + 8))(v242, v263);
      v198 = *v216;
      v199 = (char *)v239;
      uint64_t v200 = v258;
      (*v216)((char *)v239, v240, v258);
      v201 = (char *)v225 + *(int *)(v267 + 48);
      void *v225 = *(void (**)(char *, uint64_t, uint64_t))((char *)v243 + v265[9]);
      v198(v201, v199, v200);
      uint64_t v192 = 0;
LABEL_120:
      uint64_t v202 = (uint64_t)v225;
      uint64_t v203 = v267;
      ((void (*)(void *, uint64_t, uint64_t, uint64_t))v259)(v225, v192, 1, v267);
      sub_1003F6D28((uint64_t)v243, type metadata accessor for ParseDetectorResult);
      swift_release();
      swift_bridgeObjectRelease();
      int v204 = v251(v202, 1, v203);
      uint64_t result = sub_10000FBD8(v202, &qword_10052E160);
      if (v204 != 1) {
        break;
      }
      a1 = v184 + 1;
      v180 = v249;
      if (v248 == v184) {
        goto LABEL_6;
      }
    }
    a1 = v184;
LABEL_125:
    if (v229 == (char *)5) {
      goto LABEL_155;
    }
    uint64_t v181 = (uint64_t)(v229 + 1);
    BOOL v205 = v270 == (void)v184;
    uint64_t v87 = v270;
    v180 = v249;
    if (v205)
    {
LABEL_12:
      while (1)
      {
        a1 = 0;
        uint64_t v90 = v270;
        while (1)
        {
          sub_1003F6CC0(v82, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
          swift_retain();
          char v91 = v80(v53);
          swift_release();
          sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
          if (v91) {
            break;
          }
          uint64_t v92 = a1 + 1;
          if (__OFADD__(a1, 1))
          {
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          ++a1;
          v82 += v84;
          if (v92 == (char *)v90) {
            goto LABEL_18;
          }
        }
        if ((char *)v90 == a1)
        {
LABEL_18:
          uint64_t v82 = v269;
          goto LABEL_19;
        }
        v259 = (char *)(v260 + 48);
        v243 = (void (**)(char *, uint64_t, uint64_t))(v260 + 32);
        uint64_t v241 = v260 + 16;
        v242 = (unint64_t *)(v260 + 8);
        v240 = (char *)(v268 + 32);
        v251 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v264 + 56);
        v249 = (void (*)(char *, uint64_t))(v264 + 48);
        uint64_t v82 = v269;
        v248 = (char *)(v269 + v252);
        long long v239 = xmmword_10043D4F0;
LABEL_61:
        if (((unint64_t)a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        uint64_t v87 = (uint64_t)a1;
      }
      uint64_t v140 = (uint64_t)v250;
      if ((unint64_t)a1 >= *(void *)(v82 + 16)) {
        goto LABEL_147;
      }
      long long v141 = v255;
      sub_1003F6CC0(v234 + (void)a1 * v84, (uint64_t)v255, type metadata accessor for ParseDetectorResult);
      sub_10000FB74((uint64_t)v141 + v265[13], v140, &qword_100524BD0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v259)(v140, 1, v263) == 1)
      {
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10000FBD8(v140, &qword_100524BD0);
        uint64_t v142 = 1;
        long long v143 = v141;
      }
      else
      {
        uint64_t v144 = v263;
        (*v243)(v253, v140, v263);
        uint64_t v145 = (uint64_t *)((char *)v141 + v265[14]);
        if ((unint64_t)v145[1] >> 60 == 15)
        {
          long long v143 = v141;
          v229 = (char *)*v242;
          swift_bridgeObjectRetain();
          swift_retain();
          ((void (*)(char *, uint64_t))v229)(v253, v144);
          uint64_t v142 = 1;
        }
        else
        {
          uint64_t v146 = *v145;
          v229 = (char *)v145[1];
          sub_10000F214(&qword_10052E168);
          uint64_t v147 = v260;
          unint64_t v148 = (*(unsigned __int8 *)(v260 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v260 + 80);
          uint64_t v149 = swift_allocObject();
          unint64_t v227 = v149;
          *(_OWORD *)(v149 + 16) = v239;
          (*(void (**)(unint64_t, char *, uint64_t))(v147 + 16))(v149 + v148, v253, v144);
          uint64_t v150 = type metadata accessor for VisualUnderstanding.Annotation();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v236, 1, 1, v150);
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1000A7588(v146, (unint64_t)v229);
          uint64_t v82 = v269;
          VisualUnderstanding.init(_:annotation:payload:)();
          (*(void (**)(char *, uint64_t))(v260 + 8))(v253, v144);
          uint64_t v151 = *(void (**)(void, char *, uint64_t))v240;
          uint64_t v152 = v258;
          (*(void (**)(void, char *, uint64_t))v240)(v246, v247, v258);
          uint64_t v153 = (void (*)(char *, void, uint64_t))v151;
          uint64_t v154 = (char *)v228 + *(int *)(v267 + 48);
          void *v228 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v255 + v265[9]);
          long long v143 = v255;
          v153(v154, v246, v152);
          uint64_t v142 = 0;
        }
      }
      unint64_t v155 = v228;
      uint64_t v156 = v267;
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))v251)(v228, v142, 1, v267);
      sub_1003F6D28((uint64_t)v143, type metadata accessor for ParseDetectorResult);
      uint64_t v157 = (uint64_t)v155;
      uint64_t v158 = v226;
      sub_10000FC34(v157, v226, &qword_10052E160);
      swift_release();
      swift_bridgeObjectRelease();
      LODWORD(v156) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v249)(v158, 1, v156);
      sub_10000FBD8(v158, &qword_10052E160);
      uint64_t v90 = v270;
      if (v156 == 1)
      {
        if (a1 == (char *)v270) {
          goto LABEL_149;
        }
        if (++a1 != (char *)v270)
        {
          uint64_t v159 = (uint64_t)&v248[v84 * (void)a1];
          while ((unint64_t)a1 < *(void *)(v82 + 16))
          {
            sub_1003F6CC0(v159, (uint64_t)v53, type metadata accessor for ParseDetectorResult);
            swift_retain();
            char v160 = v80(v53);
            swift_release();
            sub_1003F6D28((uint64_t)v53, type metadata accessor for ParseDetectorResult);
            if (v160)
            {
              if ((char *)v90 != a1) {
                goto LABEL_61;
              }
              goto LABEL_19;
            }
            long long v161 = a1 + 1;
            if (__OFADD__(a1, 1)) {
              goto LABEL_138;
            }
            ++a1;
            v159 += v84;
            if (v161 == (char *)v90) {
              goto LABEL_19;
            }
          }
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
      }
      else
      {
        uint64_t v90 = (uint64_t)a1;
      }
LABEL_19:
      if (v87 < v90) {
        goto LABEL_141;
      }
      uint64_t v93 = *(void *)(v82 + 16);
      if (v93 >= (unint64_t)v90 && v93 >= v87)
      {
        if ((v87 & 0x8000000000000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_142;
      }
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
  }
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
  return result;
}

uint64_t sub_1003EE0F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = sub_10000F214(&qword_10052E130);
  __chkstk_darwin(v3 - 8);
  uint64_t v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for VisualUnderstanding();
  uint64_t v35 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = (int *)type metadata accessor for ParseDetectorResult(0);
  uint64_t v19 = v18[13];
  uint64_t v37 = a1;
  sub_10000FB74(a1 + v19, (uint64_t)v7, &qword_100524BD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000FBD8((uint64_t)v7, &qword_100524BD0);
LABEL_5:
    uint64_t v22 = sub_10000F214(&qword_10052E158);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v38, 1, 1, v22);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  uint64_t v20 = (uint64_t *)(v37 + v18[14]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_5;
  }
  uint64_t v34 = v12;
  uint64_t v24 = *v20;
  sub_10000F214(&qword_10052E168);
  unint64_t v25 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10043D4F0;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 16))(v26 + v25, v11, v8);
  uint64_t v27 = type metadata accessor for VisualUnderstanding.Annotation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v36, 1, 1, v27);
  sub_100038528(v24, v21);
  VisualUnderstanding.init(_:annotation:payload:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v28 = v34;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v29(v17, v14, v34);
  uint64_t v30 = sub_10000F214(&qword_10052E158);
  uint64_t v31 = v38;
  uint64_t v32 = (char *)v38 + *(int *)(v30 + 48);
  void *v38 = *(void *)(v37 + v18[9]);
  v29(v32, v17, v28);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v31, 0, 1, v30);
}

uint64_t sub_1003EE548()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003EE5F4()
{
  return type metadata accessor for VisualIntelligenceSearchService(0);
}

uint64_t type metadata accessor for VisualIntelligenceSearchService(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052DB10);
}

uint64_t sub_1003EE61C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003EE6E4(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = sub_10000F214(&qword_100524EB0);
  v3[5] = swift_task_alloc();
  v3[6] = type metadata accessor for CVDetection();
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1003EE7AC, v2, 0);
}

uint64_t sub_1003EE7AC()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  sub_1003E6684(v1);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = v3 + *(int *)(v2 + 48);
  sub_1003F6CC0(v4, v3, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_1003F6CC0(v1, v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_13;
    case 2u:
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 3u:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 4u:
      if (swift_getEnumCaseMultiPayload() == 4) {
        goto LABEL_13;
      }
      goto LABEL_3;
    case 5u:
      if (swift_getEnumCaseMultiPayload() == 5) {
        goto LABEL_13;
      }
      goto LABEL_3;
    default:
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        sub_10000FBD8(v0[5], &qword_100524EB0);
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v9 = 3;
      }
      else
      {
LABEL_13:
        uint64_t v10 = v0[5];
        sub_1003F6D28(v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
        sub_1003F6D28(v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
        uint64_t v9 = 0;
        uint64_t v7 = 0x142475241;
        uint64_t v8 = 1080;
        uint64_t v6 = 1;
      }
      uint64_t v11 = (uint64_t *)v0[2];
      sub_1003F6D28(v0[7], (uint64_t (*)(void))type metadata accessor for CVDetection);
      swift_task_dealloc();
      swift_task_dealloc();
      *uint64_t v11 = v8;
      v11[1] = v8;
      v11[2] = v7;
      v11[3] = v6;
      v11[4] = v9;
      uint64_t v12 = (uint64_t (*)(void))v0[1];
      return v12();
  }
}

uint64_t sub_1003EE9F8()
{
  v1[2] = v0;
  sub_10000F214(&qword_10052E018);
  v1[3] = swift_task_alloc();
  sub_10000F214(&qword_10052E020);
  v1[4] = swift_task_alloc();
  sub_10000F214(&qword_10051E070);
  v1[5] = swift_task_alloc();
  type metadata accessor for VisualIntelligenceService.Options();
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1003EEB18, v0, 0);
}

uint64_t sub_1003EEB18()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  type metadata accessor for VisualIntelligenceService();
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  uint64_t v7 = type metadata accessor for MLEngineType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  VisualIntelligenceService.Options.init(customizedEndpoint:networkTimeoutInterval:debugParameters:mlEngineType:)();
  *(void *)(v4 + 112) = VisualIntelligenceService.__allocating_init(serviceOptions:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1003EECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[14] = a5;
  v6[15] = v5;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  uint64_t Context = type metadata accessor for VisualQueryContext();
  v6[16] = Context;
  v6[17] = *(void *)(Context - 8);
  v6[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PixelImage();
  v6[19] = v8;
  v6[20] = *(void *)(v8 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = type metadata accessor for DetectionRequest.Originator(0);
  v6[23] = swift_task_alloc();
  return _swift_task_switch(sub_1003EEE04, v5, 0);
}

uint64_t sub_1003EEE04()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 120) + 112);
  *(void *)(v0 + 192) = v1;
  if (!v1)
  {
LABEL_4:
    sub_10021027C();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_100446C60;
    *(unsigned char *)(v7 + 16) = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = type metadata accessor for DetectionRequest(0);
  sub_1003F6CC0(v3 + *(int *)(v4 + 20), v2, type metadata accessor for DetectionRequest.Originator);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v6 = *(uint64_t **)(v0 + 184);
  if (EnumCaseMultiPayload)
  {
    sub_1003F6D28((uint64_t)v6, type metadata accessor for DetectionRequest.Originator);
    goto LABEL_4;
  }
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *(void **)(v0 + 96);
  uint64_t v12 = *v6;
  *(void *)(v0 + 200) = *v6;
  uint64_t v13 = v6[1];
  *(void *)(v0 + 208) = v13;
  swift_retain();
  id v14 = v11;
  PixelImage.init(pixelBuffer:orientation:)();
  uint64_t v15 = OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_currentRequestIdentifier;
  *(void *)(v0 + 216) = OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_currentRequestIdentifier;
  if ((*(void *)(v10 + v15) & 0x8000000000000000) != 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (qword_100518120 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v18 = *(void *)(v0 + 120);
  uint64_t v27 = *(void *)(v0 + 88);
  uint64_t v19 = (void *)qword_10055E648;
  sub_10000F214(&qword_10052E110);
  long long v26 = *(_OWORD *)(v0 + 104);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10043D4F0;
  *(void *)(inited + 32) = 0x6F726665726F7473;
  *(void *)(inited + 40) = 0xEA0000000000746ELL;
  id v21 = v19;
  *(void *)(inited + 48) = sub_10031B9F4((uint64_t)&off_1004E5B20);
  sub_10031C29C(inited);
  VisualQueryContext.init(applicationIdentifier:queryID:location:timestamp:customDetectorThreshold:)();
  uint64_t v22 = sub_1003F3144(&qword_10052E118, (void (*)(uint64_t))type metadata accessor for StreamingVisualIntelligenceProcessor);
  uint64_t v23 = swift_task_alloc();
  *(void *)(v0 + 224) = v23;
  *(_OWORD *)(v23 + 16) = v26;
  *(void *)(v23 + 32) = v1;
  *(void *)(v23 + 40) = v17;
  *(void *)(v23 + 48) = v16;
  *(void *)(v23 + 56) = v12;
  *(void *)(v23 + 64) = v13;
  *(void *)(v23 + 72) = v18;
  *(void *)(v23 + 80) = v27;
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v24;
  uint64_t v25 = sub_10000F214(&qword_10052E120);
  *uint64_t v24 = v0;
  v24[1] = sub_1003EF214;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 72, v18, v22, 0xD000000000000023, 0x800000010042D540, sub_1003F85E4, v23, v25);
}

uint64_t sub_1003EF214()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = sub_1003EF43C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 120);
    swift_task_dealloc();
    uint64_t v4 = sub_1003EF33C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1003EF33C()
{
  unint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[15];
  swift_release();
  uint64_t result = sub_100038B34(v3, v1);
  uint64_t v6 = *(void *)(v4 + v2);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[9];
    uint64_t v11 = v0[20];
    uint64_t v10 = v0[21];
    uint64_t v13 = v0[18];
    uint64_t v12 = v0[19];
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[17];
    *(void *)(v0[15] + v0[27]) = v8;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v9);
  }
  return result;
}

uint64_t sub_1003EF43C()
{
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  unint64_t v2 = v0[26];
  uint64_t v4 = v0[15];
  swift_release();
  sub_100038B34(v3, v2);
  uint64_t result = swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + v1);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v0[20];
    uint64_t v9 = v0[21];
    uint64_t v11 = v0[18];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[16];
    uint64_t v14 = v0[17];
    *(void *)(v0[15] + v0[27]) = v8;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  return result;
}

uint64_t sub_1003EF540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v34 = a7;
  uint64_t v35 = a3;
  uint64_t v38 = a2;
  uint64_t v39 = a6;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v32 = a1;
  uint64_t v33 = a10;
  uint64_t v11 = sub_10000F214(&qword_10052E128);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v31 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a9 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v16);
  uint64_t v17 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000F214(&qword_10052E130);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for VisualUnderstanding.Annotation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a8, a9);
  uint64_t v22 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v11);
  unint64_t v23 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v24 = (v15 + *(unsigned __int8 *)(v12 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v25 = (char *)swift_allocObject();
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  *((void *)v25 + 2) = a9;
  *((void *)v25 + 3) = v26;
  *((void *)v25 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v25[v23], v17, a9);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v25[v24], v31, v22);
  swift_retain();
  uint64_t v28 = (void *)VisualIntelligenceService.parseCameraFrame(visualQueryContext:image:normalizedRegionOfInterest:annotation:cachedResults:completion:)();
  swift_release();

  return sub_10000FBD8((uint64_t)v20, &qword_10052E130);
}

uint64_t sub_1003EF834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v23 = a2;
  uint64_t v7 = type metadata accessor for VisualUnderstanding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParseResult();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000F214(&qword_10052E138);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000FB74(a1, (uint64_t)v17, &qword_10052E138);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = (void *)*v17;
    sub_10000F214(&qword_10052E128);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v17, v11);
    ParseResult.visualUnderstanding.getter();
    uint64_t v19 = VisualUnderstanding.imageRegions.getter();
    __chkstk_darwin(v19);
    uint64_t v20 = v25;
    *(&v22 - 6) = v24;
    *(&v22 - 5) = v20;
    *(&v22 - 4) = v23;
    *(&v22 - 3) = (uint64_t)v10;
    *(&v22 - 2) = v26;
    uint64_t v21 = sub_1003DE4A4((void (*)(uint64_t))sub_1003F8858, (uint64_t)(&v22 - 8), v19);
    swift_bridgeObjectRelease();
    uint64_t v28 = v21;
    sub_10000F214(&qword_10052E128);
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_1003EFB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v101 = a6;
  uint64_t v99 = a5;
  uint64_t v100 = a4;
  v95[1] = a3;
  uint64_t v111 = a2;
  uint64_t v113 = a7;
  uint64_t v104 = type metadata accessor for UUID();
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v102 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for NormalizedRect();
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_10052E148);
  __chkstk_darwin(v11 - 8);
  uint64_t v108 = (char *)v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000F214(&qword_10052E150);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for VisualUnderstanding.DomainInfo();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v112 = (char *)v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v95 - v20;
  uint64_t v22 = type metadata accessor for VisualDomain();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  CGRect v127 = (char *)v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v115 = (char *)v95 - v26;
  __chkstk_darwin(v27);
  uint64_t v107 = (char *)v95 - v28;
  uint64_t v29 = VisualUnderstanding.ImageRegion.domainInfo.getter();
  uint64_t v30 = *(void *)(v29 + 16);
  uint64_t v116 = v23;
  uint64_t v109 = v17;
  if (v30)
  {
    uint64_t v106 = a1;
    uint64_t v110 = v7;
    uint64_t v31 = v17 + 16;
    uint64_t v122 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    unint64_t v32 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v105 = v29;
    unint64_t v33 = v29 + v32;
    uint64_t v34 = *(void *)(v31 + 56);
    uint64_t v120 = (void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
    uint64_t v121 = v34;
    uint64_t v123 = v31;
    long long v119 = (void (**)(char *, uint64_t))(v31 - 8);
    unint64_t v118 = (unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    long long v117 = (void (**)(char *, char *, uint64_t))(v23 + 32);
    uint64_t v35 = (char *)_swiftEmptyArrayStorage;
    uint64_t v114 = v16;
    v122(v21, v29 + v32, v16);
    while (1)
    {
      VisualUnderstanding.DomainInfo.domain.getter();
      (*v120)(v15, 0, 1, v22);
      (*v119)(v21, v16);
      if ((*v118)(v15, 1, v22) == 1)
      {
        sub_10000FBD8((uint64_t)v15, &qword_10052E150);
      }
      else
      {
        uint64_t v36 = *v117;
        uint64_t v37 = v115;
        (*v117)(v115, v15, v22);
        v36(v127, v37, v22);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v38 = (unint64_t)v35;
        }
        else {
          unint64_t v38 = sub_10032A874(0, *((void *)v35 + 2) + 1, 1, (unint64_t)v35);
        }
        unint64_t v40 = *(void *)(v38 + 16);
        unint64_t v39 = *(void *)(v38 + 24);
        if (v40 >= v39 >> 1) {
          unint64_t v38 = sub_10032A874(v39 > 1, v40 + 1, 1, v38);
        }
        *(void *)(v38 + 16) = v40 + 1;
        uint64_t v35 = (char *)v38;
        v36((char *)(v38+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(void *)(v116 + 72) * v40), v127, v22);
        uint64_t v16 = v114;
      }
      v33 += v121;
      if (!--v30) {
        break;
      }
      v122(v21, v33, v16);
    }
    swift_bridgeObjectRelease();
    uint64_t v41 = v110;
    uint64_t v42 = v106;
  }
  else
  {
    uint64_t v42 = a1;
    uint64_t v41 = v7;
    swift_bridgeObjectRelease();
    uint64_t v35 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v43 = *((void *)v35 + 2);
  uint64_t v44 = v116;
  CGRect v127 = v35;
  if (v43
    && (uint64_t v45 = v107,
        (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v107, &v35[(*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80)], v22), char v46 = sub_1003F0664(), (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v22), v46 != 2))
  {
    LODWORD(v123) = v46 != 0;
  }
  else
  {
    if ((*(unsigned char *)(v111 + OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_detectUnusedDomains) & 1) == 0) {
      goto LABEL_30;
    }
    LODWORD(v123) = 0;
  }
  uint64_t v47 = VisualUnderstanding.ImageRegion.domainInfo.getter();
  uint64_t v48 = v109;
  uint64_t v49 = v112;
  uint64_t v50 = (uint64_t)v108;
  if (*(void *)(v47 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v109 + 16))(v108, v47 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80)), v16);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v50, v51, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v50, 1, v16) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000FBD8(v50, &qword_10052E148);
LABEL_31:
    uint64_t v56 = type metadata accessor for ParseDetectorResult(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v113, 1, 1, v56);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v49, v50, v16);
  VisualUnderstanding.DomainInfo.detectionInfo.getter();
  if (!v53)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v16);
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  LODWORD(v120) = v52;
  swift_bridgeObjectRelease();
  uint64_t v110 = v41;
  uint64_t v54 = v48;
  if (v123)
  {
    uint64_t v121 = VisualUnderstanding.payload.getter();
    uint64_t v122 = v55;
  }
  else
  {
    uint64_t v121 = 0;
    uint64_t v122 = (void (*)(char *, unint64_t, uint64_t))0xF000000000000000;
  }
  uint64_t v58 = v96;
  VisualUnderstanding.ImageRegion.boundingBox.getter();
  NormalizedRect.bottomLeftCGRect.getter();
  CGFloat v60 = v59;
  double v62 = v61;
  CGFloat v64 = v63;
  double v66 = v65;
  (*(void (**)(char *, uint64_t))(v97 + 8))(v58, v98);
  uint64_t v67 = v102;
  UUID.init()();
  type metadata accessor for CVCoordinator(0);
  memset(v125, 0, sizeof(v125));
  char v126 = 1;
  uint64_t v68 = v99;
  uint64_t v69 = v101;
  sub_1001E9140((uint64_t)v125, v99, v101, (CGFloat *)v124, v60, 1.0 - v62 - v66, v64, v66);
  double v70 = sub_10030CA60(v68, v69);
  double v71 = sub_10030CA28(v68, v69);
  uint64_t v72 = v112;
  uint64_t v73 = VisualUnderstanding.DomainInfo.glyphName.getter();
  uint64_t v75 = 0x6E6F697473657571;
  if (v74) {
    uint64_t v75 = v73;
  }
  long long v119 = (void (**)(char *, uint64_t))v75;
  unint64_t v76 = 0xEC0000006B72616DLL;
  if (v74) {
    unint64_t v76 = v74;
  }
  unint64_t v118 = (unsigned int (**)(char *, uint64_t, uint64_t))v76;
  uint64_t v77 = VisualUnderstanding.DomainInfo.displayLabel.getter();
  if (v78) {
    uint64_t v79 = v77;
  }
  else {
    uint64_t v79 = 0;
  }
  if (v78) {
    unint64_t v80 = v78;
  }
  else {
    unint64_t v80 = 0xE000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v72, v16);
  uint64_t v81 = (int *)type metadata accessor for ParseDetectorResult(0);
  uint64_t v82 = v113;
  uint64_t v83 = v113 + v81[13];
  uint64_t v84 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v85 = *(void *)(v84 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v83, v42, v84);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(v83, 0, 1, v84);
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v82, v67, v104);
  *(_DWORD *)(v82 + v81[5]) = v120;
  char v86 = (_OWORD *)(v82 + v81[6]);
  long long v87 = v124[1];
  _OWORD *v86 = v124[0];
  v86[1] = v87;
  long long v88 = v124[3];
  v86[2] = v124[2];
  v86[3] = v88;
  *(void *)(v82 + v81[7]) = v127;
  *(double *)(v82 + v81[8]) = v70;
  *(double *)(v82 + v81[9]) = v71;
  *(unsigned char *)(v82 + v81[10]) = v123;
  uint64_t v89 = (void (***)(char *, uint64_t))(v82 + v81[11]);
  uint64_t v90 = v118;
  char *v89 = v119;
  v89[1] = (void (**)(char *, uint64_t))v90;
  char v91 = (uint64_t *)(v82 + v81[12]);
  *char v91 = v79;
  v91[1] = v80;
  uint64_t v92 = (uint64_t *)(v82 + v81[14]);
  uint64_t v93 = v122;
  uint64_t *v92 = v121;
  v92[1] = (uint64_t)v93;
  uint64_t v94 = (void *)(v82 + v81[15]);
  *uint64_t v94 = 0;
  v94[1] = 0;
  v94[2] = 0;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v81 - 1) + 56))(v82, 0, 1, v81);
}

uint64_t sub_1003F0664()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for VisualDomain();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - v7;
  if (qword_100517FF0 != -1) {
    swift_once();
  }
  if (byte_10055E433 != 1) {
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v1, v2);
  static VisualDomain.animals.getter();
  sub_1003F3144((unint64_t *)&qword_100519868, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if (v9) {
    goto LABEL_12;
  }
  static VisualDomain.nature.getter();
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v5, v2);
  if (v11) {
    goto LABEL_12;
  }
  static VisualDomain.landmark.getter();
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v5, v2);
  if (v12) {
    goto LABEL_12;
  }
  static VisualDomain.cats.getter();
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v5, v2);
  if (v13) {
    goto LABEL_12;
  }
  static VisualDomain.dogs.getter();
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v5, v2);
  if (v14) {
    goto LABEL_12;
  }
  static VisualDomain.birds.getter();
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v5, v2);
  if ((v15 & 1) != 0
    || (static VisualDomain.mammals.getter(),
        char v16 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v10(v5, v2),
        (v16 & 1) != 0)
    || (static VisualDomain.insects.getter(),
        char v17 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v10(v5, v2),
        (v17 & 1) != 0))
  {
LABEL_12:
    v10(v8, v2);
    return 1;
  }
  static VisualDomain.reptiles.getter();
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v10(v5, v2);
  v10(v8, v2);
  if (v19) {
    return 1;
  }
LABEL_15:
  if (qword_100518118 != -1) {
    swift_once();
  }
  if (sub_1003DF4B0(v1, qword_10055E640)) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t sub_1003F0A50()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Tamale36StreamingVisualIntelligenceProcessor_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003F0AD4()
{
  return type metadata accessor for StreamingVisualIntelligenceProcessor(0);
}

uint64_t type metadata accessor for StreamingVisualIntelligenceProcessor(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052DC98);
}

uint64_t sub_1003F0AFC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_1003F0BB8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[10];
    uint64_t v12 = a2[11];
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    uint64_t v13 = a3[11];
    __dst = (void *)(a1 + v13);
    uint64_t v25 = (char *)a2 + v13;
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v12;
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v14 - 8);
    char v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v25, 1, v14))
    {
      uint64_t v16 = sub_10000F214(&qword_10051E070);
      memcpy(__dst, v25, *(void *)(*(void *)(v16 - 8) + 64));
      uint64_t v17 = v26;
    }
    else
    {
      uint64_t v17 = v26;
      (*(void (**)(void *, char *, uint64_t))(v26 + 16))(__dst, v25, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v19 = a3[12];
    uint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (v15((char *)a2 + v19, 1, v14))
    {
      uint64_t v22 = sub_10000F214(&qword_10051E070);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v21, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v14);
    }
    uint64_t v23 = a3[14];
    *(void *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(void *)((char *)v4 + v23) = *(uint64_t *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1003F0E74(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 48);
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003F0FC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v12 = a3[11];
  __dst = (void *)(a1 + v12);
  uint64_t v24 = (const void *)(a2 + v12);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v15 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v24, 1, v15))
  {
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(__dst, v24, *(void *)(*(void *)(v16 - 8) + 64));
    uint64_t v17 = v25;
  }
  else
  {
    uint64_t v17 = v25;
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(__dst, v24, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v15);
  }
  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  if (v14((const void *)(a2 + v18), 1, v15))
  {
    uint64_t v21 = sub_10000F214(&qword_10051E070);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v15);
  }
  uint64_t v22 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003F1228(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000F214(&qword_10051E070);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[12];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003F15A4(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  int v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000F214(&qword_10051E070);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = a3[12];
  int v18 = (void *)(a1 + v17);
  int v19 = (const void *)(a2 + v17);
  if (v15((const void *)(a2 + v17), 1, v13))
  {
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v18, v19, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
  }
  uint64_t v21 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  return a1;
}

uint64_t sub_1003F1798(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v12 = a3[11];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_10000F214(&qword_10051E070);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = a3[12];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  int v24 = v17((void *)(a1 + v21), 1, v15);
  int v25 = v17(v23, 1, v15);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v22, v23, v15);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v26 = sub_10000F214(&qword_10051E070);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v22, v23, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
LABEL_13:
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003F1AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F1AB8);
}

uint64_t sub_1003F1AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000F214(&qword_10051E070);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003F1B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F1B80);
}

uint64_t sub_1003F1B80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000F214(&qword_10051E070);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for VisualIntelligenceLookupResult(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052DE00);
}

void sub_1003F1C4C()
{
  sub_1003F3060(319, (unint64_t *)&qword_10051E0E0, (void (*)(uint64_t))&type metadata accessor for URL);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_1003F1D30(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5]) = *(_DWORD *)((char *)a2 + a3[5]);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    uint64_t v10 = (_OWORD *)((char *)a2 + v8);
    long long v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    long long v12 = v10[3];
    v9[2] = v10[2];
    v9[3] = v12;
    uint64_t v13 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[10];
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[11];
    uint64_t v16 = a3[12];
    uint64_t v17 = (void *)((char *)a1 + v15);
    int v18 = (void *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = (void *)((char *)a1 + v16);
    uint64_t v21 = (void *)((char *)a2 + v16);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[13];
    __dst = (char *)a1 + v23;
    int v24 = (char *)a2 + v23;
    uint64_t v25 = type metadata accessor for VisualUnderstanding.ImageRegion();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = sub_10000F214(&qword_100524BD0);
      memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    uint64_t v30 = a3[14];
    uint64_t v31 = (char *)a1 + v30;
    unint64_t v32 = (char *)a2 + v30;
    unint64_t v33 = *((void *)v32 + 1);
    if (v33 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    }
    else
    {
      uint64_t v34 = *(void *)v32;
      sub_100038528(*(void *)v32, *((void *)v32 + 1));
      *(void *)uint64_t v31 = v34;
      *((void *)v31 + 1) = v33;
    }
    uint64_t v35 = a3[15];
    uint64_t v36 = (void *)((char *)a1 + v35);
    uint64_t v37 = (void *)((char *)a2 + v35);
    if (*v37)
    {
      uint64_t v38 = v37[1];
      uint64_t v39 = v37[2];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      int8x16_t v36[2] = v39;
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      int8x16_t v36[2] = v37[2];
    }
  }
  return a1;
}

uint64_t sub_1003F1FF8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[13];
  uint64_t v6 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[14]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100038B34(*v8, v9);
  }
  uint64_t result = *(void *)(a1 + a2[15]);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003F2168(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  unint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[11];
  uint64_t v15 = a3[12];
  uint64_t v16 = (void *)(a1 + v14);
  uint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (void *)(a1 + v15);
  uint64_t v20 = (void *)(a2 + v15);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a3[13];
  __dst = (void *)(a1 + v22);
  uint64_t v23 = (const void *)(a2 + v22);
  uint64_t v24 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v23, 1, v24))
  {
    uint64_t v27 = sub_10000F214(&qword_100524BD0);
    memcpy(__dst, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(__dst, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
  }
  uint64_t v28 = a3[14];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (uint64_t *)(a2 + v28);
  unint64_t v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  }
  else
  {
    uint64_t v32 = *v30;
    sub_100038528(*v30, v30[1]);
    *(void *)uint64_t v29 = v32;
    *(void *)(v29 + 8) = v31;
  }
  uint64_t v33 = a3[15];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  if (*v35)
  {
    uint64_t v36 = v35[1];
    uint64_t v37 = v35[2];
    void *v34 = *v35;
    v34[1] = v36;
    v34[2] = v37;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    v34[2] = v35[2];
  }
  return a1;
}

uint64_t sub_1003F23E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v8[6] = v9[6];
  v8[7] = v9[7];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v10 = a3[11];
  long long v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *long long v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[12];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[13];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    uint64_t v24 = sub_10000F214(&qword_100524BD0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  uint64_t v25 = a3[14];
  uint64_t v26 = (uint64_t *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  unint64_t v28 = *(void *)(a2 + v25 + 8);
  if (*(void *)(a1 + v25 + 8) >> 60 == 15)
  {
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *v27;
      sub_100038528(v29, v28);
      uint64_t *v26 = v29;
      v26[1] = v28;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v28 >> 60 == 15)
  {
    sub_1000A6840((uint64_t)v26);
LABEL_12:
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    goto LABEL_14;
  }
  uint64_t v30 = *v27;
  sub_100038528(v30, v28);
  uint64_t v31 = *v26;
  unint64_t v32 = v26[1];
  uint64_t *v26 = v30;
  v26[1] = v28;
  sub_100038B34(v31, v32);
LABEL_14:
  uint64_t v33 = a3[15];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (long long *)(a2 + v33);
  uint64_t v36 = *(void *)(a2 + v33);
  if (*(void *)(a1 + v33))
  {
    if (v36)
    {
      void *v34 = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v37 = *((void *)v35 + 2);
      v34[1] = *((void *)v35 + 1);
      v34[2] = v37;
      swift_retain();
      swift_release();
    }
    else
    {
      sub_10000FBD8(a1 + v33, &qword_10052DE60);
      uint64_t v39 = *((void *)v35 + 2);
      *(_OWORD *)uint64_t v34 = *v35;
      v34[2] = v39;
    }
  }
  else if (v36)
  {
    void *v34 = v36;
    uint64_t v38 = *((void *)v35 + 2);
    v34[1] = *((void *)v35 + 1);
    v34[2] = v38;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v40 = *v35;
    v34[2] = *((void *)v35 + 2);
    *(_OWORD *)uint64_t v34 = v40;
  }
  return a1;
}

uint64_t sub_1003F27A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  unint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[13];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_10000F214(&qword_100524BD0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  return a1;
}

uint64_t sub_1003F2984(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_DWORD *)(a1 + a3[5]) = *(_DWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  unint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  void *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[12];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[13];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
LABEL_6:
    uint64_t v31 = sub_10000F214(&qword_100524BD0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_7:
  uint64_t v32 = a3[14];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  unint64_t v35 = *(void *)(a1 + v32 + 8);
  if (v35 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    goto LABEL_12;
  }
  unint64_t v36 = *(void *)(v34 + 8);
  if (v36 >> 60 == 15)
  {
    sub_1000A6840(v33);
    goto LABEL_10;
  }
  uint64_t v37 = *(void *)v33;
  *(void *)uint64_t v33 = *(void *)v34;
  *(void *)(v33 + 8) = v36;
  sub_100038B34(v37, v35);
LABEL_12:
  uint64_t v38 = a3[15];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  if (!*(void *)(a1 + v38))
  {
LABEL_16:
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    *(void *)(v39 + 16) = *(void *)(v40 + 16);
    return a1;
  }
  if (!*(void *)v40)
  {
    sub_10000FBD8(v39, &qword_10052DE60);
    goto LABEL_16;
  }
  *(void *)uint64_t v39 = *(void *)v40;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v39 + 8) = *(_OWORD *)(v40 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1003F2C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F2C88);
}

uint64_t sub_1003F2C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_10000F214(&qword_100524BD0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 52);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1003F2DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F2DCC);
}

uint64_t sub_1003F2DCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_10000F214(&qword_100524BD0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 52);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for ParseDetectorResult(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052DEC0);
}

void sub_1003F2F1C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1003F3060(319, (unint64_t *)&unk_10052DED0, (void (*)(uint64_t))&type metadata accessor for VisualUnderstanding.ImageRegion);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1003F3060(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1003F30B4()
{
  return sub_1003F3144(&qword_10052DF28, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
}

uint64_t sub_1003F30FC()
{
  return sub_1003F3144((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1003F3144(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003F318C(void *a1)
{
  a1[1] = sub_1003F3144(&qword_10052DFB8, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
  a1[2] = sub_1003F3144(&qword_10052DFC0, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
  a1[3] = sub_1003F3144(&qword_10052DFC8, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
  uint64_t result = sub_1003F3144(&qword_10052DFD0, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
  a1[4] = result;
  return result;
}

uint64_t sub_1003F3260()
{
  return sub_1003F3144(&qword_10052DFD8, (void (*)(uint64_t))type metadata accessor for VisualIntelligenceLookupResult);
}

uint64_t sub_1003F32A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10052E010 + dword_10052E010);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_10020EA98;
  return v15(a1, a2, a3, a6, a7);
}

uint64_t sub_1003F338C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = a1;
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v4;
  void *v4 = v2;
  v4[1] = sub_10032840C;
  return sub_1003EE6E4(v2 + 16, a2);
}

uint64_t sub_1003F343C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_10000F878;
  return sub_1003EE9F8();
}

uint64_t sub_1003F34CC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_10032AC58(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1003F36EC@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100038528(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1003F3950);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100038B34(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1003F3960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003F3B3C(a1, (uint64_t *)&unk_100521050, (void (*)(void))sub_1001F5898, a2);
}

uint64_t sub_1003F3980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10032AE98(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001F5A58();
      uint64_t v9 = v19;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v18 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 32))(a2, v10 + *(void *)(v18 + 72) * v6, v11);
    sub_1003F4118(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

uint64_t sub_1003F3B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003F3B3C(a1, &qword_1005242C8, (void (*)(void))sub_1001F6300, a2);
}

uint64_t sub_1003F3B3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10032ADC4(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v25 = *v7;
    uint64_t *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      uint64_t v13 = v25;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v10, v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = sub_10000F214(a2);
    uint64_t v24 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 32))(a4, v16 + *(void *)(v24 + 72) * v10, v17);
    sub_1003F5320(v10, v13, a2);
    uint64_t *v7 = v13;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v19 = a4;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v22 = sub_10000F214(a2);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v21 = v22;
    uint64_t v19 = a4;
    uint64_t v20 = 1;
  }

  return v18(v19, v20, 1, v21);
}

uint64_t sub_1003F3D24(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10032ADC4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F6738();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1003F44F4(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1003F3E28(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10032ADC4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F69D8();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_1003F47EC(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1003F3F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003F3B3C(a1, &qword_1005250D0, (void (*)(void))sub_1001F8460, a2);
}

void sub_1003F3F64(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              void *v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              void *v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1003F4118(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13) {
            goto LABEL_6;
          }
        }
        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = (void *)(v16 + 8 * v3);
        uint64_t v18 = (void *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1) {
          void *v17 = *v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72);
        int64_t v21 = v20 * v3;
        unint64_t v22 = v19 + v20 * v3;
        int64_t v23 = v20 * v6;
        unint64_t v24 = v19 + v20 * v6 + v20;
        if (v21 < v23 || v22 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v21 == v23) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v26 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  uint64_t *v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1003F4304(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(0);
        uint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v9 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v10 = *(void *)(a2 + 48);
        id v11 = (unsigned char *)(v10 + v3);
        Swift::Int v12 = (unsigned char *)(v10 + v6);
        if (v3 != v6 || v11 >= v12 + 1) {
          *id v11 = *v12;
        }
        uint64_t v13 = *(void *)(a2 + 56);
        uint64_t v14 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72);
        int64_t v15 = v14 * v3;
        uint64_t result = v13 + v14 * v3;
        int64_t v16 = v14 * v6;
        unint64_t v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v15 == v16) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v9 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v9) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1003F44F4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_1003F3144((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            BOOL v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1003F47EC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v35 = (v12 + 1) & v11;
      unint64_t v36 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v37 = v5 + 16;
      uint64_t v34 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v11;
      do
      {
        uint64_t v16 = v8;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v10;
        uint64_t v19 = v15;
        v36(v7, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1003F3144((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v34)(v7, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v35)
        {
          if (v21 >= v35 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v8 = v16;
            if (v17 * a1 < v18
              || (uint64_t v14 = v17, *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t v25 = v24 + 24 * a1;
            uint64_t v26 = (long long *)(v24 + 24 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= (unint64_t)v26 + 24))
            {
              long long v27 = *v26;
              *(void *)(v25 + 16) = *((void *)v26 + 2);
              *(_OWORD *)unint64_t v25 = v27;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v35 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v8 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v15;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    BOOL v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1 << a1) - 1;
  }
  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1003F4B08(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v50 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v51 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v49 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v10 - 8);
  uint64_t v48 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v47 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for CVDetection();
  uint64_t v14 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = a2 + 64;
  uint64_t v53 = a2;
  uint64_t v21 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v22 = (a1 + 1) & ~v21;
  if (((1 << v22) & *(void *)(a2 + 64 + 8 * (v22 >> 6))) != 0)
  {
    uint64_t v23 = ~v21;
    uint64_t v24 = _HashTable.previousHole(before:)();
    if ((*(void *)(v20 + 8 * (v22 >> 6)) & (1 << v22)) != 0)
    {
      unint64_t v25 = (v24 + 1) & v23;
      uint64_t v26 = *(void *)(v14 + 72);
      uint64_t v27 = v23;
      uint64_t v28 = v53;
      uint64_t v52 = v20;
      while (1)
      {
        uint64_t v29 = v26;
        int64_t v30 = v26 * v22;
        sub_1003F6CC0(*(void *)(v28 + 48) + v26 * v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
        Hasher.init(_seed:)();
        sub_1003F6CC0((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CVDetection);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v31 = v48;
            sub_1003F80E4((uint64_t)v16, v48, type metadata accessor for ParseDetectorResult);
            Hasher._combine(_:)(1uLL);
            sub_1003E7010((uint64_t)v55);
            BOOL v32 = type metadata accessor for ParseDetectorResult;
            break;
          case 2u:
            uint64_t v31 = v49;
            sub_1003F80E4((uint64_t)v16, v49, type metadata accessor for TextDetectorResult);
            Hasher._combine(_:)(2uLL);
            sub_10032169C((uint64_t)v55);
            BOOL v32 = type metadata accessor for TextDetectorResult;
            break;
          case 3u:
            uint64_t v31 = v51;
            sub_1003F80E4((uint64_t)v16, v51, type metadata accessor for StreamingBarcodeDetectorResult);
            Swift::UInt v33 = 3;
            goto LABEL_12;
          case 4u:
            uint64_t v31 = v51;
            sub_1003F80E4((uint64_t)v16, v51, type metadata accessor for StreamingBarcodeDetectorResult);
            Swift::UInt v33 = 4;
LABEL_12:
            Hasher._combine(_:)(v33);
            sub_100165074();
            BOOL v32 = type metadata accessor for StreamingBarcodeDetectorResult;
            break;
          case 5u:
            uint64_t v31 = v50;
            sub_1003F80E4((uint64_t)v16, v50, type metadata accessor for StreamingTextDetectorResult);
            Hasher._combine(_:)(5uLL);
            sub_1001665AC();
            BOOL v32 = type metadata accessor for StreamingTextDetectorResult;
            break;
          default:
            uint64_t v31 = v47;
            sub_1003F80E4((uint64_t)v16, v47, type metadata accessor for ObjectDetectorResult);
            Hasher._combine(_:)(0);
            sub_10031E668();
            BOOL v32 = type metadata accessor for ObjectDetectorResult;
            break;
        }
        sub_1003F6D28(v31, v32);
        Swift::Int v34 = Hasher._finalize()();
        sub_1003F6D28((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CVDetection);
        Swift::Int v35 = v34 & v27;
        uint64_t v28 = v53;
        if (a1 >= (uint64_t)v25)
        {
          uint64_t v26 = v29;
          if (v35 >= v25 && a1 >= v35)
          {
LABEL_20:
            if (v26 * a1 < v30
              || *(void *)(v53 + 48) + v26 * a1 >= (unint64_t)(*(void *)(v53 + 48) + v30 + v26))
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v20 = v52;
            }
            else
            {
              BOOL v36 = v26 * a1 == v30;
              uint64_t v20 = v52;
              if (!v36) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t v37 = *(void *)(v28 + 56);
            uint64_t v38 = (unsigned char *)(v37 + a1);
            uint64_t v39 = (unsigned char *)(v37 + v22);
            if (a1 != v22 || (a1 = v22, v38 >= v39 + 1))
            {
              unsigned char *v38 = *v39;
              a1 = v22;
            }
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v26 = v29;
          if (v35 >= v25 || a1 >= v35) {
            goto LABEL_20;
          }
        }
        uint64_t v20 = v52;
LABEL_5:
        unint64_t v22 = (v22 + 1) & v27;
        if (((*(void *)(v20 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
          goto LABEL_30;
        }
      }
    }
    uint64_t v28 = v53;
LABEL_30:
    uint64_t v40 = (uint64_t *)(v20 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v42 = *v40;
    uint64_t v41 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v40 = (uint64_t *)(v20 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v41 = *v40;
    uint64_t v42 = (-1 << a1) - 1;
    uint64_t v28 = v53;
  }
  *uint64_t v40 = v41 & v42;
  uint64_t v43 = *(void *)(v28 + 16);
  BOOL v44 = __OFSUB__(v43, 1);
  uint64_t v45 = v43 - 1;
  if (v44)
  {
    __break(1u);
    JUMPOUT(0x1003F5170);
  }
  *(void *)(v28 + 16) = v45;
  ++*(_DWORD *)(v28 + 36);
}

unint64_t sub_1003F5188(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              void *v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1003F5320(int64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v41 = (v13 + 1) & v12;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v42 = v14;
      uint64_t v39 = (void (**)(char *, uint64_t))(v14 - 8);
      uint64_t v40 = v15;
      uint64_t v37 = v12;
      do
      {
        uint64_t v17 = v9;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v11;
        v40(v8, *(void *)(a2 + 48) + v16 * v11, v5);
        sub_1003F3144((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v39)(v8, v5);
        unint64_t v21 = v20 & v12;
        if (a1 >= (uint64_t)v41)
        {
          if (v21 >= v41 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(sub_10000F214(v38) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t v27 = v24 + v25 * a1;
            int64_t v28 = v25 * v11;
            unint64_t v29 = v24 + v25 * v11 + v25;
            BOOL v30 = v26 < v28 || v27 >= v29;
            uint64_t v9 = v17;
            if (v30)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v37;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v37;
              if (v26 != v28)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v41 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v31 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v31 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1 << a1) - 1;
  }
  *uint64_t v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1003F566C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v6 = 0;
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      int64_t v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(v11 + 8 * v7);
      if (!v9) {
        break;
      }
    }
LABEL_18:
    uint64_t v4 = (v9 - 1) & v9;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
  }
  int64_t v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  uint64_t v9 = *(void *)(v11 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v11 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_1003F5834(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5 = a2;
  if (a2 >= result)
  {
    if (result == a2) {
      return 0;
    }
    uint64_t v6 = 1;
    uint64_t v7 = a2;
    unint64_t v5 = result;
  }
  else
  {
    uint64_t v6 = -1;
    uint64_t v7 = result;
  }
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a3 + 16);
  while (1)
  {
    BOOL v10 = __OFADD__(v8, v6);
    v8 += v6;
    if (v10) {
      break;
    }
    if (v5 == v9) {
      goto LABEL_20;
    }
    unint64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_21;
    }
    unint64_t v5 = v9;
    if (v11 != v9)
    {
      uint64_t v12 = type metadata accessor for ParseDetectorResult(0);
      uint64_t v13 = *(void *)(v12 - 8);
      uint64_t result = v12 - 8;
      uint64_t v14 = v13;
      uint64_t v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      unint64_t v5 = v11;
      while (v5 < v9)
      {
        uint64_t v16 = v15 + *(void *)(v14 + 72) * v5;
        swift_retain();
        LOBYTE(v16) = a4(v16);
        uint64_t result = swift_release();
        if (v16) {
          goto LABEL_8;
        }
        if (v9 == ++v5)
        {
          unint64_t v5 = v9;
          goto LABEL_8;
        }
      }
      __break(1u);
      break;
    }
LABEL_8:
    if (v5 == v7) {
      return v8;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1003F5994(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1003F36EC((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1003F5A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1003F36EC(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1003F5B24(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1003F5D8CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100038528(a3, a4);
                  sub_100038528(a1, a2);
                  char v17 = sub_1003F5A6C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_100038B34(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100038528(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1003F5A6C(v21, v22, v20, a3, a4);
                  sub_100038B34(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100038528(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100038528(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1003F5994(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_100038B34(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1003F5DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v59 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000F214(&qword_10051E548);
  __chkstk_darwin(v6);
  uint64_t v58 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v50[-v9];
  uint64_t v11 = sub_10000F214(&qword_10051E070);
  __chkstk_darwin(v11 - 8);
  uint64_t v57 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v15 = &v50[-v14];
  __chkstk_darwin(v16);
  uint64_t v18 = &v50[-v17];
  __chkstk_darwin(v19);
  uint64_t v21 = &v50[-v20];
  __chkstk_darwin(v22);
  uint64_t v24 = &v50[-v23];
  __chkstk_darwin(v25);
  unint64_t v27 = &v50[-v26];
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v29 = 0, (v28 & 1) != 0))
  {
    if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v29 = 0, (v30 & 1) != 0))
    {
      uint64_t v31 = *(void *)(a1 + 40);
      uint64_t v32 = *(void *)(a2 + 40);
      if (v31)
      {
        if (!v32) {
          goto LABEL_44;
        }
        if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v31 != v32)
        {
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v29 = 0;
          if ((v33 & 1) == 0) {
            return v29 & 1;
          }
        }
      }
      else if (v32)
      {
        goto LABEL_44;
      }
      uint64_t v34 = *(void *)(a1 + 56);
      uint64_t v35 = *(void *)(a2 + 56);
      if (v34)
      {
        if (!v35) {
          goto LABEL_44;
        }
        if (*(void *)(a1 + 48) != *(void *)(a2 + 48) || v34 != v35)
        {
          char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v29 = 0;
          if ((v36 & 1) == 0) {
            return v29 & 1;
          }
        }
      }
      else if (v35)
      {
        goto LABEL_44;
      }
      uint64_t v37 = *(void *)(a1 + 72);
      uint64_t v38 = *(void *)(a2 + 72);
      if (v37)
      {
        if (!v38) {
          goto LABEL_44;
        }
        if (*(void *)(a1 + 64) != *(void *)(a2 + 64) || v37 != v38)
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          char v29 = 0;
          if ((v39 & 1) == 0) {
            return v29 & 1;
          }
        }
      }
      else if (v38)
      {
        goto LABEL_44;
      }
      if (*(void *)(a1 + 80) != *(void *)(a2 + 80) || *(void *)(a1 + 88) != *(void *)(a2 + 88))
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v29 = 0;
        if ((v40 & 1) == 0) {
          return v29 & 1;
        }
      }
      if (*(float *)(a1 + 96) != *(float *)(a2 + 96))
      {
LABEL_44:
        char v29 = 0;
        return v29 & 1;
      }
      uint64_t v55 = type metadata accessor for VisualIntelligenceLookupResult(0);
      sub_10000FB74(a1 + *(int *)(v55 + 44), (uint64_t)v27, &qword_10051E070);
      sub_10000FB74(a2 + *(int *)(v55 + 44), (uint64_t)v24, &qword_10051E070);
      uint64_t v56 = (uint64_t)&v10[*(int *)(v6 + 48)];
      sub_10000FB74((uint64_t)v27, (uint64_t)v10, &qword_10051E070);
      sub_10000FB74((uint64_t)v24, v56, &qword_10051E070);
      uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
      uint64_t v54 = v60 + 48;
      if (v53((uint64_t)v10, 1, v4) == 1)
      {
        sub_10000FBD8((uint64_t)v24, &qword_10051E070);
        sub_10000FBD8((uint64_t)v27, &qword_10051E070);
        if (v53(v56, 1, v4) == 1)
        {
          sub_10000FBD8((uint64_t)v10, &qword_10051E070);
LABEL_38:
          uint64_t v42 = (int *)v55;
          sub_10000FB74(a1 + *(int *)(v55 + 48), (uint64_t)v18, &qword_10051E070);
          sub_10000FB74(a2 + v42[12], (uint64_t)v15, &qword_10051E070);
          uint64_t v10 = v58;
          uint64_t v43 = (uint64_t)&v58[*(int *)(v6 + 48)];
          sub_10000FB74((uint64_t)v18, (uint64_t)v58, &qword_10051E070);
          sub_10000FB74((uint64_t)v15, v43, &qword_10051E070);
          BOOL v44 = v53;
          if (v53((uint64_t)v10, 1, v4) == 1)
          {
            sub_10000FBD8((uint64_t)v15, &qword_10051E070);
            sub_10000FBD8((uint64_t)v18, &qword_10051E070);
            if (v44(v43, 1, v4) == 1)
            {
              sub_10000FBD8((uint64_t)v10, &qword_10051E070);
              goto LABEL_47;
            }
            goto LABEL_43;
          }
          uint64_t v45 = v57;
          sub_10000FB74((uint64_t)v10, (uint64_t)v57, &qword_10051E070);
          if (v44(v43, 1, v4) == 1)
          {
            sub_10000FBD8((uint64_t)v15, &qword_10051E070);
            sub_10000FBD8((uint64_t)v18, &qword_10051E070);
            (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v45, v4);
            goto LABEL_43;
          }
          uint64_t v47 = v59;
          uint64_t v48 = v60;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 32))(v59, v43, v4);
          sub_1003F3144((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
          LODWORD(v56) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v49 = *(void (**)(unsigned char *, uint64_t))(v48 + 8);
          v49(v47, v4);
          sub_10000FBD8((uint64_t)v15, &qword_10051E070);
          sub_10000FBD8((uint64_t)v18, &qword_10051E070);
          v49(v45, v4);
          sub_10000FBD8((uint64_t)v10, &qword_10051E070);
          uint64_t v42 = (int *)v55;
          if (v56)
          {
LABEL_47:
            if (sub_1003F34CC(*(void *)(a1 + v42[13]), *(void *)(a2 + v42[13])))
            {
              char v29 = sub_1003E1C78(*(void *)(a1 + v42[14]), *(void *)(a2 + v42[14]));
              return v29 & 1;
            }
            goto LABEL_44;
          }
          goto LABEL_44;
        }
      }
      else
      {
        sub_10000FB74((uint64_t)v10, (uint64_t)v21, &qword_10051E070);
        if (v53(v56, 1, v4) != 1)
        {
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 32))(v59, v56, v4);
          sub_1003F3144((unint64_t *)&unk_10051E550, (void (*)(uint64_t))&type metadata accessor for URL);
          int v51 = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v41 = *(void (**)(unsigned char *, uint64_t))(v60 + 8);
          uint64_t v52 = v60 + 8;
          uint64_t v56 = (uint64_t)v41;
          v41(v59, v4);
          sub_10000FBD8((uint64_t)v24, &qword_10051E070);
          sub_10000FBD8((uint64_t)v27, &qword_10051E070);
          ((void (*)(unsigned char *, uint64_t))v56)(v21, v4);
          sub_10000FBD8((uint64_t)v10, &qword_10051E070);
          if ((v51 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_38;
        }
        sub_10000FBD8((uint64_t)v24, &qword_10051E070);
        sub_10000FBD8((uint64_t)v27, &qword_10051E070);
        (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v21, v4);
      }
LABEL_43:
      sub_10000FBD8((uint64_t)v10, &qword_10051E548);
      goto LABEL_44;
    }
  }
  return v29 & 1;
}

BOOL sub_1003F65EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052DFF8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000F214(&qword_100524BD0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v57 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v57 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v59 = v5;
  uint64_t v20 = type metadata accessor for ParseDetectorResult(0);
  if (*(float *)(a1 + *(int *)(v20 + 20)) != *(float *)(a2 + *(int *)(v20 + 20))) {
    return 0;
  }
  uint64_t v21 = (int *)v20;
  uint64_t v22 = (_OWORD *)(a1 + *(int *)(v20 + 24));
  long long v23 = v22[3];
  void v61[2] = v22[2];
  v61[3] = v23;
  long long v24 = v22[1];
  v61[0] = *v22;
  v61[1] = v24;
  uint64_t v25 = (_OWORD *)(a2 + *(int *)(v20 + 24));
  long long v26 = v25[3];
  v62[2] = v25[2];
  v62[3] = v26;
  long long v27 = v25[1];
  v62[0] = *v25;
  v62[1] = v27;
  if (!sub_1004027A4((double *)v61, (double *)v62)
    || (sub_1003E33F0(*(void *)(a1 + v21[7]), *(void *)(a2 + v21[7])) & 1) == 0
    || *(double *)(a1 + v21[8]) != *(double *)(a2 + v21[8])
    || *(double *)(a1 + v21[9]) != *(double *)(a2 + v21[9])
    || *(unsigned __int8 *)(a1 + v21[10]) != *(unsigned __int8 *)(a2 + v21[10]))
  {
    return 0;
  }
  uint64_t v28 = v21[11];
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v30 = *(void *)(a1 + v28 + 8);
  uint64_t v31 = (void *)(a2 + v28);
  if (v29 == *v31 && v30 == v31[1]
    || (v32 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v32 & 1) != 0))
  {
    if ((uint64_t v34 = v21[12],
          uint64_t v35 = *(void *)(a1 + v34),
          uint64_t v36 = *(void *)(a1 + v34 + 8),
          uint64_t v37 = (void *)(a2 + v34),
          v35 == *v37)
      && v36 == v37[1]
      || (v38 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v38 & 1) != 0))
    {
      sub_10000FB74(a1 + v21[13], (uint64_t)v19, &qword_100524BD0);
      sub_10000FB74(a2 + v21[13], (uint64_t)v16, &qword_100524BD0);
      uint64_t v39 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_10000FB74((uint64_t)v19, (uint64_t)v10, &qword_100524BD0);
      uint64_t v58 = v39;
      sub_10000FB74((uint64_t)v16, v39, &qword_100524BD0);
      uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
      if (v57((uint64_t)v10, 1, v4) == 1)
      {
        sub_10000FBD8((uint64_t)v16, &qword_100524BD0);
        sub_10000FBD8((uint64_t)v19, &qword_100524BD0);
        if (v57(v58, 1, v4) == 1)
        {
          sub_10000FBD8((uint64_t)v10, &qword_100524BD0);
LABEL_21:
          uint64_t v42 = v21[14];
          uint64_t v43 = *(void *)(a1 + v42);
          unint64_t v44 = *(void *)(a1 + v42 + 8);
          uint64_t v45 = (uint64_t *)(a2 + v42);
          uint64_t v46 = *v45;
          unint64_t v47 = v45[1];
          if (v44 >> 60 == 15)
          {
            if (v47 >> 60 == 15)
            {
LABEL_29:
              uint64_t v49 = v21[15];
              uint64_t v50 = a1 + v49;
              uint64_t v51 = *(void *)(a1 + v49);
              uint64_t v52 = (uint64_t *)(a2 + v49);
              uint64_t v53 = *v52;
              if (!(v51 | *v52)) {
                return 1;
              }
              uint64_t v54 = (uint64_t (*)(uint64_t))v52[1];
              uint64_t v55 = *(uint64_t (**)(uint64_t))(v50 + 8);
              Hasher.init(_seed:)();
              sub_1003E5BE0((uint64_t)v60, v51, v55);
              Swift::Int v56 = Hasher._finalize()();
              Hasher.init(_seed:)();
              sub_1003E5BE0((uint64_t)v60, v53, v54);
              return v56 == Hasher._finalize()();
            }
            goto LABEL_25;
          }
          if (v47 >> 60 == 15)
          {
LABEL_25:
            sub_1000A7588(v43, v44);
            sub_1000A7588(v46, v47);
            sub_100094760(v43, v44);
            sub_100094760(v46, v47);
            return 0;
          }
          sub_1000A7588(v43, v44);
          sub_1000A7588(v46, v47);
          char v48 = sub_1003F5B24(v43, v44, v46, v47);
          sub_100094760(v46, v47);
          sub_100094760(v43, v44);
          if (v48) {
            goto LABEL_29;
          }
          return 0;
        }
      }
      else
      {
        sub_10000FB74((uint64_t)v10, (uint64_t)v13, &qword_100524BD0);
        if (v57(v58, 1, v4) != 1)
        {
          uint64_t v40 = v59;
          (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v7, v58, v4);
          sub_1003F3144(&qword_10052E000, (void (*)(uint64_t))&type metadata accessor for VisualUnderstanding.ImageRegion);
          LODWORD(v58) = dispatch thunk of static Equatable.== infix(_:_:)();
          unint64_t v41 = *(void (**)(char *, uint64_t))(v40 + 8);
          v41(v7, v4);
          sub_10000FBD8((uint64_t)v16, &qword_100524BD0);
          sub_10000FBD8((uint64_t)v19, &qword_100524BD0);
          v41(v13, v4);
          sub_10000FBD8((uint64_t)v10, &qword_100524BD0);
          if ((v58 & 1) == 0) {
            return 0;
          }
          goto LABEL_21;
        }
        sub_10000FBD8((uint64_t)v16, &qword_100524BD0);
        sub_10000FBD8((uint64_t)v19, &qword_100524BD0);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v4);
      }
      sub_10000FBD8((uint64_t)v10, &qword_10052DFF8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003F6C80(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1003F6CC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003F6D28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_1003F6D88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v28 = a2;
  uint64_t v29 = a4;
  uint64_t v26 = a3;
  uint64_t v27 = type metadata accessor for RegionSearchResult.ResultItem();
  uint64_t v6 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for VisualIntelligenceLookupResult(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    v23[1] = v4;
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_100040EDC(0, v13, 0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v30;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v24 = *(void *)(v15 + 56);
    uint64_t v25 = v16;
    do
    {
      v25(v8, v17, v27);
      uint64_t v18 = v26;
      swift_bridgeObjectRetain();
      uint64_t v19 = v29;
      swift_bridgeObjectRetain();
      sub_1003E5314(v28, v18, (uint64_t)v8, v19, (uint64_t)v12);
      uint64_t v30 = v14;
      unint64_t v21 = v14[2];
      unint64_t v20 = v14[3];
      if (v21 >= v20 >> 1)
      {
        sub_100040EDC(v20 > 1, v21 + 1, 1);
        uint64_t v14 = v30;
      }
      v14[2] = v21 + 1;
      sub_1003F80E4((uint64_t)v12, (uint64_t)v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v21, type metadata accessor for VisualIntelligenceLookupResult);
      v17 += v24;
      --v13;
    }
    while (v13);
  }
  return v14;
}

void sub_1003F6FF0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, void, uint64_t, double))
{
  uint64_t v28 = a2;
  char v38 = a4;
  uint64_t v29 = a1;
  uint64_t v37 = type metadata accessor for UUID();
  __chkstk_darwin(v37);
  uint64_t v35 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v5;
  int64_t v7 = 0;
  uint64_t v39 = (void *)a3;
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v30 = 0;
  uint64_t v31 = a3 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  uint64_t v34 = v5 + 16;
  int64_t v32 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v33 = v5 + 8;
  uint64_t v12 = v5;
  int64_t v13 = v35;
  uint64_t v14 = v37;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v40 = v7;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v23 >= v32) {
      goto LABEL_24;
    }
    unint64_t v24 = *(void *)(v31 + 8 * v23);
    int64_t v25 = v7 + 1;
    if (!v24)
    {
      int64_t v25 = v7 + 2;
      if (v7 + 2 >= v32) {
        goto LABEL_24;
      }
      unint64_t v24 = *(void *)(v31 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v7 + 3;
        if (v7 + 3 >= v32) {
          goto LABEL_24;
        }
        unint64_t v24 = *(void *)(v31 + 8 * v25);
        if (!v24) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v24 - 1) & v24;
    int64_t v40 = v25;
    unint64_t v16 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_5:
    uint64_t v17 = v39;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v13, v39[6] + *(void *)(v12 + 72) * v16, v14);
    uint64_t v18 = (double *)(v17[7] + 24 * v16);
    double v19 = *v18;
    uint64_t v20 = *((void *)v18 + 1);
    double v21 = v18[2];
    swift_bridgeObjectRetain();
    swift_errorRetain();
    char v22 = v38(v13, *(void *)&v19, v20, v21);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v13, v14);
    int64_t v7 = v40;
    if (v22)
    {
      *(unint64_t *)((char *)v29 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v30++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1002053E4(v29, v28, v30, v39);
        return;
      }
    }
  }
  uint64_t v26 = v7 + 4;
  if (v7 + 4 >= v32) {
    goto LABEL_24;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v26);
  if (v24)
  {
    int64_t v25 = v7 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v32) {
      goto LABEL_24;
    }
    unint64_t v24 = *(void *)(v31 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1003F72F4(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, void, uint64_t, double), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    sub_1003F6FF0((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    sub_1003F6FF0((unint64_t *)v11, v8, v6, a2);
    a3 = v12;
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_1003F746C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  v6[11] = *(void *)(type metadata accessor for ParseDetectorResult(0) - 8);
  v6[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CVDetection();
  v6[13] = v7;
  v6[14] = *(void *)(v7 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for DetectionRequest.Originator(0);
  v6[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DetectionRequest(0);
  v6[18] = v8;
  v6[19] = *(void *)(v8 - 8);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  return _swift_task_switch(sub_1003F7634, v5, 0);
}

uint64_t sub_1003F7634()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = v0[18];
    uint64_t v3 = v0[19];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = v0[20];
      uint64_t v8 = v0[17];
      sub_1003F6CC0(v5, v7, type metadata accessor for DetectionRequest);
      sub_1003F6CC0(v7 + *(int *)(v4 + 20), v8, type metadata accessor for DetectionRequest.Originator);
      if (!swift_getEnumCaseMultiPayload()) {
        break;
      }
      uint64_t v9 = v0[20];
      sub_1003F6D28(v0[17], type metadata accessor for DetectionRequest.Originator);
      sub_1003F6D28(v9, type metadata accessor for DetectionRequest);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v12 = v0[21];
    uint64_t v13 = v0[22];
    uint64_t v14 = v0[20];
    sub_100038B34(*(void *)v0[17], *(void *)(v0[17] + 8));
    swift_bridgeObjectRelease();
    sub_1003F80E4(v14, v12, type metadata accessor for DetectionRequest);
    sub_1003F80E4(v12, v13, type metadata accessor for DetectionRequest);
    unint64_t v15 = (void *)swift_task_alloc();
    v0[23] = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1003F789C;
    uint64_t v16 = v0[22];
    uint64_t v17 = v0[9];
    uint64_t v18 = v0[8];
    uint64_t v20 = v0[5];
    uint64_t v19 = v0[6];
    return sub_1003EECB0(v16, v19, v20, v18, v17);
  }
  else
  {
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void *))v0[1];
    return v10(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1003F789C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 192) = a1;
  *(void *)(v4 + 200) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 80);
  if (v1) {
    uint64_t v6 = sub_1003F8018;
  }
  else {
    uint64_t v6 = sub_1003F79D0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1003F79D0()
{
  uint64_t v1 = v0[24];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[11];
    sub_100040D64(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = v0[15];
      uint64_t v8 = v0[12];
      sub_1003F6CC0(v5, v8, type metadata accessor for ParseDetectorResult);
      sub_1003F6CC0(v8, v7, type metadata accessor for ParseDetectorResult);
      swift_storeEnumTagMultiPayload();
      sub_1003F6D28(v8, type metadata accessor for ParseDetectorResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100040D64(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_100040D64(v9 > 1, v10 + 1, 1);
      }
      uint64_t v11 = v0[15];
      _swiftEmptyArrayStorage[2] = v10 + 1;
      sub_1003F80E4(v11, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v10, (uint64_t (*)(void))type metadata accessor for CVDetection);
      v5 += v6;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  v0[26] = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
  {
    uint64_t v12 = v0[22];
    sub_10000F214(&qword_10051A108);
    uint64_t v13 = (int *)(type metadata accessor for DetectionResult(0) - 8);
    unint64_t v14 = (*(unsigned __int8 *)(*(void *)v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v13 + 80);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10043D4F0;
    uint64_t v16 = v15 + v14;
    sub_1003F6CC0(v12, v16, type metadata accessor for DetectionRequest);
    *(void *)(v16 + v13[7]) = _swiftEmptyArrayStorage;
    sub_1003F6D28(v12, type metadata accessor for DetectionRequest);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
    return v17(v15);
  }
  else
  {
    if (qword_100518128 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_10055E650;
    v0[27] = qword_10055E650;
    return _swift_task_switch(sub_1003F7D60, v19, 0);
  }
}

uint64_t sub_1003F7D60()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[27] + OBJC_IVAR____TtC6Tamale31VisualIntelligenceSearchService_inflightSearches;
  swift_beginAccess();
  v0[28] = *(void *)(*(void *)v2 + 16);
  return _swift_task_switch(sub_1003F7DF4, v1, 0);
}

uint64_t sub_1003F7DF4()
{
  uint64_t v1 = v0[26];
  if (v0[28])
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Suppressing parse detector miss to allow searches to complete", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[22];

    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v5 = v0[22];
    sub_10000F214(&qword_10051A108);
    uint64_t v7 = (int *)(type metadata accessor for DetectionResult(0) - 8);
    unint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
    uint64_t v6 = (void *)swift_allocObject();
    *((_OWORD *)v6 + 1) = xmmword_10043D4F0;
    uint64_t v9 = (uint64_t)v6 + v8;
    sub_1003F6CC0(v5, v9, type metadata accessor for DetectionRequest);
    *(void *)(v9 + v7[7]) = v1;
  }
  sub_1003F6D28(v5, type metadata accessor for DetectionRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(v6);
}

uint64_t sub_1003F8018()
{
  sub_1003F6D28(*(void *)(v0 + 176), type metadata accessor for DetectionRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003F80E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003F814C()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1003F818C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000FC9C;
  v3[2] = v2;
  return _swift_task_switch(sub_1003E8C44, v2, 0);
}

unint64_t sub_1003F8234()
{
  unint64_t result = qword_10052E048;
  if (!qword_10052E048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E048);
  }
  return result;
}

uint64_t sub_1003F8288(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10051D468);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003F82EC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10051E070);
    sub_1003F3144(a2, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003F8380(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10052E060);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003F83E4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10052E070);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003F8454()
{
  unint64_t result = qword_10052E0B8;
  if (!qword_10052E0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E0B8);
  }
  return result;
}

uint64_t sub_1003F84A8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(&qword_10052E0C0);
    sub_1003F3144(a2, (void (*)(uint64_t))&type metadata accessor for VisualDomain);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003F853C()
{
  unint64_t result = qword_10052E0E0;
  if (!qword_10052E0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E0E0);
  }
  return result;
}

unint64_t sub_1003F8590()
{
  unint64_t result = qword_10052E108;
  if (!qword_10052E108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E108);
  }
  return result;
}

uint64_t sub_1003F85E4(uint64_t a1)
{
  return sub_1003EF540(a1, v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[2], v1[3]);
}

uint64_t sub_1003F861C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = sub_10000F214(&qword_10052E128);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1003F8770(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v7 = *(void *)(sub_10000F214(&qword_10052E128) - 8);
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + ((v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1003EF834(a1, v8, (uint64_t)v1 + v5, v9, v3, v4);
}

uint64_t sub_1003F8858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003EFB10(a1, v2[4], v2[5], v2[6], v2[2], v2[3], a2);
}

unint64_t sub_1003F887C()
{
  unint64_t result = qword_10052E170;
  if (!qword_10052E170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E170);
  }
  return result;
}

uint64_t sub_1003F88D0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

BOOL sub_1003F8910(double a1)
{
  return a1 + 5.0 < *(double *)(v1 + 16);
}

uint64_t sub_1003F8928()
{
  uint64_t v1 = type metadata accessor for VisualUnderstanding();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1003F8A94(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for VisualUnderstanding() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v6;
  double v13 = *(double *)((char *)v1 + v7);
  uint64_t v14 = (uint64_t)v1 + ((v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_10000FC9C;
  return sub_1003EAB28(v13, a1, v9, v10, v11, v12, v14);
}

uint64_t sub_1003F8C18()
{
  uint64_t v1 = type metadata accessor for VisualUnderstanding.ImageRegion();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1003F8D00(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for VisualUnderstanding.ImageRegion() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  double v10 = *(double *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000F878;
  return sub_1000937F0(v10, a1, v6, v7, v8, v9);
}

void sub_1003F8E44(uint64_t a1)
{
}

uint64_t sub_1003F8E50()
{
  uint64_t v1 = sub_10000F214(&qword_10052E1A0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1003F8EE4(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(sub_10000F214(&qword_10052E1A0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1003E9A18(a1, a2, v6);
}

void sub_1003F8F68()
{
  sub_100050D18(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

ValueMetadata *type metadata accessor for VisualIntelligenceSearchService.SearchServiceError()
{
  return &type metadata for VisualIntelligenceSearchService.SearchServiceError;
}

uint64_t getEnumTagSinglePayload for ParseDetectorResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParseDetectorResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003F90F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParseDetectorResult.CodingKeys()
{
  return &type metadata for ParseDetectorResult.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VisualIntelligenceLookupResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VisualIntelligenceLookupResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003F9288);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VisualIntelligenceLookupResult.CodingKeys()
{
  return &type metadata for VisualIntelligenceLookupResult.CodingKeys;
}

unint64_t destroy for ParseDetectorResult.SearchableDetectionsContainer(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t _s6Tamale19ParseDetectorResultV29SearchableDetectionsContainerOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for ParseDetectorResult.SearchableDetectionsContainer(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      unint64_t v7 = a2[2];
      a1[1] = a2[1];
      a1[2] = v7;
      swift_bridgeObjectRetain();
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v8 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v8;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ParseDetectorResult.SearchableDetectionsContainer(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParseDetectorResult.SearchableDetectionsContainer(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParseDetectorResult.SearchableDetectionsContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

void *sub_1003F9564(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ParseDetectorResult.SearchableDetectionsContainer()
{
  return &type metadata for ParseDetectorResult.SearchableDetectionsContainer;
}

unint64_t sub_1003F9598()
{
  unint64_t result = qword_10052E1F8;
  if (!qword_10052E1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E1F8);
  }
  return result;
}

unint64_t sub_1003F95F0()
{
  unint64_t result = qword_10052E200;
  if (!qword_10052E200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E200);
  }
  return result;
}

unint64_t sub_1003F9648()
{
  unint64_t result = qword_10052E208;
  if (!qword_10052E208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E208);
  }
  return result;
}

unint64_t sub_1003F96A0()
{
  unint64_t result = qword_10052E210;
  if (!qword_10052E210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E210);
  }
  return result;
}

unint64_t sub_1003F96F8()
{
  unint64_t result = qword_10052E218;
  if (!qword_10052E218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E218);
  }
  return result;
}

unint64_t sub_1003F9750()
{
  unint64_t result = qword_10052E220;
  if (!qword_10052E220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E220);
  }
  return result;
}

unint64_t sub_1003F97A8()
{
  unint64_t result = qword_10052E228;
  if (!qword_10052E228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E228);
  }
  return result;
}

unint64_t sub_1003F9800()
{
  unint64_t result = qword_10052E230;
  if (!qword_10052E230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E230);
  }
  return result;
}

unint64_t sub_1003F9854(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1004E5FD0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

uint64_t sub_1003F98A0(void *a1)
{
  uint64_t v3 = sub_10000F214(&qword_10052E238);
  uint64_t v16 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000F214(&qword_10052E240);
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  long long v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_1003FA090();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v9 = v16;
    uint64_t v15 = v6;
    if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) == 1)
    {
      sub_1003FA0E4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v10 = v15;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v3);
    }
    else
    {
      uint64_t v11 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v13 = v12;
      sub_10000F214(&qword_10051E3E0);
      *uint64_t v13 = &type metadata for ParseDetectorResult.SearchableDetectionsContainer;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, enum case for DecodingError.typeMismatch(_:), v11);
      swift_willThrow();
      uint64_t v10 = v15;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v17);
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  return 0;
}

uint64_t sub_1003F9B94(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7372656E726F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736E69616D6F64 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xED0000656C676E41 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6261686372616573 && a2 == 0xEA0000000000656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010042D5C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010042D5E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6765526567616D69 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010042D600)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

unint64_t sub_1003FA090()
{
  unint64_t result = qword_10052E248;
  if (!qword_10052E248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E248);
  }
  return result;
}

unint64_t sub_1003FA0E4()
{
  unint64_t result = qword_10052E250;
  if (!qword_10052E250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E250);
  }
  return result;
}

unsigned char *_s6Tamale31VisualIntelligenceSearchServiceC18SearchServiceErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003FA1D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParseDetectorResult.SearchableDetectionsContainer.CodingKeys()
{
  return &type metadata for ParseDetectorResult.SearchableDetectionsContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for ParseDetectorResult.SearchableDetectionsContainer.NoneCodingKeys()
{
  return &type metadata for ParseDetectorResult.SearchableDetectionsContainer.NoneCodingKeys;
}

unint64_t sub_1003FA220()
{
  unint64_t result = qword_10052E270;
  if (!qword_10052E270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E270);
  }
  return result;
}

unint64_t sub_1003FA278()
{
  unint64_t result = qword_10052E278;
  if (!qword_10052E278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E278);
  }
  return result;
}

unint64_t sub_1003FA2D0()
{
  unint64_t result = qword_10052E280;
  if (!qword_10052E280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E280);
  }
  return result;
}

unint64_t sub_1003FA328()
{
  unint64_t result = qword_10052E288;
  if (!qword_10052E288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E288);
  }
  return result;
}

unint64_t sub_1003FA380()
{
  unint64_t result = qword_10052E290;
  if (!qword_10052E290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E290);
  }
  return result;
}

BOOL sub_1003FA3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v22 - v11;
  int64_t v23 = *(uint64_t (**)(uint64_t))(v13 + 8);
  int v14 = v23(v10);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15(v12, v3, a1);
  if (v14 == 1)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v12, a1);
    v15(v9, v3, a1);
LABEL_5:
    v16(v9, a1);
    return 0;
  }
  int v17 = ((uint64_t (*)(uint64_t, uint64_t))v23)(a1, a2);
  uint64_t v18 = v12;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v18, a1);
  v15(v9, v3, a1);
  if (v17 == 3)
  {
    uint64_t v16 = v19;
    goto LABEL_5;
  }
  int v21 = ((uint64_t (*)(uint64_t, uint64_t))v23)(a1, a2);
  v19(v9, a1);
  return v21 != 2;
}

id sub_1003FA5EC()
{
  return [*v0 status];
}

uint64_t Date.shortDateTimeString.getter()
{
  return sub_1003FA9EC(1, 1);
}

uint64_t Date.shortTimeString.getter()
{
  return sub_1003FA9EC(0, 1);
}

uint64_t Date.shortDateString.getter()
{
  return sub_1003FA9EC(1, 0);
}

uint64_t Date.relativeShortDateString.getter()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v26 - v5;
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for Calendar();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v29 = v0;
  char v15 = Calendar.isDateInToday(_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16(v14, v11);
  if (v15) {
    goto LABEL_3;
  }
  v26[1] = v9;
  static Calendar.autoupdatingCurrent.getter();
  Date.init()();
  Date.addingTimeInterval(_:)();
  int v17 = *(void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v18 = v3;
  uint64_t v19 = v28;
  v17(v18, v28);
  char v20 = Calendar.isDate(_:inSameDayAs:)();
  v17(v6, v19);
  v16(v14, v11);
  if (v20)
  {
LABEL_3:
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  else
  {
    id v22 = [objc_allocWithZone((Class)NSDateFormatter) init];
    [v22 setDateStyle:1];
    [v22 setTimeStyle:0];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v24 = [v22 stringFromDate:isa];

    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v21;
}

uint64_t Date.mediumDateTimeString.getter()
{
  return sub_1003FA9EC(2, 2);
}

uint64_t sub_1003FA9EC(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v4 setDateStyle:a1];
  [v4 setTimeStyle:a2];
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 stringFromDate:isa];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v7;
}

void *sub_1003FAAA4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        char v20 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)((char *)a1 + v20[5]) = *(_DWORD *)((char *)a2 + v20[5]);
        uint64_t v21 = v20[6];
        id v22 = (_OWORD *)((char *)a1 + v21);
        int64_t v23 = (_OWORD *)((char *)a2 + v21);
        long long v24 = v23[3];
        v22[2] = v23[2];
        v22[3] = v24;
        long long v25 = v23[1];
        *id v22 = *v23;
        v22[1] = v25;
        *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
        *(void *)((char *)a1 + v20[8]) = *(void *)((char *)a2 + v20[8]);
        *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
        *((unsigned char *)a1 + v20[10]) = *((unsigned char *)a2 + v20[10]);
        uint64_t v26 = v20[11];
        uint64_t v27 = (void *)((char *)a1 + v26);
        uint64_t v28 = (void *)((char *)a2 + v26);
        uint64_t v29 = v28[1];
        void *v27 = *v28;
        v27[1] = v29;
        uint64_t v30 = v20[12];
        uint64_t v31 = (void *)((char *)a1 + v30);
        int64_t v32 = (void *)((char *)a2 + v30);
        uint64_t v33 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v33;
        uint64_t v34 = v20[13];
        __dst = (char *)a1 + v34;
        uint64_t v89 = (char *)a2 + v34;
        uint64_t v35 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v36 = *(void *)(v35 - 8);
        uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v37(v89, 1, v35))
        {
          uint64_t v38 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v89, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v89, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
        }
        uint64_t v78 = v20[14];
        uint64_t v79 = (char *)a1 + v78;
        unint64_t v80 = (char *)a2 + v78;
        unint64_t v81 = *((void *)v80 + 1);
        if (v81 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
        }
        else
        {
          uint64_t v82 = *(void *)v80;
          sub_100038528(*(void *)v80, *((void *)v80 + 1));
          *(void *)uint64_t v79 = v82;
          *((void *)v79 + 1) = v81;
        }
        uint64_t v83 = v20[15];
        uint64_t v84 = (void *)((char *)a1 + v83);
        uint64_t v85 = (void *)((char *)a2 + v83);
        if (*v85)
        {
          uint64_t v86 = v85[1];
          uint64_t v87 = v85[2];
          *uint64_t v84 = *v85;
          v84[1] = v86;
          v84[2] = v87;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
          v84[2] = v85[2];
        }
        break;
      case 2u:
        uint64_t v39 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        int64_t v40 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v40[5]) = *(_DWORD *)((char *)a2 + v40[5]);
        uint64_t v41 = v40[6];
        uint64_t v42 = (_OWORD *)((char *)a1 + v41);
        uint64_t v43 = (_OWORD *)((char *)a2 + v41);
        long long v44 = v43[3];
        v42[2] = v43[2];
        v42[3] = v44;
        long long v45 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v45;
        uint64_t v46 = v40[7];
        unint64_t v47 = (void *)((char *)a1 + v46);
        char v48 = (void *)((char *)a2 + v46);
        uint64_t v50 = *v48;
        uint64_t v49 = v48[1];
        *unint64_t v47 = v50;
        v47[1] = v49;
        *(void *)((char *)a1 + v40[8]) = *(void *)((char *)a2 + v40[8]);
        *(void *)((char *)a1 + v40[9]) = *(void *)((char *)a2 + v40[9]);
        *(void *)((char *)a1 + v40[10]) = *(void *)((char *)a2 + v40[10]);
        *(void *)((char *)a1 + v40[11]) = *(void *)((char *)a2 + v40[11]);
        *(void *)((char *)a1 + v40[12]) = *(void *)((char *)a2 + v40[12]);
        uint64_t v51 = v40[13];
        uint64_t v52 = *(void **)((char *)a2 + v51);
        *(void *)((char *)a1 + v51) = v52;
        *((unsigned char *)a1 + v40[14]) = *((unsigned char *)a2 + v40[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v53 = v52;
        break;
      case 3u:
      case 4u:
        uint64_t v54 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
        uint64_t v55 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)((char *)a1 + v55[5]) = *(_DWORD *)((char *)a2 + v55[5]);
        uint64_t v56 = v55[6];
        uint64_t v57 = (_OWORD *)((char *)a1 + v56);
        uint64_t v58 = (_OWORD *)((char *)a2 + v56);
        long long v59 = v58[3];
        v57[2] = v58[2];
        v57[3] = v59;
        long long v60 = v58[1];
        _OWORD *v57 = *v58;
        v57[1] = v60;
        uint64_t v61 = v55[7];
        double v62 = (void *)((char *)a1 + v61);
        double v63 = (void *)((char *)a2 + v61);
        uint64_t v65 = *v63;
        uint64_t v64 = v63[1];
        *double v62 = v65;
        v62[1] = v64;
        *(void *)((char *)a1 + v55[8]) = *(void *)((char *)a2 + v55[8]);
        *(void *)((char *)a1 + v55[9]) = *(void *)((char *)a2 + v55[9]);
        *(void *)((char *)a1 + v55[10]) = *(void *)((char *)a2 + v55[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v66 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v66 - 8) + 16))(a1, a2, v66);
        uint64_t v67 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)((char *)a1 + v67[5]) = *(_DWORD *)((char *)a2 + v67[5]);
        uint64_t v68 = v67[6];
        uint64_t v69 = (_OWORD *)((char *)a1 + v68);
        double v70 = (_OWORD *)((char *)a2 + v68);
        long long v71 = v70[3];
        v69[2] = v70[2];
        v69[3] = v71;
        long long v72 = v70[1];
        *uint64_t v69 = *v70;
        v69[1] = v72;
        uint64_t v73 = v67[7];
        unint64_t v74 = (void *)((char *)a1 + v73);
        uint64_t v75 = (void *)((char *)a2 + v73);
        uint64_t v77 = *v75;
        uint64_t v76 = v75[1];
        *unint64_t v74 = v77;
        v74[1] = v76;
        *(void *)((char *)a1 + v67[8]) = *(void *)((char *)a2 + v67[8]);
        *(void *)((char *)a1 + v67[9]) = *(void *)((char *)a2 + v67[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)((char *)a1 + v7[5]) = *(_DWORD *)((char *)a2 + v7[5]);
        uint64_t v8 = v7[6];
        uint64_t v9 = (_OWORD *)((char *)a1 + v8);
        uint64_t v10 = (_OWORD *)((char *)a2 + v8);
        long long v11 = v10[3];
        v9[2] = v10[2];
        v9[3] = v11;
        long long v12 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v12;
        uint64_t v13 = v7[7];
        int v14 = (void *)((char *)a1 + v13);
        char v15 = (void *)((char *)a2 + v13);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        void *v14 = v17;
        v14[1] = v16;
        *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
        *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_1003FB1E0(uint64_t a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for ObjectDetectorResult(0);
      goto LABEL_18;
    case 1u:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      int v5 = (int *)type metadata accessor for ParseDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = a1 + v5[13];
      uint64_t v7 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      uint64_t v9 = (uint64_t *)(a1 + v5[14]);
      unint64_t v10 = v9[1];
      if (v10 >> 60 != 15) {
        sub_100038B34(*v9, v10);
      }
      if (!*(void *)(a1 + v5[15])) {
        return;
      }
      swift_bridgeObjectRelease();
LABEL_10:
      swift_release();
      return;
    case 2u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = type metadata accessor for TextDetectorResult(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void **)(a1 + *(int *)(v12 + 52));

      return;
    case 3u:
    case 4u:
      uint64_t v2 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 5u:
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      type metadata accessor for StreamingTextDetectorResult(0);
LABEL_18:
      swift_bridgeObjectRelease();
      return;
    default:
      return;
  }
}

uint64_t sub_1003FB55C(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
      uint64_t v17 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v17[5]) = *(_DWORD *)(a2 + v17[5]);
      uint64_t v18 = v17[6];
      uint64_t v19 = (_OWORD *)(a1 + v18);
      char v20 = (_OWORD *)(a2 + v18);
      long long v21 = v20[3];
      v19[2] = v20[2];
      v19[3] = v21;
      long long v22 = v20[1];
      _OWORD *v19 = *v20;
      v19[1] = v22;
      *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
      *(void *)(a1 + v17[8]) = *(void *)(a2 + v17[8]);
      *(void *)(a1 + v17[9]) = *(void *)(a2 + v17[9]);
      *(unsigned char *)(a1 + v17[10]) = *(unsigned char *)(a2 + v17[10]);
      uint64_t v23 = v17[11];
      long long v24 = (void *)(a1 + v23);
      long long v25 = (void *)(a2 + v23);
      uint64_t v26 = v25[1];
      *long long v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v17[12];
      uint64_t v28 = (void *)(a1 + v27);
      uint64_t v29 = (void *)(a2 + v27);
      uint64_t v30 = v29[1];
      void *v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = v17[13];
      __dst = (void *)(a1 + v31);
      int64_t v32 = (const void *)(a2 + v31);
      uint64_t v33 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        uint64_t v36 = sub_10000F214(&qword_100524BD0);
        memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(__dst, v32, v33);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      uint64_t v76 = v17[14];
      uint64_t v77 = a1 + v76;
      uint64_t v78 = (uint64_t *)(a2 + v76);
      unint64_t v79 = v78[1];
      if (v79 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
      }
      else
      {
        uint64_t v80 = *v78;
        sub_100038528(*v78, v78[1]);
        *(void *)uint64_t v77 = v80;
        *(void *)(v77 + 8) = v79;
      }
      uint64_t v81 = v17[15];
      uint64_t v82 = (void *)(a1 + v81);
      uint64_t v83 = (void *)(a2 + v81);
      if (*v83)
      {
        uint64_t v84 = v83[1];
        uint64_t v85 = v83[2];
        void *v82 = *v83;
        v82[1] = v84;
        v82[2] = v85;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
        v82[2] = v83[2];
      }
      break;
    case 2u:
      uint64_t v37 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
      uint64_t v38 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v38[5]) = *(_DWORD *)(a2 + v38[5]);
      uint64_t v39 = v38[6];
      int64_t v40 = (_OWORD *)(a1 + v39);
      uint64_t v41 = (_OWORD *)(a2 + v39);
      long long v42 = v41[3];
      v40[2] = v41[2];
      v40[3] = v42;
      long long v43 = v41[1];
      *int64_t v40 = *v41;
      v40[1] = v43;
      uint64_t v44 = v38[7];
      long long v45 = (void *)(a1 + v44);
      uint64_t v46 = (uint64_t *)(a2 + v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      *long long v45 = v48;
      v45[1] = v47;
      *(void *)(a1 + v38[8]) = *(void *)(a2 + v38[8]);
      *(void *)(a1 + v38[9]) = *(void *)(a2 + v38[9]);
      *(void *)(a1 + v38[10]) = *(void *)(a2 + v38[10]);
      *(void *)(a1 + v38[11]) = *(void *)(a2 + v38[11]);
      *(void *)(a1 + v38[12]) = *(void *)(a2 + v38[12]);
      uint64_t v49 = v38[13];
      uint64_t v50 = *(void **)(a2 + v49);
      *(void *)(a1 + v49) = v50;
      *(unsigned char *)(a1 + v38[14]) = *(unsigned char *)(a2 + v38[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v51 = v50;
      break;
    case 3u:
    case 4u:
      uint64_t v52 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
      id v53 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v53[5]) = *(_DWORD *)(a2 + v53[5]);
      uint64_t v54 = v53[6];
      uint64_t v55 = (_OWORD *)(a1 + v54);
      uint64_t v56 = (_OWORD *)(a2 + v54);
      long long v57 = v56[3];
      v55[2] = v56[2];
      v55[3] = v57;
      long long v58 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v58;
      uint64_t v59 = v53[7];
      long long v60 = (void *)(a1 + v59);
      uint64_t v61 = (uint64_t *)(a2 + v59);
      uint64_t v63 = *v61;
      uint64_t v62 = v61[1];
      *long long v60 = v63;
      v60[1] = v62;
      *(void *)(a1 + v53[8]) = *(void *)(a2 + v53[8]);
      *(void *)(a1 + v53[9]) = *(void *)(a2 + v53[9]);
      *(void *)(a1 + v53[10]) = *(void *)(a2 + v53[10]);
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 5u:
      uint64_t v64 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(a1, a2, v64);
      uint64_t v65 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v65[5]) = *(_DWORD *)(a2 + v65[5]);
      uint64_t v66 = v65[6];
      uint64_t v67 = (_OWORD *)(a1 + v66);
      uint64_t v68 = (_OWORD *)(a2 + v66);
      long long v69 = v68[3];
      v67[2] = v68[2];
      v67[3] = v69;
      long long v70 = v68[1];
      *uint64_t v67 = *v68;
      v67[1] = v70;
      uint64_t v71 = v65[7];
      long long v72 = (void *)(a1 + v71);
      uint64_t v73 = (uint64_t *)(a2 + v71);
      uint64_t v75 = *v73;
      uint64_t v74 = v73[1];
      *long long v72 = v75;
      v72[1] = v74;
      *(void *)(a1 + v65[8]) = *(void *)(a2 + v65[8]);
      *(void *)(a1 + v65[9]) = *(void *)(a2 + v65[9]);
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      uint64_t v6 = v5[6];
      uint64_t v7 = (_OWORD *)(a1 + v6);
      uint64_t v8 = (_OWORD *)(a2 + v6);
      long long v9 = v8[3];
      v7[2] = v8[2];
      v7[3] = v9;
      long long v10 = v8[1];
      _OWORD *v7 = *v8;
      v7[1] = v10;
      uint64_t v11 = v5[7];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (uint64_t *)(a2 + v11);
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      *uint64_t v12 = v15;
      v12[1] = v14;
      *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
      *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1003FBC48(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100402744(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v15 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        uint64_t v16 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v16[5]) = *(_DWORD *)(a2 + v16[5]);
        uint64_t v17 = v16[6];
        uint64_t v18 = (_OWORD *)(a1 + v17);
        uint64_t v19 = (_OWORD *)(a2 + v17);
        long long v21 = v19[2];
        long long v20 = v19[3];
        long long v22 = v19[1];
        _OWORD *v18 = *v19;
        v18[1] = v22;
        v18[2] = v21;
        v18[3] = v20;
        *(void *)(a1 + v16[7]) = *(void *)(a2 + v16[7]);
        *(void *)(a1 + v16[8]) = *(void *)(a2 + v16[8]);
        *(void *)(a1 + v16[9]) = *(void *)(a2 + v16[9]);
        *(unsigned char *)(a1 + v16[10]) = *(unsigned char *)(a2 + v16[10]);
        uint64_t v23 = v16[11];
        long long v24 = (void *)(a1 + v23);
        long long v25 = (void *)(a2 + v23);
        *long long v24 = *v25;
        v24[1] = v25[1];
        uint64_t v26 = v16[12];
        uint64_t v27 = (void *)(a1 + v26);
        uint64_t v28 = (void *)(a2 + v26);
        void *v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v16[13];
        __dst = (void *)(a1 + v29);
        uint64_t v30 = (const void *)(a2 + v29);
        uint64_t v31 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v32 = *(void *)(v31 - 8);
        uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33(v30, 1, v31))
        {
          uint64_t v34 = sub_10000F214(&qword_100524BD0);
          memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v30, v31);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
        }
        uint64_t v71 = v16[14];
        uint64_t v72 = a1 + v71;
        uint64_t v73 = (uint64_t *)(a2 + v71);
        unint64_t v74 = v73[1];
        if (v74 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        }
        else
        {
          uint64_t v75 = *v73;
          sub_100038528(*v73, v73[1]);
          *(void *)uint64_t v72 = v75;
          *(void *)(v72 + 8) = v74;
        }
        uint64_t v76 = v16[15];
        uint64_t v77 = (void *)(a1 + v76);
        uint64_t v78 = (void *)(a2 + v76);
        if (*v78)
        {
          void *v77 = *v78;
          uint64_t v79 = v78[2];
          v77[1] = v78[1];
          v77[2] = v79;
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          long long v80 = *(_OWORD *)v78;
          v77[2] = v78[2];
          *(_OWORD *)uint64_t v77 = v80;
        }
        break;
      case 2u:
        uint64_t v35 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
        uint64_t v36 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v36[5]) = *(_DWORD *)(a2 + v36[5]);
        uint64_t v37 = v36[6];
        uint64_t v38 = (_OWORD *)(a1 + v37);
        uint64_t v39 = (_OWORD *)(a2 + v37);
        long long v41 = v39[2];
        long long v40 = v39[3];
        long long v42 = v39[1];
        _OWORD *v38 = *v39;
        v38[1] = v42;
        v38[2] = v41;
        v38[3] = v40;
        uint64_t v43 = v36[7];
        uint64_t v44 = (void *)(a1 + v43);
        long long v45 = (void *)(a2 + v43);
        void *v44 = *v45;
        v44[1] = v45[1];
        *(void *)(a1 + v36[8]) = *(void *)(a2 + v36[8]);
        *(void *)(a1 + v36[9]) = *(void *)(a2 + v36[9]);
        *(void *)(a1 + v36[10]) = *(void *)(a2 + v36[10]);
        *(void *)(a1 + v36[11]) = *(void *)(a2 + v36[11]);
        *(void *)(a1 + v36[12]) = *(void *)(a2 + v36[12]);
        uint64_t v46 = v36[13];
        uint64_t v47 = *(void **)(a2 + v46);
        *(void *)(a1 + v46) = v47;
        *(unsigned char *)(a1 + v36[14]) = *(unsigned char *)(a2 + v36[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v48 = v47;
        break;
      case 3u:
      case 4u:
        uint64_t v49 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
        uint64_t v50 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v50[5]) = *(_DWORD *)(a2 + v50[5]);
        uint64_t v51 = v50[6];
        uint64_t v52 = (_OWORD *)(a1 + v51);
        id v53 = (_OWORD *)(a2 + v51);
        long long v55 = v53[2];
        long long v54 = v53[3];
        long long v56 = v53[1];
        *uint64_t v52 = *v53;
        v52[1] = v56;
        uint64_t v52[2] = v55;
        v52[3] = v54;
        uint64_t v57 = v50[7];
        long long v58 = (void *)(a1 + v57);
        uint64_t v59 = (void *)(a2 + v57);
        void *v58 = *v59;
        v58[1] = v59[1];
        *(void *)(a1 + v50[8]) = *(void *)(a2 + v50[8]);
        *(void *)(a1 + v50[9]) = *(void *)(a2 + v50[9]);
        *(void *)(a1 + v50[10]) = *(void *)(a2 + v50[10]);
        swift_bridgeObjectRetain();
        swift_retain();
        break;
      case 5u:
        uint64_t v60 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(a1, a2, v60);
        uint64_t v61 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v61[5]) = *(_DWORD *)(a2 + v61[5]);
        uint64_t v62 = v61[6];
        uint64_t v63 = (_OWORD *)(a1 + v62);
        uint64_t v64 = (_OWORD *)(a2 + v62);
        long long v66 = v64[2];
        long long v65 = v64[3];
        long long v67 = v64[1];
        *uint64_t v63 = *v64;
        v63[1] = v67;
        v63[2] = v66;
        v63[3] = v65;
        uint64_t v68 = v61[7];
        long long v69 = (void *)(a1 + v68);
        long long v70 = (void *)(a2 + v68);
        *long long v69 = *v70;
        v69[1] = v70[1];
        *(void *)(a1 + v61[8]) = *(void *)(a2 + v61[8]);
        *(void *)(a1 + v61[9]) = *(void *)(a2 + v61[9]);
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
        uint64_t v6 = v5[6];
        uint64_t v7 = (_OWORD *)(a1 + v6);
        uint64_t v8 = (_OWORD *)(a2 + v6);
        long long v10 = v8[2];
        long long v9 = v8[3];
        long long v11 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v11;
        v7[2] = v10;
        v7[3] = v9;
        uint64_t v12 = v5[7];
        uint64_t v13 = (void *)(a1 + v12);
        uint64_t v14 = (void *)(a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
        *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for CVDetection()
{
  uint64_t result = qword_10052E308;
  if (!qword_10052E308) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003FC3DC(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      uint64_t v12 = (int *)type metadata accessor for ParseDetectorResult(0);
      *(_DWORD *)(a1 + v12[5]) = *(_DWORD *)(a2 + v12[5]);
      uint64_t v13 = v12[6];
      uint64_t v14 = (_OWORD *)(a1 + v13);
      uint64_t v15 = (_OWORD *)(a2 + v13);
      long long v16 = v15[3];
      v14[2] = v15[2];
      v14[3] = v16;
      long long v17 = v15[1];
      _OWORD *v14 = *v15;
      v14[1] = v17;
      *(void *)(a1 + v12[7]) = *(void *)(a2 + v12[7]);
      *(void *)(a1 + v12[8]) = *(void *)(a2 + v12[8]);
      *(void *)(a1 + v12[9]) = *(void *)(a2 + v12[9]);
      *(unsigned char *)(a1 + v12[10]) = *(unsigned char *)(a2 + v12[10]);
      *(_OWORD *)(a1 + v12[11]) = *(_OWORD *)(a2 + v12[11]);
      *(_OWORD *)(a1 + v12[12]) = *(_OWORD *)(a2 + v12[12]);
      uint64_t v18 = v12[13];
      uint64_t v19 = (void *)(a1 + v18);
      long long v20 = (const void *)(a2 + v18);
      uint64_t v21 = type metadata accessor for VisualUnderstanding.ImageRegion();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_10000F214(&qword_100524BD0);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      *(_OWORD *)(a1 + v12[14]) = *(_OWORD *)(a2 + v12[14]);
      uint64_t v45 = v12[15];
      uint64_t v46 = a1 + v45;
      uint64_t v47 = a2 + v45;
      *(void *)(v46 + 16) = *(void *)(v47 + 16);
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      break;
    case 2u:
      uint64_t v24 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
      long long v25 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v25[5]) = *(_DWORD *)(a2 + v25[5]);
      uint64_t v26 = v25[6];
      uint64_t v27 = (_OWORD *)(a1 + v26);
      uint64_t v28 = (_OWORD *)(a2 + v26);
      long long v29 = v28[3];
      v27[2] = v28[2];
      v27[3] = v29;
      long long v30 = v28[1];
      _OWORD *v27 = *v28;
      v27[1] = v30;
      *(_OWORD *)(a1 + v25[7]) = *(_OWORD *)(a2 + v25[7]);
      *(void *)(a1 + v25[8]) = *(void *)(a2 + v25[8]);
      *(void *)(a1 + v25[9]) = *(void *)(a2 + v25[9]);
      *(void *)(a1 + v25[10]) = *(void *)(a2 + v25[10]);
      *(void *)(a1 + v25[11]) = *(void *)(a2 + v25[11]);
      *(void *)(a1 + v25[12]) = *(void *)(a2 + v25[12]);
      *(void *)(a1 + v25[13]) = *(void *)(a2 + v25[13]);
      *(unsigned char *)(a1 + v25[14]) = *(unsigned char *)(a2 + v25[14]);
      break;
    case 3u:
    case 4u:
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
      uint64_t v32 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v32[5]) = *(_DWORD *)(a2 + v32[5]);
      uint64_t v33 = v32[6];
      uint64_t v34 = (_OWORD *)(a1 + v33);
      uint64_t v35 = (_OWORD *)(a2 + v33);
      long long v36 = v35[3];
      v34[2] = v35[2];
      v34[3] = v36;
      long long v37 = v35[1];
      _OWORD *v34 = *v35;
      v34[1] = v37;
      *(_OWORD *)(a1 + v32[7]) = *(_OWORD *)(a2 + v32[7]);
      *(void *)(a1 + v32[8]) = *(void *)(a2 + v32[8]);
      *(void *)(a1 + v32[9]) = *(void *)(a2 + v32[9]);
      *(void *)(a1 + v32[10]) = *(void *)(a2 + v32[10]);
      break;
    case 5u:
      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(a1, a2, v38);
      uint64_t v39 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
      uint64_t v40 = v39[6];
      long long v41 = (_OWORD *)(a1 + v40);
      long long v42 = (_OWORD *)(a2 + v40);
      long long v43 = v42[3];
      v41[2] = v42[2];
      v41[3] = v43;
      long long v44 = v42[1];
      *long long v41 = *v42;
      v41[1] = v44;
      *(_OWORD *)(a1 + v39[7]) = *(_OWORD *)(a2 + v39[7]);
      *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
      *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
      break;
    default:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
      uint64_t v6 = v5[6];
      uint64_t v7 = (_OWORD *)(a1 + v6);
      uint64_t v8 = (_OWORD *)(a2 + v6);
      long long v9 = v8[3];
      v7[2] = v8[2];
      v7[3] = v9;
      long long v10 = v8[1];
      _OWORD *v7 = *v8;
      v7[1] = v10;
      *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
      *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
      *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1003FC9A4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100402744(a1, (uint64_t (*)(void))type metadata accessor for CVDetection);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        uint64_t v12 = (int *)type metadata accessor for ParseDetectorResult(0);
        *(_DWORD *)(a1 + v12[5]) = *(_DWORD *)(a2 + v12[5]);
        uint64_t v13 = v12[6];
        uint64_t v14 = (_OWORD *)(a1 + v13);
        uint64_t v15 = (_OWORD *)(a2 + v13);
        long long v16 = v15[3];
        v14[2] = v15[2];
        v14[3] = v16;
        long long v17 = v15[1];
        _OWORD *v14 = *v15;
        v14[1] = v17;
        *(void *)(a1 + v12[7]) = *(void *)(a2 + v12[7]);
        *(void *)(a1 + v12[8]) = *(void *)(a2 + v12[8]);
        *(void *)(a1 + v12[9]) = *(void *)(a2 + v12[9]);
        *(unsigned char *)(a1 + v12[10]) = *(unsigned char *)(a2 + v12[10]);
        *(_OWORD *)(a1 + v12[11]) = *(_OWORD *)(a2 + v12[11]);
        *(_OWORD *)(a1 + v12[12]) = *(_OWORD *)(a2 + v12[12]);
        uint64_t v18 = v12[13];
        uint64_t v19 = (void *)(a1 + v18);
        long long v20 = (const void *)(a2 + v18);
        uint64_t v21 = type metadata accessor for VisualUnderstanding.ImageRegion();
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          uint64_t v23 = sub_10000F214(&qword_100524BD0);
          memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        *(_OWORD *)(a1 + v12[14]) = *(_OWORD *)(a2 + v12[14]);
        uint64_t v45 = v12[15];
        uint64_t v46 = a1 + v45;
        uint64_t v47 = a2 + v45;
        *(void *)(v46 + 16) = *(void *)(v47 + 16);
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
        break;
      case 2u:
        uint64_t v24 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
        long long v25 = (int *)type metadata accessor for TextDetectorResult(0);
        *(_DWORD *)(a1 + v25[5]) = *(_DWORD *)(a2 + v25[5]);
        uint64_t v26 = v25[6];
        uint64_t v27 = (_OWORD *)(a1 + v26);
        uint64_t v28 = (_OWORD *)(a2 + v26);
        long long v29 = v28[3];
        v27[2] = v28[2];
        v27[3] = v29;
        long long v30 = v28[1];
        _OWORD *v27 = *v28;
        v27[1] = v30;
        *(_OWORD *)(a1 + v25[7]) = *(_OWORD *)(a2 + v25[7]);
        *(void *)(a1 + v25[8]) = *(void *)(a2 + v25[8]);
        *(void *)(a1 + v25[9]) = *(void *)(a2 + v25[9]);
        *(void *)(a1 + v25[10]) = *(void *)(a2 + v25[10]);
        *(void *)(a1 + v25[11]) = *(void *)(a2 + v25[11]);
        *(void *)(a1 + v25[12]) = *(void *)(a2 + v25[12]);
        *(void *)(a1 + v25[13]) = *(void *)(a2 + v25[13]);
        *(unsigned char *)(a1 + v25[14]) = *(unsigned char *)(a2 + v25[14]);
        break;
      case 3u:
      case 4u:
        uint64_t v31 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
        uint64_t v32 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
        *(_DWORD *)(a1 + v32[5]) = *(_DWORD *)(a2 + v32[5]);
        uint64_t v33 = v32[6];
        uint64_t v34 = (_OWORD *)(a1 + v33);
        uint64_t v35 = (_OWORD *)(a2 + v33);
        long long v36 = v35[3];
        v34[2] = v35[2];
        v34[3] = v36;
        long long v37 = v35[1];
        _OWORD *v34 = *v35;
        v34[1] = v37;
        *(_OWORD *)(a1 + v32[7]) = *(_OWORD *)(a2 + v32[7]);
        *(void *)(a1 + v32[8]) = *(void *)(a2 + v32[8]);
        *(void *)(a1 + v32[9]) = *(void *)(a2 + v32[9]);
        *(void *)(a1 + v32[10]) = *(void *)(a2 + v32[10]);
        break;
      case 5u:
        uint64_t v38 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
        *(_DWORD *)(a1 + v39[5]) = *(_DWORD *)(a2 + v39[5]);
        uint64_t v40 = v39[6];
        long long v41 = (_OWORD *)(a1 + v40);
        long long v42 = (_OWORD *)(a2 + v40);
        long long v43 = v42[3];
        v41[2] = v42[2];
        v41[3] = v43;
        long long v44 = v42[1];
        *long long v41 = *v42;
        v41[1] = v44;
        *(_OWORD *)(a1 + v39[7]) = *(_OWORD *)(a2 + v39[7]);
        *(void *)(a1 + v39[8]) = *(void *)(a2 + v39[8]);
        *(void *)(a1 + v39[9]) = *(void *)(a2 + v39[9]);
        break;
      default:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
        int v5 = (int *)type metadata accessor for ObjectDetectorResult(0);
        *(_DWORD *)(a1 + v5[5]) = *(_DWORD *)(a2 + v5[5]);
        uint64_t v6 = v5[6];
        uint64_t v7 = (_OWORD *)(a1 + v6);
        uint64_t v8 = (_OWORD *)(a2 + v6);
        long long v9 = v8[3];
        v7[2] = v8[2];
        v7[3] = v9;
        long long v10 = v8[1];
        _OWORD *v7 = *v8;
        v7[1] = v10;
        *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
        *(void *)(a1 + v5[8]) = *(void *)(a2 + v5[8]);
        *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1003FCF90()
{
  uint64_t result = type metadata accessor for ObjectDetectorResult(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ParseDetectorResult(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for TextDetectorResult(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for StreamingBarcodeDetectorResult(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for StreamingTextDetectorResult(319);
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003FD108@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CVDetection();
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v1, (uint64_t)v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1003E6684(a1);
      break;
    case 2u:
      if (qword_100517FB0 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for UUID();
      uint64_t v33 = sub_10000F378(v32, (uint64_t)qword_100529170);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(a1, v33, v32);
      if (qword_100517FB8 != -1) {
        swift_once();
      }
      uint64_t v34 = *((void *)&xmmword_100529188 + 1);
      uint64_t v59 = xmmword_100529188;
      uint64_t v35 = qword_100529198;
      uint64_t v36 = qword_1005291A0;
      long long v37 = xmmword_1005291A8;
      uint64_t v38 = qword_1005291B8;
      uint64_t v39 = qword_1005291C0;
      if (qword_100517FC8 != -1) {
        swift_once();
      }
      uint64_t v40 = qword_1005291D0;
      long long v41 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)(a1 + v41[5]) = -1082130432;
      uint64_t v42 = a1 + v41[6];
      *(void *)uint64_t v42 = v59;
      *(void *)(v42 + 8) = v34;
      *(void *)(v42 + 16) = v35;
      *(void *)(v42 + 24) = v36;
      *(_OWORD *)(v42 + 32) = v37;
      *(void *)(v42 + 48) = v38;
      *(void *)(v42 + 56) = v39;
      long long v43 = (void *)(a1 + v41[7]);
      *long long v43 = 0x7974706D65;
      v43[1] = 0xE500000000000000;
      *(void *)(a1 + v41[8]) = 0;
      *(void *)(a1 + v41[9]) = v40;
      *(void *)(a1 + v41[10]) = &_swiftEmptySetSingleton;
      *(void *)(a1 + v41[11]) = _swiftEmptyArrayStorage;
      *(unsigned char *)(a1 + v41[14]) = 0;
      *(void *)(a1 + v41[12]) = _swiftEmptyArrayStorage;
      *(void *)(a1 + v41[13]) = 0;
      break;
    case 3u:
    case 4u:
      if (qword_100517F00 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = sub_10000F378(v6, (uint64_t)qword_100521CC0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, v7, v6);
      if (qword_100517F08 != -1) {
        swift_once();
      }
      uint64_t v8 = unk_100521CE0;
      uint64_t v59 = qword_100521CD8;
      uint64_t v9 = qword_100521CE8;
      uint64_t v10 = unk_100521CF0;
      uint64_t v11 = qword_100521CF8;
      uint64_t v12 = unk_100521D00;
      uint64_t v13 = qword_100521D08;
      uint64_t v14 = unk_100521D10;
      if (qword_100517F10 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_100521D18;
      long long v16 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
      *(_DWORD *)(a1 + v16[5]) = -1082130432;
      long long v17 = (uint64_t *)(a1 + v16[6]);
      uint64_t *v17 = v59;
      v17[1] = v8;
      v17[2] = v9;
      v17[3] = v10;
      v17[4] = v11;
      v17[5] = v12;
      v17[6] = v13;
      v17[7] = v14;
      uint64_t v18 = (void *)(a1 + v16[7]);
      void *v18 = 0x7974706D65;
      v18[1] = 0xE500000000000000;
      *(void *)(a1 + v16[8]) = 0;
      *(void *)(a1 + v16[9]) = v15;
      *(void *)(a1 + v16[10]) = 0x8000000000000000;
      break;
    case 5u:
      if (qword_100517F00 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for UUID();
      uint64_t v45 = sub_10000F378(v44, (uint64_t)qword_100521CC0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(a1, v45, v44);
      if (qword_100517F08 != -1) {
        swift_once();
      }
      uint64_t v46 = unk_100521CE0;
      uint64_t v59 = qword_100521CD8;
      uint64_t v47 = qword_100521CE8;
      uint64_t v48 = unk_100521CF0;
      uint64_t v49 = qword_100521CF8;
      uint64_t v50 = unk_100521D00;
      uint64_t v51 = qword_100521D08;
      uint64_t v52 = unk_100521D10;
      if (qword_100517F10 != -1) {
        swift_once();
      }
      uint64_t v53 = qword_100521D18;
      long long v54 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
      *(_DWORD *)(a1 + v54[5]) = -1082130432;
      long long v55 = (uint64_t *)(a1 + v54[6]);
      *long long v55 = v59;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v55[4] = v49;
      v55[5] = v50;
      v55[6] = v51;
      v55[7] = v52;
      long long v56 = (void *)(a1 + v54[7]);
      *long long v56 = 0x7974706D65;
      v56[1] = 0xE500000000000000;
      *(void *)(a1 + v54[8]) = 0;
      *(void *)(a1 + v54[9]) = v53;
      break;
    default:
      if (qword_100517FB0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v20 = sub_10000F378(v19, (uint64_t)qword_100529170);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, v20, v19);
      if (qword_100517FB8 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_100529198;
      uint64_t v58 = *((void *)&xmmword_100529188 + 1);
      uint64_t v59 = xmmword_100529188;
      uint64_t v22 = qword_1005291A0;
      long long v24 = xmmword_1005291A8;
      uint64_t v23 = qword_1005291B8;
      uint64_t v25 = qword_1005291C0;
      if (qword_100517FC0 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_1005291C8;
      if (qword_100517FC8 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_1005291D0;
      uint64_t v28 = (int *)type metadata accessor for ObjectDetectorResult(0);
      *(_DWORD *)(a1 + v28[5]) = -1082130432;
      uint64_t v29 = a1 + v28[6];
      uint64_t v30 = v58;
      *(void *)uint64_t v29 = v59;
      *(void *)(v29 + 8) = v30;
      *(void *)(v29 + 16) = v21;
      *(void *)(v29 + 24) = v22;
      *(_OWORD *)(v29 + 32) = v24;
      *(void *)(v29 + 48) = v23;
      *(void *)(v29 + 56) = v25;
      uint64_t v31 = (void *)(a1 + v28[7]);
      *uint64_t v31 = 0x7974706D65;
      v31[1] = 0xE500000000000000;
      *(void *)(a1 + v28[8]) = v26;
      *(void *)(a1 + v28[9]) = v27;
      break;
  }
  swift_storeEnumTagMultiPayload();
  return sub_100402744((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CVDetection);
}

double sub_1003FD844()
{
  uint64_t v1 = *v0;
  uint64_t v66 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  sub_100040758(0, 4, 0);
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  int64_t v10 = v8 >> 1;
  unint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    sub_100040758(v8 > 1, v9 + 1, 1);
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    int64_t v10 = v8 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v11;
  _swiftEmptyArrayStorage[v9 + 4] = v1;
  int64_t v12 = v9 + 2;
  if (v10 < v12) {
    sub_100040758(v8 > 1, v12, 1);
  }
  _swiftEmptyArrayStorage[2] = v12;
  _swiftEmptyArrayStorage[v11 + 4] = v2;
  unint64_t v14 = _swiftEmptyArrayStorage[2];
  unint64_t v13 = _swiftEmptyArrayStorage[3];
  unint64_t v15 = v14 + 1;
  if (v14 >= v13 >> 1) {
    sub_100040758(v13 > 1, v14 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v15;
  _swiftEmptyArrayStorage[v14 + 4] = v5;
  unint64_t v16 = _swiftEmptyArrayStorage[3];
  int64_t v17 = v14 + 2;
  if (v17 > (uint64_t)(v16 >> 1)) {
    sub_100040758(v16 > 1, v17, 1);
  }
  uint64_t v18 = 0;
  _swiftEmptyArrayStorage[2] = v17;
  _swiftEmptyArrayStorage[v15 + 4] = v7;
  double v19 = INFINITY;
  do
  {
    uint64_t v20 = (double *)&_swiftEmptyArrayStorage[v18];
    if (v20[4] < v19) {
      double v19 = v20[4];
    }
    ++v18;
  }
  while (v17 != v18);
  swift_release();
  sub_100040758(0, 4, 0);
  unint64_t v22 = _swiftEmptyArrayStorage[2];
  unint64_t v21 = _swiftEmptyArrayStorage[3];
  unint64_t v23 = v21 >> 1;
  unint64_t v24 = v22 + 1;
  if (v21 >> 1 <= v22)
  {
    sub_100040758(v21 > 1, v22 + 1, 1);
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    unint64_t v23 = v21 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v24;
  _swiftEmptyArrayStorage[v22 + 4] = v66;
  int64_t v25 = v22 + 2;
  if (v23 <= v24) {
    sub_100040758(v21 > 1, v25, 1);
  }
  _swiftEmptyArrayStorage[2] = v25;
  uint64_t v65 = v3;
  _swiftEmptyArrayStorage[v24 + 4] = v3;
  unint64_t v27 = _swiftEmptyArrayStorage[2];
  unint64_t v26 = _swiftEmptyArrayStorage[3];
  unint64_t v28 = v27 + 1;
  if (v27 >= v26 >> 1) {
    sub_100040758(v26 > 1, v27 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v28;
  uint64_t v29 = v4;
  _swiftEmptyArrayStorage[v27 + 4] = v4;
  unint64_t v30 = _swiftEmptyArrayStorage[3];
  int64_t v31 = v27 + 2;
  if (v28 >= v30 >> 1) {
    sub_100040758(v30 > 1, v31, 1);
  }
  uint64_t v32 = 0;
  _swiftEmptyArrayStorage[2] = v31;
  uint64_t v33 = v6;
  _swiftEmptyArrayStorage[v28 + 4] = v6;
  double v34 = INFINITY;
  do
  {
    uint64_t v35 = (double *)&_swiftEmptyArrayStorage[v32];
    if (v35[4] < v34) {
      double v34 = v35[4];
    }
    ++v32;
  }
  while (v31 != v32);
  swift_release();
  sub_100040758(0, 4, 0);
  unint64_t v37 = _swiftEmptyArrayStorage[2];
  unint64_t v36 = _swiftEmptyArrayStorage[3];
  int64_t v38 = v36 >> 1;
  unint64_t v39 = v37 + 1;
  if (v36 >> 1 <= v37)
  {
    sub_100040758(v36 > 1, v37 + 1, 1);
    unint64_t v36 = _swiftEmptyArrayStorage[3];
    int64_t v38 = v36 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v39;
  _swiftEmptyArrayStorage[v37 + 4] = v1;
  int64_t v40 = v37 + 2;
  if (v38 < v40) {
    sub_100040758(v36 > 1, v40, 1);
  }
  _swiftEmptyArrayStorage[2] = v40;
  _swiftEmptyArrayStorage[v39 + 4] = v2;
  unint64_t v42 = _swiftEmptyArrayStorage[2];
  unint64_t v41 = _swiftEmptyArrayStorage[3];
  unint64_t v43 = v42 + 1;
  if (v42 >= v41 >> 1) {
    sub_100040758(v41 > 1, v42 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v43;
  _swiftEmptyArrayStorage[v42 + 4] = v5;
  unint64_t v44 = _swiftEmptyArrayStorage[3];
  int64_t v45 = v42 + 2;
  if (v45 > (uint64_t)(v44 >> 1)) {
    sub_100040758(v44 > 1, v45, 1);
  }
  uint64_t v46 = 0;
  _swiftEmptyArrayStorage[2] = v45;
  _swiftEmptyArrayStorage[v43 + 4] = v7;
  double v47 = -INFINITY;
  do
  {
    uint64_t v48 = (double *)&_swiftEmptyArrayStorage[v46];
    if (v47 <= v48[4]) {
      double v47 = v48[4];
    }
    ++v46;
  }
  while (v45 != v46);
  swift_release();
  sub_100040758(0, 4, 0);
  unint64_t v50 = _swiftEmptyArrayStorage[2];
  unint64_t v49 = _swiftEmptyArrayStorage[3];
  int64_t v51 = v49 >> 1;
  unint64_t v52 = v50 + 1;
  if (v49 >> 1 <= v50)
  {
    sub_100040758(v49 > 1, v50 + 1, 1);
    unint64_t v49 = _swiftEmptyArrayStorage[3];
    int64_t v51 = v49 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v52;
  _swiftEmptyArrayStorage[v50 + 4] = v66;
  int64_t v53 = v50 + 2;
  if (v51 < v53) {
    sub_100040758(v49 > 1, v53, 1);
  }
  _swiftEmptyArrayStorage[2] = v53;
  _swiftEmptyArrayStorage[v52 + 4] = v65;
  unint64_t v55 = _swiftEmptyArrayStorage[2];
  unint64_t v54 = _swiftEmptyArrayStorage[3];
  unint64_t v56 = v55 + 1;
  if (v55 >= v54 >> 1) {
    sub_100040758(v54 > 1, v55 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v56;
  _swiftEmptyArrayStorage[v55 + 4] = v29;
  unint64_t v57 = _swiftEmptyArrayStorage[3];
  int64_t v58 = v55 + 2;
  if (v58 > (uint64_t)(v57 >> 1)) {
    sub_100040758(v57 > 1, v58, 1);
  }
  _swiftEmptyArrayStorage[2] = v58;
  uint64_t v59 = (double *)&_swiftEmptyArrayStorage[4];
  _swiftEmptyArrayStorage[v56 + 4] = v33;
  uint64_t v60 = _swiftEmptyArrayStorage[2];
  if (v60)
  {
    double v61 = -INFINITY;
    do
    {
      double v62 = *v59++;
      double v63 = v62;
      if (v61 <= v62) {
        double v61 = v63;
      }
      --v60;
    }
    while (v60);
  }
  swift_release();
  return v19;
}

uint64_t sub_1003FDDDC@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v67 = a1;
  uint64_t v3 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (int *)type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v15);
  int64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CVDetection();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v68, (uint64_t)v20);
  uint64_t v68 = v18;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100403068((uint64_t)v20, (uint64_t)v14, type metadata accessor for ParseDetectorResult);
      sub_1003E6910(v67, a2);
      unint64_t v36 = type metadata accessor for ParseDetectorResult;
      uint64_t v37 = (uint64_t)v14;
      break;
    case 2u:
      sub_100403068((uint64_t)v20, (uint64_t)v11, type metadata accessor for TextDetectorResult);
      sub_100321510(v67, a2);
      unint64_t v36 = type metadata accessor for TextDetectorResult;
      uint64_t v37 = (uint64_t)v11;
      break;
    case 3u:
    case 4u:
      sub_100403068((uint64_t)v20, (uint64_t)v8, type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v21 = type metadata accessor for UUID();
      uint64_t v22 = v67;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v67, v8, v21);
      uint64_t v23 = v6[6];
      int v24 = *(_DWORD *)&v8[v6[5]];
      long long v25 = *(_OWORD *)&v8[v23 + 48];
      long long v75 = *(_OWORD *)&v8[v23 + 32];
      long long v76 = v25;
      long long v26 = *(_OWORD *)&v8[v23 + 16];
      long long v73 = *(_OWORD *)&v8[v23];
      long long v74 = v26;
      sub_1003FF210((uint64_t)&v69, a2, *(double *)&v8[v6[8]]);
      unint64_t v27 = &v8[v6[7]];
      uint64_t v28 = *(void *)&v8[v6[9]];
      uint64_t v29 = *(void *)v27;
      uint64_t v30 = *((void *)v27 + 1);
      uint64_t v31 = *(void *)&v8[v6[10]];
      *(_DWORD *)(v22 + v6[5]) = v24;
      uint64_t v32 = (_OWORD *)(v22 + v6[6]);
      long long v33 = v70;
      _OWORD *v32 = v69;
      v32[1] = v33;
      long long v34 = v72;
      v32[2] = v71;
      v32[3] = v34;
      uint64_t v35 = (void *)(v22 + v6[7]);
      *uint64_t v35 = v29;
      v35[1] = v30;
      *(double *)(v22 + v6[8]) = a2;
      *(void *)(v22 + v6[9]) = v28;
      *(void *)(v22 + v6[10]) = v31;
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v36 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v37 = (uint64_t)v8;
      break;
    case 5u:
      sub_100403068((uint64_t)v20, (uint64_t)v5, type metadata accessor for StreamingTextDetectorResult);
      uint64_t v52 = type metadata accessor for UUID();
      uint64_t v53 = v67;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v67, v5, v52);
      uint64_t v54 = v3[6];
      int v55 = *(_DWORD *)&v5[v3[5]];
      long long v56 = *(_OWORD *)&v5[v54 + 48];
      long long v75 = *(_OWORD *)&v5[v54 + 32];
      long long v76 = v56;
      long long v57 = *(_OWORD *)&v5[v54 + 16];
      long long v73 = *(_OWORD *)&v5[v54];
      long long v74 = v57;
      sub_1003FF210((uint64_t)&v69, a2, *(double *)&v5[v3[8]]);
      int64_t v58 = &v5[v3[7]];
      uint64_t v59 = *(void *)&v5[v3[9]];
      uint64_t v61 = *(void *)v58;
      uint64_t v60 = *((void *)v58 + 1);
      *(_DWORD *)(v53 + v3[5]) = v55;
      double v62 = (_OWORD *)(v53 + v3[6]);
      long long v63 = v70;
      *double v62 = v69;
      v62[1] = v63;
      long long v64 = v72;
      v62[2] = v71;
      v62[3] = v64;
      uint64_t v65 = (void *)(v53 + v3[7]);
      *uint64_t v65 = v61;
      v65[1] = v60;
      *(double *)(v53 + v3[8]) = a2;
      *(void *)(v53 + v3[9]) = v59;
      swift_bridgeObjectRetain();
      unint64_t v36 = type metadata accessor for StreamingTextDetectorResult;
      uint64_t v37 = (uint64_t)v5;
      break;
    default:
      sub_100403068((uint64_t)v20, (uint64_t)v17, type metadata accessor for ObjectDetectorResult);
      uint64_t v38 = type metadata accessor for UUID();
      uint64_t v39 = v67;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v67, v17, v38);
      uint64_t v40 = v15[6];
      int v41 = *(_DWORD *)&v17[v15[5]];
      long long v42 = *(_OWORD *)&v17[v40 + 48];
      long long v75 = *(_OWORD *)&v17[v40 + 32];
      long long v76 = v42;
      long long v43 = *(_OWORD *)&v17[v40 + 16];
      long long v73 = *(_OWORD *)&v17[v40];
      long long v74 = v43;
      sub_1003FF210((uint64_t)&v69, a2, *(double *)&v17[v15[8]]);
      unint64_t v44 = &v17[v15[7]];
      uint64_t v45 = *(void *)&v17[v15[9]];
      uint64_t v47 = *(void *)v44;
      uint64_t v46 = *((void *)v44 + 1);
      *(_DWORD *)(v39 + v15[5]) = v41;
      uint64_t v48 = (_OWORD *)(v39 + v15[6]);
      long long v49 = v70;
      *uint64_t v48 = v69;
      v48[1] = v49;
      long long v50 = v72;
      v48[2] = v71;
      v48[3] = v50;
      int64_t v51 = (void *)(v39 + v15[7]);
      *int64_t v51 = v47;
      v51[1] = v46;
      *(double *)(v39 + v15[8]) = a2;
      *(void *)(v39 + v15[9]) = v45;
      swift_bridgeObjectRetain();
      unint64_t v36 = type metadata accessor for ObjectDetectorResult;
      uint64_t v37 = (uint64_t)v17;
      break;
  }
  sub_100402744(v37, v36);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1003FE418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v112 = a2;
  uint64_t v111 = a1;
  uint64_t v110 = (int *)type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v110);
  uint64_t v109 = &v107[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = (int *)type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v107[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = (int *)type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v6);
  unint64_t v8 = &v107[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (int *)type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v9);
  unint64_t v11 = &v107[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (int *)type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v12);
  unint64_t v14 = &v107[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for CVDetection();
  __chkstk_darwin(v15);
  int64_t v17 = &v107[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001614D0(v113, (uint64_t)v17);
  uint64_t v113 = v15;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_100403068((uint64_t)v17, (uint64_t)v11, type metadata accessor for ParseDetectorResult);
      uint64_t v46 = type metadata accessor for UUID();
      uint64_t v47 = v112;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v46 - 8) + 16))(v112, v11, v46);
      int v48 = *(_DWORD *)&v11[v9[5]];
      uint64_t v49 = *(void *)&v11[v9[7]];
      uint64_t v50 = *(void *)&v11[v9[8]];
      int64_t v51 = (_OWORD *)v111;
      uint64_t v52 = *(void *)(v111 + 80);
      uint64_t v53 = v9[10];
      uint64_t v54 = v9[11];
      LODWORD(v110) = EnumCaseMultiPayload;
      int v108 = v11[v53];
      uint64_t v55 = *(void *)&v11[v54 + 8];
      uint64_t v109 = *(unsigned char **)&v11[v54];
      long long v56 = (uint64_t *)&v11[v9[12]];
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      sub_10006F1D0((uint64_t)&v11[v9[13]], v47 + v9[13]);
      uint64_t v59 = (uint64_t *)&v11[v9[14]];
      uint64_t v60 = *v59;
      unint64_t v61 = v59[1];
      *(_DWORD *)(v47 + v9[5]) = v48;
      double v62 = (_OWORD *)(v47 + v9[6]);
      long long v63 = v51[4];
      v62[2] = v51[3];
      v62[3] = v63;
      long long v64 = v51[2];
      *double v62 = v51[1];
      v62[1] = v64;
      *(void *)(v47 + v9[7]) = v49;
      *(void *)(v47 + v9[8]) = v50;
      *(void *)(v47 + v9[9]) = v52;
      *(unsigned char *)(v47 + v9[10]) = v108;
      uint64_t v65 = (void *)(v47 + v9[11]);
      *uint64_t v65 = v109;
      v65[1] = v55;
      uint64_t v66 = (void *)(v47 + v9[12]);
      void *v66 = v58;
      v66[1] = v57;
      uint64_t v67 = (uint64_t *)(v47 + v9[14]);
      *uint64_t v67 = v60;
      v67[1] = v61;
      uint64_t v68 = v9[15];
      long long v69 = (uint64_t *)(v47 + v68);
      long long v70 = (uint64_t *)&v11[v68];
      uint64_t v71 = *v70;
      uint64_t v72 = v70[1];
      uint64_t v73 = v70[2];
      *long long v69 = *v70;
      v69[1] = v72;
      v69[2] = v73;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000A7588(v60, v61);
      sub_1003F6C80(v71);
      uint64_t v32 = type metadata accessor for ParseDetectorResult;
      uint64_t v33 = (uint64_t)v11;
      break;
    case 2:
      sub_100403068((uint64_t)v17, (uint64_t)v8, type metadata accessor for TextDetectorResult);
      uint64_t v74 = type metadata accessor for UUID();
      uint64_t v75 = v112;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v74 - 8) + 16))(v112, v8, v74);
      long long v76 = (uint64_t *)&v8[v6[7]];
      uint64_t v77 = *(void *)&v8[v6[8]];
      uint64_t v78 = *(void *)&v8[v6[10]];
      uint64_t v79 = *(void *)&v8[v6[11]];
      uint64_t v80 = *v76;
      uint64_t v81 = v76[1];
      LOBYTE(v76) = v8[v6[14]];
      uint64_t v82 = *(void *)&v8[v6[12]];
      uint64_t v83 = *(void **)&v8[v6[13]];
      *(_DWORD *)(v75 + v6[5]) = *(_DWORD *)&v8[v6[5]];
      uint64_t v84 = v111;
      uint64_t v85 = *(void *)(v111 + 80);
      uint64_t v86 = (_OWORD *)(v75 + v6[6]);
      long long v87 = *(_OWORD *)(v111 + 32);
      _OWORD *v86 = *(_OWORD *)(v111 + 16);
      v86[1] = v87;
      long long v88 = *(_OWORD *)(v84 + 64);
      v86[2] = *(_OWORD *)(v84 + 48);
      v86[3] = v88;
      uint64_t v89 = (void *)(v75 + v6[7]);
      void *v89 = v80;
      v89[1] = v81;
      *(void *)(v75 + v6[8]) = v77;
      *(void *)(v75 + v6[9]) = v85;
      *(void *)(v75 + v6[10]) = v78;
      *(void *)(v75 + v6[11]) = v79;
      *(unsigned char *)(v75 + v6[14]) = (_BYTE)v76;
      *(void *)(v75 + v6[12]) = v82;
      *(void *)(v75 + v6[13]) = v83;
      id v90 = v83;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v32 = type metadata accessor for TextDetectorResult;
      uint64_t v33 = (uint64_t)v8;
      break;
    case 3:
    case 4:
      sub_100403068((uint64_t)v17, (uint64_t)v5, type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v20 = v112;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16))(v112, v5, v19);
      uint64_t v21 = (uint64_t *)&v5[v3[7]];
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = *(void *)&v5[v3[8]];
      long long v25 = (_OWORD *)v111;
      uint64_t v26 = *(void *)(v111 + 80);
      uint64_t v27 = *(void *)&v5[v3[10]];
      *(_DWORD *)(v20 + v3[5]) = *(_DWORD *)&v5[v3[5]];
      uint64_t v28 = (_OWORD *)(v20 + v3[6]);
      long long v29 = v25[4];
      v28[2] = v25[3];
      v28[3] = v29;
      long long v30 = v25[2];
      _OWORD *v28 = v25[1];
      v28[1] = v30;
      uint64_t v31 = (void *)(v20 + v3[7]);
      *uint64_t v31 = v22;
      v31[1] = v23;
      *(void *)(v20 + v3[8]) = v24;
      *(void *)(v20 + v3[9]) = v26;
      *(void *)(v20 + v3[10]) = v27;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v32 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v33 = (uint64_t)v5;
      break;
    case 5:
      uint64_t v91 = (uint64_t)v17;
      uint64_t v92 = v109;
      sub_100403068(v91, (uint64_t)v109, type metadata accessor for StreamingTextDetectorResult);
      uint64_t v93 = type metadata accessor for UUID();
      uint64_t v94 = v112;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v93 - 8) + 16))(v112, v92, v93);
      os_log_type_t v95 = v110;
      uint64_t v96 = (uint64_t *)&v92[v110[7]];
      uint64_t v97 = *(void *)&v92[v110[8]];
      uint64_t v99 = *v96;
      uint64_t v98 = v96[1];
      uint64_t v100 = (_OWORD *)v111;
      uint64_t v101 = *(void *)(v111 + 80);
      *(_DWORD *)(v94 + v110[5]) = *(_DWORD *)&v92[v110[5]];
      uint64_t v102 = (_OWORD *)(v94 + v95[6]);
      long long v103 = v100[4];
      v102[2] = v100[3];
      v102[3] = v103;
      long long v104 = v100[2];
      *uint64_t v102 = v100[1];
      v102[1] = v104;
      uint64_t v105 = (void *)(v94 + v95[7]);
      *uint64_t v105 = v99;
      v105[1] = v98;
      *(void *)(v94 + v95[8]) = v97;
      *(void *)(v94 + v95[9]) = v101;
      swift_bridgeObjectRetain();
      uint64_t v32 = type metadata accessor for StreamingTextDetectorResult;
      uint64_t v33 = (uint64_t)v92;
      break;
    default:
      sub_100403068((uint64_t)v17, (uint64_t)v14, type metadata accessor for ObjectDetectorResult);
      uint64_t v34 = type metadata accessor for UUID();
      uint64_t v35 = v112;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 16))(v112, v14, v34);
      unint64_t v36 = (uint64_t *)&v14[v12[7]];
      uint64_t v37 = *(void *)&v14[v12[8]];
      uint64_t v39 = *v36;
      uint64_t v38 = v36[1];
      uint64_t v40 = (_OWORD *)v111;
      uint64_t v41 = *(void *)(v111 + 80);
      *(_DWORD *)(v35 + v12[5]) = *(_DWORD *)&v14[v12[5]];
      long long v42 = (_OWORD *)(v35 + v12[6]);
      long long v43 = v40[4];
      v42[2] = v40[3];
      v42[3] = v43;
      long long v44 = v40[2];
      *long long v42 = v40[1];
      v42[1] = v44;
      uint64_t v45 = (void *)(v35 + v12[7]);
      *uint64_t v45 = v39;
      v45[1] = v38;
      *(void *)(v35 + v12[8]) = v37;
      *(void *)(v35 + v12[9]) = v41;
      swift_bridgeObjectRetain();
      uint64_t v32 = type metadata accessor for ObjectDetectorResult;
      uint64_t v33 = (uint64_t)v14;
      break;
  }
  sub_100402744(v33, v32);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1003FEC34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v2, (uint64_t)v6);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      a1[3] = type metadata accessor for ParseDetectorResult(0);
      uint64_t v7 = sub_1004042E4(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
      unint64_t v8 = type metadata accessor for ParseDetectorResult;
      break;
    case 2u:
      a1[3] = type metadata accessor for TextDetectorResult(0);
      uint64_t v7 = sub_1004042E4((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
      unint64_t v8 = type metadata accessor for TextDetectorResult;
      break;
    case 3u:
    case 4u:
      a1[3] = type metadata accessor for StreamingBarcodeDetectorResult(0);
      uint64_t v7 = sub_1004042E4(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
      unint64_t v8 = type metadata accessor for StreamingBarcodeDetectorResult;
      break;
    case 5u:
      a1[3] = type metadata accessor for StreamingTextDetectorResult(0);
      uint64_t v7 = sub_1004042E4((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
      unint64_t v8 = type metadata accessor for StreamingTextDetectorResult;
      break;
    default:
      a1[3] = type metadata accessor for ObjectDetectorResult(0);
      uint64_t v7 = sub_1004042E4(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
      unint64_t v8 = type metadata accessor for ObjectDetectorResult;
      break;
  }
  uint64_t v9 = v8;
  a1[4] = v7;
  uint64_t v10 = sub_100040120(a1);
  return sub_100403068((uint64_t)v6, (uint64_t)v10, v9);
}

uint64_t sub_1003FEEC4()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[5];
  sub_100040758(0, 4, 0);
  unint64_t v10 = _swiftEmptyArrayStorage[2];
  unint64_t v9 = _swiftEmptyArrayStorage[3];
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    sub_100040758(v9 > 1, v10 + 1, 1);
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    int64_t v11 = v9 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v12;
  _swiftEmptyArrayStorage[v10 + 4] = v2;
  int64_t v13 = v10 + 2;
  if (v11 < v13) {
    sub_100040758(v9 > 1, v13, 1);
  }
  _swiftEmptyArrayStorage[2] = v13;
  _swiftEmptyArrayStorage[v12 + 4] = v4;
  unint64_t v15 = _swiftEmptyArrayStorage[2];
  unint64_t v14 = _swiftEmptyArrayStorage[3];
  unint64_t v16 = v15 + 1;
  if (v15 >= v14 >> 1) {
    sub_100040758(v14 > 1, v15 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v16;
  _swiftEmptyArrayStorage[v15 + 4] = v6;
  unint64_t v17 = _swiftEmptyArrayStorage[3];
  int64_t v18 = v15 + 2;
  if (v18 > (uint64_t)(v17 >> 1)) {
    sub_100040758(v17 > 1, v18, 1);
  }
  uint64_t v19 = 0;
  _swiftEmptyArrayStorage[2] = v18;
  _swiftEmptyArrayStorage[v16 + 4] = v7;
  double v20 = 0.0;
  do
  {
    uint64_t v21 = (double *)&_swiftEmptyArrayStorage[v19++];
    double v20 = v20 + (v21[4] - v20) / (double)v19;
  }
  while (v18 != v19);
  swift_release();
  sub_100040758(0, 4, 0);
  unint64_t v23 = _swiftEmptyArrayStorage[2];
  unint64_t v22 = _swiftEmptyArrayStorage[3];
  unint64_t v24 = v22 >> 1;
  unint64_t v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    sub_100040758(v22 > 1, v23 + 1, 1);
    unint64_t v22 = _swiftEmptyArrayStorage[3];
    unint64_t v24 = v22 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v25;
  _swiftEmptyArrayStorage[v23 + 4] = v1;
  int64_t v26 = v23 + 2;
  if (v24 <= v25) {
    sub_100040758(v22 > 1, v26, 1);
  }
  _swiftEmptyArrayStorage[2] = v26;
  _swiftEmptyArrayStorage[v25 + 4] = v3;
  unint64_t v28 = _swiftEmptyArrayStorage[2];
  unint64_t v27 = _swiftEmptyArrayStorage[3];
  unint64_t v29 = v28 + 1;
  if (v28 >= v27 >> 1) {
    sub_100040758(v27 > 1, v28 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v29;
  _swiftEmptyArrayStorage[v28 + 4] = v5;
  unint64_t v30 = _swiftEmptyArrayStorage[3];
  int64_t v31 = v28 + 2;
  if (v29 >= v30 >> 1) {
    sub_100040758(v30 > 1, v31, 1);
  }
  _swiftEmptyArrayStorage[2] = v31;
  _swiftEmptyArrayStorage[v29 + 4] = v8;
  uint64_t v32 = _swiftEmptyArrayStorage[2];
  if (v32)
  {
    uint64_t v33 = 0;
    double v34 = 0.0;
    do
    {
      uint64_t v35 = (double *)&_swiftEmptyArrayStorage[v33++];
      double v34 = v34 + (v35[4] - v34) / (double)v33;
    }
    while (v32 != v33);
    return swift_release();
  }
  else
  {
    swift_release();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1003FF210(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  CGAffineTransformMakeTranslation(&t1, -0.5, -0.5);
  long long v44 = *(_OWORD *)&t1.c;
  long long v45 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  double v57 = a2 - a3;
  CGAffineTransformMakeRotation(&t1, -(a2 - a3));
  long long v46 = *(_OWORD *)&t1.c;
  long long v47 = *(_OWORD *)&t1.a;
  CGFloat v9 = t1.tx;
  CGFloat v10 = t1.ty;
  CGAffineTransformMakeTranslation(&t1, 0.5, 0.5);
  long long v48 = *(_OWORD *)&t1.c;
  long long v49 = *(_OWORD *)&t1.a;
  CGFloat v11 = t1.tx;
  CGFloat v12 = t1.ty;
  CGFloat v13 = *v3;
  CGFloat v14 = v3[1];
  CGFloat v50 = v3[3];
  CGFloat v51 = v3[2];
  CGFloat v52 = v3[7];
  CGFloat v53 = v3[6];
  CGFloat v54 = v3[5];
  CGFloat v55 = v3[4];
  long long v15 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&t1.CGFloat c = v15;
  *(_OWORD *)&t1.CGFloat tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  *(_OWORD *)&t2.CGFloat a = v45;
  *(_OWORD *)&t2.CGFloat c = v44;
  t2.CGFloat tx = tx;
  t2.CGFloat ty = ty;
  CGAffineTransformConcat(&v59, &t1, &t2);
  CGAffineTransform t1 = v59;
  *(_OWORD *)&t2.CGFloat a = v47;
  *(_OWORD *)&t2.CGFloat c = v46;
  t2.CGFloat tx = v9;
  t2.CGFloat ty = v10;
  CGAffineTransformConcat(&v59, &t1, &t2);
  CGAffineTransform t1 = v59;
  *(_OWORD *)&t2.CGFloat a = v49;
  *(_OWORD *)&t2.CGFloat c = v48;
  t2.CGFloat tx = v11;
  t2.CGFloat ty = v12;
  CGAffineTransformConcat(&v59, &t1, &t2);
  CGFloat a = v59.a;
  CGFloat b = v59.b;
  CGFloat c = v59.c;
  CGFloat d = v59.d;
  CGFloat v20 = v59.tx;
  CGFloat v21 = v59.ty;
  *(void *)&t2.CGFloat a = _swiftEmptyArrayStorage;
  sub_100040848(0, 4, 0);
  CGFloat v22 = t2.a;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.CGFloat tx = v20;
  t1.CGFloat ty = v21;
  v62.x = v13;
  v62.y = v14;
  CGPoint v23 = CGPointApplyAffineTransform(v62, &t1);
  unint64_t v25 = *(void *)(*(void *)&v22 + 16);
  unint64_t v24 = *(void *)(*(void *)&v22 + 24);
  if (v25 >= v24 >> 1)
  {
    sub_100040848(v24 > 1, v25 + 1, 1);
    CGFloat v22 = t2.a;
  }
  *(void *)(*(void *)&v22 + 16) = v25 + 1;
  *(CGPoint *)(*(void *)&v22 + 16 * v25 + 32) = v23;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.CGFloat tx = v20;
  t1.CGFloat ty = v21;
  v63.y = v50;
  v63.x = v51;
  CGPoint v26 = CGPointApplyAffineTransform(v63, &t1);
  unint64_t v28 = *(void *)(*(void *)&v22 + 16);
  unint64_t v27 = *(void *)(*(void *)&v22 + 24);
  if (v28 >= v27 >> 1)
  {
    sub_100040848(v27 > 1, v28 + 1, 1);
    CGFloat v22 = t2.a;
  }
  *(void *)(*(void *)&v22 + 16) = v28 + 1;
  *(CGPoint *)(*(void *)&v22 + 16 * v28 + 32) = v26;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.CGFloat tx = v20;
  t1.CGFloat ty = v21;
  v64.y = v52;
  v64.x = v53;
  CGPoint v29 = CGPointApplyAffineTransform(v64, &t1);
  unint64_t v31 = *(void *)(*(void *)&v22 + 16);
  unint64_t v30 = *(void *)(*(void *)&v22 + 24);
  unint64_t v32 = v31 + 1;
  if (v31 >= v30 >> 1) {
    sub_100040848(v30 > 1, v31 + 1, 1);
  }
  uint64_t v33 = *(void *)&t2.a;
  *(void *)(*(void *)&t2.a + 16) = v32;
  *(CGPoint *)(v33 + 16 * v31 + 32) = v29;
  t1.CGFloat a = a;
  t1.CGFloat b = b;
  t1.CGFloat c = c;
  t1.CGFloat d = d;
  t1.CGFloat tx = v20;
  t1.CGFloat ty = v21;
  v65.y = v54;
  v65.x = v55;
  CGPoint v34 = CGPointApplyAffineTransform(v65, &t1);
  unint64_t v35 = *(void *)(v33 + 24);
  int64_t v36 = v31 + 2;
  if (v32 >= v35 >> 1)
  {
    sub_100040848(v35 > 1, v36, 1);
    uint64_t v33 = *(void *)&t2.a;
  }
  *(void *)(v33 + 16) = v36;
  *(CGPoint *)(v33 + 16 * v32 + 32) = v34;
  double v37 = v57 * 180.0 / 3.14159265 / 90.0;
  if ((~*(void *)&v37 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v37 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v38 = sub_100403274(0, (char *)4, v33, 4, (uint64_t)v37);
  swift_release();
  unint64_t v39 = *((void *)v38 + 2);
  if (!v39)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v39 == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v39 >= 4)
  {
    uint64_t v40 = *((void *)v38 + 4);
    uint64_t v41 = *((void *)v38 + 5);
    long long v56 = *((_OWORD *)v38 + 5);
    long long v58 = *((_OWORD *)v38 + 3);
    uint64_t v42 = *((void *)v38 + 8);
    uint64_t v43 = *((void *)v38 + 9);
    swift_bridgeObjectRelease();
    *(void *)a1 = v40;
    *(void *)(a1 + 8) = v41;
    *(_OWORD *)(a1 + 16) = v58;
    *(_OWORD *)(a1 + 32) = v56;
    *(void *)(a1 + 48) = v42;
    *(void *)(a1 + 56) = v43;
    return;
  }
LABEL_21:
  __break(1u);
}

double sub_1003FF634@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CVDetection();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v2, (uint64_t)v6);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v14 = type metadata accessor for ParseDetectorResult(0);
      uint64_t v7 = sub_1004042E4(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
      uint64_t v8 = type metadata accessor for ParseDetectorResult;
      break;
    case 2u:
      uint64_t v14 = type metadata accessor for TextDetectorResult(0);
      uint64_t v7 = sub_1004042E4((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
      uint64_t v8 = type metadata accessor for TextDetectorResult;
      break;
    case 3u:
    case 4u:
      uint64_t v14 = type metadata accessor for StreamingBarcodeDetectorResult(0);
      uint64_t v7 = sub_1004042E4(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v8 = type metadata accessor for StreamingBarcodeDetectorResult;
      break;
    case 5u:
      uint64_t v14 = type metadata accessor for StreamingTextDetectorResult(0);
      uint64_t v7 = sub_1004042E4((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
      uint64_t v8 = type metadata accessor for StreamingTextDetectorResult;
      break;
    default:
      uint64_t v14 = type metadata accessor for ObjectDetectorResult(0);
      uint64_t v7 = sub_1004042E4(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
      uint64_t v8 = type metadata accessor for ObjectDetectorResult;
      break;
  }
  CGFloat v9 = v8;
  uint64_t v15 = v7;
  CGFloat v10 = sub_100040120(v13);
  sub_100403068((uint64_t)v6, (uint64_t)v10, v9);
  sub_10000F214(&qword_100519FA0);
  sub_10000F214(&qword_10052CF28);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1003FF90C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000F214(&qword_10052E540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100404290();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  type metadata accessor for CGPoint(0);
  sub_1004042E4(&qword_10051E4F8, type metadata accessor for CGPoint);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[2];
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[3];
    char v11 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1003FFB40()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v3;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  Swift::UInt64 v7 = v0[4];
  Swift::UInt64 v8 = v0[5];
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v4;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v7;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  Swift::UInt64 v12 = v0[6];
  Swift::UInt64 v11 = v0[7];
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v8;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v12;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v11;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  return Hasher._finalize()();
}

uint64_t sub_1003FFC1C()
{
  uint64_t result = 0x7466654C706F74;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7468676952706F74;
      break;
    case 2:
      uint64_t result = 0x654C6D6F74746F62;
      break;
    case 3:
      uint64_t result = 0x69526D6F74746F62;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003FFCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100403E08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003FFCE0(uint64_t a1)
{
  unint64_t v2 = sub_100404290();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003FFD1C(uint64_t a1)
{
  unint64_t v2 = sub_100404290();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1003FFD58(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return sub_1004027A4((double *)v7, (double *)v8);
}

void sub_1003FFDA8()
{
  Swift::UInt64 v1 = v0[1];
  Swift::UInt64 v2 = v0[2];
  Swift::UInt64 v3 = v0[3];
  Swift::UInt64 v4 = v0[4];
  Swift::UInt64 v5 = v0[5];
  Swift::UInt64 v6 = v0[6];
  Swift::UInt64 v7 = v0[7];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *v0;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v1;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v2;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v3;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v4;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v5;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v6;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v7;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
}

Swift::Int sub_1003FFE54()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = v0[2];
  Swift::UInt64 v4 = v0[3];
  Swift::UInt64 v5 = v0[4];
  Swift::UInt64 v6 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Swift::UInt64 v8 = v0[7];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v1;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v2;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v3;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v12 = v4;
  }
  else {
    Swift::UInt64 v12 = 0;
  }
  Hasher._combine(_:)(v12);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v5;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v6;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v7;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = v8;
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  return Hasher._finalize()();
}

double sub_1003FFF38@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100403FE8(a1, v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1003FFF7C(void *a1)
{
  return sub_1003FF90C(a1);
}

uint64_t sub_1003FFF94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v7 - 8);
  long long v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v10 - 8);
  Swift::UInt64 v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v13 - 8);
  Swift::UInt64 v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v16 - 8);
  int64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CVDetection();
  __chkstk_darwin(v19);
  CGFloat v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001614D0(v2, (uint64_t)v21);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100403068((uint64_t)v21, (uint64_t)v15, type metadata accessor for ParseDetectorResult);
      Hasher._combine(_:)(1uLL);
      sub_1003E7010(a1);
      CGFloat v22 = type metadata accessor for ParseDetectorResult;
      uint64_t v23 = (uint64_t)v15;
      break;
    case 2u:
      sub_100403068((uint64_t)v21, (uint64_t)v12, type metadata accessor for TextDetectorResult);
      Hasher._combine(_:)(2uLL);
      sub_10032169C(a1);
      CGFloat v22 = type metadata accessor for TextDetectorResult;
      uint64_t v23 = (uint64_t)v12;
      break;
    case 3u:
      sub_100403068((uint64_t)v21, (uint64_t)v9, type metadata accessor for StreamingBarcodeDetectorResult);
      Swift::UInt v24 = 3;
      goto LABEL_7;
    case 4u:
      sub_100403068((uint64_t)v21, (uint64_t)v9, type metadata accessor for StreamingBarcodeDetectorResult);
      Swift::UInt v24 = 4;
LABEL_7:
      Hasher._combine(_:)(v24);
      sub_100165074();
      CGFloat v22 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v23 = (uint64_t)v9;
      break;
    case 5u:
      sub_100403068((uint64_t)v21, (uint64_t)v6, type metadata accessor for StreamingTextDetectorResult);
      Hasher._combine(_:)(5uLL);
      sub_1001665AC();
      CGFloat v22 = type metadata accessor for StreamingTextDetectorResult;
      uint64_t v23 = (uint64_t)v6;
      break;
    default:
      sub_100403068((uint64_t)v21, (uint64_t)v18, type metadata accessor for ObjectDetectorResult);
      Hasher._combine(_:)(0);
      sub_10031E668();
      CGFloat v22 = type metadata accessor for ObjectDetectorResult;
      uint64_t v23 = (uint64_t)v18;
      break;
  }
  return sub_100402744(v23, v22);
}

uint64_t sub_100400388(void *a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052E448);
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v63);
  uint64_t v65 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_10052E450);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  unint64_t v61 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052E458);
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  __chkstk_darwin(v6);
  long long v58 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v69);
  uint64_t v57 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v56 = (uint64_t)&v44 - v10;
  uint64_t v11 = sub_10000F214(&qword_10052E460);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  __chkstk_darwin(v11);
  CGFloat v53 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v51);
  uint64_t v52 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000F214(&qword_10052E468);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  long long v48 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v46);
  uint64_t v47 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10000F214(&qword_10052E470);
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CVDetection();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000F214(&qword_10052E478);
  uint64_t v71 = *(void *)(v24 - 8);
  uint64_t v72 = v24;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100402FC0();
  long long v70 = v26;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1001614D0(v73, (uint64_t)v23);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v32 = v47;
      sub_100403068((uint64_t)v23, v47, type metadata accessor for ParseDetectorResult);
      char v75 = 1;
      sub_1004031CC();
      uint64_t v33 = v48;
      uint64_t v27 = v72;
      unint64_t v28 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1004042E4(&qword_10052DFC0, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
      uint64_t v34 = v50;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v34);
      unint64_t v35 = type metadata accessor for ParseDetectorResult;
      goto LABEL_9;
    case 2u:
      uint64_t v32 = v52;
      sub_100403068((uint64_t)v23, v52, type metadata accessor for TextDetectorResult);
      char v76 = 2;
      sub_100403178();
      int64_t v36 = v53;
      uint64_t v27 = v72;
      unint64_t v28 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1004042E4((unint64_t *)&unk_1005295D0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
      uint64_t v37 = v55;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v37);
      unint64_t v35 = type metadata accessor for TextDetectorResult;
      goto LABEL_9;
    case 3u:
      uint64_t v32 = v56;
      sub_100403068((uint64_t)v23, v56, type metadata accessor for StreamingBarcodeDetectorResult);
      char v77 = 3;
      sub_100403124();
      uint64_t v38 = v58;
      uint64_t v27 = v72;
      unint64_t v28 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1004042E4(&qword_100522068, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v39 = v60;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v40 = v59;
      goto LABEL_7;
    case 4u:
      uint64_t v32 = v57;
      sub_100403068((uint64_t)v23, v57, type metadata accessor for StreamingBarcodeDetectorResult);
      char v78 = 4;
      sub_1004030D0();
      uint64_t v38 = v61;
      uint64_t v27 = v72;
      unint64_t v28 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1004042E4(&qword_100522068, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v39 = v64;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v40 = v62;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
      unint64_t v35 = type metadata accessor for StreamingBarcodeDetectorResult;
      goto LABEL_9;
    case 5u:
      uint64_t v32 = v65;
      sub_100403068((uint64_t)v23, v65, type metadata accessor for StreamingTextDetectorResult);
      char v79 = 5;
      sub_100403014();
      uint64_t v41 = v66;
      uint64_t v27 = v72;
      unint64_t v28 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1004042E4(&qword_100522118, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
      uint64_t v42 = v68;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v42);
      unint64_t v35 = type metadata accessor for StreamingTextDetectorResult;
LABEL_9:
      unint64_t v30 = v35;
      uint64_t v31 = v32;
      break;
    default:
      sub_100403068((uint64_t)v23, (uint64_t)v20, type metadata accessor for ObjectDetectorResult);
      char v74 = 0;
      sub_100403220();
      uint64_t v27 = v72;
      unint64_t v28 = v70;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1004042E4(&qword_100529520, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
      uint64_t v29 = v45;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v29);
      unint64_t v30 = type metadata accessor for ObjectDetectorResult;
      uint64_t v31 = (uint64_t)v20;
      break;
  }
  sub_100402744(v31, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v28, v27);
}

uint64_t sub_100400F84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v88 = a2;
  uint64_t v3 = sub_10000F214(&qword_10052E3D8);
  uint64_t v86 = *(void *)(v3 - 8);
  uint64_t v87 = v3;
  __chkstk_darwin(v3);
  uint64_t v91 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10052E3E0);
  uint64_t v84 = *(void *)(v5 - 8);
  uint64_t v85 = v5;
  __chkstk_darwin(v5);
  id v90 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000F214(&qword_10052E3E8);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  __chkstk_darwin(v7);
  uint64_t v96 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F214(&qword_10052E3F0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v80 = v9;
  uint64_t v81 = v10;
  __chkstk_darwin(v9);
  os_log_type_t v95 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_10000F214(&qword_10052E3F8);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v94 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000F214(&qword_10052E400);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v89 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10052E408);
  uint64_t v92 = *(void *)(v14 - 8);
  uint64_t v93 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for CVDetection();
  __chkstk_darwin(v97);
  char v75 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v74 = (char *)&v69 - v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v69 - v21;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v69 - v24;
  __chkstk_darwin(v26);
  unint64_t v28 = (char *)&v69 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v69 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v69 - v33;
  uint64_t v35 = a1[3];
  uint64_t v98 = a1;
  sub_10000F3B0(a1, v35);
  sub_100402FC0();
  uint64_t v36 = (uint64_t)v99;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v36) {
    goto LABEL_11;
  }
  long long v70 = v28;
  uint64_t v71 = v25;
  uint64_t v72 = v22;
  uint64_t v73 = v31;
  uint64_t v38 = v94;
  uint64_t v37 = v95;
  uint64_t v39 = v96;
  uint64_t v40 = v97;
  uint64_t v99 = v34;
  uint64_t v41 = v93;
  uint64_t v42 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v43 = (char *)v42;
  if (*(void *)(v42 + 16) != 1)
  {
    uint64_t v49 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v51 = v50;
    sub_10000F214(&qword_10051E3E0);
    *uint64_t v51 = v40;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v49 - 8) + 104))(v51, enum case for DecodingError.typeMismatch(_:), v49);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v16, v41);
LABEL_11:
    uint64_t v47 = (uint64_t)v98;
    return _s6Tamale17AnyLocalizedErrorVwxx_0(v47);
  }
  switch(*(unsigned char *)(v42 + 32))
  {
    case 1:
      char v101 = 1;
      sub_1004031CC();
      uint64_t v52 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for ParseDetectorResult(0);
      sub_1004042E4(&qword_10052DFB8, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
      uint64_t v53 = (uint64_t)v70;
      uint64_t v54 = v79;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v54);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v16, v41);
      uint64_t v47 = (uint64_t)v98;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v53;
      break;
    case 2:
      char v102 = 2;
      sub_100403178();
      uint64_t v55 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for TextDetectorResult(0);
      sub_1004042E4(&qword_1005295C8, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
      uint64_t v56 = (uint64_t)v71;
      uint64_t v57 = v80;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v58 = v92;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v55, v57);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v41);
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v56;
      goto LABEL_14;
    case 3:
      char v103 = 3;
      sub_100403124();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      os_log_type_t v95 = v43;
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      sub_1004042E4(&qword_100522060, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v59 = v72;
      uint64_t v60 = v83;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v39, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v16, v41);
      goto LABEL_13;
    case 4:
      char v104 = 4;
      sub_1004030D0();
      unint64_t v61 = v90;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for StreamingBarcodeDetectorResult(0);
      sub_1004042E4(&qword_100522060, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
      uint64_t v59 = v74;
      uint64_t v62 = v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v63 = v92;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v61, v62);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v41);
      goto LABEL_13;
    case 5:
      char v105 = 5;
      sub_100403014();
      uint64_t v64 = v91;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for StreamingTextDetectorResult(0);
      sub_1004042E4(&qword_100522110, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
      uint64_t v59 = v75;
      uint64_t v66 = v87;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v67 = v92;
      (*(void (**)(char *, uint64_t))(v86 + 8))(v64, v66);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v16, v41);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = (uint64_t)v59;
LABEL_14:
      uint64_t v47 = (uint64_t)v98;
      break;
    default:
      char v100 = 0;
      sub_100403220();
      uint64_t v44 = v89;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for ObjectDetectorResult(0);
      os_log_type_t v95 = v43;
      sub_1004042E4(&qword_100529518, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
      uint64_t v45 = (uint64_t)v73;
      uint64_t v46 = v77;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v44, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v16, v41);
      uint64_t v47 = (uint64_t)v98;
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = v45;
      break;
  }
  uint64_t v68 = (uint64_t)v99;
  sub_100403068(v48, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for CVDetection);
  sub_100403068(v68, v88, (uint64_t (*)(void))type metadata accessor for CVDetection);
  return _s6Tamale17AnyLocalizedErrorVwxx_0(v47);
}

uint64_t sub_100401D88(uint64_t a1)
{
  unint64_t v2 = sub_1004030D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100401DC4(uint64_t a1)
{
  unint64_t v2 = sub_1004030D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100401E00()
{
  uint64_t result = 0x7463656A626FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6573726170;
      break;
    case 2:
      uint64_t result = 1954047348;
      break;
    case 3:
      uint64_t result = 0x65646F437271;
      break;
    case 4:
      uint64_t result = 0x70696C43707061;
      break;
    case 5:
      uint64_t result = 0x6E696D6165727473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100401EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10040432C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100401EE4(uint64_t a1)
{
  unint64_t v2 = sub_100402FC0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100401F20(uint64_t a1)
{
  unint64_t v2 = sub_100402FC0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100401F5C(uint64_t a1)
{
  unint64_t v2 = sub_100403220();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100401F98(uint64_t a1)
{
  unint64_t v2 = sub_100403220();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100401FD4(uint64_t a1)
{
  unint64_t v2 = sub_1004031CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100402010(uint64_t a1)
{
  unint64_t v2 = sub_1004031CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10040204C(uint64_t a1)
{
  unint64_t v2 = sub_100403124();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100402088(uint64_t a1)
{
  unint64_t v2 = sub_100403124();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004020C4(uint64_t a1)
{
  unint64_t v2 = sub_100403014();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100402100(uint64_t a1)
{
  unint64_t v2 = sub_100403014();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10040213C(uint64_t a1)
{
  unint64_t v2 = sub_100403178();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100402178(uint64_t a1)
{
  unint64_t v2 = sub_100403178();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1004021B4()
{
  Hasher.init(_seed:)();
  sub_1003FFF94((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1004021F8()
{
  Hasher.init(_seed:)();
  sub_1003FFF94((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100402234@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100400F84(a1, a2);
}

uint64_t sub_10040224C(void *a1)
{
  return sub_100400388(a1);
}

uint64_t sub_100402264()
{
  return sub_1004042E4(&qword_10052E340, (void (*)(uint64_t))type metadata accessor for CVDetection);
}

float sub_1004022B0()
{
  sub_1003FEC34(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  sub_10000F3B0(v4, v5);
  float v2 = (*(float (**)(uint64_t, uint64_t))(v1 + 56))(v0, v1);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v4);
  return v2;
}

double sub_10040232C@<D0>(_OWORD *a1@<X8>)
{
  sub_1003FEC34(v7);
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  sub_10000F3B0(v7, v8);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v3 + 64))(v10, v2, v3);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v7);
  long long v4 = v10[1];
  *a1 = v10[0];
  a1[1] = v4;
  double result = *(double *)&v11;
  long long v6 = v12;
  a1[2] = v11;
  a1[3] = v6;
  return result;
}

uint64_t sub_1004023B0()
{
  sub_1003FEC34(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  sub_10000F3B0(v4, v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(v0, v1);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v4);
  return v2;
}

double sub_10040242C()
{
  sub_1003FEC34(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  sub_10000F3B0(v4, v5);
  double v2 = (*(double (**)(uint64_t, uint64_t))(v1 + 80))(v0, v1);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v4);
  return v2;
}

uint64_t sub_1004024AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000F214(&qword_1005297A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_10040251C()
{
  return 1065353216;
}

uint64_t sub_100402538()
{
  sub_1003FEC34(v3);
  uint64_t v0 = v4;
  uint64_t v1 = v5;
  sub_10000F3B0(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
  return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v3);
}

double sub_1004025AC()
{
  sub_1003FEC34(v4);
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  sub_10000F3B0(v4, v5);
  double v2 = (*(double (**)(uint64_t, uint64_t))(v1 + 88))(v0, v1);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v4);
  return v2;
}

uint64_t sub_100402628()
{
  return sub_1004042E4((unint64_t *)&qword_100524E40, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_100402670(void *a1)
{
  a1[1] = sub_1004042E4(&qword_10051A030, (void (*)(uint64_t))type metadata accessor for CVDetection);
  a1[2] = sub_1004042E4(&qword_10051A050, (void (*)(uint64_t))type metadata accessor for CVDetection);
  a1[3] = sub_1004042E4(qword_100521BB0, (void (*)(uint64_t))type metadata accessor for CVDetection);
  uint64_t result = sub_1004042E4(&qword_10052E3D0, (void (*)(uint64_t))type metadata accessor for CVDetection);
  a1[4] = result;
  return result;
}

uint64_t sub_100402744(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_1004027A4(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7];
}

uint64_t sub_100402834(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v2 = type metadata accessor for StreamingTextDetectorResult(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v55 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for StreamingBarcodeDetectorResult(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v54 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v50 - v7;
  uint64_t v8 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v52 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ParseDetectorResult(0);
  __chkstk_darwin(v10 - 8);
  uint64_t v51 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ObjectDetectorResult(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CVDetection();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v50 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v50 - v25;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v50 - v28;
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v50 - v31;
  uint64_t v33 = sub_10000F214(&qword_100524EB0);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v50 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (uint64_t)&v35[*(int *)(v36 + 56)];
  sub_1001614D0(v56, (uint64_t)v35);
  sub_1001614D0(v57, v37);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001614D0((uint64_t)v35, (uint64_t)v29);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v40 = v51;
        sub_100403068(v37, v51, type metadata accessor for ParseDetectorResult);
        char v41 = sub_1003F65EC((uint64_t)v29, v40);
        uint64_t v42 = type metadata accessor for ParseDetectorResult;
        sub_100402744(v40, type metadata accessor for ParseDetectorResult);
        uint64_t v43 = (uint64_t)v29;
        goto LABEL_21;
      }
      uint64_t v38 = type metadata accessor for ParseDetectorResult;
      uint64_t v39 = (uint64_t)v29;
      goto LABEL_19;
    case 2u:
      sub_1001614D0((uint64_t)v35, (uint64_t)v26);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v44 = v52;
        sub_100403068(v37, v52, type metadata accessor for TextDetectorResult);
        char v41 = sub_10032F944((uint64_t)v26, v44);
        uint64_t v42 = type metadata accessor for TextDetectorResult;
        sub_100402744(v44, type metadata accessor for TextDetectorResult);
        uint64_t v43 = (uint64_t)v26;
        goto LABEL_21;
      }
      uint64_t v38 = type metadata accessor for TextDetectorResult;
      uint64_t v39 = (uint64_t)v26;
      goto LABEL_19;
    case 3u:
      sub_1001614D0((uint64_t)v35, (uint64_t)v23);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v45 = v53;
        sub_100403068(v37, v53, type metadata accessor for StreamingBarcodeDetectorResult);
        char v41 = sub_1001678FC((uint64_t)v23, v45);
        uint64_t v42 = type metadata accessor for StreamingBarcodeDetectorResult;
        sub_100402744(v45, type metadata accessor for StreamingBarcodeDetectorResult);
        uint64_t v43 = (uint64_t)v23;
        goto LABEL_21;
      }
      uint64_t v38 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v39 = (uint64_t)v23;
      goto LABEL_19;
    case 4u:
      sub_1001614D0((uint64_t)v35, (uint64_t)v20);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v46 = v54;
        sub_100403068(v37, v54, type metadata accessor for StreamingBarcodeDetectorResult);
        char v41 = sub_1001678FC((uint64_t)v20, v46);
        sub_100402744(v46, type metadata accessor for StreamingBarcodeDetectorResult);
        uint64_t v43 = (uint64_t)v20;
        uint64_t v47 = type metadata accessor for StreamingBarcodeDetectorResult;
        goto LABEL_22;
      }
      uint64_t v38 = type metadata accessor for StreamingBarcodeDetectorResult;
      uint64_t v39 = (uint64_t)v20;
      goto LABEL_19;
    case 5u:
      sub_1001614D0((uint64_t)v35, (uint64_t)v17);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v48 = v55;
        sub_100403068(v37, v55, type metadata accessor for StreamingTextDetectorResult);
        char v41 = sub_100167644((uint64_t)v17, v48);
        uint64_t v42 = type metadata accessor for StreamingTextDetectorResult;
        sub_100402744(v48, type metadata accessor for StreamingTextDetectorResult);
        uint64_t v43 = (uint64_t)v17;
        goto LABEL_21;
      }
      uint64_t v38 = type metadata accessor for StreamingTextDetectorResult;
      uint64_t v39 = (uint64_t)v17;
      goto LABEL_19;
    default:
      sub_1001614D0((uint64_t)v35, (uint64_t)v32);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v38 = type metadata accessor for ObjectDetectorResult;
        uint64_t v39 = (uint64_t)v32;
LABEL_19:
        sub_100402744(v39, v38);
        sub_100402F60((uint64_t)v35);
        char v41 = 0;
      }
      else
      {
        sub_100403068(v37, (uint64_t)v14, type metadata accessor for ObjectDetectorResult);
        char v41 = sub_10032F328((uint64_t)v32, (uint64_t)v14);
        uint64_t v42 = type metadata accessor for ObjectDetectorResult;
        sub_100402744((uint64_t)v14, type metadata accessor for ObjectDetectorResult);
        uint64_t v43 = (uint64_t)v32;
LABEL_21:
        uint64_t v47 = v42;
LABEL_22:
        sub_100402744(v43, v47);
        sub_100402744((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for CVDetection);
      }
      return v41 & 1;
  }
}

uint64_t sub_100402F60(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_100524EB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100402FC0()
{
  unint64_t result = qword_10052E410;
  if (!qword_10052E410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E410);
  }
  return result;
}

unint64_t sub_100403014()
{
  unint64_t result = qword_10052E418;
  if (!qword_10052E418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E418);
  }
  return result;
}

uint64_t sub_100403068(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1004030D0()
{
  unint64_t result = qword_10052E420;
  if (!qword_10052E420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E420);
  }
  return result;
}

unint64_t sub_100403124()
{
  unint64_t result = qword_10052E428;
  if (!qword_10052E428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E428);
  }
  return result;
}

unint64_t sub_100403178()
{
  unint64_t result = qword_10052E430;
  if (!qword_10052E430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E430);
  }
  return result;
}

unint64_t sub_1004031CC()
{
  unint64_t result = qword_10052E438;
  if (!qword_10052E438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E438);
  }
  return result;
}

unint64_t sub_100403220()
{
  unint64_t result = qword_10052E440;
  if (!qword_10052E440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E440);
  }
  return result;
}

char *sub_100403274(char *result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_22;
  }
  uint64_t v6 = result;
  unint64_t result = (char *)_swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t result = (char *)sub_100040848(0, v5 & ~(v5 >> 63), 0);
    if (!a4)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
    if ((uint64_t)a2 < (uint64_t)v6 || v5 < 0) {
      goto LABEL_24;
    }
    unint64_t result = (char *)_swiftEmptyArrayStorage;
    unint64_t v11 = *(void *)(a3 + 16);
    while (a2 != v6)
    {
      uint64_t v12 = &v6[a4];
      if (__OFADD__(v6, a4)) {
        goto LABEL_18;
      }
      BOOL v13 = __OFADD__(v12, a5);
      uint64_t v14 = (uint64_t)&v12[a5];
      if (v13) {
        goto LABEL_19;
      }
      if (v14 == 0x8000000000000000 && a4 == -1) {
        goto LABEL_21;
      }
      unint64_t v15 = v14 % a4;
      if (v15 >= v11) {
        goto LABEL_20;
      }
      long long v16 = *(_OWORD *)(a3 + 32 + 16 * v15);
      uint64_t v20 = result;
      unint64_t v18 = *((void *)result + 2);
      unint64_t v17 = *((void *)result + 3);
      if (v18 >= v17 >> 1)
      {
        long long v19 = v16;
        sub_100040848(v17 > 1, v18 + 1, 1);
        long long v16 = v19;
        unint64_t result = v20;
      }
      *((void *)result + 2) = v18 + 1;
      *(_OWORD *)&result[16 * v18 + 32] = v16;
      if (a2 == ++v6) {
        return result;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CVDetection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004034ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CVDetection.CodingKeys()
{
  return &type metadata for CVDetection.CodingKeys;
}

ValueMetadata *type metadata accessor for CVDetection.ObjectCodingKeys()
{
  return &type metadata for CVDetection.ObjectCodingKeys;
}

ValueMetadata *type metadata accessor for CVDetection.ParseCodingKeys()
{
  return &type metadata for CVDetection.ParseCodingKeys;
}

ValueMetadata *type metadata accessor for CVDetection.TextCodingKeys()
{
  return &type metadata for CVDetection.TextCodingKeys;
}

ValueMetadata *type metadata accessor for CVDetection.QrCodeCodingKeys()
{
  return &type metadata for CVDetection.QrCodeCodingKeys;
}

ValueMetadata *type metadata accessor for CVDetection.AppClipCodingKeys()
{
  return &type metadata for CVDetection.AppClipCodingKeys;
}

unsigned char *_s6Tamale11CVDetectionO16ObjectCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004035D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CVDetection.StreamingTextCodingKeys()
{
  return &type metadata for CVDetection.StreamingTextCodingKeys;
}

uint64_t getEnumTagSinglePayload for Corners(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Corners(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Corners()
{
  return &type metadata for Corners;
}

unint64_t sub_10040367C()
{
  unint64_t result = qword_10052E480;
  if (!qword_10052E480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E480);
  }
  return result;
}

unint64_t sub_1004036D4()
{
  unint64_t result = qword_10052E488;
  if (!qword_10052E488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E488);
  }
  return result;
}

unint64_t sub_10040372C()
{
  unint64_t result = qword_10052E490;
  if (!qword_10052E490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E490);
  }
  return result;
}

unint64_t sub_100403784()
{
  unint64_t result = qword_10052E498;
  if (!qword_10052E498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E498);
  }
  return result;
}

unint64_t sub_1004037DC()
{
  unint64_t result = qword_10052E4A0;
  if (!qword_10052E4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4A0);
  }
  return result;
}

unint64_t sub_100403834()
{
  unint64_t result = qword_10052E4A8;
  if (!qword_10052E4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4A8);
  }
  return result;
}

unint64_t sub_10040388C()
{
  unint64_t result = qword_10052E4B0;
  if (!qword_10052E4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4B0);
  }
  return result;
}

unint64_t sub_1004038E4()
{
  unint64_t result = qword_10052E4B8;
  if (!qword_10052E4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4B8);
  }
  return result;
}

unint64_t sub_10040393C()
{
  unint64_t result = qword_10052E4C0;
  if (!qword_10052E4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4C0);
  }
  return result;
}

unint64_t sub_100403994()
{
  unint64_t result = qword_10052E4C8;
  if (!qword_10052E4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4C8);
  }
  return result;
}

unint64_t sub_1004039EC()
{
  unint64_t result = qword_10052E4D0;
  if (!qword_10052E4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4D0);
  }
  return result;
}

unint64_t sub_100403A44()
{
  unint64_t result = qword_10052E4D8;
  if (!qword_10052E4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4D8);
  }
  return result;
}

unint64_t sub_100403A9C()
{
  unint64_t result = qword_10052E4E0;
  if (!qword_10052E4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4E0);
  }
  return result;
}

unint64_t sub_100403AF4()
{
  unint64_t result = qword_10052E4E8;
  if (!qword_10052E4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4E8);
  }
  return result;
}

unint64_t sub_100403B4C()
{
  unint64_t result = qword_10052E4F0;
  if (!qword_10052E4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4F0);
  }
  return result;
}

unint64_t sub_100403BA4()
{
  unint64_t result = qword_10052E4F8;
  if (!qword_10052E4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E4F8);
  }
  return result;
}

unint64_t sub_100403BFC()
{
  unint64_t result = qword_10052E500;
  if (!qword_10052E500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E500);
  }
  return result;
}

unint64_t sub_100403C54()
{
  unint64_t result = qword_10052E508;
  if (!qword_10052E508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E508);
  }
  return result;
}

unint64_t sub_100403CAC()
{
  unint64_t result = qword_10052E510;
  if (!qword_10052E510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E510);
  }
  return result;
}

unint64_t sub_100403D04()
{
  unint64_t result = qword_10052E518;
  if (!qword_10052E518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E518);
  }
  return result;
}

unint64_t sub_100403D5C()
{
  unint64_t result = qword_10052E520;
  if (!qword_10052E520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E520);
  }
  return result;
}

unint64_t sub_100403DB4()
{
  unint64_t result = qword_10052E528;
  if (!qword_10052E528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E528);
  }
  return result;
}

uint64_t sub_100403E08(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7466654C706F74 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7468676952706F74 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654C6D6F74746F62 && a2 == 0xEA00000000007466 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69526D6F74746F62 && a2 == 0xEB00000000746867)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100403FE8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000F214(&qword_10052E530);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F3B0(a1, a1[3]);
  sub_100404290();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  }
  type metadata accessor for CGPoint(0);
  char v20 = 0;
  sub_1004042E4(&qword_10051E490, type metadata accessor for CGPoint);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  char v20 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  char v20 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v13 = v18;
  uint64_t v14 = v19;
  char v20 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v18;
  uint64_t v16 = v19;
  uint64_t result = _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v14;
  a2[6] = v15;
  a2[7] = v16;
  return result;
}

unint64_t sub_100404290()
{
  unint64_t result = qword_10052E538;
  if (!qword_10052E538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E538);
  }
  return result;
}

uint64_t sub_1004042E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10040432C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7463656A626FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6573726170 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65646F437271 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x70696C43707061 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E696D6165727473 && a2 == 0xED00007478655467)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for Corners.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100404678);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Corners.CodingKeys()
{
  return &type metadata for Corners.CodingKeys;
}

unint64_t sub_1004046B4()
{
  unint64_t result = qword_10052E548;
  if (!qword_10052E548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E548);
  }
  return result;
}

unint64_t sub_10040470C()
{
  unint64_t result = qword_10052E550;
  if (!qword_10052E550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E550);
  }
  return result;
}

unint64_t sub_100404764()
{
  unint64_t result = qword_10052E558[0];
  if (!qword_10052E558[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10052E558);
  }
  return result;
}

uint64_t sub_1004047BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v19[0] = a6;
  v19[1] = a7;
  uint64_t v13 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _LayoutRoot();
  double v17 = __chkstk_darwin(v16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v7, a3, v17);
  _LayoutRoot.init(_:)();
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a5;
  v19[7] = v19[0];
  v19[8] = a1;
  v19[9] = a2;
  swift_getWitnessTable();
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t sub_100404964(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, uint64_t a11, uint64_t a12, void (**a13)(char *, char *, uint64_t))
{
  uint64_t v98 = a13;
  uint64_t v94 = a12;
  int v111 = a4;
  uint64_t v110 = a3;
  int v109 = a2;
  uint64_t v108 = a1;
  uint64_t v104 = type metadata accessor for ContainerValues();
  uint64_t v91 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  char v103 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for LayoutSubview();
  uint64_t v97 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v107 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v89 - v23;
  uint64_t v25 = sub_10000F214(&qword_10052E6B0);
  __chkstk_darwin(v25 - 8);
  uint64_t v112 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v106 = (char *)&v89 - v28;
  __chkstk_darwin(v29);
  uint64_t v92 = (char *)&v89 - v30;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v89 - v32;
  uint64_t v34 = type metadata accessor for LayoutSubviews();
  uint64_t v35 = *(void *)(v34 - 8);
  double v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v89 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, double))(v35 + 16);
  v39(v38, a5, v34, v36);
  sub_100407A50(&qword_10052E6B8, (void (*)(uint64_t))&type metadata accessor for LayoutSubviews);
  uint64_t v93 = Sequence.filter(_:)();
  ((void (*)(char *, uint64_t, uint64_t))v39)(v38, a5, v34);
  uint64_t v99 = Sequence.filter(_:)();
  ((void (*)(char *, uint64_t, uint64_t))v39)(v38, a5, v34);
  uint64_t v95 = Sequence.filter(_:)();
  ((void (*)(char *, uint64_t, uint64_t))v39)(v38, a5, v34);
  uint64_t v96 = Sequence.filter(_:)();
  uint64_t v40 = sub_10000F214(&qword_10052E6C0);
  uint64_t v118 = v40;
  unint64_t v41 = sub_100407A98();
  unint64_t v119 = v41;
  uint64_t v42 = v93;
  uint64_t v116 = v93;
  swift_bridgeObjectRetain();
  char v115 = v109 & 1;
  char v114 = v111 & 1;
  sub_1004060F8(&v116, v108, v109 & 1, v110, v111 & 1);
  double v44 = v43;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v116);
  v120.origin.x = a6;
  v120.origin.y = a7;
  v120.size.double width = a8;
  v120.size.double height = a9;
  double MidX = CGRectGetMidX(v120);
  v121.origin.x = a6;
  v121.origin.y = a7;
  v121.size.double width = a8;
  CGFloat v105 = a9;
  v121.size.double height = a9;
  CGRectGetMinY(v121);
  uint64_t v46 = *(void *)(v42 + 16);
  if (v46)
  {
    unint64_t v89 = v41;
    uint64_t v90 = v40;
    double v47 = MidX + v44 * -0.5;
    char v101 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
    unint64_t v48 = v42 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v100 = *(void *)(v97 + 72);
    uint64_t v49 = (void (**)(char *, void, uint64_t, uint64_t))(v97 + 56);
    uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v97 + 32);
    char v102 = (void (*)(char *, unint64_t, uint64_t))(v97 + 16);
    uint64_t v52 = (void (**)(char *, uint64_t))(v97 + 8);
    uint64_t v53 = v112;
    while (1)
    {
      v101(v33, v48, v20);
      uint64_t v113 = *v49;
      v113(v33, 0, 1, v20);
      if ((*v50)(v33, 1, v20) == 1) {
        break;
      }
      (*v51)(v24, v33, v20);
      LOBYTE(v116) = v109 & 1;
      char v115 = v111 & 1;
      LayoutSubview.sizeThatFits(_:)();
      double v55 = v54;
      static UnitPoint.topLeading.getter();
      LOBYTE(v116) = 0;
      char v115 = 0;
      LayoutSubview.place(at:anchor:proposal:)();
      uint64_t v53 = v112;
      (*v52)(v24, v20);
      double v47 = v47 + v55 + a10;
      v48 += v100;
      if (!--v46)
      {
        uint64_t v56 = v113;
        uint64_t v40 = v90;
        unint64_t v41 = v89;
        goto LABEL_7;
      }
    }
    uint64_t v40 = v90;
    unint64_t v41 = v89;
  }
  else
  {
    uint64_t v56 = *(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56);
    uint64_t v53 = v112;
LABEL_7:
    uint64_t v113 = v56;
    v56(v33, 1, 1, v20);
  }
  swift_bridgeObjectRelease();
  uint64_t v118 = v40;
  unint64_t v119 = v41;
  uint64_t v57 = v99;
  uint64_t v116 = v99;
  swift_bridgeObjectRetain();
  char v115 = v109 & 1;
  char v114 = v111 & 1;
  sub_1004060F8(&v116, v108, v109 & 1, v110, v111 & 1);
  double v59 = v58;
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v116);
  v122.origin.x = a6;
  v122.origin.y = a7;
  v122.size.double width = a8;
  CGFloat v60 = v105;
  v122.size.double height = v105;
  double v61 = CGRectGetMidX(v122);
  v123.origin.x = a6;
  v123.origin.y = a7;
  v123.size.double width = a8;
  v123.size.double height = v60;
  v62.n128_f64[0] = CGRectGetMaxY(v123);
  uint64_t v63 = *(void *)(v57 + 16);
  uint64_t v64 = v92;
  if (v63)
  {
    double v65 = v61 + v59 * -0.5;
    char v102 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
    unint64_t v66 = v99 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v100 = *(void *)(v97 + 72);
    char v101 = (void (*)(char *, unint64_t, uint64_t))(v97 + 56);
    uint64_t v67 = (unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    uint64_t v68 = (void (**)(char *, char *, uint64_t))(v97 + 32);
    uint64_t v69 = (void (**)(char *, uint64_t))(v97 + 8);
    while (1)
    {
      v102(v64, v66, v20);
      v113(v64, 0, 1, v20);
      if ((*v67)(v64, 1, v20) == 1) {
        break;
      }
      (*v68)(v24, v64, v20);
      LOBYTE(v116) = v109 & 1;
      char v115 = v111 & 1;
      LayoutSubview.sizeThatFits(_:)();
      double v71 = v70;
      static UnitPoint.bottomLeading.getter();
      LOBYTE(v116) = 0;
      char v115 = 0;
      LayoutSubview.place(at:anchor:proposal:)();
      uint64_t v53 = v112;
      (*v69)(v24, v20);
      v62.n128_f64[0] = v71 + a10;
      double v65 = v65 + v71 + a10;
      v66 += v100;
      if (!--v63) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v113)(v64, 1, 1, v20, v62);
  }
  swift_bridgeObjectRelease();
  uint64_t v72 = *(void *)(v95 + 16);
  uint64_t v73 = v107;
  if (v72)
  {
    char v101 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
    unint64_t v74 = v95 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v99 = *(void *)(v97 + 72);
    uint64_t v100 = v97 + 56;
    char v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    uint64_t v98 = (void (**)(char *, char *, uint64_t))(v97 + 32);
    uint64_t v76 = (void (**)(char *, uint64_t))(v91 + 8);
    char v102 = (void (*)(char *, unint64_t, uint64_t))(v97 + 16);
    uint64_t v77 = (void (**)(char *, uint64_t))(v97 + 8);
    uint64_t v78 = v106;
    v101(v106, v74, v20);
    while (1)
    {
      v113(v78, 0, 1, v20);
      if ((*v75)(v78, 1, v20) == 1) {
        break;
      }
      (*v98)(v73, v78, v20);
      uint64_t v79 = v103;
      LayoutSubview.containerValues.getter();
      sub_1002E871C();
      ContainerValues.subscript.getter();
      char v80 = v117;
      uint64_t v81 = v79;
      uint64_t v73 = v107;
      (*v76)(v81, v104);
      if ((v80 & 1) == 0)
      {
        LOBYTE(v116) = v109 & 1;
        char v115 = v111 & 1;
        LayoutSubview.sizeThatFits(_:)();
        static UnitPoint.topLeading.getter();
        LOBYTE(v116) = 0;
        char v115 = 0;
        uint64_t v73 = v107;
        LayoutSubview.place(at:anchor:proposal:)();
      }
      (*v77)(v73, v20);
      v74 += v99;
      --v72;
      uint64_t v53 = v112;
      if (!v72) {
        goto LABEL_21;
      }
      v101(v78, v74, v20);
    }
  }
  else
  {
LABEL_21:
    v113(v106, 1, 1, v20);
  }
  swift_bridgeObjectRelease();
  uint64_t v82 = *(void *)(v96 + 16);
  if (v82)
  {
    uint64_t v107 = *(char **)(v97 + 16);
    unint64_t v83 = v96 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v106 = *(char **)(v97 + 72);
    uint64_t v84 = (unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    uint64_t v85 = (void (**)(char *, char *, uint64_t))(v97 + 32);
    uint64_t v86 = (void (**)(char *, uint64_t))(v97 + 8);
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v107)(v53, v83, v20);
      v113(v53, 0, 1, v20);
      if ((*v84)(v53, 1, v20) == 1) {
        break;
      }
      (*v85)(v24, v53, v20);
      v124.origin.x = a6;
      v124.origin.y = a7;
      v124.size.double width = a8;
      CGFloat v87 = v105;
      v124.size.double height = v105;
      CGRectGetMidX(v124);
      v125.origin.x = a6;
      v125.origin.y = a7;
      v125.size.double width = a8;
      v125.size.double height = v87;
      CGRectGetMinY(v125);
      LOBYTE(v116) = v109 & 1;
      char v115 = v111 & 1;
      LayoutSubview.sizeThatFits(_:)();
      static UnitPoint.top.getter();
      LOBYTE(v116) = 0;
      char v115 = 0;
      LayoutSubview.place(at:anchor:proposal:)();
      uint64_t v53 = v112;
      (*v86)(v24, v20);
      v83 += (unint64_t)v106;
      if (!--v82) {
        goto LABEL_26;
      }
    }
  }
  else
  {
LABEL_26:
    v113(v53, 1, 1, v20);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100405760()
{
  uint64_t v0 = type metadata accessor for ContainerValues();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LayoutSubview.containerValues.getter();
  sub_1002E871C();
  ContainerValues.subscript.getter();
  uint64_t v4 = v8[1];
  uint64_t v5 = v8[2];
  unsigned int v6 = v9;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5 | v4) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t sub_100405874()
{
  sub_1002E871C();
  ContainerValues.subscript.getter();
  return v1;
}

ValueMetadata *_s19__Key_scenePositionVMa()
{
  return &_s19__Key_scenePositionVN;
}

uint64_t storeEnumTagSinglePayload for ScenePosition(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t sub_1004058F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100405910(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScenePosition()
{
  return &type metadata for ScenePosition;
}

uint64_t sub_100405940()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1004059D0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_100405B2C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x100405D44);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for SceneContainer()
{
  return sub_1000684BC();
}

uint64_t sub_100405D84()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100405DC8()
{
  uint64_t v0 = type metadata accessor for ContainerValues();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LayoutSubview.containerValues.getter();
  sub_1002E871C();
  ContainerValues.subscript.getter();
  uint64_t v4 = v9[1];
  uint64_t v5 = v9[2];
  unsigned int v6 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4 == 1 && v5 == 0) {
    return v6;
  }
  else {
    return 0;
  }
}

BOOL sub_100405EDC()
{
  uint64_t v0 = type metadata accessor for ContainerValues();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LayoutSubview.containerValues.getter();
  sub_1002E871C();
  ContainerValues.subscript.getter();
  char v4 = v6[24];
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return (v4 & 1) == 0;
}

uint64_t sub_100405FE0()
{
  uint64_t v0 = type metadata accessor for ContainerValues();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  LayoutSubview.containerValues.getter();
  sub_1002E871C();
  ContainerValues.subscript.getter();
  unsigned int v4 = v8;
  unint64_t v5 = v7[1];
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5 > 1) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_1004060F8(void *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v29 = a5;
  uint64_t v30 = a2;
  uint64_t v31 = a4;
  int v27 = a3;
  uint64_t v6 = type metadata accessor for LayoutSubview();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_10000F214(&qword_10052E6B0);
  __chkstk_darwin(v10 - 8);
  unsigned int v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = a1[3];
  uint64_t v28 = a1;
  unsigned int v14 = sub_10000F3B0(a1, v13);
  double v15 = __chkstk_darwin(v14);
  (*(void (**)(unsigned char *, double))(v17 + 16))(&v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)], v15);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_100040120(v34);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v18 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v19 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32);
  uint64_t v20 = (void (**)(unsigned char *, uint64_t))(v7 + 8);
  double v21 = 0.0;
  char v22 = v27 & 1;
  v29 &= 1u;
  while (1)
  {
    sub_1000A36F4((uint64_t)v34, AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()();
    if ((*v18)(v12, 1, v6) == 1) {
      break;
    }
    (*v19)(v9, v12, v6);
    char v33 = v22;
    char v32 = v29;
    LayoutSubview.sizeThatFits(_:)();
    double v24 = v23;
    (*v20)(v9, v6);
    double v21 = v21 + v24;
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v34);
  sub_10000F3B0(v28, v28[3]);
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(result, 1)) {
    __break(1u);
  }
  return result;
}

double sub_10040642C()
{
  return 8.0;
}

double sub_100406444(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 10.0;
  }
  return result;
}

uint64_t sub_100406464(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  return sub_100404964(a1, a2 & 1, a3, a4 & 1, a5, a8, a9, a10, a11, *v11, a6, *(void *)(a7 + 16), *(void (***)(char *, char *, uint64_t))(a7 + 24));
}

uint64_t sub_10040648C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_2(a2, a3);
}

uint64_t sub_10040649C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  type metadata accessor for SceneContainer.SceneLayout();
  swift_getWitnessTable();
  type metadata accessor for _LayoutRoot();
  uint64_t v25 = v3;
  uint64_t v26 = sub_10000F69C(&qword_10052E5E8);
  uint64_t v27 = v2;
  unint64_t v28 = sub_100407614();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _VariadicView.Tree();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v3;
  v11[3] = v2;
  v11[4] = 0x4020000000000000;
  uint64_t v19 = v3;
  uint64_t v20 = v2;
  uint64_t v21 = v17[0];
  sub_100406768((uint64_t)sub_1004076F4, (uint64_t)v18, (uint64_t)v7);
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v22 = WitnessTable;
  uint64_t v23 = v13;
  uint64_t v14 = swift_getWitnessTable();
  sub_100224E4C(v7, v4, v14);
  double v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  sub_100224E4C(v10, v4, v14);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v4);
}

uint64_t sub_100406768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SceneContainer.SceneLayout();
  sub_10000F69C(&qword_10052E5E8);
  sub_100407614();
  type metadata accessor for GroupElementsOfContent();
  uint64_t v7 = type metadata accessor for Group();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v9 = swift_getWitnessTable();
  return sub_1004047BC(a1, a2, v6, v7, WitnessTable, v9, a3);
}

uint64_t sub_100406890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000F69C(&qword_10052E5E8);
  unint64_t v10 = sub_100407614();
  uint64_t v26 = a2;
  uint64_t v27 = v9;
  uint64_t v28 = a3;
  unint64_t v29 = v10;
  type metadata accessor for GroupElementsOfContent();
  uint64_t v11 = type metadata accessor for Group();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v23, a2, v16);
  Group.init<A, B>(subviews:transform:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = swift_getWitnessTable();
  sub_100224E4C(v14, v11, v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  sub_100224E4C(v18, v11, v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v11);
}

uint64_t sub_100406B04@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v51 = type metadata accessor for ContainerValues();
  double v43 = *(void (***)(char *, uint64_t))(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Subview();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000F214(&qword_10052E600);
  __chkstk_darwin(v39);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SubviewsCollection();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000F214(&qword_10052E608);
  uint64_t v15 = v14 - 8;
  double v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = (void (**)(char *, void, uint64_t, uint64_t))v11;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v38 = a1;
  uint64_t v52 = v19;
  uint64_t v53 = v11 + 16;
  ((void (*)(char *, char *, uint64_t, double))v19)(v13, a1, v10, v16);
  sub_100407A50(&qword_10052E610, (void (*)(uint64_t))&type metadata accessor for SubviewsCollection);
  double v54 = v13;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v20 = &v18[*(int *)(v15 + 44)];
  sub_100407A50(&qword_10052E618, (void (*)(uint64_t))&type metadata accessor for SubviewsCollection);
  uint64_t v21 = *(void *)v20;
  dispatch thunk of Collection.endIndex.getter();
  if (v21 == v55)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_11:
    double v36 = v38;
    v22(v9, 1, 1, v4);
    char v35 = 0;
  }
  else
  {
    double v47 = (void (**)(char *, uint64_t))(v49 + 1);
    unint64_t v48 = (void (**)(char *))(v5 + 16);
    uint64_t v49 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v45 = v10;
    uint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    unint64_t v41 = v43 + 1;
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    double v43 = (void (**)(char *, uint64_t))(v5 + 8);
    double v44 = v18;
    while (1)
    {
      uint64_t v27 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
      (*v48)(v9);
      v27(&v55, 0);
      uint64_t v28 = v54;
      v52(v54, v18, v10);
      dispatch thunk of Collection.formIndex(after:)();
      (*v47)(v28, v10);
      uint64_t v22 = *v49;
      (*v49)(v9, 0, 1, v4);
      if ((*v46)(v9, 1, v4) == 1) {
        break;
      }
      unint64_t v29 = v9;
      uint64_t v30 = v4;
      (*v42)(v7, v9, v4);
      uint64_t v31 = v50;
      char v32 = v7;
      Subview.containerValues.getter();
      sub_1002E871C();
      ContainerValues.subscript.getter();
      unint64_t v33 = v55;
      char v34 = v56;
      (*v41)(v31, v51);
      if (v34)
      {
        uint64_t v23 = *v43;
        if (v33 > 1)
        {
          v23(v32, v30);
          char v35 = 1;
          double v36 = v38;
          uint64_t v18 = v44;
          uint64_t v10 = v45;
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v23 = *v43;
      }
      uint64_t v7 = v32;
      uint64_t v24 = v32;
      uint64_t v4 = v30;
      v23(v24, v30);
      uint64_t v25 = *(void *)v20;
      uint64_t v26 = v44;
      uint64_t v10 = v45;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v9 = v29;
      uint64_t v18 = v26;
      if (v25 == v55) {
        goto LABEL_11;
      }
    }
    char v35 = 0;
    double v36 = v38;
  }
LABEL_12:
  sub_100407700((uint64_t)v18);
  v52(v54, v36, v10);
  *(unsigned char *)(swift_allocObject() + 16) = v35;
  type metadata accessor for Subview.ID();
  sub_100407A50(&qword_10052E620, (void (*)(uint64_t))&type metadata accessor for SubviewsCollection);
  sub_100407688();
  sub_100407A50(qword_10052E628, (void (*)(uint64_t))&type metadata accessor for Subview);
  return ForEach<>.init(_:content:)();
}

uint64_t sub_1004071A4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ContainerValues();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subview.containerValues.getter();
  sub_1002E871C();
  ContainerValues.subscript.getter();
  unint64_t v10 = v16[1];
  int v11 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v11 == 1 && v10 > 1 || (a2 & 1) == 0)
  {
    uint64_t v14 = type metadata accessor for Subview();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a3, a1, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Subview();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a3, 1, 1, v12);
  }
}

void sub_1004073A8(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, char a4)
{
  if (a4)
  {
    if (a2 | a3)
    {
      if (a2 ^ 1 | a3) {
        Swift::UInt v8 = 3;
      }
      else {
        Swift::UInt v8 = 2;
      }
    }
    else
    {
      Swift::UInt v8 = 1;
    }
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = a2;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
    if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = a3;
    }
    else {
      Swift::UInt64 v7 = 0;
    }
    Hasher._combine(_:)(v7);
  }
}

Swift::Int sub_10040742C()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_1004073A8((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100407488(uint64_t a1)
{
  sub_1004073A8(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_100407494()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_1004073A8((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

BOOL sub_1004074EC(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v5 = *(double *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    if (*(void *)&v2 | *(void *)&v3)
    {
      if (*(void *)&v2 ^ 1 | *(void *)&v3)
      {
        if (*(unsigned char *)(a2 + 16) && __PAIR128__(v4, *(unint64_t *)&v5) >= 2) {
          return 1;
        }
      }
      else if (*(unsigned char *)(a2 + 16) && !(*(void *)&v5 ^ 1 | v4))
      {
        return 1;
      }
      return 0;
    }
    uint64_t v7 = *(void *)&v5 | v4;
    return *(unsigned char *)(a2 + 16) && v7 == 0;
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  else
  {
    return v3 == *(double *)(a2 + 8) && v2 == v5;
  }
}

unint64_t sub_100407598()
{
  unint64_t result = qword_10052E5E0;
  if (!qword_10052E5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E5E0);
  }
  return result;
}

void sub_1004075EC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t type metadata accessor for SceneContainer.SceneLayout()
{
  return sub_1000684BC();
}

unint64_t sub_100407614()
{
  unint64_t result = qword_10052E5F0;
  if (!qword_10052E5F0)
  {
    sub_10000F69C(&qword_10052E5E8);
    sub_100407688();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E5F0);
  }
  return result;
}

unint64_t sub_100407688()
{
  unint64_t result = qword_10052E5F8;
  if (!qword_10052E5F8)
  {
    sub_10000F69C(&qword_10052E600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E5F8);
  }
  return result;
}

uint64_t sub_1004076F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100406890(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100407700(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10052E608);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100407760()
{
  return swift_deallocObject();
}

uint64_t sub_100407770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004071A4(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_100407778()
{
  return swift_deallocObject();
}

uint64_t sub_100407788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  int v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void (*)(void))__chkstk_darwin(v9);
  uint64_t v14 = (char *)&v17 - v13;
  v12();
  sub_100224E4C(v11, a4, a6);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, a4);
  sub_100224E4C(v14, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a4);
}

uint64_t sub_1004078BC()
{
  return sub_100407788(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1004078CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100407A34()
{
  return swift_getWitnessTable();
}

uint64_t sub_100407A50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100407A98()
{
  unint64_t result = qword_10052E6C8;
  if (!qword_10052E6C8)
  {
    sub_10000F69C(&qword_10052E6C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E6C8);
  }
  return result;
}

uint64_t *sub_100407AF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_10000F214(&qword_10051A320);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      int v11 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)((char *)a1 + v11[5]) = *(_DWORD *)((char *)a2 + v11[5]);
      uint64_t v12 = v11[6];
      uint64_t v13 = (_OWORD *)((char *)a1 + v12);
      uint64_t v14 = (_OWORD *)((char *)a2 + v12);
      long long v15 = v14[3];
      v13[2] = v14[2];
      uint64_t v13[3] = v15;
      long long v16 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v16;
      uint64_t v17 = v11[7];
      uint64_t v18 = (uint64_t *)((char *)a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      void *v18 = v21;
      v18[1] = v20;
      *(uint64_t *)((char *)a1 + v11[8]) = *(uint64_t *)((char *)a2 + v11[8]);
      *(uint64_t *)((char *)a1 + v11[9]) = *(uint64_t *)((char *)a2 + v11[9]);
      *(uint64_t *)((char *)a1 + v11[10]) = *(uint64_t *)((char *)a2 + v11[10]);
      *(uint64_t *)((char *)a1 + v11[11]) = *(uint64_t *)((char *)a2 + v11[11]);
      *(uint64_t *)((char *)a1 + v11[12]) = *(uint64_t *)((char *)a2 + v11[12]);
      uint64_t v22 = v11[13];
      uint64_t v23 = *(void **)((char *)a2 + v22);
      *(uint64_t *)((char *)a1 + v22) = (uint64_t)v23;
      *((unsigned char *)a1 + v11[14]) = *((unsigned char *)a2 + v11[14]);
      uint64_t v24 = *(int *)(v7 + 48);
      uint64_t v25 = *(void **)((char *)a2 + v24);
      *(uint64_t *)((char *)a1 + v24) = (uint64_t)v25;
      uint64_t v26 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v27 = v23;
      id v28 = v25;
      v26(a1, 0, 1, v7);
    }
  }
  return a1;
}

void sub_100407D3C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A320);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2))
  {
    uint64_t v3 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = type metadata accessor for TextDetectorResult(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    int v5 = *(void **)(a1 + *(int *)(v2 + 48));
  }
}

char *sub_100407E58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A320);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)&a1[v9[5]] = *(_DWORD *)&a2[v9[5]];
    uint64_t v10 = v9[6];
    int v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    long long v13 = *((_OWORD *)v12 + 3);
    *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
    *((_OWORD *)v11 + 3) = v13;
    long long v14 = *((_OWORD *)v12 + 1);
    *(_OWORD *)int v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v14;
    uint64_t v15 = v9[7];
    long long v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)long long v16 = v19;
    *((void *)v16 + 1) = v18;
    *(void *)&a1[v9[8]] = *(void *)&a2[v9[8]];
    *(void *)&a1[v9[9]] = *(void *)&a2[v9[9]];
    *(void *)&a1[v9[10]] = *(void *)&a2[v9[10]];
    *(void *)&a1[v9[11]] = *(void *)&a2[v9[11]];
    *(void *)&a1[v9[12]] = *(void *)&a2[v9[12]];
    uint64_t v20 = v9[13];
    uint64_t v21 = *(void **)&a2[v20];
    *(void *)&a1[v20] = v21;
    a1[v9[14]] = a2[v9[14]];
    uint64_t v22 = *(int *)(v6 + 48);
    uint64_t v23 = *(void **)&a2[v22];
    *(void *)&a1[v22] = v23;
    uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v25 = v21;
    id v26 = v23;
    v24(a1, 0, 1, v6);
  }
  return a1;
}

unsigned char *sub_100408064(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A320);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v30 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 24))(a1, a2, v30);
      uint64_t v31 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)&a1[v31[5]] = *(_DWORD *)&a2[v31[5]];
      uint64_t v32 = v31[6];
      unint64_t v33 = &a1[v32];
      char v34 = &a2[v32];
      *unint64_t v33 = *v34;
      v33[1] = v34[1];
      void v33[2] = v34[2];
      void v33[3] = v34[3];
      v33[4] = v34[4];
      v33[5] = v34[5];
      v33[6] = v34[6];
      v33[7] = v34[7];
      uint64_t v35 = v31[7];
      double v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      *double v36 = *v37;
      v36[1] = v37[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&a1[v31[8]] = *(void *)&a2[v31[8]];
      *(void *)&a1[v31[9]] = *(void *)&a2[v31[9]];
      *(void *)&a1[v31[10]] = *(void *)&a2[v31[10]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&a1[v31[11]] = *(void *)&a2[v31[11]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&a1[v31[12]] = *(void *)&a2[v31[12]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v38 = v31[13];
      uint64_t v39 = *(void **)&a1[v38];
      uint64_t v40 = *(void **)&a2[v38];
      *(void *)&a1[v38] = v40;
      id v41 = v40;

      a1[v31[14]] = a2[v31[14]];
      uint64_t v42 = *(int *)(v6 + 48);
      double v43 = *(void **)&a2[v42];
      double v44 = *(void **)&a1[v42];
      *(void *)&a1[v42] = v43;
      id v45 = v43;

      return a1;
    }
    sub_10000FBD8((uint64_t)a1, &qword_10051A320);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  uint64_t v12 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)&a1[v12[5]] = *(_DWORD *)&a2[v12[5]];
  uint64_t v13 = v12[6];
  long long v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  long long v17 = v15[2];
  long long v16 = v15[3];
  long long v18 = v15[1];
  _OWORD *v14 = *v15;
  v14[1] = v18;
  v14[2] = v17;
  v14[3] = v16;
  uint64_t v19 = v12[7];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  void *v20 = *v21;
  v20[1] = v21[1];
  *(void *)&a1[v12[8]] = *(void *)&a2[v12[8]];
  *(void *)&a1[v12[9]] = *(void *)&a2[v12[9]];
  *(void *)&a1[v12[10]] = *(void *)&a2[v12[10]];
  *(void *)&a1[v12[11]] = *(void *)&a2[v12[11]];
  *(void *)&a1[v12[12]] = *(void *)&a2[v12[12]];
  uint64_t v22 = v12[13];
  uint64_t v23 = *(void **)&a2[v22];
  *(void *)&a1[v22] = v23;
  a1[v12[14]] = a2[v12[14]];
  uint64_t v24 = *(int *)(v6 + 48);
  id v25 = *(void **)&a2[v24];
  *(void *)&a1[v24] = v25;
  id v26 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v27 = v23;
  id v28 = v25;
  v26(a1, 0, 1, v6);
  return a1;
}

char *sub_100408424(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A320);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    int v9 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)&a1[v9[5]] = *(_DWORD *)&a2[v9[5]];
    uint64_t v10 = v9[6];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    long long v13 = *((_OWORD *)v12 + 3);
    *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
    *((_OWORD *)v11 + 3) = v13;
    long long v14 = *((_OWORD *)v12 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v14;
    *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
    *(void *)&a1[v9[8]] = *(void *)&a2[v9[8]];
    *(void *)&a1[v9[9]] = *(void *)&a2[v9[9]];
    *(void *)&a1[v9[10]] = *(void *)&a2[v9[10]];
    *(void *)&a1[v9[11]] = *(void *)&a2[v9[11]];
    *(void *)&a1[v9[12]] = *(void *)&a2[v9[12]];
    *(void *)&a1[v9[13]] = *(void *)&a2[v9[13]];
    a1[v9[14]] = a2[v9[14]];
    *(void *)&a1[*(int *)(v6 + 48)] = *(void *)&a2[*(int *)(v6 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

unsigned char *sub_1004085F0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000F214(&qword_10051A320);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v19 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 40))(a1, a2, v19);
      uint64_t v20 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)&a1[v20[5]] = *(_DWORD *)&a2[v20[5]];
      uint64_t v21 = v20[6];
      uint64_t v22 = &a1[v21];
      uint64_t v23 = &a2[v21];
      long long v24 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v24;
      long long v25 = v23[3];
      v22[2] = v23[2];
      v22[3] = v25;
      uint64_t v26 = v20[7];
      id v27 = &a1[v26];
      id v28 = (uint64_t *)&a2[v26];
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      void *v27 = v30;
      v27[1] = v29;
      swift_bridgeObjectRelease();
      *(void *)&a1[v20[8]] = *(void *)&a2[v20[8]];
      *(void *)&a1[v20[9]] = *(void *)&a2[v20[9]];
      *(void *)&a1[v20[10]] = *(void *)&a2[v20[10]];
      swift_bridgeObjectRelease();
      *(void *)&a1[v20[11]] = *(void *)&a2[v20[11]];
      swift_bridgeObjectRelease();
      *(void *)&a1[v20[12]] = *(void *)&a2[v20[12]];
      swift_bridgeObjectRelease();
      uint64_t v31 = v20[13];
      uint64_t v32 = *(void **)&a1[v31];
      *(void *)&a1[v31] = *(void *)&a2[v31];

      a1[v20[14]] = a2[v20[14]];
      uint64_t v33 = *(int *)(v6 + 48);
      char v34 = *(void **)&a1[v33];
      *(void *)&a1[v33] = *(void *)&a2[v33];

      return a1;
    }
    sub_10000FBD8((uint64_t)a1, &qword_10051A320);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  uint64_t v12 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)&a1[v12[5]] = *(_DWORD *)&a2[v12[5]];
  uint64_t v13 = v12[6];
  long long v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  long long v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  long long v17 = v15[1];
  _OWORD *v14 = *v15;
  v14[1] = v17;
  *(_OWORD *)&a1[v12[7]] = *(_OWORD *)&a2[v12[7]];
  *(void *)&a1[v12[8]] = *(void *)&a2[v12[8]];
  *(void *)&a1[v12[9]] = *(void *)&a2[v12[9]];
  *(void *)&a1[v12[10]] = *(void *)&a2[v12[10]];
  *(void *)&a1[v12[11]] = *(void *)&a2[v12[11]];
  *(void *)&a1[v12[12]] = *(void *)&a2[v12[12]];
  *(void *)&a1[v12[13]] = *(void *)&a2[v12[13]];
  a1[v12[14]] = a2[v12[14]];
  *(void *)&a1[*(int *)(v6 + 48)] = *(void *)&a2[*(int *)(v6 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100408910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100408924);
}

uint64_t sub_100408924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A320);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100408994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004089A8);
}

uint64_t sub_1004089A8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_10000F214(&qword_10051A320);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100408A2C(uint64_t a1)
{
  uint64_t v2 = sub_10000F214(&qword_10051A320);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_100408A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A320);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata accessor for DataDetectorState(uint64_t a1)
{
  return sub_10001FEBC(a1, (uint64_t *)&unk_10052E740);
}

uint64_t sub_100408B2C()
{
  uint64_t result = type metadata accessor for TextDetectorResult(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void sub_100408BC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v43 - v6;
  uint64_t v8 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v8 - 8);
  int v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10040C0B8(a1, (uint64_t)v10, type metadata accessor for DataDetectorState);
  uint64_t v11 = sub_10000F214(&qword_10051A320);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11) == 1) {
    return;
  }
  uint64_t v12 = *(void **)&v10[*(int *)(v11 + 48)];
  sub_10040D678((uint64_t)v10, (uint64_t)v7, type metadata accessor for TextDetectorResult);
  id v45 = v7;
  sub_10040C0B8((uint64_t)v7, (uint64_t)v4, type metadata accessor for TextDetectorResult);
  id v13 = v12;
  sub_10040C120(v13, (uint64_t)v4, v49);

  uint64_t v14 = v49[0];
  uint64_t v15 = (void *)v49[1];
  uint64_t v16 = v49[2];
  long long v17 = (void *)v49[3];
  v48[0] = 0;
  v48[1] = (id)0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v48[0] = (id)0xD000000000000010;
  v48[1] = (id)0x800000010042D6F0;
  v18._countAndFlagsBits = v14;
  v18._object = v15;
  String.append(_:)(v18);
  v43[2] = v15;
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD000000000000013;
  v19._object = (void *)0x800000010042D710;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v16;
  v20._object = v17;
  String.append(_:)(v20);
  v43[1] = v17;
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = (uint64_t)v48[0];
  id v22 = v48[1];
  v48[0] = (id)0xD000000000000012;
  v48[1] = (id)0x800000010042D6D0;
  v21._object = v22;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._object = (void *)0x800000010042D730;
  v23._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  id v24 = v48[0];
  id v25 = v48[1];
  id v44 = v13;
  sub_1004090A0();
  unint64_t v27 = v26;
  if (v26 >> 62)
  {
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    v48[0] = v24;
    v48[1] = v25;
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = 23840;
    v42._object = (void *)0xE200000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_10000FC34((uint64_t)&v50, (uint64_t)v48, &qword_10051EF58);
    sub_100107B44(v48);
    sub_10040C058((uint64_t)v45, type metadata accessor for TextDetectorResult);
    return;
  }
  uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v28) {
    goto LABEL_14;
  }
LABEL_4:
  if (v28 >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      if ((v27 & 0xC000000000000001) != 0) {
        id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v39 = *(id *)(v27 + 8 * v29 + 32);
      }
      uint64_t v40 = v39;
      v48[0] = 0;
      v48[1] = (id)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v48, "infoElement: ");
      HIWORD(v48[1]) = -4864;
      id v41 = [v40 text];
      if (v41)
      {
        uint64_t v30 = v41;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v33 = 0;
      }
      ++v29;
      uint64_t v46 = v31;
      uint64_t v47 = v33;
      sub_10000F214(&qword_10051D468);
      v34._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 44;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      id v36 = v48[0];
      id v37 = v48[1];
      v48[0] = v24;
      v48[1] = v25;
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = (uint64_t)v36;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      id v24 = v48[0];
      id v25 = v48[1];
    }
    while (v28 != v29);
    goto LABEL_14;
  }
  __break(1u);
}

void sub_1004090A0()
{
  id v1 = [v0 children];
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  sub_10000F734(0, &qword_100524400);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_12;
  }
LABEL_4:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v3 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      ++v5;
      sub_1004091EC();
      sub_10019F224(v8);
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
}

void sub_1004091EC()
{
  sub_10000F214(&qword_100521040);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100440690;
  *(void *)(v1 + 32) = v0;
  specialized Array._endMutation()();
  id v2 = [v0 children];
  if (!v2) {
    return;
  }
  unint64_t v3 = v2;
  sub_10000F734(0, &qword_100524400);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v4 + 8 * v6 + 32);
      }
      unint64_t v8 = v7;
      ++v6;
      unint64_t v9 = sub_1004091EC();
      sub_10019F224(v9);
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100409364()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100409394()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 imageWithRenderingMode:2];
    uint64_t v4 = Image.init(uiImage:)();

    return v4;
  }
  else
  {
    return Image.init(_internalSystemName:)();
  }
}

uint64_t sub_100409424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Spring();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10000F214(&qword_10052E8E8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  id v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052E8F0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v7 = static HorizontalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  v7[16] = 0;
  uint64_t v12 = sub_10000F214(&qword_10052E8F8);
  sub_1004096C0(v1, (uint64_t)&v7[*(int *)(v12 + 44)]);
  id v13 = &v7[*(int *)(v5 + 44)];
  Spring.init(response:dampingRatio:)();
  SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
  uint64_t v14 = *(int *)(type metadata accessor for ContainerSmartDialogViewModifier() + 20);
  sub_10000F214(&qword_100518FE8);
  swift_allocObject();
  *(void *)&v13[v14] = PassthroughSubject.init()();
  type metadata accessor for Form();
  swift_allocObject();
  uint64_t v15 = Form.init()();
  sub_10040E9E4(&qword_100523BE8, (void (*)(uint64_t))&type metadata accessor for Form);
  uint64_t v16 = static ObservableObject.environmentStore.getter();
  sub_10000FB74((uint64_t)v7, (uint64_t)v11, &qword_10052E8E8);
  long long v17 = (uint64_t *)&v11[*(int *)(v9 + 44)];
  uint64_t *v17 = v16;
  v17[1] = v15;
  sub_10000FBD8((uint64_t)v7, &qword_10052E8E8);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10000FB74((uint64_t)v11, a1, &qword_10052E8F0);
  uint64_t v19 = a1 + *(int *)(sub_10000F214(&qword_10052E900) + 36);
  *(void *)uint64_t v19 = KeyPath;
  *(unsigned char *)(v19 + 8) = 1;
  return sub_10000FBD8((uint64_t)v11, &qword_10052E8F0);
}

uint64_t sub_1004096C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v93 = type metadata accessor for ButtonBorderShape();
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for BorderedButtonStyle();
  uint64_t v90 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  CGFloat v87 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DataDetectorResultCardView(0);
  uint64_t v6 = v5 - 8;
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v78 = *(void *)(v79 + 64);
  __chkstk_darwin(v5);
  uint64_t v77 = (uint64_t)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052E908);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000F214(&qword_10052E910);
  __chkstk_darwin(v82);
  uint64_t v80 = (uint64_t)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000F214(&qword_10052E918);
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  unint64_t v83 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_10000F214(&qword_10052E920) - 8;
  __chkstk_darwin(v84);
  uint64_t v81 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v85 = (uint64_t)&v74 - v15;
  uint64_t v16 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v16 - 8);
  Swift::String v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000F214(&qword_100523BF8);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000F214(&qword_10052E928);
  __chkstk_darwin(v23 - 8);
  uint64_t v95 = (uint64_t)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v74 - v26;
  uint64_t v76 = (uint64_t)&v74 - v26;
  sub_10040C0B8(a1, (uint64_t)v18, type metadata accessor for TextDetectorResult);
  uint64_t v75 = *(int *)(v6 + 28);
  id v28 = *(id *)(a1 + v75);
  sub_10040C120(v28, (uint64_t)v18, (uint64_t *)v104);

  v96[3] = &type metadata for DataDetectorMastheadState;
  v96[4] = &off_1004F8E98;
  uint64_t v29 = swift_allocObject();
  v96[0] = v29;
  long long v30 = v104[1];
  *(_OWORD *)(v29 + 16) = v104[0];
  *(_OWORD *)(v29 + 32) = v30;
  *(void *)(v29 + 48) = v105;
  LOBYTE(v28) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_10019B324((uint64_t)v96, (uint64_t)v97);
  char v98 = (char)v28;
  uint64_t v99 = v32;
  uint64_t v100 = v34;
  uint64_t v101 = v36;
  uint64_t v102 = v38;
  char v103 = 0;
  sub_10019B384((uint64_t)v96);
  uint64_t v39 = sub_10000F214(&qword_100523C00);
  uint64_t v40 = sub_10040EA7C(&qword_100523C08, &qword_100523C00, (void (*)(void))sub_10019B3AC);
  View.smartDialogAnimatable()();
  sub_10000FBD8((uint64_t)v97, &qword_100523C00);
  v97[0] = v39;
  v97[1] = v40;
  swift_getOpaqueTypeConformance2();
  uint64_t v41 = v95;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  sub_10000FC34(v41, (uint64_t)v27, &qword_10052E928);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  sub_10000F214(&qword_10052E930);
  sub_1004090A0();
  v97[0] = v42;
  swift_getKeyPath();
  uint64_t v43 = v77;
  sub_10040C0B8(a1, v77, type metadata accessor for DataDetectorResultCardView);
  unint64_t v44 = (*(unsigned __int8 *)(v79 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  uint64_t v45 = swift_allocObject();
  sub_10040D678(v43, v45 + v44, type metadata accessor for DataDetectorResultCardView);
  sub_10000F214(&qword_100524408);
  sub_10000F214(&qword_10052E938);
  sub_100013AA8(&qword_10052E940, &qword_100524408);
  sub_10040ECC4();
  sub_10040ED2C();
  ForEach<>.init(_:id:content:)();
  LOBYTE(v22) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v54 = v80;
  sub_10000FB74((uint64_t)v10, v80, &qword_10052E908);
  uint64_t v55 = v54 + *(int *)(v82 + 36);
  *(unsigned char *)uint64_t v55 = (_BYTE)v22;
  *(void *)(v55 + 8) = v47;
  *(void *)(v55 + 16) = v49;
  *(void *)(v55 + 24) = v51;
  *(void *)(v55 + 32) = v53;
  *(unsigned char *)(v55 + 40) = 0;
  sub_10000FBD8((uint64_t)v10, &qword_10052E908);
  char v56 = v87;
  BorderedButtonStyle.init()();
  sub_10040EDFC();
  sub_10040E9E4(&qword_10052BDD8, (void (*)(uint64_t))&type metadata accessor for BorderedButtonStyle);
  uint64_t v57 = v83;
  uint64_t v58 = v89;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v56, v58);
  sub_10000FBD8(v54, &qword_10052E910);
  double v59 = v91;
  static ButtonBorderShape.capsule.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v61 = (uint64_t)v81;
  __n128 v62 = (uint64_t *)&v81[*(int *)(v84 + 44)];
  uint64_t v63 = sub_10000F214(&qword_10052BDB8);
  uint64_t v64 = v92;
  uint64_t v65 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))((char *)v62 + *(int *)(v63 + 28), v59, v93);
  *__n128 v62 = KeyPath;
  uint64_t v66 = v86;
  uint64_t v67 = v88;
  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 16))(v61, v57, v88);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v65);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v57, v67);
  uint64_t v68 = v85;
  sub_10000FC34(v61, v85, &qword_10052E920);
  uint64_t v69 = v76;
  uint64_t v70 = v95;
  sub_10000FB74(v76, v95, &qword_10052E928);
  sub_10000FB74(v68, v61, &qword_10052E920);
  uint64_t v71 = v94;
  sub_10000FB74(v70, v94, &qword_10052E928);
  uint64_t v72 = sub_10000F214(&qword_10052E978);
  sub_10000FB74(v61, v71 + *(int *)(v72 + 48), &qword_10052E920);
  sub_10000FBD8(v68, &qword_10052E920);
  sub_10000FBD8(v69, &qword_10052E928);
  sub_10000FBD8(v61, &qword_10052E920);
  return sub_10000FBD8(v70, &qword_10052E928);
}

uint64_t sub_10040A178@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = type metadata accessor for Divider();
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000F214(&qword_10052E980);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DataDetectorResultCardView(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = sub_10000F214(&qword_10052E960);
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a1;
  if (objc_msgSend(v17, "isLeaf", v14))
  {
    uint64_t v18 = v25;
    sub_10040C0B8(v25, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DataDetectorResultCardView);
    unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v17;
    uint64_t v21 = sub_10040D678((uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for DataDetectorResultCardView);
    __chkstk_darwin(v21);
    *(&v25 - 2) = v18;
    *(&v25 - 1) = (uint64_t)v17;
    id v22 = v17;
    sub_10000F214(&qword_10052E988);
    sub_10040F064();
    Button.init(action:label:)();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v16, v12);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_10052E958, &qword_10052E960);
    sub_10040E9E4(&qword_10052B9D8, (void (*)(uint64_t))&type metadata accessor for Divider);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    Divider.init()();
    uint64_t v24 = v28;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v28);
    swift_storeEnumTagMultiPayload();
    sub_100013AA8(&qword_10052E958, &qword_10052E960);
    sub_10040E9E4(&qword_10052B9D8, (void (*)(uint64_t))&type metadata accessor for Divider);
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v24);
  }
}

uint64_t sub_10040A618(void *a1, uint64_t a2)
{
  if (qword_100517EB0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000F378(v4, (uint64_t)qword_10055E328);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v5 text];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xEE006E6F69747069;
      uint64_t v11 = 0x7263736564206F6ELL;
    }
    uint64_t v16 = sub_1003806B0(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Performing \"%s\"", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  [v5 performAction:v16];
  uint64_t v14 = type metadata accessor for DataDetectorResultCardView(0);
  return (*(uint64_t (**)(void))(a2 + *(int *)(v14 + 24)))();
}

uint64_t sub_10040A83C@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = sub_10000F214(&qword_10052E988);
  double v4 = __chkstk_darwin(v3 - 8);
  uint64_t v33 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 text];
  if (v6)
  {
    os_log_type_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = [a1 image];
  uint64_t v9 = static VerticalAlignment.center.getter();
  sub_10040AB6C(v8, (uint64_t)&v57);
  uint64_t v10 = v57;
  char v11 = v58;
  uint64_t v12 = v59;
  HIDWORD(v27) = BYTE8(v59);
  uint64_t v28 = *((void *)&v60 + 1);
  uint64_t v29 = v60;
  char v13 = v61;
  uint64_t v30 = v62;
  uint64_t v31 = *((void *)&v61 + 1);
  char v14 = BYTE8(v62);
  int v32 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  char v56 = 1;
  char v54 = v11;
  char v51 = v13;
  char v49 = v14;
  char v46 = 0;
  uint64_t v23 = static Font.headline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRelease();

  uint64_t v57 = v9;
  uint64_t v58 = 0;
  LOBYTE(v59) = v56;
  *(_DWORD *)((char *)&v59 + 1) = *(_DWORD *)v55;
  DWORD1(v59) = *(_DWORD *)&v55[3];
  *((void *)&v59 + 1) = v10;
  LOBYTE(v60) = v54;
  *(_DWORD *)((char *)&v60 + 1) = *(_DWORD *)v53;
  DWORD1(v60) = *(_DWORD *)&v53[3];
  *((void *)&v60 + 1) = v12;
  LOBYTE(v61) = BYTE4(v27);
  DWORD1(v61) = *(_DWORD *)&v52[3];
  *(_DWORD *)((char *)&v61 + 1) = *(_DWORD *)v52;
  *((void *)&v61 + 1) = v29;
  *(void *)&long long v62 = v28;
  BYTE8(v62) = v51;
  *(_DWORD *)((char *)&v62 + 9) = *(_DWORD *)v50;
  HIDWORD(v62) = *(_DWORD *)&v50[3];
  *(void *)&long long v63 = v31;
  *((void *)&v63 + 1) = v30;
  LOBYTE(v64) = v49;
  *(_DWORD *)((char *)&v64 + 1) = *(_DWORD *)v48;
  DWORD1(v64) = *(_DWORD *)&v48[3];
  BYTE8(v64) = v32;
  HIDWORD(v64) = *(_DWORD *)&v47[3];
  *(_DWORD *)((char *)&v64 + 9) = *(_DWORD *)v47;
  *(void *)&long long v65 = v16;
  *((void *)&v65 + 1) = v18;
  *(void *)&long long v66 = v20;
  *((void *)&v66 + 1) = v22;
  LOBYTE(v67) = v46;
  *((void *)&v67 + 1) = KeyPath;
  uint64_t v68 = v23;
  long long v43 = v66;
  long long v44 = v67;
  uint64_t v45 = v23;
  long long v39 = v62;
  long long v40 = v63;
  long long v41 = v64;
  long long v42 = v65;
  long long v35 = (unint64_t)v9;
  long long v36 = v59;
  long long v37 = v60;
  long long v38 = v61;
  sub_10000F214(&qword_10052E9A0);
  sub_10040F110();
  uint64_t v25 = (uint64_t)v33;
  View.accessibilityIdentifier(_:)();
  sub_10040F258((uint64_t)&v57);
  return sub_10000FC34(v25, v34, &qword_10052E988);
}

uint64_t sub_10040AB6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = sub_100167D48(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      Image.init(systemName:)();
    }
    else
    {
      id v8 = [v3 imageWithRenderingMode:2];
      Image.init(uiImage:)();
    }
    swift_retain();
    _ConditionalContent<>.init(storage:)();
    swift_release();

    uint64_t v6 = v16;
    char v7 = v17;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = -2;
  }
  sub_1000317A0();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v6;
  char v13 = v12 & 1;
  *(unsigned char *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 48) = v12 & 1;
  *(void *)(a2 + 56) = v14;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  sub_10040F300(v6, v7);
  sub_1000807A8(v9, v11, v13);
  swift_bridgeObjectRetain();
  sub_100012FAC(v9, v11, v13);
  swift_bridgeObjectRelease();
  return sub_10040F2D8(v6, v7);
}

uint64_t sub_10040AD30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v88 = a1;
  uint64_t v2 = type metadata accessor for DataDetectorResultView(0);
  uint64_t v3 = v2 - 8;
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v75 + 64);
  __chkstk_darwin(v2);
  uint64_t v81 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000F214(&qword_10052E7F0);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = (int *)sub_10000F214(&qword_10052E7F8);
  __chkstk_darwin(v77);
  uint64_t v79 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_10000F214(&qword_10052E800);
  __chkstk_darwin(v87);
  uint64_t v82 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052E808);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v83 = (char *)&v63 - v14;
  uint64_t v15 = type metadata accessor for TextDetectorResult(0);
  uint64_t v73 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v73 + 64);
  __chkstk_darwin(v15 - 8);
  uint64_t v84 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v63 - v18;
  uint64_t v85 = sub_10000F214(&qword_10052E810);
  __chkstk_darwin(v85);
  uint64_t v89 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v86);
  uint64_t v78 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v63 - v23;
  uint64_t v25 = v1;
  uint64_t v74 = v1 + *(int *)(v3 + 32);
  sub_10040C0B8(v74, (uint64_t)&v63 - v23, type metadata accessor for DataDetectorState);
  uint64_t v26 = sub_10000F214(&qword_10051A320);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v24, 1, v26) == 1)
  {
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = sub_10040EA7C(&qword_10052E820, &qword_10052E800, (void (*)(void))sub_10040DAD8);
    uint64_t v28 = sub_10040E9E4(&qword_10052E838, (void (*)(uint64_t))type metadata accessor for DataDetectorState);
    uint64_t v90 = v87;
    uint64_t v91 = v86;
    uint64_t v92 = v27;
    uint64_t v93 = v28;
    swift_getOpaqueTypeConformance2();
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v30 = *(int *)(v26 + 48);
    uint64_t v71 = v11;
    long long v65 = *(void **)&v24[v30];
    uint64_t v31 = v65;
    uint64_t v72 = type metadata accessor for TextDetectorResult;
    sub_10040D678((uint64_t)v24, (uint64_t)v19, type metadata accessor for TextDetectorResult);
    *(void *)char v7 = static HorizontalAlignment.center.getter();
    *((void *)v7 + 1) = 0;
    v7[16] = 1;
    uint64_t v32 = (uint64_t)&v7[*(int *)(sub_10000F214(&qword_10052E818) + 44)];
    uint64_t v76 = v19;
    sub_10040B720(v25, (uint64_t)v19, v31, v32);
    long long v66 = type metadata accessor for DataDetectorResultView;
    uint64_t v33 = v81;
    sub_10040C0B8(v25, v81, type metadata accessor for DataDetectorResultView);
    uint64_t v70 = type metadata accessor for TextDetectorResult;
    uint64_t v34 = (uint64_t)v7;
    uint64_t v35 = (uint64_t)v84;
    sub_10040C0B8((uint64_t)v19, (uint64_t)v84, type metadata accessor for TextDetectorResult);
    uint64_t v36 = *(unsigned __int8 *)(v75 + 80);
    uint64_t v37 = (v36 + 16) & ~v36;
    uint64_t v75 = v10;
    uint64_t v38 = v36 | 7;
    uint64_t v39 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v40 = (v37 + v4 + v39) & ~v39;
    uint64_t v73 = v38 | v39;
    uint64_t v67 = v40;
    unint64_t v69 = ((v16 + v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v41 = (v16 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v68 = v41;
    uint64_t v42 = swift_allocObject();
    long long v64 = type metadata accessor for DataDetectorResultView;
    sub_10040D678(v33, v42 + v37, type metadata accessor for DataDetectorResultView);
    sub_10040D678(v35, v42 + v40, v72);
    long long v43 = v65;
    *(void *)(v42 + v41) = v65;
    uint64_t v44 = v79;
    sub_10000FB74(v34, v79, &qword_10052E7F0);
    uint64_t v45 = (void *)(v44 + v77[9]);
    *uint64_t v45 = sub_10040D6E0;
    v45[1] = v42;
    v45[2] = 0;
    v45[3] = 0;
    uint64_t v77 = v43;
    sub_10000FBD8(v34, &qword_10052E7F0);
    char v46 = v66;
    sub_10040C0B8(v25, v33, v66);
    uint64_t v47 = swift_allocObject();
    uint64_t v48 = v64;
    sub_10040D678(v33, v47 + v37, v64);
    uint64_t v49 = v82;
    sub_10000FB74(v44, v82, &qword_10052E7F8);
    uint64_t v50 = v87;
    char v51 = (void *)(v49 + *(int *)(v87 + 36));
    *char v51 = 0;
    v51[1] = 0;
    v51[2] = sub_10040D6E8;
    v51[3] = v47;
    sub_10000FBD8(v44, &qword_10052E7F8);
    uint64_t v52 = v78;
    sub_10040C0B8(v74, v78, type metadata accessor for DataDetectorState);
    sub_10040C0B8(v25, v33, v46);
    uint64_t v53 = (uint64_t)v84;
    sub_10040C0B8((uint64_t)v76, (uint64_t)v84, v70);
    uint64_t v54 = swift_allocObject();
    sub_10040D678(v33, v54 + v37, v48);
    sub_10040D678(v53, v54 + v67, v72);
    uint64_t v55 = v77;
    *(void *)(v54 + v68) = v77;
    uint64_t v56 = sub_10040EA7C(&qword_10052E820, &qword_10052E800, (void (*)(void))sub_10040DAD8);
    uint64_t v57 = sub_10040E9E4(&qword_10052E838, (void (*)(uint64_t))type metadata accessor for DataDetectorState);
    uint64_t v84 = v55;
    uint64_t v58 = v80;
    uint64_t v59 = v86;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    sub_10040C058(v52, type metadata accessor for DataDetectorState);
    sub_10000FBD8(v49, &qword_10052E800);
    uint64_t v60 = v71;
    long long v61 = v83;
    uint64_t v62 = v75;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v83, v58, v75);
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v89, v61, v62);
    swift_storeEnumTagMultiPayload();
    uint64_t v90 = v50;
    uint64_t v91 = v59;
    uint64_t v92 = v56;
    uint64_t v93 = v57;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();

    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
    return sub_10040C058((uint64_t)v76, type metadata accessor for TextDetectorResult);
  }
}

id sub_10040B720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v7 = type metadata accessor for DataDetectorResultView(0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v7);
  uint64_t v11 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 + *(int *)(v8 + 36);
  char v15 = *(unsigned char *)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  char v25 = v15;
  uint64_t v26 = v16;
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.getter();
  if (v27)
  {
    uint64_t v17 = type metadata accessor for DataDetectorResultCardView(0);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a4, 1, 1, v17);
  }
  else
  {
    sub_10040C0B8(a2, (uint64_t)v13, type metadata accessor for TextDetectorResult);
    sub_10040C0B8(a1, (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DataDetectorResultView);
    unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v20 = swift_allocObject();
    sub_10040D678((uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for DataDetectorResultView);
    sub_10040D678((uint64_t)v13, a4, type metadata accessor for TextDetectorResult);
    uint64_t v21 = type metadata accessor for DataDetectorResultCardView(0);
    *(void *)(a4 + *(int *)(v21 + 20)) = v24;
    uint64_t v22 = (uint64_t (**)())(a4 + *(int *)(v21 + 24));
    *uint64_t v22 = sub_10040DD6C;
    v22[1] = (uint64_t (*)())v20;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 56))(a4, 0, 1);
    uint64_t v23 = v24;
    return v23;
  }
}

void sub_10040B9D8(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1004090A0();
  unint64_t v5 = v4;
  if (!(v4 >> 62))
  {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
LABEL_15:
    type metadata accessor for DataDetectorResultView(0);
    sub_10000F214(&qword_100522EA0);
    State.wrappedValue.setter();
    return;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v7 = 4;
  while (1)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    if ([v8 isLeaf]) {
      break;
    }

    ++v7;
    if (v10 == v6) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v11 = type metadata accessor for TextDetectorResult(0);
  if (*(unsigned char *)(a1 + *(int *)(v11 + 56)) != 1
    || (uint64_t v12 = *(void *)(a1 + *(int *)(v11 + 48)), !*(void *)(v12 + 16))
    || (uint64_t v13 = *(void *)(type metadata accessor for TextDetectorResult.DataDetector(0) - 8),
        (*(_DWORD *)(v12 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))) & 0x800203) != 0))
  {

    goto LABEL_15;
  }
  [v9 performAction];
  type metadata accessor for DataDetectorResultView(0);
  sub_10000F214(&qword_100522EA0);
  State.wrappedValue.setter();
  uint64_t v14 = *(void *)v2;
  uint64_t v15 = *(void *)(v2 + 8);
  char v16 = *(unsigned char *)(v2 + 16);
  sub_100197C1C(*(void *)v2, v15, v16, (uint64_t (*)(void))sub_10000F724);
  uint64_t v17 = (void (*)(uint64_t))sub_10027D504(v14, v15, v16);
  uint64_t v18 = sub_100198010(v14, v15, v16, (uint64_t (*)(void))sub_10000F478);
  if (v17)
  {
    v17(v18);
    sub_10000F478((uint64_t)v17);
  }
}

uint64_t sub_10040BC80()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10040BCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DataDetectorState(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052E750);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v12[*(int *)(v13 + 56)];
  sub_10040C0B8(a1, (uint64_t)v12, type metadata accessor for DataDetectorState);
  sub_10040C0B8(a2, v14, type metadata accessor for DataDetectorState);
  uint64_t v15 = sub_10000F214(&qword_10051A320);
  char v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  if (v16((uint64_t)v12, 1, v15) != 1)
  {
    sub_10040C0B8((uint64_t)v12, (uint64_t)v9, type metadata accessor for DataDetectorState);
    uint64_t v18 = *(int *)(v15 + 48);
    unint64_t v19 = *(void **)&v9[v18];
    if (v16(v14, 1, v15) != 1)
    {
      uint64_t v20 = *(void **)(v14 + v18);
      sub_10040D678(v14, (uint64_t)v6, type metadata accessor for TextDetectorResult);
      char v21 = sub_10032F944((uint64_t)v9, (uint64_t)v6);
      sub_10040C058((uint64_t)v9, type metadata accessor for TextDetectorResult);
      if (v21)
      {
        sub_10000F734(0, (unint64_t *)&qword_100518A40);
        char v17 = static NSObject.== infix(_:_:)();

        sub_10040C058((uint64_t)v6, type metadata accessor for TextDetectorResult);
        sub_10040C058((uint64_t)v12, type metadata accessor for DataDetectorState);
        return v17 & 1;
      }
      sub_10040C058((uint64_t)v6, type metadata accessor for TextDetectorResult);

      sub_10040C058((uint64_t)v12, type metadata accessor for DataDetectorState);
LABEL_10:
      char v17 = 0;
      return v17 & 1;
    }

    sub_10040C058((uint64_t)v9, type metadata accessor for TextDetectorResult);
LABEL_6:
    sub_10000FBD8((uint64_t)v12, &qword_10052E750);
    goto LABEL_10;
  }
  if (v16(v14, 1, v15) != 1) {
    goto LABEL_6;
  }
  sub_10040C058((uint64_t)v12, type metadata accessor for DataDetectorState);
  char v17 = 1;
  return v17 & 1;
}

uint64_t sub_10040C058(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10040C0B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10040C120@<X0>(id a1@<X1>, uint64_t a2@<X0>, uint64_t *a3@<X8>)
{
  id v6 = [a1 text];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v10 = 0xE000000000000000;
  }
  uint64_t v11 = type metadata accessor for TextDetectorResult(0);
  if (*(unsigned char *)(a2 + *(int *)(v11 + 56)) == 1 && (uint64_t v12 = *(void *)(a2 + *(int *)(v11 + 48)), *(void *)(v12 + 16)))
  {
    uint64_t v13 = type metadata accessor for TextDetectorResult.DataDetector(0);
    uint64_t v14 = (uint64_t *)(v12
                    + *(int *)(v13 + 24)
                    + ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)));
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  id v17 = [a1 image];
  uint64_t result = sub_10040C058(a2, type metadata accessor for TextDetectorResult);
  *a3 = v8;
  a3[1] = v10;
  a3[2] = v16;
  a3[3] = v15;
  a3[4] = (uint64_t)v17;
  return result;
}

unint64_t sub_10040C264(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    sub_100197C1C(*(void *)a2, v8, v9, (uint64_t (*)(void))sub_10000F724);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    char v12 = *(unsigned char *)(a2 + 40);
    sub_100197C1C(v10, v11, v12, (uint64_t (*)(void))sub_10000F724);
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = v12;
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)(a1 + v13);
    unint64_t v15 = (char *)(a2 + v13);
    uint64_t v16 = sub_10000F214(&qword_10051A320);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = type metadata accessor for DataDetectorState(0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v14, v15, v20);
      char v21 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)&v14[v21[5]] = *(_DWORD *)&v15[v21[5]];
      uint64_t v22 = v21[6];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = &v15[v22];
      long long v25 = *((_OWORD *)v24 + 3);
      *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
      *((_OWORD *)v23 + 3) = v25;
      long long v26 = *((_OWORD *)v24 + 1);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v26;
      uint64_t v27 = v21[7];
      uint64_t v28 = &v14[v27];
      uint64_t v29 = &v15[v27];
      uint64_t v31 = *(void *)v29;
      uint64_t v30 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = v31;
      *((void *)v28 + 1) = v30;
      *(void *)&v14[v21[8]] = *(void *)&v15[v21[8]];
      *(void *)&v14[v21[9]] = *(void *)&v15[v21[9]];
      *(void *)&v14[v21[10]] = *(void *)&v15[v21[10]];
      *(void *)&v14[v21[11]] = *(void *)&v15[v21[11]];
      *(void *)&v14[v21[12]] = *(void *)&v15[v21[12]];
      uint64_t v32 = v21[13];
      uint64_t v42 = *(void **)&v15[v32];
      *(void *)&v14[v32] = v42;
      v14[v21[14]] = v15[v21[14]];
      uint64_t v33 = *(int *)(v16 + 48);
      uint64_t v34 = *(void **)&v15[v33];
      *(void *)&v14[v33] = v34;
      uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v36 = v42;
      id v37 = v34;
      v35(v14, 0, 1, v16);
    }
    uint64_t v38 = *(int *)(a3 + 28);
    uint64_t v39 = a1 + v38;
    uint64_t v40 = a2 + v38;
    *(unsigned char *)uint64_t v39 = *(unsigned char *)v40;
    *(void *)(v39 + 8) = *(void *)(v40 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_10040C55C(uint64_t a1, uint64_t a2)
{
  sub_100198010(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_100198010(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40), (uint64_t (*)(void))sub_10000F478);
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_10000F214(&qword_10051A320);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    uint64_t v7 = type metadata accessor for TextDetectorResult(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t sub_10040C6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_100197C1C(*(void *)a2, v7, v8, (uint64_t (*)(void))sub_10000F724);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_100197C1C(v9, v10, v11, (uint64_t (*)(void))sub_10000F724);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = sub_10000F214(&qword_10051A320);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = type metadata accessor for DataDetectorState(0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v14, v18);
    uint64_t v19 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)&v13[v19[5]] = *(_DWORD *)&v14[v19[5]];
    uint64_t v20 = v19[6];
    char v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    long long v23 = *((_OWORD *)v22 + 3);
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    *((_OWORD *)v21 + 3) = v23;
    long long v24 = *((_OWORD *)v22 + 1);
    *(_OWORD *)char v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v24;
    uint64_t v25 = v19[7];
    long long v26 = &v13[v25];
    uint64_t v27 = &v14[v25];
    uint64_t v29 = *(void *)v27;
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)long long v26 = v29;
    *((void *)v26 + 1) = v28;
    *(void *)&v13[v19[8]] = *(void *)&v14[v19[8]];
    *(void *)&v13[v19[9]] = *(void *)&v14[v19[9]];
    *(void *)&v13[v19[10]] = *(void *)&v14[v19[10]];
    *(void *)&v13[v19[11]] = *(void *)&v14[v19[11]];
    *(void *)&v13[v19[12]] = *(void *)&v14[v19[12]];
    uint64_t v30 = v19[13];
    uint64_t v41 = a3;
    uint64_t v31 = *(void **)&v14[v30];
    *(void *)&v13[v30] = v31;
    v13[v19[14]] = v14[v19[14]];
    uint64_t v32 = *(int *)(v15 + 48);
    uint64_t v33 = *(void **)&v14[v32];
    *(void *)&v13[v32] = v33;
    uint64_t v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v35 = v31;
    a3 = v41;
    id v36 = v33;
    v34(v13, 0, 1, v15);
  }
  uint64_t v37 = *(int *)(a3 + 28);
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_10040C97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_100197C1C(*(void *)a2, v7, v8, (uint64_t (*)(void))sub_10000F724);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_100198010(v9, v10, v11, (uint64_t (*)(void))sub_10000F478);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  char v14 = *(unsigned char *)(a2 + 40);
  sub_100197C1C(v12, v13, v14, (uint64_t (*)(void))sub_10000F724);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  char v17 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = v14;
  sub_100198010(v15, v16, v17, (uint64_t (*)(void))sub_10000F478);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (unsigned char *)(a1 + v18);
  uint64_t v20 = (unsigned char *)(a2 + v18);
  uint64_t v21 = sub_10000F214(&qword_10051A320);
  uint64_t v22 = *(void *)(v21 - 8);
  long long v23 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      uint64_t v49 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v49 - 8) + 24))(v19, v20, v49);
      uint64_t v50 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)&v19[v50[5]] = *(_DWORD *)&v20[v50[5]];
      uint64_t v51 = v50[6];
      uint64_t v52 = &v19[v51];
      uint64_t v53 = &v20[v51];
      *uint64_t v52 = *v53;
      v52[1] = v53[1];
      uint64_t v52[2] = v53[2];
      v52[3] = v53[3];
      v52[4] = v53[4];
      v52[5] = v53[5];
      v52[6] = v53[6];
      unsigned char v52[7] = v53[7];
      uint64_t v54 = v50[7];
      uint64_t v55 = &v19[v54];
      uint64_t v56 = &v20[v54];
      *uint64_t v55 = *v56;
      v55[1] = v56[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v19[v50[8]] = *(void *)&v20[v50[8]];
      *(void *)&v19[v50[9]] = *(void *)&v20[v50[9]];
      *(void *)&v19[v50[10]] = *(void *)&v20[v50[10]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v19[v50[11]] = *(void *)&v20[v50[11]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v19[v50[12]] = *(void *)&v20[v50[12]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v57 = v50[13];
      uint64_t v58 = *(void **)&v19[v57];
      uint64_t v59 = *(void **)&v20[v57];
      *(void *)&v19[v57] = v59;
      id v60 = v59;

      v19[v50[14]] = v20[v50[14]];
      uint64_t v61 = *(int *)(v21 + 48);
      uint64_t v62 = *(void **)&v20[v61];
      uint64_t v63 = *(void **)&v19[v61];
      *(void *)&v19[v61] = v62;
      id v64 = v62;

      goto LABEL_7;
    }
    sub_10000FBD8((uint64_t)v19, &qword_10051A320);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v44 = type metadata accessor for DataDetectorState(0);
    memcpy(v19, v20, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v26 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 16))(v19, v20, v26);
  uint64_t v27 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)&v19[v27[5]] = *(_DWORD *)&v20[v27[5]];
  uint64_t v28 = v27[6];
  uint64_t v29 = &v19[v28];
  uint64_t v30 = &v20[v28];
  long long v32 = v30[2];
  long long v31 = v30[3];
  long long v33 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v33;
  v29[2] = v32;
  v29[3] = v31;
  uint64_t v34 = v27[7];
  id v35 = &v19[v34];
  id v36 = &v20[v34];
  *id v35 = *v36;
  v35[1] = v36[1];
  *(void *)&v19[v27[8]] = *(void *)&v20[v27[8]];
  *(void *)&v19[v27[9]] = *(void *)&v20[v27[9]];
  *(void *)&v19[v27[10]] = *(void *)&v20[v27[10]];
  *(void *)&v19[v27[11]] = *(void *)&v20[v27[11]];
  *(void *)&v19[v27[12]] = *(void *)&v20[v27[12]];
  uint64_t v37 = v27[13];
  uint64_t v65 = a3;
  uint64_t v38 = *(void **)&v20[v37];
  *(void *)&v19[v37] = v38;
  v19[v27[14]] = v20[v27[14]];
  uint64_t v39 = *(int *)(v21 + 48);
  uint64_t v40 = *(void **)&v20[v39];
  *(void *)&v19[v39] = v40;
  uint64_t v41 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v42 = v38;
  a3 = v65;
  id v43 = v40;
  v41(v19, 0, 1, v21);
LABEL_7:
  uint64_t v45 = *(int *)(a3 + 28);
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
  *(void *)(v46 + 8) = *(void *)(v47 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10040CE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  char v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_10000F214(&qword_10051A320);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = type metadata accessor for DataDetectorState(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
    uint64_t v13 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)&v7[v13[5]] = *(_DWORD *)&v8[v13[5]];
    uint64_t v14 = v13[6];
    uint64_t v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    long long v17 = *((_OWORD *)v16 + 3);
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    *((_OWORD *)v15 + 3) = v17;
    long long v18 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v18;
    *(_OWORD *)&v7[v13[7]] = *(_OWORD *)&v8[v13[7]];
    *(void *)&v7[v13[8]] = *(void *)&v8[v13[8]];
    *(void *)&v7[v13[9]] = *(void *)&v8[v13[9]];
    *(void *)&v7[v13[10]] = *(void *)&v8[v13[10]];
    *(void *)&v7[v13[11]] = *(void *)&v8[v13[11]];
    *(void *)&v7[v13[12]] = *(void *)&v8[v13[12]];
    *(void *)&v7[v13[13]] = *(void *)&v8[v13[13]];
    v7[v13[14]] = v8[v13[14]];
    *(void *)&v7[*(int *)(v9 + 48)] = *(void *)&v8[*(int *)(v9 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10040D028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100198010(v7, v8, v9, (uint64_t (*)(void))sub_10000F478);
  char v10 = *(unsigned char *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v10;
  sub_100198010(v11, v12, v13, (uint64_t (*)(void))sub_10000F478);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (unsigned char *)(a1 + v14);
  uint64_t v16 = (unsigned char *)(a2 + v14);
  uint64_t v17 = sub_10000F214(&qword_10051A320);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 40))(v15, v16, v34);
      id v35 = (int *)type metadata accessor for TextDetectorResult(0);
      *(_DWORD *)&v15[v35[5]] = *(_DWORD *)&v16[v35[5]];
      uint64_t v36 = v35[6];
      uint64_t v37 = &v15[v36];
      uint64_t v38 = &v16[v36];
      long long v39 = v38[1];
      *uint64_t v37 = *v38;
      v37[1] = v39;
      long long v40 = v38[3];
      v37[2] = v38[2];
      v37[3] = v40;
      uint64_t v41 = v35[7];
      id v42 = &v15[v41];
      id v43 = (uint64_t *)&v16[v41];
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      *id v42 = v45;
      v42[1] = v44;
      swift_bridgeObjectRelease();
      *(void *)&v15[v35[8]] = *(void *)&v16[v35[8]];
      *(void *)&v15[v35[9]] = *(void *)&v16[v35[9]];
      *(void *)&v15[v35[10]] = *(void *)&v16[v35[10]];
      swift_bridgeObjectRelease();
      *(void *)&v15[v35[11]] = *(void *)&v16[v35[11]];
      swift_bridgeObjectRelease();
      *(void *)&v15[v35[12]] = *(void *)&v16[v35[12]];
      swift_bridgeObjectRelease();
      uint64_t v46 = v35[13];
      uint64_t v47 = *(void **)&v15[v46];
      *(void *)&v15[v46] = *(void *)&v16[v46];

      v15[v35[14]] = v16[v35[14]];
      uint64_t v48 = *(int *)(v17 + 48);
      uint64_t v49 = *(void **)&v15[v48];
      *(void *)&v15[v48] = *(void *)&v16[v48];

      goto LABEL_7;
    }
    sub_10000FBD8((uint64_t)v15, &qword_10051A320);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v29 = type metadata accessor for DataDetectorState(0);
    memcpy(v15, v16, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v15, v16, v22);
  long long v23 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)&v15[v23[5]] = *(_DWORD *)&v16[v23[5]];
  uint64_t v24 = v23[6];
  int v25 = &v15[v24];
  uint64_t v26 = &v16[v24];
  long long v27 = v26[3];
  v25[2] = v26[2];
  v25[3] = v27;
  long long v28 = v26[1];
  _OWORD *v25 = *v26;
  v25[1] = v28;
  *(_OWORD *)&v15[v23[7]] = *(_OWORD *)&v16[v23[7]];
  *(void *)&v15[v23[8]] = *(void *)&v16[v23[8]];
  *(void *)&v15[v23[9]] = *(void *)&v16[v23[9]];
  *(void *)&v15[v23[10]] = *(void *)&v16[v23[10]];
  *(void *)&v15[v23[11]] = *(void *)&v16[v23[11]];
  *(void *)&v15[v23[12]] = *(void *)&v16[v23[12]];
  *(void *)&v15[v23[13]] = *(void *)&v16[v23[13]];
  v15[v23[14]] = v16[v23[14]];
  *(void *)&v15[*(int *)(v17 + 48)] = *(void *)&v16[*(int *)(v17 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  uint64_t v30 = *(int *)(a3 + 28);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_release();
  return a1;
}

uint64_t sub_10040D3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10040D3EC);
}

uint64_t sub_10040D3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DataDetectorState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_10040D4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10040D4D4);
}

uint64_t sub_10040D4D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DataDetectorState(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for DataDetectorResultView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052E7B0);
}

uint64_t sub_10040D5B8()
{
  uint64_t result = type metadata accessor for DataDetectorState(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10040D658()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10040D678(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10040D6E8()
{
  return sub_10040DD84((uint64_t (*)(uint64_t))sub_10040BC80);
}

uint64_t sub_10040D704()
{
  uint64_t v1 = type metadata accessor for DataDetectorResultView(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64);
  sub_100198010(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8), *(unsigned char *)(v0 + v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_100198010(*(void *)(v0 + v2 + 24), *(void *)(v0 + v2 + 32), *(unsigned char *)(v0 + v2 + 40), (uint64_t (*)(void))sub_10000F478);
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 24);
  uint64_t v7 = sub_10000F214(&qword_10051A320);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v9 = (v2 + v3 + v5) & ~v5;
  swift_release();
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_10040D9E8()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataDetectorResultView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for TextDetectorResult(0) - 8);
  sub_10040B9D8(v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

unint64_t sub_10040DAD8()
{
  unint64_t result = qword_10052E828;
  if (!qword_10052E828)
  {
    sub_10000F69C(&qword_10052E7F8);
    sub_100013AA8(&qword_10052E830, &qword_10052E7F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E828);
  }
  return result;
}

uint64_t sub_10040DB7C()
{
  uint64_t v1 = type metadata accessor for DataDetectorResultView(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  sub_100198010(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16), (uint64_t (*)(void))sub_10000F478);
  sub_100198010(*(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), (uint64_t (*)(void))sub_10000F478);
  uint64_t v3 = v2 + *(int *)(v1 + 24);
  uint64_t v4 = sub_10000F214(&qword_10051A320);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
    uint64_t v6 = type metadata accessor for TextDetectorResult(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10040DD6C()
{
  return sub_10040DD84(sub_1001927E0);
}

uint64_t sub_10040DD84(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for DataDetectorResultView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t type metadata accessor for DataDetectorResultCardView(uint64_t a1)
{
  return sub_10001FEBC(a1, qword_10052E898);
}

void *sub_10040DE18(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for TextDetectorResult(0);
    *(_DWORD *)((char *)v4 + v8[5]) = *(_DWORD *)((char *)a2 + v8[5]);
    uint64_t v9 = v8[6];
    uint64_t v10 = (_OWORD *)((char *)v4 + v9);
    uint64_t v11 = (_OWORD *)((char *)a2 + v9);
    long long v12 = v11[3];
    _OWORD v10[2] = v11[2];
    v10[3] = v12;
    long long v13 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v13;
    uint64_t v14 = v8[7];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *uint64_t v15 = v18;
    v15[1] = v17;
    *(void *)((char *)v4 + v8[8]) = *(void *)((char *)a2 + v8[8]);
    *(void *)((char *)v4 + v8[9]) = *(void *)((char *)a2 + v8[9]);
    *(void *)((char *)v4 + v8[10]) = *(void *)((char *)a2 + v8[10]);
    *(void *)((char *)v4 + v8[11]) = *(void *)((char *)a2 + v8[11]);
    *(void *)((char *)v4 + v8[12]) = *(void *)((char *)a2 + v8[12]);
    uint64_t v19 = v8[13];
    int v20 = *(void **)((char *)a2 + v19);
    *(void *)((char *)v4 + v19) = v20;
    *((unsigned char *)v4 + v8[14]) = *((unsigned char *)a2 + v8[14]);
    uint64_t v21 = *(int *)(a3 + 20);
    uint64_t v22 = *(int *)(a3 + 24);
    long long v23 = *(void **)((char *)a2 + v21);
    *(void *)((char *)v4 + v21) = v23;
    uint64_t v24 = (void *)((char *)v4 + v22);
    int v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v27 = v20;
    id v28 = v23;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10040DFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for TextDetectorResult(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_10040E0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (_OWORD *)(a1 + v8);
  uint64_t v10 = (_OWORD *)(a2 + v8);
  long long v11 = v10[3];
  v9[2] = v10[2];
  void v9[3] = v11;
  long long v12 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v12;
  uint64_t v13 = v7[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  void *v14 = v17;
  v14[1] = v16;
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  uint64_t v18 = v7[13];
  uint64_t v19 = *(void **)(a2 + v18);
  *(void *)(a1 + v18) = v19;
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  long long v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *long long v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v26 = v19;
  id v27 = v22;
  swift_retain();
  return a1;
}

uint64_t sub_10040E204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  void v9[3] = v10[3];
  v9[4] = v10[4];
  v9[5] = v10[5];
  v9[6] = v10[6];
  v9[7] = v10[7];
  uint64_t v11 = v7[7];
  long long v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *long long v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v7[13];
  uint64_t v15 = *(void **)(a1 + v14);
  uint64_t v16 = *(void **)(a2 + v14);
  *(void *)(a1 + v14) = v16;
  id v17 = v16;

  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(void **)(a2 + v18);
  uint64_t v20 = *(void **)(a1 + v18);
  *(void *)(a1 + v18) = v19;
  id v21 = v19;

  uint64_t v22 = *(int *)(a3 + 24);
  long long v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  uint64_t v25 = v24[1];
  *long long v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10040E3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (_OWORD *)(a1 + v8);
  uint64_t v10 = (_OWORD *)(a2 + v8);
  long long v11 = v10[3];
  v9[2] = v10[2];
  void v9[3] = v11;
  long long v12 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v12;
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  *(void *)(a1 + v7[13]) = *(void *)(a2 + v7[13]);
  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  uint64_t v13 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_10040E4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TextDetectorResult(0);
  *(_DWORD *)(a1 + v7[5]) = *(_DWORD *)(a2 + v7[5]);
  uint64_t v8 = v7[6];
  uint64_t v9 = (_OWORD *)(a1 + v8);
  uint64_t v10 = (_OWORD *)(a2 + v8);
  long long v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  long long v12 = v10[3];
  v9[2] = v10[2];
  void v9[3] = v12;
  uint64_t v13 = v7[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  void *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  swift_bridgeObjectRelease();
  uint64_t v18 = v7[13];
  uint64_t v19 = *(void **)(a1 + v18);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);

  *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
  uint64_t v20 = *(int *)(a3 + 20);
  id v21 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);

  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_10040E64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10040E660);
}

uint64_t sub_10040E660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TextDetectorResult(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10040E720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10040E734);
}

uint64_t sub_10040E734(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TextDetectorResult(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10040E7F0()
{
  uint64_t result = type metadata accessor for TextDetectorResult(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10040E89C()
{
  unint64_t result = qword_10052E8D8;
  if (!qword_10052E8D8)
  {
    sub_10000F69C(&qword_10052E8E0);
    sub_10000F69C(&qword_10052E800);
    type metadata accessor for DataDetectorState(255);
    sub_10040EA7C(&qword_10052E820, &qword_10052E800, (void (*)(void))sub_10040DAD8);
    sub_10040E9E4(&qword_10052E838, (void (*)(uint64_t))type metadata accessor for DataDetectorState);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E8D8);
  }
  return result;
}

uint64_t sub_10040E9C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10040E9E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10040EA34()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10040EA7C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000F69C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10040EAF8()
{
  unint64_t v1 = (int *)(type metadata accessor for DataDetectorResultCardView(0) - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = type metadata accessor for TextDetectorResult(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10040EC44@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for DataDetectorResultCardView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10040A178(a1, v6, a2);
}

unint64_t sub_10040ECC4()
{
  unint64_t result = qword_10052E948;
  if (!qword_10052E948)
  {
    sub_10000F734(255, &qword_100524400);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E948);
  }
  return result;
}

unint64_t sub_10040ED2C()
{
  unint64_t result = qword_10052E950;
  if (!qword_10052E950)
  {
    sub_10000F69C(&qword_10052E938);
    sub_100013AA8(&qword_10052E958, &qword_10052E960);
    sub_10040E9E4(&qword_10052B9D8, (void (*)(uint64_t))&type metadata accessor for Divider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E950);
  }
  return result;
}

unint64_t sub_10040EDFC()
{
  unint64_t result = qword_10052E968;
  if (!qword_10052E968)
  {
    sub_10000F69C(&qword_10052E910);
    sub_100013AA8(&qword_10052E970, &qword_10052E908);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E968);
  }
  return result;
}

uint64_t sub_10040EEA4()
{
  unint64_t v1 = (int *)(type metadata accessor for DataDetectorResultCardView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);

  uint64_t v3 = v0 + v2;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = type metadata accessor for TextDetectorResult(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10040EFF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataDetectorResultCardView(0) - 8);
  unint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10040A618(v2, v3);
}

uint64_t sub_10040F05C@<X0>(uint64_t a1@<X8>)
{
  return sub_10040A83C(*(void **)(v1 + 24), a1);
}

unint64_t sub_10040F064()
{
  unint64_t result = qword_10052E990;
  if (!qword_10052E990)
  {
    sub_10000F69C(&qword_10052E988);
    sub_10040F110();
    sub_10040E9E4((unint64_t *)&qword_100519780, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E990);
  }
  return result;
}

unint64_t sub_10040F110()
{
  unint64_t result = qword_10052E998;
  if (!qword_10052E998)
  {
    sub_10000F69C(&qword_10052E9A0);
    sub_10040F1B0();
    sub_100013AA8(&qword_100518C20, &qword_100523150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E998);
  }
  return result;
}

unint64_t sub_10040F1B0()
{
  unint64_t result = qword_10052E9A8;
  if (!qword_10052E9A8)
  {
    sub_10000F69C(&qword_10052E9B0);
    sub_100013AA8(&qword_10052E9B8, &qword_10052E9C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E9A8);
  }
  return result;
}

uint64_t sub_10040F258(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_10040F2D8(*(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  sub_100012FAC(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_10040F2D8(uint64_t a1, char a2)
{
  if (a2 != 254) {
    return sub_10040F2EC(a1, a2);
  }
  return a1;
}

uint64_t sub_10040F2EC(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10040F300(uint64_t a1, char a2)
{
  if (a2 != 254) {
    return sub_10040F314(a1, a2);
  }
  return a1;
}

uint64_t sub_10040F314(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_retain();
  }
  return result;
}

void destroy for DataDetectorMastheadState(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for DataDetectorMastheadState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for DataDetectorMastheadState(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for DataDetectorMastheadState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for DataDetectorMastheadState()
{
  return &type metadata for DataDetectorMastheadState;
}

unint64_t sub_10040F4B0()
{
  unint64_t result = qword_10052E9C8;
  if (!qword_10052E9C8)
  {
    sub_10000F69C(&qword_10052E900);
    sub_10040F550();
    sub_100013AA8(&qword_1005190F0, &qword_1005190F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E9C8);
  }
  return result;
}

unint64_t sub_10040F550()
{
  unint64_t result = qword_10052E9D0;
  if (!qword_10052E9D0)
  {
    sub_10000F69C(&qword_10052E8F0);
    sub_10040F5F0();
    sub_100013AA8(&qword_100523C48, &qword_100523C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E9D0);
  }
  return result;
}

unint64_t sub_10040F5F0()
{
  unint64_t result = qword_10052E9D8;
  if (!qword_10052E9D8)
  {
    sub_10000F69C(&qword_10052E8E8);
    sub_100013AA8(&qword_10052E9E0, &qword_10052E9E8);
    sub_10040E9E4((unint64_t *)&qword_100519CF8, (void (*)(uint64_t))type metadata accessor for ContainerSmartDialogViewModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052E9D8);
  }
  return result;
}

double sub_10040F6C0(double result, double a2)
{
  if (result <= a2) {
    return a2;
  }
  return result;
}

double sub_10040F6CC(__n128 a1, __n128 a2)
{
  __n128 v14 = a2;
  __n128 v15 = a1;
  uint64_t v2 = sub_1001E9D0C(0, 2);
  v13[2] = &v15;
  uint64_t v13[3] = &v14;
  uint64_t v3 = sub_1002ED680((void (*)(uint64_t *__return_ptr, uint64_t *))sub_10041AD20, (uint64_t)v13, (uint64_t)v2);
  swift_release();
  uint64_t v4 = v3[2];
  if (!v4)
  {
    double v6 = 0.0;
    goto LABEL_10;
  }
  if (v4 == 1)
  {
    uint64_t v5 = 0;
    double v6 = 0.0;
LABEL_8:
    uint64_t v9 = v4 - v5;
    unint64_t v10 = (double *)&v3[v5 + 4];
    do
    {
      double v11 = *v10++;
      double v6 = v6 + v11;
      --v9;
    }
    while (v9);
    goto LABEL_10;
  }
  uint64_t v5 = v4 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v7 = (double *)(v3 + 5);
  double v6 = 0.0;
  uint64_t v8 = v4 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v6 = v6 + *(v7 - 1) + *v7;
    v7 += 2;
    v8 -= 2;
  }
  while (v8);
  if (v4 != v5) {
    goto LABEL_8;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return sqrt(v6);
}

uint64_t sub_10040F7D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1004154F8(&OBJC_IVAR____TtC6Tamale16CameraController__configuration, (uint64_t)type metadata accessor for CameraControllerConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10041B068, a1);
}

uint64_t sub_10040F80C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10041560C(a1, &OBJC_IVAR____TtC6Tamale16CameraController__configuration, (uint64_t)type metadata accessor for CameraControllerConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10041B068, a2);
}

uint64_t sub_10040F848(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v4 - 8);
  double v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10041B068(a1, (uint64_t)v6, type metadata accessor for CameraControllerConfiguration);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  double v11 = v6;
  uint64_t v12 = v7;
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10041B008((uint64_t)v6, type metadata accessor for CameraControllerConfiguration);
}

void sub_10040F998(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v91 = (char *)a1;
  uint64_t v83 = type metadata accessor for CVDetection();
  __chkstk_darwin(v83);
  uint64_t v86 = (uint64_t)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v85 = (uint64_t)&v80 - v5;
  uint64_t v6 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v81 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v80 = (uint64_t)&v80 - v9;
  __chkstk_darwin(v10);
  uint64_t v82 = (uint64_t)&v80 - v11;
  __chkstk_darwin(v12);
  uint64_t v84 = (uint64_t)&v80 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v80 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v90 = (char *)&v80 - v24;
  __chkstk_darwin(v25);
  id v27 = (char *)&v80 - v26;
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v80 - v29;
  __chkstk_darwin(v31);
  long long v33 = (char *)&v80 - v32;
  swift_getKeyPath();
  uint64_t v34 = v1 + OBJC_IVAR____TtC6Tamale16CameraController___observationRegistrar;
  aBlock[0] = v2;
  uint64_t v88 = sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v89 = v34;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v35 = v2 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  swift_beginAccess();
  sub_10000FB74(v35, (uint64_t)v33, &qword_10051B760);
  sub_1004158A4((uint64_t)v33, 1, (uint64_t)v30);
  uint64_t v91 = v30;
  sub_10000FB74((uint64_t)v30, (uint64_t)v27, &qword_10051B760);
  uint64_t v36 = sub_10000F214(&qword_10051A060);
  uint64_t v87 = *(void *)(v36 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
  if (v37(v27, 1, v36) != 1)
  {
    int v38 = *(_DWORD *)&v27[*(int *)(v36 + 48)];
    sub_10041AE78((uint64_t)v27, (uint64_t)v19, type metadata accessor for CVBundle);
    uint64_t v39 = OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer;
    [*(id *)(v2 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer) invalidate];
    long long v40 = *(void **)(v2 + v39);
    *(void *)(v2 + v39) = 0;

    uint64_t v84 = v2;
    sub_10041B068((uint64_t)v19, (uint64_t)v16, type metadata accessor for CVBundle);
    uint64_t v41 = Logger.logObject.getter();
    int v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      LODWORD(v82) = v42;
      uint64_t v81 = v19;
      id v43 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v43 = 136315138;
      uint64_t v44 = v85;
      sub_10019D408(v85);
      sub_10041B068(v44, v86, (uint64_t (*)(void))type metadata accessor for CVDetection);
      unint64_t v45 = 0xE600000000000000;
      uint64_t v46 = 0x7463656A626FLL;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          unint64_t v45 = 0xE500000000000000;
          uint64_t v46 = 0x6573726170;
          break;
        case 2u:
          unint64_t v45 = 0xE400000000000000;
          uint64_t v46 = 1954047348;
          break;
        case 3u:
          unint64_t v45 = 0xE700000000000000;
          uint64_t v46 = 0x65646F63726162;
          break;
        case 4u:
          unint64_t v45 = 0xE700000000000000;
          uint64_t v46 = 0x70696C43707061;
          break;
        case 5u:
          unint64_t v45 = 0xED00007478655467;
          uint64_t v46 = 0x6E696D6165727473;
          break;
        default:
          break;
      }
      sub_10041B008(v86, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10041B008(v85, (uint64_t (*)(void))type metadata accessor for CVDetection);
      double v92 = COERCE_DOUBLE(sub_1003806B0(v46, v45, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10041B008((uint64_t)v16, type metadata accessor for CVBundle);
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v82, "Updating bundle to %s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v52 = v33;
      uint64_t v54 = (uint64_t)v90;
      uint64_t v53 = (uint64_t)v91;
      uint64_t v19 = v81;
    }
    else
    {

      sub_10041B008((uint64_t)v16, type metadata accessor for CVBundle);
      uint64_t v52 = v33;
      uint64_t v54 = (uint64_t)v90;
      uint64_t v53 = (uint64_t)v91;
    }
    uint64_t v67 = v87;
    uint64_t v68 = *(int *)(v36 + 48);
    sub_10041B068((uint64_t)v19, v54, type metadata accessor for CVBundle);
    *(_DWORD *)(v54 + v68) = v38;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v54, 0, 1, v36);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v70 = v84;
    *(&v80 - 2) = v84;
    *(&v80 - 1) = v54;
    aBlock[0] = v70;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_10000FBD8(v54, &qword_10051B760);
    sub_10041B008((uint64_t)v19, type metadata accessor for CVBundle);
    sub_10000FBD8(v53, &qword_10051B760);
    uint64_t v51 = (uint64_t)v52;
    goto LABEL_21;
  }
  sub_10000FBD8((uint64_t)v27, &qword_10051B760);
  sub_10000FB74((uint64_t)v33, (uint64_t)v22, &qword_10051B760);
  if (v37(v22, 1, v36) == 1)
  {
    sub_10000FBD8((uint64_t)v22, &qword_10051B760);
LABEL_10:
    sub_10000FBD8((uint64_t)v91, &qword_10051B760);
    uint64_t v51 = (uint64_t)v33;
LABEL_21:
    sub_10000FBD8(v51, &qword_10051B760);
    return;
  }
  uint64_t v47 = v82;
  sub_10041AE78((uint64_t)v22, v82, type metadata accessor for CVBundle);
  uint64_t v48 = v84;
  sub_10041AE78(v47, v84, type metadata accessor for CVBundle);
  uint64_t v49 = sub_1001A365C()[2];
  swift_bridgeObjectRelease();
  if (!v49
    || (uint64_t v50 = OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer,
        *(void *)(v2 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer)))
  {
    sub_10041B008(v48, type metadata accessor for CVBundle);
    goto LABEL_10;
  }
  uint64_t v55 = v2;
  if (sub_1004106D4() <= 0.0)
  {
    uint64_t v71 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v90, 1, 1, v36);
    uint64_t v72 = swift_getKeyPath();
    __chkstk_darwin(v72);
    *(&v80 - 2) = v2;
    *(&v80 - 1) = v71;
    aBlock[0] = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_10000FBD8(v71, &qword_10051B760);
    [*(id *)(v2 + v50) invalidate];
    sub_10041B008(v48, type metadata accessor for CVBundle);
    sub_10000FBD8((uint64_t)v91, &qword_10051B760);
    sub_10000FBD8((uint64_t)v33, &qword_10051B760);
    uint64_t v73 = *(void **)(v2 + v50);
    *(void *)(v2 + v50) = 0;
  }
  else
  {
    uint64_t v56 = v80;
    sub_10041B068(v48, v80, type metadata accessor for CVBundle);
    uint64_t v57 = (uint64_t)v81;
    sub_10041B068(v48, (uint64_t)v81, type metadata accessor for CVBundle);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.info.getter();
    int v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v90 = (char *)swift_slowAlloc();
      aBlock[0] = (uint64_t)v90;
      *(_DWORD *)uint64_t v61 = 134218242;
      LODWORD(v89) = v60;
      double v92 = sub_1004106D4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10041B008(v56, type metadata accessor for CVBundle);
      *(_WORD *)(v61 + 12) = 2080;
      uint64_t v88 = v61 + 14;
      sub_1001A365C();
      uint64_t v62 = v33;
      uint64_t v63 = Array.description.getter();
      unint64_t v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v66 = v63;
      long long v33 = v62;
      double v92 = COERCE_DOUBLE(sub_1003806B0(v66, v65, aBlock));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v48 = v84;
      sub_10041B008((uint64_t)v81, type metadata accessor for CVBundle);
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v89, "Set disappearance timer for %f s %s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10041B008(v56, type metadata accessor for CVBundle);
      sub_10041B008(v57, type metadata accessor for CVBundle);
    }
    uint64_t v74 = self;
    double v75 = sub_1004106D4();
    uint64_t v76 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = (uint64_t)sub_10041AF30;
    aBlock[5] = v76;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100135C58;
    aBlock[3] = (uint64_t)&unk_1004F8F58;
    uint64_t v77 = _Block_copy(aBlock);
    swift_release();
    id v78 = [v74 scheduledTimerWithTimeInterval:0 repeats:v77 block:v75];
    _Block_release(v77);
    sub_10041B008(v48, type metadata accessor for CVBundle);
    sub_10000FBD8((uint64_t)v91, &qword_10051B760);
    sub_10000FBD8((uint64_t)v33, &qword_10051B760);
    uint64_t v79 = *(void **)(v55 + v50);
    *(void *)(v55 + v50) = v78;
  }
}

double sub_1004106D4()
{
  uint64_t v0 = sub_1001A365C();
  uint64_t v1 = v0;
  uint64_t v2 = v0[2];
  if (v2)
  {
    uint64_t v3 = v0[4];
    uint64_t v4 = v0[5];
    uint64_t v6 = v0[6];
    uint64_t v5 = v0[7];
    unsigned __int8 v7 = *((unsigned char *)v0 + 64);
    uint64_t v8 = v2 - 1;
    uint64_t v25 = v6;
    uint64_t v26 = v4;
    if (v2 == 1)
    {
      sub_10004E998(v3, v4, v6, v5, v7);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_10004E998(v3, v4, v6, v5, v7);
      uint64_t v9 = (unsigned __int8 *)(v1 + 13);
      do
      {
        uint64_t v10 = *((void *)v9 - 4);
        uint64_t v11 = *((void *)v9 - 3);
        uint64_t v12 = *((void *)v9 - 2);
        uint64_t v13 = *((void *)v9 - 1);
        unsigned int v15 = *v9;
        v9 += 40;
        uint64_t v14 = v15;
        unint64_t v16 = 700;
        switch(v7)
        {
          case 1u:
            unint64_t v16 = 900;
            break;
          case 2u:
            unint64_t v16 = 800;
            break;
          case 3u:
            if (v25 | v26 | v3 | v5)
            {
              uint64_t v17 = v25 | v26 | v5;
              if (v3 != 1 || v17)
              {
                if (v3 != 2 || v17)
                {
                  if (v3 != 3 || v17)
                  {
                    if (v17) {
                      BOOL v18 = 0;
                    }
                    else {
                      BOOL v18 = v3 == 4;
                    }
                    unint64_t v16 = 100;
                    if (v18) {
                      unint64_t v16 = 850;
                    }
                  }
                  else
                  {
                    unint64_t v16 = 400;
                  }
                }
                else
                {
                  unint64_t v16 = 350;
                }
              }
              else
              {
                unint64_t v16 = 600;
              }
            }
            else
            {
              unint64_t v16 = 1000;
            }
            break;
          default:
            break;
        }
        unint64_t v19 = 700;
        switch(v14)
        {
          case 1:
            if (v16 < 0x384) {
              goto LABEL_48;
            }
            break;
          case 2:
            if (v16 < 0x320) {
              goto LABEL_48;
            }
            break;
          case 3:
            if (v12 | v11 | v10 | v13)
            {
              uint64_t v20 = v12 | v11 | v13;
              if (v10 == 1 && v20 == 0)
              {
                if (v16 < 0x258) {
                  goto LABEL_48;
                }
              }
              else if (v10 != 2 || v20)
              {
                if (v10 == 3 && !v20)
                {
                  unint64_t v19 = 400;
                  goto LABEL_47;
                }
                if (v20) {
                  BOOL v22 = 0;
                }
                else {
                  BOOL v22 = v10 == 4;
                }
                unint64_t v23 = 100;
                if (v22) {
                  unint64_t v23 = 850;
                }
                if (v16 < v23) {
                  goto LABEL_48;
                }
              }
              else if (v16 < 0x15E)
              {
                goto LABEL_48;
              }
            }
            else if (v16 < 0x3E8)
            {
              goto LABEL_48;
            }
            break;
          default:
LABEL_47:
            if (v16 < v19)
            {
LABEL_48:
              sub_10004E998(v10, v11, v12, v13, v14);
              sub_10004EA10(v3, v26, v25, v5, v7);
              uint64_t v3 = v10;
              uint64_t v25 = v12;
              uint64_t v26 = v11;
              uint64_t v5 = v13;
              unsigned __int8 v7 = v14;
            }
            break;
        }
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (v7 == 1)
    {
      sub_10004EA10(v3, v26, v25, v5, 1u);
      return 4.0;
    }
    sub_10004EA10(v3, v26, v25, v5, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0.45;
}

uint64_t sub_1004109E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  void v8[3] = &protocol witness table for MainActor;
  _OWORD v8[4] = a2;
  sub_100064D5C((uint64_t)v5, (uint64_t)&unk_10052EE28, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_100410AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  sub_10000F214(&qword_10051B760);
  v4[7] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[8] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100410BC0, v6, v5);
}

uint64_t sub_100410BC0()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[7];
    uint64_t v4 = sub_10000F214(&qword_10051A060);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
    swift_getKeyPath();
    uint64_t v5 = swift_task_alloc();
    *(void *)(v5 + 16) = v2;
    *(void *)(v5 + 24) = v3;
    v0[5] = v2;
    sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    sub_10000FBD8(v3, &qword_10051B760);
    uint64_t v6 = OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer;
    [*(id *)(v2 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer) invalidate];
    uint64_t v7 = *(void **)(v2 + v6);
    *(void *)(v2 + v6) = 0;

    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fired disappearance timer", v10, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100410E1C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100410EC8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale16CameraController__bundles);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100410F7C()
{
  return swift_release();
}

uint64_t sub_10041105C()
{
  swift_getKeyPath();
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  sub_1000BBF50(v1, *(void *)(v0 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  return v1;
}

uint64_t sub_100411128@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC6Tamale16CameraController__runState;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale16CameraController__runState);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(a2 + 16) = v7;
  return sub_1000BBF50(v5, v6, v7);
}

uint64_t sub_1004111E8(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_getKeyPath();
  sub_1000BBF50(v1, v2, v3);
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_1000BC2F4(v1, v2, v3);
  return swift_release();
}

NSObject *sub_1004112E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v74 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000F214(&qword_10052EE30);
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  __chkstk_darwin(v6);
  uint64_t v67 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(qword_10051FDA0);
  uint64_t v77 = *(void *)(v8 - 8);
  uint64_t v78 = v8;
  __chkstk_darwin(v8);
  uint64_t v76 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000F214(&qword_10052A4C0);
  uint64_t v72 = *(void *)(v10 - 8);
  uint64_t v73 = v10;
  __chkstk_darwin(v10);
  uint64_t v70 = v11;
  uint64_t v71 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v75 = (char *)&v61 - v13;
  uint64_t v14 = (uint64_t (*)(void))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v65 = *((void *)v14 - 1);
  uint64_t v66 = v14;
  __chkstk_darwin(v14);
  unint64_t v64 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v16);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v18);
  uint64_t v62 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  BOOL v22 = (char *)&v61 - v21;
  uint64_t v23 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_logger;
  if (qword_100517E18 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_10000F378(v24, (uint64_t)qword_10055E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v25, v24);
  uint64_t v26 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_signposter;
  if (qword_100517F28 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for LoggingSignposter(0);
  uint64_t v28 = sub_10000F378(v27, (uint64_t)qword_10055E398);
  sub_10041B068(v28, v26, type metadata accessor for LoggingSignposter);
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__bundles) = _swiftEmptyArrayStorage;
  uint64_t v29 = v1 + OBJC_IVAR____TtC6Tamale16CameraController__runState;
  *(void *)uint64_t v29 = 0;
  *(void *)(v29 + 8) = 0;
  *(unsigned char *)(v29 + 16) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_runStateWaiters) = _swiftEmptyArrayStorage;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_bundleReadingTask) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_stateReadingTask) = 0;
  uint64_t v30 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime;
  *(void *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + 8) = 1;
  uint64_t v31 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime;
  *(void *)uint64_t v31 = 0;
  *(unsigned char *)(v31 + 8) = 1;
  uint64_t v32 = v1 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore;
  uint64_t v33 = sub_10000F214(&qword_10051A060);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  ObservationRegistrar.init()();
  sub_10041B068(a1, v1 + OBJC_IVAR____TtC6Tamale16CameraController__configuration, type metadata accessor for CameraControllerConfiguration);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_sourceType) = *(unsigned char *)(a1 + *(int *)(v18 + 44));
  sub_10041B068(a1, (uint64_t)v22, type metadata accessor for CameraControllerConfiguration);
  type metadata accessor for Camera();
  uint64_t v34 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  unint64_t result = sub_10041B0D0();
  uint64_t v63 = a1;
  uint64_t v61 = v22;
  if (result)
  {
    uint64_t v36 = result;
    dispatch_workloop_set_scheduler_priority();
    sub_10002E8B0();
    uint64_t v37 = v36;
    static DispatchQoS.unspecified.getter();
    uint64_t v79 = _swiftEmptyArrayStorage;
    sub_10041B100((unint64_t *)&unk_10051FB60, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10000F214(&qword_100521000);
    sub_10041B148();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t (*)(uint64_t)))(v65 + 104))(v64, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v66);
    int v38 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    dispatch_activate(v37);

    v34[16] = 0;
    v34[17] = 0;
    v34[15] = v38;
    uint64_t v40 = (uint64_t)v61;
    uint64_t v39 = v62;
    sub_10041B068((uint64_t)v61, v62, type metadata accessor for CameraControllerConfiguration);
    unint64_t v41 = sub_10034EE2C(v39, v38);
    uint64_t v66 = type metadata accessor for CameraControllerConfiguration;
    sub_10041B008(v40, type metadata accessor for CameraControllerConfiguration);
    v34[14] = v41;
    *(void *)(v2 + 16) = v34;
    id v43 = v67;
    uint64_t v42 = v68;
    uint64_t v44 = v69;
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v69);
    unint64_t v45 = v76;
    static AsyncStream.makeStream(of:bufferingPolicy:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 16))(v2 + OBJC_IVAR____TtC6Tamale16CameraController_cameraCommandContinuation, v45, v78);
    uint64_t v46 = type metadata accessor for TaskPriority();
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56);
    uint64_t v48 = (uint64_t)v74;
    v47(v74, 1, 1, v46);
    uint64_t v49 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v50 = static MainActor.shared.getter();
    uint64_t v51 = (void *)swift_allocObject();
    v51[2] = v50;
    v51[3] = &protocol witness table for MainActor;
    v51[4] = v49;
    swift_release();
    *(void *)(v2 + OBJC_IVAR____TtC6Tamale16CameraController_bundleReadingTask) = sub_100064D5C(v48, (uint64_t)&unk_10052EE40, (uint64_t)v51);
    swift_release();
    v47((char *)v48, 1, 1, v46);
    uint64_t v52 = swift_allocObject();
    swift_weakInit();
    uint64_t v54 = v71;
    uint64_t v53 = v72;
    uint64_t v55 = v75;
    uint64_t v56 = v73;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v75, v73);
    swift_retain();
    uint64_t v57 = static MainActor.shared.getter();
    unint64_t v58 = (*(unsigned __int8 *)(v53 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    os_log_type_t v59 = (char *)swift_allocObject();
    *((void *)v59 + 2) = v57;
    *((void *)v59 + 3) = &protocol witness table for MainActor;
    *((void *)v59 + 4) = v52;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v59[v58], v54, v56);
    swift_release();
    uint64_t v60 = sub_100064D5C(v48, (uint64_t)&unk_10052EE50, (uint64_t)v59);
    sub_10041B008(v63, v66);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
    *(void *)(v2 + OBJC_IVAR____TtC6Tamale16CameraController_stateReadingTask) = v60;
    swift_release();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100411D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a4;
  v4[15] = *(void *)(type metadata accessor for CVBundle(0) - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  uint64_t v5 = sub_10000F214(&qword_10052EE60);
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v6 = sub_10000F214(&qword_10052A378);
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = type metadata accessor for MainActor();
  v4[26] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[27] = v8;
  v4[28] = v7;
  return _swift_task_switch(sub_100411F04, v8, v7);
}

uint64_t sub_100411F04()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v0[29] = *(void *)(Strong + 16);
    swift_retain();
    swift_release();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[30] = v2;
    void *v2 = v0;
    v2[1] = sub_100412054;
    uint64_t v3 = v0[23];
    return sub_10039AB08(v3);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100412054()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 224);
  uint64_t v3 = *(void *)(v1 + 216);
  return _swift_task_switch(sub_100412198, v3, v2);
}

uint64_t sub_100412198()
{
  (*(void (**)(void, void, void))(v0[22] + 32))(v0[24], v0[23], v0[21]);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  swift_beginAccess();
  v0[31] = 0;
  uint64_t v1 = static MainActor.shared.getter();
  v0[32] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[33] = v2;
  void *v2 = v0;
  v2[1] = sub_1004122DC;
  uint64_t v3 = v0[18];
  return AsyncStream.Iterator.next(isolation:)(v0 + 11, v1, &protocol witness table for MainActor, v3);
}

uint64_t sub_1004122DC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 224);
  uint64_t v3 = *(void *)(v1 + 216);
  return _swift_task_switch(sub_100412420, v3, v2);
}

uint64_t sub_100412420()
{
  uint64_t v1 = v0 + 11;
  uint64_t v2 = v0[11];
  if (v2)
  {
    if (swift_weakLoadStrong() && (char v3 = sub_100413608(v2), swift_release(), (v3 & 1) != 0)
      || (uint64_t Strong = swift_weakLoadStrong()) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = v0[31];
    }
    else
    {
      uint64_t v5 = Strong;
      int64_t v6 = *(void *)(v2 + 16);
      if (v6)
      {
        uint64_t v31 = Strong;
        uint64_t v7 = v0 + 12;
        uint64_t v8 = v0[15];
        v0[12] = _swiftEmptyArrayStorage;
        sub_100040BFC(0, v6, 0);
        unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
        uint64_t v10 = v2 + v9;
        uint64_t v11 = *(void *)(v8 + 72);
        uint64_t v12 = (void *)v0[12];
        do
        {
          uint64_t v14 = v0[16];
          uint64_t v13 = v0[17];
          sub_10041B068(v10, v14, type metadata accessor for CVBundle);
          sub_1001A2C98(v13, 0.0);
          sub_10041B008(v14, type metadata accessor for CVBundle);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100040BFC(0, v12[2] + 1, 1);
            uint64_t v12 = (void *)*v7;
          }
          unint64_t v16 = v12[2];
          unint64_t v15 = v12[3];
          if (v16 >= v15 >> 1)
          {
            sub_100040BFC(v15 > 1, v16 + 1, 1);
            uint64_t v12 = (void *)*v7;
          }
          uint64_t v17 = v0[17];
          v12[2] = v16 + 1;
          sub_10041AE78(v17, (uint64_t)v12 + v9 + v16 * v11, type metadata accessor for CVBundle);
          v10 += v11;
          --v6;
        }
        while (v6);
        swift_bridgeObjectRelease();
        uint64_t v5 = v31;
        uint64_t v1 = v0 + 11;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = _swiftEmptyArrayStorage;
      }
      uint64_t v26 = v0[31];
      swift_getKeyPath();
      uint64_t v27 = swift_task_alloc();
      *(void *)(v27 + 16) = v5;
      *(void *)(v27 + 24) = v12;
      v0[13] = v5;
      sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_task_dealloc();
    }
    v0[31] = v26;
    uint64_t v28 = static MainActor.shared.getter();
    v0[32] = v28;
    uint64_t v29 = (void *)swift_task_alloc();
    v0[33] = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_1004122DC;
    uint64_t v30 = v0[18];
    return AsyncStream.Iterator.next(isolation:)(v1, v28, &protocol witness table for MainActor, v30);
  }
  else
  {
    uint64_t v18 = v0[24];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[22];
    uint64_t v22 = v0[19];
    uint64_t v21 = v0[20];
    uint64_t v23 = v0[18];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_10041282C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  uint64_t v6 = sub_10000F214(&qword_10052EE58);
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  uint64_t v7 = sub_10000F214((uint64_t *)&unk_10051FB10);
  v5[26] = v7;
  v5[27] = *(void *)(v7 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = type metadata accessor for MainActor();
  v5[31] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[32] = v9;
  v5[33] = v8;
  return _swift_task_switch(sub_100412998, v9, v8);
}

uint64_t sub_100412998()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v0[34] = *(void *)(Strong + 16);
    swift_retain();
    swift_release();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[35] = v2;
    void *v2 = v0;
    v2[1] = sub_100412B7C;
    uint64_t v3 = v0[22];
    return sub_10039B520(v3);
  }
  else
  {
    swift_beginAccess();
    uint64_t v5 = swift_weakLoadStrong();
    if (v5)
    {
      v0[36] = *(void *)(v5 + 16);
      swift_retain();
      swift_release();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[37] = v6;
      void *v6 = v0;
      v6[1] = sub_100412DF0;
      uint64_t v7 = v0[28];
      return sub_10039ADE0(v7);
    }
    else
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v8 = (uint64_t (*)(void))v0[1];
      return v8();
    }
  }
}

uint64_t sub_100412B7C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 264);
  uint64_t v3 = *(void *)(v1 + 256);
  return _swift_task_switch(sub_100412CC0, v3, v2);
}

uint64_t sub_100412CC0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v0[36] = *(void *)(Strong + 16);
    swift_retain();
    swift_release();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[37] = v2;
    void *v2 = v0;
    v2[1] = sub_100412DF0;
    uint64_t v3 = v0[28];
    return sub_10039ADE0(v3);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100412DF0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 264);
  uint64_t v3 = *(void *)(v1 + 256);
  return _swift_task_switch(sub_100412F34, v3, v2);
}

uint64_t sub_100412F34()
{
  (*(void (**)(void, void, void))(v0[27] + 32))(v0[29], v0[28], v0[26]);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  v0[38] = 0;
  uint64_t v1 = static MainActor.shared.getter();
  v0[39] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[40] = v2;
  void *v2 = v0;
  v2[1] = sub_10041305C;
  uint64_t v3 = v0[23];
  return AsyncStream.Iterator.next(isolation:)(v0 + 17, v1, &protocol witness table for MainActor, v3);
}

uint64_t sub_10041305C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 264);
  uint64_t v3 = *(void *)(v1 + 256);
  return _swift_task_switch(sub_1004131A0, v3, v2);
}

uint64_t sub_1004131A0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  int v2 = *(unsigned __int8 *)(v0 + 152);
  if (v2 == 255)
  {
    swift_release();
LABEL_14:
    uint64_t v18 = *(void *)(v0 + 232);
    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 216);
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_release();
    sub_10041B434(v1, v3, v2);
    goto LABEL_14;
  }
  uint64_t v5 = Strong;
  uint64_t v26 = *(void *)(v0 + 304);
  swift_getKeyPath();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v1;
  *(void *)(v6 + 32) = v3;
  *(unsigned char *)(v6 + 40) = v2;
  *(void *)(v0 + 160) = v5;
  sub_1000BBF50(v1, v3, v2);
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  sub_10041B434(v1, v3, v2);
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (void **)(v5 + OBJC_IVAR____TtC6Tamale16CameraController_runStateWaiters);
  swift_beginAccess();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v1;
  *(void *)(v8 + 24) = v3;
  *(unsigned char *)(v8 + 32) = v2;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_10041A74C(v9, (uint64_t (*)(uint64_t, void, uint64_t))sub_10041B4B0);
  swift_bridgeObjectRelease();
  sub_10041B434(v1, v3, v2);
  swift_task_dealloc();
  uint64_t v11 = v10[2];
  if (v11)
  {
    swift_bridgeObjectRetain();
    while (v11 <= v10[2])
    {
      unint64_t v12 = v10[v11 + 3];
      swift_beginAccess();
      uint64_t v13 = *v7;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v7 = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v13 = sub_1003069B8(v13);
        void *v7 = v13;
      }
      unint64_t v15 = v13[2];
      if (v12 >= v15) {
        goto LABEL_18;
      }
      unint64_t v16 = v15 - 1;
      uint64_t v17 = v15 - 1 - v12;
      if (v17 < 0) {
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      --v11;
      memmove(&v13[2 * v12 + 4], &v13[2 * v12 + 6], 16 * v17);
      v13[2] = v16;
      void *v7 = v13;
      swift_endAccess();
      swift_release();
      if (!v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  else
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 304) = v26;
    uint64_t v23 = static MainActor.shared.getter();
    *(void *)(v0 + 312) = v23;
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 320) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_10041305C;
    uint64_t v25 = *(void *)(v0 + 184);
    return AsyncStream.Iterator.next(isolation:)(v0 + 136, v23, &protocol witness table for MainActor, v25);
  }
}

uint64_t sub_100413608(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime + 8) & 1) == 0)
  {
    double v4 = *(double *)v3;
    uint64_t v5 = swift_bridgeObjectRetain();
    double v6 = COERCE_DOUBLE(sub_100413998(v5));
    char v8 = v7;
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      if (v4 >= v6)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 134217984;
          uint64_t v25 = *(void *)(a1 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Boresight is suppressed by bundle timestamp. Skipping updates for %ld bundles.", v23, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        return 1;
      }
      *(void *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 8) = 1;
    }
  }
  uint64_t v9 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime + 8) & 1) == 0)
  {
    double v11 = *(double *)v9;
    double v12 = (double)clock_gettime_nsec_np(_CLOCK_UPTIME_RAW_APPROX) / 1000000000.0;
    if (v12 > v11)
    {
      uint64_t v10 = 0;
      *(void *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 8) = 1;
      return v10;
    }
    double v13 = v11 - v12;
    sub_10000F214(&qword_10051F350);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10043D4F0;
    *(void *)(v14 + 56) = &type metadata for Double;
    *(void *)(v14 + 64) = &protocol witness table for Double;
    *(double *)(v14 + 32) = v13;
    uint64_t v15 = String.init(format:_:)();
    unint64_t v17 = v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      sub_1003806B0(v15, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2048;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Boresight is suppressed by CPU timestamp for %s more seconds. Skipping updates for %ld bundles.", (uint8_t *)v20, 0x16u);
      uint64_t v10 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v10;
    }
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
    return 1;
  }
  return 0;
}

uint64_t sub_100413998(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CVDetection();
  __chkstk_darwin(v2);
  double v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v7 = (char *)v32 - v6;
  uint64_t v8 = type metadata accessor for CVBundle(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  double v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v35 = (double *)_swiftEmptyArrayStorage;
    sub_100040974(0, v12, 0);
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v14 = *(void *)(v9 + 72);
    do
    {
      sub_10041B068(v13, (uint64_t)v11, type metadata accessor for CVBundle);
      sub_10019D408((uint64_t)v7);
      sub_10041B068((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CVDetection);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v33 = type metadata accessor for ParseDetectorResult(0);
          uint64_t v15 = sub_10041B100(&qword_100519F98, (void (*)(uint64_t))type metadata accessor for ParseDetectorResult);
          unint64_t v16 = type metadata accessor for ParseDetectorResult;
          break;
        case 2u:
          uint64_t v33 = type metadata accessor for TextDetectorResult(0);
          uint64_t v15 = sub_10041B100((unint64_t *)&unk_1005298A0, (void (*)(uint64_t))type metadata accessor for TextDetectorResult);
          unint64_t v16 = type metadata accessor for TextDetectorResult;
          break;
        case 3u:
        case 4u:
          uint64_t v33 = type metadata accessor for StreamingBarcodeDetectorResult(0);
          uint64_t v15 = sub_10041B100(&qword_100519F90, (void (*)(uint64_t))type metadata accessor for StreamingBarcodeDetectorResult);
          unint64_t v16 = type metadata accessor for StreamingBarcodeDetectorResult;
          break;
        case 5u:
          uint64_t v33 = type metadata accessor for StreamingTextDetectorResult(0);
          uint64_t v15 = sub_10041B100((unint64_t *)&unk_100529890, (void (*)(uint64_t))type metadata accessor for StreamingTextDetectorResult);
          unint64_t v16 = type metadata accessor for StreamingTextDetectorResult;
          break;
        default:
          uint64_t v33 = type metadata accessor for ObjectDetectorResult(0);
          uint64_t v15 = sub_10041B100(&qword_1005298B0, (void (*)(uint64_t))type metadata accessor for ObjectDetectorResult);
          unint64_t v16 = type metadata accessor for ObjectDetectorResult;
          break;
      }
      unint64_t v17 = v16;
      uint64_t v34 = v15;
      uint64_t v18 = sub_100040120(v32);
      sub_10041AE78((uint64_t)v4, (uint64_t)v18, v17);
      uint64_t v20 = v33;
      uint64_t v19 = v34;
      sub_10000F3B0(v32, v33);
      double v21 = (*(double (**)(uint64_t, uint64_t))(v19 + 88))(v20, v19);
      _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)v32);
      sub_10041B008((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CVDetection);
      sub_10041B008((uint64_t)v11, type metadata accessor for CVBundle);
      os_log_type_t v22 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040974(0, *((void *)v22 + 2) + 1, 1);
        os_log_type_t v22 = v35;
      }
      unint64_t v24 = *((void *)v22 + 2);
      unint64_t v23 = *((void *)v22 + 3);
      unint64_t v25 = v24 + 1;
      if (v24 >= v23 >> 1)
      {
        sub_100040974(v23 > 1, v24 + 1, 1);
        os_log_type_t v22 = v35;
      }
      *((void *)v22 + 2) = v25;
      v22[v24 + 4] = v21;
      v13 += v14;
      --v12;
    }
    while (v12);
  }
  else
  {
    os_log_type_t v22 = (double *)_swiftEmptyArrayStorage;
    unint64_t v25 = _swiftEmptyArrayStorage[2];
    if (!v25)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  double v26 = v22[4];
  unint64_t v27 = v25 - 1;
  if (v25 != 1)
  {
    uint64_t v28 = v22 + 5;
    do
    {
      double v29 = *v28++;
      double v30 = v29;
      if (v26 < v29) {
        double v26 = v30;
      }
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  return *(void *)&v26;
}

uint64_t sub_100413E9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051FD98);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0 + OBJC_IVAR____TtC6Tamale16CameraController_logger;
  swift_retain_n();
  char v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v19 = v6;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_sourceType))
    {
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_sourceType) == 1)
      {
        uint64_t v10 = 0x7275747061435641;
        unint64_t v11 = 0xE900000000000065;
      }
      else
      {
        unint64_t v11 = 0xE900000000000072;
        uint64_t v10 = 0x6F74616C756D6953;
      }
    }
    else
    {
      unint64_t v11 = 0xE500000000000000;
      uint64_t v10 = 0x74694B5241;
    }
    uint64_t v20 = sub_1003806B0(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tearing down CameraController %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v19;
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_cameraCommandContinuation;
  uint64_t v21 = 2;
  uint64_t v13 = sub_10000F214(qword_10051FDA0);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release();
  sub_10041B008(v1 + OBJC_IVAR____TtC6Tamale16CameraController__configuration, type metadata accessor for CameraControllerConfiguration);
  uint64_t v14 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v6, v14);
  sub_10041B008(v1 + OBJC_IVAR____TtC6Tamale16CameraController_signposter, type metadata accessor for LoggingSignposter);

  swift_bridgeObjectRelease();
  sub_1000BC2F4(*(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__runState), *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 8), *(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10000FBD8(v1 + OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore, &qword_10051B760);
  uint64_t v15 = v1 + OBJC_IVAR____TtC6Tamale16CameraController___observationRegistrar;
  uint64_t v16 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  return v1;
}

uint64_t sub_1004142B8()
{
  sub_100413E9C();

  return swift_deallocClassInstance();
}

uint64_t sub_100414310()
{
  return type metadata accessor for CameraController();
}

uint64_t type metadata accessor for CameraController()
{
  uint64_t result = qword_10052EA90;
  if (!qword_10052EA90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100414364()
{
  type metadata accessor for CameraControllerConfiguration(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Logger();
    if (v1 <= 0x3F)
    {
      type metadata accessor for LoggingSignposter(319);
      if (v2 <= 0x3F)
      {
        sub_1004180B8();
        if (v3 <= 0x3F)
        {
          sub_100418110();
          if (v4 <= 0x3F)
          {
            type metadata accessor for ObservationRegistrar();
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100414568()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051FD98);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018B700("CameraController.start", 22, 2, 1);
  uint64_t v6 = v0 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime + 8) & 1) == 0)
  {
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Start is clearing boresight suppression state (Bundle time)", v9, 2u);
      swift_slowDealloc();
    }

    *(void *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 8) = 1;
  }
  uint64_t v10 = v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime + 8) & 1) == 0)
  {
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Start is clearing boresight suppression state (CPU time)", v13, 2u);
      swift_slowDealloc();
    }

    *(void *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 8) = 1;
  }
  sub_100414F48();
  v15[1] = 1;
  sub_10000F214(qword_10051FDA0);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1004147CC(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000F214(&qword_10051E070);
  v2[9] = swift_task_alloc();
  v2[10] = type metadata accessor for CameraControllerConfiguration(0);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[13] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[14] = v4;
  v2[15] = v3;
  return _swift_task_switch(sub_1004148D4, v4, v3);
}

uint64_t sub_1004148D4()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = (double *)v0[12];
  uint64_t v3 = (double *)v0[7];
  uint64_t v4 = v0[8];
  swift_getKeyPath();
  v0[5] = v4;
  v0[16] = OBJC_IVAR____TtC6Tamale16CameraController___observationRegistrar;
  v0[17] = sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v4 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
  swift_beginAccess();
  sub_10041B068(v5, (uint64_t)v2, type metadata accessor for CameraControllerConfiguration);
  BOOL v6 = sub_1000DA788(v3, v2);
  sub_10041B008((uint64_t)v2, type metadata accessor for CameraControllerConfiguration);
  sub_10041B068((uint64_t)v3, v1, type metadata accessor for CameraControllerConfiguration);
  uint64_t v7 = v0[11];
  if (v6)
  {
    uint64_t v8 = v0[9];
    sub_10000FB74(v7 + *(int *)(v0[10] + 72), v8, &qword_10051E070);
    sub_10041B008(v7, type metadata accessor for CameraControllerConfiguration);
    uint64_t v9 = type metadata accessor for URL();
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    sub_10000FBD8(v8, &qword_10051E070);
    if (v10 == 1)
    {
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
  }
  else
  {
    sub_10041B008(v0[11], type metadata accessor for CameraControllerConfiguration);
  }
  uint64_t v13 = v0[8];
  uint64_t v14 = v13 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  uint64_t v15 = v13 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime;
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  uint64_t v16 = *(void *)(v13 + 16);
  v0[18] = v16;
  return _swift_task_switch(sub_100414B9C, v16, 0);
}

uint64_t sub_100414B9C()
{
  uint64_t v1 = *(void *)(v0[18] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[19] = v2;
  void *v2 = v0;
  v2[1] = sub_100414C3C;
  uint64_t v3 = v0[7];
  return sub_1003458DC(v3, v1);
}

uint64_t sub_100414C3C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[18];
    uint64_t v4 = sub_100414EA4;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v3 = v2[14];
    uint64_t v5 = v2[15];
    uint64_t v4 = sub_100414D58;
  }
  return _swift_task_switch(v4, v3, v5);
}

uint64_t sub_100414D58()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  swift_release();
  sub_10041B068(v2, v1, type metadata accessor for CameraControllerConfiguration);
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  v0[6] = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_10041B008(v1, type metadata accessor for CameraControllerConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100414EA4()
{
  return _swift_task_switch(sub_100414EBC, *(void *)(v0 + 112), *(void *)(v0 + 120));
}

uint64_t sub_100414EBC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100414F48()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051B760);
  double v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer;
  [*(id *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer) invalidate:v3];
  uint64_t v7 = *(void **)(v1 + v6);
  *(void *)(v1 + v6) = 0;

  uint64_t v8 = sub_10000F214(&qword_10051A060);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  swift_getKeyPath();
  uint64_t v13 = v1;
  uint64_t v14 = v5;
  uint64_t v15 = v1;
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_10000FBD8((uint64_t)v5, &qword_10051B760);
  swift_getKeyPath();
  uint64_t v11 = v1;
  os_log_type_t v12 = _swiftEmptyArrayStorage;
  uint64_t v15 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t sub_10041513C(char a1, double a2)
{
  uint64_t v3 = v2;
  double v6 = (double)clock_gettime_nsec_np(_CLOCK_UPTIME_RAW_APPROX) / 1000000000.0 + a2;
  uint64_t v7 = v2 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilCpuTime + 8) & 1) == 0
    && v6 <= *(double *)v7)
  {
    double v6 = *(double *)v7;
  }
  *(double *)uint64_t v7 = v6;
  *(unsigned char *)(v7 + 8) = 0;
  swift_getKeyPath();
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = swift_bridgeObjectRetain();
  double v9 = COERCE_DOUBLE(sub_100413998(v8));
  char v11 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    if (a1) {
      sub_100414F48();
    }
    sub_10010C1AC();
    swift_allocError();
    *uint64_t v15 = 3;
    return swift_willThrow();
  }
  else
  {
    double v13 = v9 + a2;
    uint64_t v14 = v3 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime;
    if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC6Tamale16CameraController_boresightSuppressedUntilBundleTime + 8) & 1) == 0
      && v13 <= *(double *)v14)
    {
      double v13 = *(double *)v14;
    }
    *(double *)uint64_t v14 = v13;
    *(unsigned char *)(v14 + 8) = 0;
    if (a1) {
      return sub_100414F48();
    }
  }
  return result;
}

uint64_t sub_1004152E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000F214(&qword_10051FD98);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v10 = v0;
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) == 1)
  {
    sub_10018B700("CameraController.pause", 22, 2, 1);
    uint64_t v7 = OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer;
    [*(id *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer) invalidate];
    uint64_t v8 = *(void **)(v1 + v7);
    *(void *)(v1 + v7) = 0;

    sub_10041513C(0, 1.5);
    uint64_t v10 = 3;
    sub_10000F214(qword_10051FDA0);
    AsyncStream.Continuation.yield(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_1004154C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1004154F8(&OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore, (uint64_t)&qword_10051B760, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000FB74, a1);
}

uint64_t sub_1004154F8@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  swift_getKeyPath();
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = v4 + *a1;
  swift_beginAccess();
  return a3(v9, a4, a2);
}

uint64_t sub_1004155DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10041560C(a1, &OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore, (uint64_t)&qword_10051B760, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000FB74, a2);
}

uint64_t sub_10041560C@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, uint64_t a3@<X5>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  swift_getKeyPath();
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v10 = v9 + *a2;
  swift_beginAccess();
  return a4(v10, a5, a3);
}

uint64_t sub_1004156F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v4 - 8);
  double v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000FB74(a1, (uint64_t)v6, &qword_10051B760);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  char v11 = v6;
  uint64_t v12 = v7;
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000FBD8((uint64_t)v6, &qword_10051B760);
}

uint64_t sub_100415834(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = a1 + *a3;
  swift_beginAccess();
  a4(a2, v6);
  return swift_endAccess();
}

uint64_t sub_1004158A4@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  int v190 = a2;
  uint64_t v205 = a1;
  uint64_t v215 = a3;
  uint64_t v5 = type metadata accessor for CVTrackSnapshot(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v213 = (uint64_t)&v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v220);
  uint64_t v209 = (uint64_t)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v208 = (uint64_t)&v179 - v9;
  __chkstk_darwin(v10);
  unint64_t v195 = (char *)&v179 - v11;
  __chkstk_darwin(v12);
  uint64_t v196 = (uint64_t *)((char *)&v179 - v13);
  uint64_t v216 = type metadata accessor for UUID();
  uint64_t v198 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  v207 = (char *)&v179 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v206 = (char *)&v179 - v16;
  __chkstk_darwin(v17);
  uint64_t v210 = (char *)&v179 - v18;
  __chkstk_darwin(v19);
  v219 = (char *)&v179 - v20;
  __chkstk_darwin(v21);
  uint64_t v193 = (char *)&v179 - v22;
  __chkstk_darwin(v23);
  uint64_t v194 = (char *)&v179 - v24;
  __chkstk_darwin(v25);
  uint64_t v192 = (char *)&v179 - v26;
  __chkstk_darwin(v27);
  uint64_t v200 = (char *)&v179 - v28;
  uint64_t v29 = type metadata accessor for CVDetection();
  __chkstk_darwin(v29 - 8);
  uint64_t v202 = (uint64_t)&v179 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v201 = (void (**)(char *, uint64_t, uint64_t))((char *)&v179 - v32);
  uint64_t v33 = sub_10000F214(&qword_10051B760);
  __chkstk_darwin(v33 - 8);
  uint64_t v191 = (uint64_t)&v179 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v179 - v36;
  uint64_t v38 = sub_10000F214(&qword_10051A060);
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v188 = (uint64_t)&v179 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v218 = (uint64_t)&v179 - v42;
  __chkstk_darwin(v43);
  uint64_t v217 = (uint64_t)&v179 - v44;
  __chkstk_darwin(v45);
  uint64_t v211 = (uint64_t)&v179 - v46;
  __chkstk_darwin(v47);
  uint64_t v212 = (uint64_t)&v179 - v48;
  __chkstk_darwin(v49);
  uint64_t v189 = (uint64_t)&v179 - v50;
  __chkstk_darwin(v51);
  uint64_t v199 = (uint64_t)&v179 - v52;
  __chkstk_darwin(v53);
  uint64_t v203 = (uint64_t)&v179 - v54;
  __chkstk_darwin(v55);
  uint64_t v204 = (uint64_t)&v179 - v56;
  __chkstk_darwin(v57);
  os_log_type_t v59 = (char *)&v179 - v58;
  uint64_t v60 = type metadata accessor for CVBundle(0);
  __chkstk_darwin(v60 - 8);
  uint64_t v62 = (char *)&v179 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for CameraControllerConfiguration(0);
  __chkstk_darwin(v63 - 8);
  uint64_t v65 = (unsigned __int8 *)&v179 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v66 = swift_bridgeObjectRetain();
  uint64_t v67 = sub_10041A8C0(v66, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  uint64_t v68 = v3 + OBJC_IVAR____TtC6Tamale16CameraController___observationRegistrar;
  uint64_t v221 = v4;
  uint64_t v186 = sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  uint64_t v187 = v68;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v197 = v4;
  uint64_t v69 = v4 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
  swift_beginAccess();
  sub_10041B068(v69, (uint64_t)v65, type metadata accessor for CameraControllerConfiguration);
  v70.n128_u64[0] = *((void *)v65 + 1);
  v71.n128_u64[0] = *((void *)v65 + 2);
  uint64_t v72 = sub_100418BDC((uint64_t)v67, 0, 0, 1, *v65, v70, v71);
  swift_bridgeObjectRelease();
  sub_10041B008((uint64_t)v65, type metadata accessor for CameraControllerConfiguration);
  if (!v72[2])
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v215, 1, 1, v38);
  }
  uint64_t v73 = (uint64_t)v72 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
  sub_10000FB74(v73, (uint64_t)v59, &qword_10051A060);
  float v74 = *(float *)&v59[*(int *)(v38 + 48)];
  sub_10041AE78((uint64_t)v59, (uint64_t)v62, type metadata accessor for CVBundle);
  sub_10000FB74(v205, (uint64_t)v37, &qword_10051B760);
  double v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  int v76 = v75(v37, 1, v38);
  uint64_t v77 = v38;
  uint64_t v78 = v39;
  if (v76 == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000FBD8((uint64_t)v37, &qword_10051B760);
    uint64_t v79 = *(int *)(v77 + 48);
    uint64_t v80 = v215;
    sub_10041AE78((uint64_t)v62, v215, type metadata accessor for CVBundle);
    *(float *)(v80 + v79) = v74;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v77);
  }
  uint64_t v183 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
  uint64_t v184 = v39 + 48;
  char v185 = v72;
  uint64_t v181 = (unsigned char *)v69;
  uint64_t v82 = *(int *)(v77 + 48);
  uint64_t v83 = v204;
  sub_10041AE78((uint64_t)v37, v204, type metadata accessor for CVBundle);
  int v84 = *(_DWORD *)&v37[v82];
  *(_DWORD *)(v83 + v82) = v84;
  uint64_t v85 = *(int *)(v77 + 48);
  uint64_t v86 = v203;
  sub_10041B068(v83, v203, type metadata accessor for CVBundle);
  *(_DWORD *)(v86 + v85) = v84;
  uint64_t v87 = v201;
  sub_10019D408((uint64_t)v201);
  sub_10041B008(v86, type metadata accessor for CVBundle);
  sub_1003FEC34(&v221);
  uint64_t v88 = v222;
  uint64_t v89 = v223;
  sub_10000F3B0(&v221, v222);
  double v90 = (*(double (**)(uint64_t, uint64_t))(v89 + 88))(v88, v89);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v221);
  sub_10041B008((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for CVDetection);
  uint64_t v91 = v202;
  sub_10019D408(v202);
  sub_1003FEC34(&v221);
  uint64_t v92 = v222;
  uint64_t v93 = v223;
  sub_10000F3B0(&v221, v222);
  double v94 = (*(double (**)(uint64_t, uint64_t))(v93 + 88))(v92, v93);
  _s6Tamale17AnyLocalizedErrorVwxx_0((uint64_t)&v221);
  sub_10041B008(v91, (uint64_t (*)(void))type metadata accessor for CVDetection);
  if (v90 > v94)
  {
    swift_bridgeObjectRelease();
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Best candidate should be newer than current sample.", v97, 2u);
      swift_slowDealloc();
    }

    sub_10041B008((uint64_t)v62, type metadata accessor for CVBundle);
    uint64_t v98 = *(int *)(v77 + 48);
    uint64_t v80 = v215;
    sub_10041AE78(v83, v215, type metadata accessor for CVBundle);
    *(_DWORD *)(v80 + v98) = v84;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v77);
  }
  uint64_t v99 = v198;
  uint64_t v100 = (uint64_t)v196;
  sub_10041B068((uint64_t)v62, (uint64_t)v196, type metadata accessor for CVBundle.BundleType);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v180 = v62;
  uint64_t v205 = v99;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 32);
    char v103 = v192;
    uint64_t v104 = v216;
    v102(v192, v100, v216);
    uint64_t v105 = v103;
  }
  else
  {
    uint64_t v106 = v100;
    uint64_t v107 = v213;
    sub_10041AE78(v106, v213, type metadata accessor for CVTrackSnapshot);
    uint64_t v108 = v192;
    uint64_t v104 = v216;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v192, v107, v216);
    sub_10041B008(v107, type metadata accessor for CVTrackSnapshot);
    uint64_t v105 = v108;
    uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 32);
  }
  int v109 = v210;
  uint64_t v110 = (uint64_t)v195;
  v102(v200, (uint64_t)v105, v104);
  uint64_t v111 = *(int *)(v77 + 48);
  uint64_t v112 = v83;
  uint64_t v113 = v199;
  sub_10041B068(v112, v199, type metadata accessor for CVBundle);
  *(_DWORD *)(v113 + v111) = v84;
  sub_10041B068(v113, v110, type metadata accessor for CVBundle.BundleType);
  int v114 = swift_getEnumCaseMultiPayload();
  uint64_t v182 = v78;
  uint64_t v214 = v77;
  if (v114 == 1)
  {
    char v115 = v193;
    v102(v193, v110, v104);
    uint64_t v116 = v211;
    char v117 = v194;
    uint64_t v118 = (uint64_t *)v102;
    uint64_t v119 = v205;
  }
  else
  {
    uint64_t v120 = v213;
    sub_10041AE78(v110, v213, type metadata accessor for CVTrackSnapshot);
    uint64_t v118 = (uint64_t *)v102;
    uint64_t v119 = v205;
    char v115 = v193;
    (*(void (**)(char *, uint64_t, uint64_t))(v205 + 16))(v193, v120, v104);
    sub_10041B008(v120, type metadata accessor for CVTrackSnapshot);
    uint64_t v116 = v211;
    char v117 = v194;
  }
  uint64_t v196 = v118;
  ((void (*)(char *, char *, uint64_t))v118)(v117, v115, v104);
  sub_10041B008(v199, type metadata accessor for CVBundle);
  sub_10041B100(&qword_100521678, (void (*)(uint64_t))&type metadata accessor for UUID);
  CGRect v121 = v200;
  char v122 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v123 = v216;
  char v124 = v122;
  CGRect v127 = *(void (**)(char *, uint64_t))(v119 + 8);
  uint64_t v125 = v119 + 8;
  char v126 = v127;
  v127(v117, v216);
  v127(v121, v123);
  if (v124)
  {
    swift_bridgeObjectRelease();
    uint64_t v129 = v214;
    uint64_t v128 = v215;
    uint64_t v130 = v182;
    uint64_t v131 = (uint64_t)v180;
    uint64_t v132 = v204;
    uint64_t v133 = v203;
LABEL_33:
    uint64_t v162 = *(int *)(v129 + 48);
    sub_10041AE78(v132, v133, type metadata accessor for CVBundle);
    *(_DWORD *)(v133 + v162) = v84;
    sub_10000FBD8(v133, &qword_10051A060);
    uint64_t v163 = *(int *)(v129 + 48);
    sub_10041AE78(v131, v128, type metadata accessor for CVBundle);
    *(float *)(v128 + v163) = v74;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v130 + 56))(v128, 0, 1, v129);
  }
  uint64_t v134 = (uint64_t)v196;
  uint64_t v205 = v125;
  uint64_t v135 = *(int *)(v214 + 48);
  uint64_t v136 = v212;
  sub_10041B068(v204, v212, type metadata accessor for CVBundle);
  uint64_t v202 = v135;
  *(_DWORD *)(v136 + v135) = v84;
  uint64_t v137 = v185[2];
  if (v137)
  {
    v201 = (void (**)(char *, uint64_t, uint64_t))(v198 + 16);
    uint64_t v200 = *(char **)(v182 + 72);
    swift_bridgeObjectRetain();
    char v138 = &qword_10051A060;
    uint64_t v139 = (void (*)(char *, uint64_t, uint64_t))v134;
    while (1)
    {
      uint64_t v140 = v138;
      sub_10000FB74(v73, v116, v138);
      uint64_t v141 = *(int *)(v214 + 48);
      uint64_t v142 = v217;
      sub_10041B068(v116, v217, type metadata accessor for CVBundle);
      *(_DWORD *)(v142 + v141) = *(_DWORD *)(v116 + v141);
      uint64_t v143 = v208;
      sub_10041B068(v142, v208, type metadata accessor for CVBundle.BundleType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v144 = v216;
        v139(v109, v143, v216);
      }
      else
      {
        uint64_t v145 = v143;
        uint64_t v146 = v213;
        sub_10041AE78(v145, v213, type metadata accessor for CVTrackSnapshot);
        uint64_t v144 = v216;
        (*v201)(v109, v146, v216);
        sub_10041B008(v146, type metadata accessor for CVTrackSnapshot);
      }
      v139(v219, (uint64_t)v109, v144);
      sub_10041B008(v217, type metadata accessor for CVBundle);
      uint64_t v147 = *(int *)(v214 + 48);
      uint64_t v148 = v212;
      uint64_t v149 = v218;
      sub_10041B068(v212, v218, type metadata accessor for CVBundle);
      *(_DWORD *)(v149 + v147) = *(_DWORD *)(v148 + v202);
      uint64_t v150 = v209;
      sub_10041B068(v149, v209, type metadata accessor for CVBundle.BundleType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v151 = v207;
        v139(v207, v150, v144);
      }
      else
      {
        uint64_t v152 = v150;
        uint64_t v153 = v213;
        sub_10041AE78(v152, v213, type metadata accessor for CVTrackSnapshot);
        uint64_t v151 = v207;
        (*v201)(v207, v153, v144);
        sub_10041B008(v153, type metadata accessor for CVTrackSnapshot);
      }
      uint64_t v154 = v206;
      v139(v206, (uint64_t)v151, v144);
      sub_10041B008(v218, type metadata accessor for CVBundle);
      unint64_t v155 = v219;
      char v156 = static UUID.== infix(_:_:)();
      v126(v154, v144);
      v126(v155, v144);
      if (v156) {
        break;
      }
      uint64_t v116 = v211;
      char v138 = v140;
      sub_10000FBD8(v211, v140);
      v73 += (uint64_t)v200;
      --v137;
      int v109 = v210;
      if (!v137)
      {
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v158 = v191;
    sub_10041ACB8(v211, v191);
    uint64_t v130 = v182;
    uint64_t v157 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56);
    uint64_t v159 = v158;
    uint64_t v160 = 0;
  }
  else
  {
LABEL_29:
    uint64_t v130 = v182;
    uint64_t v157 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56);
    uint64_t v158 = v191;
    uint64_t v159 = v191;
    uint64_t v160 = 1;
  }
  uint64_t v129 = v214;
  v157(v159, v160, 1, v214);
  sub_10000FBD8(v212, &qword_10051A060);
  swift_bridgeObjectRelease();
  int v161 = v183(v158, 1, v129);
  uint64_t v131 = (uint64_t)v180;
  uint64_t v132 = v204;
  uint64_t v133 = v203;
  if (v161 == 1)
  {
    sub_10000FBD8(v158, &qword_10051B760);
    uint64_t v128 = v215;
    goto LABEL_33;
  }
  uint64_t v164 = *(int *)(v129 + 48);
  uint64_t v165 = v189;
  sub_10041AE78(v158, v189, type metadata accessor for CVBundle);
  float v166 = *(float *)(v158 + v164);
  *(float *)(v165 + v164) = v166;
  if (v190)
  {
    swift_getKeyPath();
    uint64_t v221 = v197;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*v181) {
      int v167 = 1031127695;
    }
    else {
      int v167 = 1036831949;
    }
    float v168 = *(float *)&v167;
  }
  else
  {
    float v168 = 0.0;
  }
  if ((float)(v166 + v168) >= v74)
  {
    sub_10041B008(v131, type metadata accessor for CVBundle);
    uint64_t v173 = *(int *)(v129 + 48);
    sub_10041AE78(v132, v133, type metadata accessor for CVBundle);
    *(_DWORD *)(v133 + v173) = v84;
    sub_10000FBD8(v133, &qword_10051A060);
    uint64_t v174 = *(int *)(v129 + 48);
    uint64_t v175 = v165;
    uint64_t v176 = v165;
    uint64_t v177 = v188;
    sub_10041B068(v175, v188, type metadata accessor for CVBundle);
    *(float *)(v177 + v174) = v166;
    sub_10000FBD8(v177, &qword_10051A060);
    uint64_t v178 = *(int *)(v129 + 48);
    uint64_t v172 = v215;
    sub_10041AE78(v176, v215, type metadata accessor for CVBundle);
    *(float *)(v172 + v178) = v166;
  }
  else
  {
    sub_10000FBD8(v165, &qword_10051A060);
    uint64_t v169 = v131;
    uint64_t v170 = *(int *)(v129 + 48);
    sub_10041AE78(v132, v133, type metadata accessor for CVBundle);
    *(_DWORD *)(v133 + v170) = v84;
    sub_10000FBD8(v133, &qword_10051A060);
    uint64_t v171 = *(int *)(v129 + 48);
    uint64_t v172 = v215;
    sub_10041AE78(v169, v215, type metadata accessor for CVBundle);
    *(float *)(v172 + v171) = v74;
  }
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v157)(v172, 0, 1, v129);
}

uint64_t sub_100416E20()
{
  v0[12] = type metadata accessor for MainActor();
  v0[13] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100416EE0;
  return sub_100417A1C((uint64_t)(v0 + 7));
}

uint64_t sub_100416EE0()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v2;
    uint64_t v4 = sub_10041728C;
  }
  else
  {
    uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v3 = v5;
    uint64_t v4 = sub_100417064;
  }
  return _swift_task_switch(v4, v1, v3);
}

uint64_t sub_100417064()
{
  swift_release();
  sub_1000321A8((long long *)(v0 + 56), v0 + 16);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  sub_10000F3B0((void *)(v0 + 16), v1);
  CGImageRef v3 = sub_100398EE0(v1, v2);
  if (v3)
  {
    CGImageRef v4 = v3;
    id v5 = [objc_allocWithZone((Class)CIImage) initWithCGImage:v3];
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    sub_10000F3B0((void *)(v0 + 16), v6);
    id v8 = [v5 imageByApplyingCGOrientation:sub_1003991F4(v6, v7)];

    id v9 = [objc_allocWithZone((Class)CIContext) init];
    CGColorSpaceRef v10 = (CGColorSpaceRef)[v8 colorSpace];
    if (v10 || (CGColorSpaceRef v10 = CGColorSpaceCreateWithName(kCGColorSpaceSRGB)) != 0)
    {
      [v8 extent];
      double v12 = v11;
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      uint64_t v19 = kCIFormatRGBA8;
      uint64_t v20 = v10;
      CGColorSpaceRef v10 = [v9 createCGImage:v8 fromRect:v19 format:v20 colorSpace:v12];
    }
    else
    {
    }
  }
  else
  {
    CGColorSpaceRef v10 = 0;
  }
  _s6Tamale17AnyLocalizedErrorVwxx_0(v0 + 16);
  uint64_t v21 = *(uint64_t (**)(CGColorSpaceRef))(v0 + 8);
  return v21(v10);
}

uint64_t sub_10041728C()
{
  swift_release();
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  sub_10000FBD8(v0 + 56, &qword_100518A80);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100417314()
{
  v1[4] = v0;
  uint64_t v2 = sub_10000F214(&qword_10051FD98);
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = type metadata accessor for MainActor();
  v1[9] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[10] = v4;
  v1[11] = v3;
  return _swift_task_switch(sub_100417410, v4, v3);
}

uint64_t sub_100417410()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  sub_10018B700("CameraController.stop", 21, 2, 1);
  v0[2] = 2;
  sub_10000F214(qword_10051FDA0);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_getKeyPath();
  v0[3] = v4;
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16))
  {
    uint64_t v5 = static MainActor.shared.getter();
    v0[12] = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[13] = v6;
    void *v6 = v0;
    v6[1] = sub_100417650;
    uint64_t v7 = v0[4];
    return withCheckedContinuation<A>(isolation:function:_:)(v6, v5, &protocol witness table for MainActor, 0x2928706F7473, 0xE600000000000000, sub_100419404, v7, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    id v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100417650()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 80);
  return _swift_task_switch(sub_100417794, v3, v2);
}

uint64_t sub_100417794()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004177FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10052EE18);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v7);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v10 = (void **)(a2 + OBJC_IVAR____TtC6Tamale16CameraController_runStateWaiters);
  swift_beginAccess();
  double v11 = *v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    double v11 = sub_10032AB28(0, v11[2] + 1, 1, v11);
    *uint64_t v10 = v11;
  }
  unint64_t v14 = v11[2];
  unint64_t v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    double v11 = sub_10032AB28((void *)(v13 > 1), v14 + 1, 1, v11);
    *uint64_t v10 = v11;
  }
  v11[2] = v14 + 1;
  double v15 = &v11[2 * v14];
  v15[4] = sub_1004194A0;
  v15[5] = v9;
  return swift_endAccess();
}

uint64_t sub_1004179CC@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (*(unsigned char *)(result + 16))
  {
    char v3 = 0;
  }
  else
  {
    sub_10000F214(&qword_10052EE18);
    uint64_t result = CheckedContinuation.resume(returning:)();
    char v3 = 1;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_100417A1C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = type metadata accessor for MainActor();
  v2[6] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[7] = v4;
  v2[8] = v3;
  return _swift_task_switch(sub_100417AB8, v4, v3);
}

uint64_t sub_100417AB8()
{
  uint64_t v1 = v0[4];
  swift_getKeyPath();
  v0[2] = v1;
  sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__runState + 16) >= 3u
    && *(_OWORD *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__runState) == 0)
  {
    uint64_t v7 = *(void *)(v0[4] + 16);
    v0[9] = v7;
    return _swift_task_switch(sub_100417C8C, v7, 0);
  }
  else
  {
    uint64_t v2 = static MainActor.shared.getter();
    v0[12] = v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[13] = v3;
    uint64_t v4 = sub_10000F214(&qword_10052EDF8);
    *uint64_t v3 = v0;
    v3[1] = sub_100417F30;
    uint64_t v5 = v0[3];
    uint64_t v6 = v0[4];
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, v2, &protocol witness table for MainActor, 0xD000000000000011, 0x800000010042D910, sub_100418490, v6, v4);
  }
}

uint64_t sub_100417C8C()
{
  uint64_t v1 = *(void *)(v0[9] + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  void *v2 = v0;
  v2[1] = sub_100417D2C;
  uint64_t v3 = v0[3];
  return sub_10034691C(v3, v1);
}

uint64_t sub_100417D2C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v5 = sub_100417ECC;
  }
  else {
    uint64_t v5 = sub_100417E68;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100417E68()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100417ECC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100417F30()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 64);
    uint64_t v5 = sub_10041804C;
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 64);
    uint64_t v5 = sub_10041B5D0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10041804C()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1004180B8()
{
  if (!qword_10052EAC0)
  {
    unint64_t v0 = type metadata accessor for AsyncStream.Continuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10052EAC0);
    }
  }
}

void sub_100418110()
{
  if (!qword_10052EAC8)
  {
    sub_10000F69C(&qword_10051A060);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10052EAC8);
    }
  }
}

uint64_t sub_100418174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051FD98);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000F214(&qword_10052EE00);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  double v11 = __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *(void *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  unint64_t v14 = (void **)(a2 + OBJC_IVAR____TtC6Tamale16CameraController_runStateWaiters);
  swift_beginAccess();
  double v15 = *v14;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unsigned char *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    double v15 = sub_10032AB28(0, v15[2] + 1, 1, v15);
    unsigned char *v14 = v15;
  }
  unint64_t v18 = v15[2];
  unint64_t v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    double v15 = sub_10032AB28((void *)(v17 > 1), v18 + 1, 1, v15);
    unsigned char *v14 = v15;
  }
  void v15[2] = v18 + 1;
  uint64_t v19 = &v15[2 * v18];
  v19[4] = sub_100418780;
  v19[5] = v13;
  swift_endAccess();
  sub_10018B700("CameraController.pause", 22, 2, 1);
  uint64_t v20 = OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer;
  [*(id *)(a2 + OBJC_IVAR____TtC6Tamale16CameraController_bundleDisappearanceTimer) invalidate];
  uint64_t v21 = *(void **)(a2 + v20);
  *(void *)(a2 + v20) = 0;

  sub_10041513C(0, 1.5);
  v23[1] = 3;
  sub_10000F214(qword_10051FDA0);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100418490(uint64_t a1)
{
  return sub_100418174(a1, v1);
}

void sub_100418498(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = sub_10000F214(&qword_10052EE00);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  double v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000F214(&qword_10051A8C0);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a1 + 16) >= 3u && *(_OWORD *)a1 == 0)
  {
    uint64_t v16 = type metadata accessor for TaskPriority();
    char v15 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v21 = static MainActor.shared.getter();
    unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v21;
    *(void *)(v19 + 24) = &protocol witness table for MainActor;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v17, v11, v8);
    *(void *)(v19 + v18) = a3;
    sub_100064D5C((uint64_t)v14, (uint64_t)&unk_10052EE10, v19);
    swift_release();
  }
  else
  {
    char v15 = 0;
  }
  *a4 = v15;
}

uint64_t sub_1004186D8()
{
  uint64_t v1 = sub_10000F214(&qword_10052EE00);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  swift_release();

  return swift_deallocObject();
}

void sub_100418780(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000F214(&qword_10052EE00) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100418498(a1, v2 + v6, v7, a2);
}

uint64_t sub_100418830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[11] = v7;
  v5[12] = v6;
  return _swift_task_switch(sub_1004188C8, v7, v6);
}

uint64_t sub_1004188C8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 16);
  *(void *)(v0 + 104) = v1;
  return _swift_task_switch(sub_1004188EC, v1, 0);
}

uint64_t sub_1004188EC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 112);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v2;
  void *v2 = v0;
  v2[1] = sub_100418990;
  return sub_10034691C(v0 + 16, v1);
}

uint64_t sub_100418990()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_100418B4C;
  }
  else {
    uint64_t v5 = sub_100418ACC;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100418ACC()
{
  swift_release();
  sub_10000F214(&qword_10052EE00);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100418B4C()
{
  uint64_t v1 = v0[15];
  swift_release();
  v0[7] = v1;
  sub_10000F214(&qword_10052EE00);
  CheckedContinuation.resume(throwing:)();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void *sub_100418BDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, __n128 a6, __n128 a7)
{
  LODWORD(v7) = a5;
  double v62 = *(double *)&a2;
  __n128 v60 = a7;
  __n128 v59 = a6;
  uint64_t v11 = type metadata accessor for CVBundle(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10000F214(&qword_10051A060);
  uint64_t v15 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v63 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v57 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v57 - v21;
  int64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    if (a4) {
      double v24 = dbl_100458EA0[(v7 & 1) == 0];
    }
    else {
      double v24 = *(double *)&a3;
    }
    if (a4) {
      double v25 = 0.2;
    }
    else {
      double v25 = v62;
    }
    uint64_t v65 = _swiftEmptyArrayStorage;
    sub_100040F18(0, v23, 0);
    uint64_t v26 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v61 = *(void *)(v12 + 72);
    v27.n128_u64[0] = v59.n128_u64[0];
    CGFloat v58 = v59.n128_f64[0] - v25 * 0.5;
    double v28 = v60.n128_f64[0] - v24 * 0.5;
    v27.n128_u64[1] = v60.n128_u64[0];
    __n128 v59 = v27;
    double v57 = v25 * v24;
    double v29 = sqrt(v25 * v24);
    LODWORD(v62) = v7;
    do
    {
      sub_10041B068(v26, (uint64_t)v14, type metadata accessor for CVBundle);
      sub_10041B068((uint64_t)v14, (uint64_t)v22, type metadata accessor for CVBundle);
      if (v7)
      {
        sub_10019E198((uint64_t)v67);
        v69.origin.CGFloat x = sub_1003FD844();
        double width = v69.size.width;
        double height = v69.size.height;
        v71.origin.CGFloat x = v58;
        v71.origin.CGFloat y = v28;
        v71.size.double width = v25;
        v71.size.double height = v24;
        CGRect v70 = CGRectIntersection(v69, v71);
        double v44 = v70.size.width;
        double v45 = v70.size.height;
        BOOL IsNull = CGRectIsNull(v70);
        float v41 = 0.0;
        if (!IsNull) {
          float v41 = v44 * v45 / (v57 + width * height - v44 * v45);
        }
      }
      else
      {
        sub_10019E198((uint64_t)v66);
        v68.origin.CGFloat x = sub_1003FD844();
        CGFloat x = v68.origin.x;
        CGFloat y = v68.origin.y;
        CGFloat v32 = v68.size.width;
        CGFloat v33 = v68.size.height;
        v34.n128_f64[0] = CGRectGetMidX(v68);
        __n128 v60 = v34;
        v34.n128_f64[0] = x;
        CGFloat v35 = y;
        CGFloat v36 = v32;
        CGFloat v37 = v33;
        CGFloat MidY = CGRectGetMidY(*(CGRect *)v34.n128_u64);
        v39.n128_u64[0] = v60.n128_u64[0];
        v39.n128_f64[1] = MidY;
        float v40 = sub_10040F6CC(v39, v59) / v29;
        float v41 = 1.0 - v40;
        if (v41 < 0.0) {
          float v41 = 0.0;
        }
      }
      *(float *)&v22[*(int *)(v64 + 48)] = v41;
      sub_10041B008((uint64_t)v14, type metadata accessor for CVBundle);
      uint64_t v47 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100040F18(0, v47[2] + 1, 1);
        uint64_t v47 = v65;
      }
      unint64_t v7 = v47[2];
      unint64_t v48 = v47[3];
      if (v7 >= v48 >> 1)
      {
        sub_100040F18(v48 > 1, v7 + 1, 1);
        uint64_t v47 = v65;
      }
      v47[2] = v7 + 1;
      sub_10041ACB8((uint64_t)v22, (uint64_t)v47+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v7);
      v26 += v61;
      --v23;
      LOBYTE(v7) = LOBYTE(v62);
    }
    while (v23);
  }
  else
  {
    uint64_t v47 = _swiftEmptyArrayStorage;
  }
  uint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t v49 = v47[2];
  if (v49)
  {
    unint64_t v50 = 0;
    while (v50 < v47[2])
    {
      unint64_t v51 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v52 = *(void *)(v15 + 72);
      sub_10000FB74((uint64_t)v47 + v51 + v52 * v50, (uint64_t)v19, &qword_10051A060);
      if (*(float *)&v19[*(int *)(v64 + 48)] <= 0.0)
      {
        sub_10000FBD8((uint64_t)v19, &qword_10051A060);
      }
      else
      {
        sub_10041ACB8((uint64_t)v19, v63);
        uint64_t v53 = v65;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040F18(0, v53[2] + 1, 1);
          uint64_t v53 = v65;
        }
        unint64_t v55 = v53[2];
        unint64_t v54 = v53[3];
        if (v55 >= v54 >> 1)
        {
          sub_100040F18(v54 > 1, v55 + 1, 1);
          uint64_t v53 = v65;
        }
        v53[2] = v55 + 1;
        sub_10041ACB8(v63, (uint64_t)v53 + v51 + v55 * v52);
      }
      if (v49 == ++v50) {
        goto LABEL_33;
      }
    }
    __break(1u);
    uint64_t result = (void *)swift_release();
    __break(1u);
  }
  else
  {
LABEL_33:
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100419554(&v65);
    swift_release();
    return v65;
  }
  return result;
}

uint64_t sub_1004191D8()
{
  uint64_t v1 = sub_10000F214(&qword_10052EE00);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1004192C4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000F214(&qword_10052EE00) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000FC9C;
  return sub_100418830(a1, v6, v7, v8, v9);
}

uint64_t sub_1004193EC()
{
  return sub_10041B448();
}

uint64_t sub_100419404(uint64_t a1)
{
  return sub_1004177FC(a1, v1);
}

uint64_t sub_10041940C()
{
  uint64_t v1 = sub_10000F214(&qword_10052EE18);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_1004194A0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  sub_10000F214(&qword_10052EE18);

  return sub_1004179CC(a1, a2);
}

uint64_t sub_100419524@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void sub_100419554(void **a1)
{
  uint64_t v2 = *(void *)(sub_10000F214(&qword_10051A060) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)sub_100046034(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100419600(v5);
  *a1 = v3;
}

void sub_100419600(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v142 = sub_10000F214(&qword_10051A060);
  uint64_t v4 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v133 = (uint64_t)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v143 = (uint64_t)&v128 - v7;
  __chkstk_darwin(v8);
  uint64_t v139 = (uint64_t)&v128 - v9;
  __chkstk_darwin(v10);
  uint64_t v138 = (uint64_t)&v128 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if (v12 < 0) {
      goto LABEL_140;
    }
    if (v12) {
      sub_10041A01C(0, v12, 1, a1);
    }
    return;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_148;
  }
  uint64_t v136 = v4;
  uint64_t v141 = a1;
  Swift::Int v129 = v13;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v135 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v128 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
      CGRect v121 = v18;
      if (v20 >= 2)
      {
        uint64_t v122 = *v141;
        do
        {
          unint64_t v123 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_135;
          }
          if (!v122) {
            goto LABEL_147;
          }
          uint64_t v124 = *(void *)&v121[16 * v123 + 32];
          uint64_t v125 = *(void *)&v121[16 * v20 + 24];
          sub_10041A29C(v122 + *(void *)(v136 + 72) * v124, v122 + *(void *)(v136 + 72) * *(void *)&v121[16 * v20 + 16], v122 + *(void *)(v136 + 72) * v125, v135);
          if (v2) {
            break;
          }
          if (v125 < v124) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            CGRect v121 = sub_100045F20((uint64_t)v121);
          }
          if (v123 >= *((void *)v121 + 2)) {
            goto LABEL_137;
          }
          char v126 = &v121[16 * v123 + 32];
          *(void *)char v126 = v124;
          *((void *)v126 + 1) = v125;
          unint64_t v127 = *((void *)v121 + 2);
          if (v20 > v127) {
            goto LABEL_138;
          }
          memmove(&v121[16 * v20 + 16], &v121[16 * v20 + 32], 16 * (v127 - v20));
          *((void *)v121 + 2) = v127 - 1;
          unint64_t v20 = v127 - 1;
        }
        while (v127 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v128[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v128 = (void *)v16;
    unint64_t v135 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    Swift::Int v134 = v19;
    if (v19 + 1 >= v12)
    {
      Swift::Int v33 = v19 + 1;
      int64_t v23 = v141;
      goto LABEL_22;
    }
    uint64_t v131 = v2;
    int64_t v23 = v141;
    uint64_t v24 = *v141;
    uint64_t v25 = *(void *)(v136 + 72);
    uint64_t v26 = v138;
    sub_10000FB74(*v141 + v25 * v22, v138, &qword_10051A060);
    Swift::Int v140 = v12;
    uint64_t v27 = v139;
    sub_10000FB74(v24 + v25 * v21, v139, &qword_10051A060);
    uint64_t v28 = *(int *)(v142 + 48);
    float v29 = *(float *)(v26 + v28);
    float v30 = *(float *)(v27 + v28);
    uint64_t v31 = v27;
    Swift::Int v12 = v140;
    sub_10000FBD8(v31, &qword_10051A060);
    sub_10000FBD8(v26, &qword_10051A060);
    uint64_t v32 = v24;
    Swift::Int v33 = v21 + 2;
    uint64_t v137 = v32;
    uint64_t v144 = v25;
    if (v21 + 2 >= v12)
    {
      uint64_t v2 = v131;
      if (v30 >= v29) {
        goto LABEL_22;
      }
LABEL_43:
      if (v33 < v21) {
        goto LABEL_141;
      }
      if (v21 < v33)
      {
        uint64_t v130 = v18;
        uint64_t v131 = v2;
        uint64_t v58 = 0;
        uint64_t v59 = v144;
        uint64_t v60 = v144 * (v33 - 1);
        uint64_t v61 = v33 * v144;
        Swift::Int v62 = v21;
        Swift::Int v63 = v33;
        uint64_t v64 = v21 * v144;
        do
        {
          Swift::Int v65 = v63;
          if (v62 != v63 + v58 - 1)
          {
            uint64_t v66 = v137;
            if (!v137) {
              goto LABEL_146;
            }
            unint64_t v67 = v137 + v64;
            uint64_t v68 = v137 + v60;
            sub_10041ACB8(v137 + v64, v133);
            if (v64 < v60 || v67 >= v66 + v61)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v59 = v144;
            }
            else
            {
              uint64_t v59 = v144;
              if (v64 != v60) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            sub_10041ACB8(v133, v68);
            int64_t v23 = v141;
          }
          ++v62;
          --v58;
          Swift::Int v63 = v65;
          v60 -= v59;
          v61 -= v59;
          v64 += v59;
        }
        while (v62 < v65 + v58);
        uint64_t v18 = v130;
        uint64_t v2 = v131;
        Swift::Int v33 = v65;
        Swift::Int v21 = v134;
        Swift::Int v12 = v140;
      }
      goto LABEL_22;
    }
    uint64_t v130 = v18;
    uint64_t v34 = v25 * v22;
    uint64_t v35 = v32;
    uint64_t v36 = v25 * v33;
    while (1)
    {
      Swift::Int v37 = v33;
      uint64_t v38 = v138;
      sub_10000FB74(v35 + v36, v138, &qword_10051A060);
      uint64_t v39 = v139;
      sub_10000FB74(v35 + v34, v139, &qword_10051A060);
      BOOL v40 = *(float *)(v39 + *(int *)(v142 + 48)) >= *(float *)(v38 + *(int *)(v142 + 48));
      sub_10000FBD8(v39, &qword_10051A060);
      sub_10000FBD8(v38, &qword_10051A060);
      if (v30 < v29 == v40) {
        break;
      }
      ++v33;
      v35 += v144;
      Swift::Int v12 = v140;
      if (v140 == v37 + 1)
      {
        Swift::Int v33 = v140;
        int64_t v23 = v141;
        goto LABEL_42;
      }
    }
    Swift::Int v12 = v140;
    int64_t v23 = v141;
LABEL_42:
    uint64_t v18 = v130;
    uint64_t v2 = v131;
    Swift::Int v21 = v134;
    if (v30 < v29) {
      goto LABEL_43;
    }
LABEL_22:
    if (v33 >= v12) {
      goto LABEL_57;
    }
    if (__OFSUB__(v33, v21)) {
      goto LABEL_139;
    }
    if (v33 - v21 >= v129) {
      goto LABEL_57;
    }
    if (__OFADD__(v21, v129)) {
      goto LABEL_142;
    }
    Swift::Int v41 = v21 + v129 >= v12 ? v12 : v21 + v129;
    if (v41 < v21) {
      break;
    }
    if (v33 != v41)
    {
      uint64_t v130 = v18;
      uint64_t v131 = v2;
      uint64_t v42 = *(void *)(v136 + 72);
      uint64_t v144 = v42 * (v33 - 1);
      uint64_t v137 = v42;
      Swift::Int v43 = v33 * v42;
      Swift::Int v132 = v41;
      do
      {
        uint64_t v45 = 0;
        Swift::Int v46 = v21;
        Swift::Int v140 = v33;
        while (1)
        {
          uint64_t v47 = *v23;
          Swift::Int v48 = v43;
          uint64_t v49 = v43 + v45 + *v23;
          uint64_t v50 = v138;
          sub_10000FB74(v49, v138, &qword_10051A060);
          uint64_t v51 = v144 + v45 + v47;
          uint64_t v52 = v139;
          sub_10000FB74(v51, v139, &qword_10051A060);
          uint64_t v53 = *(int *)(v142 + 48);
          float v54 = *(float *)(v50 + v53);
          float v55 = *(float *)(v52 + v53);
          sub_10000FBD8(v52, &qword_10051A060);
          sub_10000FBD8(v50, &qword_10051A060);
          if (v55 >= v54) {
            break;
          }
          uint64_t v56 = *v23;
          if (!*v23) {
            goto LABEL_144;
          }
          Swift::Int v43 = v48;
          uint64_t v57 = v56 + v144 + v45;
          sub_10041ACB8(v56 + v48 + v45, v143);
          Swift::Int v44 = v140;
          swift_arrayInitWithTakeFrontToBack();
          sub_10041ACB8(v143, v57);
          v45 -= v137;
          ++v46;
          int64_t v23 = v141;
          if (v44 == v46) {
            goto LABEL_33;
          }
        }
        Swift::Int v44 = v140;
        Swift::Int v43 = v48;
LABEL_33:
        Swift::Int v33 = v44 + 1;
        v144 += v137;
        v43 += v137;
        Swift::Int v21 = v134;
      }
      while (v33 != v132);
      Swift::Int v33 = v132;
      uint64_t v18 = v130;
      uint64_t v2 = v131;
    }
LABEL_57:
    if (v33 < v21) {
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v18 = sub_1000456E8(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v70 = *((void *)v18 + 2);
    unint64_t v69 = *((void *)v18 + 3);
    unint64_t v20 = v70 + 1;
    Swift::Int v140 = v33;
    if (v70 >= v69 >> 1) {
      uint64_t v18 = sub_1000456E8((char *)(v69 > 1), v70 + 1, 1, v18);
    }
    uint64_t v71 = v2;
    *((void *)v18 + 2) = v20;
    uint64_t v72 = v18 + 32;
    uint64_t v73 = &v18[16 * v70 + 32];
    Swift::Int v74 = v140;
    *(void *)uint64_t v73 = v21;
    *((void *)v73 + 1) = v74;
    if (v70)
    {
      while (1)
      {
        unint64_t v75 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v80 = &v72[16 * v20];
          uint64_t v81 = *((void *)v80 - 8);
          uint64_t v82 = *((void *)v80 - 7);
          BOOL v86 = __OFSUB__(v82, v81);
          uint64_t v83 = v82 - v81;
          if (v86) {
            goto LABEL_123;
          }
          uint64_t v85 = *((void *)v80 - 6);
          uint64_t v84 = *((void *)v80 - 5);
          BOOL v86 = __OFSUB__(v84, v85);
          uint64_t v78 = v84 - v85;
          char v79 = v86;
          if (v86) {
            goto LABEL_124;
          }
          unint64_t v87 = v20 - 2;
          uint64_t v88 = &v72[16 * v20 - 32];
          uint64_t v90 = *(void *)v88;
          uint64_t v89 = *((void *)v88 + 1);
          BOOL v86 = __OFSUB__(v89, v90);
          uint64_t v91 = v89 - v90;
          if (v86) {
            goto LABEL_126;
          }
          BOOL v86 = __OFADD__(v78, v91);
          uint64_t v92 = v78 + v91;
          if (v86) {
            goto LABEL_129;
          }
          if (v92 >= v83)
          {
            uint64_t v110 = &v72[16 * v75];
            uint64_t v112 = *(void *)v110;
            uint64_t v111 = *((void *)v110 + 1);
            BOOL v86 = __OFSUB__(v111, v112);
            uint64_t v113 = v111 - v112;
            if (v86) {
              goto LABEL_133;
            }
            BOOL v103 = v78 < v113;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v104 = *((void *)v18 + 4);
            uint64_t v105 = *((void *)v18 + 5);
            BOOL v86 = __OFSUB__(v105, v104);
            uint64_t v97 = v105 - v104;
            char v98 = v86;
            goto LABEL_88;
          }
          uint64_t v77 = *((void *)v18 + 4);
          uint64_t v76 = *((void *)v18 + 5);
          BOOL v86 = __OFSUB__(v76, v77);
          uint64_t v78 = v76 - v77;
          char v79 = v86;
        }
        if (v79) {
          goto LABEL_125;
        }
        unint64_t v87 = v20 - 2;
        uint64_t v93 = &v72[16 * v20 - 32];
        uint64_t v95 = *(void *)v93;
        uint64_t v94 = *((void *)v93 + 1);
        BOOL v96 = __OFSUB__(v94, v95);
        uint64_t v97 = v94 - v95;
        char v98 = v96;
        if (v96) {
          goto LABEL_128;
        }
        uint64_t v99 = &v72[16 * v75];
        uint64_t v101 = *(void *)v99;
        uint64_t v100 = *((void *)v99 + 1);
        BOOL v86 = __OFSUB__(v100, v101);
        uint64_t v102 = v100 - v101;
        if (v86) {
          goto LABEL_131;
        }
        if (__OFADD__(v97, v102)) {
          goto LABEL_132;
        }
        if (v97 + v102 >= v78)
        {
          BOOL v103 = v78 < v102;
LABEL_94:
          if (v103) {
            unint64_t v75 = v87;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v98) {
          goto LABEL_127;
        }
        uint64_t v106 = &v72[16 * v75];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v86 = __OFSUB__(v107, v108);
        uint64_t v109 = v107 - v108;
        if (v86) {
          goto LABEL_130;
        }
        if (v109 < v97) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v114 = v75 - 1;
        if (v75 - 1 >= v20)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v141) {
          goto LABEL_145;
        }
        char v115 = v18;
        uint64_t v116 = &v72[16 * v114];
        uint64_t v117 = *(void *)v116;
        uint64_t v118 = &v72[16 * v75];
        uint64_t v119 = *((void *)v118 + 1);
        sub_10041A29C(*v141 + *(void *)(v136 + 72) * *(void *)v116, *v141 + *(void *)(v136 + 72) * *(void *)v118, *v141 + *(void *)(v136 + 72) * v119, v135);
        if (v71) {
          goto LABEL_117;
        }
        if (v119 < v117) {
          goto LABEL_120;
        }
        if (v75 > *((void *)v115 + 2)) {
          goto LABEL_121;
        }
        *(void *)uint64_t v116 = v117;
        *(void *)&v72[16 * v114 + 8] = v119;
        unint64_t v120 = *((void *)v115 + 2);
        if (v75 >= v120) {
          goto LABEL_122;
        }
        uint64_t v18 = v115;
        unint64_t v20 = v120 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v120 - 1 - v75));
        *((void *)v115 + 2) = v120 - 1;
        if (v120 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    Swift::Int v12 = v141[1];
    Swift::Int v19 = v140;
    uint64_t v2 = v71;
    if (v140 >= v12) {
      goto LABEL_106;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10041A01C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = a1;
  uint64_t v30 = sub_10000F214(&qword_10051A060);
  __chkstk_darwin(v30);
  uint64_t v31 = (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - v9;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v29 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v33 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v32 = v15 * v29;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v27;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_10000FB74(v32 + v16 + *a4, (uint64_t)v14, &qword_10051A060);
      sub_10000FB74(v33 + v16 + v18, (uint64_t)v10, &qword_10051A060);
      uint64_t v19 = *(int *)(v30 + 48);
      float v20 = *(float *)&v14[v19];
      float v21 = *(float *)&v10[v19];
      sub_10000FBD8((uint64_t)v10, &qword_10051A060);
      sub_10000FBD8((uint64_t)v14, &qword_10051A060);
      if (v21 >= v20)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v26) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *a4;
      if (!*a4) {
        break;
      }
      int64_t v23 = a4;
      uint64_t v24 = v22 + v33 + v16;
      sub_10041ACB8(v22 + v32 + v16, v31);
      swift_arrayInitWithTakeFrontToBack();
      sub_10041ACB8(v31, v24);
      v16 -= v28;
      ++v17;
      a4 = v23;
      if (v29 == v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_10041A29C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v42 = sub_10000F214(&qword_10051A060);
  __chkstk_darwin(v42);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_70;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_71;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v45 = a1;
  unint64_t v44 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v29 = a4 + v19;
      unint64_t v43 = a4 + v19;
      unint64_t v45 = a2;
      unint64_t v41 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v14;
        do
        {
          unint64_t v32 = a3 + v31;
          sub_10000FB74(v29 + v31, (uint64_t)v12, &qword_10051A060);
          unint64_t v33 = a2 + v31;
          sub_10000FB74(a2 + v31, (uint64_t)v9, &qword_10051A060);
          uint64_t v34 = *(int *)(v42 + 48);
          float v35 = *(float *)&v12[v34];
          float v36 = *(float *)&v9[v34];
          sub_10000FBD8((uint64_t)v9, &qword_10051A060);
          sub_10000FBD8((uint64_t)v12, &qword_10051A060);
          if (v36 >= v35)
          {
            unint64_t v37 = v43;
            v43 += v31;
            if (a3 < v37 || v32 >= v37)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v37)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v33 = a2;
          }
          else
          {
            if (a3 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v45 += v31;
          }
          unint64_t v29 = v43;
          if (v43 <= a4) {
            break;
          }
          a2 = v33;
          a3 += v31;
        }
        while (v33 > v41);
      }
      goto LABEL_68;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v41 = a4 + v18;
    unint64_t v43 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_10000FB74(a2, (uint64_t)v12, &qword_10051A060);
        sub_10000FB74(a4, (uint64_t)v9, &qword_10051A060);
        uint64_t v21 = *(int *)(v42 + 48);
        float v22 = *(float *)&v12[v21];
        float v23 = *(float *)&v9[v21];
        sub_10000FBD8((uint64_t)v9, &qword_10051A060);
        sub_10000FBD8((uint64_t)v12, &qword_10051A060);
        unint64_t v24 = v45;
        if (v23 >= v22)
        {
          unint64_t v27 = v44 + v14;
          if (v45 < v44 || v45 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v45 != v44)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v44 = v27;
          unint64_t v25 = a2;
        }
        else
        {
          unint64_t v25 = a2 + v14;
          if (v45 < a2 || v45 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v45 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v45 = v24 + v14;
        a4 = v44;
        if (v44 >= v41) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    sub_100045DDC(&v45, &v44, (uint64_t *)&v43);
    return 1;
  }
LABEL_72:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10041A74C(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(a1 + 16 * v4 + 32);
    swift_retain_n();
    uint64_t v7 = a2(v4, sub_10041B538, v6);
    char v9 = v8;
    swift_release();
    swift_release();
    if ((v9 & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_100328A0C(0, v5[2] + 1, 1, v5);
      }
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1) {
        uint64_t v5 = sub_100328A0C((void *)(v10 > 1), v11 + 1, 1, v5);
      }
      uint64_t v5[2] = v11 + 1;
      v5[v11 + 4] = v7;
    }
    ++v4;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_10041A8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = type metadata accessor for CVBundle.BundleType(0);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CVBundle(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  char v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = OBJC_IVAR____TtC6Tamale16CameraController___observationRegistrar;
  uint64_t v29 = a2 + OBJC_IVAR____TtC6Tamale16CameraController__configuration;
  swift_beginAccess();
  if (v14)
  {
    uint64_t v27 = a2;
    uint64_t v28 = a2 + v15;
    uint64_t v16 = *(void *)(v7 + 72);
    unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v17 = a1 + v26;
    do
    {
      sub_10041B068(v17, (uint64_t)v12, type metadata accessor for CVBundle);
      swift_getKeyPath();
      uint64_t v30 = a2;
      sub_10041B100((unint64_t *)&qword_10051B708, (void (*)(uint64_t))type metadata accessor for CameraController);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v29 + 1) != 1) {
        goto LABEL_10;
      }
      sub_10041B068((uint64_t)v12, (uint64_t)v5, type metadata accessor for CVBundle.BundleType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v5, v18);
      }
      else
      {
        sub_10041B008((uint64_t)v5, type metadata accessor for CVBundle.BundleType);
      }
      uint64_t v19 = sub_1001A365C()[2];
      swift_bridgeObjectRelease();
      if (!v19)
      {
        sub_10041B008((uint64_t)v12, type metadata accessor for CVBundle);
      }
      else
      {
LABEL_10:
        sub_10041AE78((uint64_t)v12, (uint64_t)v9, type metadata accessor for CVBundle);
        float v20 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100040BFC(0, v20[2] + 1, 1);
          float v20 = v31;
        }
        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1)
        {
          sub_100040BFC(v21 > 1, v22 + 1, 1);
          float v20 = v31;
        }
        v20[2] = v22 + 1;
        sub_10041AE78((uint64_t)v9, (uint64_t)v20 + v26 + v22 * v16, type metadata accessor for CVBundle);
        a2 = v27;
      }
      v17 += v16;
      --v14;
    }
    while (v14);
    return v31;
  }
  return v13;
}

uint64_t sub_10041AC64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10041560C(a1, &OBJC_IVAR____TtC6Tamale16CameraController__configuration, (uint64_t)type metadata accessor for CameraControllerConfiguration, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10041B068, a2);
}

uint64_t sub_10041ACB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051A060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10041AD20@<X0>(void *result@<X0>, double *a2@<X8>)
{
  if (*result >= 2uLL) {
    __break(1u);
  }
  else {
    *a2 = (*(double *)(*(void *)(v2 + 16) + 8 * (*result & 1))
  }
         - *(double *)(*(void *)(v2 + 24) + 8 * (*result & 1)))
        * (*(double *)(*(void *)(v2 + 16) + 8 * (*result & 1))
         - *(double *)(*(void *)(v2 + 24) + 8 * (*result & 1)));
  return result;
}

uint64_t sub_10041AD50()
{
  return sub_100415834(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC6Tamale16CameraController__configuration, (void (*)(uint64_t, uint64_t))sub_1002ABEA8);
}

uint64_t sub_10041AD88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10041560C(a1, &OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore, (uint64_t)&qword_10051B760, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000FB74, a2);
}

uint64_t sub_10041ADD0()
{
  return sub_100415834(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC6Tamale16CameraController__boresightClosestAndScore, (void (*)(uint64_t, uint64_t))sub_10041AE08);
}

uint64_t sub_10041AE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000F214(&qword_10051B760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10041AE78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10041AEE0()
{
  return sub_10041B57C();
}

uint64_t sub_10041AEF8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10041AF30(uint64_t a1)
{
  return sub_1004109E0(a1, v1);
}

uint64_t sub_10041AF38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10041AF48()
{
  return swift_release();
}

uint64_t sub_10041AF54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_100410AF8(a1, v4, v5, v6);
}

uint64_t sub_10041B008(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10041B068(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

dispatch_workloop_t sub_10041B0D0()
{
  dispatch_workloop_t inactive = dispatch_workloop_create_inactive("CameraSource");

  return inactive;
}

uint64_t sub_10041B100(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10041B148()
{
  unint64_t result = qword_10051FB70;
  if (!qword_10051FB70)
  {
    sub_10000F69C(&qword_100521000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10051FB70);
  }
  return result;
}

uint64_t sub_10041B1A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000FC9C;
  return sub_100411D30(a1, v4, v5, v6);
}

uint64_t sub_10041B25C()
{
  uint64_t v1 = sub_10000F214(&qword_10052A4C0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10041B334(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000F214(&qword_10052A4C0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000F878;
  return sub_10041282C(a1, v5, v6, v7, v8);
}

uint64_t sub_10041B434(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_1000BC2F4(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10041B448()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16) + OBJC_IVAR____TtC6Tamale16CameraController__runState;
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  char v6 = *(unsigned char *)(v0 + 40);
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = v2;
  char v7 = *(unsigned char *)(v3 + 16);
  *(unsigned char *)(v3 + 16) = v6;
  sub_1000BBF50(v1, v2, v6);
  return sub_1000BC2F4(v4, v5, v7);
}

uint64_t sub_10041B4B0(uint64_t a1, uint64_t (*a2)(void, void, void))
{
  if (a2(*(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32))) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10041B500()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10041B538(uint64_t a1, uint64_t a2, char a3)
{
  void (*v4)(unsigned __int8 *__return_ptr, void *);
  unsigned __int8 v6;
  void v7[2];
  char v8;

  uint64_t v4 = *(void (**)(unsigned __int8 *__return_ptr, void *))(v3 + 16);
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v8 = a3;
  v4(&v6, v7);
  return v6;
}

uint64_t sub_10041B57C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_10040F998(v3);
  *(void *)(v1 + OBJC_IVAR____TtC6Tamale16CameraController__bundles) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10041B5D4()
{
  return sub_10041ADD0();
}

uint64_t sub_10041B5EC()
{
  return sub_10041AD50();
}

void sub_10041B604(uint64_t a1)
{
}

void sub_10041B60C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000407B0(0, v1, 0);
    uint64_t v3 = a1 + 48;
    int64_t v4 = v1;
    do
    {
      uint64_t v5 = *(void **)(v3 - 16);
      swift_bridgeObjectRetain();
      id v6 = v5;
      swift_bridgeObjectRetain();
      [v6 muid];
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_1000407B0(v10 > 1, v11 + 1, 1);
      }
      v3 += 64;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      void v12[5] = v9;
      --v4;
    }
    while (v4);
  }
  if (v1 == 1) {
    uint64_t v13 = 488;
  }
  else {
    uint64_t v13 = 490;
  }
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100024278();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 captureUserAction:v13 target:144 value:v15];
}

void sub_10041B7EC(uint64_t a1)
{
}

void sub_10041B7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = *(void *)(a1 + 16);
  int64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    unsigned int v20 = a2;
    float v23 = _swiftEmptyArrayStorage;
    sub_1000407B0(0, v3, 0);
    int64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = a1 + 32;
    do
    {
      long long v7 = *(_OWORD *)(v6 + 112);
      v21[6] = *(_OWORD *)(v6 + 96);
      v21[7] = v7;
      uint64_t v22 = *(void *)(v6 + 128);
      long long v8 = *(_OWORD *)(v6 + 16);
      v21[0] = *(_OWORD *)v6;
      v21[1] = v8;
      long long v9 = *(_OWORD *)(v6 + 48);
      v21[2] = *(_OWORD *)(v6 + 32);
      v21[3] = v9;
      long long v10 = *(_OWORD *)(v6 + 80);
      v21[4] = *(_OWORD *)(v6 + 64);
      v21[5] = v10;
      unint64_t v11 = (void *)*((void *)&v21[0] + 1);
      sub_1001817B4((uint64_t)v21);
      [v11 muid];
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v14 = v13;
      sub_10017FF68((uint64_t)v21);
      float v23 = v4;
      unint64_t v16 = v4[2];
      unint64_t v15 = v4[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000407B0(v15 > 1, v16 + 1, 1);
        int64_t v4 = v23;
      }
      v4[2] = v16 + 1;
      uint64_t v17 = &v4[2 * v16];
      v17[4] = v12;
      v17[5] = v14;
      v6 += 136;
      --v3;
    }
    while (v3);
    uint64_t v2 = v20;
  }
  *(void *)&v21[0] = v4;
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100024278();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = self;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 captureUserAction:v2 target:143 value:v19];
}

void sub_10041B9C8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000407B0(0, v1, 0);
    uint64_t v3 = a1 + 48;
    int64_t v4 = v1;
    do
    {
      uint64_t v5 = *(void **)(v3 - 16);
      swift_bridgeObjectRetain();
      id v6 = v5;
      swift_bridgeObjectRetain();
      [v6 muid];
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_1000407B0(v10 > 1, v11 + 1, 1);
      }
      v3 += 64;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      void v12[5] = v9;
      --v4;
    }
    while (v4);
  }
  if (v1 == 1) {
    uint64_t v13 = 21;
  }
  else {
    uint64_t v13 = 487;
  }
  sub_10000F214((uint64_t *)&unk_100522CD0);
  sub_100024278();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = self;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 captureUserAction:v13 target:144 value:v15];
}

size_t sub_10041BBA8()
{
  int64_t v1 = CGImageGetColorSpace(v0);
  if (!v1) {
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  size_t Height = CGImageGetHeight(v0);
  size_t Width = CGImageGetWidth(v0);
  size_t BitsPerComponent = CGImageGetBitsPerComponent(v0);
  uint32_t BitmapInfo = CGImageGetBitmapInfo(v0);
  CGContextRef v7 = CGBitmapContextCreate(0, Height, Width, BitsPerComponent, 0, v2, BitmapInfo);
  if (!v7)
  {

LABEL_7:
    sub_10000F214((uint64_t *)&unk_10051D350);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_10043D4F0;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 32) = 0xD000000000000035;
    *(void *)(v13 + 40) = 0x800000010042D9A0;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = v7;
  CGFloat v9 = (double)(uint64_t)CGImageGetHeight(v0) * 0.5;
  int64_t v10 = CGImageGetWidth(v0);
  CGContextTranslateCTM(v8, v9, (double)v10 * 0.5);
  CGContextRotateCTM(v8, -1.57079633);
  size_t result = CGImageGetWidth(v0);
  if (__OFSUB__(0, result))
  {
    __break(1u);
  }
  else
  {
    size_t result = CGImageGetHeight(v0);
    if (!__OFSUB__(0, result))
    {
      CGImageGetWidth(v0);
      CGImageGetHeight(v0);
      CGContextRef.draw(_:in:byTiling:)();
      CGImageRef Image = CGBitmapContextCreateImage(v8);

      return (size_t)Image;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10041BD8C()
{
  int64_t v1 = (__CFData *)[objc_allocWithZone((Class)NSMutableData) init];
  uint64_t v2 = CGImageDestinationCreateWithData(v1, kUTTypePNG, 1uLL, 0);
  if (!v2)
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000F378(v6, (uint64_t)qword_10055E2E0);
    CGContextRef v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      CGFloat v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)CGFloat v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error: Unable to create image destination for PNG conversion.", v9, 2u);
      swift_slowDealloc();

      return 0;
    }

LABEL_14:
    return 0;
  }
  uint64_t v3 = v2;
  CGImageDestinationAddImage(v2, v0, 0);
  if (!CGImageDestinationFinalize(v3))
  {
    if (qword_100517E98 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000F378(v10, (uint64_t)qword_10055E2E0);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error: Unable to finalize image destination.", v13, 2u);
      swift_slowDealloc();

      return 0;
    }

    goto LABEL_14;
  }
  int64_t v4 = v1;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

Swift::String __swiftcall CGFloat.string(withFormat:)(Swift::String withFormat)
{
  uint64_t v2 = v1;
  sub_10000F214(&qword_10051F350);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10043D4F0;
  *(void *)(v3 + 56) = &type metadata for CGFloat;
  *(void *)(v3 + 64) = sub_10041C068();
  *(void *)(v3 + 32) = v2;

  uint64_t v4 = String.init(format:_:)();
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

unint64_t sub_10041C068()
{
  unint64_t result = qword_10052EE68;
  if (!qword_10052EE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10052EE68);
  }
  return result;
}

uint64_t sub_10041C0C0(double a1, double a2)
{
  sub_10000F214(&qword_10051F350);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10043D4F0;
  *(void *)(v4 + 56) = &type metadata for CGFloat;
  unint64_t v5 = sub_10041C068();
  *(void *)(v4 + 64) = v5;
  *(double *)(v4 + 32) = a1;
  v6._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8236;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10043D4F0;
  *(void *)(v8 + 56) = &type metadata for CGFloat;
  *(void *)(v8 + 64) = v5;
  *(double *)(v8 + 32) = a2;
  v9._countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 40;
}

Swift::String __swiftcall CGRect.string(withFormat:)(Swift::String withFormat)
{
  object = withFormat._object;
  uint64_t countAndFlagsBits = withFormat._countAndFlagsBits;
  Swift::String v3 = CGPoint.string(withFormat:)(withFormat);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = countAndFlagsBits;
  v5._object = object;
  Swift::String v6 = CGPoint.string(withFormat:)(v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v8 = 40;
  Swift::String v9 = (void *)0xE100000000000000;
  result._object = v9;
  result._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t static PhotosPickerItem.EncodingDisambiguationPolicy.current.getter()
{
  return static PhotosPickerItem.EncodingDisambiguationPolicy.current.getter();
}

uint64_t type metadata accessor for PhotosPickerItem.EncodingDisambiguationPolicy()
{
  return type metadata accessor for PhotosPickerItem.EncodingDisambiguationPolicy();
}

uint64_t type metadata accessor for PhotosPickerItem()
{
  return type metadata accessor for PhotosPickerItem();
}

uint64_t PhotosPicker.init(selection:matching:preferredItemEncoding:label:)()
{
  return PhotosPicker.init(selection:matching:preferredItemEncoding:label:)();
}

uint64_t AppEntity.fullyQualifiedIdentifier.getter()
{
  return AppEntity.fullyQualifiedIdentifier.getter();
}

uint64_t IndexedEntity.attributeSet.getter()
{
  return IndexedEntity.attributeSet.getter();
}

uint64_t EntityProperty.wrappedValue.setter()
{
  return EntityProperty.wrappedValue.setter();
}

uint64_t EntityProperty<>.init()()
{
  return EntityProperty<>.init()();
}

{
  return EntityProperty<>.init()();
}

{
  return EntityProperty<>.init()();
}

{
  return EntityProperty<>.init()();
}

{
  return EntityProperty<>.init()();
}

uint64_t type metadata accessor for EntityIdentifier()
{
  return type metadata accessor for EntityIdentifier();
}

uint64_t static AssistantSchemaEnum.isAssistantOnly.getter()
{
  return static AssistantSchemaEnum.isAssistantOnly.getter();
}

uint64_t static AssistantSchemaEntity.isAssistantOnly.getter()
{
  return static AssistantSchemaEntity.isAssistantOnly.getter();
}

uint64_t static AssistantSchemaEntity.typeDisplayRepresentation.getter()
{
  return static AssistantSchemaEntity.typeDisplayRepresentation.getter();
}

uint64_t DisplayRepresentation.init(stringLiteral:)()
{
  return DisplayRepresentation.init(stringLiteral:)();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t static EnumerableEntityQuery.findIntentDescription.getter()
{
  return static EnumerableEntityQuery.findIntentDescription.getter();
}

uint64_t static DynamicOptionsProvider.useForParameterResolution.getter()
{
  return static DynamicOptionsProvider.useForParameterResolution.getter();
}

uint64_t static PersistentlyIdentifiable.persistentIdentifier.getter()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t type metadata accessor for TypeDisplayRepresentation()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t NSNotFound.getter()
{
  return NSNotFound.getter();
}

uint64_t URLRequest.httpMethod.setter()
{
  return URLRequest.httpMethod.setter();
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)()
{
  return URLRequest.init(url:cachePolicy:timeoutInterval:)();
}

Swift::Void __swiftcall URLRequest.addValue(_:forHTTPHeaderField:)(Swift::String _, Swift::String forHTTPHeaderField)
{
}

uint64_t URLRequest.httpBody.setter()
{
  return URLRequest.httpBody.setter();
}

uint64_t type metadata accessor for URLRequest()
{
  return type metadata accessor for URLRequest();
}

uint64_t static FormatStyle<>.dateTime.getter()
{
  return static FormatStyle<>.dateTime.getter();
}

uint64_t static FormatStyle<>.currency(code:)()
{
  return static FormatStyle<>.currency(code:)();
}

uint64_t static CharacterSet.alphanumerics.getter()
{
  return static CharacterSet.alphanumerics.getter();
}

uint64_t static CharacterSet.punctuationCharacters.getter()
{
  return static CharacterSet.punctuationCharacters.getter();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t CharacterSet.contains(_:)()
{
  return CharacterSet.contains(_:)();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.host.getter()
{
  return URLComponents.host.getter();
}

uint64_t URLComponents.host.setter()
{
  return URLComponents.host.setter();
}

uint64_t URLComponents.path.getter()
{
  return URLComponents.path.getter();
}

uint64_t URLComponents.path.setter()
{
  return URLComponents.path.setter();
}

uint64_t URLComponents.scheme.getter()
{
  return URLComponents.scheme.getter();
}

uint64_t URLComponents.scheme.setter()
{
  return URLComponents.scheme.setter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t URLComponents.init()()
{
  return URLComponents.init()();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t DateComponents.hour.getter()
{
  return DateComponents.hour.getter();
}

uint64_t DateComponents.hour.setter()
{
  return DateComponents.hour.setter();
}

uint64_t DateComponents.minute.getter()
{
  return DateComponents.minute.getter();
}

uint64_t DateComponents.minute.setter()
{
  return DateComponents.minute.setter();
}

uint64_t DateComponents.second.setter()
{
  return DateComponents.second.setter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t dispatch thunk of LocalizedError.recoverySuggestion.getter()
{
  return dispatch thunk of LocalizedError.recoverySuggestion.getter();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority()
{
  return type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority();
}

uint64_t AttributeScopes.AccessibilityAttributes.accessibilitySpeechAnnouncementPriority.getter()
{
  return AttributeScopes.AccessibilityAttributes.accessibilitySpeechAnnouncementPriority.getter();
}

uint64_t AttributedString.subscript.setter()
{
  return AttributedString.subscript.setter();
}

uint64_t AttributedString.init(stringLiteral:)()
{
  return AttributedString.init(stringLiteral:)();
}

uint64_t type metadata accessor for AttributedString()
{
  return type metadata accessor for AttributedString();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t FloatingPointFormatStyle.Percent.init(locale:)()
{
  return FloatingPointFormatStyle.Percent.init(locale:)();
}

uint64_t NSKeyValueObservedChange.newValue.getter()
{
  return NSKeyValueObservedChange.newValue.getter();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
}

uint64_t static NumberFormatStyleConfiguration.Precision.fractionLength(_:)()
{
  return static NumberFormatStyleConfiguration.Precision.fractionLength(_:)();
}

uint64_t type metadata accessor for NumberFormatStyleConfiguration.Precision()
{
  return type metadata accessor for NumberFormatStyleConfiguration.Precision();
}

uint64_t URL.description.getter()
{
  return URL.description.getter();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.pathExtension.getter()
{
  return URL.pathExtension.getter();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

uint64_t static URL.temporaryDirectory.getter()
{
  return static URL.temporaryDirectory.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingPathExtension()()
{
  return URL.deletingPathExtension()();
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.scheme.getter()
{
  return URL.scheme.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.FormatStyle.day(_:)()
{
  return Date.FormatStyle.day(_:)();
}

uint64_t Date.FormatStyle.year(_:)()
{
  return Date.FormatStyle.year(_:)();
}

uint64_t Date.FormatStyle.month(_:)()
{
  return Date.FormatStyle.month(_:)();
}

uint64_t static Date.FormatStyle.Symbol.Day.defaultDigits.getter()
{
  return static Date.FormatStyle.Symbol.Day.defaultDigits.getter();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Day()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Day();
}

uint64_t static Date.FormatStyle.Symbol.Year.defaultDigits.getter()
{
  return static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Year()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Year();
}

uint64_t static Date.FormatStyle.Symbol.Month.wide.getter()
{
  return static Date.FormatStyle.Symbol.Month.wide.getter();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Month()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Month();
}

uint64_t static Date.FormatStyle.Symbol.Weekday.wide.getter()
{
  return static Date.FormatStyle.Symbol.Weekday.wide.getter();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Weekday()
{
  return type metadata accessor for Date.FormatStyle.Symbol.Weekday();
}

uint64_t Date.FormatStyle.weekday(_:)()
{
  return Date.FormatStyle.weekday(_:)();
}

uint64_t type metadata accessor for Date.FormatStyle()
{
  return type metadata accessor for Date.FormatStyle();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

uint64_t Date.ISO8601FormatStyle.dateSeparator(_:)()
{
  return Date.ISO8601FormatStyle.dateSeparator(_:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return type metadata accessor for Date.ISO8601FormatStyle();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.formatted<A>(_:)()
{
  return Date.formatted<A>(_:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.identifier.getter()
{
  return Locale.identifier.getter();
}

uint64_t static Locale.preferredLanguages.getter()
{
  return static Locale.preferredLanguages.getter();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return static Locale.autoupdatingCurrent.getter();
}

uint64_t Locale.Region.identifier.getter()
{
  return Locale.Region.identifier.getter();
}

uint64_t type metadata accessor for Locale.Region()
{
  return type metadata accessor for Locale.Region();
}

uint64_t Locale.region.getter()
{
  return Locale.region.getter();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.isDateInToday(_:)()
{
  return Calendar.isDateInToday(_:)();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return Calendar.dateComponents(_:from:)();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)Calendar._bridgeToObjectiveC()();
}

uint64_t static Calendar.autoupdatingCurrent.getter()
{
  return static Calendar.autoupdatingCurrent.getter();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t Calendar.isDate(_:inSameDayAs:)()
{
  return Calendar.isDate(_:inSameDayAs:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return type metadata accessor for IndexSet.Index();
}

uint64_t IndexSet.makeIterator()()
{
  return IndexSet.makeIterator()();
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
}

uint64_t static IndexSet.== infix(_:_:)()
{
  return static IndexSet.== infix(_:_:)();
}

uint64_t static IndexSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexSet._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexSet.count.getter()
{
  return IndexSet.count.getter();
}

uint64_t IndexSet.first.getter()
{
  return IndexSet.first.getter();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1 = IndexSet.insert(_:)(a1);
  result.memberAfterInsert = v2;
  result.inserteCGFloat d = v1;
  return result;
}

uint64_t IndexSet.init(integer:)()
{
  return IndexSet.init(integer:)();
}

uint64_t IndexSet.isEmpty.getter()
{
  return IndexSet.isEmpty.getter();
}

Swift::Bool __swiftcall IndexSet.contains(_:)(Swift::Int a1)
{
  return IndexSet.contains(_:)(a1);
}

uint64_t IndexSet.init()()
{
  return IndexSet.init()();
}

uint64_t type metadata accessor for IndexSet()
{
  return type metadata accessor for IndexSet();
}

uint64_t TimeZone.identifier.getter()
{
  return TimeZone.identifier.getter();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t static TimeZone.current.getter()
{
  return static TimeZone.current.getter();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t static URLError.Code.badServerResponse.getter()
{
  return static URLError.Code.badServerResponse.getter();
}

uint64_t static URLError.Code.unknown.getter()
{
  return static URLError.Code.unknown.getter();
}

uint64_t type metadata accessor for URLError.Code()
{
  return type metadata accessor for URLError.Code();
}

uint64_t URLError._nsError.getter()
{
  return URLError._nsError.getter();
}

uint64_t type metadata accessor for URLError()
{
  return type metadata accessor for URLError();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.didSet<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.didSet<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.willSet<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.willSet<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t CLLocationUpdate.stationary.getter()
{
  return CLLocationUpdate.stationary.getter();
}

uint64_t static CLLocationUpdate.liveUpdates(_:)()
{
  return static CLLocationUpdate.liveUpdates(_:)();
}

uint64_t type metadata accessor for CLLocationUpdate.LiveConfiguration()
{
  return type metadata accessor for CLLocationUpdate.LiveConfiguration();
}

uint64_t CLLocationUpdate.Updates.makeAsyncIterator()()
{
  return CLLocationUpdate.Updates.makeAsyncIterator()();
}

uint64_t type metadata accessor for CLLocationUpdate.Updates.Iterator()
{
  return type metadata accessor for CLLocationUpdate.Updates.Iterator();
}

uint64_t type metadata accessor for CLLocationUpdate.Updates()
{
  return type metadata accessor for CLLocationUpdate.Updates();
}

uint64_t CLLocationUpdate.location.getter()
{
  return CLLocationUpdate.location.getter();
}

uint64_t type metadata accessor for CLLocationUpdate()
{
  return type metadata accessor for CLLocationUpdate();
}

Swift::Void __swiftcall CLBackgroundActivitySession.invalidate()()
{
}

uint64_t CLBackgroundActivitySession.init()()
{
  return CLBackgroundActivitySession.init()();
}

uint64_t type metadata accessor for CLBackgroundActivitySession()
{
  return type metadata accessor for CLBackgroundActivitySession();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t static RegexComponentBuilder.buildExpression<A>(_:)()
{
  return static RegexComponentBuilder.buildExpression<A>(_:)();
}

uint64_t static RegexComponentBuilder.buildPartialBlock<A>(first:)()
{
  return static RegexComponentBuilder.buildPartialBlock<A>(first:)();
}

uint64_t makeFactory()()
{
  return makeFactory()();
}

uint64_t CharacterClass.inverted.getter()
{
  return CharacterClass.inverted.getter();
}

uint64_t type metadata accessor for CharacterClass()
{
  return type metadata accessor for CharacterClass();
}

uint64_t Capture.init(_:)()
{
  return Capture.init(_:)();
}

uint64_t OneOrMore.init(_:)()
{
  return OneOrMore.init(_:)();
}

Swift::Void __swiftcall _AccessibilityNotifications.post()()
{
}

uint64_t type metadata accessor for AccessibilityNotification.Announcement()
{
  return type metadata accessor for AccessibilityNotification.Announcement();
}

uint64_t AccessibilityNotification.Announcement.init(_:)()
{
  return AccessibilityNotification.Announcement.init(_:)();
}

{
  return AccessibilityNotification.Announcement.init(_:)();
}

uint64_t type metadata accessor for AccessibilityNotification.ScreenChanged()
{
  return type metadata accessor for AccessibilityNotification.ScreenChanged();
}

uint64_t AccessibilityNotification.ScreenChanged.init(_:)()
{
  return AccessibilityNotification.ScreenChanged.init(_:)();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t dispatch thunk of DaemonSession.downloadedVoices(matching:reply:)()
{
  return dispatch thunk of DaemonSession.downloadedVoices(matching:reply:)();
}

uint64_t type metadata accessor for DaemonSession()
{
  return type metadata accessor for DaemonSession();
}

uint64_t dispatch thunk of SynthesisVoice.language.getter()
{
  return dispatch thunk of SynthesisVoice.language.getter();
}

uint64_t type metadata accessor for FBKSEvaluation.Action()
{
  return type metadata accessor for FBKSEvaluation.Action();
}

uint64_t type metadata accessor for FBKSEvaluation.Subject()
{
  return type metadata accessor for FBKSEvaluation.Subject();
}

uint64_t type metadata accessor for FBKSInteraction.FeatureDomain()
{
  return type metadata accessor for FBKSInteraction.FeatureDomain();
}

uint64_t FBKSInteraction.init(featureDomain:bundleID:prefillQuestions:originalAnnotatedContent:generatedAnnotatedContent:extraContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)()
{
  return FBKSInteraction.init(featureDomain:bundleID:prefillQuestions:originalAnnotatedContent:generatedAnnotatedContent:extraContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)();
}

uint64_t FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)()
{
  return FBKSInteraction.AnnotatedContent.init(payload:displayName:description:fileName:group:iconType:additionalInfo:)();
}

uint64_t type metadata accessor for FBKSInteraction.AnnotatedContent.IconType()
{
  return type metadata accessor for FBKSInteraction.AnnotatedContent.IconType();
}

uint64_t type metadata accessor for FBKSInteraction.AnnotatedContent()
{
  return type metadata accessor for FBKSInteraction.AnnotatedContent();
}

uint64_t dispatch thunk of FBKSInteraction.prefillQuestions.setter()
{
  return dispatch thunk of FBKSInteraction.prefillQuestions.setter();
}

uint64_t type metadata accessor for FBKSInteraction.Content()
{
  return type metadata accessor for FBKSInteraction.Content();
}

uint64_t type metadata accessor for FBKSInteraction()
{
  return type metadata accessor for FBKSInteraction();
}

uint64_t type metadata accessor for FBKSForm.Question()
{
  return type metadata accessor for FBKSForm.Question();
}

uint64_t Map.init<A>(bounds:interactionModes:scope:content:)()
{
  return Map.init<A>(bounds:interactionModes:scope:content:)();
}

uint64_t MapCameraBounds.init(centerCoordinateBounds:minimumDistance:maximumDistance:)()
{
  return MapCameraBounds.init(centerCoordinateBounds:minimumDistance:maximumDistance:)();
}

uint64_t type metadata accessor for MapCameraBounds()
{
  return type metadata accessor for MapCameraBounds();
}

uint64_t static MapInteractionModes.all.getter()
{
  return static MapInteractionModes.all.getter();
}

uint64_t static MapInteractionModes.zoom.getter()
{
  return static MapInteractionModes.zoom.getter();
}

uint64_t type metadata accessor for MapInteractionModes()
{
  return type metadata accessor for MapInteractionModes();
}

uint64_t MapCircle.init(center:radius:)()
{
  return MapCircle.init(center:radius:)();
}

uint64_t type metadata accessor for MapCircle()
{
  return type metadata accessor for MapCircle();
}

uint64_t static MapContent._mapContentCount(inputs:)()
{
  return static MapContent._mapContentCount(inputs:)();
}

uint64_t static MapContent._makeMapContent(content:inputs:)()
{
  return static MapContent._makeMapContent(content:inputs:)();
}

uint64_t MapContent.foregroundStyle<A>(_:)()
{
  return MapContent.foregroundStyle<A>(_:)();
}

uint64_t MapContent.annotationTitles(_:)()
{
  return MapContent.annotationTitles(_:)();
}

uint64_t MapContent.annotationSubtitles(_:)()
{
  return MapContent.annotationSubtitles(_:)();
}

uint64_t MapContent.tint<A>(_:)()
{
  return MapContent.tint<A>(_:)();
}

uint64_t MapContent.stroke<A>(_:lineWidth:)()
{
  return MapContent.stroke<A>(_:lineWidth:)();
}

uint64_t type metadata accessor for MapPolygon()
{
  return type metadata accessor for MapPolygon();
}

uint64_t Annotation.init<A>(_:coordinate:anchor:content:)()
{
  return Annotation.init<A>(_:coordinate:anchor:content:)();
}

uint64_t Marker.init(coordinate:label:)()
{
  return Marker.init(coordinate:label:)();
}

uint64_t FileRepresentation.init(contentType:shouldAttemptToOpenInPlace:exporting:importing:)()
{
  return FileRepresentation.init(contentType:shouldAttemptToOpenInPlace:exporting:importing:)();
}

uint64_t FileRepresentation.init(exportedContentType:shouldAllowToOpenInPlace:exporting:)()
{
  return FileRepresentation.init(exportedContentType:shouldAllowToOpenInPlace:exporting:)();
}

uint64_t SentTransferredFile.init(_:allowAccessingOriginalFile:)()
{
  return SentTransferredFile.init(_:allowAccessingOriginalFile:)();
}

uint64_t TransferRepresentation.exportingCondition(_:)()
{
  return TransferRepresentation.exportingCondition(_:)();
}

uint64_t ReceivedTransferredFile.file.getter()
{
  return ReceivedTransferredFile.file.getter();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason();
}

uint64_t GenerativeModelsAvailability.Availability.RestrictedInfo.reasons.getter()
{
  return GenerativeModelsAvailability.Availability.RestrictedInfo.reasons.getter();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
}

uint64_t GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter()
{
  return GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
}

uint64_t static GenerativeModelsAvailability.Availability.== infix(_:_:)()
{
  return static GenerativeModelsAvailability.Availability.== infix(_:_:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Availability()
{
  return type metadata accessor for GenerativeModelsAvailability.Availability();
}

uint64_t GenerativeModelsAvailability.Parameters.init(useCaseIdentifiers:)()
{
  return GenerativeModelsAvailability.Parameters.init(useCaseIdentifiers:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability.Parameters()
{
  return type metadata accessor for GenerativeModelsAvailability.Parameters();
}

uint64_t GenerativeModelsAvailability.availability.getter()
{
  return GenerativeModelsAvailability.availability.getter();
}

uint64_t static GenerativeModelsAvailability.current(parameters:)()
{
  return static GenerativeModelsAvailability.current(parameters:)();
}

uint64_t type metadata accessor for GenerativeModelsAvailability()
{
  return type metadata accessor for GenerativeModelsAvailability();
}

uint64_t _RegexFactory.accumulate<A, B, C>(_:_:)()
{
  return _RegexFactory.accumulate<A, B, C>(_:_:)();
}

uint64_t _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)()
{
  return _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
}

uint64_t _RegexFactory.capture<A, B>(_:)()
{
  return _RegexFactory.capture<A, B>(_:)();
}

uint64_t _RegexFactory.oneOrMore<A, B>(_:_:)()
{
  return _RegexFactory.oneOrMore<A, B>(_:_:)();
}

uint64_t type metadata accessor for _RegexFactory()
{
  return type metadata accessor for _RegexFactory();
}

uint64_t static RegexComponent<>.whitespace.getter()
{
  return static RegexComponent<>.whitespace.getter();
}

uint64_t static RegexComponent<>.word.getter()
{
  return static RegexComponent<>.word.getter();
}

uint64_t type metadata accessor for RegexRepetitionBehavior()
{
  return type metadata accessor for RegexRepetitionBehavior();
}

uint64_t Regex.init<A>(_:)()
{
  return Regex.init<A>(_:)();
}

uint64_t Regex.Match.output.getter()
{
  return Regex.Match.output.getter();
}

uint64_t VisualQueryContext.init(applicationIdentifier:queryID:location:timestamp:customDetectorThreshold:)()
{
  return VisualQueryContext.init(applicationIdentifier:queryID:location:timestamp:customDetectorThreshold:)();
}

uint64_t VisualQueryContext.init(applicationIdentifier:queryID:location:)()
{
  return VisualQueryContext.init(applicationIdentifier:queryID:location:)();
}

uint64_t type metadata accessor for VisualQueryContext()
{
  return type metadata accessor for VisualQueryContext();
}

uint64_t VisualSearchResult.regionResults.getter()
{
  return VisualSearchResult.regionResults.getter();
}

uint64_t type metadata accessor for VisualSearchResult()
{
  return type metadata accessor for VisualSearchResult();
}

uint64_t type metadata accessor for VisualUnderstanding.Annotation()
{
  return type metadata accessor for VisualUnderstanding.Annotation();
}

uint64_t VisualUnderstanding.DomainInfo.detectionInfo.getter()
{
  return VisualUnderstanding.DomainInfo.detectionInfo.getter();
}

uint64_t VisualUnderstanding.DomainInfo.displayLabel.getter()
{
  return VisualUnderstanding.DomainInfo.displayLabel.getter();
}

uint64_t VisualUnderstanding.DomainInfo.domain.getter()
{
  return VisualUnderstanding.DomainInfo.domain.getter();
}

uint64_t VisualUnderstanding.DomainInfo.glyphName.getter()
{
  return VisualUnderstanding.DomainInfo.glyphName.getter();
}

uint64_t type metadata accessor for VisualUnderstanding.DomainInfo()
{
  return type metadata accessor for VisualUnderstanding.DomainInfo();
}

uint64_t VisualUnderstanding.ImageRegion.domainInfo.getter()
{
  return VisualUnderstanding.ImageRegion.domainInfo.getter();
}

uint64_t VisualUnderstanding.ImageRegion.embeddings.getter()
{
  return VisualUnderstanding.ImageRegion.embeddings.getter();
}

uint64_t VisualUnderstanding.ImageRegion.boundingBox.getter()
{
  return VisualUnderstanding.ImageRegion.boundingBox.getter();
}

uint64_t VisualUnderstanding.ImageRegion.getBrandDistribution()()
{
  return VisualUnderstanding.ImageRegion.getBrandDistribution()();
}

uint64_t VisualUnderstanding.ImageRegion.Embedding.features.getter()
{
  return VisualUnderstanding.ImageRegion.Embedding.features.getter();
}

uint64_t type metadata accessor for VisualUnderstanding.ImageRegion.Embedding()
{
  return type metadata accessor for VisualUnderstanding.ImageRegion.Embedding();
}

uint64_t type metadata accessor for VisualUnderstanding.ImageRegion()
{
  return type metadata accessor for VisualUnderstanding.ImageRegion();
}

uint64_t VisualUnderstanding.imageRegions.getter()
{
  return VisualUnderstanding.imageRegions.getter();
}

uint64_t VisualUnderstanding.payload.getter()
{
  return VisualUnderstanding.payload.getter();
}

uint64_t type metadata accessor for VisualUnderstanding()
{
  return type metadata accessor for VisualUnderstanding();
}

uint64_t VisualUnderstanding.init(_:annotation:payload:)()
{
  return VisualUnderstanding.init(_:annotation:payload:)();
}

uint64_t static VisualDomain.storefront.getter()
{
  return static VisualDomain.storefront.getter();
}

uint64_t static VisualDomain.book.getter()
{
  return static VisualDomain.book.getter();
}

uint64_t static VisualDomain.cats.getter()
{
  return static VisualDomain.cats.getter();
}

uint64_t static VisualDomain.dogs.getter()
{
  return static VisualDomain.dogs.getter();
}

uint64_t VisualDomain.name.getter()
{
  return VisualDomain.name.getter();
}

uint64_t static VisualDomain.album.getter()
{
  return static VisualDomain.album.getter();
}

uint64_t static VisualDomain.birds.getter()
{
  return static VisualDomain.birds.getter();
}

uint64_t static VisualDomain.nature.getter()
{
  return static VisualDomain.nature.getter();
}

uint64_t static VisualDomain.animals.getter()
{
  return static VisualDomain.animals.getter();
}

uint64_t static VisualDomain.insects.getter()
{
  return static VisualDomain.insects.getter();
}

uint64_t static VisualDomain.mammals.getter()
{
  return static VisualDomain.mammals.getter();
}

uint64_t static VisualDomain.landmark.getter()
{
  return static VisualDomain.landmark.getter();
}

uint64_t VisualDomain.rawValue.getter()
{
  return VisualDomain.rawValue.getter();
}

uint64_t static VisualDomain.reptiles.getter()
{
  return static VisualDomain.reptiles.getter();
}

uint64_t type metadata accessor for VisualDomain()
{
  return type metadata accessor for VisualDomain();
}

Swift::Void __swiftcall VisualIntelligenceService.warmupSearch()()
{
}

uint64_t VisualIntelligenceService.__allocating_init(serviceOptions:)()
{
  return VisualIntelligenceService.__allocating_init(serviceOptions:)();
}

uint64_t VisualIntelligenceService.parseCameraFrame(visualQueryContext:image:normalizedRegionOfInterest:annotation:cachedResults:completion:)()
{
  return VisualIntelligenceService.parseCameraFrame(visualQueryContext:image:normalizedRegionOfInterest:annotation:cachedResults:completion:)();
}

uint64_t VisualIntelligenceService.searchCameraFrame(visualQueryContext:visualUnderstanding:completion:)()
{
  return VisualIntelligenceService.searchCameraFrame(visualQueryContext:visualUnderstanding:completion:)();
}

uint64_t VisualIntelligenceService.Options.init(customizedEndpoint:networkTimeoutInterval:debugParameters:mlEngineType:)()
{
  return VisualIntelligenceService.Options.init(customizedEndpoint:networkTimeoutInterval:debugParameters:mlEngineType:)();
}

uint64_t type metadata accessor for VisualIntelligenceService.Options()
{
  return type metadata accessor for VisualIntelligenceService.Options();
}

uint64_t type metadata accessor for VisualIntelligenceService()
{
  return type metadata accessor for VisualIntelligenceService();
}

uint64_t PixelImage.init(pixelBuffer:orientation:)()
{
  return PixelImage.init(pixelBuffer:orientation:)();
}

uint64_t type metadata accessor for PixelImage()
{
  return type metadata accessor for PixelImage();
}

uint64_t ParseResult.visualUnderstanding.getter()
{
  return ParseResult.visualUnderstanding.getter();
}

uint64_t type metadata accessor for ParseResult()
{
  return type metadata accessor for ParseResult();
}

uint64_t type metadata accessor for MLEngineType()
{
  return type metadata accessor for MLEngineType();
}

uint64_t NormalizedRect.bottomLeftCGRect.getter()
{
  return NormalizedRect.bottomLeftCGRect.getter();
}

uint64_t NormalizedRect.width.getter()
{
  return NormalizedRect.width.getter();
}

uint64_t NormalizedRect.height.getter()
{
  return NormalizedRect.height.getter();
}

uint64_t NormalizedRect.origin.getter()
{
  return NormalizedRect.origin.getter();
}

uint64_t type metadata accessor for NormalizedRect()
{
  return type metadata accessor for NormalizedRect();
}

uint64_t ObjectKnowledge.thumbnailURL.getter()
{
  return ObjectKnowledge.thumbnailURL.getter();
}

uint64_t ObjectKnowledge.knowledgeGraphID.getter()
{
  return ObjectKnowledge.knowledgeGraphID.getter();
}

uint64_t ObjectKnowledge.shortDescription.getter()
{
  return ObjectKnowledge.shortDescription.getter();
}

uint64_t ObjectKnowledge.detailedDescription.getter()
{
  return ObjectKnowledge.detailedDescription.getter();
}

uint64_t ObjectKnowledge.knowledgeProperties.getter()
{
  return ObjectKnowledge.knowledgeProperties.getter();
}

uint64_t ObjectKnowledge.thumbnailAspectRatio.getter()
{
  return ObjectKnowledge.thumbnailAspectRatio.getter();
}

uint64_t ObjectKnowledge.webURL.getter()
{
  return ObjectKnowledge.webURL.getter();
}

uint64_t ObjectKnowledge.Property.name.getter()
{
  return ObjectKnowledge.Property.name.getter();
}

uint64_t ObjectKnowledge.Property.value.getter()
{
  return ObjectKnowledge.Property.value.getter();
}

uint64_t type metadata accessor for ObjectKnowledge.Property()
{
  return type metadata accessor for ObjectKnowledge.Property();
}

uint64_t type metadata accessor for ObjectKnowledge()
{
  return type metadata accessor for ObjectKnowledge();
}

uint64_t RegionSearchResult.ResultItem.domain.getter()
{
  return RegionSearchResult.ResultItem.domain.getter();
}

uint64_t RegionSearchResult.ResultItem.caption.getter()
{
  return RegionSearchResult.ResultItem.caption.getter();
}

uint64_t RegionSearchResult.ResultItem.knowledge.getter()
{
  return RegionSearchResult.ResultItem.knowledge.getter();
}

uint64_t type metadata accessor for RegionSearchResult.ResultItem()
{
  return type metadata accessor for RegionSearchResult.ResultItem();
}

uint64_t RegionSearchResult.resultItems.getter()
{
  return RegionSearchResult.resultItems.getter();
}

uint64_t RegionSearchResult.resultSection.getter()
{
  return RegionSearchResult.resultSection.getter();
}

uint64_t RegionSearchResult.glyphName.getter()
{
  return RegionSearchResult.glyphName.getter();
}

uint64_t type metadata accessor for RegionSearchResult()
{
  return type metadata accessor for RegionSearchResult();
}

uint64_t dispatch thunk of ScanwaveViewController.imageConfiguration.setter()
{
  return dispatch thunk of ScanwaveViewController.imageConfiguration.setter();
}

uint64_t dispatch thunk of ScanwaveViewController.activate()()
{
  return dispatch thunk of ScanwaveViewController.activate()();
}

uint64_t type metadata accessor for ScanwaveViewController()
{
  return type metadata accessor for ScanwaveViewController();
}

uint64_t ScanwaveImageConfiguration.init(image:depthImage:)()
{
  return ScanwaveImageConfiguration.init(image:depthImage:)();
}

uint64_t type metadata accessor for ScanwaveImageConfiguration()
{
  return type metadata accessor for ScanwaveImageConfiguration();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t UnknownStorage.init()()
{
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularFloatField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularFloatField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt32Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t Message.isInitialized.getter()
{
  return Message.isInitialized.getter();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

uint64_t Message.serializedData(partial:)()
{
  return Message.serializedData(partial:)();
}

uint64_t Message.hash(into:)()
{
  return Message.hash(into:)();
}

uint64_t static Message.with(_:)()
{
  return static Message.with(_:)();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for _NameMap()
{
  return type metadata accessor for _NameMap();
}

uint64_t UTType.identifier.getter()
{
  return UTType.identifier.getter();
}

uint64_t static UTType.jpeg.getter()
{
  return static UTType.jpeg.getter();
}

uint64_t static UTType.movie.getter()
{
  return static UTType.movie.getter();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t type metadata accessor for GATInteractionMode()
{
  return type metadata accessor for GATInteractionMode();
}

uint64_t DefaultPromptFactory.createPrompt(appBundleID:interactionMode:)()
{
  return DefaultPromptFactory.createPrompt(appBundleID:interactionMode:)();
}

uint64_t static DefaultPromptFactory.instance.getter()
{
  return static DefaultPromptFactory.instance.getter();
}

uint64_t type metadata accessor for DefaultPromptFactory()
{
  return type metadata accessor for DefaultPromptFactory();
}

uint64_t static Prompts.toolUseTamalePrompt.getter()
{
  return static Prompts.toolUseTamalePrompt.getter();
}

uint64_t type metadata accessor for Prompts()
{
  return type metadata accessor for Prompts();
}

uint64_t static Overrides.tamaleAppDebugPromptOverridePath.getter()
{
  return static Overrides.tamaleAppDebugPromptOverridePath.getter();
}

uint64_t GenerativeAssistantSettingsOnboarding.init(enablementDelegate:requestType:)()
{
  return GenerativeAssistantSettingsOnboarding.init(enablementDelegate:requestType:)();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsOnboarding()
{
  return type metadata accessor for GenerativeAssistantSettingsOnboarding();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.setEnabled(_:)()
{
  return static GenerativeAssistantSettingsUserDefaults.setEnabled(_:)();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.isEnabled()()
{
  return static GenerativeAssistantSettingsUserDefaults.isEnabled()();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsUserDefaults()
{
  return type metadata accessor for GenerativeAssistantSettingsUserDefaults();
}

uint64_t type metadata accessor for RequestType()
{
  return type metadata accessor for RequestType();
}

uint64_t type metadata accessor for EnablementUIDismissType()
{
  return type metadata accessor for EnablementUIDismissType();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logger:)()
{
  return OSSignposter.init(logger:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t type metadata accessor for ClientProcessInfo()
{
  return type metadata accessor for ClientProcessInfo();
}

uint64_t type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions.Source()
{
  return type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions.Source();
}

uint64_t SummarizationClient.TextAssistantSummarizationOptions.init(source:originatingProcess:)()
{
  return SummarizationClient.TextAssistantSummarizationOptions.init(source:originatingProcess:)();
}

uint64_t type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions()
{
  return type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions();
}

uint64_t SummarizationClient.isTextEligibleForSummarization(_:options:requestIdentifier:)()
{
  return SummarizationClient.isTextEligibleForSummarization(_:options:requestIdentifier:)();
}

uint64_t SummarizationClient.TextAssistantSummary.safetyClassification.getter()
{
  return SummarizationClient.TextAssistantSummary.safetyClassification.getter();
}

uint64_t SummarizationClient.TextAssistantSummary.content.getter()
{
  return SummarizationClient.TextAssistantSummary.content.getter();
}

uint64_t SummarizationClient.init()()
{
  return SummarizationClient.init()();
}

uint64_t type metadata accessor for SummarizationClient()
{
  return type metadata accessor for SummarizationClient();
}

uint64_t static TextCompositionClient.textCompositionClientProcessIdentifierKey.getter()
{
  return static TextCompositionClient.textCompositionClientProcessIdentifierKey.getter();
}

uint64_t static TextCompositionClient.textCompositionClientAppProcessIdentifierKey.getter()
{
  return static TextCompositionClient.textCompositionClientAppProcessIdentifierKey.getter();
}

uint64_t type metadata accessor for TextCompositionClient()
{
  return type metadata accessor for TextCompositionClient();
}

uint64_t SummarySafetyClassification.isSafe.getter()
{
  return SummarySafetyClassification.isSafe.getter();
}

uint64_t type metadata accessor for SummarySafetyClassification()
{
  return type metadata accessor for SummarySafetyClassification();
}

uint64_t log(_:)()
{
  return log(_:)();
}

uint64_t noErr.getter()
{
  return noErr.getter();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return ConnectablePublisher.autoconnect()();
}

uint64_t Subject<>.send()()
{
  return Subject<>.send()();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t type metadata accessor for NWInterface.InterfaceType()
{
  return type metadata accessor for NWInterface.InterfaceType();
}

uint64_t NWPathMonitor.pathUpdateHandler.setter()
{
  return NWPathMonitor.pathUpdateHandler.setter();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return NWPathMonitor.start(queue:)();
}

uint64_t NWPathMonitor.init()()
{
  return NWPathMonitor.init()();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return type metadata accessor for NWPathMonitor();
}

uint64_t NWPath.debugDescription.getter()
{
  return NWPath.debugDescription.getter();
}

uint64_t NWPath.usesInterfaceType(_:)()
{
  return NWPath.usesInterfaceType(_:)();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return type metadata accessor for NWPath.Status();
}

uint64_t NWPath.status.getter()
{
  return NWPath.status.getter();
}

uint64_t type metadata accessor for NWPath()
{
  return type metadata accessor for NWPath();
}

uint64_t Animatable<>.animatableData.modify()
{
  return Animatable<>.animatableData.modify();
}

uint64_t static Animatable<>._makeAnimatable(value:inputs:)()
{
  return static Animatable<>._makeAnimatable(value:inputs:)();
}

uint64_t static Animatable._makeAnimatable(value:inputs:)()
{
  return static Animatable._makeAnimatable(value:inputs:)();
}

uint64_t AsyncImage.init(url:scale:transaction:content:)()
{
  return AsyncImage.init(url:scale:transaction:content:)();
}

uint64_t static ButtonRole.destructive.getter()
{
  return static ButtonRole.destructive.getter();
}

uint64_t static ButtonRole.cancel.getter()
{
  return static ButtonRole.cancel.getter();
}

uint64_t type metadata accessor for ButtonRole()
{
  return type metadata accessor for ButtonRole();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t FocusState.wrappedValue.getter()
{
  return FocusState.wrappedValue.getter();
}

uint64_t FocusState.wrappedValue.setter()
{
  return FocusState.wrappedValue.setter();
}

uint64_t FocusState.projectedValue.getter()
{
  return FocusState.projectedValue.getter();
}

uint64_t FocusState.Binding.wrappedValue.getter()
{
  return FocusState.Binding.wrappedValue.getter();
}

uint64_t FocusState.Binding.wrappedValue.setter()
{
  return FocusState.Binding.wrappedValue.setter();
}

uint64_t FocusState.Binding.projectedValue.getter()
{
  return FocusState.Binding.projectedValue.getter();
}

uint64_t FocusState.init<>()()
{
  return FocusState.init<>()();
}

uint64_t type metadata accessor for ScrollView()
{
  return type metadata accessor for ScrollView();
}

uint64_t ScrollView.init(_:showsIndicators:content:)()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t TapGesture.init(count:)()
{
  return TapGesture.init(count:)();
}

uint64_t type metadata accessor for TapGesture()
{
  return type metadata accessor for TapGesture();
}

uint64_t Transition._makeContentTransition(transition:)()
{
  return Transition._makeContentTransition(transition:)();
}

uint64_t static Transition.properties.getter()
{
  return static Transition.properties.getter();
}

uint64_t Transition.combined<A>(with:)()
{
  return Transition.combined<A>(with:)();
}

uint64_t Transition.animation(_:)()
{
  return Transition.animation(_:)();
}

uint64_t static ColorScheme.== infix(_:_:)()
{
  return static ColorScheme.== infix(_:_:)();
}

uint64_t type metadata accessor for ColorScheme()
{
  return type metadata accessor for ColorScheme();
}

uint64_t type metadata accessor for ControlSize()
{
  return type metadata accessor for ControlSize();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)()
{
  return DragGesture.init<A>(minimumDistance:coordinateSpace:)();
}

uint64_t DragGesture.Value.translation.getter()
{
  return DragGesture.Value.translation.getter();
}

uint64_t DragGesture.Value.startLocation.getter()
{
  return DragGesture.Value.startLocation.getter();
}

uint64_t DragGesture.Value.location.getter()
{
  return DragGesture.Value.location.getter();
}

uint64_t type metadata accessor for DragGesture()
{
  return type metadata accessor for DragGesture();
}

uint64_t type metadata accessor for Environment.Content()
{
  return type metadata accessor for Environment.Content();
}

uint64_t Environment.init<A>(_:)()
{
  return Environment.init<A>(_:)();
}

uint64_t static GestureMask.all.getter()
{
  return static GestureMask.all.getter();
}

uint64_t static GestureMask.subviews.getter()
{
  return static GestureMask.subviews.getter();
}

uint64_t static ShadowStyle.inner(color:radius:x:y:)()
{
  return static ShadowStyle.inner(color:radius:x:y:)();
}

uint64_t type metadata accessor for ShadowStyle()
{
  return type metadata accessor for ShadowStyle();
}

uint64_t StateObject.wrappedValue.getter()
{
  return StateObject.wrappedValue.getter();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
}

uint64_t static SubmitLabel.done.getter()
{
  return static SubmitLabel.done.getter();
}

uint64_t type metadata accessor for SubmitLabel()
{
  return type metadata accessor for SubmitLabel();
}

uint64_t ToolbarItem<>.init(placement:content:)()
{
  return ToolbarItem<>.init(placement:content:)();
}

uint64_t Transaction.disablesAnimations.getter()
{
  return Transaction.disablesAnimations.getter();
}

uint64_t Transaction.animation.setter()
{
  return Transaction.animation.setter();
}

uint64_t type metadata accessor for _LayoutRoot()
{
  return type metadata accessor for _LayoutRoot();
}

uint64_t _LayoutRoot.init(_:)()
{
  return _LayoutRoot.init(_:)();
}

uint64_t type metadata accessor for _MaskEffect()
{
  return type metadata accessor for _MaskEffect();
}

uint64_t GestureState.init(wrappedValue:)()
{
  return GestureState.init(wrappedValue:)();
}

uint64_t GestureState.projectedValue.getter()
{
  return GestureState.projectedValue.getter();
}

uint64_t MeshGradient.init(width:height:locations:colors:background:smoothsColors:colorSpace:)()
{
  return MeshGradient.init(width:height:locations:colors:background:smoothsColors:colorSpace:)();
}

uint64_t type metadata accessor for MeshGradient.Colors()
{
  return type metadata accessor for MeshGradient.Colors();
}

uint64_t type metadata accessor for MeshGradient.Locations()
{
  return type metadata accessor for MeshGradient.Locations();
}

uint64_t type metadata accessor for MeshGradient()
{
  return type metadata accessor for MeshGradient();
}

uint64_t ProgressView<>.init<>()()
{
  return ProgressView<>.init<>()();
}

uint64_t ProgressView<>.init<>(_:)()
{
  return ProgressView<>.init<>(_:)();
}

uint64_t TimelineView.Context.date.getter()
{
  return TimelineView.Context.date.getter();
}

uint64_t type metadata accessor for TimelineView.Context()
{
  return type metadata accessor for TimelineView.Context();
}

uint64_t TimelineView<>.init(_:content:)()
{
  return TimelineView<>.init(_:content:)();
}

uint64_t type metadata accessor for TimelineView()
{
  return type metadata accessor for TimelineView();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t VisualEffect.colorEffect(_:isEnabled:)()
{
  return VisualEffect.colorEffect(_:isEnabled:)();
}

uint64_t VisualEffect.offset(x:y:)()
{
  return VisualEffect.offset(x:y:)();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t static AnyTransition.asymmetric(insertion:removal:)()
{
  return static AnyTransition.asymmetric(insertion:removal:)();
}

uint64_t static AnyTransition.blur(radius:)()
{
  return static AnyTransition.blur(radius:)();
}

uint64_t static AnyTransition.move(edge:)()
{
  return static AnyTransition.move(edge:)();
}

uint64_t static AnyTransition.scale(scale:anchor:)()
{
  return static AnyTransition.scale(scale:anchor:)();
}

uint64_t static AnyTransition.slide.getter()
{
  return static AnyTransition.slide.getter();
}

uint64_t static AnyTransition.opacity.getter()
{
  return static AnyTransition.opacity.getter();
}

uint64_t AnyTransition.combined(with:)()
{
  return AnyTransition.combined(with:)();
}

uint64_t static AnyTransition.modifier<A>(active:identity:)()
{
  return static AnyTransition.modifier<A>(active:identity:)();
}

uint64_t AnyTransition.animation(_:)()
{
  return AnyTransition.animation(_:)();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return AnyTransition.init<A>(_:)();
}

Swift::Void __swiftcall DismissAction.callAsFunction()()
{
}

uint64_t type metadata accessor for DismissAction()
{
  return type metadata accessor for DismissAction();
}

uint64_t GeometryProxy.safeAreaInsets.getter()
{
  return GeometryProxy.safeAreaInsets.getter();
}

uint64_t GeometryProxy.size.getter()
{
  return GeometryProxy.size.getter();
}

uint64_t GeometryProxy.frame<A>(in:)()
{
  return GeometryProxy.frame<A>(in:)();
}

uint64_t GeometryProxy.bounds(of:)()
{
  return GeometryProxy.bounds(of:)();
}

uint64_t type metadata accessor for GeometryProxy()
{
  return type metadata accessor for GeometryProxy();
}

uint64_t ImageRenderer.cgImage.getter()
{
  return ImageRenderer.cgImage.getter();
}

uint64_t ImageRenderer.scale.setter()
{
  return ImageRenderer.scale.setter();
}

uint64_t ImageRenderer.init(content:)()
{
  return ImageRenderer.init(content:)();
}

uint64_t LayoutSubview.dimensions(in:)()
{
  return LayoutSubview.dimensions(in:)();
}

uint64_t LayoutSubview.sizeThatFits(_:)()
{
  return LayoutSubview.sizeThatFits(_:)();
}

uint64_t LayoutSubview.containerValues.getter()
{
  return LayoutSubview.containerValues.getter();
}

uint64_t LayoutSubview.place(at:anchor:proposal:)()
{
  return LayoutSubview.place(at:anchor:proposal:)();
}

uint64_t type metadata accessor for LayoutSubview()
{
  return type metadata accessor for LayoutSubview();
}

uint64_t OpenURLAction.init(handler:)()
{
  return OpenURLAction.init(handler:)();
}

uint64_t type metadata accessor for OpenURLAction()
{
  return type metadata accessor for OpenURLAction();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t static ShaderLibrary.subscript.getter()
{
  return static ShaderLibrary.subscript.getter();
}

uint64_t type metadata accessor for _TaskModifier()
{
  return type metadata accessor for _TaskModifier();
}

uint64_t type metadata accessor for _VariadicView.Tree()
{
  return type metadata accessor for _VariadicView.Tree();
}

uint64_t _VariadicView.Tree.init(_:content:)()
{
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t withAnimation<A>(_:_:)()
{
  return withAnimation<A>(_:_:)();
}

uint64_t static EnvironmentKey._valuesEqual(_:_:)()
{
  return static EnvironmentKey._valuesEqual(_:_:)();
}

uint64_t InsetListStyle.init()()
{
  return InsetListStyle.init()();
}

uint64_t type metadata accessor for InsetListStyle()
{
  return type metadata accessor for InsetListStyle();
}

uint64_t type metadata accessor for LayoutSubviews()
{
  return type metadata accessor for LayoutSubviews();
}

uint64_t LayoutSubviews.subscript.getter()
{
  return LayoutSubviews.subscript.getter();
}

uint64_t LinearGradient.init(gradient:startPoint:endPoint:)()
{
  return LinearGradient.init(gradient:startPoint:endPoint:)();
}

uint64_t MagnifyGesture.init(minimumScaleDelta:)()
{
  return MagnifyGesture.init(minimumScaleDelta:)();
}

uint64_t MagnifyGesture.Value.magnification.getter()
{
  return MagnifyGesture.Value.magnification.getter();
}

uint64_t type metadata accessor for MagnifyGesture()
{
  return type metadata accessor for MagnifyGesture();
}

uint64_t NavigationLink.init(destination:label:)()
{
  return NavigationLink.init(destination:label:)();
}

uint64_t type metadata accessor for NavigationPath()
{
  return type metadata accessor for NavigationPath();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t ShaderFunction.dynamicallyCall(withArguments:)()
{
  return ShaderFunction.dynamicallyCall(withArguments:)();
}

uint64_t type metadata accessor for ShaderFunction()
{
  return type metadata accessor for ShaderFunction();
}

uint64_t static SubmitTriggers.text.getter()
{
  return static SubmitTriggers.text.getter();
}

uint64_t type metadata accessor for SubmitTriggers()
{
  return type metadata accessor for SubmitTriggers();
}

uint64_t static SymbolVariants.fill.getter()
{
  return static SymbolVariants.fill.getter();
}

uint64_t type metadata accessor for SymbolVariants()
{
  return type metadata accessor for SymbolVariants();
}

uint64_t TintShapeStyle.init()()
{
  return TintShapeStyle.init()();
}

uint64_t type metadata accessor for TintShapeStyle()
{
  return type metadata accessor for TintShapeStyle();
}

uint64_t ViewDimensions.width.getter()
{
  return ViewDimensions.width.getter();
}

uint64_t ViewDimensions.height.getter()
{
  return ViewDimensions.height.getter();
}

uint64_t type metadata accessor for ViewDimensions()
{
  return type metadata accessor for ViewDimensions();
}

uint64_t AsyncImagePhase.image.getter()
{
  return AsyncImagePhase.image.getter();
}

uint64_t type metadata accessor for ContainerValues()
{
  return type metadata accessor for ContainerValues();
}

uint64_t ContainerValues.subscript.getter()
{
  return ContainerValues.subscript.getter();
}

uint64_t ContainerValues.subscript.setter()
{
  return ContainerValues.subscript.setter();
}

uint64_t type metadata accessor for DynamicTypeSize()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t GraphicsContext.translateBy(x:y:)()
{
  return GraphicsContext.translateBy(x:y:)();
}

uint64_t GraphicsContext.resolveSymbol<A>(id:)()
{
  return GraphicsContext.resolveSymbol<A>(id:)();
}

uint64_t type metadata accessor for GraphicsContext.ResolvedSymbol()
{
  return type metadata accessor for GraphicsContext.ResolvedSymbol();
}

uint64_t GraphicsContext.draw(_:at:anchor:)()
{
  return GraphicsContext.draw(_:at:anchor:)();
}

uint64_t GraphicsContext.draw(_:options:)()
{
  return GraphicsContext.draw(_:options:)();
}

uint64_t static GraphicsContext.Filter.blur(radius:options:)()
{
  return static GraphicsContext.Filter.blur(radius:options:)();
}

uint64_t type metadata accessor for GraphicsContext.Filter()
{
  return type metadata accessor for GraphicsContext.Filter();
}

uint64_t GraphicsContext.stroke(_:with:lineWidth:)()
{
  return GraphicsContext.stroke(_:with:lineWidth:)();
}

uint64_t static GraphicsContext.Shading.color(_:)()
{
  return static GraphicsContext.Shading.color(_:)();
}

uint64_t type metadata accessor for GraphicsContext.Shading()
{
  return type metadata accessor for GraphicsContext.Shading();
}

uint64_t GraphicsContext.opacity.setter()
{
  return GraphicsContext.opacity.setter();
}

uint64_t GraphicsContext.addFilter(_:options:)()
{
  return GraphicsContext.addFilter(_:options:)();
}

uint64_t ModifiedContent<>.accessibilityLabel(_:)()
{
  return ModifiedContent<>.accessibilityLabel(_:)();
}

uint64_t ModifiedContent<>.accessibilityValue(_:)()
{
  return ModifiedContent<>.accessibilityValue(_:)();
}

uint64_t ModifiedContent<>.accessibilityAction(named:_:)()
{
  return ModifiedContent<>.accessibilityAction(named:_:)();
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:)()
{
  return ModifiedContent<>.accessibilityIdentifier(_:)();
}

uint64_t ModifiedContent<>.accessibilityAdjustableAction(_:)()
{
  return ModifiedContent<>.accessibilityAdjustableAction(_:)();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t NavigationStack.init<>(root:)()
{
  return NavigationStack.init<>(root:)();
}

uint64_t type metadata accessor for NavigationStack()
{
  return type metadata accessor for NavigationStack();
}

uint64_t static SafeAreaRegions.all.getter()
{
  return static SafeAreaRegions.all.getter();
}

uint64_t static SafeAreaRegions.keyboard.getter()
{
  return static SafeAreaRegions.keyboard.getter();
}

uint64_t type metadata accessor for ScaleTransition()
{
  return type metadata accessor for ScaleTransition();
}

uint64_t ScaleTransition.init(_:anchor:)()
{
  return ScaleTransition.init(_:anchor:)();
}

uint64_t SlideTransition.init()()
{
  return SlideTransition.init()();
}

uint64_t type metadata accessor for SlideTransition()
{
  return type metadata accessor for SlideTransition();
}

uint64_t TransitionPhase.isIdentity.getter()
{
  return TransitionPhase.isIdentity.getter();
}

uint64_t LongPressGesture.init(minimumDuration:maximumDistance:)()
{
  return LongPressGesture.init(minimumDuration:maximumDistance:)();
}

uint64_t type metadata accessor for LongPressGesture()
{
  return type metadata accessor for LongPressGesture();
}

uint64_t MaterialProvider.resolveForegroundStyle(level:in:)()
{
  return MaterialProvider.resolveForegroundStyle(level:in:)();
}

uint64_t PlainButtonStyle.init()()
{
  return PlainButtonStyle.init()();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t type metadata accessor for RoundedRectangle()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t type metadata accessor for TagValueTraitKey.Value()
{
  return type metadata accessor for TagValueTraitKey.Value();
}

uint64_t type metadata accessor for TagValueTraitKey()
{
  return type metadata accessor for TagValueTraitKey();
}

uint64_t type metadata accessor for _BlendModeEffect()
{
  return type metadata accessor for _BlendModeEffect();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t type metadata accessor for _OverlayModifier()
{
  return type metadata accessor for _OverlayModifier();
}

uint64_t static ButtonBorderShape.capsule.getter()
{
  return static ButtonBorderShape.capsule.getter();
}

uint64_t type metadata accessor for ButtonBorderShape()
{
  return type metadata accessor for ButtonBorderShape();
}

uint64_t static ContentShapeKinds.accessibility.getter()
{
  return static ContentShapeKinds.accessibility.getter();
}

uint64_t type metadata accessor for ContentShapeKinds()
{
  return type metadata accessor for ContentShapeKinds();
}

uint64_t static ContentTransition.symbolEffect<A>(_:options:)()
{
  return static ContentTransition.symbolEffect<A>(_:options:)();
}

uint64_t type metadata accessor for ContentTransition()
{
  return type metadata accessor for ContentTransition();
}

uint64_t type metadata accessor for EmptyVisualEffect()
{
  return type metadata accessor for EmptyVisualEffect();
}

uint64_t EnvironmentValues.isModernizedSnippet.getter()
{
  return EnvironmentValues.isModernizedSnippet.getter();
}

uint64_t EnvironmentValues.isModernizedSnippet.setter()
{
  return EnvironmentValues.isModernizedSnippet.setter();
}

uint64_t EnvironmentValues.isSmartDialog.getter()
{
  return EnvironmentValues.isSmartDialog.getter();
}

uint64_t EnvironmentValues.isSmartDialog.setter()
{
  return EnvironmentValues.isSmartDialog.setter();
}

uint64_t EnvironmentValues.imageScale.getter()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t EnvironmentValues.accentColor.getter()
{
  return EnvironmentValues.accentColor.getter();
}

uint64_t EnvironmentValues.accentColor.setter()
{
  return EnvironmentValues.accentColor.setter();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t EnvironmentValues.controlSize.getter()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t EnvironmentValues.displayScale.getter()
{
  return EnvironmentValues.displayScale.getter();
}

uint64_t EnvironmentValues.displayScale.setter()
{
  return EnvironmentValues.displayScale.setter();
}

uint64_t EnvironmentValues.sizeCategory.getter()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t EnvironmentValues.truncationMode.getter()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.finishLaunchTest.getter()
{
  return EnvironmentValues.finishLaunchTest.getter();
}

uint64_t EnvironmentValues.contentTransition.getter()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t EnvironmentValues.contentTransition.setter()
{
  return EnvironmentValues.contentTransition.setter();
}

uint64_t EnvironmentValues._buttonBorderShape.getter()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t EnvironmentValues._buttonBorderShape.setter()
{
  return EnvironmentValues._buttonBorderShape.setter();
}

uint64_t EnvironmentValues.minimumScaleFactor.getter()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t EnvironmentValues.minimumScaleFactor.setter()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t EnvironmentValues.symbolRenderingMode.getter()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t EnvironmentValues.symbolRenderingMode.setter()
{
  return EnvironmentValues.symbolRenderingMode.setter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.withCurrentHostingController.getter()
{
  return EnvironmentValues.withCurrentHostingController.getter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t EnvironmentValues.tint.getter()
{
  return EnvironmentValues.tint.getter();
}

uint64_t EnvironmentValues.tint.setter()
{
  return EnvironmentValues.tint.setter();
}

uint64_t EnvironmentValues.dismiss.getter()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t EnvironmentValues.openURL.getter()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t EnvironmentValues.openURL.setter()
{
  return EnvironmentValues.openURL.setter();
}

uint64_t EnvironmentValues.textCase.getter()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t EnvironmentValues.textCase.setter()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t EnvironmentValues.isEnabled.setter()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t EnvironmentValues.tintColor.getter()
{
  return EnvironmentValues.tintColor.getter();
}

uint64_t EnvironmentValues.tintColor.setter()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t EnvironmentValues.subscript.setter()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t OpacityTransition.init()()
{
  return OpacityTransition.init()();
}

uint64_t type metadata accessor for OpacityTransition()
{
  return type metadata accessor for OpacityTransition();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t static VerticalAlignment.bottom.getter()
{
  return static VerticalAlignment.bottom.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

uint64_t type metadata accessor for ColorRenderingMode()
{
  return type metadata accessor for ColorRenderingMode();
}

uint64_t IconOnlyLabelStyle.init()()
{
  return IconOnlyLabelStyle.init()();
}

uint64_t type metadata accessor for IconOnlyLabelStyle()
{
  return type metadata accessor for IconOnlyLabelStyle();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

{
  return LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t type metadata accessor for RoundedCornerStyle()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t type metadata accessor for SubviewsCollection()
{
  return type metadata accessor for SubviewsCollection();
}

uint64_t type metadata accessor for _InsetViewModifier()
{
  return type metadata accessor for _InsetViewModifier();
}

uint64_t static AccessibilityTraits.isModal.getter()
{
  return static AccessibilityTraits.isModal.getter();
}

uint64_t type metadata accessor for AccessibilityTraits()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t BorderedButtonStyle.init()()
{
  return BorderedButtonStyle.init()();
}

uint64_t type metadata accessor for BorderedButtonStyle()
{
  return type metadata accessor for BorderedButtonStyle();
}

uint64_t ContentSizeCategory.isAccessibilityCategory.getter()
{
  return ContentSizeCategory.isAccessibilityCategory.getter();
}

uint64_t type metadata accessor for ContentSizeCategory()
{
  return type metadata accessor for ContentSizeCategory();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t PlainTextFieldStyle.init()()
{
  return PlainTextFieldStyle.init()();
}

uint64_t type metadata accessor for PlainTextFieldStyle()
{
  return type metadata accessor for PlainTextFieldStyle();
}

uint64_t static SymbolRenderingMode.multicolor.getter()
{
  return static SymbolRenderingMode.multicolor.getter();
}

uint64_t static SymbolRenderingMode.hierarchical.getter()
{
  return static SymbolRenderingMode.hierarchical.getter();
}

uint64_t type metadata accessor for SymbolRenderingMode()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t TupleToolbarContent.init(_:)()
{
  return TupleToolbarContent.init(_:)();
}

uint64_t UIHostingController.init(coder:rootView:)()
{
  return UIHostingController.init(coder:rootView:)();
}

uint64_t UIHostingController.init(rootView:)()
{
  return UIHostingController.init(rootView:)();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t static UIViewRepresentable.dismantleUIView(_:coordinator:)()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t static UIViewRepresentable._layoutOptions(_:)()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t UIViewRepresentable._identifiedViewTree(in:)()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewRepresentable._overrideLayoutTraits(_:for:)()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t static UIViewRepresentable._modifyBridgedViewInputs(_:)()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t UIViewRepresentable.body.getter()
{
  return UIViewRepresentable.body.getter();
}

uint64_t UIViewRepresentable<>.makeCoordinator()()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for _BackgroundModifier()
{
  return type metadata accessor for _BackgroundModifier();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return type metadata accessor for _ConditionalContent();
}

uint64_t type metadata accessor for LocalCoordinateSpace()
{
  return type metadata accessor for LocalCoordinateSpace();
}

uint64_t type metadata accessor for NamedCoordinateSpace()
{
  return type metadata accessor for NamedCoordinateSpace();
}

uint64_t RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)()
{
  return RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
}

uint64_t static ScrollBounceBehavior.basedOnSize.getter()
{
  return static ScrollBounceBehavior.basedOnSize.getter();
}

uint64_t type metadata accessor for ScrollBounceBehavior()
{
  return type metadata accessor for ScrollBounceBehavior();
}

uint64_t SegmentedPickerStyle.init()()
{
  return SegmentedPickerStyle.init()();
}

uint64_t type metadata accessor for SegmentedPickerStyle()
{
  return type metadata accessor for SegmentedPickerStyle();
}

uint64_t static ToolbarItemPlacement.topBarLeading.getter()
{
  return static ToolbarItemPlacement.topBarLeading.getter();
}

uint64_t static ToolbarItemPlacement.topBarTrailing.getter()
{
  return static ToolbarItemPlacement.topBarTrailing.getter();
}

uint64_t type metadata accessor for ToolbarItemPlacement()
{
  return type metadata accessor for ToolbarItemPlacement();
}

uint64_t static BlurReplaceTransition.Configuration.downUp.getter()
{
  return static BlurReplaceTransition.Configuration.downUp.getter();
}

uint64_t type metadata accessor for BlurReplaceTransition.Configuration()
{
  return type metadata accessor for BlurReplaceTransition.Configuration();
}

uint64_t BlurReplaceTransition.init(configuration:)()
{
  return BlurReplaceTransition.init(configuration:)();
}

uint64_t type metadata accessor for BlurReplaceTransition()
{
  return type metadata accessor for BlurReplaceTransition();
}

uint64_t type metadata accessor for _TraitWritingModifier()
{
  return type metadata accessor for _TraitWritingModifier();
}

Swift::Void __swiftcall FinishLaunchTestAction.callAsFunction()()
{
}

uint64_t type metadata accessor for FinishLaunchTestAction()
{
  return type metadata accessor for FinishLaunchTestAction();
}

uint64_t type metadata accessor for GroupElementsOfContent()
{
  return type metadata accessor for GroupElementsOfContent();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t type metadata accessor for PlaceholderContentView()
{
  return type metadata accessor for PlaceholderContentView();
}

uint64_t type metadata accessor for UnevenRoundedRectangle()
{
  return type metadata accessor for UnevenRoundedRectangle();
}

uint64_t static AccessibilityActionKind.default.getter()
{
  return static AccessibilityActionKind.default.getter();
}

uint64_t type metadata accessor for AccessibilityActionKind()
{
  return type metadata accessor for AccessibilityActionKind();
}

uint64_t AccessibilityFocusState.wrappedValue.setter()
{
  return AccessibilityFocusState.wrappedValue.setter();
}

uint64_t AccessibilityFocusState.projectedValue.getter()
{
  return AccessibilityFocusState.projectedValue.getter();
}

uint64_t AccessibilityFocusState.init<>()()
{
  return AccessibilityFocusState.init<>()();
}

uint64_t type metadata accessor for AccessibilityFocusState()
{
  return type metadata accessor for AccessibilityFocusState();
}

uint64_t static CoordinateSpaceProtocol<>.local.getter()
{
  return static CoordinateSpaceProtocol<>.local.getter();
}

uint64_t static CoordinateSpaceProtocol<>.named<A>(_:)()
{
  return static CoordinateSpaceProtocol<>.named<A>(_:)();
}

uint64_t type metadata accessor for LabelStyleConfiguration.Icon()
{
  return type metadata accessor for LabelStyleConfiguration.Icon();
}

uint64_t LabelStyleConfiguration.icon.getter()
{
  return LabelStyleConfiguration.icon.getter();
}

uint64_t type metadata accessor for LabelStyleConfiguration.Title()
{
  return type metadata accessor for LabelStyleConfiguration.Title();
}

uint64_t LabelStyleConfiguration.title.getter()
{
  return LabelStyleConfiguration.title.getter();
}

uint64_t SafeAreaPaddingModifier.init(edges:insets:)()
{
  return SafeAreaPaddingModifier.init(edges:insets:)();
}

uint64_t type metadata accessor for SafeAreaPaddingModifier()
{
  return type metadata accessor for SafeAreaPaddingModifier();
}

uint64_t type metadata accessor for ButtonStyleConfiguration.Label()
{
  return type metadata accessor for ButtonStyleConfiguration.Label();
}

uint64_t ButtonStyleConfiguration.label.getter()
{
  return ButtonStyleConfiguration.label.getter();
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return ButtonStyleConfiguration.isPressed.getter();
}

uint64_t type metadata accessor for AccessibilityTechnologies()
{
  return type metadata accessor for AccessibilityTechnologies();
}

uint64_t AnimationTimelineSchedule.init(minimumInterval:paused:)()
{
  return AnimationTimelineSchedule.init(minimumInterval:paused:)();
}

uint64_t type metadata accessor for AnimationTimelineSchedule()
{
  return type metadata accessor for AnimationTimelineSchedule();
}

uint64_t static AccessibilityChildBehavior.combine.getter()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t type metadata accessor for AccessibilityChildBehavior()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t UIViewRepresentableContext.coordinator.getter()
{
  return UIViewRepresentableContext.coordinator.getter();
}

uint64_t static ScrollDismissesKeyboardMode.interactively.getter()
{
  return static ScrollDismissesKeyboardMode.interactively.getter();
}

uint64_t type metadata accessor for ScrollDismissesKeyboardMode()
{
  return type metadata accessor for ScrollDismissesKeyboardMode();
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)()
{
  return UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)();
}

uint64_t static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)()
{
  return static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)();
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t static UIViewControllerRepresentable._layoutOptions(_:)()
{
  return static UIViewControllerRepresentable._layoutOptions(_:)();
}

uint64_t UIViewControllerRepresentable._identifiedViewTree(in:)()
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)();
}

uint64_t UIViewControllerRepresentable.body.getter()
{
  return UIViewControllerRepresentable.body.getter();
}

uint64_t UIViewControllerRepresentable<>.makeCoordinator()()
{
  return UIViewControllerRepresentable<>.makeCoordinator()();
}

uint64_t type metadata accessor for AccessibilityAttachmentModifier()
{
  return type metadata accessor for AccessibilityAttachmentModifier();
}

uint64_t type metadata accessor for AccessibilityAdjustmentDirection()
{
  return type metadata accessor for AccessibilityAdjustmentDirection();
}

uint64_t WithCurrentHostingControllerAction.callAsFunction(_:)()
{
  return WithCurrentHostingControllerAction.callAsFunction(_:)();
}

uint64_t type metadata accessor for WithCurrentHostingControllerAction()
{
  return type metadata accessor for WithCurrentHostingControllerAction();
}

uint64_t UIViewControllerRepresentableContext.coordinator.getter()
{
  return UIViewControllerRepresentableContext.coordinator.getter();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Axis.Set.horizontal.getter()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t Axis.Set.init(rawValue:)()
{
  return Axis.Set.init(rawValue:)();
}

uint64_t static Axis.Set.vertical.getter()
{
  return static Axis.Set.vertical.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t Edge.Set.init(rawValue:)()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t static Edge.Set.trailing.getter()
{
  return static Edge.Set.trailing.getter();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t static Font.largeTitle.getter()
{
  return static Font.largeTitle.getter();
}

uint64_t static Font.subheadline.getter()
{
  return static Font.subheadline.getter();
}

uint64_t static Font.== infix(_:_:)()
{
  return static Font.== infix(_:_:)();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t static Font.Width.standard.getter()
{
  return static Font.Width.standard.getter();
}

uint64_t type metadata accessor for Font.Width()
{
  return type metadata accessor for Font.Width();
}

uint64_t static Font.title.getter()
{
  return static Font.title.getter();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.bold.getter()
{
  return static Font.Weight.bold.getter();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.regular.getter()
{
  return static Font.Weight.regular.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.custom(_:size:relativeTo:)()
{
  return static Font.custom(_:size:relativeTo:)();
}

uint64_t static Font.system(size:weight:design:)()
{
  return static Font.system(size:weight:design:)();
}

uint64_t static Font.title2.getter()
{
  return static Font.title2.getter();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t Font.weight(_:)()
{
  return Font.weight(_:)();
}

uint64_t type metadata accessor for Font.Leading()
{
  return type metadata accessor for Font.Leading();
}

uint64_t static Font.callout.getter()
{
  return static Font.callout.getter();
}

uint64_t static Font.caption.getter()
{
  return static Font.caption.getter();
}

uint64_t Font.leading(_:)()
{
  return Font.leading(_:)();
}

uint64_t static Font.caption2.getter()
{
  return static Font.caption2.getter();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t List<>.init(content:)()
{
  return List<>.init(content:)();
}

uint64_t type metadata accessor for List()
{
  return type metadata accessor for List();
}

uint64_t Menu.init(onPresentationChanged:content:label:)()
{
  return Menu.init(onPresentationChanged:content:label:)();
}

uint64_t Menu.init(content:label:)()
{
  return Menu.init(content:label:)();
}

uint64_t Path.addEllipse(in:transform:)()
{
  return Path.addEllipse(in:transform:)();
}

uint64_t Path.move(to:)()
{
  return Path.move(to:)();
}

uint64_t Path.addLine(to:)()
{
  return Path.addLine(to:)();
}

uint64_t Path.init(_:)()
{
  return Path.init(_:)();
}

uint64_t Text.fontDesign(_:)()
{
  return Text.fontDesign(_:)();
}

uint64_t Text.fontWeight(_:)()
{
  return Text.fontWeight(_:)();
}

uint64_t type metadata accessor for Text.TruncationMode()
{
  return type metadata accessor for Text.TruncationMode();
}

uint64_t Text.baselineOffset(_:)()
{
  return Text.baselineOffset(_:)();
}

uint64_t Text.customAttribute<A>(_:)()
{
  return Text.customAttribute<A>(_:)();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t static Text.+ infix(_:_:)()
{
  return static Text.+ infix(_:_:)();
}

uint64_t type metadata accessor for Text.Case()
{
  return type metadata accessor for Text.Case();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t type metadata accessor for Text.Layout.Run()
{
  return type metadata accessor for Text.Layout.Run();
}

uint64_t type metadata accessor for Text.Layout.Line()
{
  return type metadata accessor for Text.Layout.Line();
}

uint64_t type metadata accessor for Text.Layout()
{
  return type metadata accessor for Text.Layout();
}

uint64_t Text.fontWidth(_:)()
{
  return Text.fontWidth(_:)();
}

uint64_t Text.init<A>(_:format:)()
{
  return Text.init<A>(_:format:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t View.appEntityIdentifier(_:)()
{
  return View.appEntityIdentifier(_:)();
}

uint64_t View.eraseToAnyView()()
{
  return View.eraseToAnyView()();
}

uint64_t View.smartDialogAnimatable()()
{
  return View.smartDialogAnimatable()();
}

uint64_t View._photosPickerContainerIdentifier(_:)()
{
  return View._photosPickerContainerIdentifier(_:)();
}

uint64_t View.inlineFeedback(controller:completion:)()
{
  return View.inlineFeedback(controller:completion:)();
}

uint64_t static View._makeView(view:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t View.background<A>(alignment:content:)()
{
  return View.background<A>(alignment:content:)();
}

uint64_t View.background<A>(_:ignoresSafeAreaEdges:)()
{
  return View.background<A>(_:ignoresSafeAreaEdges:)();
}

uint64_t View.background<A>(_:alignment:)()
{
  return View.background<A>(_:alignment:)();
}

uint64_t View.fontDesign(_:)()
{
  return View.fontDesign(_:)();
}

uint64_t View.fontWeight(_:)()
{
  return View.fontWeight(_:)();
}

uint64_t View.labelStyle<A>(_:)()
{
  return View.labelStyle<A>(_:)();
}

uint64_t View.transition(_:)()
{
  return View.transition(_:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.contextMenu<A>(menuItems:)()
{
  return View.contextMenu<A>(menuItems:)();
}

uint64_t View.environment<A>(_:)()
{
  return View.environment<A>(_:)();
}

uint64_t View.environment<A>(_:_:)()
{
  return View.environment<A>(_:_:)();
}

uint64_t View.onDisappear(perform:)()
{
  return View.onDisappear(perform:)();
}

uint64_t View.pickerStyle<A>(_:)()
{
  return View.pickerStyle<A>(_:)();
}

uint64_t View.scaleEffect(_:anchor:)()
{
  return View.scaleEffect(_:anchor:)();
}

uint64_t View.submitLabel(_:)()
{
  return View.submitLabel(_:)();
}

uint64_t View.transaction<A>(_:body:)()
{
  return View.transaction<A>(_:body:)();
}

uint64_t View.contentShape<A>(_:eoFill:)()
{
  return View.contentShape<A>(_:eoFill:)();
}

uint64_t View.contentShape<A>(_:_:eoFill:)()
{
  return View.contentShape<A>(_:_:eoFill:)();
}

uint64_t View.drawingGroup(opaque:colorMode:)()
{
  return View.drawingGroup(opaque:colorMode:)();
}

uint64_t View.keyboardType(_:)()
{
  return View.keyboardType(_:)();
}

uint64_t View.onTapGesture<A>(count:coordinateSpace:perform:)()
{
  return View.onTapGesture<A>(count:coordinateSpace:perform:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:content:)()
{
  return View.swipeActions<A>(edge:allowsFullSwipe:content:)();
}

uint64_t View.visualEffect<A>(_:)()
{
  return View.visualEffect<A>(_:)();
}

uint64_t View.safeAreaInset<A>(edge:alignment:spacing:content:)()
{
  return View.safeAreaInset<A>(edge:alignment:spacing:content:)();
}

uint64_t View.symbolVariant(_:)()
{
  return View.symbolVariant(_:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t View.containerShape<A>(_:)()
{
  return View.containerShape<A>(_:)();
}

uint64_t View.rotationEffect(_:anchor:)()
{
  return View.rotationEffect(_:anchor:)();
}

uint64_t View.textFieldStyle<A>(_:)()
{
  return View.textFieldStyle<A>(_:)();
}

uint64_t View.dynamicTypeSize(_:)()
{
  return View.dynamicTypeSize(_:)();
}

uint64_t View.dynamicTypeSize<A>(_:)()
{
  return View.dynamicTypeSize<A>(_:)();
}

uint64_t View.foregroundColor(_:)()
{
  return View.foregroundColor(_:)();
}

uint64_t View.foregroundStyle<A>(_:)()
{
  return View.foregroundStyle<A>(_:)();
}

uint64_t View.fullScreenCover<A>(isPresented:onDismiss:content:)()
{
  return View.fullScreenCover<A>(isPresented:onDismiss:content:)();
}

uint64_t View.ignoresSafeArea(_:edges:)()
{
  return View.ignoresSafeArea(_:edges:)();
}

uint64_t View.accessibilityLabel(_:)()
{
  return View.accessibilityLabel(_:)();
}

uint64_t View.accessibilityLabel<A>(_:)()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t View.minimumScaleFactor(_:)()
{
  return View.minimumScaleFactor(_:)();
}

uint64_t View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)()
{
  return View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)();
}

uint64_t View.accessibilityAction(_:_:)()
{
  return View.accessibilityAction(_:_:)();
}

uint64_t View.accessibilityHidden(_:isEnabled:)()
{
  return View.accessibilityHidden(_:isEnabled:)();
}

uint64_t View.accessibilityHidden(_:)()
{
  return View.accessibilityHidden(_:)();
}

uint64_t View.allowsSecureDrawing()()
{
  return View.allowsSecureDrawing()();
}

uint64_t View.highPriorityGesture<A>(_:including:)()
{
  return View.highPriorityGesture<A>(_:including:)();
}

uint64_t View.simultaneousGesture<A>(_:including:)()
{
  return View.simultaneousGesture<A>(_:including:)();
}

uint64_t View.accessibilityElement(children:)()
{
  return View.accessibilityElement(children:)();
}

uint64_t View.accessibilityFocused(_:)()
{
  return View.accessibilityFocused(_:)();
}

uint64_t View.scrollBounceBehavior(_:axes:)()
{
  return View.scrollBounceBehavior(_:axes:)();
}

uint64_t View.edgesIgnoringSafeArea(_:)()
{
  return View.edgesIgnoringSafeArea(_:)();
}

uint64_t View.accessibilityAddTraits(_:)()
{
  return View.accessibilityAddTraits(_:)();
}

uint64_t View.containerRelativeFrame(_:alignment:)()
{
  return View.containerRelativeFrame(_:alignment:)();
}

uint64_t View.accessibilityIdentifier(_:)()
{
  return View.accessibilityIdentifier(_:)();
}

uint64_t View.scrollContentBackground(_:)()
{
  return View.scrollContentBackground(_:)();
}

uint64_t View.scrollDismissesKeyboard(_:)()
{
  return View.scrollDismissesKeyboard(_:)();
}

uint64_t View.navigationBarBackButtonHidden(_:)()
{
  return View.navigationBarBackButtonHidden(_:)();
}

uint64_t View.accessibilityShowsLargeContentViewer()()
{
  return View.accessibilityShowsLargeContentViewer()();
}

uint64_t View.blur(radius:opaque:)()
{
  return View.blur(radius:opaque:)();
}

uint64_t View.font(_:)()
{
  return View.font(_:)();
}

uint64_t View.mask<A>(_:)()
{
  return View.mask<A>(_:)();
}

uint64_t View.alert<A, B, C>(isPresented:error:actions:message:)()
{
  return View.alert<A, B, C>(isPresented:error:actions:message:)();
}

uint64_t View.alert(isPresented:content:)()
{
  return View.alert(isPresented:content:)();
}

uint64_t View.frame(width:height:alignment:)()
{
  return View.frame(width:height:alignment:)();
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t View.sheet<A>(isPresented:onDismiss:content:)()
{
  return View.sheet<A>(isPresented:onDismiss:content:)();
}

uint64_t View.sheet<A, B>(item:onDismiss:content:)()
{
  return View.sheet<A, B>(item:onDismiss:content:)();
}

uint64_t View._trait<A>(_:_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.shadow(color:radius:x:y:)()
{
  return View.shadow(color:radius:x:y:)();
}

uint64_t View.clipped(antialiased:)()
{
  return View.clipped(antialiased:)();
}

uint64_t View.focused(_:)()
{
  return View.focused(_:)();
}

uint64_t View.gesture<A>(_:including:)()
{
  return View.gesture<A>(_:including:)();
}

uint64_t View.opacity(_:)()
{
  return View.opacity(_:)();
}

uint64_t View.overlay<A>(alignment:content:)()
{
  return View.overlay<A>(alignment:content:)();
}

uint64_t View.padding(_:)()
{
  return View.padding(_:)();
}

{
  return View.padding(_:)();
}

uint64_t View.padding(_:_:)()
{
  return View.padding(_:_:)();
}

uint64_t View.toolbar<A>(content:)()
{
  return View.toolbar<A>(content:)();
}

uint64_t View.modifier<A>(_:)()
{
  return View.modifier<A>(_:)();
}

uint64_t View.onAppear(perform:)()
{
  return View.onAppear(perform:)();
}

uint64_t View.onChange<A>(of:initial:_:)()
{
  return View.onChange<A>(of:initial:_:)();
}

{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t View.onSubmit(of:_:)()
{
  return View.onSubmit(of:_:)();
}

uint64_t View.animation<A>(_:body:)()
{
  return View.animation<A>(_:body:)();
}

uint64_t View.animation<A>(_:value:)()
{
  return View.animation<A>(_:value:)();
}

uint64_t View.clipShape<A>(_:style:)()
{
  return View.clipShape<A>(_:style:)();
}

uint64_t View.lineLimit(_:)()
{
  return View.lineLimit(_:)();
}

uint64_t View.listStyle<A>(_:)()
{
  return View.listStyle<A>(_:)();
}

uint64_t View.statusBar(hidden:)()
{
  return View.statusBar(hidden:)();
}

uint64_t Alert.init(title:message:dismissButton:)()
{
  return Alert.init(title:message:dismissButton:)();
}

uint64_t static Alert.Button.default(_:action:)()
{
  return static Alert.Button.default(_:action:)();
}

uint64_t type metadata accessor for Alert.Button()
{
  return type metadata accessor for Alert.Button();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init(uiColor:)();
}

uint64_t type metadata accessor for Color.RGBColorSpace()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t static Color.== infix(_:_:)()
{
  return static Color.== infix(_:_:)();
}

uint64_t static Color.red.getter()
{
  return static Color.red.getter();
}

uint64_t static Color.blue.getter()
{
  return static Color.blue.getter();
}

uint64_t static Color.gray.getter()
{
  return static Color.gray.getter();
}

uint64_t Color.hash(into:)()
{
  return Color.hash(into:)();
}

uint64_t static Color.mint.getter()
{
  return static Color.mint.getter();
}

uint64_t static Color.pink.getter()
{
  return static Color.pink.getter();
}

uint64_t static Color.black.getter()
{
  return static Color.black.getter();
}

uint64_t static Color.brown.getter()
{
  return static Color.brown.getter();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.green.getter()
{
  return static Color.green.getter();
}

uint64_t static Color.white.getter()
{
  return static Color.white.getter();
}

uint64_t static Color.indigo.getter()
{
  return static Color.indigo.getter();
}

uint64_t static Color.orange.getter()
{
  return static Color.orange.getter();
}

uint64_t static Color.purple.getter()
{
  return static Color.purple.getter();
}

uint64_t static Color.yellow.getter()
{
  return static Color.yellow.getter();
}

uint64_t Color.opacity(_:)()
{
  return Color.opacity(_:)();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t Color.resolve(in:)()
{
  return Color.resolve(in:)();
}

uint64_t Color.Resolved.init(colorSpace:red:green:blue:opacity:)()
{
  return Color.Resolved.init(colorSpace:red:green:blue:opacity:)();
}

uint64_t Color.Resolved.red.getter()
{
  return Color.Resolved.red.getter();
}

uint64_t Color.Resolved.blue.getter()
{
  return Color.Resolved.blue.getter();
}

uint64_t Color.Resolved.green.getter()
{
  return Color.Resolved.green.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t Color.init(_:)()
{
  return Color.init(_:)();
}

uint64_t Color.init<A>(_:)()
{
  return Color.init<A>(_:)();
}

uint64_t Group.init<A, B>(subviews:transform:)()
{
  return Group.init<A, B>(subviews:transform:)();
}

uint64_t Group<A>.init(content:)()
{
  return Group<A>.init(content:)();
}

uint64_t type metadata accessor for Group()
{
  return type metadata accessor for Group();
}

uint64_t Image.init(uiImage:)()
{
  return Image.init(uiImage:)();
}

uint64_t Image.init(data:)()
{
  return Image.init(data:)();
}

uint64_t Image.init(decorative:scale:orientation:)()
{
  return Image.init(decorative:scale:orientation:)();
}

uint64_t Image.init(systemName:)()
{
  return Image.init(systemName:)();
}

uint64_t type metadata accessor for Image.ResizingMode()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t Image.init(_internalSystemName:)()
{
  return Image.init(_internalSystemName:)();
}

uint64_t Image.symbolRenderingMode(_:)()
{
  return Image.symbolRenderingMode(_:)();
}

uint64_t type metadata accessor for Image.Scale()
{
  return type metadata accessor for Image.Scale();
}

uint64_t Image.resizable(capInsets:resizingMode:)()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t Image.init(_:bundle:)()
{
  return Image.init(_:bundle:)();
}

uint64_t Label.init(title:icon:)()
{
  return Label.init(title:icon:)();
}

uint64_t Label<>.init(_:systemImage:)()
{
  return Label<>.init(_:systemImage:)();
}

uint64_t Label<>.init<A>(_:systemImage:)()
{
  return Label<>.init<A>(_:systemImage:)();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t State.projectedValue.getter()
{
  return State.projectedValue.getter();
}

uint64_t type metadata accessor for State()
{
  return type metadata accessor for State();
}

uint64_t Button.init(role:action:label:)()
{
  return Button.init(role:action:label:)();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init(_:action:)()
{
  return Button<>.init(_:action:)();
}

uint64_t type metadata accessor for Button()
{
  return type metadata accessor for Button();
}

uint64_t Canvas.init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)()
{
  return Canvas.init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return HStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for HStack()
{
  return type metadata accessor for HStack();
}

uint64_t static Layout._makeLayoutView(root:inputs:body:)()
{
  return static Layout._makeLayoutView(root:inputs:body:)();
}

uint64_t Layout.updateCache(_:subviews:)()
{
  return Layout.updateCache(_:subviews:)();
}

uint64_t static Layout.layoutProperties.getter()
{
  return static Layout.layoutProperties.getter();
}

uint64_t Layout.spacing(subviews:cache:)()
{
  return Layout.spacing(subviews:cache:)();
}

uint64_t Layout<>.makeCache(subviews:)()
{
  return Layout<>.makeCache(subviews:)();
}

uint64_t Picker.init(selection:label:content:)()
{
  return Picker.init(selection:label:content:)();
}

uint64_t Picker<>.init(_:selection:content:)()
{
  return Picker<>.init(_:selection:content:)();
}

uint64_t type metadata accessor for Picker()
{
  return type metadata accessor for Picker();
}

uint64_t static Shader.Argument._float(_:)()
{
  return static Shader.Argument._float(_:)();
}

uint64_t static Shader.Argument._float2(_:_:)()
{
  return static Shader.Argument._float2(_:_:)();
}

uint64_t type metadata accessor for Shader.Argument()
{
  return type metadata accessor for Shader.Argument();
}

uint64_t type metadata accessor for Shader()
{
  return type metadata accessor for Shader();
}

uint64_t Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)()
{
  return Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
}

uint64_t Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)()
{
  return Slider.init<A>(value:in:step:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
}

uint64_t Spring.value<A>(fromValue:toValue:initialVelocity:time:)()
{
  return Spring.value<A>(fromValue:toValue:initialVelocity:time:)();
}

uint64_t Spring.init(duration:bounce:)()
{
  return Spring.init(duration:bounce:)();
}

uint64_t Spring.init(response:dampingRatio:)()
{
  return Spring.init(response:dampingRatio:)();
}

uint64_t type metadata accessor for Spring()
{
  return type metadata accessor for Spring();
}

uint64_t Toggle.init(isOn:label:)()
{
  return Toggle.init(isOn:label:)();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return VStack.init(alignment:spacing:content:)();
}

uint64_t type metadata accessor for VStack()
{
  return type metadata accessor for VStack();
}

uint64_t ZStack.init(alignment:content:)()
{
  return ZStack.init(alignment:content:)();
}

uint64_t type metadata accessor for ZStack()
{
  return type metadata accessor for ZStack();
}

uint64_t AnyView.init<A>(_:)()
{
  return AnyView.init<A>(_:)();
}

uint64_t Binding.wrappedValue.getter()
{
  return Binding.wrappedValue.getter();
}

uint64_t Binding.wrappedValue.setter()
{
  return Binding.wrappedValue.setter();
}

uint64_t Binding.subscript.getter()
{
  return Binding.subscript.getter();
}

uint64_t Binding.projectedValue.getter()
{
  return Binding.projectedValue.getter();
}

uint64_t Binding.init(get:set:)()
{
  return Binding.init(get:set:)();
}

uint64_t type metadata accessor for Binding()
{
  return type metadata accessor for Binding();
}

uint64_t type metadata accessor for Capsule()
{
  return type metadata accessor for Capsule();
}

uint64_t Divider.init()()
{
  return Divider.init()();
}

uint64_t type metadata accessor for Divider()
{
  return type metadata accessor for Divider();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t type metadata accessor for ForEach()
{
  return type metadata accessor for ForEach();
}

uint64_t Gesture.onEnded(_:)()
{
  return Gesture.onEnded(_:)();
}

uint64_t Gesture<>.onChanged(_:)()
{
  return Gesture<>.onChanged(_:)();
}

uint64_t Section<>.init(header:content:)()
{
  return Section<>.init(header:content:)();
}

uint64_t Subview.containerValues.getter()
{
  return Subview.containerValues.getter();
}

uint64_t type metadata accessor for Subview.ID()
{
  return type metadata accessor for Subview.ID();
}

uint64_t type metadata accessor for Subview()
{
  return type metadata accessor for Subview();
}

uint64_t static Gradient.ColorSpace.device.getter()
{
  return static Gradient.ColorSpace.device.getter();
}

uint64_t type metadata accessor for Gradient.ColorSpace()
{
  return type metadata accessor for Gradient.ColorSpace();
}

uint64_t Gradient.Stop.init(color:location:)()
{
  return Gradient.Stop.init(color:location:)();
}

uint64_t Gradient.init(stops:)()
{
  return Gradient.init(stops:)();
}

uint64_t Gradient.init(colors:)()
{
  return Gradient.init(colors:)();
}

uint64_t static Material.thin.getter()
{
  return static Material.thin.getter();
}

uint64_t static Material.thick.getter()
{
  return static Material.thick.getter();
}

uint64_t static Material.regular.getter()
{
  return static Material.regular.getter();
}

uint64_t static Material.ultraThin.getter()
{
  return static Material.ultraThin.getter();
}

uint64_t static Material.Layer.Filter.gaussianBlur(radius:isOpaque:isDithered:)()
{
  return static Material.Layer.Filter.gaussianBlur(radius:isOpaque:isDithered:)();
}

uint64_t type metadata accessor for Material.Layer.Filter()
{
  return type metadata accessor for Material.Layer.Filter();
}

uint64_t static Material.Layer.backdrop(scale:color:filters:)()
{
  return static Material.Layer.backdrop(scale:color:filters:)();
}

uint64_t type metadata accessor for Material.Layer()
{
  return type metadata accessor for Material.Layer();
}

uint64_t Material.init<A>(provider:)()
{
  return Material.init<A>(provider:)();
}

uint64_t type metadata accessor for Material()
{
  return type metadata accessor for Material();
}

uint64_t static Alignment.topLeading.getter()
{
  return static Alignment.topLeading.getter();
}

uint64_t static Alignment.topTrailing.getter()
{
  return static Alignment.topTrailing.getter();
}

uint64_t static Alignment.bottomLeading.getter()
{
  return static Alignment.bottomLeading.getter();
}

uint64_t static Alignment.bottomTrailing.getter()
{
  return static Alignment.bottomTrailing.getter();
}

uint64_t static Alignment.top.getter()
{
  return static Alignment.top.getter();
}

uint64_t static Alignment.bottom.getter()
{
  return static Alignment.bottom.getter();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t Animation.repeatForever(autoreverses:)()
{
  return Animation.repeatForever(autoreverses:)();
}

uint64_t static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)()
{
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
}

uint64_t Animation.delay(_:)()
{
  return Animation.delay(_:)();
}

uint64_t Animation.speed(_:)()
{
  return Animation.speed(_:)();
}

uint64_t static Animation.linear(duration:)()
{
  return static Animation.linear(duration:)();
}

uint64_t static Animation.linear.getter()
{
  return static Animation.linear.getter();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t static Animation.spring(_:blendDuration:)()
{
  return static Animation.spring(_:blendDuration:)();
}

uint64_t static Animation.default.getter()
{
  return static Animation.default.getter();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return static Animation.easeInOut(duration:)();
}

uint64_t static Animation.easeInOut.getter()
{
  return static Animation.easeInOut.getter();
}

uint64_t type metadata accessor for BlendMode()
{
  return type metadata accessor for BlendMode();
}

uint64_t TextField<>.init<A>(_:text:onEditingChanged:onCommit:)()
{
  return TextField<>.init<A>(_:text:onEditingChanged:onCommit:)();
}

uint64_t TextField<>.init(_:text:axis:)()
{
  return TextField<>.init(_:text:axis:)();
}

uint64_t TextField<>.init(_:text:prompt:)()
{
  return TextField<>.init(_:text:prompt:)();
}

uint64_t TextProxy.sizeThatFits(_:)()
{
  return TextProxy.sizeThatFits(_:)();
}

uint64_t type metadata accessor for TupleView()
{
  return type metadata accessor for TupleView();
}

uint64_t TupleView.init(_:)()
{
  return TupleView.init(_:)();
}

Swift::Double __swiftcall UnitCurve.value(at:)(Swift::Double at)
{
  UnitCurve.value(at:)(at);
  return result;
}

uint64_t static UnitCurve.easeIn.getter()
{
  return static UnitCurve.easeIn.getter();
}

uint64_t type metadata accessor for UnitCurve()
{
  return type metadata accessor for UnitCurve();
}

uint64_t static UnitPoint.topLeading.getter()
{
  return static UnitPoint.topLeading.getter();
}

uint64_t static UnitPoint.bottomLeading.getter()
{
  return static UnitPoint.bottomLeading.getter();
}

uint64_t static UnitPoint.top.getter()
{
  return static UnitPoint.top.getter();
}

uint64_t static UnitPoint.bottom.getter()
{
  return static UnitPoint.bottom.getter();
}

uint64_t static UnitPoint.center.getter()
{
  return static UnitPoint.center.getter();
}

uint64_t dispatch thunk of SymbolEffect.configuration.getter()
{
  return dispatch thunk of SymbolEffect.configuration.getter();
}

uint64_t BounceSymbolEffect.up.getter()
{
  return BounceSymbolEffect.up.getter();
}

uint64_t BounceSymbolEffect.down.getter()
{
  return BounceSymbolEffect.down.getter();
}

uint64_t BounceSymbolEffect.init()()
{
  return BounceSymbolEffect.init()();
}

uint64_t type metadata accessor for BounceSymbolEffect()
{
  return type metadata accessor for BounceSymbolEffect();
}

uint64_t RotateSymbolEffect.init()()
{
  return RotateSymbolEffect.init()();
}

uint64_t type metadata accessor for RotateSymbolEffect()
{
  return type metadata accessor for RotateSymbolEffect();
}

uint64_t ReplaceSymbolEffect.init()()
{
  return ReplaceSymbolEffect.init()();
}

uint64_t type metadata accessor for ReplaceSymbolEffect()
{
  return type metadata accessor for ReplaceSymbolEffect();
}

uint64_t static SymbolEffectOptions.speed(_:)()
{
  return static SymbolEffectOptions.speed(_:)();
}

uint64_t static SymbolEffectOptions.default.getter()
{
  return static SymbolEffectOptions.default.getter();
}

uint64_t type metadata accessor for SymbolEffectOptions()
{
  return type metadata accessor for SymbolEffectOptions();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t dispatch thunk of FBKEvaluationController.systemImageName(action:)()
{
  return dispatch thunk of FBKEvaluationController.systemImageName(action:)();
}

uint64_t dispatch thunk of FBKEvaluationController.userDidReportAConcern(subject:showFeedbackForm:)()
{
  return dispatch thunk of FBKEvaluationController.userDidReportAConcern(subject:showFeedbackForm:)();
}

uint64_t FBKEvaluationController.init(subject:)()
{
  return FBKEvaluationController.init(subject:)();
}

uint64_t type metadata accessor for FBKEvaluationController()
{
  return type metadata accessor for FBKEvaluationController();
}

uint64_t static PHPickerFilter.videos.getter()
{
  return static PHPickerFilter.videos.getter();
}

uint64_t type metadata accessor for PHPickerFilter()
{
  return type metadata accessor for PHPickerFilter();
}

uint64_t SmartDialog.init(animationSettings:animationTrigger:header:body:)()
{
  return SmartDialog.init(animationSettings:animationTrigger:header:body:)();
}

uint64_t static VisualResponseProvider.view(for:context:)()
{
  return static VisualResponseProvider.view(for:context:)();
}

uint64_t type metadata accessor for VisualResponseProvider()
{
  return type metadata accessor for VisualResponseProvider();
}

uint64_t SummaryItemStandardView.init(text1:text2:text3:text4:thumbnail:)()
{
  return SummaryItemStandardView.init(text1:text2:text3:text4:thumbnail:)();
}

uint64_t type metadata accessor for SummaryItemStandardView()
{
  return type metadata accessor for SummaryItemStandardView();
}

uint64_t PrimaryHeaderMarqueeView.init(text1:text2:thumbnail:addTint:)()
{
  return PrimaryHeaderMarqueeView.init(text1:text2:thumbnail:addTint:)();
}

uint64_t SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)()
{
  return SmartDialogAnimationSettings.init(springAnimation:lineAnimationDelay:)();
}

uint64_t type metadata accessor for SmartDialogAnimationSettings()
{
  return type metadata accessor for SmartDialogAnimationSettings();
}

uint64_t Form.init()()
{
  return Form.init()();
}

uint64_t type metadata accessor for Form()
{
  return type metadata accessor for Form();
}

uint64_t Context.init(idiom:)()
{
  return Context.init(idiom:)();
}

uint64_t type metadata accessor for Context()
{
  return type metadata accessor for Context();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return Dictionary.init(minimumCapacity:)();
}

uint64_t dispatch thunk of static FloatingPoint.leastNormalMagnitude.getter()
{
  return dispatch thunk of static FloatingPoint.leastNormalMagnitude.getter();
}

uint64_t dispatch thunk of FloatingPoint.isFinite.getter()
{
  return dispatch thunk of FloatingPoint.isFinite.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t Character.isWhitespace.getter()
{
  return Character.isWhitespace.getter();
}

uint64_t Character._isLowercased.getter()
{
  return Character._isLowercased.getter();
}

uint64_t Character._isUppercased.getter()
{
  return Character._isUppercased.getter();
}

uint64_t Character.isPunctuation.getter()
{
  return Character.isPunctuation.getter();
}

uint64_t Character._isSingleScalar.getter()
{
  return Character._isSingleScalar.getter();
}

uint64_t Character.isSymbol.getter()
{
  return Character.isSymbol.getter();
}

uint64_t BidirectionalCollection<>.firstMatch<A, B>(of:)()
{
  return BidirectionalCollection<>.firstMatch<A, B>(of:)();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return BidirectionalCollection<>.starts<A>(with:)();
}

uint64_t BidirectionalCollection.last.getter()
{
  return BidirectionalCollection.last.getter();
}

uint64_t BidirectionalCollection.suffix(_:)()
{
  return BidirectionalCollection.suffix(_:)();
}

uint64_t BidirectionalCollection.lastIndex(where:)()
{
  return BidirectionalCollection.lastIndex(where:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t MutableCollection<>.partition(by:)()
{
  return MutableCollection<>.partition(by:)();
}

uint64_t type metadata accessor for ClosedRange()
{
  return type metadata accessor for ClosedRange();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t String.LocalizationValue.init(stringInterpolation:)()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:arguments:)()
{
  return String.init(format:arguments:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init(localized:table:bundle:locale:comment:)()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return String.UnicodeScalarView.append(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(before:)()
{
  return String.index(before:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  String.append(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.distance(from:to:)()
{
  return String.distance(from:to:)();
}

uint64_t String.UTF16View.count.getter()
{
  return String.UTF16View.count.getter();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

{
  return String.init<A>(_:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of Sequence._copyContents(initializing:)()
{
  return dispatch thunk of Sequence._copyContents(initializing:)();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return dispatch thunk of Sequence.underestimatedCount.getter();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.enumerated()()
{
  return Sequence.enumerated()();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t Sequence.filter(_:)()
{
  return Sequence.filter(_:)();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return Array._checkSubscript(_:wasNativeTypeChecked:)();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return Array._hoistableIsNativeTypeChecked()();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

uint64_t Array.insert(_:at:)()
{
  return Array.insert(_:at:)();
}

uint64_t Array.endIndex.getter()
{
  return Array.endIndex.getter();
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array.subscript.getter()
{
  return Array.subscript.getter();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return static TaskPriority.userInitiated.getter();
}

uint64_t static TaskPriority.high.getter()
{
  return static TaskPriority.high.getter();
}

uint64_t TaskPriority.init(rawValue:)()
{
  return TaskPriority.init(rawValue:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)()
{
  return static AsyncStream.makeStream(of:bufferingPolicy:)();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return type metadata accessor for AsyncStream.Continuation();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t static Task.== infix(_:_:)()
{
  return static Task.== infix(_:_:)();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()()
{
  return ThrowingTaskGroup.makeAsyncIterator()();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t Double.significandWidth.getter()
{
  return Double.significandWidth.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t Double.exponent.getter()
{
  return Double.exponent.getter();
}

uint64_t Double.init(_:)()
{
  return Double.init(_:)();
}

uint64_t Float.write<A>(to:)()
{
  return Float.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return dispatch thunk of static Numeric.* infix(_:_:)();
}

uint64_t dispatch thunk of Numeric.magnitude.getter()
{
  return dispatch thunk of Numeric.magnitude.getter();
}

uint64_t RandomAccessCollection.stableSorted(by:)()
{
  return RandomAccessCollection.stableSorted(by:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)()
{
  return dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return dispatch thunk of Collection.distance(from:to:)();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.prefix(_:)()
{
  return Collection.prefix(_:)();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t type metadata accessor for Range()
{
  return type metadata accessor for Range();
}

uint64_t NLTokenizer.enumerateTokens(in:using:)()
{
  return NLTokenizer.enumerateTokens(in:using:)();
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t CGContextRef.draw(_:in:byTiling:)()
{
  return CGContextRef.draw(_:in:byTiling:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t NSItemProvider.init(contentsOf:contentType:openInPlace:coordinated:visibility:)()
{
  return NSItemProvider.init(contentsOf:contentType:openInPlace:coordinated:visibility:)();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

uint64_t AVCapturePhotoOutput.availablePhotoPixelFormatTypes.getter()
{
  return AVCapturePhotoOutput.availablePhotoPixelFormatTypes.getter();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return NSNotificationCenter.publisher(for:object:)();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t AVMetadataMachineReadableCodeObject.corners.getter()
{
  return AVMetadataMachineReadableCodeObject.corners.getter();
}

uint64_t NSSet.makeIterator()()
{
  return NSSet.makeIterator()();
}

CMTime __swiftcall CMTime.init(value:timescale:)(Swift::Int64 value, Swift::Int32 timescale)
{
  CMTimeValue v2 = CMTime.init(value:timescale:)(value, *(void *)&timescale);
  result.epoch = v4;
  result.timescale = v3;
  result.flags = HIDWORD(v3);
  result.value = v2;
  return result;
}

uint64_t CMTime.seconds.getter()
{
  return CMTime.seconds.getter();
}

NSValue __swiftcall CGPoint._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return type metadata accessor for NSTimer.TimerPublisher();
}

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)()
{
  return static NSTimer.publish(every:tolerance:on:in:options:)();
}

uint64_t UIColor.init(_:)()
{
  return UIColor.init(_:)();
}

uint64_t static ARCamera.TrackingState.== infix(_:_:)()
{
  return static ARCamera.TrackingState.== infix(_:_:)();
}

uint64_t type metadata accessor for ARCamera.TrackingState.Reason()
{
  return type metadata accessor for ARCamera.TrackingState.Reason();
}

uint64_t type metadata accessor for ARCamera.TrackingState()
{
  return type metadata accessor for ARCamera.TrackingState();
}

uint64_t ARCamera.trackingState.getter()
{
  return ARCamera.trackingState.getter();
}

uint64_t ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)()
{
  return ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

__C::_NSRange_optional __swiftcall _NSRange.intersection(_:)(__C::_NSRange a1)
{
  Swift::Int v1 = _NSRange.intersection(_:)(a1.location, a1.length);
  result.value.length = v2;
  result.value.location = v1;
  result.is_nil = v3;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.rounded(rule:increment:)()
{
  return NSDecimal.FormatStyle.Currency.rounded(rule:increment:)();
}

uint64_t NSDecimal.FormatStyle.Currency.precision(_:)()
{
  return NSDecimal.FormatStyle.Currency.precision(_:)();
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Currency()
{
  return type metadata accessor for NSDecimal.FormatStyle.Currency();
}

void __swiftcall NSDecimal.init(integerLiteral:)(NSDecimal *__return_ptr retstr, Swift::Int integerLiteral)
{
}

uint64_t static NSDecimal./ infix(_:_:)()
{
  return static NSDecimal./ infix(_:_:)();
}

uint64_t NSDecimal.formatted<A>(_:)()
{
  return NSDecimal.formatted<A>(_:)();
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int64 a2)
{
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.index(after:)()
{
  return Substring.index(after:)();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return Substring.index(_:offsetBy:limitedBy:)();
}

uint64_t Substring.index(_:offsetBy:)()
{
  return Substring.index(_:offsetBy:)();
}

uint64_t Substring.distance(from:to:)()
{
  return Substring.distance(from:to:)();
}

uint64_t Substring.subscript.getter()
{
  return Substring.subscript.getter();
}

{
  return Substring.subscript.getter();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t StringProtocol.decomposedStringWithCompatibilityMapping.getter()
{
  return StringProtocol.decomposedStringWithCompatibilityMapping.getter();
}

uint64_t StringProtocol.folding(options:locale:)()
{
  return StringProtocol.folding(options:locale:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.base.getter()
{
  return AnyHashable.base.getter();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t EncodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return EncodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for EncodingError()
{
  return type metadata accessor for EncodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return EnumeratedSequence.makeIterator()();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return EnumeratedSequence.Iterator.next()();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return type metadata accessor for EnumeratedSequence.Iterator();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return type metadata accessor for EnumeratedSequence();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.codingPath.getter()
{
  return KeyedEncodingContainer.codingPath.getter();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return _stringCompareInternal(_:_:_:_:expecting:)();
}

uint64_t _writeBackMutableSlice<A, B>(_:bounds:slice:)()
{
  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return type metadata accessor for FloatingPointRoundingRule();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return _copyCollectionToContiguousArray<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t max<A>(_:_:)()
{
  return max<A>(_:_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t type metadata accessor for Slice()
{
  return type metadata accessor for Slice();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t Unicode.Scalar.Properties.isUppercase.getter()
{
  return Unicode.Scalar.Properties.isUppercase.getter();
}

uint64_t Unicode.Scalar.Properties.isCased.getter()
{
  return Unicode.Scalar.Properties.isCased.getter();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return type metadata accessor for Unicode.Scalar.Properties();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return Unicode.Scalar.properties.getter();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AFMontaraRestricted()
{
  return _AFMontaraRestricted();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

OSStatus AudioServicesCreateSystemSoundID(CFURLRef inFileURL, SystemSoundID *outSystemSoundID)
{
  return _AudioServicesCreateSystemSoundID(inFileURL, outSystemSoundID);
}

OSStatus AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID)
{
  return _AudioServicesDisposeSystemSoundID(inSystemSoundID);
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

uint64_t CAImageQueueCollect()
{
  return _CAImageQueueCollect();
}

uint64_t CAImageQueueConsumeUnconsumedInRange()
{
  return _CAImageQueueConsumeUnconsumedInRange();
}

uint64_t CAImageQueueFlush()
{
  return _CAImageQueueFlush();
}

uint64_t CAImageQueueGetReleasedImageInfo()
{
  return _CAImageQueueGetReleasedImageInfo();
}

uint64_t CAImageQueueGetTimes()
{
  return _CAImageQueueGetTimes();
}

uint64_t CAImageQueueInsertImageWithRotation()
{
  return _CAImageQueueInsertImageWithRotation();
}

uint64_t CAImageQueueInvalidate()
{
  return _CAImageQueueInvalidate();
}

uint64_t CAImageQueueRegisterIOSurfaceBuffer()
{
  return _CAImageQueueRegisterIOSurfaceBuffer();
}

uint64_t CAImageQueueUnregisterBuffer()
{
  return _CAImageQueueUnregisterBuffer();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

uint64_t CFPhoneNumberCreate()
{
  return _CFPhoneNumberCreate();
}

uint64_t CFPhoneNumberCreateString()
{
  return _CFPhoneNumberCreateString();
}

void CFRelease(CFTypeRef cf)
{
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformConcat(retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return _CGAffineTransformMakeRotation(retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return _CGBitmapContextCreate(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return _CGBitmapContextCreateImage(context);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return _CGColorCreateGenericGray(gray, alpha);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return _CGColorSpaceCreateDeviceRGB();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return _CGColorSpaceCreateWithName(name);
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return _CGImageCreateWithImageInRect(image, rect);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return _CGImageDestinationCreateWithData(data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return _CGImageDestinationFinalize(idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return _CGImageGetBitmapInfo(image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return _CGImageGetBitsPerComponent(image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return _CGImageGetColorSpace(image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  CGPoint v4 = _CGPointApplyAffineTransform(point, t);
  double y = v4.y;
  double x = v4.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  return _CGRectApplyAffineTransform(rect, t);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return _CGRectIsInfinite(rect);
}

BOOL CGRectIsNull(CGRect rect)
{
  return _CGRectIsNull(rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectOffset(rect, dx, dy);
}

CGRect CGRectStandardize(CGRect rect)
{
  return _CGRectStandardize(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return _CMFormatDescriptionGetMediaSubType(desc);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return _CMFormatDescriptionGetMediaType(desc);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetFormatDescription(sbuf);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetImageBuffer(sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetPresentationTimeStamp(retstr, sbuf);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  return _CMTimeGetSeconds(time);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return _CMVideoFormatDescriptionGetDimensions(videoDesc);
}

uint64_t CUIKAdjustedColorForColor()
{
  return _CUIKAdjustedColorForColor();
}

uint64_t CUIKBackgroundColorForCalendarColorWithOpaqueForStyle()
{
  return _CUIKBackgroundColorForCalendarColorWithOpaqueForStyle();
}

uint64_t CUIKOccurrenceSecondaryTextColor()
{
  return _CUIKOccurrenceSecondaryTextColor();
}

uint64_t CUIKOccurrenceTextColor()
{
  return _CUIKOccurrenceTextColor();
}

CFDictionaryRef CVPixelBufferCopyCreationAttributes(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferCopyCreationAttributes(pixelBuffer);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return _CVPixelBufferCreate(allocator, width, height, pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBaseAddress(pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBytesPerRow(pixelBuffer);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetDataSize(pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetHeight(pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetIOSurface(pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetPixelFormatType(pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetWidth(pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return _CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return _CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags);
}

uint64_t DDResultIsValidPhoneNumberString()
{
  return _DDResultIsValidPhoneNumberString();
}

uint64_t FPSupport_EnsureCAImageQueue()
{
  return _FPSupport_EnsureCAImageQueue();
}

uint64_t FigCaptureGetExperimentsEnabled()
{
  return _FigCaptureGetExperimentsEnabled();
}

uint64_t GEOAngleDifferenceDegrees()
{
  return _GEOAngleDifferenceDegrees();
}

uint64_t GEOBearingFromCoordinateToCoordinate()
{
  return _GEOBearingFromCoordinateToCoordinate();
}

uint64_t GEOCalculateDistance()
{
  return _GEOCalculateDistance();
}

uint64_t GEOErrorDomain()
{
  return _GEOErrorDomain();
}

uint64_t GEOMapRectContainsRect()
{
  return _GEOMapRectContainsRect();
}

uint64_t GEOMapRectMakeWithRadialDistance()
{
  return _GEOMapRectMakeWithRadialDistance();
}

uint64_t GEOStringForError()
{
  return _GEOStringForError();
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return _IOSurfaceGetBaseAddress(buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return _IOSurfaceLock(buffer, options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return _IOSurfaceUnlock(buffer, options, seed);
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

CLLocationCoordinate2D MKCoordinateForMapPoint(MKMapPoint mapPoint)
{
  CLLocationCoordinate2D v3 = _MKCoordinateForMapPoint(mapPoint);
  double longitude = v3.longitude;
  double latitude = v3.latitude;
  result.double longitude = longitude;
  result.double latitude = latitude;
  return result;
}

MKMapPoint MKMapPointForCoordinate(CLLocationCoordinate2D coordinate)
{
  MKMapPoint v3 = _MKMapPointForCoordinate(coordinate);
  double y = v3.y;
  double x = v3.x;
  result.double y = y;
  result.double x = x;
  return result;
}

id MTLCreateSystemDefaultDevice(void)
{
  return _MTLCreateSystemDefaultDevice();
}

uint64_t MobileGestalt_copy_hwModelStr_obj()
{
  return _MobileGestalt_copy_hwModelStr_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t MobileGestalt_get_mainScreenHeight()
{
  return _MobileGestalt_get_mainScreenHeight();
}

uint64_t MobileGestalt_get_mainScreenWidth()
{
  return _MobileGestalt_get_mainScreenWidth();
}

uint64_t MobileGestalt_get_regionalBehaviorShutterClick()
{
  return _MobileGestalt_get_regionalBehaviorShutterClick();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t SBSRequestPasscodeUnlockUI()
{
  return _SBSRequestPasscodeUnlockUI();
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return _UIImagePNGRepresentation(image);
}

OSStatus VTCreateCGImageFromCVPixelBuffer(CVPixelBufferRef pixelBuffer, CFDictionaryRef options, CGImageRef *imageOut)
{
  return _VTCreateCGImageFromCVPixelBuffer(pixelBuffer, options, imageOut);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _UIImageIdentityName()
{
  return __UIImageIdentityName();
}

uint64_t _UIImageIsSystemSymbol()
{
  return __UIImageIsSystemSymbol();
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

simd_float4 _simd_cos_f4(simd_float4 x)
{
  return __simd_cos_f4(x);
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  return __simd_sin_f4(x);
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return __swift_isClassOrObjCExistentialType();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

long double cos(long double __x)
{
  return _cos(__x);
}

void dispatch_activate(dispatch_object_t object)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return _dispatch_workloop_create_inactive(label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return _dispatch_workloop_set_scheduler_priority();
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  return _exp2(__x);
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

float fmodf(float a1, float a2)
{
  return _fmodf(a1, a2);
}

void free(void *a1)
{
}

float log10f(float a1)
{
  return _log10f(a1);
}

long double log2(long double __x)
{
  return _log2(__x);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

long double sin(long double __x)
{
  return _sin(__x);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_resume()
{
  return _swift_continuation_resume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocObject()
{
  return _swift_deallocObject();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return _swift_dynamicCastObjCProtocolUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return _swift_getTupleTypeMetadata3();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return _swift_initEnumMetadataSingleCase();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

uint64_t vfx_script_clock_delta_time()
{
  return _vfx_script_clock_delta_time();
}

uint64_t vfx_script_clock_time()
{
  return _vfx_script_clock_time();
}

uint64_t vfx_script_color_ramp_copy()
{
  return _vfx_script_color_ramp_copy();
}

uint64_t vfx_script_color_ramp_create()
{
  return _vfx_script_color_ramp_create();
}

uint64_t vfx_script_color_ramp_destroy()
{
  return _vfx_script_color_ramp_destroy();
}

uint64_t vfx_script_get_arguments_buffer()
{
  return _vfx_script_get_arguments_buffer();
}

uint64_t vfx_script_get_iteration_range()
{
  return _vfx_script_get_iteration_range();
}

uint64_t vfx_script_texture_sample1d()
{
  return _vfx_script_texture_sample1d();
}

id objc_msgSend__initWithIOSurface_imageOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithIOSurface:imageOrientation:");
}

id objc_msgSend__placecardLayout(void *a1, const char *a2, ...)
{
  return _[a1 _placecardLayout];
}

id objc_msgSend_actionManager(void *a1, const char *a2, ...)
{
  return _[a1 actionManager];
}

id objc_msgSend_actionRowItem(void *a1, const char *a2, ...)
{
  return _[a1 actionRowItem];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:count:];
}

id objc_msgSend_buildButtonLayout(void *a1, const char *a2, ...)
{
  return _[a1 buildButtonLayout];
}

id objc_msgSend_clipMetadataRequest(void *a1, const char *a2, ...)
{
  return _[a1 clipMetadataRequest];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [a1 countByEnumeratingWithState:objects:count:];
}

id objc_msgSend_generateDataDetectorInfoWithTypes_(void *a1, const char *a2, ...)
{
  return [a1 generateDataDetectorInfoWithTypes:];
}

id objc_msgSend_generateDataDetectorInfoWithTypes_unfiltered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateDataDetectorInfoWithTypes:unfiltered:");
}

id objc_msgSend_handledMetadataObjectTypes(void *a1, const char *a2, ...)
{
  return _[a1 handledMetadataObjectTypes];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithConfiguration_delegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:delegate:];
}

id objc_msgSend_initWithMapItem_(void *a1, const char *a2, ...)
{
  return [a1 initWithMapItem:];
}

id objc_msgSend_metadataObjects(void *a1, const char *a2, ...)
{
  return _[a1 metadataObjects];
}

id objc_msgSend_modules(void *a1, const char *a2, ...)
{
  return _[a1 modules];
}

id objc_msgSend_performAction_options_completion_(void *a1, const char *a2, ...)
{
  return [a1 performAction:options:completion:];
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return [a1 performSelector:withObject:];
}

id objc_msgSend_resolvedActionItem(void *a1, const char *a2, ...)
{
  return _[a1 resolvedActionItem];
}

id objc_msgSend_setMapItem_(void *a1, const char *a2, ...)
{
  return [a1 setMapItem:];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unifiedActionConfig(void *a1, const char *a2, ...)
{
  return _[a1 unifiedActionConfig];
}

id objc_msgSend_unifiedActionRowConfigurationWithButtonModuleConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 unifiedActionRowConfigurationWithButtonModuleConfiguration:];
}

id objc_msgSend_valueWithCMTime_(void *a1, const char *a2, ...)
{
  return [a1 valueWithCMTime:];
}