Swift::Bool __swiftcall BuildType.isAny(of:)(Swift::OpaquePointer of)
{
  char v1;

  return sub_100004CC8(v1, (uint64_t)of._rawValue);
}

uint64_t sub_100004CC8(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (2)
    {
      uint64_t v6 = a2 + v5++;
      unint64_t v7 = 0xE500000000000000;
      uint64_t v8 = 0x6775626564;
      switch(*(unsigned char *)(v6 + 32))
      {
        case 1:
          uint64_t v8 = 0x65677265766E6F63;
          unint64_t v7 = 0xEB0000000065636ELL;
          break;
        case 2:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x6C616E7265746E69;
          break;
        case 3:
          uint64_t v8 = 0x69746375646F7270;
          unint64_t v7 = 0xEA00000000006E6FLL;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE500000000000000;
      uint64_t v10 = 0x6775626564;
      switch(a1)
      {
        case 1:
          unint64_t v9 = 0xEB0000000065636ELL;
          if (v8 == 0x65677265766E6F63) {
            goto LABEL_12;
          }
          goto LABEL_13;
        case 2:
          unint64_t v9 = 0xE800000000000000;
          uint64_t v10 = 0x6C616E7265746E69;
          goto LABEL_11;
        case 3:
          unint64_t v9 = 0xEA00000000006E6FLL;
          if (v8 != 0x69746375646F7270) {
            goto LABEL_13;
          }
          goto LABEL_12;
        default:
LABEL_11:
          if (v8 != v10) {
            goto LABEL_13;
          }
LABEL_12:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return 1;
          }
LABEL_13:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11)
          {
            swift_bridgeObjectRelease();
            return 1;
          }
          if (v2 != v5) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  return 0;
}

uint64_t BuildType.rawValue.getter(char a1)
{
  uint64_t result = 0x6775626564;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x65677265766E6F63;
      break;
    case 2:
      uint64_t result = 0x6C616E7265746E69;
      break;
    case 3:
      uint64_t result = 0x69746375646F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100004F78(unsigned __int8 *a1, char *a2)
{
  return sub_100008418(*a1, *a2);
}

Swift::Int sub_100004F84()
{
  return Hasher._finalize()();
}

uint64_t sub_100005068()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100005134()
{
  return Hasher._finalize()();
}

unint64_t sub_100005214@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s13GameOverlayUI9BuildTypeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100005244(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x6775626564;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB0000000065636ELL;
      uint64_t v3 = 0x65677265766E6F63;
      goto LABEL_3;
    case 2:
      *a1 = 0x6C616E7265746E69;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 0x69746375646F7270;
      a1[1] = 0xEA00000000006E6FLL;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t variable initialization expression of Page.background@<X0>(uint64_t a1@<X8>)
{
  return sub_100005388(type metadata accessor for Page.Background, a1);
}

void *variable initialization expression of Page.refreshConditions()
{
  return &_swiftEmptyArrayStorage;
}

double variable initialization expression of Shelf._titleSegue@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of Shelf.Presentation.icon@<X0>(uint64_t a1@<X8>)
{
  return sub_100005388(type metadata accessor for Shelf.Presentation.HeaderIconType, a1);
}

uint64_t variable initialization expression of Shelf.accessoryType()
{
  return 3;
}

uint64_t variable initialization expression of Shelf.Presentation.bottomSubtitle()
{
  return 0;
}

uint64_t variable initialization expression of Shelf.impressionMetrics@<X0>(uint64_t a1@<X8>)
{
  return sub_100005388((uint64_t (*)(void))&type metadata accessor for ImpressionMetrics, a1);
}

uint64_t variable initialization expression of Shelf.headerMargins()
{
  return 4;
}

uint64_t variable initialization expression of DashboardRequest.isArcade()
{
  return 0;
}

uint64_t variable initialization expression of GameDashboardLaunchContext.action@<X0>(uint64_t a1@<X8>)
{
  return sub_100005388((uint64_t (*)(void))type metadata accessor for LaunchDashboardAction, a1);
}

uint64_t sub_100005388@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of AccessPointPageView._imageCache()
{
  return LRUMultiCache.init(keyLimit:valueLimit:)();
}

double variable initialization expression of DashboardRequest.statusBarHeight()
{
  return 0.0;
}

uint64_t variable initialization expression of DashboardRequest.leaderboardInternal()
{
  return 0;
}

uint64_t variable initialization expression of DashboardRequest.viewState()
{
  return -1;
}

uint64_t variable initialization expression of DashboardRequest.leaderboardTimeScope()
{
  return 2;
}

uint64_t variable initialization expression of DashboardRequest.leaderboardPlayerScope()
{
  return 1;
}

uint64_t sub_10000546C(uint64_t a1, uint64_t a2)
{
  return sub_100005934(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005498(uint64_t a1, uint64_t a2)
{
  return sub_100005934(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000054B0(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100005528(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000055A8@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1000055EC(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1000055F8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100005604(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100005618@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_100005628@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void *sub_100005638@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10000564C(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_100005660(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100005674(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_10000568C(uint64_t a1)
{
  uint64_t v2 = sub_100005E60(&qword_10013FD58, type metadata accessor for AMSBagKey);
  uint64_t v3 = sub_100005E60(&qword_10013FD60, type metadata accessor for AMSBagKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005748@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100005774(uint64_t a1)
{
  uint64_t v2 = sub_100005E60((unint64_t *)&qword_100142AB0, type metadata accessor for Key);
  uint64_t v3 = sub_100005E60(&qword_10013FDA0, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005830@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100005878(uint64_t a1)
{
  uint64_t v2 = sub_100005E60(&qword_10013FDD8, type metadata accessor for AMSMediaArtworkColorKind);
  uint64_t v3 = sub_100005E60((unint64_t *)&unk_10013FDE0, type metadata accessor for AMSMediaArtworkColorKind);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005934(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100005978()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000059CC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100005A40()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t _s13GameOverlayUI9BuildTypeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10012F8F0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100005B18(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100005B60()
{
  unint64_t result = qword_10013FD10;
  if (!qword_10013FD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FD10);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for BuildType(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BuildType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BuildType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100005D20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100005D48(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100005D54(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BuildType()
{
  return &type metadata for BuildType;
}

void type metadata accessor for GKDeepLinkDestinationInternal(uint64_t a1)
{
}

void type metadata accessor for GKLeaderboardPlayerScope(uint64_t a1)
{
}

void type metadata accessor for GKLeaderboardTimeScope(uint64_t a1)
{
}

void type metadata accessor for GKGameCenterViewControllerState(uint64_t a1)
{
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
}

uint64_t sub_100005DD0()
{
  return sub_100005E60(&qword_10013FD40, type metadata accessor for AMSBagKey);
}

uint64_t sub_100005E18()
{
  return sub_100005E60(&qword_10013FD48, type metadata accessor for AMSBagKey);
}

uint64_t sub_100005E60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005EA8()
{
  return sub_100005E60(&qword_10013FD50, type metadata accessor for AMSBagKey);
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t _s23FriendRequestInboxEntryVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_100005F38(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100005F44(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100005F64(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

__n128 initializeWithTake for InGameBannerPageIntentImplementation(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t sub_100005FC4()
{
  return sub_100005E60(&qword_10013FD80, type metadata accessor for Key);
}

uint64_t sub_10000600C()
{
  return sub_100005E60(&qword_10013FD88, type metadata accessor for Key);
}

uint64_t sub_100006054()
{
  return sub_100005E60((unint64_t *)&unk_10013FD90, type metadata accessor for Key);
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for AMSMediaArtworkColorKind(uint64_t a1)
{
}

uint64_t sub_1000060C4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000060E4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_100006120(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100006168()
{
  return sub_100005E60(&qword_10013FDC0, type metadata accessor for AMSMediaArtworkColorKind);
}

uint64_t sub_1000061B0()
{
  return sub_100005E60(&qword_10013FDC8, type metadata accessor for AMSMediaArtworkColorKind);
}

uint64_t sub_1000061F8()
{
  return sub_100005E60(&qword_10013FDD0, type metadata accessor for AMSMediaArtworkColorKind);
}

void DashboardRequest.viewState.setter()
{
}

void *PlayNowPageIntent.kind.unsafeMutableAddressor()
{
  return &static PlayNowPageIntent.kind;
}

unint64_t static PlayNowPageIntent.kind.getter()
{
  return 0xD000000000000011;
}

uint64_t PlayNowPageIntent.player.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000062A4(v1, a1);
}

uint64_t sub_1000062A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Int sub_100006300()
{
  return Hasher._finalize()();
}

void sub_100006344()
{
}

Swift::Int sub_10000636C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000063AC()
{
  return 0x726579616C70;
}

uint64_t sub_1000063C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100006450()
{
  return 0;
}

void sub_10000645C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100006468(uint64_t a1)
{
  unint64_t v2 = sub_100006694();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000064A4(uint64_t a1)
{
  unint64_t v2 = sub_100006694();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PlayNowPageIntent.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005B18(&qword_10013FF10);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_100006694();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = *(_OWORD *)(v2 + 112);
  v13[6] = *(_OWORD *)(v2 + 96);
  v13[7] = v8;
  v13[8] = *(_OWORD *)(v2 + 128);
  uint64_t v14 = *(void *)(v2 + 144);
  long long v9 = *(_OWORD *)(v2 + 48);
  v13[2] = *(_OWORD *)(v2 + 32);
  v13[3] = v9;
  long long v10 = *(_OWORD *)(v2 + 80);
  v13[4] = *(_OWORD *)(v2 + 64);
  v13[5] = v10;
  long long v11 = *(_OWORD *)(v2 + 16);
  v13[0] = *(_OWORD *)v2;
  v13[1] = v11;
  sub_1000066E8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *sub_100006650(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100006694()
{
  unint64_t result = qword_10013FF18;
  if (!qword_10013FF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FF18);
  }
  return result;
}

unint64_t sub_1000066E8()
{
  unint64_t result = qword_10013FF20;
  if (!qword_10013FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FF20);
  }
  return result;
}

double PlayNowPageIntent.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000067F4(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(void *)(a2 + 144) = v10;
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

void sub_1000067B0(void *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x800000010010AF70;
}

uint64_t sub_1000067DC(void *a1)
{
  return PlayNowPageIntent.encode(to:)(a1);
}

uint64_t sub_1000067F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005B18(&qword_10013FF40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  long long v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_100006694();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1000071D8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    long long v9 = v21;
    *(_OWORD *)(a2 + 96) = v20;
    *(_OWORD *)(a2 + 112) = v9;
    *(_OWORD *)(a2 + 128) = v22;
    *(void *)(a2 + 144) = v23;
    long long v10 = v17;
    *(_OWORD *)(a2 + 32) = v16;
    *(_OWORD *)(a2 + 48) = v10;
    long long v11 = v19;
    *(_OWORD *)(a2 + 64) = v18;
    *(_OWORD *)(a2 + 80) = v11;
    long long v12 = v15;
    *(_OWORD *)a2 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a2 + 16) = v12;
  }
  return sub_100007188((uint64_t)a1);
}

uint64_t destroy for Player(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Player(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v9;
    uint64_t v10 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v10;
    uint64_t v11 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v11;
    uint64_t v12 = *(void *)(a2 + 136);
    uint64_t v13 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = v12;
    *(void *)(a1 + 144) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v14;
    long long v15 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for Player(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v4 = (_OWORD *)(a1 + 88);
  uint64_t v5 = (long long *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v6)
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100006D1C(a1 + 88);
      long long v7 = *(_OWORD *)(a2 + 136);
      long long v9 = *v5;
      long long v8 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v7;
      *uint64_t v4 = v9;
      *(_OWORD *)(a1 + 104) = v8;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v12;
    *uint64_t v4 = v10;
    *(_OWORD *)(a1 + 104) = v11;
  }
  return a1;
}

uint64_t sub_100006D1C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Player(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for Player(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  if (!*(void *)(a1 + 96)) {
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9)
  {
    sub_100006D1C(a1 + 88);
LABEL_5:
    long long v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    long long v14 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v14;
    return a1;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Player(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Player(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayNowPageIntent()
{
  return &type metadata for PlayNowPageIntent;
}

uint64_t getEnumTagSinglePayload for PlayNowPageIntent.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for PlayNowPageIntent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100007048);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayNowPageIntent.CodingKeys()
{
  return &type metadata for PlayNowPageIntent.CodingKeys;
}

unint64_t sub_100007084()
{
  unint64_t result = qword_10013FF28;
  if (!qword_10013FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FF28);
  }
  return result;
}

unint64_t sub_1000070DC()
{
  unint64_t result = qword_10013FF30;
  if (!qword_10013FF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FF30);
  }
  return result;
}

unint64_t sub_100007134()
{
  unint64_t result = qword_10013FF38;
  if (!qword_10013FF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FF38);
  }
  return result;
}

uint64_t sub_100007188(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_1000071D8()
{
  unint64_t result = qword_10013FF48;
  if (!qword_10013FF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FF48);
  }
  return result;
}

uint64_t property wrapper backing initializer of OverlayBootstrap.startUpCoordinator(uint64_t a1)
{
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  uint64_t v3 = *(void *)(started - 8);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, started);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, started);
}

uint64_t OverlayBootstrap.init()@<X0>(uint64_t a1@<X8>)
{
  sub_10000735C();
  uint64_t result = sub_100005B18(&qword_10013FF50);
  *(void *)(a1 + *(int *)(result + 28)) = 0;
  return result;
}

uint64_t sub_10000735C()
{
  uint64_t started = type metadata accessor for JetStartUpProcedure();
  uint64_t v1 = *(void *)(started - 8);
  __chkstk_darwin(started);
  uint64_t v3 = (uint64_t *)&v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = &type metadata for GameOverlayUIFeatureFlags;
  unint64_t v11 = sub_100007D84();
  v9[0] = 2;
  char v4 = isFeatureEnabled(_:)();
  sub_100007188((uint64_t)v9);
  if (v4)
  {
    sub_100005B18(&qword_10013FFF8);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_10010B170;
    *(void *)(v5 + 32) = type metadata accessor for Bag();
    *(void *)(v5 + 40) = sub_100008250();
    *uint64_t v3 = v5;
    uint64_t v6 = (unsigned int *)&enum case for JetStartUpProcedure.partialBootstrap(_:);
  }
  else
  {
    uint64_t v6 = (unsigned int *)&enum case for JetStartUpProcedure.lazy(_:);
  }
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, *v6, started);
  static Transaction._loading.getter();
  return JetStartUpCoordinator.init(startUpProcedure:transaction:makeObjects:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for OverlayBootstrap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100005B18(&qword_10013FF50);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t started = type metadata accessor for JetStartUpCoordinator();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(started - 8) + 16))(a1, a2, started);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for OverlayBootstrap(uint64_t a1)
{
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(started - 8) + 8))(a1, started);
  sub_100005B18(&qword_10013FF50);

  return swift_release();
}

uint64_t initializeWithCopy for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 16))(a1, a2, started);
  uint64_t v5 = sub_100005B18(&qword_10013FF50);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 24))(a1, a2, started);
  uint64_t v5 = sub_100005B18(&qword_10013FF50);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 32))(a1, a2, started);
  uint64_t v5 = sub_100005B18(&qword_10013FF50);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  return a1;
}

uint64_t assignWithTake for OverlayBootstrap(uint64_t a1, uint64_t a2)
{
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 40))(a1, a2, started);
  uint64_t v5 = sub_100005B18(&qword_10013FF50);
  *(void *)(a1 + *(int *)(v5 + 28)) = *(void *)(a2 + *(int *)(v5 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OverlayBootstrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000785C);
}

uint64_t sub_10000785C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_10013FF50);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OverlayBootstrap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000078E0);
}

uint64_t sub_1000078E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_10013FF50);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for OverlayBootstrap()
{
  uint64_t result = qword_10013FFB0;
  if (!qword_10013FFB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000079A0()
{
  sub_100007A2C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100007A2C()
{
  if (!qword_10013FFC0)
  {
    type metadata accessor for JetStartUpCoordinator();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10013FFC0);
    }
  }
}

uint64_t sub_100007A84(uint64_t a1)
{
  v1[12] = a1;
  uint64_t v2 = type metadata accessor for NativeIntentDispatcher();
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  return _swift_task_switch(sub_100007B44, 0, 0);
}

uint64_t sub_100007B44()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v4 = (uint64_t *)v0[12];
  uint64_t v3 = v0[13];
  NativeIntentDispatcher.init()();
  v0[5] = v3;
  v0[6] = &protocol witness table for NativeIntentDispatcher;
  uint64_t v5 = sub_1000082EC(v0 + 2);
  sub_1000EE310((uint64_t)v5);
  v4[3] = v3;
  v4[4] = (uint64_t)&protocol witness table for NativeIntentDispatcher;
  uint64_t v6 = sub_1000082EC(v4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v6, v1, v3);
  sub_100008350((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
  NativeIntentDispatcher.next.setter();
  sub_1000083B8((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100007C64()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007CE8(v0, qword_100156CF8);
  sub_100007D4C(v0, (uint64_t)qword_100156CF8);
  return Logger.init(subsystem:category:)();
}

uint64_t *sub_100007CE8(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100007D4C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_100007D84()
{
  unint64_t result = qword_10013FFF0;
  if (!qword_10013FFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10013FFF0);
  }
  return result;
}

uint64_t sub_100007DD8()
{
  uint64_t v0 = type metadata accessor for Dependency();
  uint64_t v34 = *(void *)(v0 - 8);
  uint64_t v35 = v0;
  __chkstk_darwin(v0);
  v33 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for BagProfile();
  __chkstk_darwin(v32);
  uint64_t v3 = (uint64_t *)((char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for AppleServicesURLProtocol();
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v6 = 0xD000000000000017;
  v6[1] = 0x80000001000FC430;
  v6[2] = 0;
  v6[3] = 0;
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  (*(void (**)(void *, void))(v8 + 104))(v6, enum case for AppleServicesURLProtocol.media(_:));
  sub_100005B18(&qword_100140000);
  uint64_t v9 = sub_100005B18(&qword_100144200);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v29 = *(void *)(*(void *)(v9 - 8) + 72);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10010B170;
  uint64_t v12 = *(int *)(v9 + 48);
  if (qword_10013FC90 != -1) {
    swift_once();
  }
  unint64_t v13 = v11 + v10;
  uint64_t v14 = v11 + v10 + v12;
  long long v15 = (void *)static Bag.metricsTopicKey;
  *(void *)(v11 + v10) = static Bag.metricsTopicKey;
  strcpy((char *)v14, "xp_amp_gc_cs");
  *(unsigned char *)(v14 + 13) = 0;
  *(_WORD *)(v14 + 14) = -5120;
  uint64_t v16 = enum case for Bag.ValueOverride.string(_:);
  uint64_t v17 = type metadata accessor for Bag.ValueOverride();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v28 = v11;
  long long v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 104);
  v19(v14, v16, v17);
  long long v20 = (NSString *)(v13 + v29);
  long long v21 = (char *)v20 + *(int *)(v9 + 48);
  id v22 = v15;
  *long long v20 = String._bridgeToObjectiveC()();
  *long long v21 = 1;
  v19((uint64_t)v21, enum case for Bag.ValueOverride.BOOL(_:), v17);
  unint64_t v23 = sub_1000B94B4(v28);
  *uint64_t v3 = 0x746E6543656D6147;
  v3[1] = 0xEA00000000007265;
  v3[2] = 49;
  v3[3] = 0xE100000000000000;
  uint64_t v24 = v32;
  Bag.Stubs.init()();
  *(void *)((char *)v3 + *(int *)(v24 + 28)) = v23;
  sub_1000EE760((uint64_t)v6, (uint64_t)v3);
  sub_100008290((uint64_t)v3);
  (*(void (**)(void *, uint64_t))(v30 + 8))(v6, v31);
  sub_100005B18(&qword_100140008);
  swift_retain();
  v25 = v33;
  Dependency.init<A>(satisfying:with:)();
  swift_retain();
  uint64_t v26 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
  return v26;
}

unint64_t sub_100008250()
{
  unint64_t result = qword_100145E20;
  if (!qword_100145E20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_100145E20);
  }
  return result;
}

uint64_t sub_100008290(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BagProfile();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_1000082EC(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100008350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000083B8(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100140018);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100008418(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6775626564;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6775626564;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x65677265766E6F63;
      unint64_t v3 = 0xEB0000000065636ELL;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x6C616E7265746E69;
      break;
    case 3:
      uint64_t v5 = 0x69746375646F7270;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEB0000000065636ELL;
      if (v5 == 0x65677265766E6F63) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x6C616E7265746E69;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000006E6FLL;
      if (v5 == 0x69746375646F7270) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1000085B8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000063;
  uint64_t v3 = 0x6974616D6F747561;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6974616D6F747561;
  unint64_t v6 = 0xE900000000000063;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1701736302;
      break;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x647261646E617473;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1701079415;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1701736302) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x647261646E617473;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1701079415) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100008730(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEA0000000000756ELL;
  unint64_t v3 = 0x654D656461637261;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x756E654D656D6167;
    }
    else {
      unint64_t v5 = 0xD000000000000011;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE800000000000000;
    }
    else {
      unint64_t v6 = 0x80000001000FC090;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x654D656461637261;
  unint64_t v6 = 0xEA0000000000756ELL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x756E654D656D6167;
    }
    else {
      unint64_t v3 = 0xD000000000000011;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE800000000000000;
    }
    else {
      unint64_t v2 = 0x80000001000FC090;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10000884C(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 0x7265746E6563;
    }
    else {
      uint64_t v2 = 0x6D6F74746F62;
    }
    unint64_t v3 = 0xE600000000000000;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 0x7265746E6563;
      }
      else {
        uint64_t v5 = 0x6D6F74746F62;
      }
      unint64_t v6 = 0xE600000000000000;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v2 = 7368564;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0xE300000000000000;
  if (v2 != 7368564)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6) {
    goto LABEL_15;
  }
  char v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100008948(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6C61636974726576;
  }
  else {
    uint64_t v3 = 0x746E6F7A69726F68;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000006C61;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6C61636974726576;
  }
  else {
    uint64_t v5 = 0x746E6F7A69726F68;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xEA00000000006C61;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000089F4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6E776F6873;
  }
  else {
    uint64_t v3 = 0x6E6564646968;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6E776F6873;
  }
  else {
    uint64_t v5 = 0x6E6564646968;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100008A94(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD00000000000001BLL;
  unint64_t v3 = 0x80000001000FC180;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD00000000000001BLL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "action:in-game-banner-overlay";
      goto LABEL_7;
    case 2:
      unint64_t v5 = 0xD000000000000018;
      char v7 = "action:dashboard-overlay";
      goto LABEL_10;
    case 3:
      unint64_t v5 = 0xD00000000000001ALL;
      char v7 = "action:multiplayer-overlay";
      goto LABEL_10;
    case 4:
      unint64_t v5 = 0xD000000000000025;
      char v7 = "action:turn-based-multiplayer-overlay";
      goto LABEL_10;
    case 5:
      unint64_t v6 = "action:authentication-overlay";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD00000000000001DLL;
      break;
    case 6:
      unint64_t v5 = 0xD000000000000019;
      char v7 = "action:onboarding-overlay";
      goto LABEL_10;
    case 7:
      unint64_t v5 = 0xD000000000000028;
      char v7 = "action:activity-sharing-reprompt-overlay";
LABEL_10:
      unint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x80000001000FC180;
  switch(a2)
  {
    case 1:
      uint64_t v9 = "action:in-game-banner-overlay";
      goto LABEL_17;
    case 2:
      unint64_t v10 = 0xD000000000000018;
      uint64_t v11 = "action:dashboard-overlay";
      goto LABEL_22;
    case 3:
      unint64_t v10 = 0xD00000000000001ALL;
      uint64_t v11 = "action:multiplayer-overlay";
      goto LABEL_22;
    case 4:
      unint64_t v10 = 0xD000000000000025;
      uint64_t v11 = "action:turn-based-multiplayer-overlay";
      goto LABEL_22;
    case 5:
      uint64_t v9 = "action:authentication-overlay";
LABEL_17:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD00000000000001DLL;
      goto LABEL_18;
    case 6:
      unint64_t v10 = 0xD000000000000019;
      uint64_t v11 = "action:onboarding-overlay";
      goto LABEL_22;
    case 7:
      unint64_t v10 = 0xD000000000000028;
      uint64_t v11 = "action:activity-sharing-reprompt-overlay";
LABEL_22:
      unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v5 == v10) {
        goto LABEL_23;
      }
      goto LABEL_25;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_23:
      if (v3 == v8) {
        char v12 = 1;
      }
      else {
LABEL_25:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_100008CAC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001000FC0B0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6F50737365636361;
      unint64_t v3 = 0xEF796C6E4F746E69;
      break;
    case 2:
      unint64_t v5 = 0xD00000000000001BLL;
      unint64_t v6 = "welcomeBannerAndAccessPoint";
      goto LABEL_7;
    case 3:
      unint64_t v6 = "achievementBanner";
      goto LABEL_7;
    case 4:
      unint64_t v5 = 0xD000000000000020;
      unint64_t v6 = "leaderboardBeatFriendScoreBanner";
      goto LABEL_7;
    case 5:
      unint64_t v5 = 0xD00000000000001ELL;
      unint64_t v6 = "leaderboardTopPercentageBanner";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v5 = 0x6142656D61476E69;
      unint64_t v3 = 0xEC00000072656E6ELL;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x80000001000FC0B0;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xEF796C6E4F746E69;
      if (v5 == 0x6F50737365636361) {
        goto LABEL_18;
      }
      goto LABEL_21;
    case 2:
      unint64_t v2 = 0xD00000000000001BLL;
      unint64_t v8 = "welcomeBannerAndAccessPoint";
      goto LABEL_16;
    case 3:
      unint64_t v8 = "achievementBanner";
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0xD000000000000020;
      unint64_t v8 = "leaderboardBeatFriendScoreBanner";
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xD00000000000001ELL;
      unint64_t v8 = "leaderboardTopPercentageBanner";
LABEL_16:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_17;
    case 6:
      unint64_t v7 = 0xEC00000072656E6ELL;
      if (v5 != 0x6142656D61476E69) {
        goto LABEL_21;
      }
      goto LABEL_18;
    default:
LABEL_17:
      if (v5 != v2) {
        goto LABEL_21;
      }
LABEL_18:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_21:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_100008ECC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000063;
  uint64_t v3 = 0x6974616D6F747561;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6974616D6F747561;
  unint64_t v6 = 0xE900000000000063;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x656772616CLL;
      break;
    case 2:
      uint64_t v5 = 0x614C656E696C6E69;
      unint64_t v6 = 0xEB00000000656772;
      break;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x656E696C6E69;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x656772616CLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x614C656E696C6E69;
      unint64_t v2 = 0xEB00000000656772;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE600000000000000;
      if (v5 == 0x656E696C6E69) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100009064(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x656C63726963;
  }
  else {
    uint64_t v3 = 0x656C7573706163;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x656C63726963;
  }
  else {
    uint64_t v5 = 0x656C7573706163;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100009108(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1953064037;
  }
  else {
    uint64_t v3 = 0x656461637261;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1953064037;
  }
  else {
    uint64_t v5 = 0x656461637261;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000091A4(void *a1, uint64_t a2, int a3)
{
  int v26 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = sub_100005B18(&qword_1001408A0);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  __chkstk_darwin(v4);
  id v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_1001408A8);
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_1001408B0);
  uint64_t v19 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100005B18(&qword_1001408B8);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10001FA84();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!(_BYTE)v26)
  {
    char v28 = 1;
    sub_10001FB2C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v20;
    goto LABEL_5;
  }
  if (v26 == 1)
  {
    char v29 = 2;
    sub_10001FAD8();
    unint64_t v8 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v24;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v23;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  char v27 = 0;
  sub_10001FB80();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10000958C()
{
  uint64_t v1 = 0x7261657070416E6FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x726765726F466E6FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65526F546C6C7570;
  }
}

uint64_t sub_1000095FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001388C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100009624(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100009630(uint64_t a1)
{
  unint64_t v2 = sub_10001FA84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000966C(uint64_t a1)
{
  unint64_t v2 = sub_10001FA84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000096B0()
{
  return 0x4968736572666572;
}

uint64_t sub_1000096D8(uint64_t a1)
{
  unint64_t v2 = sub_10001FB2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009714(uint64_t a1)
{
  unint64_t v2 = sub_10001FB2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100009750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4968736572666572 && a2 == 0xEF6C61767265746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10000980C(uint64_t a1)
{
  unint64_t v2 = sub_10001FAD8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009848(uint64_t a1)
{
  unint64_t v2 = sub_10001FAD8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100009884()
{
  return 0;
}

uint64_t sub_100009890@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1000098C0(uint64_t a1)
{
  unint64_t v2 = sub_10001FB80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000098FC(uint64_t a1)
{
  unint64_t v2 = sub_10001FB80();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100009938@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100013A20(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100009968(void *a1)
{
  return sub_1000091A4(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

BOOL sub_100009988(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
    return *(double *)a1 == v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v3 != 1) {
      return 0;
    }
    return *(double *)a1 == v2;
  }
  return v3 == 2 && *(void *)&v2 == 0;
}

uint64_t sub_1000099E8()
{
  return 0x6E6172546D6F6F7ALL;
}

uint64_t sub_100009A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6172546D6F6F7ALL && a2 == 0xEF6E6F6974616C73)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100009AC8(uint64_t a1)
{
  unint64_t v2 = sub_10000A050();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009B04(uint64_t a1)
{
  unint64_t v2 = sub_10000A050();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100009B40()
{
  if (*v0) {
    return 0x7974696C617571;
  }
  else {
    return 0x6B726F77747261;
  }
}

uint64_t sub_100009B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100013FC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100009B9C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100009BA8(uint64_t a1)
{
  unint64_t v2 = sub_10000A0A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009BE4(uint64_t a1)
{
  unint64_t v2 = sub_10000A0A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.Background.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100005B18(&qword_100140020);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v25 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MediaArtwork();
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Page.Background(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_100140028);
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10000A050();
  uint64_t v13 = v2;
  uint64_t v14 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10000C0C0(v24, (uint64_t)v9, type metadata accessor for Page.Background);
  long long v15 = &v9[*(int *)(sub_100005B18(&qword_100140038) + 48)];
  uint64_t v24 = *(void *)v15;
  int v29 = v15[8];
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v6, v9, v4);
  sub_10000A0A4();
  uint64_t v16 = v25;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v31 = 0;
  sub_10000A5D4(&qword_100140048, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
  uint64_t v17 = v27;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v12, v10);
  }
  else
  {
    uint64_t v21 = v12;
    uint64_t v22 = v10;
    uint64_t v19 = v26;
    uint64_t v27 = v4;
    uint64_t v20 = v28;
    char v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v22);
  }
}

uint64_t type metadata accessor for Page.Background(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100140510);
}

unint64_t sub_10000A050()
{
  unint64_t result = qword_100140030;
  if (!qword_100140030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140030);
  }
  return result;
}

unint64_t sub_10000A0A4()
{
  unint64_t result = qword_100140040;
  if (!qword_100140040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140040);
  }
  return result;
}

uint64_t Page.Background.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v33 = type metadata accessor for Page.Background(0);
  __chkstk_darwin(v33);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_100140050);
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100140058);
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10000A050();
  uint64_t v11 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    goto LABEL_5;
  }
  uint64_t v12 = v35;
  v36 = a1;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v13 + 16) != 1)
  {
    uint64_t v14 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v16 = v15;
    sub_100005B18(&qword_100140060);
    *uint64_t v16 = v33;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, enum case for DecodingError.typeMismatch(_:), v14);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
    a1 = v36;
LABEL_5:
    uint64_t v30 = (uint64_t)a1;
    return sub_100007188(v30);
  }
  sub_10000A0A4();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v33 = v13;
  type metadata accessor for MediaArtwork();
  char v38 = 0;
  sub_10000A5D4(&qword_100140068, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
  uint64_t v17 = v7;
  uint64_t v18 = (uint64_t)v4;
  uint64_t v19 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v10;
  char v37 = 1;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v34;
  uint64_t v31 = v22;
  char v25 = v24;
  uint64_t v26 = sub_100005B18(&qword_100140038);
  uint64_t v27 = v19;
  uint64_t v28 = v18 + *(int *)(v26 + 48);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v8);
  uint64_t v29 = v32;
  *(void *)uint64_t v28 = v31;
  *(unsigned char *)(v28 + 8) = v25 & 1;
  sub_1000173E4(v18, v29, type metadata accessor for Page.Background);
  uint64_t v30 = (uint64_t)v36;
  return sub_100007188(v30);
}

uint64_t sub_10000A5D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A61C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Page.Background.init(from:)(a1, a2);
}

uint64_t sub_10000A634(void *a1)
{
  return Page.Background.encode(to:)(a1);
}

uint64_t Page.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001233C((uint64_t (*)(void))&type metadata accessor for PageID, a1);
}

uint64_t Page.id.setter(uint64_t a1)
{
  return sub_1000123C4(a1, (uint64_t (*)(void))&type metadata accessor for PageID);
}

uint64_t (*Shelf.id.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Page(0) + 20);
  uint64_t v4 = type metadata accessor for PageMetrics();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for Page(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100140440);
}

uint64_t Page.pageMetrics.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Page(0) + 20);
  uint64_t v4 = type metadata accessor for PageMetrics();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*Page.pageMetrics.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.title.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Page(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Page.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Page(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Page.title.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.titleDisplayMode.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 28));
}

uint64_t Page.titleDisplayMode.setter(char a1)
{
  uint64_t result = type metadata accessor for Page(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*Page.titleDisplayMode.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.toolbarItemGroups.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Page(0) + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Page.toolbarItemGroups.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(v3 + *(int *)(type metadata accessor for Page(0) + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  return result;
}

uint64_t (*Page.toolbarItemGroups.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.shelves.getter()
{
  type metadata accessor for Page(0);

  return swift_bridgeObjectRetain();
}

uint64_t Page.shelves.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Page(0) + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Page.shelves.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.margins.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Page(0) + 40));
}

uint64_t Page.margins.setter(char a1)
{
  uint64_t result = type metadata accessor for Page(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Page.margins.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Page.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Page(0);
  return sub_1000170C8(v1 + *(int *)(v3 + 44), a1, &qword_100140070);
}

uint64_t Page.background.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Page(0);
  return sub_10001712C(a1, v1 + *(int *)(v3 + 44), &qword_100140070);
}

uint64_t (*Page.background.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

unint64_t sub_10000AC88(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7274654D65676170;
      break;
    case 2:
      unint64_t result = 0x656C746974;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x7365766C656873;
      break;
    case 6:
      unint64_t result = 0x736E696772616DLL;
      break;
    case 7:
      unint64_t result = 0x756F72676B636162;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10000ADA4()
{
  return sub_10000AC88(*v0);
}

uint64_t sub_10000ADAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000140B4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000ADD4(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10000ADE0(uint64_t a1)
{
  unint64_t v2 = sub_10000B2B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000AE1C(uint64_t a1)
{
  unint64_t v2 = sub_10000B2B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Page.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_100140078);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10000B2B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for PageID();
  sub_10000A5D4(&qword_100140088, (void (*)(uint64_t))&type metadata accessor for PageID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for Page(0);
    LOBYTE(v13) = 1;
    type metadata accessor for PageMetrics();
    sub_10000A5D4(&qword_100140090, (void (*)(uint64_t))&type metadata accessor for PageMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v9[7]);
    char v15 = 3;
    sub_10000B308();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = (long long *)(v3 + v9[8]);
    uint64_t v11 = *((void *)v10 + 2);
    long long v13 = *v10;
    uint64_t v14 = v11;
    char v15 = 4;
    sub_10000B35C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + v9[9]);
    char v15 = 5;
    sub_100005B18(&qword_1001400A8);
    sub_10000B3B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + v9[10]);
    char v15 = 6;
    sub_10000B490();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 7;
    type metadata accessor for Page.Background(0);
    sub_10000A5D4(&qword_1001400D0, (void (*)(uint64_t))type metadata accessor for Page.Background);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + v9[12]);
    char v15 = 8;
    sub_100005B18(&qword_1001400D8);
    sub_10000B4E4(&qword_1001400E0, &qword_1001400D8, (void (*)(void))sub_10000B550);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10000B2B4()
{
  unint64_t result = qword_100140080;
  if (!qword_100140080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140080);
  }
  return result;
}

unint64_t sub_10000B308()
{
  unint64_t result = qword_100140098;
  if (!qword_100140098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140098);
  }
  return result;
}

unint64_t sub_10000B35C()
{
  unint64_t result = qword_1001400A0;
  if (!qword_1001400A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001400A0);
  }
  return result;
}

unint64_t sub_10000B3B0()
{
  unint64_t result = qword_1001400B0;
  if (!qword_1001400B0)
  {
    sub_10000B448(&qword_1001400A8);
    sub_10001758C(&qword_1001400B8, &qword_1001400C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001400B0);
  }
  return result;
}

uint64_t sub_10000B448(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000B490()
{
  unint64_t result = qword_1001400C8;
  if (!qword_1001400C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001400C8);
  }
  return result;
}

uint64_t sub_10000B4E4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000B550()
{
  unint64_t result = qword_1001400E8;
  if (!qword_1001400E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001400E8);
  }
  return result;
}

uint64_t Page.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = sub_100005B18(&qword_100140070);
  __chkstk_darwin(v3 - 8);
  char v38 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for PageMetrics();
  uint64_t v40 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PageID();
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v37 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100005B18(&qword_1001400F0);
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Page(0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 44)];
  uint64_t v16 = type metadata accessor for Page.Background(0);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v48 = v15;
  v17(v15, 1, 1, v16);
  v42 = (int *)v11;
  uint64_t v18 = *(int *)(v11 + 48);
  v44 = a1;
  uint64_t v45 = v18;
  uint64_t v19 = (uint64_t)v14;
  *(void *)&v14[v18] = &_swiftEmptyArrayStorage;
  sub_100006650(a1, a1[3]);
  sub_10000B2B4();
  v43 = v10;
  uint64_t v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    uint64_t v24 = v48;
    sub_100007188((uint64_t)v44);
    sub_100017388(v24, &qword_100140070);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = v16;
    uint64_t v21 = (uint64_t)v38;
    uint64_t v22 = v36;
    LOBYTE(v49) = 0;
    sub_10000A5D4(&qword_1001400F8, (void (*)(uint64_t))&type metadata accessor for PageID);
    uint64_t v23 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v19, v23, v7);
    LOBYTE(v49) = 1;
    sub_10000A5D4(&qword_100140100, (void (*)(uint64_t))&type metadata accessor for PageMetrics);
    uint64_t v25 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v19 + v42[5], v6, v25);
    LOBYTE(v49) = 2;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = v45;
    uint64_t v28 = (uint64_t *)(v19 + v42[6]);
    *uint64_t v28 = v26;
    v28[1] = v29;
    char v51 = 3;
    sub_10000BED8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v19 + v42[7]) = v49;
    char v51 = 4;
    sub_10000BF2C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = v50;
    uint64_t v31 = v19 + v42[8];
    *(_OWORD *)uint64_t v31 = v49;
    *(void *)(v31 + 16) = v30;
    sub_100005B18(&qword_1001400A8);
    char v51 = 5;
    sub_10000BF80();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v19 + v42[9]) = v49;
    char v51 = 6;
    sub_10000C018();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v19 + v42[10]) = v49;
    LOBYTE(v49) = 7;
    sub_10000A5D4(&qword_100140130, (void (*)(uint64_t))type metadata accessor for Page.Background);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C(v21, v48, &qword_100140070);
    sub_100005B18(&qword_1001400D8);
    char v51 = 8;
    sub_10000B4E4(&qword_100140138, &qword_1001400D8, (void (*)(void))sub_10000C06C);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v32 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v43, v39);
    uint64_t v33 = v49;
    swift_bridgeObjectRelease();
    *(void *)(v19 + v27) = v33;
    sub_10000C0C0(v19, v35, type metadata accessor for Page);
    sub_100007188(v32);
    return sub_100016ABC(v19, type metadata accessor for Page);
  }
}

unint64_t sub_10000BED8()
{
  unint64_t result = qword_100140108;
  if (!qword_100140108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140108);
  }
  return result;
}

unint64_t sub_10000BF2C()
{
  unint64_t result = qword_100140110;
  if (!qword_100140110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140110);
  }
  return result;
}

unint64_t sub_10000BF80()
{
  unint64_t result = qword_100140118;
  if (!qword_100140118)
  {
    sub_10000B448(&qword_1001400A8);
    sub_10001758C(&qword_100140120, &qword_1001400C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140118);
  }
  return result;
}

unint64_t sub_10000C018()
{
  unint64_t result = qword_100140128;
  if (!qword_100140128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140128);
  }
  return result;
}

unint64_t sub_10000C06C()
{
  unint64_t result = qword_100140140;
  if (!qword_100140140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140140);
  }
  return result;
}

uint64_t sub_10000C0C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10000C128()
{
}

uint64_t sub_10000C13C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000C148(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10000C180(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t sub_10000C18C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_10000C1E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Page.init(from:)(a1, a2);
}

uint64_t sub_10000C1FC(void *a1)
{
  return Page.encode(to:)(a1);
}

uint64_t sub_10000C214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for PageMetrics();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10000C284@<X0>(uint64_t a1@<X8>)
{
  return sub_100013820((uint64_t (*)(void))&type metadata accessor for PageID, a1);
}

unint64_t sub_10000C29C()
{
  uint64_t v1 = 0x676E696C69617274;
  if (*v0 != 1) {
    uint64_t v1 = 0x6974616D6F747561;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_10000C314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100014450(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000C33C(uint64_t a1)
{
  unint64_t v2 = sub_10000C5C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000C378(uint64_t a1)
{
  unint64_t v2 = sub_10000C5C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageToolbarItemGroups.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  uint64_t v8 = sub_100005B18(&qword_100140148);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10000C5C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_100005B18(&qword_100140158);
  sub_10000B4E4(&qword_100140160, &qword_100140158, (void (*)(void))sub_10000C618);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v15 = a4;
    char v14 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_10000C5C4()
{
  unint64_t result = qword_100140150;
  if (!qword_100140150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140150);
  }
  return result;
}

unint64_t sub_10000C618()
{
  unint64_t result = qword_100140168;
  if (!qword_100140168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140168);
  }
  return result;
}

uint64_t PageToolbarItemGroups.init(from:)(void *a1)
{
  uint64_t result = sub_1000145EC(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_10000C694@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000145EC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10000C6C4(void *a1)
{
  return PageToolbarItemGroups.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t PageToolbarItem.Appearance.ButtonBackgroundShape.shape.getter@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Capsule();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_1000148D8();
  }
  else
  {
    uint64_t v7 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v8 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v6, v7, v8);
    sub_10000A5D4(&qword_100140178, (void (*)(uint64_t))&type metadata accessor for Capsule);
  }
  uint64_t result = AnyShape.init<A>(_:)();
  *a2 = result;
  return result;
}

GameOverlayUI::PageToolbarItem::Appearance::ButtonBackgroundShape_optional __swiftcall PageToolbarItem.Appearance.ButtonBackgroundShape.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10012F970;
  return (GameOverlayUI::PageToolbarItem::Appearance::ButtonBackgroundShape_optional)sub_100011C24(rawValue, v1);
}

uint64_t PageToolbarItem.Appearance.ButtonBackgroundShape.rawValue.getter(char a1)
{
  if (a1) {
    return 0x656C63726963;
  }
  else {
    return 0x656C7573706163;
  }
}

uint64_t sub_10000C848(char *a1, char *a2)
{
  return sub_100009064(*a1, *a2);
}

Swift::Int sub_10000C854()
{
  return Hasher._finalize()();
}

uint64_t sub_10000C8D4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000C940()
{
  return Hasher._finalize()();
}

uint64_t sub_10000C9BC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10012F970;
  return sub_100011E18(v2, a1, a2);
}

void sub_10000C9C8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656C7573706163;
  if (*v1) {
    uint64_t v2 = 0x656C63726963;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10000CA04()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10000CA64()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10000CAB4()
{
  uint64_t v1 = 0x6567616D69;
  if (*v0 != 1) {
    uint64_t v1 = 0x756F72676B636162;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C746974;
  }
}

uint64_t sub_10000CB14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100014BCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000CB3C(uint64_t a1)
{
  unint64_t v2 = sub_100014A7C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000CB78(uint64_t a1)
{
  unint64_t v2 = sub_100014A7C();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10000CBB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_10000CBC8()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_10000CBF4()
{
  uint64_t v1 = 0x6E6F74747562;
  if (*v0 != 1) {
    uint64_t v1 = 1970169197;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7641726579616C70;
  }
}

uint64_t sub_10000CC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100014D38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000CC74(uint64_t a1)
{
  unint64_t v2 = sub_10001492C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000CCB0(uint64_t a1)
{
  unint64_t v2 = sub_10001492C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000CCEC()
{
  uint64_t v1 = 1954047348;
  if (*v0 != 1) {
    uint64_t v1 = 0x736E6F6974706FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x614E6C6F626D7973;
  }
}

uint64_t sub_10000CD44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100014E90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000CD6C(uint64_t a1)
{
  unint64_t v2 = sub_1000149C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000CDA8(uint64_t a1)
{
  unint64_t v2 = sub_1000149C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000CDE4(uint64_t a1)
{
  unint64_t v2 = sub_100014B78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000CE20(uint64_t a1)
{
  unint64_t v2 = sub_100014B78();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageToolbarItem.Appearance.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = sub_100005B18(&qword_100140180);
  uint64_t v36 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100005B18(&qword_100140188);
  uint64_t v35 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100140190);
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100005B18(&qword_100140198);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10001492C();
  v65 = v11;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100014980(v2, (uint64_t)v64);
  int v12 = sub_1000149B8((uint64_t)v64);
  if (v12)
  {
    if (v12 == 1)
    {
      uint64_t v13 = sub_100014A6C((uint64_t)v64);
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v39 = *(char **)(v13 + 24);
      uint64_t v40 = v14;
      LODWORD(v37) = *(unsigned __int8 *)(v13 + 32);
      char v15 = *(unsigned char *)(v13 + 33);
      LOBYTE(v54) = 1;
      sub_100014A7C();
      uint64_t v16 = v43;
      uint64_t v17 = v65;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v54) = 0;
      uint64_t v18 = v38;
      uint64_t v19 = v42;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      if (v19)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v18);
        return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v17, v16);
      }
      else
      {
        *(void *)&long long v54 = v40;
        *((void *)&v54 + 1) = v39;
        LOBYTE(v55) = v37;
        LOBYTE(v44) = 1;
        sub_100014AD0();
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        LOBYTE(v54) = v15;
        LOBYTE(v44) = 2;
        sub_100014B24();
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v18);
        return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v65, v43);
      }
    }
    else
    {
      uint64_t v24 = sub_100014A6C((uint64_t)v64);
      uint64_t v38 = *(void *)(v24 + 16);
      uint64_t v25 = *(void *)(v24 + 32);
      LOBYTE(v54) = 2;
      sub_1000149C4();
      uint64_t v26 = v39;
      uint64_t v27 = v43;
      uint64_t v28 = v65;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v54) = 0;
      uint64_t v29 = v40;
      uint64_t v30 = v42;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v29);
        uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
        uint64_t v32 = v28;
      }
      else
      {
        LOBYTE(v54) = 1;
        KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
        *(void *)&long long v54 = v25;
        LOBYTE(v44) = 2;
        sub_100005B18(&qword_1001401B0);
        sub_10000B4E4(&qword_1001401B8, &qword_1001401B0, (void (*)(void))sub_100014A18);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v33 = v65;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v29);
        uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
        uint64_t v32 = v33;
      }
      return v31(v32, v27);
    }
  }
  else
  {
    uint64_t v21 = sub_100014A6C((uint64_t)v64);
    long long v60 = *(_OWORD *)(v21 + 96);
    long long v61 = *(_OWORD *)(v21 + 112);
    long long v62 = *(_OWORD *)(v21 + 128);
    uint64_t v63 = *(void *)(v21 + 144);
    long long v56 = *(_OWORD *)(v21 + 32);
    long long v57 = *(_OWORD *)(v21 + 48);
    long long v58 = *(_OWORD *)(v21 + 64);
    long long v59 = *(_OWORD *)(v21 + 80);
    long long v54 = *(_OWORD *)v21;
    long long v55 = *(_OWORD *)(v21 + 16);
    LOBYTE(v44) = 0;
    sub_100014B78();
    uint64_t v22 = v43;
    uint64_t v23 = v65;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v50 = v60;
    long long v51 = v61;
    long long v52 = v62;
    uint64_t v53 = v63;
    long long v46 = v56;
    long long v47 = v57;
    long long v48 = v58;
    long long v49 = v59;
    long long v44 = v54;
    long long v45 = v55;
    sub_1000066E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v23, v22);
  }
}

uint64_t PageToolbarItem.Appearance.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100014FE4(a1, (uint64_t)v5);
  if (!v2) {
    return sub_100014980((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_10000D588(void *a1)
{
  sub_100014980(v1, (uint64_t)v4);
  return PageToolbarItem.Appearance.encode(to:)(a1);
}

uint64_t Player.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10000D60C()
{
  uint64_t v1 = 0x6E61726165707061;
  if (*v0 != 1) {
    uint64_t v1 = 0x6575676573;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10000D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100015EDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000D684(uint64_t a1)
{
  unint64_t v2 = sub_100015914();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000D6C0(uint64_t a1)
{
  unint64_t v2 = sub_100015914();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageToolbarItem.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_1001401F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100006650(a1, a1[3]);
  sub_100015914();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[175] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    sub_100014980(v3 + 16, (uint64_t)v12);
    sub_100014980((uint64_t)v12, (uint64_t)v11);
    v12[174] = 1;
    sub_100015968();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = 2;
    sub_100005B18(&qword_100140208);
    sub_1000159BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *PageToolbarItem.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v4 = sub_100005B18(&qword_100140228);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v25;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  sub_1000158AC((uint64_t)v21, (uint64_t)&v17);
  v25[0] = v17;
  v25[1] = v18;
  uint64_t v26 = v19;
  sub_100017388((uint64_t)v21, &qword_1001401E8);
  sub_100006650(a1, a1[3]);
  sub_100015914();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v10 = (uint64_t)v27;
    sub_100007188((uint64_t)a1);
    return (void *)sub_100017388(v10, &qword_100140208);
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v9 = v14;
    v21[0] = 0;
    v23[0] = KeyedDecodingContainer.decode(_:forKey:)();
    v23[1] = v11;
    char v20 = 1;
    sub_100015A54();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100014980((uint64_t)v21, (uint64_t)&v17);
    sub_100014980((uint64_t)&v17, (uint64_t)&v24);
    sub_100005B18(&qword_100140208);
    char v15 = 2;
    sub_100015D20();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v4);
    sub_10001712C((uint64_t)&v16, (uint64_t)v27, &qword_100140208);
    sub_100015DB8((uint64_t)v23, v9);
    sub_100007188((uint64_t)a1);
    return sub_100015DF0(v23);
  }
}

void *sub_10000DC04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PageToolbarItem.init(from:)(a1, a2);
}

uint64_t sub_10000DC1C(void *a1)
{
  return PageToolbarItem.encode(to:)(a1);
}

uint64_t sub_10000DC34@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PageMenuToolbarItem.title.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PageMenuToolbarItem.symbolName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s13GameOverlayUI5ShelfV10titleSegue9JetEngine11ActionModel_pSgvpfP_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  sub_1000158AC(a1, (uint64_t)&v6);
  long long v4 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v8;
  return sub_100017388(a1, &qword_1001401E8);
}

uint64_t sub_10000DD00()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656C746974;
      break;
    case 2:
      uint64_t result = 0x614E6C6F626D7973;
      break;
    case 3:
      uint64_t result = 0x6575676573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000DD80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100016020(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000DDA8(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10000DDB4(uint64_t a1)
{
  unint64_t v2 = sub_100015E20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000DDF0(uint64_t a1)
{
  unint64_t v2 = sub_100015E20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageMenuToolbarItem.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100005B18(&qword_100140248);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_100015E20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    sub_100005B18(&qword_100140208);
    sub_1000159BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PageMenuToolbarItem.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005B18(&qword_100140258);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v19;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v15 = 0;
  long long v14 = 0u;
  long long v13 = 0u;
  sub_1000158AC((uint64_t)v16, (uint64_t)&v13);
  v19[0] = v13;
  v19[1] = v14;
  uint64_t v20 = v15;
  sub_100017388((uint64_t)v16, &qword_1001401E8);
  sub_100006650(a1, a1[3]);
  sub_100015E20();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100007188((uint64_t)a1);
    return sub_100017388((uint64_t)v21, &qword_100140208);
  }
  else
  {
    LOBYTE(v16[0]) = 0;
    v18[0] = KeyedDecodingContainer.decode(_:forKey:)();
    v18[1] = v9;
    LOBYTE(v16[0]) = 1;
    v18[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v18[3] = v10;
    LOBYTE(v16[0]) = 2;
    v18[4] = KeyedDecodingContainer.decode(_:forKey:)();
    v18[5] = v11;
    sub_100005B18(&qword_100140208);
    LOBYTE(v13) = 3;
    sub_100015D20();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10001712C((uint64_t)v16, (uint64_t)v21, &qword_100140208);
    sub_100015E74(v18, a2);
    sub_100007188((uint64_t)a1);
    return sub_100015EAC((uint64_t)v18);
  }
}

uint64_t sub_10000E334@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PageMenuToolbarItem.init(from:)(a1, a2);
}

uint64_t sub_10000E34C(void *a1)
{
  return PageMenuToolbarItem.encode(to:)(a1);
}

GameOverlayUI::Margins_optional __swiftcall Margins.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10012F9C0;
  return (GameOverlayUI::Margins_optional)sub_1000161C0(rawValue, v1);
}

uint64_t Margins.rawValue.getter(char a1)
{
  uint64_t result = 0x6974616D6F747561;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701736302;
      break;
    case 2:
      uint64_t result = 0x647261646E617473;
      break;
    case 3:
      uint64_t result = 1701079415;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000E40C(unsigned __int8 *a1, char *a2)
{
  return sub_1000085B8(*a1, *a2);
}

Swift::Int sub_10000E418()
{
  return Hasher._finalize()();
}

uint64_t sub_10000E4E8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000E5A0()
{
  return Hasher._finalize()();
}

unint64_t sub_10000E66C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10012F9C0;
  unint64_t result = sub_1000161C0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10000E6A4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000063;
  uint64_t v3 = 0x6974616D6F747561;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1701736302;
      goto LABEL_3;
    case 2:
      *a1 = 0x647261646E617473;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 1701079415;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10000E734()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10000E794()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t TitleDisplayMode.navigationTitleDisplayMode.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = static ToolbarTitleDisplayMode.large.getter();
      break;
    case 2:
      uint64_t result = static ToolbarTitleDisplayMode.inlineLarge.getter();
      break;
    case 3:
      uint64_t result = static ToolbarTitleDisplayMode.inline.getter();
      break;
    default:
      uint64_t result = static ToolbarTitleDisplayMode.automatic.getter();
      break;
  }
  return result;
}

GameOverlayUI::TitleDisplayMode_optional __swiftcall TitleDisplayMode.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10012FA40;
  return (GameOverlayUI::TitleDisplayMode_optional)sub_1000161C0(rawValue, v1);
}

uint64_t TitleDisplayMode.rawValue.getter(char a1)
{
  uint64_t result = 0x6974616D6F747561;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656772616CLL;
      break;
    case 2:
      uint64_t result = 0x614C656E696C6E69;
      break;
    case 3:
      uint64_t result = 0x656E696C6E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000E8E0(unsigned __int8 *a1, char *a2)
{
  return sub_100008ECC(*a1, *a2);
}

Swift::Int sub_10000E8EC()
{
  return Hasher._finalize()();
}

uint64_t sub_10000E9CC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000EA94()
{
  return Hasher._finalize()();
}

unint64_t sub_10000EB70@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10012FA40;
  unint64_t result = sub_1000161C0(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10000EBA8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000063;
  uint64_t v3 = 0x6974616D6F747561;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x656772616CLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x614C656E696C6E69;
      a1[1] = 0xEB00000000656772;
      break;
    case 3:
      *a1 = 0x656E696C6E69;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10000EC48()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10000ECA8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10000ECF8()
{
  return 1701667182;
}

uint64_t sub_10000ED0C(uint64_t a1)
{
  unint64_t v2 = sub_1000162B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000ED48(uint64_t a1)
{
  unint64_t v2 = sub_1000162B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10000ED84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10000ED9C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10000EDE4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10000EE28()
{
  if (*v0) {
    return 0x79536D6574737973;
  }
  else {
    return 0x6D49656C646E7562;
  }
}

uint64_t sub_10000EE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100016304(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000EE9C(uint64_t a1)
{
  unint64_t v2 = sub_100016208();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000EED8(uint64_t a1)
{
  unint64_t v2 = sub_100016208();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000EF14(uint64_t a1)
{
  unint64_t v2 = sub_10001625C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000EF50(uint64_t a1)
{
  unint64_t v2 = sub_10001625C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ImageProviding.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v22 = a3;
  int v23 = a4;
  uint64_t v21 = a2;
  uint64_t v5 = sub_100005B18(&qword_100140260);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100140268);
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100005B18(&qword_100140270);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_100016208();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
  if (v23)
  {
    char v25 = 1;
    sub_10001625C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v20;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v16);
  }
  else
  {
    char v24 = 0;
    sub_1000162B0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
  return (*v15)(v14, v11);
}

uint64_t ImageProviding.init(from:)(void *a1)
{
  uint64_t result = sub_100016428(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_10000F298@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100016428(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_10000F2CC(void *a1)
{
  return ImageProviding.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

GameOverlayUI::Shelf::Orientation_optional __swiftcall Shelf.Orientation.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10012FAC0;
  return (GameOverlayUI::Shelf::Orientation_optional)sub_100011C24(rawValue, v1);
}

uint64_t Shelf.Orientation.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6C61636974726576;
  }
  else {
    return 0x746E6F7A69726F68;
  }
}

uint64_t sub_10000F334(void *a1)
{
  uint64_t v2 = sub_100005B18(&qword_100140900);
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2);
  long long v47 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100005B18(&qword_100140908);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  long long v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100005B18(&qword_100140910);
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100005B18(&qword_100140918);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v39 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MediaArtwork();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v38 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = sub_100005B18(&qword_100140920);
  uint64_t v37 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100005B18(&qword_100140928);
  uint64_t v54 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10001FBD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10000C0C0(v55, (uint64_t)v17, type metadata accessor for Shelf.Presentation.HeaderIconType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v23 = v51;
      uint64_t v22 = v52;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v11, v17, v52);
      char v57 = 1;
      sub_10001FD24();
      char v24 = v39;
      uint64_t v25 = v53;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10000A5D4(&qword_100140048, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v26 = v43;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v26);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
      goto LABEL_7;
    case 2u:
      char v58 = 2;
      sub_10001FCD0();
      uint64_t v27 = v40;
      uint64_t v25 = v53;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v44;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v28);
      goto LABEL_7;
    case 3u:
      uint64_t v30 = v51;
      uint64_t v29 = v52;
      uint64_t v31 = v38;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v38, v17, v52);
      char v59 = 3;
      sub_10001FC7C();
      uint64_t v32 = v45;
      uint64_t v25 = v53;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10000A5D4(&qword_100140048, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v33 = v48;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v33);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
      goto LABEL_7;
    case 4u:
      char v60 = 4;
      sub_10001FC28();
      uint64_t v34 = v47;
      uint64_t v25 = v53;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v35 = v50;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v35);
LABEL_7:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v19, v25);
      break;
    default:
      char v56 = 0;
      sub_10001FD78();
      uint64_t v20 = v53;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v12);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v19, v20);
      break;
  }
  return result;
}

uint64_t sub_10000FB74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v75 = sub_100005B18(&qword_100140968);
  uint64_t v79 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  v83 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100005B18(&qword_100140970);
  uint64_t v78 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  v88 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100005B18(&qword_100140978);
  uint64_t v77 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  v82 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100140980);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  __chkstk_darwin(v6);
  v81 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100005B18(&qword_100140988);
  uint64_t v76 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  v85 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100005B18(&qword_100140990);
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v11 = __chkstk_darwin(v89);
  v70 = (uint64_t *)((char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  char v24 = (char *)&v65 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v65 - v25;
  uint64_t v27 = a1[3];
  v90 = a1;
  sub_100006650(a1, v27);
  sub_10001FBD4();
  uint64_t v28 = (uint64_t)v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28) {
    goto LABEL_10;
  }
  v66 = (uint64_t *)v18;
  v67 = (uint64_t *)v24;
  v68 = v21;
  v69 = v15;
  uint64_t v29 = v85;
  uint64_t v30 = v86;
  uint64_t v32 = v87;
  uint64_t v31 = v88;
  v91 = v26;
  uint64_t v33 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v33 + 16) != 1)
  {
    uint64_t v37 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v39 = v38;
    sub_100005B18(&qword_100140060);
    *uint64_t v39 = v89;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, enum case for DecodingError.typeMismatch(_:), v37);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v10, v30);
LABEL_10:
    uint64_t v42 = (uint64_t)v90;
    return sub_100007188(v42);
  }
  switch(*(unsigned char *)(v33 + 32))
  {
    case 1:
      char v93 = 1;
      sub_10001FD24();
      uint64_t v40 = v81;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for MediaArtwork();
      sub_10000A5D4(&qword_100140068, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v56 = (uint64_t)v68;
      uint64_t v41 = v73;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v10, v30);
      uint64_t v42 = (uint64_t)v90;
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    case 2:
      char v94 = 2;
      sub_10001FCD0();
      uint64_t v43 = v82;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v45 = v84;
      uint64_t v57 = v44;
      uint64_t v59 = v58;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v30);
      uint64_t v56 = (uint64_t)v66;
      uint64_t *v66 = v57;
      *(void *)(v56 + 8) = v59;
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    case 3:
      char v95 = 3;
      sub_10001FC7C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for MediaArtwork();
      uint64_t v46 = v31;
      sub_10000A5D4(&qword_100140068, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v56 = (uint64_t)v69;
      uint64_t v47 = v74;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v48 = v84;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v46, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v30);
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    case 4:
      char v96 = 4;
      sub_10001FC28();
      uint64_t v49 = v83;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v50 = v49;
      uint64_t v51 = v75;
      uint64_t v60 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v62 = v61;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v50, v51);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v10, v30);
      uint64_t v63 = v70;
      uint64_t *v70 = v60;
      v63[1] = v62;
      swift_storeEnumTagMultiPayload();
      uint64_t v56 = (uint64_t)v63;
      goto LABEL_12;
    default:
      char v92 = 0;
      sub_10001FD78();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v71;
      uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v36 = v84;
      uint64_t v53 = v35;
      uint64_t v55 = v54;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v29, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v30);
      uint64_t v56 = (uint64_t)v67;
      uint64_t *v67 = v53;
      *(void *)(v56 + 8) = v55;
      swift_storeEnumTagMultiPayload();
LABEL_12:
      uint64_t v42 = (uint64_t)v90;
LABEL_13:
      uint64_t v64 = (uint64_t)v91;
      sub_1000173E4(v56, (uint64_t)v91, type metadata accessor for Shelf.Presentation.HeaderIconType);
      sub_1000173E4(v64, v80, type metadata accessor for Shelf.Presentation.HeaderIconType);
      break;
  }
  return sub_100007188(v42);
}

uint64_t sub_1000106C8(char *a1, char *a2)
{
  return sub_100008948(*a1, *a2);
}

Swift::Int sub_1000106D4()
{
  return Hasher._finalize()();
}

uint64_t sub_10001075C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000107D0()
{
  return Hasher._finalize()();
}

uint64_t sub_100010854@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10012FAC0;
  return sub_100011E18(v2, a1, a2);
}

void sub_100010860(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E6F7A69726F68;
  if (*v1) {
    uint64_t v2 = 0x6C61636974726576;
  }
  unint64_t v3 = 0xEA00000000006C61;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000108A4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100010904()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100010954()
{
  return 0x6B726F77747261;
}

uint64_t sub_100010970(uint64_t a1)
{
  unint64_t v2 = sub_10001FC7C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000109AC(uint64_t a1)
{
  unint64_t v2 = sub_10001FC7C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000109E8()
{
  return 0x6D614E6567616D69;
}

uint64_t sub_100010A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6D614E6567616D69 && a2 == 0xE900000000000065)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100010AA8(uint64_t a1)
{
  unint64_t v2 = sub_10001FC28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010AE4(uint64_t a1)
{
  unint64_t v2 = sub_10001FC28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010B20()
{
  uint64_t result = 0x6C6F626D7973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F6349656D6167;
      break;
    case 2:
      uint64_t result = 0x7641726579616C70;
      break;
    case 3:
      uint64_t result = 0x6B726F77747261;
      break;
    case 4:
      uint64_t result = 0x656C646E7562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100010BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100016B1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100010BF0(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100010BFC(uint64_t a1)
{
  unint64_t v2 = sub_10001FBD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010C38(uint64_t a1)
{
  unint64_t v2 = sub_10001FBD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100010D0C(uint64_t a1)
{
  unint64_t v2 = sub_10001FD24();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010D48(uint64_t a1)
{
  unint64_t v2 = sub_10001FD24();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010D84()
{
  return 0x6C706D65546C7275;
}

uint64_t sub_100010DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6C706D65546C7275 && a2 == 0xEB00000000657461)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100010E54(uint64_t a1)
{
  unint64_t v2 = sub_10001FCD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010E90(uint64_t a1)
{
  unint64_t v2 = sub_10001FCD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100010F54(uint64_t a1)
{
  unint64_t v2 = sub_10001FD78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010F90(uint64_t a1)
{
  unint64_t v2 = sub_10001FD78();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010FCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000FB74(a1, a2);
}

uint64_t sub_100010FE4(void *a1)
{
  return sub_10000F334(a1);
}

uint64_t sub_100010FFC(char *a1, unsigned __int8 *a2)
{
  return sub_10000884C(*a1, *a2);
}

Swift::Int sub_100011008()
{
  return Hasher._finalize()();
}

uint64_t sub_10001109C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001111C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000111AC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10012FB10;
  unint64_t result = sub_100017028(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000111E4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = 0x7265746E6563;
  if (v2 != 1) {
    uint64_t v4 = 0x6D6F74746F62;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 7368564;
  }
  if (!v5) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_100011234()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100011294()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000112E4()
{
  uint64_t result = 0x7461746E6569726FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1852793705;
      break;
    case 2:
      uint64_t result = 0x67696C416E6F6369;
      break;
    case 3:
      uint64_t result = 0x656C746974;
      break;
    case 4:
      uint64_t result = 0x6974627553706F74;
      break;
    case 5:
      uint64_t result = 0x75536D6F74746F62;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000113C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100016D44(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000113F0(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000113FC(uint64_t a1)
{
  unint64_t v2 = sub_1000168D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100011438(uint64_t a1)
{
  unint64_t v2 = sub_1000168D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.Presentation.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_100140290);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_1000168D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = *v3;
  v11[14] = 0;
  sub_10001692C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for Shelf.Presentation(0);
    v11[13] = 1;
    type metadata accessor for Shelf.Presentation.HeaderIconType(0);
    sub_10000A5D4(&qword_1001402A8, (void (*)(uint64_t))type metadata accessor for Shelf.Presentation.HeaderIconType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[12] = v3[*(int *)(v9 + 24)];
    v11[11] = 2;
    sub_1000169C0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[10] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[9] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[8] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Shelf.Presentation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = sub_100005B18(&qword_1001402B8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_1001402C0);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for Shelf.Presentation(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t)&v12[*(int *)(v10 + 20)];
  uint64_t v14 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v41 = v13;
  v15(v13, 1, 1, v14);
  uint64_t v16 = v9[6];
  v12[v16] = 3;
  uint64_t v17 = (uint64_t *)&v12[v9[8]];
  *uint64_t v17 = 0;
  v17[1] = 0;
  uint64_t v39 = a1;
  uint64_t v40 = v17;
  uint64_t v18 = (uint64_t *)&v12[v9[9]];
  *uint64_t v18 = 0;
  v18[1] = 0;
  uint64_t v38 = v18;
  sub_100006650(a1, a1[3]);
  sub_1000168D8();
  uint64_t v37 = v8;
  uint64_t v19 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    uint64_t v20 = v41;
    sub_100007188((uint64_t)v39);
    sub_100017388(v20, &qword_1001402B8);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v49 = 0;
    sub_100016A14();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v12 = v50;
    char v48 = 1;
    sub_10000A5D4(&qword_1001402D0, (void (*)(uint64_t))type metadata accessor for Shelf.Presentation.HeaderIconType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C((uint64_t)v5, v41, &qword_1001402B8);
    char v46 = 2;
    sub_100016A68();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v21 = v40;
    v12[v16] = v47;
    char v45 = 3;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v23 = (uint64_t *)&v12[v9[7]];
    *uint64_t v23 = v22;
    v23[1] = v24;
    char v44 = 4;
    uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    *uint64_t v21 = v25;
    v21[1] = v27;
    char v43 = 5;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
    uint64_t v31 = v38;
    swift_bridgeObjectRelease();
    *uint64_t v31 = v28;
    v31[1] = v30;
    sub_10000C0C0((uint64_t)v12, v34, type metadata accessor for Shelf.Presentation);
    sub_100007188((uint64_t)v39);
    return sub_100016ABC((uint64_t)v12, type metadata accessor for Shelf.Presentation);
  }
}

uint64_t sub_100011BE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.Presentation.init(from:)(a1, a2);
}

uint64_t sub_100011C00(void *a1)
{
  return Shelf.Presentation.encode(to:)(a1);
}

GameOverlayUI::Shelf::Visibility_optional __swiftcall Shelf.Visibility.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10012FB78;
  return (GameOverlayUI::Shelf::Visibility_optional)sub_100011C24(rawValue, v1);
}

uint64_t sub_100011C24(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t Shelf.Visibility.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E776F6873;
  }
  else {
    return 0x6E6564646968;
  }
}

uint64_t sub_100011CA4(char *a1, char *a2)
{
  return sub_1000089F4(*a1, *a2);
}

Swift::Int sub_100011CB0()
{
  return Hasher._finalize()();
}

uint64_t sub_100011D2C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100011D94()
{
  return Hasher._finalize()();
}

uint64_t sub_100011E0C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10012FB78;
  return sub_100011E18(v2, a1, a2);
}

uint64_t sub_100011E18@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_100011E74(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6E6564646968;
  if (*v1) {
    uint64_t v2 = 0x6E776F6873;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100011EAC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100011F0C()
{
  return RawRepresentable<>.encode(to:)();
}

GameOverlayUI::Shelf::AccessoryType_optional __swiftcall Shelf.AccessoryType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10012FBC8;
  return (GameOverlayUI::Shelf::AccessoryType_optional)sub_100017028(rawValue, v1);
}

uint64_t Shelf.AccessoryType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x654D656461637261;
  }
  if (a1 == 1) {
    return 0x756E654D656D6167;
  }
  return 0xD000000000000011;
}

uint64_t sub_100011FDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100008730(*a1, *a2);
}

Swift::Int sub_100011FE8()
{
  return Hasher._finalize()();
}

uint64_t sub_100012094()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001212C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000121D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10012FBC8;
  unint64_t result = sub_100017028(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10001220C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEA0000000000756ELL;
  unint64_t v4 = 0xE800000000000000;
  unint64_t v5 = 0x756E654D656D6167;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000011;
    unint64_t v4 = 0x80000001000FC090;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x654D656461637261;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100012274()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000122D4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Shelf.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001233C((uint64_t (*)(void))&type metadata accessor for ShelfID, a1);
}

uint64_t sub_10001233C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v2, v4);
}

uint64_t Shelf.id.setter(uint64_t a1)
{
  return sub_1000123C4(a1, (uint64_t (*)(void))&type metadata accessor for ShelfID);
}

uint64_t sub_1000123C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = a2(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v2, a1, v4);
}

uint64_t Shelf.impressionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Shelf(0);
  return sub_1000170C8(v1 + *(int *)(v3 + 20), a1, &qword_1001402E0);
}

uint64_t Shelf.impressionMetrics.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Shelf(0);
  return sub_10001712C(a1, v1 + *(int *)(v3 + 20), &qword_1001402E0);
}

uint64_t (*Shelf.impressionMetrics.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.presentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Shelf(0);
  return sub_10000C0C0(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Shelf.Presentation);
}

uint64_t Shelf.presentation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Shelf(0) + 24);

  return sub_100017190(a1, v3);
}

uint64_t (*Shelf.presentation.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.visibility.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 28));
}

uint64_t Shelf.visibility.setter(char a1)
{
  char v2 = a1 & 1;
  uint64_t result = type metadata accessor for Shelf(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*Shelf.visibility.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.accessoryType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 32));
}

uint64_t Shelf.accessoryType.setter(char a1)
{
  uint64_t result = type metadata accessor for Shelf(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*Shelf.accessoryType.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.headerMargins.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 36));
}

uint64_t Shelf.headerMargins.setter(char a1)
{
  uint64_t result = type metadata accessor for Shelf(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*Shelf.headerMargins.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.margins.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Shelf(0) + 40));
}

uint64_t Shelf.margins.setter(char a1)
{
  uint64_t result = type metadata accessor for Shelf(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Shelf.margins.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t Shelf.items.getter()
{
  type metadata accessor for Shelf(0);

  return swift_bridgeObjectRetain();
}

uint64_t Shelf.items.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Shelf(0) + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Shelf.items.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

unint64_t sub_1000128FC(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x61746E6573657270;
      break;
    case 3:
      unint64_t result = 0x696C696269736976;
      break;
    case 4:
      unint64_t result = 0x726F737365636361;
      break;
    case 5:
      unint64_t result = 0x614D726564616568;
      break;
    case 6:
      unint64_t result = 0x736E696772616DLL;
      break;
    case 7:
      unint64_t result = 0x676553656C746974;
      break;
    case 8:
      unint64_t result = 0x736D657469;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100012A38()
{
  return sub_1000128FC(*v0);
}

uint64_t sub_100012A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001FE20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100012A68(uint64_t a1)
{
  unint64_t v2 = sub_1000171F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100012AA4(uint64_t a1)
{
  unint64_t v2 = sub_1000171F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Shelf.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_1001402E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_1000171F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for ShelfID();
  sub_10000A5D4(&qword_1001402F8, (void (*)(uint64_t))&type metadata accessor for ShelfID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for Shelf(0);
    LOBYTE(v11) = 1;
    type metadata accessor for ImpressionMetrics();
    sub_10000A5D4(&qword_100140300, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for Shelf.Presentation(0);
    sub_10000A5D4(&qword_100140308, (void (*)(uint64_t))type metadata accessor for Shelf.Presentation);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + v9[7]);
    char v12 = 3;
    sub_100017248();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + v9[8]);
    char v12 = 4;
    sub_10001729C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + v9[9]);
    char v12 = 5;
    sub_10000B490();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + v9[10]);
    char v12 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 7;
    sub_100005B18(&qword_100140208);
    sub_1000159BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + v9[12]);
    char v12 = 8;
    sub_100005B18(&qword_100140320);
    sub_1000172F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Shelf.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v34 = type metadata accessor for Shelf.Presentation(0);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_1001402E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v35 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ShelfID();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100140340);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for Shelf(0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 20)];
  uint64_t v16 = type metadata accessor for ImpressionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v32 = v11[8];
  v14[v32] = 3;
  uint64_t v31 = v11[9];
  v14[v31] = 4;
  uint64_t v17 = (uint64_t)&v14[v11[11]];
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  sub_1000158AC((uint64_t)v46, (uint64_t)&v43);
  long long v18 = v44;
  *(_OWORD *)uint64_t v17 = v43;
  *(_OWORD *)(v17 + 16) = v18;
  uint64_t v42 = v17;
  *(void *)(v17 + 32) = v45;
  sub_100017388((uint64_t)v46, &qword_1001401E8);
  sub_100006650(a1, a1[3]);
  sub_1000171F4();
  uint64_t v41 = v10;
  uint64_t v19 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    sub_100007188((uint64_t)a1);
    sub_100017388(v15, &qword_1001402E0);
    return sub_100017388(v42, &qword_100140208);
  }
  else
  {
    uint64_t v20 = (uint64_t)v35;
    char v48 = v14;
    uint64_t v29 = v11;
    uint64_t v21 = v38;
    LOBYTE(v46[0]) = 0;
    sub_10000A5D4(&qword_100140348, (void (*)(uint64_t))&type metadata accessor for ShelfID);
    uint64_t v22 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v48, v40, v22);
    LOBYTE(v46[0]) = 1;
    sub_10000A5D4(&qword_100140350, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C(v20, v15, &qword_1001402E0);
    LOBYTE(v46[0]) = 2;
    sub_10000A5D4(&qword_100140358, (void (*)(uint64_t))type metadata accessor for Shelf.Presentation);
    uint64_t v23 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v24 = v42;
    uint64_t v25 = v29;
    uint64_t v26 = (uint64_t)v23;
    uint64_t v27 = (uint64_t)v48;
    sub_1000173E4(v26, (uint64_t)&v48[v29[6]], type metadata accessor for Shelf.Presentation);
    LOBYTE(v43) = 3;
    sub_10001744C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v27 + v25[7]) = v46[0];
    LOBYTE(v43) = 4;
    sub_1000174A0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(unsigned char *)(v27 + v32) = v46[0];
    LOBYTE(v43) = 5;
    sub_10000C018();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(unsigned char *)(v27 + v31) = v46[0];
    LOBYTE(v43) = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v27 + v29[10]) = v46[0];
    sub_100005B18(&qword_100140208);
    LOBYTE(v43) = 7;
    sub_100015D20();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_10001712C((uint64_t)v46, v24, &qword_100140208);
    sub_100005B18(&qword_100140320);
    LOBYTE(v43) = 8;
    sub_1000174F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v37);
    *(void *)(v27 + v29[12]) = *(void *)&v46[0];
    sub_10000C0C0(v27, v30, type metadata accessor for Shelf);
    sub_100007188((uint64_t)a1);
    return sub_100016ABC(v27, type metadata accessor for Shelf);
  }
}

uint64_t sub_100013768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000C0C0(v2 + *(int *)(a1 + 24), a2, type metadata accessor for Shelf.Presentation);
}

uint64_t sub_1000137A0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000137AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Shelf.init(from:)(a1, a2);
}

uint64_t sub_1000137C4(void *a1)
{
  return Shelf.encode(to:)(a1);
}

uint64_t sub_1000137DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170C8(v2 + *(int *)(a1 + 20), a2, &qword_1001402E0);
}

uint64_t sub_100013808@<X0>(uint64_t a1@<X8>)
{
  return sub_100013820((uint64_t (*)(void))&type metadata accessor for ShelfID, a1);
}

uint64_t sub_100013820@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v2, v4);
}

uint64_t sub_10001388C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65526F546C6C7570 && a2 == 0xED00006873657266;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261657070416E6FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726765726F466E6FLL && a2 == 0xEC000000646E756FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_100013A20(void *a1)
{
  uint64_t v26 = sub_100005B18(&qword_1001408E0);
  uint64_t v28 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100005B18(&qword_1001408E8);
  uint64_t v27 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_1001408F0);
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_1001408F8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v30 = a1;
  uint64_t v13 = sub_100006650(a1, v12);
  sub_10001FA84();
  uint64_t v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    uint64_t v31 = v5;
    uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v15 + 16) == 1)
    {
      if (*(unsigned char *)(v15 + 32))
      {
        char v33 = 1;
        sub_10001FB2C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v16 = v25;
        KeyedDecodingContainer.decode(_:forKey:)();
        long long v18 = v17;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v16);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        uint64_t v13 = v18;
      }
      else
      {
        char v32 = 0;
        sub_10001FB80();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v31);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v19 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v21 = v20;
      sub_100005B18(&qword_100140060);
      *uint64_t v21 = &type metadata for Page.RefreshCondition;
      uint64_t v13 = v11;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for DecodingError.typeMismatch(_:), v19);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  sub_100007188((uint64_t)v30);
  return v13;
}

uint64_t sub_100013FC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6B726F77747261 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7974696C617571 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000140B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7274654D65676170 && a2 == 0xEB00000000736369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000FC480 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000FC4A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7365766C656873 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x736E696772616DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x756F72676B636162 && a2 == 0xEA0000000000646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000FC4C0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_100014450(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000FC4E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696C69617274 && a2 == 0xED0000736D657449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974616D6F747561 && a2 == 0xEE00736D65744963)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000145EC(void *a1)
{
  uint64_t v3 = sub_100005B18(&qword_100140A20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_100006650(a1, v7);
  sub_10000C5C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100007188((uint64_t)a1);
  }
  else
  {
    sub_100005B18(&qword_100140158);
    char v10 = 0;
    sub_10000B4E4(&qword_100140A28, &qword_100140158, (void (*)(void))sub_10002054C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v11;
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v10 = 2;
    uint64_t v9 = v11;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100007188((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1000148D8()
{
  unint64_t result = qword_100140170;
  if (!qword_100140170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140170);
  }
  return result;
}

unint64_t sub_10001492C()
{
  unint64_t result = qword_1001401A0;
  if (!qword_1001401A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401A0);
  }
  return result;
}

uint64_t sub_100014980(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v8 = *(_OWORD *)(a1 + 128);
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t sub_1000149B8(uint64_t a1)
{
  return *(void *)(a1 + 80) >> 62;
}

unint64_t sub_1000149C4()
{
  unint64_t result = qword_1001401A8;
  if (!qword_1001401A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401A8);
  }
  return result;
}

unint64_t sub_100014A18()
{
  unint64_t result = qword_1001401C0;
  if (!qword_1001401C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401C0);
  }
  return result;
}

uint64_t sub_100014A6C(uint64_t result)
{
  *(void *)(result + 80) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t sub_100014A7C()
{
  unint64_t result = qword_1001401C8;
  if (!qword_1001401C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401C8);
  }
  return result;
}

unint64_t sub_100014AD0()
{
  unint64_t result = qword_1001401D0;
  if (!qword_1001401D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401D0);
  }
  return result;
}

unint64_t sub_100014B24()
{
  unint64_t result = qword_1001401D8;
  if (!qword_1001401D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401D8);
  }
  return result;
}

unint64_t sub_100014B78()
{
  unint64_t result = qword_1001401E0;
  if (!qword_1001401E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401E0);
  }
  return result;
}

uint64_t sub_100014BCC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F72676B636162 && a2 == 0xEF6570616853646ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100014D38(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7641726579616C70 && a2 == 0xEC00000072617461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F74747562 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1970169197 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100014E90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x614E6C6F626D7973 && a2 == 0xEA0000000000656DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100014FE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v45 = sub_100005B18(&qword_1001409E0);
  uint64_t v41 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  long long v44 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100005B18(&qword_1001409E8);
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  long long v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_1001409F0);
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_1001409F8);
  uint64_t v43 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  char v46 = a1;
  sub_100006650(a1, v12);
  sub_10001492C();
  uint64_t v13 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_100007188((uint64_t)v46);
  }
  v70 = (char *)v6;
  uint64_t v14 = v5;
  uint64_t v15 = v44;
  uint64_t v16 = v45;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v24 = v11;
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    sub_100005B18(&qword_100140060);
    *uint64_t v27 = &type metadata for PageToolbarItem.Appearance;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v9);
    return sub_100007188((uint64_t)v46);
  }
  int v18 = *(unsigned __int8 *)(v17 + 32);
  if (*(unsigned char *)(v17 + 32))
  {
    uint64_t v37 = v17;
    if (v18 == 1)
    {
      LOBYTE(v58) = 1;
      sub_100014A7C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v58) = 0;
      uint64_t v19 = v14;
      uint64_t v20 = v42;
      uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v23 = v22;
      LOBYTE(v58) = 1;
      sub_100020480();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v70 = v11;
      uint64_t v45 = v9;
      long long v34 = v47;
      char v35 = v48;
      char v57 = 2;
      sub_1000204D4();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v20);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v70, v45);
      *(void *)&long long v58 = v21;
      *((void *)&v58 + 1) = v23;
      long long v59 = v34;
      LOBYTE(v60) = v35;
      BYTE1(v60) = v68;
      sub_100020528((uint64_t)&v58);
    }
    else
    {
      LOBYTE(v58) = 2;
      sub_1000149C4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v58) = 0;
      uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v31 = v30;
      LOBYTE(v58) = 1;
      uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v42 = v36;
      v70 = v11;
      sub_100005B18(&qword_1001401B0);
      char v68 = 2;
      sub_10000B4E4(&qword_100140A00, &qword_1001401B0, (void (*)(void))sub_100020418);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v16);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v70, v9);
      *(void *)&long long v58 = v29;
      *((void *)&v58 + 1) = v31;
      *(void *)&long long v59 = v40;
      *((void *)&v59 + 1) = v42;
      *(void *)&long long v60 = v47;
      sub_10002046C((uint64_t)&v58);
    }
    sub_100014980((uint64_t)&v58, (uint64_t)v69);
    uint64_t v33 = v38;
  }
  else
  {
    LOBYTE(v58) = 0;
    sub_100014B78();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_1000071D8();
    uint64_t v28 = v70;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *))(v39 + 8))(v8, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v9);
    long long v53 = v64;
    long long v54 = v65;
    long long v55 = v66;
    uint64_t v56 = v67;
    long long v49 = v60;
    long long v50 = v61;
    long long v51 = v62;
    long long v52 = v63;
    uint64_t v33 = v38;
    long long v47 = v58;
    long long v48 = v59;
    sub_10002053C((uint64_t)&v47);
    sub_100014980((uint64_t)&v47, (uint64_t)v69);
  }
  sub_100007188((uint64_t)v46);
  return sub_100014980((uint64_t)v69, v33);
}

uint64_t sub_1000158AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_1001401E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_100015914()
{
  unint64_t result = qword_1001401F8;
  if (!qword_1001401F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001401F8);
  }
  return result;
}

unint64_t sub_100015968()
{
  unint64_t result = qword_100140200;
  if (!qword_100140200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140200);
  }
  return result;
}

unint64_t sub_1000159BC()
{
  unint64_t result = qword_100140210;
  if (!qword_100140210)
  {
    sub_10000B448(&qword_100140208);
    sub_10001758C(&qword_100140218, &qword_100140220);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140210);
  }
  return result;
}

unint64_t sub_100015A54()
{
  unint64_t result = qword_100140230;
  if (!qword_100140230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140230);
  }
  return result;
}

uint64_t *sub_100015AA8(uint64_t *a1)
{
  return a1;
}

void sub_100015B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v15 = a11 >> 62;
  if (a11 >> 62 == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (v15 == 1)
  {
    swift_bridgeObjectRelease();
    sub_100015D00(a3, a4, a5);
  }
  else if (!v15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015C9C(a12, a13);
  }
}

uint64_t sub_100015C9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100015D00(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100015D18();
  }
  return result;
}

uint64_t sub_100015D18()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_100015D20()
{
  unint64_t result = qword_100140238;
  if (!qword_100140238)
  {
    sub_10000B448(&qword_100140208);
    sub_10001758C(&qword_100140240, &qword_100140220);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140238);
  }
  return result;
}

uint64_t sub_100015DB8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_100015DF0(void *a1)
{
  return a1;
}

unint64_t sub_100015E20()
{
  unint64_t result = qword_100140250;
  if (!qword_100140250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140250);
  }
  return result;
}

uint64_t sub_100015E74(void *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100015EAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100015EDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E61726165707061 && a2 == 0xEA00000000006563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100016020(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614E6C6F626D7973 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6575676573 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1000161C0(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 4) {
    return 4;
  }
  else {
    return v5;
  }
}

unint64_t sub_100016208()
{
  unint64_t result = qword_100140278;
  if (!qword_100140278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140278);
  }
  return result;
}

unint64_t sub_10001625C()
{
  unint64_t result = qword_100140280;
  if (!qword_100140280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140280);
  }
  return result;
}

unint64_t sub_1000162B0()
{
  unint64_t result = qword_100140288;
  if (!qword_100140288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140288);
  }
  return result;
}

uint64_t sub_100016304(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D49656C646E7562 && a2 == 0xEB00000000656761;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79536D6574737973 && a2 == 0xEC0000006C6F626DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100016428(void *a1)
{
  uint64_t v24 = sub_100005B18(&qword_1001409C8);
  uint64_t v26 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  Swift::String v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_1001409D0);
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_1001409D8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v27 = a1;
  sub_100006650(a1, v11);
  sub_100016208();
  uint64_t v12 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return sub_100007188((uint64_t)v27);
  }
  uint64_t v23 = v4;
  uint64_t v28 = v8;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v13 + 16) != 1)
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    sub_100005B18(&qword_100140060);
    *uint64_t v17 = &type metadata for ImageProviding;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, enum case for DecodingError.typeMismatch(_:), v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
    return sub_100007188((uint64_t)v27);
  }
  if (*(unsigned char *)(v13 + 32))
  {
    char v30 = 1;
    sub_10001625C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v14 = v24;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v3, v14);
  }
  else
  {
    char v29 = 0;
    sub_1000162B0();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v23;
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v19);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
  uint64_t v20 = v22;
  sub_100007188((uint64_t)v27);
  return v20;
}

unint64_t sub_1000168D8()
{
  unint64_t result = qword_100140298;
  if (!qword_100140298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140298);
  }
  return result;
}

unint64_t sub_10001692C()
{
  unint64_t result = qword_1001402A0;
  if (!qword_1001402A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001402A0);
  }
  return result;
}

uint64_t type metadata accessor for Shelf.Presentation(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100140630);
}

uint64_t type metadata accessor for Shelf.Presentation.HeaderIconType(uint64_t a1)
{
  return sub_100017090(a1, qword_1001406F8);
}

unint64_t sub_1000169C0()
{
  unint64_t result = qword_1001402B0;
  if (!qword_1001402B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001402B0);
  }
  return result;
}

unint64_t sub_100016A14()
{
  unint64_t result = qword_1001402C8;
  if (!qword_1001402C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001402C8);
  }
  return result;
}

unint64_t sub_100016A68()
{
  unint64_t result = qword_1001402D8;
  if (!qword_1001402D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001402D8);
  }
  return result;
}

uint64_t sub_100016ABC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100016B1C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6349656D6167 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7641726579616C70 && a2 == 0xEC00000072617461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C646E7562 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100016D44(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461746E6569726FLL && a2 == 0xEB000000006E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1852793705 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x67696C416E6F6369 && a2 == 0xED0000746E656D6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6974627553706F74 && a2 == 0xEB00000000656C74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x75536D6F74746F62 && a2 == 0xEE00656C74697462)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_100017028(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

uint64_t type metadata accessor for Shelf(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100140578);
}

uint64_t sub_100017090(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000170C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005B18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001712C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005B18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100017190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Shelf.Presentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000171F4()
{
  unint64_t result = qword_1001402F0;
  if (!qword_1001402F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001402F0);
  }
  return result;
}

unint64_t sub_100017248()
{
  unint64_t result = qword_100140310;
  if (!qword_100140310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140310);
  }
  return result;
}

unint64_t sub_10001729C()
{
  unint64_t result = qword_100140318;
  if (!qword_100140318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140318);
  }
  return result;
}

unint64_t sub_1000172F0()
{
  unint64_t result = qword_100140328;
  if (!qword_100140328)
  {
    sub_10000B448(&qword_100140320);
    sub_10001758C(&qword_100140330, &qword_100140338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140328);
  }
  return result;
}

uint64_t sub_100017388(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100005B18(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000173E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10001744C()
{
  unint64_t result = qword_100140360;
  if (!qword_100140360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140360);
  }
  return result;
}

unint64_t sub_1000174A0()
{
  unint64_t result = qword_100140368;
  if (!qword_100140368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140368);
  }
  return result;
}

unint64_t sub_1000174F4()
{
  unint64_t result = qword_100140370;
  if (!qword_100140370)
  {
    sub_10000B448(&qword_100140320);
    sub_10001758C(&qword_100140378, &qword_100140338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140370);
  }
  return result;
}

uint64_t sub_10001758C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000175D0()
{
  return sub_10000A5D4(&qword_100140380, (void (*)(uint64_t))type metadata accessor for Page);
}

uint64_t sub_100017618()
{
  return sub_10000A5D4(&qword_100140388, (void (*)(uint64_t))type metadata accessor for Page);
}

uint64_t sub_100017660()
{
  return sub_10000A5D4(&qword_100140390, (void (*)(uint64_t))type metadata accessor for Shelf);
}

uint64_t sub_1000176A8()
{
  return sub_10000A5D4(&qword_100140398, (void (*)(uint64_t))&type metadata accessor for PageID);
}

unint64_t sub_1000176F4()
{
  unint64_t result = qword_1001403A0;
  if (!qword_1001403A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001403A0);
  }
  return result;
}

void *sub_100017748()
{
  return &protocol witness table for String;
}

unint64_t sub_100017758()
{
  unint64_t result = qword_1001403A8;
  if (!qword_1001403A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001403A8);
  }
  return result;
}

unint64_t sub_1000177B0()
{
  unint64_t result = qword_1001403B0;
  if (!qword_1001403B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001403B0);
  }
  return result;
}

unint64_t sub_100017808()
{
  unint64_t result = qword_1001403B8;
  if (!qword_1001403B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001403B8);
  }
  return result;
}

unint64_t sub_100017860()
{
  unint64_t result = qword_1001403C0;
  if (!qword_1001403C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001403C0);
  }
  return result;
}

unint64_t sub_1000178B8()
{
  unint64_t result = qword_1001403C8;
  if (!qword_1001403C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001403C8);
  }
  return result;
}

uint64_t sub_10001790C()
{
  return sub_10000A5D4(&qword_1001403D0, (void (*)(uint64_t))type metadata accessor for Shelf);
}

uint64_t sub_100017954()
{
  return sub_10000A5D4(&qword_1001403D8, (void (*)(uint64_t))type metadata accessor for Shelf);
}

uint64_t sub_10001799C()
{
  return sub_10000A5D4(&qword_1001403E0, (void (*)(uint64_t))&type metadata accessor for ShelfID);
}

void *initializeBufferWithCopyOfBuffer for Page(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (void *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PageID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for PageMetrics();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = a3[7];
    uint64_t v14 = (void *)((char *)a1 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v17 = a3[8];
    uint64_t v18 = a3[9];
    uint64_t v19 = (void *)((char *)a1 + v17);
    uint64_t v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    _OWORD v19[2] = v20[2];
    *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v22 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    __dst = (char *)a1 + v22;
    uint64_t v23 = (char *)a2 + v22;
    uint64_t v24 = type metadata accessor for Page.Background(0);
    uint64_t v34 = *(void *)(v24 - 8);
    char v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    uint64_t v25 = v23;
    uint64_t v26 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35(v25, 1, v26))
    {
      uint64_t v27 = sub_100005B18(&qword_100140070);
      memcpy(__dst, v25, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v29 = type metadata accessor for MediaArtwork();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(__dst, v25, v29);
      uint64_t v30 = *(int *)(sub_100005B18(&qword_100140038) + 48);
      uint64_t v31 = &__dst[v30];
      char v32 = &v25[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v26);
    }
    *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Page(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 44);
  uint64_t v8 = type metadata accessor for Page.Background(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for MediaArtwork();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v21 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  __dst = (char *)(a1 + v21);
  uint64_t v22 = (char *)(a2 + v21);
  uint64_t v23 = type metadata accessor for Page.Background(0);
  uint64_t v32 = *(void *)(v23 - 8);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33(v24, 1, v25))
  {
    uint64_t v26 = sub_100005B18(&qword_100140070);
    memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = type metadata accessor for MediaArtwork();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, v24, v27);
    uint64_t v28 = *(int *)(sub_100005B18(&qword_100140038) + 48);
    uint64_t v29 = &__dst[v28];
    uint64_t v30 = &v24[v28];
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v25);
  }
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v17 = a3[11];
  uint64_t v18 = (char *)(a1 + v17);
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Page.Background(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      uint64_t v32 = type metadata accessor for MediaArtwork();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24))(v18, v19, v32);
      uint64_t v33 = *(int *)(sub_100005B18(&qword_100140038) + 48);
      uint64_t v34 = &v18[v33];
      char v35 = &v19[v33];
      char v36 = v35[8];
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v36;
      goto LABEL_7;
    }
    sub_100016ABC((uint64_t)v18, type metadata accessor for Page.Background);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    uint64_t v30 = sub_100005B18(&qword_100140070);
    memcpy(v18, v19, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v25 = type metadata accessor for MediaArtwork();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v18, v19, v25);
  uint64_t v26 = *(int *)(sub_100005B18(&qword_100140038) + 48);
  uint64_t v27 = &v18[v26];
  uint64_t v28 = &v19[v26];
  char v29 = v28[8];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v29;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v16 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v17 = (char *)(a1 + v16);
  uint64_t v18 = (char *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Page.Background(0);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_100005B18(&qword_100140070);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = type metadata accessor for MediaArtwork();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v17, v18, v22);
    uint64_t v23 = *(int *)(sub_100005B18(&qword_100140038) + 48);
    int v24 = &v17[v23];
    uint64_t v25 = &v18[v23];
    *(void *)int v24 = *(void *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for Page(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRelease();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_bridgeObjectRelease();
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for Page.Background(0);
  uint64_t v23 = *(void *)(v22 - 8);
  int v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      uint64_t v33 = type metadata accessor for MediaArtwork();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 40))(v20, v21, v33);
      uint64_t v34 = *(int *)(sub_100005B18(&qword_100140038) + 48);
      char v35 = &v20[v34];
      char v36 = &v21[v34];
      *(void *)char v35 = *(void *)v36;
      v35[8] = v36[8];
      goto LABEL_7;
    }
    sub_100016ABC((uint64_t)v20, type metadata accessor for Page.Background);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    uint64_t v31 = sub_100005B18(&qword_100140070);
    memcpy(v20, v21, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v27 = type metadata accessor for MediaArtwork();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v20, v21, v27);
  uint64_t v28 = *(int *)(sub_100005B18(&qword_100140038) + 48);
  char v29 = &v20[v28];
  uint64_t v30 = &v21[v28];
  *(void *)char v29 = *(void *)v30;
  v29[8] = v30[8];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Page(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018990);
}

uint64_t sub_100018990(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for PageMetrics();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_100005B18(&qword_100140070);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[11];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for Page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018B2C);
}

uint64_t sub_100018B2C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for PageID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for PageMetrics();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_100005B18(&qword_100140070);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[11];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100018CB4()
{
  type metadata accessor for PageID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PageMetrics();
    if (v1 <= 0x3F)
    {
      sub_10001C810(319, (unint64_t *)&unk_100140450, (void (*)(uint64_t))type metadata accessor for Page.Background);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Page.Background(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for MediaArtwork();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    uint64_t v7 = *(int *)(sub_100005B18(&qword_100140038) + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(void *)uint64_t v8 = *(void *)v9;
    v8[8] = v9[8];
  }
  return a1;
}

uint64_t destroy for Page.Background(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MediaArtwork();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = *(int *)(sub_100005B18(&qword_100140038) + 48);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  return a1;
}

uint64_t assignWithCopy for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = *(int *)(sub_100005B18(&qword_100140038) + 48);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  char v8 = *(unsigned char *)(v7 + 8);
  *(void *)uint64_t v6 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = v8;
  return a1;
}

uint64_t initializeWithTake for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = *(int *)(sub_100005B18(&qword_100140038) + 48);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  return a1;
}

uint64_t assignWithTake for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = *(int *)(sub_100005B18(&qword_100140038) + 48);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Page.Background(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140038);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Page.Background(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140038);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

uint64_t sub_10001925C(uint64_t a1)
{
  uint64_t result = type metadata accessor for MediaArtwork();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = v4;
  }
  return result;
}

uint64_t destroy for PageToolbarItemGroups()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s13GameOverlayUI21PageToolbarItemGroupsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PageToolbarItemGroups(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PageToolbarItemGroups(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PageToolbarItemGroups(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PageToolbarItemGroups(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PageToolbarItemGroups(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PageToolbarItemGroups()
{
  return &type metadata for PageToolbarItemGroups;
}

void sub_10001954C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v15 = a11 >> 62;
  if (a11 >> 62 == 2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else if (v15 == 1)
  {
    swift_bridgeObjectRetain();
    sub_100019740(a3, a4, a5);
  }
  else if (!v15)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000196DC(a12, a13);
  }
}

uint64_t sub_1000196DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100019740(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100019758();
  }
  return result;
}

uint64_t sub_100019758()
{
  return swift_bridgeObjectRetain();
}

void destroy for PageToolbarItem(void *a1)
{
  swift_bridgeObjectRelease();
  sub_100015B0C(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
  if (a1[24])
  {
    sub_100007188((uint64_t)(a1 + 21));
  }
}

uint64_t initializeWithCopy for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v23 = *(void *)(a2 + 24);
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v21 = *(void *)(a2 + 40);
  uint64_t v22 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 72);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 104);
  unint64_t v27 = *(void *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 120);
  uint64_t v14 = *(void *)(a2 + 128);
  uint64_t v15 = *(void *)(a2 + 136);
  uint64_t v16 = *(void *)(a2 + 144);
  uint64_t v25 = *(void *)(a2 + 152);
  uint64_t v26 = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  sub_10001954C(v24, v23, v22, v21, v20, v19, v18, v17, v29, v28, v27, v5, v6);
  *(void *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v22;
  *(void *)(a1 + 40) = v21;
  *(void *)(a1 + 48) = v20;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v18;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v29;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = v6;
  *(void *)(a1 + 120) = v13;
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v16;
  *(void *)(a1 + 152) = v25;
  *(void *)(a1 + 160) = v26;
  uint64_t v7 = (_OWORD *)(a1 + 168);
  char v8 = (_OWORD *)(a2 + 168);
  uint64_t v9 = *(void *)(a2 + 192);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = v9;
    *(void *)(a1 + 200) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 184);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 184) = v11;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
  }
  return a1;
}

uint64_t assignWithCopy for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  unint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  uint64_t v32 = *(void *)(a2 + 120);
  uint64_t v33 = *(void *)(a2 + 128);
  uint64_t v34 = *(void *)(a2 + 136);
  uint64_t v35 = *(void *)(a2 + 144);
  uint64_t v36 = *(void *)(a2 + 152);
  uint64_t v37 = *(void *)(a2 + 160);
  sub_10001954C(v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  long long v20 = *(_OWORD *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 96);
  long long v22 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  *(void *)(a1 + 120) = v32;
  *(void *)(a1 + 128) = v33;
  *(void *)(a1 + 136) = v34;
  *(void *)(a1 + 144) = v35;
  *(void *)(a1 + 152) = v36;
  *(void *)(a1 + 160) = v37;
  sub_100015B0C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  uint64_t v23 = *(void *)(a2 + 192);
  if (!*(void *)(a1 + 192))
  {
    if (v23)
    {
      *(void *)(a1 + 192) = v23;
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + 168, a2 + 168);
      return a1;
    }
LABEL_7:
    long long v24 = *(_OWORD *)(a2 + 168);
    long long v25 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v24;
    *(_OWORD *)(a1 + 184) = v25;
    return a1;
  }
  if (!v23)
  {
    sub_100007188(a1 + 168);
    goto LABEL_7;
  }
  sub_100019BC0((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  return a1;
}

uint64_t *sub_100019BC0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for PageToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 160);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v17;
  long long v18 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v18;
  long long v19 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v19;
  long long v20 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = v5;
  sub_100015B0C(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  if (*(void *)(a1 + 192)) {
    sub_100007188(a1 + 168);
  }
  long long v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageToolbarItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PageToolbarItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PageToolbarItem()
{
  return &type metadata for PageToolbarItem;
}

void destroy for PageToolbarItem.Appearance(uint64_t *a1)
{
}

uint64_t *initializeWithCopy for PageToolbarItem.Appearance(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  unint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  sub_10001954C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  return a1;
}

uint64_t assignWithCopy for PageToolbarItem.Appearance(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v24 = a2[9];
  unint64_t v25 = a2[10];
  uint64_t v26 = a2[11];
  uint64_t v27 = a2[12];
  uint64_t v28 = a2[13];
  uint64_t v29 = a2[14];
  uint64_t v30 = a2[15];
  uint64_t v31 = a2[16];
  uint64_t v32 = a2[17];
  uint64_t v33 = a2[18];
  sub_10001954C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v26;
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v30;
  *(void *)(a1 + 128) = v31;
  *(void *)(a1 + 136) = v32;
  *(void *)(a1 + 144) = v33;
  sub_100015B0C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22);
  return a1;
}

uint64_t assignWithTake for PageToolbarItem.Appearance(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  long long v18 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = v3;
  sub_100015B0C(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageToolbarItem.Appearance(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 80) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PageToolbarItem.Appearance(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 80) = 2 * -a2;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10001A40C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = *(void *)(result + 80) & 1 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance()
{
  return &type metadata for PageToolbarItem.Appearance;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.ButtonBackgroundShape()
{
  return &type metadata for PageToolbarItem.Appearance.ButtonBackgroundShape;
}

uint64_t destroy for PageMenuToolbarItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72))
  {
    return sub_100007188(a1 + 48);
  }
  return result;
}

uint64_t initializeWithCopy for PageMenuToolbarItem(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a2 + 6;
  uint64_t v8 = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = a2[10];
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = v9;
    (**(void (***)(uint64_t, void *, uint64_t))(v8 - 8))(a1 + 48, v7, v8);
  }
  else
  {
    long long v10 = *((_OWORD *)v7 + 1);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v7[4];
  }
  return a1;
}

uint64_t assignWithCopy for PageMenuToolbarItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 72);
  if (!*(void *)(a1 + 72))
  {
    if (v4)
    {
      *(void *)(a1 + 72) = v4;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 48);
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v6;
    return a1;
  }
  if (!v4)
  {
    sub_100007188(a1 + 48);
    goto LABEL_7;
  }
  sub_100019BC0((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  return a1;
}

__n128 initializeWithTake for PageMenuToolbarItem(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PageMenuToolbarItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72)) {
    sub_100007188(a1 + 48);
  }
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageMenuToolbarItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PageMenuToolbarItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PageMenuToolbarItem()
{
  return &type metadata for PageMenuToolbarItem;
}

ValueMetadata *type metadata accessor for Margins()
{
  return &type metadata for Margins;
}

ValueMetadata *type metadata accessor for TitleDisplayMode()
{
  return &type metadata for TitleDisplayMode;
}

uint64_t destroy for ImageProviding()
{
  return sub_100015D18();
}

uint64_t _s13GameOverlayUI14ImageProvidingOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100019758();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageProviding(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_100019758();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100015D18();
  return a1;
}

__n128 initializeWithTake for ImageProviding(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ImageProviding(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100015D18();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageProviding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageProviding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10001A9A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10001A9AC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImageProviding()
{
  return &type metadata for ImageProviding;
}

void *initializeBufferWithCopyOfBuffer for Shelf(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ShelfID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    long long v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for ImpressionMetrics();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100005B18(&qword_1001402E0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = a3[6];
    long long v16 = (char *)a1 + v15;
    long long v17 = (char *)a2 + v15;
    *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
    long long v18 = (int *)type metadata accessor for Shelf.Presentation(0);
    uint64_t v19 = v18[5];
    long long v20 = &v16[v19];
    long long v21 = &v17[v19];
    uint64_t v22 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100005B18(&qword_1001402B8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
          uint64_t v26 = type metadata accessor for MediaArtwork();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v20, v21, v26);
          break;
        default:
          uint64_t v25 = *((void *)v21 + 1);
          *(void *)long long v20 = *(void *)v21;
          *((void *)v20 + 1) = v25;
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v16[v18[6]] = v17[v18[6]];
    uint64_t v27 = v18[7];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = &v17[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = v18[8];
    uint64_t v32 = &v16[v31];
    uint64_t v33 = &v17[v31];
    uint64_t v34 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v34;
    uint64_t v35 = v18[9];
    uint64_t v36 = &v16[v35];
    uint64_t v37 = &v17[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    uint64_t v39 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v39) = *((unsigned char *)a2 + v39);
    uint64_t v40 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v40) = *((unsigned char *)a2 + v40);
    uint64_t v41 = a3[11];
    uint64_t v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    uint64_t v44 = *(void *)((char *)a2 + v41 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44)
    {
      uint64_t v45 = *((void *)v43 + 4);
      *((void *)v42 + 3) = v44;
      *((void *)v42 + 4) = v45;
      (**(void (***)(char *, char *, uint64_t))(v44 - 8))(v42, v43, v44);
    }
    else
    {
      long long v46 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v46;
      *((void *)v42 + 4) = *((void *)v43 + 4);
    }
    *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Shelf(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for ShelfID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for ImpressionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = v8 + *(int *)(type metadata accessor for Shelf.Presentation(0) + 20);
  uint64_t v10 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 4u:
        swift_bridgeObjectRelease();
        break;
      case 1u:
      case 3u:
        uint64_t v11 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[11];
  if (*(void *)(v12 + 24)) {
    sub_100007188(v12);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ShelfID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ImpressionMetrics();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100005B18(&qword_1001402E0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  long long v16 = (int *)type metadata accessor for Shelf.Presentation(0);
  uint64_t v17 = v16[5];
  long long v18 = (void *)(v14 + v17);
  uint64_t v19 = (void *)(v15 + v17);
  uint64_t v20 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_100005B18(&qword_1001402B8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v24 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v18, v19, v24);
        break;
      default:
        uint64_t v23 = v19[1];
        *long long v18 = *v19;
        v18[1] = v23;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(unsigned char *)(v14 + v16[6]) = *(unsigned char *)(v15 + v16[6]);
  uint64_t v25 = v16[7];
  uint64_t v26 = (void *)(v14 + v25);
  uint64_t v27 = (void *)(v15 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = v16[8];
  uint64_t v30 = (void *)(v14 + v29);
  uint64_t v31 = (void *)(v15 + v29);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = v16[9];
  uint64_t v34 = (void *)(v14 + v33);
  uint64_t v35 = (void *)(v15 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v37) = *(unsigned char *)(a2 + v37);
  uint64_t v38 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v38) = *(unsigned char *)(a2 + v38);
  uint64_t v39 = a3[11];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)(a2 + v39 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42)
  {
    uint64_t v43 = *(void *)(v41 + 32);
    *(void *)(v40 + 24) = v42;
    *(void *)(v40 + 32) = v43;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v42 - 8))(v40, v41, v42);
  }
  else
  {
    long long v44 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v44;
    *(void *)(v40 + 32) = *(void *)(v41 + 32);
  }
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ShelfID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ImpressionMetrics();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100005B18(&qword_1001402E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  long long v51 = a3;
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v49 = a2;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v50 = type metadata accessor for Shelf.Presentation(0);
  uint64_t v19 = *(int *)(v50 + 20);
  uint64_t v20 = (void *)(v17 + v19);
  uint64_t v21 = (void *)(v18 + v19);
  uint64_t v22 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  uint64_t v25 = v20;
  LODWORD(v20) = v24(v20, 1, v22);
  __src = v21;
  int v26 = v24(v21, 1, v22);
  if (v20)
  {
    if (!v26)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
          uint64_t v31 = type metadata accessor for MediaArtwork();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v31 - 8) + 16))(v25, v21, v31);
          break;
        default:
          void *v25 = *v21;
          v25[1] = v21[1];
          swift_bridgeObjectRetain();
          break;
      }
      uint64_t v30 = v49;
      uint64_t v29 = (int *)v50;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      uint64_t v28 = v51;
      goto LABEL_20;
    }
LABEL_13:
    uint64_t v27 = sub_100005B18(&qword_1001402B8);
    memcpy(v25, v21, *(void *)(*(void *)(v27 - 8) + 64));
    uint64_t v29 = (int *)v50;
    uint64_t v28 = v51;
    uint64_t v30 = v49;
    goto LABEL_20;
  }
  if (v26)
  {
    sub_100016ABC((uint64_t)v25, type metadata accessor for Shelf.Presentation.HeaderIconType);
    goto LABEL_13;
  }
  uint64_t v30 = v49;
  uint64_t v29 = (int *)v50;
  uint64_t v28 = v51;
  if (a1 != v49)
  {
    sub_100016ABC((uint64_t)v25, type metadata accessor for Shelf.Presentation.HeaderIconType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v48 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v48 - 8) + 16))(v25, __src, v48);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        void *v25 = *__src;
        v25[1] = __src[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_20:
  *(unsigned char *)(v17 + v29[6]) = *(unsigned char *)(v18 + v29[6]);
  uint64_t v32 = v29[7];
  uint64_t v33 = (void *)(v17 + v32);
  uint64_t v34 = (void *)(v18 + v32);
  void *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = v29[8];
  uint64_t v36 = (void *)(v17 + v35);
  uint64_t v37 = (void *)(v18 + v35);
  void *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = v29[9];
  uint64_t v39 = (void *)(v17 + v38);
  uint64_t v40 = (void *)(v18 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v28[7]) = *(unsigned char *)(v30 + v28[7]);
  *(unsigned char *)(a1 + v28[8]) = *(unsigned char *)(v30 + v28[8]);
  *(unsigned char *)(a1 + v28[9]) = *(unsigned char *)(v30 + v28[9]);
  *(unsigned char *)(a1 + v28[10]) = *(unsigned char *)(v30 + v28[10]);
  uint64_t v41 = v28[11];
  uint64_t v42 = a1 + v41;
  uint64_t v43 = (long long *)(v30 + v41);
  uint64_t v44 = *(void *)(v30 + v41 + 24);
  if (!*(void *)(a1 + v41 + 24))
  {
    if (v44)
    {
      *(void *)(v42 + 24) = v44;
      *(void *)(v42 + 32) = *((void *)v43 + 4);
      (**(void (***)(uint64_t, long long *))(v44 - 8))(v42, v43);
      goto LABEL_27;
    }
LABEL_26:
    long long v45 = *v43;
    long long v46 = v43[1];
    *(void *)(v42 + 32) = *((void *)v43 + 4);
    *(_OWORD *)uint64_t v42 = v45;
    *(_OWORD *)(v42 + 16) = v46;
    goto LABEL_27;
  }
  if (!v44)
  {
    sub_100007188(v42);
    goto LABEL_26;
  }
  sub_100019BC0((uint64_t *)v42, (uint64_t *)v43);
LABEL_27:
  *(void *)(a1 + v28[12]) = *(void *)(v30 + v28[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ShelfID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ImpressionMetrics();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100005B18(&qword_1001402E0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for Shelf.Presentation(0);
  uint64_t v17 = v16[5];
  uint64_t v18 = (void *)(v14 + v17);
  uint64_t v19 = (const void *)(v15 + v17);
  uint64_t v20 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_100005B18(&qword_1001402B8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
    {
      uint64_t v24 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v18, v19, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(v21 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(unsigned char *)(v14 + v16[6]) = *(unsigned char *)(v15 + v16[6]);
  *(_OWORD *)(v14 + v16[7]) = *(_OWORD *)(v15 + v16[7]);
  *(_OWORD *)(v14 + v16[8]) = *(_OWORD *)(v15 + v16[8]);
  *(_OWORD *)(v14 + v16[9]) = *(_OWORD *)(v15 + v16[9]);
  uint64_t v25 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v26 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  long long v31 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *(_OWORD *)(v29 + 16) = v31;
  *(void *)(v29 + 32) = *(void *)(v30 + 32);
  *(void *)(a1 + v28) = *(void *)(a2 + v28);
  return a1;
}

uint64_t assignWithTake for Shelf(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ShelfID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ImpressionMetrics();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100005B18(&qword_1001402E0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v62 = a2;
  long long v63 = a3;
  uint64_t v16 = a3[6];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v61 = type metadata accessor for Shelf.Presentation(0);
  uint64_t v19 = *(int *)(v61 + 20);
  uint64_t v20 = (void *)(v17 + v19);
  uint64_t v21 = (void *)(v18 + v19);
  uint64_t v22 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v60 = *(void *)(v22 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v60 + 48);
  uint64_t v24 = v20;
  LODWORD(v20) = v23(v20, 1, v22);
  uint64_t v25 = v21;
  int v26 = v23(v21, 1, v22);
  if (v20)
  {
    if (!v26)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v28 = v24;
      if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
      {
        uint64_t v37 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 32))(v24, v21, v37);
        swift_storeEnumTagMultiPayload();
        uint64_t v30 = v62;
        long long v31 = v63;
        uint64_t v38 = v60;
        uint64_t v32 = (int *)v61;
      }
      else
      {
        uint64_t v38 = v60;
        memcpy(v24, v21, *(void *)(v60 + 64));
        uint64_t v30 = v62;
        long long v31 = v63;
        uint64_t v32 = (int *)v61;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v28, 0, 1, v22);
      goto LABEL_23;
    }
LABEL_14:
    uint64_t v29 = sub_100005B18(&qword_1001402B8);
    memcpy(v24, v21, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = v62;
    long long v31 = v63;
    uint64_t v32 = (int *)v61;
    goto LABEL_23;
  }
  if (v26)
  {
    sub_100016ABC((uint64_t)v24, type metadata accessor for Shelf.Presentation.HeaderIconType);
    goto LABEL_14;
  }
  uint64_t v32 = (int *)v61;
  uint64_t v33 = v24;
  long long v31 = v63;
  uint64_t v34 = v25;
  uint64_t v30 = v62;
  if (a1 != v62)
  {
    sub_100016ABC((uint64_t)v33, type metadata accessor for Shelf.Presentation.HeaderIconType);
    int v35 = swift_getEnumCaseMultiPayload();
    if (v35 == 3 || v35 == 1)
    {
      uint64_t v36 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v33, v34, *(void *)(v60 + 64));
    }
  }
LABEL_23:
  *(unsigned char *)(v17 + v32[6]) = *(unsigned char *)(v18 + v32[6]);
  uint64_t v39 = v32[7];
  uint64_t v40 = (void *)(v17 + v39);
  uint64_t v41 = (uint64_t *)(v18 + v39);
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  *uint64_t v40 = v43;
  v40[1] = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v32[8];
  long long v45 = (void *)(v17 + v44);
  long long v46 = (uint64_t *)(v18 + v44);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  *long long v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = v32[9];
  uint64_t v50 = (void *)(v17 + v49);
  long long v51 = (uint64_t *)(v18 + v49);
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  *uint64_t v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = v31[8];
  *(unsigned char *)(a1 + v31[7]) = *(unsigned char *)(v30 + v31[7]);
  *(unsigned char *)(a1 + v54) = *(unsigned char *)(v30 + v54);
  uint64_t v55 = v31[10];
  *(unsigned char *)(a1 + v31[9]) = *(unsigned char *)(v30 + v31[9]);
  *(unsigned char *)(a1 + v55) = *(unsigned char *)(v30 + v55);
  uint64_t v56 = v31[11];
  uint64_t v57 = a1 + v56;
  if (*(void *)(a1 + v56 + 24)) {
    sub_100007188(a1 + v56);
  }
  long long v58 = *(_OWORD *)(v30 + v56 + 16);
  *(_OWORD *)uint64_t v57 = *(_OWORD *)(v30 + v56);
  *(_OWORD *)(v57 + 16) = v58;
  *(void *)(v57 + 32) = *(void *)(v30 + v56 + 32);
  *(void *)(a1 + v31[12]) = *(void *)(v30 + v31[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Shelf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001C3E0);
}

uint64_t sub_10001C3E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ShelfID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100005B18(&qword_1001402E0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for Shelf.Presentation(0);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[12]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for Shelf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001C558);
}

uint64_t sub_10001C558(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for ShelfID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_100005B18(&qword_1001402E0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = type metadata accessor for Shelf.Presentation(0);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[12]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10001C6B8()
{
  type metadata accessor for ShelfID();
  if (v0 <= 0x3F)
  {
    sub_10001C810(319, (unint64_t *)&unk_100140588, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Shelf.Presentation(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10001C810(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for Shelf.Orientation()
{
  return &type metadata for Shelf.Orientation;
}

void *initializeBufferWithCopyOfBuffer for Shelf.Presentation(unsigned char *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (void *)((char *)a2 + v7);
    uint64_t v10 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100005B18(&qword_1001402B8);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
          uint64_t v15 = type metadata accessor for MediaArtwork();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
          break;
        default:
          uint64_t v14 = v9[1];
          *uint64_t v8 = *v9;
          v8[1] = v14;
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v16 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (void *)((char *)v4 + v20);
    uint64_t v23 = (void *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = (void *)((char *)v4 + v21);
    int v26 = (void *)((char *)a2 + v21);
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Shelf.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 2u:
      case 4u:
        swift_bridgeObjectRelease();
        break;
      case 1u:
      case 3u:
        uint64_t v4 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
        break;
      default:
        break;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for Shelf.Presentation(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100005B18(&qword_1001402B8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v13 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v7, v8, v13);
        break;
      default:
        uint64_t v12 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v12;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = &a1[v19];
  uint64_t v24 = &a2[v19];
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for Shelf.Presentation(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
        case 3u:
          uint64_t v15 = type metadata accessor for MediaArtwork();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v7, v8, v15);
          break;
        default:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_13;
    }
LABEL_7:
    uint64_t v14 = sub_100005B18(&qword_1001402B8);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_13;
  }
  if (v13)
  {
    sub_100016ABC((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_100016ABC((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v26 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(v7, v8, v26);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_13:
  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = a3[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for Shelf.Presentation(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100005B18(&qword_1001402B8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for MediaArtwork();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(v10 + 64));
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  uint64_t v15 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  return a1;
}

unsigned char *assignWithTake for Shelf.Presentation(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Shelf.Presentation.HeaderIconType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      sub_100016ABC((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
      {
        uint64_t v18 = type metadata accessor for MediaArtwork();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 32))(v7, v8, v18);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      size_t v16 = *(void *)(v10 + 64);
      goto LABEL_9;
    }
    sub_100016ABC((uint64_t)v7, type metadata accessor for Shelf.Presentation.HeaderIconType);
LABEL_8:
    size_t v16 = *(void *)(*(void *)(sub_100005B18(&qword_1001402B8) - 8) + 64);
LABEL_9:
    memcpy(v7, v8, v16);
    goto LABEL_17;
  }
  if (v13) {
    goto LABEL_8;
  }
  int v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 3 || v14 == 1)
  {
    uint64_t v15 = type metadata accessor for MediaArtwork();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32))(v7, v8, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(v10 + 64));
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  uint64_t v19 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = (uint64_t *)&a2[v24];
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = &a1[v29];
  long long v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Shelf.Presentation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001D770);
}

uint64_t sub_10001D770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_1001402B8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Shelf.Presentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001D850);
}

uint64_t sub_10001D850(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100005B18(&qword_1001402B8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

void sub_10001D918()
{
  sub_10001C810(319, (unint64_t *)&unk_100140640, (void (*)(uint64_t))type metadata accessor for Shelf.Presentation.HeaderIconType);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for Shelf.Visibility()
{
  return &type metadata for Shelf.Visibility;
}

ValueMetadata *type metadata accessor for Shelf.AccessoryType()
{
  return &type metadata for Shelf.AccessoryType;
}

unint64_t sub_10001DA18()
{
  unint64_t result = qword_100140680;
  if (!qword_100140680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140680);
  }
  return result;
}

ValueMetadata *type metadata accessor for Shelf.CodingKeys()
{
  return &type metadata for Shelf.CodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconAlignment()
{
  return &type metadata for Shelf.Presentation.HeaderIconAlignment;
}

uint64_t getEnumTagSinglePayload for Shelf.Presentation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Shelf.Presentation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001DBF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.CodingKeys()
{
  return &type metadata for Shelf.Presentation.CodingKeys;
}

uint64_t *sub_10001DC28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v7 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        break;
      default:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10001DDDC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1:
    case 3:
      uint64_t v3 = type metadata accessor for MediaArtwork();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_10001DEB0(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 3u:
      uint64_t v4 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      break;
    default:
      uint64_t v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10001E014(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_100016ABC((uint64_t)a1, type metadata accessor for Shelf.Presentation.HeaderIconType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v4 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_10001E1B4(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for MediaArtwork();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10001E2C4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100016ABC((uint64_t)a1, type metadata accessor for Shelf.Presentation.HeaderIconType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3 || EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001E3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10001E420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10001E44C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10001E45C()
{
  uint64_t result = type metadata accessor for MediaArtwork();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *sub_10001E4F4(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImageProviding.CodingKeys()
{
  return &type metadata for ImageProviding.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageProviding.BundleImageCodingKeys()
{
  return &type metadata for ImageProviding.BundleImageCodingKeys;
}

ValueMetadata *type metadata accessor for ImageProviding.SystemSymbolCodingKeys()
{
  return &type metadata for ImageProviding.SystemSymbolCodingKeys;
}

unsigned char *_s13GameOverlayUI16TitleDisplayModeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PageMenuToolbarItem.CodingKeys()
{
  return &type metadata for PageMenuToolbarItem.CodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.CodingKeys()
{
  return &type metadata for PageToolbarItem.CodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.CodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.CodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.PlayerAvatarCodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.PlayerAvatarCodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.ButtonCodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.ButtonCodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItem.Appearance.MenuCodingKeys()
{
  return &type metadata for PageToolbarItem.Appearance.MenuCodingKeys;
}

ValueMetadata *type metadata accessor for PageToolbarItemGroups.CodingKeys()
{
  return &type metadata for PageToolbarItemGroups.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for Page.RefreshCondition(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Page.RefreshCondition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Page.RefreshCondition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10001E73C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10001E754(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition()
{
  return &type metadata for Page.RefreshCondition;
}

uint64_t _s13GameOverlayUI5ShelfV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13GameOverlayUI5ShelfV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E8D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Page.CodingKeys()
{
  return &type metadata for Page.CodingKeys;
}

ValueMetadata *type metadata accessor for Page.Background.CodingKeys()
{
  return &type metadata for Page.Background.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccessPointIconType.BundleCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13GameOverlayUI15PageToolbarItemV10AppearanceO21ButtonBackgroundShapeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001EA7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Page.Background.ZoomTranslationCodingKeys()
{
  return &type metadata for Page.Background.ZoomTranslationCodingKeys;
}

unint64_t sub_10001EAB8()
{
  unint64_t result = qword_100140730;
  if (!qword_100140730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140730);
  }
  return result;
}

unint64_t sub_10001EB10()
{
  unint64_t result = qword_100140738;
  if (!qword_100140738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140738);
  }
  return result;
}

unint64_t sub_10001EB68()
{
  unint64_t result = qword_100140740;
  if (!qword_100140740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140740);
  }
  return result;
}

unint64_t sub_10001EBC0()
{
  unint64_t result = qword_100140748;
  if (!qword_100140748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140748);
  }
  return result;
}

unint64_t sub_10001EC18()
{
  unint64_t result = qword_100140750;
  if (!qword_100140750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140750);
  }
  return result;
}

unint64_t sub_10001EC70()
{
  unint64_t result = qword_100140758;
  if (!qword_100140758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140758);
  }
  return result;
}

unint64_t sub_10001ECC8()
{
  unint64_t result = qword_100140760;
  if (!qword_100140760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140760);
  }
  return result;
}

unint64_t sub_10001ED20()
{
  unint64_t result = qword_100140768;
  if (!qword_100140768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140768);
  }
  return result;
}

unint64_t sub_10001ED78()
{
  unint64_t result = qword_100140770;
  if (!qword_100140770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140770);
  }
  return result;
}

unint64_t sub_10001EDD0()
{
  unint64_t result = qword_100140778;
  if (!qword_100140778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140778);
  }
  return result;
}

unint64_t sub_10001EE28()
{
  unint64_t result = qword_100140780;
  if (!qword_100140780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140780);
  }
  return result;
}

unint64_t sub_10001EE80()
{
  unint64_t result = qword_100140788;
  if (!qword_100140788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140788);
  }
  return result;
}

unint64_t sub_10001EED8()
{
  unint64_t result = qword_100140790;
  if (!qword_100140790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140790);
  }
  return result;
}

unint64_t sub_10001EF30()
{
  unint64_t result = qword_100140798;
  if (!qword_100140798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140798);
  }
  return result;
}

unint64_t sub_10001EF88()
{
  unint64_t result = qword_1001407A0;
  if (!qword_1001407A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407A0);
  }
  return result;
}

unint64_t sub_10001EFE0()
{
  unint64_t result = qword_1001407A8;
  if (!qword_1001407A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407A8);
  }
  return result;
}

unint64_t sub_10001F038()
{
  unint64_t result = qword_1001407B0;
  if (!qword_1001407B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407B0);
  }
  return result;
}

unint64_t sub_10001F090()
{
  unint64_t result = qword_1001407B8;
  if (!qword_1001407B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407B8);
  }
  return result;
}

unint64_t sub_10001F0E8()
{
  unint64_t result = qword_1001407C0;
  if (!qword_1001407C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407C0);
  }
  return result;
}

unint64_t sub_10001F140()
{
  unint64_t result = qword_1001407C8;
  if (!qword_1001407C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407C8);
  }
  return result;
}

unint64_t sub_10001F198()
{
  unint64_t result = qword_1001407D0;
  if (!qword_1001407D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407D0);
  }
  return result;
}

unint64_t sub_10001F1F0()
{
  unint64_t result = qword_1001407D8;
  if (!qword_1001407D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407D8);
  }
  return result;
}

unint64_t sub_10001F248()
{
  unint64_t result = qword_1001407E0;
  if (!qword_1001407E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407E0);
  }
  return result;
}

unint64_t sub_10001F2A0()
{
  unint64_t result = qword_1001407E8;
  if (!qword_1001407E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407E8);
  }
  return result;
}

unint64_t sub_10001F2F8()
{
  unint64_t result = qword_1001407F0;
  if (!qword_1001407F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407F0);
  }
  return result;
}

unint64_t sub_10001F350()
{
  unint64_t result = qword_1001407F8;
  if (!qword_1001407F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001407F8);
  }
  return result;
}

unint64_t sub_10001F3A8()
{
  unint64_t result = qword_100140800;
  if (!qword_100140800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140800);
  }
  return result;
}

unint64_t sub_10001F400()
{
  unint64_t result = qword_100140808;
  if (!qword_100140808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140808);
  }
  return result;
}

unint64_t sub_10001F458()
{
  unint64_t result = qword_100140810;
  if (!qword_100140810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140810);
  }
  return result;
}

unint64_t sub_10001F4B0()
{
  unint64_t result = qword_100140818;
  if (!qword_100140818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140818);
  }
  return result;
}

unint64_t sub_10001F508()
{
  unint64_t result = qword_100140820;
  if (!qword_100140820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140820);
  }
  return result;
}

unint64_t sub_10001F560()
{
  unint64_t result = qword_100140828;
  if (!qword_100140828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140828);
  }
  return result;
}

unint64_t sub_10001F5B8()
{
  unint64_t result = qword_100140830;
  if (!qword_100140830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140830);
  }
  return result;
}

unint64_t sub_10001F610()
{
  unint64_t result = qword_100140838;
  if (!qword_100140838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140838);
  }
  return result;
}

unint64_t sub_10001F668()
{
  unint64_t result = qword_100140840;
  if (!qword_100140840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140840);
  }
  return result;
}

unint64_t sub_10001F6C0()
{
  unint64_t result = qword_100140848;
  if (!qword_100140848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140848);
  }
  return result;
}

unint64_t sub_10001F718()
{
  unint64_t result = qword_100140850;
  if (!qword_100140850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140850);
  }
  return result;
}

unint64_t sub_10001F770()
{
  unint64_t result = qword_100140858;
  if (!qword_100140858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140858);
  }
  return result;
}

unint64_t sub_10001F7C8()
{
  unint64_t result = qword_100140860;
  if (!qword_100140860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140860);
  }
  return result;
}

unint64_t sub_10001F820()
{
  unint64_t result = qword_100140868;
  if (!qword_100140868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140868);
  }
  return result;
}

unint64_t sub_10001F878()
{
  unint64_t result = qword_100140870;
  if (!qword_100140870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140870);
  }
  return result;
}

unint64_t sub_10001F8D0()
{
  unint64_t result = qword_100140878;
  if (!qword_100140878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140878);
  }
  return result;
}

unint64_t sub_10001F928()
{
  unint64_t result = qword_100140880;
  if (!qword_100140880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140880);
  }
  return result;
}

unint64_t sub_10001F980()
{
  unint64_t result = qword_100140888;
  if (!qword_100140888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140888);
  }
  return result;
}

unint64_t sub_10001F9D8()
{
  unint64_t result = qword_100140890;
  if (!qword_100140890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140890);
  }
  return result;
}

unint64_t sub_10001FA30()
{
  unint64_t result = qword_100140898;
  if (!qword_100140898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140898);
  }
  return result;
}

unint64_t sub_10001FA84()
{
  unint64_t result = qword_1001408C0;
  if (!qword_1001408C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001408C0);
  }
  return result;
}

unint64_t sub_10001FAD8()
{
  unint64_t result = qword_1001408C8;
  if (!qword_1001408C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001408C8);
  }
  return result;
}

unint64_t sub_10001FB2C()
{
  unint64_t result = qword_1001408D0;
  if (!qword_1001408D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001408D0);
  }
  return result;
}

unint64_t sub_10001FB80()
{
  unint64_t result = qword_1001408D8;
  if (!qword_1001408D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001408D8);
  }
  return result;
}

unint64_t sub_10001FBD4()
{
  unint64_t result = qword_100140930;
  if (!qword_100140930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140930);
  }
  return result;
}

unint64_t sub_10001FC28()
{
  unint64_t result = qword_100140938;
  if (!qword_100140938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140938);
  }
  return result;
}

unint64_t sub_10001FC7C()
{
  unint64_t result = qword_100140940;
  if (!qword_100140940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140940);
  }
  return result;
}

unint64_t sub_10001FCD0()
{
  unint64_t result = qword_100140948;
  if (!qword_100140948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140948);
  }
  return result;
}

unint64_t sub_10001FD24()
{
  unint64_t result = qword_100140950;
  if (!qword_100140950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140950);
  }
  return result;
}

unint64_t sub_10001FD78()
{
  unint64_t result = qword_100140958;
  if (!qword_100140958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140958);
  }
  return result;
}

unint64_t sub_10001FDCC()
{
  unint64_t result = qword_100140960;
  if (!qword_100140960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140960);
  }
  return result;
}

uint64_t sub_10001FE20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000FC500 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006570795479 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614D726564616568 && a2 == 0xED0000736E696772 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x736E696772616DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x676553656C746974 && a2 == 0xEA00000000006575 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

unint64_t sub_100020220()
{
  unint64_t result = qword_100140998;
  if (!qword_100140998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140998);
  }
  return result;
}

unint64_t sub_100020274()
{
  unint64_t result = qword_1001409A0;
  if (!qword_1001409A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001409A0);
  }
  return result;
}

unint64_t sub_1000202C8()
{
  unint64_t result = qword_1001409A8;
  if (!qword_1001409A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001409A8);
  }
  return result;
}

unint64_t sub_10002031C()
{
  unint64_t result = qword_1001409B0;
  if (!qword_1001409B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001409B0);
  }
  return result;
}

unint64_t sub_100020370()
{
  unint64_t result = qword_1001409B8;
  if (!qword_1001409B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001409B8);
  }
  return result;
}

unint64_t sub_1000203C4()
{
  unint64_t result = qword_1001409C0;
  if (!qword_1001409C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001409C0);
  }
  return result;
}

unint64_t sub_100020418()
{
  unint64_t result = qword_100140A08;
  if (!qword_100140A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A08);
  }
  return result;
}

uint64_t sub_10002046C(uint64_t result)
{
  *(void *)(result + 80) = *(void *)(result + 80) & 1 | 0x8000000000000000;
  return result;
}

unint64_t sub_100020480()
{
  unint64_t result = qword_100140A10;
  if (!qword_100140A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A10);
  }
  return result;
}

unint64_t sub_1000204D4()
{
  unint64_t result = qword_100140A18;
  if (!qword_100140A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A18);
  }
  return result;
}

uint64_t sub_100020528(uint64_t result)
{
  *(void *)(result + 80) = *(void *)(result + 80) & 1 | 0x4000000000000000;
  return result;
}

uint64_t sub_10002053C(uint64_t result)
{
  *(void *)(result + 80) &= 1uLL;
  return result;
}

unint64_t sub_10002054C()
{
  unint64_t result = qword_100140A30;
  if (!qword_100140A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A30);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Shelf.Presentation.HeaderIconType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Shelf.Presentation.HeaderIconType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000206FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.CodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.CodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.SymbolCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.SymbolCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.GameIconCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.GameIconCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.PlayerAvatarCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.ArtworkCodingKeys;
}

ValueMetadata *type metadata accessor for Shelf.Presentation.HeaderIconType.BundleCodingKeys()
{
  return &type metadata for Shelf.Presentation.HeaderIconType.BundleCodingKeys;
}

uint64_t getEnumTagSinglePayload for AccessPointShaderTransitionView.AnimationState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13GameOverlayUI5ShelfV12PresentationV19HeaderIconAlignmentOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000208E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.CodingKeys()
{
  return &type metadata for Page.RefreshCondition.CodingKeys;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.PullToRefreshCodingKeys()
{
  return &type metadata for Page.RefreshCondition.PullToRefreshCodingKeys;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.OnAppearCodingKeys()
{
  return &type metadata for Page.RefreshCondition.OnAppearCodingKeys;
}

unsigned char *_s13GameOverlayUI14ImageProvidingO21BundleImageCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000209D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Page.RefreshCondition.OnForegroundCodingKeys()
{
  return &type metadata for Page.RefreshCondition.OnForegroundCodingKeys;
}

unint64_t sub_100020A10()
{
  unint64_t result = qword_100140A38;
  if (!qword_100140A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A38);
  }
  return result;
}

unint64_t sub_100020A68()
{
  unint64_t result = qword_100140A40;
  if (!qword_100140A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A40);
  }
  return result;
}

unint64_t sub_100020AC0()
{
  unint64_t result = qword_100140A48;
  if (!qword_100140A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A48);
  }
  return result;
}

unint64_t sub_100020B18()
{
  unint64_t result = qword_100140A50;
  if (!qword_100140A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A50);
  }
  return result;
}

unint64_t sub_100020B70()
{
  unint64_t result = qword_100140A58;
  if (!qword_100140A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A58);
  }
  return result;
}

unint64_t sub_100020BC8()
{
  unint64_t result = qword_100140A60;
  if (!qword_100140A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A60);
  }
  return result;
}

unint64_t sub_100020C20()
{
  unint64_t result = qword_100140A68;
  if (!qword_100140A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A68);
  }
  return result;
}

unint64_t sub_100020C78()
{
  unint64_t result = qword_100140A70;
  if (!qword_100140A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A70);
  }
  return result;
}

unint64_t sub_100020CD0()
{
  unint64_t result = qword_100140A78;
  if (!qword_100140A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A78);
  }
  return result;
}

unint64_t sub_100020D28()
{
  unint64_t result = qword_100140A80;
  if (!qword_100140A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A80);
  }
  return result;
}

unint64_t sub_100020D80()
{
  unint64_t result = qword_100140A88;
  if (!qword_100140A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A88);
  }
  return result;
}

unint64_t sub_100020DD8()
{
  unint64_t result = qword_100140A90;
  if (!qword_100140A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A90);
  }
  return result;
}

unint64_t sub_100020E30()
{
  unint64_t result = qword_100140A98;
  if (!qword_100140A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140A98);
  }
  return result;
}

unint64_t sub_100020E88()
{
  unint64_t result = qword_100140AA0;
  if (!qword_100140AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AA0);
  }
  return result;
}

unint64_t sub_100020EE0()
{
  unint64_t result = qword_100140AA8;
  if (!qword_100140AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AA8);
  }
  return result;
}

unint64_t sub_100020F38()
{
  unint64_t result = qword_100140AB0;
  if (!qword_100140AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AB0);
  }
  return result;
}

unint64_t sub_100020F90()
{
  unint64_t result = qword_100140AB8;
  if (!qword_100140AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AB8);
  }
  return result;
}

unint64_t sub_100020FE8()
{
  unint64_t result = qword_100140AC0;
  if (!qword_100140AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AC0);
  }
  return result;
}

unint64_t sub_100021040()
{
  unint64_t result = qword_100140AC8;
  if (!qword_100140AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AC8);
  }
  return result;
}

unint64_t sub_100021098()
{
  unint64_t result = qword_100140AD0;
  if (!qword_100140AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AD0);
  }
  return result;
}

unint64_t sub_1000210F0()
{
  unint64_t result = qword_100140AD8;
  if (!qword_100140AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AD8);
  }
  return result;
}

unint64_t sub_100021148()
{
  unint64_t result = qword_100140AE0;
  if (!qword_100140AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AE0);
  }
  return result;
}

unint64_t sub_1000211A0()
{
  unint64_t result = qword_100140AE8;
  if (!qword_100140AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AE8);
  }
  return result;
}

unint64_t sub_1000211F8()
{
  unint64_t result = qword_100140AF0;
  if (!qword_100140AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AF0);
  }
  return result;
}

unint64_t sub_100021250()
{
  unint64_t result = qword_100140AF8;
  if (!qword_100140AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140AF8);
  }
  return result;
}

unint64_t sub_1000212A8()
{
  unint64_t result = qword_100140B00;
  if (!qword_100140B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140B00);
  }
  return result;
}

unint64_t sub_100021300()
{
  unint64_t result = qword_100140B08;
  if (!qword_100140B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140B08);
  }
  return result;
}

unint64_t sub_100021358()
{
  unint64_t result = qword_100140B10;
  if (!qword_100140B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140B10);
  }
  return result;
}

unint64_t sub_1000213B0()
{
  unint64_t result = qword_100140B18;
  if (!qword_100140B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140B18);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for InGameBannerPageIntentImplementation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InGameBannerPageIntentImplementation()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for InGameBannerPageIntentImplementation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for InGameBannerPageIntentImplementation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InGameBannerPageIntentImplementation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InGameBannerPageIntentImplementation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InGameBannerPageIntentImplementation()
{
  return &type metadata for InGameBannerPageIntentImplementation;
}

uint64_t sub_100021568()
{
  return sub_10002489C((unint64_t *)&unk_100140B20, (void (*)(uint64_t))type metadata accessor for InGameBannerPageIntent);
}

uint64_t sub_1000215B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[20] = a4;
  v5[21] = a5;
  v5[18] = a1;
  v5[19] = a2;
  sub_100005B18(&qword_100140B38);
  v5[22] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AccessPointIconType(0);
  v5[23] = v6;
  v5[24] = *(void *)(v6 - 8);
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_1000216A4, 0, 0);
}

uint64_t sub_1000216A4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  unsigned int v4 = *(unsigned __int8 **)(v0 + 152);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  *(void *)(v0 + 208) = v5;
  *(void *)(v0 + 216) = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v3, 1, 1, v1);
  uint64_t v6 = *v4;
  switch(v6)
  {
    case 4:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7)
      {
LABEL_4:
        uint64_t v8 = *(void **)(v0 + 200);
        uint64_t v9 = *(void *)(v0 + 152);
        uint64_t v10 = *(void *)(v9 + 32);
        *uint64_t v8 = *(void *)(v9 + 24);
        v8[1] = v10;
        swift_storeEnumTagMultiPayload();
        uint64_t v11 = *(void *)(v9 + *(int *)(type metadata accessor for InGameBannerRequiredData() + 44));
        *(void *)(v0 + 224) = v11;
        if (v11)
        {
          unint64_t v12 = self;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          *(void *)(v0 + 232) = isa;
          *(void *)(v0 + 16) = v0;
          *(void *)(v0 + 56) = v0 + 120;
          *(void *)(v0 + 24) = sub_100021C64;
          uint64_t v14 = swift_continuation_init();
          *(void *)(v0 + 80) = _NSConcreteStackBlock;
          *(void *)(v0 + 88) = 0x40000000;
          *(void *)(v0 + 96) = sub_1000AEE3C;
          *(void *)(v0 + 104) = &unk_100131858;
          *(void *)(v0 + 112) = v14;
          [v12 loadPlayersForIdentifiersPrivate:isa withCompletionHandler:v0 + 80];
          return _swift_continuation_await(v0 + 16);
        }
        uint64_t v15 = qword_10013FBB0;
        swift_bridgeObjectRetain();
        if (v15 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_100007D4C(v16, (uint64_t)qword_100156CF8);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "No player ids were provided for leaderboard banner", v19, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        switch((int)v6)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 6:
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v20) {
              goto LABEL_16;
            }
            uint64_t v24 = *(uint64_t **)(v0 + 200);
            uint64_t v25 = *(void *)(v0 + 152);
            uint64_t v27 = *(void *)(v25 + 192);
            unint64_t v26 = *(void *)(v25 + 200);
            *uint64_t v24 = v27;
            v24[1] = v26;
            swift_storeEnumTagMultiPayload();
            sub_1000244B8(v27, v26);
            break;
          case 5:
            swift_bridgeObjectRelease();
LABEL_16:
            uint64_t v21 = *(void **)(v0 + 200);
            uint64_t v22 = *(void *)(v0 + 152);
            uint64_t v23 = *(void *)(v22 + 32);
            *uint64_t v21 = *(void *)(v22 + 24);
            v21[1] = v23;
            swift_storeEnumTagMultiPayload();
            swift_bridgeObjectRetain();
            break;
          default:
            JUMPOUT(0);
        }
      }
      uint64_t v28 = *(void *)(v0 + 200);
      uint64_t v29 = *(void *)(v0 + 176);
      uint64_t v30 = *(void *)(v0 + 144);
      sub_1000225BC(*(unsigned __int8 **)(v0 + 152), v28, v29, *(void *)(v0 + 160), *(void *)(v0 + 168), v30);
      sub_100017388(v29, &qword_100140B38);
      sub_10002483C(v28, type metadata accessor for AccessPointIconType);
      uint64_t v31 = type metadata accessor for AccessPointContainer(0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 0, 1, v31);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
      return v32();
  }
}

uint64_t sub_100021C64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1000222F8;
  }
  else {
    uint64_t v2 = sub_100021D74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100021D74()
{
  uint64_t v39 = v0;
  unint64_t v1 = v0[15];

  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2 >= 1) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    if (qword_10013FBB0 == -1) {
      goto LABEL_27;
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2 < 1) {
    goto LABEL_26;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007D4C(v3, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[17] = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfuly loaded %ld player(s) for leaderboard banner.", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v37 = v0;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_10;
    }
LABEL_23:
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
LABEL_24:
    uint64_t v0 = v37;
    uint64_t v21 = (void (*)(char **, void, uint64_t, uint64_t))v37[26];
    uint64_t v23 = (char **)v37[22];
    uint64_t v22 = v37[23];
    swift_bridgeObjectRelease();
    sub_100017388((uint64_t)v23, &qword_100140B38);
    *uint64_t v23 = v10;
    swift_storeEnumTagMultiPayload();
    v21(v23, 0, 1, v22);
    goto LABEL_30;
  }
  uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    goto LABEL_23;
  }
LABEL_10:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v1 & 0xC000000000000001;
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v11 = v1;
    do
    {
      if (v9) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v1 + 8 * v8 + 32);
      }
      uint64_t v14 = v13;
      uint64_t v15 = sub_100024524(v13);
      if (v16 >> 60 != 15)
      {
        uint64_t v17 = v15;
        unint64_t v18 = v16;
        sub_1000244CC(v15, v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1000363CC(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v20 = *((void *)v10 + 2);
        unint64_t v19 = *((void *)v10 + 3);
        if (v20 >= v19 >> 1) {
          uint64_t v10 = sub_1000363CC((char *)(v19 > 1), v20 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v20 + 1;
        unint64_t v12 = &v10[16 * v20];
        *((void *)v12 + 4) = v17;
        *((void *)v12 + 5) = v18;
        sub_1000247B8(v17, v18);
        unint64_t v1 = v11;
      }
      ++v8;
    }
    while (v7 != v8);
    goto LABEL_24;
  }
  __break(1u);
LABEL_34:
  swift_once();
LABEL_27:
  uint64_t v24 = type metadata accessor for Logger();
  sub_100007D4C(v24, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = Array.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    v0[16] = sub_100036BF8(v28, v30, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error encountered loading players for leaderboard banner: %s.", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_30:
  uint64_t v31 = v0[25];
  uint64_t v32 = v0[22];
  uint64_t v33 = v0[18];
  sub_1000225BC((unsigned __int8 *)v0[19], v31, v32, v0[20], v0[21], v33);
  sub_100017388(v32, &qword_100140B38);
  sub_10002483C(v31, type metadata accessor for AccessPointIconType);
  uint64_t v34 = type metadata accessor for AccessPointContainer(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  int v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t sub_1000222F8()
{
  uint64_t v16 = v0;
  unint64_t v1 = *(void **)(v0 + 232);
  swift_willThrow();
  swift_errorRelease();

  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007D4C(v2, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 128) = sub_100036BF8(v6, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error encountered loading players for leaderboard banner: %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 144);
  sub_1000225BC(*(unsigned __int8 **)(v0 + 152), v9, v10, *(void *)(v0 + 160), *(void *)(v0 + 168), v11);
  sub_100017388(v10, &qword_100140B38);
  sub_10002483C(v9, type metadata accessor for AccessPointIconType);
  uint64_t v12 = type metadata accessor for AccessPointContainer(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1000225BC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v81 = a4;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v9 = type metadata accessor for PageID();
  uint64_t v77 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11 - 8);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v80 = (uint64_t)&v68 - v17;
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v68 - v18;
  uint64_t v20 = type metadata accessor for PageMetrics();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v68 - v23;
  uint64_t v25 = *a1;
  uint64_t v78 = v9;
  uint64_t v79 = a6;
  uint64_t v74 = v26;
  uint64_t v75 = v22;
  uint64_t v72 = v27;
  uint64_t v73 = v25;
  switch(v25)
  {
    case 3:
      uint64_t v28 = *((void *)a1 + 27);
      if (!v28) {
        goto LABEL_2;
      }
      uint64_t v29 = *((void *)a1 + 26);
      id v30 = [self stringForOrigin:3];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      uint64_t v33 = (uint64_t)v24;
      uint64_t v34 = v29;
      uint64_t v35 = v28;
      int v36 = 2;
      goto LABEL_9;
    case 4:
      uint64_t v37 = *((void *)a1 + 27);
      if (!v37) {
        goto LABEL_2;
      }
      uint64_t v38 = *((void *)a1 + 26);
      id v39 = [self stringForOrigin:3];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v40;

      uint64_t v33 = (uint64_t)v24;
      uint64_t v34 = v38;
      uint64_t v35 = v37;
      int v36 = 3;
      goto LABEL_9;
    case 5:
      uint64_t v41 = *((void *)a1 + 27);
      if (!v41) {
        goto LABEL_2;
      }
      uint64_t v42 = *((void *)a1 + 26);
      id v43 = [self stringForOrigin:3];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v44;

      uint64_t v33 = (uint64_t)v24;
      uint64_t v34 = v42;
      uint64_t v35 = v41;
      int v36 = 4;
LABEL_9:
      sub_1000920E8(v34, v35, v36, 1, v68, v32, v33);
      swift_bridgeObjectRelease();
      break;
    default:
LABEL_2:
      static PageMetrics.notInstrumented.getter();
      break;
  }
  uint64_t v45 = PageMetrics.pageFields.getter();
  v69 = v15;
  if (!v45) {
    uint64_t v45 = sub_1000B96AC((uint64_t)&_swiftEmptyArrayStorage);
  }
  uint64_t v46 = v45;
  uint64_t v47 = a5;
  sub_100022BE4((uint64_t)a1, 1, v45, v81, a5, (uint64_t)v19, 1.0);
  uint64_t v48 = sub_1000363A8(0, 1, 1, (unint64_t)&_swiftEmptyArrayStorage);
  unint64_t v50 = *(void *)(v48 + 16);
  unint64_t v49 = *(void *)(v48 + 24);
  long long v51 = a1;
  if (v50 >= v49 >> 1) {
    uint64_t v48 = sub_1000363A8(v49 > 1, v50 + 1, 1, v48);
  }
  *(void *)(v48 + 16) = v50 + 1;
  unint64_t v52 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v53 = *(void *)(v12 + 72);
  sub_1000248E4((uint64_t)v19, v48 + v52 + v53 * v50, type metadata accessor for AccessPointHighlight);
  uint64_t v54 = v47;
  sub_1000235B0(v51, v70, v71, v46, v81, v47, v80);
  unint64_t v56 = *(void *)(v48 + 16);
  unint64_t v55 = *(void *)(v48 + 24);
  if (v56 >= v55 >> 1) {
    uint64_t v48 = sub_1000363A8(v55 > 1, v56 + 1, 1, v48);
  }
  *(void *)(v48 + 16) = v56 + 1;
  sub_1000248E4(v80, v48 + v52 + v56 * v53, type metadata accessor for AccessPointHighlight);
  uint64_t v57 = (uint64_t)v69;
  sub_100022BE4((uint64_t)v51, 0, v46, v81, v54, (uint64_t)v69, 0.5);
  swift_bridgeObjectRelease();
  unint64_t v59 = *(void *)(v48 + 16);
  unint64_t v58 = *(void *)(v48 + 24);
  if (v59 >= v58 >> 1) {
    uint64_t v48 = sub_1000363A8(v58 > 1, v59 + 1, 1, v48);
  }
  *(void *)(v48 + 16) = v59 + 1;
  sub_1000248E4(v57, v48 + v52 + v59 * v53, type metadata accessor for AccessPointHighlight);
  swift_bridgeObjectRetain();
  uint64_t v60 = v76;
  PageID.init(with:)();
  uint64_t v61 = v72;
  uint64_t v63 = v74;
  uint64_t v62 = v75;
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 16))(v74, v24, v75);
  long long v64 = sub_1000AEF08(v48);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v24, v62);
  uint64_t v65 = v79;
  (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v79, v60, v78);
  long long v66 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v65 + v66[5], v63, v62);
  *(unsigned char *)(v65 + v66[6]) = v73;
  *(void *)(v65 + v66[7]) = v64;
  return result;
}

uint64_t sub_100022BE4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  LODWORD(v85) = a2;
  uint64_t v97 = a1;
  uint64_t v10 = sub_100005B18(&qword_1001402E0);
  __chkstk_darwin(v10 - 8);
  char v93 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100005B18(&qword_100140B40);
  __chkstk_darwin(v12 - 8);
  char v92 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100005B18(&qword_100140B38);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v91 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v90 = (void (**)(char *, uint64_t, uint64_t, int *))((char *)&v80 - v17);
  uint64_t v18 = type metadata accessor for ActionMetrics();
  uint64_t v82 = *(void *)(v18 - 8);
  uint64_t v83 = v18;
  __chkstk_darwin(v18);
  uint64_t v81 = (uint64_t)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100005B18(&qword_100140B48);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v89 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v80 - v23;
  uint64_t v25 = type metadata accessor for Game();
  uint64_t v94 = *(void *)(v25 - 8);
  uint64_t v95 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v84 = (uint64_t)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v80 - v28;
  uint64_t v30 = sub_100005B18(&qword_100140B50);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v86 = (uint64_t)&v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v80 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v80 - v36;
  uint64_t v38 = (int *)type metadata accessor for LaunchDashboardAction();
  uint64_t v39 = *((void *)v38 - 1);
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t, int *))(v39 + 56);
  v80(v37, 1, 1, v38);
  char v96 = v37;
  if (v85)
  {
    uint64_t v40 = a3;
    uint64_t v41 = type metadata accessor for InGameBannerRequiredData();
    uint64_t v42 = v97;
    sub_1000170C8(v97 + *(int *)(v41 + 40), (uint64_t)v24, &qword_100140B48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v24, 1, v95) == 1)
    {
      sub_100017388((uint64_t)v24, &qword_100140B48);
      uint64_t v37 = v96;
    }
    else
    {
      v85 = type metadata accessor for Game;
      sub_1000248E4((uint64_t)v24, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Game);
      sub_10002494C((uint64_t)v29, v84, (uint64_t (*)(void))type metadata accessor for Game);
      long long v43 = *(_OWORD *)(v42 + 120);
      long long v104 = *(_OWORD *)(v42 + 104);
      long long v105 = v43;
      long long v106 = *(_OWORD *)(v42 + 136);
      uint64_t v107 = *(void *)(v42 + 152);
      long long v44 = *(_OWORD *)(v42 + 56);
      long long v100 = *(_OWORD *)(v42 + 40);
      long long v101 = v44;
      long long v45 = *(_OWORD *)(v42 + 88);
      long long v102 = *(_OWORD *)(v42 + 72);
      long long v103 = v45;
      long long v46 = *(_OWORD *)(v42 + 24);
      long long v98 = *(_OWORD *)(v42 + 8);
      long long v99 = v46;
      sub_1000249B4((uint64_t)&v98);
      uint64_t v47 = v81;
      sub_100092534(v40, 9, v81);
      sub_10002483C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Game);
      uint64_t v37 = v96;
      sub_100017388((uint64_t)v96, &qword_100140B50);
      sub_1000248E4(v84, (uint64_t)v35, (uint64_t (*)(void))v85);
      uint64_t v48 = &v35[v38[5]];
      long long v49 = v99;
      *(_OWORD *)uint64_t v48 = v98;
      *((_OWORD *)v48 + 1) = v49;
      long long v50 = v103;
      *((_OWORD *)v48 + 4) = v102;
      *((_OWORD *)v48 + 5) = v50;
      long long v51 = v101;
      *((_OWORD *)v48 + 2) = v100;
      *((_OWORD *)v48 + 3) = v51;
      *((void *)v48 + 18) = v107;
      long long v52 = v106;
      long long v53 = v104;
      *((_OWORD *)v48 + 7) = v105;
      *((_OWORD *)v48 + 8) = v52;
      *((_OWORD *)v48 + 6) = v53;
      uint64_t v54 = &v35[v38[6]];
      *(void *)uint64_t v54 = 0;
      *((void *)v54 + 1) = 0;
      v54[16] = 3;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(&v35[v38[7]], v47, v83);
      v80(v35, 0, 1, v38);
      sub_100024A74((uint64_t)v35, (uint64_t)v37, &qword_100140B50);
    }
  }
  *(void *)&long long v98 = 0;
  *((void *)&v98 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  uint64_t v55 = v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&long long v98 = v87;
  *((void *)&v98 + 1) = v55;
  v56._object = (void *)0x80000001000FC690;
  v56._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v56);
  long long v111 = v98;
  AnyHashable.init<A>(_:)();
  uint64_t v57 = (uint64_t)v90;
  void *v90 = 0x65766E6F63696367;
  *(void *)(v57 + 8) = 0xE900000000000063;
  *(void *)(v57 + 16) = 0x4041000000000000;
  uint64_t v58 = type metadata accessor for AccessPointIconType(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56);
  v59(v57, 0, 1, v58);
  uint64_t v60 = (uint64_t)v91;
  v59((uint64_t)v91, 1, 1, v58);
  uint64_t v61 = v86;
  sub_1000170C8((uint64_t)v37, v86, &qword_100140B50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v39 + 48))(v61, 1, v38) == 1)
  {
    sub_100017388(v61, &qword_100140B50);
    long long v111 = 0u;
    long long v112 = 0u;
    uint64_t v113 = 0;
  }
  else
  {
    *((void *)&v112 + 1) = v38;
    uint64_t v113 = sub_10002489C(&qword_100140B58, (void (*)(uint64_t))type metadata accessor for LaunchDashboardAction);
    uint64_t v62 = sub_1000082EC((uint64_t *)&v111);
    sub_1000248E4(v61, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for LaunchDashboardAction);
  }
  uint64_t v64 = (uint64_t)v92;
  uint64_t v63 = (uint64_t)v93;
  uint64_t v65 = v97;
  long long v66 = (uint64_t *)v89;
  uint64_t v67 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 1, 1, v67);
  uint64_t v68 = type metadata accessor for ImpressionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v63, 1, 1, v68);
  uint64_t v69 = type metadata accessor for InGameBannerRequiredData();
  sub_1000170C8(v65 + *(int *)(v69 + 40), (uint64_t)v66, &qword_100140B48);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v94 + 48))(v66, 1, v95) == 1)
  {
    sub_100017388((uint64_t)v66, &qword_100140B48);
    uint64_t v70 = 0;
    uint64_t v71 = 0;
  }
  else
  {
    uint64_t v70 = *v66;
    uint64_t v71 = v66[1];
    swift_bridgeObjectRetain();
    sub_10002483C((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for Game);
  }
  long long v72 = v99;
  *(_OWORD *)a6 = v98;
  *(_OWORD *)(a6 + 16) = v72;
  *(void *)(a6 + 32) = v100;
  uint64_t v73 = (int *)type metadata accessor for AccessPointHighlight(0);
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  sub_100024A74(v57, a6 + v73[7], &qword_100140B38);
  sub_100024A74(v60, a6 + v73[8], &qword_100140B38);
  uint64_t v74 = a6 + v73[9];
  *(double *)uint64_t v74 = a7;
  *(unsigned char *)(v74 + 8) = 0;
  *(unsigned char *)(a6 + v73[10]) = 2;
  *(unsigned char *)(a6 + v73[11]) = 2;
  *(unsigned char *)(a6 + v73[12]) = 2;
  uint64_t v75 = a6 + v73[13];
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  sub_1000158AC((uint64_t)&v111, (uint64_t)&v108);
  long long v76 = v109;
  *(_OWORD *)uint64_t v75 = v108;
  *(_OWORD *)(v75 + 16) = v76;
  *(void *)(v75 + 32) = v110;
  sub_100017388((uint64_t)&v111, &qword_1001401E8);
  sub_100024A74(v64, a6 + v73[14], &qword_100140B40);
  sub_100024A74(v63, a6 + v73[15], &qword_1001402E0);
  uint64_t v77 = (void *)(a6 + v73[16]);
  *uint64_t v77 = v70;
  v77[1] = v71;
  *(void *)(a6 + v73[17]) = 1;
  uint64_t v78 = (void *)(a6 + v73[18]);
  *uint64_t v78 = 0;
  v78[1] = 0;
  return sub_100017388((uint64_t)v96, &qword_100140B50);
}

uint64_t sub_1000235B0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v128 = a5;
  uint64_t v129 = a6;
  uint64_t v120 = a4;
  uint64_t v130 = a2;
  uint64_t v131 = a3;
  uint64_t v9 = sub_100005B18(&qword_100140B40);
  __chkstk_darwin(v9 - 8);
  uint64_t v140 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100005B18(&qword_100140B38);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v138 = (uint64_t)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v137 = (uint64_t)&v109 - v14;
  uint64_t v15 = sub_100005B18(&qword_1001402E0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v139 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v121 = (char *)&v109 - v19;
  __chkstk_darwin(v18);
  uint64_t v144 = (uint64_t)&v109 - v20;
  uint64_t v21 = type metadata accessor for ActionMetrics();
  uint64_t v118 = *(void *)(v21 - 8);
  uint64_t v119 = v21;
  __chkstk_darwin(v21);
  uint64_t v117 = (uint64_t)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100005B18(&qword_100140B48);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  v132 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v109 - v26;
  uint64_t v136 = type metadata accessor for Game();
  uint64_t v142 = *(void *)(v136 - 8);
  uint64_t v28 = __chkstk_darwin(v136);
  uint64_t v30 = (char *)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v109 - v31;
  uint64_t v33 = sub_100005B18(&qword_100140B50);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v127 = (uint64_t)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v112 = (uint64_t)&v109 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v109 - v38;
  v141 = a1;
  uint64_t v40 = *a1;
  unint64_t v41 = 0xD000000000000017;
  unint64_t v42 = 0xD000000000000019;
  unint64_t v43 = 0x80000001000FC670;
  unint64_t v44 = 0x80000001000FC650;
  LODWORD(v135) = 3;
  int v45 = 1;
  int v46 = 2;
  uint64_t v47 = 0;
  int v48 = 0;
  v143 = v39;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  switch(v40)
  {
    case 3:
      goto LABEL_5;
    case 4:
      unint64_t v41 = 0xD000000000000020;
      unint64_t v42 = 0xD000000000000024;
      unint64_t v43 = 0x80000001000FC620;
      long long v52 = "LeaderboardBeatFriendScoreBanner";
      goto LABEL_4;
    case 5:
      unint64_t v41 = 0xD00000000000001ELL;
      unint64_t v42 = 0xD000000000000021;
      unint64_t v43 = 0x80000001000FC5C0;
      long long v52 = "LeaderboardTopPercentageBanner";
LABEL_4:
      unint64_t v44 = (unint64_t)(v52 - 32) | 0x8000000000000000;
      int v48 = 1;
      int v46 = v40;
LABEL_5:
      LODWORD(v135) = v48;
      uint64_t v53 = v141[26];
      uint64_t v133 = v141[27];
      uint64_t v134 = v53;
      uint64_t v47 = v41;
      swift_bridgeObjectRetain();
      int v45 = 0;
      uint64_t v49 = v44;
      int v48 = v46;
      uint64_t v50 = v42;
      uint64_t v51 = v43;
      break;
    default:
      break;
  }
  int v122 = v45;
  uint64_t v113 = v50;
  int v114 = v48;
  uint64_t v115 = v51;
  uint64_t v116 = v49;
  uint64_t v54 = (int *)type metadata accessor for LaunchDashboardAction();
  uint64_t v124 = *((void *)v54 - 1);
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t, int *))(v124 + 56);
  uint64_t v56 = (uint64_t)v143;
  uint64_t v111 = v124 + 56;
  v55(v143, 1, 1, v54);
  uint64_t v57 = type metadata accessor for InGameBannerRequiredData();
  uint64_t v58 = v141;
  uint64_t v126 = (uint64_t)v141 + *(int *)(v57 + 40);
  sub_1000170C8(v126, (uint64_t)v27, &qword_100140B48);
  unint64_t v59 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v142 + 48);
  v142 += 48;
  v125 = v59;
  unsigned int v60 = v59((uint64_t *)v27, 1, v136);
  v123 = v54;
  if (v60 == 1)
  {
    sub_100024824(v134, v133, v135);
    sub_100017388((uint64_t)v27, &qword_100140B48);
  }
  else
  {
    uint64_t v110 = v55;
    sub_1000248E4((uint64_t)v27, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Game);
    sub_10002494C((uint64_t)v32, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Game);
    long long v61 = *(_OWORD *)(v58 + 15);
    long long v151 = *(_OWORD *)(v58 + 13);
    long long v152 = v61;
    long long v153 = *(_OWORD *)(v58 + 17);
    uint64_t v154 = v58[19];
    long long v62 = *(_OWORD *)(v58 + 7);
    long long v147 = *(_OWORD *)(v58 + 5);
    long long v148 = v62;
    long long v63 = *(_OWORD *)(v58 + 11);
    long long v149 = *(_OWORD *)(v58 + 9);
    long long v150 = v63;
    long long v64 = *(_OWORD *)(v58 + 3);
    long long v145 = *(_OWORD *)(v58 + 1);
    long long v146 = v64;
    sub_1000249B4((uint64_t)&v145);
    uint64_t v65 = v117;
    sub_100092534(v120, 9, v117);
    sub_10002483C((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Game);
    sub_100017388(v56, &qword_100140B50);
    uint64_t v66 = (uint64_t)v30;
    uint64_t v67 = v112;
    sub_1000248E4(v66, v112, (uint64_t (*)(void))type metadata accessor for Game);
    uint64_t v68 = v67 + v54[5];
    long long v69 = v146;
    *(_OWORD *)uint64_t v68 = v145;
    *(_OWORD *)(v68 + 16) = v69;
    long long v70 = v150;
    *(_OWORD *)(v68 + 64) = v149;
    *(_OWORD *)(v68 + 80) = v70;
    long long v71 = v148;
    *(_OWORD *)(v68 + 32) = v147;
    *(_OWORD *)(v68 + 48) = v71;
    *(void *)(v68 + 144) = v154;
    long long v72 = v153;
    long long v73 = v151;
    *(_OWORD *)(v68 + 112) = v152;
    *(_OWORD *)(v68 + 128) = v72;
    *(_OWORD *)(v68 + 96) = v73;
    uint64_t v74 = v67 + v54[6];
    uint64_t v75 = v133;
    *(void *)uint64_t v74 = v134;
    *(void *)(v74 + 8) = v75;
    *(unsigned char *)(v74 + 16) = v135;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 32))(v67 + v54[7], v65, v119);
    v110((char *)v67, 0, 1, v54);
    sub_100024A74(v67, v56, &qword_100140B50);
  }
  uint64_t v76 = type metadata accessor for ImpressionMetrics();
  uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56);
  v77(v144, 1, 1, v76);
  uint64_t v78 = v141;
  if ((v122 & 1) == 0)
  {
    unint64_t v79 = 0xEB00000000746E69;
    uint64_t v80 = 0x6F50737365636361;
    switch(v114)
    {
      case 1:
        unint64_t v79 = 0x80000001000FC580;
        uint64_t v80 = 0xD000000000000014;
        break;
      case 2:
        uint64_t v80 = 0xD000000000000017;
        uint64_t v81 = "achievementEarnedBanner";
        goto LABEL_16;
      case 3:
        unint64_t v79 = 0xEC00000072656E6ELL;
        uint64_t v80 = 0x6142656D61476E69;
        break;
      case 4:
        uint64_t v80 = 0xD000000000000020;
        uint64_t v81 = "leaderboardBeatFriendScoreBanner";
        goto LABEL_16;
      case 5:
        uint64_t v80 = 0xD00000000000001ELL;
        uint64_t v81 = "leaderboardTopPercentageBanner";
LABEL_16:
        unint64_t v79 = (unint64_t)(v81 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    uint64_t v82 = (uint64_t)v121;
    sub_100092B70(v47, v116, 0, 0, 1, v80, v79, 0x636974617473, 0xE600000000000000, v113, v115);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v83 = v144;
    sub_100017388(v144, &qword_1001402E0);
    v77(v82, 0, 1, v76);
    sub_100024A74(v82, v83, &qword_1001402E0);
  }
  *(void *)&long long v145 = 0;
  *((void *)&v145 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  uint64_t v84 = v129;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&long long v145 = v128;
  *((void *)&v145 + 1) = v84;
  v85._object = (void *)0x80000001000FC540;
  v85._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v85);
  long long v158 = v145;
  AnyHashable.init<A>(_:)();
  uint64_t v86 = v78[21];
  uint64_t v135 = v78[20];
  uint64_t v88 = v78[22];
  uint64_t v87 = v78[23];
  uint64_t v89 = v137;
  sub_10002494C(v130, v137, type metadata accessor for AccessPointIconType);
  uint64_t v90 = type metadata accessor for AccessPointIconType(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 0, 1, v90);
  sub_1000170C8(v131, v138, &qword_100140B38);
  uint64_t v91 = v127;
  sub_1000170C8((uint64_t)v143, v127, &qword_100140B50);
  char v92 = v123;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v124 + 48))(v91, 1, v123) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100017388(v91, &qword_100140B50);
    long long v158 = 0u;
    long long v159 = 0u;
    uint64_t v160 = 0;
  }
  else
  {
    *((void *)&v159 + 1) = v92;
    uint64_t v160 = sub_10002489C(&qword_100140B58, (void (*)(uint64_t))type metadata accessor for LaunchDashboardAction);
    char v93 = sub_1000082EC((uint64_t *)&v158);
    sub_1000248E4(v91, (uint64_t)v93, (uint64_t (*)(void))type metadata accessor for LaunchDashboardAction);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v94 = (uint64_t *)v132;
  uint64_t v95 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v140, 1, 1, v95);
  sub_1000170C8(v144, v139, &qword_1001402E0);
  sub_1000170C8(v126, (uint64_t)v94, &qword_100140B48);
  if (v125(v94, 1, v136) == 1)
  {
    sub_100017388((uint64_t)v94, &qword_100140B48);
    uint64_t v96 = 0;
    uint64_t v97 = 0;
  }
  else
  {
    uint64_t v96 = *v94;
    uint64_t v97 = v94[1];
    swift_bridgeObjectRetain();
    sub_10002483C((uint64_t)v94, (uint64_t (*)(void))type metadata accessor for Game);
  }
  uint64_t v99 = v78[26];
  uint64_t v98 = v78[27];
  long long v100 = v146;
  *(_OWORD *)a7 = v145;
  *(_OWORD *)(a7 + 16) = v100;
  uint64_t v101 = v135;
  *(void *)(a7 + 32) = v147;
  *(void *)(a7 + 40) = v101;
  *(void *)(a7 + 48) = v86;
  *(void *)(a7 + 56) = v88;
  *(void *)(a7 + 64) = v87;
  long long v102 = (int *)type metadata accessor for AccessPointHighlight(0);
  sub_100024A74(v137, a7 + v102[7], &qword_100140B38);
  sub_100024A74(v138, a7 + v102[8], &qword_100140B38);
  uint64_t v103 = a7 + v102[9];
  *(void *)uint64_t v103 = 0x4008000000000000;
  *(unsigned char *)(v103 + 8) = 0;
  *(unsigned char *)(a7 + v102[10]) = 0;
  *(unsigned char *)(a7 + v102[11]) = 1;
  *(unsigned char *)(a7 + v102[12]) = 2;
  uint64_t v104 = a7 + v102[13];
  uint64_t v157 = 0;
  long long v155 = 0u;
  long long v156 = 0u;
  swift_bridgeObjectRetain();
  sub_1000158AC((uint64_t)&v158, (uint64_t)&v155);
  long long v105 = v156;
  *(_OWORD *)uint64_t v104 = v155;
  *(_OWORD *)(v104 + 16) = v105;
  *(void *)(v104 + 32) = v157;
  sub_100017388((uint64_t)&v158, &qword_1001401E8);
  sub_100024A74(v140, a7 + v102[14], &qword_100140B40);
  sub_100024A74(v139, a7 + v102[15], &qword_1001402E0);
  long long v106 = (void *)(a7 + v102[16]);
  *long long v106 = v96;
  v106[1] = v97;
  *(void *)(a7 + v102[17]) = 1;
  uint64_t v107 = (void *)(a7 + v102[18]);
  *uint64_t v107 = v99;
  v107[1] = v98;
  sub_100017388(v144, &qword_1001402E0);
  return sub_100017388((uint64_t)v143, &qword_100140B50);
}

uint64_t sub_100024310(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000243C4;
  return sub_1000215B0(a1, a2, v8, v7, v6);
}

uint64_t sub_1000243C4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000244B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000244CC(a1, a2);
  }
  return a1;
}

uint64_t sub_1000244CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100024524(void *a1)
{
  uint64_t v2 = self;
  id v3 = [a1 internal];
  id v15 = 0;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v15];

  id v5 = v15;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v7 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007D4C(v8, (uint64_t)qword_100156CF8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      uint64_t v13 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Player could not be serialized: %@", v11, 0xCu);
      sub_100005B18(&qword_100142A40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1000247B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000247CC(a1, a2);
  }
  return a1;
}

uint64_t sub_1000247CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100024824(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10002483C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002489C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000248E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002494C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000249B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000196DC(v2, v3);
  return a1;
}

uint64_t sub_100024A74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005B18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *destroy for MultiplayerView(void *result)
{
  if (*result) {
    return (void *)swift_release();
  }
  return result;
}

void *_s13GameOverlayUI15MultiplayerViewVwCP_0(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for MultiplayerView(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for MultiplayerView(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiplayerView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiplayerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultiplayerView()
{
  return &type metadata for MultiplayerView;
}

uint64_t sub_100024CD8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100024CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = a3;
  uint64_t v53 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v53);
  long long v52 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100140BB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_100140BB8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100005B18(&qword_100140BC0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100005B18(&qword_100140BC8);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v51 = (uint64_t)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  sub_100005B18(&qword_100140BD0);
  sub_10001758C(&qword_100140BD8, &qword_100140BD0);
  Button.init(action:label:)();
  uint64_t v21 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  uint64_t v23 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  *uint64_t v23 = KeyPath;
  v23[1] = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  LOBYTE(v9) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_1000170C8((uint64_t)v13, (uint64_t)v17, &qword_100140BB8);
  uint64_t v32 = &v17[*(int *)(v15 + 44)];
  *uint64_t v32 = (char)v9;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_100017388((uint64_t)v13, &qword_100140BB8);
  id v33 = [self labelColor];
  id v34 = [v33 colorWithAlphaComponent:0.08];

  uint64_t v35 = Color.init(_:)();
  LOBYTE(v21) = static Edge.Set.all.getter();
  uint64_t v36 = v51;
  sub_1000170C8((uint64_t)v17, v51, &qword_100140BC0);
  uint64_t v37 = v36 + *(int *)(v19 + 44);
  *(void *)uint64_t v37 = v35;
  *(unsigned char *)(v37 + 8) = v21;
  sub_100017388((uint64_t)v17, &qword_100140BC0);
  uint64_t v38 = v52;
  uint64_t v39 = &v52[*(int *)(v53 + 28)];
  uint64_t v40 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v41 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104))(v39, v40, v41);
  __asm { FMOV            V0.2D, #20.0 }
  *uint64_t v38 = _Q0;
  uint64_t v47 = sub_100005B18(&qword_100140B88);
  uint64_t v48 = v54;
  uint64_t v49 = v54 + *(int *)(v47 + 36);
  sub_100025E74((uint64_t)v38, v49);
  *(_WORD *)(v49 + *(int *)(sub_100005B18(&qword_100140BE0) + 36)) = 256;
  sub_1000170C8(v36, v48, &qword_100140BC8);
  sub_100025ED8((uint64_t)v38);
  return sub_100017388(v36, &qword_100140BC8);
}

__n128 sub_100025190@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_10002520C((uint64_t)&v8);
  char v3 = v9;
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  char v6 = v12;
  __n128 result = v8;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  return result;
}

uint64_t sub_10002520C@<X0>(uint64_t a1@<X8>)
{
  sub_100025F34();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title2.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  swift_release();
  sub_100025F88(v2, v4, v6);
  swift_bridgeObjectRelease();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  sub_100025F98(v7, v9, v11 & 1);
  swift_bridgeObjectRetain();
  sub_100025F88(v7, v9, v11 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100025324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v5 = type metadata accessor for Material();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_100140B60);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100005B18(&qword_100140B68);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)char v11 = static HorizontalAlignment.center.getter();
  *((void *)v11 + 1) = 0;
  unsigned char v11[16] = 1;
  uint64_t v16 = sub_100005B18(&qword_100140B70);
  sub_10002558C(a1, a2, (uint64_t)&v11[*(int *)(v16 + 44)]);
  LOBYTE(a2) = static Edge.Set.all.getter();
  sub_1000170C8((uint64_t)v11, (uint64_t)v15, &qword_100140B60);
  uint64_t v17 = &v15[*(int *)(v13 + 44)];
  *uint64_t v17 = a2;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  v17[40] = 1;
  sub_100017388((uint64_t)v11, &qword_100140B60);
  static Material.regular.getter();
  LOBYTE(a2) = static Edge.Set.all.getter();
  uint64_t v18 = sub_100005B18(&qword_100140B78);
  uint64_t v19 = v23;
  uint64_t v20 = v23 + *(int *)(v18 + 36);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v20, v8, v5);
  *(unsigned char *)(v20 + *(int *)(sub_100005B18(&qword_100140B80) + 36)) = a2;
  sub_1000170C8((uint64_t)v15, v19, &qword_100140B68);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_100017388((uint64_t)v15, &qword_100140B68);
}

uint64_t sub_10002558C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100005B18(&qword_100140B88);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v56 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v55 = (uint64_t)&v52 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v54 = (uint64_t)&v52 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v53 = (uint64_t)&v52 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v52 = (uint64_t)&v52 - v16;
  __chkstk_darwin(v15);
  uint64_t v57 = (uint64_t)&v52 - v17;
  uint64_t v18 = sub_100005B18(&qword_100140B90);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100005B18(&qword_100140B98);
  uint64_t v22 = v21 - 8;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v52 - v26;
  *(void *)uint64_t v20 = static VerticalAlignment.center.getter();
  *((void *)v20 + 1) = 0x4030000000000000;
  v20[16] = 0;
  uint64_t v28 = sub_100005B18(&qword_100140BA0);
  sub_100025A08(a1, a2, (uint64_t)&v20[*(int *)(v28 + 44)]);
  char v29 = static Edge.Set.bottom.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_1000170C8((uint64_t)v20, (uint64_t)v25, &qword_100140B90);
  uint64_t v38 = &v25[*(int *)(v22 + 44)];
  *uint64_t v38 = v29;
  *((void *)v38 + 1) = v31;
  *((void *)v38 + 2) = v33;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v37;
  v38[40] = 0;
  sub_100017388((uint64_t)v20, &qword_100140B90);
  sub_100024A74((uint64_t)v25, (uint64_t)v27, &qword_100140B98);
  uint64_t v39 = v57;
  sub_100024CF4(0x616C506572616853, 0xE900000000000079, v57);
  uint64_t v40 = v52;
  sub_100024CF4(0x5020657469766E49, 0xEE0073726579616CLL, v52);
  uint64_t v41 = v53;
  sub_100024CF4(0x614D206B63697551, 0xEB00000000686374, v53);
  sub_1000170C8((uint64_t)v27, (uint64_t)v25, &qword_100140B98);
  uint64_t v42 = v54;
  sub_1000170C8(v39, v54, &qword_100140B88);
  uint64_t v43 = v40;
  uint64_t v44 = v40;
  uint64_t v45 = v55;
  sub_1000170C8(v43, v55, &qword_100140B88);
  uint64_t v46 = v41;
  uint64_t v47 = v41;
  uint64_t v48 = v56;
  sub_1000170C8(v46, v56, &qword_100140B88);
  sub_1000170C8((uint64_t)v25, a3, &qword_100140B98);
  uint64_t v49 = (int *)sub_100005B18(&qword_100140BA8);
  sub_1000170C8(v42, a3 + v49[12], &qword_100140B88);
  sub_1000170C8(v45, a3 + v49[16], &qword_100140B88);
  sub_1000170C8(v48, a3 + v49[20], &qword_100140B88);
  uint64_t v50 = a3 + v49[24];
  *(void *)uint64_t v50 = 0;
  *(unsigned char *)(v50 + 8) = 1;
  sub_100017388(v47, &qword_100140B88);
  sub_100017388(v44, &qword_100140B88);
  sub_100017388(v57, &qword_100140B88);
  sub_100017388((uint64_t)v27, &qword_100140B98);
  sub_100017388(v48, &qword_100140B88);
  sub_100017388(v45, &qword_100140B88);
  sub_100017388(v42, &qword_100140B88);
  return sub_100017388((uint64_t)v25, &qword_100140B98);
}

uint64_t sub_100025A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v5 = sub_100005B18(&qword_100140BE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_100140BF0);
  uint64_t v10 = v9 - 8;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t)&v37 - v14;
  uint64_t v38 = (uint64_t)&v37 - v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  sub_100026018(a1);
  sub_100005B18(&qword_100140BF8);
  sub_100026028();
  Button.init(action:label:)();
  uint64_t v17 = static Color.primary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v8, v5);
  uint64_t v19 = (uint64_t *)&v13[*(int *)(v10 + 44)];
  *uint64_t v19 = KeyPath;
  v19[1] = v17;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100024A74((uint64_t)v13, v15, &qword_100140BF0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  LOBYTE(v6) = v23 & 1;
  static Font.title.getter();
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  LOBYTE(v15) = v27;
  uint64_t v29 = v28;
  swift_release();
  char v30 = v15 & 1;
  sub_100025F88(v20, v22, v6);
  swift_bridgeObjectRelease();
  uint64_t v31 = v38;
  sub_1000170C8(v38, (uint64_t)v13, &qword_100140BF0);
  uint64_t v32 = v39;
  sub_1000170C8((uint64_t)v13, v39, &qword_100140BF0);
  uint64_t v33 = sub_100005B18(&qword_100140C18);
  uint64_t v34 = v32 + *(int *)(v33 + 48);
  *(void *)uint64_t v34 = v24;
  *(void *)(v34 + 8) = v26;
  *(unsigned char *)(v34 + 16) = v30;
  *(void *)(v34 + 24) = v29;
  uint64_t v35 = v32 + *(int *)(v33 + 64);
  *(void *)uint64_t v35 = 0;
  *(unsigned char *)(v35 + 8) = 1;
  sub_100025F98(v24, v26, v30);
  swift_bridgeObjectRetain();
  sub_100017388(v31, &qword_100140BF0);
  sub_100025F88(v24, v26, v30);
  swift_bridgeObjectRelease();
  return sub_100017388((uint64_t)v13, &qword_100140BF0);
}

uint64_t sub_100025D84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  uint64_t v3 = static Font.largeTitle.getter();
  uint64_t result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_100025DF0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100025E0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100025324(*v1, v1[1], a1);
}

double sub_100025E14@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_100025190(a1).n128_u64[0];
  return result;
}

uint64_t sub_100025E1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100025E48()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_100025E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025ED8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100025F34()
{
  unint64_t result = qword_1001455B0;
  if (!qword_1001455B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001455B0);
  }
  return result;
}

uint64_t sub_100025F88(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100025F98(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100025FA8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100025FE8()
{
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_100026018(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_100026028()
{
  unint64_t result = qword_100140C00;
  if (!qword_100140C00)
  {
    sub_10000B448(&qword_100140BF8);
    sub_10001758C(&qword_100140C08, &qword_100140C10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140C00);
  }
  return result;
}

uint64_t sub_1000260C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000260F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100026120()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_10002614C()
{
  return EnvironmentValues.font.setter();
}

unint64_t sub_10002617C()
{
  unint64_t result = qword_100140C20;
  if (!qword_100140C20)
  {
    sub_10000B448(&qword_100140B78);
    sub_10002621C();
    sub_10001758C(&qword_100140C38, &qword_100140B80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140C20);
  }
  return result;
}

unint64_t sub_10002621C()
{
  unint64_t result = qword_100140C28;
  if (!qword_100140C28)
  {
    sub_10000B448(&qword_100140B68);
    sub_10001758C(&qword_100140C30, &qword_100140B60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140C28);
  }
  return result;
}

void *sub_1000262BC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    char v7 = *((unsigned char *)a2 + 16);
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    *(void *)(a1 + 80) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    *(void *)(a1 + 96) = a2[12];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(void *)(a1 + 120) = a2[15];
    *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
    uint64_t v9 = a3[14];
    uint64_t v60 = a1 + v9;
    uint64_t v58 = (uint64_t)a2 + v9;
    *(void *)(a1 + 136) = a2[17];
    uint64_t v10 = type metadata accessor for AccessPointAnchoring();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = a3;
    swift_retain();
    swift_retain();
    swift_retain();
    v11(v60, v58, v10);
    uint64_t v13 = (void (*)(char *, uint64_t, uint64_t))v11;
    uint64_t v14 = sub_100005B18(&qword_100140C40);
    *(void *)(v60 + *(int *)(v14 + 28)) = *(void *)(v58 + *(int *)(v14 + 28));
    uint64_t v15 = a3[15];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    swift_retain();
    v13(v16, v17, v10);
    *(void *)&v16[*(int *)(v14 + 28)] = *(void *)(v17 + *(int *)(v14 + 28));
    uint64_t v18 = a3[16];
    uint64_t v19 = (void *)((char *)v4 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = (int *)type metadata accessor for Game();
    uint64_t v22 = *((void *)v21 - 1);
    char v23 = *(unsigned int (**)(void *, uint64_t, int *))(v22 + 48);
    swift_retain();
    if (v23(v20, 1, v21))
    {
      uint64_t v24 = sub_100005B18(&qword_100140B48);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      uint64_t v59 = v22;
      uint64_t v26 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v26;
      uint64_t v27 = v20[3];
      _OWORD v19[2] = v20[2];
      v19[3] = v27;
      uint64_t v28 = v20[5];
      v19[4] = v20[4];
      v19[5] = v28;
      uint64_t v29 = v21[7];
      __dst = (char *)v19 + v29;
      long long v62 = (char *)v20 + v29;
      uint64_t v30 = type metadata accessor for Date();
      uint64_t v56 = *(void *)(v30 - 8);
      long long v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61(v62, 1, v30))
      {
        uint64_t v31 = sub_100005B18(&qword_100140C48);
        memcpy(__dst, v62, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(__dst, v62, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(__dst, 0, 1, v30);
      }
      *(void *)((char *)v19 + v21[8]) = *(void *)((char *)v20 + v21[8]);
      *((unsigned char *)v19 + v21[9]) = *((unsigned char *)v20 + v21[9]);
      *((unsigned char *)v19 + v21[10]) = *((unsigned char *)v20 + v21[10]);
      *((unsigned char *)v19 + v21[11]) = *((unsigned char *)v20 + v21[11]);
      *((unsigned char *)v19 + v21[12]) = *((unsigned char *)v20 + v21[12]);
      *((unsigned char *)v19 + v21[13]) = *((unsigned char *)v20 + v21[13]);
      *((unsigned char *)v19 + v21[14]) = *((unsigned char *)v20 + v21[14]);
      uint64_t v32 = v21[15];
      uint64_t v33 = (void *)((char *)v19 + v32);
      uint64_t v34 = (void *)((char *)v20 + v32);
      uint64_t v35 = v34[1];
      void *v33 = *v34;
      v33[1] = v35;
      uint64_t v36 = *(void (**)(void *, void, uint64_t, int *))(v59 + 56);
      swift_bridgeObjectRetain();
      v36(v19, 0, 1, v21);
      uint64_t v12 = a3;
    }
    uint64_t v37 = v12[17];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = (uint64_t)a2 + v37;
    uint64_t v40 = type metadata accessor for PageID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
    uint64_t v41 = (int *)type metadata accessor for AccessPointContainer(0);
    uint64_t v42 = v41[5];
    uint64_t v43 = &v38[v42];
    uint64_t v44 = v39 + v42;
    uint64_t v45 = type metadata accessor for PageMetrics();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
    v38[v41[6]] = *(unsigned char *)(v39 + v41[6]);
    *(void *)&v38[v41[7]] = *(void *)(v39 + v41[7]);
    uint64_t v46 = v12[19];
    *(void *)((char *)v4 + v12[18]) = *(uint64_t *)((char *)a2 + v12[18]);
    *(void *)((char *)v4 + v46) = *(uint64_t *)((char *)a2 + v46);
    uint64_t v47 = v12[20];
    uint64_t v48 = (void *)((char *)v4 + v47);
    uint64_t v49 = (uint64_t)a2 + v47;
    uint64_t v50 = *(uint64_t *)((char *)a2 + v47 + 8);
    *uint64_t v48 = *(uint64_t *)((char *)a2 + v47);
    v48[1] = v50;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v51 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
    uint64_t v52 = (char *)v48 + v51;
    uint64_t v53 = v49 + v51;
    uint64_t v54 = sub_100005B18(&qword_100140C58);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
  }
  return v4;
}

uint64_t sub_100026874(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + a2[14];
  uint64_t v5 = type metadata accessor for AccessPointAnchoring();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  sub_100005B18(&qword_100140C40);
  swift_release();
  v6(a1 + a2[15], v5);
  swift_release();
  uint64_t v7 = a1 + a2[16];
  uint64_t v8 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v7 + *(int *)(v8 + 28);
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = a1 + a2[17];
  uint64_t v13 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = v12 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v15 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v16 = a1 + a2[20];
  swift_release();
  swift_release();
  uint64_t v17 = v16 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v18 = sub_100005B18(&qword_100140C58);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);

  return v19(v17, v18);
}

uint64_t sub_100026B84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v8 = a3[14];
  __dsta = (char *)(a1 + v8);
  uint64_t v56 = a2 + v8;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v9 = type metadata accessor for AccessPointAnchoring();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v10(__dsta, v56, v9);
  uint64_t v12 = (void (*)(uint64_t, uint64_t, uint64_t))v10;
  uint64_t v13 = sub_100005B18(&qword_100140C40);
  *(void *)&__dsta[*(int *)(v13 + 28)] = *(void *)(v56 + *(int *)(v13 + 28));
  uint64_t v14 = a3[15];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  swift_retain();
  v12(v15, v16, v9);
  *(void *)(v15 + *(int *)(v13 + 28)) = *(void *)(v16 + *(int *)(v13 + 28));
  uint64_t v17 = a3[16];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for Game();
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = *(unsigned int (**)(void *, uint64_t, int *))(v21 + 48);
  swift_retain();
  if (v22(v19, 1, v20))
  {
    uint64_t v23 = sub_100005B18(&qword_100140B48);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v60 = v21;
    uint64_t v24 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v24;
    uint64_t v25 = v19[3];
    v18[2] = v19[2];
    v18[3] = v25;
    uint64_t v26 = v19[5];
    v18[4] = v19[4];
    v18[5] = v26;
    uint64_t v27 = v20[7];
    uint64_t v57 = (char *)v19 + v27;
    __dst = (char *)v18 + v27;
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v54 = *(void *)(v28 - 8);
    uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v55(v57, 1, v28))
    {
      uint64_t v29 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v57, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v57, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v28);
    }
    *(void *)((char *)v18 + v20[8]) = *(void *)((char *)v19 + v20[8]);
    *((unsigned char *)v18 + v20[9]) = *((unsigned char *)v19 + v20[9]);
    *((unsigned char *)v18 + v20[10]) = *((unsigned char *)v19 + v20[10]);
    *((unsigned char *)v18 + v20[11]) = *((unsigned char *)v19 + v20[11]);
    *((unsigned char *)v18 + v20[12]) = *((unsigned char *)v19 + v20[12]);
    *((unsigned char *)v18 + v20[13]) = *((unsigned char *)v19 + v20[13]);
    *((unsigned char *)v18 + v20[14]) = *((unsigned char *)v19 + v20[14]);
    uint64_t v30 = v20[15];
    uint64_t v31 = (void *)((char *)v18 + v30);
    uint64_t v32 = (void *)((char *)v19 + v30);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = *(void (**)(void *, void, uint64_t, int *))(v60 + 56);
    swift_bridgeObjectRetain();
    v34(v18, 0, 1, v20);
    uint64_t v11 = a3;
  }
  uint64_t v35 = v11[17];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
  uint64_t v39 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v40 = v39[5];
  uint64_t v41 = v36 + v40;
  uint64_t v42 = v37 + v40;
  uint64_t v43 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
  *(unsigned char *)(v36 + v39[6]) = *(unsigned char *)(v37 + v39[6]);
  *(void *)(v36 + v39[7]) = *(void *)(v37 + v39[7]);
  uint64_t v44 = v11[19];
  *(void *)(a1 + v11[18]) = *(void *)(a2 + v11[18]);
  *(void *)(a1 + v44) = *(void *)(a2 + v44);
  uint64_t v45 = v11[20];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = a2 + v45;
  uint64_t v48 = *(void *)(a2 + v45 + 8);
  *uint64_t v46 = *(void *)(a2 + v45);
  v46[1] = v48;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v49 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v50 = (char *)v46 + v49;
  uint64_t v51 = v47 + v49;
  uint64_t v52 = sub_100005B18(&qword_100140C58);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  return a1;
}

uint64_t sub_1000270E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  uint64_t v7 = a3[14];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for AccessPointAnchoring();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  uint64_t v12 = sub_100005B18(&qword_100140C40);
  *(void *)(v8 + *(int *)(v12 + 28)) = *(void *)(v9 + *(int *)(v12 + 28));
  swift_retain();
  swift_release();
  uint64_t v13 = a3[15];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  v11(a1 + v13, a2 + v13, v10);
  *(void *)(v14 + *(int *)(v12 + 28)) = *(void *)(v15 + *(int *)(v12 + 28));
  swift_retain();
  swift_release();
  uint64_t v16 = a3[16];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = (int *)type metadata accessor for Game();
  uint64_t v20 = *((void *)v19 - 1);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, int *))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v12)
  {
    if (v22)
    {
      sub_100036180((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_7;
    }
    uint64_t v67 = a3;
    *uint64_t v17 = *v18;
    v17[1] = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v17[2] = v18[2];
    v17[3] = v18[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v17[4] = v18[4];
    v17[5] = v18[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v28 = v19[7];
    uint64_t v29 = (char *)v17 + v28;
    uint64_t v30 = (char *)v18 + v28;
    uint64_t v31 = type metadata accessor for Date();
    uint64_t v62 = *(void *)(v31 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
    __dsta = v29;
    LODWORD(v29) = v32(v29, 1, v31);
    int v33 = v32(v30, 1, v31);
    if (v29)
    {
      if (!v33)
      {
        (*(void (**)(void *, char *, uint64_t))(v62 + 16))(__dsta, v30, v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(__dsta, 0, 1, v31);
        goto LABEL_18;
      }
      size_t v34 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v35 = __dsta;
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(void *, char *, uint64_t))(v62 + 24))(__dsta, v30, v31);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v62 + 8))(__dsta, v31);
      size_t v34 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v35 = __dsta;
    }
    memcpy(v35, v30, v34);
LABEL_18:
    a3 = v67;
    *(void *)((char *)v17 + v19[8]) = *(void *)((char *)v18 + v19[8]);
    *((unsigned char *)v17 + v19[9]) = *((unsigned char *)v18 + v19[9]);
    *((unsigned char *)v17 + v19[10]) = *((unsigned char *)v18 + v19[10]);
    *((unsigned char *)v17 + v19[11]) = *((unsigned char *)v18 + v19[11]);
    *((unsigned char *)v17 + v19[12]) = *((unsigned char *)v18 + v19[12]);
    *((unsigned char *)v17 + v19[13]) = *((unsigned char *)v18 + v19[13]);
    *((unsigned char *)v17 + v19[14]) = *((unsigned char *)v18 + v19[14]);
    uint64_t v40 = v19[15];
    uint64_t v41 = (void *)((char *)v17 + v40);
    uint64_t v42 = (void *)((char *)v18 + v40);
    *uint64_t v41 = *v42;
    v41[1] = v42[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v22)
  {
LABEL_7:
    uint64_t v27 = sub_100005B18(&qword_100140B48);
    memcpy(v17, v18, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v66 = a3;
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  v17[3] = v18[3];
  v17[4] = v18[4];
  v17[5] = v18[5];
  uint64_t v23 = v19[7];
  __src = (char *)v18 + v23;
  __dst = (char *)v17 + v23;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v24 - 8);
  long long v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v61(__src, 1, v25))
  {
    uint64_t v26 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, __src, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(__dst, __src, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(__dst, 0, 1, v25);
  }
  a3 = v66;
  *(void *)((char *)v17 + v19[8]) = *(void *)((char *)v18 + v19[8]);
  *((unsigned char *)v17 + v19[9]) = *((unsigned char *)v18 + v19[9]);
  *((unsigned char *)v17 + v19[10]) = *((unsigned char *)v18 + v19[10]);
  *((unsigned char *)v17 + v19[11]) = *((unsigned char *)v18 + v19[11]);
  *((unsigned char *)v17 + v19[12]) = *((unsigned char *)v18 + v19[12]);
  *((unsigned char *)v17 + v19[13]) = *((unsigned char *)v18 + v19[13]);
  *((unsigned char *)v17 + v19[14]) = *((unsigned char *)v18 + v19[14]);
  uint64_t v36 = v19[15];
  uint64_t v37 = (void *)((char *)v17 + v36);
  uint64_t v38 = (void *)((char *)v18 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  uint64_t v39 = *(void (**)(void *, void, uint64_t, int *))(v20 + 56);
  swift_bridgeObjectRetain();
  v39(v17, 0, 1, v19);
LABEL_19:
  uint64_t v43 = a3[17];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  uint64_t v46 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 24))(v44, v45, v46);
  uint64_t v47 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v48 = v47[5];
  uint64_t v49 = v44 + v48;
  uint64_t v50 = v45 + v48;
  uint64_t v51 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 24))(v49, v50, v51);
  *(unsigned char *)(v44 + v47[6]) = *(unsigned char *)(v45 + v47[6]);
  *(void *)(v44 + v47[7]) = *(void *)(v45 + v47[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_retain();
  swift_release();
  uint64_t v52 = a3[20];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  *(void *)(a1 + v52) = *(void *)(a2 + v52);
  swift_retain();
  swift_release();
  *(void *)(v53 + 8) = *(void *)(v54 + 8);
  swift_retain();
  swift_release();
  uint64_t v55 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v56 = v53 + v55;
  uint64_t v57 = v54 + v55;
  uint64_t v58 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 24))(v56, v57, v58);
  return a1;
}

uint64_t sub_100027984(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  uint64_t v8 = a3[14];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  uint64_t v11 = type metadata accessor for AccessPointAnchoring();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = sub_100005B18(&qword_100140C40);
  *(void *)(v9 + *(int *)(v13 + 28)) = *(void *)(v10 + *(int *)(v13 + 28));
  uint64_t v14 = a3[15];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v12(a1 + v14, a2 + v14, v11);
  *(void *)(v15 + *(int *)(v13 + 28)) = *(void *)(v16 + *(int *)(v13 + 28));
  uint64_t v17 = a3[16];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for Game();
  uint64_t v21 = *((void *)v20 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_100005B18(&qword_100140B48);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v23 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v23;
    v18[2] = v19[2];
    uint64_t v24 = v20[7];
    __dst = (char *)v18 + v24;
    uint64_t v25 = (char *)v19 + v24;
    uint64_t v26 = type metadata accessor for Date();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(__dst, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    *(void *)((char *)v18 + v20[8]) = *(void *)((char *)v19 + v20[8]);
    *((unsigned char *)v18 + v20[9]) = *((unsigned char *)v19 + v20[9]);
    *((unsigned char *)v18 + v20[10]) = *((unsigned char *)v19 + v20[10]);
    *((unsigned char *)v18 + v20[11]) = *((unsigned char *)v19 + v20[11]);
    *((unsigned char *)v18 + v20[12]) = *((unsigned char *)v19 + v20[12]);
    *((unsigned char *)v18 + v20[13]) = *((unsigned char *)v19 + v20[13]);
    *((unsigned char *)v18 + v20[14]) = *((unsigned char *)v19 + v20[14]);
    *(_OWORD *)((char *)v18 + v20[15]) = *(_OWORD *)((char *)v19 + v20[15]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v29 = a3[17];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  int v33 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v34 = v33[5];
  uint64_t v35 = v30 + v34;
  uint64_t v36 = v31 + v34;
  uint64_t v37 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  *(unsigned char *)(v30 + v33[6]) = *(unsigned char *)(v31 + v33[6]);
  *(void *)(v30 + v33[7]) = *(void *)(v31 + v33[7]);
  uint64_t v38 = a3[19];
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  uint64_t v39 = a3[20];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)(a2 + v39 + 8);
  *uint64_t v40 = *(void *)(a2 + v39);
  v40[1] = v42;
  uint64_t v43 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v44 = (char *)v40 + v43;
  uint64_t v45 = v41 + v43;
  uint64_t v46 = sub_100005B18(&qword_100140C58);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
  return a1;
}

uint64_t sub_100027DF8(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  uint64_t v8 = a3[14];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for AccessPointAnchoring();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  uint64_t v13 = sub_100005B18(&qword_100140C40);
  *(void *)(v9 + *(int *)(v13 + 28)) = *(void *)(v10 + *(int *)(v13 + 28));
  swift_release();
  uint64_t v14 = a3[15];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  v12(a1 + v14, a2 + v14, v11);
  *(void *)(v15 + *(int *)(v13 + 28)) = *(void *)(v16 + *(int *)(v13 + 28));
  swift_release();
  uint64_t v17 = a3[16];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = (int *)type metadata accessor for Game();
  uint64_t v21 = *((void *)v20 - 1);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, int *))(v21 + 48);
  LODWORD(v13) = v22(v18, 1, v20);
  int v23 = v22(v19, 1, v20);
  if (!v13)
  {
    if (v23)
    {
      sub_100036180((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_7;
    }
    uint64_t v31 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v31;
    swift_bridgeObjectRelease();
    uint64_t v32 = v19[3];
    v18[2] = v19[2];
    v18[3] = v32;
    swift_bridgeObjectRelease();
    uint64_t v33 = v19[5];
    v18[4] = v19[4];
    v18[5] = v33;
    swift_bridgeObjectRelease();
    uint64_t v34 = v20[7];
    uint64_t v35 = (char *)v18 + v34;
    __dsta = (char *)v19 + v34;
    uint64_t v36 = type metadata accessor for Date();
    uint64_t v63 = *(void *)(v36 - 8);
    long long v64 = v35;
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
    LODWORD(v35) = v37(v35, 1, v36);
    int v38 = v37(__dsta, 1, v36);
    if (v35)
    {
      if (!v38)
      {
        (*(void (**)(void *, char *, uint64_t))(v63 + 32))(v64, __dsta, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v36);
        goto LABEL_18;
      }
      size_t v39 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v40 = v64;
    }
    else
    {
      if (!v38)
      {
        (*(void (**)(void *, char *, uint64_t))(v63 + 40))(v64, __dsta, v36);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v63 + 8))(v64, v36);
      size_t v39 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v40 = v64;
    }
    memcpy(v40, __dsta, v39);
LABEL_18:
    *(void *)((char *)v18 + v20[8]) = *(void *)((char *)v19 + v20[8]);
    *((unsigned char *)v18 + v20[9]) = *((unsigned char *)v19 + v20[9]);
    *((unsigned char *)v18 + v20[10]) = *((unsigned char *)v19 + v20[10]);
    *((unsigned char *)v18 + v20[11]) = *((unsigned char *)v19 + v20[11]);
    *((unsigned char *)v18 + v20[12]) = *((unsigned char *)v19 + v20[12]);
    *((unsigned char *)v18 + v20[13]) = *((unsigned char *)v19 + v20[13]);
    *((unsigned char *)v18 + v20[14]) = *((unsigned char *)v19 + v20[14]);
    uint64_t v41 = v20[15];
    uint64_t v42 = (void *)((char *)v18 + v41);
    uint64_t v43 = (void *)((char *)v19 + v41);
    uint64_t v45 = *v43;
    uint64_t v44 = v43[1];
    void *v42 = v45;
    v42[1] = v44;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v23)
  {
LABEL_7:
    uint64_t v30 = sub_100005B18(&qword_100140B48);
    memcpy(v18, v19, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  long long v24 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v24;
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  uint64_t v25 = v20[7];
  __dst = (char *)v18 + v25;
  uint64_t v26 = (char *)v19 + v25;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(__dst, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
  }
  *(void *)((char *)v18 + v20[8]) = *(void *)((char *)v19 + v20[8]);
  *((unsigned char *)v18 + v20[9]) = *((unsigned char *)v19 + v20[9]);
  *((unsigned char *)v18 + v20[10]) = *((unsigned char *)v19 + v20[10]);
  *((unsigned char *)v18 + v20[11]) = *((unsigned char *)v19 + v20[11]);
  *((unsigned char *)v18 + v20[12]) = *((unsigned char *)v19 + v20[12]);
  *((unsigned char *)v18 + v20[13]) = *((unsigned char *)v19 + v20[13]);
  *((unsigned char *)v18 + v20[14]) = *((unsigned char *)v19 + v20[14]);
  *(_OWORD *)((char *)v18 + v20[15]) = *(_OWORD *)((char *)v19 + v20[15]);
  (*(void (**)(void *, void, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
LABEL_19:
  uint64_t v46 = a3[17];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  uint64_t v49 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 40))(v47, v48, v49);
  uint64_t v50 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v51 = v50[5];
  uint64_t v52 = v47 + v51;
  uint64_t v53 = v48 + v51;
  uint64_t v54 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 40))(v52, v53, v54);
  *(unsigned char *)(v47 + v50[6]) = *(unsigned char *)(v48 + v50[6]);
  *(void *)(v47 + v50[7]) = *(void *)(v48 + v50[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_release();
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  swift_release();
  uint64_t v55 = a3[20];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  *(void *)(a1 + v55) = *(void *)(a2 + v55);
  swift_release();
  *(void *)(v56 + 8) = *(void *)(v57 + 8);
  swift_release();
  uint64_t v58 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v59 = v56 + v58;
  uint64_t v60 = v57 + v58;
  uint64_t v61 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 40))(v59, v60, v61);
  return a1;
}

uint64_t sub_100028554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100028568);
}

uint64_t sub_100028568(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140C40);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[14];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100005B18(&qword_100140B48);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[16];
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for AccessPointContainer(0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[17];
    goto LABEL_7;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[18]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_100005B18(&qword_100140C50);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[20];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_10002873C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100028750);
}

uint64_t sub_100028750(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100005B18(&qword_100140C40);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[14];
LABEL_7:
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(a1 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_100005B18(&qword_100140B48);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[16];
    goto LABEL_7;
  }
  uint64_t result = type metadata accessor for AccessPointContainer(0);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[17];
    goto LABEL_7;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[18]) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_100005B18(&qword_100140C50);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[20];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

uint64_t type metadata accessor for AccessPointShaderTransitionView(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100140CB8);
}

void sub_100028944()
{
  sub_100028B2C(319, &qword_100140CC8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessPointAnchoring, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v0 <= 0x3F)
  {
    sub_100028B2C(319, (unint64_t *)&qword_100140CD0, (uint64_t (*)(uint64_t))type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F)
    {
      type metadata accessor for AccessPointContainer(319);
      if (v2 <= 0x3F)
      {
        sub_100028B90();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_100028B2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100028B90()
{
  if (!qword_100140CD8)
  {
    sub_10000B448(&qword_100140C58);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100140CD8);
    }
  }
}

uint64_t sub_100028BEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100028C08@<X0>(void *a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = sub_100005B18(&qword_100140BE0);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RoundedRectangle();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  unint64_t v8 = (_OWORD *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = static HorizontalAlignment.center.getter();
  sub_100029010((uint64_t)v35);
  *(_OWORD *)((char *)&v37[12] + 7) = v35[12];
  *(_OWORD *)((char *)&v37[13] + 7) = v35[13];
  *(_OWORD *)((char *)&v37[14] + 7) = v36[0];
  v37[15] = *(_OWORD *)((char *)v36 + 9);
  *(_OWORD *)((char *)&v37[8] + 7) = v35[8];
  *(_OWORD *)((char *)&v37[9] + 7) = v35[9];
  *(_OWORD *)((char *)&v37[10] + 7) = v35[10];
  *(_OWORD *)((char *)&v37[11] + 7) = v35[11];
  *(_OWORD *)((char *)&v37[4] + 7) = v35[4];
  *(_OWORD *)((char *)&v37[5] + 7) = v35[5];
  *(_OWORD *)((char *)&v37[6] + 7) = v35[6];
  *(_OWORD *)((char *)&v37[7] + 7) = v35[7];
  *(_OWORD *)((char *)v37 + 7) = v35[0];
  *(_OWORD *)((char *)&v37[1] + 7) = v35[1];
  *(_OWORD *)((char *)&v37[2] + 7) = v35[2];
  char v38 = 1;
  *(_OWORD *)((char *)&v37[3] + 7) = v35[3];
  int v26 = 1;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v9 = v29;
  uint64_t v10 = v31;
  uint64_t v24 = v34;
  uint64_t v25 = v33;
  char v40 = v30;
  char v39 = v32;
  static Color.white.getter();
  uint64_t v11 = Color.opacity(_:)();
  swift_release();
  char v12 = static Edge.Set.all.getter();
  *(_OWORD *)((char *)&v41[32] + 1) = v37[15];
  *(_OWORD *)((char *)&v41[26] + 1) = v37[12];
  *(_OWORD *)((char *)&v41[28] + 1) = v37[13];
  *(_OWORD *)((char *)&v41[30] + 1) = v37[14];
  *(_OWORD *)((char *)&v41[18] + 1) = v37[8];
  *(_OWORD *)((char *)&v41[20] + 1) = v37[9];
  *(_OWORD *)((char *)&v41[22] + 1) = v37[10];
  *(_OWORD *)((char *)&v41[24] + 1) = v37[11];
  *(_OWORD *)((char *)&v41[10] + 1) = v37[4];
  *(_OWORD *)((char *)&v41[12] + 1) = v37[5];
  *(_OWORD *)((char *)&v41[14] + 1) = v37[6];
  *(_OWORD *)((char *)&v41[16] + 1) = v37[7];
  *(_OWORD *)((char *)&v41[2] + 1) = v37[0];
  *(_OWORD *)((char *)&v41[4] + 1) = v37[1];
  *(_OWORD *)((char *)&v41[6] + 1) = v37[2];
  v41[0] = v27;
  v41[1] = 0;
  LOBYTE(v41[2]) = v26;
  *(_OWORD *)((char *)&v41[8] + 1) = v37[3];
  v41[35] = v9;
  LOBYTE(v41[36]) = v40;
  v41[37] = v10;
  LOBYTE(v41[38]) = v39;
  v41[39] = v25;
  v41[40] = v24;
  v41[41] = v11;
  LOBYTE(v41[42]) = v12;
  uint64_t v13 = (char *)v8 + *(int *)(v6 + 28);
  uint64_t v14 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v15 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  __asm { FMOV            V0.2D, #20.0 }
  *unint64_t v8 = _Q0;
  sub_100036118((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v4[*(int *)(v2 + 44)] = 256;
  uint64_t v21 = sub_100005B18(&qword_1001413A0);
  uint64_t v22 = v28;
  sub_1000170C8((uint64_t)v4, (uint64_t)v28 + *(int *)(v21 + 36), &qword_100140BE0);
  memcpy(v22, v41, 0x151uLL);
  sub_10003E0A8((uint64_t)v41);
  sub_100017388((uint64_t)v4, &qword_100140BE0);
  sub_100036180((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_10003E148((uint64_t)v41);
}

uint64_t sub_100029010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(_:bundle:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v49 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v47 = v52;
  uint64_t v48 = v50;
  int v42 = v53;
  int v43 = v51;
  uint64_t v45 = v55;
  uint64_t v46 = v54;
  int v44 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = static HorizontalAlignment.center.getter();
  sub_100029464((uint64_t)v73);
  uint64_t v40 = *(void *)&v73[8];
  uint64_t v41 = *(void *)v73;
  char v15 = v73[16];
  uint64_t v16 = *(void *)&v73[40];
  uint64_t v38 = *(void *)&v73[32];
  uint64_t v39 = *(void *)&v73[24];
  char v17 = v73[48];
  uint64_t v18 = *(void *)&v73[56];
  char v19 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  *(_DWORD *)Swift::String v85 = *(_DWORD *)v62;
  *(_DWORD *)&v85[3] = *(_DWORD *)&v62[3];
  *(_DWORD *)uint64_t v89 = *(_DWORD *)v60;
  *(_DWORD *)&v89[3] = *(_DWORD *)&v60[3];
  *(_DWORD *)&v94[3] = *(_DWORD *)&v58[3];
  *(_DWORD *)uint64_t v94 = *(_DWORD *)v58;
  *(_DWORD *)&v97[3] = *(_DWORD *)&v57[3];
  *(_DWORD *)uint64_t v97 = *(_DWORD *)v57;
  DWORD1(v65) = *(_DWORD *)&v62[3];
  *(_DWORD *)((char *)&v65 + 1) = *(_DWORD *)v62;
  HIDWORD(v66) = *(_DWORD *)&v60[3];
  char v63 = 1;
  char v61 = v15;
  char v59 = v17;
  char v56 = 0;
  *(_DWORD *)((char *)&v66 + 9) = *(_DWORD *)v60;
  HIDWORD(v68) = *(_DWORD *)&v58[3];
  v64[0] = v14;
  v64[1] = 0;
  LOBYTE(v65) = 1;
  uint64_t v21 = v40;
  uint64_t v20 = v41;
  *((void *)&v65 + 1) = v41;
  *(void *)&long long v66 = v40;
  BYTE8(v66) = v15;
  uint64_t v22 = v38;
  uint64_t v23 = v39;
  *(void *)&long long v67 = v39;
  *((void *)&v67 + 1) = v38;
  *(void *)&long long v68 = v16;
  BYTE8(v68) = v17;
  *(_DWORD *)((char *)&v68 + 9) = *(_DWORD *)v58;
  *(void *)&long long v69 = v18;
  BYTE8(v69) = v19;
  HIDWORD(v69) = *(_DWORD *)&v57[3];
  *(_DWORD *)((char *)&v69 + 9) = *(_DWORD *)v57;
  *(void *)&long long v70 = v24;
  *((void *)&v70 + 1) = v25;
  *(void *)&long long v71 = v26;
  *((void *)&v71 + 1) = v27;
  char v72 = 0;
  char v82 = 1;
  char v79 = v43;
  char v77 = v42;
  char v74 = 0;
  v73[135] = 0;
  *(_OWORD *)&v73[119] = v71;
  *(_OWORD *)&v73[103] = v70;
  *(_OWORD *)&v73[87] = v69;
  *(_OWORD *)&v73[7] = (unint64_t)v14;
  *(_OWORD *)&v73[71] = v68;
  *(_OWORD *)&v73[55] = v67;
  *(_OWORD *)&v73[39] = v66;
  *(_OWORD *)&v73[23] = v65;
  *(_DWORD *)(a1 + 18) = v80;
  *(_WORD *)(a1 + 22) = v81;
  char v28 = v79;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v78;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v78[3];
  char v29 = v77;
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v76;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v76[3];
  *(_DWORD *)(a1 + 73) = *(_DWORD *)v75;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)&v75[3];
  char v30 = v74;
  *(void *)a1 = v49;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 17) = 1;
  *(void *)(a1 + 24) = v48;
  *(unsigned char *)(a1 + 32) = v28;
  *(void *)(a1 + 40) = v47;
  *(unsigned char *)(a1 + 48) = v29;
  uint64_t v31 = v45;
  *(void *)(a1 + 56) = v46;
  *(void *)(a1 + 64) = v31;
  *(unsigned char *)(a1 + 72) = v44;
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = v13;
  *(unsigned char *)(a1 + 112) = v30;
  long long v32 = *(_OWORD *)&v73[64];
  *(_OWORD *)(a1 + 193) = *(_OWORD *)&v73[80];
  long long v33 = *(_OWORD *)&v73[112];
  *(_OWORD *)(a1 + 209) = *(_OWORD *)&v73[96];
  *(_OWORD *)(a1 + 225) = v33;
  *(void *)(a1 + 241) = *(void *)&v73[128];
  long long v34 = *(_OWORD *)v73;
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v73[16];
  long long v35 = *(_OWORD *)&v73[48];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v73[32];
  *(_OWORD *)(a1 + 161) = v35;
  *(_OWORD *)(a1 + 177) = v32;
  *(_OWORD *)(a1 + 113) = v34;
  v83[0] = v14;
  v83[1] = 0;
  char v84 = 1;
  uint64_t v86 = v20;
  uint64_t v87 = v21;
  char v88 = v15;
  uint64_t v90 = v23;
  uint64_t v91 = v22;
  uint64_t v92 = v16;
  char v93 = v17;
  uint64_t v95 = v18;
  char v96 = v19;
  uint64_t v98 = v24;
  uint64_t v99 = v25;
  uint64_t v100 = v26;
  uint64_t v101 = v27;
  char v102 = 0;
  swift_retain();
  sub_10003E1E8((uint64_t)v64);
  sub_10003E25C((uint64_t)v83);
  return swift_release();
}

uint64_t sub_100029464@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.headline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  char v10 = v9;
  uint64_t v27 = v11;
  swift_release();
  sub_100025F88(v2, v4, v6);
  swift_bridgeObjectRelease();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.footnote.getter();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  v21 &= 1u;
  sub_100025F88(v12, v14, v16);
  swift_bridgeObjectRelease();
  *(void *)a1 = v26;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  *(void *)(a1 + 24) = v27;
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = v19;
  *(unsigned char *)(a1 + 48) = v21;
  *(void *)(a1 + 56) = v23;
  sub_100025F98(v26, v25, v10 & 1);
  swift_bridgeObjectRetain();
  sub_100025F98(v17, v19, v21);
  swift_bridgeObjectRetain();
  sub_100025F88(v17, v19, v21);
  swift_bridgeObjectRelease();
  sub_100025F88(v26, v25, v10 & 1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002966C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100005B18(&qword_1001413A0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  char v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v16 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v16 - v12;
  sub_100028C08((char *)&v16 - v12);
  sub_100028C08(v11);
  sub_1000170C8((uint64_t)v13, (uint64_t)v8, &qword_1001413A0);
  sub_1000170C8((uint64_t)v11, (uint64_t)v5, &qword_1001413A0);
  sub_1000170C8((uint64_t)v8, a1, &qword_1001413A0);
  uint64_t v14 = sub_100005B18(&qword_1001413A8);
  sub_1000170C8((uint64_t)v5, a1 + *(int *)(v14 + 48), &qword_1001413A0);
  sub_100017388((uint64_t)v11, &qword_1001413A0);
  sub_100017388((uint64_t)v13, &qword_1001413A0);
  sub_100017388((uint64_t)v5, &qword_1001413A0);
  return sub_100017388((uint64_t)v8, &qword_1001413A0);
}

uint64_t sub_1000297DC@<X0>(uint64_t *a1@<X2>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v8 = sub_100005B18(a1);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v34 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v33 = (uint64_t)&v33 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  char v15 = (char *)&v33 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v33 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v33 - v23;
  *(void *)uint64_t v24 = a2(v22);
  *((void *)v24 + 1) = 0;
  v24[16] = 1;
  uint64_t v25 = sub_100005B18(a3);
  uint64_t v26 = sub_10002966C((uint64_t)&v24[*(int *)(v25 + 44)]);
  *(void *)char v21 = a2(v26);
  *((void *)v21 + 1) = 0;
  v21[16] = 1;
  uint64_t v27 = sub_10002966C((uint64_t)&v21[*(int *)(v25 + 44)]);
  *(void *)uint64_t v18 = a2(v27);
  *((void *)v18 + 1) = 0;
  v18[16] = 1;
  sub_10002966C((uint64_t)&v18[*(int *)(v25 + 44)]);
  sub_1000170C8((uint64_t)v24, (uint64_t)v15, a1);
  uint64_t v28 = v33;
  sub_1000170C8((uint64_t)v21, v33, a1);
  uint64_t v29 = v34;
  sub_1000170C8((uint64_t)v18, v34, a1);
  uint64_t v30 = v35;
  sub_1000170C8((uint64_t)v15, v35, a1);
  uint64_t v31 = sub_100005B18(v36);
  sub_1000170C8(v28, v30 + *(int *)(v31 + 48), a1);
  sub_1000170C8(v29, v30 + *(int *)(v31 + 64), a1);
  sub_100017388((uint64_t)v18, a1);
  sub_100017388((uint64_t)v21, a1);
  sub_100017388((uint64_t)v24, a1);
  sub_100017388(v29, a1);
  sub_100017388(v28, a1);
  return sub_100017388((uint64_t)v15, a1);
}

uint64_t sub_100029A68@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v4 = sub_100005B18(&qword_1001412B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100005B18(&qword_1001412C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_1001412C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100005B18(&qword_1001412D0);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100005B18(&qword_1001412D8);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = static HorizontalAlignment.center.getter();
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  uint64_t v20 = (uint64_t)&v12[*(int *)(sub_100005B18(&qword_1001412E0) + 44)];
  *uint64_t v6 = static Alignment.topTrailing.getter();
  v6[1] = v21;
  uint64_t v22 = sub_100005B18(&qword_1001412E8);
  sub_100029DF8(v33, a2, (uint64_t)v6 + *(int *)(v22 + 44));
  uint64_t v23 = static Alignment.center.getter();
  sub_10002A714(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, INFINITY, 0, v23, v24, &qword_1001412B8, &qword_1001412C0);
  sub_100017388((uint64_t)v6, &qword_1001412B8);
  sub_100024A74((uint64_t)v9, v20, &qword_1001412C0);
  uint64_t v25 = static Alignment.center.getter();
  sub_10002A714(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v25, v26, &qword_1001412C8, &qword_1001412D0);
  sub_100017388((uint64_t)v12, &qword_1001412C8);
  uint64_t v27 = static Color.teal.getter();
  LOBYTE(v6) = static Edge.Set.all.getter();
  sub_1000170C8((uint64_t)v15, (uint64_t)v19, &qword_1001412D0);
  uint64_t v28 = &v19[*(int *)(v17 + 44)];
  *(void *)uint64_t v28 = v27;
  v28[8] = (char)v6;
  sub_100017388((uint64_t)v15, &qword_1001412D0);
  uint64_t v29 = static SafeAreaRegions.all.getter();
  LOBYTE(v6) = static Edge.Set.all.getter();
  uint64_t v30 = v34;
  sub_1000170C8((uint64_t)v19, v34, &qword_1001412D8);
  uint64_t v31 = v30 + *(int *)(sub_100005B18(&qword_1001412F0) + 36);
  *(void *)uint64_t v31 = v29;
  *(unsigned char *)(v31 + 8) = (_BYTE)v6;
  return sub_100017388((uint64_t)v19, &qword_1001412D8);
}

uint64_t sub_100029DF8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v95 = a1;
  uint64_t v94 = a3;
  uint64_t v89 = type metadata accessor for Image.ResizingMode();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v86 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_100005B18(&qword_1001412F8);
  uint64_t v92 = *(void *)(v93 - 8);
  uint64_t v4 = __chkstk_darwin(v93);
  uint64_t v91 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v90 = (char *)&v83 - v6;
  uint64_t v7 = sub_100005B18(&qword_100141300);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_100005B18(&qword_100141308);
  uint64_t v10 = __chkstk_darwin(v85);
  uint64_t v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v83 - v13;
  uint64_t v84 = sub_100005B18(&qword_100141310);
  __chkstk_darwin(v84);
  uint64_t v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100005B18(&qword_100141318);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100005B18(&qword_100141320);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v83 - v24;
  uint64_t v26 = sub_100005B18(&qword_100141328);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v87 = (uint64_t)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v83 - v29;
  GeometryProxy.size.getter();
  double v32 = v31;
  GeometryProxy.size.getter();
  if (v33 >= v32)
  {
    *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
    *((void *)v9 + 1) = 0;
    v9[16] = 1;
    uint64_t v47 = sub_100005B18(&qword_100141330);
    sub_1000297DC(&qword_1001413B0, (uint64_t (*)(uint64_t))&static HorizontalAlignment.center.getter, &qword_1001413B8, &qword_1001413C0, (uint64_t)&v9[*(int *)(v47 + 44)]);
    char v48 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    sub_1000170C8((uint64_t)v9, (uint64_t)v12, &qword_100141300);
    uint64_t v57 = &v12[*(int *)(v85 + 36)];
    *uint64_t v57 = v48;
    *((void *)v57 + 1) = v50;
    *((void *)v57 + 2) = v52;
    *((void *)v57 + 3) = v54;
    *((void *)v57 + 4) = v56;
    v57[40] = 0;
    sub_100017388((uint64_t)v9, &qword_100141300);
    uint64_t v45 = &qword_100141308;
    sub_100024A74((uint64_t)v12, (uint64_t)v14, &qword_100141308);
    sub_1000170C8((uint64_t)v14, (uint64_t)v16, &qword_100141308);
    swift_storeEnumTagMultiPayload();
    sub_10003DEF4();
    sub_10003DF94();
    _ConditionalContent<>.init(storage:)();
    uint64_t v46 = (uint64_t)v14;
  }
  else
  {
    *(void *)uint64_t v19 = static HorizontalAlignment.center.getter();
    *((void *)v19 + 1) = 0;
    v19[16] = 1;
    uint64_t v34 = sub_100005B18(&qword_100141380);
    sub_1000297DC(&qword_100141388, (uint64_t (*)(uint64_t))&static VerticalAlignment.center.getter, &qword_100141390, &qword_100141398, (uint64_t)&v19[*(int *)(v34 + 44)]);
    char v35 = static Edge.Set.top.getter();
    EdgeInsets.init(_all:)();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    sub_1000170C8((uint64_t)v19, (uint64_t)v23, &qword_100141318);
    int v44 = &v23[*(int *)(v20 + 36)];
    char *v44 = v35;
    *((void *)v44 + 1) = v37;
    *((void *)v44 + 2) = v39;
    *((void *)v44 + 3) = v41;
    *((void *)v44 + 4) = v43;
    v44[40] = 0;
    sub_100017388((uint64_t)v19, &qword_100141318);
    uint64_t v45 = &qword_100141320;
    sub_100024A74((uint64_t)v23, (uint64_t)v25, &qword_100141320);
    sub_1000170C8((uint64_t)v25, (uint64_t)v16, &qword_100141320);
    swift_storeEnumTagMultiPayload();
    sub_10003DEF4();
    sub_10003DF94();
    _ConditionalContent<>.init(storage:)();
    uint64_t v46 = (uint64_t)v25;
  }
  sub_100017388(v46, v45);
  Image.init(systemName:)();
  uint64_t v58 = v88;
  char v59 = v86;
  uint64_t v60 = v89;
  (*(void (**)(char *, void, uint64_t))(v88 + 104))(v86, enum case for Image.ResizingMode.stretch(_:), v89);
  uint64_t v61 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v62 = v110;
  LOBYTE(v58) = v111;
  uint64_t v63 = v112;
  char v64 = v113;
  uint64_t v65 = v114;
  uint64_t v66 = v115;
  char v67 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v97 = v61;
  uint64_t v98 = v62;
  char v99 = v58;
  uint64_t v100 = v63;
  char v101 = v64;
  uint64_t v102 = v65;
  uint64_t v103 = v66;
  char v104 = v67;
  uint64_t v105 = v68;
  uint64_t v106 = v69;
  uint64_t v107 = v70;
  uint64_t v108 = v71;
  char v109 = 0;
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = v95;
  *(void *)(v72 + 24) = v96;
  swift_retain();
  sub_100005B18(&qword_100141358);
  sub_10003D754(&qword_100141360, &qword_100141358, (void (*)(void))sub_10003E034);
  long long v73 = v90;
  View.onTapGesture(count:perform:)();
  swift_release();
  swift_release();
  uint64_t v74 = v87;
  sub_1000170C8((uint64_t)v30, v87, &qword_100141328);
  uint64_t v75 = v92;
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  char v77 = v91;
  uint64_t v78 = v93;
  v76(v91, v73, v93);
  uint64_t v79 = v94;
  sub_1000170C8(v74, v94, &qword_100141328);
  uint64_t v80 = sub_100005B18(&qword_100141378);
  v76((char *)(v79 + *(int *)(v80 + 48)), v77, v78);
  __int16 v81 = *(void (**)(char *, uint64_t))(v75 + 8);
  v81(v73, v78);
  sub_100017388((uint64_t)v30, &qword_100141328);
  v81(v77, v78);
  return sub_100017388(v74, &qword_100141328);
}

__n128 sub_10002A714@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_1000170C8(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_100005B18(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *uint64_t v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

uint64_t sub_10002A8E4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(unsigned char *)(a9 + 80) = *(unsigned char *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return sub_100039D64(v13);
}

uint64_t sub_10002AAB8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a16;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v18 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = v18;
  *(void *)(a9 + 8) = a17;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  *(_OWORD *)(a9 + 48) = v31;
  *(_OWORD *)(a9 + 64) = v32;

  return swift_retain();
}

double sub_10002AC78@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10002A714(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100141208, &qword_100141210).n128_u64[0];
  return result;
}

uint64_t sub_10002ACD4@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a1 = sub_10003DEEC;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;

  return swift_retain();
}

double sub_10002AD40()
{
  id v0 = [self mainScreen];
  [v0 bounds];
  double v2 = v1;

  sub_100005B18(&qword_100140E78);
  State.wrappedValue.getter();
  State.wrappedValue.getter();
  return v4 / v2;
}

uint64_t sub_10002AE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v36 = a5;
  uint64_t v34 = a4;
  uint64_t v38 = a2;
  uint64_t v10 = type metadata accessor for AccessPointAnchoring();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100005B18(&qword_100140C40);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a7 = 0;
  type metadata accessor for RemoteAlertAccessPointContext(0);
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  *(void *)(a7 + 8) = Environment.init<A>(_:)();
  *(unsigned char *)(a7 + 16) = v16 & 1;
  *(_OWORD *)(a7 + 24) = xmmword_10010DC60;
  LOBYTE(v39) = 0;
  State.init(wrappedValue:)();
  uint64_t v17 = *((void *)&v41 + 1);
  *(unsigned char *)(a7 + 40) = v41;
  *(void *)(a7 + 48) = v17;
  uint64_t v39 = 0;
  State.init(wrappedValue:)();
  *(_OWORD *)(a7 + 56) = v41;
  LOBYTE(v39) = 0;
  State.init(wrappedValue:)();
  uint64_t v18 = *((void *)&v41 + 1);
  *(unsigned char *)(a7 + 72) = v41;
  *(void *)(a7 + 80) = v18;
  LOBYTE(v39) = 0;
  State.init(wrappedValue:)();
  uint64_t v19 = *((void *)&v41 + 1);
  *(unsigned char *)(a7 + 88) = v41;
  *(void *)(a7 + 96) = v19;
  type metadata accessor for CGPoint(0);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  State.init(wrappedValue:)();
  uint64_t v20 = v42;
  *(_OWORD *)(a7 + 104) = v41;
  *(void *)(a7 + 120) = v20;
  LOBYTE(v39) = 0;
  State.init(wrappedValue:)();
  uint64_t v21 = *((void *)&v41 + 1);
  *(unsigned char *)(a7 + 128) = v41;
  *(void *)(a7 + 136) = v21;
  uint64_t v22 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v23 = a7 + v22[16];
  uint64_t v24 = type metadata accessor for Game();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  sub_100036118(a1, a7 + v22[17], type metadata accessor for AccessPointContainer);
  uint64_t v25 = a3;
  sub_10003A638(a3, v23);
  uint64_t v26 = v35;
  *(void *)(a7 + v22[18]) = v34;
  *(void *)(a7 + v22[19]) = v36;
  uint64_t v27 = v26;
  sub_1000170C8(v26, a7 + v22[20], &qword_100140C50);
  uint64_t v28 = a7 + v22[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v28, v38, v10);
  uint64_t v36 = v13;
  *(void *)(v28 + *(int *)(v13 + 28)) = 0;
  switch(*(unsigned char *)(a1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 24)))
  {
    case 1:
      swift_bridgeObjectRelease();
      sub_100017388(v27, &qword_100140C50);
      sub_100017388(v25, &qword_100140B48);
      sub_100036180(a1, type metadata accessor for AccessPointContainer);
      goto LABEL_4;
    default:
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      sub_100017388(v27, &qword_100140C50);
      sub_100017388(v25, &qword_100140B48);
      sub_100036180(a1, type metadata accessor for AccessPointContainer);
      if (v29)
      {
LABEL_4:
        long long v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        long long v31 = v37;
        v30(v37, v38, v10);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v38, v10);
        long long v31 = v37;
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v37, enum case for AccessPointAnchoring.topCentered(_:), v10);
        long long v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
      }
      *(void *)&v15[*(int *)(v36 + 28)] = 0;
      v30(v15, (uint64_t)v31, v10);
      return sub_100024A74((uint64_t)v15, a7 + v22[14], &qword_100140C40);
  }
}

uint64_t sub_10002B3B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v0 + 48);
  LOBYTE(v23) = *(unsigned char *)(v0 + 40);
  *((void *)&v23 + 1) = v9;
  sub_100005B18(&qword_100140DA8);
  uint64_t result = State.wrappedValue.getter();
  if (!(_BYTE)v22)
  {
    long long v23 = *(_OWORD *)(v0 + 56);
    sub_100005B18(&qword_100140DD8);
    State.wrappedValue.getter();
    uint64_t v11 = v22;
    uint64_t v12 = v1 + *(int *)(v2 + 68);
    uint64_t result = type metadata accessor for AccessPointContainer(0);
    if (v11 < *(void *)(*(void *)(v12 + *(int *)(result + 28)) + 16))
    {
      char v13 = *(unsigned char *)(v1 + 16);
      uint64_t v14 = swift_retain();
      uint64_t v15 = sub_100035590(v14, v13, 0xD00000000000001DLL, 0x80000001000FC6F0);
      swift_release();
      swift_getKeyPath();
      *(void *)&long long v23 = v15;
      sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v15 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
      {
        swift_getKeyPath();
        *(void *)&long long v23 = v15;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
        uint64_t result = swift_release();
        if (v16 > 0) {
          return result;
        }
        uint64_t v17 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 1, 1, v17);
        sub_100036118(v1, (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointShaderTransitionView);
        type metadata accessor for MainActor();
        uint64_t v18 = static MainActor.shared.getter();
        unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = v18;
        *(void *)(v20 + 24) = &protocol witness table for MainActor;
        sub_100038934((uint64_t)v5, v20 + v19, type metadata accessor for AccessPointShaderTransitionView);
        sub_10002C340((uint64_t)v8, (uint64_t)&unk_100140DE8, v20);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10002B72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = type metadata accessor for AccessPointShaderTransitionView(0);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = *(void *)(v6 + 64);
  v4[9] = swift_task_alloc();
  sub_100005B18(&qword_100142A60);
  v4[10] = swift_task_alloc();
  v4[11] = type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v8;
  v4[14] = v7;
  return _swift_task_switch(sub_10002B85C, v8, v7);
}

uint64_t sub_10002B85C()
{
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(*(void *)(v0 + 40) + 56);
  sub_100005B18(&qword_100140DD8);
  State.wrappedValue.getter();
  double v2 = floor(AccessPointContainer.displayDuration(for:)(*(void *)(v0 + 32)) * 1000000000.0);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(v1);
  }
  unint64_t v3 = (unint64_t)v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10002B984;
  unint64_t v1 = v3;
  return static Task<>.sleep(nanoseconds:)(v1);
}

uint64_t sub_10002B984()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = sub_10003E32C;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = sub_10002BAA8;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10002BAA8()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  swift_release();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_100036118(v4, v1, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v6 = static MainActor.shared.getter();
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  sub_100038934(v1, v8 + v7, type metadata accessor for AccessPointShaderTransitionView);
  sub_10002C340(v2, (uint64_t)&unk_100140E08, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10002BC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a4;
  v4[21] = type metadata accessor for AccessPointShaderTransitionView(0);
  v4[22] = swift_task_alloc();
  v4[23] = type metadata accessor for AccessPointContainer(0);
  v4[24] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[25] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10002BD08, v6, v5);
}

uint64_t sub_10002BD08()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  swift_release();
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 72));
  swift_getKeyPath();
  *(void *)(v0 + 120) = v3;
  sub_100034F0C(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 16) != 1)
  {
    uint64_t v4 = *(void *)(v0 + 160);
    *(_OWORD *)(v0 + 72) = *(_OWORD *)(v4 + 56);
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 168);
    sub_100005B18(&qword_100140DD8);
    State.wrappedValue.getter();
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v9 = v4 + *(int *)(v7 + 68);
    sub_100036118(v9, v5, type metadata accessor for AccessPointContainer);
    uint64_t v10 = *(void *)(v5 + *(int *)(v6 + 28));
    swift_bridgeObjectRetain();
    sub_100036180(v5, type metadata accessor for AccessPointContainer);
    uint64_t v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease();
    if (v8 >= v11 - 1)
    {
      unint64_t v21 = *(unsigned __int8 *)(v9 + *(int *)(*(void *)(v0 + 184) + 24));
      if (v21 >= 7) {
        char v22 = 1;
      }
      else {
        char v22 = 0x2020202010102uLL >> (8 * v21);
      }
      uint64_t v23 = *(void *)(v0 + 160);
      char v24 = *(unsigned char *)(v23 + 40);
      uint64_t v25 = *(void *)(v23 + 48);
      *(unsigned char *)(v0 + 88) = v24;
      *(void *)(v0 + 96) = v25;
      *(unsigned char *)(v0 + 208) = v22;
      sub_100005B18(&qword_100140DA8);
      State.wrappedValue.setter();
    }
    else
    {
      uint64_t v13 = *(void *)(v4 + 56);
      uint64_t v12 = *(void *)(v4 + 64);
      *(void *)(v0 + 104) = v13;
      *(void *)(v0 + 112) = v12;
      swift_retain();
      State.wrappedValue.getter();
      uint64_t v14 = *(void *)(v0 + 152);
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (v15)
      {
        __break(1u);
        JUMPOUT(0x10002C1C8);
      }
      uint64_t v17 = *(void *)(v0 + 176);
      uint64_t v18 = *(void *)(v0 + 160);
      *(void *)(v0 + 56) = v13;
      *(void *)(v0 + 64) = v12;
      *(void *)(v0 + 136) = v16;
      State.wrappedValue.setter();
      swift_release();
      *(void *)(v0 + 40) = v13;
      *(void *)(v0 + 48) = v12;
      State.wrappedValue.getter();
      uint64_t v19 = *(void *)(v0 + 144);
      sub_100036118(v18, v17, type metadata accessor for AccessPointShaderTransitionView);
      if (v19 == 1)
      {
        uint64_t v20 = *(void *)(v0 + 176);
        switch(*(unsigned char *)(v20 + *(int *)(v7 + 68) + *(int *)(*(void *)(v0 + 184) + 24)))
        {
          case 2:
            swift_bridgeObjectRelease();
            sub_100036180(v20, type metadata accessor for AccessPointShaderTransitionView);
            goto LABEL_13;
          default:
            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            sub_100036180(v20, type metadata accessor for AccessPointShaderTransitionView);
            if (v26)
            {
LABEL_13:
              uint64_t v27 = *(void *)(v0 + 160);
              static Animation.spring(response:dampingFraction:blendDuration:)();
              *(void *)(swift_task_alloc() + 16) = v27;
              withAnimation<A>(_:_:)();
              swift_release();
              swift_task_dealloc();
            }
            break;
        }
      }
      else
      {
        sub_100036180(*(void *)(v0 + 176), type metadata accessor for AccessPointShaderTransitionView);
      }
      sub_10002B3B8();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_10002C1E4()
{
  uint64_t v0 = type metadata accessor for AccessPointAnchoring();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v8 - v5;
  type metadata accessor for AccessPointShaderTransitionView(0);
  sub_100005B18(&qword_100140C40);
  State.wrappedValue.getter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  State.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

uint64_t sub_10002C340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100017388(a1, &qword_100142A60);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10002C4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100017388(a1, &qword_100142A60);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_100005B18(&qword_100141018);
  return swift_task_create();
}

uint64_t sub_10002C6A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v107 = a1;
  uint64_t v3 = type metadata accessor for AccessPointAnchoring();
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  __chkstk_darwin(v3);
  uint64_t v80 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_100005B18(&qword_100140FA8) - 8;
  __chkstk_darwin(v104);
  uint64_t v103 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100005B18(&qword_100140FB0) - 8;
  __chkstk_darwin(v98);
  uint64_t v97 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_100005B18(&qword_100140BE0) - 8;
  __chkstk_darwin(v94);
  uint64_t v93 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v89);
  uint64_t v88 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100005B18(&qword_100140FB8) - 8;
  __chkstk_darwin(v91);
  uint64_t v90 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v10 = *(void *)(v79 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v79);
  uint64_t v92 = sub_100005B18(&qword_100140FC0) - 8;
  __chkstk_darwin(v92);
  uint64_t v13 = (_OWORD *)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v96 = sub_100005B18(&qword_100140FC8) - 8;
  __chkstk_darwin(v96);
  uint64_t v95 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100005B18(&qword_100140FD0);
  __chkstk_darwin(v102);
  uint64_t v105 = (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = static HorizontalAlignment.center.getter();
  sub_100036118(v2, (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  uint64_t v99 = v17 | 7;
  uint64_t v100 = v18 + v11;
  uint64_t v19 = swift_allocObject();
  uint64_t v101 = v18;
  uint64_t v106 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100038934(v106, v19 + v18, type metadata accessor for AccessPointShaderTransitionView);
  LOBYTE(v11) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v111 = v16;
  uint64_t v112 = 0;
  char v113 = 0;
  uint64_t v114 = sub_100039BF0;
  uint64_t v115 = v19;
  char v116 = v11;
  uint64_t v117 = v20;
  uint64_t v118 = v21;
  uint64_t v119 = v22;
  uint64_t v120 = v23;
  char v121 = 0;
  double v24 = *(double *)(v2 + 24);
  static Alignment.center.getter();
  sub_10002A8E4(0.0, 1, 0.0, 1, v24, 0, 0.0, 1, (uint64_t)v122, 0.0, 1, 0.0, 1);
  swift_release();
  uint64_t v87 = v2;
  LOBYTE(v24) = *(unsigned char *)(v2 + 40);
  uint64_t v25 = *(void *)(v2 + 48);
  char v109 = LOBYTE(v24);
  uint64_t v110 = v25;
  sub_100005B18(&qword_100140DA8);
  State.projectedValue.getter();
  long long v26 = v124;
  char v27 = v125;
  LOBYTE(v124) = LOBYTE(v24);
  *((void *)&v124 + 1) = v25;
  State.wrappedValue.getter();
  char v109 = v109 == 1;
  State.init(wrappedValue:)();
  char v28 = v124;
  uint64_t v29 = *((void *)&v124 + 1);
  long long v134 = v122[10];
  long long v135 = v122[11];
  long long v130 = v122[6];
  long long v131 = v122[7];
  long long v132 = v122[8];
  long long v133 = v122[9];
  long long v126 = v122[2];
  long long v127 = v122[3];
  long long v128 = v122[4];
  long long v129 = v122[5];
  long long v124 = v122[0];
  long long v125 = v122[1];
  *(void *)uint64_t v136 = v123;
  *(_OWORD *)&v136[8] = v26;
  v136[24] = v27;
  LOBYTE(v137) = v28;
  *((void *)&v137 + 1) = v29;
  uint64_t v30 = static Color.clear.getter();
  uint64_t v83 = static Alignment.center.getter();
  uint64_t v32 = v31;
  uint64_t v33 = v88;
  uint64_t v34 = &v88[*(int *)(v89 + 28)];
  uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v86 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v85 = type metadata accessor for RoundedCornerStyle();
  uint64_t v36 = *(void *)(v85 - 8);
  uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 104);
  uint64_t v89 = v36 + 104;
  v84(v34, v35, v85);
  __asm { FMOV            V0.2D, #30.0 }
  _OWORD *v33 = _Q0;
  uint64_t v42 = v93;
  sub_100036118((uint64_t)v33, v93, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v42 + *(int *)(v94 + 44)) = 256;
  uint64_t v43 = v90;
  sub_1000170C8(v42, (uint64_t)v90 + *(int *)(v91 + 44), &qword_100140BE0);
  uint64_t v44 = v83;
  uint64_t *v43 = v30;
  v43[1] = v44;
  v43[2] = v32;
  swift_retain();
  sub_100017388(v42, &qword_100140BE0);
  sub_100036180((uint64_t)v33, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  swift_release();
  uint64_t v45 = static Alignment.center.getter();
  uint64_t v47 = v46;
  uint64_t v48 = v97;
  sub_1000170C8((uint64_t)v43, v97, &qword_100140FB8);
  uint64_t v49 = (uint64_t *)(v48 + *(int *)(v98 + 44));
  *uint64_t v49 = v45;
  v49[1] = v47;
  uint64_t v50 = v87;
  sub_1000170C8(v48, (uint64_t)v13 + *(int *)(v92 + 44), &qword_100140FB0);
  long long v51 = *(_OWORD *)&v136[16];
  v13[12] = *(_OWORD *)v136;
  v13[13] = v51;
  v13[14] = v137;
  long long v52 = v133;
  v13[8] = v132;
  _OWORD v13[9] = v52;
  long long v53 = v135;
  v13[10] = v134;
  v13[11] = v53;
  long long v54 = v129;
  v13[4] = v128;
  v13[5] = v54;
  long long v55 = v131;
  v13[6] = v130;
  v13[7] = v55;
  long long v56 = v125;
  *uint64_t v13 = v124;
  v13[1] = v56;
  long long v57 = v127;
  v13[2] = v126;
  v13[3] = v57;
  sub_100039C1C((uint64_t)&v124);
  sub_100017388(v48, &qword_100140FB0);
  sub_100017388((uint64_t)v43, &qword_100140FB8);
  sub_100039C70((uint64_t)&v124);
  uint64_t v58 = (uint64_t)v103;
  v84(v103, v86, v85);
  uint64_t v59 = (uint64_t)v95;
  uint64_t v60 = static Color.accentColor.getter();
  uint64_t v61 = v104;
  *(void *)(v58 + *(int *)(v104 + 60)) = v60;
  *(void *)(v58 + *(int *)(v61 + 64)) = 0x4010000000000000;
  sub_1000170C8(v58, v59, &qword_100140FA8);
  uint64_t v62 = v96;
  sub_1000170C8((uint64_t)v13, v59 + *(int *)(v96 + 44), &qword_100140FC0);
  uint64_t v63 = v62;
  uint64_t v64 = v59 + *(int *)(v62 + 48);
  *(unsigned char *)uint64_t v64 = FocusState.init<>()() & 1;
  *(void *)(v64 + 8) = v65;
  *(unsigned char *)(v64 + 16) = v66 & 1;
  uint64_t v67 = v59 + *(int *)(v63 + 52);
  *(void *)uint64_t v67 = swift_getKeyPath();
  *(unsigned char *)(v67 + 8) = 0;
  sub_100017388(v58, &qword_100140FA8);
  sub_100017388((uint64_t)v13, &qword_100140FC0);
  uint64_t v68 = *(void *)(v50 + 136);
  char v109 = *(unsigned char *)(v50 + 128);
  uint64_t v110 = v68;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  double v69 = 0.0;
  if ((v108 & 1) == 0)
  {
    sub_100005B18(&qword_100140C40);
    uint64_t v70 = v80;
    State.wrappedValue.getter();
    if (AccessPointAnchoring.bottom.getter()) {
      double v69 = 200.0;
    }
    else {
      double v69 = -200.0;
    }
    (*(void (**)(char *, uint64_t))(v81 + 8))(v70, v82);
  }
  uint64_t v71 = v105;
  sub_1000170C8(v59, v105, &qword_100140FC8);
  uint64_t v72 = v71 + *(int *)(v102 + 36);
  *(void *)uint64_t v72 = 0;
  *(double *)(v72 + 8) = v69;
  sub_100017388(v59, &qword_100140FC8);
  uint64_t v73 = v50;
  uint64_t v74 = v106;
  sub_100036118(v73, v106, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v75 = swift_allocObject();
  sub_100038934(v74, v75 + v101, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v76 = v107;
  sub_1000170C8(v71, v107, &qword_100140FD0);
  char v77 = (uint64_t (**)())(v76 + *(int *)(sub_100005B18(&qword_100140F60) + 36));
  *char v77 = sub_100039CD0;
  v77[1] = (uint64_t (*)())v75;
  v77[2] = 0;
  v77[3] = 0;
  return sub_100017388(v71, &qword_100140FD0);
}

uint64_t sub_10002D07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v48 = a3;
  uint64_t v4 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v5 = v4 - 8;
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v42 = *(void *)(v43 + 64);
  __chkstk_darwin(v4);
  uint64_t v40 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for GeometryProxy();
  uint64_t v7 = *(void *)(v37 - 8);
  uint64_t v38 = *(void *)(v7 + 64);
  __chkstk_darwin(v37);
  uint64_t v36 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TapGesture();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100005B18(&qword_100140FD8);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  uint64_t v47 = v14;
  __chkstk_darwin(v13);
  uint64_t v39 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AccessPointContentView(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036118(a2 + *(int *)(v5 + 76), (uint64_t)v18, type metadata accessor for AccessPointContainer);
  uint64_t v20 = *(void *)(a2 + 64);
  uint64_t v49 = *(void *)(a2 + 56);
  uint64_t v19 = v49;
  uint64_t v50 = v20;
  sub_100005B18(&qword_100140DD8);
  State.projectedValue.getter();
  long long v35 = v51;
  uint64_t v21 = v52;
  *(void *)&long long v51 = v19;
  *((void *)&v51 + 1) = v20;
  State.wrappedValue.getter();
  uint64_t v22 = &v18[*(int *)(v16 + 20)];
  *(_OWORD *)uint64_t v22 = v35;
  *((void *)v22 + 2) = v21;
  uint64_t v23 = *(int *)(v16 + 24);
  State.init(wrappedValue:)();
  *(_OWORD *)&v18[v23] = v51;
  TapGesture.init(count:)();
  uint64_t v25 = v36;
  uint64_t v24 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v36, v41, v37);
  uint64_t v26 = v40;
  sub_100036118(a2, v40, type metadata accessor for AccessPointShaderTransitionView);
  unint64_t v27 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v28 = (v38 + *(unsigned __int8 *)(v43 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v29 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v29 + v27, v25, v24);
  sub_100038934(v26, v29 + v28, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = sub_10003A1E4;
  *(void *)(v30 + 24) = v29;
  uint64_t v31 = v39;
  uint64_t v32 = v44;
  Gesture.onEnded(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v32);
  static GestureMask.all.getter();
  sub_100034F0C(&qword_100140FE0, (void (*)(uint64_t))type metadata accessor for AccessPointContentView);
  sub_10001758C(&qword_100140FE8, &qword_100140FD8);
  uint64_t v33 = v46;
  View.simultaneousGesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v33);
  return sub_100036180((uint64_t)v18, type metadata accessor for AccessPointContentView);
}

uint64_t sub_10002D5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v22.origin.x = v8;
  v22.origin.y = v10;
  v22.size.width = v12;
  v22.size.height = v14;
  CGFloat MidX = CGRectGetMidX(v22);
  v23.origin.x = v8;
  v23.origin.y = v10;
  v23.size.width = v12;
  v23.size.height = v14;
  CGFloat MidY = CGRectGetMidY(v23);
  uint64_t v17 = *(void *)(a2 + 120);
  long long v20 = *(_OWORD *)(a2 + 104);
  uint64_t v21 = v17;
  *(CGFloat *)uint64_t v19 = MidX;
  *(CGFloat *)&v19[1] = MidY;
  sub_100005B18(&qword_100140E78);
  return State.wrappedValue.setter();
}

uint64_t sub_10002D730()
{
  sub_100005B18(&qword_100140DA8);
  uint64_t result = State.wrappedValue.getter();
  if (!v2)
  {
    uint64_t v1 = static Animation.spring(response:dampingFraction:blendDuration:)();
    __chkstk_darwin(v1);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10002D808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v62 = sub_100005B18(&qword_100140F30);
  __chkstk_darwin(v62);
  uint64_t v49 = (uint64_t *)((char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = sub_100005B18(&qword_100140F38);
  __chkstk_darwin(v55);
  uint64_t v48 = (uint64_t)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100005B18(&qword_100140F40);
  __chkstk_darwin(v59);
  uint64_t v60 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100005B18(&qword_100140F48);
  __chkstk_darwin(v51);
  uint64_t v53 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100005B18(&qword_100140F50);
  __chkstk_darwin(v52);
  uint64_t v50 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = sub_100005B18(&qword_100140F58);
  __chkstk_darwin(v58);
  long long v54 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100140F60);
  __chkstk_darwin(v7 - 8);
  double v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100005B18(&qword_100140F68);
  uint64_t v10 = __chkstk_darwin(v56);
  CGFloat v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)&v47 - v13;
  uint64_t v14 = type metadata accessor for AccessPointAnchoring();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessPointShaderTransitionView(0);
  sub_100005B18(&qword_100140C40);
  State.wrappedValue.getter();
  char v18 = AccessPointAnchoring.centered.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v15 + 8);
  v19(v17, v14);
  if (v18)
  {
    sub_10002C6A0((uint64_t)v9);
    uint64_t v20 = Namespace.wrappedValue.getter();
    int v21 = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    sub_1000170C8((uint64_t)v9, (uint64_t)v12, &qword_100140F60);
    uint64_t v26 = &v12[*(int *)(v56 + 36)];
    *(void *)uint64_t v26 = 1936683112;
    *((void *)v26 + 1) = 0xE400000000000000;
    *((void *)v26 + 2) = v20;
    *((_DWORD *)v26 + 6) = v21;
    *((void *)v26 + 4) = v23;
    *((void *)v26 + 5) = v25;
    v26[48] = 1;
    sub_100017388((uint64_t)v9, &qword_100140F60);
    uint64_t v27 = v57;
    sub_100024A74((uint64_t)v12, v57, &qword_100140F68);
    sub_1000170C8(v27, (uint64_t)v12, &qword_100140F68);
    uint64_t v28 = (uint64_t)v50;
    *uint64_t v50 = 0;
    *(unsigned char *)(v28 + 8) = 0;
    uint64_t v29 = sub_100005B18(&qword_100140FA0);
    sub_1000170C8((uint64_t)v12, v28 + *(int *)(v29 + 48), &qword_100140F68);
    uint64_t v30 = v28 + *(int *)(v29 + 64);
    *(void *)uint64_t v30 = 0;
    *(unsigned char *)(v30 + 8) = 0;
    sub_100017388((uint64_t)v12, &qword_100140F68);
    sub_1000170C8(v28, v53, &qword_100140F50);
    swift_storeEnumTagMultiPayload();
    sub_10001758C(&qword_100140F80, &qword_100140F50);
    sub_10001758C(&qword_100140F88, &qword_100140F38);
    uint64_t v31 = (uint64_t)v54;
    _ConditionalContent<>.init(storage:)();
    sub_100017388(v28, &qword_100140F50);
    uint64_t v32 = &qword_100140F58;
    sub_1000170C8(v31, v60, &qword_100140F58);
    swift_storeEnumTagMultiPayload();
    sub_100039B2C();
    sub_10001758C(&qword_100140F90, &qword_100140F30);
  }
  else
  {
    State.wrappedValue.getter();
    char v33 = AccessPointAnchoring.leading.getter();
    v19(v17, v14);
    sub_10002C6A0((uint64_t)v9);
    uint64_t v34 = Namespace.wrappedValue.getter();
    int v35 = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    sub_1000170C8((uint64_t)v9, (uint64_t)v12, &qword_100140F60);
    uint64_t v40 = &v12[*(int *)(v56 + 36)];
    *(void *)uint64_t v40 = 1936683112;
    *((void *)v40 + 1) = 0xE400000000000000;
    *((void *)v40 + 2) = v34;
    *((_DWORD *)v40 + 6) = v35;
    *((void *)v40 + 4) = v37;
    *((void *)v40 + 5) = v39;
    v40[48] = 1;
    sub_100017388((uint64_t)v9, &qword_100140F60);
    uint64_t v27 = v57;
    sub_100024A74((uint64_t)v12, v57, &qword_100140F68);
    sub_1000170C8(v27, (uint64_t)v12, &qword_100140F68);
    if ((v33 & 1) == 0)
    {
      uint64_t v44 = (uint64_t)v49;
      *uint64_t v49 = 0;
      *(unsigned char *)(v44 + 8) = 0;
      uint64_t v45 = sub_100005B18(&qword_100140F70);
      sub_1000170C8((uint64_t)v12, v44 + *(int *)(v45 + 48), &qword_100140F68);
      sub_100017388((uint64_t)v12, &qword_100140F68);
      uint64_t v32 = &qword_100140F30;
      sub_1000170C8(v44, v60, &qword_100140F30);
      swift_storeEnumTagMultiPayload();
      sub_100039B2C();
      sub_10001758C(&qword_100140F90, &qword_100140F30);
      _ConditionalContent<>.init(storage:)();
      uint64_t v43 = v44;
      goto LABEL_7;
    }
    uint64_t v41 = v48;
    sub_1000170C8((uint64_t)v12, v48, &qword_100140F68);
    uint64_t v42 = v41 + *(int *)(sub_100005B18(&qword_100140F98) + 48);
    *(void *)uint64_t v42 = 0;
    *(unsigned char *)(v42 + 8) = 0;
    sub_100017388((uint64_t)v12, &qword_100140F68);
    sub_1000170C8(v41, v53, &qword_100140F38);
    swift_storeEnumTagMultiPayload();
    sub_10001758C(&qword_100140F80, &qword_100140F50);
    sub_10001758C(&qword_100140F88, &qword_100140F38);
    uint64_t v31 = (uint64_t)v54;
    _ConditionalContent<>.init(storage:)();
    sub_100017388(v41, &qword_100140F38);
    uint64_t v32 = &qword_100140F58;
    sub_1000170C8(v31, v60, &qword_100140F58);
    swift_storeEnumTagMultiPayload();
    sub_100039B2C();
    sub_10001758C(&qword_100140F90, &qword_100140F30);
  }
  _ConditionalContent<>.init(storage:)();
  uint64_t v43 = v31;
LABEL_7:
  sub_100017388(v43, v32);
  return sub_100017388(v27, &qword_100140F68);
}

uint64_t sub_10002E0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v134 = a2;
  uint64_t v131 = a3;
  uint64_t v113 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v111 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v133 = (ValueMetadata *)type metadata accessor for AccessPointAnchoring();
  Description = (void (**)(char *, uint64_t, ValueMetadata *))v133[-1].Description;
  __chkstk_darwin(v133);
  char v108 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(void *)(v132 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v132);
  uint64_t v120 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AccessPointShaderTransitionView(0);
  long long v124 = *(void (**)(uint64_t, char *, uint64_t))(v8 - 8);
  uint64_t v9 = *((void *)v124 + 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100005B18(&qword_100140E80);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100005B18(&qword_100140E88);
  __chkstk_darwin(v14);
  uint64_t v122 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_100005B18(&qword_100140E90);
  uint64_t v110 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  long long v125 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100005B18(&qword_100140E98);
  uint64_t v116 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v115 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_100005B18(&qword_100140EA0);
  uint64_t v118 = *(void *)(v130 - 8);
  uint64_t v18 = __chkstk_darwin(v130);
  uint64_t v114 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v117 = (char *)&v97 - v20;
  uint64_t v126 = sub_100005B18(&qword_100140EA8);
  __chkstk_darwin(v126);
  long long v128 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(ValueMetadata **)(a1 + 96);
  LOBYTE(v139) = *(unsigned char *)(a1 + 88);
  uint64_t v140 = v22;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  if (v135 == 1)
  {
    swift_storeEnumTagMultiPayload();
    type metadata accessor for CGRect(255);
    uint64_t v24 = v23;
    unint64_t v25 = sub_10003994C();
    uint64_t v26 = sub_100034F0C(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
    uint64_t v139 = v14;
    uint64_t v140 = v133;
    unint64_t v141 = v25;
    unint64_t v142 = v26;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v28 = sub_100034F0C(&qword_100140EC8, type metadata accessor for CGRect);
    uint64_t v139 = v127;
    uint64_t v140 = v24;
    unint64_t v141 = OpaqueTypeConformance2;
    unint64_t v142 = v28;
    uint64_t v29 = swift_getOpaqueTypeConformance2();
    unint64_t v30 = sub_1000345F0();
    uint64_t v139 = v129;
    uint64_t v140 = &type metadata for AccessPointShaderTransitionView.AnimationState;
    unint64_t v141 = v29;
    unint64_t v142 = v30;
    swift_getOpaqueTypeConformance2();
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    *(void *)uint64_t v13 = static HorizontalAlignment.center.getter();
    *((void *)v13 + 1) = 0;
    v13[16] = 0;
    uint64_t v32 = sub_100005B18(&qword_100140EB0);
    sub_10002EFE0((uint64_t)&v13[*(int *)(v32 + 44)]);
    char v121 = type metadata accessor for AccessPointShaderTransitionView;
    uint64_t v119 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100036118(a1, v119, type metadata accessor for AccessPointShaderTransitionView);
    uint64_t v33 = v6;
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v102 = v6 + 16;
    uint64_t v103 = v34;
    int v35 = v120;
    uint64_t v36 = v132;
    v34(v120, v134, v132);
    uint64_t v37 = *((unsigned __int8 *)v124 + 80);
    uint64_t v38 = *(unsigned __int8 *)(v33 + 80);
    uint64_t v39 = v9 + v38 + ((v37 + 16) & ~v37);
    uint64_t v40 = (v37 + 16) & ~v37;
    uint64_t v107 = v40;
    uint64_t v41 = v39 & ~v38;
    uint64_t v106 = v41 + v7;
    uint64_t v42 = v41;
    uint64_t v100 = v41;
    uint64_t v101 = v37 | v38 | 7;
    uint64_t v43 = swift_allocObject();
    uint64_t v105 = type metadata accessor for AccessPointShaderTransitionView;
    sub_100038934((uint64_t)v10, v43 + v40, type metadata accessor for AccessPointShaderTransitionView);
    uint64_t v44 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 32);
    uint64_t v123 = v33 + 32;
    long long v124 = v44;
    uint64_t v45 = v36;
    v44(v43 + v42, v35, v36);
    uint64_t v46 = v122;
    sub_1000170C8((uint64_t)v13, v122, &qword_100140E80);
    uint64_t v99 = v14;
    uint64_t v47 = (void *)(v46 + *(int *)(v14 + 36));
    *uint64_t v47 = sub_10003945C;
    v47[1] = v43;
    v47[2] = 0;
    v47[3] = 0;
    sub_100017388((uint64_t)v13, &qword_100140E80);
    LOBYTE(v42) = *(unsigned char *)(a1 + 16);
    uint64_t v48 = swift_retain();
    uint64_t v49 = sub_100035590(v48, v42, 0xD00000000000001DLL, 0x80000001000FC6F0);
    swift_release();
    swift_getKeyPath();
    uint64_t v139 = v49;
    sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v50 = v49 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess();
    uint64_t v51 = Description;
    uint64_t v52 = v108;
    Description[2](v108, v50, v133);
    swift_release();
    uint64_t v53 = v119;
    sub_100036118(a1, v119, v121);
    uint64_t v104 = a1;
    long long v54 = v103;
    v103(v35, v134, v45);
    uint64_t v55 = swift_allocObject();
    sub_100038934(v53, v55 + v107, type metadata accessor for AccessPointShaderTransitionView);
    uint64_t v56 = v100;
    v124(v55 + v100, v35, v45);
    unint64_t v97 = sub_10003994C();
    uint64_t v98 = sub_100034F0C(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
    uint64_t v57 = v99;
    uint64_t v58 = v133;
    uint64_t v59 = v122;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    ((void (*)(char *, ValueMetadata *))v51[1])(v52, v58);
    sub_100017388(v59, &qword_100140E88);
    uint64_t v60 = v111;
    static CoordinateSpaceProtocol<>.global.getter();
    uint64_t v61 = v113;
    uint64_t v62 = v134;
    GeometryProxy.frame<A>(in:)();
    uint64_t v64 = v63;
    char v66 = v65;
    unint64_t v68 = v67;
    unint64_t v70 = v69;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v60, v61);
    uint64_t v139 = v64;
    uint64_t v140 = v66;
    unint64_t v141 = v68;
    unint64_t v142 = v70;
    uint64_t v71 = v119;
    sub_100036118(v104, v119, v121);
    uint64_t v72 = v120;
    uint64_t v73 = v62;
    uint64_t v74 = v132;
    v54(v120, v73, v132);
    uint64_t v75 = swift_allocObject();
    uint64_t v76 = v107;
    sub_100038934(v71, v75 + v107, v105);
    v124(v75 + v56, v72, v74);
    type metadata accessor for CGRect(0);
    uint64_t v78 = v77;
    uint64_t v135 = v57;
    uint64_t v136 = v133;
    unint64_t v137 = v97;
    uint64_t v138 = v98;
    long long v133 = (ValueMetadata *)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
    uint64_t v79 = swift_getOpaqueTypeConformance2();
    uint64_t v80 = sub_100034F0C(&qword_100140EC8, type metadata accessor for CGRect);
    uint64_t v81 = v115;
    uint64_t v82 = v127;
    uint64_t v83 = v125;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v83, v82);
    uint64_t v84 = v104;
    uint64_t v85 = *(ValueMetadata **)(v104 + 48);
    LOBYTE(v139) = *(unsigned char *)(v104 + 40);
    uint64_t v140 = v85;
    sub_100005B18(&qword_100140DA8);
    State.wrappedValue.getter();
    uint64_t v86 = v84;
    uint64_t v87 = v119;
    sub_100036118(v86, v119, v121);
    uint64_t v88 = v132;
    v103(v72, v134, v132);
    uint64_t v89 = swift_allocObject();
    sub_100038934(v87, v89 + v76, v105);
    v124(v89 + v100, v72, v88);
    uint64_t v139 = v82;
    uint64_t v140 = v78;
    unint64_t v141 = v79;
    unint64_t v142 = v80;
    uint64_t v90 = swift_getOpaqueTypeConformance2();
    unint64_t v91 = sub_1000345F0();
    uint64_t v92 = v114;
    uint64_t v93 = v129;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v81, v93);
    uint64_t v94 = v118;
    uint64_t v95 = v117;
    uint64_t v96 = v130;
    (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v117, v92, v130);
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v128, v95, v96);
    swift_storeEnumTagMultiPayload();
    uint64_t v139 = v93;
    uint64_t v140 = &type metadata for AccessPointShaderTransitionView.AnimationState;
    unint64_t v141 = v90;
    unint64_t v142 = v91;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v95, v96);
  }
}

uint64_t sub_10002EFE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v38 = sub_100005B18(&qword_100140EE0);
  __chkstk_darwin(v38);
  uint64_t v33 = (uint64_t)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100005B18(&qword_100140EE8);
  __chkstk_darwin(v34);
  uint64_t v36 = (uint64_t)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100005B18(&qword_100140EF0);
  __chkstk_darwin(v35);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_100140EF8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100140F00);
  uint64_t v9 = v8 - 8;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = type metadata accessor for AccessPointAnchoring();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessPointShaderTransitionView(0);
  sub_100005B18(&qword_100140C40);
  State.wrappedValue.getter();
  char v19 = AccessPointAnchoring.bottom.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)uint64_t v7 = static VerticalAlignment.center.getter();
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  uint64_t v20 = sub_100005B18(&qword_100140F08);
  sub_10002D808((uint64_t)&v7[*(int *)(v20 + 44)]);
  uint64_t v21 = Namespace.wrappedValue.getter();
  LODWORD(v18) = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_1000170C8((uint64_t)v7, (uint64_t)v12, &qword_100140EF8);
  uint64_t v26 = &v12[*(int *)(v9 + 44)];
  *(void *)uint64_t v26 = 1936683126;
  *((void *)v26 + 1) = 0xE400000000000000;
  *((void *)v26 + 2) = v21;
  *((_DWORD *)v26 + 6) = v18;
  *((void *)v26 + 4) = v23;
  *((void *)v26 + 5) = v25;
  v26[48] = 1;
  sub_100017388((uint64_t)v7, &qword_100140EF8);
  sub_100024A74((uint64_t)v12, (uint64_t)v14, &qword_100140F00);
  sub_1000170C8((uint64_t)v14, (uint64_t)v12, &qword_100140F00);
  if (v19)
  {
    *(void *)uint64_t v4 = 0;
    v4[8] = 1;
    uint64_t v27 = sub_100005B18(&qword_100140F28);
    sub_1000170C8((uint64_t)v12, (uint64_t)&v4[*(int *)(v27 + 48)], &qword_100140F00);
    sub_100017388((uint64_t)v12, &qword_100140F00);
    uint64_t v28 = &qword_100140EF0;
    sub_1000170C8((uint64_t)v4, v36, &qword_100140EF0);
    swift_storeEnumTagMultiPayload();
    sub_10001758C(&qword_100140F18, &qword_100140EF0);
    sub_10001758C(&qword_100140F20, &qword_100140EE0);
    _ConditionalContent<>.init(storage:)();
    uint64_t v29 = (uint64_t)v4;
  }
  else
  {
    uint64_t v30 = v33;
    sub_1000170C8((uint64_t)v12, v33, &qword_100140F00);
    uint64_t v31 = v30 + *(int *)(sub_100005B18(&qword_100140F10) + 48);
    *(void *)uint64_t v31 = 0;
    *(unsigned char *)(v31 + 8) = 1;
    sub_100017388((uint64_t)v12, &qword_100140F00);
    uint64_t v28 = &qword_100140EE0;
    sub_1000170C8(v30, v36, &qword_100140EE0);
    swift_storeEnumTagMultiPayload();
    sub_10001758C(&qword_100140F18, &qword_100140EF0);
    sub_10001758C(&qword_100140F20, &qword_100140EE0);
    _ConditionalContent<>.init(storage:)();
    uint64_t v29 = v30;
  }
  sub_100017388(v29, v28);
  return sub_100017388((uint64_t)v14, &qword_100140F00);
}

uint64_t sub_10002F508(uint64_t a1)
{
  uint64_t v2 = v1;
  v47[1] = a1;
  uint64_t v3 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v3 - 8);
  v47[0] = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessPointAnchoring();
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *(unsigned char *)(v1 + 16);
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_100035590(v13, v12, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  swift_getKeyPath();
  uint64_t v53 = v14;
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t result = swift_release();
  if (!Strong) {
    return result;
  }
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  CGFloat v24 = v23;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (*(double *)(v2 + 24) >= v22) {
    double v25 = v22;
  }
  else {
    double v25 = *(double *)(v2 + 24);
  }
  char v26 = *(unsigned char *)(v2 + 16);
  uint64_t v27 = swift_retain();
  uint64_t v28 = sub_100035590(v27, v26, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  swift_getKeyPath();
  uint64_t v53 = v28;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v29 = v28 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v30 = v48;
  uint64_t v31 = v29;
  uint64_t v32 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v7, v31, v49);
  swift_release();
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v7, v32);
  if (v33 == enum case for AccessPointAnchoring.topTrailing(_:))
  {
    v54.origin.x = v18;
    v54.origin.y = v20;
    v54.size.width = v22;
    v54.size.height = v24;
    double MaxX = CGRectGetMaxX(v54);
    uint64_t v35 = *(void *)(v2 + 48);
    char v50 = *(unsigned char *)(v2 + 40);
    uint64_t v51 = v35;
    sub_100005B18(&qword_100140DA8);
    State.wrappedValue.getter();
    double v36 = v25;
    if (v52 == 1) {
      double v36 = *(double *)(v2 + 32);
    }
    double v18 = MaxX - v36;
    goto LABEL_16;
  }
  if (v33 != enum case for AccessPointAnchoring.bottomLeading(_:))
  {
    if (v33 != enum case for AccessPointAnchoring.bottomTrailing(_:))
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v32);
      goto LABEL_16;
    }
    v55.origin.x = v18;
    v55.origin.y = v20;
    v55.size.width = v22;
    v55.size.height = v24;
    double v37 = CGRectGetMaxX(v55);
    uint64_t v38 = *(void *)(v2 + 48);
    char v50 = *(unsigned char *)(v2 + 40);
    uint64_t v51 = v38;
    sub_100005B18(&qword_100140DA8);
    State.wrappedValue.getter();
    double v39 = v25;
    if (v52 == 1) {
      double v39 = *(double *)(v2 + 32);
    }
    double v18 = v37 - v39;
  }
  v56.origin.x = v18;
  v56.origin.y = v20;
  v56.size.width = v22;
  v56.size.height = v24;
  double v20 = CGRectGetMaxY(v56) - *(double *)(v2 + 32);
LABEL_16:
  uint64_t v40 = v47[0];
  uint64_t v41 = *(void *)(v2 + 48);
  char v50 = *(unsigned char *)(v2 + 40);
  uint64_t v51 = v41;
  sub_100005B18(&qword_100140DA8);
  State.wrappedValue.getter();
  uint64_t v42 = *(void *)(v2 + 32);
  if (v52 == 1) {
    double v43 = *(double *)(v2 + 32);
  }
  else {
    double v43 = v25;
  }
  uint64_t v44 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v40, 1, 1, v44);
  type metadata accessor for MainActor();
  swift_unknownObjectRetain();
  uint64_t v45 = static MainActor.shared.getter();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v45;
  *(void *)(v46 + 24) = &protocol witness table for MainActor;
  *(void *)(v46 + 32) = Strong;
  *(double *)(v46 + 40) = v18;
  *(double *)(v46 + 48) = v20;
  *(double *)(v46 + 56) = v43;
  *(void *)(v46 + 64) = v42;
  sub_10002C340(v40, (uint64_t)&unk_100140ED8, v46);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_10002FAB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v95 = a1;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v93 = *(void *)(v3 - 8);
  uint64_t v94 = v3;
  __chkstk_darwin(v3);
  uint64_t v92 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for AccessPointAnchoring();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v7 = v6 - 8;
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v102 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_100005B18(&qword_100140D48);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v79 = sub_100005B18(&qword_100140D50);
  __chkstk_darwin(v79);
  uint64_t v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = v13;
  uint64_t v96 = sub_100005B18(&qword_100140D58);
  unint64_t v80 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v74 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100005B18(&qword_100140D60);
  uint64_t v81 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  unint64_t v97 = (uint64_t (*)(uint64_t))((char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = sub_100005B18(&qword_100140D68);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v99 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100005B18(&qword_100140D70);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v89 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_100005B18(&qword_100140D78);
  __chkstk_darwin(v85);
  uint64_t v88 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v11 = static Alignment.topLeading.getter();
  v11[1] = v19;
  uint64_t v20 = sub_100005B18(&qword_100140D80);
  sub_10003086C(v1, (uint64_t)v11 + *(int *)(v20 + 44));
  uint64_t v21 = static Alignment.center.getter();
  sub_10002A714(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, INFINITY, 0, v21, v22, &qword_100140D48, &qword_100140D50);
  sub_100017388((uint64_t)v11, &qword_100140D48);
  uint64_t v23 = *(void *)(v1 + *(int *)(v7 + 80));
  swift_getKeyPath();
  uint64_t v104 = v23;
  sub_100034F0C(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  LOBYTE(v104) = *(unsigned char *)(v23 + 16);
  CGFloat v24 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for AccessPointShaderTransitionView;
  sub_100036118(v1, (uint64_t)v24, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v25 = *(unsigned __int8 *)(v102 + 80);
  uint64_t v26 = (v25 + 16) & ~v25;
  uint64_t v101 = v25 | 7;
  uint64_t v102 = v26;
  uint64_t v98 = v26 + v8;
  uint64_t v27 = swift_allocObject();
  char v77 = type metadata accessor for AccessPointShaderTransitionView;
  sub_100038934((uint64_t)v24, v27 + v26, type metadata accessor for AccessPointShaderTransitionView);
  unint64_t v28 = sub_100034130();
  unint64_t v29 = sub_1000341D0();
  uint64_t v30 = v79;
  uint64_t v31 = (uint64_t)v75;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388(v31, &qword_100140D50);
  uint64_t v32 = *(ValueMetadata **)(v2 + 48);
  LOBYTE(v104) = *(unsigned char *)(v2 + 40);
  uint64_t v105 = v32;
  sub_100005B18(&qword_100140DA8);
  State.wrappedValue.getter();
  uint64_t v76 = v24;
  sub_100036118(v2, (uint64_t)v24, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v33 = swift_allocObject();
  sub_100038934((uint64_t)v24, v33 + v102, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v104 = v30;
  uint64_t v105 = &type metadata for GameDashboardLaunchContext.LaunchTarget;
  unint64_t v106 = v28;
  unint64_t v107 = v29;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v35 = sub_1000345F0();
  uint64_t v36 = v96;
  double v37 = v74;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v37, v36);
  LOBYTE(v24) = *(unsigned char *)(v2 + 16);
  uint64_t v38 = swift_retain();
  unint64_t v80 = 0x80000001000FC6F0;
  uint64_t v39 = sub_100035590(v38, (char)v24, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  swift_getKeyPath();
  uint64_t v104 = v39;
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v40 = v39 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v41 = v83;
  uint64_t v42 = v82;
  uint64_t v43 = v40;
  uint64_t v44 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v43, v84);
  uint64_t v45 = (uint64_t)v76;
  swift_release();
  uint64_t v46 = v2;
  sub_100036118(v2, v45, v78);
  uint64_t v47 = swift_allocObject();
  sub_100038934(v45, v47 + v102, v77);
  uint64_t v104 = v96;
  uint64_t v105 = &type metadata for AccessPointShaderTransitionView.AnimationState;
  unint64_t v106 = OpaqueTypeConformance2;
  unint64_t v107 = v35;
  uint64_t v48 = (ValueMetadata *)v44;
  uint64_t v49 = swift_getOpaqueTypeConformance2();
  uint64_t v50 = sub_100034F0C(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
  uint64_t v51 = v100;
  uint64_t v96 = v49;
  uint64_t v79 = v50;
  char v52 = v97;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, ValueMetadata *))(v41 + 8))(v42, v48);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v81 + 8))(v52, v51);
  uint64_t v53 = v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 16);
  uint64_t v54 = swift_retain();
  uint64_t v55 = sub_100035590(v54, v2, 0xD00000000000001DLL, v80);
  swift_release();
  swift_getKeyPath();
  uint64_t v104 = v55;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v55 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    swift_getKeyPath();
    uint64_t v104 = v55;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v56 = *(void *)(v55 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release();
    BOOL v57 = v56 > 0;
  }
  else
  {
    swift_release();
    BOOL v57 = 1;
  }
  BOOL v103 = v57;
  unint64_t v97 = type metadata accessor for AccessPointShaderTransitionView;
  sub_100036118(v46, v45, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v58 = swift_allocObject();
  uint64_t v59 = v102;
  sub_100038934(v45, v58 + v102, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v104 = v100;
  uint64_t v105 = v48;
  unint64_t v106 = v96;
  unint64_t v107 = v79;
  swift_getOpaqueTypeConformance2();
  uint64_t v60 = v89;
  uint64_t v61 = v87;
  uint64_t v62 = v99;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v62, v61);
  sub_100036118(v53, v45, v97);
  uint64_t v63 = swift_allocObject();
  sub_100038934(v45, v63 + v59, type metadata accessor for AccessPointShaderTransitionView);
  uint64_t v64 = v92;
  static TaskPriority.userInitiated.getter();
  uint64_t v65 = (uint64_t)v88;
  char v66 = &v88[*(int *)(v85 + 36)];
  uint64_t v67 = type metadata accessor for _TaskModifier();
  uint64_t v69 = v93;
  uint64_t v68 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v66[*(int *)(v67 + 20)], v64, v94);
  *(void *)char v66 = &unk_100140DD0;
  *((void *)v66 + 1) = v63;
  uint64_t v70 = v90;
  uint64_t v71 = v91;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 16))(v65, v60, v91);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v64, v68);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v60, v71);
  return sub_100024A74(v65, v95, &qword_100140D78);
}

uint64_t sub_10003086C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100005B18(&qword_100140B48);
  __chkstk_darwin(v4 - 8);
  uint64_t v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100140E68);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v40 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (double *)((char *)&v38 - v9);
  uint64_t v11 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036118(a1, (uint64_t)v14, type metadata accessor for AccessPointShaderTransitionView);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  sub_100038934((uint64_t)v14, v16 + v15, type metadata accessor for AccessPointShaderTransitionView);
  int v39 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(a1 + 80);
  char v41 = *(unsigned char *)(a1 + 72);
  uint64_t v42 = v25;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  if (v43 == 1)
  {
    double v26 = sub_10002AD40();
    uint64_t v28 = v27;
    uint64_t v29 = a1 + *(int *)(v11 + 64);
    uint64_t v30 = v38;
    sub_1000170C8(v29, v38, &qword_100140B48);
    sub_100036118(a1, (uint64_t)v14, type metadata accessor for AccessPointShaderTransitionView);
    uint64_t v31 = swift_allocObject();
    sub_100038934((uint64_t)v14, v31 + v15, type metadata accessor for AccessPointShaderTransitionView);
    *uint64_t v10 = v26;
    *((void *)v10 + 1) = v28;
    uint64_t v32 = (int *)type metadata accessor for RippleView(0);
    sub_100024A74(v30, (uint64_t)v10 + v32[5], &qword_100140B48);
    *(double *)((char *)v10 + v32[6]) = 1.0;
    Date.init()();
    uint64_t v33 = (uint64_t (**)())((char *)v10 + v32[8]);
    _OWORD *v33 = sub_100039404;
    v33[1] = (uint64_t (*)())v31;
    (*(void (**)(double *, void, uint64_t, int *))(*((void *)v32 - 1) + 56))(v10, 0, 1, v32);
  }
  else
  {
    uint64_t v34 = type metadata accessor for RippleView(0);
    (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v10, 1, 1, v34);
  }
  uint64_t v35 = v40;
  sub_1000170C8((uint64_t)v10, v40, &qword_100140E68);
  *(void *)a2 = sub_100039360;
  *(void *)(a2 + 8) = v16;
  *(unsigned char *)(a2 + 16) = v39;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v20;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 48) = v24;
  *(unsigned char *)(a2 + 56) = 0;
  uint64_t v36 = sub_100005B18(&qword_100140E70);
  sub_1000170C8(v35, a2 + *(int *)(v36 + 48), &qword_100140E68);
  swift_retain();
  sub_100017388((uint64_t)v10, &qword_100140E68);
  sub_100017388(v35, &qword_100140E68);
  return swift_release();
}

uint64_t sub_100030C9C()
{
  return swift_release();
}

uint64_t sub_100030D90(uint64_t a1)
{
  uint64_t v22 = type metadata accessor for AccessPointAnchoring();
  uint64_t v3 = *(void *)(v22 - 8);
  uint64_t v4 = __chkstk_darwin(v22);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v10 = *(void *)(a1 + *(int *)(v9 + 72));
  swift_getKeyPath();
  uint64_t v23 = v10;
  char v24 = 0;
  *(void *)&long long v25 = v10;
  sub_100034F0C(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  uint64_t v21 = v1;
  swift_release();
  uint64_t v11 = type metadata accessor for AccessPointContainer(0);
  uint64_t v12 = a1 + *(int *)(v9 + 68);
  uint64_t v13 = *(void *)(*(void *)(v12 + *(int *)(v11 + 28)) + 16) - 1;
  long long v25 = *(_OWORD *)(a1 + 56);
  uint64_t v26 = v13;
  sub_100005B18(&qword_100140DD8);
  State.wrappedValue.setter();
  unint64_t v14 = *(unsigned __int8 *)(v12 + *(int *)(v11 + 24));
  if (v14 >= 7) {
    char v15 = 1;
  }
  else {
    char v15 = 0x2020202010102uLL >> (8 * v14);
  }
  uint64_t v17 = *(void *)(a1 + 48);
  LOBYTE(v25) = *(unsigned char *)(a1 + 40);
  char v16 = v25;
  *((void *)&v25 + 1) = v17;
  LOBYTE(v26) = v15;
  sub_100005B18(&qword_100140DA8);
  State.wrappedValue.setter();
  LOBYTE(v25) = v16;
  *((void *)&v25 + 1) = v17;
  State.wrappedValue.getter();
  if (v26 == 2)
  {
    uint64_t v18 = *(void *)(a1 + 136);
    LOBYTE(v25) = *(unsigned char *)(a1 + 128);
    *((void *)&v25 + 1) = v18;
    LOBYTE(v26) = 0;
    sub_100005B18(&qword_100140E10);
    State.wrappedValue.setter();
    uint64_t v19 = v22;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v8, enum case for AccessPointAnchoring.topCentered(_:), v22);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v19);
    sub_100005B18(&qword_100140C40);
  }
  else
  {
    sub_100005B18(&qword_100140C40);
    State.wrappedValue.getter();
    uint64_t v19 = v22;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v22);
  }
  State.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v19);
}

uint64_t sub_1000310F8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v9 = *a2;
  if (v9 == 2)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007D4C(v10, (uint64_t)qword_100156CF8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Requesting invocation of onboarding flow from client.", v13, 2u);
      swift_slowDealloc();
    }

    char v14 = *(unsigned char *)(a3 + 16);
    uint64_t v15 = swift_retain();
    uint64_t v16 = sub_100035590(v15, v14, 0xD00000000000001DLL, 0x80000001000FC6F0);
    swift_release();
    swift_getKeyPath();
    uint64_t v35 = v16;
    sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t result = swift_release();
    if (Strong)
    {
      uint64_t v19 = type metadata accessor for TaskPriority();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
      type metadata accessor for MainActor();
      swift_unknownObjectRetain();
      uint64_t v20 = static MainActor.shared.getter();
      uint64_t v21 = (void *)swift_allocObject();
      v21[2] = v20;
      v21[3] = &protocol witness table for MainActor;
      v21[4] = Strong;
      sub_10002C340((uint64_t)v8, (uint64_t)&unk_100140E60, (uint64_t)v21);
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    int v22 = *a1;
    if (v9 == 1)
    {
      uint64_t v24 = *(void *)(a3 + 80);
      LOBYTE(v35) = *(unsigned char *)(a3 + 72);
      char v23 = v35;
      uint64_t v36 = v24;
      swift_retain();
      sub_100005B18(&qword_100140E10);
      State.wrappedValue.getter();
      LOBYTE(v35) = v23;
      uint64_t v36 = v24;
      v34[7] = (v37 & 1) == 0;
      State.wrappedValue.setter();
      swift_release();
    }
    char v25 = *(unsigned char *)(a3 + 16);
    uint64_t v26 = swift_retain();
    uint64_t v27 = sub_100035590(v26, v25, 0xD00000000000001DLL, 0x80000001000FC6F0);
    swift_release();
    swift_getKeyPath();
    uint64_t v35 = v27;
    sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v28 = swift_unknownObjectWeakLoadStrong();
    uint64_t result = swift_release();
    if (v28)
    {
      if (v9 == 1 || v22 == 1)
      {
        sub_10003913C();
        Class isa = NSNumber.init(BOOLeanLiteral:)(v9 == 1).super.super.isa;
        uint64_t v30 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v8, 1, 1, v30);
        type metadata accessor for MainActor();
        swift_unknownObjectRetain();
        uint64_t v31 = isa;
        uint64_t v32 = static MainActor.shared.getter();
        uint64_t v33 = (void *)swift_allocObject();
        v33[2] = v32;
        v33[3] = &protocol witness table for MainActor;
        v33[4] = v28;
        v33[5] = v31;
        sub_10002C340((uint64_t)v8, (uint64_t)&unk_100140E50, (uint64_t)v33);
        swift_release();
      }
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000315DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100031674, v6, v5);
}

uint64_t sub_100031674()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  [v1 requireOnboardingFlow];
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000316E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10003177C, v7, v6);
}

uint64_t sub_10003177C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)v0[2];
  swift_release();
  [v2 isPresentingDashboardFromAccessPoint:v1];
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000317F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8);
  uint64_t v10 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *(void *)(a1 + 48);
  char v21 = *(unsigned char *)(a1 + 40);
  uint64_t v22 = v13;
  sub_100005B18(&qword_100140DA8);
  State.wrappedValue.getter();
  int v14 = v23;
  sub_100036118(a1, (uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  if (v14 != 2) {
    return sub_100036180((uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  }
  uint64_t v15 = *((void *)v12 + 10);
  char v21 = v12[72];
  uint64_t v22 = v15;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  uint64_t result = sub_100036180((uint64_t)v12, type metadata accessor for AccessPointShaderTransitionView);
  if ((v23 & 1) == 0)
  {
    uint64_t v17 = static Animation.spring(response:dampingFraction:blendDuration:)();
    __chkstk_darwin(v17);
    *(&v20 - 2) = a1;
    sub_100036118(a1, (uint64_t)v10, type metadata accessor for AccessPointShaderTransitionView);
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v19 = swift_allocObject();
    sub_100038934((uint64_t)v10, v19 + v18, type metadata accessor for AccessPointShaderTransitionView);
    static AnimationCompletionCriteria.logicallyComplete.getter();
    withAnimation<A>(_:completionCriteria:_:completion:)();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_100031B2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *(unsigned char *)(a1 + 16);
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_100035590(v10, v9, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  swift_getKeyPath();
  v18[1] = v11;
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(void *)(v11 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  if (v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
    sub_100036118(a1, (uint64_t)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointShaderTransitionView);
    type metadata accessor for MainActor();
    uint64_t v15 = static MainActor.shared.getter();
    unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = &protocol witness table for MainActor;
    sub_100038934((uint64_t)v5, v17 + v16, type metadata accessor for AccessPointShaderTransitionView);
    sub_10002C340((uint64_t)v8, (uint64_t)&unk_100140E28, v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_100031DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[4] = v6;
  v4[5] = v5;
  return _swift_task_switch(sub_100031E6C, v6, v5);
}

uint64_t sub_100031E6C()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2];
  uint64_t v2 = qword_100156D18;
  v0[6] = qword_100156D18;
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = swift_retain();
  v0[7] = sub_100035590(v4, v3, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  return _swift_task_switch(sub_100031F50, v2, 0);
}

uint64_t sub_100031F50()
{
  sub_100037BD8(v0[7], 1, v0[6]);
  swift_release();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  return _swift_task_switch(sub_100031FC4, v1, v2);
}

uint64_t sub_100031FC4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100032024(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointAnchoring();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v27 - v7;
  char v9 = *(unsigned char *)(a1 + 16);
  uint64_t v10 = swift_retain();
  unint64_t v33 = 0x80000001000FC6F0;
  uint64_t v11 = sub_100035590(v10, v9, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  swift_getKeyPath();
  uint64_t v35 = v11;
  uint64_t v31 = sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = v11 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v13 = v3;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v14(v8, v12, v2);
  swift_release();
  uint64_t v15 = type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v32 = v14;
  v27[1] = v3 + 16;
  v14(v6, (uint64_t)v8, v2);
  uint64_t v16 = sub_100005B18(&qword_100140C40);
  State.wrappedValue.setter();
  uint64_t v17 = v13;
  unint64_t v18 = *(void (**)(char *, uint64_t))(v13 + 8);
  v18(v8, v2);
  uint64_t v19 = *(int *)(v15 + 56);
  uint64_t v30 = v16;
  v27[0] = a1 + v19;
  State.wrappedValue.getter();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v6, enum case for AccessPointAnchoring.topCentered(_:), v2);
  sub_100034F0C(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
  LOBYTE(v12) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = v6;
  v18(v6, v2);
  uint64_t v28 = (uint64_t (*)(char *, uint64_t))v18;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if ((v12 & 1) == 0)
  {
    char v21 = *(unsigned char *)(a1 + 16);
    uint64_t v22 = swift_retain();
    uint64_t v23 = sub_100035590(v22, v21, 0xD00000000000001DLL, v33);
    swift_release();
    swift_getKeyPath();
    uint64_t v34 = v23;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v24 = v23 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess();
    uint64_t v25 = v24;
    uint64_t v26 = (void (*)(char *, char *, uint64_t))v32;
    v32(v8, v25, v2);
    swift_release();
    v26(v29, v8, v2);
    State.wrappedValue.setter();
    return v28(v8, v2);
  }
  return result;
}

uint64_t sub_10003243C()
{
  return sub_10002B3B8();
}

uint64_t sub_1000324C4(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 16);
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_100035590(v2, v1, 0xD00000000000001DLL, 0x80000001000FC6F0);
  swift_release();
  swift_getKeyPath();
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
  }
  swift_release();
  sub_100005B18(&qword_100140E10);
  return State.wrappedValue.setter();
}

uint64_t sub_10003264C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000326E4, v3, v2);
}

uint64_t sub_1000326E4()
{
  swift_release();
  sub_10002B3B8();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100032748(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(double *)(v8 + 40) = a3;
  *(double *)(v8 + 48) = a4;
  *(double *)(v8 + 24) = a1;
  *(double *)(v8 + 32) = a2;
  *(void *)(v8 + 16) = a8;
  type metadata accessor for MainActor();
  *(void *)(v8 + 56) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000327E8, v10, v9);
}

id sub_1000327E8()
{
  swift_release();
  id result = (id)BSValueWithRect();
  if (result)
  {
    uint64_t v2 = result;
    [*(id *)(v0 + 16) updateAccessPointFrameCoordinates:result];

    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000328A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005B18(&qword_100141278);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100141280);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v26 = *(_OWORD *)(v2 + 3);
  long long v22 = *(_OWORD *)(v2 + 3);
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = sub_100005B18(&qword_100141288);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v7, a1, v12);
  uint64_t v13 = &v7[*(int *)(v5 + 36)];
  long long v14 = v23;
  *(_OWORD *)uint64_t v13 = v22;
  *((_OWORD *)v13 + 1) = v14;
  *((_OWORD *)v13 + 2) = v24;
  uint64_t v15 = v2[1];
  char v16 = *((unsigned char *)v2 + 16);
  uint64_t v25 = *v2;
  v20[1] = v25;
  v20[2] = v15;
  char v21 = v16;
  sub_100005B18(&qword_100141290);
  Binding.wrappedValue.getter();
  uint64_t v17 = swift_allocObject();
  long long v18 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v17 + 32) = v18;
  *(void *)(v17 + 48) = v2[4];
  sub_10003DB24((uint64_t)&v25);
  swift_retain();
  sub_10003DB50((uint64_t)&v26);
  sub_10003DB7C();
  sub_1000345F0();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388((uint64_t)v7, &qword_100141278);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, v8);
}

uint64_t sub_100032B64()
{
  sub_100005B18(&qword_100141290);
  uint64_t result = Binding.wrappedValue.getter();
  if (v2 == 1)
  {
    uint64_t v1 = static Animation.spring(response:dampingFraction:blendDuration:)();
    __chkstk_darwin(v1);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_100032C4C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100032C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v21[1] = a1;
  uint64_t v3 = type metadata accessor for AccessPointContentView(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v3);
  uint64_t v7 = sub_100005B18(&qword_100141198);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_1001411A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 0;
  uint64_t v13 = sub_100005B18(&qword_1001411A8);
  sub_100032F10(v2, (uint64_t)&v9[*(int *)(v13 + 44)]);
  uint64_t v14 = static Color.white.getter();
  sub_1000170C8((uint64_t)v9, (uint64_t)v12, &qword_100141198);
  *(void *)&v12[*(int *)(v10 + 36)] = v14;
  sub_100017388((uint64_t)v9, &qword_100141198);
  uint64_t v15 = v2 + *(int *)(v4 + 28);
  long long v16 = *(_OWORD *)v15;
  uint64_t v17 = *(void *)(v15 + 16);
  long long v22 = v16;
  uint64_t v23 = v17;
  sub_100005B18(&qword_1001411B0);
  Binding.wrappedValue.getter();
  sub_100036118(v2, (uint64_t)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointContentView);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100038934((uint64_t)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for AccessPointContentView);
  sub_10003D080();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return sub_100017388((uint64_t)v12, &qword_1001411A0);
}

uint64_t sub_100032F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v26 = sub_100005B18(&qword_1001411D8);
  __chkstk_darwin(v26);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_1001411E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_1001411E8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v25 = (uint64_t)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = a1;
  uint64_t v15 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointContentView(0) + 24));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v28 = *v15;
  uint64_t v29 = v17;
  sub_100005B18(&qword_100140DD8);
  State.wrappedValue.getter();
  if ((v30 & 1) == 0)
  {
    uint64_t v28 = v16;
    uint64_t v29 = v17;
    State.wrappedValue.getter();
    unint64_t v18 = v30;
    uint64_t result = type metadata accessor for AccessPointContainer(0);
    if ((v18 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v20 = *(void *)(v14 + *(int *)(result + 28));
      if (v18 < *(void *)(v20 + 16)) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v28 = v16;
  uint64_t v29 = v17;
  State.wrappedValue.getter();
  unint64_t v18 = v30;
  uint64_t result = type metadata accessor for AccessPointContainer(0);
  if ((v18 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v20 = *(void *)(v14 + *(int *)(result + 28));
  if (v18 < *(void *)(v20 + 16))
  {
LABEL_7:
    sub_10003D160(v20 + 40 * v18 + 32, (uint64_t)&v28);
    sub_10003D1C4();
    ComponentView.init(_:content:)();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    swift_storeEnumTagMultiPayload();
    sub_10001758C(&qword_1001411F8, &qword_1001411E0);
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v21 = v25;
    sub_1000170C8((uint64_t)v13, v25, &qword_1001411E8);
    uint64_t v22 = v27;
    sub_1000170C8(v21, v27, &qword_1001411E8);
    uint64_t v23 = v22 + *(int *)(sub_100005B18(&qword_100141200) + 48);
    *(void *)uint64_t v23 = 0;
    *(unsigned char *)(v23 + 8) = 0;
    sub_100017388((uint64_t)v13, &qword_1001411E8);
    return sub_100017388(v21, &qword_1001411E8);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000332FC()
{
  return swift_release();
}

uint64_t sub_100033364()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100033404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v5 = type metadata accessor for GeometryProxy();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for RippleView(0);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v24 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AnimationTimelineSchedule();
  uint64_t v11 = *(void *)(v26 - 8);
  uint64_t v12 = __chkstk_darwin(v26);
  uint64_t v25 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - v14;
  AnimationTimelineSchedule.init(minimumInterval:paused:)();
  sub_100036118(a2, (uint64_t)v10, type metadata accessor for RippleView);
  uint64_t v16 = a1;
  uint64_t v17 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v5);
  unint64_t v18 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v19 = (v9 + *(unsigned __int8 *)(v6 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  sub_100038934((uint64_t)v10, v20 + v18, type metadata accessor for RippleView);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v25, v15, v26);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10003D584;
  *(void *)(v22 + 24) = v20;
  sub_100005B18(&qword_100141228);
  sub_100034F0C(&qword_100141230, (void (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule);
  sub_10003D670();
  TimelineView<>.init(_:content:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v21);
}

uint64_t sub_100033790@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v38 = a3;
  uint64_t v4 = type metadata accessor for ShaderFunction();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Shader();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  __chkstk_darwin(v6);
  uint64_t v29 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RippleView(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_100005B18(&qword_100141268);
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  __chkstk_darwin(v11);
  unint64_t v30 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036118(a1, (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RippleView);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  sub_100038934((uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for RippleView);
  uint64_t v15 = static Alignment.center.getter();
  sub_10002AAB8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v47, 0.0, 1, INFINITY, 0, v15, v16, (uint64_t)sub_10003DA3C, v14);
  swift_release();
  long long v43 = v47[4];
  long long v44 = v47[5];
  long long v45 = v47[6];
  long long v46 = v47[7];
  long long v39 = v47[0];
  long long v40 = v47[1];
  long long v41 = v47[2];
  long long v42 = v47[3];
  static ShaderLibrary.subscript.getter();
  sub_100005B18(&qword_100141270);
  type metadata accessor for Shader.Argument();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10010DC70;
  Date.timeIntervalSinceNow.getter();
  static Shader.Argument._float(_:)();
  GeometryProxy.size.getter();
  static Shader.Argument._float2(_:_:)();
  static Shader.Argument._float2(_:_:)();
  uint64_t v17 = v28;
  unint64_t v18 = v29;
  ShaderFunction.dynamicallyCall(withArguments:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
  Date.timeIntervalSinceNow.getter();
  sub_100005B18(&qword_100141240);
  sub_10003D754(&qword_100141248, &qword_100141240, (void (*)(void))sub_10003D7D0);
  unint64_t v19 = v30;
  View.layerEffect(_:maxSampleOffset:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v37);
  v48[4] = v43;
  v48[5] = v44;
  v48[6] = v45;
  v48[7] = v46;
  v48[0] = v39;
  v48[1] = v40;
  v48[2] = v41;
  v48[3] = v42;
  sub_10003DAA8((uint64_t)v48);
  uint64_t v20 = static SafeAreaRegions.all.getter();
  char v21 = static Edge.Set.all.getter();
  uint64_t v23 = v34;
  uint64_t v22 = v35;
  uint64_t v24 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v38, v19, v35);
  uint64_t v25 = v24 + *(int *)(sub_100005B18(&qword_100141228) + 36);
  *(void *)uint64_t v25 = v20;
  *(unsigned char *)(v25 + 8) = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v19, v22);
}

uint64_t sub_100033D34@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_100036118(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RippleView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_100038934((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for RippleView);
  *a2 = sub_10003D21C;
  a2[1] = (uint64_t (*)(uint64_t))v7;
  return result;
}

void (*sub_100033E48(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1000377EC(v6, a2, a3);
  return sub_100033EC8;
}

void sub_100033EC8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_100033F1C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_100037B90(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(type metadata accessor for RemoteAlertRequest() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = sub_100038934(v10, a2, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1000340B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000310F8(a1, a2, v6);
}

unint64_t sub_100034130()
{
  unint64_t result = qword_100140D90;
  if (!qword_100140D90)
  {
    sub_10000B448(&qword_100140D50);
    sub_10001758C(&qword_100140D98, &qword_100140D48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140D90);
  }
  return result;
}

unint64_t sub_1000341D0()
{
  unint64_t result = qword_100140DA0;
  if (!qword_100140DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140DA0);
  }
  return result;
}

uint64_t sub_100034228()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v24 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4 + v2[14];
  uint64_t v7 = type metadata accessor for AccessPointAnchoring();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  sub_100005B18(&qword_100140C40);
  swift_release();
  v8(v5 + v2[15], v7);
  uint64_t v9 = v1;
  swift_release();
  uint64_t v10 = v5 + v2[16];
  uint64_t v11 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v10 + *(int *)(v11 + 28);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = v1;
    uint64_t v4 = (v3 + 16) & ~v3;
  }
  uint64_t v15 = v3 | 7;
  uint64_t v16 = v5 + v2[17];
  uint64_t v17 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t v18 = v16 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v19 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v20 = v5 + v2[20];
  swift_release();
  swift_release();
  uint64_t v21 = v20 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v22 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);

  return _swift_deallocObject(v9, v4 + v24, v15);
}

uint64_t sub_1000345D8()
{
  return sub_100035038(sub_1000317F4);
}

unint64_t sub_1000345F0()
{
  unint64_t result = qword_100140DB0;
  if (!qword_100140DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140DB0);
  }
  return result;
}

uint64_t sub_100034644@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000346F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000347D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for AccessPointAnchoring();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000348D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AccessPointAnchoring();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100034A58@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
  return result;
}

uint64_t sub_100034B08()
{
  return swift_release();
}

uint64_t sub_100034BD8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  return result;
}

uint64_t sub_100034C88()
{
  return swift_release();
}

uint64_t sub_100034D54@<X0>(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  sub_100034F0C((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_100034E08()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_100034EE8(uint64_t a1, char a2)
{
  return sub_100035590(a1, a2, 0xD00000000000001DLL, 0x80000001000FC6F0);
}

uint64_t sub_100034F0C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100034F58()
{
  return sub_100034F90((void (*)(void))type metadata accessor for AccessPointShaderTransitionView);
}

uint64_t sub_100034F90(void (*a1)(void))
{
  return sub_1000332FC();
}

uint64_t sub_100035020()
{
  return sub_100035038((uint64_t (*)(uint64_t))sub_10003243C);
}

uint64_t sub_100035038(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1000350B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003E30C;
  return sub_10003264C(v3);
}

uint64_t sub_100035184()
{
  return sub_1000D8A80(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000351A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_10002B72C(a1, v5, v6, v7);
}

uint64_t sub_100035290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100140FF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000170C8(v2, (uint64_t)v10, &qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DynamicTypeSize();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    uint64_t v14 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v18[1] = a1;
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      void v18[2] = sub_100036BF8(0x5463696D616E7944, 0xEF657A6953657079, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_100035550(uint64_t a1, char a2)
{
  return sub_100035590(a1, a2, 0xD000000000000010, 0x80000001000FCA70);
}

uint64_t sub_10003556C(uint64_t a1, char a2)
{
  return sub_100035590(a1, a2, 0x4865727574736547, 0xEE0072656C646E61);
}

uint64_t sub_100035590(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for EnvironmentValues();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    os_log_type_t v13 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      unint64_t v18 = a4;
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      uint64_t v19 = sub_100036BF8(a3, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v20;
  }
  return a1;
}

uint64_t sub_100035798(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_100036BF8(1819242306, 0xE400000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10003A524(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_10003599C(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000359AC(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1000359E8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100035AC4;
  return v6(a1);
}

uint64_t sub_100035AC4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100035BBC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10003E30C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100140DF0 + dword_100140DF0);
  return v6(a1, v4);
}

uint64_t sub_100035C78()
{
  uint64_t v1 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v23 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + v3;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[14];
  uint64_t v6 = type metadata accessor for AccessPointAnchoring();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  sub_100005B18(&qword_100140C40);
  swift_release();
  v7(v0 + v3 + v1[15], v6);
  uint64_t v8 = v0;
  swift_release();
  uint64_t v9 = v0 + v3 + v1[16];
  uint64_t v10 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + *(int *)(v10 + 28);
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v0;
    uint64_t v3 = (v2 + 32) & ~v2;
  }
  uint64_t v14 = v2 | 7;
  uint64_t v15 = v4 + v1[17];
  uint64_t v16 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v15 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v18 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v19 = v4 + v1[20];
  swift_release();
  swift_release();
  uint64_t v20 = v19 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v21 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);

  return _swift_deallocObject(v8, v3 + v23, v14);
}

uint64_t sub_10003602C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_10002BC10(a1, v5, v6, v7);
}

uint64_t sub_100036118(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036180(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000361E0()
{
  return sub_10002C1E4();
}

uint64_t sub_1000361FC()
{
  return sub_1000324C4(*(void *)(v0 + 16));
}

uint64_t sub_100036218()
{
  return sub_1000D8A70(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100036238()
{
  return sub_100032024(*(void *)(v0 + 16));
}

uint64_t sub_100036254()
{
  return sub_1000D89C4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100036270(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = sub_100005B18(&qword_100141258);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100005B18(&qword_100141260);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = v7 - 8;
  if (*(void *)(v9 + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000363A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100036500(a1, a2, a3, a4, &qword_100141220, type metadata accessor for AccessPointHighlight, type metadata accessor for AccessPointHighlight);
}

char *sub_1000363CC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100005B18(&qword_100141218);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100038CAC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000364DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100036500(a1, a2, a3, a4, &qword_100140E40, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
}

uint64_t sub_100036500(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100005B18(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100038DA0(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_100036780(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100005B18(&qword_100140FF8);
  uint64_t v10 = *(void *)(sub_100005B18(&qword_100141000) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100005B18(&qword_100141000) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10003A310(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_1000369F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100036A18(a1, a2, a3, a4, &qword_100141040, &qword_100141048);
}

void *sub_100036A04(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100036A18(a1, a2, a3, a4, &qword_100141030, &qword_100141038);
}

void *sub_100036A18(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100005B18(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 1;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 5);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[4 * v11 + 4]) {
          memmove(v16, a4 + 4, 32 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003A530(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100036B34(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100036A18(a1, a2, a3, a4, &qword_100141020, &qword_100141028);
}

unsigned char **sub_100036B48(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100036B58(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100036B80(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100036BF8(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100036BF8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100036CCC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100036E88((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100036E88((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100007188((uint64_t)v12);
  return v7;
}

uint64_t sub_100036CCC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100036EE4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100036E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100036EE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100036F7C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000371D8(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000371D8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100036F7C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1000370F4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000370F4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100005B18(&qword_100140E18);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10003715C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1000371D8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100005B18(&qword_100140E18);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003732C()
{
  return sub_100039D04();
}

uint64_t sub_10003734C()
{
  return sub_100035038(sub_100031B2C);
}

uint64_t sub_100037370(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  int64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_100031DD4(a1, v5, v6, v7);
}

unint64_t sub_10003745C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100037638(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *unint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            BOOL v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void (*sub_1000377EC(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100037AA4(v6);
  v6[10] = sub_10003790C(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_100037898;
}

void sub_100037898(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_10003790C(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  Swift::Int v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000DC324(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *Swift::Int v10 = v19;
        return sub_100037A54;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10006FEFC();
      goto LABEL_7;
    }
    sub_10006E3C0(v16, a4 & 1);
    unint64_t v20 = sub_1000DC324(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100037A54(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100037AE0(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_100037AA4(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_100037AD4;
}

uint64_t sub_100037AD4(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_100037AE0(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_10006FB10(a4, a5, a6, v8, (void *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10003745C(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100037B90(unint64_t a1)
{
  return sub_100036500(0, *(void *)(a1 + 16), 0, a1, &qword_100140E40, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
}

void (*sub_100037BD8(uint64_t a1, int a2, uint64_t a3))(void *a1)
{
  uint64_t v100 = a3;
  int v97 = a2;
  uint64_t v4 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v4 - 8);
  uint64_t v96 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100140E30);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v98 = (char *)&v87 - v10;
  uint64_t v103 = type metadata accessor for RemoteAlertRequest();
  uint64_t v11 = *(void *)(v103 - 8);
  uint64_t v12 = __chkstk_darwin(v103);
  uint64_t v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v99 = (uint64_t)&v87 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v87 - v17;
  v109[3] = type metadata accessor for RemoteAlertAccessPointContext(0);
  v109[4] = &off_100134CA8;
  v109[0] = a1;
  swift_retain();
  uint64_t v102 = sub_1000D99F4();
  if (!v19) {
    return (void (*)(void *))sub_100007188((uint64_t)v109);
  }
  unint64_t v20 = v19;
  uint64_t v92 = v9;
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100007D4C(v21, (uint64_t)qword_100156CF8);
  sub_10003D160((uint64_t)v109, (uint64_t)v106);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v95 = v18;
  uint64_t v93 = v14;
  uint64_t v94 = v22;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    v104[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v105 = sub_100036BF8(v102, v20, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v27 = sub_100006650(v106, v107);
    uint64_t v29 = *(void *)(*v27 + 32);
    unint64_t v28 = *(void *)(*v27 + 40);
    swift_bridgeObjectRetain();
    uint64_t v105 = sub_100036BF8(v29, v28, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100007188((uint64_t)v106);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finding completed request for token: %s, contextID: %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100007188((uint64_t)v106);
  }

  uint64_t v30 = v100;
  uint64_t v31 = (uint64_t *)(v100 + 112);
  swift_beginAccess();
  uint64_t v32 = *(void *)(v30 + 112);
  if (!*(void *)(v32 + 16))
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return (void (*)(void *))sub_100007188((uint64_t)v109);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v33 = sub_1000DC324(v102, v20);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_41;
  }
  uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v88 = v31;
  unint64_t v90 = v20;
  unint64_t v37 = 0;
  unint64_t v87 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v91 = v35;
  uint64_t v38 = v35 + v87;
  uint64_t v89 = v11;
  uint64_t v101 = *(void *)(v11 + 72);
  uint64_t v39 = v103;
  while (1)
  {
    uint64_t v40 = *(void *)(v38 + *(int *)(v39 + 24)) + 64;
    swift_beginAccess();
    sub_1000170C8(v40, (uint64_t)v106, &qword_1001444D0);
    uint64_t v41 = v107;
    if (!v107)
    {
      sub_100017388((uint64_t)v106, &qword_1001444D0);
      goto LABEL_12;
    }
    uint64_t v42 = v108;
    long long v43 = sub_100006650(v106, v107);
    uint64_t v44 = *(void *)(v41 - 8);
    __chkstk_darwin(v43);
    long long v46 = (char *)&v87 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v44 + 16))(v46);
    sub_100017388((uint64_t)v106, &qword_1001444D0);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
    uint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v41);
    if (v47 == *(void *)(v109[0] + 32) && v49 == *(void *)(v109[0] + 40)) {
      break;
    }
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = v103;
    if (v51) {
      goto LABEL_25;
    }
LABEL_12:
    ++v37;
    v38 += v101;
    if (v36 == v37) {
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  unint64_t v52 = v90;
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_10006AF5C();
  uint64_t v54 = sub_100033E48(v104, v102, v52);
  uint64_t v56 = (uint64_t)v95;
  uint64_t v57 = v89;
  if (!*v55)
  {
    ((void (*)(uint64_t *, void))v54)(v104, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v53)(v106, 0);
    goto LABEL_41;
  }
  uint64_t v58 = v99;
  sub_100033F1C(v37, v99);
  ((void (*)(uint64_t *, void))v54)(v104, 0);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t *, void))v53)(v106, 0);
  sub_100038934(v58, v56, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
  swift_bridgeObjectRetain_n();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = (uint8_t *)swift_slowAlloc();
    v106[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 136315138;
    swift_bridgeObjectRetain();
    v104[0] = sub_100036BF8(v102, v52, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Removing completed request for token: %s", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v62 = (uint64_t)v98;
  uint64_t v63 = v88;
  uint64_t v64 = *(void (**)(uint64_t))(v56 + *(int *)(v103 + 28));
  if (v64)
  {
    uint64_t v65 = swift_retain();
    v64(v65);
    sub_100039104((uint64_t)v64);
  }
  uint64_t v66 = *v63;
  if (!*(void *)(*v63 + 16)) {
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v67 = sub_1000DC324(v102, v52);
  if ((v68 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_37:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v62, 1, 1, v103);
LABEL_38:
    sub_100017388(v62, &qword_100140E30);
    if (v97)
    {
      uint64_t v73 = type metadata accessor for TaskPriority();
      uint64_t v74 = (uint64_t)v96;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v96, 1, 1, v73);
      uint64_t v75 = (void *)swift_allocObject();
      v75[2] = 0;
      v75[3] = 0;
      v75[4] = v102;
      v75[5] = v52;
      sub_10002C340(v74, (uint64_t)&unk_100140E38, (uint64_t)v75);
      swift_release();
      sub_100036180(v56, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
      return (void (*)(void *))sub_100007188((uint64_t)v109);
    }
    sub_100036180(v56, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    goto LABEL_41;
  }
  uint64_t v69 = *(void *)(*(void *)(v66 + 56) + 8 * v67);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v69 + 16))
  {
    sub_100036118(v69 + v87, v62, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
    uint64_t v71 = v62;
    uint64_t v72 = 0;
  }
  else
  {
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
    uint64_t v71 = v62;
    uint64_t v72 = 1;
  }
  uint64_t v77 = v103;
  v70(v71, v72, 1, v103);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v62, 1, v77) == 1) {
    goto LABEL_38;
  }
  uint64_t v78 = (uint64_t)v93;
  sub_100038934(v62, (uint64_t)v93, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
  uint64_t v79 = *(void *)(v78 + *(int *)(v77 + 24));
  unint64_t v80 = (void *)*(unsigned __int8 *)(v78 + *(int *)(v77 + 20));
  swift_retain();
  LOBYTE(v80) = sub_100072354(v78, v80, v79);
  swift_release();
  if (v80)
  {
    swift_bridgeObjectRelease();
    sub_100036180(v78, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    sub_100036180(v56, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    return (void (*)(void *))sub_100007188((uint64_t)v109);
  }
  uint64_t v81 = sub_10006AF5C();
  uint64_t result = sub_100033E48(v104, v102, v52);
  uint64_t v82 = (void (*)(uint64_t *, void))result;
  uint64_t v84 = *v83;
  if (!*v83)
  {
    ((void (*)(uint64_t *, void))result)(v104, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v81)(v106, 0);
    uint64_t v86 = 1;
    uint64_t v85 = (uint64_t)v92;
LABEL_51:
    sub_100036180(v78, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    sub_100036180(v56, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    v70(v85, v86, 1, v103);
    sub_100017388(v85, &qword_100140E30);
    return (void (*)(void *))sub_100007188((uint64_t)v109);
  }
  if (*(void *)(v84 + 16))
  {
    uint64_t v85 = (uint64_t)v92;
    sub_100036118(v84 + v87, (uint64_t)v92, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
    sub_100038EFC(0, 1);
    v82(v104, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v81)(v106, 0);
    uint64_t v86 = 0;
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

uint64_t sub_100038934(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003899C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000389DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000243C4;
  return sub_10006BA00(a1, v4, v5, v7, v6);
}

uint64_t sub_100038A9C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  *int64_t v3 = v2;
  v3[1] = sub_100038B7C;
  return v5(v2 + 16);
}

uint64_t sub_100038B7C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  int64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100038CAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100038DA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100038EFC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_100036500(isUniquelyReferenced_nonNull_native, v11, 1, v4, &qword_100140E40, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest, (uint64_t (*)(void))type metadata accessor for RemoteAlertRequest);
  }
  uint64_t v12 = *(void *)(type metadata accessor for RemoteAlertRequest() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100039104(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100039114()
{
  return sub_1000D8988(v0[2], v0[3], v0[4]);
}

unint64_t sub_10003913C()
{
  unint64_t result = qword_100142A50;
  if (!qword_100142A50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100142A50);
  }
  return result;
}

uint64_t sub_10003917C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000391C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_1000316E4(a1, v4, v5, v7, v6);
}

uint64_t sub_100039284()
{
  return sub_1000399FC(40);
}

uint64_t sub_10003928C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003E30C;
  return sub_1000315DC(a1, v4, v5, v6);
}

uint64_t sub_100039340()
{
  return sub_1000D9170();
}

uint64_t sub_100039360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10002E0C8(v6, a1, a2);
}

uint64_t type metadata accessor for RippleView(uint64_t a1)
{
  return sub_100017090(a1, qword_1001410A8);
}

uint64_t sub_100039404()
{
  return sub_100035038((uint64_t (*)(uint64_t))sub_100030C9C);
}

uint64_t sub_10003941C()
{
  return sub_100030D90(*(void *)(v0 + 16));
}

uint64_t sub_100039438()
{
  return sub_100096698(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100039464()
{
  uint64_t v1 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v32 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for GeometryProxy();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  uint64_t v4 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = *(void *)(v29 + 64);
  uint64_t v28 = v0;
  uint64_t v5 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v5 + v1[14];
  uint64_t v7 = type metadata accessor for AccessPointAnchoring();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  sub_100005B18(&qword_100140C40);
  swift_release();
  v8(v5 + v1[15], v7);
  swift_release();
  uint64_t v9 = v5 + v1[16];
  uint64_t v10 = type metadata accessor for Game();
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  uint64_t v13 = v31;
  uint64_t v12 = v32;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v9 + *(int *)(v10 + 28);
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v31;
    uint64_t v12 = v32;
  }
  uint64_t v17 = v2 | v4 | 7;
  uint64_t v18 = (((v2 + 16) & ~v2) + v12 + v4) & ~v4;
  uint64_t v19 = v18 + v13;
  uint64_t v20 = v5 + v1[17];
  uint64_t v21 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = v20 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v23 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v24 = v5 + v1[20];
  swift_release();
  swift_release();
  uint64_t v25 = v24 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v26 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28 + v18, v30);

  return _swift_deallocObject(v28, v19, v17);
}

uint64_t sub_100039888()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  return sub_10002F508(v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

unint64_t sub_10003994C()
{
  unint64_t result = qword_100140EB8;
  if (!qword_100140EB8)
  {
    sub_10000B448(&qword_100140E88);
    sub_10001758C(&qword_100140EC0, &qword_100140E80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140EB8);
  }
  return result;
}

uint64_t sub_1000399F4()
{
  return sub_1000399FC(72);
}

uint64_t sub_1000399FC(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100039A48(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  double v8 = v1[6];
  double v9 = v1[7];
  double v10 = v1[8];
  int v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *int v11 = v2;
  v11[1] = sub_10003E30C;
  return sub_100032748(v7, v8, v9, v10, a1, v4, v5, v6);
}

unint64_t sub_100039B2C()
{
  unint64_t result = qword_100140F78;
  if (!qword_100140F78)
  {
    sub_10000B448(&qword_100140F58);
    sub_10001758C(&qword_100140F80, &qword_100140F50);
    sub_10001758C(&qword_100140F88, &qword_100140F38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140F78);
  }
  return result;
}

uint64_t sub_100039BF0(uint64_t a1)
{
  return sub_10003D248(a1, type metadata accessor for AccessPointShaderTransitionView, (uint64_t (*)(uint64_t, uint64_t))sub_10002D07C);
}

uint64_t sub_100039C1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100039C70(uint64_t a1)
{
  return a1;
}

uint64_t sub_100039CD0()
{
  return sub_100035038((uint64_t (*)(uint64_t))sub_10002D730);
}

uint64_t sub_100039CE8()
{
  return sub_100039D04();
}

uint64_t sub_100039D04()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100039D64(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AccessPointContentView(uint64_t a1)
{
  return sub_100017090(a1, qword_100141148);
}

uint64_t sub_100039DB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for GeometryProxy();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  double v7 = (int *)type metadata accessor for AccessPointShaderTransitionView(0);
  uint64_t v8 = *(unsigned __int8 *)(*((void *)v7 - 1) + 80);
  uint64_t v34 = (v5 + v6 + v8) & ~v8;
  uint64_t v33 = *(void *)(*((void *)v7 - 1) + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  uint64_t v9 = v1 + v34;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = v1 + v34 + v7[14];
  uint64_t v11 = type metadata accessor for AccessPointAnchoring();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  sub_100005B18(&qword_100140C40);
  swift_release();
  v12(v1 + v34 + v7[15], v11);
  uint64_t v13 = v1;
  swift_release();
  uint64_t v14 = v1 + v34 + v7[16];
  uint64_t v15 = type metadata accessor for Game();
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
  uint64_t v18 = v33;
  uint64_t v17 = v34;
  if (!v16)
  {
    uint64_t v19 = v8;
    uint64_t v20 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v14 + *(int *)(v15 + 28);
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v20;
    uint64_t v18 = v33;
    uint64_t v17 = v34;
    uint64_t v8 = v19;
  }
  uint64_t v24 = v17 + v18;
  uint64_t v25 = v9 + v7[17];
  uint64_t v26 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  uint64_t v27 = v25 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v28 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v29 = v9 + v7[20];
  swift_release();
  swift_release();
  uint64_t v30 = v29 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v31 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);

  return _swift_deallocObject(v13, v24, v4 | v8 | 7);
}

uint64_t sub_10003A1E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointShaderTransitionView(0) - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_10002D5C4(v0 + v2, v5);
}

uint64_t sub_10003A2B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003A2E8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10003A310(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100005B18(&qword_100141000) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003A46C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000243C4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100141008 + dword_100141008);
  return v6(a1, v4);
}

uint64_t sub_10003A524(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10003A530(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 32 * a1 + 32;
    unint64_t v7 = a3 + 32 * v5;
    if (v6 >= v7 || v6 + 32 * v5 <= a3)
    {
      sub_100005B18(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003A638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10003A6A0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    uint64_t v10 = (int *)type metadata accessor for Game();
    uint64_t v11 = *((void *)v10 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100005B18(&qword_100140B48);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v37 = v11;
      uint64_t v14 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v14;
      uint64_t v15 = v9[3];
      void v8[2] = v9[2];
      v8[3] = v15;
      uint64_t v16 = v9[5];
      v8[4] = v9[4];
      v8[5] = v16;
      uint64_t v17 = v10[7];
      __dst = (char *)v8 + v17;
      uint64_t v39 = (char *)v9 + v17;
      uint64_t v18 = type metadata accessor for Date();
      uint64_t v35 = *(void *)(v18 - 8);
      uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      uint64_t v19 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v38(v39, 1, v19))
      {
        uint64_t v20 = sub_100005B18(&qword_100140C48);
        memcpy(__dst, v39, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v39, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v19);
      }
      *(void *)((char *)v8 + v10[8]) = *(void *)((char *)v9 + v10[8]);
      *((unsigned char *)v8 + v10[9]) = *((unsigned char *)v9 + v10[9]);
      *((unsigned char *)v8 + v10[10]) = *((unsigned char *)v9 + v10[10]);
      *((unsigned char *)v8 + v10[11]) = *((unsigned char *)v9 + v10[11]);
      *((unsigned char *)v8 + v10[12]) = *((unsigned char *)v9 + v10[12]);
      *((unsigned char *)v8 + v10[13]) = *((unsigned char *)v9 + v10[13]);
      *((unsigned char *)v8 + v10[14]) = *((unsigned char *)v9 + v10[14]);
      uint64_t v21 = v10[15];
      uint64_t v22 = (void *)((char *)v8 + v21);
      uint64_t v23 = (void *)((char *)v9 + v21);
      uint64_t v24 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v24;
      uint64_t v25 = *(void (**)(void *, void, uint64_t, int *))(v37 + 56);
      swift_bridgeObjectRetain();
      v25(v8, 0, 1, v10);
    }
    uint64_t v26 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    uint64_t v30 = a3[8];
    uint64_t v31 = (uint64_t *)((char *)v4 + v30);
    uint64_t v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
  }
  swift_retain();
  return v4;
}

uint64_t sub_10003AA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 28);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return swift_release();
}

_OWORD *sub_10003AB88(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for Game();
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100005B18(&qword_100140B48);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v10;
    uint64_t v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    uint64_t v13 = v8[3];
    v7[2] = v8[2];
    v7[3] = v13;
    uint64_t v14 = v8[5];
    v7[4] = v8[4];
    v7[5] = v14;
    uint64_t v15 = v9[7];
    uint64_t v35 = (char *)v8 + v15;
    __dst = (char *)v7 + v15;
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v33 = *(void *)(v16 - 8);
    uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    uint64_t v17 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v34(v35, 1, v17))
    {
      uint64_t v18 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v35, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v35, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v17);
    }
    *(void *)((char *)v7 + v9[8]) = *(void *)((char *)v8 + v9[8]);
    *((unsigned char *)v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
    *((unsigned char *)v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
    *((unsigned char *)v7 + v9[11]) = *((unsigned char *)v8 + v9[11]);
    *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
    *((unsigned char *)v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
    *((unsigned char *)v7 + v9[14]) = *((unsigned char *)v8 + v9[14]);
    uint64_t v19 = v9[15];
    uint64_t v20 = (void *)((char *)v7 + v19);
    uint64_t v21 = (void *)((char *)v8 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = *(void (**)(void *, void, uint64_t, int *))(v37 + 56);
    swift_bridgeObjectRetain();
    v23(v7, 0, 1, v9);
  }
  uint64_t v24 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
  uint64_t v28 = a3[8];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  swift_retain();
  return a1;
}

void *sub_10003AE98(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for Game();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_100036180((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_7;
    }
    uint64_t v50 = v3;
    *uint64_t v7 = *v8;
    v7[1] = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7[2] = v8[2];
    v7[3] = v8[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7[4] = v8[4];
    v7[5] = v8[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v19 = v9[7];
    uint64_t v20 = (char *)v7 + v19;
    uint64_t v21 = (char *)v8 + v19;
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v45 = *(void *)(v22 - 8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    __dsta = v20;
    LODWORD(v20) = v23(v20, 1, v22);
    int v24 = v23(v21, 1, v22);
    if (v20)
    {
      if (!v24)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 16))(__dsta, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(__dsta, 0, 1, v22);
        goto LABEL_18;
      }
      size_t v25 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v26 = __dsta;
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 24))(__dsta, v21, v22);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v45 + 8))(__dsta, v22);
      size_t v25 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v26 = __dsta;
    }
    memcpy(v26, v21, v25);
LABEL_18:
    uint64_t v3 = v50;
    *(void *)((char *)v7 + v9[8]) = *(void *)((char *)v8 + v9[8]);
    *((unsigned char *)v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
    *((unsigned char *)v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
    *((unsigned char *)v7 + v9[11]) = *((unsigned char *)v8 + v9[11]);
    *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
    *((unsigned char *)v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
    *((unsigned char *)v7 + v9[14]) = *((unsigned char *)v8 + v9[14]);
    uint64_t v31 = v9[15];
    uint64_t v32 = (void *)((char *)v7 + v31);
    uint64_t v33 = (void *)((char *)v8 + v31);
    *uint64_t v32 = *v33;
    v32[1] = v33[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v18 = sub_100005B18(&qword_100140B48);
    memcpy(v7, v8, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v49 = v3;
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[4] = v8[4];
  v7[5] = v8[5];
  uint64_t v14 = v9[7];
  __src = (char *)v8 + v14;
  __dst = (char *)v7 + v14;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v43 = *(void *)(v15 - 8);
  uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v44(__src, 1, v16))
  {
    uint64_t v17 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, __src, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(__dst, __src, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v16);
  }
  uint64_t v3 = v49;
  *(void *)((char *)v7 + v9[8]) = *(void *)((char *)v8 + v9[8]);
  *((unsigned char *)v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
  *((unsigned char *)v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
  *((unsigned char *)v7 + v9[11]) = *((unsigned char *)v8 + v9[11]);
  *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
  *((unsigned char *)v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
  *((unsigned char *)v7 + v9[14]) = *((unsigned char *)v8 + v9[14]);
  uint64_t v27 = v9[15];
  uint64_t v28 = (void *)((char *)v7 + v27);
  uint64_t v29 = (void *)((char *)v8 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  uint64_t v30 = *(void (**)(void *, void, uint64_t, int *))(v10 + 56);
  swift_bridgeObjectRetain();
  v30(v7, 0, 1, v9);
LABEL_19:
  *(void *)((char *)a1 + v3[6]) = *(void *)((char *)a2 + v3[6]);
  uint64_t v34 = v3[7];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  uint64_t v38 = v3[8];
  uint64_t v39 = (void *)((char *)a1 + v38);
  uint64_t v40 = (void *)((char *)a2 + v38);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_10003B47C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for Game();
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100005B18(&qword_100140B48);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    long long v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    v7[2] = v8[2];
    uint64_t v13 = v9[7];
    __dst = (char *)v7 + v13;
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(void *)((char *)v7 + v9[8]) = *(void *)((char *)v8 + v9[8]);
    *((unsigned char *)v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
    *((unsigned char *)v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
    *((unsigned char *)v7 + v9[11]) = *((unsigned char *)v8 + v9[11]);
    *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
    *((unsigned char *)v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
    *((unsigned char *)v7 + v9[14]) = *((unsigned char *)v8 + v9[14]);
    *(_OWORD *)((char *)v7 + v9[15]) = *(_OWORD *)((char *)v8 + v9[15]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v18 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_10003B738(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for Game();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_100036180((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_7;
    }
    uint64_t v21 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v21;
    swift_bridgeObjectRelease();
    uint64_t v22 = v8[3];
    v7[2] = v8[2];
    v7[3] = v22;
    swift_bridgeObjectRelease();
    uint64_t v23 = v8[5];
    v7[4] = v8[4];
    v7[5] = v23;
    swift_bridgeObjectRelease();
    uint64_t v24 = v9[7];
    size_t v25 = (char *)v7 + v24;
    __dsta = (char *)v8 + v24;
    uint64_t v26 = type metadata accessor for Date();
    uint64_t v41 = *(void *)(v26 - 8);
    uint64_t v42 = v25;
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
    LODWORD(v25) = v27(v25, 1, v26);
    int v28 = v27(__dsta, 1, v26);
    if (v25)
    {
      if (!v28)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 32))(v42, __dsta, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v26);
        goto LABEL_18;
      }
      size_t v29 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v30 = v42;
    }
    else
    {
      if (!v28)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 40))(v42, __dsta, v26);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v41 + 8))(v42, v26);
      size_t v29 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v30 = v42;
    }
    memcpy(v30, __dsta, v29);
LABEL_18:
    *(void *)((char *)v7 + v9[8]) = *(void *)((char *)v8 + v9[8]);
    *((unsigned char *)v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
    *((unsigned char *)v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
    *((unsigned char *)v7 + v9[11]) = *((unsigned char *)v8 + v9[11]);
    *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
    *((unsigned char *)v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
    *((unsigned char *)v7 + v9[14]) = *((unsigned char *)v8 + v9[14]);
    uint64_t v31 = v9[15];
    uint64_t v32 = (void *)((char *)v7 + v31);
    uint64_t v33 = (void *)((char *)v8 + v31);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    *uint64_t v32 = v35;
    v32[1] = v34;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_7:
    uint64_t v20 = sub_100005B18(&qword_100140B48);
    memcpy(v7, v8, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  long long v14 = *((_OWORD *)v8 + 1);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  *((_OWORD *)v7 + 1) = v14;
  *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
  uint64_t v15 = v9[7];
  __dst = (char *)v7 + v15;
  uint64_t v16 = (char *)v8 + v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  *(void *)((char *)v7 + v9[8]) = *(void *)((char *)v8 + v9[8]);
  *((unsigned char *)v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
  *((unsigned char *)v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
  *((unsigned char *)v7 + v9[11]) = *((unsigned char *)v8 + v9[11]);
  *((unsigned char *)v7 + v9[12]) = *((unsigned char *)v8 + v9[12]);
  *((unsigned char *)v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
  *((unsigned char *)v7 + v9[14]) = *((unsigned char *)v8 + v9[14]);
  *(_OWORD *)((char *)v7 + v9[15]) = *(_OWORD *)((char *)v8 + v9[15]);
  (*(void (**)(void *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_19:
  uint64_t v36 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 40))(v37, v38, v39);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_10003BC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003BC60);
}

uint64_t sub_10003BC60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140B48);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[8]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_10003BD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003BD88);
}

uint64_t sub_10003BD88(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100005B18(&qword_100140B48);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[8]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

void sub_10003BE98()
{
  sub_100028B2C(319, (unint64_t *)&qword_100140CD0, (uint64_t (*)(uint64_t))type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t destroy for CollapsibleAccessPointFrame()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CollapsibleAccessPointFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollapsibleAccessPointFrame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for FlowDestination(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CollapsibleAccessPointFrame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollapsibleAccessPointFrame(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollapsibleAccessPointFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollapsibleAccessPointFrame()
{
  return &type metadata for CollapsibleAccessPointFrame;
}

void *sub_10003C1F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for PageID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for AccessPointContainer(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for PageMetrics();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *((unsigned char *)v4 + v8[6]) = *((unsigned char *)a2 + v8[6]);
    *(void *)((char *)v4 + v8[7]) = *(void *)((char *)a2 + v8[7]);
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (void *)((char *)v4 + v13);
    uint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    v15[2] = v16[2];
    uint64_t v18 = (void *)((char *)v4 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10003C36C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v4 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10003C45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  *(unsigned char *)(a1 + v7[6]) = *(unsigned char *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  v14[2] = v15[2];
  uint64_t v17 = (void *)(a1 + v13);
  uint64_t v18 = (void *)(a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10003C588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(unsigned char *)(a1 + v7[6]) = *(unsigned char *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_retain();
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_retain();
  swift_release();
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10003C6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(unsigned char *)(a1 + v7[6]) = *(unsigned char *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_10003C7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(unsigned char *)(a1 + v7[6]) = *(unsigned char *)(a2 + v7[6]);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_release();
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_release();
  return a1;
}

uint64_t sub_10003C930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C944);
}

uint64_t sub_10003C944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccessPointContainer(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10003CA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003CA1C);
}

uint64_t sub_10003CA1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AccessPointContainer(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10003CADC()
{
  uint64_t result = type metadata accessor for AccessPointContainer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessPointShaderTransitionView.AnimationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003CC48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointShaderTransitionView.AnimationState()
{
  return &type metadata for AccessPointShaderTransitionView.AnimationState;
}

unint64_t sub_10003CC84()
{
  unint64_t result = qword_100141188;
  if (!qword_100141188)
  {
    sub_10000B448(&qword_100140D78);
    sub_10000B448(&qword_100140D68);
    sub_10000B448(&qword_100140D60);
    type metadata accessor for AccessPointAnchoring();
    sub_10000B448(&qword_100140D58);
    sub_10000B448(&qword_100140D50);
    sub_100034130();
    sub_1000341D0();
    swift_getOpaqueTypeConformance2();
    sub_1000345F0();
    swift_getOpaqueTypeConformance2();
    sub_100034F0C(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100034F0C(&qword_100141190, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141188);
  }
  return result;
}

uint64_t sub_10003CE84()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003CEA0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003CEBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003CED8()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessPointContentView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v9 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10003D044()
{
  return sub_100034F90((void (*)(void))type metadata accessor for AccessPointContentView);
}

unint64_t sub_10003D080()
{
  unint64_t result = qword_1001411B8;
  if (!qword_1001411B8)
  {
    sub_10000B448(&qword_1001411A0);
    sub_10001758C(&qword_1001411C0, &qword_100141198);
    sub_10001758C(&qword_1001411C8, &qword_1001411D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001411B8);
  }
  return result;
}

uint64_t sub_10003D144()
{
  return sub_100033364();
}

uint64_t sub_10003D160(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10003D1C4()
{
  unint64_t result = qword_1001411F0;
  if (!qword_1001411F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001411F0);
  }
  return result;
}

uint64_t sub_10003D21C(uint64_t a1)
{
  return sub_10003D248(a1, type metadata accessor for RippleView, (uint64_t (*)(uint64_t, uint64_t))sub_100033404);
}

uint64_t sub_10003D248(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t sub_10003D2E0()
{
  uint64_t v1 = type metadata accessor for RippleView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v20 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v20 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v21 = v0;
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v18 = v7;
    uint64_t v19 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + *(int *)(v10 + 28);
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
    uint64_t v7 = v18;
    uint64_t v6 = v19;
  }
  uint64_t v14 = (v3 + v4 + v6) & ~v6;
  uint64_t v15 = v8 + *(int *)(v1 + 28);
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v21 + v14, v20);

  return _swift_deallocObject(v21, v14 + v7, v2 | v6 | 7);
}

uint64_t sub_10003D584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for RippleView(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100033790(v1 + v4, v7, a1);
}

uint64_t sub_10003D668(uint64_t a1)
{
  return sub_100036270(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_10003D670()
{
  unint64_t result = qword_100141238;
  if (!qword_100141238)
  {
    sub_10000B448(&qword_100141228);
    sub_10000B448(&qword_100141240);
    sub_10003D754(&qword_100141248, &qword_100141240, (void (*)(void))sub_10003D7D0);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141238);
  }
  return result;
}

uint64_t sub_10003D754(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003D7D0()
{
  unint64_t result = qword_100141250;
  if (!qword_100141250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141250);
  }
  return result;
}

uint64_t sub_10003D828()
{
  uint64_t v1 = type metadata accessor for RippleView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v6 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v14 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + *(int *)(v6 + 28);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v14;
  }
  uint64_t v10 = v3 + v4;
  uint64_t v11 = v0 + v3 + *(int *)(v1 + 28);
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_release();

  return _swift_deallocObject(v0, v10, v2 | 7);
}

uint64_t sub_10003DA3C()
{
  uint64_t v1 = type metadata accessor for RippleView(0);
  return (*(uint64_t (**)(void))(v0
                              + *(int *)(v1 + 32)
                              + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))))();
}

uint64_t sub_10003DAA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003DAD4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003DB1C()
{
  return sub_100032B64();
}

uint64_t sub_10003DB24(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003DB50(uint64_t a1)
{
  return a1;
}

unint64_t sub_10003DB7C()
{
  unint64_t result = qword_100141298;
  if (!qword_100141298)
  {
    sub_10000B448(&qword_100141278);
    sub_10001758C(&qword_1001412A0, &qword_100141288);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141298);
  }
  return result;
}

uint64_t sub_10003DC1C()
{
  return State.wrappedValue.setter();
}

void *initializeBufferWithCopyOfBuffer for OverlayView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for OverlayView()
{
  return swift_release();
}

void *assignWithCopy for OverlayView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for OverlayView(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OverlayView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OverlayView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OverlayView()
{
  return &type metadata for OverlayView;
}

uint64_t sub_10003DDB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DE24()
{
  return sub_10001758C(&qword_1001412A8, &qword_1001412B0);
}

uint64_t sub_10003DE60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DED0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003DEEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100029A68(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10003DEF4()
{
  unint64_t result = qword_100141338;
  if (!qword_100141338)
  {
    sub_10000B448(&qword_100141320);
    sub_10001758C(&qword_100141340, &qword_100141318);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141338);
  }
  return result;
}

unint64_t sub_10003DF94()
{
  unint64_t result = qword_100141348;
  if (!qword_100141348)
  {
    sub_10000B448(&qword_100141308);
    sub_10001758C(&qword_100141350, &qword_100141300);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141348);
  }
  return result;
}

unint64_t sub_10003E034()
{
  unint64_t result = qword_100141368;
  if (!qword_100141368)
  {
    sub_10000B448(&qword_100141370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141368);
  }
  return result;
}

uint64_t sub_10003E0A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  char v4 = *(unsigned char *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = *(void *)(a1 + 208);
  char v7 = *(unsigned char *)(a1 + 216);
  swift_retain();
  sub_100025F98(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_100025F98(v5, v6, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_10003E148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  char v4 = *(unsigned char *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = *(void *)(a1 + 208);
  char v7 = *(unsigned char *)(a1 + 216);
  swift_release();
  sub_100025F88(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_100025F88(v5, v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10003E1E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_100025F98(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_100025F98(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10003E25C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  sub_100025F88(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_100025F88(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10003E2D0()
{
  return sub_10001758C(&qword_1001413C8, &qword_1001413D0);
}

uint64_t AccessPointContainer.init(id:pageMetrics:useCase:items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = (int *)type metadata accessor for AccessPointContainer(0);
  uint64_t v12 = a5 + v11[5];
  uint64_t v13 = type metadata accessor for PageMetrics();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a2, v13);
  *(unsigned char *)(a5 + v11[6]) = a3;
  *(void *)(a5 + v11[7]) = a4;
  return result;
}

uint64_t type metadata accessor for AccessPointContainer(uint64_t a1)
{
  return sub_100017090(a1, qword_100141468);
}

uint64_t AccessPointContainer.items.getter()
{
  type metadata accessor for AccessPointContainer(0);

  return swift_bridgeObjectRetain();
}

Swift::Double __swiftcall AccessPointContainer.displayDuration(for:)(Swift::Int a1)
{
  uint64_t v3 = sub_100005B18(&qword_1001413D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 28));
  double v12 = 0.0;
  if (*(void *)(v10 + 16) <= a1) {
    return v12;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    sub_10003D160(v10 + 40 * a1 + 32, (uint64_t)v18);
    sub_100005B18(&qword_1001413E0);
    char v13 = swift_dynamicCast();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    if (v13)
    {
      v14(v5, 0, 1, v6);
      sub_100043860((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccessPointHighlight);
      uint64_t v15 = &v9[*(int *)(v6 + 36)];
      double v12 = *(double *)v15;
      int v16 = v15[8];
      sub_100041E48((uint64_t)v9, type metadata accessor for AccessPointHighlight);
      if (v16) {
        return 0.0;
      }
    }
    else
    {
      v14(v5, 1, 1, v6);
      sub_100017388((uint64_t)v5, &qword_1001413D8);
    }
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t AccessPointContainer.componentView(for:)(unint64_t a1)
{
  uint64_t result = type metadata accessor for AccessPointContainer(0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + *(int *)(result + 28));
    if (*(void *)(v4 + 16) > a1)
    {
      sub_10003D160(v4 + 40 * a1 + 32, (uint64_t)v5);
      sub_10003D1C4();
      return ComponentView.init(_:content:)();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10003E714(void *a1)
{
  uint64_t v2 = sub_100005B18(&qword_1001415F8);
  uint64_t v68 = *(void *)(v2 - 8);
  uint64_t v69 = v2;
  __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_100141600);
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  __chkstk_darwin(v4);
  unint64_t v67 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100141608);
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MediaArtwork();
  uint64_t v62 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  __chkstk_darwin(v8);
  os_log_type_t v60 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100005B18(&qword_100141610);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v57 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100005B18(&qword_100141618);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  double v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100005B18(&qword_100141620);
  uint64_t v54 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AccessPointIconType(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_100005B18(&qword_100141628);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v74 = v19;
  uint64_t v75 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_100043764();
  uint64_t v72 = v22;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100041DE0(v76, (uint64_t)v18, type metadata accessor for AccessPointIconType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      LOBYTE(v78) = 1;
      sub_100043A88();
      uint64_t v26 = v74;
      uint64_t v27 = v72;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v56;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v28);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v27, v26);
      break;
    case 2u:
      uint64_t v29 = *v18;
      LOBYTE(v78) = 2;
      sub_1000439C4();
      uint64_t v30 = v57;
      uint64_t v31 = v74;
      uint64_t v32 = v72;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v78 = v29;
      sub_100005B18(&qword_1001415D8);
      sub_100043A18(&qword_100141640, (void (*)(void))sub_100043B30);
      uint64_t v33 = v59;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v33);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v32, v31);
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v35 = v62;
      uint64_t v34 = v63;
      uint64_t v36 = v60;
      (*(void (**)(char *, uint64_t *, uint64_t))(v62 + 32))(v60, v18, v63);
      LOBYTE(v78) = 3;
      sub_100043970();
      uint64_t v37 = v61;
      uint64_t v38 = v74;
      uint64_t v39 = v72;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100043BD8(&qword_100140048, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v40 = v65;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v37, v40);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v39, v38);
      break;
    case 4u:
      uint64_t v41 = v18[2];
      LOBYTE(v78) = 4;
      sub_1000438C8();
      uint64_t v42 = v67;
      uint64_t v43 = v74;
      uint64_t v44 = v72;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v78) = 0;
      uint64_t v45 = v71;
      uint64_t v46 = v73;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      if (!v46)
      {
        uint64_t v78 = v41;
        char v77 = 1;
        sub_100043B84();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v42, v45);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v44, v43);
      break;
    case 5u:
      uint64_t v47 = *v18;
      unint64_t v48 = v18[1];
      LOBYTE(v78) = 5;
      sub_1000437B8();
      uint64_t v49 = v66;
      uint64_t v50 = v74;
      char v51 = v72;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v78 = v47;
      unint64_t v79 = v48;
      sub_100043B30();
      uint64_t v52 = v69;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v49, v52);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v51, v50);
      uint64_t result = sub_1000247B8(v47, v48);
      break;
    default:
      LOBYTE(v78) = 0;
      sub_100043ADC();
      uint64_t v23 = v74;
      uint64_t v24 = v72;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v13);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v24, v23);
      break;
  }
  return result;
}

uint64_t sub_10003F120@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v3 = sub_100005B18(&qword_100141568);
  uint64_t v104 = *(void *)(v3 - 8);
  uint64_t v105 = v3;
  __chkstk_darwin(v3);
  uint64_t v114 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_100005B18(&qword_100141570);
  uint64_t v94 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v113 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100141578);
  uint64_t v101 = *(void *)(v6 - 8);
  uint64_t v102 = v6;
  __chkstk_darwin(v6);
  uint64_t v112 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100005B18(&qword_100141580);
  uint64_t v100 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v111 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100005B18(&qword_100141588);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v108 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_100005B18(&qword_100141590);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v107 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100005B18(&qword_100141598);
  uint64_t v109 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  double v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for AccessPointIconType(0);
  uint64_t v13 = __chkstk_darwin(v110);
  uint64_t v93 = (uint64_t *)((char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v92 = (uint64_t *)((char *)&v86 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v86 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v86 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  size_t v25 = (uint64_t *)((char *)&v86 - v24);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (uint64_t *)((char *)&v86 - v27);
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v86 - v29;
  uint64_t v31 = a1[3];
  uint64_t v116 = a1;
  sub_100006650(a1, v31);
  sub_100043764();
  uint64_t v32 = v117;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v32) {
    goto LABEL_18;
  }
  unint64_t v87 = v28;
  uint64_t v88 = v25;
  uint64_t v89 = (uint64_t *)v22;
  unint64_t v90 = v19;
  uint64_t v34 = v111;
  uint64_t v33 = v112;
  uint64_t v117 = 0;
  uint64_t v36 = v113;
  uint64_t v35 = v114;
  uint64_t v37 = v110;
  uint64_t v91 = v30;
  uint64_t v38 = v115;
  uint64_t v39 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v39 + 16) != 1)
  {
    uint64_t v44 = v38;
    uint64_t v45 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v46 = v12;
    unint64_t v48 = v47;
    sub_100005B18(&qword_100140060);
    *unint64_t v48 = v37;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v45 - 8) + 104))(v48, enum case for DecodingError.typeMismatch(_:), v45);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v46, v44);
LABEL_18:
    uint64_t v68 = (uint64_t)v116;
    return sub_100007188(v68);
  }
  switch(*(unsigned char *)(v39 + 32))
  {
    case 1:
      LOBYTE(v118) = 1;
      sub_100043A88();
      uint64_t v49 = v108;
      uint64_t v50 = v117;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v50) {
        goto LABEL_17;
      }
      char v51 = v12;
      uint64_t v52 = v38;
      uint64_t v53 = v98;
      uint64_t v74 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v76 = v75;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v49, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v51, v52);
      char v77 = v88;
      uint64_t *v88 = v74;
      v77[1] = v76;
      goto LABEL_20;
    case 2:
      LOBYTE(v118) = 2;
      sub_1000439C4();
      uint64_t v54 = v34;
      uint64_t v55 = v117;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v55) {
        goto LABEL_17;
      }
      sub_100005B18(&qword_1001415D8);
      sub_100043A18(&qword_1001415E0, (void (*)(void))sub_10004380C);
      uint64_t v56 = v99;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v54, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v12, v38);
      uint64_t v73 = v89;
      *uint64_t v89 = v118;
      goto LABEL_21;
    case 3:
      LOBYTE(v118) = 3;
      sub_100043970();
      uint64_t v57 = v117;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v57) {
        goto LABEL_17;
      }
      uint64_t v58 = v12;
      type metadata accessor for MediaArtwork();
      sub_100043BD8(&qword_100140068, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      char v77 = (uint64_t *)v90;
      uint64_t v59 = v102;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v33, v59);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v58, v115);
LABEL_20:
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = (uint64_t)v77;
      goto LABEL_22;
    case 4:
      LOBYTE(v118) = 4;
      sub_1000438C8();
      uint64_t v60 = v117;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v60) {
        goto LABEL_17;
      }
      uint64_t v61 = v36;
      uint64_t v62 = v12;
      uint64_t v63 = v38;
      LOBYTE(v118) = 0;
      uint64_t v64 = v103;
      uint64_t v65 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v79 = v78;
      uint64_t v117 = v65;
      char v119 = 1;
      sub_10004391C();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v80 = v109;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v61, v64);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v63);
      uint64_t v83 = v118;
      uint64_t v84 = v92;
      *uint64_t v92 = v117;
      v84[1] = v79;
      v84[2] = v83;
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = (uint64_t)v84;
      goto LABEL_22;
    case 5:
      LOBYTE(v118) = 5;
      sub_1000437B8();
      uint64_t v66 = v117;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v66) {
        goto LABEL_17;
      }
      sub_10004380C();
      uint64_t v67 = v105;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v35, v67);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v12, v38);
      uint64_t v73 = v93;
      *(_OWORD *)uint64_t v93 = v118;
      goto LABEL_21;
    default:
      LOBYTE(v118) = 0;
      sub_100043ADC();
      uint64_t v40 = v107;
      uint64_t v41 = v117;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v41)
      {
LABEL_17:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v109 + 8))(v12, v38);
        goto LABEL_18;
      }
      uint64_t v42 = v12;
      uint64_t v43 = v96;
      uint64_t v70 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v72 = v71;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v40, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v42, v38);
      uint64_t v73 = v87;
      *unint64_t v87 = v70;
      v73[1] = v72;
LABEL_21:
      swift_storeEnumTagMultiPayload();
      uint64_t v85 = (uint64_t)v73;
LABEL_22:
      uint64_t v81 = (uint64_t)v91;
      sub_100043860(v85, (uint64_t)v91, type metadata accessor for AccessPointIconType);
      uint64_t v82 = (uint64_t)v116;
      sub_100043860(v81, v106, type metadata accessor for AccessPointIconType);
      uint64_t v68 = v82;
      break;
  }
  return sub_100007188(v68);
}

uint64_t sub_10003FF94(uint64_t a1)
{
  unint64_t v2 = sub_100043970();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003FFD0(uint64_t a1)
{
  unint64_t v2 = sub_100043970();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004000C()
{
  if (*v0) {
    return 0x69537261656E696CLL;
  }
  else {
    return 0x6D614E6567616D69;
  }
}

uint64_t sub_100040050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100043208(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100040078(uint64_t a1)
{
  unint64_t v2 = sub_1000438C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000400B4(uint64_t a1)
{
  unint64_t v2 = sub_1000438C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000400F0()
{
  uint64_t result = 0x6C6F626D7973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7641726579616C70;
      break;
    case 2:
      uint64_t result = 0x7247726579616C70;
      break;
    case 3:
      uint64_t result = 0x6B726F77747261;
      break;
    case 4:
      uint64_t result = 0x656C646E7562;
      break;
    case 5:
      uint64_t result = 0x6567616D69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000401B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100043314(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000401E0(uint64_t a1)
{
  unint64_t v2 = sub_100043764();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004021C(uint64_t a1)
{
  unint64_t v2 = sub_100043764();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040258()
{
  return 0x7461446567616D69;
}

uint64_t sub_100040274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7461446567616D69 && a2 == 0xE900000000000061)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100040318(uint64_t a1)
{
  unint64_t v2 = sub_1000437B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040354(uint64_t a1)
{
  unint64_t v2 = sub_1000437B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040390(uint64_t a1)
{
  unint64_t v2 = sub_100043A88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000403CC(uint64_t a1)
{
  unint64_t v2 = sub_100043A88();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040408()
{
  return 0x4473726579616C70;
}

uint64_t sub_100040428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4473726579616C70 && a2 == 0xEB00000000617461)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000404D8(uint64_t a1)
{
  unint64_t v2 = sub_1000439C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040514(uint64_t a1)
{
  unint64_t v2 = sub_1000439C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040550(uint64_t a1)
{
  unint64_t v2 = sub_100043ADC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004058C(uint64_t a1)
{
  unint64_t v2 = sub_100043ADC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000405C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003F120(a1, a2);
}

uint64_t sub_1000405E0(void *a1)
{
  return sub_10003E714(a1);
}

uint64_t AccessPointContainer.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PageID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AccessPointContainer.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PageID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t AccessPointContainer.pageMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v4 = type metadata accessor for PageMetrics();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AccessPointContainer.pageMetrics.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AccessPointContainer(0) + 20);
  uint64_t v4 = type metadata accessor for PageMetrics();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AccessPointContainer.pageMetrics.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t AccessPointContainer.useCase.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AccessPointContainer(0) + 24));
}

uint64_t AccessPointContainer.useCase.setter(char a1)
{
  uint64_t result = type metadata accessor for AccessPointContainer(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*AccessPointContainer.useCase.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t AccessPointContainer.items.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AccessPointContainer(0) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessPointContainer.items.modify())()
{
  return property wrapper backing initializer of Shelf.items;
}

uint64_t AccessPointContainer.cornerRadii(for:)(uint64_t a1)
{
  uint64_t v3 = sub_100005B18(&qword_1001413D8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = &v27[-v8 - 8];
  uint64_t v10 = __chkstk_darwin(v7);
  double v12 = &v27[-v11 - 8];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v27[-v14 - 8];
  __chkstk_darwin(v13);
  uint64_t v17 = &v27[-v16 - 8];
  uint64_t v18 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = &v27[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t result = type metadata accessor for AccessPointContainer(0);
  uint64_t v23 = *(void *)(v1 + *(int *)(result + 28));
  if (*(void *)(v23 + 16) <= a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v9, 1, 1, v18);
  }
  else
  {
    if (a1 < 0)
    {
      __break(1u);
      return result;
    }
    sub_10003D160(v23 + 40 * a1 + 32, (uint64_t)v27);
    sub_100005B18(&qword_1001413E0);
    char v24 = swift_dynamicCast();
    size_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    if (v24)
    {
      v25(v17, 0, 1, v18);
      sub_100043860((uint64_t)v17, (uint64_t)v21, type metadata accessor for AccessPointHighlight);
      sub_100041DE0((uint64_t)v21, (uint64_t)v15, type metadata accessor for AccessPointHighlight);
      v25(v15, 0, 1, v18);
      sub_1000170C8((uint64_t)v15, (uint64_t)v12, &qword_1001413D8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) == 1) {
        sub_100017388((uint64_t)v12, &qword_1001413D8);
      }
      else {
        sub_100041E48((uint64_t)v12, type metadata accessor for AccessPointHighlight);
      }
      RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
      sub_100017388((uint64_t)v15, &qword_1001413D8);
      return sub_100041E48((uint64_t)v21, type metadata accessor for AccessPointHighlight);
    }
    v25(v17, 1, 1, v18);
    sub_100017388((uint64_t)v17, &qword_1001413D8);
    v25(v9, 1, 1, v18);
  }
  sub_1000170C8((uint64_t)v9, (uint64_t)v6, &qword_1001413D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1) {
    sub_100017388((uint64_t)v6, &qword_1001413D8);
  }
  else {
    sub_100041E48((uint64_t)v6, type metadata accessor for AccessPointHighlight);
  }
  RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
  return sub_100017388((uint64_t)v9, &qword_1001413D8);
}

Swift::Bool __swiftcall AccessPointContainer.isCollapsibleItem(at:)(Swift::Int at)
{
  uint64_t v3 = sub_100005B18(&qword_100140B38);
  __chkstk_darwin(v3 - 8);
  uint64_t v40 = &v41[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = sub_100005B18(&qword_1001413D8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  double v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v41[-v14 - 8];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v41[-v17 - 8];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v41[-v20 - 8];
  __chkstk_darwin(v19);
  uint64_t v23 = &v41[-v22 - 8];
  uint64_t v24 = type metadata accessor for AccessPointContainer(0);
  uint64_t v25 = *(void *)(v1 + *(int *)(v24 + 28));
  if (*(void *)(v25 + 16) > at)
  {
    if (at < 0)
    {
      __break(1u);
    }
    else
    {
      sub_10003D160(v25 + 40 * at + 32, (uint64_t)v41);
      sub_100005B18(&qword_1001413E0);
      char v26 = swift_dynamicCast();
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if ((v26 & 1) == 0)
      {
        BOOL v31 = 1;
        v27(v7, 1, 1, v8);
        uint64_t v32 = &qword_1001413D8;
        uint64_t v33 = (uint64_t)v7;
LABEL_23:
        sub_100017388(v33, v32);
        goto LABEL_24;
      }
      v27(v7, 0, 1, v8);
      sub_100043860((uint64_t)v7, (uint64_t)v23, type metadata accessor for AccessPointHighlight);
      uint64_t v28 = *((void *)v23 + 6);
      LOBYTE(v24) = sub_100041DE0((uint64_t)v23, (uint64_t)v21, type metadata accessor for AccessPointHighlight);
      if (!v28)
      {
        sub_100041E48((uint64_t)v21, type metadata accessor for AccessPointHighlight);
        sub_100041DE0((uint64_t)v23, (uint64_t)v18, type metadata accessor for AccessPointHighlight);
LABEL_14:
        uint64_t v34 = *((void *)v18 + 8);
        LOBYTE(v24) = sub_100041DE0((uint64_t)v18, (uint64_t)v15, type metadata accessor for AccessPointHighlight);
        if (!v34)
        {
          sub_100041E48((uint64_t)v18, type metadata accessor for AccessPointHighlight);
          sub_100041E48((uint64_t)v15, type metadata accessor for AccessPointHighlight);
          sub_100043860((uint64_t)v23, (uint64_t)v12, type metadata accessor for AccessPointHighlight);
LABEL_22:
          uint64_t v37 = (uint64_t)v40;
          sub_1000170C8((uint64_t)&v12[*(int *)(v8 + 32)], (uint64_t)v40, &qword_100140B38);
          sub_100041E48((uint64_t)v12, type metadata accessor for AccessPointHighlight);
          uint64_t v38 = type metadata accessor for AccessPointIconType(0);
          BOOL v31 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38) == 1;
          uint64_t v33 = v37;
          uint64_t v32 = &qword_100140B38;
          goto LABEL_23;
        }
        unint64_t v35 = *((void *)v15 + 8);
        if (v35)
        {
          if ((v35 & 0x2000000000000000) != 0) {
            uint64_t v36 = HIBYTE(v35) & 0xF;
          }
          else {
            uint64_t v36 = *((void *)v15 + 7) & 0xFFFFFFFFFFFFLL;
          }
          sub_100041E48((uint64_t)v18, type metadata accessor for AccessPointHighlight);
          sub_100041E48((uint64_t)v15, type metadata accessor for AccessPointHighlight);
          sub_100043860((uint64_t)v23, (uint64_t)v12, type metadata accessor for AccessPointHighlight);
          if (v36) {
            goto LABEL_20;
          }
          goto LABEL_22;
        }
LABEL_27:
        __break(1u);
        return v24;
      }
      unint64_t v29 = *((void *)v21 + 6);
      if (v29)
      {
        if ((v29 & 0x2000000000000000) != 0) {
          uint64_t v30 = HIBYTE(v29) & 0xF;
        }
        else {
          uint64_t v30 = *((void *)v21 + 5) & 0xFFFFFFFFFFFFLL;
        }
        sub_100041E48((uint64_t)v21, type metadata accessor for AccessPointHighlight);
        sub_100041DE0((uint64_t)v23, (uint64_t)v18, type metadata accessor for AccessPointHighlight);
        if (v30)
        {
          sub_100041E48((uint64_t)v18, type metadata accessor for AccessPointHighlight);
          sub_100043860((uint64_t)v23, (uint64_t)v12, type metadata accessor for AccessPointHighlight);
LABEL_20:
          sub_100041E48((uint64_t)v12, type metadata accessor for AccessPointHighlight);
          BOOL v31 = 0;
          goto LABEL_24;
        }
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  BOOL v31 = 1;
LABEL_24:
  LOBYTE(v24) = v31;
  return v24;
}

uint64_t type metadata accessor for AccessPointIconType(uint64_t a1)
{
  return sub_100017090(a1, qword_100141518);
}

uint64_t sub_100041304()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7274654D65676170;
      break;
    case 2:
      uint64_t result = 0x65736143657375;
      break;
    case 3:
      uint64_t result = 0x736D657469;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004138C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000435B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000413B4(uint64_t a1)
{
  unint64_t v2 = sub_1000416FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000413F0(uint64_t a1)
{
  unint64_t v2 = sub_1000416FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AccessPointContainer.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_1001413E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_1000416FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  type metadata accessor for PageID();
  sub_100043BD8(&qword_100140088, (void (*)(uint64_t))&type metadata accessor for PageID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for AccessPointContainer(0);
    char v15 = 1;
    type metadata accessor for PageMetrics();
    sub_100043BD8(&qword_100140090, (void (*)(uint64_t))&type metadata accessor for PageMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + *(int *)(v9 + 24));
    char v13 = 2;
    sub_100041750();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 28));
    v11[15] = 3;
    sub_100005B18(&qword_100140320);
    sub_100041D58((unint64_t *)&qword_100140328, &qword_100140330);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000416FC()
{
  unint64_t result = qword_1001413F0;
  if (!qword_1001413F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001413F0);
  }
  return result;
}

unint64_t sub_100041750()
{
  unint64_t result = qword_1001413F8;
  if (!qword_1001413F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001413F8);
  }
  return result;
}

uint64_t AccessPointContainer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v20 = type metadata accessor for PageMetrics();
  uint64_t v17 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PageID();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v21 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100005B18(&qword_100141400);
  uint64_t v19 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_1000416FC();
  uint64_t v23 = v8;
  uint64_t v12 = (uint64_t)v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return sub_100007188((uint64_t)a1);
  }
  uint64_t v24 = a1;
  uint64_t v13 = v20;
  char v30 = 0;
  sub_100043BD8(&qword_1001400F8, (void (*)(uint64_t))&type metadata accessor for PageID);
  char v14 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v11, v14, v5);
  char v29 = 1;
  sub_100043BD8(&qword_100140100, (void (*)(uint64_t))&type metadata accessor for PageMetrics);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v11[v9[5]], v4, v13);
  char v27 = 2;
  sub_100041D04();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v11[v9[6]] = v28;
  sub_100005B18(&qword_100140320);
  char v26 = 3;
  sub_100041D58((unint64_t *)&qword_100140370, &qword_100140378);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v22);
  *(void *)&v11[v9[7]] = v25;
  sub_100041DE0((uint64_t)v11, v16, type metadata accessor for AccessPointContainer);
  sub_100007188((uint64_t)v24);
  return sub_100041E48((uint64_t)v11, type metadata accessor for AccessPointContainer);
}

unint64_t sub_100041D04()
{
  unint64_t result = qword_100141408;
  if (!qword_100141408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141408);
  }
  return result;
}

uint64_t sub_100041D58(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(&qword_100140320);
    sub_10001758C(a2, &qword_100140338);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100041DE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100041E48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100041EA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessPointContainer.init(from:)(a1, a2);
}

uint64_t sub_100041EC0(void *a1)
{
  return AccessPointContainer.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for AccessPointContainer(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PageID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for PageMetrics();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AccessPointContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for AccessPointContainer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for PageMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100042440);
}

uint64_t sub_100042440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PageID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for PageMetrics();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessPointContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100042568);
}

uint64_t sub_100042568(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PageID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for PageMetrics();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100042678()
{
  uint64_t result = type metadata accessor for PageID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PageMetrics();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100042758()
{
  return sub_10001758C(&qword_1001411F8, &qword_1001411E0);
}

unsigned char *storeEnumTagSinglePayload for AccessPointContainer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100042860);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointContainer.CodingKeys()
{
  return &type metadata for AccessPointContainer.CodingKeys;
}

uint64_t *sub_100042898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v8 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        break;
      case 4u:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        break;
      case 5u:
        unint64_t v10 = a2[1];
        if (v10 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v11 = *a2;
          sub_1000244CC(v11, v10);
          *a1 = v11;
          a1[1] = v10;
        }
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100042A68(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3:
      uint64_t v3 = type metadata accessor for MediaArtwork();
      unsigned int v4 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 5:
      unint64_t v5 = a1[1];
      if (v5 >> 60 != 15)
      {
        uint64_t v6 = *a1;
        uint64_t result = sub_1000247CC(v6, v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_100042B78(uint64_t *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v5 = type metadata accessor for MediaArtwork();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      break;
    case 4u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      break;
    case 5u:
      unint64_t v7 = a2[1];
      if (v7 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v8 = *a2;
        sub_1000244CC(v8, v7);
        *a1 = v8;
        a1[1] = v7;
      }
      break;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_100042CF8(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_100041E48((uint64_t)a1, type metadata accessor for AccessPointIconType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v4 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        break;
      case 5u:
        unint64_t v5 = a2[1];
        if (v5 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v6 = *a2;
          sub_1000244CC(v6, v5);
          *a1 = v6;
          a1[1] = v5;
        }
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100042EB4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = type metadata accessor for MediaArtwork();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100042F6C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100041E48((uint64_t)a1, type metadata accessor for AccessPointIconType);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100043048()
{
  uint64_t result = type metadata accessor for MediaArtwork();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_100043104()
{
  unint64_t result = qword_100141550;
  if (!qword_100141550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141550);
  }
  return result;
}

unint64_t sub_10004315C()
{
  unint64_t result = qword_100141558;
  if (!qword_100141558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141558);
  }
  return result;
}

unint64_t sub_1000431B4()
{
  unint64_t result = qword_100141560;
  if (!qword_100141560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141560);
  }
  return result;
}

uint64_t sub_100043208(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D614E6567616D69 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69537261656E696CLL && a2 == 0xEA0000000000657ALL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100043314(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7641726579616C70 && a2 == 0xEC00000072617461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7247726579616C70 && a2 == 0xEB0000000070756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C646E7562 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1000435B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7274654D65676170 && a2 == 0xEB00000000736369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736143657375 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_100043764()
{
  unint64_t result = qword_1001415A0;
  if (!qword_1001415A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415A0);
  }
  return result;
}

unint64_t sub_1000437B8()
{
  unint64_t result = qword_1001415A8;
  if (!qword_1001415A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415A8);
  }
  return result;
}

unint64_t sub_10004380C()
{
  unint64_t result = qword_1001415B0;
  if (!qword_1001415B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415B0);
  }
  return result;
}

uint64_t sub_100043860(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000438C8()
{
  unint64_t result = qword_1001415B8;
  if (!qword_1001415B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415B8);
  }
  return result;
}

unint64_t sub_10004391C()
{
  unint64_t result = qword_1001415C0;
  if (!qword_1001415C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415C0);
  }
  return result;
}

unint64_t sub_100043970()
{
  unint64_t result = qword_1001415C8;
  if (!qword_1001415C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415C8);
  }
  return result;
}

unint64_t sub_1000439C4()
{
  unint64_t result = qword_1001415D0;
  if (!qword_1001415D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415D0);
  }
  return result;
}

uint64_t sub_100043A18(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(&qword_1001415D8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100043A88()
{
  unint64_t result = qword_1001415E8;
  if (!qword_1001415E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415E8);
  }
  return result;
}

unint64_t sub_100043ADC()
{
  unint64_t result = qword_1001415F0;
  if (!qword_1001415F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001415F0);
  }
  return result;
}

unint64_t sub_100043B30()
{
  unint64_t result = qword_100141630;
  if (!qword_100141630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141630);
  }
  return result;
}

unint64_t sub_100043B84()
{
  unint64_t result = qword_100141638;
  if (!qword_100141638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141638);
  }
  return result;
}

uint64_t sub_100043BD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessPointIconType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100043CECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointIconType.CodingKeys()
{
  return &type metadata for AccessPointIconType.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.SymbolCodingKeys()
{
  return &type metadata for AccessPointIconType.SymbolCodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.PlayerAvatarCodingKeys()
{
  return &type metadata for AccessPointIconType.PlayerAvatarCodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.PlayerGroupCodingKeys()
{
  return &type metadata for AccessPointIconType.PlayerGroupCodingKeys;
}

ValueMetadata *type metadata accessor for AccessPointIconType.ArtworkCodingKeys()
{
  return &type metadata for AccessPointIconType.ArtworkCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessPointIconType.BundleCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100043E34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointIconType.BundleCodingKeys()
{
  return &type metadata for AccessPointIconType.BundleCodingKeys;
}

unsigned char *_s13GameOverlayUI19AccessPointIconTypeO16SymbolCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100043F08);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointIconType.ImageCodingKeys()
{
  return &type metadata for AccessPointIconType.ImageCodingKeys;
}

unint64_t sub_100043F44()
{
  unint64_t result = qword_100141648;
  if (!qword_100141648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141648);
  }
  return result;
}

unint64_t sub_100043F9C()
{
  unint64_t result = qword_100141650;
  if (!qword_100141650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141650);
  }
  return result;
}

unint64_t sub_100043FF4()
{
  unint64_t result = qword_100141658;
  if (!qword_100141658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141658);
  }
  return result;
}

unint64_t sub_10004404C()
{
  unint64_t result = qword_100141660;
  if (!qword_100141660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141660);
  }
  return result;
}

unint64_t sub_1000440A4()
{
  unint64_t result = qword_100141668;
  if (!qword_100141668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141668);
  }
  return result;
}

unint64_t sub_1000440FC()
{
  unint64_t result = qword_100141670;
  if (!qword_100141670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141670);
  }
  return result;
}

unint64_t sub_100044154()
{
  unint64_t result = qword_100141678;
  if (!qword_100141678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141678);
  }
  return result;
}

unint64_t sub_1000441AC()
{
  unint64_t result = qword_100141680;
  if (!qword_100141680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141680);
  }
  return result;
}

unint64_t sub_100044204()
{
  unint64_t result = qword_100141688;
  if (!qword_100141688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141688);
  }
  return result;
}

unint64_t sub_10004425C()
{
  unint64_t result = qword_100141690;
  if (!qword_100141690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141690);
  }
  return result;
}

unint64_t sub_1000442B4()
{
  unint64_t result = qword_100141698;
  if (!qword_100141698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141698);
  }
  return result;
}

unint64_t sub_10004430C()
{
  unint64_t result = qword_1001416A0;
  if (!qword_1001416A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416A0);
  }
  return result;
}

unint64_t sub_100044364()
{
  unint64_t result = qword_1001416A8;
  if (!qword_1001416A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416A8);
  }
  return result;
}

unint64_t sub_1000443BC()
{
  unint64_t result = qword_1001416B0;
  if (!qword_1001416B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416B0);
  }
  return result;
}

unint64_t sub_100044414()
{
  unint64_t result = qword_1001416B8;
  if (!qword_1001416B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416B8);
  }
  return result;
}

unint64_t sub_10004446C()
{
  unint64_t result = qword_1001416C0;
  if (!qword_1001416C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416C0);
  }
  return result;
}

unint64_t sub_1000444C4()
{
  unint64_t result = qword_1001416C8;
  if (!qword_1001416C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416C8);
  }
  return result;
}

unint64_t sub_10004451C()
{
  unint64_t result = qword_1001416D0;
  if (!qword_1001416D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416D0);
  }
  return result;
}

unint64_t sub_100044574()
{
  unint64_t result = qword_1001416D8;
  if (!qword_1001416D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416D8);
  }
  return result;
}

unint64_t sub_1000445CC()
{
  unint64_t result = qword_1001416E0;
  if (!qword_1001416E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416E0);
  }
  return result;
}

unint64_t sub_100044624()
{
  unint64_t result = qword_1001416E8;
  if (!qword_1001416E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001416E8);
  }
  return result;
}

uint64_t sub_100044678()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_1001416F0 = result;
  return result;
}

uint64_t sub_1000446A8()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_1001416F8 = result;
  return result;
}

uint64_t sub_1000446E0()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_100141700 = result;
  return result;
}

uint64_t sub_100044710()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_100141708 = result;
  return result;
}

uint64_t sub_100044744()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_100141710 = result;
  return result;
}

uint64_t sub_10004477C()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_100141718 = result;
  return result;
}

uint64_t sub_1000447B0()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_100141720 = result;
  return result;
}

uint64_t sub_1000447E8()
{
  uint64_t result = static Animation.spring(response:dampingFraction:blendDuration:)();
  qword_100141728 = result;
  return result;
}

uint64_t sub_100044820@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  return sub_10005DBB8(v3, a1, type metadata accessor for AccessPointContainer);
}

uint64_t sub_100044900@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  return sub_10005DBB8(v4, a2, type metadata accessor for AccessPointContainer);
}

uint64_t sub_1000449E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005DBB8(a1, (uint64_t)v6, type metadata accessor for AccessPointContainer);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10005DC20((uint64_t)v6, type metadata accessor for AccessPointContainer);
}

uint64_t sub_100044B30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005E254(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100044B9C()
{
  return sub_1000452A8((uint64_t)&unk_10010EF08, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden);
}

uint64_t sub_100044BB0()
{
  return swift_release();
}

uint64_t sub_100044C80()
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
}

uint64_t sub_100044D28@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  return result;
}

uint64_t sub_100044DD8()
{
  return swift_release();
}

uint64_t sub_100044EA4()
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
}

uint64_t sub_100044F4C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  return result;
}

uint64_t sub_100044FFC()
{
  return swift_release();
}

uint64_t sub_1000450CC()
{
  return sub_1000452A8((uint64_t)&unk_10010EFB0, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
}

uint64_t sub_1000450E0()
{
  return swift_release();
}

uint64_t sub_1000451B0()
{
  return sub_1000452A8((uint64_t)&unk_10010EF58, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
}

uint64_t sub_1000451C4()
{
  return swift_release();
}

uint64_t sub_100045294()
{
  return sub_1000452A8((uint64_t)&unk_10010EEE0, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
}

uint64_t sub_1000452A8(uint64_t a1, void *a2)
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_100045348@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a3 = *(unsigned char *)(v5 + *a2);
  return result;
}

uint64_t sub_1000453FC()
{
  return swift_release();
}

uint64_t sub_1000454CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004567C(&OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, a1);
}

uint64_t sub_1000454E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AccessPointAnchoring();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100045668@<X0>(uint64_t a1@<X8>)
{
  return sub_10004567C(&OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, a1);
}

uint64_t sub_10004567C@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v2 + *a1;
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for AccessPointAnchoring();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, v5, v6);
}

uint64_t sub_100045778@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = v5 + *a2;
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for AccessPointAnchoring();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t sub_100045878(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AccessPointAnchoring();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100045A00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + *a3;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for AccessPointAnchoring();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(v4, a2, v5);
  return swift_endAccess();
}

uint64_t sub_100045A98()
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100045B54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID + 8);
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100045C0C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100045CF0()
{
  return swift_retain();
}

uint64_t sub_100045D9C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__tracker);
  return swift_retain();
}

uint64_t sub_100045E50()
{
  return swift_release();
}

uint64_t sub_100045F30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) = 1;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal) = 0;
  uint64_t v6 = (void *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
  type metadata accessor for BasicImpressionsTracker();
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(void *)(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__tracker) = BasicImpressionsTracker.__allocating_init(threshold:)();
  ObservationRegistrar.init()();
  sub_10005FF38(a1, v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, type metadata accessor for AccessPointContainer);
  uint64_t v7 = v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
  uint64_t v8 = type metadata accessor for AccessPointAnchoring();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v3 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, a2, v8);
  return v3;
}

uint64_t sub_1000460A8()
{
  uint64_t v1 = type metadata accessor for ImpressionsContext();
  uint64_t v45 = *(void *)(v1 - 8);
  uint64_t v46 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v43 = (char *)&v37 - v4;
  uint64_t v44 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_1001402E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v47 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ImpressionMetrics();
  uint64_t v48 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_1001413D8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v13);
  char v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v49 = (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v50[0] = v0;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  uint64_t v20 = *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  unint64_t v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v21 & 0x8000000000000000) != 0) {
    return result;
  }
  uint64_t v38 = v8;
  swift_getKeyPath();
  v50[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v22, (uint64_t)v15, type metadata accessor for AccessPointContainer);
  uint64_t v23 = *(void *)&v15[*(int *)(v13 + 28)];
  swift_bridgeObjectRetain();
  uint64_t result = sub_10005DC20((uint64_t)v15, type metadata accessor for AccessPointContainer);
  if (v21 >= *(void *)(v23 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_10003D160(v23 + 40 * v21 + 32, (uint64_t)v50);
  swift_bridgeObjectRelease();
  sub_100005B18(&qword_1001413E0);
  char v24 = swift_dynamicCast();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v24)
  {
    v25(v12, 0, 1, v16);
    uint64_t v26 = (uint64_t)v12;
    uint64_t v27 = v49;
    sub_10005FF38(v26, v49, type metadata accessor for AccessPointHighlight);
    uint64_t v28 = v47;
    sub_1000170C8(v27 + *(int *)(v16 + 60), v47, &qword_1001402E0);
    uint64_t v29 = v48;
    uint64_t v30 = v38;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v28, 1, v38) == 1)
    {
      sub_10005DC20(v27, type metadata accessor for AccessPointHighlight);
      return sub_100017388(v28, &qword_1001402E0);
    }
    else
    {
      BOOL v31 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v39, v28, v30);
      swift_getKeyPath();
      v50[0] = v0;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_retain();
      uint64_t v32 = v40;
      Date.init()();
      uint64_t v33 = v41;
      ImpressionsContext.init()();
      uint64_t v34 = v43;
      ImpressionsContext.withPosition(_:)();
      uint64_t v35 = v46;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v45 + 8);
      v36(v33, v46);
      BasicImpressionsTracker.elementDidLeaveView(_:on:with:)();
      swift_release();
      v36(v34, v35);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v44);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v30);
      return sub_10005DC20(v49, type metadata accessor for AccessPointHighlight);
    }
  }
  else
  {
    v25(v12, 1, 1, v16);
    return sub_100017388((uint64_t)v12, &qword_1001413D8);
  }
}

uint64_t sub_100046778()
{
  uint64_t v1 = type metadata accessor for ImpressionsContext();
  uint64_t v49 = *(void *)(v1 - 8);
  uint64_t v50 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v45 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v47 = (char *)&v44 - v4;
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v44 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_1001402E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v52 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ImpressionMetrics();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  __chkstk_darwin(v8);
  char v51 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_1001413D8);
  __chkstk_darwin(v10 - 8);
  uint64_t v58 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v57 = v12;
  __chkstk_darwin(v12);
  uint64_t v55 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AccessPointContainer(0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v44 - v18;
  sub_1000460A8();
  swift_getKeyPath();
  v59[0] = v0;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v20 = OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex;
  uint64_t v21 = *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_getKeyPath();
  v59[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v22, (uint64_t)v19, type metadata accessor for AccessPointContainer);
  uint64_t v23 = *(void *)&v19[*(int *)(v14 + 28)];
  swift_bridgeObjectRetain();
  sub_10005DC20((uint64_t)v19, type metadata accessor for AccessPointContainer);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v21 < v24)
  {
    swift_getKeyPath();
    v59[0] = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    unint64_t v26 = *(void *)(v0 + v20);
    swift_getKeyPath();
    v59[0] = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    sub_10005DBB8(v22, (uint64_t)v17, type metadata accessor for AccessPointContainer);
    uint64_t v27 = *(void *)&v17[*(int *)(v14 + 28)];
    swift_bridgeObjectRetain();
    uint64_t result = sub_10005DC20((uint64_t)v17, type metadata accessor for AccessPointContainer);
    if ((v26 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v26 < *(void *)(v27 + 16))
    {
      sub_10003D160(v27 + 40 * v26 + 32, (uint64_t)v59);
      swift_bridgeObjectRelease();
      sub_100005B18(&qword_1001413E0);
      uint64_t v29 = v57;
      uint64_t v28 = (uint64_t)v58;
      char v30 = swift_dynamicCast();
      BOOL v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
      if (v30)
      {
        v31(v28, 0, 1, v29);
        uint64_t v32 = v28;
        uint64_t v33 = v55;
        sub_10005FF38(v32, v55, type metadata accessor for AccessPointHighlight);
        uint64_t v34 = v33 + *(int *)(v29 + 60);
        uint64_t v35 = v52;
        sub_1000170C8(v34, v52, &qword_1001402E0);
        uint64_t v37 = v53;
        uint64_t v36 = v54;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v35, 1, v54) == 1)
        {
          sub_10005DC20(v33, type metadata accessor for AccessPointHighlight);
          return sub_100017388(v35, &qword_1001402E0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v51, v35, v36);
          swift_getKeyPath();
          v59[0] = v0;
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          swift_retain();
          uint64_t v38 = v44;
          Date.init()();
          uint64_t v39 = v45;
          ImpressionsContext.init()();
          swift_getKeyPath();
          v59[0] = v0;
          ObservationRegistrar.access<A, B>(_:keyPath:)();
          swift_release();
          uint64_t v40 = v47;
          ImpressionsContext.withPosition(_:)();
          uint64_t v41 = v50;
          uint64_t v42 = *(void (**)(char *, uint64_t))(v49 + 8);
          v42(v39, v50);
          uint64_t v43 = v51;
          BasicImpressionsTracker.elementDidEnterView(_:on:with:)();
          swift_release();
          v42(v40, v41);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v48);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
          return sub_10005DC20(v55, type metadata accessor for AccessPointHighlight);
        }
      }
      else
      {
        v31(v28, 1, 1, v29);
        return sub_100017388(v28, &qword_1001413D8);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100046F60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v12 = v0;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v5, (uint64_t)v4, type metadata accessor for AccessPointContainer);
  uint64_t v6 = PageMetrics.pageFields.getter();
  uint64_t result = sub_10005DC20((uint64_t)v4, type metadata accessor for AccessPointContainer);
  if (v6)
  {
    if (*(void *)(v6 + 16))
    {
      swift_getKeyPath();
      uint64_t v11 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
      uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID + 8);
      swift_getKeyPath();
      uint64_t v11 = v1;
      swift_bridgeObjectRetain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__tracker);
      swift_retain();
      sub_10009532C(v6, v8, v9, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100047194()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005B18(&qword_100140B40);
  __chkstk_darwin(v2 - 8);
  uint64_t v36 = (uint64_t)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PageMetrics();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_1001413D8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v39 = (uint64_t)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v15 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel___observationRegistrar;
  v40[0] = v1;
  uint64_t v16 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_getKeyPath();
  v40[0] = v1;
  v34[0] = v16;
  v34[1] = v15;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v18, (uint64_t)v11, type metadata accessor for AccessPointContainer);
  uint64_t v19 = *(void *)&v11[*(int *)(v9 + 28)];
  swift_bridgeObjectRetain();
  uint64_t result = sub_10005DC20((uint64_t)v11, type metadata accessor for AccessPointContainer);
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v17 < *(void *)(v19 + 16))
  {
    sub_10003D160(v19 + 40 * v17 + 32, (uint64_t)v40);
    swift_bridgeObjectRelease();
    sub_100005B18(&qword_1001413E0);
    char v21 = swift_dynamicCast();
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    if ((v21 & 1) == 0)
    {
      v22(v8, 1, 1, v12);
      sub_100017388((uint64_t)v8, &qword_1001413D8);
      return sub_100046778();
    }
    v22(v8, 0, 1, v12);
    uint64_t v23 = v39;
    sub_10005FF38((uint64_t)v8, v39, type metadata accessor for AccessPointHighlight);
    uint64_t v24 = v36;
    sub_1000170C8(v23 + *(int *)(v12 + 56), v36, &qword_100140B40);
    uint64_t v26 = v37;
    uint64_t v25 = v38;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v24, 1, v38) == 1)
    {
      sub_10005DC20(v23, type metadata accessor for AccessPointHighlight);
      sub_100017388(v24, &qword_100140B40);
      return sub_100046778();
    }
    uint64_t v27 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v35, v24, v25);
    uint64_t v28 = PageMetrics.pageFields.getter();
    if (v28)
    {
      if (*(void *)(v28 + 16))
      {
        uint64_t v36 = v28;
        sub_100046F60();
        swift_getKeyPath();
        v40[0] = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v40[0] = v1;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v26 + 24))(v18 + *(int *)(v9 + 20), v27, v25);
        swift_endAccess();
        v40[0] = v1;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
        type metadata accessor for BasicImpressionsTracker();
        uint64_t v29 = BasicImpressionsTracker.__allocating_init(threshold:)();
        uint64_t KeyPath = swift_getKeyPath();
        __chkstk_darwin(KeyPath);
        v34[-2] = v1;
        v34[-1] = v29;
        v40[0] = v1;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        swift_release();
        swift_getKeyPath();
        v40[0] = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v31 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
        uint64_t v32 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID + 8);
        swift_bridgeObjectRetain();
        sub_10009579C(v31, v32, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
        uint64_t v33 = v39;
LABEL_12:
        sub_10005DC20(v33, type metadata accessor for AccessPointHighlight);
        return sub_100046778();
      }
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
    uint64_t v33 = v23;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000478A4()
{
  sub_10005DC20(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container, type metadata accessor for AccessPointContainer);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  uint64_t v2 = type metadata accessor for AccessPointAnchoring();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, v2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = v0 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel___observationRegistrar;
  uint64_t v5 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocClassInstance();
}

uint64_t sub_100047A00()
{
  return type metadata accessor for AccessPointModel(0);
}

uint64_t type metadata accessor for AccessPointModel(uint64_t a1)
{
  return sub_100017090(a1, qword_1001417B8);
}

uint64_t sub_100047A28()
{
  uint64_t result = type metadata accessor for AccessPointContainer(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AccessPointAnchoring();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ObservationRegistrar();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_100047B6C()
{
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141F88, (void (*)(uint64_t))type metadata accessor for GameModeNotifier);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100047C0C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141F88, (void (*)(uint64_t))type metadata accessor for GameModeNotifier);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_100047CB4()
{
  return swift_release();
}

uint64_t sub_100047D84()
{
  type metadata accessor for GameModeNotifier(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t result = ObservationRegistrar.init()();
  qword_100156D10 = v0;
  return result;
}

uint64_t sub_100047DD4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI16GameModeNotifier___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100047E74()
{
  return type metadata accessor for GameModeNotifier(0);
}

uint64_t type metadata accessor for GameModeNotifier(uint64_t a1)
{
  return sub_100017090(a1, qword_100141B10);
}

uint64_t sub_100047E9C()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessPointModel.AnimationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100048004);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointModel.AnimationState()
{
  return &type metadata for AccessPointModel.AnimationState;
}

uint64_t sub_10004803C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = a2[1];
    char v8 = *((unsigned char *)a2 + 16);
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain();
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (void *)(a1 + v14);
    unint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a1 + v15;
    uint64_t v20 = (uint64_t)a2 + v15;
    *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
    *(void *)(v19 + 8) = *(void *)(v20 + 8);
    uint64_t v21 = a3[9];
    uint64_t v22 = a3[10];
    uint64_t v64 = a2;
    uint64_t v23 = a1 + v21;
    uint64_t v24 = (uint64_t)a2 + v21;
    *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    uint64_t v25 = (void *)(a1 + v22);
    uint64_t v65 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = type metadata accessor for Game();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v28(v65, 1, v26))
    {
      uint64_t v29 = sub_100005B18(&qword_100140B48);
      memcpy(v25, v65, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v31 = v64;
      char v30 = a3;
    }
    else
    {
      uint64_t v61 = v27;
      uint64_t v62 = (int *)v26;
      uint64_t v32 = v65[1];
      void *v25 = *v65;
      v25[1] = v32;
      uint64_t v33 = v65[3];
      _OWORD v25[2] = v65[2];
      v25[3] = v33;
      uint64_t v34 = v65[5];
      v25[4] = v65[4];
      v25[5] = v34;
      uint64_t v35 = *(int *)(v26 + 28);
      uint64_t v63 = v25;
      uint64_t v36 = (char *)v25 + v35;
      uint64_t v37 = (char *)v65 + v35;
      uint64_t v38 = type metadata accessor for Date();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = sub_100005B18(&qword_100140C48);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      uint64_t v31 = v64;
      char v30 = a3;
      *(void *)((char *)v63 + v62[8]) = *(void *)((char *)v65 + v62[8]);
      *((unsigned char *)v63 + v62[9]) = *((unsigned char *)v65 + v62[9]);
      *((unsigned char *)v63 + v62[10]) = *((unsigned char *)v65 + v62[10]);
      *((unsigned char *)v63 + v62[11]) = *((unsigned char *)v65 + v62[11]);
      *((unsigned char *)v63 + v62[12]) = *((unsigned char *)v65 + v62[12]);
      *((unsigned char *)v63 + v62[13]) = *((unsigned char *)v65 + v62[13]);
      *((unsigned char *)v63 + v62[14]) = *((unsigned char *)v65 + v62[14]);
      uint64_t v42 = v62[15];
      uint64_t v43 = (void *)((char *)v63 + v42);
      uint64_t v44 = (void *)((char *)v65 + v42);
      uint64_t v45 = v44[1];
      void *v43 = *v44;
      v43[1] = v45;
      uint64_t v46 = *(void (**)(void *, void, uint64_t, int *))(v61 + 56);
      swift_bridgeObjectRetain();
      v46(v63, 0, 1, v62);
    }
    uint64_t v47 = v30[12];
    *(void *)(a1 + v30[11]) = *(uint64_t *)((char *)v31 + v30[11]);
    *(void *)(a1 + v47) = *(uint64_t *)((char *)v31 + v47);
    uint64_t v48 = v30[13];
    uint64_t v49 = (void *)(a1 + v48);
    uint64_t v50 = (uint64_t)v31 + v48;
    uint64_t v51 = *(uint64_t *)((char *)v31 + v48 + 8);
    *uint64_t v49 = *(uint64_t *)((char *)v31 + v48);
    v49[1] = v51;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v52 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
    uint64_t v53 = (char *)v49 + v52;
    uint64_t v54 = v50 + v52;
    uint64_t v55 = sub_100005B18(&qword_100140C58);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
    uint64_t v56 = v30[14];
    uint64_t v57 = a1 + v56;
    uint64_t v58 = (uint64_t)v31 + v56;
    long long v59 = *(_OWORD *)(v58 + 16);
    *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
    *(_OWORD *)(v57 + 16) = v59;
    *(void *)(v57 + 32) = *(void *)(v58 + 32);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000484F8(uint64_t a1, int *a2)
{
  swift_release();
  uint64_t v4 = a1 + a2[6];
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v6 + *(int *)(v7 + 28);
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  uint64_t v11 = a1 + a2[13];
  swift_release();
  swift_release();
  uint64_t v12 = v11 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v13 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return swift_release();
}

uint64_t sub_10004876C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  swift_retain();
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a1 + v12;
  uint64_t v17 = a2 + v12;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v61 = a1;
  uint64_t v62 = a3;
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(unsigned char *)uint64_t v20 = *(unsigned char *)v21;
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  uint64_t v22 = (void *)(a1 + v19);
  uint64_t v23 = (void *)(a2 + v19);
  uint64_t v24 = type metadata accessor for Game();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v26(v23, 1, v24))
  {
    uint64_t v27 = sub_100005B18(&qword_100140B48);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    uint64_t v29 = a1;
    uint64_t v28 = v62;
  }
  else
  {
    uint64_t v59 = v25;
    uint64_t v60 = (int *)v24;
    uint64_t v30 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v30;
    uint64_t v31 = v23[3];
    v22[2] = v23[2];
    v22[3] = v31;
    uint64_t v32 = v23[5];
    v22[4] = v23[4];
    v22[5] = v32;
    uint64_t v33 = *(int *)(v24 + 28);
    __dst = (char *)v22 + v33;
    uint64_t v34 = (char *)v23 + v33;
    uint64_t v35 = type metadata accessor for Date();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v37(v34, 1, v35))
    {
      uint64_t v38 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v34, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
    }
    uint64_t v29 = v61;
    uint64_t v28 = v62;
    *(void *)((char *)v22 + v60[8]) = *(void *)((char *)v23 + v60[8]);
    *((unsigned char *)v22 + v60[9]) = *((unsigned char *)v23 + v60[9]);
    *((unsigned char *)v22 + v60[10]) = *((unsigned char *)v23 + v60[10]);
    *((unsigned char *)v22 + v60[11]) = *((unsigned char *)v23 + v60[11]);
    *((unsigned char *)v22 + v60[12]) = *((unsigned char *)v23 + v60[12]);
    *((unsigned char *)v22 + v60[13]) = *((unsigned char *)v23 + v60[13]);
    *((unsigned char *)v22 + v60[14]) = *((unsigned char *)v23 + v60[14]);
    uint64_t v39 = v60[15];
    uint64_t v40 = (void *)((char *)v22 + v39);
    uint64_t v41 = (void *)((char *)v23 + v39);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = *(void (**)(void *, void, uint64_t, int *))(v59 + 56);
    swift_bridgeObjectRetain();
    v43(v22, 0, 1, v60);
  }
  uint64_t v44 = v28[12];
  *(void *)(v29 + v28[11]) = *(void *)(a2 + v28[11]);
  *(void *)(v29 + v44) = *(void *)(a2 + v44);
  uint64_t v45 = v28[13];
  uint64_t v46 = (void *)(v29 + v45);
  uint64_t v47 = a2 + v45;
  uint64_t v48 = *(void *)(a2 + v45 + 8);
  *uint64_t v46 = *(void *)(a2 + v45);
  v46[1] = v48;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v49 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v50 = (char *)v46 + v49;
  uint64_t v51 = v47 + v49;
  uint64_t v52 = sub_100005B18(&qword_100140C58);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  uint64_t v53 = v28[14];
  uint64_t v54 = v29 + v53;
  uint64_t v55 = a2 + v53;
  long long v56 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
  *(_OWORD *)(v54 + 16) = v56;
  *(void *)(v54 + 32) = *(void *)(v55 + 32);
  swift_retain();
  return v29;
}

uint64_t sub_100048BD8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_100017388(a1 + v7, &qword_100140FF0);
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_retain();
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_retain();
  swift_release();
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_retain();
  swift_release();
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = (int *)type metadata accessor for Game();
  uint64_t v24 = *((void *)v23 - 1);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, int *))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (v27)
    {
      sub_10005DC20((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_12;
    }
    *uint64_t v21 = *v22;
    v21[1] = v22[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v21[2] = v22[2];
    v21[3] = v22[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v21[4] = v22[4];
    v21[5] = v22[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v33 = v23[7];
    uint64_t v34 = (char *)v21 + v33;
    __dsta = (char *)v22 + v33;
    uint64_t v35 = type metadata accessor for Date();
    uint64_t v61 = *(void *)(v35 - 8);
    uint64_t v62 = v34;
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
    LODWORD(v34) = v36(v34, 1, v35);
    int v37 = v36(__dsta, 1, v35);
    if (v34)
    {
      if (!v37)
      {
        (*(void (**)(void *, char *, uint64_t))(v61 + 16))(v62, __dsta, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v35);
        goto LABEL_23;
      }
      size_t v38 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v39 = v62;
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(void *, char *, uint64_t))(v61 + 24))(v62, __dsta, v35);
        goto LABEL_23;
      }
      (*(void (**)(void *, uint64_t))(v61 + 8))(v62, v35);
      size_t v38 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v39 = v62;
    }
    memcpy(v39, __dsta, v38);
LABEL_23:
    *(void *)((char *)v21 + v23[8]) = *(void *)((char *)v22 + v23[8]);
    *((unsigned char *)v21 + v23[9]) = *((unsigned char *)v22 + v23[9]);
    *((unsigned char *)v21 + v23[10]) = *((unsigned char *)v22 + v23[10]);
    *((unsigned char *)v21 + v23[11]) = *((unsigned char *)v22 + v23[11]);
    *((unsigned char *)v21 + v23[12]) = *((unsigned char *)v22 + v23[12]);
    *((unsigned char *)v21 + v23[13]) = *((unsigned char *)v22 + v23[13]);
    *((unsigned char *)v21 + v23[14]) = *((unsigned char *)v22 + v23[14]);
    uint64_t v44 = v23[15];
    uint64_t v45 = (void *)((char *)v21 + v44);
    uint64_t v46 = (void *)((char *)v22 + v44);
    *uint64_t v45 = *v46;
    v45[1] = v46[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v32 = sub_100005B18(&qword_100140B48);
    memcpy(v21, v22, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_24;
  }
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  void v21[2] = v22[2];
  v21[3] = v22[3];
  v21[4] = v22[4];
  v21[5] = v22[5];
  uint64_t v28 = v23[7];
  __dst = (char *)v21 + v28;
  uint64_t v60 = (char *)v22 + v28;
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v58 = *(void *)(v29 - 8);
  uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v59(v60, 1, v30))
  {
    uint64_t v31 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v60, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(__dst, v60, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(__dst, 0, 1, v30);
  }
  *(void *)((char *)v21 + v23[8]) = *(void *)((char *)v22 + v23[8]);
  *((unsigned char *)v21 + v23[9]) = *((unsigned char *)v22 + v23[9]);
  *((unsigned char *)v21 + v23[10]) = *((unsigned char *)v22 + v23[10]);
  *((unsigned char *)v21 + v23[11]) = *((unsigned char *)v22 + v23[11]);
  *((unsigned char *)v21 + v23[12]) = *((unsigned char *)v22 + v23[12]);
  *((unsigned char *)v21 + v23[13]) = *((unsigned char *)v22 + v23[13]);
  *((unsigned char *)v21 + v23[14]) = *((unsigned char *)v22 + v23[14]);
  uint64_t v40 = v23[15];
  uint64_t v41 = (void *)((char *)v21 + v40);
  uint64_t v42 = (void *)((char *)v22 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  uint64_t v43 = *(void (**)(void *, void, uint64_t, int *))(v24 + 56);
  swift_bridgeObjectRetain();
  v43(v21, 0, 1, v23);
LABEL_24:
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  uint64_t v47 = a3[13];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  *(void *)(a1 + v47) = *(void *)(a2 + v47);
  swift_retain();
  swift_release();
  *(void *)(v48 + 8) = *(void *)(v49 + 8);
  swift_retain();
  swift_release();
  uint64_t v50 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v51 = v48 + v50;
  uint64_t v52 = v49 + v50;
  uint64_t v53 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 24))(v51, v52, v53);
  uint64_t v54 = a3[14];
  uint64_t v55 = (void *)(a1 + v54);
  long long v56 = (void *)(a2 + v54);
  *uint64_t v55 = *v56;
  v55[1] = v56[1];
  v55[2] = v56[2];
  v55[3] = v56[3];
  v55[4] = v56[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100049394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = (int *)type metadata accessor for Game();
  uint64_t v17 = *((void *)v16 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100005B18(&qword_100140B48);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    long long v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    uint64_t v20 = v16[7];
    __dst = (char *)v14 + v20;
    uint64_t v21 = (char *)v15 + v20;
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(__dst, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    *(void *)((char *)v14 + v16[8]) = *(void *)((char *)v15 + v16[8]);
    *((unsigned char *)v14 + v16[9]) = *((unsigned char *)v15 + v16[9]);
    *((unsigned char *)v14 + v16[10]) = *((unsigned char *)v15 + v16[10]);
    *((unsigned char *)v14 + v16[11]) = *((unsigned char *)v15 + v16[11]);
    *((unsigned char *)v14 + v16[12]) = *((unsigned char *)v15 + v16[12]);
    *((unsigned char *)v14 + v16[13]) = *((unsigned char *)v15 + v16[13]);
    *((unsigned char *)v14 + v16[14]) = *((unsigned char *)v15 + v16[14]);
    *(_OWORD *)((char *)v14 + v16[15]) = *(_OWORD *)((char *)v15 + v16[15]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v25 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  uint64_t v26 = a3[13];
  int v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void *)(a2 + v26 + 8);
  *int v27 = *(void *)(a2 + v26);
  v27[1] = v29;
  uint64_t v30 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v31 = (char *)v27 + v30;
  uint64_t v32 = v28 + v30;
  uint64_t v33 = sub_100005B18(&qword_100140C58);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  uint64_t v34 = a3[14];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  long long v37 = *(_OWORD *)(v36 + 16);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *(_OWORD *)(v35 + 16) = v37;
  *(void *)(v35 + 32) = *(void *)(v36 + 32);
  return a1;
}

uint64_t sub_100049754(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_100017388(a1 + v7, &qword_100140FF0);
    uint64_t v10 = sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_release();
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_release();
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  swift_release();
  uint64_t v21 = a3[10];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = (int *)type metadata accessor for Game();
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, int *))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (v28)
    {
      sub_10005DC20((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_11;
    }
    uint64_t v36 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v36;
    swift_bridgeObjectRelease();
    uint64_t v37 = v23[3];
    v22[2] = v23[2];
    v22[3] = v37;
    swift_bridgeObjectRelease();
    uint64_t v38 = v23[5];
    v22[4] = v23[4];
    v22[5] = v38;
    swift_bridgeObjectRelease();
    uint64_t v39 = v24[7];
    uint64_t v40 = (char *)v22 + v39;
    __dsta = (char *)v23 + v39;
    uint64_t v41 = type metadata accessor for Date();
    uint64_t v63 = *(void *)(v41 - 8);
    uint64_t v64 = v40;
    uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
    LODWORD(v40) = v42(v40, 1, v41);
    int v43 = v42(__dsta, 1, v41);
    if (v40)
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v63 + 32))(v64, __dsta, v41);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v41);
        goto LABEL_22;
      }
      size_t v44 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v45 = v64;
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v63 + 40))(v64, __dsta, v41);
        goto LABEL_22;
      }
      (*(void (**)(void *, uint64_t))(v63 + 8))(v64, v41);
      size_t v44 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v45 = v64;
    }
    memcpy(v45, __dsta, v44);
LABEL_22:
    *(void *)((char *)v22 + v24[8]) = *(void *)((char *)v23 + v24[8]);
    *((unsigned char *)v22 + v24[9]) = *((unsigned char *)v23 + v24[9]);
    *((unsigned char *)v22 + v24[10]) = *((unsigned char *)v23 + v24[10]);
    *((unsigned char *)v22 + v24[11]) = *((unsigned char *)v23 + v24[11]);
    *((unsigned char *)v22 + v24[12]) = *((unsigned char *)v23 + v24[12]);
    *((unsigned char *)v22 + v24[13]) = *((unsigned char *)v23 + v24[13]);
    *((unsigned char *)v22 + v24[14]) = *((unsigned char *)v23 + v24[14]);
    uint64_t v46 = v24[15];
    uint64_t v47 = (void *)((char *)v22 + v46);
    uint64_t v48 = (void *)((char *)v23 + v46);
    uint64_t v50 = *v48;
    uint64_t v49 = v48[1];
    *uint64_t v47 = v50;
    v47[1] = v49;
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (v28)
  {
LABEL_11:
    uint64_t v35 = sub_100005B18(&qword_100140B48);
    memcpy(v22, v23, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_23;
  }
  long long v29 = *((_OWORD *)v23 + 1);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v29;
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  uint64_t v30 = v24[7];
  __dst = (char *)v22 + v30;
  uint64_t v31 = (char *)v23 + v30;
  uint64_t v32 = type metadata accessor for Date();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(__dst, v31, v32);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  *(void *)((char *)v22 + v24[8]) = *(void *)((char *)v23 + v24[8]);
  *((unsigned char *)v22 + v24[9]) = *((unsigned char *)v23 + v24[9]);
  *((unsigned char *)v22 + v24[10]) = *((unsigned char *)v23 + v24[10]);
  *((unsigned char *)v22 + v24[11]) = *((unsigned char *)v23 + v24[11]);
  *((unsigned char *)v22 + v24[12]) = *((unsigned char *)v23 + v24[12]);
  *((unsigned char *)v22 + v24[13]) = *((unsigned char *)v23 + v24[13]);
  *((unsigned char *)v22 + v24[14]) = *((unsigned char *)v23 + v24[14]);
  *(_OWORD *)((char *)v22 + v24[15]) = *(_OWORD *)((char *)v23 + v24[15]);
  (*(void (**)(void *, void, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
LABEL_23:
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  uint64_t v51 = a3[13];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  *(void *)(a1 + v51) = *(void *)(a2 + v51);
  swift_release();
  *(void *)(v52 + 8) = *(void *)(v53 + 8);
  swift_release();
  uint64_t v54 = *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v55 = v52 + v54;
  uint64_t v56 = v53 + v54;
  uint64_t v57 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 40))(v55, v56, v57);
  uint64_t v58 = a3[14];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = a2 + v58;
  long long v61 = *(_OWORD *)(v60 + 16);
  *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  *(_OWORD *)(v59 + 16) = v61;
  *(void *)(v59 + 32) = *(void *)(v60 + 32);
  swift_release();
  return a1;
}

uint64_t sub_100049E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100049E20);
}

uint64_t sub_100049E20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100141BE0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v13(a1 + v9, a2, v7);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + a3[7]);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v12 = sub_100005B18(&qword_100140B48);
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
    {
      uint64_t v7 = v12;
      uint64_t v8 = *(void *)(v12 - 8);
      uint64_t v9 = a3[10];
      goto LABEL_9;
    }
    uint64_t v14 = sub_100005B18(&qword_100140C50);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[13];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_100049FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049FBC);
}

uint64_t sub_100049FBC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_100005B18(&qword_100141BE0);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[7]) = (a2 - 1);
    return result;
  }
  uint64_t v12 = sub_100005B18(&qword_100140B48);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_7;
  }
  uint64_t v14 = sub_100005B18(&qword_100140C50);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a4[13];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for AccessPointAnimationView(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100141C40);
}

void sub_10004A164()
{
  sub_10004A30C(319, (unint64_t *)&unk_100141C50, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_10004A30C(319, (unint64_t *)&qword_100140CD0, (uint64_t (*)(uint64_t))type metadata accessor for Game, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F)
    {
      sub_100028B90();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10004A30C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_10004A374()
{
  unint64_t result = qword_100141CA8;
  if (!qword_100141CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141CA8);
  }
  return result;
}

uint64_t sub_10004A3C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10004A3E4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v74 = a6;
  uint64_t v71 = a5;
  uint64_t v70 = a4;
  uint64_t v75 = a3;
  uint64_t v76 = a2;
  uint64_t v77 = a1;
  uint64_t v8 = sub_100005B18(&qword_100140B48);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessPointAnchoring();
  uint64_t v72 = *(void *)(v11 - 8);
  uint64_t v73 = v11;
  __chkstk_darwin(v11);
  uint64_t v69 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v68);
  uint64_t v66 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100005B18(&qword_1001413D8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v65 - v18;
  *(void *)a7 = 0;
  type metadata accessor for RemoteAlertAccessPointContext(0);
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  *(void *)(a7 + 8) = Environment.init<A>(_:)();
  *(unsigned char *)(a7 + 16) = v20 & 1;
  uint64_t v21 = (int *)type metadata accessor for AccessPointAnimationView(0);
  uint64_t v22 = (uint64_t *)(a7 + v21[6]);
  *uint64_t v22 = swift_getKeyPath();
  sub_100005B18(&qword_100140FF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = a7 + v21[8];
  LOBYTE(v78) = 0;
  State.init(wrappedValue:)();
  uint64_t v24 = *((void *)&v82 + 1);
  *(unsigned char *)uint64_t v23 = v82;
  *(void *)(v23 + 8) = v24;
  uint64_t v25 = a7 + v21[9];
  if (qword_10013FBF8 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_100156D10;
  swift_getKeyPath();
  *(void *)&long long v82 = v26;
  sub_10005D2B0(&qword_100141F88, (void (*)(uint64_t))type metadata accessor for GameModeNotifier);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v78) = *(unsigned char *)(v26 + 16);
  State.init(wrappedValue:)();
  uint64_t v27 = *((void *)&v82 + 1);
  *(unsigned char *)uint64_t v25 = v82;
  *(void *)(v25 + 8) = v27;
  uint64_t v28 = a7 + v21[10];
  uint64_t v29 = type metadata accessor for Game();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v65 = v29;
  v31(v28, 1, 1);
  uint64_t v32 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v19, 1, 1, v32);
  sub_1000170C8((uint64_t)v19, (uint64_t)v17, &qword_1001413D8);
  int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v17, 1, v32);
  uint64_t v67 = (uint64_t *)v10;
  if (v34 == 1) {
    sub_100017388((uint64_t)v17, &qword_1001413D8);
  }
  else {
    sub_10005DC20((uint64_t)v17, type metadata accessor for AccessPointHighlight);
  }
  uint64_t v35 = a7 + v21[14];
  RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  sub_100017388((uint64_t)v19, &qword_1001413D8);
  uint64_t v78 = v37;
  uint64_t v79 = v39;
  uint64_t v80 = v41;
  uint64_t v81 = v43;
  State.init(wrappedValue:)();
  uint64_t v44 = v84;
  long long v45 = v83;
  *(_OWORD *)uint64_t v35 = v82;
  *(_OWORD *)(v35 + 16) = v45;
  *(void *)(v35 + 32) = v44;
  uint64_t v46 = v75;
  sub_10003A638(v75, v28);
  *(void *)(a7 + v21[11]) = v70;
  *(void *)(a7 + v21[12]) = v71;
  sub_1000170C8(v74, a7 + v21[13], &qword_100140C50);
  uint64_t v47 = v66;
  sub_10005DBB8(v77, v66, type metadata accessor for AccessPointContainer);
  uint64_t v48 = (uint64_t)v69;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v69, v76, v73);
  type metadata accessor for AccessPointModel(0);
  uint64_t v49 = swift_allocObject();
  swift_retain();
  swift_retain();
  sub_100045F30(v47, v48);
  uint64_t v50 = a7 + v21[7];
  uint64_t v78 = v49;
  State.init(wrappedValue:)();
  long long v51 = v82;
  *(_OWORD *)uint64_t v50 = v82;
  long long v82 = v51;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v52 = v78;
  uint64_t v53 = v67;
  sub_1000170C8(v46, (uint64_t)v67, &qword_100140B48);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v53, 1, v65) == 1)
  {
    sub_100017388((uint64_t)v53, &qword_100140B48);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v54 = *v53;
    uint64_t v55 = v53[1];
    swift_bridgeObjectRetain();
    sub_10005DC20((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for Game);
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(&v65 - 4) = v52;
  *(&v65 - 3) = v54;
  *(&v65 - 2) = v55;
  *(void *)&long long v82 = v52;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v77 + *(int *)(v68 + 28)) + 16) < 2uLL)
  {
    swift_release();
    swift_release();
    sub_100017388(v74, &qword_100140C50);
    sub_100017388(v75, &qword_100140B48);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v76, v73);
  }
  else
  {
    uint64_t v57 = *(void *)(v50 + 8);
    *(void *)&long long v82 = *(void *)v50;
    *((void *)&v82 + 1) = v57;
    State.wrappedValue.getter();
    uint64_t v58 = v78;
    uint64_t v60 = v72;
    uint64_t v59 = v73;
    long long v61 = v69;
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v69, enum case for AccessPointAnchoring.topCentered(_:), v73);
    uint64_t v62 = swift_getKeyPath();
    __chkstk_darwin(v62);
    *(&v65 - 2) = v58;
    *(&v65 - 1) = (uint64_t)v61;
    *(void *)&long long v82 = v58;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v60 + 8);
    v63(v61, v59);
    swift_release();
    swift_release();
    swift_release();
    sub_100017388(v74, &qword_100140C50);
    sub_100017388(v75, &qword_100140B48);
    v63(v76, v59);
  }
  return sub_10005DC20(v77, type metadata accessor for AccessPointContainer);
}

uint64_t sub_10004AD80()
{
  uint64_t v1 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v2 = v1 - 8;
  uint64_t v30 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v32 = v3;
  uint64_t v33 = (uint64_t)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v4 - 8);
  uint64_t v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)(v0 + *(int *)(v2 + 36));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v34 = v0;
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v12 = v37;
  swift_getKeyPath();
  uint64_t v35 = v12;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v2) = *(unsigned __int8 *)(v12 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t v35 = v10;
    uint64_t v36 = v11;
    State.wrappedValue.getter();
    uint64_t v14 = v37;
    swift_getKeyPath();
    uint64_t v35 = v14;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v29 = *(void *)(v14 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
    swift_release();
    uint64_t v35 = v10;
    uint64_t v36 = v11;
    State.wrappedValue.getter();
    uint64_t v15 = v37;
    swift_getKeyPath();
    uint64_t v35 = v15;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v16 = v15 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess();
    sub_10005DBB8(v16, (uint64_t)v8, type metadata accessor for AccessPointContainer);
    swift_release();
    uint64_t v17 = *(void *)&v8[*(int *)(v6 + 28)];
    swift_bridgeObjectRetain();
    sub_10005DC20((uint64_t)v8, type metadata accessor for AccessPointContainer);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v29 < v18)
    {
      char v19 = *(unsigned char *)(v34 + 16);
      uint64_t v20 = swift_retain();
      uint64_t v21 = sub_100034EE8(v20, v19);
      swift_release();
      swift_getKeyPath();
      uint64_t v37 = v21;
      sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (*(unsigned char *)(v21 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
      {
        swift_getKeyPath();
        uint64_t v37 = v21;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        uint64_t v22 = *(void *)(v21 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
        uint64_t result = swift_release();
        if (v22 > 0) {
          return result;
        }
        uint64_t v23 = type metadata accessor for TaskPriority();
        uint64_t v24 = (uint64_t)v31;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v31, 1, 1, v23);
        uint64_t v25 = v33;
        sub_10005DBB8(v34, v33, type metadata accessor for AccessPointAnimationView);
        type metadata accessor for MainActor();
        uint64_t v26 = static MainActor.shared.getter();
        unint64_t v27 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v26;
        *(void *)(v28 + 24) = &protocol witness table for MainActor;
        sub_10005FF38(v25, v28 + v27, type metadata accessor for AccessPointAnimationView);
        sub_10002C340(v24, (uint64_t)&unk_100141D28, v28);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10004B2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = type metadata accessor for AccessPointAnimationView(0);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = *(void *)(v6 + 64);
  v4[9] = swift_task_alloc();
  sub_100005B18(&qword_100142A60);
  v4[10] = swift_task_alloc();
  v4[11] = type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v8;
  v4[14] = v7;
  return _swift_task_switch(sub_10004B3EC, v8, v7);
}

uint64_t sub_10004B3EC()
{
  uint64_t v1 = (uint64_t *)(v0[5] + *(int *)(v0[6] + 28));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  double v4 = sub_10004B7B4(v0[4]);
  uint64_t v5 = swift_release();
  double v6 = floor(v4 * 1000000000.0);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(v5);
  }
  unint64_t v7 = (unint64_t)v6;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[15] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10004B528;
  uint64_t v5 = v7;
  return static Task<>.sleep(nanoseconds:)(v5);
}

uint64_t sub_10004B528()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = sub_100061BB0;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = sub_10004B64C;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10004B64C()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  swift_release();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_10005DBB8(v4, v1, type metadata accessor for AccessPointAnimationView);
  uint64_t v6 = static MainActor.shared.getter();
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = &protocol witness table for MainActor;
  sub_10005FF38(v1, v8 + v7, type metadata accessor for AccessPointAnimationView);
  sub_10002C340(v2, (uint64_t)&unk_100141D38, v8);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

double sub_10004B7B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DynamicTypeSize();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessPointAnimationView(0);
  sub_100035290((uint64_t)v8);
  char v9 = DynamicTypeSize.isAccessibilitySize.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v9) {
    double v10 = 1.5;
  }
  else {
    double v10 = 1.0;
  }
  swift_getKeyPath();
  v14[1] = a1;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = a1 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v11, (uint64_t)v4, type metadata accessor for AccessPointContainer);
  swift_getKeyPath();
  v14[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v12 = AccessPointContainer.displayDuration(for:)(*(void *)(a1
                                                             + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex));
  sub_10005DC20((uint64_t)v4, type metadata accessor for AccessPointContainer);
  return v10 * v12;
}

uint64_t sub_10004BA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[45] = a4;
  uint64_t v5 = type metadata accessor for AccessPointAnchoring();
  v4[46] = v5;
  v4[47] = *(void *)(v5 - 8);
  v4[48] = swift_task_alloc();
  v4[49] = type metadata accessor for AccessPointContainer(0);
  v4[50] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[51] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10004BB34, v7, v6);
}

uint64_t sub_10004BB34()
{
  uint64_t v1 = v0[45];
  swift_release();
  uint64_t v2 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v3 = *(void *)(v1 + *(int *)(v2 + 44));
  swift_getKeyPath();
  v0[31] = v3;
  sub_10005D2B0(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 16) != 1)
  {
    uint64_t v37 = v0[50];
    uint64_t v38 = v0[49];
    uint64_t v4 = (void *)(v0[45] + *(int *)(v2 + 28));
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    uint64_t v35 = v4;
    v0[20] = *v4;
    v0[21] = v5;
    sub_100005B18(&qword_100141D00);
    State.wrappedValue.getter();
    uint64_t v7 = v0[41];
    swift_getKeyPath();
    v0[38] = v7;
    sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v36 = *(void *)(v7 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
    swift_release();
    uint64_t v40 = v6;
    v0[18] = v6;
    v0[19] = v5;
    State.wrappedValue.getter();
    uint64_t v8 = v0[35];
    swift_getKeyPath();
    v0[33] = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v9 = v8 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess();
    sub_10005DBB8(v9, v37, type metadata accessor for AccessPointContainer);
    swift_release();
    uint64_t v10 = *(void *)(v37 + *(int *)(v38 + 28));
    swift_bridgeObjectRetain();
    sub_10005DC20(v37, type metadata accessor for AccessPointContainer);
    uint64_t v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease();
    if (v36 >= v11 - 1)
    {
      uint64_t v16 = v0[50];
      uint64_t v39 = v0[49];
      v0[26] = v40;
      v0[27] = v5;
      State.wrappedValue.getter();
      uint64_t v17 = v0[29];
      swift_getKeyPath();
      v0[28] = v17;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v18 = v17 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
      swift_beginAccess();
      sub_10005DBB8(v18, v16, type metadata accessor for AccessPointContainer);
      swift_release();
      int v19 = *(unsigned __int8 *)(v16 + *(int *)(v39 + 24));
      sub_10005DC20(v16, type metadata accessor for AccessPointContainer);
      if ((v19 - 3) < 4 || !v19)
      {
        uint64_t v20 = v35[1];
        v0[14] = *v35;
        v0[15] = v20;
        State.wrappedValue.getter();
        uint64_t v21 = v0[37];
        swift_getKeyPath();
        uint64_t v22 = swift_task_alloc();
        *(void *)(v22 + 16) = v21;
        *(unsigned char *)(v22 + 24) = 2;
        v0[39] = v21;
LABEL_8:
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        swift_release();
        swift_release();
        swift_task_dealloc();
        goto LABEL_9;
      }
      uint64_t v25 = v0[47];
      uint64_t v26 = v0[48];
      uint64_t v27 = v0[46];
      uint64_t v28 = v35[1];
      v0[24] = *v35;
      v0[25] = v28;
      State.wrappedValue.getter();
      uint64_t v29 = v0[30];
      swift_getKeyPath();
      v0[32] = v29;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v30 = v29 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v30, v27);
      swift_release();
      LOBYTE(v30) = AccessPointAnchoring.bottom.getter();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
      if (v30)
      {
LABEL_15:
        uint64_t v32 = v35[1];
        v0[16] = *v35;
        v0[17] = v32;
        State.wrappedValue.getter();
        uint64_t v33 = v0[34];
        swift_getKeyPath();
        uint64_t v34 = swift_task_alloc();
        *(void *)(v34 + 16) = v33;
        *(unsigned char *)(v34 + 24) = 1;
        v0[36] = v33;
        goto LABEL_8;
      }
      if (qword_10013FBB8 == -1)
      {
LABEL_14:
        uint64_t v31 = v0[45];
        *(void *)(swift_task_alloc() + 16) = v31;
        withAnimation<A>(_:_:)();
        swift_task_dealloc();
        goto LABEL_15;
      }
    }
    else
    {
      v0[22] = v40;
      v0[23] = v5;
      State.wrappedValue.getter();
      uint64_t v12 = v0[40];
      swift_getKeyPath();
      v0[42] = v12;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v0[43] = v12;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (!v14)
      {
        *(void *)(v12 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex) = v15;
        v0[44] = v12;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
        swift_release();
        sub_10004AD80();
        goto LABEL_9;
      }
      __break(1u);
    }
    swift_once();
    goto LABEL_14;
  }
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_10004C2C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointAnchoring();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  uint64_t v8 = v6[1];
  uint64_t v14 = *v6;
  uint64_t v7 = v14;
  uint64_t v15 = v8;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v9 = v16;
  uint64_t v14 = v7;
  uint64_t v15 = v8;
  State.wrappedValue.getter();
  uint64_t v10 = v16;
  swift_getKeyPath();
  uint64_t v14 = v10;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = v10 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
  swift_release();
  swift_getKeyPath();
  v13[4] = v9;
  v13[5] = v5;
  uint64_t v16 = v9;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_release();
}

uint64_t sub_10004C514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v161 = a1;
  uint64_t v2 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v160 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v160 + 64);
  uint64_t v4 = v2 - 8;
  uint64_t v130 = v2 - 8;
  uint64_t v159 = v3;
  __chkstk_darwin(v2 - 8);
  uint64_t v158 = (uint64_t)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_100005B18(&qword_100141EA0) - 8;
  __chkstk_darwin(v157);
  long long v156 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_100005B18(&qword_100141EA8) - 8;
  __chkstk_darwin(v149);
  uint64_t v146 = (uint64_t)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for UnevenRoundedRectangle() - 8;
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v134 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_100005B18(&qword_100141EB0) - 8;
  __chkstk_darwin(v141);
  uint64_t v139 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100005B18(&qword_100141EB8) - 8;
  __chkstk_darwin(v147);
  uint64_t v145 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v129 = (uint64_t)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v132 = type metadata accessor for CollapsibleContentFrame(0) - 8;
  __chkstk_darwin(v132);
  uint64_t v131 = (uint64_t *)((char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v133 = sub_100005B18(&qword_100141EC0) - 8;
  __chkstk_darwin(v133);
  uint64_t v16 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_100005B18(&qword_100141EC8) - 8;
  __chkstk_darwin(v138);
  unint64_t v137 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_100005B18(&qword_100141ED0) - 8;
  __chkstk_darwin(v144);
  uint64_t v143 = (uint64_t)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_100005B18(&qword_100141ED8) - 8;
  __chkstk_darwin(v150);
  uint64_t v148 = (uint64_t)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_100005B18(&qword_100141EE0) - 8;
  __chkstk_darwin(v152);
  uint64_t v151 = (uint64_t)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = sub_100005B18(&qword_100141EE8) - 8;
  __chkstk_darwin(v154);
  uint64_t v153 = (uint64_t)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_100005B18(&qword_100141EF0);
  __chkstk_darwin(v165);
  uint64_t v155 = (uint64_t)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = (void *)(v1 + *(int *)(v4 + 36));
  uint64_t v162 = v1;
  uint64_t v23 = v164[1];
  *(void *)v167 = *v164;
  uint64_t v24 = *(void *)v167;
  *(void *)&v167[8] = v23;
  uint64_t v25 = sub_100005B18(&qword_100141D00);
  State.projectedValue.getter();
  uint64_t v26 = v173;
  uint64_t v128 = v172;
  uint64_t v27 = v174;
  uint64_t v172 = v24;
  uint64_t v173 = v23;
  State.wrappedValue.getter();
  uint64_t v28 = *(void *)v167;
  swift_getKeyPath();
  uint64_t v172 = v28;
  uint64_t v166 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
  *(unsigned char *)(swift_allocObject() + 16) = 0;
  ObservationRegistrar.init()();
  sub_10005F598(v128, v26, v27, (uint64_t)&v172);
  uint64_t v29 = v172;
  LOBYTE(v4) = v173;
  uint64_t v30 = v174;
  uint64_t v124 = v176;
  uint64_t v123 = v177;
  int v122 = v178;
  long long v126 = v179;
  uint64_t v128 = v180;
  uint64_t v127 = Namespace.wrappedValue.getter();
  int v125 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v183 = v4;
  *(void *)&long long v169 = v24;
  *((void *)&v169 + 1) = v23;
  uint64_t v163 = v25;
  State.projectedValue.getter();
  uint64_t v35 = *(void *)v167;
  long long v121 = *(_OWORD *)&v167[8];
  *(void *)v167 = v24;
  *(void *)&v167[8] = v23;
  State.wrappedValue.getter();
  uint64_t v36 = v169;
  swift_getKeyPath();
  *(void *)v167 = v36;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v37 = v36 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  uint64_t v38 = v129;
  sub_10005DBB8(v37, v129, type metadata accessor for AccessPointContainer);
  swift_getKeyPath();
  *(void *)v167 = v36;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v37) = AccessPointContainer.isCollapsibleItem(at:)(*(void *)(v36
                                                                      + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex));
  sub_10005DC20(v38, type metadata accessor for AccessPointContainer);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = (uint64_t)v131;
  *uint64_t v131 = KeyPath;
  sub_100005B18(&qword_100140FF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = v132;
  uint64_t v42 = v40 + *(int *)(v132 + 28);
  *(void *)uint64_t v42 = v35;
  *(_OWORD *)(v42 + 8) = v121;
  uint64_t v43 = v41;
  uint64_t v44 = v40 + *(int *)(v41 + 32);
  LOBYTE(v169) = v37 & 1;
  State.init(wrappedValue:)();
  uint64_t v45 = *(void *)&v167[8];
  *(unsigned char *)uint64_t v44 = v167[0];
  *(void *)(v44 + 8) = v45;
  uint64_t v46 = v40 + *(int *)(v43 + 36);
  LOBYTE(v169) = 0;
  State.init(wrappedValue:)();
  uint64_t v47 = *(void *)&v167[8];
  *(unsigned char *)uint64_t v46 = v167[0];
  *(void *)(v46 + 8) = v47;
  sub_10005DBB8(v40, (uint64_t)&v16[*(int *)(v133 + 44)], type metadata accessor for CollapsibleContentFrame);
  *(void *)uint64_t v16 = v29;
  v16[8] = v183;
  *(_DWORD *)(v16 + 9) = *(_DWORD *)v182;
  *((_DWORD *)v16 + 3) = *(_DWORD *)&v182[3];
  *((void *)v16 + 2) = v30;
  *(_OWORD *)(v16 + 24) = v175;
  uint64_t v48 = v123;
  *((void *)v16 + 5) = v124;
  *((void *)v16 + 6) = v48;
  v16[56] = v122;
  *(_DWORD *)(v16 + 57) = *(_DWORD *)v181;
  *((_DWORD *)v16 + 15) = *(_DWORD *)&v181[3];
  *((_OWORD *)v16 + 4) = v126;
  *((void *)v16 + 10) = v128;
  *((void *)v16 + 11) = 0x3FF0000000000000;
  *((void *)v16 + 12) = 0x7974696361706FLL;
  *((void *)v16 + 13) = 0xE700000000000000;
  *((void *)v16 + 14) = v127;
  *((_DWORD *)v16 + 30) = v125;
  *((void *)v16 + 16) = v32;
  *((void *)v16 + 17) = v34;
  v16[144] = 1;
  sub_10005DC20(v40, type metadata accessor for CollapsibleContentFrame);
  uint64_t v49 = static Color.clear.getter();
  (*(void (**)(char *, void, uint64_t))(v135 + 104))(v134, enum case for Color.RGBColorSpace.sRGB(_:), v136);
  uint64_t v50 = Color.init(_:red:green:blue:opacity:)();
  LOBYTE(v35) = static Edge.Set.all.getter();
  uint64_t v134 = (char *)static Alignment.center.getter();
  uint64_t v133 = v51;
  uint64_t v52 = v162;
  uint64_t v53 = v162 + *(int *)(v130 + 64);
  uint64_t v54 = *(void *)(v53 + 32);
  long long v55 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v167 = *(_OWORD *)v53;
  *(_OWORD *)&v167[16] = v55;
  uint64_t v168 = v54;
  sub_100005B18(&qword_100141EF8);
  State.wrappedValue.getter();
  long long v132 = v169;
  uint64_t v56 = v170;
  uint64_t v57 = v171;
  uint64_t v58 = (uint64_t)v140;
  uint64_t v59 = &v140[*(int *)(v142 + 28)];
  uint64_t v60 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v136) = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v61 = type metadata accessor for RoundedCornerStyle();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v135 = *(void *)(v62 + 104);
  uint64_t v142 = v62 + 104;
  ((void (*)(char *, uint64_t, uint64_t))v135)(v59, v60, v61);
  *(_OWORD *)uint64_t v58 = v132;
  *(void *)(v58 + 16) = v56;
  *(void *)(v58 + 24) = v57;
  uint64_t v63 = v146;
  sub_10005DBB8(v58, v146, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  *(_WORD *)(v63 + *(int *)(v149 + 44)) = 256;
  uint64_t v64 = v139;
  sub_1000170C8(v63, (uint64_t)&v139[*(int *)(v141 + 44)], &qword_100141EA8);
  *(void *)uint64_t v64 = v49;
  *((void *)v64 + 1) = v50;
  v64[16] = v35;
  uint64_t v65 = v133;
  *((void *)v64 + 3) = v134;
  *((void *)v64 + 4) = v65;
  uint64_t v66 = (uint64_t)v64;
  swift_retain();
  swift_retain();
  sub_100017388(v63, &qword_100141EA8);
  sub_10005DC20(v58, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  swift_release();
  swift_release();
  uint64_t v67 = v52;
  uint64_t v68 = Namespace.wrappedValue.getter();
  LODWORD(v49) = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v70 = v69;
  uint64_t v72 = v71;
  uint64_t v73 = (uint64_t)v64;
  uint64_t v74 = v145;
  sub_1000170C8(v73, v145, &qword_100141EB0);
  uint64_t v75 = v74 + *(int *)(v147 + 44);
  *(void *)uint64_t v75 = 0x756F72676B636162;
  *(void *)(v75 + 8) = 0xEA0000000000646ELL;
  *(void *)(v75 + 16) = v68;
  *(_DWORD *)(v75 + 24) = v49;
  *(void *)(v75 + 32) = v70;
  *(void *)(v75 + 40) = v72;
  *(unsigned char *)(v75 + 48) = 1;
  sub_100017388(v66, &qword_100141EB0);
  uint64_t v76 = static Alignment.center.getter();
  uint64_t v78 = v77;
  uint64_t v79 = (uint64_t)v137;
  uint64_t v80 = (uint64_t)&v137[*(int *)(v138 + 44)];
  sub_1000170C8(v74, v80, &qword_100141EB8);
  uint64_t v81 = (uint64_t *)(v80 + *(int *)(sub_100005B18(&qword_100141F00) + 36));
  uint64_t *v81 = v76;
  v81[1] = v78;
  sub_1000170C8((uint64_t)v16, v79, &qword_100141EC0);
  sub_100017388(v74, &qword_100141EB8);
  sub_100017388((uint64_t)v16, &qword_100141EC0);
  uint64_t v82 = (uint64_t)v156;
  ((void (*)(char *, void, uint64_t))v135)(v156, v136, v61);
  uint64_t v83 = static Color.accentColor.getter();
  uint64_t v84 = v157;
  *(void *)(v82 + *(int *)(v157 + 60)) = v83;
  *(void *)(v82 + *(int *)(v84 + 64)) = 0x4010000000000000;
  uint64_t v85 = v143;
  sub_1000170C8(v82, v143, &qword_100141EA0);
  uint64_t v86 = v144;
  sub_1000170C8(v79, v85 + *(int *)(v144 + 44), &qword_100141EC8);
  uint64_t v87 = v86;
  uint64_t v88 = v85 + *(int *)(v86 + 48);
  *(unsigned char *)uint64_t v88 = FocusState.init<>()() & 1;
  *(void *)(v88 + 8) = v89;
  *(unsigned char *)(v88 + 16) = v90 & 1;
  uint64_t v91 = v85 + *(int *)(v87 + 52);
  *(void *)uint64_t v91 = swift_getKeyPath();
  *(unsigned char *)(v91 + 8) = 0;
  sub_100017388(v82, &qword_100141EA0);
  sub_100017388(v79, &qword_100141EC8);
  double v92 = sub_10004D8D8();
  static UnitPoint.center.getter();
  uint64_t v94 = v93;
  uint64_t v96 = v95;
  uint64_t v97 = v148;
  sub_1000170C8(v85, v148, &qword_100141ED0);
  uint64_t v98 = (double *)(v97 + *(int *)(v150 + 44));
  *uint64_t v98 = v92;
  v98[1] = v92;
  *((void *)v98 + 2) = v94;
  *((void *)v98 + 3) = v96;
  sub_100017388(v85, &qword_100141ED0);
  uint64_t v99 = v164;
  uint64_t v100 = v164[1];
  *(void *)v167 = *v164;
  *(void *)&v167[8] = v100;
  State.wrappedValue.getter();
  uint64_t v101 = v169;
  swift_getKeyPath();
  *(void *)v167 = v101;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v61) = *(unsigned __int8 *)(v101 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  if (v61 == 3) {
    double v102 = -200.0;
  }
  else {
    double v102 = 0.0;
  }
  uint64_t v103 = v151;
  sub_1000170C8(v97, v151, &qword_100141ED8);
  uint64_t v104 = v103 + *(int *)(v152 + 44);
  *(void *)uint64_t v104 = 0;
  *(double *)(v104 + 8) = v102;
  sub_100017388(v97, &qword_100141ED8);
  uint64_t v105 = v99[1];
  *(void *)v167 = *v99;
  *(void *)&v167[8] = v105;
  State.wrappedValue.getter();
  uint64_t v106 = v169;
  swift_getKeyPath();
  *(void *)v167 = v106;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v107 = *(unsigned __int8 *)(v106 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
  swift_release();
  if (v107) {
    double v108 = 1.0;
  }
  else {
    double v108 = 0.5;
  }
  uint64_t v109 = v153;
  sub_1000170C8(v103, v153, &qword_100141EE0);
  *(double *)(v109 + *(int *)(v154 + 44)) = v108;
  sub_100017388(v103, &qword_100141EE0);
  uint64_t v110 = v67;
  uint64_t v111 = v158;
  sub_10005DBB8(v110, v158, type metadata accessor for AccessPointAnimationView);
  unint64_t v112 = (*(unsigned __int8 *)(v160 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
  uint64_t v113 = swift_allocObject();
  sub_10005FF38(v111, v113 + v112, type metadata accessor for AccessPointAnimationView);
  uint64_t v114 = v155;
  sub_1000170C8(v109, v155, &qword_100141EE8);
  uint64_t v115 = (uint64_t (**)())(v114 + *(int *)(v165 + 36));
  *uint64_t v115 = sub_10005F86C;
  v115[1] = (uint64_t (*)())v113;
  v115[2] = 0;
  v115[3] = 0;
  sub_100017388(v109, &qword_100141EE8);
  uint64_t v116 = v164[1];
  *(void *)v167 = *v164;
  *(void *)&v167[8] = v116;
  State.wrappedValue.getter();
  uint64_t v117 = v169;
  swift_getKeyPath();
  *(void *)v167 = v117;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v118 = *(void *)(v117 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release();
  *(void *)v167 = v118;
  sub_10005DBB8(v162, v111, type metadata accessor for AccessPointAnimationView);
  uint64_t v119 = swift_allocObject();
  sub_10005FF38(v111, v119 + v112, type metadata accessor for AccessPointAnimationView);
  sub_10005F928(&qword_100141F08, &qword_100141EF0, (void (*)(void))sub_10005F8C8);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return sub_100017388(v114, &qword_100141EF0);
}

double sub_10004D8D8()
{
  type metadata accessor for AccessPointAnimationView(0);
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v0 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
  swift_release();
  double result = 0.0;
  if (v0 == 1)
  {
    sub_100005B18(&qword_100140E10);
    State.wrappedValue.getter();
    double result = 0.98;
    if (!(_BYTE)v2) {
      return 1.0;
    }
  }
  return result;
}

uint64_t sub_10004DA1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v33 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(v3 + 28));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v34 = v7;
  uint64_t v35 = v6;
  uint64_t v30 = v6;
  uint64_t v32 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v8 = v36;
  char v9 = *(unsigned char *)(a1 + 16);
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_100034EE8(v10, v9);
  swift_release();
  swift_getKeyPath();
  uint64_t v34 = v11;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v12 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
  uint64_t v29 = v2;
  uint64_t v31 = v7;
  if (v12 == 1)
  {
    swift_getKeyPath();
    uint64_t v34 = v11;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release();
    BOOL v14 = v13 > 0;
  }
  else
  {
    swift_release();
    BOOL v14 = 1;
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(&v28 - 2) = v8;
  *((unsigned char *)&v28 - 8) = v14;
  uint64_t v34 = v8;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_100034EE8(v16, v9);
  swift_release();
  swift_getKeyPath();
  uint64_t v34 = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v17 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) != 1) {
    return swift_release();
  }
  swift_getKeyPath();
  uint64_t v34 = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  uint64_t result = swift_release();
  if (v18 > 0) {
    return result;
  }
  uint64_t v34 = v31;
  uint64_t v35 = v30;
  State.wrappedValue.getter();
  uint64_t v20 = v36;
  swift_getKeyPath();
  uint64_t v34 = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v21 = *(unsigned __int8 *)(v20 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  uint64_t v22 = v33;
  sub_10005DBB8(a1, v33, type metadata accessor for AccessPointAnimationView);
  if (v21)
  {
    uint64_t v23 = (uint64_t *)(v22 + *(int *)(v29 + 28));
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v34 = v25;
    uint64_t v35 = v24;
    State.wrappedValue.getter();
    uint64_t v26 = v36;
    swift_getKeyPath();
    uint64_t v34 = v26;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v27 = *(unsigned __int8 *)(v26 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release();
    uint64_t result = sub_10005DC20(v22, type metadata accessor for AccessPointAnimationView);
    if (v27 != 1) {
      return result;
    }
  }
  else
  {
    sub_10005DC20(v22, type metadata accessor for AccessPointAnimationView);
  }
  if (qword_10013FBC0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1001416F8);
  *(&v28 - 2) = a1;
  return withAnimation<A>(_:_:)();
}

uint64_t sub_10004DF48()
{
  return swift_release();
}

uint64_t sub_10004E060(uint64_t a1)
{
  uint64_t v14 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v2 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v5 = *(void *)(v15 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v15);
  if (qword_10013FBE8 != -1) {
    uint64_t v7 = swift_once();
  }
  __chkstk_darwin(v7);
  *(&v14 - 2) = a1;
  sub_10005DBB8(a1, (uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  sub_10005FF38((uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for AccessPointAnimationView);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v14);
  if (qword_10013FBB8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1001416F0);
  *(&v14 - 2) = a1;
  withAnimation<A>(_:_:)();
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(v15 + 28));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v16 = v12;
  uint64_t v17 = v11;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  sub_100047194();
  return swift_release();
}

uint64_t sub_10004E394()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10004E408()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10004E478(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v2 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v6 = (void *)(a1 + *(int *)(v5 + 28));
  uint64_t v8 = v6[1];
  *(void *)&long long v31 = *v6;
  uint64_t v7 = v31;
  *((void *)&v31 + 1) = v8;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v9 = v27;
  swift_getKeyPath();
  *(void *)&long long v31 = v9;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v10 = v9 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v10, (uint64_t)v4, type metadata accessor for AccessPointContainer);
  swift_release();
  *(void *)&long long v31 = v7;
  *((void *)&v31 + 1) = v8;
  State.wrappedValue.getter();
  uint64_t v11 = v27;
  swift_getKeyPath();
  *(void *)&long long v31 = v11;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release();
  AccessPointContainer.cornerRadii(for:)(v12);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_10005DC20((uint64_t)v4, type metadata accessor for AccessPointContainer);
  int v21 = (long long *)(v26 + *(int *)(v5 + 56));
  uint64_t v22 = *((void *)v21 + 4);
  long long v23 = v21[1];
  long long v31 = *v21;
  long long v32 = v23;
  uint64_t v33 = v22;
  uint64_t v27 = v14;
  uint64_t v28 = v16;
  uint64_t v29 = v18;
  uint64_t v30 = v20;
  sub_100005B18(&qword_100141EF8);
  return State.wrappedValue.setter();
}

uint64_t sub_10004E6F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v81 = a2;
  uint64_t v78 = sub_100005B18(&qword_100141E88);
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v76 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100005B18(&qword_100141E90);
  uint64_t v4 = __chkstk_darwin(v74);
  uint64_t v79 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v86 = (uint64_t)&v67 - v6;
  uint64_t v7 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v80 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for AccessPointAnchoring();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v75 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v67 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t v72 = (uint64_t *)(a1 + *(int *)(v7 + 28));
  uint64_t v21 = v72[1];
  uint64_t v94 = *v72;
  uint64_t v95 = v21;
  uint64_t v84 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v22 = v92;
  swift_getKeyPath();
  uint64_t v94 = v22;
  uint64_t v85 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v23 = v22 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v83(v20, v23, v12);
  uint64_t v24 = (uint64_t)v11;
  swift_release();
  LOBYTE(v23) = AccessPointAnchoring.centered.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v26 = v20;
  uint64_t v27 = v70;
  v25(v26, v12);
  sub_10005DBB8(v27, (uint64_t)v11, type metadata accessor for AccessPointAnimationView);
  uint64_t v69 = v18;
  uint64_t v68 = v7;
  uint64_t v82 = v13 + 8;
  uint64_t v71 = v25;
  if (v23)
  {
    int v73 = 0;
  }
  else
  {
    uint64_t v29 = &v11[*(int *)(v7 + 28)];
    uint64_t v31 = *(void *)v29;
    uint64_t v30 = *((void *)v29 + 1);
    uint64_t v92 = v31;
    uint64_t v93 = v30;
    long long v32 = v25;
    State.wrappedValue.getter();
    uint64_t v33 = v90;
    swift_getKeyPath();
    uint64_t v92 = v33;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v34 = v33 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
    swift_beginAccess();
    v83(v18, v34, v12);
    swift_release();
    int v73 = AccessPointAnchoring.leading.getter();
    v32(v18, v12);
  }
  uint64_t v28 = v12;
  sub_10005DC20(v24, type metadata accessor for AccessPointAnimationView);
  uint64_t v35 = v76;
  sub_10004C514(v76);
  uint64_t v36 = Namespace.wrappedValue.getter();
  int v37 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v42 = v77;
  uint64_t v43 = (uint64_t)v79;
  uint64_t v44 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v79, v35, v78);
  uint64_t v45 = v43 + *(int *)(v74 + 36);
  *(void *)uint64_t v45 = 1936683112;
  *(void *)(v45 + 8) = 0xE400000000000000;
  *(void *)(v45 + 16) = v36;
  *(_DWORD *)(v45 + 24) = v37;
  *(void *)(v45 + 32) = v39;
  *(void *)(v45 + 40) = v41;
  *(unsigned char *)(v45 + 48) = 1;
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v44);
  sub_100024A74(v43, v86, &qword_100141E90);
  uint64_t v46 = v72[1];
  uint64_t v90 = *v72;
  uint64_t v91 = v46;
  State.wrappedValue.getter();
  uint64_t v47 = v87;
  swift_getKeyPath();
  uint64_t v90 = v47;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v48 = v47 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  uint64_t v49 = v75;
  uint64_t v50 = v83;
  v83(v75, v48, v28);
  swift_release();
  LOBYTE(v47) = AccessPointAnchoring.centered.getter();
  uint64_t v51 = v71;
  v71(v49, v28);
  uint64_t v52 = v27;
  uint64_t v53 = v80;
  sub_10005DBB8(v52, v80, type metadata accessor for AccessPointAnimationView);
  if (v47)
  {
    sub_10005DC20(v53, type metadata accessor for AccessPointAnimationView);
    char v54 = 0;
  }
  else
  {
    long long v55 = (uint64_t *)(v53 + *(int *)(v68 + 28));
    uint64_t v57 = *v55;
    uint64_t v56 = v55[1];
    uint64_t v87 = v57;
    uint64_t v88 = v56;
    uint64_t v58 = v51;
    State.wrappedValue.getter();
    uint64_t v59 = v89;
    swift_getKeyPath();
    uint64_t v87 = v59;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v60 = v59 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
    swift_beginAccess();
    uint64_t v61 = v69;
    v50(v69, v60, v28);
    swift_release();
    LOBYTE(v59) = AccessPointAnchoring.leading.getter();
    v58(v61, v28);
    sub_10005DC20(v53, type metadata accessor for AccessPointAnimationView);
    char v54 = v59 ^ 1;
  }
  uint64_t v62 = v86;
  sub_1000170C8(v86, v43, &qword_100141E90);
  uint64_t v63 = v81;
  void *v81 = 0;
  *((unsigned char *)v63 + 8) = 0;
  *((unsigned char *)v63 + 9) = v73 & 1;
  uint64_t v64 = sub_100005B18(&qword_100141E98);
  sub_1000170C8(v43, (uint64_t)v63 + *(int *)(v64 + 48), &qword_100141E90);
  uint64_t v65 = (char *)v63 + *(int *)(v64 + 64);
  *(void *)uint64_t v65 = 0;
  v65[8] = 0;
  v65[9] = v54 & 1;
  sub_100017388(v62, &qword_100141E90);
  return sub_100017388(v43, &qword_100141E90);
}

uint64_t sub_10004EF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v137 = a2;
  uint64_t v130 = a3;
  uint64_t v117 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for AccessPointAnchoring();
  uint64_t v113 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  unint64_t v112 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for GeometryProxy();
  uint64_t v138 = *(void *)(v134 - 8);
  uint64_t v6 = *(void *)(v138 + 64);
  __chkstk_darwin(v134);
  uint64_t v135 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v8 = v7 - 8;
  int v125 = *(void (**)(uint64_t, char *, uint64_t))(v7 - 8);
  uint64_t v9 = *((void *)v125 + 8);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_100005B18(&qword_100141E10);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = (int *)sub_100005B18(&qword_100141E18);
  __chkstk_darwin(v136);
  uint64_t v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_100005B18(&qword_100141E20);
  uint64_t v114 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  long long v126 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_100005B18(&qword_100141E28);
  uint64_t v120 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v119 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_100005B18(&qword_100141E30);
  uint64_t v122 = *(void *)(v132 - 8);
  uint64_t v17 = __chkstk_darwin(v132);
  uint64_t v118 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  long long v121 = (char *)&v97 - v19;
  uint64_t v127 = sub_100005B18(&qword_100141E38);
  __chkstk_darwin(v127);
  uint64_t v129 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1;
  uint64_t v111 = (int **)(a1 + *(int *)(v8 + 36));
  uint64_t v22 = (ValueMetadata *)v111[1];
  uint64_t v143 = *v111;
  uint64_t v144 = v22;
  uint64_t v110 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v23 = v139;
  swift_getKeyPath();
  uint64_t v143 = v23;
  uint64_t v109 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v8) = *((unsigned __int8 *)v23 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden);
  swift_release();
  if (v8 == 1)
  {
    swift_storeEnumTagMultiPayload();
    type metadata accessor for CGRect(255);
    uint64_t v25 = v24;
    unint64_t v26 = sub_10005F4F0();
    uint64_t v27 = sub_10005D2B0(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
    uint64_t v143 = v136;
    uint64_t v144 = (ValueMetadata *)v133;
    unint64_t v145 = v26;
    unint64_t v146 = v27;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v29 = sub_10005D2B0(&qword_100140EC8, type metadata accessor for CGRect);
    uint64_t v143 = (int *)v128;
    uint64_t v144 = v25;
    unint64_t v145 = OpaqueTypeConformance2;
    unint64_t v146 = v29;
    uint64_t v30 = swift_getOpaqueTypeConformance2();
    unint64_t v31 = sub_10004A374();
    uint64_t v143 = (int *)v131;
    uint64_t v144 = &type metadata for AccessPointModel.AnimationState;
    unint64_t v145 = v30;
    unint64_t v146 = v31;
    swift_getOpaqueTypeConformance2();
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    *(void *)uint64_t v12 = static HorizontalAlignment.center.getter();
    *((void *)v12 + 1) = 0;
    v12[16] = 0;
    uint64_t v33 = sub_100005B18(&qword_100141E40);
    sub_10004FF68(a1, &v12[*(int *)(v33 + 44)]);
    uint64_t v106 = type metadata accessor for AccessPointAnimationView;
    uint64_t v34 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_10005DBB8(v21, (uint64_t)v34, type metadata accessor for AccessPointAnimationView);
    uint64_t v35 = v138;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
    uint64_t v105 = v138 + 16;
    uint64_t v123 = v36;
    uint64_t v37 = v134;
    uint64_t v38 = v135;
    v36(v135, v137, v134);
    uint64_t v39 = *((unsigned __int8 *)v125 + 80);
    uint64_t v40 = *(unsigned __int8 *)(v35 + 80);
    uint64_t v41 = v9 + v40 + ((v39 + 16) & ~v39);
    uint64_t v42 = (v39 + 16) & ~v39;
    uint64_t v124 = v42;
    uint64_t v43 = v41 & ~v40;
    uint64_t v104 = v43 + v6;
    uint64_t v44 = v43;
    uint64_t v102 = v43;
    uint64_t v103 = v39 | v40 | 7;
    uint64_t v45 = swift_allocObject();
    double v108 = type metadata accessor for AccessPointAnimationView;
    sub_10005FF38((uint64_t)v34, v45 + v42, type metadata accessor for AccessPointAnimationView);
    uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
    uint64_t v138 = v35 + 32;
    int v125 = v46;
    v46(v45 + v44, v38, v37);
    uint64_t v100 = v14;
    sub_1000170C8((uint64_t)v12, (uint64_t)v14, &qword_100141E10);
    uint64_t v47 = &v14[v136[9]];
    *(void *)uint64_t v47 = sub_10005F098;
    *((void *)v47 + 1) = v45;
    *((void *)v47 + 2) = 0;
    *((void *)v47 + 3) = 0;
    sub_100017388((uint64_t)v12, &qword_100141E10);
    uint64_t v48 = v21;
    LOBYTE(v44) = *(unsigned char *)(v21 + 16);
    uint64_t v107 = v21;
    uint64_t v49 = swift_retain();
    uint64_t v50 = sub_100034EE8(v49, v44);
    swift_release();
    swift_getKeyPath();
    uint64_t v143 = (int *)v50;
    sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v51 = v50 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess();
    uint64_t v52 = v113;
    uint64_t v53 = v112;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v112, v51, v133);
    swift_release();
    uint64_t v101 = v34;
    char v54 = v106;
    sub_10005DBB8(v48, (uint64_t)v34, v106);
    uint64_t v55 = v134;
    uint64_t v56 = v135;
    v123(v135, v137, v134);
    uint64_t v57 = swift_allocObject();
    sub_10005FF38((uint64_t)v34, v57 + v124, type metadata accessor for AccessPointAnimationView);
    uint64_t v58 = v102;
    v125(v57 + v102, v56, v55);
    unint64_t v98 = sub_10005F4F0();
    uint64_t v99 = sub_10005D2B0(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
    uint64_t v59 = v133;
    uint64_t v60 = (uint64_t)v100;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    uint64_t v61 = v53;
    uint64_t v62 = v59;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v61, v59);
    sub_100017388(v60, &qword_100141E18);
    uint64_t v63 = v115;
    static CoordinateSpaceProtocol<>.global.getter();
    uint64_t v64 = v117;
    uint64_t v65 = v137;
    GeometryProxy.frame<A>(in:)();
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    unint64_t v71 = v70;
    unint64_t v73 = v72;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v63, v64);
    uint64_t v143 = v67;
    uint64_t v144 = v69;
    unint64_t v145 = v71;
    unint64_t v146 = v73;
    uint64_t v74 = (uint64_t)v101;
    sub_10005DBB8(v107, (uint64_t)v101, v54);
    uint64_t v76 = v134;
    uint64_t v75 = v135;
    v123(v135, v65, v134);
    uint64_t v77 = swift_allocObject();
    sub_10005FF38(v74, v77 + v124, v108);
    v125(v77 + v58, v75, v76);
    type metadata accessor for CGRect(0);
    uint64_t v79 = v78;
    uint64_t v139 = v136;
    uint64_t v140 = v62;
    unint64_t v141 = v98;
    uint64_t v142 = v99;
    uint64_t v136 = (int *)&opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
    uint64_t v80 = swift_getOpaqueTypeConformance2();
    uint64_t v81 = sub_10005D2B0(&qword_100140EC8, type metadata accessor for CGRect);
    uint64_t v82 = v119;
    uint64_t v83 = v128;
    uint64_t v84 = v126;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v84, v83);
    uint64_t v85 = (ValueMetadata *)v111[1];
    uint64_t v143 = *v111;
    uint64_t v144 = v85;
    State.wrappedValue.getter();
    uint64_t v86 = v139;
    swift_getKeyPath();
    uint64_t v143 = v86;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v84) = *((unsigned char *)v86 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release();
    LOBYTE(v139) = (_BYTE)v84;
    uint64_t v87 = (uint64_t)v101;
    sub_10005DBB8(v107, (uint64_t)v101, v106);
    uint64_t v88 = v135;
    v123(v135, v137, v76);
    uint64_t v89 = swift_allocObject();
    sub_10005FF38(v87, v89 + v124, v108);
    v125(v89 + v102, v88, v76);
    uint64_t v143 = (int *)v83;
    uint64_t v144 = v79;
    unint64_t v145 = v80;
    unint64_t v146 = v81;
    uint64_t v90 = swift_getOpaqueTypeConformance2();
    unint64_t v91 = sub_10004A374();
    uint64_t v92 = v118;
    uint64_t v93 = v131;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v82, v93);
    uint64_t v94 = v122;
    uint64_t v95 = v121;
    uint64_t v96 = v132;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v121, v92, v132);
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v129, v95, v96);
    swift_storeEnumTagMultiPayload();
    uint64_t v143 = (int *)v93;
    uint64_t v144 = &type metadata for AccessPointModel.AnimationState;
    unint64_t v145 = v90;
    unint64_t v146 = v91;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v95, v96);
  }
}

uint64_t sub_10004FF68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v49 = a2;
  uint64_t v3 = sub_100005B18(&qword_100141E68);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100141E70);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v41 - v11;
  uint64_t v50 = type metadata accessor for AccessPointAnchoring();
  uint64_t v12 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  uint64_t v16 = v15[1];
  uint64_t v54 = *v15;
  uint64_t v55 = v16;
  uint64_t v47 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v17 = v51;
  swift_getKeyPath();
  uint64_t v54 = v17;
  uint64_t v44 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = v17 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v19 = v18;
  uint64_t v20 = v50;
  v43(v14, v19, v50);
  swift_release();
  int v21 = AccessPointAnchoring.bottom.getter();
  char v22 = v21;
  int v46 = v21;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v12 + 8);
  v42(v14, v20);
  int v45 = v22 & 1;
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v23 = sub_100005B18(&qword_100141E78);
  sub_10004E6F0(v41, &v5[*(int *)(v23 + 44)]);
  uint64_t v24 = Namespace.wrappedValue.getter();
  int v25 = static MatchedGeometryProperties.frame.getter();
  static UnitPoint.center.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  sub_1000170C8((uint64_t)v5, (uint64_t)v10, &qword_100141E68);
  uint64_t v30 = &v10[*(int *)(v7 + 44)];
  *(void *)uint64_t v30 = 1936683126;
  *((void *)v30 + 1) = 0xE400000000000000;
  *((void *)v30 + 2) = v24;
  *((_DWORD *)v30 + 6) = v25;
  *((void *)v30 + 4) = v27;
  *((void *)v30 + 5) = v29;
  v30[48] = 1;
  sub_100017388((uint64_t)v5, &qword_100141E68);
  uint64_t v31 = v48;
  sub_100024A74((uint64_t)v10, v48, &qword_100141E70);
  uint64_t v32 = v15[1];
  uint64_t v51 = *v15;
  uint64_t v52 = v32;
  State.wrappedValue.getter();
  uint64_t v33 = v53;
  swift_getKeyPath();
  uint64_t v51 = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v34 = v33 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  uint64_t v35 = v50;
  v43(v14, v34, v50);
  swift_release();
  LOBYTE(v33) = AccessPointAnchoring.bottom.getter();
  v42(v14, v35);
  sub_1000170C8(v31, (uint64_t)v10, &qword_100141E70);
  uint64_t v36 = v49;
  *uint64_t v49 = 0;
  *((unsigned char *)v36 + 8) = v45;
  *((unsigned char *)v36 + 9) = (v46 & 1) == 0;
  uint64_t v37 = v36;
  uint64_t v38 = sub_100005B18(&qword_100141E80);
  sub_1000170C8((uint64_t)v10, (uint64_t)v37 + *(int *)(v38 + 48), &qword_100141E70);
  uint64_t v39 = (uint64_t)v37 + *(int *)(v38 + 64);
  *(void *)uint64_t v39 = 0;
  *(unsigned char *)(v39 + 8) = (v33 & 1) == 0;
  *(unsigned char *)(v39 + 9) = v33 & 1;
  sub_100017388(v31, &qword_100141E70);
  return sub_100017388((uint64_t)v10, &qword_100141E70);
}

uint64_t sub_100050428(uint64_t a1)
{
  v65[1] = a1;
  uint64_t v2 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v2 - 8);
  unint64_t v70 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessPointAnchoring();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  __chkstk_darwin(v4);
  uint64_t v66 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DynamicTypeSize();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for GlobalCoordinateSpace();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = v1;
  char v14 = *(unsigned char *)(v1 + 16);
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_100034EE8(v15, v14);
  swift_release();
  swift_getKeyPath();
  uint64_t v74 = v16;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t result = swift_release();
  if (!Strong) {
    return result;
  }
  v65[0] = Strong;
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  double v20 = v19;
  double v22 = v21;
  double v24 = v23;
  CGFloat v26 = v25;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_10013FC88 != -1) {
    swift_once();
  }
  if (*(double *)&qword_100156DE8 >= v24) {
    *(double *)&uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = qword_100156DE8;
  }
  uint64_t v28 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v29 = v69;
  sub_100035290((uint64_t)v9);
  double v30 = sub_1000A31AC((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  char v31 = *(unsigned char *)(v29 + 16);
  uint64_t v32 = swift_retain();
  uint64_t v33 = sub_100034EE8(v32, v31);
  swift_release();
  swift_getKeyPath();
  uint64_t v74 = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v34 = v33 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v36 = v66;
  uint64_t v35 = v67;
  uint64_t v37 = v34;
  uint64_t v38 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v37, v68);
  swift_release();
  int v39 = (*(uint64_t (**)(char *, uint64_t))(v35 + 88))(v36, v38);
  if (v39 == enum case for AccessPointAnchoring.topTrailing(_:))
  {
    v75.origin.x = v20;
    v75.origin.y = v22;
    v75.size.width = v24;
    v75.size.height = v26;
    double MaxX = CGRectGetMaxX(v75);
    uint64_t v41 = (uint64_t *)(v29 + *(int *)(v28 + 28));
    uint64_t v43 = *v41;
    uint64_t v42 = v41[1];
    uint64_t v71 = v43;
    uint64_t v72 = v42;
    sub_100005B18(&qword_100141D00);
    State.wrappedValue.getter();
    uint64_t v44 = v73;
    swift_getKeyPath();
    uint64_t v71 = v44;
    sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v45 = *(unsigned __int8 *)(v44 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release();
    if (v45 == 1) {
      double v46 = v30;
    }
    else {
      double v46 = *(double *)&v27;
    }
    double v20 = MaxX - v46;
    goto LABEL_20;
  }
  if (v39 != enum case for AccessPointAnchoring.bottomLeading(_:))
  {
    if (v39 != enum case for AccessPointAnchoring.bottomTrailing(_:))
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v38);
      goto LABEL_20;
    }
    v76.origin.x = v20;
    v76.origin.y = v22;
    v76.size.width = v24;
    v76.size.height = v26;
    double v47 = CGRectGetMaxX(v76);
    uint64_t v48 = (uint64_t *)(v29 + *(int *)(v28 + 28));
    uint64_t v50 = *v48;
    uint64_t v49 = v48[1];
    uint64_t v71 = v50;
    uint64_t v72 = v49;
    sub_100005B18(&qword_100141D00);
    State.wrappedValue.getter();
    uint64_t v51 = v73;
    swift_getKeyPath();
    uint64_t v71 = v51;
    sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v52 = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release();
    if (v52 == 1) {
      double v53 = v30;
    }
    else {
      double v53 = *(double *)&v27;
    }
    double v20 = v47 - v53;
  }
  v77.origin.x = v20;
  v77.origin.y = v22;
  v77.size.width = v24;
  v77.size.height = v26;
  double v22 = CGRectGetMaxY(v77) - v30;
LABEL_20:
  uint64_t v54 = (uint64_t *)(v29 + *(int *)(v28 + 28));
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  uint64_t v71 = v56;
  uint64_t v72 = v55;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v57 = v73;
  swift_getKeyPath();
  uint64_t v71 = v57;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v58 = *(unsigned __int8 *)(v57 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  if (v58 == 1) {
    double v59 = v30;
  }
  else {
    double v59 = *(double *)&v27;
  }
  uint64_t v60 = type metadata accessor for TaskPriority();
  uint64_t v61 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v70, 1, 1, v60);
  type metadata accessor for MainActor();
  uint64_t v62 = v65[0];
  swift_unknownObjectRetain();
  uint64_t v63 = static MainActor.shared.getter();
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v63;
  *(void *)(v64 + 24) = &protocol witness table for MainActor;
  *(void *)(v64 + 32) = v62;
  *(double *)(v64 + 40) = v20;
  *(double *)(v64 + 48) = v22;
  *(double *)(v64 + 56) = v59;
  *(double *)(v64 + 64) = v30;
  sub_10002C340(v61, (uint64_t)&unk_100141E60, v64);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_100050C00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v96 = a1;
  uint64_t v95 = type metadata accessor for TaskPriority();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v93 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for AccessPointAnchoring();
  uint64_t v85 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v84 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v5);
  uint64_t v9 = sub_100005B18(&qword_100141CB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v80 = sub_100005B18(&qword_100141CB8);
  __chkstk_darwin(v80);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_100005B18(&qword_100141CC0);
  uint64_t v81 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v99 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_100005B18(&qword_100141CC8);
  uint64_t v83 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v100 = (uint64_t (*)(uint64_t))((char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = sub_100005B18(&qword_100141CD0);
  uint64_t v87 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v102 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_100005B18(&qword_100141CD8);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v90 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100005B18(&qword_100141CE0);
  __chkstk_darwin(v86);
  uint64_t v89 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v11 = static Alignment.center.getter();
  v11[1] = v19;
  uint64_t v20 = sub_100005B18(&qword_100141CE8);
  sub_100051A04(v1, (uint64_t)v11 + *(int *)(v20 + 44));
  uint64_t v104 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v98 = type metadata accessor for AccessPointAnimationView;
  sub_10005DBB8(v1, v104, type metadata accessor for AccessPointAnimationView);
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = (v21 + 16) & ~v21;
  uint64_t v106 = v22 + v8;
  uint64_t v107 = v22;
  uint64_t v105 = v21 | 7;
  uint64_t v23 = swift_allocObject();
  uint64_t v97 = type metadata accessor for AccessPointAnimationView;
  sub_10005FF38((uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for AccessPointAnimationView);
  uint64_t v79 = v13;
  sub_1000170C8((uint64_t)v11, (uint64_t)v13, &qword_100141CB0);
  uint64_t v24 = v80;
  double v25 = (uint64_t (**)())&v13[*(int *)(v80 + 36)];
  ValueMetadata *v25 = sub_10005CE54;
  v25[1] = (uint64_t (*)())v23;
  _OWORD v25[2] = 0;
  v25[3] = 0;
  sub_100017388((uint64_t)v11, &qword_100141CB0);
  uint64_t v26 = v2;
  uint64_t v27 = *(void *)(v2 + *(int *)(v6 + 52));
  swift_getKeyPath();
  uint64_t v110 = v27;
  sub_10005D2B0(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  LOBYTE(v110) = *(unsigned char *)(v27 + 16);
  uint64_t v28 = v104;
  sub_10005DBB8(v2, v104, type metadata accessor for AccessPointAnimationView);
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v107;
  char v31 = v97;
  sub_10005FF38(v28, v29 + v107, v97);
  unint64_t v32 = sub_10005D208();
  unint64_t v33 = sub_1000341D0();
  uint64_t v34 = (uint64_t)v79;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388(v34, &qword_100141CB8);
  uint64_t v35 = (uint64_t *)(v26 + *(int *)(v6 + 36));
  uint64_t v37 = *v35;
  uint64_t v36 = (ValueMetadata *)v35[1];
  uint64_t v110 = v37;
  uint64_t v111 = v36;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v38 = v109;
  swift_getKeyPath();
  uint64_t v110 = v38;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v34) = *(unsigned char *)(v38 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  LOBYTE(v109) = v34;
  uint64_t v39 = v104;
  sub_10005DBB8(v26, v104, v98);
  uint64_t v40 = swift_allocObject();
  sub_10005FF38(v39, v40 + v30, v31);
  uint64_t v110 = v24;
  uint64_t v111 = &type metadata for GameDashboardLaunchContext.LaunchTarget;
  unint64_t v112 = v32;
  unint64_t v113 = v33;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v42 = sub_10004A374();
  uint64_t v43 = v101;
  uint64_t v44 = v99;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v44, v43);
  LOBYTE(v44) = *(unsigned char *)(v26 + 16);
  uint64_t v45 = v26;
  uint64_t v46 = swift_retain();
  uint64_t v47 = sub_100034EE8(v46, (char)v44);
  swift_release();
  swift_getKeyPath();
  uint64_t v110 = v47;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t v48 = (ValueMetadata *)v82;
  swift_release();
  uint64_t v49 = v47 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v50 = v85;
  uint64_t v51 = v84;
  (*(void (**)(char *, uint64_t, ValueMetadata *))(v85 + 16))(v84, v49, v48);
  swift_release();
  uint64_t v52 = v104;
  sub_10005DBB8(v26, v104, v98);
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v52;
  sub_10005FF38(v52, v53 + v107, v97);
  uint64_t v110 = v101;
  uint64_t v111 = &type metadata for AccessPointModel.AnimationState;
  unint64_t v112 = OpaqueTypeConformance2;
  unint64_t v113 = v42;
  uint64_t v55 = swift_getOpaqueTypeConformance2();
  uint64_t v56 = sub_10005D2B0(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
  uint64_t v57 = v103;
  uint64_t v101 = v55;
  int v58 = v100;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, ValueMetadata *))(v50 + 8))(v51, v48);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v83 + 8))(v58, v57);
  LOBYTE(v57) = *(unsigned char *)(v45 + 16);
  uint64_t v59 = swift_retain();
  uint64_t v60 = sub_100034EE8(v59, v57);
  swift_release();
  swift_getKeyPath();
  uint64_t v110 = v60;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v60 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    swift_getKeyPath();
    uint64_t v110 = v60;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v61 = *(void *)(v60 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release();
    BOOL v62 = v61 > 0;
  }
  else
  {
    swift_release();
    BOOL v62 = 1;
  }
  BOOL v108 = v62;
  uint64_t v100 = type metadata accessor for AccessPointAnimationView;
  sub_10005DBB8(v45, v54, type metadata accessor for AccessPointAnimationView);
  uint64_t v63 = swift_allocObject();
  uint64_t v64 = v107;
  sub_10005FF38(v54, v63 + v107, type metadata accessor for AccessPointAnimationView);
  uint64_t v110 = v103;
  uint64_t v111 = v48;
  unint64_t v112 = v101;
  unint64_t v113 = v56;
  swift_getOpaqueTypeConformance2();
  uint64_t v65 = v90;
  uint64_t v66 = v88;
  uint64_t v67 = v102;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v67, v66);
  sub_10005DBB8(v45, v54, v100);
  uint64_t v68 = swift_allocObject();
  sub_10005FF38(v54, v68 + v64, type metadata accessor for AccessPointAnimationView);
  uint64_t v69 = v93;
  static TaskPriority.userInitiated.getter();
  uint64_t v70 = (uint64_t)v89;
  uint64_t v71 = &v89[*(int *)(v86 + 36)];
  uint64_t v72 = type metadata accessor for _TaskModifier();
  uint64_t v73 = v94;
  uint64_t v74 = v95;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(&v71[*(int *)(v72 + 20)], v69, v95);
  *(void *)uint64_t v71 = &unk_100141D18;
  *((void *)v71 + 1) = v68;
  uint64_t v75 = v91;
  uint64_t v76 = v92;
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 16))(v70, v65, v92);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v74);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v76);
  return sub_100024A74(v70, v96, &qword_100141CE0);
}

uint64_t sub_100051A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v65 = sub_100005B18(&qword_100140BE0);
  __chkstk_darwin(v65);
  uint64_t v67 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v62);
  uint64_t v5 = (_OWORD *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = sub_100005B18(&qword_100140FB8);
  __chkstk_darwin(v63);
  uint64_t v7 = (uint64_t *)((char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = sub_100005B18(&qword_100141DA0);
  __chkstk_darwin(v64);
  uint64_t v69 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100005B18(&qword_100141DA8);
  __chkstk_darwin(v66);
  uint64_t v70 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100005B18(&qword_100141DB0);
  uint64_t v10 = __chkstk_darwin(v73);
  uint64_t v68 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v71 = (uint64_t)&v61 - v12;
  uint64_t v72 = sub_100005B18(&qword_100141DB8);
  __chkstk_darwin(v72);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = a1;
  uint64_t v19 = (uint64_t *)(a1 + *(int *)(__chkstk_darwin(v15 - 8) + 36));
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v75 = v21;
  uint64_t v76 = v20;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v22 = v78[21];
  swift_getKeyPath();
  uint64_t v75 = v22;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(a1) = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
  swift_release();
  if (a1 == 1)
  {
    sub_10005DBB8(v18, (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    unint64_t v23 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v24 = swift_allocObject();
    sub_10005FF38((uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, type metadata accessor for AccessPointAnimationView);
    LOBYTE(v23) = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    *(void *)uint64_t v14 = sub_10005F014;
    *((void *)v14 + 1) = v24;
    v14[16] = v23;
    *((void *)v14 + 3) = v25;
    *((void *)v14 + 4) = v26;
    *((void *)v14 + 5) = v27;
    *((void *)v14 + 6) = v28;
    v14[56] = 0;
    swift_storeEnumTagMultiPayload();
    sub_100005B18(&qword_100141DD0);
    sub_10005EEAC();
    sub_10005F928(&qword_100141DF0, &qword_100141DB0, (void (*)(void))sub_10005EF4C);
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v75 = static HorizontalAlignment.center.getter();
    uint64_t v76 = 0;
    char v77 = 0;
    sub_100052298(v18, (uint64_t)v78);
    uint64_t v30 = static Color.clear.getter();
    uint64_t v31 = static Alignment.center.getter();
    uint64_t v33 = v32;
    uint64_t v34 = (char *)v5 + *(int *)(v62 + 20);
    uint64_t v35 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v36 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v34, v35, v36);
    __asm { FMOV            V0.2D, #20.0 }
    *uint64_t v5 = _Q0;
    uint64_t v42 = v67;
    sub_10005DBB8((uint64_t)v5, v67, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v42 + *(int *)(v65 + 36)) = 256;
    sub_1000170C8(v42, (uint64_t)v7 + *(int *)(v63 + 36), &qword_100140BE0);
    *uint64_t v7 = v30;
    v7[1] = v31;
    v7[2] = v33;
    swift_retain();
    sub_100017388(v42, &qword_100140BE0);
    sub_10005DC20((uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    swift_release();
    uint64_t v43 = Namespace.wrappedValue.getter();
    int v44 = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v49 = v69;
    sub_1000170C8((uint64_t)v7, v69, &qword_100140FB8);
    uint64_t v50 = v49 + *(int *)(v64 + 36);
    *(void *)uint64_t v50 = 0x756F72676B636162;
    *(void *)(v50 + 8) = 0xEA0000000000646ELL;
    *(void *)(v50 + 16) = v43;
    *(_DWORD *)(v50 + 24) = v44;
    *(void *)(v50 + 32) = v46;
    *(void *)(v50 + 40) = v48;
    *(unsigned char *)(v50 + 48) = 1;
    sub_100017388((uint64_t)v7, &qword_100140FB8);
    uint64_t v51 = static Alignment.center.getter();
    uint64_t v53 = v52;
    uint64_t v54 = (uint64_t)v70;
    uint64_t v55 = (uint64_t)&v70[*(int *)(v66 + 36)];
    sub_1000170C8(v49, v55, &qword_100141DA0);
    uint64_t v56 = (uint64_t *)(v55 + *(int *)(sub_100005B18(&qword_100141DC0) + 36));
    *uint64_t v56 = v51;
    v56[1] = v53;
    sub_1000170C8((uint64_t)&v75, v54, &qword_100141DC8);
    sub_100017388(v49, &qword_100141DA0);
    sub_100017388((uint64_t)&v75, &qword_100141DC8);
    uint64_t v57 = static SafeAreaRegions.all.getter();
    LOBYTE(v53) = static Edge.Set.all.getter();
    uint64_t v58 = v68;
    sub_1000170C8(v54, v68, &qword_100141DA8);
    uint64_t v59 = v58 + *(int *)(v73 + 36);
    *(void *)uint64_t v59 = v57;
    *(unsigned char *)(v59 + 8) = v53;
    sub_100017388(v54, &qword_100141DA8);
    uint64_t v60 = v71;
    sub_100024A74(v58, v71, &qword_100141DB0);
    sub_1000170C8(v60, (uint64_t)v14, &qword_100141DB0);
    swift_storeEnumTagMultiPayload();
    sub_100005B18(&qword_100141DD0);
    sub_10005EEAC();
    sub_10005F928(&qword_100141DF0, &qword_100141DB0, (void (*)(void))sub_10005EF4C);
    _ConditionalContent<>.init(storage:)();
    return sub_100017388(v60, &qword_100141DB0);
  }
}

uint64_t sub_100052298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for AccessPointAnimationView(0);
  *(void *)&long long v30 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v30 + 64);
  uint64_t v5 = *(int *)(__chkstk_darwin(v3 - 8) + 36);
  uint64_t v31 = a1;
  uint64_t v6 = (uint64_t *)(a1 + v5);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  uint64_t v52 = v7;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  swift_getKeyPath();
  uint64_t v51 = v33;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(a1) = *(unsigned __int8 *)(v33 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
  swift_release();
  if (a1 == 1)
  {
    uint64_t v9 = sub_1000569BC();
    char v10 = *(unsigned char *)(v31 + 16);
    uint64_t v11 = swift_retain();
    uint64_t v12 = sub_100034EE8(v11, v10);
    swift_release();
    uint64_t v54 = type metadata accessor for RemoteAlertAccessPointContext(0);
    uint64_t v55 = &off_100134CA8;
    uint64_t v51 = v12;
    sub_10005DBB8(v31, (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    unint64_t v13 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v14 = swift_allocObject();
    sub_10005FF38((uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for AccessPointAnimationView);
    uint64_t v56 = v9;
    swift_unknownObjectWeakInit();
    sub_100024A74((uint64_t)&v51, (uint64_t)&v58, &qword_1001444D0);
    uint64_t v62 = sub_10005FC68;
    *(void *)&long long v63 = v14;
    sub_10005FC94((uint64_t)&v56, (uint64_t)&v33);
    HIBYTE(v49) = 0;
    sub_100005B18(&qword_100141F30);
    sub_10005FAF0();
    sub_10005FB44();
    _ConditionalContent<>.init(storage:)();
    sub_10005FCF0((uint64_t)&v56);
  }
  else
  {
    uint64_t v34 = v7;
    State.projectedValue.getter();
    uint64_t v15 = v51;
    uint64_t v16 = v52;
    uint64_t v17 = v53;
    uint64_t v52 = v7;
    State.wrappedValue.getter();
    swift_getKeyPath();
    uint64_t v51 = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
    type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
    *(unsigned char *)(swift_allocObject() + 16) = 0;
    ObservationRegistrar.init()();
    sub_10005F598(v15, v16, v17, (uint64_t)&v56);
    uint64_t v18 = v56;
    LOBYTE(v15) = v57;
    uint64_t v19 = v58;
    uint64_t v20 = v60;
    uint64_t v21 = v61;
    char v22 = (char)v62;
    long long v30 = v63;
    uint64_t v23 = v64;
    uint64_t v24 = Namespace.wrappedValue.getter();
    int v25 = static MatchedGeometryProperties.frame.getter();
    static UnitPoint.center.getter();
    char v50 = v15;
    uint64_t v33 = (uint64_t)v18;
    LOBYTE(v34) = v15;
    uint64_t v35 = v19;
    long long v36 = v59;
    uint64_t v37 = v20;
    uint64_t v38 = v21;
    char v39 = v22;
    long long v40 = v30;
    uint64_t v41 = v23;
    uint64_t v42 = 0;
    uint64_t v43 = 0x7974696361706FLL;
    unint64_t v44 = 0xE700000000000000;
    uint64_t v45 = v24;
    int v46 = v25;
    uint64_t v47 = v26;
    uint64_t v48 = v27;
    __int16 v49 = 257;
    sub_100005B18(&qword_100141F30);
    sub_10005FAF0();
    sub_10005FB44();
    _ConditionalContent<>.init(storage:)();
  }
  sub_1000170C8((uint64_t)&v51, (uint64_t)&v33, &qword_100141F70);
  uint64_t v28 = v32;
  sub_1000170C8((uint64_t)&v33, v32, &qword_100141F70);
  *(void *)(v28 + 152) = 0;
  *(unsigned char *)(v28 + 160) = 1;
  sub_100017388((uint64_t)&v51, &qword_100141F70);
  return sub_100017388((uint64_t)&v33, &qword_100141F70);
}

uint64_t sub_100052754(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = swift_retain();
  uint64_t v7 = sub_100034EE8(v6, v5);
  swift_release();
  swift_getKeyPath();
  uint64_t v20 = v7;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v8 = *(unsigned char *)(v7 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
  swift_release();
  if ((v8 & 1) == 0) {
    sub_100052A58();
  }
  uint64_t v9 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  uint64_t v10 = v9[1];
  uint64_t v20 = *v9;
  uint64_t v21 = v10;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v11 = v19[0];
  swift_getKeyPath();
  uint64_t v20 = v11;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = v11 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v12, (uint64_t)v4, type metadata accessor for AccessPointContainer);
  swift_release();
  uint64_t v13 = PageMetrics.pageFields.getter();
  uint64_t result = sub_10005DC20((uint64_t)v4, type metadata accessor for AccessPointContainer);
  if (v13)
  {
    if (*(void *)(v13 + 16))
    {
      uint64_t v15 = v9[1];
      v19[0] = *v9;
      v19[1] = v15;
      State.wrappedValue.getter();
      uint64_t v16 = v19[2];
      swift_getKeyPath();
      v19[0] = v16;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v17 = *(void *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
      uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID + 8);
      swift_bridgeObjectRetain();
      swift_release();
      sub_10009579C(v17, v18, v13);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100052A58()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for AccessPointAnchoring();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  long long v40 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v3);
  char v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007D4C(v6, (uint64_t)qword_100156CF8);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Pre-empting highlights animations because the access point is being displayed after a recent deactivation.", v9, 2u);
    swift_slowDealloc();
  }

  char v39 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  uint64_t v10 = v39[1];
  uint64_t v57 = *v39;
  uint64_t v58 = v10;
  uint64_t v11 = v57;
  uint64_t v46 = v57;
  uint64_t v47 = v10;
  uint64_t v12 = v10;
  uint64_t v13 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v14 = v55;
  uint64_t v57 = v11;
  uint64_t v58 = v12;
  State.wrappedValue.getter();
  uint64_t v15 = v55;
  swift_getKeyPath();
  uint64_t v57 = v15;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = v15 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  uint64_t v45 = type metadata accessor for AccessPointContainer;
  sub_10005DBB8(v16, (uint64_t)v5, type metadata accessor for AccessPointContainer);
  swift_release();
  uint64_t v17 = *(void *)&v5[*(int *)(v3 + 28)];
  swift_bridgeObjectRetain();
  sub_10005DC20((uint64_t)v5, type metadata accessor for AccessPointContainer);
  uint64_t v18 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v44 = v3;
  __chkstk_darwin(KeyPath);
  *(&v38 - 2) = v14;
  *(&v38 - 1) = v18 - 1;
  uint64_t v55 = v14;
  uint64_t v43 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  uint64_t v48 = 0;
  swift_release();
  swift_release();
  uint64_t v20 = v46;
  uint64_t v55 = v46;
  uint64_t v21 = v47;
  uint64_t v56 = v47;
  uint64_t v49 = v13;
  State.wrappedValue.getter();
  uint64_t v22 = v53;
  swift_getKeyPath();
  uint64_t v55 = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v23 = v22 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v23, (uint64_t)v5, v45);
  swift_release();
  int v24 = v5[*(int *)(v44 + 24)];
  sub_10005DC20((uint64_t)v5, type metadata accessor for AccessPointContainer);
  if ((v24 - 3) >= 4 && v24)
  {
    uint64_t v53 = v20;
    uint64_t v54 = v21;
    State.wrappedValue.getter();
    uint64_t v28 = v50;
    uint64_t v53 = v20;
    uint64_t v54 = v21;
    State.wrappedValue.getter();
    uint64_t v29 = v50;
    swift_getKeyPath();
    uint64_t v53 = v29;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v30 = v29 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
    swift_beginAccess();
    uint64_t v31 = v41;
    uint64_t v32 = v40;
    uint64_t v33 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v30, v42);
    swift_release();
    uint64_t v34 = swift_getKeyPath();
    __chkstk_darwin(v34);
    *(&v38 - 2) = v28;
    *(&v38 - 1) = (uint64_t)v32;
    uint64_t v50 = v28;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    swift_release();
    uint64_t v35 = v39[1];
    uint64_t v50 = *v39;
    uint64_t v51 = v35;
    State.wrappedValue.getter();
    uint64_t v36 = v52;
    uint64_t v37 = swift_getKeyPath();
    __chkstk_darwin(v37);
    *(&v38 - 2) = v36;
    *((unsigned char *)&v38 - 8) = 1;
    uint64_t v50 = v36;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  else
  {
    uint64_t v53 = v20;
    uint64_t v54 = v21;
    State.wrappedValue.getter();
    uint64_t v25 = v50;
    uint64_t v26 = swift_getKeyPath();
    __chkstk_darwin(v26);
    *(&v38 - 2) = v25;
    *((unsigned char *)&v38 - 8) = 2;
    uint64_t v53 = v25;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1000531A4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v46 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100005B18(&qword_100142A60);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *a2;
  if (v17 == 2)
  {
    char v18 = *(unsigned char *)(a3 + 16);
    uint64_t v19 = swift_retain();
    uint64_t v20 = sub_100034EE8(v19, v18);
    swift_release();
    swift_getKeyPath();
    uint64_t v47 = v20;
    sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    uint64_t result = swift_release();
    if (!Strong) {
      return result;
    }
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007D4C(v23, (uint64_t)qword_100156CF8);
    int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Requesting invocation of onboarding flow from client.", v26, 2u);
      swift_slowDealloc();
    }

    uint64_t v27 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v16, 1, 1, v27);
    sub_10005DBB8(a3, (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    type metadata accessor for MainActor();
    swift_unknownObjectRetain();
    uint64_t v28 = static MainActor.shared.getter();
    unint64_t v29 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v28;
    *(void *)(v30 + 24) = &protocol witness table for MainActor;
    sub_10005FF38((uint64_t)v12, v30 + v29, type metadata accessor for AccessPointAnimationView);
    *(void *)(v30 + ((v11 + v29 + 7) & 0xFFFFFFFFFFFFFFF8)) = Strong;
    sub_10002C340((uint64_t)v16, (uint64_t)&unk_100141D90, v30);
    swift_release();
    return swift_unknownObjectRelease();
  }
  int v31 = *a1;
  if (v17 == 1)
  {
    int v44 = v31;
    uint64_t v45 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (qword_10013FBD0 != -1) {
      uint64_t v14 = swift_once();
    }
    uint64_t v43 = (uint64_t)&v43;
    __chkstk_darwin(v14);
    *(&v43 - 2) = a3;
    sub_10005DBB8(a3, (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    unint64_t v32 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v33 = swift_allocObject();
    sub_10005FF38((uint64_t)v12, v33 + v32, type metadata accessor for AccessPointAnimationView);
    static AnimationCompletionCriteria.logicallyComplete.getter();
    withAnimation<A>(_:completionCriteria:_:completion:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v16 = v45;
    int v31 = v44;
  }
  char v34 = *(unsigned char *)(a3 + 16);
  uint64_t v35 = swift_retain();
  uint64_t v36 = sub_100034EE8(v35, v34);
  swift_release();
  swift_getKeyPath();
  uint64_t v47 = v36;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v37 = swift_unknownObjectWeakLoadStrong();
  uint64_t result = swift_release();
  if (v37)
  {
    if (v17 == 1 || v31 == 1)
    {
      sub_10003913C();
      Class isa = NSNumber.init(BOOLeanLiteral:)(v17 == 1).super.super.isa;
      uint64_t v39 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v16, 1, 1, v39);
      type metadata accessor for MainActor();
      swift_unknownObjectRetain();
      long long v40 = isa;
      uint64_t v41 = static MainActor.shared.getter();
      uint64_t v42 = (void *)swift_allocObject();
      v42[2] = v41;
      v42[3] = &protocol witness table for MainActor;
      v42[4] = v37;
      v42[5] = v40;
      sub_10002C340((uint64_t)v16, (uint64_t)&unk_100141D80, (uint64_t)v42);
      swift_release();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000538A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100053938, v7, v6);
}

uint64_t sub_100053938()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  uint64_t v3 = *(void *)(v2 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 44));
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 24) = 0;
  v0[2] = v3;
  sub_10005D2B0(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  [v1 requireOnboardingFlow];
  char v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100053A88(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v2 - 8);
  uint64_t v94 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for AccessPointAnchoring();
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v99 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = (char *)type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v104);
  uint64_t v98 = (uint64_t)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v96 = (uint64_t (*)(uint64_t))((char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v95 = (uint64_t (*)(uint64_t))((char *)&v92 - v10);
  uint64_t v93 = v9;
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(v9 + 28));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v107 = v11;
  uint64_t v117 = v12;
  uint64_t v118 = v13;
  uint64_t v14 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v15 = v115;
  uint64_t v117 = v12;
  uint64_t v118 = v13;
  State.wrappedValue.getter();
  uint64_t v16 = v115;
  swift_getKeyPath();
  uint64_t v117 = v16;
  uint64_t v17 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v18 = *(unsigned char *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
  swift_release();
  swift_getKeyPath();
  uint64_t v110 = v15;
  BOOL v111 = (v18 & 1) == 0;
  uint64_t v117 = v15;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  uint64_t v106 = a1;
  char v19 = *(unsigned char *)(a1 + 16);
  uint64_t v20 = swift_retain();
  uint64_t v21 = sub_100034EE8(v20, v19);
  swift_release();
  uint64_t v117 = v12;
  uint64_t v118 = v13;
  uint64_t v102 = v14;
  State.wrappedValue.getter();
  uint64_t v22 = v115;
  swift_getKeyPath();
  uint64_t v117 = v22;
  uint64_t v103 = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v23 = *(unsigned char *)(v22 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
  swift_release();
  swift_getKeyPath();
  uint64_t v108 = v21;
  char v109 = v23;
  uint64_t v117 = v21;
  uint64_t v24 = sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  uint64_t v97 = 0;
  swift_release();
  swift_release();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007D4C(v25, (uint64_t)qword_100156CF8);
  uint64_t v26 = v106;
  uint64_t v27 = v95;
  sub_10005DBB8(v106, (uint64_t)v95, type metadata accessor for AccessPointAnimationView);
  uint64_t v28 = v96;
  sub_10005DBB8(v26, (uint64_t)v96, type metadata accessor for AccessPointAnimationView);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v105 = v24;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 67109376;
    uint64_t v33 = (uint64_t *)((char *)v27 + *(int *)(v93 + 28));
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v117 = v35;
    uint64_t v118 = v34;
    State.wrappedValue.getter();
    uint64_t v36 = v115;
    swift_getKeyPath();
    uint64_t v117 = v36;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v37 = *(unsigned __int8 *)(v36 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
    swift_release();
    sub_10005DC20((uint64_t)v27, type metadata accessor for AccessPointAnimationView);
    LODWORD(v117) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 8) = 1024;
    LOBYTE(v37) = *((unsigned char *)v28 + 16);
    uint64_t v38 = swift_retain();
    uint64_t v39 = sub_100034EE8(v38, v37);
    swift_release();
    swift_getKeyPath();
    uint64_t v117 = v39;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v40 = *(unsigned __int8 *)(v39 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__isShowingDashboard);
    swift_release();
    sub_10005DC20((uint64_t)v28, type metadata accessor for AccessPointAnimationView);
    LODWORD(v117) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "AccessPointAnimationView: Dashboard expanded, model.showDashboard: %{BOOL}d, remoteAlertContext.isShowingDashboard: %{BOOL}d", (uint8_t *)v32, 0xEu);
    swift_slowDealloc();
  }
  else
  {
    sub_10005DC20((uint64_t)v28, type metadata accessor for AccessPointAnimationView);
    sub_10005DC20((uint64_t)v27, type metadata accessor for AccessPointAnimationView);
  }
  uint64_t v41 = v107;

  char v42 = *(unsigned char *)(v26 + 16);
  uint64_t v43 = swift_retain();
  uint64_t v44 = sub_100034EE8(v43, v42);
  swift_release();
  swift_getKeyPath();
  uint64_t v117 = v44;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_release();
  if (Strong)
  {
    [Strong setInputHardwareEventsDisabled:0];
  }
  uint64_t v47 = v41[1];
  uint64_t v117 = *v41;
  uint64_t v46 = v117;
  uint64_t v118 = v47;
  State.wrappedValue.getter();
  uint64_t v48 = v115;
  uint64_t v117 = v46;
  uint64_t v118 = v47;
  State.wrappedValue.getter();
  uint64_t v49 = v115;
  swift_getKeyPath();
  uint64_t v117 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v50 = v49 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  uint64_t v96 = type metadata accessor for AccessPointContainer;
  uint64_t v51 = v98;
  sub_10005DBB8(v50, v98, type metadata accessor for AccessPointContainer);
  swift_release();
  uint64_t v52 = *(void *)(v51 + *((int *)v104 + 7));
  swift_bridgeObjectRetain();
  uint64_t v95 = type metadata accessor for AccessPointContainer;
  sub_10005DC20(v51, type metadata accessor for AccessPointContainer);
  uint64_t v53 = *(void *)(v52 + 16);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(&v92 - 2) = v48;
  *(&v92 - 1) = v53 - 1;
  uint64_t v115 = v48;
  uint64_t v55 = v97;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  uint64_t v97 = v55;
  swift_release();
  swift_release();
  uint64_t v57 = v107[1];
  uint64_t v115 = *v107;
  uint64_t v56 = v115;
  uint64_t v116 = v57;
  State.wrappedValue.getter();
  uint64_t v58 = v112;
  uint64_t v115 = v56;
  uint64_t v116 = v57;
  State.wrappedValue.getter();
  uint64_t v59 = v112;
  swift_getKeyPath();
  uint64_t v115 = v59;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v60 = v59 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v60, v51, v96);
  swift_release();
  unint64_t v61 = *(unsigned __int8 *)(v51 + *((int *)v104 + 6));
  uint64_t v62 = v107;
  sub_10005DC20(v51, v95);
  if (v61 >= 7) {
    char v63 = 1;
  }
  else {
    char v63 = 0x2020202010102uLL >> (8 * v61);
  }
  uint64_t v64 = swift_getKeyPath();
  __chkstk_darwin(v64);
  *(&v92 - 2) = v58;
  *((unsigned char *)&v92 - 8) = v63;
  uint64_t v112 = v58;
  uint64_t v104 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  uint64_t v65 = v62[1];
  uint64_t v112 = *v62;
  uint64_t v113 = v65;
  State.wrappedValue.getter();
  uint64_t v66 = v114;
  swift_getKeyPath();
  uint64_t v112 = v66;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v67 = *(unsigned __int8 *)(v66 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  uint64_t v69 = *v62;
  uint64_t v68 = v62[1];
  uint64_t v112 = *v62;
  uint64_t v113 = v68;
  State.wrappedValue.getter();
  if (v67 == 2)
  {
    uint64_t v70 = v114;
    uint64_t v71 = swift_getKeyPath();
    __chkstk_darwin(v71);
    *(&v92 - 2) = v70;
    *((unsigned char *)&v92 - 8) = 0;
    uint64_t v112 = v70;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v72 = v62[1];
    uint64_t v112 = *v62;
    uint64_t v113 = v72;
    State.wrappedValue.getter();
    uint64_t v73 = v114;
    uint64_t v74 = v100;
    uint64_t v75 = v99;
    uint64_t v76 = v101;
    (*(void (**)(char *, void, uint64_t))(v100 + 104))(v99, enum case for AccessPointAnchoring.topCentered(_:), v101);
    uint64_t v77 = swift_getKeyPath();
    __chkstk_darwin(v77);
    *(&v92 - 2) = v73;
    *(&v92 - 1) = (uint64_t)v75;
    uint64_t v112 = v73;
  }
  else
  {
    uint64_t v78 = v114;
    uint64_t v112 = v69;
    uint64_t v113 = v68;
    State.wrappedValue.getter();
    uint64_t v79 = v114;
    swift_getKeyPath();
    uint64_t v112 = v79;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v80 = v79 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
    swift_beginAccess();
    uint64_t v74 = v100;
    uint64_t v75 = v99;
    uint64_t v76 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v99, v80, v101);
    swift_release();
    uint64_t v81 = swift_getKeyPath();
    __chkstk_darwin(v81);
    *(&v92 - 2) = v78;
    *(&v92 - 1) = (uint64_t)v75;
    uint64_t v114 = v78;
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
  swift_release();
  char v82 = *(unsigned char *)(v106 + 16);
  uint64_t v83 = swift_retain();
  uint64_t v84 = sub_100034EE8(v83, v82);
  swift_release();
  swift_getKeyPath();
  uint64_t v114 = v84;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v86 = *(void *)(v84 + 16);
  uint64_t v85 = *(void *)(v84 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  if (v85)
  {
    uint64_t v88 = type metadata accessor for TaskPriority();
    uint64_t v89 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v94, 1, 1, v88);
    type metadata accessor for MainActor();
    uint64_t v90 = static MainActor.shared.getter();
    uint64_t v91 = (void *)swift_allocObject();
    v91[2] = v90;
    v91[3] = &protocol witness table for MainActor;
    v91[4] = v86;
    v91[5] = v85;
    sub_10002C340(v89, (uint64_t)&unk_100141D98, (uint64_t)v91);
    return swift_release();
  }
  return result;
}

uint64_t sub_100054A04(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v2 - 8);
  uint64_t v55 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v50 + 64);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v56 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v50 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = (uint64_t *)(a1 + *(int *)(v11 + 28));
  uint64_t v15 = v14[1];
  uint64_t v58 = *v14;
  uint64_t v59 = v15;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v16 = v60;
  swift_getKeyPath();
  uint64_t v58 = v16;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v17 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  uint64_t v57 = a1;
  sub_10005DBB8(a1, (uint64_t)v13, type metadata accessor for AccessPointAnimationView);
  if (v17 == 2)
  {
    char v18 = &v13[*(int *)(v6 + 28)];
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *((void *)v18 + 1);
    uint64_t v58 = v20;
    uint64_t v59 = v19;
    State.wrappedValue.getter();
    uint64_t v21 = v60;
    swift_getKeyPath();
    uint64_t v58 = v21;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v22 = *(unsigned char *)(v21 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
    swift_release();
    uint64_t v23 = sub_10005DC20((uint64_t)v13, type metadata accessor for AccessPointAnimationView);
    if ((v22 & 1) == 0)
    {
      if (qword_10013FBC8 != -1) {
        uint64_t v23 = swift_once();
      }
      __chkstk_darwin(v23);
      uint64_t v24 = v57;
      *(&v50 - 2) = v57;
      uint64_t v25 = v51;
      sub_10005DBB8(v24, v51, type metadata accessor for AccessPointAnimationView);
      unint64_t v26 = (*(unsigned __int8 *)(v50 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      uint64_t v27 = swift_allocObject();
      sub_10005FF38(v25, v27 + v26, type metadata accessor for AccessPointAnimationView);
      uint64_t v28 = v52;
      static AnimationCompletionCriteria.logicallyComplete.getter();
      withAnimation<A>(_:completionCriteria:_:completion:)();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v28, v54);
    }
  }
  else
  {
    sub_10005DC20((uint64_t)v13, type metadata accessor for AccessPointAnimationView);
  }
  uint64_t v30 = v14[1];
  uint64_t v58 = *v14;
  uint64_t v59 = v30;
  State.wrappedValue.getter();
  uint64_t v31 = v60;
  swift_getKeyPath();
  uint64_t v58 = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v32 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  uint64_t v34 = v56;
  uint64_t v33 = v57;
  sub_10005DBB8(v57, v56, type metadata accessor for AccessPointAnimationView);
  if (v32 == 2)
  {
    sub_10005DC20(v34, type metadata accessor for AccessPointAnimationView);
  }
  else
  {
    uint64_t v35 = (uint64_t *)(v34 + *(int *)(v6 + 28));
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    uint64_t v58 = v37;
    uint64_t v59 = v36;
    State.wrappedValue.getter();
    uint64_t v38 = v60;
    swift_getKeyPath();
    uint64_t v58 = v38;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v39 = *(unsigned __int8 *)(v38 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
    swift_release();
    uint64_t result = sub_10005DC20(v34, type metadata accessor for AccessPointAnimationView);
    if (v39 != 1) {
      return result;
    }
  }
  char v40 = *(unsigned char *)(v33 + 16);
  uint64_t v41 = swift_retain();
  uint64_t v42 = sub_100034EE8(v41, v40);
  swift_release();
  swift_getKeyPath();
  uint64_t v58 = v42;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v44 = *(void *)(v42 + 16);
  uint64_t v43 = *(void *)(v42 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  if (v43)
  {
    uint64_t v45 = type metadata accessor for TaskPriority();
    uint64_t v46 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v55, 1, 1, v45);
    type metadata accessor for MainActor();
    uint64_t v47 = static MainActor.shared.getter();
    uint64_t v48 = (void *)swift_allocObject();
    v48[2] = v47;
    v48[3] = &protocol witness table for MainActor;
    v48[4] = v44;
    v48[5] = v43;
    sub_10002C340(v46, (uint64_t)&unk_100141D58, (uint64_t)v48);
    swift_release();
  }
  uint64_t v49 = v14[1];
  uint64_t v58 = *v14;
  uint64_t v59 = v49;
  State.wrappedValue.getter();
  sub_100046F60();
  return swift_release();
}

uint64_t sub_100055164()
{
  return swift_release();
}

uint64_t sub_100055278(uint64_t a1)
{
  uint64_t v23 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v2 = *(void *)(v23 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v23);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  sub_10005DBB8(a1, (uint64_t)v4, type metadata accessor for AccessPointAnimationView);
  type metadata accessor for MainActor();
  uint64_t v10 = static MainActor.shared.getter();
  unint64_t v11 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = &protocol witness table for MainActor;
  sub_10005FF38((uint64_t)v4, v12 + v11, type metadata accessor for AccessPointAnimationView);
  sub_10002C340((uint64_t)v7, (uint64_t)&unk_100141D68, v12);
  swift_release();
  LOBYTE(v4) = *(unsigned char *)(a1 + 16);
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_100034EE8(v13, (char)v4);
  swift_release();
  swift_getKeyPath();
  uint64_t v24 = v14;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v16 = *(void *)(v14 + 16);
  uint64_t v15 = *(void *)(v14 + 24);
  swift_bridgeObjectRetain();
  swift_release();
  if (v15)
  {
    v9(v7, 1, 1, v8);
    uint64_t v17 = static MainActor.shared.getter();
    char v18 = (void *)swift_allocObject();
    void v18[2] = v17;
    void v18[3] = &protocol witness table for MainActor;
    v18[4] = v16;
    v18[5] = v15;
    sub_10002C340((uint64_t)v7, (uint64_t)&unk_100141D70, (uint64_t)v18);
    swift_release();
  }
  uint64_t v19 = (uint64_t *)(a1 + *(int *)(v23 + 28));
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v24 = v21;
  uint64_t v25 = v20;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  sub_100046F60();
  return swift_release();
}

uint64_t sub_1000555C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[4] = v6;
  v4[5] = v5;
  return _swift_task_switch(sub_100055660, v6, v5);
}

uint64_t sub_100055660()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2];
  uint64_t v2 = qword_100156D18;
  v0[6] = qword_100156D18;
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = swift_retain();
  v0[7] = sub_100034EE8(v4, v3);
  swift_release();
  return _swift_task_switch(sub_10005572C, v2, 0);
}

uint64_t sub_10005572C()
{
  sub_100037BD8(v0[7], 1, v0[6]);
  swift_release();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  return _swift_task_switch(sub_100061C8C, v1, v2);
}

uint64_t sub_1000557A0(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  __chkstk_darwin(*a3);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_100055834(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointAnchoring();
  uint64_t v37 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v40 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int v39 = (char *)v34 - v6;
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 28));
  uint64_t v8 = v7[1];
  uint64_t v50 = *v7;
  uint64_t v51 = v8;
  uint64_t v43 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v9 = v48;
  uint64_t v35 = a1;
  char v10 = *(unsigned char *)(a1 + 16);
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_100034EE8(v11, v10);
  swift_release();
  swift_getKeyPath();
  uint64_t v50 = v12;
  v34[4] = sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v13 = v12 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
  swift_beginAccess();
  uint64_t v38 = v3;
  uint64_t v14 = v3 + 16;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v15 = v39;
  v42(v39, v13, v2);
  swift_release();
  swift_getKeyPath();
  uint64_t v36 = v9;
  uint64_t v44 = v9;
  uint64_t v45 = v15;
  uint64_t v48 = v9;
  uint64_t v16 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  void v34[2] = (char *)&type metadata for () + 8;
  uint64_t v17 = v41;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  uint64_t v41 = v17;
  swift_release();
  char v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v19 = v37;
  v18(v15, v37);
  swift_release();
  uint64_t v20 = *v7;
  uint64_t v21 = v7[1];
  uint64_t v36 = v7;
  uint64_t v48 = (uint64_t *)v20;
  uint64_t v49 = v21;
  State.wrappedValue.getter();
  uint64_t v22 = v46;
  swift_getKeyPath();
  uint64_t v48 = (uint64_t *)v22;
  v34[3] = v16;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v23 = v22 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  v34[1] = v14;
  v42(v15, v23, v19);
  uint64_t v24 = v18;
  swift_release();
  uint64_t v25 = v40;
  (*(void (**)(char *, void, uint64_t))(v38 + 104))(v40, enum case for AccessPointAnchoring.topCentered(_:), v19);
  sub_10005D2B0(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
  LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)();
  v18(v25, v19);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v15, v19);
  if ((v23 & 1) == 0)
  {
    uint64_t v27 = v36[1];
    uint64_t v46 = *v36;
    uint64_t v47 = v27;
    State.wrappedValue.getter();
    uint64_t v28 = v52;
    char v29 = *(unsigned char *)(v35 + 16);
    uint64_t v30 = swift_retain();
    uint64_t v31 = sub_100034EE8(v30, v29);
    swift_release();
    swift_getKeyPath();
    uint64_t v46 = v31;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v32 = v31 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__anchoring;
    swift_beginAccess();
    v42(v15, v32, v19);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v34[-2] = v28;
    v34[-1] = v15;
    uint64_t v52 = v28;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    v24(v15, v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_100055E04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v17 + 64);
  __chkstk_darwin(v6 - 8);
  char v8 = *(unsigned char *)(a1 + 16);
  uint64_t v9 = swift_retain();
  uint64_t v10 = sub_100034EE8(v9, v8);
  swift_release();
  swift_getKeyPath();
  uint64_t v18 = v10;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v10 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    swift_getKeyPath();
    uint64_t v18 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v11 = *(void *)(v10 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release();
    if (v11 <= 0)
    {
      if (qword_10013FBC0 == -1) {
        goto LABEL_7;
      }
      goto LABEL_8;
    }
  }
  else
  {
    swift_release();
  }
  if (qword_10013FBC8 != -1) {
LABEL_8:
  }
    swift_once();
LABEL_7:
  uint64_t v12 = swift_retain();
  __chkstk_darwin(v12);
  *(&v16 - 2) = a1;
  sub_10005DBB8(a1, (uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
  unint64_t v13 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v14 = swift_allocObject();
  sub_10005FF38((uint64_t)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for AccessPointAnimationView);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_10004AD80();
}

uint64_t sub_1000561C4(uint64_t a1)
{
  type metadata accessor for AccessPointAnimationView(0);
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  char v2 = *(unsigned char *)(a1 + 16);
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_100034EE8(v3, v2);
  swift_release();
  swift_getKeyPath();
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active) == 1)
  {
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
  }
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100056400(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - v10;
  char v12 = *(unsigned char *)(a1 + 16);
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_100034EE8(v13, v12);
  swift_release();
  swift_getKeyPath();
  uint64_t v27 = v14;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v15 = *(unsigned char *)(v14 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__active);
  swift_release();
  sub_10005DBB8(a1, (uint64_t)v11, type metadata accessor for AccessPointAnimationView);
  if (v15) {
    return sub_10005DC20((uint64_t)v11, type metadata accessor for AccessPointAnimationView);
  }
  uint64_t v17 = &v11[*(int *)(v5 + 28)];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  uint64_t v27 = v19;
  uint64_t v28 = v18;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v20 = v29;
  swift_getKeyPath();
  uint64_t v27 = v20;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v21 = *(unsigned char *)(v20 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal);
  swift_release();
  uint64_t result = sub_10005DC20((uint64_t)v11, type metadata accessor for AccessPointAnimationView);
  if (v21)
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
    sub_10005DBB8(a1, (uint64_t)v9, type metadata accessor for AccessPointAnimationView);
    type metadata accessor for MainActor();
    uint64_t v23 = static MainActor.shared.getter();
    unint64_t v24 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = &protocol witness table for MainActor;
    sub_10005FF38((uint64_t)v9, v25 + v24, type metadata accessor for AccessPointAnimationView);
    sub_10002C340((uint64_t)v4, (uint64_t)&unk_100141D48, v25);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000567C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10005685C, v6, v5);
}

uint64_t sub_10005685C()
{
  swift_release();
  sub_100052A58();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000568C0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100056958, v3, v2);
}

uint64_t sub_100056958()
{
  swift_release();
  sub_10004AD80();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

char *sub_1000569BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005B18(&qword_100140B50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000B9B1C((uint64_t)&_swiftEmptyArrayStorage);
  id v6 = objc_allocWithZone((Class)type metadata accessor for DashboardRequest());
  uint64_t v7 = DashboardRequest.init(initialState:)(v5);
  char v8 = *(unsigned char *)(v0 + 16);
  uint64_t v9 = swift_retain();
  uint64_t v10 = sub_100034EE8(v9, v8);
  swift_release();
  swift_getKeyPath();
  uint64_t v29 = v10;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = *(void **)(v10 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  id v12 = v11;
  swift_release();
  uint64_t v13 = *(void **)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame];
  *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_currentGame] = v11;

  uint64_t v14 = *(void *)(v1 + *(int *)(type metadata accessor for AccessPointAnimationView(0) + 44));
  swift_getKeyPath();
  uint64_t v29 = v14;
  sub_10005D2B0(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v15 = v14 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess();
  sub_1000170C8(v15, (uint64_t)v4, &qword_100140B50);
  uint64_t v16 = type metadata accessor for LaunchDashboardAction();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v4, 1, v16) == 1)
  {
    sub_100017388((uint64_t)v4, &qword_100140B50);
LABEL_3:
    uint64_t v17 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState;
    uint64_t v18 = 4;
LABEL_12:
    *(void *)&v7[v17] = v18;
  }
  else
  {
    uint64_t v19 = &v4[*(int *)(v16 + 24)];
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *((void *)v19 + 1);
    uint64_t v22 = v19[16];
    sub_10005FEEC(*(void *)v19, v21, v19[16]);
    sub_10005DC20((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LaunchDashboardAction);
    switch(v22)
    {
      case 1:
        *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = 0;
        uint64_t v26 = (uint64_t *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardIdentifier];
        *uint64_t v26 = v20;
        v26[1] = v21;
        swift_bridgeObjectRelease();
        *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardPlayerScope] = 1;
        uint64_t v25 = &OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_leaderboardTimeScope;
LABEL_11:
        uint64_t v17 = *v25;
        uint64_t v18 = 2;
        goto LABEL_12;
      case 2:
        *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = 3;
        uint64_t v23 = &OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_playerIdentifier;
        break;
      case 3:
        switch(v20)
        {
          case 1:
            uint64_t v25 = &OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState;
            goto LABEL_11;
          case 2:
            uint64_t v17 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState;
            uint64_t v18 = 3;
            break;
          case 3:
            *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = 5;
            uint64_t v17 = OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_deepLinkDestination;
            uint64_t v18 = 1;
            break;
          default:
            goto LABEL_3;
        }
        goto LABEL_12;
      default:
        *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_viewState] = 1;
        uint64_t v23 = &OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_achievementIdentifier;
        break;
    }
    unint64_t v24 = (uint64_t *)&v7[*v23];
    *unint64_t v24 = v20;
    v24[1] = v21;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100056DE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8);
  if (qword_10013FBD8 != -1) {
    uint64_t v9 = swift_once();
  }
  __chkstk_darwin(v9);
  *(void *)&v13[-16] = a1;
  sub_10005DBB8(a1, (uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for AccessPointAnimationView);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_10005FF38((uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10, type metadata accessor for AccessPointAnimationView);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100057050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[5] = v7;
  v5[6] = v6;
  return _swift_task_switch(sub_1000570E8, v7, v6);
}

uint64_t sub_1000570E8()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156D18;
  *(void *)(v0 + 56) = qword_100156D18;
  return _swift_task_switch(sub_100057180, v1, 0);
}

uint64_t sub_100057180()
{
  sub_10006A164(v0[2], v0[3]);
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  return _swift_task_switch(sub_1000571E8, v1, v2);
}

uint64_t sub_1000571E8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100057248(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for AccessPointAnimationView(0);
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  *(unsigned char *)(v5 + *a3) = (*(unsigned char *)(v5 + *a3) & 1) == 0;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return swift_release();
}

uint64_t sub_1000573A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8);
  if (qword_10013FBD0 != -1) {
    uint64_t v9 = swift_once();
  }
  __chkstk_darwin(v9);
  *(void *)&v13[-16] = a1;
  sub_10005DBB8(a1, (uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for AccessPointAnimationView);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_10005FF38((uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10, type metadata accessor for AccessPointAnimationView);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100057614(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v39[-v8];
  char v10 = *(unsigned char *)(a1 + 16);
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_100034EE8(v11, v10);
  swift_release();
  uint64_t v44 = v4;
  uint64_t v13 = (uint64_t *)(a1 + *(int *)(v4 + 28));
  uint64_t v14 = v13[1];
  uint64_t v49 = *v13;
  uint64_t v50 = v14;
  uint64_t v45 = sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v15 = v51;
  swift_getKeyPath();
  uint64_t v49 = v15;
  uint64_t v46 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v4) = *(unsigned char *)(v15 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
  swift_release();
  swift_getKeyPath();
  uint64_t v47 = v12;
  char v48 = v4;
  uint64_t v49 = v12;
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  uint64_t v43 = v2;
  swift_release();
  swift_release();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007D4C(v16, (uint64_t)qword_100156CF8);
  sub_10005DBB8(a1, (uint64_t)v9, type metadata accessor for AccessPointAnimationView);
  sub_10005DBB8(a1, (uint64_t)v7, type metadata accessor for AccessPointAnimationView);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67109376;
    uint64_t v21 = (uint64_t *)&v9[*(int *)(v44 + 28)];
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v49 = v23;
    uint64_t v50 = v22;
    uint64_t v41 = v17;
    State.wrappedValue.getter();
    int v40 = v19;
    uint64_t v24 = v51;
    swift_getKeyPath();
    uint64_t v42 = v13;
    uint64_t v49 = v24;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v25 = *(unsigned __int8 *)(v24 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
    swift_release();
    sub_10005DC20((uint64_t)v9, type metadata accessor for AccessPointAnimationView);
    LODWORD(v49) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 8) = 1024;
    char v26 = v7[16];
    uint64_t v27 = swift_retain();
    uint64_t v28 = sub_100034EE8(v27, v26);
    swift_release();
    swift_getKeyPath();
    uint64_t v49 = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v29 = *(unsigned __int8 *)(v28 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__isShowingDashboard);
    uint64_t v13 = v42;
    swift_release();
    sub_10005DC20((uint64_t)v7, type metadata accessor for AccessPointAnimationView);
    LODWORD(v49) = v29;
    uint64_t v17 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v40, "AccessPointAnimationView: Dashboard collapsed, model.showDashboard: %{BOOL}d, remoteAlertContext.isShowingDashboard: %{BOOL}d", (uint8_t *)v20, 0xEu);
    swift_slowDealloc();
  }
  else
  {
    sub_10005DC20((uint64_t)v7, type metadata accessor for AccessPointAnimationView);
    sub_10005DC20((uint64_t)v9, type metadata accessor for AccessPointAnimationView);
  }

  char v30 = *(unsigned char *)(a1 + 16);
  uint64_t v31 = swift_retain();
  uint64_t v32 = sub_100034EE8(v31, v30);
  swift_release();
  swift_getKeyPath();
  uint64_t v49 = v32;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_release();
  if (Strong)
  {
    [Strong setInputHardwareEventsDisabled:1];
  }
  uint64_t v34 = *(void *)(a1 + *(int *)(v44 + 44));
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  *(void *)&v39[-16] = v34;
  v39[-8] = 0;
  uint64_t v49 = v34;
  sub_10005D2B0(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  uint64_t v36 = v13[1];
  uint64_t v49 = *v13;
  uint64_t v50 = v36;
  State.wrappedValue.getter();
  uint64_t v37 = v51;
  swift_getKeyPath();
  uint64_t v49 = v37;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v49 = v37;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  *(unsigned char *)(v37 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) = (*(unsigned char *)(v37
                                                                                             + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) & 1) == 0;
  uint64_t v49 = v37;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  return swift_release();
}

uint64_t sub_100057D1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointAnimationView(0);
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = (uint64_t *)(a1 + *(int *)(v3 + 36));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v20 = v12;
  uint64_t v21 = v11;
  sub_100005B18(&qword_100141D00);
  State.wrappedValue.getter();
  uint64_t v13 = v22;
  swift_getKeyPath();
  uint64_t v20 = v13;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v3) = *(unsigned __int8 *)(v13 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  uint64_t result = swift_release();
  if (v3 == 2)
  {
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
    sub_10005DBB8(a1, (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointAnimationView);
    type metadata accessor for MainActor();
    uint64_t v16 = static MainActor.shared.getter();
    unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = &protocol witness table for MainActor;
    sub_10005FF38((uint64_t)v6, v18 + v17, type metadata accessor for AccessPointAnimationView);
    sub_10002C340((uint64_t)v9, (uint64_t)&unk_100141F80, v18);
    return swift_release();
  }
  return result;
}

uint64_t sub_100057FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[4] = v6;
  v4[5] = v5;
  return _swift_task_switch(sub_10005804C, v6, v5);
}

uint64_t sub_10005804C()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2];
  uint64_t v2 = qword_100156D18;
  v0[6] = qword_100156D18;
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = swift_retain();
  v0[7] = sub_100034EE8(v4, v3);
  swift_release();
  return _swift_task_switch(sub_100031F50, v2, 0);
}

uint64_t sub_10005811C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v92 = a1;
  uint64_t v3 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v86 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for UnevenRoundedRectangle() - 8;
  __chkstk_darwin(v95);
  uint64_t v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100142030);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_100142038);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = (uint64_t (*)(void))sub_100005B18(&qword_100142040);
  uint64_t v13 = *((void *)v84 - 1);
  __chkstk_darwin(v84);
  uint64_t v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100005B18(&qword_100142048);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  uint64_t v83 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = (uint64_t (**)(void))(sub_100005B18(&qword_100142050) - 8);
  __chkstk_darwin(v85);
  uint64_t v94 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_100005B18(&qword_100142058);
  __chkstk_darwin(v88);
  uint64_t v87 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100005B18(&qword_100142060);
  uint64_t v91 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  unsigned char v9[16] = 0;
  uint64_t v22 = sub_100005B18(&qword_100142068);
  sub_100058CEC(v2, (uint64_t)&v9[*(int *)(v22 + 44)]);
  uint64_t v23 = static Color.white.getter();
  sub_1000170C8((uint64_t)v9, (uint64_t)v12, &qword_100142030);
  *(void *)&v12[*(int *)(v10 + 36)] = v23;
  sub_100017388((uint64_t)v9, &qword_100142030);
  long long v103 = *(_OWORD *)(v2 + 16);
  unint64_t v104 = *(void *)(v2 + 32);
  long long v96 = *(_OWORD *)(v2 + 16);
  unint64_t v97 = *(void *)(v2 + 32);
  uint64_t v78 = sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  type metadata accessor for AccessPointModel(0);
  sub_10006101C();
  uint64_t v93 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  View.environment<A>(_:)();
  swift_release();
  sub_100017388((uint64_t)v12, &qword_100142038);
  LOBYTE(v9) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = (uint64_t)v83;
  uint64_t v33 = v84;
  (*(void (**)(char *, char *, uint64_t (*)(void)))(v13 + 16))(v83, v15, v84);
  uint64_t v34 = v32 + *(int *)(v17 + 44);
  *(unsigned char *)uint64_t v34 = (_BYTE)v9;
  *(void *)(v34 + 8) = v25;
  *(void *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v29;
  *(void *)(v34 + 32) = v31;
  *(unsigned char *)(v34 + 40) = 0;
  (*(void (**)(char *, uint64_t (*)(void)))(v13 + 8))(v15, v33);
  long long v96 = v103;
  unint64_t v97 = v104;
  Binding.wrappedValue.getter();
  uint64_t v35 = v101;
  swift_getKeyPath();
  *(void *)&long long v96 = v35;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v36 = v35 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  uint64_t v84 = type metadata accessor for AccessPointContainer;
  uint64_t v37 = v86;
  sub_10005DBB8(v36, v86, type metadata accessor for AccessPointContainer);
  swift_release();
  long long v102 = *(_OWORD *)(v2 + 40);
  long long v96 = *(_OWORD *)(v2 + 40);
  uint64_t v82 = sub_100005B18(&qword_100140DD8);
  State.wrappedValue.getter();
  AccessPointContainer.cornerRadii(for:)(v100);
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v81 = type metadata accessor for AccessPointContainer;
  sub_10005DC20(v37, type metadata accessor for AccessPointContainer);
  uint64_t v46 = &v6[*(int *)(v95 + 28)];
  uint64_t v47 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v80 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v48 = type metadata accessor for RoundedCornerStyle();
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104);
  v79(v46, v47, v48);
  *(void *)uint64_t v6 = v39;
  *((void *)v6 + 1) = v41;
  *((void *)v6 + 2) = v43;
  *((void *)v6 + 3) = v45;
  uint64_t v49 = v94;
  uint64_t v50 = v94 + *((int *)v85 + 11);
  uint64_t v85 = &type metadata accessor for UnevenRoundedRectangle;
  sub_10005DBB8((uint64_t)v6, v50, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  *(unsigned char *)(v50 + *(int *)(sub_100005B18(&qword_100142088) + 36)) = 0;
  sub_1000170C8(v32, v49, &qword_100142048);
  sub_10005DC20((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  sub_100017388(v32, &qword_100142048);
  long long v96 = v103;
  unint64_t v97 = v104;
  Binding.wrappedValue.getter();
  uint64_t v51 = v100;
  swift_getKeyPath();
  *(void *)&long long v96 = v51;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v52 = v51 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v52, v37, v84);
  swift_release();
  long long v96 = v102;
  State.wrappedValue.getter();
  AccessPointContainer.cornerRadii(for:)(v99);
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  sub_10005DC20(v37, v81);
  v79(&v6[*(int *)(v95 + 28)], v80, v48);
  *(void *)uint64_t v6 = v54;
  *((void *)v6 + 1) = v56;
  *((void *)v6 + 2) = v58;
  *((void *)v6 + 3) = v60;
  uint64_t v61 = v88;
  uint64_t v62 = (uint64_t)v87;
  uint64_t v63 = (uint64_t)&v87[*(int *)(v88 + 36)];
  sub_10005DBB8((uint64_t)v6, v63, (uint64_t (*)(void))v85);
  *(_WORD *)(v63 + *(int *)(sub_100005B18(&qword_100141EA8) + 36)) = 256;
  uint64_t v64 = v94;
  sub_1000170C8(v94, v62, &qword_100142050);
  sub_10005DC20((uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  sub_100017388(v64, &qword_100142050);
  long long v96 = v103;
  unint64_t v97 = v104;
  Binding.wrappedValue.getter();
  uint64_t v65 = v99;
  swift_getKeyPath();
  *(void *)&long long v96 = v65;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v66 = *(void *)(v65 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release();
  *(void *)&long long v96 = v66;
  uint64_t v67 = swift_allocObject();
  long long v68 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v67 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v67 + 64) = v68;
  *(_OWORD *)(v67 + 80) = *(_OWORD *)(v2 + 64);
  *(void *)(v67 + 96) = *(void *)(v2 + 80);
  long long v69 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v67 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v67 + 32) = v69;
  sub_1000610EC(v2);
  unint64_t v70 = sub_10006117C();
  uint64_t v71 = v89;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388(v62, &qword_100142058);
  long long v96 = *(_OWORD *)(v2 + 72);
  sub_100005B18(&qword_1001420B8);
  State.wrappedValue.getter();
  uint64_t v72 = v99;
  swift_getKeyPath();
  *(void *)&long long v96 = v72;
  sub_10005D2B0(&qword_1001420C0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent.GestureHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v66) = *(unsigned char *)(v72 + 16);
  swift_release();
  LOBYTE(v99) = v66;
  uint64_t v73 = swift_allocObject();
  long long v74 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v73 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v73 + 64) = v74;
  *(_OWORD *)(v73 + 80) = *(_OWORD *)(v2 + 64);
  *(void *)(v73 + 96) = *(void *)(v2 + 80);
  long long v75 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v73 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v73 + 32) = v75;
  sub_1000610EC(v2);
  *(void *)&long long v96 = v61;
  *((void *)&v96 + 1) = &type metadata for Int;
  unint64_t v97 = v70;
  uint64_t v98 = &protocol witness table for Int;
  swift_getOpaqueTypeConformance2();
  uint64_t v76 = v90;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v71, v76);
}

uint64_t sub_100058CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v41 = sub_100005B18(&qword_1001420E0);
  __chkstk_darwin(v41);
  uint64_t v42 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v46);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100005B18(&qword_1001411E0);
  uint64_t v37 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_1001420E8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v36 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v40 = (char *)&v36 - v12;
  uint64_t v13 = sub_100005B18(&qword_1001420F0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v44 = (uint64_t)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v43 = (char *)&v36 - v16;
  uint64_t v47 = (long long *)(a1 + 40);
  long long v48 = *(_OWORD *)(a1 + 40);
  sub_100005B18(&qword_100140DD8);
  State.wrappedValue.getter();
  uint64_t v17 = (long long *)(a1 + 16);
  uint64_t v38 = (long long *)(a1 + 16);
  if ((v52 & 1) == 0)
  {
    long long v48 = *v17;
    uint64_t v49 = *(void *)(a1 + 32);
    sub_100005B18(&qword_100142070);
    Binding.wrappedValue.getter();
    uint64_t v18 = v52;
    swift_getKeyPath();
    *(void *)&long long v48 = v18;
    sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v19 = v18 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess();
    sub_10005DBB8(v19, (uint64_t)v5, type metadata accessor for AccessPointContainer);
    swift_release();
    long long v48 = *v47;
    uint64_t result = State.wrappedValue.getter();
    unint64_t v21 = v51;
    if ((v51 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v22 = *(void *)&v5[*(int *)(v46 + 28)];
      if (v51 < *(void *)(v22 + 16)) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  long long v48 = *v17;
  uint64_t v49 = *(void *)(a1 + 32);
  sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v23 = v52;
  swift_getKeyPath();
  *(void *)&long long v48 = v23;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v24 = v23 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v24, (uint64_t)v5, type metadata accessor for AccessPointContainer);
  swift_release();
  long long v48 = *v47;
  uint64_t result = State.wrappedValue.getter();
  unint64_t v21 = v51;
  if ((v51 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v22 = *(void *)&v5[*(int *)(v46 + 28)];
  if (v51 < *(void *)(v22 + 16))
  {
LABEL_7:
    sub_10003D160(v22 + 40 * v21 + 32, (uint64_t)&v48);
    sub_10003D1C4();
    ComponentView.init(_:content:)();
    sub_10005DC20((uint64_t)v5, type metadata accessor for AccessPointContainer);
    long long v48 = *(_OWORD *)(a1 + 72);
    sub_100005B18(&qword_1001420B8);
    State.wrappedValue.getter();
    uint64_t v25 = type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
    uint64_t v26 = sub_10001758C(&qword_1001411F8, &qword_1001411E0);
    uint64_t v27 = sub_10005D2B0(&qword_1001420C0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent.GestureHandler);
    uint64_t v28 = v36;
    uint64_t v29 = v39;
    View.environment<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v29);
    uint64_t v30 = v40;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v40, v28, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v42, v30, v8);
    swift_storeEnumTagMultiPayload();
    *(void *)&long long v48 = v29;
    *((void *)&v48 + 1) = v25;
    uint64_t v49 = v26;
    uint64_t v50 = v27;
    swift_getOpaqueTypeConformance2();
    uint64_t v31 = (uint64_t)v43;
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v8);
    long long v48 = *v38;
    uint64_t v49 = *((void *)v38 + 2);
    sub_100005B18(&qword_100142070);
    Binding.wrappedValue.getter();
    unint64_t v32 = v51;
    swift_getKeyPath();
    *(void *)&long long v48 = v32;
    sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v30) = *(unsigned char *)(v32 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
    swift_release();
    uint64_t v33 = v44;
    sub_1000170C8(v31, v44, &qword_1001420F0);
    uint64_t v34 = v45;
    sub_1000170C8(v33, v45, &qword_1001420F0);
    uint64_t v35 = v34 + *(int *)(sub_100005B18(&qword_1001420F8) + 48);
    *(void *)uint64_t v35 = 0;
    *(unsigned char *)(v35 + 8) = 0;
    *(unsigned char *)(v35 + 9) = (_BYTE)v30;
    sub_100017388(v31, &qword_1001420F0);
    return sub_100017388(v33, &qword_1001420F0);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100059688(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10013FBE8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_100141720);
  *(void *)&v11[-16] = a1;
  uint64_t v6 = withAnimation<A>(_:_:)();
  __chkstk_darwin(v6);
  *(void *)&v11[-16] = a1;
  uint64_t v7 = swift_allocObject();
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v7 + 64) = v8;
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v7 + 96) = *(void *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v9;
  sub_1000610EC(a1);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000598B0(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 56);
  sub_100024A74((uint64_t)&v2 + 8, (uint64_t)v3, &qword_1001420D8);
  sub_10003DB24((uint64_t)v3);
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  State.wrappedValue.setter();
  return sub_10003DAA8((uint64_t)&v2);
}

uint64_t sub_100059960()
{
  if (qword_10013FBE8 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_100141720);
  return withAnimation<A>(_:_:)();
}

uint64_t sub_100059A14()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100059B28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v13 = *(_OWORD *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 32);
  sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v6 = v15;
  swift_getKeyPath();
  *(void *)&long long v13 = v6;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v7 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  uint64_t result = swift_release();
  if (!v7)
  {
    if (qword_10013FBF0 != -1) {
      uint64_t result = swift_once();
    }
    __chkstk_darwin(result);
    *(void *)&v12[-16] = a1;
    uint64_t v9 = swift_allocObject();
    long long v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v9 + 64) = v10;
    *(_OWORD *)(v9 + 80) = *(_OWORD *)(a1 + 64);
    *(void *)(v9 + 96) = *(void *)(a1 + 80);
    long long v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v9 + 32) = v11;
    sub_1000610EC(a1);
    static AnimationCompletionCriteria.logicallyComplete.getter();
    withAnimation<A>(_:completionCriteria:_:completion:)();
    swift_release();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_100059DA8()
{
  return swift_release();
}

uint64_t sub_100059EB4(uint64_t a1)
{
  uint64_t v43 = type metadata accessor for AccessPointAnchoring();
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v41 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v3 - 8);
  uint64_t v45 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v5);
  int v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v55 = *(_OWORD *)(a1 + 16);
  uint64_t v56 = *(void *)(a1 + 32);
  long long v53 = *(_OWORD *)(a1 + 16);
  uint64_t v54 = *(void *)(a1 + 32);
  sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v8 = v51;
  swift_getKeyPath();
  uint64_t v46 = v8;
  char v47 = 0;
  *(void *)&long long v53 = v8;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  long long v53 = v55;
  uint64_t v54 = v56;
  Binding.wrappedValue.getter();
  uint64_t v9 = v51;
  swift_getKeyPath();
  *(void *)&long long v53 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v10 = v9 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v10, (uint64_t)v7, type metadata accessor for AccessPointContainer);
  swift_release();
  uint64_t v44 = v5;
  int v11 = v7[*(int *)(v5 + 24)];
  sub_10005DC20((uint64_t)v7, type metadata accessor for AccessPointContainer);
  if ((v11 - 3) >= 4 && v11)
  {
    long long v51 = v55;
    uint64_t v52 = v56;
    Binding.wrappedValue.getter();
    uint64_t v45 = (char *)v48;
    long long v51 = v55;
    uint64_t v52 = v56;
    Binding.wrappedValue.getter();
    uint64_t v25 = v48;
    swift_getKeyPath();
    *(void *)&long long v51 = v25;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v26 = v25 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
    swift_beginAccess();
    uint64_t v27 = v42;
    uint64_t v28 = v41;
    uint64_t v29 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v26, v43);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    v40[1] = v40;
    __chkstk_darwin(KeyPath);
    uint64_t v31 = v45;
    v40[-2] = v45;
    v40[-1] = v28;
    *(void *)&long long v48 = v31;
    v40[2] = (char *)&type metadata for () + 8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
    swift_release();
    long long v48 = v55;
    uint64_t v49 = v56;
    Binding.wrappedValue.getter();
    uint64_t v32 = v50;
    uint64_t v33 = swift_getKeyPath();
    __chkstk_darwin(v33);
    v40[-2] = v32;
    LOBYTE(v40[-1]) = 1;
    *(void *)&long long v48 = v32;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    long long v48 = v55;
    uint64_t v49 = v56;
    Binding.wrappedValue.getter();
    uint64_t v34 = v50;
    long long v48 = v55;
    uint64_t v49 = v56;
    Binding.wrappedValue.getter();
    uint64_t v35 = v50;
    swift_getKeyPath();
    *(void *)&long long v48 = v35;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v36 = v35 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
    swift_beginAccess();
    sub_10005DBB8(v36, (uint64_t)v7, type metadata accessor for AccessPointContainer);
    swift_release();
    uint64_t v37 = *(void *)&v7[*(int *)(v44 + 28)];
    swift_bridgeObjectRetain();
    sub_10005DC20((uint64_t)v7, type metadata accessor for AccessPointContainer);
    uint64_t v38 = *(void *)(v37 + 16);
    swift_bridgeObjectRelease();
    uint64_t v39 = swift_getKeyPath();
    __chkstk_darwin(v39);
    v40[-2] = v34;
    v40[-1] = v38 - 1;
    uint64_t v50 = v34;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    if (qword_10013FBC0 != -1) {
      swift_once();
    }
    __chkstk_darwin(qword_1001416F8);
    v40[-2] = a1;
    return withAnimation<A>(_:_:)();
  }
  else
  {
    char v12 = *(unsigned char *)(a1 + 8);
    uint64_t v13 = swift_retain();
    uint64_t v14 = sub_100034EE8(v13, v12);
    swift_release();
    swift_getKeyPath();
    *(void *)&long long v51 = v14;
    sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t v15 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    if (v15)
    {
      uint64_t v18 = type metadata accessor for TaskPriority();
      uint64_t v19 = (uint64_t)v45;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v45, 1, 1, v18);
      type metadata accessor for MainActor();
      sub_1000610EC(a1);
      uint64_t v20 = static MainActor.shared.getter();
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = &protocol witness table for MainActor;
      long long v22 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v21 + 64) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v21 + 80) = v22;
      *(_OWORD *)(v21 + 96) = *(_OWORD *)(a1 + 64);
      uint64_t v23 = *(void *)(a1 + 80);
      long long v24 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v21 + 32) = *(_OWORD *)a1;
      *(_OWORD *)(v21 + 48) = v24;
      *(void *)(v21 + 112) = v23;
      *(void *)(v21 + 120) = v16;
      *(void *)(v21 + 128) = v15;
      sub_10002C340(v19, (uint64_t)&unk_1001420D0, v21);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10005A7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  type metadata accessor for MainActor();
  v6[5] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[6] = v8;
  v6[7] = v7;
  return _swift_task_switch(sub_10005A848, v8, v7);
}

uint64_t sub_10005A848()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[2];
  uint64_t v2 = qword_100156D18;
  v0[8] = qword_100156D18;
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = swift_retain();
  v0[9] = sub_100034EE8(v4, v3);
  swift_release();
  return _swift_task_switch(sub_10005A914, v2, 0);
}

uint64_t sub_10005A914()
{
  sub_100037BD8(v0[9], 1, v0[8]);
  swift_release();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  return _swift_task_switch(sub_10005A988, v1, v2);
}

uint64_t sub_10005A988()
{
  uint64_t v1 = qword_100156D18;
  *(void *)(v0 + 80) = qword_100156D18;
  return _swift_task_switch(sub_10005A9AC, v1, 0);
}

uint64_t sub_10005A9AC()
{
  sub_10006A164(v0[3], v0[4]);
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  return _swift_task_switch(sub_10005AA14, v1, v2);
}

uint64_t sub_10005AA14()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005AA74()
{
  return swift_release();
}

uint64_t sub_10005AB80@<X0>(uint64_t a1@<X8>)
{
  return sub_10005811C(a1);
}

uint64_t sub_10005ABCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v69 = a1;
  uint64_t v3 = type metadata accessor for CollapsibleContentFrame(0);
  uint64_t v60 = *(uint64_t (**)(uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v61 = v4;
  uint64_t v67 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for AccessPointAnchoring();
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = (uint64_t (*)(void))type metadata accessor for MoveTransition();
  unint64_t v56 = *((void *)v57 - 1);
  uint64_t v7 = __chkstk_darwin(v57);
  long long v53 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v55 = (char *)&v51 - v9;
  uint64_t v10 = type metadata accessor for DynamicTypeSize();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100005B18(&qword_100142100);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100005B18(&qword_100142108);
  __chkstk_darwin(v71);
  uint64_t v58 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_100005B18(&qword_100142110);
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100005B18(&qword_100142118);
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v59 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2 + *(int *)(v3 + 24);
  char v21 = *(unsigned char *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  LOBYTE(v77) = v21;
  *((void *)&v77 + 1) = v22;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  if (v72 == 1)
  {
    sub_100035290((uint64_t)v13);
    sub_1000A31AC((uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  static Alignment.leading.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v23 = sub_100005B18(&qword_100142120);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v16, v69, v23);
  long long v24 = &v16[*(int *)(v14 + 36)];
  long long v25 = v78;
  *(_OWORD *)long long v24 = v77;
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v79;
  uint64_t v26 = *(int *)(v3 + 20);
  uint64_t v70 = v2;
  uint64_t v27 = v2 + v26;
  uint64_t v72 = *(void *)(v2 + v26);
  long long v73 = *(_OWORD *)(v2 + v26 + 8);
  uint64_t v69 = sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v28 = v76;
  swift_getKeyPath();
  uint64_t v72 = v28;
  uint64_t v51 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v29 = v28 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  uint64_t v30 = v52;
  uint64_t v31 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v6, v29, v54);
  swift_release();
  AccessPointAnchoring.leading.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
  uint64_t v32 = v55;
  MoveTransition.init(edge:)();
  unint64_t v33 = v56;
  uint64_t v34 = v57;
  (*(void (**)(char *, char *, uint64_t (*)(void)))(v56 + 16))(v53, v32, v57);
  sub_10005D2B0(&qword_100142128, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
  uint64_t v35 = AnyTransition.init<A>(_:)();
  uint64_t v36 = v58;
  sub_1000170C8((uint64_t)v16, v58, &qword_100142100);
  *(void *)(v36 + *(int *)(v71 + 36)) = v35;
  (*(void (**)(char *, uint64_t (*)(void)))(v33 + 8))(v32, v34);
  sub_100017388((uint64_t)v16, &qword_100142100);
  uint64_t v72 = *(void *)v27;
  long long v73 = *(_OWORD *)(v27 + 8);
  Binding.wrappedValue.getter();
  uint64_t v37 = v75;
  swift_getKeyPath();
  uint64_t v72 = v37;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v29) = *(unsigned char *)(v37 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  LOBYTE(v72) = v29;
  uint64_t v57 = type metadata accessor for CollapsibleContentFrame;
  uint64_t v38 = v67;
  sub_10005DBB8(v70, v67, type metadata accessor for CollapsibleContentFrame);
  uint64_t v39 = *((unsigned __int8 *)v60 + 80);
  uint64_t v40 = (v39 + 16) & ~v39;
  uint64_t v61 = v39 | 7;
  uint64_t v41 = swift_allocObject();
  uint64_t v60 = type metadata accessor for CollapsibleContentFrame;
  sub_10005FF38(v38, v41 + v40, type metadata accessor for CollapsibleContentFrame);
  unint64_t v56 = sub_100061660();
  unint64_t v42 = sub_10004A374();
  uint64_t v43 = v64;
  uint64_t v44 = v71;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388(v36, &qword_100142108);
  uint64_t v72 = *(void *)v27;
  long long v73 = *(_OWORD *)(v27 + 8);
  Binding.wrappedValue.getter();
  uint64_t v45 = v75;
  swift_getKeyPath();
  uint64_t v72 = v45;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v46 = *(void *)(v45 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release();
  uint64_t v75 = v46;
  sub_10005DBB8(v70, v38, v57);
  uint64_t v47 = swift_allocObject();
  sub_10005FF38(v38, v47 + v40, v60);
  uint64_t v72 = v44;
  *(void *)&long long v73 = &type metadata for AccessPointModel.AnimationState;
  *((void *)&v73 + 1) = v56;
  unint64_t v74 = v42;
  swift_getOpaqueTypeConformance2();
  long long v48 = v59;
  uint64_t v49 = v66;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v43, v49);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v68, v48, v63);
}

uint64_t sub_10005B644()
{
  type metadata accessor for CollapsibleContentFrame(0);
  sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  swift_getKeyPath();
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v0 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  uint64_t result = swift_release();
  if (v0 == 3)
  {
    sub_100005B18(&qword_100140E10);
    return State.wrappedValue.setter();
  }
  return result;
}

uint64_t sub_10005B780()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (int *)type metadata accessor for CollapsibleContentFrame(0);
  uint64_t v33 = *((void *)v4 - 1);
  uint64_t v5 = *(void *)(v33 + 64);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for AccessPointContainer(0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v0 + v4[5];
  uint64_t v41 = *(void *)v13;
  long long v42 = *(_OWORD *)(v13 + 8);
  sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v14 = v38;
  swift_getKeyPath();
  uint64_t v41 = v14;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v15 = v14 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__container;
  swift_beginAccess();
  sub_10005DBB8(v15, (uint64_t)v12, type metadata accessor for AccessPointContainer);
  swift_getKeyPath();
  uint64_t v38 = v14;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LODWORD(v15) = AccessPointContainer.isCollapsibleItem(at:)(*(void *)(v14
                                                                       + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex));
  sub_10005DC20((uint64_t)v12, type metadata accessor for AccessPointContainer);
  swift_release();
  uint64_t v16 = v0 + v4[6];
  uint64_t v17 = *(void *)(v16 + 8);
  LOBYTE(v38) = *(unsigned char *)v16;
  uint64_t v39 = v17;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  int v18 = v40;
  int v19 = v15 ^ 1;
  sub_10005DBB8(v1, (uint64_t)v9, type metadata accessor for CollapsibleContentFrame);
  if (v18 == 1 && (v19 & 1) != 0)
  {
    sub_10005DC20((uint64_t)v9, type metadata accessor for CollapsibleContentFrame);
  }
  else
  {
    uint64_t v20 = &v9[v4[6]];
    char v21 = *v20;
    uint64_t v22 = *((void *)v20 + 1);
    LOBYTE(v38) = v21;
    uint64_t v39 = v22;
    State.wrappedValue.getter();
    int v23 = v40;
    uint64_t result = sub_10005DC20((uint64_t)v9, type metadata accessor for CollapsibleContentFrame);
    if ((v23 | v19)) {
      return result;
    }
  }
  uint64_t v25 = v1 + v4[7];
  char v26 = *(unsigned char *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  LOBYTE(v38) = *(unsigned char *)v25;
  uint64_t v39 = v27;
  State.wrappedValue.getter();
  if (v40 == 1)
  {
    LOBYTE(v38) = v26;
    uint64_t v39 = v27;
    unsigned __int8 v40 = 0;
    State.wrappedValue.setter();
    uint64_t v29 = *(void *)(v16 + 8);
    LOBYTE(v38) = *(unsigned char *)v16;
    char v28 = v38;
    uint64_t v39 = v29;
    swift_retain();
    State.wrappedValue.getter();
    LOBYTE(v38) = v28;
    uint64_t v39 = v29;
    BOOL v37 = (v40 & 1) == 0;
    State.wrappedValue.setter();
    return swift_release();
  }
  else
  {
    if (qword_10013FBE8 != -1) {
      swift_once();
    }
    sub_10005DBB8(v1, (uint64_t)v7, type metadata accessor for CollapsibleContentFrame);
    unint64_t v30 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v31 = swift_allocObject();
    sub_10005FF38((uint64_t)v7, v31 + v30, type metadata accessor for CollapsibleContentFrame);
    uint64_t v32 = v34;
    static AnimationCompletionCriteria.logicallyComplete.getter();
    withAnimation<A>(_:completionCriteria:_:completion:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v32, v36);
  }
}

uint64_t sub_10005BCF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for CollapsibleContentFrame(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8);
  if (qword_10013FBE0 != -1) {
    uint64_t v9 = swift_once();
  }
  __chkstk_darwin(v9);
  *(void *)&v13[-16] = a1;
  sub_10005DBB8(a1, (uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for CollapsibleContentFrame);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_10005FF38((uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10, type metadata accessor for CollapsibleContentFrame);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10005BF64()
{
  return swift_release();
}

uint64_t sub_10005C018(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v50 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v49 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessPointAnchoring();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v52 = (char *)&v44 - v8;
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = type metadata accessor for CollapsibleContentFrame(0);
  uint64_t v46 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v48 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v47 = v17;
  uint64_t v18 = __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v21 = a1 + *(int *)(v18 + 20);
  uint64_t v61 = *(void *)v21;
  long long v62 = *(_OWORD *)(v21 + 8);
  uint64_t v54 = sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v22 = v56;
  swift_getKeyPath();
  uint64_t v61 = v22;
  uint64_t v53 = sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v23 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state);
  swift_release();
  sub_10005DBB8(a1, (uint64_t)v20, type metadata accessor for CollapsibleContentFrame);
  if (v23 != 1)
  {
    sub_10005DC20((uint64_t)v20, type metadata accessor for CollapsibleContentFrame);
    sub_10005DBB8(a1, (uint64_t)v16, type metadata accessor for CollapsibleContentFrame);
    return sub_10005DC20((uint64_t)v16, type metadata accessor for CollapsibleContentFrame);
  }
  uint64_t v45 = v2;
  long long v24 = &v20[*(int *)(v11 + 20)];
  uint64_t v61 = *(void *)v24;
  long long v62 = *(_OWORD *)(v24 + 8);
  Binding.wrappedValue.getter();
  uint64_t v25 = v56;
  swift_getKeyPath();
  uint64_t v61 = v25;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v26 = v25 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
  swift_beginAccess();
  uint64_t v27 = v55;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
  v44(v10, v26, v4);
  swift_release();
  LOBYTE(v26) = AccessPointAnchoring.bottom.getter();
  char v28 = *(void (**)(char *, uint64_t))(v27 + 8);
  v28(v10, v4);
  sub_10005DC20((uint64_t)v20, type metadata accessor for CollapsibleContentFrame);
  sub_10005DBB8(a1, (uint64_t)v16, type metadata accessor for CollapsibleContentFrame);
  if ((v26 & 1) == 0) {
    return sub_10005DC20((uint64_t)v16, type metadata accessor for CollapsibleContentFrame);
  }
  uint64_t v29 = v28;
  unint64_t v30 = &v16[*(int *)(v11 + 20)];
  uint64_t v61 = *(void *)v30;
  long long v62 = *(_OWORD *)(v30 + 8);
  Binding.wrappedValue.getter();
  uint64_t v31 = v59;
  swift_getKeyPath();
  uint64_t v61 = v31;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v32 = v31 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor;
  swift_beginAccess();
  uint64_t v33 = v52;
  v44(v52, v32, v4);
  swift_release();
  uint64_t v34 = v51;
  (*(void (**)(char *, void, uint64_t))(v55 + 104))(v51, enum case for AccessPointAnchoring.topCentered(_:), v4);
  sub_10005D2B0(&qword_100142158, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v59 == v57 && v60 == v58)
  {
    swift_bridgeObjectRelease_n();
    v28(v34, v4);
    v28(v33, v4);
    sub_10005DC20((uint64_t)v16, type metadata accessor for CollapsibleContentFrame);
    uint64_t v35 = v45;
  }
  else
  {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29(v34, v4);
    v29(v33, v4);
    uint64_t result = sub_10005DC20((uint64_t)v16, type metadata accessor for CollapsibleContentFrame);
    uint64_t v35 = v45;
    if ((v37 & 1) == 0) {
      return result;
    }
  }
  if (qword_10013FBC0 != -1) {
    swift_once();
  }
  uint64_t v38 = Animation.delay(_:)();
  __chkstk_darwin(v38);
  *(&v44 - 2) = (void (*)(char *, uint64_t, uint64_t))a1;
  uint64_t v39 = a1;
  uint64_t v40 = v48;
  sub_10005DBB8(v39, v48, type metadata accessor for CollapsibleContentFrame);
  unint64_t v41 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v42 = swift_allocObject();
  sub_10005FF38(v40, v42 + v41, type metadata accessor for CollapsibleContentFrame);
  uint64_t v43 = v49;
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v43, v35);
}

uint64_t sub_10005C850()
{
  return swift_release();
}

uint64_t sub_10005C96C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessPointAnchoring();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CollapsibleContentFrame(0) + 20));
  uint64_t v8 = v6[1];
  uint64_t v9 = v6[2];
  uint64_t v17 = *v6;
  uint64_t v7 = v17;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  sub_100005B18(&qword_100142070);
  Binding.wrappedValue.getter();
  uint64_t v10 = v20;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  Binding.wrappedValue.getter();
  uint64_t v11 = v20;
  swift_getKeyPath();
  uint64_t v17 = v11;
  sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = v11 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
  swift_release();
  swift_getKeyPath();
  uint64_t v15 = v10;
  uint64_t v16 = v5;
  uint64_t v20 = v10;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release();
  if (qword_10013FBC0 != -1) {
    swift_once();
  }
  __chkstk_darwin(qword_1001416F8);
  *(void *)&v14[-16] = a1;
  return withAnimation<A>(_:_:)();
}

uint64_t sub_10005CC40()
{
  return swift_release();
}

uint64_t sub_10005CD60()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_10005CD84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t sub_10005CE54()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100052754);
}

uint64_t sub_10005CE8C()
{
  uint64_t v1 = (int *)type metadata accessor for AccessPointAnimationView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_release();
  uint64_t v6 = v0 + v3 + v1[6];
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = v5 + v1[10];
  uint64_t v9 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v18 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v8 + *(int *)(v9 + 28);
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v18;
  }
  uint64_t v13 = v3 + v4;
  swift_release();
  swift_release();
  uint64_t v14 = v5 + v1[13];
  swift_release();
  swift_release();
  uint64_t v15 = v14 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v16 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_release();

  return _swift_deallocObject(v0, v13, v2 | 7);
}

uint64_t sub_10005D188(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000531A4(a1, a2, v6);
}

unint64_t sub_10005D208()
{
  unint64_t result = qword_100141CF0;
  if (!qword_100141CF0)
  {
    sub_10000B448(&qword_100141CB8);
    sub_10001758C(&qword_100141CF8, &qword_100141CB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141CF0);
  }
  return result;
}

uint64_t sub_10005D2B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D2FC()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100054A04);
}

uint64_t sub_10005D328(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_10005D3A4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0(&qword_1001420C0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent.GestureHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_10005D44C()
{
  return swift_release();
}

id sub_10005D51C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__gkGame);
  *a2 = v4;

  return v4;
}

void sub_10005D5DC(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10005D6B8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__isShowingDashboard);
  return result;
}

uint64_t sub_10005D768()
{
  return swift_release();
}

uint64_t sub_10005D838@<X0>(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

void sub_10005D8EC(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10005D9D4()
{
  return sub_10005DA0C(&qword_10013FBB8, &qword_1001416F0);
}

uint64_t sub_10005DA0C(void *a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  return sub_1000557A0(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

uint64_t sub_10005DAA4()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100055E04);
}

uint64_t sub_10005DAD4()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003E30C;
  return sub_1000568C0(v3);
}

uint64_t sub_10005DBB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005DC20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005DC84(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_10004B2BC(a1, v5, v6, v7);
}

uint64_t sub_10005DD74()
{
  uint64_t v1 = (int *)type metadata accessor for AccessPointAnimationView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_release();
  uint64_t v6 = v0 + v3 + v1[6];
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = v5 + v1[10];
  uint64_t v9 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v18 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v8 + *(int *)(v9 + 28);
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v18;
  }
  uint64_t v13 = v3 + v4;
  swift_release();
  swift_release();
  uint64_t v14 = v5 + v1[13];
  swift_release();
  swift_release();
  uint64_t v15 = v14 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v16 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_release();

  return _swift_deallocObject(v0, v13, v2 | 7);
}

uint64_t sub_10005E078(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_10004BA10(a1, v5, v6, v7);
}

uint64_t sub_10005E164@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100045778(a1, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor, a2);
}

uint64_t sub_10005E190()
{
  return sub_10004C2C4(*(void *)(v0 + 16));
}

void sub_10005E1AC()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__state) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005E1C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100045778(a1, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor, a2);
}

uint64_t sub_10005E1F0()
{
  return sub_100045A00(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__anchor);
}

uint64_t sub_10005E214()
{
  return sub_100045A00(*(void *)(v0 + 16), *(void *)(v0 + 24), &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__destAnchor);
}

uint64_t sub_10005E238()
{
  return sub_100044B30(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005E254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessPointContainer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_10005E2B8()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex) = *(void *)(v0 + 24);
}

uint64_t sub_10005E2CC()
{
  return sub_1000561C4(*(void *)(v0 + 16));
}

uint64_t sub_10005E2EC()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100056400);
}

uint64_t sub_10005E318@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100045348(a1, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal, a2);
}

uint64_t sub_10005E348(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_1000567C4(a1, v5, v6, v7);
}

void sub_10005E434()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__reveal) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005E44C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100045348(a1, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden, a2);
}

void sub_10005E478()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__accessPointHidden) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005E490()
{
  return sub_100055834(*(void *)(v0 + 16));
}

uint64_t sub_10005E4B8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_100057050(a1, v4, v5, v7, v6);
}

uint64_t sub_10005E578@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100045348(a1, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard, a2);
}

uint64_t sub_10005E5A4()
{
  return sub_100055164();
}

uint64_t sub_10005E5C4()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100055278);
}

uint64_t sub_10005E5F4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_1000555C8(a1, v5, v6, v7);
}

uint64_t sub_10005E6E4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000243C4;
  return sub_100057050(a1, v4, v5, v7, v6);
}

uint64_t sub_10005E7A4(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_10005E7D0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10005E7F8()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005E818()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005E860(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_1000316E4(a1, v4, v5, v7, v6);
}

uint64_t sub_10005E920()
{
  return sub_100057248(*(void *)(v0 + 16), (uint64_t)&unk_10010EFB0, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed);
}

uint64_t sub_10005E950()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100053A88);
}

uint64_t sub_10005E97C()
{
  uint64_t v1 = (int *)type metadata accessor for AccessPointAnimationView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_release();
  uint64_t v6 = v0 + v3 + v1[6];
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = v5 + v1[10];
  uint64_t v9 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v18 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v8 + *(int *)(v9 + 28);
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v18;
  }
  unint64_t v13 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v14 = v5 + v1[13];
  swift_release();
  swift_release();
  uint64_t v15 = v14 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v16 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v13 + 8, v2 | 7);
}

uint64_t sub_10005EC94(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10003E30C;
  return sub_1000538A0(a1, v6, v7, v8, v9);
}

uint64_t sub_10005EDB8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100045348(a1, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed, a2);
}

void sub_10005EDEC()
{
  sub_1000D9114(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10005EE18()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005EE58()
{
  return sub_1000D914C();
}

void sub_10005EE74()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__collapsed) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005EE94()
{
  return sub_100060004();
}

unint64_t sub_10005EEAC()
{
  unint64_t result = qword_100141DD8;
  if (!qword_100141DD8)
  {
    sub_10000B448(&qword_100141DD0);
    sub_10001758C(&qword_100141DE0, &qword_100141DE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141DD8);
  }
  return result;
}

unint64_t sub_10005EF4C()
{
  unint64_t result = qword_100141DF8;
  if (!qword_100141DF8)
  {
    sub_10000B448(&qword_100141DA8);
    sub_10001758C(&qword_100141E00, &qword_100141DC8);
    sub_10001758C(&qword_100141E08, &qword_100141DC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141DF8);
  }
  return result;
}

uint64_t sub_10005F014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10004EF68(v6, a1, a2);
}

uint64_t sub_10005F0A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for AccessPointAnimationView(0);
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v23 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v24 = type metadata accessor for GeometryProxy();
  uint64_t v5 = *(void *)(v24 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = *(void *)(v5 + 64);
  uint64_t v7 = v1 + v4;
  swift_release();
  uint64_t v8 = v1 + v4 + v2[6];
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = v7 + v2[10];
  uint64_t v11 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v21 = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v10 + *(int *)(v11 + 28);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = (v3 + 16) & ~v3;
    uint64_t v1 = v21;
  }
  uint64_t v15 = v3 | v6 | 7;
  uint64_t v16 = (v4 + v23 + v6) & ~v6;
  swift_release();
  swift_release();
  uint64_t v17 = v7 + v2[13];
  swift_release();
  swift_release();
  uint64_t v18 = v17 + *(int *)(sub_100005B18(&qword_100140C50) + 32);
  uint64_t v19 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1 + v16, v24);

  return _swift_deallocObject(v1, v16 + v22, v15);
}

uint64_t sub_10005F42C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for GeometryProxy() - 8);
  return sub_100050428(v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

unint64_t sub_10005F4F0()
{
  unint64_t result = qword_100141E48;
  if (!qword_100141E48)
  {
    sub_10000B448(&qword_100141E18);
    sub_10001758C(&qword_100141E50, &qword_100141E10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141E48);
  }
  return result;
}

uint64_t sub_10005F598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for RemoteAlertAccessPointContext(0);
  sub_10005D2B0((unint64_t *)&qword_100140DB8, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  uint64_t v6 = Environment.init<A>(_:)();
  char v8 = v7;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a4 = v6;
  *(unsigned char *)(a4 + 8) = v8 & 1;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v13;
  *(unsigned char *)(a4 + 56) = v12;
  *(void *)(a4 + 64) = v13;
  *(void *)(a4 + 72) = v12;
  *(void *)(a4 + 80) = v13;
  return result;
}

uint64_t sub_10005F6F4()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10005F734(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  double v8 = v1[6];
  double v9 = v1[7];
  double v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10003E30C;
  return sub_100032748(v7, v8, v9, v10, a1, v4, v5, v6);
}

uint64_t type metadata accessor for CollapsibleContentFrame(uint64_t a1)
{
  return sub_100017090(a1, qword_100141FE8);
}

uint64_t sub_10005F838()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_10005F86C()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_10004DA1C);
}

uint64_t sub_10005F89C()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_10004E060);
}

uint64_t sub_10005F8C8()
{
  return sub_10005F928(&qword_100141F10, &qword_100141EE8, (void (*)(void))sub_10005F8F8);
}

uint64_t sub_10005F8F8()
{
  return sub_10005F928(&qword_100141F18, &qword_100141EE0, (void (*)(void))sub_10005F9A4);
}

uint64_t sub_10005F928(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005F9A4()
{
  unint64_t result = qword_100141F20;
  if (!qword_100141F20)
  {
    sub_10000B448(&qword_100141ED8);
    sub_10001758C(&qword_100141F28, &qword_100141ED0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141F20);
  }
  return result;
}

uint64_t sub_10005FA44()
{
  return sub_10004E394();
}

uint64_t sub_10005FA64()
{
  return sub_10005DA0C(&qword_10013FBE8, &qword_100141720);
}

uint64_t sub_10005FA9C()
{
  return sub_10004E478(*(void *)(v0 + 16));
}

uint64_t sub_10005FAB8()
{
  return sub_10004E408();
}

uint64_t sub_10005FAD4()
{
  return sub_10004DF48();
}

unint64_t sub_10005FAF0()
{
  unint64_t result = qword_100141F38;
  if (!qword_100141F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141F38);
  }
  return result;
}

unint64_t sub_10005FB44()
{
  unint64_t result = qword_100141F40;
  if (!qword_100141F40)
  {
    sub_10000B448(&qword_100141F30);
    sub_10005F928(&qword_100141F48, &qword_100141F50, (void (*)(void))sub_10005FC10);
    sub_10001758C(&qword_100141F60, &qword_100141F68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141F40);
  }
  return result;
}

unint64_t sub_10005FC10()
{
  unint64_t result = qword_100141F58;
  if (!qword_100141F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100141F58);
  }
  return result;
}

uint64_t sub_10005FC68()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100056DE4);
}

uint64_t sub_10005FC94(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005FCF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005FD44()
{
  return sub_100057248(*(void *)(v0 + 16), (uint64_t)&unk_10010EF58, &OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__showDashboard);
}

uint64_t sub_10005FD74()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_1000573A8);
}

uint64_t sub_10005FDA0()
{
  return sub_100057614(*(void *)(v0 + 16));
}

uint64_t sub_10005FDC0()
{
  return sub_10005D328(type metadata accessor for AccessPointAnimationView, sub_100057D1C);
}

uint64_t sub_10005FDF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessPointAnimationView(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  double v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *double v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_100057FB4(a1, v5, v6, v7);
}

uint64_t sub_10005FEEC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_10005FF04()
{
  sub_1000D8A90(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10005FF28()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10005FF38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005FFA8()
{
  return sub_10005FFC0();
}

uint64_t sub_10005FFC0()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__tracker) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_100060004()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)(v0[2] + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__gameBundleID);
  *uint64_t v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100060050(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (uint64_t *)((char *)v4 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    v11[2] = v12[2];
    uint64_t v14 = (char *)v4 + v10;
    uint64_t v15 = (char *)a2 + v10;
    *uint64_t v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    *uint64_t v17 = *v18;
    *((void *)v17 + 1) = *((void *)v18 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000601D8(uint64_t a1)
{
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_1000602B4(void *a1, void *a2, int *a3)
{
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  v9[2] = v10[2];
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a2 + v8;
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *uint64_t v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000603F0(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_100017388((uint64_t)a1, &qword_100140FF0);
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_retain();
  swift_release();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_retain();
  swift_release();
  *((void *)v8 + 2) = *((void *)v9 + 2);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *v12;
  *((void *)v11 + 1) = *((void *)v12 + 1);
  swift_retain();
  swift_release();
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *uint64_t v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_10006057C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((void *)v10 + 2) = *((void *)v11 + 2);
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100060674(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_100017388((uint64_t)a1, &qword_100140FF0);
    uint64_t v6 = sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  swift_release();
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_release();
  *((void *)v9 + 2) = *((void *)v10 + 2);
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_release();
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  *uint64_t v15 = *v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_release();
  return a1;
}

uint64_t sub_1000607E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000607F4);
}

uint64_t sub_1000607F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100141BE0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000608BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000608D0);
}

uint64_t sub_1000608D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100005B18(&qword_100141BE0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

void sub_100060994()
{
  sub_10004A30C(319, (unint64_t *)&unk_100141C50, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for AccessPointComponentView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AccessPointComponentView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessPointComponentView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AccessPointComponentView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessPointComponentView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessPointComponentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointComponentView()
{
  return &type metadata for AccessPointComponentView;
}

unint64_t sub_100060DE8()
{
  unint64_t result = qword_100142028;
  if (!qword_100142028)
  {
    sub_10000B448(&qword_100141CE0);
    sub_10000B448(&qword_100141CD0);
    sub_10000B448(&qword_100141CC8);
    type metadata accessor for AccessPointAnchoring();
    sub_10000B448(&qword_100141CC0);
    sub_10000B448(&qword_100141CB8);
    sub_10005D208();
    sub_1000341D0();
    swift_getOpaqueTypeConformance2();
    sub_10004A374();
    swift_getOpaqueTypeConformance2();
    sub_10005D2B0(&qword_100140DC0, (void (*)(uint64_t))&type metadata accessor for AccessPointAnchoring);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_10005D2B0(&qword_100141190, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142028);
  }
  return result;
}

uint64_t sub_100060FE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100061000()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10006101C()
{
  unint64_t result = qword_100142078;
  if (!qword_100142078)
  {
    sub_10000B448(&qword_100142038);
    sub_10001758C(&qword_100142080, &qword_100142030);
    sub_10001758C(&qword_1001411C8, &qword_1001411D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142078);
  }
  return result;
}

uint64_t sub_1000610E4()
{
  return sub_100059688(v0 + 16);
}

uint64_t sub_1000610EC(uint64_t a1)
{
  return a1;
}

unint64_t sub_10006117C()
{
  unint64_t result = qword_100142090;
  if (!qword_100142090)
  {
    sub_10000B448(&qword_100142058);
    sub_10006121C();
    sub_10001758C(&qword_1001420B0, &qword_100141EA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142090);
  }
  return result;
}

unint64_t sub_10006121C()
{
  unint64_t result = qword_100142098;
  if (!qword_100142098)
  {
    sub_10000B448(&qword_100142050);
    sub_1000612BC();
    sub_10001758C(&qword_1001420A8, &qword_100142088);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142098);
  }
  return result;
}

unint64_t sub_1000612BC()
{
  unint64_t result = qword_1001420A0;
  if (!qword_1001420A0)
  {
    sub_10000B448(&qword_100142048);
    sub_10000B448(&qword_100142038);
    type metadata accessor for AccessPointModel(255);
    sub_10006101C();
    sub_10005D2B0(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001420A0);
  }
  return result;
}

uint64_t sub_1000613C8()
{
  return sub_100059B28(v0 + 16);
}

uint64_t sub_1000613D0()
{
  return sub_100059DA8();
}

uint64_t sub_1000613F0()
{
  return sub_100059EB4(v0 + 16);
}

uint64_t sub_1000613F8()
{
  return sub_10005AA74();
}

uint64_t sub_100061414()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t sub_100061494(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v8 = v1[15];
  uint64_t v7 = v1[16];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003E30C;
  return sub_10005A7AC(a1, v4, v5, v6, v8, v7);
}

uint64_t sub_10006155C()
{
  return sub_10009CEEC(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10006157C()
{
  return sub_100059A14();
}

uint64_t sub_100061598()
{
  return sub_1000598B0(*(void *)(v0 + 16));
}

uint64_t sub_1000615B8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100061628()
{
  return sub_100059960();
}

uint64_t sub_100061634()
{
  return sub_10005D328(type metadata accessor for CollapsibleContentFrame, (uint64_t (*)(uint64_t))sub_10005B644);
}

unint64_t sub_100061660()
{
  unint64_t result = qword_100142130;
  if (!qword_100142130)
  {
    sub_10000B448(&qword_100142108);
    sub_100061700();
    sub_10001758C(&qword_100142148, &qword_100142150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142130);
  }
  return result;
}

unint64_t sub_100061700()
{
  unint64_t result = qword_100142138;
  if (!qword_100142138)
  {
    sub_10000B448(&qword_100142100);
    sub_10001758C(&qword_100142140, &qword_100142120);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142138);
  }
  return result;
}

uint64_t sub_1000617A4()
{
  uint64_t v1 = *(void *)(type metadata accessor for CollapsibleContentFrame(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000618F8()
{
  return sub_10005B780();
}

uint64_t sub_100061958()
{
  return sub_10005D328(type metadata accessor for CollapsibleContentFrame, sub_10005BCF8);
}

uint64_t sub_100061984()
{
  return sub_10005BF64();
}

uint64_t sub_1000619A4()
{
  return sub_10005D328(type metadata accessor for CollapsibleContentFrame, sub_10005C018);
}

uint64_t sub_1000619D0()
{
  return sub_10005C850();
}

uint64_t sub_1000619F0()
{
  return sub_10005D328(type metadata accessor for CollapsibleContentFrame, sub_10005C96C);
}

uint64_t sub_100061A1C()
{
  return sub_10005CC40();
}

uint64_t sub_100061A38()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100061AE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100061B98()
{
  return sub_10006157C();
}

uint64_t sub_100061BB4()
{
  return sub_10005E1F0();
}

uint64_t sub_100061BCC()
{
  return sub_10005E214();
}

void sub_100061BE4()
{
}

uint64_t sub_100061BFC()
{
  return sub_100039438();
}

void sub_100061C14()
{
}

void sub_100061C2C()
{
}

void sub_100061C44()
{
}

void sub_100061C5C()
{
}

void sub_100061C74()
{
}

uint64_t sub_100061DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 32) = a7;
  *(void *)(v7 + 16) = a4;
  return _swift_task_switch(sub_100061DF8, 0, 0);
}

uint64_t sub_100061DF8()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, char))((char *)&dword_1001425D8 + dword_1001425D8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  void *v1 = v0;
  v1[1] = sub_100061EDC;
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 32);
  return v5(v2, v3);
}

uint64_t sub_100061EDC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100061FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[27] = a4;
  v5[28] = a5;
  sub_100005B18(&qword_100142A60);
  v5[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for RemoteAlertRequest();
  v5[30] = v6;
  v5[31] = *(void *)(v6 - 8);
  v5[32] = swift_task_alloc();
  return _swift_task_switch(sub_1000620C0, 0, 0);
}

uint64_t sub_1000620C0()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156D18;
  *(void *)(v0 + 264) = qword_100156D18;
  return _swift_task_switch(sub_100062158, v1, 0);
}

uint64_t sub_100062158()
{
  uint64_t v1 = v0[33];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_13;
  }
  uint64_t v4 = v0[27];
  uint64_t v3 = v0[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1000DC324(v4, v3);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v9 = (uint64_t)(v0 + 2);
  unint64_t v10 = v0 + 25;
  uint64_t v22 = v0 + 26;
  uint64_t v12 = v0[30];
  uint64_t v11 = v0[31];
  uint64_t v13 = v7 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v14 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  uint64_t v20 = v14;
  uint64_t v23 = v0 + 25;
  uint64_t v21 = v0;
  do
  {
    uint64_t v15 = v0[32];
    sub_1000693D4(v13, v15);
    uint64_t v16 = *(void *)(v15 + *(int *)(v12 + 24)) + 64;
    swift_beginAccess();
    sub_1000170C8(v16, v9, &qword_1001444D0);
    if (v0[5])
    {
      sub_100005B18((uint64_t *)&unk_1001454D0);
      type metadata accessor for RemoteAlertAccessPointContext(0);
      if (swift_dynamicCast())
      {
        uint64_t v17 = *v10;
        swift_getKeyPath();
        uint64_t v18 = swift_task_alloc();
        *(void *)(v18 + 16) = v17;
        *(unsigned char *)(v18 + 24) = 0;
        *uint64_t v22 = v17;
        sub_1000699D8();
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        uint64_t v0 = v21;
        unint64_t v10 = v23;
        swift_release();
        swift_release();
        uint64_t v14 = v20;
        swift_task_dealloc();
      }
    }
    else
    {
      sub_100017388(v9, &qword_1001444D0);
    }
    sub_1000696AC(v0[32]);
    v13 += v14;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease_n();
LABEL_13:
  return _swift_task_switch(sub_100062418, 0, 0);
}

uint64_t sub_100062418()
{
  uint64_t v1 = qword_100156D18;
  *(void *)(v0 + 272) = qword_100156D18;
  return _swift_task_switch(sub_10006243C, v1, 0);
}

uint64_t sub_10006243C()
{
  sub_10006A164(*(void *)(v0 + 216), *(void *)(v0 + 224));
  return _swift_task_switch(sub_1000624A8, 0, 0);
}

uint64_t sub_1000624A8()
{
  if (qword_10013FCE8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156E08;
  *(void *)(v0 + 280) = qword_100156E08;
  return _swift_task_switch(sub_100062540, v1, 0);
}

uint64_t sub_100062540()
{
  uint64_t v1 = *(void *)(v0 + 280);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v3 = *(void *)(v0 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_1000DC324(v4, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1000170C8(v7 + 32, v0 + 56, &qword_1001444D0);
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
LABEL_6:
  return _swift_task_switch(sub_100062678, 0, 0);
}

uint64_t sub_100062678()
{
  if (v0[10])
  {
    sub_100005B18((uint64_t *)&unk_1001454D0);
    type metadata accessor for RemoteAlertAccessPointContext(0);
    if (swift_dynamicCast())
    {
      uint64_t v1 = v0[29];
      uint64_t v2 = v0[24];
      uint64_t v3 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v4 = static MainActor.shared.getter();
      unint64_t v5 = (void *)swift_allocObject();
      v5[2] = v4;
      v5[3] = &protocol witness table for MainActor;
      v5[4] = v2;
      sub_10002C340(v1, (uint64_t)&unk_100142338, (uint64_t)v5);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    sub_100017388((uint64_t)(v0 + 7), &qword_1001444D0);
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007D4C(v6, (uint64_t)qword_100156CF8);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not find access point context for the client request", v9, 2u);
    swift_slowDealloc();
  }

LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000628B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 32) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006294C, v6, v5);
}

uint64_t sub_10006294C()
{
  uint64_t v1 = v0[3];
  swift_release();
  swift_getKeyPath();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 0;
  v0[2] = v1;
  uint64_t v3 = v0 + 2;
  sub_1000699D8();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007D4C(v4, (uint64_t)qword_100156CF8);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[3];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    swift_getKeyPath();
    *uint64_t v3 = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
    swift_release();
    *uint64_t v3 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting access point with current hide count: %ld to inactive", v9, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100062E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 152) = a6;
  *(void *)(v6 + 112) = a4;
  *(void *)(v6 + 120) = a5;
  sub_100005B18(&qword_100142A60);
  *(void *)(v6 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_100062F08, 0, 0);
}

uint64_t sub_100062F08()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156D18;
  *(void *)(v0 + 136) = qword_100156D18;
  return _swift_task_switch(sub_100062FA0, v1, 0);
}

uint64_t sub_100062FA0()
{
  sub_10006A164(*(void *)(v0 + 112), *(void *)(v0 + 120));
  return _swift_task_switch(sub_10006300C, 0, 0);
}

uint64_t sub_10006300C()
{
  if (qword_10013FCE8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156E08;
  *(void *)(v0 + 144) = qword_100156E08;
  return _swift_task_switch(sub_1000630A4, v1, 0);
}

uint64_t sub_1000630A4()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_1000DC324(v4, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1000170C8(v7 + 32, v0 + 16, &qword_1001444D0);
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
LABEL_6:
  return _swift_task_switch(sub_1000631DC, 0, 0);
}

uint64_t sub_1000631DC()
{
  if (*(void *)(v0 + 40))
  {
    sub_100005B18((uint64_t *)&unk_1001454D0);
    type metadata accessor for RemoteAlertAccessPointContext(0);
    if (swift_dynamicCast())
    {
      uint64_t v1 = *(void *)(v0 + 128);
      char v2 = *(unsigned char *)(v0 + 152);
      uint64_t v3 = *(void *)(v0 + 104);
      uint64_t v4 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v5 = static MainActor.shared.getter();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v5;
      *(void *)(v6 + 24) = &protocol witness table for MainActor;
      *(void *)(v6 + 32) = v3;
      *(unsigned char *)(v6 + 40) = v2;
      sub_10002C340(v1, (uint64_t)&unk_1001422D8, v6);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    sub_100017388(v0 + 16, &qword_1001444D0);
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007D4C(v7, (uint64_t)qword_100156CF8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Could not find access point context for the client request", v10, 2u);
    swift_slowDealloc();
  }

LABEL_10:
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100063414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 40) = a5;
  *(void *)(v5 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 32) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000634B0, v7, v6);
}

uint64_t sub_1000634B0()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  uint64_t v3 = (uint64_t *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_release();
  swift_getKeyPath();
  *(void *)(v0 + 16) = v2;
  uint64_t v4 = (void *)(v0 + 16);
  if (v1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = -1;
  }
  sub_1000699D8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v4 = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount;
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  BOOL v8 = __OFADD__(v7, v5);
  uint64_t v9 = v7 + v5;
  if (v8)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v10 = *v3;
  *(void *)(v2 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = v9;
  *uint64_t v4 = v10;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  *uint64_t v4 = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v22 = v6;
  if ((*(void *)(v2 + v6) & 0x8000000000000000) != 0)
  {
    uint64_t v11 = *v3;
    swift_getKeyPath();
    uint64_t v12 = swift_task_alloc();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = 0;
    *uint64_t v4 = v11;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
  }
  if (qword_10013FBB0 != -1) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007D4C(v13, (uint64_t)qword_100156CF8);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *v3;
  if (v16)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134217984;
    swift_getKeyPath();
    *uint64_t v4 = v17;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v19 = *(void *)(v2 + v22);
    swift_release();
    *uint64_t v4 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Setting access point hide count: %ld", v18, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_10006380C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v13 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v13 - 8);
  os_log_type_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10008EA3C(0);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v34 = result;
    uint64_t v19 = sub_10008E8D4(0, a5, a6);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v33 = v19;
      id v22 = [self currentContext];
      uint64_t v31 = a1;
      unint64_t v32 = a4;
      uint64_t v23 = v6;
      id v24 = v22;
      type metadata accessor for AccessPointConnectionContext();
      *(void *)(swift_allocObject() + 120) = 0;
      uint64_t v25 = sub_1000E67FC(v24);
      uint64_t v26 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v15, 1, 1, v26);
      uint64_t v27 = a2;
      char v28 = (void *)swift_allocObject();
      v28[2] = 0;
      v28[3] = 0;
      v28[4] = v33;
      v28[5] = v21;
      v28[6] = v34;
      v28[7] = v18;
      v28[8] = v23;
      v28[9] = v25;
      unint64_t v29 = v32;
      v28[10] = v31;
      v28[11] = v27;
      v28[12] = a3;
      v28[13] = v29;
      v28[14] = a5;
      v28[15] = a6;
      id v30 = v23;
      swift_bridgeObjectRetain();
      sub_1000244CC(a3, v29);
      swift_bridgeObjectRetain();
      sub_10002C340((uint64_t)v15, (uint64_t)&unk_1001422E8, (uint64_t)v28);
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100063A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 400) = v13;
  *(_OWORD *)(v7 + 368) = v11;
  *(_OWORD *)(v7 + 384) = v12;
  *(_OWORD *)(v7 + 352) = v10;
  *(void *)(v7 + 336) = a6;
  *(void *)(v7 + 344) = a7;
  *(void *)(v7 + 320) = a4;
  *(void *)(v7 + 328) = a5;
  sub_100005B18(&qword_100142A60);
  *(void *)(v7 + 408) = swift_task_alloc();
  return _swift_task_switch(sub_100063AE8, 0, 0);
}

uint64_t sub_100063AE8()
{
  if (qword_10013FCE8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156E08;
  *(void *)(v0 + 416) = qword_100156E08;
  return _swift_task_switch(sub_100063B80, v1, 0);
}

uint64_t sub_100063B80()
{
  uint64_t v1 = *(void *)(v0 + 416);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 320);
    uint64_t v3 = *(void *)(v0 + 328);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_1000DC324(v4, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1000170C8(v7 + 32, v0 + 224, &qword_1001444D0);
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 256) = 0;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
LABEL_6:
  return _swift_task_switch(sub_100063CB8, 0, 0);
}

uint64_t sub_100063CB8()
{
  if (v0[31])
  {
    sub_100005B18((uint64_t *)&unk_1001454D0);
    type metadata accessor for RemoteAlertAccessPointContext(0);
    if (swift_dynamicCast())
    {
      uint64_t v1 = v0[51];
      uint64_t v3 = v0[45];
      uint64_t v2 = v0[46];
      uint64_t v4 = v0[39];
      uint64_t v5 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
      type metadata accessor for MainActor();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v6 = static MainActor.shared.getter();
      uint64_t v7 = (void *)swift_allocObject();
      v7[2] = v6;
      v7[3] = &protocol witness table for MainActor;
      v7[4] = v3;
      v7[5] = v2;
      v7[6] = v4;
      sub_10002C340(v1, (uint64_t)&unk_100142308, (uint64_t)v7);
      swift_release();
      swift_release();
      swift_task_dealloc();
      BOOL v8 = (uint64_t (*)(void))v0[1];
      return v8();
    }
  }
  else
  {
    sub_100017388((uint64_t)(v0 + 28), &qword_1001444D0);
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007D4C(v10, (uint64_t)qword_100156CF8);
  long long v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Could not find access point context for the client request", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = qword_100156E08;
  v0[53] = qword_100156E08;
  return _swift_task_switch(sub_100063F44, v14, 0);
}

uint64_t sub_100063F44()
{
  sub_1000E1020(*(void *)(v0 + 336), *(void **)(v0 + 344), v0 + 72);
  return _swift_task_switch(sub_100063FB4, 0, 0);
}

uint64_t sub_100063FB4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 72);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v1;
    sub_10006919C(v0 + 88, v0 + 144);
    *(void *)(v0 + 16) = v2;
    *(void *)(v0 + 24) = v1;
    sub_1000170C8(v0 + 144, v0 + 32, &qword_1001444D0);
    if (*(void *)(v0 + 56))
    {
      sub_100069BBC((long long *)(v0 + 32), v0 + 184);
      if (qword_10013FC00 != -1) {
        swift_once();
      }
      uint64_t v3 = qword_100156D18;
      *(void *)(v0 + 432) = qword_100156D18;
      return _swift_task_switch(sub_100064110, v3, 0);
    }
    sub_100017388(v0 + 128, &qword_1001422F8);
    uint64_t v5 = &qword_1001444D0;
    uint64_t v4 = v0 + 32;
  }
  else
  {
    uint64_t v4 = v0 + 72;
    uint64_t v5 = (uint64_t *)&unk_1001422F0;
  }
  sub_100017388(v4, v5);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100064110()
{
  uint64_t v1 = v0[54];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[27];
  uint64_t v4 = sub_100006650(v0 + 23, v2);
  sub_10007158C((uint64_t)v4, 0, v1, v2, v3);
  return _swift_task_switch(sub_1000641A0, 0, 0);
}

uint64_t sub_1000641A0()
{
  sub_1000674EC(*(void *)(v0 + 320), *(void *)(v0 + 328), *(void **)(v0 + 352), *(void *)(v0 + 360), *(void *)(v0 + 368), 1, *(void *)(v0 + 376), *(void *)(v0 + 384), 0, 0, *(void *)(v0 + 392), *(void *)(v0 + 400));
  sub_100007188(v0 + 184);
  sub_100017388(v0 + 128, &qword_1001422F8);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006424C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  sub_100005B18(&qword_100145510);
  v6[6] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AccessPointAnchoring();
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[11] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100064384, v9, v8);
}

uint64_t sub_100064384()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  swift_release();
  swift_bridgeObjectRetain();
  AccessPointAnchoring.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100017388(v0[6], &qword_100145510);
  }
  else
  {
    uint64_t v5 = v0[9];
    uint64_t v4 = v0[10];
    uint64_t v6 = v0[7];
    uint64_t v7 = v0[8];
    uint64_t v8 = v0[5];
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 32))(v4, v0[6], v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v4, v6);
    swift_getKeyPath();
    uint64_t v9 = swift_task_alloc();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v5;
    v0[2] = v8;
    sub_1000699D8();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v5, v6);
    v10(v4, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100064658(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, void *a15)
{
  unint64_t v83 = a8;
  uint64_t v82 = a5;
  uint64_t v88 = a2;
  uint64_t v87 = a1;
  uint64_t v20 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v20 - 8);
  id v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  uint64_t v91 = *(void *)(v23 - 8);
  uint64_t v92 = v23;
  __chkstk_darwin(v23);
  uint64_t v89 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for RemoteAlertRequest();
  uint64_t v93 = *(void *)(v90 - 8);
  uint64_t v25 = __chkstk_darwin(v90);
  uint64_t v27 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = v26;
  __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v74 - v28;
  uint64_t v85 = type metadata accessor for AccessPointAnchoring();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v86 = (char *)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10008E8D4(1, a14, a15);
  if (v32)
  {
    uint64_t v74 = v32;
    uint64_t v75 = result;
    uint64_t v76 = v27;
    long long v77 = v22;
    long long v78 = v15;
    unint64_t v79 = a13;
    uint64_t v81 = a14;
    unsigned int v80 = v29;
    id v33 = [self currentContext];
    type metadata accessor for InGameBannerConnectionContext();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 136) = 0;
    *(void *)(v34 + 144) = 0;
    *(void *)(v34 + 152) = 0;
    *(void *)(v34 + 160) = 0xF000000000000000;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(void *)(v34 + 120) = a3;
    *(void *)(v34 + 128) = a4;
    swift_bridgeObjectRetain();
    uint64_t v35 = (void *)sub_1000E67FC(v33);
    v35[17] = v82;
    v35[18] = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35[21] = a9;
    v35[22] = a10;
    uint64_t v36 = (uint64_t)v80;
    uint64_t v37 = v81;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v38 = v35[19];
    unint64_t v39 = v35[20];
    unint64_t v40 = v83;
    v35[19] = a7;
    v35[20] = v40;
    sub_1000244B8(a7, v40);
    sub_1000247B8(v38, v39);
    v35[13] = v37;
    _OWORD v35[14] = a15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35[24] = a11;
    unint64_t v41 = v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v41 >> 60 != 15)
    {
      sub_100069708(0, &qword_1001422B0);
      sub_100069708(0, &qword_1001422B8);
      sub_1000244CC(a12, v41);
      uint64_t v42 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      if (v42)
      {
        id v43 = [objc_allocWithZone((Class)GKGame) initWithInternalRepresentation:v42];

        sub_1000247B8(a12, v41);
        uint64_t v44 = (void *)v35[23];
        v35[23] = v43;
      }
      else
      {
        if (qword_10013FBB0 != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        sub_100007D4C(v45, (uint64_t)qword_100156CF8);
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Game could not be deserialized", v48, 2u);
          swift_slowDealloc();
        }
        sub_1000247B8(a12, v41);
      }
    }
    uint64_t v49 = (uint64_t)v86;
    (*(void (**)(char *, void, uint64_t))(v84 + 104))(v86, enum case for AccessPointAnchoring.topCentered(_:), v85);
    swift_retain();
    uint64_t v50 = v88;
    swift_bridgeObjectRetain();
    v97._countAndFlagsBits = v87;
    v97._object = v50;
    char v51 = _s13GameOverlayUI18AccessPointUseCaseO8rawValueACSgSS_tcfC_0(v97);
    if (v51 == 7) {
      char v52 = 6;
    }
    else {
      char v52 = v51;
    }
    uint64_t v53 = type metadata accessor for RemoteAlertAccessPointContext(0);
    swift_allocObject();
    uint64_t v54 = sub_1000D9194(v75, v74, v49, v52, 0, 0, 0);
    v96[3] = v53;
    v96[4] = &off_100134CA8;
    v96[0] = v54;
    sub_10006919C((uint64_t)v96, (uint64_t)v95);
    swift_beginAccess();
    sub_100069204((uint64_t)v95, (uint64_t)(v35 + 8));
    swift_endAccess();
    swift_release();
    uint64_t v55 = sub_10008E8D4(0, v37, a15);
    uint64_t v88 = (void *)v55;
    uint64_t v57 = v56;
    uint64_t v59 = v91;
    uint64_t v58 = v92;
    uint64_t v60 = v36;
    uint64_t v61 = v89;
    (*(void (**)(char *, void, uint64_t))(v91 + 104))(v89, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v92);
    long long v62 = (uint64_t (*)())swift_allocObject();
    *((void *)v62 + 2) = v55;
    *((void *)v62 + 3) = v57;
    uint64_t v63 = v37;
    uint64_t v64 = v78;
    *((void *)v62 + 4) = v78;
    *((void *)v62 + 5) = v63;
    *((void *)v62 + 6) = a15;
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v60, v61, v58);
    uint64_t v65 = v90;
    *(unsigned char *)(v60 + *(int *)(v90 + 20)) = 1;
    *(void *)(v60 + *(int *)(v65 + 24)) = v35;
    uint64_t v66 = (uint64_t (**)())(v60 + *(int *)(v65 + 28));
    char *v66 = sub_1000693BC;
    v66[1] = v62;
    uint64_t v67 = type metadata accessor for TaskPriority();
    uint64_t v68 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v77, 1, 1, v67);
    uint64_t v69 = (uint64_t)v76;
    sub_1000693D4(v60, (uint64_t)v76);
    unint64_t v70 = (*(unsigned __int8 *)(v93 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
    uint64_t v71 = (void *)swift_allocObject();
    v71[2] = 0;
    v71[3] = 0;
    v71[4] = v88;
    v71[5] = v57;
    v71[6] = v64;
    v71[7] = v63;
    v71[8] = a15;
    sub_100069558(v69, (uint64_t)v71 + v70);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    id v72 = v64;
    swift_retain();
    id v73 = v72;
    sub_10002C340(v68, (uint64_t)&unk_1001422A8, (uint64_t)v71);
    swift_release();
    swift_release();
    return sub_1000696AC(v60);
  }
  return result;
}

uint64_t sub_10006502C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a5;
  v5[4] = v7;
  v5[2] = a4;
  return _swift_task_switch(sub_100065058, 0, 0);
}

uint64_t sub_100065058()
{
  uint64_t v1 = v0[3];
  if (v1) {
    sub_100067E34(v0[2], v1, 1);
  }
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100065138;
  uint64_t v3 = v0[4];
  return sub_10006A598(v3);
}

uint64_t sub_100065138()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10006522C(uint64_t a1, uint64_t a2, uint8_t *a3, unint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v82 = a3;
  unint64_t v79 = a6;
  unsigned int v80 = (uint8_t *)a5;
  unint64_t v81 = a4;
  uint64_t v6 = type metadata accessor for InGameBannerData.BannerType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v78 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v76 - v10);
  uint64_t v12 = sub_100005B18(&qword_100142298);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InGameBannerData();
  unint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v76 - v20;
  static InGameBannerData.decode(data:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100017388((uint64_t)v14, &qword_100142298);
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007D4C(v22, (uint64_t)qword_100156CF8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "showInGameBanner: Failed to decode InGameBannerData.", v25, 2u);
      swift_slowDealloc();
    }

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
  InGameBannerData.type.getter();
  int v26 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 88))(v11, v6);
  long long v77 = v21;
  if (v26 == enum case for InGameBannerData.BannerType.youBeatFriendScore(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v11, v6);
    uint64_t v27 = v11[1];
    uint64_t v76 = *v11;
    uint64_t v28 = v11[2];
    uint64_t v29 = InGameBannerData.title.getter();
    uint64_t v31 = v30;
    uint64_t v32 = InGameBannerData.body.getter();
    uint64_t v34 = v33;
    uint64_t v35 = InGameBannerData.image.getter();
    long long v78 = (char *)v15;
    unint64_t v37 = v36;
    sub_100064658(0xD000000000000020, (void *)0x80000001000FC120, v29, v31, v32, v34, v35, v36, v76, v27, v28, (uint64_t)v82, v81, (uint64_t)v80, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000247B8(v35, v37);
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *))(v16 + 8))(v77, v78);
    return;
  }
  if (v26 == enum case for InGameBannerData.BannerType.topPercentageOnLeaderboard(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v11, v6);
    long long v78 = (char *)v15;
    uint64_t v38 = *v11;
    uint64_t v39 = v11[1];
    uint64_t v40 = InGameBannerData.title.getter();
    uint64_t v42 = v41;
    uint64_t v43 = InGameBannerData.body.getter();
    uint64_t v45 = v44;
    uint64_t v46 = InGameBannerData.image.getter();
    unint64_t v48 = v47;
    sub_100064658(0xD00000000000001ELL, (void *)0x80000001000FC150, v40, v42, v43, v45, v46, v47, v38, v39, 0, (uint64_t)v82, v81, (uint64_t)v80, v79);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_1000247B8(v46, v48);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v26 == enum case for InGameBannerData.BannerType.youEarnedAchievement(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v11, v6);
    long long v78 = (char *)v15;
    uint64_t v49 = *v11;
    uint64_t v50 = v11[1];
    uint64_t v51 = InGameBannerData.title.getter();
    uint64_t v53 = v52;
    uint64_t v54 = InGameBannerData.body.getter();
    uint64_t v56 = v55;
    uint64_t v46 = InGameBannerData.image.getter();
    unint64_t v48 = v57;
    sub_100064658(0xD000000000000011, (void *)0x80000001000FC100, v51, v53, v54, v56, v46, v57, v49, v50, 0, (uint64_t)v82, v81, (uint64_t)v80, v79);
    goto LABEL_13;
  }
  if (v26 == enum case for InGameBannerData.BannerType.general(_:))
  {
    unint64_t v58 = v16;
    uint64_t v59 = InGameBannerData.title.getter();
    uint64_t v61 = v60;
    uint64_t v62 = InGameBannerData.body.getter();
    uint64_t v64 = v63;
    uint64_t v65 = InGameBannerData.image.getter();
    unint64_t v67 = v66;
    sub_100064658(0x6142656D61476E69, (void *)0xEC00000072656E6ELL, v59, v61, v62, v64, v65, v66, 0, 0, 0, (uint64_t)v82, v81, (uint64_t)v80, v79);
    sub_1000247B8(v65, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v15);
  }
  else
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    sub_100007D4C(v68, (uint64_t)qword_100156CF8);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      uint64_t v85 = v83;
      unint64_t v81 = v16;
      uint64_t v82 = v71;
      *(_DWORD *)uint64_t v71 = 136315138;
      unsigned int v80 = v71 + 4;
      InGameBannerData.type.getter();
      uint64_t v72 = String.init<A>(describing:)();
      uint64_t v84 = sub_100036BF8(v72, v73, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v74 = *(void (**)(char *, uint64_t))(v81 + 8);
      v74(v19, v15);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "showInGameBanner: Unknown banner type: %s", v82, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v75 = v77;
    }
    else
    {

      uint64_t v74 = *(void (**)(char *, uint64_t))(v16 + 8);
      v74(v19, v15);
      uint64_t v75 = v21;
    }
    v74(v75, v15);
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v11, v6);
  }
}

uint64_t sub_100065BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_100065C9C, 0, 0);
}

uint64_t sub_100065C9C()
{
  uint64_t v29 = v0;
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void **)(v0 + 3);
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007D4C(v3, (uint64_t)qword_100156CF8);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (char *)v0[3];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = (uint64_t *)&v8[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext];
    if (*(void *)&v8[OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext + 8])
    {
      uint64_t v11 = *v10;
      unint64_t v12 = v10[1];
    }
    else
    {
      unint64_t v12 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    uint64_t v13 = *v1;
    swift_bridgeObjectRetain();
    v0[2] = sub_100036BF8(v11, v12, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "showDashboard called with launchContext: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v14 = (uint64_t *)((char *)*v1 + OBJC_IVAR____TtC13GameOverlayUI16DashboardRequest_launchContext);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (v16)
  {
    if (v15 == v17 && v16 == v18)
    {
      swift_bridgeObjectRelease();
LABEL_21:
      if (qword_10013FCE8 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_100156E08;
      v0[8] = qword_100156E08;
      return _swift_task_switch(sub_100066008, v27, 0);
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_21;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = v0[6];
  uint64_t v21 = v0[7];
  uint64_t v24 = v0[4];
  uint64_t v23 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v23);
  sub_100072354(v21, (void *)2, v24);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_100066008()
{
  *(unsigned char *)(v0 + 72) = sub_1000DFD84() & 1;
  return _swift_task_switch(sub_100066078, 0, 0);
}

uint64_t sub_100066078()
{
  if ((*(unsigned char *)(v0 + 72) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:), v3);
    sub_100072354(v1, (void *)2, v4);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  }
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100066220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = v11;
  *(unsigned char *)(v8 + 114) = a8;
  *(unsigned char *)(v8 + 113) = a7;
  *(unsigned char *)(v8 + 112) = a6;
  *(void *)(v8 + 32) = a4;
  sub_100005B18(&qword_100142A60);
  *(void *)(v8 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1000662CC, 0, 0);
}

uint64_t sub_1000662CC()
{
  uint64_t v13 = v0;
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 64) = sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 32);
    int v11 = *(unsigned __int8 *)(v0 + 114);
    int v9 = *(unsigned __int8 *)(v0 + 112);
    int v10 = *(unsigned __int8 *)(v0 + 113);
    unint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315906;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_100036BF8(v4, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 1024;
    *(_DWORD *)(v0 + 100) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 18) = 1024;
    *(_DWORD *)(v0 + 104) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 24) = 1024;
    *(_DWORD *)(v0 + 108) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Enqueuing Game Mode banner: %s available:%{BOOL}d required:%{BOOL}d enabled:%{BOOL}d", (uint8_t *)v6, 0x1Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (qword_10013FC00 != -1) {
    swift_once();
  }
  *(void *)(v0 + 72) = qword_100156D18;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000665BC;
  return sub_10006D0B4();
}

uint64_t sub_1000665BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000666CC, v1, 0);
}

uint64_t sub_1000666CC()
{
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Presenting Game Mode banner", v2, 2u);
    swift_slowDealloc();
  }

  return _swift_task_switch(sub_1000667A4, 0, 0);
}

uint64_t sub_1000667A4()
{
  uint64_t v22 = v0;
  swift_bridgeObjectRetain_n();
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v19 = *(unsigned __int8 *)(v0 + 113);
    int v20 = *(unsigned __int8 *)(v0 + 114);
    int v3 = *(unsigned __int8 *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 32);
    unint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315906;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_100036BF8(v5, v4, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 1024;
    *(_DWORD *)(v0 + 96) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_DWORD *)(v0 + 88) = v19;
    *(_WORD *)(v6 + 18) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 24) = 1024;
    *(_DWORD *)(v0 + 92) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Presenting Game Mode banner: %s available:%{BOOL}d required:%{BOOL}d enabled:%{BOOL}d", (uint8_t *)v6, 0x1Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  char v9 = *(unsigned char *)(v0 + 114);
  char v10 = *(unsigned char *)(v0 + 113);
  char v11 = *(unsigned char *)(v0 + 112);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  type metadata accessor for MainActor();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = &protocol witness table for MainActor;
  *(void *)(v16 + 32) = v8;
  *(void *)(v16 + 40) = v13;
  *(void *)(v16 + 48) = v12;
  *(unsigned char *)(v16 + 56) = v11;
  *(unsigned char *)(v16 + 57) = v10;
  *(unsigned char *)(v16 + 58) = v9;
  sub_10002C340(v7, (uint64_t)&unk_100142178, v16);
  swift_release();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100066A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  *(unsigned char *)(v8 + 50) = v13;
  *(unsigned char *)(v8 + 49) = a8;
  *(unsigned char *)(v8 + 48) = a7;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v8 + 40) = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100066B38, v10, v9);
}

uint64_t sub_100066B38()
{
  char v1 = *(unsigned char *)(v0 + 50);
  char v2 = *(unsigned char *)(v0 + 49);
  char v3 = *(unsigned char *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, char))(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  swift_release();
  type metadata accessor for GamePolicyBannerViewController();
  uint64_t v7 = (char *)[objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v8 = (uint64_t (**)(uint64_t, uint64_t, char))&v7[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  *uint64_t v8 = sub_100068F8C;
  v8[1] = v6;
  swift_retain();
  sub_100039104(v9);
  uint64_t v10 = (uint64_t (**)())&v7[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  uint64_t v11 = *(void *)&v7[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  *uint64_t v10 = sub_100067050;
  v10[1] = 0;
  sub_100039104(v11);
  sub_10007DBC8(v5, v4, v3, v2, v1);

  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100066C70(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000170C8(a4 + 24, (uint64_t)v19, &qword_100142A70);
  if (!v20) {
    return sub_100017388((uint64_t)v19, &qword_100142A70);
  }
  sub_100005B18((uint64_t *)&unk_100144A90);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v12 = v18[1];
    sub_100069708(0, (unint64_t *)&qword_100142A50);
    Class isa = NSNumber.init(BOOLeanLiteral:)(a3 & 1).super.super.isa;
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 1, 1, v14);
    type metadata accessor for MainActor();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = isa;
    uint64_t v16 = static MainActor.shared.getter();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v16;
    v17[3] = &protocol witness table for MainActor;
    v17[4] = v12;
    v17[5] = a1;
    v17[6] = a2;
    v17[7] = v15;
    sub_10002C340((uint64_t)v10, (uint64_t)&unk_100142198, (uint64_t)v17);
    swift_release();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100066E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for MainActor();
  v7[6] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100066EF8, v9, v8);
}

uint64_t sub_100066EF8()
{
  swift_release();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Game Mode banner was tapped.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)v0[2];

  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setGameModeWithBundleIdentifier:v7 enabled:v5];

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100067050()
{
  uint64_t v0 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v0 - 8);
  char v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007D4C(v3, (uint64_t)qword_100156CF8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Game Mode banner was dismissed.", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  type metadata accessor for MainActor();
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = &protocol witness table for MainActor;
  sub_10002C340((uint64_t)v2, (uint64_t)&unk_100142188, v9);
  return swift_release();
}

uint64_t sub_10006720C()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(sub_1000672A0, v2, v1);
}

uint64_t sub_1000672A0()
{
  if (qword_10013FC00 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156D18;
  *(void *)(v0 + 40) = qword_100156D18;
  return _swift_task_switch(sub_100067338, v1, 0);
}

uint64_t sub_100067338()
{
  sub_10006AACC();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  return _swift_task_switch(sub_10006739C, v1, v2);
}

uint64_t sub_10006739C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000674BC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000674EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v53 = a8;
  uint64_t v52 = a7;
  int v62 = a6;
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v51 = a11;
  LODWORD(v54) = a10;
  uint64_t v13 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v13 - 8);
  uint64_t v59 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for RemoteAlertRequest();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v15 = __chkstk_darwin(v55);
  uint64_t v57 = v16;
  uint64_t v58 = (uint64_t)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = sub_100005B18(&qword_100145510);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for AccessPointAnchoring();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  AccessPointAnchoring.init(rawValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, enum case for AccessPointAnchoring.topLeading(_:), v22);
    sub_100017388((uint64_t)v21, &qword_100145510);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
  }
  uint64_t v26 = type metadata accessor for RemoteAlertAccessPointContext(0);
  swift_allocObject();
  uint64_t v27 = v61;
  swift_bridgeObjectRetain();
  uint64_t v28 = v60;
  char v29 = v62;
  uint64_t v30 = sub_1000D9194(v60, v27, (uint64_t)v25, v62, 0, a9 & 1, v54 & 1);
  v64[3] = v26;
  v64[4] = &off_100134CA8;
  v64[0] = v30;
  sub_10006919C((uint64_t)v64, (uint64_t)v63);
  swift_beginAccess();
  uint64_t v54 = v30;
  swift_retain();
  sub_100069204((uint64_t)v63, (uint64_t)(a3 + 8));
  swift_endAccess();
  a3[13] = v51;
  a3[14] = a12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100069708(0, &qword_1001422B0);
  sub_100069708(0, &qword_1001422B8);
  uint64_t v31 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v31)
  {
    id v32 = [objc_allocWithZone((Class)GKGame) initWithInternalRepresentation:v31];

    uint64_t v33 = (void *)a3[15];
    a3[15] = v32;
  }
  else
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007D4C(v46, (uint64_t)qword_100156CF8);
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Game could not be deserialized", v49, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v34 = enum case for GameOverlayUIConfig.ServiceKind.dashboard(_:);
  uint64_t v35 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104))(v18, v34, v35);
  uint64_t v36 = v55;
  v18[*(int *)(v55 + 20)] = 0;
  *(void *)&v18[*(int *)(v36 + 24)] = a3;
  unint64_t v37 = &v18[*(int *)(v36 + 28)];
  uint64_t v38 = type metadata accessor for TaskPriority();
  *(void *)unint64_t v37 = 0;
  *((void *)v37 + 1) = 0;
  uint64_t v39 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v59, 1, 1, v38);
  uint64_t v40 = v58;
  sub_1000693D4((uint64_t)v18, v58);
  unint64_t v41 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  unint64_t v42 = (v57 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 0;
  *(void *)(v43 + 24) = 0;
  sub_100069558(v40, v43 + v41);
  unint64_t v44 = v43 + v42;
  *(void *)unint64_t v44 = v28;
  *(void *)(v44 + 8) = v27;
  *(unsigned char *)(v44 + 16) = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10002C340(v39, (uint64_t)&unk_100142318, v43);
  swift_release();
  swift_release();
  return sub_1000696AC((uint64_t)v18);
}

uint64_t sub_100067CB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t result = sub_10008E8D4(0, a9, a10);
  if (v17)
  {
    uint64_t v18 = result;
    uint64_t v19 = v17;
    uint64_t v25 = a6;
    uint64_t v20 = a5;
    id v21 = [self currentContext];
    type metadata accessor for AccessPointConnectionContext();
    *(void *)(swift_allocObject() + 120) = 0;
    uint64_t v22 = (void *)sub_1000E67FC(v21);
    swift_bridgeObjectRetain();
    v29._countAndFlagsBits = a3;
    v29._object = a4;
    int v23 = _s13GameOverlayUI18AccessPointUseCaseO8rawValueACSgSS_tcfC_0(v29);
    if (v23 == 7) {
      int v24 = 1;
    }
    else {
      int v24 = v23;
    }
    sub_1000674EC(v18, v19, v22, a1, a2, v24, v20, v25, (char)[a7 BOOLValueSafe], [a8 BOOLValueSafe], a9, (uint64_t)a10);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_100067E34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(unsigned char *)(v11 + 48) = a3;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_bridgeObjectRetain();
  if (v12 == 1)
  {
    sub_100017388((uint64_t)v8, &qword_100142A60);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(v11 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = &unk_1001422C8;
  *(void *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    void v18[2] = v13;
    void v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

void sub_100068088(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100007D4C(v12, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v77 = a1;
  uint64_t v78 = a4;
  id v76 = a3;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v75 = v13;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v74 = (void *)swift_slowAlloc();
    v80[0] = v74;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v19 = v11;
    if (a5) {
      uint64_t v20 = a4;
    }
    else {
      uint64_t v20 = 7104878;
    }
    if (a5) {
      unint64_t v21 = (unint64_t)a5;
    }
    else {
      unint64_t v21 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = v20;
    uint64_t v11 = v19;
    v79[0] = sub_100036BF8(v22, v21, (uint64_t *)v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "showDashboard called with sceneIdentifier: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v23 = [objc_allocWithZone((Class)FBSSystemService) init];
  unsigned __int8 v24 = [v23 isPasscodeLockedOrBlocked];

  if (v24)
  {
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v25, v26))
    {
LABEL_16:

      return;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    uint64_t v28 = "Skipping dashboard request because device is locked or blocked.";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, v27, 2u);
    swift_slowDealloc();
    goto LABEL_16;
  }
  uint64_t v29 = sub_10008E8D4(2, v78, a5);
  if (v30)
  {
    uint64_t v31 = v29;
    uint64_t v32 = v30;
    sub_100005B18(&qword_1001421A0);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_10010F270;
    uint64_t v34 = sub_100069708(0, &qword_1001421A8);
    *(void *)(v33 + 56) = sub_100005B18(&qword_1001421B0);
    *(void *)(v33 + 32) = v34;
    uint64_t v35 = sub_100069708(0, &qword_1001421B8);
    *(void *)(v33 + 88) = sub_100005B18(&qword_1001421C0);
    *(void *)(v33 + 64) = v35;
    uint64_t v36 = sub_100069708(0, &qword_1001421C8);
    *(void *)(v33 + 120) = sub_100005B18(&qword_1001421D0);
    *(void *)(v33 + 96) = v36;
    uint64_t v37 = sub_100069708(0, &qword_1001421D8);
    *(void *)(v33 + 152) = sub_100005B18(&qword_1001421E0);
    *(void *)(v33 + 128) = v37;
    uint64_t v38 = sub_100069708(0, &qword_1001421E8);
    *(void *)(v33 + 184) = sub_100005B18(&qword_1001421F0);
    *(void *)(v33 + 160) = v38;
    uint64_t v39 = sub_100069708(0, &qword_1001421F8);
    *(void *)(v33 + 216) = sub_100005B18(&qword_100142200);
    *(void *)(v33 + 192) = v39;
    uint64_t v40 = sub_100069708(0, &qword_100142208);
    *(void *)(v33 + 248) = sub_100005B18(&qword_100142210);
    *(void *)(v33 + 224) = v40;
    uint64_t v41 = sub_100069708(0, &qword_100142218);
    *(void *)(v33 + 280) = sub_100005B18(&qword_100142220);
    *(void *)(v33 + 256) = v41;
    uint64_t v42 = sub_100069708(0, (unint64_t *)&qword_100142A50);
    *(void *)(v33 + 312) = sub_100005B18(&qword_100142228);
    *(void *)(v33 + 288) = v42;
    uint64_t v43 = sub_100069708(0, &qword_100142230);
    *(void *)(v33 + 344) = sub_100005B18(&qword_100142238);
    *(void *)(v33 + 320) = v43;
    uint64_t v44 = sub_100069708(0, &qword_100142240);
    *(void *)(v33 + 376) = sub_100005B18(&qword_100142248);
    *(void *)(v33 + 352) = v44;
    uint64_t v45 = sub_100069708(0, &qword_100142250);
    *(void *)(v33 + 408) = sub_100005B18(&qword_100142258);
    *(void *)(v33 + 384) = v45;
    uint64_t v46 = sub_100069708(0, &qword_100145550);
    *(void *)(v33 + 440) = sub_100005B18(&qword_100142260);
    *(void *)(v33 + 416) = v46;
    uint64_t v47 = sub_100069708(0, (unint64_t *)&qword_100142268);
    *(void *)(v33 + 472) = sub_100005B18(&qword_100142270);
    *(void *)(v33 + 448) = v47;
    sub_100069708(0, &qword_100142278);
    os_log_type_t v48 = NSSet.init(arrayLiteral:)();
    v80[0] = 0;
    static Set._forceBridgeFromObjectiveC(_:result:)();
    if (v80[0])
    {

      uint64_t v49 = self;
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v51 = Data._bridgeToObjectiveC()().super.isa;
      v80[0] = 0;
      id v52 = [v49 unarchivedObjectOfClasses:isa fromData:v51 error:v80];

      if (v52)
      {
        id v53 = v80[0];
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_100005B18(&qword_100142280);
        if (!swift_dynamicCast())
        {
          swift_bridgeObjectRelease();
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v25, v26)) {
            goto LABEL_16;
          }
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          uint64_t v28 = "Unexpected type encountered for initial state dictionary";
          goto LABEL_15;
        }
        uint64_t v54 = v79[0];
        id v55 = objc_allocWithZone((Class)type metadata accessor for DashboardRequest());
        uint64_t v56 = DashboardRequest.init(initialState:)(v54);
        id v57 = [self currentContext];
        type metadata accessor for DashboardConnectionContext();
        uint64_t v58 = swift_allocObject();
        *(void *)(v58 + 120) = 0;
        *(unsigned char *)(v58 + 128) = 0;
        uint64_t v59 = a5;
        uint64_t v60 = sub_1000E67FC(v57);
        uint64_t v61 = *(void **)(v60 + 120);
        *(void *)(v60 + 120) = v56;
        int v62 = v56;

        *(unsigned char *)(v60 + 128) = [v76 BOOLValueSafe];
        *(void *)(v60 + 104) = v78;
        *(void *)(v60 + 112) = v59;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v63 = (void *)type metadata accessor for RemoteAlertDashboardContext(0);
        swift_allocObject();
        uint64_t v64 = (void *)sub_1000DA0C0(v31, v32);
        v80[3] = v63;
        v80[4] = &off_100134C80;
        v80[0] = v64;
        sub_10006919C((uint64_t)v80, (uint64_t)v79);
        swift_beginAccess();
        swift_retain();
        swift_retain();
        sub_100069204((uint64_t)v79, v60 + 64);
        swift_endAccess();
        swift_release();
        uint64_t v65 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v11, 1, 1, v65);
        unint64_t v66 = (void *)swift_allocObject();
        v66[2] = 0;
        v66[3] = 0;
        v66[4] = v62;
        v66[5] = v60;
        swift_retain();
        sub_10002C340((uint64_t)v11, (uint64_t)&unk_100142290, (uint64_t)v66);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        id v67 = v80[0];
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          os_log_type_t v70 = (uint8_t *)swift_slowAlloc();
          uint64_t v71 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v70 = 138412290;
          swift_errorRetain();
          uint64_t v72 = (void *)_swift_stdlib_bridgeErrorToNSError();
          v80[0] = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v71 = v72;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "Could not deserialize initial state dictionary: %@", v70, 0xCu);
          sub_100005B18(&qword_100142A40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100068B54(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)FBSSystemService) init];
  unsigned __int8 v14 = [v13 isPasscodeLockedOrBlocked];

  if ((v14 & 1) == 0)
  {
    id v15 = [self currentContext];
    uint64_t v16 = sub_1000E6E58(v15);
    unsigned __int8 v17 = [a3 BOOLValueSafe];
    unsigned __int8 v18 = [a4 BOOLValueSafe];
    unsigned __int8 v19 = [a5 BOOLValueSafe];
    uint64_t v20 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    *(void *)(v21 + 32) = a1;
    *(void *)(v21 + 40) = a2;
    *(unsigned char *)(v21 + 48) = v17;
    *(unsigned char *)(v21 + 49) = v18;
    *(unsigned char *)(v21 + 50) = v19;
    *(void *)(v21 + 56) = v16;
    swift_bridgeObjectRetain();
    sub_10002C340((uint64_t)v12, (uint64_t)&unk_100142168, v21);
    swift_release();
  }
}

uint64_t sub_100068D14()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100068D5C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 49);
  char v10 = *(unsigned char *)(v1 + 50);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000243C4;
  return sub_100066220(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100068E50()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 59, 7);
}

uint64_t sub_100068E98(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  char v9 = *(unsigned char *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 57);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10003E30C;
  return sub_100066A88(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100068F8C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100066C70(a1, a2, a3, v3);
}

uint64_t sub_100068F94()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100068FCC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10003E30C;
  return sub_10006720C();
}

uint64_t sub_100069078()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000690C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *char v10 = v2;
  v10[1] = sub_10003E30C;
  return sub_100066E5C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10006919C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_1001444D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100069204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_1001444D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006926C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000692B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_100065BDC(a1, v4, v5, v7, v6);
}

uint64_t sub_100069374()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000693BC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1) {
    return sub_100067E34(*(void *)(v0 + 16), v1, 0);
  }
  return result;
}

uint64_t sub_1000693D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteAlertRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100069438()
{
  uint64_t v1 = (int *)(type metadata accessor for RemoteAlertRequest() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 72) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_release();
  if (*(void *)(v0 + v3 + v1[9])) {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100069558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteAlertRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000695BC()
{
  uint64_t v2 = *(void *)(type metadata accessor for RemoteAlertRequest() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[3] = v4;
  v6[4] = v5;
  v6[1] = sub_10003E30C;
  v6[2] = v3;
  return _swift_task_switch(sub_100065058, 0, 0);
}

uint64_t sub_1000696AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RemoteAlertRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100069708(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100069744()
{
  return sub_100069F30(49);
}

uint64_t sub_10006974C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003E30C;
  return sub_100062E70(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100069814()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006984C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000243C4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100140DF0 + dword_100140DF0);
  return v6(a1, v4);
}

uint64_t sub_100069904()
{
  return sub_10006A044(41);
}

uint64_t sub_10006990C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_100063414(a1, v4, v5, v6, v7);
}

unint64_t sub_1000699D8()
{
  unint64_t result = qword_100140DB8;
  if (!qword_100140DB8)
  {
    type metadata accessor for RemoteAlertAccessPointContext(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100140DB8);
  }
  return result;
}

uint64_t sub_100069A30()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  sub_1000247CC(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100069AA0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10003E30C;
  return sub_100063A34(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100069BBC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100069BD4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100069C1C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003E30C;
  return sub_10006424C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100069CEC()
{
  uint64_t v1 = (int *)(type metadata accessor for RemoteAlertRequest() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_release();
  if (*(void *)(v0 + v3 + v1[9])) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 17, v2 | 7);
}

uint64_t sub_100069E14()
{
  uint64_t v2 = *(void *)(type metadata accessor for RemoteAlertRequest() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v0;
  uint64_t v5 = v0 + v3;
  char v6 = *(unsigned char *)(v4 + 16);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(unsigned char *)(v7 + 32) = v6;
  *(void *)(v7 + 8) = sub_10003E30C;
  *(void *)(v7 + 16) = v5;
  return _swift_task_switch(sub_100061DF8, 0, 0);
}

uint64_t sub_100069F28()
{
  return sub_100069F30(48);
}

uint64_t sub_100069F30(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100069F7C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_100061FD0(a1, v4, v5, v7, v6);
}

uint64_t sub_10006A03C()
{
  return sub_10006A044(40);
}

uint64_t sub_10006A044(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10006A090(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003E30C;
  return sub_1000628B4(a1, v4, v5, v6);
}

uint64_t sub_10006A14C()
{
  return sub_100036218();
}

uint64_t sub_10006A164(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100005B18(&qword_100141000);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013FBB0 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007D4C(v10, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v23 = v3;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = a1;
    unsigned __int8 v14 = (uint8_t *)v13;
    v26[0] = swift_slowAlloc();
    *(_DWORD *)unsigned __int8 v14 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100036BF8(v24, a2, v26);
    unint64_t v3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Game Center banner finished animations for %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v24;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  sub_1000707A4(a1, a2);
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v3[17] + 16);
  v3[16] = v16;
  if (!v16)
  {
    a2 = (unint64_t)(v3 + 19);
    uint64_t result = swift_beginAccess();
    if (*(void *)(v3[19] + 16))
    {
      a1 = v7 + 16;
      while (1)
      {
        swift_beginAccess();
        unint64_t v17 = *(void *)a2;
        if (!*(void *)(*(void *)a2 + 16))
        {
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v17 + v18, v6);
        unint64_t v3 = *(void **)(v17 + 16);
        if (!v3) {
          goto LABEL_22;
        }
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native || (unint64_t)v3 - 1 > *(void *)(v17 + 24) >> 1) {
          unint64_t v17 = sub_100036780(isUniquelyReferenced_nonNull_native, (int64_t)v3, 1, v17);
        }
        unint64_t v3 = (void *)(v17 + v18);
        swift_arrayDestroy();
        uint64_t v20 = *(void *)(v17 + 16);
        if (!v20) {
          break;
        }
        uint64_t v21 = v20 - 1;
        uint64_t v22 = *(void *)(v7 + 72);
        if (v22 > 0 || v3 >= (void *)((char *)v3 + v22 + v22 * v21))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v22)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        --*(void *)(v17 + 16);
        *(void *)a2 = v17;
        swift_endAccess();
        CheckedContinuation.resume(returning:)();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        if (!*(void *)(*(void *)a2 + 16)) {
          return result;
        }
      }
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10006A598(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10006A5B8, v1, 0);
}

uint64_t sub_10006A5B8()
{
  id v1 = [objc_allocWithZone((Class)FBSSystemService) init];
  unsigned __int8 v2 = [v1 isPasscodeLockedOrBlocked];

  if (v2)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007D4C(v3, (uint64_t)qword_100156CF8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_15;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "Skipping in-game banner request because device is locked or blocked.";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc();
LABEL_15:

    id v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  uint64_t v8 = sub_10006AE14();
  v0[4] = v8;
  v0[5] = v9;
  if (!v9)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007D4C(v14, (uint64_t)qword_100156CF8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_15;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "Enqueuing in game banner request without a valid remote context or token.";
    goto LABEL_14;
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  os_log_type_t v12 = (void *)swift_task_alloc();
  v0[6] = v12;
  *os_log_type_t v12 = v0;
  v12[1] = sub_10006A830;
  uint64_t v13 = v0[3];
  uint64_t v12[3] = v11;
  v12[4] = v13;
  v12[2] = v10;
  return _swift_task_switch(sub_10006CB10, v13, 0);
}

uint64_t sub_10006A830()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006A940, v1, 0);
}

uint64_t sub_10006A940()
{
  uint64_t v1 = v0[2];
  unsigned __int8 v2 = *(void **)(*(void *)(v1 + *(int *)(type metadata accessor for RemoteAlertRequest() + 24)) + 16);
  if (v2)
  {
    id v3 = v2;
    if (sub_1000E63BC())
    {
      uint64_t v4 = v0[2];
      swift_bridgeObjectRelease();
      sub_10006B014(v4, 0, 0, 0);

      goto LABEL_10;
    }
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007D4C(v5, (uint64_t)qword_100156CF8);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "In-game banner request without a valid remote target.", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = v0[4];
  unint64_t v9 = v0[5];

  sub_10006A164(v10, v9);
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

void sub_10006AACC()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_100005B18(&qword_100141000);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10013FBB0 != -1) {
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007D4C(v6, (uint64_t)qword_100156CF8);
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Game Mode banner dismissed", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = *(void *)(v1 + 120);
    BOOL v11 = __OFSUB__(v10, 1);
    uint64_t v12 = v10 - 1;
    if (v11) {
      break;
    }
    *(void *)(v1 + 120) = v12;
    if (v12 < 0)
    {
      *(void *)(v1 + 120) = 0;
    }
    else if (v12)
    {
      return;
    }
    uint64_t v13 = (unint64_t *)(v1 + 144);
    swift_beginAccess();
    if (!*(void *)(*(void *)(v1 + 144) + 16)) {
      return;
    }
    while (1)
    {
      swift_beginAccess();
      unint64_t v14 = *v13;
      if (!*(void *)(*v13 + 16)) {
        break;
      }
      unint64_t v15 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v3 + 16))(v5, v14 + v15, v2);
      unint64_t v1 = *(void *)(v14 + 16);
      if (!v1) {
        goto LABEL_25;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v1 - 1 > *(void *)(v14 + 24) >> 1) {
        unint64_t v14 = sub_100036780(isUniquelyReferenced_nonNull_native, v1, 1, v14);
      }
      unint64_t v1 = v14 + v15;
      swift_arrayDestroy();
      uint64_t v17 = *(void *)(v14 + 16);
      if (!v17) {
        goto LABEL_28;
      }
      uint64_t v18 = v17 - 1;
      uint64_t v19 = *(void *)(v3 + 72);
      if (v19 > 0 || v1 >= v1 + v19 + v19 * v18)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v19)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      --*(void *)(v14 + 16);
      *uint64_t v13 = v14;
      swift_endAccess();
      CheckedContinuation.resume(returning:)();
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
      if (!*(void *)(*v13 + 16)) {
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_once();
  }
  __break(1u);
LABEL_28:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10006AE14()
{
  uint64_t v1 = type metadata accessor for RemoteAlertRequest();
  uint64_t v2 = *(void **)(v0 + *(int *)(v1 + 24));
  uint64_t v3 = (void *)v2[2];
  if (v3)
  {
    uint64_t v4 = v2[13];
    uint64_t v5 = (void *)v2[14];
    char v6 = *(unsigned char *)(v0 + *(int *)(v1 + 20));
    swift_bridgeObjectRetain();
    id v7 = v3;
    uint64_t v8 = sub_1000E61EC(v6, v4, v5);

    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007D4C(v9, (uint64_t)qword_100156CF8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "RemoteAlertRequest was constructed without a valid remote audit token", v12, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v8;
}

uint64_t (*sub_10006AF5C())()
{
  return j__swift_endAccess;
}

uint64_t sub_10006AFB4()
{
  type metadata accessor for RemoteAlertRequestQueue();
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  v0[14] = &_swiftEmptyDictionarySingleton;
  v0[15] = 0;
  v0[16] = 0;
  v0[17] = &_swiftEmptySetSingleton;
  v0[18] = &_swiftEmptyArrayStorage;
  v0[19] = &_swiftEmptyArrayStorage;
  qword_100156D18 = (uint64_t)v0;
  return result;
}

uint64_t sub_10006B014(uint64_t a1, char a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v72 = a4;
  unint64_t v73 = a3;
  uint64_t v8 = sub_100005B18(&qword_100140E30);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  os_log_type_t v11 = (uint8_t *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t)&v70 - v12;
  uint64_t v74 = type metadata accessor for RemoteAlertRequest();
  uint64_t v14 = *(void *)(v74 - 8);
  uint64_t v15 = __chkstk_darwin(v74);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v70 - v18;
  uint64_t result = sub_10006AE14();
  uint64_t v76 = result;
  if (v21)
  {
    unint64_t v22 = v21;
    uint64_t v71 = v11;
    uint64_t v75 = v14;
    if (a2)
    {
      unint64_t v23 = v4 + 112;
      swift_beginAccess();
      uint64_t v24 = *(void *)(v4 + 112);
      if (*(void *)(v24 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v25 = sub_1000DC324(v76, v22);
        if (v26)
        {
          uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v28 = *(void *)(v27 + 16);
          swift_bridgeObjectRelease();
          if (v28)
          {
            if (qword_10013FBB0 == -1)
            {
LABEL_7:
              uint64_t v29 = type metadata accessor for Logger();
              sub_100007D4C(v29, (uint64_t)qword_100156CF8);
              swift_bridgeObjectRetain_n();
              uint64_t v30 = Logger.logObject.getter();
              os_log_type_t v31 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v30, v31))
              {
                uint64_t v32 = (uint8_t *)swift_slowAlloc();
                v78[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v32 = 136315138;
                uint64_t v14 = v75;
                uint64_t v71 = v32 + 4;
                swift_bridgeObjectRetain();
                v77[0] = sub_100036BF8(v76, v22, v78);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v30, v31, "Duplicate request not allowed for token: %s", v32, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v33 = (void (*)(char *))v73;
                if (!v73) {
                  return swift_bridgeObjectRelease();
                }
LABEL_37:
                uint64_t v63 = *(void *)v23;
                uint64_t v64 = *(void *)(*(void *)v23 + 16);
                sub_100026018((uint64_t)v33);
                if (v64)
                {
                  swift_bridgeObjectRetain();
                  unint64_t v65 = sub_1000DC324(v76, v22);
                  if (v66)
                  {
                    uint64_t v67 = *(void *)(*(void *)(v63 + 56) + 8 * v65);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (*(void *)(v67 + 16))
                    {
                      sub_1000693D4(v67+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v13);
                      uint64_t v68 = 0;
                    }
                    else
                    {
                      uint64_t v68 = 1;
                    }
                    uint64_t v69 = v74;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, v68, 1, v74);
                    swift_bridgeObjectRelease();
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v69) != 1)
                    {
                      sub_100069558(v13, (uint64_t)v19);
                      v33(v19);
                      sub_100039104((uint64_t)v33);
                      return sub_1000696AC((uint64_t)v19);
                    }
LABEL_48:
                    sub_100039104((uint64_t)v33);
                    return sub_100017388(v13, &qword_100140E30);
                  }
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v13, 1, 1, v74);
                goto LABEL_48;
              }

              swift_bridgeObjectRelease_n();
              uint64_t v33 = (void (*)(char *))v73;
              if (v73) {
                goto LABEL_37;
              }
              return swift_bridgeObjectRelease();
            }
LABEL_55:
            swift_once();
            goto LABEL_7;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    sub_1000693D4(a1, (uint64_t)v17);
    uint64_t v19 = (char *)(v5 + 112);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v77[0] = *(void *)(v5 + 112);
    unint64_t v35 = v77[0];
    *(void *)(v5 + 112) = 0x8000000000000000;
    unint64_t v23 = sub_1000DC324(v76, v22);
    uint64_t v37 = *(void *)(v35 + 16);
    BOOL v38 = (v36 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38))
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = v36;
      if (*(void *)(v35 + 24) >= v39)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10006FEFC();
          unint64_t v35 = v77[0];
        }
      }
      else
      {
        sub_10006E3C0(v39, isUniquelyReferenced_nonNull_native);
        unint64_t v35 = v77[0];
        unint64_t v40 = sub_1000DC324(v76, v22);
        if ((v13 & 1) != (v41 & 1)) {
          goto LABEL_57;
        }
        unint64_t v23 = v40;
      }
      *(void *)uint64_t v19 = v35;
      swift_bridgeObjectRelease();
      uint64_t v42 = *(void **)v19;
      if ((v13 & 1) == 0)
      {
        v42[(v23 >> 6) + 8] |= 1 << v23;
        uint64_t v43 = (void *)(v42[6] + 16 * v23);
        void *v43 = v76;
        v43[1] = v22;
        *(void *)(v42[7] + 8 * v23) = &_swiftEmptyArrayStorage;
        uint64_t v14 = v42[2];
        swift_bridgeObjectRetain();
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          goto LABEL_55;
        }
        v42[2] = v14 + 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v14 = v42[7];
      swift_bridgeObjectRelease();
      unint64_t v35 = *(void *)(v14 + 8 * v23);
      char v44 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v14 + 8 * v23) = v35;
      if (v44)
      {
LABEL_21:
        unint64_t v46 = *(void *)(v35 + 16);
        unint64_t v45 = *(void *)(v35 + 24);
        if (v46 >= v45 >> 1)
        {
          unint64_t v35 = sub_1000364DC(v45 > 1, v46 + 1, 1, v35);
          *(void *)(v14 + 8 * v23) = v35;
        }
        *(void *)(v35 + 16) = v46 + 1;
        unint64_t v73 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
        sub_100069558((uint64_t)v17, v35 + v73 + *(void *)(v75 + 72) * v46);
        swift_endAccess();
        swift_bridgeObjectRelease();
        if (qword_10013FBB0 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for Logger();
        sub_100007D4C(v47, (uint64_t)qword_100156CF8);
        swift_bridgeObjectRetain_n();
        os_log_type_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          v78[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v50 = 136315138;
          swift_bridgeObjectRetain();
          v77[0] = sub_100036BF8(v76, v22, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Remote Alert request enqueued for token: %s", v50, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v51 = *(void *)v19;
        if (!*(void *)(*(void *)v19 + 16)) {
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v52 = sub_1000DC324(v76, v22);
        if ((v53 & 1) == 0)
        {
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        uint64_t v54 = *(void *)(*(void *)(v51 + 56) + 8 * v52);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void *)(v54 + 16);
        swift_bridgeObjectRelease();
        if (v55 != 1) {
          return swift_bridgeObjectRelease();
        }
        uint64_t v56 = v74;
        if (sub_100072354(a1, (void *)*(unsigned __int8 *)(a1 + *(int *)(v74 + 20)), *(void *)(a1 + *(int *)(v74 + 24))))return swift_bridgeObjectRelease(); {
        id v57 = sub_10006AF5C();
        }
        uint64_t v58 = sub_100033E48(v77, v76, v22);
        uint64_t v60 = *v59;
        if (!*v59)
        {
          ((void (*)(void *, void))v58)(v77, 0);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t *, void))v57)(v78, 0);
          uint64_t v62 = 1;
          uint64_t v61 = (uint64_t)v71;
          goto LABEL_44;
        }
        if (*(void *)(v60 + 16))
        {
          uint64_t v61 = (uint64_t)v71;
          sub_1000693D4(v60 + v73, (uint64_t)v71);
          sub_100038EFC(0, 1);
          ((void (*)(void *, void))v58)(v77, 0);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t *, void))v57)(v78, 0);
          uint64_t v62 = 0;
LABEL_44:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v61, v62, 1, v56);
          return sub_100017388(v61, &qword_100140E30);
        }
        __break(1u);
LABEL_57:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
    }
    unint64_t v35 = sub_1000364DC(0, *(void *)(v35 + 16) + 1, 1, v35);
    *(void *)(v14 + 8 * v23) = v35;
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_10006BA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_10006BA20, 0, 0);
}

uint64_t sub_10006BA20()
{
  if (qword_10013FCE8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156E08;
  *(void *)(v0 + 32) = qword_100156E08;
  return _swift_task_switch(sub_10006BAB8, v1, 0);
}

uint64_t sub_10006BAB8()
{
  sub_1000E0860(v0[2], v0[3], 1);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10006BB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  sub_100005B18(&qword_100142A60);
  v7[21] = swift_task_alloc();
  v7[22] = type metadata accessor for MainActor();
  v7[23] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006BBF0, v9, v8);
}

uint64_t sub_10006BBF0()
{
  swift_release();
  if (qword_10013FCF0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = (void *)v0[18];
  uint64_t v4 = sub_1000E6514(v0[17]);
  uint64_t v6 = v5;
  sub_100005B18(&qword_100142568);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010F300;
  v0[15] = 0xD000000000000011;
  v0[16] = 0x80000001000FCF40;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 80) = v6;
  sub_1000B9C4C(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setUserInfo:isa];

  id v9 = [self newHandleWithDefinition:v2 configurationContext:v1];
  if (qword_10013FCB8 != -1) {
    swift_once();
  }
  uint64_t v10 = v0[21];
  uint64_t v11 = v0[17];
  uint64_t v12 = v0[18];
  [v9 registerObserver:qword_100156DF8];
  [v9 activateWithContext:v12];
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  swift_retain();
  id v14 = v9;
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v11;
  v16[5] = v14;
  sub_10002C340(v10, (uint64_t)&unk_100142578, (uint64_t)v16);

  swift_release();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_10006BEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[8] = v7;
  v5[9] = v6;
  return _swift_task_switch(sub_10006BF48, v7, v6);
}

uint64_t sub_10006BF48()
{
  if (qword_10013FCB8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100156DF8;
  *(void *)(v0 + 80) = qword_100156DF8;
  return _swift_task_switch(sub_10006BFE0, v1, 0);
}

uint64_t sub_10006BFE0()
{
  uint64_t v1 = (void *)v0[6];
  swift_beginAccess();
  id v2 = v1;
  uint64_t v3 = swift_retain();
  sub_10006DAB8(v3, v2);
  swift_endAccess();

  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  return _swift_task_switch(sub_10006C090, v4, v5);
}

uint64_t sub_10006C090()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006C0F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for RemoteAlertRequestQueue()
{
  return self;
}

void *sub_10006C164(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = *v11;
    swift_retain();
    if (v12)
    {
      uint64_t v13 = v11[1];
      *uint64_t v10 = v12;
      v10[1] = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    }
  }
  return a1;
}

uint64_t sub_10006C268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t result = swift_release();
  if (*(void *)(a1 + *(int *)(a2 + 28)))
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_10006C300(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  swift_retain();
  if (v11)
  {
    uint64_t v12 = v10[1];
    *uint64_t v9 = v11;
    v9[1] = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  }
  return a1;
}

uint64_t sub_10006C3B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a1 + v7);
  uint64_t v11 = *(void *)(a2 + v7);
  if (!v10)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      *uint64_t v8 = v11;
      v8[1] = v13;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v9 + 8);
  *uint64_t v8 = v11;
  v8[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10006C4A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = v10[1];
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  }
  return a1;
}

uint64_t sub_10006C554(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release();
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *(void *)(a1 + v8);
  uint64_t v12 = *v10;
  if (!v11)
  {
    if (v12)
    {
      uint64_t v14 = v10[1];
      *uint64_t v9 = v12;
      v9[1] = v14;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    return a1;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v13 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v13;
  swift_release();
  return a1;
}

uint64_t sub_10006C630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C644);
}

uint64_t sub_10006C644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10006C704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C718);
}

uint64_t sub_10006C718(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for RemoteAlertRequest()
{
  uint64_t result = qword_100142518;
  if (!qword_100142518) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006C820()
{
  uint64_t result = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10006C8CC()
{
  return v0;
}

BOOL sub_10006C8D8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2[15];
  if (v5)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007D4C(v6, (uint64_t)qword_100156CF8);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v11[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      Swift::Int v12 = sub_100036BF8(a1, a2, v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Game Center banner for %s blocked on Game Mode banners", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100071240(&v12, a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v2[16] = *(void *)(v2[17] + 16);
  }
  return v5 == 0;
}

uint64_t sub_10006CAEC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10006CB10, v2, 0);
}

uint64_t sub_10006CB10()
{
  if (sub_10006C8D8(v0[2], v0[3]))
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    sub_100074A58(&qword_1001425C0, v1, (void (*)(uint64_t))type metadata accessor for RemoteAlertRequestQueue);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[5] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10006CC60;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_10006CC60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006CD70, v1, 0);
}

uint64_t sub_10006CD70()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  void *v1 = v0;
  v1[1] = sub_10006CE20;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  v1[3] = v0[3];
  v1[4] = v2;
  v1[2] = v3;
  return _swift_task_switch(sub_10006CB10, v2, 0);
}

uint64_t sub_10006CE20()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10006CF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100141000);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  os_log_type_t v8 = (unint64_t *)(a2 + 144);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a2 + 144);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 144) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100036780(0, *(void *)(v9 + 16) + 1, 1, v9);
    *os_log_type_t v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100036780(v11 > 1, v12 + 1, 1, v9);
    *os_log_type_t v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess();
}

uint64_t sub_10006D0B4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10006D0D4, v0, 0);
}

uint64_t sub_10006D0D4()
{
  uint64_t v1 = v0[2];
  if (*(void *)(v1 + 128))
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007D4C(v2, (uint64_t)qword_100156CF8);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Game Mode banner blocked on Game Center banners", v5, 2u);
      swift_slowDealloc();
    }

    sub_100074A58(&qword_1001425C0, v6, (void (*)(uint64_t))type metadata accessor for RemoteAlertRequestQueue);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[3] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10006D2F4;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  uint64_t v8 = *(void *)(v1 + 120);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  *(void *)(v1 + 120) = v10;
  unint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10006D2F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006D404, v1, 0);
}

uint64_t sub_10006D404()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_10006D4AC;
  uint64_t v2 = *(void *)(v0 + 16);
  v1[2] = v2;
  return _swift_task_switch(sub_10006D0D4, v2, 0);
}

uint64_t sub_10006D4AC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10006D5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100141000);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = (unint64_t *)(a2 + 152);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a2 + 152);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 152) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100036780(0, *(void *)(v9 + 16) + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100036780(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess();
}

uint64_t sub_10006D740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 32) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006D7D8, v6, v5);
}

uint64_t sub_10006D7D8()
{
  uint64_t v1 = v0[3];
  swift_release();
  swift_getKeyPath();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 1;
  v0[2] = v1;
  sub_100074A58((unint64_t *)&qword_100140DB8, 255, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_10006D904(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

void *sub_10006D9BC(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_10006DA60(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006DA88@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10006DAB8(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_10006DB6C(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_10006F780(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006DB6C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100005B18(&qword_100142588);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100072E14();
      do
      {
        swift_dynamicCast();
        type metadata accessor for ConnectionContext();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10006E9EC(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_10006DD98(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100005B18((uint64_t *)&unk_1001441C0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100074BB4(v24, v35);
      }
      else
      {
        sub_100036E88((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      BOOL v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *BOOL v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100074BB4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006E098(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100005B18((uint64_t *)&unk_1001441F0);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    unint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006E3C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100005B18(&qword_1001425A0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006E6D8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100005B18(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10006E9EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100005B18(&qword_100142588);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_retain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006ECC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100005B18(&qword_1001425F8);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10006EFD4(uint64_t a1, char a2)
{
  return sub_10006EFF8(a1, a2, &qword_100142608);
}

uint64_t sub_10006EFE0(uint64_t a1, char a2)
{
  return sub_10006EFF8(a1, a2, &qword_100142600);
}

uint64_t sub_10006EFEC(uint64_t a1, char a2)
{
  return sub_10006EFF8(a1, a2, &qword_1001425F0);
}

uint64_t sub_10006EFF8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100005B18(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v12) {
      break;
    }
    char v25 = (void *)(v6 + 64);
    unint64_t v26 = *(void *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v15);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v15 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v26 = *(void *)(v38 + 8 * v15);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v27;
      }
    }
LABEL_30:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_31:
    uint64_t v32 = 16 * v23;
    id v33 = (uint64_t *)(*(void *)(v6 + 48) + v32);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    long long v40 = *(_OWORD *)(*(void *)(v6 + 56) + v32);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v30 = v18 == v29;
        if (v18 == v29) {
          unint64_t v18 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      unint64_t v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 16 * v19;
    int64_t v21 = (void *)(*(void *)(v8 + 48) + v20);
    *int64_t v21 = v35;
    v21[1] = v34;
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v40;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v37;
  char v25 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10006F304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1000DC324(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10006FD40();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      int64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *int64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10006E098(v17, a5 & 1);
  unint64_t v23 = sub_1000DC324(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  *unint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_10006F48C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000DC324(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10006FB58();
      goto LABEL_7;
    }
    sub_10006DD98(v15, a4 & 1);
    unint64_t v21 = sub_1000DC324(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100007188((uint64_t)v19);
    return sub_100074BB4(a1, v19);
  }
LABEL_13:
  sub_10006FAA4(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10006F5E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10006F5F8(a1, a2, a3, a4, &qword_1001425B0);
}

uint64_t sub_10006F5EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10006F5F8(a1, a2, a3, a4, &qword_100142590);
}

uint64_t sub_10006F5F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1000DC324(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1000700CC(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10006E6D8(v17, a4 & 1, a5);
  unint64_t v23 = sub_1000DC324(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v28;

  return swift_bridgeObjectRetain();
}

id sub_10006F780(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1000DC464((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10007027C();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_release();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10006E9EC(v12, a3 & 1);
  unint64_t v18 = sub_1000DC464((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_100072E14();
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v23;

  return a2;
}

void sub_10006F8E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000DC324(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100070428();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10006ECC4(v15, a4 & 1);
  unint64_t v20 = sub_1000DC324(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  BOOL v22 = (uint64_t *)(v18[6] + 16 * v12);
  *BOOL v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v25;

  swift_bridgeObjectRetain();
}

unint64_t sub_10006FA54(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

_OWORD *sub_10006FAA4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  id result = sub_100074BB4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_10006FB10(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_10006FB58()
{
  uint64_t v1 = v0;
  sub_100005B18((uint64_t *)&unk_1001441C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100036E88(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = v19;
    v21[1] = v18;
    sub_100074BB4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10006FD40()
{
  uint64_t v1 = v0;
  sub_100005B18((uint64_t *)&unk_1001441F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10006FEFC()
{
  uint64_t v1 = v0;
  sub_100005B18(&qword_1001425A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000700B4()
{
  return sub_1000700CC(&qword_1001425B0);
}

void *sub_1000700C0()
{
  return sub_1000700CC(&qword_100142590);
}

void *sub_1000700CC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100005B18(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10007027C()
{
  uint64_t v1 = v0;
  sub_100005B18(&qword_100142588);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100070428()
{
  uint64_t v1 = v0;
  sub_100005B18(&qword_1001425F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000705DC()
{
  return sub_100070600(&qword_100142608);
}

void *sub_1000705E8()
{
  return sub_100070600(&qword_100142600);
}

void *sub_1000705F4()
{
  return sub_100070600(&qword_1001425F0);
}

void *sub_100070600(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100005B18(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + v17);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    long long v21 = *(_OWORD *)(*(void *)(v3 + 56) + v17);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(void *)(v5 + 56) + v17) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000707A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  int64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      unint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100070934();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_100071078(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

void *sub_100070934()
{
  uint64_t v1 = v0;
  sub_100005B18(&qword_1001425A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100070AE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100005B18(&qword_1001425A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100070D98()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100005B18(&qword_1001425A8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_100071078(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v2);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *int64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100071240(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      int64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000713F0(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_1000713F0(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100070D98();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100070934();
      goto LABEL_22;
    }
    sub_100070AE8();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void (*sub_10007158C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  int v102 = a2;
  uint64_t v9 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100005B18(&qword_100140E30);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  Swift::Int v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v104 = (uint64_t)&v93 - v16;
  uint64_t v17 = (int *)type metadata accessor for RemoteAlertRequest();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v103 = (uint64_t)&v93 - v23;
  __chkstk_darwin(v22);
  uint64_t v105 = (uint64_t)&v93 - v24;
  v119[3] = a4;
  v119[4] = a5;
  char v25 = sub_1000082EC(v119);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v25, a1, a4);
  unint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
  BOOL v111 = v25;
  uint64_t v112 = a4;
  uint64_t v113 = a5;
  uint64_t v107 = v26(a4, a5);
  if (!v27) {
    return (void (*)(void *))sub_100007188((uint64_t)v119);
  }
  uint64_t v28 = v27;
  uint64_t v106 = a3;
  uint64_t v100 = v21;
  uint64_t v101 = v18;
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = sub_100007D4C(v29, (uint64_t)qword_100156CF8);
  sub_10003D160((uint64_t)v119, (uint64_t)&v116);
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v98 = v15;
  uint64_t v99 = v11;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    v114[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v115 = sub_100036BF8(v107, v28, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v34 + 12) = 2080;
    sub_100006650(&v116, v117);
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(v113 + 16))(v112);
    uint64_t v115 = sub_100036BF8(v35, v36, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100007188((uint64_t)&v116);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Finding completed request for token: %s, contextID: %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100007188((uint64_t)&v116);
  }

  uint64_t v37 = v106;
  uint64_t v38 = (uint64_t *)(v106 + 112);
  swift_beginAccess();
  uint64_t v39 = *(void *)(v37 + 112);
  if (!*(void *)(v39 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    return (void (*)(void *))sub_100007188((uint64_t)v119);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v40 = sub_1000DC324(v107, v28);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_45;
  }
  uint64_t v42 = *(void *)(*(void *)(v39 + 56) + 8 * v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v110 = *(void *)(v42 + 16);
  if (!v110)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v94 = v38;
  uint64_t v95 = v30;
  uint64_t v97 = v28;
  unint64_t v43 = 0;
  unint64_t v93 = (*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
  uint64_t v96 = v42;
  uint64_t v44 = v42 + v93;
  char v109 = *(void (**)(uint64_t, uint64_t))(v113 + 16);
  uint64_t v108 = *(void *)(v101 + 72);
  while (1)
  {
    uint64_t v45 = *(void *)(v44 + v17[6]) + 64;
    swift_beginAccess();
    sub_100072E54(v45, (uint64_t)&v116);
    uint64_t v46 = v117;
    if (!v117)
    {
      sub_100017388((uint64_t)&v116, &qword_1001444D0);
      v109(v112, v113);
LABEL_12:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    uint64_t v47 = v17;
    uint64_t v48 = v118;
    os_log_type_t v49 = sub_100006650(&v116, v117);
    uint64_t v50 = *(void *)(v46 - 8);
    __chkstk_darwin(v49);
    unint64_t v52 = (char *)&v93 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v50 + 16))(v52);
    sub_100017388((uint64_t)&v116, &qword_1001444D0);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v46, v48);
    uint64_t v55 = v54;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v46);
    uint64_t v56 = ((uint64_t (*)(uint64_t, uint64_t))v109)(v112, v113);
    if (!v55)
    {
      uint64_t v17 = v47;
      goto LABEL_12;
    }
    BOOL v58 = v53 == v56 && v55 == v57;
    uint64_t v17 = v47;
    if (v58) {
      break;
    }
    char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_28;
    }
LABEL_13:
    ++v43;
    v44 += v108;
    if (v110 == v43) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t v60 = v97;
  swift_bridgeObjectRetain();
  uint64_t v61 = sub_10006AF5C();
  uint64_t v62 = sub_100033E48(v114, v107, v60);
  if (!*v63)
  {
    ((void (*)(uint64_t *, void))v62)(v114, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v61)(&v116, 0);
    goto LABEL_45;
  }
  uint64_t v64 = v103;
  sub_100033F1C(v43, v103);
  ((void (*)(uint64_t *, void))v62)(v114, 0);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t *, void))v61)(&v116, 0);
  sub_100069558(v64, v105);
  swift_bridgeObjectRetain_n();
  unint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 136315138;
    swift_bridgeObjectRetain();
    v114[0] = sub_100036BF8(v107, v60, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Removing completed request for token: %s", v67, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v68 = v101;
  uint64_t v69 = (uint64_t)v100;
  uint64_t v70 = v105;
  uint64_t v71 = *(void (**)(uint64_t))(v105 + v17[7]);
  uint64_t v72 = (uint64_t)v99;
  if (v71)
  {
    uint64_t v73 = swift_retain();
    v71(v73);
    sub_100039104((uint64_t)v71);
  }
  uint64_t v74 = *v94;
  uint64_t v75 = v97;
  if (!*(void *)(*v94 + 16)) {
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v76 = sub_1000DC324(v107, v75);
  if ((v77 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_40:
    uint64_t v79 = v104;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v68 + 56))(v104, 1, 1, v17);
LABEL_41:
    sub_100017388(v79, &qword_100140E30);
    if (v102)
    {
      uint64_t v81 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v72, 1, 1, v81);
      uint64_t v82 = (void *)swift_allocObject();
      v82[2] = 0;
      v82[3] = 0;
      v82[4] = v107;
      v82[5] = v75;
      sub_10002C340(v72, (uint64_t)&unk_100140E38, (uint64_t)v82);
      swift_release();
      goto LABEL_43;
    }
    sub_1000696AC(v70);
    goto LABEL_45;
  }
  uint64_t v78 = *(void *)(*(void *)(v74 + 56) + 8 * v76);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v78 + 16))
  {
    uint64_t v79 = v104;
    sub_1000693D4(v78 + v93, v104);
    unsigned int v80 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v68 + 56);
    v80(v79, 0, 1, v17);
  }
  else
  {
    unsigned int v80 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v68 + 56);
    uint64_t v79 = v104;
    v80(v104, 1, 1, v17);
  }
  swift_bridgeObjectRelease();
  int v84 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v68 + 48))(v79, 1, v17);
  uint64_t v75 = v97;
  if (v84 == 1) {
    goto LABEL_41;
  }
  sub_100069558(v79, v69);
  uint64_t v85 = *(void *)(v69 + v17[6]);
  uint64_t v86 = (void *)*(unsigned __int8 *)(v69 + v17[5]);
  swift_retain();
  LOBYTE(v86) = sub_100072354(v69, v86, v85);
  swift_release();
  if ((v86 & 1) == 0)
  {
    uint64_t v87 = sub_10006AF5C();
    uint64_t result = sub_100033E48(v114, v107, v97);
    uint64_t v88 = (void (*)(uint64_t *, void))result;
    uint64_t v90 = *v89;
    if (*v89)
    {
      if (!*(void *)(v90 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v91 = (uint64_t)v98;
      sub_1000693D4(v90 + v93, (uint64_t)v98);
      sub_100038EFC(0, 1);
      v88(v114, 0);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t *, void))v87)(&v116, 0);
      uint64_t v92 = 0;
    }
    else
    {
      ((void (*)(uint64_t *, void))result)(v114, 0);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t *, void))v87)(&v116, 0);
      uint64_t v92 = 1;
      uint64_t v91 = (uint64_t)v98;
    }
    sub_1000696AC((uint64_t)v100);
    sub_1000696AC(v105);
    v80(v91, v92, 1, v17);
    sub_100017388(v91, &qword_100140E30);
    return (void (*)(void *))sub_100007188((uint64_t)v119);
  }
  swift_bridgeObjectRelease();
  sub_1000696AC(v69);
LABEL_43:
  sub_1000696AC(v70);
  return (void (*)(void *))sub_100007188((uint64_t)v119);
}

uint64_t sub_100072354(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v6 - 8);
  Swift::Int v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(a3 + 16);
  if (v13)
  {
    id v14 = v13;
    if (sub_1000E63BC())
    {
      id v15 = [self identityOfCurrentProcess];
      if (!v15)
      {
        __break(1u);
        JUMPOUT(0x100072BC0);
      }
      uint64_t v16 = v15;
      id v60 = a2;
      uint64_t v63 = a3;
      if (qword_10013FBB0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      uint64_t v18 = sub_100007D4C(v17, (uint64_t)qword_100156CF8);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
      id v19 = v16;
      uint64_t v59 = v18;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.info.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      id v61 = v14;
      uint64_t v62 = v8;
      if (v22)
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        id v58 = (id)swift_slowAlloc();
        id v65 = v58;
        *(_DWORD *)uint64_t v23 = 136315394;
        os_log_t v56 = v20;
        uint64_t v24 = GameOverlayUIConfig.ServiceKind.rawValue.getter();
        uint64_t v64 = sub_100036BF8(v24, v25, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        *(_WORD *)(v23 + 12) = 2112;
        uint64_t v64 = (uint64_t)v19;
        id v26 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v57 = v16;

        os_log_t v27 = v56;
        _os_log_impl((void *)&_mh_execute_header, v56, v21, "Presenting remoteAlert for %s from %@", (uint8_t *)v23, 0x16u);
        sub_100005B18(&qword_100142A40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      }
      id v33 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
      id v34 = v19;
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v36 = [v33 initWithSceneProvidingProcess:v34 configurationIdentifier:v35];

      id v60 = v34;
      [v36 setSupportsMultipleDisplayPresentations:1];
      id v58 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
      id v37 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
      id v38 = v61;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        char v41 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v41 = 67109120;
        LODWORD(v65) = [v38 pid];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Remote alert using presentation target for pid: %d", v41, 8u);
        swift_slowDealloc();
      }

      id v42 = [self processHandleForAuditToken:v38];
      id v43 = [self predicateForProcess:v42];
      uint64_t v44 = v63;
      uint64_t v45 = *(void *)(v63 + 112);
      id v61 = v42;
      if (v45)
      {
        swift_bridgeObjectRetain();
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v46 = 0;
      }
      [v43 setScenePersistentIdentifier:v46];

      id v47 = [objc_allocWithZone((Class)SBSRemoteAlertPresentationTarget) initWithTargetPredicate:v43];
      uint64_t v32 = 1;
      [v47 setShouldDismissOnUILock:1];
      [v47 setShouldDismissInSwitcher:0];
      [v37 setPresentationTarget:v47];
      uint64_t v48 = type metadata accessor for TaskPriority();
      uint64_t v49 = (uint64_t)v62;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v62, 1, 1, v48);
      type metadata accessor for MainActor();
      swift_retain();
      id v50 = v37;
      id v51 = v36;
      id v52 = v58;
      uint64_t v53 = static MainActor.shared.getter();
      uint64_t v54 = (void *)swift_allocObject();
      v54[2] = v53;
      v54[3] = &protocol witness table for MainActor;
      v54[4] = v44;
      v54[5] = v50;
      v54[6] = v51;
      v54[7] = v52;
      sub_10002C340(v49, (uint64_t)&unk_100142560, (uint64_t)v54);
      swift_release();

      return v32;
    }
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007D4C(v28, (uint64_t)qword_100156CF8);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Cannot present remote alert because the client process state is invalid.", v31, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100072BE0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100072C38(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10003E30C;
  return sub_10006BB20(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100072D0C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100072D54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10003E30C;
  return sub_10006BEB0(a1, v4, v5, v7, v6);
}

unint64_t sub_100072E14()
{
  unint64_t result = qword_100142580;
  if (!qword_100142580)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100142580);
  }
  return result;
}

uint64_t sub_100072E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_1001444D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100072EBC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100072EFC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_1000243C4;
  return _swift_task_switch(sub_10006BA20, 0, 0);
}

uint64_t sub_100072FA8(uint64_t a1)
{
  return sub_10006D5A0(a1, v1);
}

uint64_t sub_100072FB0(uint64_t a1)
{
  return sub_10006CF14(a1, v1);
}

uint64_t sub_100072FB8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 484) = a2;
  *(void *)(v3 + 328) = a1;
  *(void *)(v3 + 336) = v2;
  sub_100005B18(&qword_100142A60);
  *(void *)(v3 + 344) = swift_task_alloc();
  return _swift_task_switch(sub_100073050, v2, 0);
}

uint64_t sub_100073050()
{
  id v1 = [objc_allocWithZone((Class)FBSSystemService) init];
  unsigned __int8 v2 = [v1 isPasscodeLockedOrBlocked];

  if (v2)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007D4C(v3, (uint64_t)qword_100156CF8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_19;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "Skipping Access Point request because device is locked or blocked.";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc();
LABEL_19:

    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v9 = *(int *)(type metadata accessor for RemoteAlertRequest() + 24);
  *(_DWORD *)(v0 + 480) = v9;
  uint64_t v10 = *(void *)(v8 + v9) + 64;
  swift_beginAccess();
  sub_100072E54(v10, v0 + 16);
  if (!*(void *)(v0 + 40))
  {
    sub_100017388(v0 + 16, &qword_1001444D0);
    goto LABEL_14;
  }
  *(void *)(v0 + 352) = sub_100005B18((uint64_t *)&unk_1001454D0);
  *(void *)(v0 + 360) = type metadata accessor for RemoteAlertAccessPointContext(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007D4C(v16, (uint64_t)qword_100156CF8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5)) {
      goto LABEL_19;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    uint64_t v7 = "Access point request without a valid remote context or token.";
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v0 + 248);
  *(void *)(v0 + 368) = v11;
  swift_getKeyPath();
  *(void *)(v0 + 376) = OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext___observationRegistrar;
  *(void *)(v0 + 264) = v11;
  *(void *)(v0 + 384) = sub_100074A58((unint64_t *)&qword_100140DB8, 255, (void (*)(uint64_t))type metadata accessor for RemoteAlertAccessPointContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v0 + 392) = v12;
  uint64_t v13 = *(void *)(v11 + 24);
  *(void *)(v0 + 400) = v13;
  if (!v13)
  {
    swift_release();
    goto LABEL_14;
  }
  swift_getKeyPath();
  *(void *)(v0 + 240) = v11;
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *(unsigned char *)(v0 + 485) = *(unsigned char *)(v11
                                  + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__didReturnToForeground);
  id v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v14;
  *id v14 = v0;
  v14[1] = sub_10007345C;
  uint64_t v15 = *(void *)(v0 + 336);
  v14[3] = v13;
  void v14[4] = v15;
  v14[2] = v12;
  return _swift_task_switch(sub_10006CB10, v15, 0);
}

uint64_t sub_10007345C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  return _swift_task_switch(sub_10007356C, v1, 0);
}

uint64_t sub_10007356C()
{
  uint64_t v1 = *(void **)(*(void *)(*(void *)(v0 + 328) + *(int *)(v0 + 480)) + 16);
  *(void *)(v0 + 416) = v1;
  if (v1)
  {
    id v2 = v1;
    if (sub_1000E63BC())
    {
      if (*(unsigned char *)(v0 + 485))
      {
        uint64_t v3 = *(void *)(*(void *)(v0 + 328) + *(int *)(v0 + 480));
        uint64_t v4 = *(void *)(v3 + 104);
        os_log_type_t v5 = *(void **)(v3 + 112);
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_1000E61EC(2, v4, v5);
        uint64_t v8 = v7;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 432) = v6;
        *(void *)(v0 + 440) = v8;
        uint64_t v9 = *(void *)(v3 + 104);
        uint64_t v10 = *(void **)(v3 + 112);
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_1000E61EC(1, v9, v10);
        uint64_t v13 = v12;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 448) = v11;
        *(void *)(v0 + 456) = v13;
        if (qword_10013FCE8 != -1) {
          swift_once();
        }
        uint64_t v14 = qword_100156E08;
        *(void *)(v0 + 464) = qword_100156E08;
        uint64_t v15 = sub_100073F5C;
      }
      else
      {
        if (qword_10013FCE8 != -1) {
          swift_once();
        }
        uint64_t v14 = qword_100156E08;
        *(void *)(v0 + 424) = qword_100156E08;
        uint64_t v15 = sub_100073820;
      }
      return _swift_task_switch(v15, v14, 0);
    }
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007D4C(v16, (uint64_t)qword_100156CF8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Access point request without a valid remote target.", v19, 2u);
    swift_slowDealloc();
  }
  uint64_t v21 = *(void *)(v0 + 392);
  unint64_t v20 = *(void *)(v0 + 400);

  sub_10006A164(v21, v20);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  BOOL v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100073820()
{
  uint64_t v1 = *(void *)(v0 + 424);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 112);
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = *(void *)(v0 + 392);
    uint64_t v3 = *(void *)(v0 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_1000DC324(v4, v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_100072E54(v7 + 32, v0 + 56);
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
LABEL_6:
  uint64_t v8 = *(void *)(v0 + 336);
  return _swift_task_switch(sub_100073950, v8, 0);
}

uint64_t sub_100073950()
{
  if (*(void *)(v0 + 80))
  {
    if (swift_dynamicCast())
    {
      uint64_t v1 = *(void *)(v0 + 304);
      swift_getKeyPath();
      *(void *)(v0 + 312) = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__useCase))
      {
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
          goto LABEL_6;
        case 3:
          if (0x80000001000FC100 == 0x80000001000FC0B0) {
            goto LABEL_11;
          }
LABEL_6:
          char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v2) {
            goto LABEL_13;
          }
          switch(*(unsigned char *)(v0 + 484))
          {
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
              break;
            case 3:
              if (0x80000001000FC100 == 0x80000001000FC0B0) {
                goto LABEL_11;
              }
              break;
            default:
              goto LABEL_11;
          }
          char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v3) {
            goto LABEL_13;
          }
          switch(*(unsigned char *)(v0 + 484))
          {
            case 2:
              goto LABEL_11;
            default:
              char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v4) {
                goto LABEL_13;
              }
              uint64_t v17 = *(void **)(v0 + 416);
              uint64_t v18 = *(void *)(v0 + 344);
              swift_bridgeObjectRelease();
              uint64_t v19 = type metadata accessor for TaskPriority();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
              type metadata accessor for MainActor();
              swift_retain();
              uint64_t v20 = static MainActor.shared.getter();
              uint64_t v21 = (void *)swift_allocObject();
              void v21[2] = v20;
              v21[3] = &protocol witness table for MainActor;
              v21[4] = v1;
              sub_10002C340(v18, (uint64_t)&unk_1001425E8, (uint64_t)v21);
              swift_release();
              swift_release();
              swift_release();

              swift_task_dealloc();
              BOOL v22 = *(uint64_t (**)(void))(v0 + 8);
              uint64_t result = v22();
              break;
          }
          return result;
        default:
LABEL_11:
          swift_bridgeObjectRelease();
LABEL_13:
          swift_release();
          break;
      }
    }
  }
  else
  {
    sub_100017388(v0 + 56, &qword_1001444D0);
  }
  uint64_t v5 = *(void *)(*(void *)(v0 + 328) + *(int *)(v0 + 480));
  uint64_t v6 = *(void *)(v5 + 104);
  uint64_t v7 = *(void **)(v5 + 112);
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1000E61EC(2, v6, v7);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 432) = v8;
  *(void *)(v0 + 440) = v10;
  uint64_t v11 = *(void *)(v5 + 104);
  uint64_t v12 = *(void **)(v5 + 112);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000E61EC(1, v11, v12);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 448) = v13;
  *(void *)(v0 + 456) = v15;
  if (qword_10013FCE8 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100156E08;
  *(void *)(v0 + 464) = qword_100156E08;
  return _swift_task_switch(sub_100073F5C, v16, 0);
}

uint64_t sub_100073F5C()
{
  uint64_t v1 = v0[58];
  swift_beginAccess();
  if (!*(void *)(*(void *)(v1 + 112) + 16)) {
    goto LABEL_7;
  }
  uint64_t v3 = v0[54];
  uint64_t v2 = v0[55];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000DC324(v3, v2);
  if ((v4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_bridgeObjectRelease();
  swift_release();
  if (Strong)
  {
    uint64_t v6 = v0[42];

    uint64_t v7 = sub_1000740B8;
    uint64_t v8 = v6;
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v8 = v0[42];
  uint64_t v7 = sub_100074094;
LABEL_9:
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100074094()
{
  uint64_t v1 = qword_100156E08;
  *(void *)(v0 + 472) = qword_100156E08;
  return _swift_task_switch(sub_1000741FC, v1, 0);
}

uint64_t sub_1000740B8()
{
  uint64_t v1 = v0[46];
  swift_getKeyPath();
  v0[35] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v0[36] = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  uint64_t v2 = swift_release();
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v0[46];
    *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = v7;
    v0[37] = v8;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v3 = qword_100156E08;
    v0[59] = qword_100156E08;
    uint64_t v2 = (uint64_t)sub_1000741FC;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000741FC()
{
  uint64_t v1 = v0[59];
  swift_beginAccess();
  if (!*(void *)(*(void *)(v1 + 112) + 16)) {
    goto LABEL_7;
  }
  uint64_t v3 = v0[56];
  uint64_t v2 = v0[57];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000DC324(v3, v2);
  if ((v4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_bridgeObjectRelease();
  swift_release();
  if (Strong)
  {
    uint64_t v6 = v0[42];

    uint64_t v7 = sub_10007465C;
    uint64_t v8 = v6;
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v8 = v0[42];
  uint64_t v7 = sub_100074334;
LABEL_9:
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100074334()
{
  if (*(unsigned char *)(v0 + 485))
  {
LABEL_8:
    uint64_t v3 = *(void *)(v0 + 392);
    uint64_t v4 = *(void *)(v0 + 400);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1000E11E4(v3, v4);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    switch(*(unsigned char *)(v0 + 484))
    {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
        goto LABEL_4;
      case 3:
        if (0x80000001000FC100 == 0x80000001000FC0B0) {
          goto LABEL_6;
        }
LABEL_4:
        char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v1) {
          goto LABEL_8;
        }
        switch(*(unsigned char *)(v0 + 484))
        {
          case 2:
            goto LABEL_6;
          default:
            char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v2) {
              goto LABEL_8;
            }
            break;
        }
        break;
      default:
LABEL_6:
        swift_bridgeObjectRelease();
        goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(v0 + 416);
  sub_10006B014(*(void *)(v0 + 328), 0, 0, 0);

  swift_release();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10007465C()
{
  uint64_t v1 = *(void *)(v0 + 368);
  swift_getKeyPath();
  *(void *)(v0 + 256) = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *(void *)(v0 + 320) = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    JUMPOUT(0x100074A1CLL);
  }
  uint64_t v5 = *(void *)(v0 + 368);
  *(void *)(v1 + OBJC_IVAR____TtC13GameOverlayUI29RemoteAlertAccessPointContext__hideCount) = v4;
  *(void *)(v0 + 272) = v5;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 485))
  {
LABEL_9:
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 400);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1000E11E4(v8, v9);
    swift_endAccess();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    switch(*(unsigned char *)(v0 + 484))
    {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
        goto LABEL_5;
      case 3:
        if (0x80000001000FC100 == 0x80000001000FC0B0) {
          goto LABEL_7;
        }
LABEL_5:
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v6) {
          goto LABEL_9;
        }
        switch(*(unsigned char *)(v0 + 484))
        {
          case 2:
            goto LABEL_7;
          default:
            char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v7) {
              goto LABEL_9;
            }
            break;
        }
        break;
      default:
LABEL_7:
        swift_bridgeObjectRelease();
        goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void **)(v0 + 416);
  sub_10006B014(*(void *)(v0 + 328), 0, 0, 0);

  swift_release();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100074A58(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100074AB8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100074AF8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_10003E30C;
  return sub_10006D740(a1, v4, v5, v6);
}

_OWORD *sub_100074BB4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void *sub_100074BC4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, uint64_t a12)
{
  uint64_t v163 = a7;
  uint64_t v164 = a8;
  uint64_t v161 = a5;
  uint64_t v162 = a6;
  uint64_t v158 = a3;
  uint64_t v159 = a4;
  uint64_t v157 = a2;
  int v156 = a1;
  id v189 = a11;
  uint64_t v160 = type metadata accessor for InGameBannerRequiredData();
  __chkstk_darwin(v160);
  uint64_t v154 = (char *)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100005B18(&qword_100142610);
  __chkstk_darwin(v14 - 8);
  char v183 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for ActionMetrics();
  uint64_t v173 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v171 = (char *)&v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = type metadata accessor for FlowAction();
  __chkstk_darwin(v177);
  long long v175 = (char *)&v149 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_100005B18(&qword_100142618);
  uint64_t v180 = *(void *)(v174 - 8);
  uint64_t v18 = __chkstk_darwin(v174);
  uint64_t v181 = v19;
  uint64_t v182 = (uint64_t)&v149 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v192 = (uint64_t)&v149 - v20;
  uint64_t v21 = type metadata accessor for Game();
  uint64_t v190 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  v187 = (char *)&v149 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v186 = (char *)&v149 - v24;
  uint64_t v25 = sub_100005B18(&qword_100140C48);
  __chkstk_darwin(v25 - 8);
  uint64_t v150 = (char *)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100005B18(&qword_100140B48);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v184 = (uint64_t)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v151 = (uint64_t *)((char *)&v149 - v31);
  __chkstk_darwin(v30);
  id v33 = (char *)&v149 - v32;
  uint64_t v34 = type metadata accessor for OverlayBootstrap();
  __chkstk_darwin(v34 - 8);
  id v36 = (char *)&v149 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  uint64_t v38 = *(void *)(started - 8);
  uint64_t v39 = __chkstk_darwin(started);
  char v41 = (char *)&v149 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  id v43 = (char *)&v149 - v42;
  uint64_t v44 = type metadata accessor for InGameBannerView();
  uint64_t v45 = *(int *)(v44 + 20);
  uint64_t v193 = a9;
  uint64_t v46 = a9 + v45;
  if (qword_10013FCF0 != -1) {
    swift_once();
  }
  sub_10007A080(qword_100156E20 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for OverlayBootstrap);
  uint64_t v168 = sub_100005B18(&qword_10013FF50);
  State.wrappedValue.getter();
  v167 = v36;
  sub_100077428((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for OverlayBootstrap);
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v41, v43, started);
  uint64_t v170 = v46;
  v185 = v41;
  State.init(wrappedValue:)();
  id v47 = *(void (**)(char *, uint64_t))(v38 + 8);
  uint64_t v172 = v43;
  uint64_t v179 = started;
  uint64_t v165 = v47;
  uint64_t v166 = v38 + 8;
  v47(v43, started);
  type metadata accessor for GameDashboardLaunchContext();
  uint64_t v48 = swift_allocObject();
  *(unsigned char *)(v48 + 16) = 0;
  uint64_t v49 = v48 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  uint64_t v50 = type metadata accessor for LaunchDashboardAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 1, 1, v50);
  ObservationRegistrar.init()();
  uint64_t v155 = v44;
  uint64_t v51 = v193;
  id v52 = (uint64_t *)(v193 + *(int *)(v44 + 24));
  *id v52 = v48;
  v52[1] = 0;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56);
  uint64_t v188 = v21;
  v53(v33, 1, 1, v21);
  v191 = v33;
  uint64_t v178 = v38;
  id v54 = v189;
  uint64_t v169 = v48;
  if (v189)
  {
    uint64_t v55 = self;
    swift_retain();
    id v153 = v54;
    id v56 = [v153 internal];
    *(void *)&long long v207 = 0;
    id v57 = [v55 archivedDataWithRootObject:v56 requiringSecureCoding:1 error:&v207];

    id v58 = (id)v207;
    if (v57)
    {
      uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v61 = v60;

      sub_100069708(0, &qword_1001422B0);
      sub_100069708(0, &qword_1001422B8);
      uint64_t result = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      uint64_t v72 = result;
      uint64_t v152 = 0;
      if (!result) {
        goto LABEL_45;
      }
      uint64_t v73 = type metadata accessor for Date();
      uint64_t v74 = (uint64_t)v150;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v150, 1, 1, v73);
      uint64_t v75 = v151;
      sub_1000AB30C(v72, v74, v151);
      sub_1000247CC(v59, v61);
      uint64_t v76 = (uint64_t)v191;
      sub_100017388((uint64_t)v191, &qword_100140B48);

      v53((char *)v75, 0, 1, v188);
      sub_100024A74((uint64_t)v75, v76, &qword_100140B48);
    }
    else
    {
      id v65 = v58;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_10013FBB0 != -1) {
        swift_once();
      }
      uint64_t v152 = 0;
      uint64_t v66 = type metadata accessor for Logger();
      sub_100007D4C(v66, (uint64_t)qword_100156CF8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        uint64_t v70 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 138412290;
        swift_errorRetain();
        uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v207 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v70 = v71;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Game could not be serialized: %@", v69, 0xCu);
        sub_100005B18(&qword_100142A40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    uint64_t v63 = v192;
    uint64_t v64 = v193;
  }
  else
  {
    swift_retain();
    uint64_t v152 = 0;
    uint64_t v63 = v192;
    uint64_t v64 = v51;
  }
  sub_100076F18((uint64_t)v206);
  sub_100024A74((uint64_t)v206, (uint64_t)v205, &qword_100142620);
  char v77 = self;
  id v78 = [v77 authenticatedLocalPlayers];
  uint64_t v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v79 + 16))
  {
    sub_100036E88(v79 + 32, (uint64_t)&v207);
  }
  else
  {
    long long v207 = 0u;
    long long v208 = 0u;
  }
  uint64_t v80 = v188;
  swift_bridgeObjectRelease();
  if (*((void *)&v208 + 1))
  {
    sub_100069708(0, &qword_100145550);
    if (swift_dynamicCast())
    {
      id v81 = *(id *)&v200[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_100017388((uint64_t)&v207, &qword_100142A70);
  }
  id v81 = [v77 local];
LABEL_23:
  uint64_t v82 = self;
  id v153 = v81;
  id v83 = [v81 internal];
  *(void *)&long long v207 = 0;
  id v84 = [v82 archivedDataWithRootObject:v83 requiringSecureCoding:1 error:&v207];

  id v85 = (id)v207;
  if (!v84)
  {
    uint64_t v90 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_27;
  }
  uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v88 = v87;

  sub_100069708(0, &qword_1001422B0);
  sub_100069708(0, &qword_100142648);
  uint64_t v89 = v152;
  uint64_t result = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v89)
  {
    sub_1000247CC(v86, v88);
    uint64_t v64 = v193;
LABEL_27:
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    sub_100007D4C(v91, (uint64_t)qword_100156CF8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 138412290;
      swift_errorRetain();
      uint64_t v96 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v207 = v96;
      uint64_t v80 = v188;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v95 = v96;
      uint64_t v63 = v192;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Player could not be serialized: %@", v94, 0xCu);
      sub_100005B18(&qword_100142A40);
      swift_arrayDestroy();
      uint64_t v64 = v193;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_34;
  }
  if (!result)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  sub_100084EB8(result, (uint64_t)v198);
  sub_1000247CC(v86, v88);
  sub_100024A74((uint64_t)v205, (uint64_t)v200, &qword_100142620);
  sub_1000772F0(v200, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10007735C);
  long long v213 = v198[6];
  long long v214 = v198[7];
  long long v215 = v198[8];
  uint64_t v216 = v199;
  long long v209 = v198[2];
  long long v210 = v198[3];
  long long v211 = v198[4];
  long long v212 = v198[5];
  long long v207 = v198[0];
  long long v208 = v198[1];
  property wrapper backing initializer of Shelf.items(&v207);
  sub_100024A74((uint64_t)&v207, (uint64_t)v205, &qword_100142620);
  uint64_t v64 = v193;
LABEL_34:
  uint64_t v98 = v185;
  uint64_t v97 = (uint64_t)v186;
  uint64_t v99 = (uint64_t)v187;
  uint64_t v100 = v190;
  uint64_t v101 = v184;
  sub_1000170C8((uint64_t)v191, v184, &qword_100140B48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v101, 1, v80) != 1)
  {
    sub_100079EF4(v101, v97, (uint64_t (*)(void))type metadata accessor for Game);
    sub_10007A080(v97, v99, (uint64_t (*)(void))type metadata accessor for Game);
    sub_100024A74((uint64_t)v205, (uint64_t)v200, &qword_100142620);
    sub_100024A74((uint64_t)v200, (uint64_t)&v207, &qword_100142620);
    uint64_t result = (void *)sub_100076F38((uint64_t)&v207);
    if (result != 1)
    {
      sub_100024A74((uint64_t)v200, (uint64_t)v198, &qword_100142620);
      sub_1000249B4((uint64_t)v198);
      sub_100077428(v97, (uint64_t (*)(void))type metadata accessor for Game);
      uint64_t v107 = type metadata accessor for GameDashboardPageIntent();
      v196 = (ValueMetadata *)v107;
      unint64_t v197 = sub_10007A038(&qword_100142640, (void (*)(uint64_t))type metadata accessor for GameDashboardPageIntent);
      uint64_t v108 = sub_1000082EC((uint64_t *)&v195);
      sub_100079EF4(v99, (uint64_t)v108, (uint64_t (*)(void))type metadata accessor for Game);
      char v109 = (char *)v108 + *(int *)(v107 + 20);
      long long v110 = v208;
      *(_OWORD *)char v109 = v207;
      *((_OWORD *)v109 + 1) = v110;
      long long v111 = v209;
      long long v112 = v210;
      long long v113 = v212;
      *((_OWORD *)v109 + 4) = v211;
      *((_OWORD *)v109 + 5) = v113;
      *((_OWORD *)v109 + 2) = v111;
      *((_OWORD *)v109 + 3) = v112;
      long long v114 = v213;
      long long v115 = v214;
      long long v116 = v215;
      *((void *)v109 + 18) = v216;
      *((_OWORD *)v109 + 7) = v115;
      *((_OWORD *)v109 + 8) = v116;
      *((_OWORD *)v109 + 6) = v114;
      sub_100069BBC(&v195, (uint64_t)v202);
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  sub_100017388(v101, &qword_100140B48);
  sub_100024A74((uint64_t)v205, (uint64_t)v200, &qword_100142620);
  sub_100024A74((uint64_t)v200, (uint64_t)&v207, &qword_100142620);
  uint64_t result = (void *)sub_100076F38((uint64_t)&v207);
  if (result == 1)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v196 = &type metadata for PlayNowPageIntent;
  unint64_t v197 = sub_100076F50();
  uint64_t v102 = swift_allocObject();
  *(void *)&long long v195 = v102;
  long long v103 = v214;
  *(_OWORD *)(v102 + 112) = v213;
  *(_OWORD *)(v102 + 128) = v103;
  *(_OWORD *)(v102 + 144) = v215;
  *(void *)(v102 + 160) = v216;
  long long v104 = v210;
  *(_OWORD *)(v102 + 48) = v209;
  *(_OWORD *)(v102 + 64) = v104;
  long long v105 = v212;
  *(_OWORD *)(v102 + 80) = v211;
  *(_OWORD *)(v102 + 96) = v105;
  long long v106 = v208;
  *(_OWORD *)(v102 + 16) = v207;
  *(_OWORD *)(v102 + 32) = v106;
  sub_100069BBC(&v195, (uint64_t)v202);
  sub_100024A74((uint64_t)v200, (uint64_t)v198, &qword_100142620);
  sub_1000249B4((uint64_t)v198);
LABEL_39:
  uint64_t v117 = v171;
  static ActionMetrics.notInstrumented.getter();
  uint64_t v118 = v203;
  uint64_t v119 = v204;
  uint64_t v120 = sub_100006650(v202, v203);
  uint64_t v121 = v177;
  uint64_t v122 = v175;
  static FlowDestination.page<A>(whatPage:)((uint64_t)v120, v118, v119, (uint64_t *)&v175[*(int *)(v177 + 24)]);
  uint64_t v123 = static FlowActionPresentation.tabSelect.getter();
  uint64_t v125 = v124;
  *(void *)uint64_t v122 = 0x7265764F656D6167;
  *((void *)v122 + 1) = 0xEB0000000079616CLL;
  (*(void (**)(char *, char *, uint64_t))(v173 + 32))(&v122[*(int *)(v121 + 20)], v117, v176);
  long long v126 = (uint64_t *)&v122[*(int *)(v121 + 28)];
  *long long v126 = v123;
  v126[1] = v125;
  sub_10007A038(&qword_100142630, (void (*)(uint64_t))type metadata accessor for FlowAction);
  sub_10007A038(&qword_100142638, (void (*)(uint64_t))type metadata accessor for FlowAction);
  FlowAuthority.init(content:)();
  *(void *)(v63 + *(int *)(v174 + 28)) = 0;
  sub_1000170C8(v63, v64, &qword_100142618);
  uint64_t v127 = (uint64_t)v167;
  sub_10007A080(qword_100156E20 + OBJC_IVAR____TtC13GameOverlayUI24ConnectionContextManager_overlayBootstrap, (uint64_t)v167, (uint64_t (*)(void))type metadata accessor for OverlayBootstrap);
  uint64_t v128 = v168;
  State.wrappedValue.getter();
  sub_100077428(v127, (uint64_t (*)(void))type metadata accessor for OverlayBootstrap);
  uint64_t v129 = type metadata accessor for JetStartUpProcedure();
  uint64_t v130 = (uint64_t)v183;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v183, 1, 1, v129);
  uint64_t v131 = v182;
  sub_1000170C8(v63, v182, &qword_100142618);
  sub_100024A74((uint64_t)v205, (uint64_t)&v207, &qword_100142620);
  unint64_t v132 = (*(unsigned __int8 *)(v180 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
  unint64_t v133 = (v181 + v132 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v134 = swift_allocObject();
  sub_100024A74(v131, v134 + v132, &qword_100142618);
  sub_100024A74((uint64_t)&v207, v134 + v133, &qword_100142620);
  *(void *)(v134 + ((v133 + 159) & 0xFFFFFFFFFFFFFFF8)) = v169;
  swift_retain();
  sub_1000772F0(&v207, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100077224);
  uint64_t v135 = v172;
  JetStartUpCoordinator.extend(startUpProcedure:withDependencies:)();
  swift_release();
  sub_100017388(v130, &qword_100142610);
  uint64_t v136 = v179;
  v165(v98, v179);
  uint64_t v137 = v170;
  sub_100017388(v170, &qword_10013FF50);
  *(void *)(v137 + *(int *)(v128 + 28)) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v178 + 32))(v137, v135, v136);
  swift_beginAccess();
  sub_100024A74((uint64_t)v205, (uint64_t)v198, &qword_100142620);
  sub_100024A74((uint64_t)v198, (uint64_t)v200, &qword_100142620);
  if (sub_100076F38((uint64_t)v200) == 1) {
    __break(1u);
  }
  sub_100024A74((uint64_t)v198, (uint64_t)v194, &qword_100142620);
  sub_1000249B4((uint64_t)v194);
  swift_release();

  sub_100017388(v192, &qword_100142618);
  sub_100024A74((uint64_t)v205, (uint64_t)&v195, &qword_100142620);
  sub_1000772F0(&v195, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10007735C);
  long long v138 = v200[7];
  uint64_t v139 = (uint64_t)v154;
  *(_OWORD *)(v154 + 104) = v200[6];
  *(_OWORD *)(v139 + 120) = v138;
  *(_OWORD *)(v139 + 136) = v200[8];
  long long v140 = v200[3];
  *(_OWORD *)(v139 + 40) = v200[2];
  *(_OWORD *)(v139 + 56) = v140;
  long long v141 = v200[5];
  *(_OWORD *)(v139 + 72) = v200[4];
  *(_OWORD *)(v139 + 88) = v141;
  long long v142 = v200[1];
  *(_OWORD *)(v139 + 8) = v200[0];
  *(unsigned char *)uint64_t v139 = v156;
  uint64_t v143 = v157;
  *(void *)(v139 + 152) = v201;
  *(void *)(v139 + 160) = v143;
  uint64_t v144 = v159;
  uint64_t v145 = v160;
  *(void *)(v139 + 168) = v158;
  *(void *)(v139 + 176) = v144;
  uint64_t v146 = v162;
  *(void *)(v139 + 184) = v161;
  *(void *)(v139 + 192) = v146;
  uint64_t v147 = v164;
  *(void *)(v139 + 200) = v163;
  *(void *)(v139 + 208) = v147;
  *(void *)(v139 + 216) = a10;
  uint64_t v148 = v139 + *(int *)(v145 + 40);
  *(_OWORD *)(v139 + 24) = v142;
  sub_100024A74((uint64_t)v191, v148, &qword_100140B48);
  *(void *)(v139 + *(int *)(v145 + 44)) = a12;
  sub_100007188((uint64_t)v202);
  return (void *)sub_100079EF4(v139, v193 + *(int *)(v155 + 28), (uint64_t (*)(void))type metadata accessor for InGameBannerRequiredData);
}

uint64_t type metadata accessor for InGameBannerView()
{
  uint64_t result = qword_1001426C0;
  if (!qword_1001426C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007621C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v39 = a3;
  id v37 = a2;
  uint64_t v40 = type metadata accessor for Dependency();
  uint64_t v36 = *(void *)(v40 - 8);
  uint64_t v38 = (char *)v36;
  __chkstk_darwin(v40);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_100140C50);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5 - 8);
  uint64_t v9 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - v10;
  sub_100005B18(&qword_100142618);
  State.projectedValue.getter();
  sub_100005B18(&qword_100142650);
  sub_1000170C8((uint64_t)v11, (uint64_t)v9, &qword_100140C50);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  sub_100024A74((uint64_t)v9, v13 + v12, &qword_100140C50);
  Dependency.init<A>(satisfying:with:)();
  type metadata accessor for BaseObjectGraph();
  uint64_t v14 = sub_100005B18(&qword_100142658);
  uint64_t v15 = v38;
  uint64_t v16 = v38[80];
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v35 = v17 + *(void *)(v36 + 72);
  uint64_t v36 = v14;
  uint64_t v34 = v16 | 7;
  uint64_t v18 = swift_allocObject();
  long long v33 = xmmword_10010F300;
  *(_OWORD *)(v18 + 16) = xmmword_10010F300;
  uint64_t v19 = v15;
  uint64_t v20 = (void (*)(uint64_t, char *, uint64_t))*((void *)v15 + 2);
  uint64_t v21 = v40;
  v20(v18 + v17, v4, v40);
  BaseObjectGraph.__allocating_init(name:_:)();
  uint64_t v22 = (void (*)(char *, uint64_t))*((void *)v19 + 1);
  uint64_t v38 = v4;
  v22(v4, v21);
  uint64_t v23 = (uint64_t)v11;
  uint64_t v24 = v37;
  sub_100017388(v23, &qword_100140C50);
  sub_100024A74((uint64_t)v24, (uint64_t)v51, &qword_100142620);
  if (sub_100076F38((uint64_t)v51) == 1)
  {
    swift_retain();
    BaseObjectGraph.__allocating_init(name:_:)();
    uint64_t v25 = v40;
    uint64_t v26 = v38;
  }
  else
  {
    long long v47 = v51[6];
    long long v48 = v51[7];
    long long v49 = v51[8];
    uint64_t v50 = v52;
    long long v43 = v51[2];
    long long v44 = v51[3];
    long long v45 = v51[4];
    long long v46 = v51[5];
    long long v41 = v51[0];
    long long v42 = v51[1];
    swift_retain();
    sub_1000772F0(v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100077224);
    uint64_t v27 = v38;
    Dependency.init<A>(satisfying:with:)();
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = v33;
    uint64_t v29 = v28 + v17;
    uint64_t v25 = v40;
    v20(v29, v27, v40);
    BaseObjectGraph.__allocating_init(name:_:)();
    v22(v27, v25);
    uint64_t v26 = v27;
  }
  uint64_t v30 = v22;
  type metadata accessor for GameDashboardLaunchContext();
  *(void *)&long long v41 = v39;
  swift_retain();
  Dependency.init<A>(satisfying:with:)();
  swift_retain();
  dispatch thunk of BaseObjectGraph.adding(allDependenciesOf:)();
  swift_release();
  swift_retain();
  uint64_t v31 = dispatch thunk of BaseObjectGraph.adding(dependency:)();
  swift_release();
  swift_release_n();
  swift_release_n();
  v30(v26, v25);
  return v31;
}

uint64_t sub_1000766B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100005B18(&qword_100142660);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = sub_100005B18(&qword_100142650);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BaseObjectGraph();
  ActionDispatcher.init()();
  sub_1000C3910(a1, (uint64_t)v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a2, v13, v10);
  sub_1000170C8((uint64_t)v9, (uint64_t)v7, &qword_100142660);
  ActionDispatcher.next.setter();
  sub_100017388((uint64_t)v9, &qword_100142660);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10007687C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t started = type metadata accessor for JetStartUpDecoration();
  uint64_t v30 = *(void *)(started - 8);
  uint64_t v31 = started;
  __chkstk_darwin(started);
  uint64_t v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InGameBannerView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for JetStartUpCoordinator();
  uint64_t v26 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = sub_100005B18(&qword_100142708);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005B18(&qword_10013FF50);
  State.wrappedValue.getter();
  sub_10007A080(v1, (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InGameBannerView);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100079EF4((uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for InGameBannerView);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  type metadata accessor for AccessPointPageView();
  type metadata accessor for _JetViewDefaultWorking();
  type metadata accessor for _JetViewDefaultFailed();
  sub_10007A038(&qword_100142710, (void (*)(uint64_t))type metadata accessor for AccessPointPageView);
  sub_10007A038(&qword_100142718, (void (*)(uint64_t))&type metadata accessor for _JetViewDefaultWorking);
  sub_10007A038(&qword_100142720, (void (*)(uint64_t))&type metadata accessor for _JetViewDefaultFailed);
  Jet.init(startUpWith:working:failed:content:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v26);
  uint64_t v21 = v29;
  uint64_t v20 = v30;
  uint64_t v22 = v31;
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v29, enum case for JetStartUpDecoration.none(_:), v31);
  sub_100079FDC();
  uint64_t v23 = v27;
  View.startUpDecoration(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v23);
}

uint64_t sub_100076D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for InGameBannerView();
  uint64_t v7 = a2 + *(int *)(v6 + 28);
  a3[3] = type metadata accessor for InGameBannerPageIntent();
  a3[4] = sub_10007A038((unint64_t *)&unk_100140B20, (void (*)(uint64_t))type metadata accessor for InGameBannerPageIntent);
  uint64_t v8 = sub_1000082EC(a3);
  sub_10007A080(v7, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for InGameBannerRequiredData);
  uint64_t v9 = (int *)type metadata accessor for AccessPointPageView();
  uint64_t v10 = (char *)a3 + v9[5];
  uint64_t v11 = enum case for AccessPointAnchoring.topCentered(_:);
  uint64_t v12 = type metadata accessor for AccessPointAnchoring();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v11, v12);
  uint64_t v13 = (uint64_t *)(a2 + *(int *)(v6 + 24));
  uint64_t v16 = *v13;
  uint64_t v17 = v13[1];
  sub_100005B18(&qword_100142730);
  State.wrappedValue.getter();
  swift_retain();
  sub_100005B18(&qword_100142618);
  State.projectedValue.getter();
  uint64_t v14 = (uint64_t *)((char *)a3 + v9[9]);
  sub_100005B18(&qword_10013FD08);
  swift_allocObject();
  LRUMultiCache.init(keyLimit:valueLimit:)();
  uint64_t result = State.init(wrappedValue:)();
  *uint64_t v14 = v16;
  v14[1] = v17;
  *(uint64_t *)((char *)a3 + v9[6]) = v18;
  *(uint64_t *)((char *)a3 + v9[7]) = a1;
  return result;
}

double sub_100076F18(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_100076F38(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

unint64_t sub_100076F50()
{
  unint64_t result = qword_100142628;
  if (!qword_100142628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142628);
  }
  return result;
}

uint64_t sub_100076FA4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 168, 7);
}

uint64_t sub_100077020()
{
  uint64_t v1 = *(void *)(sub_100005B18(&qword_100142618) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  if (*(void *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + v4 + 96))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + 159) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100077188()
{
  uint64_t v1 = *(void *)(sub_100005B18(&qword_100142618) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + ((v3 + 159) & 0xFFFFFFFFFFFFFFF8));

  return sub_10007621C(v0 + v2, (void *)(v0 + v3), v4);
}

void sub_100077224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000196DC(a12, a13);
  }
}

void *sub_1000772F0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void sub_10007735C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015C9C(a12, a13);
  }
}

uint64_t sub_100077428(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100077488()
{
  uint64_t v1 = (int *)(sub_100005B18(&qword_100140C50) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10007758C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_100005B18(&qword_100140C50) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000766B4(v4, a1);
}

void *sub_100077600(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *a1 = *a2;
    uint64_t v32 = v31 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100005B18(&qword_100140C58);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = sub_100005B18(&qword_100142618);
    *(void *)((char *)a1 + *(int *)(v8 + 28)) = *(void *)((char *)a2 + *(int *)(v8 + 28));
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t started = type metadata accessor for JetStartUpCoordinator();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(started - 8) + 16);
    swift_retain();
    v13(v10, v11, started);
    uint64_t v14 = sub_100005B18(&qword_10013FF50);
    *(void *)&v10[*(int *)(v14 + 28)] = *(void *)&v11[*(int *)(v14 + 28)];
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    uint64_t v17 = (void *)((char *)a1 + v15);
    uint64_t v18 = (void *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v67 = a1;
    uint64_t v20 = (char *)a1 + v16;
    uint64_t v21 = (void *)((char *)a2 + v16);
    *uint64_t v20 = *((unsigned char *)a2 + v16);
    uint64_t v22 = *(void *)((char *)a2 + v16 + 16);
    *((void *)v20 + 1) = *(void *)((char *)a2 + v16 + 8);
    *((void *)v20 + 2) = v22;
    uint64_t v23 = *(void *)((char *)a2 + v16 + 32);
    *((void *)v20 + 3) = *(void *)((char *)a2 + v16 + 24);
    *((void *)v20 + 4) = v23;
    uint64_t v24 = *(void *)((char *)a2 + v16 + 48);
    *((void *)v20 + 5) = *(void *)((char *)a2 + v16 + 40);
    *((void *)v20 + 6) = v24;
    uint64_t v25 = *(void *)((char *)a2 + v16 + 64);
    *((void *)v20 + 7) = *(void *)((char *)a2 + v16 + 56);
    *((void *)v20 + 8) = v25;
    uint64_t v26 = *(void *)((char *)a2 + v16 + 80);
    *((void *)v20 + 9) = *(void *)((char *)a2 + v16 + 72);
    *((void *)v20 + 10) = v26;
    v20[88] = *((unsigned char *)a2 + v16 + 88);
    uint64_t v27 = *(void *)((char *)a2 + v16 + 104);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27)
    {
      *((void *)v20 + 12) = v21[12];
      *((void *)v20 + 13) = v27;
      uint64_t v28 = v21[15];
      *((void *)v20 + 14) = v21[14];
      *((void *)v20 + 15) = v28;
      uint64_t v29 = v21[17];
      *((void *)v20 + 16) = v21[16];
      *((void *)v20 + 17) = v29;
      uint64_t v30 = v21[19];
      *((void *)v20 + 18) = v21[18];
      *((void *)v20 + 19) = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v33 = *((_OWORD *)v21 + 7);
      *((_OWORD *)v20 + 6) = *((_OWORD *)v21 + 6);
      *((_OWORD *)v20 + 7) = v33;
      long long v34 = *((_OWORD *)v21 + 9);
      *((_OWORD *)v20 + 8) = *((_OWORD *)v21 + 8);
      *((_OWORD *)v20 + 9) = v34;
    }
    uint64_t v35 = v21[21];
    *((void *)v20 + 20) = v21[20];
    *((void *)v20 + 21) = v35;
    uint64_t v36 = v21[23];
    *((void *)v20 + 22) = v21[22];
    *((void *)v20 + 23) = v36;
    id v37 = v21 + 24;
    unint64_t v38 = v21[25];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v38 >> 60 == 15)
    {
      *((_OWORD *)v20 + 12) = *(_OWORD *)v37;
    }
    else
    {
      uint64_t v39 = *v37;
      sub_1000244CC(*v37, v38);
      *((void *)v20 + 24) = v39;
      *((void *)v20 + 25) = v38;
    }
    uint64_t v40 = v21[27];
    *((void *)v20 + 26) = v21[26];
    *((void *)v20 + 27) = v40;
    uint64_t v41 = type metadata accessor for InGameBannerRequiredData();
    uint64_t v42 = *(int *)(v41 + 40);
    long long v43 = &v20[v42];
    long long v44 = (void *)((char *)v21 + v42);
    long long v45 = (int *)type metadata accessor for Game();
    uint64_t v46 = *((void *)v45 - 1);
    long long v47 = *(unsigned int (**)(void *, uint64_t, int *))(v46 + 48);
    swift_bridgeObjectRetain();
    if (v47(v44, 1, v45))
    {
      uint64_t v48 = sub_100005B18(&qword_100140B48);
      memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      uint64_t v63 = v46;
      uint64_t v49 = v44[1];
      *(void *)long long v43 = *v44;
      *((void *)v43 + 1) = v49;
      uint64_t v50 = v44[3];
      *((void *)v43 + 2) = v44[2];
      *((void *)v43 + 3) = v50;
      uint64_t v51 = v44[5];
      *((void *)v43 + 4) = v44[4];
      *((void *)v43 + 5) = v51;
      uint64_t v52 = v45[7];
      __dst = &v43[v52];
      id v65 = (char *)v44 + v52;
      uint64_t v66 = v41;
      uint64_t v53 = type metadata accessor for Date();
      uint64_t v61 = *(void *)(v53 - 8);
      uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v64(v65, 1, v53))
      {
        uint64_t v54 = sub_100005B18(&qword_100140C48);
        memcpy(__dst, v65, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(__dst, v65, v53);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v53);
      }
      *(void *)&v43[v45[8]] = *(void *)((char *)v44 + v45[8]);
      v43[v45[9]] = *((unsigned char *)v44 + v45[9]);
      v43[v45[10]] = *((unsigned char *)v44 + v45[10]);
      v43[v45[11]] = *((unsigned char *)v44 + v45[11]);
      v43[v45[12]] = *((unsigned char *)v44 + v45[12]);
      v43[v45[13]] = *((unsigned char *)v44 + v45[13]);
      v43[v45[14]] = *((unsigned char *)v44 + v45[14]);
      uint64_t v55 = v45[15];
      id v56 = &v43[v55];
      id v57 = (void *)((char *)v44 + v55);
      uint64_t v58 = v57[1];
      *(void *)id v56 = *v57;
      *((void *)v56 + 1) = v58;
      uint64_t v59 = *(void (**)(char *, void, uint64_t, int *))(v63 + 56);
      swift_bridgeObjectRetain();
      v59(v43, 0, 1, v45);
      uint64_t v41 = v66;
    }
    *(void *)&v20[*(int *)(v41 + 44)] = *(void *)((char *)v21 + *(int *)(v41 + 44));
    swift_bridgeObjectRetain();
    return v67;
  }
  return (void *)v32;
}

uint64_t sub_100077B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_100005B18(&qword_100142618);
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(started - 8) + 8))(v5, started);
  sub_100005B18(&qword_10013FF50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = (void *)(a1 + *(int *)(a2 + 28));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7[13])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = v7[25];
  if (v8 >> 60 != 15) {
    sub_1000247CC(v7[24], v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = (char *)v7 + *(int *)(type metadata accessor for InGameBannerRequiredData() + 40);
  uint64_t v10 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = &v9[*(int *)(v10 + 28)];
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100077DCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = sub_100005B18(&qword_100142618);
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 16);
  swift_retain();
  v12(v9, v10, started);
  uint64_t v13 = sub_100005B18(&qword_10013FF50);
  *(void *)(v9 + *(int *)(v13 + 28)) = *(void *)(v10 + *(int *)(v13 + 28));
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v14);
  uint64_t v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v64 = a1;
  uint64_t v19 = a1 + v15;
  uint64_t v20 = (void *)(a2 + v15);
  *(unsigned char *)uint64_t v19 = *(unsigned char *)(a2 + v15);
  uint64_t v21 = *(void *)(a2 + v15 + 16);
  *(void *)(v19 + 8) = *(void *)(a2 + v15 + 8);
  *(void *)(v19 + 16) = v21;
  uint64_t v22 = *(void *)(a2 + v15 + 32);
  *(void *)(v19 + 24) = *(void *)(a2 + v15 + 24);
  *(void *)(v19 + 32) = v22;
  uint64_t v23 = *(void *)(a2 + v15 + 48);
  *(void *)(v19 + 40) = *(void *)(a2 + v15 + 40);
  *(void *)(v19 + 48) = v23;
  uint64_t v24 = *(void *)(a2 + v15 + 64);
  *(void *)(v19 + 56) = *(void *)(a2 + v15 + 56);
  *(void *)(v19 + 64) = v24;
  uint64_t v25 = *(void *)(a2 + v15 + 80);
  *(void *)(v19 + 72) = *(void *)(a2 + v15 + 72);
  *(void *)(v19 + 80) = v25;
  *(unsigned char *)(v19 + 88) = *(unsigned char *)(a2 + v15 + 88);
  uint64_t v26 = *(void *)(a2 + v15 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26)
  {
    *(void *)(v19 + 96) = v20[12];
    *(void *)(v19 + 104) = v26;
    uint64_t v27 = v20[15];
    *(void *)(v19 + 112) = v20[14];
    *(void *)(v19 + 120) = v27;
    uint64_t v28 = v20[17];
    *(void *)(v19 + 128) = v20[16];
    *(void *)(v19 + 136) = v28;
    uint64_t v29 = v20[19];
    *(void *)(v19 + 144) = v20[18];
    *(void *)(v19 + 152) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *((_OWORD *)v20 + 7);
    *(_OWORD *)(v19 + 96) = *((_OWORD *)v20 + 6);
    *(_OWORD *)(v19 + 112) = v30;
    long long v31 = *((_OWORD *)v20 + 9);
    *(_OWORD *)(v19 + 128) = *((_OWORD *)v20 + 8);
    *(_OWORD *)(v19 + 144) = v31;
  }
  uint64_t v32 = v20[21];
  *(void *)(v19 + 160) = v20[20];
  *(void *)(v19 + 168) = v32;
  uint64_t v33 = v20[23];
  *(void *)(v19 + 176) = v20[22];
  *(void *)(v19 + 184) = v33;
  long long v34 = v20 + 24;
  unint64_t v35 = v20[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)(v19 + 192) = *(_OWORD *)v34;
  }
  else
  {
    uint64_t v36 = *v34;
    sub_1000244CC(*v34, v35);
    *(void *)(v19 + 192) = v36;
    *(void *)(v19 + 200) = v35;
  }
  uint64_t v37 = v20[27];
  *(void *)(v19 + 208) = v20[26];
  *(void *)(v19 + 216) = v37;
  uint64_t v38 = type metadata accessor for InGameBannerRequiredData();
  uint64_t v39 = *(int *)(v38 + 40);
  uint64_t v40 = (void *)(v19 + v39);
  uint64_t v41 = (void *)((char *)v20 + v39);
  uint64_t v42 = (int *)type metadata accessor for Game();
  uint64_t v43 = *((void *)v42 - 1);
  long long v44 = *(unsigned int (**)(void *, uint64_t, int *))(v43 + 48);
  swift_bridgeObjectRetain();
  if (v44(v41, 1, v42))
  {
    uint64_t v45 = sub_100005B18(&qword_100140B48);
    memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    uint64_t v62 = v43;
    uint64_t v63 = v38;
    uint64_t v46 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v46;
    uint64_t v47 = v41[3];
    v40[2] = v41[2];
    void v40[3] = v47;
    uint64_t v48 = v41[5];
    v40[4] = v41[4];
    uint64_t v40[5] = v48;
    uint64_t v49 = v42[7];
    unint64_t v60 = (char *)v41 + v49;
    __dst = (char *)v40 + v49;
    uint64_t v50 = type metadata accessor for Date();
    uint64_t v58 = *(void *)(v50 - 8);
    uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59(v60, 1, v50))
    {
      uint64_t v51 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v60, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(__dst, v60, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(__dst, 0, 1, v50);
    }
    *(void *)((char *)v40 + v42[8]) = *(void *)((char *)v41 + v42[8]);
    *((unsigned char *)v40 + v42[9]) = *((unsigned char *)v41 + v42[9]);
    *((unsigned char *)v40 + v42[10]) = *((unsigned char *)v41 + v42[10]);
    *((unsigned char *)v40 + v42[11]) = *((unsigned char *)v41 + v42[11]);
    *((unsigned char *)v40 + v42[12]) = *((unsigned char *)v41 + v42[12]);
    *((unsigned char *)v40 + v42[13]) = *((unsigned char *)v41 + v42[13]);
    *((unsigned char *)v40 + v42[14]) = *((unsigned char *)v41 + v42[14]);
    uint64_t v52 = v42[15];
    uint64_t v53 = (void *)((char *)v40 + v52);
    uint64_t v54 = (void *)((char *)v41 + v52);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    id v56 = *(void (**)(void *, void, uint64_t, int *))(v62 + 56);
    swift_bridgeObjectRetain();
    v56(v40, 0, 1, v42);
    uint64_t v38 = v63;
  }
  *(void *)(v19 + *(int *)(v38 + 44)) = *(void *)((char *)v20 + *(int *)(v38 + 44));
  swift_bridgeObjectRetain();
  return v64;
}

uint64_t sub_1000782A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = sub_100005B18(&qword_100142618);
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  swift_retain();
  swift_release();
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 24))(v9, v10, started);
  uint64_t v12 = sub_100005B18(&qword_10013FF50);
  *(void *)(v9 + *(int *)(v12 + 28)) = *(void *)(v10 + *(int *)(v12 + 28));
  swift_retain();
  swift_release();
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_retain();
  swift_release();
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_retain();
  swift_release();
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)(a2 + v16);
  *(void *)(v17 + 8) = *(void *)(a2 + v16 + 8);
  *(void *)(v17 + 16) = *(void *)(a2 + v16 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = *(void *)(v18 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v17 + 56) = *(void *)(v18 + 56);
  *(void *)(v17 + 64) = *(void *)(v18 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v17 + 72) = *(void *)(v18 + 72);
  *(void *)(v17 + 80) = *(void *)(v18 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 88) = *(unsigned char *)(v18 + 88);
  uint64_t v19 = (_OWORD *)(v17 + 96);
  uint64_t v20 = (long long *)(v18 + 96);
  uint64_t v21 = *(void *)(v18 + 104);
  if (*(void *)(v17 + 104))
  {
    if (v21)
    {
      *(void *)(v17 + 96) = *(void *)(v18 + 96);
      *(void *)(v17 + 104) = *(void *)(v18 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v17 + 112) = *(void *)(v18 + 112);
      *(void *)(v17 + 120) = *(void *)(v18 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v17 + 128) = *(void *)(v18 + 128);
      *(void *)(v17 + 136) = *(void *)(v18 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v17 + 144) = *(void *)(v18 + 144);
      *(void *)(v17 + 152) = *(void *)(v18 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100006D1C(v17 + 96);
      long long v22 = *(_OWORD *)(v18 + 144);
      long long v24 = *v20;
      long long v23 = *(_OWORD *)(v18 + 112);
      *(_OWORD *)(v17 + 128) = *(_OWORD *)(v18 + 128);
      *(_OWORD *)(v17 + 144) = v22;
      *uint64_t v19 = v24;
      *(_OWORD *)(v17 + 112) = v23;
    }
  }
  else if (v21)
  {
    *(void *)(v17 + 96) = *(void *)(v18 + 96);
    *(void *)(v17 + 104) = *(void *)(v18 + 104);
    *(void *)(v17 + 112) = *(void *)(v18 + 112);
    *(void *)(v17 + 120) = *(void *)(v18 + 120);
    *(void *)(v17 + 128) = *(void *)(v18 + 128);
    *(void *)(v17 + 136) = *(void *)(v18 + 136);
    *(void *)(v17 + 144) = *(void *)(v18 + 144);
    *(void *)(v17 + 152) = *(void *)(v18 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v25 = *v20;
    long long v26 = *(_OWORD *)(v18 + 112);
    long long v27 = *(_OWORD *)(v18 + 144);
    *(_OWORD *)(v17 + 128) = *(_OWORD *)(v18 + 128);
    *(_OWORD *)(v17 + 144) = v27;
    *uint64_t v19 = v25;
    *(_OWORD *)(v17 + 112) = v26;
  }
  *(void *)(v17 + 160) = *(void *)(v18 + 160);
  *(void *)(v17 + 168) = *(void *)(v18 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v17 + 176) = *(void *)(v18 + 176);
  *(void *)(v17 + 184) = *(void *)(v18 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = (uint64_t *)(v18 + 192);
  unint64_t v29 = *(void *)(v18 + 200);
  if (*(void *)(v17 + 200) >> 60 == 15)
  {
    if (v29 >> 60 != 15)
    {
      uint64_t v30 = *v28;
      sub_1000244CC(*v28, *(void *)(v18 + 200));
      *(void *)(v17 + 192) = v30;
      *(void *)(v17 + 200) = v29;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v29 >> 60 == 15)
  {
    sub_100078C08(v17 + 192);
LABEL_13:
    *(_OWORD *)(v17 + 192) = *(_OWORD *)v28;
    goto LABEL_15;
  }
  uint64_t v31 = *v28;
  sub_1000244CC(*v28, *(void *)(v18 + 200));
  uint64_t v32 = *(void *)(v17 + 192);
  unint64_t v33 = *(void *)(v17 + 200);
  *(void *)(v17 + 192) = v31;
  *(void *)(v17 + 200) = v29;
  sub_1000247CC(v32, v33);
LABEL_15:
  *(void *)(v17 + 208) = *(void *)(v18 + 208);
  *(void *)(v17 + 216) = *(void *)(v18 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = type metadata accessor for InGameBannerRequiredData();
  uint64_t v34 = *(int *)(v70 + 40);
  unint64_t v35 = (void *)(v17 + v34);
  uint64_t v36 = (void *)(v18 + v34);
  uint64_t v37 = (int *)type metadata accessor for Game();
  uint64_t v38 = *((void *)v37 - 1);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, int *))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (v41)
    {
      sub_100077428((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_21;
    }
    uint64_t v69 = a1;
    *unint64_t v35 = *v36;
    v35[1] = v36[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _OWORD v35[2] = v36[2];
    v35[3] = v36[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35[4] = v36[4];
    v35[5] = v36[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v46 = v37[7];
    uint64_t v47 = (char *)v35 + v46;
    uint64_t v48 = (char *)v36 + v46;
    uint64_t v49 = type metadata accessor for Date();
    uint64_t v65 = *(void *)(v49 - 8);
    uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
    __dsta = v47;
    LODWORD(v47) = v50(v47, 1, v49);
    int v51 = v50(v48, 1, v49);
    if (v47)
    {
      if (!v51)
      {
        (*(void (**)(void *, char *, uint64_t))(v65 + 16))(__dsta, v48, v49);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(__dsta, 0, 1, v49);
        goto LABEL_32;
      }
      size_t v52 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v53 = __dsta;
    }
    else
    {
      if (!v51)
      {
        (*(void (**)(void *, char *, uint64_t))(v65 + 24))(__dsta, v48, v49);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v65 + 8))(__dsta, v49);
      size_t v52 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v53 = __dsta;
    }
    memcpy(v53, v48, v52);
LABEL_32:
    a1 = v69;
    *(void *)((char *)v35 + v37[8]) = *(void *)((char *)v36 + v37[8]);
    *((unsigned char *)v35 + v37[9]) = *((unsigned char *)v36 + v37[9]);
    *((unsigned char *)v35 + v37[10]) = *((unsigned char *)v36 + v37[10]);
    *((unsigned char *)v35 + v37[11]) = *((unsigned char *)v36 + v37[11]);
    *((unsigned char *)v35 + v37[12]) = *((unsigned char *)v36 + v37[12]);
    *((unsigned char *)v35 + v37[13]) = *((unsigned char *)v36 + v37[13]);
    *((unsigned char *)v35 + v37[14]) = *((unsigned char *)v36 + v37[14]);
    uint64_t v58 = v37[15];
    uint64_t v59 = (void *)((char *)v35 + v58);
    unint64_t v60 = (void *)((char *)v36 + v58);
    *uint64_t v59 = *v60;
    v59[1] = v60[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if (v41)
  {
LABEL_21:
    uint64_t v45 = sub_100005B18(&qword_100140B48);
    memcpy(v35, v36, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_33;
  }
  *unint64_t v35 = *v36;
  v35[1] = v36[1];
  _OWORD v35[2] = v36[2];
  v35[3] = v36[3];
  v35[4] = v36[4];
  v35[5] = v36[5];
  uint64_t v42 = v37[7];
  __dst = (char *)v35 + v42;
  uint64_t v68 = a1;
  uint64_t v63 = (char *)v36 + v42;
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v43 - 8);
  uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v64(v63, 1, v43))
  {
    uint64_t v44 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v63, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(__dst, v63, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(__dst, 0, 1, v43);
  }
  a1 = v68;
  *(void *)((char *)v35 + v37[8]) = *(void *)((char *)v36 + v37[8]);
  *((unsigned char *)v35 + v37[9]) = *((unsigned char *)v36 + v37[9]);
  *((unsigned char *)v35 + v37[10]) = *((unsigned char *)v36 + v37[10]);
  *((unsigned char *)v35 + v37[11]) = *((unsigned char *)v36 + v37[11]);
  *((unsigned char *)v35 + v37[12]) = *((unsigned char *)v36 + v37[12]);
  *((unsigned char *)v35 + v37[13]) = *((unsigned char *)v36 + v37[13]);
  *((unsigned char *)v35 + v37[14]) = *((unsigned char *)v36 + v37[14]);
  uint64_t v54 = v37[15];
  uint64_t v55 = (void *)((char *)v35 + v54);
  id v56 = (void *)((char *)v36 + v54);
  *uint64_t v55 = *v56;
  v55[1] = v56[1];
  id v57 = *(void (**)(void *, void, uint64_t, int *))(v38 + 56);
  swift_bridgeObjectRetain();
  v57(v35, 0, 1, v37);
LABEL_33:
  *(void *)(v17 + *(int *)(v70 + 44)) = *(void *)(v18 + *(int *)(v70 + 44));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100078C08(uint64_t a1)
{
  return a1;
}

uint64_t sub_100078C5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = sub_100005B18(&qword_100142618);
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 32))(v9, v10, started);
  uint64_t v12 = sub_100005B18(&qword_10013FF50);
  *(void *)(v9 + *(int *)(v12 + 28)) = *(void *)(v10 + *(int *)(v12 + 28));
  uint64_t v13 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)(a2 + v13);
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(a2 + v13 + 104);
  *(_OWORD *)(v14 + 120) = *(_OWORD *)(a2 + v13 + 120);
  *(_OWORD *)(v14 + 136) = *(_OWORD *)(a2 + v13 + 136);
  *(void *)(v14 + 152) = *(void *)(a2 + v13 + 152);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a2 + v13 + 40);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a2 + v13 + 56);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(a2 + v13 + 72);
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(a2 + v13 + 88);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + v13 + 8);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a2 + v13 + 24);
  long long v16 = *(_OWORD *)(a2 + v13 + 176);
  *(_OWORD *)(v14 + 160) = *(_OWORD *)(a2 + v13 + 160);
  *(_OWORD *)(v14 + 176) = v16;
  long long v17 = *(_OWORD *)(a2 + v13 + 208);
  *(_OWORD *)(v14 + 192) = *(_OWORD *)(a2 + v13 + 192);
  *(_OWORD *)(v14 + 208) = v17;
  uint64_t v18 = type metadata accessor for InGameBannerRequiredData();
  uint64_t v19 = *(int *)(v18 + 40);
  uint64_t v20 = (_OWORD *)(v14 + v19);
  uint64_t v21 = (_OWORD *)(v15 + v19);
  long long v22 = (int *)type metadata accessor for Game();
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100005B18(&qword_100140B48);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v32 = v18;
    long long v25 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v25;
    v20[2] = v21[2];
    uint64_t v26 = v22[7];
    unint64_t v33 = (char *)v20 + v26;
    long long v27 = (char *)v21 + v26;
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_100005B18(&qword_100140C48);
      memcpy(v33, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
    }
    *(void *)((char *)v20 + v22[8]) = *(void *)((char *)v21 + v22[8]);
    *((unsigned char *)v20 + v22[9]) = *((unsigned char *)v21 + v22[9]);
    *((unsigned char *)v20 + v22[10]) = *((unsigned char *)v21 + v22[10]);
    *((unsigned char *)v20 + v22[11]) = *((unsigned char *)v21 + v22[11]);
    *((unsigned char *)v20 + v22[12]) = *((unsigned char *)v21 + v22[12]);
    *((unsigned char *)v20 + v22[13]) = *((unsigned char *)v21 + v22[13]);
    *((unsigned char *)v20 + v22[14]) = *((unsigned char *)v21 + v22[14]);
    *(_OWORD *)((char *)v20 + v22[15]) = *(_OWORD *)((char *)v21 + v22[15]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
    uint64_t v18 = v32;
  }
  *(void *)(v14 + *(int *)(v18 + 44)) = *(void *)(v15 + *(int *)(v18 + 44));
  return a1;
}

uint64_t sub_100079008(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = sub_100005B18(&qword_100142618);
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  swift_release();
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 40))(v9, v10, started);
  uint64_t v12 = sub_100005B18(&qword_10013FF50);
  *(void *)(v9 + *(int *)(v12 + 28)) = *(void *)(v10 + *(int *)(v12 + 28));
  swift_release();
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_release();
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_release();
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)(a2 + v16);
  uint64_t v19 = *(void *)(a2 + v16 + 16);
  *(void *)(v17 + 8) = *(void *)(a2 + v16 + 8);
  *(void *)(v17 + 16) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v18 + 32);
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v18 + 48);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  *(void *)(v17 + 48) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v18 + 64);
  *(void *)(v17 + 56) = *(void *)(v18 + 56);
  *(void *)(v17 + 64) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v18 + 80);
  *(void *)(v17 + 72) = *(void *)(v18 + 72);
  *(void *)(v17 + 80) = v23;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 88) = *(unsigned char *)(v18 + 88);
  if (*(void *)(v17 + 104))
  {
    uint64_t v24 = *(void *)(v18 + 104);
    if (v24)
    {
      *(void *)(v17 + 96) = *(void *)(v18 + 96);
      *(void *)(v17 + 104) = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v18 + 120);
      *(void *)(v17 + 112) = *(void *)(v18 + 112);
      *(void *)(v17 + 120) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v18 + 136);
      *(void *)(v17 + 128) = *(void *)(v18 + 128);
      *(void *)(v17 + 136) = v26;
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v18 + 152);
      *(void *)(v17 + 144) = *(void *)(v18 + 144);
      *(void *)(v17 + 152) = v27;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100006D1C(v17 + 96);
  }
  long long v28 = *(_OWORD *)(v18 + 112);
  *(_OWORD *)(v17 + 96) = *(_OWORD *)(v18 + 96);
  *(_OWORD *)(v17 + 112) = v28;
  long long v29 = *(_OWORD *)(v18 + 144);
  *(_OWORD *)(v17 + 128) = *(_OWORD *)(v18 + 128);
  *(_OWORD *)(v17 + 144) = v29;
LABEL_6:
  uint64_t v30 = *(void *)(v18 + 168);
  *(void *)(v17 + 160) = *(void *)(v18 + 160);
  *(void *)(v17 + 168) = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v18 + 184);
  *(void *)(v17 + 176) = *(void *)(v18 + 176);
  *(void *)(v17 + 184) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = (_OWORD *)(v18 + 192);
  unint64_t v33 = *(void *)(v17 + 200);
  if (v33 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(v17 + 192) = *v32;
    goto LABEL_11;
  }
  unint64_t v34 = *(void *)(v18 + 200);
  if (v34 >> 60 == 15)
  {
    sub_100078C08(v17 + 192);
    goto LABEL_9;
  }
  uint64_t v35 = *(void *)(v17 + 192);
  *(void *)(v17 + 192) = *(void *)v32;
  *(void *)(v17 + 200) = v34;
  sub_1000247CC(v35, v33);
LABEL_11:
  uint64_t v36 = *(void *)(v18 + 216);
  *(void *)(v17 + 208) = *(void *)(v18 + 208);
  *(void *)(v17 + 216) = v36;
  swift_bridgeObjectRelease();
  uint64_t v72 = type metadata accessor for InGameBannerRequiredData();
  uint64_t v37 = *(int *)(v72 + 40);
  uint64_t v38 = (void *)(v17 + v37);
  uint64_t v39 = (void *)(v18 + v37);
  int v40 = (int *)type metadata accessor for Game();
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(uint64_t (**)(void *, uint64_t, int *))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (v44)
    {
      sub_100077428((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_17;
    }
    uint64_t v52 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v52;
    swift_bridgeObjectRelease();
    uint64_t v53 = v39[3];
    v38[2] = v39[2];
    v38[3] = v53;
    swift_bridgeObjectRelease();
    uint64_t v54 = v39[5];
    v38[4] = v39[4];
    v38[5] = v54;
    swift_bridgeObjectRelease();
    uint64_t v55 = v40[7];
    id v56 = (char *)v38 + v55;
    __dsta = (char *)v39 + v55;
    uint64_t v57 = type metadata accessor for Date();
    uint64_t v68 = *(void *)(v57 - 8);
    uint64_t v69 = v56;
    uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
    LODWORD(v56) = v58(v56, 1, v57);
    int v59 = v58(__dsta, 1, v57);
    if (v56)
    {
      if (!v59)
      {
        (*(void (**)(void *, char *, uint64_t))(v68 + 32))(v69, __dsta, v57);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v57);
        goto LABEL_28;
      }
      size_t v60 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v61 = v69;
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(void *, char *, uint64_t))(v68 + 40))(v69, __dsta, v57);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v68 + 8))(v69, v57);
      size_t v60 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v61 = v69;
    }
    memcpy(v61, __dsta, v60);
LABEL_28:
    *(void *)((char *)v38 + v40[8]) = *(void *)((char *)v39 + v40[8]);
    *((unsigned char *)v38 + v40[9]) = *((unsigned char *)v39 + v40[9]);
    *((unsigned char *)v38 + v40[10]) = *((unsigned char *)v39 + v40[10]);
    *((unsigned char *)v38 + v40[11]) = *((unsigned char *)v39 + v40[11]);
    *((unsigned char *)v38 + v40[12]) = *((unsigned char *)v39 + v40[12]);
    *((unsigned char *)v38 + v40[13]) = *((unsigned char *)v39 + v40[13]);
    *((unsigned char *)v38 + v40[14]) = *((unsigned char *)v39 + v40[14]);
    uint64_t v62 = v40[15];
    uint64_t v63 = (void *)((char *)v38 + v62);
    uint64_t v64 = (void *)((char *)v39 + v62);
    uint64_t v66 = *v64;
    uint64_t v65 = v64[1];
    *uint64_t v63 = v66;
    v63[1] = v65;
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (v44)
  {
LABEL_17:
    uint64_t v51 = sub_100005B18(&qword_100140B48);
    memcpy(v38, v39, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_29;
  }
  long long v45 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v45;
  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  uint64_t v46 = v40[7];
  __dst = (char *)v38 + v46;
  uint64_t v47 = (char *)v39 + v46;
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    uint64_t v50 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v47, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(__dst, v47, v48);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(__dst, 0, 1, v48);
  }
  *(void *)((char *)v38 + v40[8]) = *(void *)((char *)v39 + v40[8]);
  *((unsigned char *)v38 + v40[9]) = *((unsigned char *)v39 + v40[9]);
  *((unsigned char *)v38 + v40[10]) = *((unsigned char *)v39 + v40[10]);
  *((unsigned char *)v38 + v40[11]) = *((unsigned char *)v39 + v40[11]);
  *((unsigned char *)v38 + v40[12]) = *((unsigned char *)v39 + v40[12]);
  *((unsigned char *)v38 + v40[13]) = *((unsigned char *)v39 + v40[13]);
  *((unsigned char *)v38 + v40[14]) = *((unsigned char *)v39 + v40[14]);
  *(_OWORD *)((char *)v38 + v40[15]) = *(_OWORD *)((char *)v39 + v40[15]);
  (*(void (**)(void *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
LABEL_29:
  *(void *)(v17 + *(int *)(v72 + 44)) = *(void *)(v18 + *(int *)(v72 + 44));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10007971C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100079730);
}

uint64_t sub_100079730(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100142618);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100005B18(&qword_10013FF50);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = type metadata accessor for InGameBannerRequiredData();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[7];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_1000798B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000798CC);
}

uint64_t sub_1000798CC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100005B18(&qword_100142618);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = sub_100005B18(&qword_10013FF50);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = type metadata accessor for InGameBannerRequiredData();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100079A54()
{
  sub_100079B60();
  if (v0 <= 0x3F)
  {
    sub_100007A2C();
    if (v1 <= 0x3F)
    {
      type metadata accessor for InGameBannerRequiredData();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_100079B60()
{
  if (!qword_1001426D0)
  {
    sub_10000B448(&qword_100140C58);
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001426D0);
    }
  }
}

uint64_t sub_100079BBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100079BD8()
{
  uint64_t v1 = (int *)(type metadata accessor for InGameBannerView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = sub_100005B18(&qword_100140C58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  sub_100005B18(&qword_100142618);
  swift_release();
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t started = type metadata accessor for JetStartUpCoordinator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(started - 8) + 8))(v6, started);
  sub_100005B18(&qword_10013FF50);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = (void *)(v0 + v3 + v1[9]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8[13])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v9 = v8[25];
  if (v9 >> 60 != 15) {
    sub_1000247CC(v8[24], v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = (char *)v8 + *(int *)(type metadata accessor for InGameBannerRequiredData() + 40);
  uint64_t v11 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v16 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = &v10[*(int *)(v11 + 28)];
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v16;
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100079EF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100079F5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for InGameBannerView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100076D3C(a1, v6, a2);
}

unint64_t sub_100079FDC()
{
  unint64_t result = qword_100142728;
  if (!qword_100142728)
  {
    sub_10000B448(&qword_100142708);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142728);
  }
  return result;
}

uint64_t sub_10007A038(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007A080(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007A0E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static FlowDestination.page<A>(whatPage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = sub_1000082EC(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);

  return v7(v6, a1, a2);
}

uint64_t FlowDestination.callAsFunction(asPartOf:)@<X0>(unsigned char *a1@<X8>)
{
  sub_10007A230(v1, (uint64_t)v5);
  if (v6) {
    sub_10007A2B0((uint64_t)v5);
  }
  uint64_t result = _ConditionalContent<>.init(storage:)();
  *a1 = v4;
  return result;
}

uint64_t sub_10007A230(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t sub_10007A2B0(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142738);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007A310()
{
  if (*v0) {
    return 1701273968;
  }
  else {
    return 0x7974706D65;
  }
}

uint64_t sub_10007A340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007B6B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007A368(uint64_t a1)
{
  unint64_t v2 = sub_10007A8C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A3A4(uint64_t a1)
{
  unint64_t v2 = sub_10007A8C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A3E0(uint64_t a1)
{
  unint64_t v2 = sub_10007A96C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A41C(uint64_t a1)
{
  unint64_t v2 = sub_10007A96C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A458()
{
  return 0x6567615074616877;
}

uint64_t sub_10007A470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6567615074616877 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10007A508(uint64_t a1)
{
  unint64_t v2 = sub_10007A918();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A544(uint64_t a1)
{
  unint64_t v2 = sub_10007A918();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowDestination.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142740);
  uint64_t v16 = *(void *)(v2 - 8);
  uint64_t v17 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100005B18(&qword_100142748);
  uint64_t v15 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100142750);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10007A8C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10007A230(v18, (uint64_t)&v21);
  if (*((void *)&v22 + 1))
  {
    v19[0] = v21;
    v19[1] = v22;
    uint64_t v20 = v23;
    char v24 = 1;
    sub_10007A918();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_100005B18(&qword_100142738);
    sub_10007AE8C(&qword_100142768);
    uint64_t v12 = v17;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v12);
    sub_10007A2B0((uint64_t)v19);
  }
  else
  {
    LOBYTE(v19[0]) = 0;
    sub_10007A96C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_10007A8C4()
{
  unint64_t result = qword_100142758;
  if (!qword_100142758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142758);
  }
  return result;
}

unint64_t sub_10007A918()
{
  unint64_t result = qword_100142760;
  if (!qword_100142760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142760);
  }
  return result;
}

unint64_t sub_10007A96C()
{
  unint64_t result = qword_100142770;
  if (!qword_100142770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142770);
  }
  return result;
}

uint64_t FlowDestination.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_100005B18(&qword_100142778);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100142780);
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_100142788);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v27 = a1;
  sub_100006650(a1, v14);
  sub_10007A8C4();
  uint64_t v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v16 = v26;
    uint64_t v31 = v11;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1)
    {
      if (*(unsigned char *)(v17 + 32))
      {
        LOBYTE(v28) = 1;
        sub_10007A918();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        sub_100005B18(&qword_100142738);
        sub_10007AE8C(&qword_100142790);
        uint64_t v22 = v23;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
        sub_100069BBC(&v28, (uint64_t)v29);
      }
      else
      {
        LOBYTE(v28) = 0;
        sub_10007A96C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
        memset(v29, 0, sizeof(v29));
        uint64_t v30 = 0;
      }
      sub_100069BBC(v29, v25);
    }
    else
    {
      uint64_t v18 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v20 = v19;
      sub_100005B18(&qword_100140060);
      *uint64_t v20 = &type metadata for FlowDestination;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, enum case for DecodingError.typeMismatch(_:), v18);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v10);
    }
  }
  return sub_100007188((uint64_t)v27);
}

uint64_t sub_10007AE8C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(&qword_100142738);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007AED4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FlowDestination.init(from:)(a1, a2);
}

uint64_t sub_10007AEEC(void *a1)
{
  return FlowDestination.encode(to:)(a1);
}

uint64_t destroy for FlowDestination(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return sub_100007188(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for FlowDestination(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for FlowDestination(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_100007188(a1);
    goto LABEL_7;
  }
  sub_100019BC0((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for FlowDestination(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    sub_100007188(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowDestination(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FlowDestination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

uint64_t sub_10007B14C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_10007B164(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowDestination()
{
  return &type metadata for FlowDestination;
}

unint64_t sub_10007B1A4()
{
  unint64_t result = qword_100142798;
  if (!qword_100142798)
  {
    sub_10000B448(&qword_1001427A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142798);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FlowDestination.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007B2DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowDestination.CodingKeys()
{
  return &type metadata for FlowDestination.CodingKeys;
}

ValueMetadata *type metadata accessor for FlowDestination.EmptyCodingKeys()
{
  return &type metadata for FlowDestination.EmptyCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for FlowDestination.PageCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10007B3C0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowDestination.PageCodingKeys()
{
  return &type metadata for FlowDestination.PageCodingKeys;
}

unint64_t sub_10007B3FC()
{
  unint64_t result = qword_1001427A8;
  if (!qword_1001427A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427A8);
  }
  return result;
}

unint64_t sub_10007B454()
{
  unint64_t result = qword_1001427B0;
  if (!qword_1001427B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427B0);
  }
  return result;
}

unint64_t sub_10007B4AC()
{
  unint64_t result = qword_1001427B8;
  if (!qword_1001427B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427B8);
  }
  return result;
}

unint64_t sub_10007B504()
{
  unint64_t result = qword_1001427C0;
  if (!qword_1001427C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427C0);
  }
  return result;
}

unint64_t sub_10007B55C()
{
  unint64_t result = qword_1001427C8;
  if (!qword_1001427C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427C8);
  }
  return result;
}

unint64_t sub_10007B5B4()
{
  unint64_t result = qword_1001427D0;
  if (!qword_1001427D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427D0);
  }
  return result;
}

unint64_t sub_10007B60C()
{
  unint64_t result = qword_1001427D8;
  if (!qword_1001427D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427D8);
  }
  return result;
}

unint64_t sub_10007B664()
{
  unint64_t result = qword_1001427E0;
  if (!qword_1001427E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001427E0);
  }
  return result;
}

uint64_t sub_10007B6B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7974706D65 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701273968 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

id sub_10007B8EC()
{
  return sub_10007E944(type metadata accessor for GameModeButton);
}

uint64_t type metadata accessor for GameModeButton()
{
  return self;
}

void sub_10007B938(double a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer;
  [*(id *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer) invalidate];
  if (a1 <= 0.0)
  {
    uint64_t v9 = *(void **)(v1 + v3);
    *(void *)(v1 + v3) = 0;
  }
  else
  {
    unsigned int v4 = self;
    uint64_t v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v10[4] = sub_10007EE44;
    v10[5] = v5;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_10007BDE0;
    v10[3] = &unk_1001331D0;
    char v6 = _Block_copy(v10);
    swift_release();
    id v7 = [v4 scheduledTimerWithTimeInterval:0 repeats:v6 block:a1];
    _Block_release(v6);
    uint64_t v8 = *(void **)(v1 + v3);
    *(void *)(v1 + v3) = v7;
  }
}

void sub_10007BA9C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource;
    uint64_t v3 = *(NSObject **)(Strong + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource);
    if (v3)
    {
      swift_bridgeObjectRetain();
      unsigned int v4 = v3;
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v6 = String._bridgeToObjectiveC()();
      sub_1000B9B28((uint64_t)&_swiftEmptyArrayStorage);
      sub_100005B18(&qword_100142A58);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v16 = 0;
      id v8 = [v4 revokePresentableWithRequestIdentifier:v5 reason:v6 animated:1 userInfo:isa error:&v16];

      if (!v8)
      {
        id v10 = v16;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_10013FBB0 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_100007D4C(v11, (uint64_t)qword_100156CF8);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v3 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v3, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          uint64_t v14 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 138412290;
          swift_errorRetain();
          uint64_t v15 = (void *)_swift_stdlib_bridgeErrorToNSError();
          id v16 = v15;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v14 = v15;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v3, v12, "Game Mode banner revoke error: %@", v13, 0xCu);
          sub_100005B18(&qword_100142A40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          return;
        }

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        goto LABEL_6;
      }
      id v9 = v16;

      uint64_t v3 = *(NSObject **)&v1[v2];
    }
    *(void *)&v1[v2] = 0;

LABEL_6:
  }
}

void sub_10007BDE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_10007BF04()
{
  uint64_t v1 = v0;
  v56.receiver = v0;
  v56.super_class = (Class)type metadata accessor for GamePolicyBannerViewController();
  [super viewDidLoad];
  type metadata accessor for GameModeButton();
  id v2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v3 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView;
  id v4 = *(void **)&v0[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView];
  *(void *)&v0[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView] = v2;

  NSString v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_19;
  }
  [v5 addTarget:v0 action:"toggleGameMode:" forControlEvents:64];
  NSString v6 = *(void **)&v0[v3];
  if (!v6)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v7 = [v6 widthAnchor];
  id v8 = [v7 constraintEqualToConstant:36.0];

  [v8 setActive:1];
  id v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v10 = [v9 heightAnchor];
  id v11 = [v10 constraintEqualToConstant:36.0];

  [v11 setActive:1];
  os_log_type_t v12 = *(void **)&v1[v3];
  if (!v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  [v12 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v13 = *(void **)&v1[v3];
  if (!v13)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  [v13 _setCornerRadius:18.0];
  uint64_t v14 = *(void **)&v1[v3];
  if (!v14)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  id v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [self systemImageNamed:v16];

  [v15 setImage:v17 forState:0];
  uint64_t v18 = *(void **)&v1[v3];
  if (!v18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v19 = self;
  id v20 = v18;
  id v21 = [v19 systemWhiteColor];
  [v20 setTintColor:v21];

  uint64_t v22 = *(void **)&v1[v3];
  if (!v22)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v23 = v22;
  NSString v24 = String._bridgeToObjectiveC()();
  [v23 setAccessibilityIdentifier:v24];

  if (!*(void *)&v1[v3])
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_unknownObjectWeakAssign();
  sub_1000B9D90((uint64_t)&_swiftEmptyArrayStorage);
  id v25 = objc_allocWithZone((Class)NSAttributedString);
  NSString v26 = String._bridgeToObjectiveC()();
  type metadata accessor for Key(0);
  sub_10007EDB4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v25 initWithString:v26 attributes:isa];

  id v29 = [objc_allocWithZone((Class)PLPillContentItem) initWithAttributedText:v28];
  uint64_t v30 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView;
  uint64_t v31 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView];
  *(void *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView] = v29;

  sub_1000B9D90((uint64_t)&_swiftEmptyArrayStorage);
  id v32 = objc_allocWithZone((Class)NSAttributedString);
  NSString v33 = String._bridgeToObjectiveC()();
  Class v34 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v35 = [v32 initWithString:v33 attributes:v34];

  id v36 = [objc_allocWithZone((Class)PLPillContentItem) initWithAttributedText:v35];
  uint64_t v37 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView;
  uint64_t v38 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView];
  *(void *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView] = v36;

  id v39 = [objc_allocWithZone((Class)PLPillView) initWithLeadingAccessoryView:*(void *)&v1[v3]];
  uint64_t v40 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView;
  uint64_t v41 = *(void **)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView];
  *(void *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView] = v39;

  uint64_t v42 = *(void **)&v1[v40];
  if (!v42)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_100005B18(&qword_100144420);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_10010F8A0;
  int v44 = *(void **)&v1[v30];
  if (!v44)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(void *)(v43 + 32) = v44;
  long long v45 = *(void **)&v1[v37];
  if (!v45)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(void *)(v43 + 40) = v45;
  specialized Array._endMutation()();
  sub_100069708(0, (unint64_t *)&unk_100142AC0);
  id v46 = v42;
  id v47 = v44;
  id v48 = v45;
  Class v49 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v46 setCenterContentItems:v49];

  uint64_t v50 = *(void **)&v1[v40];
  if (!v50)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  [v50 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v51 = [v1 view];
  if (!v51)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!*(void *)&v1[v40])
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v52 = v51;
  [v51 addSubview:];

  id v53 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v1 action:"showControlCenter:"];
  [v53 setNumberOfTapsRequired:1];
  [v53 setNumberOfTouchesRequired:1];
  id v54 = [v1 view];
  if (v54)
  {
    uint64_t v55 = v54;
    [v54 addGestureRecognizer:v53];

    sub_10007C5A4();
    return;
  }
LABEL_33:
  __break(1u);
}

void sub_10007C5A4()
{
  uint64_t v1 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView);
  if (!v2)
  {
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v3 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled;
  int v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled);
  NSString v5 = self;
  id v6 = v2;
  id v7 = &selRef_systemBlueColor;
  if (!v4) {
    id v7 = &selRef_secondarySystemBackgroundColor;
  }
  id v8 = [v5 *v7];
  [v6 setBackgroundColor:v8];

  id v9 = *(void **)(v0 + v1);
  if (!v9) {
    goto LABEL_30;
  }
  uint64_t v10 = qword_10013FC50;
  id v11 = v9;
  if (v10 != -1) {
    swift_once();
  }
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setAccessibilityLabel:v12];

  uint64_t v13 = *(void **)(v0 + v1);
  if (!v13) {
    goto LABEL_31;
  }
  if (*(unsigned char *)(v0 + v3) != 1)
  {
    uint64_t v16 = qword_10013FC60;
    id v17 = v13;
    if (v16 == -1) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
  uint64_t v14 = qword_10013FC58;
  id v15 = v13;
  if (v14 != -1) {
LABEL_25:
  }
    swift_once();
LABEL_12:
  swift_bridgeObjectRetain();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setAccessibilityValue:v18];

  uint64_t v19 = *(void **)(v0 + v1);
  if (!v19)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v62 = v3;
  uint64_t v20 = qword_10013FC68;
  id v21 = v19;
  if (v20 != -1) {
    swift_once();
  }
  NSString v22 = String._bridgeToObjectiveC()();
  [v21 setAccessibilityHint:v22];

  sub_100005B18(&qword_100142A98);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010B170;
  *(void *)(inited + 32) = NSFontAttributeName;
  NSString v24 = self;
  swift_bridgeObjectRetain();
  uint64_t v61 = NSFontAttributeName;
  int v59 = v24;
  id v25 = [v24 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  uint64_t v26 = sub_100069708(0, &qword_100142AA0);
  *(void *)(inited + 40) = v25;
  uint64_t v60 = v26;
  *(void *)(inited + 64) = v26;
  *(void *)(inited + 72) = NSForegroundColorAttributeName;
  uint64_t v27 = self;
  id v28 = NSForegroundColorAttributeName;
  id v29 = [v27 labelColor];
  uint64_t v30 = sub_100069708(0, &qword_100142AA8);
  *(void *)(inited + 104) = v30;
  *(void *)(inited + 80) = v29;
  sub_1000B9D90(inited);
  id v31 = objc_allocWithZone((Class)NSAttributedString);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_10007EDB4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v58 = [v31 initWithString:v32 attributes:isa];

  if (*(unsigned char *)(v0 + v62) != 1)
  {
    if (qword_10013FC60 == -1) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
  if (qword_10013FC58 != -1) {
LABEL_27:
  }
    swift_once();
LABEL_19:
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_initStackObject();
  *(_OWORD *)(v34 + 16) = xmmword_10010B170;
  *(void *)(v34 + 32) = v61;
  id v35 = v61;
  *(void *)(v34 + 40) = [v59 preferredFontForTextStyle:UIFontTextStyleSubheadline];
  *(void *)(v34 + 64) = v60;
  *(void *)(v34 + 72) = v28;
  id v36 = v28;
  id v37 = [v27 secondaryLabelColor];
  *(void *)(v34 + 104) = v30;
  *(void *)(v34 + 80) = v37;
  sub_1000B9D90(v34);
  id v38 = objc_allocWithZone((Class)NSAttributedString);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v40 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v41 = [v38 initWithString:v39 attributes:v40];

  uint64_t v42 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView;
  uint64_t v43 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView);
  if (!v43)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  id v44 = [v43 itemWithAttributedText:v58];
  long long v45 = *(void **)(v0 + v42);
  *(void *)(v0 + v42) = v44;

  uint64_t v46 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView;
  id v47 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView);
  if (!v47)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  id v48 = [v47 itemWithAttributedText:v41];
  Class v49 = *(void **)(v0 + v46);
  *(void *)(v0 + v46) = v48;

  uint64_t v50 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView);
  if (!v50)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sub_100005B18(&qword_100144420);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_10010F8A0;
  uint64_t v52 = *(void **)(v0 + v42);
  if (!v52)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(void *)(v51 + 32) = v52;
  id v53 = *(void **)(v0 + v46);
  if (v53)
  {
    *(void *)(v51 + 40) = v53;
    specialized Array._endMutation()();
    sub_100069708(0, (unint64_t *)&unk_100142AC0);
    id v54 = v50;
    id v55 = v52;
    id v56 = v53;
    Class v57 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v54 setCenterContentItems:v57];

    return;
  }
LABEL_37:
  __break(1u);
}

void sub_10007CC9C()
{
  uint64_t v1 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource);
  if (!v2)
  {
    id v9 = 0;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  id v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  sub_1000B9B28((uint64_t)&_swiftEmptyArrayStorage);
  sub_100005B18(&qword_100142A58);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = 0;
  id v7 = [v3 revokePresentableWithRequestIdentifier:v4 reason:v5 animated:1 userInfo:isa error:&v17];

  if (v7)
  {
    id v8 = v17;

    id v9 = *(void **)(v0 + v1);
LABEL_5:
    *(void *)(v0 + v1) = 0;

    return;
  }
  id v10 = v17;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007D4C(v11, (uint64_t)qword_100156CF8);
  swift_errorRetain();
  swift_errorRetain();
  NSString v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    id v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412290;
    swift_errorRetain();
    uint64_t v16 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v17 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v15 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Game Mode banner revoke error: %@", v14, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_10007CFC8()
{
  uint64_t v1 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) = (*(unsigned char *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) & 1) == 0;
  sub_10007B938(3.0);
  sub_10007C5A4();
  id v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0
                                                        + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier);
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier + 8);
    uint64_t v5 = *(unsigned __int8 *)(v0 + v1);
    sub_100026018((uint64_t)v2);
    swift_bridgeObjectRetain();
    v2(v3, v4, v5);
    sub_100039104((uint64_t)v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10007D0C0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(id))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    id v7 = (id)swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    id v7 = a1;
  }
  a4(v7);

  return sub_10007EEF4((uint64_t)v9);
}

uint64_t sub_10007D13C(uint64_t a1)
{
  uint64_t v3 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v6 = [self sharedInstance];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  sub_10007EAB0(a1, (uint64_t)v13);
  type metadata accessor for MainActor();
  id v8 = v6;
  id v9 = v1;
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v10;
  uint64_t v11[3] = &protocol witness table for MainActor;
  v11[4] = v8;
  v11[5] = v9;
  sub_10007EB70((uint64_t)v13, (uint64_t)(v11 + 6));
  sub_10002C340((uint64_t)v5, (uint64_t)&unk_100142A78, (uint64_t)v11);

  return swift_release();
}

uint64_t sub_10007D2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  sub_100005B18(&qword_100142A60);
  v6[23] = swift_task_alloc();
  v6[24] = type metadata accessor for MainActor();
  v6[25] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[26] = v8;
  v6[27] = v7;
  return _swift_task_switch(sub_10007D388, v8, v7);
}

uint64_t sub_10007D388()
{
  uint64_t v1 = (void *)v0[20];
  v0[2] = v0;
  v0[7] = v0 + 29;
  v0[3] = sub_10007D488;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10007D904;
  v0[13] = &unk_100133168;
  v0[14] = v2;
  [v1 handleControlCenterOperationType:4 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10007D488()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 224) = v2;
  uint64_t v3 = *(void *)(v1 + 216);
  uint64_t v4 = *(void *)(v1 + 208);
  if (v2) {
    uint64_t v5 = sub_10007D630;
  }
  else {
    uint64_t v5 = sub_10007D5B8;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10007D5B8()
{
  swift_release();
  sub_10007B938(0.001);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007D630()
{
  swift_release();
  swift_willThrow();
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[19] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Present Control Center failed %@", v4, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[23];
  id v9 = (void *)v0[21];
  uint64_t v8 = v0[22];

  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  sub_10007EAB0(v8, (uint64_t)(v0 + 15));
  id v11 = v9;
  uint64_t v12 = static MainActor.shared.getter();
  os_log_type_t v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v11;
  sub_10007EB70((uint64_t)(v0 + 15), (uint64_t)(v13 + 5));
  sub_10002C340(v7, (uint64_t)&unk_100142A88, (uint64_t)v13);
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10007D904(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100005B18(&qword_100142A90);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return _swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10007D9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10007DA50, v6, v5);
}

uint64_t sub_10007DA50()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  uint64_t v2 = OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) = (*(unsigned char *)(v1 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled) & 1) == 0;
  sub_10007B938(3.0);
  sub_10007C5A4();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1
                                                        + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier + 8);
    uint64_t v7 = *(unsigned __int8 *)(v1 + v2);
    sub_100026018((uint64_t)v3);
    swift_bridgeObjectRetain();
    v3(v5, v6, v7);
    sub_100039104((uint64_t)v3);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

void sub_10007DBC8(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = &v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier];
  *uint64_t v10 = a1;
  v10[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeAvailable] = a3;
  v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeRequired] = a4;
  v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled] = a5;
  [v6 loadViewIfNeeded];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [self bannerSourceForDestination:0 forRequesterIdentifier:v11];

  if (v12)
  {
    os_log_type_t v13 = *(void **)&v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource];
    *(void *)&v6[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource] = v12;
    id v14 = v12;

    id v42 = 0;
    id v15 = [v14 layoutDescriptionWithError:&v42];
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = v42;
      [v16 presentationSize];
      double v19 = v18;
      double v21 = v20;
      [v16 containerSize];
      [v6 preferredContentSizeWithPresentationSize:v19 containerSize:v21];
      [v6 setPreferredContentSize:];
      id v24 = [v6 view];
      if (!v24)
      {
        __break(1u);
        return;
      }
      id v25 = v24;
      [v6 preferredContentSize];
      [v6 preferredContentSize];
      [v25 setFrame:sub_10007EA9C()];

      sub_100005B18(&qword_100142A48);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10010F300;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v27;
      sub_100069708(0, (unint64_t *)&qword_100142A50);
      *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
      sub_1000B9B28(inited);
      sub_100005B18(&qword_100142A58);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v42 = 0;
      LODWORD(v25) = [v14 postPresentable:v6 options:1 userInfo:isa error:&v42];

      if (v25)
      {
        id v29 = v42;

        return;
      }
      id v34 = v42;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      id v33 = v42;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007D4C(v35, (uint64_t)qword_100156CF8);
    swift_errorRetain();
    swift_errorRetain();
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      NSString v39 = (void *)swift_slowAlloc();
      *(_DWORD *)id v38 = 138412290;
      swift_errorRetain();
      Class v40 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v42 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v39 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Game Mode banner present error: %@", v38, 0xCu);
      sub_100005B18(&qword_100142A40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007D4C(v30, (uint64_t)qword_100156CF8);
    oslog = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v31))
    {
      NSString v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v31, "No banner source for Game Mode banner", v32, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_10007E4A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = &v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier];
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeAvailable] = 0;
  v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeRequired] = 0;
  v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled] = 0;
  NSString v11 = &v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  *NSString v11 = 0;
  v11[1] = 0;
  id v12 = &v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  *id v12 = 0;
  v12[1] = 0;
  os_log_type_t v13 = (uint64_t *)&v3[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerRequestIdentifier];
  id v14 = v3;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *os_log_type_t v13 = v15;
  v13[1] = v17;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gestureRecognizer] = 0;
  *(void *)&v14[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer] = 0;

  if (a2)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  double v19 = (objc_class *)type metadata accessor for GamePolicyBannerViewController();
  v22.receiver = v14;
  v22.super_class = v19;
  id v20 = [super initWithNibName:v18 bundle:a3];

  return v20;
}

id sub_10007E720(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = &v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bundleIdentifier];
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeAvailable] = 0;
  v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeRequired] = 0;
  v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gameModeEnabled] = 0;
  uint64_t v8 = &v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_tapHandler];
  *uint64_t v8 = 0;
  v8[1] = 0;
  id v9 = &v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler];
  *id v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (uint64_t *)&v1[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerRequestIdentifier];
  NSString v11 = v1;
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *uint64_t v10 = v12;
  v10[1] = v14;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_pillView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_buttonView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_titleView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_stateView] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_gestureRecognizer] = 0;
  *(void *)&v11[OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_timer] = 0;

  uint64_t v15 = (objc_class *)type metadata accessor for GamePolicyBannerViewController();
  v18.receiver = v11;
  v18.super_class = v15;
  [super initWithCoder:a1];

  return v16;
}

id sub_10007E92C()
{
  return sub_10007E944(type metadata accessor for GamePolicyBannerViewController);
}

id sub_10007E944(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for GamePolicyBannerViewController()
{
  return self;
}

double sub_10007EA9C()
{
  return 0.0;
}

uint64_t sub_10007EAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100142A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007EB18()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 72)) {
    sub_100007188(v0 + 48);
  }

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10007EB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100142A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007EBD8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000243C4;
  return sub_10007D2B8(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t sub_10007ECA0()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 64)) {
    sub_100007188(v0 + 40);
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10007ECF0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003E30C;
  return sub_10007D9B8(a1, v4, v5, v6);
}

unint64_t sub_10007EDB4()
{
  unint64_t result = qword_100142AB0;
  if (!qword_100142AB0)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142AB0);
  }
  return result;
}

uint64_t sub_10007EE0C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10007EE44()
{
}

uint64_t sub_10007EE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007EE5C()
{
  return swift_release();
}

void sub_10007EE64()
{
  *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_transaction) = 0;
  swift_unknownObjectRelease();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource);
  *(void *)(v0 + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_bannerSource) = 0;

  uint64_t v2 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtC13GameOverlayUI30GamePolicyBannerViewController_dismissHandler);
  if (v2)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    sub_100039104((uint64_t)v2);
  }
}

uint64_t sub_10007EEF4(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142A70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AccessPointDataIntentImplementation()
{
  return &type metadata for AccessPointDataIntentImplementation;
}

unint64_t sub_10007EF68()
{
  unint64_t result = qword_100142B30;
  if (!qword_100142B30)
  {
    type metadata accessor for AccessPointDataIntent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142B30);
  }
  return result;
}

uint64_t sub_10007EFC0(uint64_t a1, uint64_t a2)
{
  v2[441] = a2;
  v2[435] = a1;
  v2[447] = type metadata accessor for Game();
  v2[453] = swift_task_alloc();
  sub_100005B18(&qword_100142B48);
  v2[454] = swift_task_alloc();
  v2[455] = swift_task_alloc();
  v2[456] = swift_task_alloc();
  return _swift_task_switch(sub_10007F0A4, 0, 0);
}

uint64_t sub_10007F0A4()
{
  uint64_t v1 = self;
  id v2 = [v1 currentLocalPlayer];
  if (!v2) {
    id v2 = [v1 local];
  }
  *(void *)(v0 + 3656) = v2;
  uint64_t v3 = *(void *)(v0 + 3528);
  uint64_t v4 = *(int *)(type metadata accessor for AccessPointDataIntent() + 28);
  *(_DWORD *)(v0 + 3244) = v4;
  uint64_t v5 = (uint64_t *)(v3 + v4);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 3664) = v8;
  void v8[2] = v2;
  v8[3] = v6;
  v8[4] = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 3672) = v9;
  uint64_t v10 = sub_100069708(0, &qword_100142240);
  *uint64_t v9 = v0;
  v9[1] = sub_10007F224;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3432, 0, 0, 0xD000000000000014, 0x80000001000FD380, sub_10008381C, v8, v10);
}

uint64_t sub_10007F224()
{
  *(void *)(*(void *)v1 + 3680) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_10007F934;
  }
  else
  {
    swift_task_dealloc();
    id v2 = sub_10007F340;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007F340()
{
  uint64_t v1 = *(void *)(v0 + 3576);
  uint64_t v2 = *(void *)(v0 + 3528) + *(int *)(v0 + 3244);
  uint64_t v3 = *(void **)(v0 + 3432);
  id v4 = [v3 internal];
  [v4 setIsArcadeGame:*(unsigned __int8 *)(v2 + *(int *)(v1 + 40))];

  *(void *)(v0 + 3688) = v3;
  if (*(unsigned char *)(*(void *)(v0 + 3528) + 1) == 1
    && [*(id *)(v0 + 3656) isAuthenticated])
  {
    if (v3)
    {
      uint64_t v5 = *(void **)(v0 + 3656);
      uint64_t v6 = swift_allocObject();
      *(void *)(v0 + 3696) = v6;
      *(void *)(v6 + 16) = v3;
      *(void *)(v6 + 24) = v5;
      id v7 = v3;
      id v8 = v5;
      swift_retain();
      sub_10000B448(&qword_100142B60);
      swift_asyncLet_begin();
      uint64_t v9 = swift_allocObject();
      *(void *)(v0 + 3704) = v9;
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = v8;
      id v10 = v7;
      id v11 = v8;
      swift_retain();
      sub_10000B448(&qword_100142B78);
      swift_asyncLet_begin();
      uint64_t v12 = swift_allocObject();
      *(void *)(v0 + 3712) = v12;
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = v11;
      id v13 = v10;
      id v14 = v11;
      swift_retain();
      sub_10000B448(&qword_100142B90);
      swift_asyncLet_begin();
      sub_10000B448(&qword_100142BA8);
      swift_asyncLet_begin();
      return _swift_asyncLet_get_throwing(v0 + 16, v0 + 3224, sub_10007FC58, v0 + 3152);
    }
    goto LABEL_13;
  }
  if (!v3)
  {
LABEL_13:
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007D4C(v19, (uint64_t)qword_100156CF8);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_18;
    }
    objc_super v18 = "Unexpectedly found a nil GKGame.";
LABEL_17:
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v18, v20, 2u);
    swift_slowDealloc();
LABEL_18:

    goto LABEL_19;
  }
  if (([*(id *)(v0 + 3656) isAuthenticated] & 1) == 0)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007D4C(v15, (uint64_t)qword_100156CF8);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_18;
    }
    objc_super v18 = "Current player is not authenticated.";
    goto LABEL_17;
  }
LABEL_19:
  double v21 = *(void **)(v0 + 3656);
  objc_super v22 = *(char **)(v0 + 3528);
  uint64_t v23 = *(void *)(v0 + 3480);
  uint64_t v24 = (uint64_t)&v22[*(int *)(v0 + 3244)];
  char v25 = *v22;
  long long v26 = *(_OWORD *)(v22 + 24);
  *(_OWORD *)(v0 + 2808) = *(_OWORD *)(v22 + 8);
  *(_OWORD *)(v0 + 2824) = v26;
  long long v27 = *(_OWORD *)(v22 + 56);
  long long v28 = *(_OWORD *)(v22 + 88);
  long long v29 = *(_OWORD *)(v22 + 40);
  *(_OWORD *)(v0 + 2872) = *(_OWORD *)(v22 + 72);
  *(_OWORD *)(v0 + 2888) = v28;
  *(_OWORD *)(v0 + 2840) = v29;
  *(_OWORD *)(v0 + 2856) = v27;
  long long v30 = *(_OWORD *)(v22 + 120);
  long long v31 = *(_OWORD *)(v22 + 136);
  long long v32 = *(_OWORD *)(v22 + 104);
  *(void *)(v0 + 2952) = *((void *)v22 + 19);
  *(_OWORD *)(v0 + 2920) = v30;
  *(_OWORD *)(v0 + 2936) = v31;
  *(_OWORD *)(v0 + 2904) = v32;
  id v33 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083828(v24, v23 + v33[6]);
  sub_1000249B4(v0 + 2808);
  LOBYTE(v24) = [v21 isAuthenticated];

  uint64_t v34 = v23 + v33[17];
  uint64_t v35 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
  *(unsigned char *)uint64_t v23 = v25;
  long long v36 = *(_OWORD *)(v0 + 2808);
  *(_OWORD *)(v23 + 24) = *(_OWORD *)(v0 + 2824);
  *(_OWORD *)(v23 + 8) = v36;
  long long v37 = *(_OWORD *)(v0 + 2840);
  long long v38 = *(_OWORD *)(v0 + 2856);
  long long v39 = *(_OWORD *)(v0 + 2872);
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v0 + 2888);
  *(_OWORD *)(v23 + 72) = v39;
  *(_OWORD *)(v23 + 56) = v38;
  *(_OWORD *)(v23 + 40) = v37;
  long long v40 = *(_OWORD *)(v0 + 2904);
  long long v41 = *(_OWORD *)(v0 + 2920);
  long long v42 = *(_OWORD *)(v0 + 2936);
  *(void *)(v23 + 152) = *(void *)(v0 + 2952);
  *(_OWORD *)(v23 + 136) = v42;
  *(_OWORD *)(v23 + 120) = v41;
  *(_OWORD *)(v23 + 104) = v40;
  *(unsigned char *)(v23 + v33[7]) = v24;
  *(void *)(v23 + v33[8]) = &_swiftEmptyArrayStorage;
  *(void *)(v23 + v33[9]) = 0;
  *(void *)(v23 + v33[10]) = 0;
  *(void *)(v23 + v33[11]) = 0;
  *(void *)(v23 + v33[12]) = 0;
  uint64_t v43 = (void *)(v23 + v33[13]);
  void *v43 = 0;
  v43[1] = 0;
  *(void *)(v23 + v33[14]) = 0;
  *(void *)(v23 + v33[15]) = 0;
  id v44 = (void *)(v23 + v33[16]);
  void *v44 = 0;
  v44[1] = 0;
  long long v45 = (void *)(v23 + v33[18]);
  *long long v45 = 0;
  v45[1] = 0;
  uint64_t v46 = (void *)(v23 + v33[19]);
  *uint64_t v46 = 0;
  v46[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v47 = *(uint64_t (**)(void))(v0 + 8);
  return v47();
}

uint64_t sub_10007F934()
{
  swift_errorRelease();
  swift_task_dealloc();
  *(void *)(v0 + 3688) = 0;
  if (*(unsigned char *)(*(void *)(v0 + 3528) + 1) == 1) {
    [*(id *)(v0 + 3656) isAuthenticated];
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unexpectedly found a nil GKGame.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 3656);
  uint64_t v6 = *(char **)(v0 + 3528);
  uint64_t v7 = *(void *)(v0 + 3480);
  uint64_t v8 = (uint64_t)&v6[*(int *)(v0 + 3244)];
  char v9 = *v6;
  long long v10 = *(_OWORD *)(v6 + 24);
  *(_OWORD *)(v0 + 2808) = *(_OWORD *)(v6 + 8);
  *(_OWORD *)(v0 + 2824) = v10;
  long long v11 = *(_OWORD *)(v6 + 56);
  long long v12 = *(_OWORD *)(v6 + 88);
  long long v13 = *(_OWORD *)(v6 + 40);
  *(_OWORD *)(v0 + 2872) = *(_OWORD *)(v6 + 72);
  *(_OWORD *)(v0 + 2888) = v12;
  *(_OWORD *)(v0 + 2840) = v13;
  *(_OWORD *)(v0 + 2856) = v11;
  long long v14 = *(_OWORD *)(v6 + 120);
  long long v15 = *(_OWORD *)(v6 + 136);
  long long v16 = *(_OWORD *)(v6 + 104);
  *(void *)(v0 + 2952) = *((void *)v6 + 19);
  *(_OWORD *)(v0 + 2920) = v14;
  *(_OWORD *)(v0 + 2936) = v15;
  *(_OWORD *)(v0 + 2904) = v16;
  os_log_type_t v17 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083828(v8, v7 + v17[6]);
  sub_1000249B4(v0 + 2808);
  LOBYTE(v8) = [v5 isAuthenticated];

  uint64_t v18 = v7 + v17[17];
  uint64_t v19 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(unsigned char *)uint64_t v7 = v9;
  long long v20 = *(_OWORD *)(v0 + 2808);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v0 + 2824);
  *(_OWORD *)(v7 + 8) = v20;
  long long v21 = *(_OWORD *)(v0 + 2840);
  long long v22 = *(_OWORD *)(v0 + 2856);
  long long v23 = *(_OWORD *)(v0 + 2872);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(v0 + 2888);
  *(_OWORD *)(v7 + 72) = v23;
  *(_OWORD *)(v7 + 56) = v22;
  *(_OWORD *)(v7 + 40) = v21;
  long long v24 = *(_OWORD *)(v0 + 2904);
  long long v25 = *(_OWORD *)(v0 + 2920);
  long long v26 = *(_OWORD *)(v0 + 2936);
  *(void *)(v7 + 152) = *(void *)(v0 + 2952);
  *(_OWORD *)(v7 + 136) = v26;
  *(_OWORD *)(v7 + 120) = v25;
  *(_OWORD *)(v7 + 104) = v24;
  *(unsigned char *)(v7 + v17[7]) = v8;
  *(void *)(v7 + v17[8]) = &_swiftEmptyArrayStorage;
  *(void *)(v7 + v17[9]) = 0;
  *(void *)(v7 + v17[10]) = 0;
  *(void *)(v7 + v17[11]) = 0;
  *(void *)(v7 + v17[12]) = 0;
  long long v27 = (void *)(v7 + v17[13]);
  *long long v27 = 0;
  v27[1] = 0;
  *(void *)(v7 + v17[14]) = 0;
  *(void *)(v7 + v17[15]) = 0;
  long long v28 = (void *)(v7 + v17[16]);
  *long long v28 = 0;
  v28[1] = 0;
  long long v29 = (void *)(v7 + v17[18]);
  *long long v29 = 0;
  v29[1] = 0;
  long long v30 = (void *)(v7 + v17[19]);
  *long long v30 = 0;
  v30[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_10007FC58()
{
  *(void *)(v1 + 3720) = v0;
  if (v0) {
    return _swift_task_switch(sub_100080790, 0, 0);
  }
  *(_OWORD *)(v1 + 3728) = *(_OWORD *)(v1 + 3224);
  *(unsigned char *)(v1 + 3241) = *(unsigned char *)(v1 + 3240);
  return _swift_asyncLet_get_throwing(v1 + 656, v1 + 3192, sub_10007FCB0, v1 + 3536);
}

uint64_t sub_10007FCB0()
{
  v1[468] = v0;
  if (v0)
  {
    return _swift_task_switch(sub_100080B20, 0, 0);
  }
  else
  {
    uint64_t v2 = v1[399];
    v1[469] = v2;
    uint64_t v3 = v1[400];
    v1[470] = v3;
    uint64_t v4 = v1[401];
    v1[471] = v4;
    uint64_t v5 = v1[402];
    v1[472] = v5;
    sub_100083F0C(v2, v3, v4, v5);
    return _swift_asyncLet_get_throwing(v1 + 242, v1 + 417, sub_10007FD90, v1 + 448);
  }
}

uint64_t sub_10007FD90()
{
  v1[473] = v0;
  if (v0)
  {
    return _swift_task_switch(sub_100080EB0, 0, 0);
  }
  else
  {
    uint64_t v2 = (void *)v1[417];
    v1[474] = v2;
    id v3 = v2;
    return _swift_asyncLet_get_throwing(v1 + 162, v1 + 423, sub_10007FE58, v1 + 406);
  }
}

uint64_t sub_10007FE58()
{
  *(void *)(v1 + 3800) = v0;
  if (v0) {
    uint64_t v2 = sub_100081254;
  }
  else {
    uint64_t v2 = sub_10007FE8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10007FE8C()
{
  uint64_t v1 = (_OWORD *)(v0 + 3000);
  uint64_t v2 = *(void *)(v0 + 3792);
  uint64_t v3 = *(void *)(v0 + 3648);
  uint64_t v4 = *(void **)(v0 + 3384);
  uint64_t v5 = type metadata accessor for MediaArtwork();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v3, 1, 1, v5);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v71 = *(void *)(v0 + 3648);
    uint64_t v72 = v2;
    uint64_t v7 = *(void *)(v0 + 3640);
    id v8 = *(id *)(v0 + 3792);
    id v9 = [v8 artwork];
    uint64_t v74 = v4;
    id v10 = [v9 URLTemplate];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = [v8 artwork];
    [v11 width];

    id v12 = [v8 artwork];
    [v12 height];

    uint64_t v4 = v74;
    sub_100083B7C((uint64_t)&_swiftEmptyArrayStorage);
    MediaArtwork.init(urlTemplate:sourceImageSize:colors:)();

    sub_100083F9C(v71);
    v6(v7, 0, 1, v5);
    uint64_t v13 = v7;
    uint64_t v2 = v72;
    sub_100084064(v13, v71);
  }
  uint64_t v14 = *(void *)(v0 + 3776);
  int v15 = *(unsigned __int8 *)(v0 + 3241);
  uint64_t v16 = *(void *)(v0 + 3736);
  uint64_t v17 = *(void *)(v0 + 3728);
  uint64_t v18 = *(void **)(v0 + 3688);
  uint64_t v19 = *(void *)(v0 + 3624);
  long long v20 = *(char **)(v0 + 3528);
  uint64_t v21 = (uint64_t)&v20[*(int *)(v0 + 3244)];
  char v73 = *v20;
  long long v22 = *(_OWORD *)(v20 + 24);
  _OWORD *v1 = *(_OWORD *)(v20 + 8);
  *(_OWORD *)(v0 + 3016) = v22;
  long long v23 = *(_OWORD *)(v20 + 56);
  long long v24 = *(_OWORD *)(v20 + 88);
  long long v25 = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v0 + 3064) = *(_OWORD *)(v20 + 72);
  *(_OWORD *)(v0 + 3080) = v24;
  *(_OWORD *)(v0 + 3032) = v25;
  *(_OWORD *)(v0 + 3048) = v23;
  long long v26 = *(_OWORD *)(v20 + 120);
  long long v27 = *(_OWORD *)(v20 + 136);
  long long v28 = *(_OWORD *)(v20 + 104);
  *(void *)(v0 + 3144) = *((void *)v20 + 19);
  *(_OWORD *)(v0 + 3112) = v26;
  *(_OWORD *)(v0 + 3128) = v27;
  *(_OWORD *)(v0 + 3096) = v28;
  sub_100083828(v21, v19);
  sub_1000249B4(v0 + 3000);
  [v18 gameInfo];
  if (v14 == 1)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v62 = *(void *)(v0 + 3768);
    uint64_t v63 = *(void *)(v0 + 3776);
    uint64_t v64 = *(void *)(v0 + 3760);
    uint64_t v61 = *(void *)(v0 + 3752);
  }
  if (v2)
  {
    long long v29 = *(void **)(v0 + 3792);
    uint64_t v60 = v16;
    uint64_t v30 = *(void *)(v0 + 3648);
    int v31 = v15;
    uint64_t v32 = *(void *)(v0 + 3632);
    id v33 = [v29 adamID];
    id v34 = [v33 stringValue];

    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v70 = v35;

    uint64_t v36 = v32;
    int v15 = v31;
    sub_100083F34(v30, v36);
    id v37 = [v29 title];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v39;
    uint64_t v68 = v38;

    id v40 = [v29 subtitle];
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v42;
    uint64_t v66 = v41;

    uint64_t v16 = v60;
  }
  else
  {
    sub_100083F34(*(void *)(v0 + 3648), *(void *)(v0 + 3632));
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
  }
  if (v15)
  {
    uint64_t v17 = 0;
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = v16;
  }
  if (!v4) {
    uint64_t v4 = &_swiftEmptyArrayStorage;
  }
  uint64_t v44 = *(void *)(v0 + 3632);
  uint64_t v45 = *(void *)(v0 + 3624);
  uint64_t v46 = *(void *)(v0 + 3480);
  sub_100083F9C(*(void *)(v0 + 3648));
  *(unsigned char *)uint64_t v46 = v73;
  long long v47 = *(_OWORD *)(v0 + 3016);
  *(_OWORD *)(v46 + 8) = *v1;
  *(_OWORD *)(v46 + 24) = v47;
  long long v48 = *(_OWORD *)(v0 + 3064);
  long long v49 = *(_OWORD *)(v0 + 3080);
  long long v50 = *(_OWORD *)(v0 + 3048);
  *(_OWORD *)(v46 + 40) = *(_OWORD *)(v0 + 3032);
  *(_OWORD *)(v46 + 88) = v49;
  *(_OWORD *)(v46 + 72) = v48;
  *(_OWORD *)(v46 + 56) = v50;
  long long v52 = *(_OWORD *)(v0 + 3112);
  long long v51 = *(_OWORD *)(v0 + 3128);
  uint64_t v53 = *(void *)(v0 + 3144);
  *(_OWORD *)(v46 + 104) = *(_OWORD *)(v0 + 3096);
  *(void *)(v46 + 152) = v53;
  *(_OWORD *)(v46 + 136) = v51;
  *(_OWORD *)(v46 + 120) = v52;
  id v54 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083FFC(v45, v46 + v54[6], (uint64_t (*)(void))type metadata accessor for Game);
  *(unsigned char *)(v46 + v54[7]) = 1;
  *(void *)(v46 + v54[8]) = v4;
  *(void *)(v46 + v54[9]) = 0;
  *(void *)(v46 + v54[10]) = v17;
  *(void *)(v46 + v54[11]) = v43;
  *(void *)(v46 + v54[12]) = v75;
  id v55 = (void *)(v46 + v54[13]);
  *id v55 = v62;
  v55[1] = v63;
  *(void *)(v46 + v54[14]) = v61;
  *(void *)(v46 + v54[15]) = v64;
  id v56 = (uint64_t *)(v46 + v54[16]);
  *id v56 = v69;
  v56[1] = v70;
  sub_100084064(v44, v46 + v54[17]);
  Class v57 = (uint64_t *)(v46 + v54[18]);
  *Class v57 = v68;
  v57[1] = v67;
  id v58 = (uint64_t *)(v46 + v54[19]);
  *id v58 = v66;
  v58[1] = v65;
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3384, sub_1000803B8, v0 + 3488);
}

uint64_t sub_1000803B8()
{
  return _swift_task_switch(sub_1000803D4, 0, 0);
}

uint64_t sub_1000803D4()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 3336, sub_1000803F4, v0 + 3296);
}

uint64_t sub_1000803F4()
{
  return _swift_task_switch(sub_100080410, 0, 0);
}

uint64_t sub_100080410()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 3192, sub_100080490, v0 + 2768);
}

uint64_t sub_100080490()
{
  return _swift_task_switch(sub_1000804AC, 0, 0);
}

uint64_t sub_1000804AC()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 3224, sub_10008052C, v0 + 2576);
}

uint64_t sub_10008052C()
{
  return _swift_task_switch(sub_100080548, 0, 0);
}

uint64_t sub_100080548()
{
  uint64_t v1 = (void *)v0[461];
  uint64_t v2 = (void *)v0[457];

  swift_release_n();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10008061C()
{
  return _swift_task_switch(sub_100080638, 0, 0);
}

uint64_t sub_100080638()
{
  return _swift_asyncLet_finish(v0 + 1936, v0 + 3336, sub_100080658, v0 + 3344);
}

uint64_t sub_100080658()
{
  return _swift_task_switch(sub_100080674, 0, 0);
}

uint64_t sub_100080674()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 656, v0 + 3192, sub_1000806F4, v0 + 3392);
}

uint64_t sub_1000806F4()
{
  return _swift_task_switch(sub_100080710, 0, 0);
}

uint64_t sub_100080710()
{
  swift_release();
  return _swift_asyncLet_finish(v0 + 16, v0 + 3224, sub_10008052C, v0 + 3440);
}

uint64_t sub_100080790()
{
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3288) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error retrieving highlights: %@", v4, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(int *)(v0 + 3244);
  id v8 = *(char **)(v0 + 3528);
  uint64_t v9 = *(void *)(v0 + 3480);

  char v10 = *v8;
  long long v11 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v0 + 2616) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v0 + 2632) = v11;
  long long v12 = *(_OWORD *)(v8 + 40);
  long long v13 = *(_OWORD *)(v8 + 56);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v8 + 72);
  *(_OWORD *)(v0 + 2696) = v14;
  *(_OWORD *)(v0 + 2648) = v12;
  *(_OWORD *)(v0 + 2664) = v13;
  long long v15 = *(_OWORD *)(v8 + 104);
  long long v16 = *(_OWORD *)(v8 + 120);
  long long v17 = *(_OWORD *)(v8 + 136);
  *(void *)(v0 + 2760) = *((void *)v8 + 19);
  *(_OWORD *)(v0 + 2728) = v16;
  *(_OWORD *)(v0 + 2744) = v17;
  *(_OWORD *)(v0 + 2712) = v15;
  uint64_t v18 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083828((uint64_t)&v8[v7], v9 + v18[6]);
  sub_1000249B4(v0 + 2616);
  swift_errorRelease();
  uint64_t v19 = v9 + v18[17];
  uint64_t v20 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(unsigned char *)uint64_t v9 = v10;
  long long v21 = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v9 + 8) = v21;
  long long v22 = *(_OWORD *)(v0 + 2648);
  long long v23 = *(_OWORD *)(v0 + 2664);
  long long v24 = *(_OWORD *)(v0 + 2680);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v0 + 2696);
  *(_OWORD *)(v9 + 72) = v24;
  *(_OWORD *)(v9 + 56) = v23;
  *(_OWORD *)(v9 + 40) = v22;
  long long v25 = *(_OWORD *)(v0 + 2712);
  long long v26 = *(_OWORD *)(v0 + 2728);
  long long v27 = *(_OWORD *)(v0 + 2744);
  *(void *)(v9 + 152) = *(void *)(v0 + 2760);
  *(_OWORD *)(v9 + 136) = v27;
  *(_OWORD *)(v9 + 120) = v26;
  *(_OWORD *)(v9 + 104) = v25;
  *(unsigned char *)(v9 + v18[7]) = 1;
  *(void *)(v9 + v18[8]) = &_swiftEmptyArrayStorage;
  *(void *)(v9 + v18[9]) = 0;
  *(void *)(v9 + v18[10]) = 0;
  *(void *)(v9 + v18[11]) = 0;
  *(void *)(v9 + v18[12]) = 0;
  long long v28 = (void *)(v9 + v18[13]);
  *long long v28 = 0;
  v28[1] = 0;
  *(void *)(v9 + v18[14]) = 0;
  *(void *)(v9 + v18[15]) = 0;
  long long v29 = (void *)(v9 + v18[16]);
  *long long v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)(v9 + v18[18]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  int v31 = (void *)(v9 + v18[19]);
  *int v31 = 0;
  v31[1] = 0;
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3384, sub_10008061C, v0 + 2960);
}

uint64_t sub_100080B20()
{
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3288) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error retrieving highlights: %@", v4, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(int *)(v0 + 3244);
  id v8 = *(char **)(v0 + 3528);
  uint64_t v9 = *(void *)(v0 + 3480);

  char v10 = *v8;
  long long v11 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v0 + 2616) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v0 + 2632) = v11;
  long long v12 = *(_OWORD *)(v8 + 40);
  long long v13 = *(_OWORD *)(v8 + 56);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v8 + 72);
  *(_OWORD *)(v0 + 2696) = v14;
  *(_OWORD *)(v0 + 2648) = v12;
  *(_OWORD *)(v0 + 2664) = v13;
  long long v15 = *(_OWORD *)(v8 + 104);
  long long v16 = *(_OWORD *)(v8 + 120);
  long long v17 = *(_OWORD *)(v8 + 136);
  *(void *)(v0 + 2760) = *((void *)v8 + 19);
  *(_OWORD *)(v0 + 2728) = v16;
  *(_OWORD *)(v0 + 2744) = v17;
  *(_OWORD *)(v0 + 2712) = v15;
  uint64_t v18 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083828((uint64_t)&v8[v7], v9 + v18[6]);
  sub_1000249B4(v0 + 2616);
  swift_errorRelease();
  uint64_t v19 = v9 + v18[17];
  uint64_t v20 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(unsigned char *)uint64_t v9 = v10;
  long long v21 = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v9 + 8) = v21;
  long long v22 = *(_OWORD *)(v0 + 2648);
  long long v23 = *(_OWORD *)(v0 + 2664);
  long long v24 = *(_OWORD *)(v0 + 2680);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v0 + 2696);
  *(_OWORD *)(v9 + 72) = v24;
  *(_OWORD *)(v9 + 56) = v23;
  *(_OWORD *)(v9 + 40) = v22;
  long long v25 = *(_OWORD *)(v0 + 2712);
  long long v26 = *(_OWORD *)(v0 + 2728);
  long long v27 = *(_OWORD *)(v0 + 2744);
  *(void *)(v9 + 152) = *(void *)(v0 + 2760);
  *(_OWORD *)(v9 + 136) = v27;
  *(_OWORD *)(v9 + 120) = v26;
  *(_OWORD *)(v9 + 104) = v25;
  *(unsigned char *)(v9 + v18[7]) = 1;
  *(void *)(v9 + v18[8]) = &_swiftEmptyArrayStorage;
  *(void *)(v9 + v18[9]) = 0;
  *(void *)(v9 + v18[10]) = 0;
  *(void *)(v9 + v18[11]) = 0;
  *(void *)(v9 + v18[12]) = 0;
  long long v28 = (void *)(v9 + v18[13]);
  *long long v28 = 0;
  v28[1] = 0;
  *(void *)(v9 + v18[14]) = 0;
  *(void *)(v9 + v18[15]) = 0;
  long long v29 = (void *)(v9 + v18[16]);
  *long long v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)(v9 + v18[18]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  int v31 = (void *)(v9 + v18[19]);
  *int v31 = 0;
  v31[1] = 0;
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3384, sub_10008061C, v0 + 2960);
}

uint64_t sub_100080EB0()
{
  sub_100083F20(*(void *)(v0 + 3752), *(void *)(v0 + 3760), *(void *)(v0 + 3768), *(void *)(v0 + 3776));
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007D4C(v1, (uint64_t)qword_100156CF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3288) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error retrieving highlights: %@", v4, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(int *)(v0 + 3244);
  id v8 = *(char **)(v0 + 3528);
  uint64_t v9 = *(void *)(v0 + 3480);

  char v10 = *v8;
  long long v11 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v0 + 2616) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v0 + 2632) = v11;
  long long v12 = *(_OWORD *)(v8 + 40);
  long long v13 = *(_OWORD *)(v8 + 56);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v8 + 72);
  *(_OWORD *)(v0 + 2696) = v14;
  *(_OWORD *)(v0 + 2648) = v12;
  *(_OWORD *)(v0 + 2664) = v13;
  long long v15 = *(_OWORD *)(v8 + 104);
  long long v16 = *(_OWORD *)(v8 + 120);
  long long v17 = *(_OWORD *)(v8 + 136);
  *(void *)(v0 + 2760) = *((void *)v8 + 19);
  *(_OWORD *)(v0 + 2728) = v16;
  *(_OWORD *)(v0 + 2744) = v17;
  *(_OWORD *)(v0 + 2712) = v15;
  uint64_t v18 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083828((uint64_t)&v8[v7], v9 + v18[6]);
  sub_1000249B4(v0 + 2616);
  swift_errorRelease();
  uint64_t v19 = v9 + v18[17];
  uint64_t v20 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(unsigned char *)uint64_t v9 = v10;
  long long v21 = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v9 + 8) = v21;
  long long v22 = *(_OWORD *)(v0 + 2648);
  long long v23 = *(_OWORD *)(v0 + 2664);
  long long v24 = *(_OWORD *)(v0 + 2680);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v0 + 2696);
  *(_OWORD *)(v9 + 72) = v24;
  *(_OWORD *)(v9 + 56) = v23;
  *(_OWORD *)(v9 + 40) = v22;
  long long v25 = *(_OWORD *)(v0 + 2712);
  long long v26 = *(_OWORD *)(v0 + 2728);
  long long v27 = *(_OWORD *)(v0 + 2744);
  *(void *)(v9 + 152) = *(void *)(v0 + 2760);
  *(_OWORD *)(v9 + 136) = v27;
  *(_OWORD *)(v9 + 120) = v26;
  *(_OWORD *)(v9 + 104) = v25;
  *(unsigned char *)(v9 + v18[7]) = 1;
  *(void *)(v9 + v18[8]) = &_swiftEmptyArrayStorage;
  *(void *)(v9 + v18[9]) = 0;
  *(void *)(v9 + v18[10]) = 0;
  *(void *)(v9 + v18[11]) = 0;
  *(void *)(v9 + v18[12]) = 0;
  long long v28 = (void *)(v9 + v18[13]);
  *long long v28 = 0;
  v28[1] = 0;
  *(void *)(v9 + v18[14]) = 0;
  *(void *)(v9 + v18[15]) = 0;
  long long v29 = (void *)(v9 + v18[16]);
  *long long v29 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)(v9 + v18[18]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  int v31 = (void *)(v9 + v18[19]);
  *int v31 = 0;
  v31[1] = 0;
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3384, sub_10008061C, v0 + 2960);
}

uint64_t sub_100081254()
{
  uint64_t v1 = *(void *)(v0 + 3776);
  uint64_t v2 = *(void *)(v0 + 3768);
  uint64_t v3 = *(void *)(v0 + 3760);
  uint64_t v4 = *(void *)(v0 + 3752);

  sub_100083F20(v4, v3, v2, v1);
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007D4C(v5, (uint64_t)qword_100156CF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 3288) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error retrieving highlights: %@", v8, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v11 = *(int *)(v0 + 3244);
  long long v12 = *(char **)(v0 + 3528);
  uint64_t v13 = *(void *)(v0 + 3480);

  char v14 = *v12;
  long long v15 = *(_OWORD *)(v12 + 24);
  *(_OWORD *)(v0 + 2616) = *(_OWORD *)(v12 + 8);
  *(_OWORD *)(v0 + 2632) = v15;
  long long v16 = *(_OWORD *)(v12 + 40);
  long long v17 = *(_OWORD *)(v12 + 56);
  long long v18 = *(_OWORD *)(v12 + 88);
  *(_OWORD *)(v0 + 2680) = *(_OWORD *)(v12 + 72);
  *(_OWORD *)(v0 + 2696) = v18;
  *(_OWORD *)(v0 + 2648) = v16;
  *(_OWORD *)(v0 + 2664) = v17;
  long long v19 = *(_OWORD *)(v12 + 104);
  long long v20 = *(_OWORD *)(v12 + 120);
  long long v21 = *(_OWORD *)(v12 + 136);
  *(void *)(v0 + 2760) = *((void *)v12 + 19);
  *(_OWORD *)(v0 + 2728) = v20;
  *(_OWORD *)(v0 + 2744) = v21;
  *(_OWORD *)(v0 + 2712) = v19;
  long long v22 = (int *)type metadata accessor for AccessPointRequiredData();
  sub_100083828((uint64_t)&v12[v11], v13 + v22[6]);
  sub_1000249B4(v0 + 2616);
  swift_errorRelease();
  uint64_t v23 = v13 + v22[17];
  uint64_t v24 = type metadata accessor for MediaArtwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(unsigned char *)uint64_t v13 = v14;
  long long v25 = *(_OWORD *)(v0 + 2616);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v0 + 2632);
  *(_OWORD *)(v13 + 8) = v25;
  long long v26 = *(_OWORD *)(v0 + 2648);
  long long v27 = *(_OWORD *)(v0 + 2664);
  long long v28 = *(_OWORD *)(v0 + 2680);
  *(_OWORD *)(v13 + 88) = *(_OWORD *)(v0 + 2696);
  *(_OWORD *)(v13 + 72) = v28;
  *(_OWORD *)(v13 + 56) = v27;
  *(_OWORD *)(v13 + 40) = v26;
  long long v29 = *(_OWORD *)(v0 + 2712);
  long long v30 = *(_OWORD *)(v0 + 2728);
  long long v31 = *(_OWORD *)(v0 + 2744);
  *(void *)(v13 + 152) = *(void *)(v0 + 2760);
  *(_OWORD *)(v13 + 136) = v31;
  *(_OWORD *)(v13 + 120) = v30;
  *(_OWORD *)(v13 + 104) = v29;
  *(unsigned char *)(v13 + v22[7]) = 1;
  *(void *)(v13 + v22[8]) = &_swiftEmptyArrayStorage;
  *(void *)(v13 + v22[9]) = 0;
  *(void *)(v13 + v22[10]) = 0;
  *(void *)(v13 + v22[11]) = 0;
  *(void *)(v13 + v22[12]) = 0;
  uint64_t v32 = (void *)(v13 + v22[13]);
  *uint64_t v32 = 0;
  v32[1] = 0;
  *(void *)(v13 + v22[14]) = 0;
  *(void *)(v13 + v22[15]) = 0;
  uint64_t v33 = (void *)(v13 + v22[16]);
  void *v33 = 0;
  v33[1] = 0;
  id v34 = (void *)(v13 + v22[18]);
  *id v34 = 0;
  v34[1] = 0;
  uint64_t v35 = (void *)(v13 + v22[19]);
  *uint64_t v35 = 0;
  v35[1] = 0;
  return _swift_asyncLet_finish(v0 + 1296, v0 + 3384, sub_10008061C, v0 + 2960);
}

uint64_t sub_100081610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return _swift_task_switch(sub_100081634, 0, 0);
}

uint64_t sub_100081634()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 48);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  uint64_t v3 = sub_100005B18(&qword_100142B60);
  *uint64_t v2 = v0;
  v2[1] = sub_100081738;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000002ALL, 0x80000001000FD4A0, sub_10008420C, v1, v3);
}

uint64_t sub_100081738()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100081880;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100081854;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100081854()
{
  uint64_t v1 = *(void *)(v0 + 40);
  char v2 = *(unsigned char *)(v0 + 32);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v1 + 16) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081880()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000818E4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return _swift_task_switch(sub_100081904, 0, 0);
}

uint64_t sub_100081904()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  uint64_t v4 = sub_100005B18(&qword_100142B78);
  *uint64_t v3 = v0;
  v3[1] = sub_100081A08;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000002ALL, 0x80000001000FD3F0, sub_100084144, v2, v4);
}

uint64_t sub_100081A08()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100081880;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100081B24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100081B24()
{
  uint64_t v1 = *(_OWORD **)(v0 + 48);
  long long v2 = *(_OWORD *)(v0 + 32);
  _OWORD *v1 = *(_OWORD *)(v0 + 16);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return _swift_task_switch(sub_100081B6C, 0, 0);
}

uint64_t sub_100081B6C()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  long long v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_100005B18(&qword_100142B90);
  *long long v2 = v0;
  v2[1] = sub_100081C70;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000002ALL, 0x80000001000FD3C0, sub_100084110, v1, v3);
}

uint64_t sub_100081C70()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    long long v2 = sub_100081DAC;
  }
  else
  {
    swift_task_dealloc();
    long long v2 = sub_100081D8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100081D8C()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081DAC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081E10(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  long long v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_100005B18(&qword_100142BA8);
  *long long v2 = v1;
  v2[1] = sub_100081EF8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 16, 0, 0, 0xD000000000000013, 0x80000001000FD3A0, sub_100082D44, 0, v3);
}

uint64_t sub_100081EF8()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    long long v2 = sub_10008200C;
  }
  else {
    long long v2 = sub_100081D8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008200C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100082024(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100142BC0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [a2 internal];
  unsigned int v10 = [v9 isArcadeGame];

  if (v10)
  {
    id v11 = [self proxyForPlayer:a3];
    id v12 = [v11 gameService];

    id v13 = [a2 internal];
    id v14 = [v13 adamID];

    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v16 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    aBlock[4] = sub_100084124;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100082534;
    aBlock[3] = &unk_100133308;
    long long v17 = _Block_copy(aBlock);
    swift_release();
    [v12 getArcadeHighlightForAdamID:v14 count:2 handler:v17];
    _Block_release(v17);
    swift_unknownObjectRelease();
  }
  else
  {
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1000822AC(unint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007D4C(v3, (uint64_t)qword_100156CF8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412290;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching Arcade games for you highlights: %@", v6, 0xCu);
      sub_100005B18(&qword_100142A40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (!result) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v8)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      sub_100005B18(&qword_100142BC0);
      return CheckedContinuation.resume(returning:)();
    }
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(a1 + 32);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_100082534(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_100082548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100142BD0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = self;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100084158;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100082804;
  aBlock[3] = &unk_100133358;
  id v10 = _Block_copy(aBlock);
  swift_release();
  [v7 loadHighlightsWithPlayerScope:1 timeScope:2 game:a2 handler:v10];
  _Block_release(v10);
}

void sub_10008270C(void *a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v4 = a1;
      [a2 rank];
    }
    else
    {
      id v5 = a1;
    }
    id v6 = [a1 localizedTitle];
    if (v6)
    {
      uint64_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    sub_100005B18(&qword_100142BD0);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    sub_100005B18(&qword_100142BD0);
    CheckedContinuation.resume(returning:)();
  }
}

void sub_100082804(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  id v12 = *(void (**)(void *, void *, void *, void *, void *, uint64_t))(a1 + 32);
  swift_retain();
  id v18 = a2;
  id v16 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  v12(a2, a3, a4, a5, a6, a7);
  swift_release();
}

void sub_1000828E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100142BD8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = self;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1000842AC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100082CA0;
  aBlock[3] = &unk_1001333A8;
  id v12 = _Block_copy(aBlock);
  swift_release();
  [v9 loadAchievementsForGameV2:a2 player:a3 includeUnreported:1 includeHidden:1 withCompletionHandler:v12];
  _Block_release(v12);
}

uint64_t sub_100082ABC(unint64_t a1)
{
  if (!a1) {
    goto LABEL_21;
  }
  unint64_t v2 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    {
LABEL_22:
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_release();
LABEL_19:
      swift_release();
      if (v2)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_21:
      sub_100005B18(&qword_100142BD8);
      return CheckedContinuation.resume(returning:)();
    }
LABEL_18:
    if (((unint64_t)&_swiftEmptyArrayStorage & 0x4000000000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_4:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      if ([v6 isCompleted])
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100082CA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100069708(0, &qword_100142BE0);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100082D44(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142BB8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  id v13 = &type metadata for GameOverlayUIFeatureFlags;
  unint64_t v14 = sub_100007D84();
  LOBYTE(aBlock[0]) = 3;
  char v5 = isFeatureEnabled(_:)();
  sub_100007188((uint64_t)aBlock);
  if (v5)
  {
    id v6 = [self daemonProxy:aBlock[0]];
    id v7 = [v6 friendServicePrivate];

    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
    unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v9 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v9 + v8, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
    unint64_t v14 = (unint64_t)sub_1000840D8;
    uint64_t v15 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100083434;
    id v13 = (ValueMetadata *)&unk_1001332B8;
    unint64_t v10 = _Block_copy(aBlock);
    swift_release();
    [v7 getFriendRequestsBannerDataWithCompletion:v10];
    _Block_release(v10);
    return swift_unknownObjectRelease();
  }
  else
  {
    aBlock[0] = 0;
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100082F78(unint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007D4C(v2, (uint64_t)qword_100156CF8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v4))
    {
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_18;
    }
    char v5 = (uint8_t *)swift_slowAlloc();
    id v6 = (void *)swift_slowAlloc();
    *(_DWORD *)char v5 = 138412290;
    swift_errorRetain();
    *(void *)&v29[0] = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v6 = *(void *)&v29[0];
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error fetching friend requests for highlight: %@", v5, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_6:
    swift_slowDealloc();
LABEL_18:

    *(void *)&v29[0] = 0;
    sub_100005B18(&qword_100142BB8);
    return CheckedContinuation.resume(returning:)();
  }
  if (!(a1 >> 62))
  {
    int64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8 >= 1) {
      goto LABEL_9;
    }
LABEL_27:
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007D4C(v26, (uint64_t)qword_100156CF8);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v3, v27)) {
      goto LABEL_18;
    }
    long long v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v27, "No pending friend requests or friend requests banner is not enabled.", v28, 2u);
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  int64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v8 < 1) {
    goto LABEL_27;
  }
LABEL_9:
  sub_1000B5CB0(0, v8, 0);
  uint64_t v9 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(a1 + 8 * v9 + 32);
    }
    sub_100084EB8(v10, (uint64_t)v29);
    unint64_t v12 = _swiftEmptyArrayStorage[2];
    unint64_t v11 = _swiftEmptyArrayStorage[3];
    if (v12 >= v11 >> 1) {
      sub_1000B5CB0(v11 > 1, v12 + 1, 1);
    }
    ++v9;
    _swiftEmptyArrayStorage[2] = v12 + 1;
    id v13 = (char *)&_swiftEmptyArrayStorage[19 * v12];
    long long v14 = v29[1];
    *((_OWORD *)v13 + 2) = v29[0];
    *((_OWORD *)v13 + 3) = v14;
    long long v15 = v29[2];
    long long v16 = v29[3];
    long long v17 = v29[5];
    *((_OWORD *)v13 + 6) = v29[4];
    *((_OWORD *)v13 + 7) = v17;
    *((_OWORD *)v13 + 4) = v15;
    *((_OWORD *)v13 + 5) = v16;
    long long v18 = v29[6];
    long long v19 = v29[7];
    long long v20 = v29[8];
    *((void *)v13 + 22) = v30;
    *((_OWORD *)v13 + 9) = v19;
    *((_OWORD *)v13 + 10) = v20;
    *((_OWORD *)v13 + 8) = v18;
  }
  while (v8 != v9);
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007D4C(v21, (uint64_t)qword_100156CF8);
  swift_bridgeObjectRetain();
  long long v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Retrieved %ld pending friend requests.", v24, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_100005B18(&qword_100142BB8);
  return CheckedContinuation.resume(returning:)();
}

void sub_100083434(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_100083448(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  char v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  sub_100069708(0, a4);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v7 = a3;
  v5(v6, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000834F0(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  uint64_t v4 = type metadata accessor for AccessPointRequiredData();
  v2[3] = v4;
  v2[4] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  v2[5] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v2[6] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000835F0;
  return sub_10007EFC0(v5, a2);
}

uint64_t sub_1000835F0()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000837B8;
  }
  else {
    uint64_t v2 = sub_100083704;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100083704()
{
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  sub_100083FFC(v0[5], v3, (uint64_t (*)(void))type metadata accessor for AccessPointRequiredData);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000837B8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10008381C(uint64_t a1)
{
  sub_1000AC8F0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100083828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Game();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008388C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000838CC(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10003E30C;
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 40) = a1;
  return _swift_task_switch(sub_100081634, 0, 0);
}

uint64_t sub_100083980(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_10003E30C;
  v5[6] = a1;
  v5[7] = v4;
  return _swift_task_switch(sub_100081904, 0, 0);
}

uint64_t sub_100083A30(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10003E30C;
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 24) = a1;
  return _swift_task_switch(sub_100081B6C, 0, 0);
}

uint64_t sub_100083AE4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000243C4;
  return sub_100081E10(a1);
}

unint64_t sub_100083B7C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005B18(&qword_100142BB0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_100083C88((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100083C88(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100083D1C(a1, v2);
}

unint64_t sub_100083D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9) {
      goto LABEL_22;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      return v5;
    }
    uint64_t v12 = ~v4;
    unint64_t v5 = (v5 + 1) & v12;
    if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      return v5;
    }
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;
          if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
            break;
          }
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_22;
      }
    }
  }
  return v5;
}

uint64_t sub_100083F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100083F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100083F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100142B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100083F9C(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100142B48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100083FFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100084064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100142B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000840CC()
{
  return sub_100084220(&qword_100142BB8);
}

uint64_t sub_1000840D8(uint64_t a1, uint64_t a2)
{
  return sub_1000842CC(a1, a2, &qword_100142BB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082F78);
}

uint64_t sub_1000840F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100084108()
{
  return swift_release();
}

void sub_100084110(uint64_t a1)
{
  sub_100082024(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100084118()
{
  return sub_100084220(&qword_100142BC0);
}

uint64_t sub_100084124(uint64_t a1, uint64_t a2)
{
  return sub_1000842CC(a1, a2, &qword_100142BC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000822AC);
}

void sub_100084144(uint64_t a1)
{
  sub_100082548(a1, *(void *)(v1 + 16));
}

uint64_t sub_10008414C()
{
  return sub_100084220(&qword_100142BD0);
}

void sub_100084158(void *a1, void *a2)
{
  sub_100005B18(&qword_100142BD0);

  sub_10008270C(a1, a2);
}

void sub_10008420C(uint64_t a1)
{
  sub_1000828E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100084214()
{
  return sub_100084220(&qword_100142BD8);
}

uint64_t sub_100084220(uint64_t *a1)
{
  uint64_t v2 = sub_100005B18(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000842AC(uint64_t a1, uint64_t a2)
{
  return sub_1000842CC(a1, a2, &qword_100142BD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082ABC);
}

uint64_t sub_1000842CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(sub_100005B18(a3) - 8);
  uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return a4(a1, a2, v8);
}

void *Player.init(with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_100069708(0, &qword_1001422B0);
  sub_100069708(0, &qword_100142648);
  uint64_t result = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v3) {
    return (void *)sub_1000247CC(a1, a2);
  }
  if (result)
  {
    sub_100084EB8(result, (uint64_t)v12);
    uint64_t result = (void *)sub_1000247CC(a1, a2);
    long long v8 = v12[7];
    *(_OWORD *)(a3 + 96) = v12[6];
    *(_OWORD *)(a3 + 112) = v8;
    *(_OWORD *)(a3 + 128) = v12[8];
    *(void *)(a3 + 144) = v13;
    long long v9 = v12[3];
    *(_OWORD *)(a3 + 32) = v12[2];
    *(_OWORD *)(a3 + 48) = v9;
    long long v10 = v12[5];
    *(_OWORD *)(a3 + 64) = v12[4];
    *(_OWORD *)(a3 + 80) = v10;
    long long v11 = v12[1];
    *(_OWORD *)a3 = v12[0];
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Player.FriendRequestInboxEntry.init(friendCode:senderHandle:contactID:contactName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

void Player.FriendRequestInboxEntry.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40))
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 56)) {
      goto LABEL_3;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 56)) {
    goto LABEL_7;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

uint64_t sub_1000845B0()
{
  uint64_t result = 0x6F43646E65697266;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x61487265646E6573;
      break;
    case 2:
      uint64_t result = 0x49746361746E6F63;
      break;
    case 3:
      uint64_t result = 0x4E746361746E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100084658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000858B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100084680(uint64_t a1)
{
  unint64_t v2 = sub_10008585C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000846BC(uint64_t a1)
{
  unint64_t v2 = sub_10008585C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Player.FriendRequestInboxEntry.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100005B18(&qword_100142BE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_10008585C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Player.FriendRequestInboxEntry.hashValue.getter()
{
  return Hasher._finalize()();
}

double Player.FriendRequestInboxEntry.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100085AB4(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10008492C(void *a1)
{
  return Player.FriendRequestInboxEntry.encode(to:)(a1);
}

uint64_t sub_100084944(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  void v8[2] = a2[2];
  v8[3] = v5;
  return _s13GameOverlayUI6PlayerV23FriendRequestInboxEntryV23__derived_struct_equalsySbAE_AEtFZ_0(v7, v8) & 1;
}

Swift::Int sub_100084994()
{
  return Hasher._finalize()();
}

uint64_t _s13GameOverlayUI6PlayerV23FriendRequestInboxEntryV23__derived_struct_equalsySbAE_AEtFZ_0(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = a1[5];
      uint64_t v10 = a2[5];
      if (v9)
      {
        if (!v10) {
          return 0;
        }
        if (a1[4] != a2[4] || v9 != v10)
        {
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v11 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v10)
      {
        return 0;
      }
      uint64_t v12 = a1[7];
      uint64_t v13 = a2[7];
      if (v12)
      {
        if (v13 && (a1[6] == a2[6] && v12 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v13)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _s13GameOverlayUI6PlayerV23integerForMonogramColorySiSSFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  sub_100025F34();
  long long v2 = (void *)StringProtocol.components<A>(separatedBy:)();
  if (v2[2] < 2uLL
    || ((uint64_t v4 = v2[6],
         unint64_t v3 = v2[7],
         swift_bridgeObjectRetain(),
         uint64_t result = swift_bridgeObjectRelease(),
         uint64_t v6 = HIBYTE(v3) & 0xF,
         uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL,
         (v3 & 0x2000000000000000) != 0)
      ? (uint64_t v8 = HIBYTE(v3) & 0xF)
      : (uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL),
        !v8))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v10 = (uint64_t)sub_1000D71EC(v4, v3, 10);
    LOBYTE(v4) = v27;
    goto LABEL_46;
  }
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_64;
    }
    for (uint64_t i = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          uint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
    {
      uint64_t v10 = (uint64_t)sub_1000D71D4(i, v7, 10);
      LOBYTE(v4) = v11 & 1;
LABEL_46:
      swift_bridgeObjectRelease();
      if (v4) {
        break;
      }
      id v21 = [self availableColors];
      sub_100069708(0, (unint64_t *)&qword_100142C20);
      unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v22 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t result = swift_bridgeObjectRelease();
      if (v23)
      {
        if (v10 != 0x8000000000000000 || v23 != -1) {
          return v10 % v23;
        }
        __break(1u);
        goto LABEL_66;
      }
      __break(1u);
LABEL_64:
      ;
    }
    return 0;
  }
  uint64_t v28 = v4;
  uint64_t v29 = v3 & 0xFFFFFFFFFFFFFFLL;
  if (v4 == 43)
  {
    if (!v6) {
      goto LABEL_67;
    }
    if (v6 == 1 || (BYTE1(v4) - 48) > 9u) {
      goto LABEL_33;
    }
    uint64_t v10 = (BYTE1(v4) - 48);
    if (v6 != 2)
    {
      if ((BYTE2(v4) - 48) > 9u) {
        goto LABEL_33;
      }
      uint64_t v10 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
      uint64_t v12 = v6 - 3;
      if (v12)
      {
        uint64_t v13 = (unsigned __int8 *)&v28 + 3;
        while (1)
        {
          unsigned int v14 = *v13 - 48;
          if (v14 > 9) {
            goto LABEL_33;
          }
          uint64_t v15 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_33;
          }
          uint64_t v10 = v15 + v14;
          if (__OFADD__(v15, v14)) {
            goto LABEL_33;
          }
          LOBYTE(v4) = 0;
          ++v13;
          if (!--v12) {
            goto LABEL_46;
          }
        }
      }
    }
LABEL_45:
    LOBYTE(v4) = 0;
    goto LABEL_46;
  }
  if (v4 != 45)
  {
    if (!v6 || (v4 - 48) > 9u) {
      goto LABEL_33;
    }
    uint64_t v10 = (v4 - 48);
    if (v6 != 1)
    {
      if ((BYTE1(v4) - 48) > 9u) {
        goto LABEL_33;
      }
      uint64_t v10 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
      uint64_t v16 = v6 - 2;
      if (v16)
      {
        long long v17 = (unsigned __int8 *)&v28 + 2;
        while (1)
        {
          unsigned int v18 = *v17 - 48;
          if (v18 > 9) {
            goto LABEL_33;
          }
          uint64_t v19 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_33;
          }
          uint64_t v10 = v19 + v18;
          if (__OFADD__(v19, v18)) {
            goto LABEL_33;
          }
          LOBYTE(v4) = 0;
          ++v17;
          if (!--v16) {
            goto LABEL_46;
          }
        }
      }
    }
    goto LABEL_45;
  }
  if (v6)
  {
    if (v6 != 1 && (BYTE1(v4) - 48) <= 9u)
    {
      if (v6 == 2)
      {
        LOBYTE(v4) = 0;
        uint64_t v10 = -(uint64_t)(BYTE1(v4) - 48);
        goto LABEL_46;
      }
      if ((BYTE2(v4) - 48) <= 9u)
      {
        uint64_t v10 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
        uint64_t v20 = v6 - 3;
        if (!v20) {
          goto LABEL_45;
        }
        char v24 = (unsigned __int8 *)&v28 + 3;
        while (1)
        {
          unsigned int v25 = *v24 - 48;
          if (v25 > 9) {
            break;
          }
          uint64_t v26 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            break;
          }
          uint64_t v10 = v26 - v25;
          if (__OFSUB__(v26, v25)) {
            break;
          }
          LOBYTE(v4) = 0;
          ++v24;
          if (!--v20) {
            goto LABEL_46;
          }
        }
      }
    }
LABEL_33:
    uint64_t v10 = 0;
    LOBYTE(v4) = 1;
    goto LABEL_46;
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_100084EB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100005B18(&qword_100142C28);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 playerID];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v100 = v9;

  id v10 = [a1 displayNameWithOptions:1];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  swift_bridgeObjectRetain();
  id v14 = [a1 inboxEntry];
  uint64_t v101 = v11;
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [v14 friendCode];
    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = [v15 senderHandle];
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v97 = v20;

    id v21 = [v15 contactID];
    if (v21)
    {
      unint64_t v22 = v21;
      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v23;
    }
    else
    {
      uint64_t v94 = 0;
      uint64_t v93 = 0;
    }
    id v24 = [v15 contactName];
    if (v24)
    {
      unsigned int v25 = v24;
      uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v106 = v26;

      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v97 = 0;
    uint64_t v94 = 0;
    uint64_t v93 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v102 = 0;
  uint64_t v106 = 0;
LABEL_10:
  id v27 = [a1 contact];
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = [v27 _gkCompositeName];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v103 = v31;
    uint64_t v104 = v30;
  }
  else
  {
    uint64_t v104 = 0;
    if (v18)
    {
      uint64_t v103 = 0;
      if (v106)
      {
        uint64_t v103 = swift_bridgeObjectRetain();
        uint64_t v104 = v102;
      }
    }
    else
    {
      uint64_t v103 = 0;
    }
  }
  id v32 = [a1 contact];
  if (v32)
  {
    uint64_t v33 = v32;
    id v34 = [v32 phoneNumberStrings];
    uint64_t v35 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v35[2]
      || (swift_bridgeObjectRelease(),
          id v36 = [v33 emailAddressStrings],
          uint64_t v35 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v36,
          v35[2]))
    {
      uint64_t v37 = v35[5];
      uint64_t v96 = v35[4];
      uint64_t v95 = v37;
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v90 = [v33 identifier];
      uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v95 = v91;
    }
  }
  else
  {
    uint64_t v96 = 0;
    uint64_t v95 = 0;
  }
  unsigned __int8 v113 = [a1 isArcadeSubscriber];
  id v38 = [a1 photos];
  unint64_t v105 = v13;
  if (!v38)
  {
    long long v111 = 0u;
    long long v112 = 0u;
LABEL_31:
    sub_100017388((uint64_t)&v111, &qword_100142A70);
    goto LABEL_37;
  }
  uint64_t v39 = v38;
  uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v107 = 0x6574616C706D6574;
  unint64_t v108 = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v40 + 16) && (unint64_t v41 = sub_1000DC420((uint64_t)&v109), (v42 & 1) != 0))
  {
    sub_100036E88(*(void *)(v40 + 56) + 32 * v41, (uint64_t)&v111);
  }
  else
  {
    long long v111 = 0u;
    long long v112 = 0u;
  }
  sub_100086324((uint64_t)&v109);
  swift_bridgeObjectRelease();
  if (!*((void *)&v112 + 1)) {
    goto LABEL_31;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_37;
  }
  uint64_t v43 = v18;
  uint64_t v92 = v8;
  uint64_t v44 = v109;
  unint64_t v45 = v110;
  URL.init(string:)();
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v6, 1, v46) == 1)
  {
    sub_100017388((uint64_t)v6, &qword_100142C28);
  }
  else
  {
    URL.scheme.getter();
    uint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v46);
    if (v49)
    {
      v50._countAndFlagsBits = 1886680168;
      v50._object = (void *)0xE400000000000000;
      Swift::Bool v51 = String.hasPrefix(_:)(v50);
      swift_bridgeObjectRelease();
      uint64_t v8 = v92;
      if (v51)
      {
        swift_bridgeObjectRelease();

LABEL_48:
        uint64_t v64 = v100;
        uint64_t v65 = v101;
LABEL_55:
        uint64_t v80 = v98;
        uint64_t v79 = v99;
        uint64_t v81 = v97;
        uint64_t v82 = v94;
        uint64_t v83 = v93;
        uint64_t v85 = v103;
        uint64_t v84 = v104;
        uint64_t v86 = v96;
        uint64_t result = v95;
        unsigned __int8 v87 = v113;
        *(void *)a2 = v8;
        *(void *)(a2 + 8) = v64;
        *(void *)(a2 + 16) = v44;
        *(void *)(a2 + 24) = v45;
        unint64_t v88 = v105;
        *(void *)(a2 + 32) = v65;
        *(void *)(a2 + 40) = v88;
        *(void *)(a2 + 48) = v84;
        *(void *)(a2 + 56) = v85;
        *(void *)(a2 + 64) = v86;
        *(void *)(a2 + 72) = result;
        *(unsigned char *)(a2 + 80) = v87;
        *(void *)(a2 + 88) = v79;
        *(void *)(a2 + 96) = v43;
        *(void *)(a2 + 104) = v80;
        *(void *)(a2 + 112) = v81;
        *(void *)(a2 + 120) = v82;
        *(void *)(a2 + 128) = v83;
        uint64_t v89 = v106;
        *(void *)(a2 + 136) = v102;
        *(void *)(a2 + 144) = v89;
        return result;
      }
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v92;
LABEL_36:
  uint64_t v18 = v43;
  unint64_t v13 = v105;
LABEL_37:
  [self sizeForPhotoSize:65537];
  id v52 = (id)GKImageURLKeyForSize();
  if (!v52) {
    goto LABEL_50;
  }
  uint64_t v53 = v52;
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v56 = v55;

  id v57 = [a1 photos];
  if (!v57)
  {
    swift_bridgeObjectRelease();
    long long v111 = 0u;
    long long v112 = 0u;
LABEL_49:
    sub_100017388((uint64_t)&v111, &qword_100142A70);
    goto LABEL_50;
  }
  id v58 = v57;
  uint64_t v59 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v107 = v54;
  unint64_t v108 = v56;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v59 + 16))
  {
    unint64_t v60 = sub_1000DC420((uint64_t)&v109);
    if (v61)
    {
      sub_100036E88(*(void *)(v59 + 56) + 32 * v60, (uint64_t)&v111);
    }
    else
    {
      long long v111 = 0u;
      long long v112 = 0u;
    }
  }
  else
  {
    long long v111 = 0u;
    long long v112 = 0u;
  }
  sub_100086324((uint64_t)&v109);
  swift_bridgeObjectRelease();
  if (!*((void *)&v112 + 1)) {
    goto LABEL_49;
  }
  if (swift_dynamicCast())
  {
    uint64_t v43 = v18;
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = v109;
    uint64_t v63 = (void *)v110;
    uint64_t v109 = 0x2F2F3A656C6966;
    unint64_t v110 = 0xE700000000000000;
    v62._object = v63;
    String.append(_:)(v62);

    swift_bridgeObjectRelease();
    uint64_t v44 = v109;
    unint64_t v45 = v110;
    goto LABEL_48;
  }
LABEL_50:
  uint64_t v65 = v101;
  if (String.count.getter() < 1)
  {
    uint64_t v43 = v18;
    swift_bridgeObjectRelease();
    unint64_t v68 = 0xE100000000000000;
    uint64_t v66 = 32;
    goto LABEL_54;
  }
  uint64_t v66 = sub_1000DCB58(v65, v13);
  unint64_t v68 = v67;
  uint64_t result = swift_bridgeObjectRelease();
  if (v68)
  {
    uint64_t v43 = v18;
LABEL_54:
    uint64_t v109 = 0;
    unint64_t v110 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v109 = 0x6D6172676F6E6F6DLL;
    unint64_t v110 = 0xEB000000002F2F3ALL;
    sub_100005B18(&qword_100142C30);
    uint64_t v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = xmmword_10010F300;
    *(void *)(v70 + 32) = v66;
    *(void *)(v70 + 40) = v68;
    *(void *)&long long v111 = v70;
    sub_100005B18(&qword_100142C38);
    sub_1000862C8();
    v71._countAndFlagsBits = String.init<A>(_:)();
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    v72._object = (void *)0x80000001000FD4D0;
    v72._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v72);
    id v73 = [a1 playerID];
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;

    uint64_t v77 = _s13GameOverlayUI6PlayerV23integerForMonogramColorySiSSFZ_0(v74, v76);
    swift_bridgeObjectRelease();
    *(void *)&long long v111 = v77;
    v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v78);

    swift_bridgeObjectRelease();
    uint64_t v44 = v109;
    unint64_t v45 = v110;
    uint64_t v64 = v100;
    goto LABEL_55;
  }
  __break(1u);
  return result;
}

unint64_t sub_10008585C()
{
  unint64_t result = qword_100142BF0;
  if (!qword_100142BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142BF0);
  }
  return result;
}

uint64_t sub_1000858B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43646E65697266 && a2 == 0xEA00000000006564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61487265646E6573 && a2 == 0xEC000000656C646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49746361746E6F63 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4E746361746E6F63 && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100085AB4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005B18(&qword_100142C18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10008585C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100007188((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v26 = v9;
  char v30 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v13;
  uint64_t v25 = v12;
  char v29 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v24 = v14;
  char v28 = 3;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain();
  sub_100007188((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v24;
  swift_bridgeObjectRelease();
  uint64_t v20 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v26;
  a2[1] = v11;
  a2[2] = v25;
  a2[3] = v20;
  a2[4] = v23;
  a2[5] = v19;
  a2[6] = v22;
  a2[7] = v17;
  return result;
}

unint64_t sub_100085DE0()
{
  unint64_t result = qword_100142BF8;
  if (!qword_100142BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142BF8);
  }
  return result;
}

uint64_t _s23FriendRequestInboxEntryVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s23FriendRequestInboxEntryVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s23FriendRequestInboxEntryVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s23FriendRequestInboxEntryVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *_s23FriendRequestInboxEntryVwta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23FriendRequestInboxEntryVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s23FriendRequestInboxEntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Player.FriendRequestInboxEntry()
{
  return &type metadata for Player.FriendRequestInboxEntry;
}

unsigned char *_s23FriendRequestInboxEntryV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100086188);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s23FriendRequestInboxEntryV10CodingKeysOMa()
{
  return &_s23FriendRequestInboxEntryV10CodingKeysON;
}

unint64_t sub_1000861C4()
{
  unint64_t result = qword_100142C00;
  if (!qword_100142C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142C00);
  }
  return result;
}

unint64_t sub_10008621C()
{
  unint64_t result = qword_100142C08;
  if (!qword_100142C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142C08);
  }
  return result;
}

unint64_t sub_100086274()
{
  unint64_t result = qword_100142C10;
  if (!qword_100142C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142C10);
  }
  return result;
}

unint64_t sub_1000862C8()
{
  unint64_t result = qword_100142C40;
  if (!qword_100142C40)
  {
    sub_10000B448(&qword_100142C38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142C40);
  }
  return result;
}

uint64_t sub_100086324(uint64_t a1)
{
  return a1;
}

__n128 GameDashboardPageIntent.init(_:for:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000863E4(a1, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for GameDashboardPageIntent() + 20);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v5 + 112) = v6;
  *(_OWORD *)(v5 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(v5 + 144) = *(void *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v8;
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v10;
  return result;
}

uint64_t sub_1000863E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Game();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for GameDashboardPageIntent()
{
  uint64_t result = qword_100142CC8;
  if (!qword_100142CC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *GameDashboardPageIntent.kind.unsafeMutableAddressor()
{
  return &static GameDashboardPageIntent.kind;
}

unint64_t static GameDashboardPageIntent.kind.getter()
{
  return 0xD000000000000017;
}

uint64_t GameDashboardPageIntent.game.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100086BC0(v1, a1, (uint64_t (*)(void))type metadata accessor for Game);
}

uint64_t GameDashboardPageIntent.player.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GameDashboardPageIntent() + 20);

  return sub_1000062A4(v3, a1);
}

uint64_t sub_100086534()
{
  if (*v0) {
    return 0x726579616C70;
  }
  else {
    return 1701667175;
  }
}

uint64_t sub_100086564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100088160(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008658C(uint64_t a1)
{
  unint64_t v2 = sub_1000867EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000865C8(uint64_t a1)
{
  unint64_t v2 = sub_1000867EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GameDashboardPageIntent.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_100142C48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_1000867EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v26 = 0;
  type metadata accessor for Game();
  sub_100086B7C(&qword_100142C58);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (long long *)(v3 + *(int *)(type metadata accessor for GameDashboardPageIntent() + 20));
    long long v10 = v9[7];
    long long v22 = v9[6];
    long long v23 = v10;
    long long v24 = v9[8];
    uint64_t v25 = *((void *)v9 + 18);
    long long v11 = v9[3];
    long long v18 = v9[2];
    long long v19 = v11;
    long long v12 = v9[5];
    long long v20 = v9[4];
    long long v21 = v12;
    long long v13 = v9[1];
    long long v16 = *v9;
    long long v17 = v13;
    v15[15] = 1;
    sub_1000066E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000867EC()
{
  unint64_t result = qword_100142C50;
  if (!qword_100142C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142C50);
  }
  return result;
}

uint64_t GameDashboardPageIntent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for Game();
  __chkstk_darwin(v4);
  uint64_t v34 = (uint64_t)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100005B18(&qword_100142C60);
  uint64_t v21 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GameDashboardPageIntent();
  __chkstk_darwin(v8);
  long long v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_1000867EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100007188((uint64_t)a1);
  }
  uint64_t v11 = v21;
  uint64_t v12 = (uint64_t)v10;
  LOBYTE(v24) = 0;
  sub_100086B7C(&qword_100142C68);
  uint64_t v13 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1000863E4(v34, v12);
  char v23 = 1;
  sub_1000071D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v13);
  uint64_t v14 = v12 + *(int *)(v8 + 20);
  long long v15 = v31;
  *(_OWORD *)(v14 + 96) = v30;
  *(_OWORD *)(v14 + 112) = v15;
  *(_OWORD *)(v14 + 128) = v32;
  *(void *)(v14 + 144) = v33;
  long long v16 = v27;
  *(_OWORD *)(v14 + 32) = v26;
  *(_OWORD *)(v14 + 48) = v16;
  long long v17 = v29;
  *(_OWORD *)(v14 + 64) = v28;
  *(_OWORD *)(v14 + 80) = v17;
  long long v18 = v25;
  *(_OWORD *)uint64_t v14 = v24;
  *(_OWORD *)(v14 + 16) = v18;
  sub_100086BC0(v12, v20, (uint64_t (*)(void))type metadata accessor for GameDashboardPageIntent);
  sub_100007188((uint64_t)a1);
  return sub_100086C28(v12, (uint64_t (*)(void))type metadata accessor for GameDashboardPageIntent);
}

uint64_t sub_100086B7C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Game();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100086BC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100086C28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100086C88(void *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x800000010010FB50;
}

uint64_t sub_100086CA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GameDashboardPageIntent.init(from:)(a1, a2);
}

uint64_t sub_100086CC0(void *a1)
{
  return GameDashboardPageIntent.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for GameDashboardPageIntent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = (int *)type metadata accessor for Game();
    uint64_t v10 = v9[7];
    __dst = (char *)v4 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35(v11, 1, v12))
    {
      uint64_t v14 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    *(void *)((char *)v4 + v9[8]) = *(void *)((char *)a2 + v9[8]);
    *((unsigned char *)v4 + v9[9]) = *((unsigned char *)a2 + v9[9]);
    *((unsigned char *)v4 + v9[10]) = *((unsigned char *)a2 + v9[10]);
    *((unsigned char *)v4 + v9[11]) = *((unsigned char *)a2 + v9[11]);
    *((unsigned char *)v4 + v9[12]) = *((unsigned char *)a2 + v9[12]);
    *((unsigned char *)v4 + v9[13]) = *((unsigned char *)a2 + v9[13]);
    *((unsigned char *)v4 + v9[14]) = *((unsigned char *)a2 + v9[14]);
    uint64_t v16 = v9[15];
    long long v17 = (void *)((char *)v4 + v16);
    long long v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *long long v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = *(int *)(a3 + 20);
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (void *)((char *)a2 + v20);
    uint64_t v23 = *(void *)((char *)a2 + v20 + 8);
    *(void *)uint64_t v21 = *(void *)((char *)a2 + v20);
    *((void *)v21 + 1) = v23;
    uint64_t v24 = *(void *)((char *)a2 + v20 + 24);
    *((void *)v21 + 2) = *(void *)((char *)a2 + v20 + 16);
    *((void *)v21 + 3) = v24;
    uint64_t v25 = *(void *)((char *)a2 + v20 + 40);
    *((void *)v21 + 4) = *(void *)((char *)a2 + v20 + 32);
    *((void *)v21 + 5) = v25;
    uint64_t v26 = *(void *)((char *)a2 + v20 + 56);
    *((void *)v21 + 6) = *(void *)((char *)a2 + v20 + 48);
    *((void *)v21 + 7) = v26;
    uint64_t v27 = *(void *)((char *)a2 + v20 + 72);
    *((void *)v21 + 8) = *(void *)((char *)a2 + v20 + 64);
    *((void *)v21 + 9) = v27;
    v21[80] = *((unsigned char *)a2 + v20 + 80);
    uint64_t v28 = *(void *)((char *)a2 + v20 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28)
    {
      *((void *)v21 + 11) = v22[11];
      *((void *)v21 + 12) = v28;
      uint64_t v29 = v22[14];
      *((void *)v21 + 13) = v22[13];
      *((void *)v21 + 14) = v29;
      uint64_t v30 = v22[16];
      *((void *)v21 + 15) = v22[15];
      *((void *)v21 + 16) = v30;
      uint64_t v31 = v22[18];
      *((void *)v21 + 17) = v22[17];
      *((void *)v21 + 18) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v32 = *(_OWORD *)(v22 + 13);
      *(_OWORD *)(v21 + 88) = *(_OWORD *)(v22 + 11);
      *(_OWORD *)(v21 + 104) = v32;
      long long v33 = *(_OWORD *)(v22 + 17);
      *(_OWORD *)(v21 + 120) = *(_OWORD *)(v22 + 15);
      *(_OWORD *)(v21 + 136) = v33;
    }
  }
  return v4;
}

uint64_t destroy for GameDashboardPageIntent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for Game() + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(v7 + 96);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for GameDashboardPageIntent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = (int *)type metadata accessor for Game();
  uint64_t v9 = v8[7];
  __dst = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  long long v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33(v10, 1, v11))
  {
    uint64_t v13 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
  *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
  *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
  *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
  *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
  *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
  uint64_t v14 = v8[15];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = *(void *)((char *)a2 + v18 + 8);
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  *((void *)v19 + 1) = v21;
  uint64_t v22 = *(void *)((char *)a2 + v18 + 24);
  *((void *)v19 + 2) = *(void *)((char *)a2 + v18 + 16);
  *((void *)v19 + 3) = v22;
  uint64_t v23 = *(void *)((char *)a2 + v18 + 40);
  *((void *)v19 + 4) = *(void *)((char *)a2 + v18 + 32);
  *((void *)v19 + 5) = v23;
  uint64_t v24 = *(void *)((char *)a2 + v18 + 56);
  *((void *)v19 + 6) = *(void *)((char *)a2 + v18 + 48);
  *((void *)v19 + 7) = v24;
  uint64_t v25 = *(void *)((char *)a2 + v18 + 72);
  *((void *)v19 + 8) = *(void *)((char *)a2 + v18 + 64);
  *((void *)v19 + 9) = v25;
  v19[80] = *((unsigned char *)a2 + v18 + 80);
  uint64_t v26 = *(void *)((char *)a2 + v18 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26)
  {
    *((void *)v19 + 11) = v20[11];
    *((void *)v19 + 12) = v26;
    uint64_t v27 = v20[14];
    *((void *)v19 + 13) = v20[13];
    *((void *)v19 + 14) = v27;
    uint64_t v28 = v20[16];
    *((void *)v19 + 15) = v20[15];
    *((void *)v19 + 16) = v28;
    uint64_t v29 = v20[18];
    *((void *)v19 + 17) = v20[17];
    *((void *)v19 + 18) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *(_OWORD *)(v20 + 13);
    *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 11);
    *(_OWORD *)(v19 + 104) = v30;
    long long v31 = *(_OWORD *)(v20 + 17);
    *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 15);
    *(_OWORD *)(v19 + 136) = v31;
  }
  return a1;
}

void *assignWithCopy for GameDashboardPageIntent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for Game();
  uint64_t v6 = v5[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100005B18(&qword_100140C48);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  *((unsigned char *)a1 + v5[9]) = *((unsigned char *)a2 + v5[9]);
  *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
  *((unsigned char *)a1 + v5[11]) = *((unsigned char *)a2 + v5[11]);
  *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
  *((unsigned char *)a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
  *((unsigned char *)a1 + v5[14]) = *((unsigned char *)a2 + v5[14]);
  uint64_t v15 = v5[15];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  *((void *)v19 + 1) = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 2) = *((void *)v20 + 2);
  *((void *)v19 + 3) = *((void *)v20 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 4) = *((void *)v20 + 4);
  *((void *)v19 + 5) = *((void *)v20 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 6) = *((void *)v20 + 6);
  *((void *)v19 + 7) = *((void *)v20 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 8) = *((void *)v20 + 8);
  *((void *)v19 + 9) = *((void *)v20 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[80] = v20[80];
  uint64_t v21 = v19 + 88;
  uint64_t v22 = (long long *)(v20 + 88);
  uint64_t v23 = *((void *)v20 + 12);
  if (*((void *)v19 + 12))
  {
    if (v23)
    {
      *((void *)v19 + 11) = *((void *)v20 + 11);
      *((void *)v19 + 12) = *((void *)v20 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v19 + 13) = *((void *)v20 + 13);
      *((void *)v19 + 14) = *((void *)v20 + 14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v19 + 15) = *((void *)v20 + 15);
      *((void *)v19 + 16) = *((void *)v20 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v19 + 17) = *((void *)v20 + 17);
      *((void *)v19 + 18) = *((void *)v20 + 18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100006D1C((uint64_t)(v19 + 88));
      long long v24 = *(_OWORD *)(v20 + 136);
      long long v26 = *v22;
      long long v25 = *(_OWORD *)(v20 + 104);
      *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 120);
      *(_OWORD *)(v19 + 136) = v24;
      *uint64_t v21 = v26;
      *(_OWORD *)(v19 + 104) = v25;
    }
  }
  else if (v23)
  {
    *((void *)v19 + 11) = *((void *)v20 + 11);
    *((void *)v19 + 12) = *((void *)v20 + 12);
    *((void *)v19 + 13) = *((void *)v20 + 13);
    *((void *)v19 + 14) = *((void *)v20 + 14);
    *((void *)v19 + 15) = *((void *)v20 + 15);
    *((void *)v19 + 16) = *((void *)v20 + 16);
    *((void *)v19 + 17) = *((void *)v20 + 17);
    *((void *)v19 + 18) = *((void *)v20 + 18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *v22;
    long long v28 = *(_OWORD *)(v20 + 104);
    long long v29 = *(_OWORD *)(v20 + 136);
    *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 120);
    *(_OWORD *)(v19 + 136) = v29;
    *uint64_t v21 = v27;
    *(_OWORD *)(v19 + 104) = v28;
  }
  return a1;
}

_OWORD *initializeWithTake for GameDashboardPageIntent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = (int *)type metadata accessor for Game();
  uint64_t v8 = v7[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100005B18(&qword_100140C48);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
  *((unsigned char *)a1 + v7[9]) = *((unsigned char *)a2 + v7[9]);
  *((unsigned char *)a1 + v7[10]) = *((unsigned char *)a2 + v7[10]);
  *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
  *((unsigned char *)a1 + v7[12]) = *((unsigned char *)a2 + v7[12]);
  *((unsigned char *)a1 + v7[13]) = *((unsigned char *)a2 + v7[13]);
  *((unsigned char *)a1 + v7[14]) = *((unsigned char *)a2 + v7[14]);
  *(_OWORD *)((char *)a1 + v7[15]) = *(_OWORD *)((char *)a2 + v7[15]);
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  long long v17 = *((_OWORD *)v16 + 7);
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  *((_OWORD *)v15 + 7) = v17;
  *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
  *((void *)v15 + 18) = *((void *)v16 + 18);
  long long v18 = *((_OWORD *)v16 + 3);
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = v18;
  long long v19 = *((_OWORD *)v16 + 5);
  *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
  *((_OWORD *)v15 + 5) = v19;
  long long v20 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v20;
  return a1;
}

void *assignWithTake for GameDashboardPageIntent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for Game();
  uint64_t v9 = v8[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100005B18(&qword_100140C48);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
  *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
  *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
  *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
  *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
  *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
  uint64_t v18 = v8[15];
  long long v19 = (void *)((char *)a1 + v18);
  long long v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *long long v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(int *)(a3 + 20);
  long long v24 = (char *)a1 + v23;
  long long v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)((char *)a2 + v23 + 8);
  *(void *)long long v24 = *(void *)((char *)a2 + v23);
  *((void *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *((void *)v25 + 3);
  *((void *)v24 + 2) = *((void *)v25 + 2);
  *((void *)v24 + 3) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *((void *)v25 + 5);
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *((void *)v24 + 5) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *((void *)v25 + 7);
  *((void *)v24 + 6) = *((void *)v25 + 6);
  *((void *)v24 + 7) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *((void *)v25 + 9);
  *((void *)v24 + 8) = *((void *)v25 + 8);
  *((void *)v24 + 9) = v30;
  swift_bridgeObjectRelease();
  v24[80] = v25[80];
  if (!*((void *)v24 + 12))
  {
LABEL_11:
    long long v35 = *(_OWORD *)(v25 + 104);
    *(_OWORD *)(v24 + 88) = *(_OWORD *)(v25 + 88);
    *(_OWORD *)(v24 + 104) = v35;
    long long v36 = *(_OWORD *)(v25 + 136);
    *(_OWORD *)(v24 + 120) = *(_OWORD *)(v25 + 120);
    *(_OWORD *)(v24 + 136) = v36;
    return a1;
  }
  uint64_t v31 = *((void *)v25 + 12);
  if (!v31)
  {
    sub_100006D1C((uint64_t)(v24 + 88));
    goto LABEL_11;
  }
  *((void *)v24 + 11) = *((void *)v25 + 11);
  *((void *)v24 + 12) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *((void *)v25 + 14);
  *((void *)v24 + 13) = *((void *)v25 + 13);
  *((void *)v24 + 14) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *((void *)v25 + 16);
  *((void *)v24 + 15) = *((void *)v25 + 15);
  *((void *)v24 + 16) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *((void *)v25 + 18);
  *((void *)v24 + 17) = *((void *)v25 + 17);
  *((void *)v24 + 18) = v34;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GameDashboardPageIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087D28);
}

uint64_t sub_100087D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Game();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for GameDashboardPageIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087E00);
}

uint64_t sub_100087E00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Game();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100087EC0()
{
  uint64_t result = type metadata accessor for Game();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for GameDashboardPageIntent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100088020);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GameDashboardPageIntent.CodingKeys()
{
  return &type metadata for GameDashboardPageIntent.CodingKeys;
}

unint64_t sub_10008805C()
{
  unint64_t result = qword_100142D00;
  if (!qword_100142D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D00);
  }
  return result;
}

unint64_t sub_1000880B4()
{
  unint64_t result = qword_100142D08;
  if (!qword_100142D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D08);
  }
  return result;
}

unint64_t sub_10008810C()
{
  unint64_t result = qword_100142D10;
  if (!qword_100142D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D10);
  }
  return result;
}

uint64_t sub_100088160(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667175 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726579616C70 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t LaunchDashboardAction.game.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10008B02C(v1, a1, (uint64_t (*)(void))type metadata accessor for Game);
}

uint64_t LaunchDashboardAction.player.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LaunchDashboardAction() + 20);

  return sub_1000062A4(v3, a1);
}

uint64_t type metadata accessor for LaunchDashboardAction()
{
  uint64_t result = qword_100142E28;
  if (!qword_100142E28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LaunchDashboardAction.destination.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for LaunchDashboardAction() + 24);
  uint64_t v2 = *(void *)v1;
  sub_10005FEEC(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

uint64_t LaunchDashboardAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LaunchDashboardAction() + 28);
  uint64_t v4 = type metadata accessor for ActionMetrics();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

unint64_t sub_1000883D0(char a1)
{
  unint64_t result = 0x72616F6268736164;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D65766569686361;
      break;
    case 2:
      unint64_t result = 0x6F6272656461656CLL;
      break;
    case 3:
      unint64_t result = 0x676E656C6C616863;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x656C69666F7270;
      break;
    case 6:
      unint64_t result = 0x6552646E65697266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000884E0()
{
  return 0x6D65766569686361;
}

uint64_t sub_100088504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6D65766569686361 && a2 == 0xED00004449746E65)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000885C0(uint64_t a1)
{
  unint64_t v2 = sub_1000894BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000885FC(uint64_t a1)
{
  unint64_t v2 = sub_1000894BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088638(uint64_t a1)
{
  unint64_t v2 = sub_100089414();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088674(uint64_t a1)
{
  unint64_t v2 = sub_100089414();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000886B0()
{
  return sub_1000883D0(*v0);
}

uint64_t sub_1000886B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008A084(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000886E0(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1000886EC(uint64_t a1)
{
  unint64_t v2 = sub_1000892C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088728(uint64_t a1)
{
  unint64_t v2 = sub_1000892C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088764(uint64_t a1)
{
  unint64_t v2 = sub_100089510();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000887A0(uint64_t a1)
{
  unint64_t v2 = sub_100089510();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000887DC(uint64_t a1)
{
  unint64_t v2 = sub_100089318();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088818(uint64_t a1)
{
  unint64_t v2 = sub_100089318();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088854()
{
  return 0x6F6272656461656CLL;
}

uint64_t sub_100088878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F6272656461656CLL && a2 == 0xED00004449647261)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100088934(uint64_t a1)
{
  unint64_t v2 = sub_100089468();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088970(uint64_t a1)
{
  unint64_t v2 = sub_100089468();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000889AC(uint64_t a1)
{
  unint64_t v2 = sub_1000893C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000889E8(uint64_t a1)
{
  unint64_t v2 = sub_1000893C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088A24()
{
  return 0x4449726579616C70;
}

uint64_t sub_100088A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4449726579616C70 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100088AD4(uint64_t a1)
{
  unint64_t v2 = sub_10008936C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088B10(uint64_t a1)
{
  unint64_t v2 = sub_10008936C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LaunchDashboardAction.Destination.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a2;
  uint64_t v57 = a4;
  uint64_t v53 = a3;
  uint64_t v5 = sub_100005B18(&qword_100142D18);
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100142D20);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  Swift::String v50 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_100142D28);
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  __chkstk_darwin(v9);
  unint64_t v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100005B18(&qword_100142D30);
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  __chkstk_darwin(v11);
  id v38 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100005B18(&qword_100142D38);
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  __chkstk_darwin(v13);
  int v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100005B18(&qword_100142D40);
  uint64_t v47 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100005B18(&qword_100142D48);
  uint64_t v37 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100005B18(&qword_100142D50);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v54 = v22;
  uint64_t v55 = v23;
  __chkstk_darwin(v22);
  long long v25 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_1000892C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v57)
  {
    case 1:
      char v60 = 2;
      sub_100089468();
      uint64_t v29 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v32 = v49;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v32);
      goto LABEL_7;
    case 2:
      char v63 = 5;
      sub_10008936C();
      uint64_t v28 = v50;
      uint64_t v29 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v30 = v52;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v28, v30);
LABEL_7:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v25, v29);
      break;
    case 3:
      switch(v56)
      {
        case 1:
          char v61 = 3;
          sub_100089414();
          uint64_t v33 = v38;
          uint64_t v31 = v54;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v35 = v39;
          uint64_t v34 = v40;
          goto LABEL_12;
        case 2:
          char v62 = 4;
          sub_1000893C0();
          uint64_t v33 = v41;
          uint64_t v31 = v54;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v35 = v42;
          uint64_t v34 = v43;
          goto LABEL_12;
        case 3:
          char v64 = 6;
          sub_100089318();
          uint64_t v33 = v44;
          uint64_t v31 = v54;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v35 = v45;
          uint64_t v34 = v46;
LABEL_12:
          (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
          break;
        default:
          char v58 = 0;
          sub_100089510();
          uint64_t v31 = v54;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v19);
          break;
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v25, v31);
      break;
    default:
      char v59 = 1;
      sub_1000894BC();
      uint64_t v26 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v16);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v25, v26);
      break;
  }
  return result;
}

unint64_t sub_1000892C4()
{
  unint64_t result = qword_100142D58;
  if (!qword_100142D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D58);
  }
  return result;
}

unint64_t sub_100089318()
{
  unint64_t result = qword_100142D60;
  if (!qword_100142D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D60);
  }
  return result;
}

unint64_t sub_10008936C()
{
  unint64_t result = qword_100142D68;
  if (!qword_100142D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D68);
  }
  return result;
}

unint64_t sub_1000893C0()
{
  unint64_t result = qword_100142D70;
  if (!qword_100142D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D70);
  }
  return result;
}

unint64_t sub_100089414()
{
  unint64_t result = qword_100142D78;
  if (!qword_100142D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D78);
  }
  return result;
}

unint64_t sub_100089468()
{
  unint64_t result = qword_100142D80;
  if (!qword_100142D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D80);
  }
  return result;
}

unint64_t sub_1000894BC()
{
  unint64_t result = qword_100142D88;
  if (!qword_100142D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D88);
  }
  return result;
}

unint64_t sub_100089510()
{
  unint64_t result = qword_100142D90;
  if (!qword_100142D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142D90);
  }
  return result;
}

uint64_t LaunchDashboardAction.Destination.init(from:)(void *a1)
{
  uint64_t result = sub_10008A3D0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_100089588@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10008A3D0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000895B8(void *a1)
{
  return LaunchDashboardAction.Destination.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1000895D8()
{
  uint64_t result = 1701667175;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x726579616C70;
      break;
    case 2:
      uint64_t result = 0x74616E6974736564;
      break;
    case 3:
      uint64_t result = 0x654D6E6F69746361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100089670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008D498(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100089698(uint64_t a1)
{
  unint64_t v2 = sub_10008AE28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000896D4(uint64_t a1)
{
  unint64_t v2 = sub_10008AE28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LaunchDashboardAction.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_100142D98);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_10008AE28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v30 = 0;
  type metadata accessor for Game();
  sub_10008AFE4(&qword_100142C58, (void (*)(uint64_t))type metadata accessor for Game);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for LaunchDashboardAction();
    uint64_t v10 = (long long *)(v3 + *(int *)(v9 + 20));
    long long v11 = v10[7];
    long long v26 = v10[6];
    long long v27 = v11;
    long long v28 = v10[8];
    uint64_t v29 = *((void *)v10 + 18);
    long long v12 = v10[3];
    long long v22 = v10[2];
    long long v23 = v12;
    long long v13 = v10[5];
    long long v24 = v10[4];
    long long v25 = v13;
    long long v14 = v10[1];
    long long v20 = *v10;
    long long v21 = v14;
    char v19 = 1;
    sub_1000066E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    int v15 = (long long *)(v3 + *(int *)(v9 + 24));
    char v16 = *((unsigned char *)v15 + 16);
    long long v20 = *v15;
    LOBYTE(v21) = v16;
    char v19 = 2;
    sub_10008AE7C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 3;
    type metadata accessor for ActionMetrics();
    sub_10008AFE4(&qword_100142DB0, (void (*)(uint64_t))&type metadata accessor for ActionMetrics);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LaunchDashboardAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for ActionMetrics();
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Game();
  __chkstk_darwin(v6);
  long long v27 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100005B18(&qword_100142DB8);
  uint64_t v26 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for LaunchDashboardAction();
  __chkstk_darwin(v10);
  long long v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  char v30 = a1;
  sub_100006650(a1, v13);
  sub_10008AE28();
  long long v28 = v9;
  uint64_t v14 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return sub_100007188((uint64_t)v30);
  }
  LOBYTE(v35) = 0;
  sub_10008AFE4(&qword_100142C68, (void (*)(uint64_t))type metadata accessor for Game);
  uint64_t v15 = (uint64_t)v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1000863E4(v15, (uint64_t)v12);
  char v34 = 1;
  sub_1000071D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v16 = &v12[v10[5]];
  long long v17 = v42;
  *((_OWORD *)v16 + 6) = v41;
  *((_OWORD *)v16 + 7) = v17;
  *((_OWORD *)v16 + 8) = v43;
  *((void *)v16 + 18) = v44;
  long long v18 = v38;
  *((_OWORD *)v16 + 2) = v37;
  *((_OWORD *)v16 + 3) = v18;
  long long v19 = v40;
  *((_OWORD *)v16 + 4) = v39;
  *((_OWORD *)v16 + 5) = v19;
  long long v20 = v36;
  *(_OWORD *)char v16 = v35;
  *((_OWORD *)v16 + 1) = v20;
  char v31 = 2;
  sub_10008AF90();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v21 = v33;
  long long v22 = &v12[v10[6]];
  *(_OWORD *)long long v22 = v32;
  v22[16] = v21;
  LOBYTE(v32) = 3;
  sub_10008AFE4(&qword_100142DC8, (void (*)(uint64_t))&type metadata accessor for ActionMetrics);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v29);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v12[v10[7]], v5, v3);
  sub_10008B02C((uint64_t)v12, v25, (uint64_t (*)(void))type metadata accessor for LaunchDashboardAction);
  sub_100007188((uint64_t)v30);
  return sub_10008B094((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_100089FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for ActionMetrics();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10008A054@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return LaunchDashboardAction.init(from:)(a1, a2);
}

uint64_t sub_10008A06C(void *a1)
{
  return LaunchDashboardAction.encode(to:)(a1);
}

uint64_t sub_10008A084(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72616F6268736164 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D65766569686361 && a2 == 0xEC00000073746E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6272656461656CLL && a2 == 0xEC00000073647261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E656C6C616863 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000FD4F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C69666F7270 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6552646E65697266 && a2 == 0xEE00737473657571)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10008A3D0(void *a1)
{
  uint64_t v59 = sub_100005B18(&qword_100142F20);
  uint64_t v57 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v65 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100005B18(&qword_100142F28);
  uint64_t v60 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  char v61 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_100142F30);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  __chkstk_darwin(v4);
  char v64 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100142F38);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  uint64_t v52 = v8;
  __chkstk_darwin(v7);
  char v62 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_100142F40);
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  char v63 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100005B18(&qword_100142F48);
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100005B18(&qword_100142F50);
  uint64_t v48 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  long long v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100005B18(&qword_100142F58);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  char v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a1[3];
  uint64_t v66 = a1;
  uint64_t v23 = (uint64_t)sub_100006650(a1, v22);
  sub_1000892C4();
  uint64_t v24 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    uint64_t v47 = v17;
    uint64_t v46 = v15;
    uint64_t v26 = v63;
    uint64_t v25 = v64;
    long long v27 = v65;
    uint64_t v67 = v19;
    uint64_t v28 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v28 + 16) == 1)
    {
      switch(*(unsigned char *)(v28 + 32))
      {
        case 1:
          char v69 = 1;
          sub_1000894BC();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v34 = v50;
          uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v36 = v67;
          uint64_t v23 = v35;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v14, v34);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v18);
          break;
        case 2:
          char v70 = 2;
          sub_100089468();
          long long v37 = v26;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v38 = v54;
          uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v40 = v67;
          uint64_t v23 = v39;
          (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v38);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v18);
          break;
        case 3:
          char v71 = 3;
          sub_100089414();
          long long v41 = v62;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v51);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v18);
          uint64_t v23 = 1;
          break;
        case 4:
          char v72 = 4;
          sub_1000893C0();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v56 + 8))(v25, v55);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v18);
          uint64_t v23 = 2;
          break;
        case 5:
          char v73 = 5;
          sub_10008936C();
          long long v42 = v61;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v43 = v58;
          uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v44 = v67;
          (*(void (**)(char *, uint64_t))(v60 + 8))(v42, v43);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v18);
          break;
        case 6:
          char v74 = 6;
          sub_100089318();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v59);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v18);
          uint64_t v23 = 3;
          break;
        default:
          char v68 = 0;
          sub_100089510();
          uint64_t v29 = v47;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v46);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v18);
          uint64_t v23 = 0;
          break;
      }
    }
    else
    {
      uint64_t v30 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v32 = v31;
      sub_100005B18(&qword_100140060);
      *long long v32 = &type metadata for LaunchDashboardAction.Destination;
      uint64_t v23 = (uint64_t)v21;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, enum case for DecodingError.typeMismatch(_:), v30);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v21, v18);
    }
  }
  sub_100007188((uint64_t)v66);
  return v23;
}

unint64_t sub_10008AE28()
{
  unint64_t result = qword_100142DA0;
  if (!qword_100142DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142DA0);
  }
  return result;
}

unint64_t sub_10008AE7C()
{
  unint64_t result = qword_100142DA8;
  if (!qword_100142DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142DA8);
  }
  return result;
}

uint64_t sub_10008AED0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100015C9C(v2, v3);
  return a1;
}

unint64_t sub_10008AF90()
{
  unint64_t result = qword_100142DC0;
  if (!qword_100142DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142DC0);
  }
  return result;
}

uint64_t sub_10008AFE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008B02C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10008B094(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for LaunchDashboardAction(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = (int *)type metadata accessor for Game();
    uint64_t v10 = v9[7];
    __dst = (char *)v4 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v45(v11, 1, v12))
    {
      uint64_t v14 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    *(void *)((char *)v4 + v9[8]) = *(void *)((char *)a2 + v9[8]);
    *((unsigned char *)v4 + v9[9]) = *((unsigned char *)a2 + v9[9]);
    *((unsigned char *)v4 + v9[10]) = *((unsigned char *)a2 + v9[10]);
    *((unsigned char *)v4 + v9[11]) = *((unsigned char *)a2 + v9[11]);
    *((unsigned char *)v4 + v9[12]) = *((unsigned char *)a2 + v9[12]);
    *((unsigned char *)v4 + v9[13]) = *((unsigned char *)a2 + v9[13]);
    *((unsigned char *)v4 + v9[14]) = *((unsigned char *)a2 + v9[14]);
    uint64_t v16 = v9[15];
    long long v17 = (void *)((char *)v4 + v16);
    uint64_t v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *long long v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[5];
    char v21 = (char *)v4 + v20;
    uint64_t v22 = (void *)((char *)a2 + v20);
    uint64_t v23 = *(void *)((char *)a2 + v20 + 8);
    *(void *)char v21 = *(void *)((char *)a2 + v20);
    *((void *)v21 + 1) = v23;
    uint64_t v24 = *(void *)((char *)a2 + v20 + 24);
    *((void *)v21 + 2) = *(void *)((char *)a2 + v20 + 16);
    *((void *)v21 + 3) = v24;
    uint64_t v25 = *(void *)((char *)a2 + v20 + 40);
    *((void *)v21 + 4) = *(void *)((char *)a2 + v20 + 32);
    *((void *)v21 + 5) = v25;
    uint64_t v26 = *(void *)((char *)a2 + v20 + 56);
    *((void *)v21 + 6) = *(void *)((char *)a2 + v20 + 48);
    *((void *)v21 + 7) = v26;
    uint64_t v27 = *(void *)((char *)a2 + v20 + 72);
    *((void *)v21 + 8) = *(void *)((char *)a2 + v20 + 64);
    *((void *)v21 + 9) = v27;
    v21[80] = *((unsigned char *)a2 + v20 + 80);
    uint64_t v28 = *(void *)((char *)a2 + v20 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28)
    {
      *((void *)v21 + 11) = v22[11];
      *((void *)v21 + 12) = v28;
      uint64_t v29 = v22[14];
      *((void *)v21 + 13) = v22[13];
      *((void *)v21 + 14) = v29;
      uint64_t v30 = v22[16];
      *((void *)v21 + 15) = v22[15];
      *((void *)v21 + 16) = v30;
      uint64_t v31 = v22[18];
      *((void *)v21 + 17) = v22[17];
      *((void *)v21 + 18) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v32 = *(_OWORD *)(v22 + 13);
      *(_OWORD *)(v21 + 88) = *(_OWORD *)(v22 + 11);
      *(_OWORD *)(v21 + 104) = v32;
      long long v33 = *(_OWORD *)(v22 + 17);
      *(_OWORD *)(v21 + 120) = *(_OWORD *)(v22 + 15);
      *(_OWORD *)(v21 + 136) = v33;
    }
    uint64_t v34 = a3[6];
    uint64_t v35 = (char *)v4 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = *(void *)v36;
    uint64_t v38 = *((void *)v36 + 1);
    unsigned __int8 v39 = v36[16];
    sub_10005FEEC(*(void *)v36, v38, v39);
    *(void *)uint64_t v35 = v37;
    *((void *)v35 + 1) = v38;
    v35[16] = v39;
    uint64_t v40 = a3[7];
    long long v41 = (char *)v4 + v40;
    long long v42 = (char *)a2 + v40;
    uint64_t v43 = type metadata accessor for ActionMetrics();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
  }
  return v4;
}

uint64_t destroy for LaunchDashboardAction(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for Game() + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v7 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100024824(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8), *(unsigned char *)(a1 + a2[6] + 16));
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for ActionMetrics();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

void *initializeWithCopy for LaunchDashboardAction(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = (int *)type metadata accessor for Game();
  uint64_t v9 = v8[7];
  __dst = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43(v10, 1, v11))
  {
    uint64_t v13 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
  *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
  *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
  *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
  *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
  *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
  uint64_t v14 = v8[15];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = *(void *)((char *)a2 + v18 + 8);
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  *((void *)v19 + 1) = v21;
  uint64_t v22 = *(void *)((char *)a2 + v18 + 24);
  *((void *)v19 + 2) = *(void *)((char *)a2 + v18 + 16);
  *((void *)v19 + 3) = v22;
  uint64_t v23 = *(void *)((char *)a2 + v18 + 40);
  *((void *)v19 + 4) = *(void *)((char *)a2 + v18 + 32);
  *((void *)v19 + 5) = v23;
  uint64_t v24 = *(void *)((char *)a2 + v18 + 56);
  *((void *)v19 + 6) = *(void *)((char *)a2 + v18 + 48);
  *((void *)v19 + 7) = v24;
  uint64_t v25 = *(void *)((char *)a2 + v18 + 72);
  *((void *)v19 + 8) = *(void *)((char *)a2 + v18 + 64);
  *((void *)v19 + 9) = v25;
  v19[80] = *((unsigned char *)a2 + v18 + 80);
  uint64_t v26 = *(void *)((char *)a2 + v18 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26)
  {
    *((void *)v19 + 11) = v20[11];
    *((void *)v19 + 12) = v26;
    uint64_t v27 = v20[14];
    *((void *)v19 + 13) = v20[13];
    *((void *)v19 + 14) = v27;
    uint64_t v28 = v20[16];
    *((void *)v19 + 15) = v20[15];
    *((void *)v19 + 16) = v28;
    uint64_t v29 = v20[18];
    *((void *)v19 + 17) = v20[17];
    *((void *)v19 + 18) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *(_OWORD *)(v20 + 13);
    *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 11);
    *(_OWORD *)(v19 + 104) = v30;
    long long v31 = *(_OWORD *)(v20 + 17);
    *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 15);
    *(_OWORD *)(v19 + 136) = v31;
  }
  uint64_t v32 = a3[6];
  long long v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *((void *)v34 + 1);
  unsigned __int8 v37 = v34[16];
  sub_10005FEEC(*(void *)v34, v36, v37);
  *(void *)long long v33 = v35;
  *((void *)v33 + 1) = v36;
  v33[16] = v37;
  uint64_t v38 = a3[7];
  unsigned __int8 v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
  return a1;
}

void *assignWithCopy for LaunchDashboardAction(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for Game();
  uint64_t v6 = v5[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100005B18(&qword_100140C48);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  *((unsigned char *)a1 + v5[9]) = *((unsigned char *)a2 + v5[9]);
  *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
  *((unsigned char *)a1 + v5[11]) = *((unsigned char *)a2 + v5[11]);
  *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
  *((unsigned char *)a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
  *((unsigned char *)a1 + v5[14]) = *((unsigned char *)a2 + v5[14]);
  uint64_t v15 = v5[15];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  *((void *)v19 + 1) = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 2) = *((void *)v20 + 2);
  *((void *)v19 + 3) = *((void *)v20 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 4) = *((void *)v20 + 4);
  *((void *)v19 + 5) = *((void *)v20 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 6) = *((void *)v20 + 6);
  *((void *)v19 + 7) = *((void *)v20 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 8) = *((void *)v20 + 8);
  *((void *)v19 + 9) = *((void *)v20 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[80] = v20[80];
  uint64_t v21 = v19 + 88;
  uint64_t v22 = (long long *)(v20 + 88);
  uint64_t v23 = *((void *)v20 + 12);
  if (*((void *)v19 + 12))
  {
    if (v23)
    {
      *((void *)v19 + 11) = *((void *)v20 + 11);
      *((void *)v19 + 12) = *((void *)v20 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v19 + 13) = *((void *)v20 + 13);
      *((void *)v19 + 14) = *((void *)v20 + 14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v19 + 15) = *((void *)v20 + 15);
      *((void *)v19 + 16) = *((void *)v20 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v19 + 17) = *((void *)v20 + 17);
      *((void *)v19 + 18) = *((void *)v20 + 18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100006D1C((uint64_t)(v19 + 88));
      long long v24 = *(_OWORD *)(v20 + 136);
      long long v26 = *v22;
      long long v25 = *(_OWORD *)(v20 + 104);
      *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 120);
      *(_OWORD *)(v19 + 136) = v24;
      *uint64_t v21 = v26;
      *(_OWORD *)(v19 + 104) = v25;
    }
  }
  else if (v23)
  {
    *((void *)v19 + 11) = *((void *)v20 + 11);
    *((void *)v19 + 12) = *((void *)v20 + 12);
    *((void *)v19 + 13) = *((void *)v20 + 13);
    *((void *)v19 + 14) = *((void *)v20 + 14);
    *((void *)v19 + 15) = *((void *)v20 + 15);
    *((void *)v19 + 16) = *((void *)v20 + 16);
    *((void *)v19 + 17) = *((void *)v20 + 17);
    *((void *)v19 + 18) = *((void *)v20 + 18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *v22;
    long long v28 = *(_OWORD *)(v20 + 104);
    long long v29 = *(_OWORD *)(v20 + 136);
    *(_OWORD *)(v19 + 120) = *(_OWORD *)(v20 + 120);
    *(_OWORD *)(v19 + 136) = v29;
    *uint64_t v21 = v27;
    *(_OWORD *)(v19 + 104) = v28;
  }
  uint64_t v30 = a3[6];
  long long v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *((void *)v32 + 1);
  unsigned __int8 v35 = v32[16];
  sub_10005FEEC(*(void *)v32, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  *(void *)long long v31 = v33;
  *((void *)v31 + 1) = v34;
  unsigned __int8 v38 = v31[16];
  v31[16] = v35;
  sub_100024824(v36, v37, v38);
  uint64_t v39 = a3[7];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 24))(v40, v41, v42);
  return a1;
}

_OWORD *initializeWithTake for LaunchDashboardAction(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = (int *)type metadata accessor for Game();
  uint64_t v8 = v7[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100005B18(&qword_100140C48);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
  *((unsigned char *)a1 + v7[9]) = *((unsigned char *)a2 + v7[9]);
  *((unsigned char *)a1 + v7[10]) = *((unsigned char *)a2 + v7[10]);
  *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
  *((unsigned char *)a1 + v7[12]) = *((unsigned char *)a2 + v7[12]);
  *((unsigned char *)a1 + v7[13]) = *((unsigned char *)a2 + v7[13]);
  *((unsigned char *)a1 + v7[14]) = *((unsigned char *)a2 + v7[14]);
  *(_OWORD *)((char *)a1 + v7[15]) = *(_OWORD *)((char *)a2 + v7[15]);
  uint64_t v14 = a3[5];
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *((void *)v16 + 18) = *((void *)v17 + 18);
  long long v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  long long v19 = *((_OWORD *)v17 + 5);
  *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
  *((_OWORD *)v16 + 5) = v19;
  long long v20 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v20;
  long long v21 = *((_OWORD *)v17 + 8);
  long long v22 = *((_OWORD *)v17 + 6);
  *((_OWORD *)v16 + 7) = *((_OWORD *)v17 + 7);
  *((_OWORD *)v16 + 8) = v21;
  *((_OWORD *)v16 + 6) = v22;
  uint64_t v23 = (char *)a1 + v15;
  long long v24 = (char *)a2 + v15;
  v23[16] = v24[16];
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  uint64_t v25 = a3[7];
  long long v26 = (char *)a1 + v25;
  long long v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

void *assignWithTake for LaunchDashboardAction(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for Game();
  uint64_t v9 = v8[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100005B18(&qword_100140C48);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
  *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
  *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
  *((unsigned char *)a1 + v8[12]) = *((unsigned char *)a2 + v8[12]);
  *((unsigned char *)a1 + v8[13]) = *((unsigned char *)a2 + v8[13]);
  *((unsigned char *)a1 + v8[14]) = *((unsigned char *)a2 + v8[14]);
  uint64_t v18 = v8[15];
  long long v19 = (void *)((char *)a1 + v18);
  long long v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *long long v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[5];
  long long v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)((char *)a2 + v23 + 8);
  *(void *)long long v24 = *(void *)((char *)a2 + v23);
  *((void *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *((void *)v25 + 3);
  *((void *)v24 + 2) = *((void *)v25 + 2);
  *((void *)v24 + 3) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *((void *)v25 + 5);
  *((void *)v24 + 4) = *((void *)v25 + 4);
  *((void *)v24 + 5) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *((void *)v25 + 7);
  *((void *)v24 + 6) = *((void *)v25 + 6);
  *((void *)v24 + 7) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *((void *)v25 + 9);
  *((void *)v24 + 8) = *((void *)v25 + 8);
  *((void *)v24 + 9) = v30;
  swift_bridgeObjectRelease();
  v24[80] = v25[80];
  if (!*((void *)v24 + 12))
  {
LABEL_11:
    long long v35 = *(_OWORD *)(v25 + 104);
    *(_OWORD *)(v24 + 88) = *(_OWORD *)(v25 + 88);
    *(_OWORD *)(v24 + 104) = v35;
    long long v36 = *(_OWORD *)(v25 + 136);
    *(_OWORD *)(v24 + 120) = *(_OWORD *)(v25 + 120);
    *(_OWORD *)(v24 + 136) = v36;
    goto LABEL_12;
  }
  uint64_t v31 = *((void *)v25 + 12);
  if (!v31)
  {
    sub_100006D1C((uint64_t)(v24 + 88));
    goto LABEL_11;
  }
  *((void *)v24 + 11) = *((void *)v25 + 11);
  *((void *)v24 + 12) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *((void *)v25 + 14);
  *((void *)v24 + 13) = *((void *)v25 + 13);
  *((void *)v24 + 14) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *((void *)v25 + 16);
  *((void *)v24 + 15) = *((void *)v25 + 15);
  *((void *)v24 + 16) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *((void *)v25 + 18);
  *((void *)v24 + 17) = *((void *)v25 + 17);
  *((void *)v24 + 18) = v34;
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v37 = a3[6];
  unsigned __int8 v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  char v40 = v39[16];
  uint64_t v41 = *(void *)v38;
  uint64_t v42 = *((void *)v38 + 1);
  *(_OWORD *)unsigned __int8 v38 = *(_OWORD *)v39;
  unsigned __int8 v43 = v38[16];
  v38[16] = v40;
  sub_100024824(v41, v42, v43);
  uint64_t v44 = a3[7];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 40))(v45, v46, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchDashboardAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008C3C4);
}

uint64_t sub_10008C3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Game();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for ActionMetrics();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for LaunchDashboardAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008C508);
}

uint64_t sub_10008C508(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Game();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for ActionMetrics();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_10008C638()
{
  uint64_t result = type metadata accessor for Game();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ActionMetrics();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LaunchDashboardAction.Destination(uint64_t a1)
{
  return sub_100024824(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s13GameOverlayUI21LaunchDashboardActionV11DestinationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10005FEEC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LaunchDashboardAction.Destination(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10005FEEC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100024824(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LaunchDashboardAction.Destination(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100024824(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchDashboardAction.Destination(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LaunchDashboardAction.Destination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10008C8A0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10008C8B8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination()
{
  return &type metadata for LaunchDashboardAction.Destination;
}

unsigned char *storeEnumTagSinglePayload for LaunchDashboardAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008C9ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.CodingKeys()
{
  return &type metadata for LaunchDashboardAction.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccessPointUseCase(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LaunchDashboardAction.Destination.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008CB40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.CodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.CodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.DashboardCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.DashboardCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.AchievementsCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.AchievementsCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.LeaderboardsCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.LeaderboardsCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.ChallengesCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.ChallengesCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.LocalPlayerProfileCodingKeys;
}

unsigned char *_s13GameOverlayUI21LaunchDashboardActionV11DestinationO22AchievementsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10008CC68);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.ProfileCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.ProfileCodingKeys;
}

ValueMetadata *type metadata accessor for LaunchDashboardAction.Destination.FriendRequestsCodingKeys()
{
  return &type metadata for LaunchDashboardAction.Destination.FriendRequestsCodingKeys;
}

unint64_t sub_10008CCB4()
{
  unint64_t result = qword_100142E68;
  if (!qword_100142E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E68);
  }
  return result;
}

unint64_t sub_10008CD0C()
{
  unint64_t result = qword_100142E70;
  if (!qword_100142E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E70);
  }
  return result;
}

unint64_t sub_10008CD64()
{
  unint64_t result = qword_100142E78;
  if (!qword_100142E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E78);
  }
  return result;
}

unint64_t sub_10008CDBC()
{
  unint64_t result = qword_100142E80;
  if (!qword_100142E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E80);
  }
  return result;
}

unint64_t sub_10008CE14()
{
  unint64_t result = qword_100142E88;
  if (!qword_100142E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E88);
  }
  return result;
}

unint64_t sub_10008CE6C()
{
  unint64_t result = qword_100142E90;
  if (!qword_100142E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E90);
  }
  return result;
}

unint64_t sub_10008CEC4()
{
  unint64_t result = qword_100142E98;
  if (!qword_100142E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142E98);
  }
  return result;
}

unint64_t sub_10008CF1C()
{
  unint64_t result = qword_100142EA0;
  if (!qword_100142EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EA0);
  }
  return result;
}

unint64_t sub_10008CF74()
{
  unint64_t result = qword_100142EA8;
  if (!qword_100142EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EA8);
  }
  return result;
}

unint64_t sub_10008CFCC()
{
  unint64_t result = qword_100142EB0;
  if (!qword_100142EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EB0);
  }
  return result;
}

unint64_t sub_10008D024()
{
  unint64_t result = qword_100142EB8;
  if (!qword_100142EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EB8);
  }
  return result;
}

unint64_t sub_10008D07C()
{
  unint64_t result = qword_100142EC0;
  if (!qword_100142EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EC0);
  }
  return result;
}

unint64_t sub_10008D0D4()
{
  unint64_t result = qword_100142EC8;
  if (!qword_100142EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EC8);
  }
  return result;
}

unint64_t sub_10008D12C()
{
  unint64_t result = qword_100142ED0;
  if (!qword_100142ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142ED0);
  }
  return result;
}

unint64_t sub_10008D184()
{
  unint64_t result = qword_100142ED8;
  if (!qword_100142ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142ED8);
  }
  return result;
}

unint64_t sub_10008D1DC()
{
  unint64_t result = qword_100142EE0;
  if (!qword_100142EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EE0);
  }
  return result;
}

unint64_t sub_10008D234()
{
  unint64_t result = qword_100142EE8;
  if (!qword_100142EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EE8);
  }
  return result;
}

unint64_t sub_10008D28C()
{
  unint64_t result = qword_100142EF0;
  if (!qword_100142EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EF0);
  }
  return result;
}

unint64_t sub_10008D2E4()
{
  unint64_t result = qword_100142EF8;
  if (!qword_100142EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142EF8);
  }
  return result;
}

unint64_t sub_10008D33C()
{
  unint64_t result = qword_100142F00;
  if (!qword_100142F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142F00);
  }
  return result;
}

unint64_t sub_10008D394()
{
  unint64_t result = qword_100142F08;
  if (!qword_100142F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142F08);
  }
  return result;
}

unint64_t sub_10008D3EC()
{
  unint64_t result = qword_100142F10;
  if (!qword_100142F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142F10);
  }
  return result;
}

unint64_t sub_10008D444()
{
  unint64_t result = qword_100142F18;
  if (!qword_100142F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100142F18);
  }
  return result;
}

uint64_t sub_10008D498(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667175 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726579616C70 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_10008D67C(char a1)
{
  unint64_t result = 0xD00000000000001BLL;
  switch(a1)
  {
    case 1:
    case 5:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0xD000000000000025;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000028;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10008D760(unsigned __int8 *a1, char *a2)
{
  return sub_100008A94(*a1, *a2);
}

Swift::Int sub_10008D76C()
{
  return sub_1000F3898();
}

uint64_t sub_10008D778()
{
  return sub_1000F3534();
}

Swift::Int sub_10008D780()
{
  return sub_1000F3898();
}

unint64_t sub_10008D788@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10008EB8C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10008D7B8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10008D67C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10008D7E4()
{
  off_100142F60 = &_swiftEmptyDictionarySingleton;
}

uint64_t sub_10008D7F8()
{
  type metadata accessor for GameOverlayUIConfig.SharedResources();
  uint64_t result = GameOverlayUIConfig.SharedResources.__allocating_init()();
  qword_100142F68 = result;
  return result;
}

char *sub_10008D878(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v5[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener] = 0;
  v39.receiver = v5;
  v39.super_class = ObjectType;
  id v11 = [super init];
  uint64_t v33 = a1;
  id v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  id v37 = v11;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10008F5B0;
  *(void *)(v12 + 24) = &v32;
  aBlock[4] = sub_10008F7E0;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008DD2C;
  void aBlock[3] = &unk_100133AF8;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = self;
  int v15 = (char *)v11;
  swift_retain();
  id v16 = [v14 listenerWithConfigurator:v13];
  _Block_release(v13);
  swift_release();
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v18 = OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener;
  long long v19 = *(void **)&v15[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener];
  *(void *)&v15[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener] = v16;

  uint64_t isEscapingClosureAtFileLocation = *(void *)&v15[v18];
  if (isEscapingClosureAtFileLocation)
  {
    uint64_t v20 = qword_10013FBB0;
    a2 = (id)isEscapingClosureAtFileLocation;
    if (v20 == -1)
    {
LABEL_4:
      uint64_t v21 = type metadata accessor for Logger();
      sub_100007D4C(v21, (uint64_t)qword_100156CF8);
      uint64_t v22 = a2;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 138412290;
        aBlock[0] = v22;
        uint64_t v26 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v31 = isEscapingClosureAtFileLocation;

        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Listener activated: %@", v25, 0xCu);
        sub_100005B18(&qword_100142A40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v23 = v22;
      }

      [v22 activate];
      goto LABEL_12;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007D4C(v27, (uint64_t)qword_100156CF8);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v28, "Failed to create listener", v29, 2u);
    swift_slowDealloc();
  }
LABEL_12:

  return v15;
}

id sub_10008DC80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  [a1 setDomain:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [a1 setService:v9];

  return [a1 setDelegate:a6];
}

uint64_t sub_10008DD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return _swift_task_switch(sub_10008DD54, 0, 0);
}

uint64_t sub_10008DD54()
{
  if (qword_10013FC10 != -1) {
    swift_once();
  }
  v0[11] = qword_100142F68;
  v0[12] = type metadata accessor for GameOverlayUIConfig.SharedResources();
  v0[13] = sub_10008F434();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008DE1C, v2, v1);
}

uint64_t sub_10008DE1C()
{
  *(void *)(v0 + 112) = dispatch thunk of GameOverlayUIConfig.SharedResources.interface(kind:)();
  return _swift_task_switch(sub_10008DE8C, 0, 0);
}

uint64_t sub_10008DE8C()
{
  *(void *)(v0 + 120) = qword_100142F68;
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008DF08, v2, v1);
}

uint64_t sub_10008DF08()
{
  *(void *)(v0 + 128) = dispatch thunk of GameOverlayUIConfig.SharedResources.connectionQueue(kind:)();
  return _swift_task_switch(sub_10008DF78, 0, 0);
}

uint64_t sub_10008DF78()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = (void *)v0[14];
  int v3 = (void *)v0[9];
  uint64_t v4 = (void *)v0[10];
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v1;
  v5[3] = v2;
  v5[4] = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10008F4D4;
  *(void *)(v6 + 24) = v5;
  v0[6] = sub_10008F4F0;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10008DD2C;
  v0[5] = &unk_1001339E0;
  BOOL v7 = _Block_copy(v0 + 2);
  id v8 = v1;
  id v9 = v2;
  id v10 = v4;
  swift_retain();
  swift_release();
  [v3 configureConnection:v7];
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = (void *)v0[16];
    uint64_t v13 = (void *)v0[14];
    [(id)v0[9] activate];
    swift_release();

    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  return result;
}

void sub_10008E13C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  [a1 setTargetQueue:a2];
  id v7 = [self userInitiated];
  [a1 setServiceQuality:v7];

  [a1 setInterface:a3];
  [a1 setInterfaceTarget:a4];
  long long v19 = sub_10008E3AC;
  uint64_t v20 = 0;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  uint64_t v17 = sub_10007BDE0;
  uint64_t v18 = &unk_100133A08;
  id v8 = _Block_copy(&v15);
  [a1 setActivationHandler:v8];
  _Block_release(v8);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a4;
  long long v19 = sub_10008F568;
  uint64_t v20 = v9;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  uint64_t v17 = sub_10007BDE0;
  uint64_t v18 = &unk_100133A58;
  id v10 = _Block_copy(&v15);
  id v11 = a4;
  swift_release();
  [a1 setInvalidationHandler:v10];
  _Block_release(v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  long long v19 = sub_10008F58C;
  uint64_t v20 = v12;
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256;
  uint64_t v17 = sub_10007BDE0;
  uint64_t v18 = &unk_100133AA8;
  uint64_t v13 = _Block_copy(&v15);
  id v14 = v11;
  swift_release();
  [a1 setInterruptionHandler:v13];
  _Block_release(v13);
}

void sub_10008E3AC(void *a1)
{
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007D4C(v2, (uint64_t)qword_100156CF8);
  id v8 = a1;
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    id v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v8;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "GameOverlayUI Activation Handler: %@", v5, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id sub_10008E578(void *a1, uint64_t a2, const char *a3)
{
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007D4C(v5, (uint64_t)qword_100156CF8);
  id v6 = a1;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, a3, v9, 0xCu);
    sub_100005B18(&qword_100142A40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [v6 invalidate];
}

uint64_t sub_10008E724(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

id sub_10008E7FC()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener;
  int v3 = *(void **)&v0[OBJC_IVAR____TtC13GameOverlayUI20GameOverlayUIService_listener];
  if (v3)
  {
    [v3 invalidate];
    os_log_type_t v4 = *(void **)&v0[v2];
  }
  else
  {
    os_log_type_t v4 = 0;
  }
  *(void *)&v0[v2] = 0;

  v6.receiver = v0;
  v6.super_class = ObjectType;
  return [super dealloc];
}

uint64_t type metadata accessor for GameOverlayUIService()
{
  return self;
}

uint64_t sub_10008E8D4(char a1, uint64_t a2, void *a3)
{
  id v6 = [self currentContext];
  if (v6 && (id v7 = v6, v8 = [v6 remoteToken], v7, v8))
  {
    uint64_t v9 = sub_1000E61EC(a1, a2, a3);
  }
  else
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007D4C(v10, (uint64_t)qword_100156CF8);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Could not find a valid audit token for the client request", v13, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v9;
}

uint64_t sub_10008EA3C(char a1)
{
  id v2 = [self currentContext];
  if (v2 && (int v3 = v2, v4 = [v2 remoteToken], v3, v4))
  {
    uint64_t v5 = sub_1000E667C(a1);
  }
  else
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007D4C(v6, (uint64_t)qword_100156CF8);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not find a valid audit token for the client request", v9, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v5;
}

unint64_t sub_10008EB8C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10012FD38, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void sub_10008EBD8(uint64_t a1, void *a2)
{
  if (qword_10013FC08 != -1) {
    swift_once();
  }
  uint64_t v4 = GameOverlayUIConfig.ServiceKind.rawValue.getter();
  uint64_t v6 = v5;
  swift_beginAccess();
  if (*((void *)off_100142F60 + 2) && (sub_1000DC324(v4, v6), (v7 & 1) != 0))
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v8 = GameOverlayUIConfig.ServiceKind.rawValue.getter();
    uint64_t v10 = v9;
    id v11 = objc_allocWithZone((Class)type metadata accessor for GameOverlayUIService());
    os_log_type_t v12 = sub_10008D878(a1, a2, v8, v10);
    uint64_t v13 = GameOverlayUIConfig.ServiceKind.rawValue.getter();
    uint64_t v15 = v14;
    swift_beginAccess();
    uint64_t v16 = v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = off_100142F60;
    off_100142F60 = (_UNKNOWN *)0x8000000000000000;
    sub_10006F8E4((uint64_t)v16, v13, v15, isUniquelyReferenced_nonNull_native);
    off_100142F60 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
}

uint64_t sub_10008ED80(void *a1)
{
  Swift::String v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v4 - 8);
  uint64_t v48 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  uint64_t v7 = *(void *)(v49 + 64);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v11 = (char *)&v43 - v10;
  id v12 = [a1 remoteToken];
  if (qword_10013FBB0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007D4C(v13, (uint64_t)qword_100156CF8);
  id v14 = v12;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v52 = v2;
  id v47 = v14;
  if (v17)
  {
    uint64_t v44 = v7;
    uint64_t v45 = a1;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    long long v19 = v14;
    id v20 = [v14 bundleID];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;
    }
    else
    {
      unint64_t v24 = 0xE700000000000000;
      uint64_t v22 = 0x6E776F6E6B6E75;
    }
    uint64_t v53 = sub_100036BF8(v22, v24, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Service listener did receive connection for remote process: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = v44;
    a1 = v45;
  }
  else
  {
  }
  id v25 = [a1 service];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = v11;
  uint64_t v46 = v11;
  static GameOverlayUIConfig.ServiceKind.from(name:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for TaskPriority();
  uint64_t v28 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v48, 1, 1, v27);
  uint64_t v29 = a1;
  uint64_t v30 = v49;
  uint64_t v31 = v9;
  char v32 = v9;
  uint64_t v33 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v32, v26, v50);
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  unint64_t v35 = (v7 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = 0;
  *(void *)(v37 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v37 + v34, v31, v33);
  *(void *)(v37 + v35) = v29;
  uint64_t v38 = ObjectType;
  objc_super v39 = v52;
  *(void *)(v37 + v36) = v52;
  *(void *)(v37 + ((v36 + 15) & 0xFFFFFFFFFFFFFFF8)) = v38;
  id v40 = v29;
  id v41 = v39;
  sub_10002C340(v28, (uint64_t)&unk_100143078, v37);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v46, v33);
}

uint64_t sub_10008F20C()
{
  uint64_t v1 = type metadata accessor for GameOverlayUIConfig.ServiceKind();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10008F30C()
{
  uint64_t v2 = *(void *)(type metadata accessor for GameOverlayUIConfig.ServiceKind() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000243C4;
  v8[9] = v6;
  v8[10] = v7;
  v8[8] = v5;
  return _swift_task_switch(sub_10008DD54, 0, 0);
}

unint64_t sub_10008F434()
{
  unint64_t result = qword_100143080;
  if (!qword_100143080)
  {
    type metadata accessor for GameOverlayUIConfig.SharedResources();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143080);
  }
  return result;
}

uint64_t sub_10008F48C()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10008F4D4(void *a1)
{
  sub_10008E13C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10008F4E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008F4F0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10008F518(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008F528()
{
  return swift_release();
}

uint64_t sub_10008F530()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10008F568(void *a1)
{
  return sub_10008E578(a1, *(void *)(v1 + 16), "GameOverlayUI Invalidation Handler: %@");
}

id sub_10008F58C(void *a1)
{
  return sub_10008E578(a1, *(void *)(v1 + 16), "GameOverlayUI Interruption Handler: %@");
}

id sub_10008F5B0(void *a1)
{
  return sub_10008DC80(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10008F5C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t getEnumTagSinglePayload for RemoteAlertIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RemoteAlertIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008F72CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteAlertIdentifier()
{
  return &type metadata for RemoteAlertIdentifier;
}

unint64_t sub_10008F768()
{
  unint64_t result = qword_100143150;
  if (!qword_100143150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143150);
  }
  return result;
}

id sub_10008F7E4()
{
  type metadata accessor for GameOverlayUIApp();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  static NSBundle.GameOverlayUI = (uint64_t)result;
  return result;
}

uint64_t *NSBundle.GameOverlayUI.unsafeMutableAddressor()
{
  if (qword_10013FC18 != -1) {
    swift_once();
  }
  return &static NSBundle.GameOverlayUI;
}

id static NSBundle.GameOverlayUI.getter()
{
  if (qword_10013FC18 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSBundle.GameOverlayUI;

  return v0;
}

uint64_t sub_10008F8E4(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_WELCOME_BANNER_TITLE.getter, &qword_100156D28, &qword_100156D30);
}

uint64_t sub_10008F908(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_WELCOME_BANNER_TITLE_SHORT.getter, &qword_100156D38, &qword_100156D40);
}

uint64_t sub_10008F92C(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.SIGN_IN_BANNER_TITLE.getter, &qword_100156D48, &qword_100156D50);
}

uint64_t sub_10008F950(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_ACCESS_POINT_GAMES_FOR_YOU.getter, &qword_100156D58, &qword_100156D60);
}

uint64_t sub_10008F974(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_ACHIEVEMENT_HIGHLIGHT_TITLE.getter, &qword_100156D68, &qword_100156D70);
}

uint64_t sub_10008F998(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_LEADERBOARD_HIGHLIGHT_TITLE.getter, &qword_100156D78, &qword_100156D80);
}

uint64_t sub_10008F9BC(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_TITLE.getter, &qword_100156D88, &qword_100156D90);
}

uint64_t sub_10008F9E0(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_ON.getter, &qword_100156D98, &qword_100156DA0);
}

uint64_t sub_10008FA04(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_OFF.getter, &qword_100156DA8, &qword_100156DB0);
}

uint64_t sub_10008FA28(uint64_t a1)
{
  return sub_10008FA4C(a1, (uint64_t (*)(void))&static GCUILocalizedStrings.OVERLAY_GAME_MODE_TOGGLE_AX_HINT.getter, &qword_100156DB8, &qword_100156DC0);
}

uint64_t sub_10008FA4C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, void *a4)
{
  type metadata accessor for GCUILocalizedStrings();
  uint64_t result = a2();
  *a3 = result;
  *a4 = v8;
  return result;
}

uint64_t sub_10008FA98()
{
  sub_100005B18(&qword_100143278);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100110840;
  uint64_t v1 = type metadata accessor for AccessPointPageIntent();
  uint64_t v2 = sub_1000920A0(&qword_100143280, (void (*)(uint64_t))type metadata accessor for AccessPointPageIntent);
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = type metadata accessor for GameDashboardPageIntent();
  uint64_t v4 = sub_1000920A0(&qword_100142640, (void (*)(uint64_t))type metadata accessor for GameDashboardPageIntent);
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = type metadata accessor for InGameBannerPageIntent();
  uint64_t v6 = sub_1000920A0((unint64_t *)&unk_100140B20, (void (*)(uint64_t))type metadata accessor for InGameBannerPageIntent);
  *(void *)(v0 + 64) = v5;
  *(void *)(v0 + 72) = v6;
  unint64_t v7 = sub_100076F50();
  *(void *)(v0 + 80) = &type metadata for PlayNowPageIntent;
  *(void *)(v0 + 88) = v7;
  uint64_t v8 = type metadata accessor for AccessPointDataIntent();
  uint64_t result = sub_1000920A0((unint64_t *)&qword_100142B30, (void (*)(uint64_t))type metadata accessor for AccessPointDataIntent);
  *(void *)(v0 + 96) = v8;
  *(void *)(v0 + 104) = result;
  off_100143160 = (_UNKNOWN *)v0;
  return result;
}

uint64_t sub_10008FC04()
{
  if (qword_10013FC70 != -1) {
    swift_once();
  }
  uint64_t v0 = off_100143160;
  uint64_t v1 = *((void *)off_100143160 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = 0;
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      long long v10 = v0[v2 + 2];
      v13[3] = swift_getAssociatedTypeWitness();
      sub_1000082EC(v13);
      dispatch thunk of static IntentModel.kind.getter();
      if (swift_dynamicCast())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_1000369F0(0, v3[2] + 1, 1, v3);
        }
        unint64_t v6 = v3[2];
        unint64_t v5 = v3[3];
        if (v6 >= v5 >> 1) {
          uint64_t v3 = sub_1000369F0((void *)(v5 > 1), v6 + 1, 1, v3);
        }
        v3[2] = v6 + 1;
        uint64_t v4 = &v3[4 * v6];
        v4[4] = v11;
        v4[5] = v12;
        *((_OWORD *)v4 + 3) = v10;
      }
      ++v2;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease_n();
    if (v3[2]) {
      goto LABEL_13;
    }
LABEL_15:
    unint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_16;
  }
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_15;
  }
LABEL_13:
  sub_100005B18(&qword_100142608);
  unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
LABEL_16:
  v13[0] = (uint64_t)v7;
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1000919E4(v8, 1, v13);
  uint64_t result = swift_bridgeObjectRelease();
  static IntentKinds.table = v13[0];
  return result;
}

uint64_t *IntentKinds.table.unsafeMutableAddressor()
{
  if (qword_10013FC78 != -1) {
    swift_once();
  }
  return &static IntentKinds.table;
}

uint64_t static IntentKinds.table.getter()
{
  if (qword_10013FC78 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

unint64_t sub_10008FF24()
{
  if (qword_10013FC78 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = sub_100091D78(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10008FF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10008FFAC(a1, a2, a3);
}

uint64_t sub_10008FFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v104 = a2;
  uint64_t v93 = a3;
  uint64_t v4 = type metadata accessor for JSONObject();
  __chkstk_darwin(v4 - 8);
  *((void *)&v92 + 1) = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnyIntentTypes();
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v103 = v6;
  __chkstk_darwin(v6);
  uint64_t v97 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100005B18(&qword_100143248);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v94 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v87 - v11;
  uint64_t v101 = sub_100005B18(&qword_100143250);
  uint64_t v13 = *(void *)(v101 - 8);
  uint64_t v14 = __chkstk_darwin(v101);
  os_log_type_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v95 = (char *)&v87 - v18;
  __chkstk_darwin(v17);
  id v20 = (char *)&v87 - v19;
  uint64_t v21 = type metadata accessor for JSONContext();
  uint64_t v99 = *(void *)(v21 - 8);
  uint64_t v100 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v87 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  unint64_t v110 = (char *)&v87 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v87 - v30;
  uint64_t v32 = a1;
  uint64_t v33 = sub_100091854(a1);
  if (v33)
  {
    *((void *)&v92 + 1) = v34;
    uint64_t v94 = v35;
    *(void *)&long long v92 = v33;
    sub_100006650((void *)v104, *(void *)(v104 + 24));
    dispatch thunk of Decoder.userInfo.getter();
    JSONContext.init(userInfo:)();
    static JSONContext.Property<A>.intentTypes.getter();
    uint64_t v36 = v103;
    JSONContext.subscript.getter();
    objc_super v39 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v38 = v13 + 8;
    uint64_t v37 = v39;
    uint64_t v40 = v101;
    v39(v20, v101);
    LODWORD(v36) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 48))(v12, 1, v36);
    sub_1000918DC((uint64_t)v12);
    uint64_t v41 = v99;
    uint64_t v42 = v100;
    if (v36 == 1)
    {
      uint64_t v43 = v38;
      sub_100091990();
      uint64_t v44 = v97;
      AnyIntentTypes.init(_:)();
      uint64_t v45 = v95;
      static JSONContext.Property<A>.intentTypes.getter();
      uint64_t v46 = v103;
      uint64_t v96 = v43;
      JSONContext.addingValue<A>(_:forProperty:)();
      v37(v45, v40);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v44, v46);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v42);
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v31, v110, v42);
    }
    sub_100006650((void *)v104, *(void *)(v104 + 24));
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v110, v31, v42);
    Dictionary<>.init(jsonContext:)();
    Decoder.withUserInfo(_:)();
    swift_bridgeObjectRelease();
    long long v108 = v92;
    uint64_t v109 = v94;
    sub_1000082EC(&v106);
    uint64_t v47 = v98;
    dispatch thunk of Decodable.init(from:)();
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v42);
      return sub_10009193C((uint64_t)&v106);
    }
    long long v104 = v108;
    uint64_t v70 = v108;
    char v71 = sub_100006650(&v106, v108);
    char v72 = (uint64_t *)v93;
    *(_OWORD *)(v93 + 24) = v104;
    char v73 = sub_1000082EC(v72);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v70 - 8) + 16))(v73, v71, v70);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v42);
    return sub_100007188((uint64_t)&v106);
  }
  uint64_t v49 = v16;
  uint64_t v50 = (uint64_t)v94;
  uint64_t v91 = v24;
  *(void *)&long long v92 = v27;
  uint64_t v51 = v101;
  uint64_t v52 = v103;
  uint64_t v53 = v32;
  uint64_t v54 = sub_100091854(v32);
  if (v54)
  {
    unint64_t v88 = v56;
    uint64_t v89 = v55;
    uint64_t v90 = v54;
    sub_100006650((void *)v104, *(void *)(v104 + 24));
    dispatch thunk of Decoder.userInfo.getter();
    JSONContext.init(userInfo:)();
    static JSONContext.Property<A>.intentTypes.getter();
    JSONContext.subscript.getter();
    uint64_t v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v58 = v52;
    uint64_t v59 = v51;
    v57(v49, v51);
    uint64_t v60 = v102;
    int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v50, 1, v52);
    sub_1000918DC(v50);
    uint64_t v62 = v100;
    if (v61 == 1)
    {
      sub_100091990();
      char v63 = v97;
      AnyIntentTypes.init(_:)();
      char v64 = v95;
      static JSONContext.Property<A>.intentTypes.getter();
      uint64_t v65 = v110;
      uint64_t v66 = v92;
      JSONContext.addingValue<A>(_:forProperty:)();
      uint64_t v67 = v64;
      uint64_t v62 = v100;
      v57(v67, v59);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v58);
      uint64_t v68 = v99;
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v66, v62);
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v66, v65, v62);
    }
    sub_10003D160(v104, (uint64_t)v105);
    uint64_t v69 = v98;
    JSONObject.init(from:)();
    if (v69) {
      return (*(uint64_t (**)(void, uint64_t))(v99 + 8))(v92, v62);
    }
    uint64_t v79 = v99;
    uint64_t v80 = v92;
    (*(void (**)(char *, void, uint64_t))(v99 + 16))(v91, v92, v62);
    *(void *)&long long v108 = v90;
    *((void *)&v108 + 1) = v89;
    uint64_t v109 = v88;
    sub_1000082EC(&v106);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)();
    uint64_t v81 = v108;
    uint64_t v82 = v80;
    uint64_t v83 = (uint64_t)v109;
    uint64_t v84 = sub_100006650(&v106, v108);
    uint64_t v85 = (uint64_t *)v93;
    *(void *)(v93 + 24) = v81;
    v85[4] = v83;
    uint64_t v86 = sub_1000082EC(v85);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v81 - 8) + 16))(v86, v84, v81);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v82, v62);
    return sub_100007188((uint64_t)&v106);
  }
  uint64_t v74 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v76 = v75;
  sub_100005B18(&qword_100140060);
  *uint64_t v76 = v53;
  sub_100006650((void *)v104, *(void *)(v104 + 24));
  dispatch thunk of Decoder.codingPath.getter();
  uint64_t v106 = 0;
  unint64_t v107 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v106 = 60;
  unint64_t v107 = 0xE100000000000000;
  v77._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  v78._object = (void *)0x80000001000FD660;
  v78._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v78);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v74 - 8) + 104))(v76, enum case for DecodingError.typeMismatch(_:), v74);
  return swift_willThrow();
}

void *DeepLinkWithReferrerIntent.kind.unsafeMutableAddressor()
{
  return &static DeepLinkWithReferrerIntent.kind;
}

unint64_t static DeepLinkWithReferrerIntent.kind.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t DeepLinkWithReferrerIntent.init(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeepLink.url.getter();
  uint64_t v8 = type metadata accessor for DeepLink();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t DeepLinkWithReferrerIntent.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100090B98()
{
  return 7107189;
}

uint64_t sub_100090BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100090C30(uint64_t a1)
{
  unint64_t v2 = sub_100090E1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100090C6C(uint64_t a1)
{
  unint64_t v2 = sub_100090E1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DeepLinkWithReferrerIntent.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100005B18(&qword_100143168);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_100090E1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for URL();
  sub_1000920A0(&qword_100143178, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_100090E1C()
{
  unint64_t result = qword_100143170;
  if (!qword_100143170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143170);
  }
  return result;
}

uint64_t DeepLinkWithReferrerIntent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100143180);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeepLinkWithReferrerIntent();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_100090E1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1000920A0(&qword_100143188, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_10009113C((uint64_t)v11, v15);
  }
  return sub_100007188((uint64_t)a1);
}

uint64_t type metadata accessor for DeepLinkWithReferrerIntent()
{
  uint64_t result = qword_1001431F8;
  if (!qword_1001431F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009113C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeepLinkWithReferrerIntent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000911A4()
{
  unint64_t result = qword_100143190;
  if (!qword_100143190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143190);
  }
  return result;
}

uint64_t sub_1000911F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DeepLinkWithReferrerIntent.init(from:)(a1, a2);
}

uint64_t sub_100091210()
{
  return sub_1000920A0(&qword_100143198, (void (*)(uint64_t))type metadata accessor for DeepLinkWithReferrerIntent);
}

void sub_100091258(void *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x8000000100110830;
}

ValueMetadata *type metadata accessor for IntentKinds()
{
  return &type metadata for IntentKinds;
}

uint64_t initializeBufferWithCopyOfBuffer for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for DeepLinkWithReferrerIntent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000914FC);
}

uint64_t sub_1000914FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DeepLinkWithReferrerIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009157C);
}

uint64_t sub_10009157C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000915EC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeepLinkWithReferrerIntent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100091714);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeepLinkWithReferrerIntent.CodingKeys()
{
  return &type metadata for DeepLinkWithReferrerIntent.CodingKeys;
}

unint64_t sub_100091750()
{
  unint64_t result = qword_100143230;
  if (!qword_100143230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143230);
  }
  return result;
}

unint64_t sub_1000917A8()
{
  unint64_t result = qword_100143238;
  if (!qword_100143238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143238);
  }
  return result;
}

unint64_t sub_100091800()
{
  unint64_t result = qword_100143240;
  if (!qword_100143240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143240);
  }
  return result;
}

uint64_t sub_100091854(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000918DC(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100143248);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009193C(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

unint64_t sub_100091990()
{
  unint64_t result = qword_100143258;
  if (!qword_100143258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143258);
  }
  return result;
}

uint64_t sub_1000919E4(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  long long v42 = *(_OWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1000DC324(v8, v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000705DC();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    id v20 = (uint64_t *)(v19[6] + 16 * v11);
    *id v20 = v8;
    v20[1] = v7;
    *(_OWORD *)(v19[7] + 16 * v11) = v42;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v19[2] = v23;
    uint64_t v24 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = (_OWORD *)(a1 + 80); ; i += 2)
    {
      uint64_t v27 = *((void *)i - 2);
      uint64_t v26 = *((void *)i - 1);
      long long v43 = *i;
      uint64_t v28 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_1000DC324(v27, v26);
      uint64_t v31 = v28[2];
      BOOL v32 = (v30 & 1) == 0;
      BOOL v22 = __OFADD__(v31, v32);
      uint64_t v33 = v31 + v32;
      if (v22) {
        break;
      }
      char v34 = v30;
      if (v28[3] < v33)
      {
        sub_10006EFD4(v33, 1);
        unint64_t v29 = sub_1000DC324(v27, v26);
        if ((v34 & 1) != (v35 & 1)) {
          goto LABEL_25;
        }
      }
      if (v34) {
        goto LABEL_10;
      }
      uint64_t v36 = (void *)*a3;
      *(void *)(*a3 + 8 * (v29 >> 6) + 64) |= 1 << v29;
      uint64_t v37 = (uint64_t *)(v36[6] + 16 * v29);
      *uint64_t v37 = v27;
      v37[1] = v26;
      *(_OWORD *)(v36[7] + 16 * v29) = v43;
      uint64_t v38 = v36[2];
      BOOL v22 = __OFADD__(v38, 1);
      uint64_t v39 = v38 + 1;
      if (v22) {
        goto LABEL_24;
      }
      _OWORD v36[2] = v39;
      if (!--v24) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10006EFD4(v14, a2 & 1);
  unint64_t v16 = sub_1000DC324(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_100005B18(&qword_100142A90);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v40._object = (void *)0x80000001000FD6C0;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)();
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100091D78(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100005B18(&qword_100143260);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v31 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v8 = (uint64_t *)&unk_100143268;
  uint64_t v9 = (uint64_t *)&unk_100143270;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v17 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_36;
  }
  if (v17 >= v30) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v31 + 8 * v17);
  int64_t v19 = i + 1;
  if (!v18)
  {
    int64_t v19 = i + 2;
    if (i + 2 >= v30) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v19);
    if (!v18)
    {
      int64_t v19 = i + 3;
      if (i + 3 >= v30) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v31 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = i + 4;
        if (i + 4 >= v30) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = i + 5;
          if (i + 5 >= v30) {
            goto LABEL_33;
          }
          unint64_t v18 = *(void *)(v31 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = i + 6;
            if (i + 6 >= v30) {
              goto LABEL_33;
            }
            unint64_t v18 = *(void *)(v31 + 8 * v19);
            int64_t v20 = i + 6;
            if (!v18)
            {
              while (1)
              {
                int64_t v19 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_37;
                }
                if (v19 >= v30) {
                  break;
                }
                unint64_t v18 = *(void *)(v31 + 8 * v19);
                ++v20;
                if (v18) {
                  goto LABEL_27;
                }
              }
LABEL_33:
              sub_100092098();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
  }
LABEL_27:
  unint64_t v5 = (v18 - 1) & v18;
  unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
  for (i = v19; ; unint64_t v16 = v15 | (i << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    swift_bridgeObjectRetain();
    sub_100005B18(v8);
    sub_100005B18(v9);
    swift_dynamicCast();
    unint64_t result = sub_1000F708C(v23, v22);
    unint64_t v24 = result;
    if (v25)
    {
      unint64_t v32 = v5;
      uint64_t v10 = v1;
      int64_t v11 = i;
      uint64_t v12 = v9;
      BOOL v13 = v8;
      uint64_t v14 = (uint64_t *)(v2[6] + 16 * result);
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v14 = v23;
      v14[1] = v22;
      uint64_t v8 = v13;
      uint64_t v9 = v12;
      int64_t i = v11;
      uint64_t v1 = v10;
      unint64_t v5 = v32;
      *(void *)(v2[7] + 8 * v24) = v33;
      if (!v32) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v26 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v26 = v23;
    v26[1] = v22;
    *(void *)(v2[7] + 8 * result) = v33;
    uint64_t v27 = v2[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_35;
    }
    v2[2] = v29;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v15 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100092098()
{
  return swift_release();
}

uint64_t sub_1000920A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000920E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v33 = a5;
  int v27 = a4;
  int v32 = a3;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v38 = a7;
  uint64_t v7 = type metadata accessor for ScalarDictionary();
  __chkstk_darwin(v7 - 8);
  uint64_t v37 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MetricsData();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  BOOL v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)v25 - v14;
  unint64_t v16 = sub_1000B96AC((uint64_t)&_swiftEmptyArrayStorage);
  sub_100093154(v16);
  swift_bridgeObjectRelease();
  sub_100005B18(&qword_100143308);
  v25[1] = *(void *)(*(void *)(type metadata accessor for PageMetrics.Instruction() - 8) + 72);
  uint64_t v17 = swift_allocObject();
  long long v26 = xmmword_10010B170;
  *(_OWORD *)(v17 + 16) = xmmword_10010B170;
  uint64_t v28 = v17;
  uint64_t v29 = v15;
  uint64_t v34 = v10;
  unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v36 = v9;
  v18(v13, v15, v9);
  sub_100005B18(&qword_100143310);
  type metadata accessor for PageMetrics.InvocationPoint();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_10010F300;
  static PageMetrics.InvocationPoint.pageEnter.getter();
  sub_100094DF0(v19);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  PageMetrics.Instruction.init(data:invocationPoints:)();
  if (qword_10013FC80 != -1) {
    swift_once();
  }
  char v20 = v27 & 1;
  uint64_t v21 = type metadata accessor for MetricsData.Configuration();
  sub_100007D4C(v21, (uint64_t)qword_100156DD0);
  static MetricsData.makeMetricsImpressionsData(fields:configuration:impressionsEventVersion:)();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v26;
  static PageMetrics.InvocationPoint.pageExit.getter();
  static PageMetrics.InvocationPoint.appExit.getter();
  sub_100094DF0(v22);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  PageMetrics.Instruction.init(data:invocationPoints:)();
  unint64_t v23 = sub_100095108(v30, v31, v32, v20, v33, v35);
  sub_10009339C(v23);
  swift_bridgeObjectRelease();
  ScalarDictionary.init()();
  sub_100094384((uint64_t)&_swiftEmptyArrayStorage);
  PageMetrics.init(instructions:pageFields:custom:clickLocationFields:)();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v29, v36);
}

uint64_t sub_100092534@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v24 = a2;
  uint64_t v26 = a3;
  uint64_t v4 = type metadata accessor for ScalarDictionary();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for MetricsData();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for MetricsData.Configuration();
  uint64_t v9 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B97E4((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000B97F8((uint64_t)&_swiftEmptyArrayStorage);
  MetricsData.Configuration.init(defaultTopic:defaultIncludingFields:defaultExcludingFields:shouldFlush:)();
  sub_100005B18(&qword_1001432B0);
  uint64_t inited = swift_initStackObject();
  long long v23 = xmmword_10010F300;
  *(_OWORD *)(inited + 16) = xmmword_10010F300;
  *(void *)(inited + 32) = 0x79546E6F69746361;
  *(void *)(inited + 40) = 0xEA00000000006570;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0x657461676976616ELL;
  *(void *)(inited + 56) = 0xE800000000000000;
  unint64_t v13 = sub_1000B96AC(inited);
  if (*(void *)(a1 + 16))
  {
    unint64_t v14 = sub_1000DC324(0x644965676170, 0xE600000000000000);
    if (v15)
    {
      sub_100036E88(*(void *)(a1 + 56) + 32 * v14, (uint64_t)&v29);
      if (swift_dynamicCast())
      {
        uint64_t v30 = &type metadata for String;
        long long v29 = v28[0];
        sub_100074BB4(&v29, v28);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v27 = v13;
        sub_10006F48C(v28, 0x644965676170, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
        unint64_t v13 = v27;
        swift_bridgeObjectRelease();
      }
    }
  }
  if (*(void *)(a1 + 16))
  {
    unint64_t v17 = sub_1000DC324(0x6570795465676170, 0xE800000000000000);
    if (v18)
    {
      sub_100036E88(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v29);
      if (swift_dynamicCast())
      {
        uint64_t v30 = &type metadata for String;
        long long v29 = v28[0];
        sub_100074BB4(&v29, v28);
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v27 = v13;
        sub_10006F48C(v28, 0x6570795465676170, 0xE800000000000000, v19);
        swift_bridgeObjectRelease();
      }
    }
  }
  sub_100092F1C(v24);
  static MetricsData.makeMetricsClickData(targetID:targetType:fields:configuration:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100005B18(&qword_100143348);
  unint64_t v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 16))(v21 + v20, v8, v5);
  ScalarDictionary.init()();
  ActionMetrics.init(data:custom:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v25);
}

unint64_t sub_100092A40(char a1)
{
  unint64_t result = 0x6F50737365636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x6142656D61476E69;
      break;
    case 4:
      unint64_t result = 0xD000000000000020;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0x42656D6F636C6577;
      break;
    case 7:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100092B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = type metadata accessor for ScalarDictionary();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for ImpressionMetrics.ID();
  __chkstk_darwin(v15 - 8);
  sub_100005B18(&qword_1001432B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100110AF0;
  strcpy((char *)(inited + 32), "impressionType");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = a6;
  *(void *)(inited + 56) = a7;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x6973736572706D69;
  *(void *)(inited + 88) = 0xEF7865646E496E6FLL;
  *(void *)(inited + 96) = a5;
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 128) = 0x657079546469;
  *(void *)(inited + 136) = 0xE600000000000000;
  *(void *)(inited + 144) = a8;
  *(void *)(inited + 152) = a9;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 1701667182;
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 184) = 0xE400000000000000;
  *(void *)(inited + 192) = a10;
  *(void *)(inited + 200) = a11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000B96AC(inited);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ImpressionMetrics.ID.init(parent:element:index:)();
  ScalarDictionary.init()();
  sub_100094384((uint64_t)&_swiftEmptyArrayStorage);
  sub_100094384((uint64_t)&_swiftEmptyArrayStorage);
  return ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)();
}

uint64_t sub_100092DD8(char a1)
{
  uint64_t result = 0x707954746E657665;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x6E6F69746361;
      goto LABEL_7;
    case 2:
      uint64_t result = 0x6570795465676170;
      break;
    case 3:
      uint64_t result = 0x644965676170;
      break;
    case 4:
      uint64_t result = 0x746E6F4365676170;
      break;
    case 5:
      uint64_t v3 = 0x746567726174;
LABEL_7:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7954000000000000;
      break;
    case 6:
      uint64_t result = 0x6449746567726174;
      break;
    case 7:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 8:
      uint64_t result = 0x6973736572706D69;
      break;
    case 9:
      uint64_t result = 0x707041666572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100092F1C(char a1)
{
  unint64_t result = 0x656461637261;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614E726579616C70;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x6F6272656461656CLL;
      break;
    case 4:
      unint64_t result = 0x49656C69666F7270;
      break;
    case 5:
      unint64_t result = 0x6D65766569686361;
      break;
    case 6:
      unint64_t result = 0x656C69666F7270;
      break;
    case 7:
      unint64_t result = 0x7250646E65697266;
      break;
    case 8:
      unint64_t result = 0x73646E65697266;
      break;
    case 9:
      unint64_t result = 0x72616F6268736164;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100093084(char a1)
{
  unint64_t result = 0x6F50737365636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x42656D6F636C6577;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000020;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100093154(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsEventType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005B18(&qword_1001432B0);
  uint64_t inited = swift_initStackObject();
  long long v13 = xmmword_10010F300;
  *(_OWORD *)(inited + 16) = xmmword_10010F300;
  *(void *)(inited + 32) = 0x707954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  swift_bridgeObjectRetain();
  static MetricsEventType.page.getter();
  uint64_t v7 = MetricsEventType.rawValue.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v9;
  unint64_t v10 = sub_1000B96AC(inited);
  sub_100093708(v10, a1);
  sub_100005B18(&qword_1001432B8);
  type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v13;
  static MetricsFieldInclusionRequest.pageFields.getter();
  sub_100094AD8(v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
}

unint64_t sub_10009339C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100005B18((uint64_t *)&unk_1001441C0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  unint64_t v10 = (char *)&type metadata for Any + 8;
  uint64_t v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100092098();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    int v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100074BB4(v6, v7);
    sub_100074BB4(v7, v40);
    sub_100074BB4(v40, &v38);
    unint64_t result = sub_1000DC324(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      long long v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      unint64_t v16 = v10;
      unint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v17 = v35;
      v17[1] = v36;
      unint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      char v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_100007188((uint64_t)v18);
      unint64_t result = (unint64_t)sub_100074BB4(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_100074BB4(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100093708(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100094504(a1, (uint64_t)sub_1000944B0, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100093794()
{
  uint64_t v0 = type metadata accessor for MetricsData.Configuration();
  sub_100007CE8(v0, qword_100156DD0);
  sub_100007D4C(v0, (uint64_t)qword_100156DD0);
  sub_100005B18(&qword_100143328);
  uint64_t v1 = (int *)(sub_100005B18(&qword_100144220) - 8);
  uint64_t v10 = *(void *)(*(void *)v1 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10010B170;
  uint64_t v9 = v1[14];
  static MetricsEventType.click.getter();
  sub_100005B18(&qword_1001432B8);
  type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10010F300;
  static MetricsFieldInclusionRequest.pageFields.getter();
  uint64_t v4 = sub_100094AD8(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v11 + v2 + v9) = v4;
  uint64_t v5 = v1[14];
  static MetricsEventType.impressions.getter();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10010B170;
  static MetricsFieldInclusionRequest.impressions.getter();
  static MetricsFieldInclusionRequest.pageFields.getter();
  uint64_t v7 = sub_100094AD8(v6);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v11 + v2 + v10 + v5) = v7;
  sub_1000B97E4(v11);
  sub_1000B97F8((uint64_t)&_swiftEmptyArrayStorage);
  return MetricsData.Configuration.init(defaultTopic:defaultIncludingFields:defaultExcludingFields:shouldFlush:)();
}

uint64_t sub_100093A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  v4[6] = a4;
  uint64_t v5 = type metadata accessor for MetricsFieldsContext();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MetricsData();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MetricsPipeline();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_projectBox();
  type metadata accessor for MainActor();
  v4[17] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100093BF4, v9, v8);
}

uint64_t sub_100093BF4()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v14 = v0[14];
  uint64_t v15 = v0[13];
  uint64_t v11 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[8];
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[7];
  uint64_t v12 = v0[10];
  long long v13 = (uint64_t *)v0[5];
  swift_release();
  type metadata accessor for GKMetricsBridge();
  static GKMetricsBridge.sharedPipeline.getter();
  sub_100005B18(&qword_1001432B8);
  type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10010F300;
  swift_bridgeObjectRetain();
  static MetricsFieldInclusionRequest.impressions.getter();
  sub_100094AD8(v5);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v9, v10);
  uint64_t v6 = MetricsPipeline.process(_:using:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v12);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v15);
  *long long v13 = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100093E64(uint64_t a1)
{
  v1[15] = a1;
  uint64_t v2 = type metadata accessor for MetricsFieldsContext();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MetricsEventType();
  v1[19] = v3;
  v1[20] = *(void *)(v3 - 8);
  v1[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MetricsData();
  v1[22] = v4;
  v1[23] = *(void *)(v4 - 8);
  v1[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MetricsPipeline();
  v1[25] = v5;
  v1[26] = *(void *)(v5 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_projectBox();
  type metadata accessor for MainActor();
  v1[29] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10009407C, v7, v6);
}

uint64_t sub_10009407C()
{
  uint64_t v17 = v0[28];
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  uint64_t v21 = v0[26];
  uint64_t v22 = v0[25];
  uint64_t v3 = v0[21];
  uint64_t v18 = v0[23];
  uint64_t v19 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v15 = v0[16];
  uint64_t v16 = v0[18];
  int64_t v20 = (uint64_t *)v0[15];
  swift_release();
  type metadata accessor for GKMetricsBridge();
  static GKMetricsBridge.sharedPipeline.getter();
  sub_100005B18(&qword_1001432B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010F300;
  *(void *)(inited + 32) = 0x707954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  static MetricsEventType.page.getter();
  uint64_t v8 = MetricsEventType.rawValue.getter();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v8;
  *(void *)(inited + 56) = v10;
  sub_1000B96AC(inited);
  sub_100005B18(&qword_1001432B8);
  type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10010F300;
  static MetricsFieldInclusionRequest.pageFields.getter();
  sub_100094AD8(v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v16, v17, v15);
  uint64_t v12 = MetricsPipeline.process(_:using:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v19);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v1, v22);
  *int64_t v20 = v12;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

unint64_t sub_100094384(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005B18((uint64_t *)&unk_1001441C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100096170(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000F708C(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100074BB4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000944B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_100036E88((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100094504(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100094768(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100092098();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v34;
    sub_100074BB4(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_1000DC324(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_10006FB58();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_10006DD98(v21, a4 & 1);
      unint64_t v23 = sub_1000DC324(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_100036E88(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_100036E88((uint64_t)v31, (uint64_t)v32);
        sub_100007188((uint64_t)v31);
        sub_100007188((uint64_t)v33);
        swift_bridgeObjectRelease();
        uint64_t v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        sub_100007188((uint64_t)v14);
        sub_100074BB4(v32, v14);
        goto LABEL_7;
      }
    }
    unint64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    char v26 = (uint64_t *)(v25[6] + 16 * v18);
    *char v26 = v15;
    v26[1] = v12;
    sub_100074BB4(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    void v25[2] = v29;
LABEL_7:
    sub_100094768(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4 = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100094768@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_100036E88(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_100095D8C((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    void v21[2] = v22[2];
    v19(v21);
    return sub_100095DF4((uint64_t)v21);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_100094944()
{
  void (*v12)(uint64_t *__return_ptr, void *);
  long long v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[2];
  long long v23;

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    unint64_t v10 = (void *)(v9 + v7);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v22[0] = *v10;
    v22[1] = v11;
    uint64_t v13 = *(_OWORD *)(v8 + v7);
    v0[3] = v4;
    v0[4] = v5;
    long long v23 = v13;
    swift_bridgeObjectRetain();
    v12(&v21, v22);
    swift_bridgeObjectRelease();
    return v21;
  }
  int64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      int64_t v17 = v0[1];
      int64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        uint64_t v5 = (v18 - 1) & v18;
        unint64_t v6 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v4 = v15;
        goto LABEL_3;
      }
      uint64_t v19 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        int64_t v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          int64_t v15 = v19;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          int64_t v18 = *(void *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            int64_t v15 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v19 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            int64_t v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_10;
            }
            int64_t v15 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              int64_t v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_7;
              }
              int64_t v4 = v16 - 1;
              BOOL v20 = v3 + 6;
              while (v16 != v20)
              {
                int64_t v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void *sub_100094AD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100005B18(&qword_1001432C0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    long long v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    int64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000961D8(&qword_1001432C8, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000961D8(&qword_1001432D0, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          char v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_100094DF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PageMetrics.InvocationPoint();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100005B18(&qword_100143330);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    long long v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    int64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000961D8(&qword_100143338, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000961D8(&qword_100143340, (void (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          char v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

unint64_t sub_100095108(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_100005B18(&qword_100143320);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10010DC70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v14;
  unint64_t v15 = 0xEB00000000746E69;
  unint64_t v16 = 0x6F50737365636361;
  switch(a3)
  {
    case 1:
      unint64_t v15 = 0xED000072656E6E61;
      unint64_t v16 = 0x42656D6F636C6577;
      break;
    case 2:
      unint64_t v15 = 0x80000001000FC560;
      unint64_t v16 = 0xD000000000000017;
      break;
    case 3:
      unint64_t v16 = 0xD000000000000020;
      uint64_t v17 = "LeaderboardBeatFriendScoreBanner";
      goto LABEL_6;
    case 4:
      unint64_t v16 = 0xD00000000000001ELL;
      uint64_t v17 = "LeaderboardTopPercentageBanner";
LABEL_6:
      unint64_t v15 = (unint64_t)(v17 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  *(void *)(inited + 80) = v16;
  *(void *)(inited + 88) = v15;
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 104) = v18;
  uint64_t v19 = 0x7261506472696874;
  if ((a4 & 1) == 0) {
    uint64_t v19 = 0x72616F6268736164;
  }
  unint64_t v20 = 0xEA00000000007974;
  if ((a4 & 1) == 0) {
    unint64_t v20 = 0xE900000000000064;
  }
  *(void *)(inited + 112) = v19;
  *(void *)(inited + 120) = v20;
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000B99F8(inited);
  if (a6)
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10006F304(a5, a6, 0x707041666572, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t sub_10009532C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v41 = a1;
  uint64_t v5 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v5 - 8);
  uint64_t v42 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100005B18(&qword_100143288);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_1001432D8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MetricsFieldsContext();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v36 - v19;
  uint64_t v40 = swift_allocBox();
  uint64_t v22 = v21;
  MetricsFieldsContext.init()();
  uint64_t v43 = a4;
  uint64_t v44 = &protocol witness table for BasicImpressionsTracker;
  swift_retain();
  static MetricsFieldsContext.Property<A>.impressionsTracker.getter();
  sub_100005B18(&qword_1001432E0);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)();
  char v23 = v39;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_unknownObjectRelease();
  char v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v20, v14);
  if (v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v22, v14);
    uint64_t v43 = v38;
    uint64_t v44 = v23;
    static GKHostAppMetricsFieldsProvider.hostAppKey.getter();
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
    v24(v18, v14);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v22, v20, v14);
  }
  unint64_t v25 = sub_1000B99F8((uint64_t)&off_10012FC30);
  uint64_t v26 = v25;
  uint64_t v27 = v41;
  if (v41)
  {
    swift_bridgeObjectRetain();
    unint64_t v28 = sub_10009339C(v26);
    swift_bridgeObjectRelease();
    unint64_t v29 = sub_100093708(v28, v27);
  }
  else
  {
    unint64_t v29 = sub_10009339C(v25);
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = type metadata accessor for TaskPriority();
  uint64_t v31 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v42, 1, 1, v30);
  type metadata accessor for MainActor();
  uint64_t v32 = v40;
  swift_retain();
  uint64_t v33 = static MainActor.shared.getter();
  uint64_t v34 = (void *)swift_allocObject();
  void v34[2] = v33;
  v34[3] = &protocol witness table for MainActor;
  v34[4] = v29;
  void v34[5] = v32;
  sub_10002C4EC(v31, (uint64_t)&unk_1001432F0, (uint64_t)v34);
  swift_release();
  return swift_release();
}

uint64_t sub_10009579C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v4 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v4 - 8);
  long long v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100143288);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100005B18(&qword_100143290);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MetricsFieldsContext();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v34 = swift_allocBox();
  uint64_t v21 = v20;
  MetricsFieldsContext.init()();
  uint64_t v36 = a3;
  static MetricsFieldsContext.Property<A>.pageFields.getter();
  sub_100005B18(&qword_100143298);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)();
  uint64_t v22 = v33;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  char v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v19, v13);
  if (v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v21, v13);
    uint64_t v36 = v32;
    uint64_t v37 = v22;
    static GKHostAppMetricsFieldsProvider.hostAppKey.getter();
    MetricsFieldsContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    v23(v17, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(v21, v19, v13);
  }
  uint64_t v24 = type metadata accessor for TaskPriority();
  uint64_t v25 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v35, 1, 1, v24);
  type metadata accessor for MainActor();
  uint64_t v26 = v34;
  swift_retain();
  uint64_t v27 = static MainActor.shared.getter();
  unint64_t v28 = (void *)swift_allocObject();
  _OWORD v28[2] = v27;
  v28[3] = &protocol witness table for MainActor;
  v28[4] = v26;
  sub_10002C4EC(v25, (uint64_t)&unk_1001432A8, (uint64_t)v28);
  swift_release();
  return swift_release();
}

uint64_t sub_100095B90()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100095BD0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000243C4;
  return sub_100093E64(a1);
}

uint64_t sub_100095C84()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100095CCC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003E30C;
  return sub_100093A38(a1, v4, v5, v6);
}

uint64_t sub_100095D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_1001432F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100095DF4(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100143300);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100095E54(uint64_t a1, uint64_t a2, NSString a3)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v5 = sub_1000DC324(0x644965676170, 0xE600000000000000), (v6 & 1) != 0)
    && (sub_100036E88(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v19), swift_dynamicCast()))
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_11;
    }
  }
  else if (!*(void *)(a1 + 16))
  {
    goto LABEL_11;
  }
  unint64_t v7 = sub_1000DC324(0x6570795465676170, 0xE800000000000000);
  if (v8)
  {
    sub_100036E88(*(void *)(a1 + 56) + 32 * v7, (uint64_t)v19);
    if (swift_dynamicCast())
    {
      if (!*(void *)(a1 + 16)) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
  }
LABEL_11:
  if (!*(void *)(a1 + 16)) {
    goto LABEL_16;
  }
LABEL_12:
  unint64_t v9 = sub_1000DC324(0x6449746567726174, 0xE800000000000000);
  if (v10)
  {
    sub_100036E88(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v19);
    if (swift_dynamicCast())
    {
      if (!*(void *)(a1 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
LABEL_16:
  if (!*(void *)(a1 + 16)) {
    goto LABEL_19;
  }
LABEL_17:
  unint64_t v11 = sub_1000DC324(0x7954746567726174, 0xEA00000000006570);
  if (v12)
  {
    sub_100036E88(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v19);
    swift_dynamicCast();
  }
LABEL_19:
  id v13 = [objc_allocWithZone((Class)GKAPIReporter) init];
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a3) {
    a3 = String._bridgeToObjectiveC()();
  }
  [v13 recordClickWithAction:v14 targetId:v15 targetType:v16 pageId:v17 pageType:v18 hostApp:a3 app:GKGameOverlayUIIdentifier additionalFields:0];
}

uint64_t sub_100096170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100143318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000961D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL static GameDashboardLaunchContext.LaunchTarget.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t GameDashboardLaunchContext.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  uint64_t v2 = type metadata accessor for LaunchDashboardAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  ObservationRegistrar.init()();
  return v0;
}

void GameDashboardLaunchContext.LaunchTarget.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int GameDashboardLaunchContext.LaunchTarget.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t (*sub_100096334())()
{
  return j__swift_endAccess;
}

uint64_t GameDashboardLaunchContext.launchTarget.getter()
{
  swift_getKeyPath();
  sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10009643C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_1000964F8()
{
  return swift_release();
}

uint64_t GameDashboardLaunchContext.launchTarget.setter()
{
  return swift_release();
}

uint64_t sub_100096698(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(a1 + 16) = a2;
  return result;
}

void (*GameDashboardLaunchContext.launchTarget.modify(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_getKeyPath();
  v3[5] = OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext___observationRegistrar;
  *uint64_t v3 = v1;
  v3[6] = sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *uint64_t v3 = v1;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v3[7] = sub_100096334();
  return sub_100096808;
}

void sub_100096808(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  void *v1 = v1[4];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();

  free(v1);
}

uint64_t sub_100096894@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess();
  return sub_100096CC8(v4, a2);
}

uint64_t sub_100096960(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140B50);
  __chkstk_darwin(v4 - 8);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100096CC8(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  unint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100017388((uint64_t)v6, &qword_100140B50);
}

uint64_t GameDashboardLaunchContext.action.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess();
  return sub_100096CC8(v3, a1);
}

uint64_t sub_100096B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  swift_beginAccess();
  sub_100097AFC(a2, v3);
  return swift_endAccess();
}

uint64_t GameDashboardLaunchContext.init()()
{
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action;
  uint64_t v2 = type metadata accessor for LaunchDashboardAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  ObservationRegistrar.init()();
  return v0;
}

uint64_t type metadata accessor for GameDashboardLaunchContext()
{
  uint64_t result = qword_100143388;
  if (!qword_100143388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100096CA8()
{
  return sub_100097F40();
}

uint64_t sub_100096CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100096D30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005B18(&qword_100140B50);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = self;
  id v8 = [v7 currentLocalPlayer];
  if (!v8) {
    id v8 = [v7 local];
  }
  if ([v8 isAuthenticated])
  {
    sub_100097A7C(a1, (uint64_t)v6);
    uint64_t v9 = type metadata accessor for LaunchDashboardAction();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 0, 1, v9);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v14 - 2) = v2;
    *(&v14 - 1) = (uint64_t)v6;
    uint64_t v15 = v2;
    sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_100017388((uint64_t)v6, &qword_100140B50);
    uint64_t v11 = swift_getKeyPath();
    __chkstk_darwin(v11);
    *(&v14 - 2) = v2;
    *((unsigned char *)&v14 - 8) = 1;
    uint64_t v15 = v2;
  }
  else
  {
    uint64_t v12 = swift_getKeyPath();
    __chkstk_darwin(v12);
    *(&v14 - 2) = v2;
    *((unsigned char *)&v14 - 8) = 2;
    uint64_t v15 = v2;
    sub_1000977D8(&qword_100140D88, (void (*)(uint64_t))type metadata accessor for GameDashboardLaunchContext);
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t GameDashboardLaunchContext.deinit()
{
  sub_100017388(v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action, &qword_100140B50);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t GameDashboardLaunchContext.__deallocating_deinit()
{
  sub_100017388(v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext__action, &qword_100140B50);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13GameOverlayUI26GameDashboardLaunchContext___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000971B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v7 = type metadata accessor for ActionOutcome();
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  sub_100005B18(&qword_100143538);
  v6[8] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MetricsData();
  v6[9] = v8;
  v6[10] = *(void *)(v8 - 8);
  v6[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[12] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100097338, v10, v9);
}

uint64_t sub_100097338()
{
  swift_release();
  type metadata accessor for LaunchDashboardAction();
  uint64_t v1 = ActionMetrics.data.getter();
  if (*(void *)(v1 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v0[10] + 16))(v0[8], v1 + ((*(unsigned __int8 *)(v0[10] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[10] + 80)), v0[9]);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_100017388(v0[8], &qword_100143538);
  }
  else
  {
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[6];
    uint64_t v9 = v0[7];
    uint64_t v11 = v0[5];
    uint64_t v12 = v0[2];
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 32))(v6, v0[8], v8);
    uint64_t v13 = MetricsData.fields.getter();
    sub_100095E54(v13, *(void *)v12, *(NSString *)(v12 + 8));
    swift_bridgeObjectRelease();
    sub_100096D30(v12);
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v9, enum case for ActionOutcome.performed(_:), v11);
    Promise.resolve(_:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100097554(uint64_t a1)
{
  return _s13GameOverlayUI35LaunchDashboardActionImplementationV7perform_8asPartOf9JetEngine7PromiseCyAF0F7OutcomeOGAA0deF0V_xtF_0(a1);
}

uint64_t _s13GameOverlayUI35LaunchDashboardActionImplementationV7perform_8asPartOf9JetEngine7PromiseCyAF0F7OutcomeOGAA0deF0V_xtF_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LaunchDashboardAction();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100142A60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005B18(&qword_100143520);
  uint64_t v9 = Promise.__allocating_init()();
  type metadata accessor for GameDashboardLaunchContext();
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v10 = v17[1];
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  sub_100097A7C(a1, (uint64_t)v5);
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v14 = (v4 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  sub_100097DA8((uint64_t)v5, v15 + v13);
  *(void *)(v15 + v14) = v10;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v9;
  sub_10002C340((uint64_t)v8, (uint64_t)&unk_100143530, v15);
  swift_release();
  swift_release();
  return v9;
}

uint64_t sub_100097790()
{
  return sub_1000977D8(&qword_100140B58, (void (*)(uint64_t))type metadata accessor for LaunchDashboardAction);
}

uint64_t sub_1000977D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100097820()
{
  return type metadata accessor for GameDashboardLaunchContext();
}

void sub_100097828()
{
  sub_100097900();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ObservationRegistrar();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100097900()
{
  if (!qword_100143398)
  {
    type metadata accessor for LaunchDashboardAction();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100143398);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for GameDashboardLaunchContext.LaunchTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100097A24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GameDashboardLaunchContext.LaunchTarget()
{
  return &type metadata for GameDashboardLaunchContext.LaunchTarget;
}

uint64_t sub_100097A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for LaunchDashboardActionImplementation()
{
  return sub_100097F94();
}

uint64_t sub_100097A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LaunchDashboardAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097AE0()
{
  return sub_100096B68(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100097AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097B64()
{
  uint64_t v1 = (int *)type metadata accessor for LaunchDashboardAction();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + *(int *)(type metadata accessor for Game() + 28);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v5 + v1[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100024824(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8), *(unsigned char *)(v5 + v1[6] + 16));
  uint64_t v10 = v5 + v1[7];
  uint64_t v11 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100097DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LaunchDashboardAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097E0C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LaunchDashboardAction() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_1000243C4;
  return sub_1000971B4(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_100097F40()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_100097F94()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100097FC4()
{
  return sub_100097AE0();
}

uint64_t sub_100097FDC()
{
  swift_getKeyPath();
  sub_1000A33A8(&qword_1001420C0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent.GestureHandler);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

unint64_t sub_10009807C(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
      unint64_t result = 0x656C746974627573;
      break;
    case 3:
      unint64_t result = 0x49676E696461656CLL;
      break;
    case 4:
      unint64_t result = 0x676E696C69617274;
      break;
    case 5:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 6:
      unint64_t result = 0x6E41646C756F6873;
      break;
    case 7:
      unint64_t result = 0x6953646C756F6873;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0x6575676573;
      break;
    case 10:
      unint64_t result = 0x7274654D65676170;
      break;
    case 11:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0x646E7542656D6167;
      break;
    case 13:
      unint64_t result = 0x65646E496D657469;
      break;
    case 14:
      unint64_t result = 0x6E6564496D657469;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100098284(void *a1)
{
  uint64_t v3 = sub_100005B18(&qword_100143708);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_1000A3354();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  sub_100005B18(&qword_1001436E0);
  sub_10001758C(&qword_100143710, &qword_1001436E0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    v8[30] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for AccessPointHighlight(0);
    v8[28] = 3;
    type metadata accessor for AccessPointIconType(0);
    sub_1000A33A8(&qword_100143718, (void (*)(uint64_t))type metadata accessor for AccessPointIconType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[26] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[25] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[14] = 9;
    sub_100005B18(&qword_100140208);
    sub_1000A3450((unint64_t *)&qword_100140210, &qword_100140218);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[13] = 10;
    type metadata accessor for PageMetrics();
    sub_1000A33A8(&qword_100140090, (void (*)(uint64_t))&type metadata accessor for PageMetrics);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[12] = 11;
    type metadata accessor for ImpressionMetrics();
    sub_1000A33A8(&qword_100140300, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[11] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000987C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v64 = a2;
  uint64_t v2 = sub_100005B18(&qword_1001402E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v65 = (uint64_t)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_100140B40);
  __chkstk_darwin(v4 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100005B18(&qword_100140B38);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v70 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v72 = (char *)&v60 - v9;
  uint64_t v73 = sub_100005B18(&qword_1001436E8);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v83 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for AccessPointHighlight(0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  uint64_t v15 = &v14[*(int *)(v12 + 28)];
  uint64_t v16 = type metadata accessor for AccessPointIconType(0);
  NSString v17 = *(void (**)(void))(*(void *)(v16 - 8) + 56);
  uint64_t v81 = (uint64_t)v15;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v17)(v15, 1, 1, v16);
  uint64_t v80 = &v14[v11[8]];
  v17();
  NSString v18 = &v14[v11[9]];
  *(void *)NSString v18 = 0;
  v18[8] = 1;
  uint64_t v69 = v11[10];
  v14[v69] = 2;
  uint64_t v68 = v11[11];
  v14[v68] = 2;
  uint64_t v67 = v11[12];
  v14[v67] = 2;
  uint64_t v19 = (uint64_t)&v14[v11[13]];
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  uint64_t v86 = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  sub_1000158AC((uint64_t)&v87, (uint64_t)&v84);
  long long v20 = v85;
  *(_OWORD *)uint64_t v19 = v84;
  *(_OWORD *)(v19 + 16) = v20;
  uint64_t v79 = v19;
  *(void *)(v19 + 32) = v86;
  sub_100017388((uint64_t)&v87, &qword_1001401E8);
  uint64_t v21 = (uint64_t)&v14[v11[14]];
  uint64_t v22 = type metadata accessor for PageMetrics();
  char v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  uint64_t v78 = v21;
  v23(v21, 1, 1, v22);
  uint64_t v24 = (uint64_t)&v14[v11[15]];
  uint64_t v25 = type metadata accessor for ImpressionMetrics();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  uint64_t v77 = v24;
  v26(v24, 1, 1, v25);
  uint64_t v27 = &v14[v11[16]];
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = 0;
  uint64_t v76 = v27;
  uint64_t v28 = v11[18];
  uint64_t v82 = v14;
  unint64_t v29 = &v14[v28];
  *(void *)unint64_t v29 = 0;
  *((void *)v29 + 1) = 0;
  uint64_t v74 = v29;
  sub_100006650(v90, v90[3]);
  sub_1000A3354();
  uint64_t v30 = v75;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v30)
  {
    uint64_t v31 = v81;
    sub_100007188((uint64_t)v90);
    uint64_t v35 = (uint64_t)v80;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100017388(v31, &qword_100140B38);
    sub_100017388(v35, &qword_100140B38);
    sub_100017388(v79, &qword_100140208);
    sub_100017388(v78, &qword_100140B40);
    sub_100017388(v77, &qword_1001402E0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v61 = v11;
    uint64_t v75 = (uint64_t *)v18;
    uint64_t v32 = (uint64_t)v72;
    uint64_t v63 = v22;
    uint64_t v62 = v25;
    uint64_t v33 = v71;
    sub_100005B18(&qword_1001436E0);
    LOBYTE(v84) = 0;
    sub_10001758C(&qword_1001436F8, &qword_1001436E0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = v81;
    long long v37 = v88;
    uint64_t v38 = v82;
    _OWORD *v82 = v87;
    v38[1] = v37;
    *((void *)v38 + 4) = v89;
    LOBYTE(v87) = 1;
    uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    *((void *)v38 + 5) = v39;
    *((void *)v38 + 6) = v41;
    LOBYTE(v87) = 2;
    uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    *((void *)v38 + 7) = v42;
    *((void *)v38 + 8) = v44;
    LOBYTE(v87) = 3;
    sub_1000A33A8(&qword_100143700, (void (*)(uint64_t))type metadata accessor for AccessPointIconType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C(v32, v34, &qword_100140B38);
    LOBYTE(v87) = 4;
    uint64_t v45 = (uint64_t)v70;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C(v45, (uint64_t)v80, &qword_100140B38);
    LOBYTE(v87) = 5;
    uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v47 = v75;
    *uint64_t v75 = v46;
    *((unsigned char *)v47 + 8) = v48 & 1;
    LOBYTE(v87) = 6;
    char v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v50 = v82;
    *((unsigned char *)v82 + v69) = v49;
    LOBYTE(v87) = 7;
    *((unsigned char *)v50 + v68) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v87) = 8;
    *((unsigned char *)v50 + v67) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_100005B18(&qword_100140208);
    LOBYTE(v84) = 9;
    sub_1000A3450((unint64_t *)&qword_100140238, &qword_100140240);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_10001712C((uint64_t)&v87, v79, &qword_100140208);
    LOBYTE(v87) = 10;
    sub_1000A33A8(&qword_100140100, (void (*)(uint64_t))&type metadata accessor for PageMetrics);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C(v66, v78, &qword_100140B40);
    LOBYTE(v87) = 11;
    sub_1000A33A8(&qword_100140350, (void (*)(uint64_t))&type metadata accessor for ImpressionMetrics);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10001712C(v65, v77, &qword_1001402E0);
    LOBYTE(v87) = 12;
    uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v53 = v52;
    uint64_t v54 = (uint64_t *)v76;
    swift_bridgeObjectRelease();
    *uint64_t v54 = v51;
    v54[1] = v53;
    LOBYTE(v87) = 13;
    *(void *)((char *)v82 + v61[17]) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v87) = 14;
    uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v57 = v56;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v73);
    uint64_t v58 = (uint64_t *)v74;
    swift_bridgeObjectRelease();
    *uint64_t v58 = v55;
    v58[1] = v57;
    uint64_t v59 = v82;
    sub_1000A47F0((uint64_t)v82, v64, type metadata accessor for AccessPointHighlight);
    sub_100007188((uint64_t)v90);
    return sub_1000A33F0((uint64_t)v59, type metadata accessor for AccessPointHighlight);
  }
}

unint64_t sub_100099340()
{
  return sub_10009807C(*v0);
}

uint64_t sub_100099348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A4144(a1, a2);
  *a3 = result;
  return result;
}

void sub_100099370(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_10009937C(uint64_t a1)
{
  unint64_t v2 = sub_1000A3354();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000993B8(uint64_t a1)
{
  unint64_t v2 = sub_1000A3354();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000993F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000170C8(v1, a1, &qword_1001436E0);
}

uint64_t sub_10009941C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000170C8(v2 + *(int *)(a1 + 52), (uint64_t)v7, &qword_100140208);
  v5[0] = v7[0];
  v5[1] = v7[1];
  uint64_t v6 = v8;
  return sub_100024A74((uint64_t)v5, a2, &qword_1001401E8);
}

uint64_t sub_100099488@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000987C8(a1, a2);
}

uint64_t sub_1000994A0(void *a1)
{
  return sub_100098284(a1);
}

uint64_t sub_1000994B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170C8(v2 + *(int *)(a1 + 60), a2, &qword_1001402E0);
}

uint64_t sub_1000994E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v98 = a1;
  uint64_t v2 = type metadata accessor for _BlendModeEffect();
  __chkstk_darwin(v2 - 8);
  long long v87 = &v73[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = (uint64_t (*)(void))type metadata accessor for BlendMode();
  uint64_t v86 = *((void *)v102 - 1);
  __chkstk_darwin(v102);
  uint64_t v101 = &v73[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = (int *)type metadata accessor for APHighlightTitle(0);
  uint64_t v90 = *((void *)v5 - 1);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v96 = &v73[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  long long v88 = &v73[-v9];
  uint64_t v91 = v10;
  __chkstk_darwin(v8);
  uint64_t v12 = &v73[-v11];
  uint64_t v13 = type metadata accessor for OpacityTransition();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  NSString v17 = &v73[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v73[-v18];
  uint64_t v84 = sub_100005B18(&qword_100143CB8);
  __chkstk_darwin(v84);
  uint64_t v21 = &v73[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v85 = sub_100005B18(&qword_100143CC0);
  __chkstk_darwin(v85);
  uint64_t v89 = &v73[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v103 = sub_100005B18(&qword_100143CC8);
  __chkstk_darwin(v103);
  uint64_t v94 = &v73[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v95 = sub_100005B18(&qword_100143CD0);
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  long long v92 = &v73[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = (uint64_t *)(v1 + v5[7]);
  uint64_t v26 = v25[1];
  uint64_t v105 = *v25;
  uint64_t v106 = v26;
  sub_100025F34();
  swift_bridgeObjectRetain();
  uint64_t v27 = (uint64_t)v12;
  uint64_t v28 = Text.init<A>(_:)();
  uint64_t v82 = v29;
  LOBYTE(v12) = v30;
  uint64_t v100 = v31;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v81 = static Font.footnote.getter();
  uint64_t v80 = swift_getKeyPath();
  uint64_t v79 = static Color.secondary.getter();
  OpacityTransition.init()();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v17, v19, v13);
  sub_1000A33A8(&qword_100143CD8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v76 = AnyTransition.init<A>(_:)();
  unsigned __int8 v108 = v12 & 1;
  char v107 = 0;
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v19, v13);
  int v32 = v108;
  char v33 = v107;
  uint64_t v34 = v1;
  uint64_t v35 = v1 + v5[6];
  char v36 = *(unsigned char *)v35;
  uint64_t v78 = v35;
  uint64_t v37 = *(void *)(v35 + 8);
  LOBYTE(v105) = v36;
  uint64_t v106 = v37;
  uint64_t v77 = sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  int v38 = v104;
  uint64_t v97 = v34;
  sub_1000A47F0(v34, v27, type metadata accessor for APHighlightTitle);
  uint64_t v99 = v5;
  if (v38 == 1)
  {
    sub_1000A33F0(v27, type metadata accessor for APHighlightTitle);
    double v39 = 1.0;
  }
  else
  {
    int v40 = *(unsigned __int8 *)(v27 + v5[8]);
    sub_1000A33F0(v27, type metadata accessor for APHighlightTitle);
    if (v40) {
      double v39 = 0.75;
    }
    else {
      double v39 = 1.0;
    }
  }
  static UnitPoint.leading.getter();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v45 = v86;
  uint64_t v46 = v101;
  uint64_t v47 = v102;
  (*(void (**)(unsigned char *, void, uint64_t (*)(void)))(v86 + 104))(v101, enum case for BlendMode.plusLighter(_:), v102);
  uint64_t v48 = (uint64_t)v87;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t (*)(void)))(v45 + 16))(v87, v46, v47);
  sub_1000A47F0(v48, (uint64_t)&v21[*(int *)(v84 + 36)], (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  uint64_t v49 = v82;
  *(void *)uint64_t v21 = v28;
  *((void *)v21 + 1) = v49;
  v21[16] = v32;
  uint64_t v50 = v28;
  uint64_t v75 = v28;
  uint64_t v51 = KeyPath;
  *((void *)v21 + 3) = v100;
  *((void *)v21 + 4) = v51;
  *((void *)v21 + 5) = 1;
  v21[48] = v33;
  int v74 = v32;
  uint64_t v52 = v81;
  *((void *)v21 + 7) = v80;
  *((void *)v21 + 8) = v52;
  uint64_t v53 = v76;
  *((void *)v21 + 9) = v79;
  *((void *)v21 + 10) = v53;
  *((double *)v21 + 11) = v39;
  *((double *)v21 + 12) = v39;
  *((void *)v21 + 13) = v42;
  *((void *)v21 + 14) = v44;
  sub_100025F98(v50, v49, v32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000A33F0(v48, (uint64_t (*)(void))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(unsigned char *, uint64_t (*)(void)))(v45 + 8))(v101, v102);
  sub_100025F88(v75, v49, v74);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(void *)(v78 + 8);
  LOBYTE(v105) = *(unsigned char *)v78;
  uint64_t v106 = v54;
  State.wrappedValue.getter();
  LODWORD(v53) = v104;
  uint64_t v55 = v97;
  uint64_t v56 = v88;
  sub_1000A47F0(v97, (uint64_t)v88, type metadata accessor for APHighlightTitle);
  if (v53 == 1)
  {
    sub_1000A33F0((uint64_t)v56, type metadata accessor for APHighlightTitle);
    double v57 = 0.0;
  }
  else
  {
    int v58 = v56[v99[8]];
    sub_1000A33F0((uint64_t)v56, type metadata accessor for APHighlightTitle);
    if (v58) {
      double v57 = 4.0;
    }
    else {
      double v57 = 0.0;
    }
  }
  uint64_t v59 = v89;
  sub_1000170C8((uint64_t)v21, (uint64_t)v89, &qword_100143CB8);
  uint64_t v60 = (double *)&v59[*(int *)(v85 + 36)];
  *uint64_t v60 = v57;
  *((unsigned char *)v60 + 8) = 0;
  sub_100017388((uint64_t)v21, &qword_100143CB8);
  uint64_t v102 = type metadata accessor for APHighlightTitle;
  int v61 = v96;
  sub_1000A47F0(v55, (uint64_t)v96, type metadata accessor for APHighlightTitle);
  unint64_t v62 = (*(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
  uint64_t v63 = swift_allocObject();
  sub_1000A4D7C((uint64_t)v61, v63 + v62, type metadata accessor for APHighlightTitle);
  uint64_t v64 = v94;
  sub_1000170C8((uint64_t)v59, (uint64_t)v94, &qword_100143CC0);
  uint64_t v65 = (uint64_t (**)())&v64[*(int *)(v103 + 36)];
  char *v65 = sub_1000A7928;
  v65[1] = (uint64_t (*)())v63;
  void v65[2] = 0;
  v65[3] = 0;
  sub_100017388((uint64_t)v59, &qword_100143CC0);
  char v66 = *(unsigned char *)(v55 + v99[5] + 8);
  uint64_t v67 = swift_retain();
  uint64_t v68 = sub_100035550(v67, v66);
  swift_release();
  swift_getKeyPath();
  uint64_t v105 = v68;
  sub_1000A33A8(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v69 = *(void *)(v68 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release();
  uint64_t v105 = v69;
  sub_1000A47F0(v55, (uint64_t)v61, v102);
  uint64_t v70 = swift_allocObject();
  sub_1000A4D7C((uint64_t)v61, v70 + v62, type metadata accessor for APHighlightTitle);
  sub_1000A6E94(&qword_100143CE0, &qword_100143CC8, (void (*)(void))sub_1000A7A18);
  uint64_t v71 = v92;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388((uint64_t)v64, &qword_100143CC8);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v93 + 32))(v98, v71, v95);
}

uint64_t sub_10009A01C(uint64_t a1)
{
  uint64_t result = type metadata accessor for APHighlightTitle(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 32)) == 1)
  {
    uint64_t v3 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
    __chkstk_darwin(v3);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10009A0E0(uint64_t a1, uint64_t (*a2)(void))
{
  return State.wrappedValue.setter();
}

uint64_t sub_10009A164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v81 = a1;
  uint64_t v3 = (int *)type metadata accessor for APHighlightSubtitle(0);
  uint64_t v74 = *((void *)v3 - 1);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v71 = (uint64_t)&v60 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v75 = v11;
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v73 = sub_100005B18(&qword_100143C28);
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v83 = (uint64_t (*)(uint64_t))((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = sub_100005B18(&qword_100143C30);
  __chkstk_darwin(v70);
  uint64_t v69 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100005B18(&qword_100143C38);
  __chkstk_darwin(v84);
  uint64_t v79 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100005B18(&qword_100143C40);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v77 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t *)(v1 + v3[7]);
  uint64_t v19 = v18[1];
  uint64_t v85 = *v18;
  uint64_t v86 = v19;
  sub_100025F34();
  swift_bridgeObjectRetain();
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  LODWORD(v62) = v23;
  uint64_t v25 = v24;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v66 = static Font.subheadline.getter();
  uint64_t v64 = swift_getKeyPath();
  uint64_t v63 = static Color.white.getter();
  uint64_t v26 = v2 + v3[6];
  uint64_t v27 = *(void *)(v26 + 8);
  LOBYTE(v85) = *(unsigned char *)v26;
  uint64_t v86 = v27;
  uint64_t v28 = sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  LODWORD(v19) = v100;
  sub_1000A47F0(v2, (uint64_t)v13, type metadata accessor for APHighlightSubtitle);
  if (v19 == 1)
  {
    sub_1000A33F0((uint64_t)v13, type metadata accessor for APHighlightSubtitle);
    double v29 = 1.0;
  }
  else
  {
    int v30 = v13[v3[8]];
    sub_1000A33F0((uint64_t)v13, type metadata accessor for APHighlightSubtitle);
    if (v30) {
      double v29 = 0.0;
    }
    else {
      double v29 = 1.0;
    }
  }
  uint64_t v31 = *(void *)(v26 + 8);
  LOBYTE(v85) = *(unsigned char *)v26;
  uint64_t v86 = v31;
  State.wrappedValue.getter();
  int v32 = v100;
  sub_1000A47F0(v2, (uint64_t)v10, type metadata accessor for APHighlightSubtitle);
  uint64_t v82 = v3;
  uint64_t v67 = v2;
  uint64_t v65 = v28;
  if (v32 == 1)
  {
    sub_1000A33F0((uint64_t)v10, type metadata accessor for APHighlightSubtitle);
    double v33 = 1.0;
  }
  else
  {
    int v34 = v10[v3[8]];
    sub_1000A33F0((uint64_t)v10, type metadata accessor for APHighlightSubtitle);
    if (v34) {
      double v33 = 0.75;
    }
    else {
      double v33 = 1.0;
    }
  }
  static UnitPoint.leading.getter();
  uint64_t v85 = v20;
  uint64_t v86 = v22;
  char v35 = v62 & 1;
  char v87 = v62 & 1;
  uint64_t v62 = v22;
  uint64_t v61 = v20;
  uint64_t v88 = v25;
  uint64_t v89 = KeyPath;
  uint64_t v90 = 2;
  char v91 = 0;
  uint64_t v92 = v64;
  uint64_t v93 = v66;
  uint64_t v94 = v63;
  double v95 = v29;
  double v96 = v33;
  double v97 = v33;
  uint64_t v98 = v36;
  uint64_t v99 = v37;
  static Font.Weight.bold.getter();
  sub_100005B18(&qword_100143C48);
  sub_1000A6E94(&qword_100143C50, &qword_100143C48, (void (*)(void))sub_1000A7360);
  View.fontWeight(_:)();
  sub_100025F88(v61, v62, v35);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v26 + 8);
  LOBYTE(v85) = *(unsigned char *)v26;
  uint64_t v86 = v38;
  State.wrappedValue.getter();
  int v39 = v100;
  uint64_t v40 = v67;
  uint64_t v41 = v71;
  sub_1000A47F0(v67, v71, type metadata accessor for APHighlightSubtitle);
  if (v39 == 1)
  {
    sub_1000A33F0(v41, type metadata accessor for APHighlightSubtitle);
    double v42 = 0.0;
  }
  else
  {
    int v43 = *(unsigned __int8 *)(v41 + v82[8]);
    sub_1000A33F0(v41, type metadata accessor for APHighlightSubtitle);
    if (v43) {
      double v42 = 4.0;
    }
    else {
      double v42 = 0.0;
    }
  }
  uint64_t v44 = v72;
  uint64_t v45 = (uint64_t)v69;
  uint64_t v46 = v83;
  uint64_t v47 = v73;
  (*(void (**)(char *, uint64_t (*)(uint64_t), uint64_t))(v72 + 16))(v69, v83, v73);
  uint64_t v48 = v45 + *(int *)(v70 + 36);
  *(double *)uint64_t v48 = v42;
  *(unsigned char *)(v48 + 8) = 0;
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v44 + 8))(v46, v47);
  uint64_t v83 = type metadata accessor for APHighlightSubtitle;
  uint64_t v49 = v76;
  sub_1000A47F0(v40, v76, type metadata accessor for APHighlightSubtitle);
  unint64_t v50 = (*(unsigned __int8 *)(v74 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  uint64_t v51 = swift_allocObject();
  sub_1000A4D7C(v49, v51 + v50, type metadata accessor for APHighlightSubtitle);
  uint64_t v52 = v79;
  sub_1000170C8(v45, v79, &qword_100143C30);
  uint64_t v53 = (uint64_t (**)())(v52 + *(int *)(v84 + 36));
  *uint64_t v53 = sub_1000A7588;
  v53[1] = (uint64_t (*)())v51;
  v53[2] = 0;
  v53[3] = 0;
  sub_100017388(v45, &qword_100143C30);
  LOBYTE(v51) = *(unsigned char *)(v40 + v82[5] + 8);
  uint64_t v54 = swift_retain();
  uint64_t v55 = sub_100035550(v54, v51);
  swift_release();
  swift_getKeyPath();
  uint64_t v85 = v55;
  sub_1000A33A8(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v56 = *(void *)(v55 + OBJC_IVAR____TtC13GameOverlayUI16AccessPointModel__highlightIndex);
  swift_release();
  uint64_t v85 = v56;
  sub_1000A47F0(v40, v49, v83);
  uint64_t v57 = swift_allocObject();
  sub_1000A4D7C(v49, v57 + v50, type metadata accessor for APHighlightSubtitle);
  sub_1000A6E94(&qword_100143CA8, &qword_100143C38, (void (*)(void))sub_1000A77C4);
  int v58 = v77;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_100017388(v52, &qword_100143C38);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v81, v58, v80);
}

uint64_t sub_10009AB2C(uint64_t a1)
{
  uint64_t result = type metadata accessor for APHighlightSubtitle(0);
  if (*(unsigned char *)(a1 + *(int *)(result + 32)) == 1)
  {
    static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
    Animation.delay(_:)();
    uint64_t v3 = swift_release();
    __chkstk_darwin(v3);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10009AC0C()
{
  return swift_release();
}

double sub_10009AC8C()
{
  uint64_t v0 = type metadata accessor for DynamicTypeSize();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  sub_100035290((uint64_t)&v10 - v5);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if (v7 == enum case for DynamicTypeSize.xLarge(_:))
  {
    double v8 = 43.0;
  }
  else if (v7 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    double v8 = 45.0;
  }
  else if (v7 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    double v8 = 48.0;
  }
  else
  {
    if (DynamicTypeSize.isAccessibilitySize.getter()) {
      double v8 = 50.0;
    }
    else {
      double v8 = 40.0;
    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v8;
}

uint64_t sub_10009AE60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a2;
  uint64_t v83 = type metadata accessor for MediaArtwork();
  uint64_t v82 = *(void *)(v83 - 8);
  uint64_t v3 = __chkstk_darwin(v83);
  uint64_t v76 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v75 - v5;
  uint64_t v78 = sub_100005B18(&qword_100143C00);
  __chkstk_darwin(v78);
  int v7 = (char **)((char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v87 = sub_100005B18(&qword_100143BB0);
  __chkstk_darwin(v87);
  uint64_t v79 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for PlayerAvatarView();
  __chkstk_darwin(v81);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_100005B18(&qword_100143C08);
  __chkstk_darwin(v89);
  char v91 = (_OWORD *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = sub_100005B18(&qword_100143C10);
  __chkstk_darwin(v84);
  unint64_t v86 = (unint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100005B18(&qword_100143C18);
  __chkstk_darwin(v77);
  uint64_t v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_100005B18(&qword_100143B48);
  __chkstk_darwin(v85);
  uint64_t v80 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100005B18(&qword_100143B38);
  __chkstk_darwin(v90);
  uint64_t v88 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Image.ResizingMode();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for AccessPointIconType(0);
  __chkstk_darwin(v21);
  int v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for APHighlightIcon(0);
  sub_1000A47F0(a1 + *(int *)(v24 + 24), (uint64_t)v23, type metadata accessor for AccessPointIconType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRetain();
      sub_100083B7C((uint64_t)_swiftEmptyArrayStorage);
      MediaArtwork.init(urlTemplate:sourceImageSize:colors:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v10, 0, 1, v83);
      swift_bridgeObjectRelease();
      uint64_t v41 = v81;
      *(void *)&v10[*(int *)(v81 + 20)] = 0;
      v10[*(int *)(v41 + 24)] = 2;
      sub_1000A47F0((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlayerAvatarView);
      swift_storeEnumTagMultiPayload();
      sub_100005B18(&qword_100143B58);
      sub_1000A6DC8();
      sub_1000A33A8(&qword_100143BA0, (void (*)(uint64_t))type metadata accessor for PlayerAvatarView);
      uint64_t v42 = v80;
      _ConditionalContent<>.init(storage:)();
      sub_1000170C8(v42, v86, &qword_100143B48);
      swift_storeEnumTagMultiPayload();
      sub_1000A6D1C();
      sub_1000A6FD0();
      uint64_t v43 = v88;
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v42, &qword_100143B48);
      sub_1000170C8(v43, (uint64_t)v91, &qword_100143B38);
      swift_storeEnumTagMultiPayload();
      sub_100005B18(&qword_100143BD0);
      sub_1000A6C58();
      sub_1000A70D0();
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v43, &qword_100143B38);
      return sub_1000A33F0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlayerAvatarView);
    case 2u:
      uint64_t v44 = sub_10009C2E4(*(void *)v23);
      swift_bridgeObjectRelease();
      *int v7 = v44;
      swift_storeEnumTagMultiPayload();
      sub_1000A707C();
      sub_1000A33A8((unint64_t *)&qword_100143BC0, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v45 = (uint64_t)v79;
      _ConditionalContent<>.init(storage:)();
      sub_1000170C8(v45, v86, &qword_100143BB0);
      swift_storeEnumTagMultiPayload();
      sub_1000A6D1C();
      sub_1000A6FD0();
      uint64_t v46 = v88;
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v45, &qword_100143BB0);
      sub_1000170C8(v46, (uint64_t)v91, &qword_100143B38);
      swift_storeEnumTagMultiPayload();
      sub_100005B18(&qword_100143BD0);
      sub_1000A6C58();
      sub_1000A70D0();
      _ConditionalContent<>.init(storage:)();
      return sub_100017388(v46, &qword_100143B38);
    case 3u:
      uint64_t v47 = v82;
      uint64_t v48 = v75;
      uint64_t v49 = v83;
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v75, v23, v83);
      sub_10009AC8C();
      sub_10009AC8C();
      id v50 = AMSMediaArtworkCropStyleBoundedBox;
      uint64_t v51 = v76;
      MediaArtwork.resize(_:croppedTo:)();

      (*(void (**)(void *, char *, uint64_t))(v47 + 16))(v7, v51, v49);
      swift_storeEnumTagMultiPayload();
      sub_1000A707C();
      sub_1000A33A8((unint64_t *)&qword_100143BC0, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
      uint64_t v52 = (uint64_t)v79;
      _ConditionalContent<>.init(storage:)();
      sub_1000170C8(v52, v86, &qword_100143BB0);
      swift_storeEnumTagMultiPayload();
      sub_1000A6D1C();
      sub_1000A6FD0();
      uint64_t v53 = v88;
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v52, &qword_100143BB0);
      sub_1000170C8(v53, (uint64_t)v91, &qword_100143B38);
      swift_storeEnumTagMultiPayload();
      sub_100005B18(&qword_100143BD0);
      sub_1000A6C58();
      sub_1000A70D0();
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v53, &qword_100143B38);
      uint64_t v54 = *(void (**)(char *, uint64_t))(v47 + 8);
      v54(v51, v49);
      return ((uint64_t (*)(char *, uint64_t))v54)(v48, v49);
    case 4u:
      double v55 = *((double *)v23 + 2);
      Image.init(_:bundle:)();
      (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for Image.ResizingMode.stretch(_:), v17);
      uint64_t v56 = Image.resizable(capInsets:resizingMode:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      if (v55 <= 0.0)
      {
        sub_10009AC8C();
        sub_10009AC8C();
      }
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      *(void *)uint64_t v93 = v56;
      *(_OWORD *)&v93[8] = xmmword_100110CE0;
      *(void *)&long long v94 = v104;
      *((void *)&v94 + 1) = v105;
      *(void *)&long long v95 = v106;
      *((void *)&v95 + 1) = v107;
      long long v96 = v108;
      char v97 = 0;
      swift_retain();
      sub_100005B18(&qword_100143BE0);
      sub_100005B18(&qword_100143BF0);
      sub_1000A71A0(&qword_100143BD8, &qword_100143BE0);
      sub_1000A71A0(&qword_100143BE8, &qword_100143BF0);
      _ConditionalContent<>.init(storage:)();
      uint64_t v57 = v102;
      char v58 = v103;
      long long v59 = v99;
      uint64_t v60 = v91;
      _OWORD *v91 = v98;
      v60[1] = v59;
      long long v61 = v101;
      v60[2] = v100;
      v60[3] = v61;
      *((void *)v60 + 8) = v57;
      *((unsigned char *)v60 + 72) = v58;
      swift_storeEnumTagMultiPayload();
      sub_100005B18(&qword_100143BD0);
      sub_1000A6C58();
      sub_1000A70D0();
      _ConditionalContent<>.init(storage:)();
      return swift_release();
    case 5u:
      uint64_t v62 = *(void *)v23;
      unint64_t v63 = *((void *)v23 + 1);
      uint64_t v87 = *(void *)v23;
      unint64_t v86 = v63;
      if (v63 >> 60 == 15) {
        goto LABEL_13;
      }
      sub_1000244CC(v62, v63);
      uint64_t v64 = (void *)sub_10009C6A0();
      if (v64)
      {
        id v65 = v64;
        Image.init(uiImage:)();
        (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for Image.ResizingMode.stretch(_:), v17);
        uint64_t v66 = Image.resizable(capInsets:resizingMode:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
        *(_OWORD *)uint64_t v93 = (unint64_t)v66;
        *(_WORD *)&v93[16] = 1;
        v93[18] = 0;
        swift_retain();
        sub_100005B18(&qword_100143B88);
        sub_1000A7228(&qword_100143B80, &qword_100143B88);
        _ConditionalContent<>.init(storage:)();
        sub_1000247B8(v62, v63);
        swift_release();
      }
      else
      {
        sub_1000247B8(v62, v63);
LABEL_13:
        memset(v93, 0, 18);
        v93[18] = 1;
        sub_100005B18(&qword_100143B88);
        sub_1000A7228(&qword_100143B80, &qword_100143B88);
        _ConditionalContent<>.init(storage:)();
      }
      uint64_t v67 = 0x10000;
      if (!BYTE2(v99)) {
        uint64_t v67 = 0;
      }
      *(_OWORD *)uint64_t v93 = v98;
      *(void *)&v93[16] = v67 | (unsigned __int16)v99;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      char v97 = 1;
      uint64_t v84 = *((void *)&v98 + 1);
      uint64_t v85 = v98;
      LODWORD(v83) = (unsigned __int16)v99;
      LODWORD(v82) = BYTE2(v99);
      sub_1000A7298(v98, *((uint64_t *)&v98 + 1), (unsigned __int16)v99, SBYTE2(v99));
      sub_100005B18(&qword_100143BE0);
      sub_100005B18(&qword_100143BF0);
      sub_1000A71A0(&qword_100143BD8, &qword_100143BE0);
      sub_1000A71A0(&qword_100143BE8, &qword_100143BF0);
      _ConditionalContent<>.init(storage:)();
      long long v68 = v98;
      long long v69 = v99;
      uint64_t v88 = *((void *)&v99 + 1);
      unsigned long long v70 = v100;
      long long v71 = v101;
      uint64_t v72 = v102;
      char v73 = v103;
      uint64_t v74 = v91;
      _OWORD *v91 = v98;
      v74[1] = v69;
      v74[2] = v70;
      uint64_t v80 = v70 >> 64;
      uint64_t v81 = v70;
      v74[3] = v71;
      *((void *)v74 + 8) = v72;
      *((unsigned char *)v74 + 72) = v73;
      swift_storeEnumTagMultiPayload();
      sub_1000A72A4(v68, *((uint64_t *)&v68 + 1), v69, v88, v70, *((uint64_t *)&v70 + 1), v71, *((uint64_t *)&v71 + 1), v72, v73);
      sub_100005B18(&qword_100143BD0);
      sub_1000A6C58();
      sub_1000A70D0();
      _ConditionalContent<>.init(storage:)();
      sub_1000247B8(v87, v86);
      sub_1000A72B8(v85, v84, v83, v82);
      return sub_1000A72C4(v68, *((uint64_t *)&v68 + 1), v69, v88, v81, v80, v71, *((uint64_t *)&v71 + 1), v72, v73);
    default:
      Image.init(_internalSystemName:)();
      (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for Image.ResizingMode.stretch(_:), v17);
      uint64_t v25 = Image.resizable(capInsets:resizingMode:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      uint64_t v26 = static Color.primary.getter();
      char v27 = static Edge.Set.all.getter();
      EdgeInsets.init(_all:)();
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      static Color.black.getter();
      uint64_t v36 = Color.opacity(_:)();
      swift_release();
      char v37 = static Edge.Set.all.getter();
      *(void *)uint64_t v14 = v25;
      *((void *)v14 + 1) = 0;
      *((_WORD *)v14 + 8) = 257;
      *((void *)v14 + 3) = v26;
      v14[32] = v27;
      *((void *)v14 + 5) = v29;
      *((void *)v14 + 6) = v31;
      *((void *)v14 + 7) = v33;
      *((void *)v14 + 8) = v35;
      v14[72] = 0;
      *((void *)v14 + 10) = v36;
      v14[88] = v37;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100005B18(&qword_100143B58);
      sub_1000A6DC8();
      sub_1000A33A8(&qword_100143BA0, (void (*)(uint64_t))type metadata accessor for PlayerAvatarView);
      uint64_t v38 = v80;
      _ConditionalContent<>.init(storage:)();
      sub_1000170C8(v38, v86, &qword_100143B48);
      swift_storeEnumTagMultiPayload();
      sub_1000A6D1C();
      sub_1000A6FD0();
      uint64_t v39 = v88;
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v38, &qword_100143B48);
      sub_1000170C8(v39, (uint64_t)v91, &qword_100143B38);
      swift_storeEnumTagMultiPayload();
      sub_100005B18(&qword_100143BD0);
      sub_1000A6C58();
      sub_1000A70D0();
      _ConditionalContent<>.init(storage:)();
      sub_100017388(v39, &qword_100143B38);
      swift_release();
      swift_release();
      return swift_release();
  }
}

void *sub_10009C2E4(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100069708(0, &qword_1001422B0);
    sub_100069708(0, &qword_100142648);
    swift_bridgeObjectRetain();
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_1000244CC(v5, *v4);
      int v7 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      if (v7)
      {
        [objc_allocWithZone((Class)GKPlayer) initWithInternalRepresentation:v7];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        sub_1000247CC(v5, v6);
      }
      else
      {
        if (qword_10013FBB0 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100007D4C(v8, (uint64_t)qword_100156CF8);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Player could not be deserialized.", v11, 2u);
          swift_slowDealloc();
        }
        sub_1000247CC(v5, v6);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10009C6A0()
{
  sub_100069708(0, &qword_1001422B0);
  sub_100069708(0, &qword_100143C20);
  uint64_t result = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (!result)
  {
    if (qword_10013FBB0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007D4C(v1, (uint64_t)qword_100156CF8);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "banner image could not be deserialized", v4, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return result;
}

uint64_t sub_10009C970@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v2 = (int *)type metadata accessor for APHighlightIcon(0);
  uint64_t v25 = *((void *)v2 - 1);
  uint64_t v3 = *(void *)(v25 + 64);
  __chkstk_darwin(v2);
  uint64_t v26 = (uint64_t)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100005B18(&qword_100143AF0);
  __chkstk_darwin(v4);
  unint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100005B18(&qword_100143AF8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_100143B00);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = v1 + v2[5];
  char v17 = *(unsigned char *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  char v28 = v17;
  uint64_t v29 = v18;
  sub_100005B18(&qword_100140E10);
  State.wrappedValue.getter();
  if (v30 == 1)
  {
    sub_10009AE60(v1, (uint64_t)v9);
    uint64_t v19 = *(void *)(v1 + v2[7]);
    sub_1000170C8((uint64_t)v9, (uint64_t)v13, &qword_100143AF8);
    *(void *)&v13[*(int *)(v10 + 36)] = v19;
    swift_retain();
    sub_100017388((uint64_t)v9, &qword_100143AF8);
    sub_100024A74((uint64_t)v13, (uint64_t)v15, &qword_100143B00);
    sub_1000170C8((uint64_t)v15, (uint64_t)v6, &qword_100143B00);
    swift_storeEnumTagMultiPayload();
    sub_100005B18(&qword_100143B08);
    sub_1000A6B0C();
    sub_1000A7228(&qword_100143BF8, &qword_100143B08);
    _ConditionalContent<>.init(storage:)();
    return sub_100017388((uint64_t)v15, &qword_100143B00);
  }
  else
  {
    if (*(unsigned char *)(v1 + v2[8]) == 1)
    {
      static Color.black.getter();
      uint64_t v21 = Color.opacity(_:)();
      swift_release();
    }
    else
    {
      uint64_t v21 = static Color.clear.getter();
    }
    uint64_t v22 = v26;
    sub_1000A47F0(v1, v26, type metadata accessor for APHighlightIcon);
    unint64_t v23 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v24 = swift_allocObject();
    sub_1000A4D7C(v22, v24 + v23, type metadata accessor for APHighlightIcon);
    *unint64_t v6 = v21;
    v6[1] = (uint64_t)sub_1000A6AE0;
    v6[2] = v24;
    v6[3] = 0;
    v6[4] = 0;
    swift_storeEnumTagMultiPayload();
    sub_100005B18(&qword_100143B08);
    sub_1000A6B0C();
    sub_1000A7228(&qword_100143BF8, &qword_100143B08);
    return _ConditionalContent<>.init(storage:)();
  }
}

uint64_t sub_10009CDA0()
{
  return swift_release();
}

uint64_t sub_10009CE64()
{
  return State.wrappedValue.setter();
}

void sub_10009CEDC()
{
  qword_100156DE8 = 0x4074000000000000;
}

uint64_t sub_10009CEEC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t sub_10009CEF4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV13GameOverlayUI29AccessPointHighlightComponent14GestureHandler___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10009CF94()
{
  return type metadata accessor for AccessPointHighlightComponent.GestureHandler(0);
}

uint64_t type metadata accessor for AccessPointHighlightComponent.GestureHandler(uint64_t a1)
{
  return sub_100017090(a1, qword_100143570);
}

uint64_t sub_10009CFBC()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_10009D058(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a2[6];
    v4[5] = a2[5];
    v4[6] = v8;
    uint64_t v9 = a2[8];
    v4[7] = a2[7];
    v4[8] = v9;
    uint64_t v10 = a3[7];
    uint64_t v11 = (void *)((char *)v4 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = type metadata accessor for AccessPointIconType(0);
    uint64_t v64 = *(void *)(v13 - 8);
    uint64_t v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v64 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v12, 1, v13))
    {
      uint64_t v15 = sub_100005B18(&qword_100140B38);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *uint64_t v11 = *v12;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v18 = type metadata accessor for MediaArtwork();
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v11, v12, v18);
          break;
        case 4u:
          uint64_t v19 = v12[1];
          *uint64_t v11 = *v12;
          v11[1] = v19;
          v11[2] = v12[2];
          swift_bridgeObjectRetain();
          break;
        case 5u:
          unint64_t v20 = v12[1];
          if (v20 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
          }
          else
          {
            uint64_t v21 = *v12;
            sub_1000244CC(v21, v20);
            *uint64_t v11 = v21;
            v11[1] = v20;
          }
          break;
        default:
          uint64_t v17 = v12[1];
          *uint64_t v11 = *v12;
          v11[1] = v17;
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v64 + 56))(v11, 0, 1, v13);
    }
    uint64_t v22 = a3[8];
    unint64_t v23 = (void *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    if (v14((uint64_t *)((char *)a2 + v22), 1, v13))
    {
      uint64_t v25 = sub_100005B18(&qword_100140B38);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *unint64_t v23 = *v24;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v27 = type metadata accessor for MediaArtwork();
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(v23, v24, v27);
          break;
        case 4u:
          uint64_t v28 = v24[1];
          *unint64_t v23 = *v24;
          v23[1] = v28;
          void v23[2] = v24[2];
          swift_bridgeObjectRetain();
          break;
        case 5u:
          unint64_t v29 = v24[1];
          if (v29 >> 60 == 15)
          {
            *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
          }
          else
          {
            uint64_t v30 = *v24;
            sub_1000244CC(v30, v29);
            *unint64_t v23 = v30;
            v23[1] = v29;
          }
          break;
        default:
          uint64_t v26 = v24[1];
          *unint64_t v23 = *v24;
          v23[1] = v26;
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v64 + 56))(v23, 0, 1, v13);
    }
    uint64_t v31 = a3[9];
    uint64_t v32 = a3[10];
    uint64_t v33 = (char *)v4 + v31;
    uint64_t v34 = (uint64_t)a2 + v31;
    *(void *)uint64_t v33 = *(void *)v34;
    v33[8] = *(unsigned char *)(v34 + 8);
    *((unsigned char *)v4 + v32) = *((unsigned char *)a2 + v32);
    uint64_t v35 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)v4 + v35) = *((unsigned char *)a2 + v35);
    uint64_t v36 = a3[13];
    char v37 = (char *)v4 + v36;
    uint64_t v38 = (uint64_t)a2 + v36;
    uint64_t v39 = *(uint64_t *)((char *)a2 + v36 + 24);
    if (v39)
    {
      uint64_t v40 = *(void *)(v38 + 32);
      *((void *)v37 + 3) = v39;
      *((void *)v37 + 4) = v40;
      (**(void (***)(void))(v39 - 8))();
    }
    else
    {
      long long v41 = *(_OWORD *)(v38 + 16);
      *(_OWORD *)char v37 = *(_OWORD *)v38;
      *((_OWORD *)v37 + 1) = v41;
      *((void *)v37 + 4) = *(void *)(v38 + 32);
    }
    uint64_t v42 = a3[14];
    uint64_t v43 = (char *)v4 + v42;
    uint64_t v44 = (char *)a2 + v42;
    uint64_t v45 = type metadata accessor for PageMetrics();
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      uint64_t v47 = sub_100005B18(&qword_100140B40);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    uint64_t v48 = a3[15];
    uint64_t v49 = (char *)v4 + v48;
    id v50 = (char *)a2 + v48;
    uint64_t v51 = type metadata accessor for ImpressionMetrics();
    uint64_t v52 = *(void *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      uint64_t v53 = sub_100005B18(&qword_1001402E0);
      memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    uint64_t v54 = a3[16];
    uint64_t v55 = a3[17];
    uint64_t v56 = (void *)((char *)v4 + v54);
    uint64_t v57 = (uint64_t *)((char *)a2 + v54);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    *(void *)((char *)v4 + v55) = *(uint64_t *)((char *)a2 + v55);
    uint64_t v59 = a3[18];
    uint64_t v60 = (void *)((char *)v4 + v59);
    long long v61 = (uint64_t *)((char *)a2 + v59);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10009D784(uint64_t a1, int *a2)
{
  sub_100007188(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a1 + a2[7]);
  uint64_t v5 = type metadata accessor for AccessPointIconType(0);
  unint64_t v6 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 4u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v7 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
        break;
      case 5u:
        unint64_t v8 = v4[1];
        if (v8 >> 60 != 15) {
          sub_1000247CC(*v4, v8);
        }
        break;
      default:
        break;
    }
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[8]);
  if (!v6(v9, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 4u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        uint64_t v10 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
        break;
      case 5u:
        unint64_t v11 = v9[1];
        if (v11 >> 60 != 15) {
          sub_1000247CC(*v9, v11);
        }
        break;
      default:
        break;
    }
  }
  uint64_t v12 = a1 + a2[13];
  if (*(void *)(v12 + 24)) {
    sub_100007188(v12);
  }
  uint64_t v13 = a1 + a2[14];
  uint64_t v14 = type metadata accessor for PageMetrics();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v16 = a1 + a2[15];
  uint64_t v17 = type metadata accessor for ImpressionMetrics();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10009DB14(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (uint64_t *)(a1 + v9);
  unint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for AccessPointIconType(0);
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v62 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v11, 1, v12))
  {
    uint64_t v14 = sub_100005B18(&qword_100140B38);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v10 = *v11;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v16 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v10, v11, v16);
        break;
      case 4u:
        uint64_t v17 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v17;
        v10[2] = v11[2];
        swift_bridgeObjectRetain();
        break;
      case 5u:
        unint64_t v18 = v11[1];
        if (v18 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        }
        else
        {
          uint64_t v19 = *v11;
          sub_1000244CC(v19, v18);
          *uint64_t v10 = v19;
          v10[1] = v18;
        }
        break;
      default:
        uint64_t v15 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v15;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v62 + 56))(v10, 0, 1, v12);
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  if (v13((void *)(a2 + v20), 1, v12))
  {
    uint64_t v23 = sub_100005B18(&qword_100140B38);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v21 = *v22;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v25 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v21, v22, v25);
        break;
      case 4u:
        uint64_t v26 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v26;
        void v21[2] = v22[2];
        swift_bridgeObjectRetain();
        break;
      case 5u:
        unint64_t v27 = v22[1];
        if (v27 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        }
        else
        {
          uint64_t v28 = *v22;
          sub_1000244CC(v28, v27);
          *uint64_t v21 = v28;
          v21[1] = v27;
        }
        break;
      default:
        uint64_t v24 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v24;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v62 + 56))(v21, 0, 1, v12);
  }
  uint64_t v29 = a3[9];
  uint64_t v30 = a3[10];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  uint64_t v33 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v33) = *(unsigned char *)(a2 + v33);
  uint64_t v34 = a3[13];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = *(void *)(a2 + v34 + 24);
  if (v37)
  {
    uint64_t v38 = *(void *)(v36 + 32);
    *(void *)(v35 + 24) = v37;
    *(void *)(v35 + 32) = v38;
    (**(void (***)(void))(v37 - 8))();
  }
  else
  {
    long long v39 = *(_OWORD *)(v36 + 16);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *(_OWORD *)(v35 + 16) = v39;
    *(void *)(v35 + 32) = *(void *)(v36 + 32);
  }
  uint64_t v40 = a3[14];
  long long v41 = (void *)(a1 + v40);
  uint64_t v42 = (const void *)(a2 + v40);
  uint64_t v43 = type metadata accessor for PageMetrics();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    uint64_t v45 = sub_100005B18(&qword_100140B40);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  uint64_t v46 = a3[15];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (const void *)(a2 + v46);
  uint64_t v49 = type metadata accessor for ImpressionMetrics();
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    uint64_t v51 = sub_100005B18(&qword_1001402E0);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v47, v48, v49);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  uint64_t v52 = a3[16];
  uint64_t v53 = a3[17];
  uint64_t v54 = (void *)(a1 + v52);
  uint64_t v55 = (void *)(a2 + v52);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  *(void *)(a1 + v53) = *(void *)(a2 + v53);
  uint64_t v57 = a3[18];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (void *)(a2 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10009E1E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  sub_100019BC0(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (uint64_t *)((char *)a1 + v6);
  uint64_t v8 = (uint64_t *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for AccessPointIconType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *uint64_t v7 = *v8;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v15 = type metadata accessor for MediaArtwork();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(v7, v8, v15);
          break;
        case 4u:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          _OWORD v7[2] = v8[2];
          swift_bridgeObjectRetain();
          break;
        case 5u:
          unint64_t v16 = v8[1];
          if (v16 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          }
          else
          {
            uint64_t v17 = *v8;
            uint64_t v69 = *v8;
            uint64_t v18 = v8[1];
            sub_1000244CC(v17, v16);
            *uint64_t v7 = v69;
            v7[1] = v18;
          }
          break;
        default:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_18;
    }
LABEL_7:
    uint64_t v14 = sub_100005B18(&qword_100140B38);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_18;
  }
  if (v13)
  {
    sub_1000A33F0((uint64_t)v7, type metadata accessor for AccessPointIconType);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_1000A33F0((uint64_t)v7, type metadata accessor for AccessPointIconType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v7 = *v8;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v63 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v63 - 8) + 16))(v7, v8, v63);
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        _OWORD v7[2] = v8[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        unint64_t v65 = v8[1];
        if (v65 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        }
        else
        {
          uint64_t v67 = *v8;
          sub_1000244CC(v67, v65);
          *uint64_t v7 = v67;
          v7[1] = v65;
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_18:
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  int v22 = v11((uint64_t *)((char *)a1 + v19), 1, v9);
  int v23 = v11(v21, 1, v9);
  if (v22)
  {
    if (!v23)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *uint64_t v20 = *v21;
          swift_bridgeObjectRetain();
          break;
        case 3u:
          uint64_t v25 = type metadata accessor for MediaArtwork();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(v20, v21, v25);
          break;
        case 4u:
          *uint64_t v20 = *v21;
          v20[1] = v21[1];
          v20[2] = v21[2];
          swift_bridgeObjectRetain();
          break;
        case 5u:
          unint64_t v26 = v21[1];
          if (v26 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
          }
          else
          {
            uint64_t v27 = *v21;
            sub_1000244CC(v27, v26);
            *uint64_t v20 = v27;
            v20[1] = v26;
          }
          break;
        default:
          *uint64_t v20 = *v21;
          v20[1] = v21[1];
          swift_bridgeObjectRetain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
      goto LABEL_35;
    }
LABEL_24:
    uint64_t v24 = sub_100005B18(&qword_100140B38);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_35;
  }
  if (v23)
  {
    sub_1000A33F0((uint64_t)v20, type metadata accessor for AccessPointIconType);
    goto LABEL_24;
  }
  if (a1 != a2)
  {
    sub_1000A33F0((uint64_t)v20, type metadata accessor for AccessPointIconType);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v20 = *v21;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v64 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v64 - 8) + 16))(v20, v21, v64);
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        v20[2] = v21[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        unint64_t v66 = v21[1];
        if (v66 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        }
        else
        {
          uint64_t v68 = *v21;
          sub_1000244CC(v68, v66);
          *uint64_t v20 = v68;
          v20[1] = v66;
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_35:
  uint64_t v28 = a3[9];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  uint64_t v32 = a3[13];
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (uint64_t *)((char *)a2 + v32);
  uint64_t v35 = *(uint64_t *)((char *)a2 + v32 + 24);
  if (*(uint64_t *)((char *)a1 + v32 + 24))
  {
    if (v35)
    {
      sub_100019BC0((uint64_t *)v33, v34);
      goto LABEL_42;
    }
    sub_100007188(v33);
  }
  else if (v35)
  {
    *(void *)(v33 + 24) = v35;
    *(void *)(v33 + 32) = v34[4];
    (**(void (***)(uint64_t, char *))(v35 - 8))(v33, (char *)v34);
    goto LABEL_42;
  }
  long long v36 = *(_OWORD *)v34;
  long long v37 = *((_OWORD *)v34 + 1);
  *(void *)(v33 + 32) = v34[4];
  *(_OWORD *)uint64_t v33 = v36;
  *(_OWORD *)(v33 + 16) = v37;
LABEL_42:
  uint64_t v38 = a3[14];
  long long v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for PageMetrics();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
LABEL_47:
    uint64_t v46 = sub_100005B18(&qword_100140B40);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
LABEL_48:
  uint64_t v47 = a3[15];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = type metadata accessor for ImpressionMetrics();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 48);
  int v53 = v52(v48, 1, v50);
  int v54 = v52(v49, 1, v50);
  if (!v53)
  {
    if (!v54)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 24))(v48, v49, v50);
      goto LABEL_54;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v48, v50);
    goto LABEL_53;
  }
  if (v54)
  {
LABEL_53:
    uint64_t v55 = sub_100005B18(&qword_1001402E0);
    memcpy(v48, v49, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
LABEL_54:
  uint64_t v56 = a3[16];
  uint64_t v57 = (uint64_t *)((char *)a1 + v56);
  uint64_t v58 = (uint64_t *)((char *)a2 + v56);
  *uint64_t v57 = *v58;
  v57[1] = v58[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
  uint64_t v59 = a3[18];
  uint64_t v60 = (uint64_t *)((char *)a1 + v59);
  long long v61 = (uint64_t *)((char *)a2 + v59);
  *uint64_t v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009EDB0(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for AccessPointIconType(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100005B18(&qword_100140B38);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v14 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v8, v9, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(v11 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[8];
  unint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  if (v12((const void *)(a2 + v15), 1, v10))
  {
    uint64_t v18 = sub_100005B18(&qword_100140B38);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v19 = type metadata accessor for MediaArtwork();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(v11 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  uint64_t v20 = a3[9];
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v24 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  uint64_t v25 = a3[13];
  uint64_t v26 = a3[14];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = (long long *)(a2 + v25);
  long long v29 = *v28;
  long long v30 = v28[1];
  *(void *)(v27 + 32) = *((void *)v28 + 4);
  uint64_t v31 = (void *)(a1 + v26);
  uint64_t v32 = (const void *)(a2 + v26);
  *(_OWORD *)uint64_t v27 = v29;
  *(_OWORD *)(v27 + 16) = v30;
  uint64_t v33 = type metadata accessor for PageMetrics();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = sub_100005B18(&qword_100140B40);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  uint64_t v36 = a3[15];
  long long v37 = (void *)(a1 + v36);
  uint64_t v38 = (const void *)(a2 + v36);
  uint64_t v39 = type metadata accessor for ImpressionMetrics();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = sub_100005B18(&qword_1001402E0);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v42 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(void *)(a1 + v42) = *(void *)(a2 + v42);
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  return a1;
}

uint64_t sub_10009F26C(uint64_t a1, uint64_t a2, int *a3)
{
  sub_100007188(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AccessPointIconType(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_1000A33F0((uint64_t)v9, type metadata accessor for AccessPointIconType);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v18 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 32))(v9, v10, v18);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v17 = *(void *)(v12 + 64);
LABEL_8:
      memcpy(v9, v10, v17);
      goto LABEL_14;
    }
    sub_1000A33F0((uint64_t)v9, type metadata accessor for AccessPointIconType);
LABEL_7:
    size_t v17 = *(void *)(*(void *)(sub_100005B18(&qword_100140B38) - 8) + 64);
    goto LABEL_8;
  }
  if (v15) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v16 = type metadata accessor for MediaArtwork();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(v12 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_14:
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  int v22 = v13((void *)(a1 + v19), 1, v11);
  int v23 = v13(v21, 1, v11);
  if (v22)
  {
    if (!v23)
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v24 = type metadata accessor for MediaArtwork();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 32))(v20, v21, v24);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v20, v21, *(void *)(v12 + 64));
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if (v23)
  {
    sub_1000A33F0((uint64_t)v20, type metadata accessor for AccessPointIconType);
LABEL_20:
    size_t v25 = *(void *)(*(void *)(sub_100005B18(&qword_100140B38) - 8) + 64);
LABEL_21:
    memcpy(v20, v21, v25);
    goto LABEL_27;
  }
  if (a1 != a2)
  {
    sub_1000A33F0((uint64_t)v20, type metadata accessor for AccessPointIconType);
    if (swift_getEnumCaseMultiPayload() != 3)
    {
      size_t v25 = *(void *)(v12 + 64);
      goto LABEL_21;
    }
    uint64_t v26 = type metadata accessor for MediaArtwork();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 32))(v20, v21, v26);
    swift_storeEnumTagMultiPayload();
  }
LABEL_27:
  uint64_t v27 = a3[9];
  uint64_t v28 = a3[10];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  *(unsigned char *)(a1 + v28) = *(unsigned char *)(a2 + v28);
  uint64_t v31 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v31) = *(unsigned char *)(a2 + v31);
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  if (*(void *)(a1 + v32 + 24)) {
    sub_100007188(v33);
  }
  long long v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(void *)(v33 + 32) = *(void *)(v34 + 32);
  uint64_t v36 = a3[14];
  long long v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  uint64_t v39 = type metadata accessor for PageMetrics();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v40 + 32))(v37, v38, v39);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v43)
  {
    (*(void (**)(void *, uint64_t))(v40 + 8))(v37, v39);
LABEL_34:
    uint64_t v44 = sub_100005B18(&qword_100140B40);
    memcpy(v37, v38, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(void *, void *, uint64_t))(v40 + 40))(v37, v38, v39);
LABEL_35:
  uint64_t v45 = a3[15];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (void *)(a2 + v45);
  uint64_t v48 = type metadata accessor for ImpressionMetrics();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v46, 1, v48);
  int v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 40))(v46, v47, v48);
      goto LABEL_41;
    }
    (*(void (**)(void *, uint64_t))(v49 + 8))(v46, v48);
    goto LABEL_40;
  }
  if (v52)
  {
LABEL_40:
    uint64_t v53 = sub_100005B18(&qword_1001402E0);
    memcpy(v46, v47, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(void *, void *, uint64_t))(v49 + 32))(v46, v47, v48);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
LABEL_41:
  uint64_t v54 = a3[16];
  uint64_t v55 = (void *)(a1 + v54);
  uint64_t v56 = (uint64_t *)(a2 + v54);
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  *uint64_t v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  uint64_t v60 = (void *)(a1 + v59);
  long long v61 = (uint64_t *)(a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009F9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009F9DC);
}

uint64_t sub_10009F9DC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100005B18(&qword_100140B38);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_100005B18(&qword_100140B40);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[14];
    goto LABEL_9;
  }
  uint64_t v14 = sub_100005B18(&qword_1001402E0);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[15];

  return v15(v17, a2, v16);
}

uint64_t sub_10009FB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009FB74);
}

uint64_t sub_10009FB74(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100005B18(&qword_100140B38);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_100005B18(&qword_100140B40);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[14];
    goto LABEL_7;
  }
  uint64_t v14 = sub_100005B18(&qword_1001402E0);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[15];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for AccessPointHighlight(uint64_t a1)
{
  return sub_100017090(a1, (uint64_t *)&unk_100143658);
}

void sub_10009FD18()
{
  sub_1000A3E5C(319, &qword_100143668, type metadata accessor for AccessPointIconType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    sub_1000A3E5C(319, (unint64_t *)&unk_100143670, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F)
    {
      sub_1000A3E5C(319, (unint64_t *)&unk_100140588, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_10009FEF8()
{
  return sub_1000A33A8(&qword_1001436D8, (void (*)(uint64_t))type metadata accessor for AccessPointHighlight);
}

uint64_t sub_10009FF40(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DynamicTypeSize();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AccessPointHighlightComponent(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *(unsigned __int8 *)(a1 + *(int *)(v11 + 52));
  if (v14 == 2)
  {
    sub_1000A47F0(a1, (uint64_t)v13, type metadata accessor for AccessPointHighlight);
LABEL_10:
    sub_1000A33F0((uint64_t)v13, type metadata accessor for AccessPointHighlight);
    sub_1000A47F0(v1, (uint64_t)v9, type metadata accessor for AccessPointHighlightComponent);
LABEL_11:
    char v17 = 1;
    goto LABEL_12;
  }
  sub_1000A47F0(a1, (uint64_t)v13, type metadata accessor for AccessPointHighlight);
  if ((v14 & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v15 = *((void *)v13 + 6);
  if (!v15) {
    goto LABEL_10;
  }
  if ((v15 & 0x2000000000000000) != 0) {
    uint64_t v16 = HIBYTE(v15) & 0xF;
  }
  else {
    uint64_t v16 = *((void *)v13 + 5) & 0xFFFFFFFFFFFFLL;
  }
  sub_1000A33F0((uint64_t)v13, type metadata accessor for AccessPointHighlight);
  sub_1000A47F0(v1, (uint64_t)v9, type metadata accessor for AccessPointHighlightComponent);
  if (!v16) {
    goto LABEL_11;
  }
  sub_100035290((uint64_t)v6);
  char v17 = DynamicTypeSize.isAccessibilitySize.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_12:
  sub_1000A33F0((uint64_t)v9, type metadata accessor for AccessPointHighlightComponent);
  return v17 & 1;
}

uint64_t sub_1000A01D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  long long v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = type metadata accessor for AccessPointHighlight(0);
  uint64_t result = 0;
  if ((*(unsigned char *)(a1 + *(int *)(v9 + 44)) & 1) == 0)
  {
    if (qword_10013FC88 != -1) {
      swift_once();
    }
    double v11 = *(double *)&qword_100156DE8;
    type metadata accessor for AccessPointHighlightComponent(0);
    sub_100035290((uint64_t)v8);
    char v12 = DynamicTypeSize.isAccessibilitySize.getter();
    uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v8, v2);
    if ((v12 & 1) == 0) {
      return *(void *)&v11;
    }
    sub_100035290((uint64_t)v6);
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    if (v14 == enum case for DynamicTypeSize.accessibility1(_:))
    {
      uint64_t v15 = 0x3FF3333333333333;
    }
    else
    {
      if (v14 != enum case for DynamicTypeSize.accessibility2(_:))
      {
        if (v14 == enum case for DynamicTypeSize.accessibility3(_:))
        {
          double v16 = 1.6;
        }
        else
        {
          if (v14 != enum case for DynamicTypeSize.accessibility4(_:))
          {
            if (v14 == enum case for DynamicTypeSize.accessibility5(_:)) {
              double v11 = v11 + v11;
            }
            else {
              v13(v6, v2);
            }
            return *(void *)&v11;
          }
          double v16 = 1.8;
        }
LABEL_10:
        double v11 = v11 * v16;
        return *(void *)&v11;
      }
      uint64_t v15 = 0x3FF6666666666666;
    }
    double v16 = *(double *)&v15;
    goto LABEL_10;
  }
  return result;
}

double sub_1000A0440()
{
  uint64_t v0 = type metadata accessor for DynamicTypeSize();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  long long v6 = (char *)&v10 - v5;
  type metadata accessor for AccessPointHighlightComponent(0);
  sub_100035290((uint64_t)v6);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if (v7 == enum case for DynamicTypeSize.xLarge(_:))
  {
    double v8 = 43.0;
  }
  else if (v7 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    double v8 = 45.0;
  }
  else if (v7 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    double v8 = 48.0;
  }
  else
  {
    if (DynamicTypeSize.isAccessibilitySize.getter()) {
      double v8 = 50.0;
    }
    else {
      double v8 = 40.0;
    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return v8;
}

BOOL sub_1000A0624(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100140B38);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v6 = __chkstk_darwin(v5);
  double v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  unint64_t v11 = *(void *)(a1 + 48);
  if (!v11)
  {
    sub_1000A47F0(a1, (uint64_t)&v18 - v9, type metadata accessor for AccessPointHighlight);
    goto LABEL_8;
  }
  if ((v11 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(v11) & 0xF;
  }
  else {
    uint64_t v12 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFLL;
  }
  sub_1000A47F0(a1, (uint64_t)&v18 - v9, type metadata accessor for AccessPointHighlight);
  if (!v12)
  {
LABEL_8:
    unint64_t v13 = *((void *)v10 + 8);
    if (v13)
    {
      if ((v13 & 0x2000000000000000) != 0) {
        uint64_t v14 = HIBYTE(v13) & 0xF;
      }
      else {
        uint64_t v14 = *((void *)v10 + 7) & 0xFFFFFFFFFFFFLL;
      }
      sub_1000A33F0((uint64_t)v10, type metadata accessor for AccessPointHighlight);
      sub_1000A47F0(a1, (uint64_t)v8, type metadata accessor for AccessPointHighlight);
      if (v14) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1000A33F0((uint64_t)v10, type metadata accessor for AccessPointHighlight);
      sub_1000A47F0(a1, (uint64_t)v8, type metadata accessor for AccessPointHighlight);
    }
    sub_1000170C8((uint64_t)&v8[*(int *)(v5 + 32)], (uint64_t)v4, &qword_100140B38);
    sub_1000A33F0((uint64_t)v8, type metadata accessor for AccessPointHighlight);
    uint64_t v16 = type metadata accessor for AccessPointIconType(0);
    BOOL v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v4, 1, v16) == 1;
    sub_100017388((uint64_t)v4, &qword_100140B38);
    return v15;
  }
  sub_1000A33F0((uint64_t)v10, type metadata accessor for AccessPointHighlight);
  sub_1000A47F0(a1, (uint64_t)v8, type metadata accessor for AccessPointHighlight);
LABEL_13:
  sub_1000A33F0((uint64_t)v8, type metadata accessor for AccessPointHighlight);
  return 0;
}

uint64_t sub_1000A08F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v82 = a2;
  uint64_t v5 = type metadata accessor for AccessPointHighlightComponent(0);
  uint64_t v73 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v74 = v6;
  uint64_t v75 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for LocalCoordinateSpace();
  __chkstk_darwin(v72);
  long long v71 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DragGesture();
  uint64_t v78 = *(void *)(v8 - 8);
  uint64_t v79 = v8;
  __chkstk_darwin(v8);
  uint64_t v76 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100005B18(&qword_1001437E8);
  uint64_t v80 = *(void *)(v10 - 8);
  uint64_t v81 = v10;
  __chkstk_darwin(v10);
  uint64_t v77 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100005B18(&qword_1001413D8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  BOOL v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v64 = (char *)&v64 - v16;
  uint64_t v66 = type metadata accessor for UnevenRoundedRectangle();
  __chkstk_darwin(v66);
  uint64_t v18 = (char **)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_100005B18(&qword_1001437F0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100005B18(&qword_100141208);
  uint64_t v23 = v22 - 8;
  __chkstk_darwin(v22);
  size_t v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100005B18(&qword_100141210);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100005B18(&qword_1001437F8);
  __chkstk_darwin(v69);
  unint64_t v65 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100005B18(&qword_100143800);
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v21 = static VerticalAlignment.center.getter();
  *((void *)v21 + 1) = 0;
  v21[16] = 0;
  uint64_t v31 = sub_100005B18(&qword_100143808);
  sub_1000A12AC(a1, v2, (uint64_t)&v21[*(int *)(v31 + 44)]);
  static UnitPoint.center.getter();
  uint64_t v32 = static AnyTransition.scale(scale:anchor:)();
  sub_1000170C8((uint64_t)v21, (uint64_t)v25, &qword_1001437F0);
  uint64_t v33 = *(int *)(v23 + 44);
  uint64_t v34 = (uint64_t)v64;
  *(void *)&v25[v33] = v32;
  sub_100017388((uint64_t)v21, &qword_1001437F0);
  uint64_t v35 = sub_1000A01D8((uint64_t)a1);
  LOBYTE(v21) = v36 & 1;
  uint64_t v37 = static Alignment.leading.getter();
  sub_10002AC78(0.0, 1, 0.0, 1, *(double *)&v35, (char)v21, 0.0, 1, (uint64_t)v28, 0.0, 1, 0.0, 1, v37, v38);
  sub_100017388((uint64_t)v25, &qword_100141208);
  sub_1000A47F0((uint64_t)a1, v34, type metadata accessor for AccessPointHighlight);
  uint64_t v39 = type metadata accessor for AccessPointHighlight(0);
  uint64_t v40 = *(void *)(v39 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v34, 0, 1, v39);
  sub_1000170C8(v34, (uint64_t)v15, &qword_1001413D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v15, 1, v39) == 1) {
    sub_100017388((uint64_t)v15, &qword_1001413D8);
  }
  else {
    sub_1000A33F0((uint64_t)v15, type metadata accessor for AccessPointHighlight);
  }
  RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_100017388(v34, &qword_1001413D8);
  uint64_t v49 = (char *)v18 + *(int *)(v66 + 20);
  uint64_t v50 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v51 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 104))(v49, v50, v51);
  *uint64_t v18 = v42;
  v18[1] = v44;
  void v18[2] = v46;
  void v18[3] = v48;
  uint64_t v52 = (uint64_t)v65;
  uint64_t v53 = (uint64_t)&v65[*(int *)(v69 + 36)];
  sub_1000A47F0((uint64_t)v18, v53, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  *(unsigned char *)(v53 + *(int *)(sub_100005B18(&qword_100142088) + 36)) = 0;
  sub_1000170C8((uint64_t)v28, v52, &qword_100141210);
  sub_1000A33F0((uint64_t)v18, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  sub_100017388((uint64_t)v28, &qword_100141210);
  static CoordinateSpaceProtocol<>.local.getter();
  uint64_t v54 = v76;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  uint64_t v55 = v3;
  uint64_t v56 = v75;
  sub_1000A47F0(v55, v75, type metadata accessor for AccessPointHighlightComponent);
  unint64_t v57 = (*(unsigned __int8 *)(v73 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  uint64_t v58 = swift_allocObject();
  sub_1000A4D7C(v56, v58 + v57, type metadata accessor for AccessPointHighlightComponent);
  sub_1000A33A8(&qword_100143810, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_1000A33A8(&qword_100143818, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  uint64_t v59 = v77;
  uint64_t v60 = v79;
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v60);
  static GestureMask.all.getter();
  sub_1000A49E0();
  sub_10001758C(&qword_100143840, &qword_1001437E8);
  long long v61 = v67;
  uint64_t v62 = v81;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v62);
  sub_100017388(v52, &qword_1001437F8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(v82, v61, v70);
}

uint64_t sub_1000A12AC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v165 = a2;
  v186 = a1;
  uint64_t v179 = a3;
  uint64_t v147 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v147);
  uint64_t v146 = (double *)((char *)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v170 = sub_100005B18(&qword_100143848);
  uint64_t v169 = *(void *)(v170 - 8);
  uint64_t v4 = __chkstk_darwin(v170);
  uint64_t v154 = (uint64_t)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v153 = (uint64_t)&v144 - v6;
  uint64_t v7 = sub_100005B18(&qword_100143850);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v181 = (uint64_t)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v171 = (uint64_t)&v144 - v10;
  uint64_t v166 = type metadata accessor for DynamicTypeSize();
  uint64_t v183 = *(void *)(v166 - 8);
  uint64_t v11 = __chkstk_darwin(v166);
  uint64_t v160 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v157 = (uint64_t)&v144 - v13;
  uint64_t v14 = sub_100005B18(&qword_100143858);
  __chkstk_darwin(v14 - 8);
  int v156 = (uint64_t *)((char *)&v144 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v155 = sub_100005B18(&qword_100143860);
  __chkstk_darwin(v155);
  uint64_t v182 = (uint64_t)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = sub_100005B18(&qword_100143868);
  uint64_t v176 = *(void *)(v188 - 8);
  uint64_t v17 = __chkstk_darwin(v188);
  uint64_t v159 = (uint64_t)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v158 = (uint64_t)&v144 - v19;
  uint64_t v20 = type metadata accessor for AccessPointHighlight(0);
  __chkstk_darwin(v20);
  uint64_t v164 = (uint64_t)&v144 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100005B18(&qword_100143870);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v180 = (uint64_t)&v144 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v184 = (char *)&v144 - v25;
  uint64_t v26 = (int *)type metadata accessor for APHighlightIcon(0);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (uint64_t *)((char *)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v27);
  uint64_t v163 = (uint64_t)&v144 - v30;
  uint64_t v168 = sub_100005B18(&qword_100143878);
  uint64_t v31 = __chkstk_darwin(v168);
  uint64_t v152 = (uint64_t)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  uint64_t v149 = (uint64_t)&v144 - v33;
  uint64_t v162 = sub_100005B18(&qword_100143880);
  uint64_t v34 = __chkstk_darwin(v162);
  uint64_t v148 = (uint64_t)&v144 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v150 = (uint64_t)&v144 - v36;
  uint64_t v161 = sub_100005B18(&qword_100143888);
  __chkstk_darwin(v161);
  uint64_t v38 = (char *)&v144 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100005B18(&qword_100140B38);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  uint64_t v175 = (uint64_t)&v144 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v144 - v42;
  uint64_t v44 = type metadata accessor for AccessPointIconType(0);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v167 = (uint64_t)&v144 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v144 - v49;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v144 - v51;
  uint64_t v53 = sub_100005B18(&qword_100143890);
  uint64_t v54 = __chkstk_darwin(v53 - 8);
  uint64_t v178 = (uint64_t)&v144 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v189 = (uint64_t)&v144 - v56;
  uint64_t v185 = v20;
  uint64_t v57 = *(int *)(v20 + 28);
  uint64_t v58 = v186;
  sub_1000170C8((uint64_t)v186 + v57, (uint64_t)v43, &qword_100140B38);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  uint64_t v174 = v44;
  uint64_t v173 = v45 + 48;
  int v60 = v59(v43, 1, v44);
  v187 = v50;
  uint64_t v177 = v29;
  uint64_t v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59;
  if (v60 == 1)
  {
    long long v61 = v26;
    sub_100017388((uint64_t)v43, &qword_100140B38);
    uint64_t v62 = static Color.primary.getter();
    sub_1000A0440();
    sub_1000A0440();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v63 = v191;
    char v64 = BYTE8(v191);
    uint64_t v65 = v192;
    char v66 = BYTE8(v192);
    *(void *)uint64_t v38 = v62;
    *((_WORD *)v38 + 4) = 256;
    *((void *)v38 + 2) = v63;
    v38[24] = v64;
    *((void *)v38 + 4) = v65;
    v38[40] = v66;
    *((_OWORD *)v38 + 3) = v193;
    swift_storeEnumTagMultiPayload();
    sub_100005B18(&qword_100143898);
    sub_1000A4B90();
    sub_1000A4CDC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v67 = v185;
    uint64_t v68 = v188;
    uint64_t v69 = v166;
    uint64_t v70 = (uint64_t)v184;
  }
  else
  {
    uint64_t v145 = v52;
    sub_1000A4D7C((uint64_t)v43, (uint64_t)v52, type metadata accessor for AccessPointIconType);
    sub_1000A47F0((uint64_t)v52, (uint64_t)v50, type metadata accessor for AccessPointIconType);
    uint64_t v71 = static AnyTransition.opacity.getter();
    BOOL v72 = sub_1000A0624((uint64_t)v58);
    *uint64_t v29 = swift_getKeyPath();
    sub_100005B18(&qword_100140FF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v73 = (char *)v29 + v26[5];
    LOBYTE(v201) = 0;
    State.init(wrappedValue:)();
    uint64_t v74 = *((void *)&v194 + 1);
    *uint64_t v73 = v194;
    *((void *)v73 + 1) = v74;
    uint64_t v70 = (uint64_t)v184;
    sub_1000A4D7C((uint64_t)v50, (uint64_t)v29 + v26[6], type metadata accessor for AccessPointIconType);
    *(uint64_t *)((char *)v29 + v26[7]) = v71;
    *((unsigned char *)v29 + v26[8]) = 1;
    long long v61 = v26;
    *((unsigned char *)v29 + v26[9]) = !v72;
    uint64_t v75 = v163;
    sub_1000A4D7C((uint64_t)v29, v163, type metadata accessor for APHighlightIcon);
    sub_1000A0440();
    sub_1000A0440();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v76 = v149;
    sub_1000A47F0(v75, v149, type metadata accessor for APHighlightIcon);
    uint64_t v77 = (_OWORD *)(v76 + *(int *)(v168 + 36));
    long long v78 = v192;
    *uint64_t v77 = v191;
    v77[1] = v78;
    v77[2] = v193;
    sub_1000A33F0(v75, type metadata accessor for APHighlightIcon);
    uint64_t v79 = v148;
    sub_1000170C8(v76, v148, &qword_100143878);
    *(_WORD *)(v79 + *(int *)(v162 + 36)) = 256;
    sub_100017388(v76, &qword_100143878);
    uint64_t v80 = v150;
    sub_100024A74(v79, v150, &qword_100143880);
    sub_1000170C8(v80, (uint64_t)v38, &qword_100143880);
    swift_storeEnumTagMultiPayload();
    sub_100005B18(&qword_100143898);
    sub_1000A4B90();
    sub_1000A4CDC();
    _ConditionalContent<>.init(storage:)();
    sub_100017388(v80, &qword_100143880);
    sub_1000A33F0((uint64_t)v145, type metadata accessor for AccessPointIconType);
    uint64_t v58 = v186;
    uint64_t v67 = v185;
    uint64_t v68 = v188;
    uint64_t v69 = v166;
  }
  uint64_t v81 = v164;
  unint64_t v82 = v58[6];
  uint64_t v151 = v61;
  if (!v82)
  {
    sub_1000A47F0((uint64_t)v58, v164, type metadata accessor for AccessPointHighlight);
    uint64_t v84 = (uint64_t)v187;
    goto LABEL_11;
  }
  if ((v82 & 0x2000000000000000) != 0) {
    uint64_t v83 = HIBYTE(v82) & 0xF;
  }
  else {
    uint64_t v83 = v58[5] & 0xFFFFFFFFFFFFLL;
  }
  sub_1000A47F0((uint64_t)v58, v164, type metadata accessor for AccessPointHighlight);
  uint64_t v84 = (uint64_t)v187;
  if (!v83)
  {
LABEL_11:
    unint64_t v86 = *(void *)(v81 + 64);
    uint64_t v85 = v177;
    if (v86)
    {
      if ((v86 & 0x2000000000000000) != 0) {
        uint64_t v87 = HIBYTE(v86) & 0xF;
      }
      else {
        uint64_t v87 = *(void *)(v81 + 56) & 0xFFFFFFFFFFFFLL;
      }
      sub_1000A33F0(v81, type metadata accessor for AccessPointHighlight);
      if (v87) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_1000A33F0(v81, type metadata accessor for AccessPointHighlight);
    }
    uint64_t v98 = 1;
    goto LABEL_25;
  }
  sub_1000A33F0(v81, type metadata accessor for AccessPointHighlight);
  uint64_t v85 = v177;
LABEL_16:
  uint64_t v88 = static HorizontalAlignment.leading.getter();
  uint64_t v89 = (uint64_t)v156;
  *int v156 = v88;
  *(void *)(v89 + 8) = 0;
  *(unsigned char *)(v89 + 16) = 0;
  uint64_t v90 = sub_100005B18(&qword_1001438F0);
  sub_1000A28BC(v58, v89 + *(int *)(v90 + 44));
  char v91 = static Edge.Set.all.getter();
  uint64_t v92 = v182;
  sub_1000170C8(v89, v182, &qword_100143858);
  uint64_t v93 = v92 + *(int *)(v155 + 36);
  *(unsigned char *)uint64_t v93 = v91;
  *(_OWORD *)(v93 + 8) = xmmword_100110CF0;
  *(_OWORD *)(v93 + 24) = xmmword_100110D00;
  *(unsigned char *)(v93 + 40) = 0;
  sub_100017388(v89, &qword_100143858);
  type metadata accessor for AccessPointHighlightComponent(0);
  uint64_t v94 = v157;
  sub_100035290(v157);
  uint64_t v95 = v183;
  long long v96 = v160;
  (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v160, v94, v69);
  int v97 = (*(uint64_t (**)(char *, uint64_t))(v95 + 88))(v96, v69);
  if (v97 == enum case for DynamicTypeSize.xLarge(_:))
  {
    uint64_t v68 = v188;
  }
  else
  {
    uint64_t v68 = v188;
    if (v97 != enum case for DynamicTypeSize.xxLarge(_:) && v97 != enum case for DynamicTypeSize.xxxLarge(_:))
    {
      DynamicTypeSize.isAccessibilitySize.getter();
      uint64_t v68 = v188;
      (*(void (**)(char *, uint64_t))(v183 + 8))(v160, v69);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v94, v69);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v99 = v182;
  uint64_t v100 = v159;
  sub_1000170C8(v182, v159, &qword_100143860);
  long long v101 = (_OWORD *)(v100 + *(int *)(v68 + 36));
  long long v102 = v199;
  long long v103 = v200;
  v101[4] = v198;
  v101[5] = v102;
  v101[6] = v103;
  long long v104 = v195;
  *long long v101 = v194;
  v101[1] = v104;
  long long v105 = v197;
  v101[2] = v196;
  v101[3] = v105;
  sub_100017388(v99, &qword_100143860);
  uint64_t v106 = v158;
  sub_100024A74(v100, v158, &qword_100143868);
  sub_100024A74(v106, v70, &qword_100143868);
  uint64_t v98 = 0;
  uint64_t v84 = (uint64_t)v187;
LABEL_25:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56))(v70, v98, 1, v68);
  int v107 = sub_10009FF40((uint64_t)v58);
  uint64_t v108 = v175;
  sub_1000170C8((uint64_t)v58 + *(int *)(v67 + 32), v175, &qword_100140B38);
  int v109 = v172(v108, 1, v174);
  LODWORD(v188) = v107;
  if (v109 == 1)
  {
    sub_100017388(v108, &qword_100140B38);
    uint64_t v110 = 1;
    uint64_t v111 = v170;
    uint64_t v112 = v169;
    uint64_t v113 = v171;
  }
  else
  {
    uint64_t v114 = v108;
    uint64_t v115 = v167;
    sub_1000A4D7C(v114, v167, type metadata accessor for AccessPointIconType);
    sub_1000A47F0(v115, v84, type metadata accessor for AccessPointIconType);
    static UnitPoint.center.getter();
    long long v116 = v58;
    uint64_t v117 = static AnyTransition.scale(scale:anchor:)();
    uint64_t *v85 = swift_getKeyPath();
    sub_100005B18(&qword_100140FF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v118 = v151;
    uint64_t v119 = (char *)v85 + v151[5];
    char v190 = 0;
    State.init(wrappedValue:)();
    uint64_t v120 = *((void *)&v201 + 1);
    *uint64_t v119 = v201;
    *((void *)v119 + 1) = v120;
    sub_1000A4D7C(v84, (uint64_t)v85 + v118[6], type metadata accessor for AccessPointIconType);
    *(uint64_t *)((char *)v85 + v118[7]) = v117;
    *((unsigned char *)v85 + v118[8]) = 0;
    *((unsigned char *)v85 + v118[9]) = 1;
    uint64_t v121 = v163;
    sub_1000A4D7C((uint64_t)v85, v163, type metadata accessor for APHighlightIcon);
    sub_1000A0440();
    sub_1000A0440();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v122 = v152;
    sub_1000A47F0(v121, v152, type metadata accessor for APHighlightIcon);
    uint64_t v123 = (_OWORD *)(v122 + *(int *)(v168 + 36));
    long long v124 = v202;
    _OWORD *v123 = v201;
    v123[1] = v124;
    v123[2] = v203;
    sub_1000A33F0(v121, type metadata accessor for APHighlightIcon);
    if (*((unsigned char *)v116 + *(int *)(v185 + 48)))
    {
      double v125 = sub_1000A0440() * 0.24;
      long long v126 = v146;
      uint64_t v127 = (char *)v146 + *(int *)(v147 + 20);
      uint64_t v128 = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v129 = type metadata accessor for RoundedCornerStyle();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v129 - 8) + 104))(v127, v128, v129);
      *long long v126 = v125;
      v126[1] = v125;
      sub_1000A33A8(&qword_1001438E8, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    }
    else
    {
      sub_1000148D8();
    }
    uint64_t v130 = AnyShape.init<A>(_:)();
    uint64_t v111 = v170;
    uint64_t v131 = v154;
    sub_1000170C8(v122, v154, &qword_100143878);
    uint64_t v132 = v131 + *(int *)(v111 + 36);
    *(void *)uint64_t v132 = v130;
    *(_WORD *)(v132 + 8) = 256;
    sub_100017388(v122, &qword_100143878);
    sub_1000A33F0(v167, type metadata accessor for AccessPointIconType);
    uint64_t v133 = v153;
    sub_100024A74(v131, v153, &qword_100143848);
    uint64_t v134 = v133;
    uint64_t v113 = v171;
    sub_100024A74(v134, v171, &qword_100143848);
    uint64_t v110 = 0;
    uint64_t v112 = v169;
    uint64_t v70 = (uint64_t)v184;
  }
  uint64_t v135 = v189;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v113, v110, 1, v111);
  uint64_t v136 = v178;
  sub_1000170C8(v135, v178, &qword_100143890);
  uint64_t v137 = v180;
  sub_1000170C8(v70, v180, &qword_100143870);
  uint64_t v138 = v181;
  sub_1000170C8(v113, v181, &qword_100143850);
  uint64_t v139 = v70;
  uint64_t v140 = v179;
  sub_1000170C8(v136, v179, &qword_100143890);
  long long v141 = (int *)sub_100005B18(&qword_1001438E0);
  sub_1000170C8(v137, v140 + v141[12], &qword_100143870);
  uint64_t v142 = v140 + v141[16];
  *(void *)uint64_t v142 = 0;
  *(unsigned char *)(v142 + 8) = 0;
  *(unsigned char *)(v142 + 9) = (v188 & 1) == 0;
  sub_1000170C8(v138, v140 + v141[20], &qword_100143850);
  sub_100017388(v113, &qword_100143850);
  sub_100017388(v139, &qword_100143870);
  sub_100017388(v189, &qword_100143890);
  sub_100017388(v138, &qword_100143850);
  sub_100017388(v137, &qword_100143870);
  return sub_100017388(v136, &qword_100143890);
}

uint64_t sub_1000A28BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v3 = (int *)type metadata accessor for APHighlightSubtitle(0);
  uint64_t v4 = (unsigned char *)*((void *)v3 - 1);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t *)&v67[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v75 = &v67[-v8];
  __chkstk_darwin(v7);
  uint64_t v74 = &v67[-v9];
  uint64_t v10 = sub_100005B18(&qword_1001438F8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = &v67[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v67[-v14];
  uint64_t v16 = (int *)type metadata accessor for APHighlightTitle(0);
  uint64_t v17 = *((void *)v16 - 1);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (uint64_t *)&v67[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v73 = &v67[-v22];
  __chkstk_darwin(v21);
  BOOL v72 = &v67[-v23];
  uint64_t v24 = sub_100005B18(&qword_100143900);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = &v67[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  unint64_t v29 = a1[6];
  uint64_t v79 = &v67[-v28];
  if (!v29) {
    goto LABEL_6;
  }
  uint64_t v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0) {
    uint64_t v30 = a1[5] & 0xFFFFFFFFFFFFLL;
  }
  if (v30)
  {
    uint64_t v69 = a1[5];
    int v31 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for AccessPointHighlight(0) + 40));
    int v68 = (v31 == 2) | v31;
    *uint64_t v20 = swift_getKeyPath();
    sub_100005B18(&qword_100140FF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = v16[5];
    uint64_t v77 = v27;
    uint64_t v33 = (char *)v20 + v32;
    type metadata accessor for AccessPointModel(0);
    uint64_t v71 = v15;
    sub_1000A33A8(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    uint64_t v70 = a1;
    swift_bridgeObjectRetain();
    uint64_t v15 = v71;
    *(void *)uint64_t v33 = Environment.init<A>(_:)();
    v33[8] = v34 & 1;
    uint64_t v27 = v77;
    uint64_t v35 = (char *)v20 + v16[6];
    char v80 = 0;
    State.init(wrappedValue:)();
    uint64_t v36 = v82;
    *uint64_t v35 = v81;
    *((void *)v35 + 1) = v36;
    a1 = v70;
    uint64_t v37 = (uint64_t *)((char *)v20 + v16[7]);
    *uint64_t v37 = v69;
    v37[1] = v29;
    *((unsigned char *)v20 + v16[8]) = v68 & 1;
    uint64_t v38 = (uint64_t)v20;
    uint64_t v39 = v73;
    sub_1000A4D7C(v38, (uint64_t)v73, type metadata accessor for APHighlightTitle);
    uint64_t v40 = (uint64_t)v39;
    uint64_t v41 = v72;
    sub_1000A4D7C(v40, (uint64_t)v72, type metadata accessor for APHighlightTitle);
    uint64_t v42 = (uint64_t)v41;
    uint64_t v43 = v79;
    sub_1000A4D7C(v42, (uint64_t)v79, type metadata accessor for APHighlightTitle);
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v17 + 56))(v43, 0, 1, v16);
  }
  else
  {
LABEL_6:
    (*(void (**)(unsigned char *, uint64_t, uint64_t, int *))(v17 + 56))(&v67[-v28], 1, 1, v16);
  }
  unint64_t v44 = a1[8];
  if (!v44) {
    goto LABEL_12;
  }
  uint64_t v45 = a1;
  uint64_t v46 = a1[7];
  uint64_t v47 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0) {
    uint64_t v47 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v47)
  {
    int v48 = *((unsigned __int8 *)v45 + *(int *)(type metadata accessor for AccessPointHighlight(0) + 40));
    uint64_t v73 = v4;
    uint64_t v49 = v13;
    char v50 = (v48 == 2) | v48;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v77 = v27;
    uint64_t v52 = v76;
    *uint64_t v76 = KeyPath;
    sub_100005B18(&qword_100140FF0);
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (char *)v52 + v3[5];
    type metadata accessor for AccessPointModel(0);
    sub_1000A33A8(&qword_100141D08, (void (*)(uint64_t))type metadata accessor for AccessPointModel);
    swift_bridgeObjectRetain();
    *(void *)uint64_t v53 = Environment.init<A>(_:)();
    v53[8] = v54 & 1;
    uint64_t v55 = (char *)v52 + v3[6];
    char v80 = 0;
    State.init(wrappedValue:)();
    uint64_t v56 = v82;
    *uint64_t v55 = v81;
    *((void *)v55 + 1) = v56;
    uint64_t v57 = (uint64_t *)((char *)v52 + v3[7]);
    *uint64_t v57 = v46;
    v57[1] = v44;
    LOBYTE(v56) = v50 & 1;
    uint64_t v13 = v49;
    uint64_t v4 = v73;
    *((unsigned char *)v52 + v3[8]) = v56;
    uint64_t v58 = (uint64_t)v52;
    uint64_t v27 = v77;
    uint64_t v59 = v75;
    sub_1000A4D7C(v58, (uint64_t)v75, type metadata accessor for APHighlightSubtitle);
    uint64_t v60 = (uint64_t)v59;
    long long v61 = v74;
    sub_1000A4D7C(v60, (uint64_t)v74, type metadata accessor for APHighlightSubtitle);
    sub_1000A4D7C((uint64_t)v61, (uint64_t)v15, type metadata accessor for APHighlightSubtitle);
    uint64_t v62 = 0;
  }
  else
  {
LABEL_12:
    uint64_t v62 = 1;
  }
  (*((void (**)(unsigned char *, uint64_t, uint64_t, int *))v4 + 7))(v15, v62, 1, v3);
  uint64_t v63 = v79;
  sub_1000170C8((uint64_t)v79, (uint64_t)v27, &qword_100143900);
  sub_1000170C8((uint64_t)v15, (uint64_t)v13, &qword_1001438F8);
  uint64_t v64 = v78;
  sub_1000170C8((uint64_t)v27, v78, &qword_100143900);
  uint64_t v65 = sub_100005B18(&qword_100143908);
  sub_1000170C8((uint64_t)v13, v64 + *(int *)(v65 + 48), &qword_1001438F8);
  sub_100017388((uint64_t)v15, &qword_1001438F8);
  sub_100017388((uint64_t)v63, &qword_100143900);
  sub_100017388((uint64_t)v13, &qword_1001438F8);
  return sub_100017388((uint64_t)v27, &qword_100143900);
}

uint64_t sub_1000A2F8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = DragGesture.Value.translation.getter();
  if (v4 < -20.0)
  {
    char v5 = *(unsigned char *)(a2 + 8);
    uint64_t v6 = swift_retain();
    sub_10003556C(v6, v5);
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_1000A33A8(&qword_1001420C0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent.GestureHandler);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A30D4()
{
  uint64_t v1 = __chkstk_darwin(v0);
  sub_1000A47F0(v1, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AccessPointHighlightComponent);
  sub_1000A33A8(&qword_1001437B0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent);
  return _ComponentBody.init(_:)();
}

double sub_1000A31AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = DynamicTypeSize.isAccessibilitySize.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v7 == enum case for DynamicTypeSize.xLarge(_:))
  {
    double v8 = 43.0;
  }
  else if (v7 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    double v8 = 45.0;
  }
  else if (v7 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    double v8 = 48.0;
  }
  else
  {
    if (DynamicTypeSize.isAccessibilitySize.getter()) {
      double v8 = 50.0;
    }
    else {
      double v8 = 40.0;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  double v9 = 12.0;
  if (v6) {
    double v9 = 14.0;
  }
  return v9 + v8;
}

unint64_t sub_1000A3354()
{
  unint64_t result = qword_1001436F0;
  if (!qword_1001436F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001436F0);
  }
  return result;
}

uint64_t sub_1000A33A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A33F0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A3450(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(&qword_100140208);
    sub_10001758C(a2, &qword_100140220);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessPointHighlight.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessPointHighlight.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A3634);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessPointHighlight.CodingKeys()
{
  return &type metadata for AccessPointHighlight.CodingKeys;
}

void *sub_1000A366C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    char v5 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (void *)(a1 + v6);
    int v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain();
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *BOOL v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t sub_1000A3794(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1000A384C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)(a1 + v5);
  BOOL v7 = (void *)(a2 + v5);
  swift_retain();
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000A391C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_100017388(a1 + v7, &qword_100140FF0);
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000A3A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)(a1 + v4);
  char v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000A3AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_100017388(a1 + v7, &qword_100140FF0);
    uint64_t v10 = sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000A3BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A3C0C);
}

uint64_t sub_1000A3C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100005B18(&qword_100141BE0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A3CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A3CCC);
}

uint64_t sub_1000A3CCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = sub_100005B18(&qword_100141BE0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessPointHighlightComponent(uint64_t a1)
{
  return sub_100017090(a1, qword_100143778);
}

void sub_1000A3D94()
{
  sub_1000A3E5C(319, (unint64_t *)&unk_100141C50, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000A3E5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1000A3EC0()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000A3F44()
{
  unint64_t result = qword_1001437B8;
  if (!qword_1001437B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001437B8);
  }
  return result;
}

uint64_t sub_1000A3F98()
{
  return sub_1000A33A8(&qword_1001437C0, (void (*)(uint64_t))type metadata accessor for AccessPointHighlightComponent);
}

uint64_t sub_1000A3FE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A3FFC()
{
  return sub_1000A33A8(&qword_1001437C8, (void (*)(uint64_t))type metadata accessor for AccessPointHighlight);
}

uint64_t sub_1000A4044()
{
  return sub_1000A33A8(&qword_1001437D0, (void (*)(uint64_t))&type metadata accessor for _ComponentBodyButtonStyle);
}

unint64_t sub_1000A4090()
{
  unint64_t result = qword_1001437D8;
  if (!qword_1001437D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001437D8);
  }
  return result;
}

unint64_t sub_1000A40E8()
{
  unint64_t result = qword_1001437E0;
  if (!qword_1001437E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001437E0);
  }
  return result;
}

uint64_t sub_1000A4144(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49676E696461656CLL && a2 == 0xEB000000006E6F63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E696C69617274 && a2 == 0xEC0000006E6F6349 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E41646C756F6873 && a2 == 0xED00006574616D69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6953646C756F6873 && a2 == 0xEF7469466F54657ALL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000FD7C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6575676573 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7274654D65676170 && a2 == 0xEB00000000736369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000FC500 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x646E7542656D6167 && a2 == 0xEC0000006449656CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x65646E496D657469 && a2 == 0xE900000000000078 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E6564496D657469 && a2 == 0xEE00726569666974)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t sub_1000A47F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A4858()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessPointHighlightComponent(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = v0 + v3 + v1[7];
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000A4970(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessPointHighlightComponent(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000A2F8C(a1, v4);
}

unint64_t sub_1000A49E0()
{
  unint64_t result = qword_100143820;
  if (!qword_100143820)
  {
    sub_10000B448(&qword_1001437F8);
    sub_1000A6E94(&qword_100143828, &qword_100141210, (void (*)(void))sub_1000A4AAC);
    sub_10001758C(&qword_1001420A8, &qword_100142088);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143820);
  }
  return result;
}

unint64_t sub_1000A4AAC()
{
  unint64_t result = qword_100143830;
  if (!qword_100143830)
  {
    sub_10000B448(&qword_100141208);
    sub_10001758C(&qword_100143838, &qword_1001437F0);
    sub_10001758C(&qword_100142148, &qword_100142150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143830);
  }
  return result;
}

uint64_t type metadata accessor for APHighlightIcon(uint64_t a1)
{
  return sub_100017090(a1, qword_100143AA8);
}

unint64_t sub_1000A4B90()
{
  unint64_t result = qword_1001438A0;
  if (!qword_1001438A0)
  {
    sub_10000B448(&qword_100143880);
    sub_1000A4C30();
    sub_10001758C(&qword_1001438B8, &qword_1001438C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001438A0);
  }
  return result;
}

unint64_t sub_1000A4C30()
{
  unint64_t result = qword_1001438A8;
  if (!qword_1001438A8)
  {
    sub_10000B448(&qword_100143878);
    sub_1000A33A8(&qword_1001438B0, (void (*)(uint64_t))type metadata accessor for APHighlightIcon);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001438A8);
  }
  return result;
}

unint64_t sub_1000A4CDC()
{
  unint64_t result = qword_1001438C8;
  if (!qword_1001438C8)
  {
    sub_10000B448(&qword_100143898);
    sub_10001758C(&qword_1001438D0, &qword_1001438D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001438C8);
  }
  return result;
}

uint64_t sub_1000A4D7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for APHighlightSubtitle(uint64_t a1)
{
  return sub_100017090(a1, qword_100143968);
}

uint64_t type metadata accessor for APHighlightTitle(uint64_t a1)
{
  return sub_100017090(a1, qword_100143A08);
}

uint64_t sub_1000A4E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A4E58);
}

uint64_t sub_1000A4E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A4E70);
}

void *sub_1000A4E78(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    uint64_t v13 = *(void *)v12;
    LOBYTE(v12) = v12[8];
    *(void *)uint64_t v11 = v13;
    v11[8] = (char)v12;
    uint64_t v14 = (char *)a1 + v10;
    uint64_t v15 = (char *)a2 + v10;
    *uint64_t v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000A4FEC(uint64_t a1)
{
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_1000A50AC(void *a1, void *a2, int *a3)
{
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  uint64_t v12 = (char *)a1 + v8;
  uint64_t v13 = (char *)a2 + v8;
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000A51D0(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_100017388((uint64_t)a1, &qword_100140FF0);
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v9) = v9[8];
  *(void *)uint64_t v8 = v10;
  v8[8] = (char)v9;
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

char *sub_1000A5338(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v12 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v12] = a2[v12];
  return a1;
}

char *sub_1000A5438(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_100017388((uint64_t)a1, &qword_100140FF0);
    uint64_t v6 = sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  swift_release();
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *uint64_t v13 = *v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_release();
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_1000A5588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A559C);
}

uint64_t sub_1000A55A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100141BE0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000A5668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A567C);
}

uint64_t sub_1000A5680(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100005B18(&qword_100141BE0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

void sub_1000A5744()
{
  sub_1000A3E5C(319, (unint64_t *)&unk_100141C50, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_1000A5828(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *uint64_t v11 = *v12;
    *((void *)v11 + 1) = *((void *)v12 + 1);
    uint64_t v13 = (void *)((char *)a1 + v10);
    uint64_t v14 = (void *)((char *)a2 + v10);
    type metadata accessor for AccessPointIconType(0);
    swift_retain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v13 = *v14;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v16 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
        break;
      case 4u:
        uint64_t v17 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v17;
        v13[2] = v14[2];
        swift_bridgeObjectRetain();
        break;
      case 5u:
        unint64_t v18 = v14[1];
        if (v18 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
        }
        else
        {
          uint64_t v19 = *v14;
          sub_1000244CC(v19, v18);
          *uint64_t v13 = v19;
          v13[1] = v18;
        }
        break;
      default:
        uint64_t v15 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v15;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000A5AA4(uint64_t a1, uint64_t a2)
{
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_release();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  type metadata accessor for AccessPointIconType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 4u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v6 = type metadata accessor for MediaArtwork();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      break;
    case 5u:
      unint64_t v7 = v5[1];
      if (v7 >> 60 != 15) {
        sub_1000247CC(*v5, v7);
      }
      break;
    default:
      break;
  }

  return swift_release();
}

void *sub_1000A5C28(void *a1, void *a2, int *a3)
{
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v7;
  uint64_t v10 = (char *)a2 + v7;
  *uint64_t v9 = *v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  uint64_t v11 = (void *)((char *)a1 + v8);
  uint64_t v12 = (void *)((char *)a2 + v8);
  type metadata accessor for AccessPointIconType(0);
  swift_retain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *uint64_t v11 = *v12;
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v14 = type metadata accessor for MediaArtwork();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(v11, v12, v14);
      break;
    case 4u:
      uint64_t v15 = v12[1];
      *uint64_t v11 = *v12;
      v11[1] = v15;
      v11[2] = v12[2];
      swift_bridgeObjectRetain();
      break;
    case 5u:
      unint64_t v16 = v12[1];
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      }
      else
      {
        uint64_t v17 = *v12;
        sub_1000244CC(v17, v16);
        *uint64_t v11 = v17;
        v11[1] = v16;
      }
      break;
    default:
      uint64_t v13 = v12[1];
      *uint64_t v11 = *v12;
      v11[1] = v13;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  swift_retain();
  return a1;
}

void *sub_1000A5E58(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_100017388((uint64_t)a1, &qword_100140FF0);
    sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *v9;
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v10 = a3[6];
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    sub_1000A33F0((uint64_t)a1 + v10, type metadata accessor for AccessPointIconType);
    type metadata accessor for AccessPointIconType(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v11 = *v12;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v13 = type metadata accessor for MediaArtwork();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        break;
      case 4u:
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        v11[2] = v12[2];
        swift_bridgeObjectRetain();
        break;
      case 5u:
        unint64_t v14 = v12[1];
        if (v14 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        }
        else
        {
          uint64_t v15 = *v12;
          sub_1000244CC(v15, v14);
          *uint64_t v11 = v15;
          v11[1] = v14;
        }
        break;
      default:
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

char *sub_1000A60F0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for AccessPointIconType(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v12 = type metadata accessor for MediaArtwork();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  a1[v13] = a2[v13];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

char *sub_1000A6284(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_100017388((uint64_t)a1, &qword_100140FF0);
    uint64_t v6 = sub_100005B18(&qword_100140FF0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *uint64_t v9 = *v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v11 = a3[6];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    sub_1000A33F0((uint64_t)&a1[v11], type metadata accessor for AccessPointIconType);
    uint64_t v14 = type metadata accessor for AccessPointIconType(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v15 = type metadata accessor for MediaArtwork();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  uint64_t v16 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v16] = a2[v16];
  return a1;
}

uint64_t sub_1000A6478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A648C);
}

uint64_t sub_1000A648C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100005B18(&qword_100141BE0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for AccessPointIconType(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1000A65A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A65B8);
}

uint64_t sub_1000A65B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100005B18(&qword_100141BE0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for AccessPointIconType(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1000A66CC()
{
  sub_1000A3E5C(319, (unint64_t *)&unk_100141C50, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AccessPointIconType(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1000A67E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A6888()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A68A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A68C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A68DC()
{
  uint64_t v1 = type metadata accessor for APHighlightIcon(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 24));
  type metadata accessor for AccessPointIconType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 4u:
      swift_bridgeObjectRelease();
      break;
    case 3u:
      uint64_t v7 = type metadata accessor for MediaArtwork();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      break;
    case 5u:
      unint64_t v8 = v6[1];
      if (v8 >> 60 != 15) {
        sub_1000247CC(*v6, v8);
      }
      break;
    default:
      break;
  }
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000A6AE0()
{
  return sub_1000A75B4(type metadata accessor for APHighlightIcon, (uint64_t (*)(uint64_t))sub_10009CDA0);
}

unint64_t sub_1000A6B0C()
{
  unint64_t result = qword_100143B10;
  if (!qword_100143B10)
  {
    sub_10000B448(&qword_100143B00);
    sub_1000A6BAC();
    sub_10001758C(&qword_100142148, &qword_100142150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143B10);
  }
  return result;
}

unint64_t sub_1000A6BAC()
{
  unint64_t result = qword_100143B18;
  if (!qword_100143B18)
  {
    sub_10000B448(&qword_100143AF8);
    sub_1000A6C94(&qword_100143B20, &qword_100143B28, (void (*)(void))sub_1000A6C58, (void (*)(void))sub_1000A70D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143B18);
  }
  return result;
}

uint64_t sub_1000A6C58()
{
  return sub_1000A6C94(&qword_100143B30, &qword_100143B38, (void (*)(void))sub_1000A6D1C, (void (*)(void))sub_1000A6FD0);
}

uint64_t sub_1000A6C94(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A6D1C()
{
  unint64_t result = qword_100143B40;
  if (!qword_100143B40)
  {
    sub_10000B448(&qword_100143B48);
    sub_1000A6DC8();
    sub_1000A33A8(&qword_100143BA0, (void (*)(uint64_t))type metadata accessor for PlayerAvatarView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143B40);
  }
  return result;
}

unint64_t sub_1000A6DC8()
{
  unint64_t result = qword_100143B50;
  if (!qword_100143B50)
  {
    sub_10000B448(&qword_100143B58);
    sub_1000A6E94(&qword_100143B60, &qword_100143B68, (void (*)(void))sub_1000A6F10);
    sub_10001758C(&qword_100143B90, &qword_100143B98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143B50);
  }
  return result;
}

uint64_t sub_1000A6E94(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A6F10()
{
  unint64_t result = qword_100143B70;
  if (!qword_100143B70)
  {
    sub_10000B448(&qword_100143B78);
    sub_1000A7228(&qword_100143B80, &qword_100143B88);
    sub_10001758C(&qword_1001411C8, &qword_1001411D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143B70);
  }
  return result;
}

unint64_t sub_1000A6FD0()
{
  unint64_t result = qword_100143BA8;
  if (!qword_100143BA8)
  {
    sub_10000B448(&qword_100143BB0);
    sub_1000A707C();
    sub_1000A33A8((unint64_t *)&qword_100143BC0, (void (*)(uint64_t))&type metadata accessor for MediaArtwork);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143BA8);
  }
  return result;
}

unint64_t sub_1000A707C()
{
  unint64_t result = qword_100143BB8;
  if (!qword_100143BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143BB8);
  }
  return result;
}

unint64_t sub_1000A70D0()
{
  unint64_t result = qword_100143BC8;
  if (!qword_100143BC8)
  {
    sub_10000B448(&qword_100143BD0);
    sub_1000A71A0(&qword_100143BD8, &qword_100143BE0);
    sub_1000A71A0(&qword_100143BE8, &qword_100143BF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143BC8);
  }
  return result;
}

uint64_t sub_1000A71A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    sub_1000A7228(&qword_100143B80, &qword_100143B88);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A7228(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A7298(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000A72A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10) {
    return sub_1000A7298(a1, a2, a3, BYTE2(a3) & 1);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1000A72B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A72C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10) {
    return sub_1000A72B8(a1, a2, a3, BYTE2(a3) & 1);
  }
  else {
    return swift_release();
  }
}

uint64_t sub_1000A72D8()
{
  return sub_10009CE64();
}

uint64_t sub_1000A72F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A7328()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_1000A7360()
{
  return sub_1000A6E94(&qword_100143C58, &qword_100143C60, (void (*)(void))sub_1000A7390);
}

unint64_t sub_1000A7390()
{
  unint64_t result = qword_100143C68;
  if (!qword_100143C68)
  {
    sub_10000B448(&qword_100143C70);
    sub_1000A7430();
    sub_10001758C(&qword_1001411C8, &qword_1001411D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143C68);
  }
  return result;
}

unint64_t sub_1000A7430()
{
  unint64_t result = qword_100143C78;
  if (!qword_100143C78)
  {
    sub_10000B448(&qword_100143C80);
    sub_1000A74D0();
    sub_10001758C(&qword_100140C08, &qword_100140C10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143C78);
  }
  return result;
}

unint64_t sub_1000A74D0()
{
  unint64_t result = qword_100143C88;
  if (!qword_100143C88)
  {
    sub_10000B448(&qword_100143C90);
    sub_10001758C(&qword_100143C98, &qword_100143CA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143C88);
  }
  return result;
}

uint64_t sub_1000A7570()
{
  return sub_1000A7650(type metadata accessor for APHighlightSubtitle);
}

uint64_t sub_1000A7588()
{
  return sub_1000A75B4(type metadata accessor for APHighlightSubtitle, sub_10009AB2C);
}

uint64_t sub_1000A75B4(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_1000A7638()
{
  return sub_1000A7650(type metadata accessor for APHighlightSubtitle);
}

uint64_t sub_1000A7650(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(a1(0) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100005B18(&qword_100140FF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v1 + v4, v6);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v5, v3 | 7);
}

uint64_t sub_1000A7798(uint64_t a1, uint64_t a2)
{
  return sub_1000A7998(a1, a2, (void (*)(void))type metadata accessor for APHighlightSubtitle);
}

unint64_t sub_1000A77C4()
{
  unint64_t result = qword_100143CB0;
  if (!qword_100143CB0)
  {
    sub_10000B448(&qword_100143C30);
    sub_10000B448(&qword_100143C48);
    sub_1000A6E94(&qword_100143C50, &qword_100143C48, (void (*)(void))sub_1000A7360);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143CB0);
  }
  return result;
}

uint64_t sub_1000A78A8()
{
  return sub_10009A0E0(*(void *)(v0 + 16), type metadata accessor for APHighlightSubtitle);
}

uint64_t sub_1000A78DC()
{
  return sub_10009A0E0(*(void *)(v0 + 16), type metadata accessor for APHighlightSubtitle);
}

uint64_t sub_1000A7910()
{
  return sub_1000A7650(type metadata accessor for APHighlightTitle);
}

uint64_t sub_1000A7928()
{
  return sub_1000A75B4(type metadata accessor for APHighlightTitle, sub_10009A01C);
}

uint64_t sub_1000A7954()
{
  return sub_1000A7650(type metadata accessor for APHighlightTitle);
}

uint64_t sub_1000A796C(uint64_t a1, uint64_t a2)
{
  return sub_1000A7998(a1, a2, (void (*)(void))type metadata accessor for APHighlightTitle);
}

uint64_t sub_1000A7998(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_10009AC0C();
}

uint64_t sub_1000A7A18()
{
  return sub_1000A6E94(&qword_100143CE8, &qword_100143CC0, (void (*)(void))sub_1000A7A48);
}

uint64_t sub_1000A7A48()
{
  return sub_1000A6E94(&qword_100143CF0, &qword_100143CB8, (void (*)(void))sub_1000A7A78);
}

uint64_t sub_1000A7A78()
{
  return sub_1000A6E94(&qword_100143CF8, &qword_100143D00, (void (*)(void))sub_1000A7AA8);
}

unint64_t sub_1000A7AA8()
{
  unint64_t result = qword_100143D08;
  if (!qword_100143D08)
  {
    sub_10000B448(&qword_100143D10);
    sub_1000A7390();
    sub_10001758C(&qword_100142148, &qword_100142150);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143D08);
  }
  return result;
}

uint64_t sub_1000A7B48()
{
  return sub_10009A0E0(*(void *)(v0 + 16), type metadata accessor for APHighlightTitle);
}

uint64_t sub_1000A7B7C()
{
  return sub_10009A0E0(*(void *)(v0 + 16), type metadata accessor for APHighlightTitle);
}

unint64_t sub_1000A7BB4()
{
  unint64_t result = qword_100143D18;
  if (!qword_100143D18)
  {
    sub_10000B448(&qword_100143D20);
    sub_1000A6B0C();
    sub_1000A7228(&qword_100143BF8, &qword_100143B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143D18);
  }
  return result;
}

uint64_t sub_1000A7C50(uint64_t a1)
{
  return sub_1000A7CA0(a1, &qword_100143C38, &qword_100143CA8, (void (*)(void))sub_1000A77C4);
}

uint64_t sub_1000A7C78(uint64_t a1)
{
  return sub_1000A7CA0(a1, &qword_100143CC8, &qword_100143CE0, (void (*)(void))sub_1000A7A18);
}

uint64_t sub_1000A7CA0(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AccessPointRequiredData.useCase.getter()
{
  return *v0;
}

uint64_t AccessPointRequiredData.player.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000062A4(v1 + 8, a1);
}

uint64_t InGameBannerRequiredData.title.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InGameBannerRequiredData.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InGameBannerRequiredData.image.getter()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_1000244B8(v1, *(void *)(v0 + 200));
  return v1;
}

uint64_t InGameBannerRequiredData.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InGameBannerRequiredData.game.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for InGameBannerRequiredData() + 40);

  return sub_1000A7E9C(v3, a1);
}

uint64_t type metadata accessor for InGameBannerRequiredData()
{
  uint64_t result = qword_100143DB0;
  if (!qword_100143DB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A7E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t InGameBannerRequiredData.playerIDs.getter()
{
  type metadata accessor for InGameBannerRequiredData();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A7F38()
{
  uint64_t result = 0x65736143657375;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x726579616C70;
      break;
    case 2:
      uint64_t result = 0x656C746974;
      break;
    case 3:
      uint64_t result = 0x6567617373656DLL;
      break;
    case 4:
      uint64_t result = 0x6567616D69;
      break;
    case 5:
      uint64_t result = 0x696669746E656469;
      break;
    case 6:
      uint64_t result = 1701667175;
      break;
    case 7:
      uint64_t result = 0x4449726579616C70;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000A8028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AAD0C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A8050(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1000A805C(uint64_t a1)
{
  unint64_t v2 = sub_1000A843C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A8098(uint64_t a1)
{
  unint64_t v2 = sub_1000A843C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InGameBannerRequiredData.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_100143D28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006650(a1, a1[3]);
  sub_1000A843C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v28 = *v3;
  char v27 = 0;
  sub_100041750();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 120);
    long long v23 = *(_OWORD *)(v3 + 104);
    long long v24 = v9;
    long long v25 = *(_OWORD *)(v3 + 136);
    uint64_t v26 = *((void *)v3 + 19);
    long long v10 = *(_OWORD *)(v3 + 56);
    long long v19 = *(_OWORD *)(v3 + 40);
    long long v20 = v10;
    long long v11 = *(_OWORD *)(v3 + 88);
    long long v21 = *(_OWORD *)(v3 + 72);
    long long v22 = v11;
    long long v12 = *(_OWORD *)(v3 + 24);
    long long v17 = *(_OWORD *)(v3 + 8);
    long long v18 = v12;
    char v16 = 1;
    sub_1000066E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v17) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v17) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v17 = *((_OWORD *)v3 + 12);
    char v16 = 4;
    sub_100043B30();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v13 = type metadata accessor for InGameBannerRequiredData();
    LOBYTE(v17) = 6;
    type metadata accessor for Game();
    sub_100086B7C(&qword_100142C58);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v17 = *(void *)&v3[*(int *)(v13 + 44)];
    char v16 = 7;
    sub_100005B18(&qword_100143D38);
    sub_1000A8C34(&qword_100143D40);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000A843C()
{
  unint64_t result = qword_100143D30;
  if (!qword_100143D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143D30);
  }
  return result;
}

uint64_t InGameBannerRequiredData.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v4 = sub_100005B18(&qword_100140B48);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100005B18(&qword_100143D48);
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for InGameBannerRequiredData();
  __chkstk_darwin(v9);
  long long v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v45 = a1;
  sub_100006650(a1, v12);
  sub_1000A843C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100007188((uint64_t)v45);
  }
  char v28 = v6;
  uint64_t v13 = v30;
  LOBYTE(v33) = 0;
  sub_100041D04();
  uint64_t v14 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = (uint64_t)v11;
  *long long v11 = v35;
  char v34 = 1;
  sub_1000071D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v16 = v42;
  *(_OWORD *)(v11 + 104) = v41;
  *(_OWORD *)(v11 + 120) = v16;
  *(_OWORD *)(v11 + 136) = v43;
  long long v17 = v38;
  *(_OWORD *)(v11 + 40) = v37;
  *(_OWORD *)(v11 + 56) = v17;
  long long v18 = v40;
  *(_OWORD *)(v11 + 72) = v39;
  *(_OWORD *)(v11 + 88) = v18;
  long long v19 = v36;
  *(_OWORD *)(v11 + 8) = v35;
  *((void *)v11 + 19) = v44;
  *(_OWORD *)(v11 + 24) = v19;
  LOBYTE(v33) = 2;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = (uint64_t)v45;
  *((void *)v11 + 20) = v20;
  *((void *)v11 + 21) = v22;
  LOBYTE(v33) = 3;
  *((void *)v11 + 22) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v11 + 23) = v23;
  char v32 = 4;
  sub_10004380C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *((_OWORD *)v11 + 12) = v33;
  LOBYTE(v33) = 5;
  *((void *)v11 + 26) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v11 + 27) = v24;
  type metadata accessor for Game();
  LOBYTE(v33) = 6;
  sub_100086B7C(&qword_100142C68);
  uint64_t v25 = (uint64_t)v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000A8BCC(v25, v15 + *(int *)(v9 + 40));
  sub_100005B18(&qword_100143D38);
  char v32 = 7;
  sub_1000A8C34(&qword_100143D50);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
  *(void *)(v15 + *(int *)(v9 + 44)) = v33;
  sub_1000A8C98(v15, v29);
  sub_100007188(v21);
  return sub_1000A9F14(v15, (uint64_t (*)(void))type metadata accessor for InGameBannerRequiredData);
}

uint64_t sub_1000A8B6C(uint64_t a1)
{
  uint64_t v2 = sub_100005B18(&qword_100140B48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A8BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8C34(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B448(&qword_100143D38);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A8C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InGameBannerRequiredData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8CFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return InGameBannerRequiredData.init(from:)(a1, a2);
}

uint64_t sub_1000A8D14(void *a1)
{
  return InGameBannerRequiredData.encode(to:)(a1);
}

unsigned char *initializeBufferWithCopyOfBuffer for InGameBannerRequiredData(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (unsigned char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    uint64_t v8 = a2[4];
    *((void *)v4 + 3) = a2[3];
    *((void *)v4 + 4) = v8;
    uint64_t v9 = a2[6];
    *((void *)v4 + 5) = a2[5];
    *((void *)v4 + 6) = v9;
    uint64_t v10 = a2[8];
    *((void *)v4 + 7) = a2[7];
    *((void *)v4 + 8) = v10;
    uint64_t v11 = a2[10];
    *((void *)v4 + 9) = a2[9];
    *((void *)v4 + 10) = v11;
    v4[88] = *((unsigned char *)a2 + 88);
    uint64_t v12 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12)
    {
      *((void *)v4 + 12) = a2[12];
      *((void *)v4 + 13) = v12;
      uint64_t v13 = a2[15];
      *((void *)v4 + 14) = a2[14];
      *((void *)v4 + 15) = v13;
      uint64_t v14 = a2[17];
      *((void *)v4 + 16) = a2[16];
      *((void *)v4 + 17) = v14;
      uint64_t v15 = a2[19];
      *((void *)v4 + 18) = a2[18];
      *((void *)v4 + 19) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v17 = *((_OWORD *)a2 + 7);
      *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)v4 + 7) = v17;
      long long v18 = *((_OWORD *)a2 + 9);
      *((_OWORD *)v4 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)v4 + 9) = v18;
    }
    uint64_t v19 = a2[21];
    *((void *)v4 + 20) = a2[20];
    *((void *)v4 + 21) = v19;
    uint64_t v20 = a2[23];
    *((void *)v4 + 22) = a2[22];
    *((void *)v4 + 23) = v20;
    uint64_t v21 = a2 + 24;
    unint64_t v22 = a2[25];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22 >> 60 == 15)
    {
      *((_OWORD *)v4 + 12) = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_1000244CC(*v21, v22);
      *((void *)v4 + 24) = v23;
      *((void *)v4 + 25) = v22;
    }
    uint64_t v24 = a2[27];
    *((void *)v4 + 26) = a2[26];
    *((void *)v4 + 27) = v24;
    uint64_t v25 = *(int *)(v6 + 40);
    uint64_t v26 = &v4[v25];
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    char v28 = (int *)type metadata accessor for Game();
    uint64_t v29 = *((void *)v28 - 1);
    uint64_t v30 = *(unsigned int (**)(void *, uint64_t, int *))(v29 + 48);
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = sub_100005B18(&qword_100140B48);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      uint64_t v46 = v29;
      uint64_t v32 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v32;
      uint64_t v33 = v27[3];
      _OWORD v26[2] = v27[2];
      uint64_t v26[3] = v33;
      uint64_t v34 = v27[5];
      v26[4] = v27[4];
      v26[5] = v34;
      uint64_t v35 = v28[7];
      __dst = (char *)v26 + v35;
      int v48 = (char *)v27 + v35;
      uint64_t v49 = v6;
      uint64_t v36 = type metadata accessor for Date();
      uint64_t v44 = *(void *)(v36 - 8);
      uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47(v48, 1, v36))
      {
        uint64_t v37 = sub_100005B18(&qword_100140C48);
        memcpy(__dst, v48, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(__dst, v48, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v36);
      }
      *(void *)((char *)v26 + v28[8]) = *(void *)((char *)v27 + v28[8]);
      *((unsigned char *)v26 + v28[9]) = *((unsigned char *)v27 + v28[9]);
      *((unsigned char *)v26 + v28[10]) = *((unsigned char *)v27 + v28[10]);
      *((unsigned char *)v26 + v28[11]) = *((unsigned char *)v27 + v28[11]);
      *((unsigned char *)v26 + v28[12]) = *((unsigned char *)v27 + v28[12]);
      *((unsigned char *)v26 + v28[13]) = *((unsigned char *)v27 + v28[13]);
      *((unsigned char *)v26 + v28[14]) = *((unsigned char *)v27 + v28[14]);
      uint64_t v38 = v28[15];
      long long v39 = (void *)((char *)v26 + v38);
      long long v40 = (void *)((char *)v27 + v38);
      uint64_t v41 = v40[1];
      *long long v39 = *v40;
      v39[1] = v41;
      long long v42 = *(void (**)(void *, void, uint64_t, int *))(v46 + 56);
      swift_bridgeObjectRetain();
      v42(v26, 0, 1, v28);
      uint64_t v6 = v49;
    }
    *(void *)&v4[*(int *)(v6 + 44)] = *(uint64_t *)((char *)a2 + *(int *)(v6 + 44));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for InGameBannerRequiredData(void *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[13])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[25];
  if (v4 >> 60 != 15) {
    sub_1000247CC(a1[24], v4);
  }
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v6 = type metadata accessor for Game();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = &v5[*(int *)(v6 + 28)];
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11)
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v11;
    uint64_t v12 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v12;
    uint64_t v13 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v13;
    uint64_t v14 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    long long v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
  }
  uint64_t v17 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v17;
  uint64_t v18 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v18;
  uint64_t v19 = (uint64_t *)(a2 + 192);
  unint64_t v20 = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_1000244CC(*v19, v20);
    *(void *)(a1 + 192) = v21;
    *(void *)(a1 + 200) = v20;
  }
  uint64_t v22 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v22;
  uint64_t v23 = *(int *)(a3 + 40);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = (int *)type metadata accessor for Game();
  uint64_t v27 = *((void *)v26 - 1);
  char v28 = *(unsigned int (**)(void *, uint64_t, int *))(v27 + 48);
  swift_bridgeObjectRetain();
  if (v28(v25, 1, v26))
  {
    uint64_t v29 = sub_100005B18(&qword_100140B48);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v46 = v27;
    uint64_t v47 = a3;
    uint64_t v30 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v30;
    uint64_t v31 = v25[3];
    _OWORD v24[2] = v25[2];
    v24[3] = v31;
    uint64_t v32 = v25[5];
    v24[4] = v25[4];
    v24[5] = v32;
    uint64_t v33 = v26[7];
    uint64_t v44 = (char *)v25 + v33;
    __dst = (char *)v24 + v33;
    uint64_t v34 = type metadata accessor for Date();
    uint64_t v42 = *(void *)(v34 - 8);
    long long v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v43(v44, 1, v34))
    {
      uint64_t v35 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v44, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, v44, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v34);
    }
    *(void *)((char *)v24 + v26[8]) = *(void *)((char *)v25 + v26[8]);
    *((unsigned char *)v24 + v26[9]) = *((unsigned char *)v25 + v26[9]);
    *((unsigned char *)v24 + v26[10]) = *((unsigned char *)v25 + v26[10]);
    *((unsigned char *)v24 + v26[11]) = *((unsigned char *)v25 + v26[11]);
    *((unsigned char *)v24 + v26[12]) = *((unsigned char *)v25 + v26[12]);
    *((unsigned char *)v24 + v26[13]) = *((unsigned char *)v25 + v26[13]);
    *((unsigned char *)v24 + v26[14]) = *((unsigned char *)v25 + v26[14]);
    uint64_t v36 = v26[15];
    uint64_t v37 = (void *)((char *)v24 + v36);
    uint64_t v38 = (void *)((char *)v25 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    long long v40 = *(void (**)(void *, void, uint64_t, int *))(v46 + 56);
    swift_bridgeObjectRetain();
    v40(v24, 0, 1, v26);
    a3 = v47;
  }
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v6 = (_OWORD *)(a1 + 96);
  uint64_t v7 = (long long *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v8)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100006D1C(a1 + 96);
      long long v9 = *(_OWORD *)(a2 + 144);
      long long v11 = *v7;
      long long v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v9;
      *uint64_t v6 = v11;
      *(_OWORD *)(a1 + 112) = v10;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *v7;
    long long v13 = *(_OWORD *)(a2 + 112);
    long long v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    *uint64_t v6 = v12;
    *(_OWORD *)(a1 + 112) = v13;
  }
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v15 = (uint64_t *)(a2 + 192);
  unint64_t v16 = *(void *)(a2 + 200);
  if (*(void *)(a1 + 200) >> 60 == 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *v15;
      sub_1000244CC(*v15, *(void *)(a2 + 200));
      *(void *)(a1 + 192) = v17;
      *(void *)(a1 + 200) = v16;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v16 >> 60 == 15)
  {
    sub_100078C08(a1 + 192);
LABEL_13:
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v15;
    goto LABEL_15;
  }
  uint64_t v18 = *v15;
  sub_1000244CC(*v15, *(void *)(a2 + 200));
  uint64_t v19 = *(void *)(a1 + 192);
  unint64_t v20 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 200) = v16;
  sub_1000247CC(v19, v20);
LABEL_15:
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(int *)(a3 + 40);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = (int *)type metadata accessor for Game();
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, int *))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (v28)
    {
      sub_1000A9F14((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_21;
    }
    uint64_t v57 = a3;
    *uint64_t v22 = *v23;
    v22[1] = v23[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22[2] = v23[2];
    _OWORD v22[3] = v23[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22[4] = v23[4];
    v22[5] = v23[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v34 = v24[7];
    uint64_t v35 = (char *)v22 + v34;
    uint64_t v36 = (char *)v23 + v34;
    uint64_t v37 = type metadata accessor for Date();
    uint64_t v52 = *(void *)(v37 - 8);
    uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
    __dsta = v35;
    LODWORD(v35) = v38(v35, 1, v37);
    int v39 = v38(v36, 1, v37);
    if (v35)
    {
      if (!v39)
      {
        (*(void (**)(void *, char *, uint64_t))(v52 + 16))(__dsta, v36, v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(__dsta, 0, 1, v37);
        goto LABEL_32;
      }
      size_t v40 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v41 = __dsta;
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, char *, uint64_t))(v52 + 24))(__dsta, v36, v37);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v52 + 8))(__dsta, v37);
      size_t v40 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v41 = __dsta;
    }
    memcpy(v41, v36, v40);
LABEL_32:
    a3 = v57;
    *(void *)((char *)v22 + v24[8]) = *(void *)((char *)v23 + v24[8]);
    *((unsigned char *)v22 + v24[9]) = *((unsigned char *)v23 + v24[9]);
    *((unsigned char *)v22 + v24[10]) = *((unsigned char *)v23 + v24[10]);
    *((unsigned char *)v22 + v24[11]) = *((unsigned char *)v23 + v24[11]);
    *((unsigned char *)v22 + v24[12]) = *((unsigned char *)v23 + v24[12]);
    *((unsigned char *)v22 + v24[13]) = *((unsigned char *)v23 + v24[13]);
    *((unsigned char *)v22 + v24[14]) = *((unsigned char *)v23 + v24[14]);
    uint64_t v46 = v24[15];
    uint64_t v47 = (void *)((char *)v22 + v46);
    int v48 = (void *)((char *)v23 + v46);
    *uint64_t v47 = *v48;
    v47[1] = v48[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if (v28)
  {
LABEL_21:
    uint64_t v33 = sub_100005B18(&qword_100140B48);
    memcpy(v22, v23, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_33;
  }
  uint64_t v56 = a3;
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  v22[2] = v23[2];
  _OWORD v22[3] = v23[3];
  v22[4] = v23[4];
  v22[5] = v23[5];
  uint64_t v29 = v24[7];
  __src = (char *)v23 + v29;
  __dst = (char *)v22 + v29;
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v50 = *(void *)(v30 - 8);
  uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  uint64_t v31 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v51(__src, 1, v31))
  {
    uint64_t v32 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, __src, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(__dst, __src, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v31);
  }
  a3 = v56;
  *(void *)((char *)v22 + v24[8]) = *(void *)((char *)v23 + v24[8]);
  *((unsigned char *)v22 + v24[9]) = *((unsigned char *)v23 + v24[9]);
  *((unsigned char *)v22 + v24[10]) = *((unsigned char *)v23 + v24[10]);
  *((unsigned char *)v22 + v24[11]) = *((unsigned char *)v23 + v24[11]);
  *((unsigned char *)v22 + v24[12]) = *((unsigned char *)v23 + v24[12]);
  *((unsigned char *)v22 + v24[13]) = *((unsigned char *)v23 + v24[13]);
  *((unsigned char *)v22 + v24[14]) = *((unsigned char *)v23 + v24[14]);
  uint64_t v42 = v24[15];
  long long v43 = (void *)((char *)v22 + v42);
  uint64_t v44 = (void *)((char *)v23 + v42);
  void *v43 = *v44;
  v43[1] = v44[1];
  uint64_t v45 = *(void (**)(void *, void, uint64_t, int *))(v25 + 56);
  swift_bridgeObjectRetain();
  v45(v22, 0, 1, v24);
LABEL_33:
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A9F14(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  long long v7 = *(_OWORD *)(a2 + 208);
  uint64_t v8 = *(int *)(a3 + 40);
  long long v9 = (_OWORD *)(a1 + v8);
  long long v10 = (_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  long long v11 = (int *)type metadata accessor for Game();
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100005B18(&qword_100140B48);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    long long v14 = v10[1];
    *long long v9 = *v10;
    v9[1] = v14;
    _OWORD v9[2] = v10[2];
    uint64_t v15 = v11[7];
    __dst = (char *)v9 + v15;
    unint64_t v16 = (char *)v10 + v15;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    *(void *)((char *)v9 + v11[8]) = *(void *)((char *)v10 + v11[8]);
    *((unsigned char *)v9 + v11[9]) = *((unsigned char *)v10 + v11[9]);
    *((unsigned char *)v9 + v11[10]) = *((unsigned char *)v10 + v11[10]);
    *((unsigned char *)v9 + v11[11]) = *((unsigned char *)v10 + v11[11]);
    *((unsigned char *)v9 + v11[12]) = *((unsigned char *)v10 + v11[12]);
    *((unsigned char *)v9 + v11[13]) = *((unsigned char *)v10 + v11[13]);
    *((unsigned char *)v9 + v11[14]) = *((unsigned char *)v10 + v11[14]);
    *(_OWORD *)((char *)v9 + v11[15]) = *(_OWORD *)((char *)v10 + v11[15]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t assignWithTake for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  if (*(void *)(a1 + 104))
  {
    uint64_t v11 = *(void *)(a2 + 104);
    if (v11)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100006D1C(a1 + 96);
  }
  long long v15 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v15;
  long long v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v16;
LABEL_6:
  uint64_t v17 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = (_OWORD *)(a2 + 192);
  unint64_t v20 = *(void *)(a1 + 200);
  if (v20 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 192) = *v19;
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)(a2 + 200);
  if (v21 >> 60 == 15)
  {
    sub_100078C08(a1 + 192);
    goto LABEL_9;
  }
  uint64_t v22 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)v19;
  *(void *)(a1 + 200) = v21;
  sub_1000247CC(v22, v20);
LABEL_11:
  uint64_t v23 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(int *)(a3 + 40);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  int v27 = (int *)type metadata accessor for Game();
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, int *))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (v31)
    {
      sub_1000A9F14((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for Game);
      goto LABEL_17;
    }
    uint64_t v60 = a3;
    uint64_t v40 = v26[1];
    void *v25 = *v26;
    v25[1] = v40;
    swift_bridgeObjectRelease();
    uint64_t v41 = v26[3];
    void v25[2] = v26[2];
    v25[3] = v41;
    swift_bridgeObjectRelease();
    uint64_t v42 = v26[5];
    v25[4] = v26[4];
    v25[5] = v42;
    swift_bridgeObjectRelease();
    uint64_t v43 = v27[7];
    uint64_t v44 = (char *)v25 + v43;
    uint64_t v45 = (char *)v26 + v43;
    uint64_t v46 = type metadata accessor for Date();
    uint64_t v57 = *(void *)(v46 - 8);
    uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
    uint64_t v58 = v44;
    LODWORD(v44) = v47(v44, 1, v46);
    int v48 = v47(v45, 1, v46);
    if (v44)
    {
      if (!v48)
      {
        (*(void (**)(void *, char *, uint64_t))(v57 + 32))(v58, v45, v46);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v46);
        goto LABEL_28;
      }
      size_t v49 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v50 = v58;
    }
    else
    {
      if (!v48)
      {
        (*(void (**)(void *, char *, uint64_t))(v57 + 40))(v58, v45, v46);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v57 + 8))(v58, v46);
      size_t v49 = *(void *)(*(void *)(sub_100005B18(&qword_100140C48) - 8) + 64);
      uint64_t v50 = v58;
    }
    memcpy(v50, v45, v49);
LABEL_28:
    *(void *)((char *)v25 + v27[8]) = *(void *)((char *)v26 + v27[8]);
    *((unsigned char *)v25 + v27[9]) = *((unsigned char *)v26 + v27[9]);
    *((unsigned char *)v25 + v27[10]) = *((unsigned char *)v26 + v27[10]);
    *((unsigned char *)v25 + v27[11]) = *((unsigned char *)v26 + v27[11]);
    *((unsigned char *)v25 + v27[12]) = *((unsigned char *)v26 + v27[12]);
    *((unsigned char *)v25 + v27[13]) = *((unsigned char *)v26 + v27[13]);
    *((unsigned char *)v25 + v27[14]) = *((unsigned char *)v26 + v27[14]);
    uint64_t v51 = v27[15];
    uint64_t v52 = (void *)((char *)v25 + v51);
    uint64_t v53 = (void *)((char *)v26 + v51);
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    *uint64_t v52 = v55;
    v52[1] = v54;
    swift_bridgeObjectRelease();
    a3 = v60;
    goto LABEL_29;
  }
  if (v31)
  {
LABEL_17:
    uint64_t v39 = sub_100005B18(&qword_100140B48);
    memcpy(v25, v26, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v59 = a3;
  long long v32 = *((_OWORD *)v26 + 1);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v32;
  *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
  uint64_t v33 = v27[7];
  uint64_t v34 = (char *)v25 + v33;
  uint64_t v35 = (char *)v26 + v33;
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = sub_100005B18(&qword_100140C48);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  a3 = v59;
  *(void *)((char *)v25 + v27[8]) = *(void *)((char *)v26 + v27[8]);
  *((unsigned char *)v25 + v27[9]) = *((unsigned char *)v26 + v27[9]);
  *((unsigned char *)v25 + v27[10]) = *((unsigned char *)v26 + v27[10]);
  *((unsigned char *)v25 + v27[11]) = *((unsigned char *)v26 + v27[11]);
  *((unsigned char *)v25 + v27[12]) = *((unsigned char *)v26 + v27[12]);
  *((unsigned char *)v25 + v27[13]) = *((unsigned char *)v26 + v27[13]);
  *((unsigned char *)v25 + v27[14]) = *((unsigned char *)v26 + v27[14]);
  *(_OWORD *)((char *)v25 + v27[15]) = *(_OWORD *)((char *)v26 + v27[15]);
  (*(void (**)(void *, void, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
LABEL_29:
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA86C);
}

uint64_t sub_1000AA86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100005B18(&qword_100140B48);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for InGameBannerRequiredData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AA934);
}

uint64_t sub_1000AA934(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100005B18(&qword_100140B48);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000AA9E0()
{
  sub_1000AAAA8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000AAAA8()
{
  if (!qword_100140CD0)
  {
    type metadata accessor for Game();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100140CD0);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for InGameBannerRequiredData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AABCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InGameBannerRequiredData.CodingKeys()
{
  return &type metadata for InGameBannerRequiredData.CodingKeys;
}

unint64_t sub_1000AAC08()
{
  unint64_t result = qword_100143E00;
  if (!qword_100143E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E00);
  }
  return result;
}

unint64_t sub_1000AAC60()
{
  unint64_t result = qword_100143E08;
  if (!qword_100143E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E08);
  }
  return result;
}

unint64_t sub_1000AACB8()
{
  unint64_t result = qword_100143E10;
  if (!qword_100143E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E10);
  }
  return result;
}

uint64_t sub_1000AAD0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65736143657375 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726579616C70 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1701667175 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4449726579616C70 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t Game.init(with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_100005B18(&qword_100140C48);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100069708(0, &qword_1001422B0);
  sub_100069708(0, &qword_1001422B8);
  uint64_t result = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v3) {
    return sub_1000247CC(a1, a2);
  }
  uint64_t v11 = (void *)result;
  if (result)
  {
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
    sub_1000AB30C(v11, (uint64_t)v9, a3);
    return sub_1000247CC(a1, a2);
  }
  __break(1u);
  return result;
}

uint64_t Game.lastPlayedAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Game() + 28);

  return sub_1000AB89C(v3, a1);
}

uint64_t Game.compatiblePlatforms.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Game() + 32));
}

uint64_t Game.isInstalled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game() + 36));
}

uint64_t Game.isArcade.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game() + 40));
}

uint64_t Game.supportsAchievements.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game() + 44));
}

uint64_t Game.supportsChallenges.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game() + 48));
}

uint64_t Game.supportsLeaderboardSets.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game() + 52));
}

uint64_t Game.supportsLeaderboards.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Game() + 56));
}

uint64_t Game.iconTemplate.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Game() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

id sub_1000AB30C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v6 = [a1 bundleIdentifier];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *a3 = v7;
  a3[1] = v9;
  id v10 = [a1 adamID];
  id v11 = [v10 stringValue];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  a3[2] = v12;
  a3[3] = v14;
  id v15 = [a1 name];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  a3[4] = v16;
  a3[5] = v18;
  uint64_t v19 = (int *)type metadata accessor for Game();
  sub_1000AB89C(a2, (uint64_t)a3 + v19[7]);
  id v20 = [a1 compatiblePlatforms];
  uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  char v22 = sub_1000AC524((uint64_t)&v42, v21);
  sub_100086324((uint64_t)&v42);
  *(void *)&long long v40 = 7565161;
  *((void *)&v40 + 1) = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  char v23 = sub_1000AC524((uint64_t)&v42, v21);
  sub_100086324((uint64_t)&v42);
  if (v23) {
    uint64_t v24 = v22 & 1 | 2;
  }
  else {
    uint64_t v24 = v22 & 1;
  }
  *(void *)&long long v40 = 0x6F7674656C707061;
  *((void *)&v40 + 1) = 0xE900000000000073;
  AnyHashable.init<A>(_:)();
  char v25 = sub_1000AC524((uint64_t)&v42, v21);
  sub_100086324((uint64_t)&v42);
  swift_bridgeObjectRelease();
  uint64_t v26 = v24 | 4;
  if ((v25 & 1) == 0) {
    uint64_t v26 = v24;
  }
  *(uint64_t *)((char *)a3 + v19[8]) = v26;
  *((unsigned char *)a3 + v19[10]) = [a1 isArcadeGame];
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v28 = result;
    NSString v29 = [a1 bundleIdentifier];
    if (!v29)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    unsigned __int8 v30 = [v28 applicationIsInstalled:v29];

    *((unsigned char *)a3 + v19[9]) = v30;
    *((unsigned char *)a3 + v19[11]) = [a1 supportsAchievements];
    *((unsigned char *)a3 + v19[12]) = [a1 supportsLeaderboardChallenges];
    *((unsigned char *)a3 + v19[13]) = [a1 supportsLeaderboardSets];
    *((unsigned char *)a3 + v19[14]) = [a1 supportsLeaderboards];
    id v31 = [a1 icons];
    if (v31)
    {
      long long v32 = v31;
      uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      AnyHashable.init<A>(_:)();
      if (*(void *)(v33 + 16) && (unint64_t v34 = sub_1000DC420((uint64_t)&v42), (v35 & 1) != 0))
      {
        sub_100036E88(*(void *)(v33 + 56) + 32 * v34, (uint64_t)&v40);
      }
      else
      {
        long long v40 = 0u;
        long long v41 = 0u;
      }
      sub_100086324((uint64_t)&v42);
      swift_bridgeObjectRelease();
      if (*((void *)&v41 + 1))
      {
        if (swift_dynamicCast())
        {
          strcpy((char *)&v40, "{w}x{h}bb.png");
          HIWORD(v40) = -4864;
          sub_100025F34();
          uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          unint64_t v38 = v37;

          sub_100017388(a2, &qword_100140C48);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id result = (id)swift_bridgeObjectRelease();
LABEL_20:
          uint64_t v39 = (uint64_t *)((char *)a3 + v19[15]);
          *uint64_t v39 = v36;
          v39[1] = v38;
          return result;
        }
LABEL_19:

        id result = (id)sub_100017388(a2, &qword_100140C48);
        uint64_t v36 = 0;
        unint64_t v38 = 0xE000000000000000;
        goto LABEL_20;
      }
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    sub_100017388((uint64_t)&v40, &qword_100142A70);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Game()
{
  uint64_t result = qword_100143EC8;
  if (!qword_100143EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AB89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AB908(char a1)
{
  unint64_t result = 0x4449656C646E7562;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44496D616461;
      break;
    case 2:
      unint64_t result = 1701667182;
      break;
    case 3:
      unint64_t result = 0x79616C507473616CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x6C6174736E497369;
      break;
    case 6:
      unint64_t result = 0x6564616372417369;
      break;
    case 7:
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x706D65546E6F6369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000ABA84()
{
  return sub_1000AB908(*v0);
}

uint64_t sub_1000ABA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AE580(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000ABAB4(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1000ABAC0(uint64_t a1)
{
  unint64_t v2 = sub_1000AD25C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ABAFC(uint64_t a1)
{
  unint64_t v2 = sub_1000AD25C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Game.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005B18(&qword_100143E18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006650(a1, a1[3]);
  sub_1000AD25C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = type metadata accessor for Game();
    LOBYTE(v12) = 3;
    type metadata accessor for Date();
    sub_1000AEA90(&qword_100143E28);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 32));
    v11[7] = 4;
    sub_1000AD2B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Game.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005B18(&qword_100140C48);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100005B18(&qword_100143E38);
  uint64_t v8 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = (int *)type metadata accessor for Game();
  __chkstk_darwin(v25);
  uint64_t v26 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100006650(a1, a1[3]);
  sub_1000AD25C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100007188((uint64_t)a1);
  }
  uint64_t v12 = a2;
  LOBYTE(v28) = 0;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v26;
  *uint64_t v26 = v13;
  v14[1] = v15;
  LOBYTE(v28) = 1;
  v14[2] = KeyedDecodingContainer.decode(_:forKey:)();
  v14[3] = v16;
  LOBYTE(v28) = 2;
  void v14[4] = KeyedDecodingContainer.decode(_:forKey:)();
  v14[5] = v17;
  type metadata accessor for Date();
  LOBYTE(v28) = 3;
  sub_1000AEA90(&qword_100143E40);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000AD304((uint64_t)v7, (uint64_t)v14 + v25[7]);
  char v27 = 4;
  sub_1000AD36C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(uint64_t *)((char *)v14 + v25[8]) = v28;
  LOBYTE(v28) = 5;
  *((unsigned char *)v14 + v25[9]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v28) = 6;
  *((unsigned char *)v14 + v25[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v28) = 7;
  *((unsigned char *)v26 + v25[11]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v28) = 8;
  *((unsigned char *)v26 + v25[12]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v28) = 9;
  *((unsigned char *)v26 + v25[13]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v28) = 10;
  *((unsigned char *)v26 + v25[14]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v28) = 11;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v24);
  uint64_t v21 = (uint64_t)v26;
  char v22 = (uint64_t *)((char *)v26 + v25[15]);
  *char v22 = v18;
  v22[1] = v20;
  sub_100083828(v21, v12);
  sub_100007188((uint64_t)a1);
  return sub_1000AD3C0(v21);
}

uint64_t sub_1000AC4F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Game.init(from:)(a1, a2);
}

uint64_t sub_1000AC50C(void *a1)
{
  return Game.encode(to:)(a1);
}

uint64_t sub_1000AC524(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (Swift::Int v3 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v4 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v5 = v3 & ~v4,
        ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0))
  {
    uint64_t v6 = ~v4;
    do
    {
      sub_1000AEAD4(*(void *)(a2 + 48) + 40 * v5, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)();
      sub_100086324((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_1000AC5FC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000AC65C()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1000AC6AC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000AC6F4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000AC720()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000AC764(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1000AC76C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1000AC780@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000AC794(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000AC7C4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000AC7F0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1000AC814(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000AC828(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000AC83C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000AC850(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000AC864()
{
  return *v0 == 0;
}

uint64_t sub_1000AC874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_1000AC88C(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1000AC8A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1000AEA58(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_1000AC8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100005B18(&qword_100143F58);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  id v11 = [self proxyForPlayer:a2];
  id v12 = [v11 gameServicePrivate];

  sub_100005B18(&qword_1001421A0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10010F300;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_1000AEBC4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ACCAC;
  void aBlock[3] = &unk_100134078;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  [v12 getGameMetadataForBundleIDs:isa handler:v17];
  _Block_release(v17);
  swift_unknownObjectRelease();
}

void sub_1000ACB5C(unint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    sub_100005B18(&qword_100143F58);
    CheckedContinuation.resume(throwing:)();
    return;
  }
  if (!(a1 >> 62))
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1000AEC60();
    swift_allocError();
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_12;
  }
LABEL_6:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v4 = *(id *)(a1 + 32);
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  id v6 = [objc_allocWithZone((Class)GKGame) initWithInternalRepresentation:v5];
  sub_100005B18(&qword_100143F58);
  CheckedContinuation.resume(returning:)();
}

void sub_1000ACCAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  sub_100069708(0, &qword_1001422B8);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t _s13GameOverlayUI0A0V23__derived_struct_equalsySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100005B18(&qword_100143F48);
  __chkstk_darwin(v8);
  uint64_t v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100005B18(&qword_100140C48);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v35[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v35[-v18];
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v21 = 0;
    if ((v20 & 1) == 0) {
      return v21 & 1;
    }
  }
  if (a1[2] != a2[2] || a1[3] != a2[3])
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v21 = 0;
    if ((v22 & 1) == 0) {
      return v21 & 1;
    }
  }
  if (a1[4] != a2[4] || a1[5] != a2[5])
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v21 = 0;
    if ((v23 & 1) == 0) {
      return v21 & 1;
    }
  }
  unint64_t v37 = v7;
  uint64_t v24 = type metadata accessor for Game();
  sub_1000AB89C((uint64_t)a1 + *(int *)(v24 + 28), (uint64_t)v19);
  unint64_t v38 = (int *)v24;
  sub_1000AB89C((uint64_t)a2 + *(int *)(v24 + 28), (uint64_t)v17);
  uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1000AB89C((uint64_t)v19, (uint64_t)v10);
  sub_1000AB89C((uint64_t)v17, v25);
  uint64_t v39 = v5;
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v10, 1, v4) != 1)
  {
    sub_1000AB89C((uint64_t)v10, (uint64_t)v14);
    if (v26(v25, 1, v4) != 1)
    {
      uint64_t v27 = v39;
      uint64_t v28 = v37;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v39 + 32))(v37, v25, v4);
      sub_1000AEA90(&qword_100143F50);
      int v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      NSString v29 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
      v29(v28, v4);
      sub_100017388((uint64_t)v17, &qword_100140C48);
      sub_100017388((uint64_t)v19, &qword_100140C48);
      v29(v14, v4);
      sub_100017388((uint64_t)v10, &qword_100140C48);
      if ((v36 & 1) == 0)
      {
LABEL_24:
        char v21 = 0;
        return v21 & 1;
      }
      goto LABEL_17;
    }
    sub_100017388((uint64_t)v17, &qword_100140C48);
    sub_100017388((uint64_t)v19, &qword_100140C48);
    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v14, v4);
LABEL_15:
    sub_100017388((uint64_t)v10, &qword_100143F48);
    char v21 = 0;
    return v21 & 1;
  }
  sub_100017388((uint64_t)v17, &qword_100140C48);
  sub_100017388((uint64_t)v19, &qword_100140C48);
  if (v26(v25, 1, v4) != 1) {
    goto LABEL_15;
  }
  sub_100017388((uint64_t)v10, &qword_100140C48);
LABEL_17:
  if (*(void *)((char *)a1 + v38[8]) != *(void *)((char *)a2 + v38[8])
    || *((unsigned __int8 *)a1 + v38[9]) != *((unsigned __int8 *)a2 + v38[9])
    || *((unsigned __int8 *)a1 + v38[10]) != *((unsigned __int8 *)a2 + v38[10])
    || *((unsigned __int8 *)a1 + v38[11]) != *((unsigned __int8 *)a2 + v38[11])
    || *((unsigned __int8 *)a1 + v38[12]) != *((unsigned __int8 *)a2 + v38[12])
    || *((unsigned __int8 *)a1 + v38[13]) != *((unsigned __int8 *)a2 + v38[13])
    || *((unsigned __int8 *)a1 + v38[14]) != *((unsigned __int8 *)a2 + v38[14]))
  {
    goto LABEL_24;
  }
  uint64_t v31 = v38[15];
  uint64_t v32 = *(void *)((char *)a1 + v31);
  uint64_t v33 = *(void *)((char *)a1 + v31 + 8);
  unint64_t v34 = (void *)((char *)a2 + v31);
  if (v32 == *v34 && v33 == v34[1]) {
    char v21 = 1;
  }
  else {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v21 & 1;
}

unint64_t sub_1000AD25C()
{
  unint64_t result = qword_100143E20;
  if (!qword_100143E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E20);
  }
  return result;
}

unint64_t sub_1000AD2B0()
{
  unint64_t result = qword_100143E30;
  if (!qword_100143E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E30);
  }
  return result;
}

uint64_t sub_1000AD304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005B18(&qword_100140C48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AD36C()
{
  unint64_t result = qword_100143E48;
  if (!qword_100143E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E48);
  }
  return result;
}

uint64_t sub_1000AD3C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Game();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000AD420()
{
  unint64_t result = qword_100143E50;
  if (!qword_100143E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E50);
  }
  return result;
}

unint64_t sub_1000AD478()
{
  unint64_t result = qword_100143E58;
  if (!qword_100143E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E58);
  }
  return result;
}

unint64_t sub_1000AD4D0()
{
  unint64_t result = qword_100143E60;
  if (!qword_100143E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E60);
  }
  return result;
}

unint64_t sub_1000AD528()
{
  unint64_t result = qword_100143E68;
  if (!qword_100143E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100143E68);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Game(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    uint64_t v10 = a3[7];
    __dst = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v24(v11, 1, v12))
    {
      uint64_t v14 = sub_100005B18(&qword_100140C48);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v16 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *((unsigned char *)v4 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v17 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *((unsigned char *)v4 + v17) = *((unsigned char *)a2 + v17);
    uint64_t v18 = a3[13];
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *((unsigned char *)v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[15];
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    char v20 = (void *)((char *)v4 + v19);
    char v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *char v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Game(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Game(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  uint64_t v9 = a3[7];
  __dst = (char *)a1 + v9;
  uint64_t v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22(v10, 1, v11))
  {
    uint64_t v13 = sub_100005B18(&qword_100140C48);
    memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v14 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  uint64_t v16 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
  uint64_t v17 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Game(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100005B18(&qword_100140C48);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v15 = a3[15];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for Game(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100005B18(&qword_100140C48);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
  uint64_t v14 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  uint64_t v16 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  return a1;
}

void *assignWithTake for Game(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100005B18(&qword_100140C48);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  uint64_t v19 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  uint64_t v20 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
  uint64_t v21 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v22 = (void *)((char *)a1 + v21);
  char v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Game(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AE048);
}

uint64_t sub_1000AE048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100005B18(&qword_100140C48);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}